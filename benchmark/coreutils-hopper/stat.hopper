
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/stat
        UUID: E8B27F0A-E0B5-AB22-53B0-D231047C4072
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x11d30[ (73008 bytes)
        ; File offset : [0; 73008[ (73008 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0xb0 ; '.'
0000000000000019         db  0x27 ; '''
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xa8 ; '.'
0000000000000029         db  0xb3 ; '.'
000000000000002a         db  0x05 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x30 ; '0'
00000000000000d1         db  0x1d ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x30 ; '0'
00000000000000d9         db  0x1d ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xb0 ; '.'
00000000000000f1         db  0x29 ; ')'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xb0 ; '.'
00000000000000f9         db  0x29 ; ')'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xb0 ; '.'                                         ; DATA XREF=strmode+116, quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0x29 ; ')'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xf0 ; '.'
0000000000000109         db  0x06 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x50 ; 'P'
0000000000000111         db  0x09 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x18 ; '.'
0000000000000129         db  0x2b ; '+'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x18 ; '.'
0000000000000131         db  0x2b ; '+'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x18 ; '.'                                         ; DATA XREF=find_bind_mount+9, find_bind_mount+213
0000000000000139         db  0x2b ; '+'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'                                         ; DATA XREF=find_mount_point+29
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'                                         ; DATA XREF=sub_6a20+411, sub_6a20+482, sub_74d9+3
000000000000016e         db  0x00 ; '.'                                         ; DATA XREF=sub_6a20+445, sub_74d9+37, sub_74d9+68
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'                                         ; DATA XREF=sub_6a20+352, sub_6a20+502, sub_74d9+89
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'                                         ; DATA XREF=print_statfs+2985
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'                                         ; DATA XREF=sub_6a20+332, sub_6a20+467, sub_74d9+53
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xfc ; '.'
0000000000000199         db  0x01 ; '.'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xfc ; '.'
00000000000001a1         db  0x01 ; '.'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xfc ; '.'
00000000000001a9         db  0x01 ; '.'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x34 ; '4'
00000000000001b1         db  0x04 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x34 ; '4'
00000000000001b9         db  0x04 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=print_stat+277, print_stat+1168, strmode+304
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xb0 ; '.'
0000000000000209         db  0x29 ; ')'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xb0 ; '.'
0000000000000211         db  0x29 ; ')'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xb0 ; '.'
0000000000000219         db  0x29 ; ')'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x50 ; 'P'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x50 ; 'P'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0xe8 ; '.'
0000000000000285         db  0xb2 ; '.'
0000000000000286         db  0x7f ; '.'
0000000000000287         db  0x0a ; '.'
0000000000000288         db  0xe0 ; '.'
0000000000000289         db  0xb5 ; '.'
000000000000028a         db  0xab ; '.'
000000000000028b         db  0x22 ; '"'
000000000000028c         db  0x53 ; 'S'
000000000000028d         db  0xb0 ; '.'
000000000000028e         db  0xd2 ; '.'
000000000000028f         db  0x31 ; '1'
0000000000000290         db  0x04 ; '.'
0000000000000291         db  0x7c ; '|'
0000000000000292         db  0x40 ; '@'
0000000000000293         db  0x72 ; 'r'
0000000000000294         db  0x85 ; '.'
0000000000000295         db  0xb8 ; '.'
0000000000000296         db  0x08 ; '.'
0000000000000297         db  0xdf ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x5b ; '['
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x5b ; '['
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x5c ; '\'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x61 ; 'a'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x32 ; '2'
00000000000002d5         db  0xc4 ; '.'
00000000000002d6         db  0xf7 ; '.'
00000000000002d7         db  0x12 ; '.'
00000000000002d8         db  0xb3 ; '.'
00000000000002d9         db  0xa2 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xc28[ (2376 bytes)
        ; File offset : [736; 3112[ (2376 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0xc5 ; '.'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xf2 ; '.'
0000000000000311         db  0x01 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x19 ; '.'
0000000000000329         db  0x02 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x68 ; 'h'
0000000000000341         db  0x03 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x7f ; '.'
0000000000000359         db  0x02 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xb2 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x5e ; '^'
0000000000000389         db  0x01 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x47 ; 'G'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0xcc ; '.'
00000000000003b9         db  0x03 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x20 ; ' '
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x03 ; '.'
00000000000003d1         db  0x01 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0xb8 ; '.'
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x12 ; '.'                                         ; DATA XREF=strmode+235, __strftime_internal+1020, rpl_fcntl+288
0000000000000401         db  0x00 ; '.'                                         ; DATA XREF=areadlink_with_size+4, areadlink_with_size+46, rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x6d ; 'm'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x4c ; 'L'
0000000000000431         db  0x01 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x28 ; '('
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0xfc ; '.'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x78 ; 'x'
0000000000000479         db  0x01 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x23 ; '#'
0000000000000491         db  0x03 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0xa1 ; '.'
00000000000004a9         db  0x01 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x68 ; 'h'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'                                         ; DATA XREF=__strftime_internal+19, __strftime_internal+233
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x1f ; '.'
00000000000004d9         db  0x03 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x5e ; '^'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x0f ; '.'
0000000000000509         db  0x01 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x3e ; '>'
0000000000000521         db  0x01 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x98 ; '.'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x10 ; '.'
0000000000000551         db  0x03 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x72 ; 'r'
0000000000000569         db  0x00 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x87 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x31 ; '1'
0000000000000599         db  0x02 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x39 ; '9'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x78 ; 'x'
00000000000005c9         db  0x02 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x78 ; 'x'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x4e ; 'N'
00000000000005f9         db  0x03 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x56 ; 'V'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x19 ; '.'
0000000000000629         db  0x00 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x94 ; '.'
0000000000000641         db  0x01 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xf5 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x45 ; 'E'
0000000000000671         db  0x01 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x4d ; 'M'
0000000000000689         db  0x02 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xae ; '.'
00000000000006a1         db  0x02 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0xa2 ; '.'
00000000000006b9         db  0x01 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0xcd ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0xbe ; '.'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x35 ; '5'
0000000000000701         db  0x03 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x6f ; 'o'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x59 ; 'Y'
0000000000000731         db  0x03 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x37 ; '7'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x54 ; 'T'
0000000000000761         db  0x02 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x2e ; '.'
0000000000000779         db  0x03 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0xe8 ; '.'
0000000000000791         db  0x03 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x20 ; ' '
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x26 ; '&'
00000000000007a9         db  0x01 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x9a ; '.'                                         ; DATA XREF=print_statfs+2064
00000000000007c1         db  0x01 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xc8 ; '.'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x46 ; 'F'
00000000000007f1         db  0x02 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'                                         ; DATA XREF=strmode+166
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x66 ; 'f'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x17 ; '.'
0000000000000821         db  0x03 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0xb2 ; '.'
0000000000000839         db  0x01 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x0b ; '.'
0000000000000851         db  0x00 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xa8 ; '.'
0000000000000869         db  0x01 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x2d ; '-'
0000000000000881         db  0x01 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0xce ; '.'
0000000000000899         db  0x01 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x3d ; '='
00000000000008b1         db  0x02 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xf9 ; '.'
00000000000008c9         db  0x01 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x89 ; '.'
00000000000008e1         db  0x02 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x07 ; '.'
00000000000008f9         db  0x02 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x71 ; 'q'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0xaa ; '.'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x2f ; '/'
0000000000000941         db  0x00 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x22 ; '"'
0000000000000959         db  0x00 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0xb9 ; '.'
0000000000000971         db  0x01 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0xec ; '.'
0000000000000989         db  0x00 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x81 ; '.'
00000000000009a1         db  0x00 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xc5 ; '.'
00000000000009b9         db  0x00 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0x42 ; 'B'
00000000000009d1         db  0x00 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x47 ; 'G'
00000000000009e9         db  0x03 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x41 ; 'A'
0000000000000a01         db  0x00 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x76 ; 'v'
0000000000000a19         db  0x01 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x12 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x00 ; '.'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x88 ; '.'
0000000000000a31         db  0x03 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x12 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x00 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x00 ; '.'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xb9 ; '.'
0000000000000a49         db  0x00 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x12 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x00 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x00 ; '.'
0000000000000a51         db  0x00 ; '.'
0000000000000a52         db  0x00 ; '.'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x5f ; '_'
0000000000000a61         db  0x02 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x12 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x00 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x00 ; '.'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x00 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x7f ; '.'
0000000000000a79         db  0x01 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x12 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x00 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x00 ; '.'
0000000000000a81         db  0x00 ; '.'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x00 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0xf7 ; '.'
0000000000000a91         db  0x03 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x20 ; ' '
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x00 ; '.'
0000000000000a99         db  0x00 ; '.'
0000000000000a9a         db  0x00 ; '.'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x00 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0xc0 ; '.'
0000000000000aa9         db  0x01 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x12 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x00 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0x00 ; '.'
0000000000000ab1         db  0x00 ; '.'
0000000000000ab2         db  0x00 ; '.'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x00 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0xa1 ; '.'
0000000000000ac1         db  0x00 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x12 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x00 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0x00 ; '.'
0000000000000ac9         db  0x00 ; '.'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x00 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0xda ; '.'
0000000000000ad9         db  0x01 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x12 ; '.'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x00 ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x00 ; '.'
0000000000000ae1         db  0x00 ; '.'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x00 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0xed ; '.'
0000000000000af1         db  0x02 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x22 ; '"'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0x00 ; '.'
0000000000000af9         db  0x00 ; '.'
0000000000000afa         db  0x00 ; '.'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x00 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'
0000000000000b08         db  0x57 ; 'W'
0000000000000b09         db  0x01 ; '.'
0000000000000b0a         db  0x00 ; '.'
0000000000000b0b         db  0x00 ; '.'
0000000000000b0c         db  0x12 ; '.'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x00 ; '.'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0x00 ; '.'
0000000000000b11         db  0x00 ; '.'
0000000000000b12         db  0x00 ; '.'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x00 ; '.'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x00 ; '.'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0xd9 ; '.'
0000000000000b21         db  0x02 ; '.'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x12 ; '.'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x00 ; '.'
0000000000000b28         db  0x00 ; '.'
0000000000000b29         db  0x00 ; '.'
0000000000000b2a         db  0x00 ; '.'
0000000000000b2b         db  0x00 ; '.'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x00 ; '.'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x00 ; '.'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x00 ; '.'
0000000000000b38         db  0xe4 ; '.'
0000000000000b39         db  0x01 ; '.'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'
0000000000000b3c         db  0x12 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x00 ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0x00 ; '.'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x00 ; '.'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x00 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x00 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x00 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x00 ; '.'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0x02 ; '.'
0000000000000b51         db  0x03 ; '.'
0000000000000b52         db  0x00 ; '.'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x12 ; '.'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x00 ; '.'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0x00 ; '.'
0000000000000b59         db  0x00 ; '.'
0000000000000b5a         db  0x00 ; '.'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x00 ; '.'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x00 ; '.'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x00 ; '.'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x00 ; '.'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x00 ; '.'
0000000000000b65         db  0x00 ; '.'
0000000000000b66         db  0x00 ; '.'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0x8d ; '.'
0000000000000b69         db  0x01 ; '.'
0000000000000b6a         db  0x00 ; '.'
0000000000000b6b         db  0x00 ; '.'
0000000000000b6c         db  0x11 ; '.'
0000000000000b6d         db  0x00 ; '.'
0000000000000b6e         db  0x19 ; '.'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0xa8 ; '.'
0000000000000b71         db  0x30 ; '0'
0000000000000b72         db  0x21 ; '!'
0000000000000b73         db  0x00 ; '.'
0000000000000b74         db  0x00 ; '.'
0000000000000b75         db  0x00 ; '.'
0000000000000b76         db  0x00 ; '.'
0000000000000b77         db  0x00 ; '.'
0000000000000b78         db  0x08 ; '.'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x00 ; '.'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x00 ; '.'
0000000000000b7d         db  0x00 ; '.'
0000000000000b7e         db  0x00 ; '.'
0000000000000b7f         db  0x00 ; '.'
0000000000000b80         db  0x6d ; 'm'
0000000000000b81         db  0x03 ; '.'
0000000000000b82         db  0x00 ; '.'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x11 ; '.'
0000000000000b85         db  0x00 ; '.'
0000000000000b86         db  0x19 ; '.'
0000000000000b87         db  0x00 ; '.'
0000000000000b88         db  0xa0 ; '.'
0000000000000b89         db  0x30 ; '0'
0000000000000b8a         db  0x21 ; '!'
0000000000000b8b         db  0x00 ; '.'
0000000000000b8c         db  0x00 ; '.'
0000000000000b8d         db  0x00 ; '.'
0000000000000b8e         db  0x00 ; '.'
0000000000000b8f         db  0x00 ; '.'
0000000000000b90         db  0x08 ; '.'
0000000000000b91         db  0x00 ; '.'
0000000000000b92         db  0x00 ; '.'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x00 ; '.'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x00 ; '.'
0000000000000b97         db  0x00 ; '.'
0000000000000b98         db  0xd4 ; '.'
0000000000000b99         db  0x00 ; '.'
0000000000000b9a         db  0x00 ; '.'
0000000000000b9b         db  0x00 ; '.'
0000000000000b9c         db  0x21 ; '!'
0000000000000b9d         db  0x00 ; '.'
0000000000000b9e         db  0x19 ; '.'
0000000000000b9f         db  0x00 ; '.'
0000000000000ba0         db  0xc0 ; '.'
0000000000000ba1         db  0x30 ; '0'
0000000000000ba2         db  0x21 ; '!'
0000000000000ba3         db  0x00 ; '.'
0000000000000ba4         db  0x00 ; '.'
0000000000000ba5         db  0x00 ; '.'
0000000000000ba6         db  0x00 ; '.'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x08 ; '.'
0000000000000ba9         db  0x00 ; '.'
0000000000000baa         db  0x00 ; '.'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x00 ; '.'
0000000000000bae         db  0x00 ; '.'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0x78 ; 'x'
0000000000000bb1         db  0x03 ; '.'
0000000000000bb2         db  0x00 ; '.'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x11 ; '.'
0000000000000bb5         db  0x00 ; '.'
0000000000000bb6         db  0x19 ; '.'
0000000000000bb7         db  0x00 ; '.'
0000000000000bb8         db  0xc0 ; '.'
0000000000000bb9         db  0x30 ; '0'
0000000000000bba         db  0x21 ; '!'
0000000000000bbb         db  0x00 ; '.'
0000000000000bbc         db  0x00 ; '.'
0000000000000bbd         db  0x00 ; '.'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x00 ; '.'
0000000000000bc0         db  0x08 ; '.'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x00 ; '.'
0000000000000bc3         db  0x00 ; '.'
0000000000000bc4         db  0x00 ; '.'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0x90 ; '.'
0000000000000bc9         db  0x02 ; '.'
0000000000000bca         db  0x00 ; '.'
0000000000000bcb         db  0x00 ; '.'
0000000000000bcc         db  0x21 ; '!'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x19 ; '.'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0xa0 ; '.'
0000000000000bd1         db  0x30 ; '0'
0000000000000bd2         db  0x21 ; '!'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x00 ; '.'
0000000000000bd5         db  0x00 ; '.'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x00 ; '.'
0000000000000bd8         db  0x08 ; '.'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x00 ; '.'
0000000000000bdb         db  0x00 ; '.'
0000000000000bdc         db  0x00 ; '.'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x00 ; '.'
0000000000000bdf         db  0x00 ; '.'
0000000000000be0         db  0x12 ; '.'
0000000000000be1         db  0x02 ; '.'
0000000000000be2         db  0x00 ; '.'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x11 ; '.'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x19 ; '.'
0000000000000be7         db  0x00 ; '.'
0000000000000be8         db  0xe0 ; '.'
0000000000000be9         db  0x30 ; '0'
0000000000000bea         db  0x21 ; '!'
0000000000000beb         db  0x00 ; '.'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x00 ; '.'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x08 ; '.'
0000000000000bf1         db  0x00 ; '.'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x00 ; '.'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x00 ; '.'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0x4f ; 'O'
0000000000000bf9         db  0x00 ; '.'
0000000000000bfa         db  0x00 ; '.'
0000000000000bfb         db  0x00 ; '.'
0000000000000bfc         db  0x11 ; '.'
0000000000000bfd         db  0x00 ; '.'
0000000000000bfe         db  0x19 ; '.'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0xb0 ; '.'
0000000000000c01         db  0x30 ; '0'
0000000000000c02         db  0x21 ; '!'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x00 ; '.'
0000000000000c05         db  0x00 ; '.'
0000000000000c06         db  0x00 ; '.'
0000000000000c07         db  0x00 ; '.'
0000000000000c08         db  0x04 ; '.'
0000000000000c09         db  0x00 ; '.'
0000000000000c0a         db  0x00 ; '.'
0000000000000c0b         db  0x00 ; '.'
0000000000000c0c         db  0x00 ; '.'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x00 ; '.'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x00 ; '.'
0000000000000c11         db  0x02 ; '.'
0000000000000c12         db  0x00 ; '.'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x11 ; '.'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x19 ; '.'
0000000000000c17         db  0x00 ; '.'
0000000000000c18         db  0xb8 ; '.'
0000000000000c19         db  0x30 ; '0'
0000000000000c1a         db  0x21 ; '!'
0000000000000c1b         db  0x00 ; '.'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x00 ; '.'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x08 ; '.'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x00 ; '.'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x00 ; '.'
0000000000000c27         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xc28; 0x1039[ (1041 bytes)
        ; File offset : [3112; 4153[ (1041 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000c28         db  0x00 ; '.'
0000000000000c29         db  0x6c ; 'l'
0000000000000c2a         db  0x69 ; 'i'
0000000000000c2b         db  0x62 ; 'b'
0000000000000c2c         db  0x63 ; 'c'
0000000000000c2d         db  0x2e ; '.'
0000000000000c2e         db  0x73 ; 's'
0000000000000c2f         db  0x6f ; 'o'
0000000000000c30         db  0x2e ; '.'
0000000000000c31         db  0x36 ; '6'
0000000000000c32         db  0x00 ; '.'
0000000000000c33         db  0x66 ; 'f'
0000000000000c34         db  0x66 ; 'f'
0000000000000c35         db  0x6c ; 'l'
0000000000000c36         db  0x75 ; 'u'
0000000000000c37         db  0x73 ; 's'
0000000000000c38         db  0x68 ; 'h'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x73 ; 's'
0000000000000c3b         db  0x74 ; 't'
0000000000000c3c         db  0x72 ; 'r'
0000000000000c3d         db  0x63 ; 'c'
0000000000000c3e         db  0x70 ; 'p'
0000000000000c3f         db  0x79 ; 'y'
0000000000000c40         db  0x00 ; '.'
0000000000000c41         db  0x67 ; 'g'
0000000000000c42         db  0x6d ; 'm'
0000000000000c43         db  0x74 ; 't'
0000000000000c44         db  0x69 ; 'i'
0000000000000c45         db  0x6d ; 'm'
0000000000000c46         db  0x65 ; 'e'
0000000000000c47         db  0x5f ; '_'
0000000000000c48         db  0x72 ; 'r'
0000000000000c49         db  0x00 ; '.'
0000000000000c4a         db  0x5f ; '_'
0000000000000c4b         db  0x5f ; '_'
0000000000000c4c         db  0x70 ; 'p'
0000000000000c4d         db  0x72 ; 'r'
0000000000000c4e         db  0x69 ; 'i'
0000000000000c4f         db  0x6e ; 'n'
0000000000000c50         db  0x74 ; 't'
0000000000000c51         db  0x66 ; 'f'
0000000000000c52         db  0x5f ; '_'
0000000000000c53         db  0x63 ; 'c'
0000000000000c54         db  0x68 ; 'h'
0000000000000c55         db  0x6b ; 'k'
0000000000000c56         db  0x00 ; '.'
0000000000000c57         db  0x73 ; 's'
0000000000000c58         db  0x65 ; 'e'
0000000000000c59         db  0x74 ; 't'
0000000000000c5a         db  0x6c ; 'l'
0000000000000c5b         db  0x6f ; 'o'
0000000000000c5c         db  0x63 ; 'c'
0000000000000c5d         db  0x61 ; 'a'
0000000000000c5e         db  0x6c ; 'l'
0000000000000c5f         db  0x65 ; 'e'
0000000000000c60         db  0x00 ; '.'
0000000000000c61         db  0x6d ; 'm'
0000000000000c62         db  0x62 ; 'b'
0000000000000c63         db  0x72 ; 'r'
0000000000000c64         db  0x74 ; 't'
0000000000000c65         db  0x6f ; 'o'
0000000000000c66         db  0x77 ; 'w'
0000000000000c67         db  0x63 ; 'c'
0000000000000c68         db  0x00 ; '.'
0000000000000c69         db  0x66 ; 'f'
0000000000000c6a         db  0x6f ; 'o'
0000000000000c6b         db  0x70 ; 'p'
0000000000000c6c         db  0x65 ; 'e'
0000000000000c6d         db  0x6e ; 'n'
0000000000000c6e         db  0x00 ; '.'
0000000000000c6f         db  0x73 ; 's'
0000000000000c70         db  0x74 ; 't'
0000000000000c71         db  0x72 ; 'r'
0000000000000c72         db  0x6e ; 'n'
0000000000000c73         db  0x63 ; 'c'
0000000000000c74         db  0x6d ; 'm'
0000000000000c75         db  0x70 ; 'p'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x6f ; 'o'
0000000000000c78         db  0x70 ; 'p'
0000000000000c79         db  0x74 ; 't'
0000000000000c7a         db  0x69 ; 'i'
0000000000000c7b         db  0x6e ; 'n'
0000000000000c7c         db  0x64 ; 'd'
0000000000000c7d         db  0x00 ; '.'
0000000000000c7e         db  0x73 ; 's'
0000000000000c7f         db  0x74 ; 't'
0000000000000c80         db  0x72 ; 'r'
0000000000000c81         db  0x72 ; 'r'
0000000000000c82         db  0x63 ; 'c'
0000000000000c83         db  0x68 ; 'h'
0000000000000c84         db  0x72 ; 'r'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x64 ; 'd'
0000000000000c87         db  0x63 ; 'c'
0000000000000c88         db  0x67 ; 'g'
0000000000000c89         db  0x65 ; 'e'
0000000000000c8a         db  0x74 ; 't'
0000000000000c8b         db  0x74 ; 't'
0000000000000c8c         db  0x65 ; 'e'
0000000000000c8d         db  0x78 ; 'x'
0000000000000c8e         db  0x74 ; 't'
0000000000000c8f         db  0x00 ; '.'
0000000000000c90         db  0x67 ; 'g'
0000000000000c91         db  0x65 ; 'e'
0000000000000c92         db  0x74 ; 't'
0000000000000c93         db  0x70 ; 'p'
0000000000000c94         db  0x77 ; 'w'
0000000000000c95         db  0x75 ; 'u'
0000000000000c96         db  0x69 ; 'i'
0000000000000c97         db  0x64 ; 'd'
0000000000000c98         db  0x00 ; '.'
0000000000000c99         db  0x66 ; 'f'
0000000000000c9a         db  0x63 ; 'c'
0000000000000c9b         db  0x68 ; 'h'
0000000000000c9c         db  0x64 ; 'd'
0000000000000c9d         db  0x69 ; 'i'
0000000000000c9e         db  0x72 ; 'r'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x67 ; 'g'
0000000000000ca1         db  0x65 ; 'e'
0000000000000ca2         db  0x74 ; 't'
0000000000000ca3         db  0x67 ; 'g'
0000000000000ca4         db  0x72 ; 'r'
0000000000000ca5         db  0x67 ; 'g'
0000000000000ca6         db  0x69 ; 'i'
0000000000000ca7         db  0x64 ; 'd'
0000000000000ca8         db  0x00 ; '.'
0000000000000ca9         db  0x65 ; 'e'
0000000000000caa         db  0x72 ; 'r'
0000000000000cab         db  0x72 ; 'r'
0000000000000cac         db  0x6f ; 'o'
0000000000000cad         db  0x72 ; 'r'
0000000000000cae         db  0x00 ; '.'
0000000000000caf         db  0x5f ; '_'
0000000000000cb0         db  0x5f ; '_'
0000000000000cb1         db  0x73 ; 's'
0000000000000cb2         db  0x74 ; 't'
0000000000000cb3         db  0x61 ; 'a'
0000000000000cb4         db  0x63 ; 'c'
0000000000000cb5         db  0x6b ; 'k'
0000000000000cb6         db  0x5f ; '_'
0000000000000cb7         db  0x63 ; 'c'
0000000000000cb8         db  0x68 ; 'h'
0000000000000cb9         db  0x6b ; 'k'
0000000000000cba         db  0x5f ; '_'
0000000000000cbb         db  0x66 ; 'f'
0000000000000cbc         db  0x61 ; 'a'
0000000000000cbd         db  0x69 ; 'i'
0000000000000cbe         db  0x6c ; 'l'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0x5f ; '_'
0000000000000cc1         db  0x5f ; '_'
0000000000000cc2         db  0x6c ; 'l'
0000000000000cc3         db  0x78 ; 'x'
0000000000000cc4         db  0x73 ; 's'
0000000000000cc5         db  0x74 ; 't'
0000000000000cc6         db  0x61 ; 'a'
0000000000000cc7         db  0x74 ; 't'
0000000000000cc8         db  0x00 ; '.'
0000000000000cc9         db  0x69 ; 'i'
0000000000000cca         db  0x73 ; 's'
0000000000000ccb         db  0x77 ; 'w'
0000000000000ccc         db  0x70 ; 'p'
0000000000000ccd         db  0x72 ; 'r'
0000000000000cce         db  0x69 ; 'i'
0000000000000ccf         db  0x6e ; 'n'
0000000000000cd0         db  0x74 ; 't'
0000000000000cd1         db  0x00 ; '.'
0000000000000cd2         db  0x72 ; 'r'
0000000000000cd3         db  0x65 ; 'e'
0000000000000cd4         db  0x61 ; 'a'
0000000000000cd5         db  0x6c ; 'l'
0000000000000cd6         db  0x6c ; 'l'
0000000000000cd7         db  0x6f ; 'o'
0000000000000cd8         db  0x63 ; 'c'
0000000000000cd9         db  0x00 ; '.'
0000000000000cda         db  0x61 ; 'a'
0000000000000cdb         db  0x62 ; 'b'
0000000000000cdc         db  0x6f ; 'o'
0000000000000cdd         db  0x72 ; 'r'
0000000000000cde         db  0x74 ; 't'
0000000000000cdf         db  0x00 ; '.'
0000000000000ce0         db  0x5f ; '_'
0000000000000ce1         db  0x65 ; 'e'
0000000000000ce2         db  0x78 ; 'x'
0000000000000ce3         db  0x69 ; 'i'
0000000000000ce4         db  0x74 ; 't'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x6d ; 'm'
0000000000000ce7         db  0x65 ; 'e'
0000000000000ce8         db  0x6d ; 'm'
0000000000000ce9         db  0x63 ; 'c'
0000000000000cea         db  0x68 ; 'h'
0000000000000ceb         db  0x72 ; 'r'
0000000000000cec         db  0x00 ; '.'
0000000000000ced         db  0x6d ; 'm'
0000000000000cee         db  0x65 ; 'e'
0000000000000cef         db  0x6d ; 'm'
0000000000000cf0         db  0x72 ; 'r'
0000000000000cf1         db  0x63 ; 'c'
0000000000000cf2         db  0x68 ; 'h'
0000000000000cf3         db  0x72 ; 'r'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x73 ; 's'
0000000000000cf6         db  0x74 ; 't'
0000000000000cf7         db  0x72 ; 'r'
0000000000000cf8         db  0x73 ; 's'
0000000000000cf9         db  0x70 ; 'p'
0000000000000cfa         db  0x6e ; 'n'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x70 ; 'p'
0000000000000cfd         db  0x72 ; 'r'
0000000000000cfe         db  0x6f ; 'o'
0000000000000cff         db  0x67 ; 'g'
                     aRaminvocationn:
0000000000000d00         db         "ram_invocation_name", 0
0000000000000d14         db  0x73 ; 's'
0000000000000d15         db  0x74 ; 't'
0000000000000d16         db  0x72 ; 'r'
0000000000000d17         db  0x66 ; 'f'
0000000000000d18         db  0x74 ; 't'
0000000000000d19         db  0x69 ; 'i'
0000000000000d1a         db  0x6d ; 'm'
0000000000000d1b         db  0x65 ; 'e'
0000000000000d1c         db  0x00 ; '.'
0000000000000d1d         db  0x5f ; '_'
0000000000000d1e         db  0x5f ; '_'
0000000000000d1f         db  0x61 ; 'a'
0000000000000d20         db  0x73 ; 's'
0000000000000d21         db  0x73 ; 's'
0000000000000d22         db  0x65 ; 'e'
0000000000000d23         db  0x72 ; 'r'
0000000000000d24         db  0x74 ; 't'
0000000000000d25         db  0x5f ; '_'
0000000000000d26         db  0x66 ; 'f'
0000000000000d27         db  0x61 ; 'a'
0000000000000d28         db  0x69 ; 'i'
0000000000000d29         db  0x6c ; 'l'
0000000000000d2a         db  0x00 ; '.'
0000000000000d2b         db  0x6c ; 'l'
0000000000000d2c         db  0x6f ; 'o'
0000000000000d2d         db  0x63 ; 'c'
0000000000000d2e         db  0x61 ; 'a'
0000000000000d2f         db  0x6c ; 'l'
0000000000000d30         db  0x74 ; 't'
0000000000000d31         db  0x69 ; 'i'
0000000000000d32         db  0x6d ; 'm'
0000000000000d33         db  0x65 ; 'e'
0000000000000d34         db  0x5f ; '_'
0000000000000d35         db  0x72 ; 'r'
0000000000000d36         db  0x00 ; '.'
0000000000000d37         db  0x5f ; '_'
0000000000000d38         db  0x5f ; '_'
0000000000000d39         db  0x63 ; 'c'
0000000000000d3a         db  0x74 ; 't'
0000000000000d3b         db  0x79 ; 'y'
0000000000000d3c         db  0x70 ; 'p'
0000000000000d3d         db  0x65 ; 'e'
0000000000000d3e         db  0x5f ; '_'
0000000000000d3f         db  0x67 ; 'g'
0000000000000d40         db  0x65 ; 'e'
0000000000000d41         db  0x74 ; 't'
0000000000000d42         db  0x5f ; '_'
0000000000000d43         db  0x6d ; 'm'
0000000000000d44         db  0x62 ; 'b'
0000000000000d45         db  0x5f ; '_'
0000000000000d46         db  0x63 ; 'c'
0000000000000d47         db  0x75 ; 'u'
0000000000000d48         db  0x72 ; 'r'
0000000000000d49         db  0x5f ; '_'
0000000000000d4a         db  0x6d ; 'm'
0000000000000d4b         db  0x61 ; 'a'
0000000000000d4c         db  0x78 ; 'x'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x73 ; 's'
0000000000000d4f         db  0x74 ; 't'
0000000000000d50         db  0x72 ; 'r'
0000000000000d51         db  0x74 ; 't'
0000000000000d52         db  0x6f ; 'o'
0000000000000d53         db  0x6c ; 'l'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x73 ; 's'
0000000000000d56         db  0x65 ; 'e'
0000000000000d57         db  0x74 ; 't'
0000000000000d58         db  0x6d ; 'm'
0000000000000d59         db  0x6e ; 'n'
0000000000000d5a         db  0x74 ; 't'
0000000000000d5b         db  0x65 ; 'e'
0000000000000d5c         db  0x6e ; 'n'
0000000000000d5d         db  0x74 ; 't'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x63 ; 'c'
0000000000000d60         db  0x61 ; 'a'
0000000000000d61         db  0x6c ; 'l'
0000000000000d62         db  0x6c ; 'l'
0000000000000d63         db  0x6f ; 'o'
0000000000000d64         db  0x63 ; 'c'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x73 ; 's'
0000000000000d67         db  0x74 ; 't'
0000000000000d68         db  0x72 ; 'r'
0000000000000d69         db  0x6c ; 'l'
0000000000000d6a         db  0x65 ; 'e'
0000000000000d6b         db  0x6e ; 'n'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x6d ; 'm'
0000000000000d6e         db  0x65 ; 'e'
0000000000000d6f         db  0x6d ; 'm'
0000000000000d70         db  0x73 ; 's'
0000000000000d71         db  0x65 ; 'e'
0000000000000d72         db  0x74 ; 't'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x6c ; 'l'
0000000000000d75         db  0x6f ; 'o'
0000000000000d76         db  0x63 ; 'c'
0000000000000d77         db  0x61 ; 'a'
0000000000000d78         db  0x6c ; 'l'
0000000000000d79         db  0x65 ; 'e'
0000000000000d7a         db  0x63 ; 'c'
0000000000000d7b         db  0x6f ; 'o'
0000000000000d7c         db  0x6e ; 'n'
0000000000000d7d         db  0x76 ; 'v'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x73 ; 's'
0000000000000d80         db  0x74 ; 't'
0000000000000d81         db  0x72 ; 'r'
0000000000000d82         db  0x73 ; 's'
0000000000000d83         db  0x74 ; 't'
0000000000000d84         db  0x72 ; 'r'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x5f ; '_'
0000000000000d87         db  0x5f ; '_'
0000000000000d88         db  0x65 ; 'e'
0000000000000d89         db  0x72 ; 'r'
0000000000000d8a         db  0x72 ; 'r'
0000000000000d8b         db  0x6e ; 'n'
0000000000000d8c         db  0x6f ; 'o'
0000000000000d8d         db  0x5f ; '_'
0000000000000d8e         db  0x6c ; 'l'
0000000000000d8f         db  0x6f ; 'o'
0000000000000d90         db  0x63 ; 'c'
0000000000000d91         db  0x61 ; 'a'
0000000000000d92         db  0x74 ; 't'
0000000000000d93         db  0x69 ; 'i'
0000000000000d94         db  0x6f ; 'o'
0000000000000d95         db  0x6e ; 'n'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x6d ; 'm'
0000000000000d98         db  0x65 ; 'e'
0000000000000d99         db  0x6d ; 'm'
0000000000000d9a         db  0x63 ; 'c'
0000000000000d9b         db  0x6d ; 'm'
0000000000000d9c         db  0x70 ; 'p'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x75 ; 'u'
0000000000000d9f         db  0x6e ; 'n'
0000000000000da0         db  0x73 ; 's'
0000000000000da1         db  0x65 ; 'e'
0000000000000da2         db  0x74 ; 't'
0000000000000da3         db  0x65 ; 'e'
0000000000000da4         db  0x6e ; 'n'
0000000000000da5         db  0x76 ; 'v'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x5f ; '_'
0000000000000da8         db  0x5f ; '_'
0000000000000da9         db  0x66 ; 'f'
0000000000000daa         db  0x70 ; 'p'
0000000000000dab         db  0x72 ; 'r'
0000000000000dac         db  0x69 ; 'i'
0000000000000dad         db  0x6e ; 'n'
0000000000000dae         db  0x74 ; 't'
0000000000000daf         db  0x66 ; 'f'
0000000000000db0         db  0x5f ; '_'
0000000000000db1         db  0x63 ; 'c'
0000000000000db2         db  0x68 ; 'h'
0000000000000db3         db  0x6b ; 'k'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x73 ; 's'
0000000000000db6         db  0x74 ; 't'
0000000000000db7         db  0x64 ; 'd'
0000000000000db8         db  0x6f ; 'o'
0000000000000db9         db  0x75 ; 'u'
0000000000000dba         db  0x74 ; 't'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x6c ; 'l'
0000000000000dbd         db  0x73 ; 's'
0000000000000dbe         db  0x65 ; 'e'
0000000000000dbf         db  0x65 ; 'e'
0000000000000dc0         db  0x6b ; 'k'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x6d ; 'm'
0000000000000dc3         db  0x65 ; 'e'
0000000000000dc4         db  0x6d ; 'm'
0000000000000dc5         db  0x63 ; 'c'
0000000000000dc6         db  0x70 ; 'p'
0000000000000dc7         db  0x79 ; 'y'
0000000000000dc8         db  0x00 ; '.'
0000000000000dc9         db  0x66 ; 'f'
0000000000000dca         db  0x63 ; 'c'
0000000000000dcb         db  0x6c ; 'l'
0000000000000dcc         db  0x6f ; 'o'
0000000000000dcd         db  0x73 ; 's'
0000000000000dce         db  0x65 ; 'e'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x67 ; 'g'
0000000000000dd1         db  0x65 ; 'e'
0000000000000dd2         db  0x74 ; 't'
0000000000000dd3         db  0x6d ; 'm'
0000000000000dd4         db  0x6e ; 'n'
0000000000000dd5         db  0x74 ; 't'
0000000000000dd6         db  0x65 ; 'e'
0000000000000dd7         db  0x6e ; 'n'
0000000000000dd8         db  0x74 ; 't'
0000000000000dd9         db  0x00 ; '.'
0000000000000dda         db  0x6d ; 'm'
0000000000000ddb         db  0x61 ; 'a'
0000000000000ddc         db  0x6c ; 'l'
0000000000000ddd         db  0x6c ; 'l'
0000000000000dde         db  0x6f ; 'o'
0000000000000ddf         db  0x63 ; 'c'
0000000000000de0         db  0x00 ; '.'
0000000000000de1         db  0x74 ; 't'
0000000000000de2         db  0x69 ; 'i'
0000000000000de3         db  0x6d ; 'm'
0000000000000de4         db  0x65 ; 'e'
0000000000000de5         db  0x67 ; 'g'
0000000000000de6         db  0x6d ; 'm'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x6d ; 'm'
0000000000000de9         db  0x62 ; 'b'
0000000000000dea         db  0x73 ; 's'
0000000000000deb         db  0x69 ; 'i'
0000000000000dec         db  0x6e ; 'n'
0000000000000ded         db  0x69 ; 'i'
0000000000000dee         db  0x74 ; 't'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x74 ; 't'
0000000000000df1         db  0x7a ; 'z'
0000000000000df2         db  0x73 ; 's'
0000000000000df3         db  0x65 ; 'e'
0000000000000df4         db  0x74 ; 't'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x6e ; 'n'
0000000000000df7         db  0x6c ; 'l'
0000000000000df8         db  0x5f ; '_'
0000000000000df9         db  0x6c ; 'l'
0000000000000dfa         db  0x61 ; 'a'
0000000000000dfb         db  0x6e ; 'n'
0000000000000dfc         db  0x67 ; 'g'
0000000000000dfd         db  0x69 ; 'i'
0000000000000dfe         db  0x6e ; 'n'
0000000000000dff         db  0x66 ; 'f'
0000000000000e00         db  0x6f ; 'o'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x68 ; 'h'
0000000000000e03         db  0x61 ; 'a'
0000000000000e04         db  0x73 ; 's'
0000000000000e05         db  0x6d ; 'm'
0000000000000e06         db  0x6e ; 'n'
0000000000000e07         db  0x74 ; 't'
0000000000000e08         db  0x6f ; 'o'
0000000000000e09         db  0x70 ; 'p'
0000000000000e0a         db  0x74 ; 't'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x5f ; '_'
0000000000000e0d         db  0x5f ; '_'
0000000000000e0e         db  0x63 ; 'c'
0000000000000e0f         db  0x74 ; 't'
0000000000000e10         db  0x79 ; 'y'
0000000000000e11         db  0x70 ; 'p'
0000000000000e12         db  0x65 ; 'e'
0000000000000e13         db  0x5f ; '_'
0000000000000e14         db  0x62 ; 'b'
0000000000000e15         db  0x5f ; '_'
0000000000000e16         db  0x6c ; 'l'
0000000000000e17         db  0x6f ; 'o'
0000000000000e18         db  0x63 ; 'c'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x67 ; 'g'
0000000000000e1b         db  0x65 ; 'e'
0000000000000e1c         db  0x74 ; 't'
0000000000000e1d         db  0x65 ; 'e'
0000000000000e1e         db  0x6e ; 'n'
0000000000000e1f         db  0x76 ; 'v'
0000000000000e20         db  0x00 ; '.'
0000000000000e21         db  0x73 ; 's'
0000000000000e22         db  0x73 ; 's'
0000000000000e23         db  0x63 ; 'c'
0000000000000e24         db  0x61 ; 'a'
0000000000000e25         db  0x6e ; 'n'
0000000000000e26         db  0x66 ; 'f'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x6f ; 'o'
0000000000000e29         db  0x70 ; 'p'
0000000000000e2a         db  0x74 ; 't'
0000000000000e2b         db  0x61 ; 'a'
0000000000000e2c         db  0x72 ; 'r'
0000000000000e2d         db  0x67 ; 'g'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x5f ; '_'
0000000000000e30         db  0x5f ; '_'
0000000000000e31         db  0x66 ; 'f'
0000000000000e32         db  0x72 ; 'r'
0000000000000e33         db  0x65 ; 'e'
0000000000000e34         db  0x61 ; 'a'
0000000000000e35         db  0x64 ; 'd'
0000000000000e36         db  0x69 ; 'i'
0000000000000e37         db  0x6e ; 'n'
0000000000000e38         db  0x67 ; 'g'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x73 ; 's'
0000000000000e3b         db  0x74 ; 't'
0000000000000e3c         db  0x64 ; 'd'
0000000000000e3d         db  0x65 ; 'e'
0000000000000e3e         db  0x72 ; 'r'
0000000000000e3f         db  0x72 ; 'r'
0000000000000e40         db  0x00 ; '.'
0000000000000e41         db  0x5f ; '_'
0000000000000e42         db  0x5f ; '_'
0000000000000e43         db  0x73 ; 's'
0000000000000e44         db  0x6e ; 'n'
0000000000000e45         db  0x70 ; 'p'
0000000000000e46         db  0x72 ; 'r'
0000000000000e47         db  0x69 ; 'i'
0000000000000e48         db  0x6e ; 'n'
0000000000000e49         db  0x74 ; 't'
0000000000000e4a         db  0x66 ; 'f'
0000000000000e4b         db  0x5f ; '_'
0000000000000e4c         db  0x63 ; 'c'
0000000000000e4d         db  0x68 ; 'h'
0000000000000e4e         db  0x6b ; 'k'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x72 ; 'r'
0000000000000e51         db  0x65 ; 'e'
0000000000000e52         db  0x61 ; 'a'
0000000000000e53         db  0x64 ; 'd'
0000000000000e54         db  0x6c ; 'l'
0000000000000e55         db  0x69 ; 'i'
0000000000000e56         db  0x6e ; 'n'
0000000000000e57         db  0x6b ; 'k'
0000000000000e58         db  0x00 ; '.'
0000000000000e59         db  0x67 ; 'g'
0000000000000e5a         db  0x65 ; 'e'
0000000000000e5b         db  0x74 ; 't'
0000000000000e5c         db  0x6f ; 'o'
0000000000000e5d         db  0x70 ; 'p'
0000000000000e5e         db  0x74 ; 't'
0000000000000e5f         db  0x5f ; '_'
0000000000000e60         db  0x6c ; 'l'
0000000000000e61         db  0x6f ; 'o'
0000000000000e62         db  0x6e ; 'n'
0000000000000e63         db  0x67 ; 'g'
0000000000000e64         db  0x00 ; '.'
0000000000000e65         db  0x5f ; '_'
0000000000000e66         db  0x5f ; '_'
0000000000000e67         db  0x66 ; 'f'
0000000000000e68         db  0x78 ; 'x'
0000000000000e69         db  0x73 ; 's'
0000000000000e6a         db  0x74 ; 't'
0000000000000e6b         db  0x61 ; 'a'
0000000000000e6c         db  0x74 ; 't'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x66 ; 'f'
0000000000000e6f         db  0x69 ; 'i'
0000000000000e70         db  0x6c ; 'l'
0000000000000e71         db  0x65 ; 'e'
0000000000000e72         db  0x6e ; 'n'
0000000000000e73         db  0x6f ; 'o'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x67 ; 'g'
0000000000000e76         db  0x65 ; 'e'
0000000000000e77         db  0x74 ; 't'
0000000000000e78         db  0x63 ; 'c'
0000000000000e79         db  0x77 ; 'w'
0000000000000e7a         db  0x64 ; 'd'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x5f ; '_'
0000000000000e7d         db  0x5f ; '_'
0000000000000e7e         db  0x67 ; 'g'
0000000000000e7f         db  0x65 ; 'e'
0000000000000e80         db  0x74 ; 't'
0000000000000e81         db  0x64 ; 'd'
0000000000000e82         db  0x65 ; 'e'
0000000000000e83         db  0x6c ; 'l'
0000000000000e84         db  0x69 ; 'i'
0000000000000e85         db  0x6d ; 'm'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x66 ; 'f'
0000000000000e88         db  0x77 ; 'w'
0000000000000e89         db  0x72 ; 'r'
0000000000000e8a         db  0x69 ; 'i'
0000000000000e8b         db  0x74 ; 't'
0000000000000e8c         db  0x65 ; 'e'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x73 ; 's'
0000000000000e8f         db  0x74 ; 't'
0000000000000e90         db  0x61 ; 'a'
0000000000000e91         db  0x74 ; 't'
0000000000000e92         db  0x66 ; 'f'
0000000000000e93         db  0x73 ; 's'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x5f ; '_'
0000000000000e96         db  0x5f ; '_'
0000000000000e97         db  0x66 ; 'f'
0000000000000e98         db  0x70 ; 'p'
0000000000000e99         db  0x65 ; 'e'
0000000000000e9a         db  0x6e ; 'n'
0000000000000e9b         db  0x64 ; 'd'
0000000000000e9c         db  0x69 ; 'i'
0000000000000e9d         db  0x6e ; 'n'
0000000000000e9e         db  0x67 ; 'g'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x73 ; 's'
0000000000000ea1         db  0x74 ; 't'
0000000000000ea2         db  0x72 ; 'r'
0000000000000ea3         db  0x63 ; 'c'
0000000000000ea4         db  0x68 ; 'h'
0000000000000ea5         db  0x72 ; 'r'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x65 ; 'e'
0000000000000ea8         db  0x6e ; 'n'
0000000000000ea9         db  0x64 ; 'd'
0000000000000eaa         db  0x6d ; 'm'
0000000000000eab         db  0x6e ; 'n'
0000000000000eac         db  0x74 ; 't'
0000000000000ead         db  0x65 ; 'e'
0000000000000eae         db  0x6e ; 'n'
0000000000000eaf         db  0x74 ; 't'
0000000000000eb0         db  0x00 ; '.'
0000000000000eb1         db  0x6d ; 'm'
0000000000000eb2         db  0x6b ; 'k'
0000000000000eb3         db  0x74 ; 't'
0000000000000eb4         db  0x69 ; 'i'
0000000000000eb5         db  0x6d ; 'm'
0000000000000eb6         db  0x65 ; 'e'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x70 ; 'p'
0000000000000eb9         db  0x72 ; 'r'
0000000000000eba         db  0x6f ; 'o'
0000000000000ebb         db  0x67 ; 'g'
0000000000000ebc         db  0x72 ; 'r'
0000000000000ebd         db  0x61 ; 'a'
0000000000000ebe         db  0x6d ; 'm'
0000000000000ebf         db  0x5f ; '_'
0000000000000ec0         db  0x69 ; 'i'
0000000000000ec1         db  0x6e ; 'n'
0000000000000ec2         db  0x76 ; 'v'
0000000000000ec3         db  0x6f ; 'o'
0000000000000ec4         db  0x63 ; 'c'
0000000000000ec5         db  0x61 ; 'a'
0000000000000ec6         db  0x74 ; 't'
0000000000000ec7         db  0x69 ; 'i'
0000000000000ec8         db  0x6f ; 'o'
0000000000000ec9         db  0x6e ; 'n'
0000000000000eca         db  0x5f ; '_'
0000000000000ecb         db  0x73 ; 's'
0000000000000ecc         db  0x68 ; 'h'
0000000000000ecd         db  0x6f ; 'o'
0000000000000ece         db  0x72 ; 'r'
0000000000000ecf         db  0x74 ; 't'
0000000000000ed0         db  0x5f ; '_'
0000000000000ed1         db  0x6e ; 'n'
0000000000000ed2         db  0x61 ; 'a'
0000000000000ed3         db  0x6d ; 'm'
0000000000000ed4         db  0x65 ; 'e'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x63 ; 'c'
0000000000000ed7         db  0x61 ; 'a'
0000000000000ed8         db  0x6e ; 'n'
0000000000000ed9         db  0x6f ; 'o'
0000000000000eda         db  0x6e ; 'n'
0000000000000edb         db  0x69 ; 'i'
0000000000000edc         db  0x63 ; 'c'
0000000000000edd         db  0x61 ; 'a'
0000000000000ede         db  0x6c ; 'l'
0000000000000edf         db  0x69 ; 'i'
0000000000000ee0         db  0x7a ; 'z'
0000000000000ee1         db  0x65 ; 'e'
0000000000000ee2         db  0x5f ; '_'
0000000000000ee3         db  0x66 ; 'f'
0000000000000ee4         db  0x69 ; 'i'
0000000000000ee5         db  0x6c ; 'l'
0000000000000ee6         db  0x65 ; 'e'
0000000000000ee7         db  0x5f ; '_'
0000000000000ee8         db  0x6e ; 'n'
0000000000000ee9         db  0x61 ; 'a'
0000000000000eea         db  0x6d ; 'm'
0000000000000eeb         db  0x65 ; 'e'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x5f ; '_'
0000000000000eee         db  0x5f ; '_'
0000000000000eef         db  0x63 ; 'c'
0000000000000ef0         db  0x74 ; 't'
0000000000000ef1         db  0x79 ; 'y'
0000000000000ef2         db  0x70 ; 'p'
0000000000000ef3         db  0x65 ; 'e'
0000000000000ef4         db  0x5f ; '_'
0000000000000ef5         db  0x74 ; 't'
0000000000000ef6         db  0x6f ; 'o'
0000000000000ef7         db  0x75 ; 'u'
0000000000000ef8         db  0x70 ; 'p'
0000000000000ef9         db  0x70 ; 'p'
0000000000000efa         db  0x65 ; 'e'
0000000000000efb         db  0x72 ; 'r'
0000000000000efc         db  0x5f ; '_'
0000000000000efd         db  0x6c ; 'l'
0000000000000efe         db  0x6f ; 'o'
0000000000000eff         db  0x63 ; 'c'
0000000000000f00         db  0x00 ; '.'
0000000000000f01         db  0x5f ; '_'
0000000000000f02         db  0x5f ; '_'
0000000000000f03         db  0x63 ; 'c'
0000000000000f04         db  0x74 ; 't'
0000000000000f05         db  0x79 ; 'y'
0000000000000f06         db  0x70 ; 'p'
0000000000000f07         db  0x65 ; 'e'
0000000000000f08         db  0x5f ; '_'
0000000000000f09         db  0x74 ; 't'
0000000000000f0a         db  0x6f ; 'o'
0000000000000f0b         db  0x6c ; 'l'
0000000000000f0c         db  0x6f ; 'o'
0000000000000f0d         db  0x77 ; 'w'
0000000000000f0e         db  0x65 ; 'e'
0000000000000f0f         db  0x72 ; 'r'
0000000000000f10         db  0x5f ; '_'
0000000000000f11         db  0x6c ; 'l'
0000000000000f12         db  0x6f ; 'o'
0000000000000f13         db  0x63 ; 'c'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x5f ; '_'
0000000000000f16         db  0x5f ; '_'
0000000000000f17         db  0x63 ; 'c'
0000000000000f18         db  0x78 ; 'x'
0000000000000f19         db  0x61 ; 'a'
0000000000000f1a         db  0x5f ; '_'
0000000000000f1b         db  0x66 ; 'f'
0000000000000f1c         db  0x69 ; 'i'
0000000000000f1d         db  0x6e ; 'n'
0000000000000f1e         db  0x61 ; 'a'
0000000000000f1f         db  0x6c ; 'l'
0000000000000f20         db  0x69 ; 'i'
0000000000000f21         db  0x7a ; 'z'
0000000000000f22         db  0x65 ; 'e'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x66 ; 'f'
0000000000000f25         db  0x63 ; 'c'
0000000000000f26         db  0x6e ; 'n'
0000000000000f27         db  0x74 ; 't'
0000000000000f28         db  0x6c ; 'l'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x5f ; '_'
0000000000000f2b         db  0x5f ; '_'
0000000000000f2c         db  0x73 ; 's'
0000000000000f2d         db  0x70 ; 'p'
0000000000000f2e         db  0x72 ; 'r'
0000000000000f2f         db  0x69 ; 'i'
0000000000000f30         db  0x6e ; 'n'
0000000000000f31         db  0x74 ; 't'
0000000000000f32         db  0x66 ; 'f'
0000000000000f33         db  0x5f ; '_'
0000000000000f34         db  0x63 ; 'c'
0000000000000f35         db  0x68 ; 'h'
0000000000000f36         db  0x6b ; 'k'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x6f ; 'o'
0000000000000f39         db  0x70 ; 'p'
0000000000000f3a         db  0x65 ; 'e'
0000000000000f3b         db  0x6e ; 'n'
0000000000000f3c         db  0x61 ; 'a'
0000000000000f3d         db  0x74 ; 't'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x5f ; '_'
0000000000000f40         db  0x5f ; '_'
0000000000000f41         db  0x78 ; 'x'
0000000000000f42         db  0x73 ; 's'
0000000000000f43         db  0x74 ; 't'
0000000000000f44         db  0x61 ; 'a'
0000000000000f45         db  0x74 ; 't'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x62 ; 'b'
0000000000000f48         db  0x69 ; 'i'
0000000000000f49         db  0x6e ; 'n'
0000000000000f4a         db  0x64 ; 'd'
0000000000000f4b         db  0x74 ; 't'
0000000000000f4c         db  0x65 ; 'e'
0000000000000f4d         db  0x78 ; 'x'
0000000000000f4e         db  0x74 ; 't'
0000000000000f4f         db  0x64 ; 'd'
0000000000000f50         db  0x6f ; 'o'
0000000000000f51         db  0x6d ; 'm'
0000000000000f52         db  0x61 ; 'a'
0000000000000f53         db  0x69 ; 'i'
0000000000000f54         db  0x6e ; 'n'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x73 ; 's'
0000000000000f57         db  0x74 ; 't'
0000000000000f58         db  0x72 ; 'r'
0000000000000f59         db  0x63 ; 'c'
0000000000000f5a         db  0x6d ; 'm'
0000000000000f5b         db  0x70 ; 'p'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x5f ; '_'
0000000000000f5e         db  0x5f ; '_'
0000000000000f5f         db  0x6c ; 'l'
0000000000000f60         db  0x69 ; 'i'
0000000000000f61         db  0x62 ; 'b'
0000000000000f62         db  0x63 ; 'c'
0000000000000f63         db  0x5f ; '_'
0000000000000f64         db  0x73 ; 's'
0000000000000f65         db  0x74 ; 't'
0000000000000f66         db  0x61 ; 'a'
0000000000000f67         db  0x72 ; 'r'
0000000000000f68         db  0x74 ; 't'
0000000000000f69         db  0x5f ; '_'
0000000000000f6a         db  0x6d ; 'm'
0000000000000f6b         db  0x61 ; 'a'
0000000000000f6c         db  0x69 ; 'i'
0000000000000f6d         db  0x6e ; 'n'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x66 ; 'f'
0000000000000f70         db  0x73 ; 's'
0000000000000f71         db  0x65 ; 'e'
0000000000000f72         db  0x65 ; 'e'
0000000000000f73         db  0x6b ; 'k'
0000000000000f74         db  0x6f ; 'o'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x5f ; '_'
0000000000000f77         db  0x5f ; '_'
0000000000000f78         db  0x6f ; 'o'
0000000000000f79         db  0x76 ; 'v'
0000000000000f7a         db  0x65 ; 'e'
0000000000000f7b         db  0x72 ; 'r'
0000000000000f7c         db  0x66 ; 'f'
0000000000000f7d         db  0x6c ; 'l'
0000000000000f7e         db  0x6f ; 'o'
0000000000000f7f         db  0x77 ; 'w'
0000000000000f80         db  0x00 ; '.'
0000000000000f81         db  0x66 ; 'f'
0000000000000f82         db  0x70 ; 'p'
0000000000000f83         db  0x75 ; 'u'
0000000000000f84         db  0x74 ; 't'
0000000000000f85         db  0x73 ; 's'
0000000000000f86         db  0x5f ; '_'
0000000000000f87         db  0x75 ; 'u'
0000000000000f88         db  0x6e ; 'n'
0000000000000f89         db  0x6c ; 'l'
0000000000000f8a         db  0x6f ; 'o'
0000000000000f8b         db  0x63 ; 'c'
0000000000000f8c         db  0x6b ; 'k'
0000000000000f8d         db  0x65 ; 'e'
0000000000000f8e         db  0x64 ; 'd'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x66 ; 'f'
0000000000000f91         db  0x72 ; 'r'
0000000000000f92         db  0x65 ; 'e'
0000000000000f93         db  0x65 ; 'e'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x5f ; '_'
0000000000000f96         db  0x5f ; '_'
0000000000000f97         db  0x70 ; 'p'
0000000000000f98         db  0x72 ; 'r'
0000000000000f99         db  0x6f ; 'o'
0000000000000f9a         db  0x67 ; 'g'
0000000000000f9b         db  0x6e ; 'n'
0000000000000f9c         db  0x61 ; 'a'
0000000000000f9d         db  0x6d ; 'm'
0000000000000f9e         db  0x65 ; 'e'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180
0000000000000fa0         db  0x5f ; '_'
0000000000000fa1         db  0x5f ; '_'
0000000000000fa2         db  0x70 ; 'p'
0000000000000fa3         db  0x72 ; 'r'
0000000000000fa4         db  0x6f ; 'o'
0000000000000fa5         db  0x67 ; 'g'
0000000000000fa6         db  0x6e ; 'n'
0000000000000fa7         db  0x61 ; 'a'
0000000000000fa8         db  0x6d ; 'm'
0000000000000fa9         db  0x65 ; 'e'
0000000000000faa         db  0x5f ; '_'
0000000000000fab         db  0x66 ; 'f'
0000000000000fac         db  0x75 ; 'u'
0000000000000fad         db  0x6c ; 'l'
0000000000000fae         db  0x6c ; 'l'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x5f ; '_'
0000000000000fb1         db  0x5f ; '_'
0000000000000fb2         db  0x63 ; 'c'
0000000000000fb3         db  0x78 ; 'x'
0000000000000fb4         db  0x61 ; 'a'
0000000000000fb5         db  0x5f ; '_'
0000000000000fb6         db  0x61 ; 'a'
0000000000000fb7         db  0x74 ; 't'
0000000000000fb8         db  0x65 ; 'e'
0000000000000fb9         db  0x78 ; 'x'
0000000000000fba         db  0x69 ; 'i'
0000000000000fbb         db  0x74 ; 't'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x47 ; 'G'
0000000000000fbe         db  0x4c ; 'L'
0000000000000fbf         db  0x49 ; 'I'
0000000000000fc0         db  0x42 ; 'B'
0000000000000fc1         db  0x43 ; 'C'
0000000000000fc2         db  0x5f ; '_'
0000000000000fc3         db  0x32 ; '2'
0000000000000fc4         db  0x2e ; '.'
0000000000000fc5         db  0x31 ; '1'
0000000000000fc6         db  0x34 ; '4'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x47 ; 'G'
0000000000000fc9         db  0x4c ; 'L'
0000000000000fca         db  0x49 ; 'I'
0000000000000fcb         db  0x42 ; 'B'
0000000000000fcc         db  0x43 ; 'C'
0000000000000fcd         db  0x5f ; '_'
0000000000000fce         db  0x32 ; '2'
0000000000000fcf         db  0x2e ; '.'
0000000000000fd0         db  0x34 ; '4'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x47 ; 'G'
0000000000000fd3         db  0x4c ; 'L'
0000000000000fd4         db  0x49 ; 'I'
0000000000000fd5         db  0x42 ; 'B'
0000000000000fd6         db  0x43 ; 'C'
0000000000000fd7         db  0x5f ; '_'
0000000000000fd8         db  0x32 ; '2'
0000000000000fd9         db  0x2e ; '.'
0000000000000fda         db  0x33 ; '3'
0000000000000fdb         db  0x2e ; '.'
0000000000000fdc         db  0x34 ; '4'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x47 ; 'G'
0000000000000fdf         db  0x4c ; 'L'
0000000000000fe0         db  0x49 ; 'I'
0000000000000fe1         db  0x42 ; 'B'
0000000000000fe2         db  0x43 ; 'C'
0000000000000fe3         db  0x5f ; '_'
0000000000000fe4         db  0x32 ; '2'
0000000000000fe5         db  0x2e ; '.'
0000000000000fe6         db  0x32 ; '2'
0000000000000fe7         db  0x2e ; '.'
0000000000000fe8         db  0x35 ; '5'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x47 ; 'G'
0000000000000feb         db  0x4c ; 'L'
0000000000000fec         db  0x49 ; 'I'
0000000000000fed         db  0x42 ; 'B'
0000000000000fee         db  0x43 ; 'C'
0000000000000fef         db  0x5f ; '_'
0000000000000ff0         db  0x32 ; '2'
0000000000000ff1         db  0x2e ; '.'
0000000000000ff2         db  0x33 ; '3'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x5f ; '_'
0000000000000ff5         db  0x49 ; 'I'
0000000000000ff6         db  0x54 ; 'T'
0000000000000ff7         db  0x4d ; 'M'
0000000000000ff8         db  0x5f ; '_'
0000000000000ff9         db  0x64 ; 'd'
0000000000000ffa         db  0x65 ; 'e'
0000000000000ffb         db  0x72 ; 'r'
0000000000000ffc         db  0x65 ; 'e'
0000000000000ffd         db  0x67 ; 'g'
0000000000000ffe         db  0x69 ; 'i'
                     aStertmclonetab:
0000000000000fff         db         "sterTMCloneTable", 0                       ; DATA XREF=print_stat+196, print_stat+639, chdir_long+124, chdir_long+209, chdir_long+238, chdir_long+304
0000000000001010         db  0x5f ; '_'
0000000000001011         db  0x5f ; '_'
0000000000001012         db  0x67 ; 'g'
0000000000001013         db  0x6d ; 'm'
0000000000001014         db  0x6f ; 'o'
0000000000001015         db  0x6e ; 'n'
0000000000001016         db  0x5f ; '_'
0000000000001017         db  0x73 ; 's'
0000000000001018         db  0x74 ; 't'
0000000000001019         db  0x61 ; 'a'
000000000000101a         db  0x72 ; 'r'
000000000000101b         db  0x74 ; 't'
000000000000101c         db  0x5f ; '_'
000000000000101d         db  0x5f ; '_'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x5f ; '_'
0000000000001020         db  0x49 ; 'I'
0000000000001021         db  0x54 ; 'T'
0000000000001022         db  0x4d ; 'M'
0000000000001023         db  0x5f ; '_'
0000000000001024         db  0x72 ; 'r'
0000000000001025         db  0x65 ; 'e'
0000000000001026         db  0x67 ; 'g'
0000000000001027         db  0x69 ; 'i'
0000000000001028         db  0x73 ; 's'
0000000000001029         db  0x74 ; 't'
000000000000102a         db  0x65 ; 'e'
000000000000102b         db  0x72 ; 'r'
000000000000102c         db  0x54 ; 'T'
000000000000102d         db  0x4d ; 'M'
000000000000102e         db  0x43 ; 'C'
000000000000102f         db  0x6c ; 'l'
0000000000001030         db  0x6f ; 'o'
0000000000001031         db  0x6e ; 'n'
0000000000001032         db  0x65 ; 'e'
0000000000001033         db  0x54 ; 'T'
0000000000001034         db  0x61 ; 'a'
0000000000001035         db  0x62 ; 'b'
0000000000001036         db  0x6c ; 'l'
0000000000001037         db  0x65 ; 'e'
0000000000001038         db  0x00 ; '.'
0000000000001039         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0x103a; 0x1100[ (198 bytes)
        ; File offset : [4154; 4352[ (198 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x02 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x03 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x04 ; '.'
0000000000001041         db  0x00 ; '.'
0000000000001042         db  0x03 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x03 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x03 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x03 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x03 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x03 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x03 ; '.'
0000000000001051         db  0x00 ; '.'
0000000000001052         db  0x03 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x03 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x03 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x03 ; '.'
0000000000001059         db  0x00 ; '.'
000000000000105a         db  0x03 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x03 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x03 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x03 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x03 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x03 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x03 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x03 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x03 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x03 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x05 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x03 ; '.'
0000000000001071         db  0x00 ; '.'
0000000000001072         db  0x05 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x03 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x03 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x03 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x03 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x03 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x03 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x03 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x03 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x03 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x03 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x03 ; '.'
0000000000001089         db  0x00 ; '.'
000000000000108a         db  0x03 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x03 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x03 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x03 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x03 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x03 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x03 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x03 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x03 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x03 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x03 ; '.'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x06 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x03 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x03 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x03 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x03 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x03 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x03 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x03 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x03 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x03 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x03 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x03 ; '.'
00000000000010b9         db  0x00 ; '.'
00000000000010ba         db  0x03 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x03 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x03 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x03 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x03 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x04 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x03 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x03 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x03 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x03 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x03 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x03 ; '.'
00000000000010d1         db  0x00 ; '.'
00000000000010d2         db  0x03 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x03 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x03 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x03 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x03 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x04 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x03 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x03 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x03 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x03 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x03 ; '.'
00000000000010e9         db  0x00 ; '.'
00000000000010ea         db  0x02 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x02 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x04 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x03 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x03 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x03 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x03 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x03 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x03 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x03 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x03 ; '.'
00000000000010ff         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0x1100; 0x1160[ (96 bytes)
        ; File offset : [4352; 4448[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000001100         db  0x01 ; '.'
0000000000001101         db  0x00 ; '.'
0000000000001102         db  0x05 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x01 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x10 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x94 ; '.'
0000000000001111         db  0x91 ; '.'
0000000000001112         db  0x96 ; '.'
0000000000001113         db  0x06 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x06 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x95 ; '.'
0000000000001119         db  0x03 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x10 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x14 ; '.'
0000000000001121         db  0x69 ; 'i'
0000000000001122         db  0x69 ; 'i'
0000000000001123         db  0x0d ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x05 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0xa0 ; '.'
0000000000001129         db  0x03 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x10 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x74 ; 't'
0000000000001131         db  0x19 ; '.'
0000000000001132         db  0x69 ; 'i'
0000000000001133         db  0x09 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x04 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0xaa ; '.'
0000000000001139         db  0x03 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x10 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x75 ; 'u'
0000000000001141         db  0x1a ; '.'
0000000000001142         db  0x69 ; 'i'
0000000000001143         db  0x09 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x03 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xb6 ; '.'
0000000000001149         db  0x03 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x10 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x13 ; '.'
0000000000001151         db  0x69 ; 'i'
0000000000001152         db  0x69 ; 'i'
0000000000001153         db  0x0d ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x02 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0xc2 ; '.'
0000000000001159         db  0x03 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x1160; 0x14c0[ (864 bytes)
        ; File offset : [4448; 5312[ (864 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001160         db  0xb0 ; '.'
0000000000001161         db  0x29 ; ')'
0000000000001162         db  0x21 ; '!'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x08 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0xb0 ; '.'
0000000000001171         db  0x28 ; '('
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0xb8 ; '.'
0000000000001179         db  0x29 ; ')'
000000000000117a         db  0x21 ; '!'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x08 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x70 ; 'p'
0000000000001189         db  0x28 ; '('
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xc0 ; '.'
0000000000001191         db  0x29 ; ')'
0000000000001192         db  0x21 ; '!'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x08 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x51 ; 'Q'
00000000000011a1         db  0xdf ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0xe0 ; '.'
00000000000011a9         db  0x29 ; ')'
00000000000011aa         db  0x21 ; '!'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x08 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x5d ; ']'
00000000000011b9         db  0xdf ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x00 ; '.'
00000000000011c1         db  0x2a ; '*'
00000000000011c2         db  0x21 ; '!'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x08 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x69 ; 'i'
00000000000011d1         db  0xdf ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x20 ; ' '
00000000000011d9         db  0x2a ; '*'
00000000000011da         db  0x21 ; '!'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x08 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x70 ; 'p'
00000000000011e9         db  0xdf ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x40 ; '@'
00000000000011f1         db  0x2a ; '*'
00000000000011f2         db  0x21 ; '!'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x08 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x77 ; 'w'
0000000000001201         db  0xdf ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x60 ; '`'
0000000000001209         db  0x2a ; '*'
000000000000120a         db  0x21 ; '!'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x08 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x7d ; '}'
0000000000001219         db  0xdf ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x80 ; '.'
0000000000001221         db  0x2a ; '*'
0000000000001222         db  0x21 ; '!'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x08 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x82 ; '.'
0000000000001231         db  0xdf ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0xc0 ; '.'
0000000000001239         db  0x2a ; '*'
000000000000123a         db  0x21 ; '!'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x08 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x57 ; 'W'
0000000000001249         db  0xf6 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0xc8 ; '.'
0000000000001251         db  0x2a ; '*'
0000000000001252         db  0x21 ; '!'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x08 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x5f ; '_'
0000000000001261         db  0xf6 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0xd0 ; '.'
0000000000001269         db  0x2a ; '*'
000000000000126a         db  0x21 ; '!'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x08 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x65 ; 'e'
0000000000001279         db  0xf6 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0xd8 ; '.'
0000000000001281         db  0x2a ; '*'
0000000000001282         db  0x21 ; '!'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x08 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x72 ; 'r'
0000000000001291         db  0xf6 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0xe0 ; '.'
0000000000001299         db  0x2a ; '*'
000000000000129a         db  0x21 ; '!'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x08 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x7f ; '.'
00000000000012a9         db  0xf6 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0xe8 ; '.'
00000000000012b1         db  0x2a ; '*'
00000000000012b2         db  0x21 ; '!'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x08 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x60 ; '`'
00000000000012c1         db  0xff ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0xf0 ; '.'
00000000000012c9         db  0x2a ; '*'
00000000000012ca         db  0x21 ; '!'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x08 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x93 ; '.'
00000000000012d9         db  0xf6 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0xf8 ; '.'
00000000000012e1         db  0x2a ; '*'
00000000000012e2         db  0x21 ; '!'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x08 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x78 ; 'x'
00000000000012f1         db  0xf6 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x2b ; '+'
00000000000012fa         db  0x21 ; '!'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x08 ; '.'
0000000000001301         db  0x00 ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0xea ; '.'
0000000000001309         db  0xde ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x08 ; '.'
0000000000001311         db  0x2b ; '+'
0000000000001312         db  0x21 ; '!'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x08 ; '.'
0000000000001319         db  0x00 ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x9b ; '.'
0000000000001321         db  0xf6 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x08 ; '.'
0000000000001329         db  0x30 ; '0'
000000000000132a         db  0x21 ; '!'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x08 ; '.'
0000000000001331         db  0x00 ; '.'
0000000000001332         db  0x00 ; '.'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x08 ; '.'
0000000000001339         db  0x30 ; '0'
000000000000133a         db  0x21 ; '!'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x10 ; '.'
0000000000001341         db  0x30 ; '0'
0000000000001342         db  0x21 ; '!'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0x08 ; '.'
0000000000001349         db  0x00 ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x81 ; '.'
0000000000001351         db  0xfb ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x18 ; '.'
0000000000001359         db  0x30 ; '0'
000000000000135a         db  0x21 ; '!'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x08 ; '.'
0000000000001361         db  0x00 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x0e ; '.'
0000000000001369         db  0xf3 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x20 ; ' '
0000000000001371         db  0x30 ; '0'
0000000000001372         db  0x21 ; '!'
0000000000001373         db  0x00 ; '.'                                         ; DATA XREF=print_statfs+2130
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0x08 ; '.'
0000000000001379         db  0x00 ; '.'
000000000000137a         db  0x00 ; '.'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'                                         ; DATA XREF=print_statfs+2090
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'                                         ; DATA XREF=print_statfs+2110
0000000000001380         db  0xf0 ; '.'
0000000000001381         db  0x52 ; 'R'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x80 ; '.'
0000000000001389         db  0x30 ; '0'
000000000000138a         db  0x21 ; '!'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'                                         ; DATA XREF=print_statfs+542
0000000000001390         db  0x08 ; '.'
0000000000001391         db  0x00 ; '.'
0000000000001392         db  0x00 ; '.'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x90 ; '.'
0000000000001399         db  0x30 ; '0'
000000000000139a         db  0x21 ; '!'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x98 ; '.'
00000000000013a1         db  0x30 ; '0'
00000000000013a2         db  0x21 ; '!'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x08 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0xc0 ; '.'
00000000000013b1         db  0x31 ; '1'
00000000000013b2         db  0x21 ; '!'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0xc8 ; '.'
00000000000013b9         db  0x2f ; '/'
00000000000013ba         db  0x21 ; '!'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x06 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x09 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x00 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0xd0 ; '.'
00000000000013d1         db  0x2f ; '/'
00000000000013d2         db  0x21 ; '!'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x06 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x2c ; ','
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x00 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0xd8 ; '.'
00000000000013e9         db  0x2f ; '/'
00000000000013ea         db  0x21 ; '!'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x06 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x32 ; '2'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x00 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0xe0 ; '.'
0000000000001401         db  0x2f ; '/'
0000000000001402         db  0x21 ; '!'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x06 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x52 ; 'R'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x00 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0xe8 ; '.'
0000000000001419         db  0x2f ; '/'
000000000000141a         db  0x21 ; '!'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x06 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x56 ; 'V'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x00 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0xa0 ; '.'
0000000000001431         db  0x30 ; '0'
0000000000001432         db  0x21 ; '!'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x05 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x5c ; '\'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x00 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0xa8 ; '.'
0000000000001449         db  0x30 ; '0'
000000000000144a         db  0x21 ; '!'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x05 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x5b ; '['
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x00 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0xb0 ; '.'
0000000000001461         db  0x30 ; '0'
0000000000001462         db  0x21 ; '!'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x05 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x61 ; 'a'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0xb8 ; '.'
0000000000001479         db  0x30 ; '0'
000000000000147a         db  0x21 ; '!'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x05 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x62 ; 'b'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x00 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0xc0 ; '.'
0000000000001491         db  0x30 ; '0'
0000000000001492         db  0x21 ; '!'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x05 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x5e ; '^'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x00 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0xe0 ; '.'
00000000000014a9         db  0x30 ; '0'
00000000000014aa         db  0x21 ; '!'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x05 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x60 ; '`'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x00 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x14c0; 0x1cb8[ (2040 bytes)
        ; File offset : [5312; 7352[ (2040 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

00000000000014c0         db  0x20 ; ' '
00000000000014c1         db  0x2d ; '-'
00000000000014c2         db  0x21 ; '!'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x07 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x01 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x00 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x28 ; '('
00000000000014d9         db  0x2d ; '-'
00000000000014da         db  0x21 ; '!'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x07 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x02 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x00 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x30 ; '0'
00000000000014f1         db  0x2d ; '-'
00000000000014f2         db  0x21 ; '!'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x07 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x03 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x00 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x38 ; '8'
0000000000001509         db  0x2d ; '-'
000000000000150a         db  0x21 ; '!'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x07 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x04 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x00 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x40 ; '@'
0000000000001521         db  0x2d ; '-'
0000000000001522         db  0x21 ; '!'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x07 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x05 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x00 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x48 ; 'H'
0000000000001539         db  0x2d ; '-'
000000000000153a         db  0x21 ; '!'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x07 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x06 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x00 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x50 ; 'P'
0000000000001551         db  0x2d ; '-'
0000000000001552         db  0x21 ; '!'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x07 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x07 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x00 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x58 ; 'X'
0000000000001569         db  0x2d ; '-'
000000000000156a         db  0x21 ; '!'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x07 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x08 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x00 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x60 ; '`'
0000000000001581         db  0x2d ; '-'
0000000000001582         db  0x21 ; '!'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x07 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x0a ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x00 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x68 ; 'h'
0000000000001599         db  0x2d ; '-'
000000000000159a         db  0x21 ; '!'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x07 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x0b ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x00 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x70 ; 'p'
00000000000015b1         db  0x2d ; '-'
00000000000015b2         db  0x21 ; '!'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x07 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x0c ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x00 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x78 ; 'x'
00000000000015c9         db  0x2d ; '-'
00000000000015ca         db  0x21 ; '!'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x07 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x0d ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x80 ; '.'
00000000000015e1         db  0x2d ; '-'
00000000000015e2         db  0x21 ; '!'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x07 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x0e ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x00 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x88 ; '.'
00000000000015f9         db  0x2d ; '-'
00000000000015fa         db  0x21 ; '!'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x07 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x0f ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x00 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x90 ; '.'
0000000000001611         db  0x2d ; '-'
0000000000001612         db  0x21 ; '!'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x07 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x10 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x00 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x98 ; '.'
0000000000001629         db  0x2d ; '-'
000000000000162a         db  0x21 ; '!'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x07 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x11 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x00 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0xa0 ; '.'
0000000000001641         db  0x2d ; '-'
0000000000001642         db  0x21 ; '!'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x07 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x12 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x00 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0xa8 ; '.'
0000000000001659         db  0x2d ; '-'
000000000000165a         db  0x21 ; '!'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x07 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x13 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x00 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0xb0 ; '.'
0000000000001671         db  0x2d ; '-'
0000000000001672         db  0x21 ; '!'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x07 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x14 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x00 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0xb8 ; '.'
0000000000001689         db  0x2d ; '-'
000000000000168a         db  0x21 ; '!'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x07 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x15 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x00 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0xc0 ; '.'
00000000000016a1         db  0x2d ; '-'
00000000000016a2         db  0x21 ; '!'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x07 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x16 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x00 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0xc8 ; '.'
00000000000016b9         db  0x2d ; '-'
00000000000016ba         db  0x21 ; '!'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x07 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x17 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x00 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0xd0 ; '.'
00000000000016d1         db  0x2d ; '-'
00000000000016d2         db  0x21 ; '!'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x07 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x18 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x00 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0xd8 ; '.'
00000000000016e9         db  0x2d ; '-'
00000000000016ea         db  0x21 ; '!'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x07 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x19 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x00 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0xe0 ; '.'
0000000000001701         db  0x2d ; '-'
0000000000001702         db  0x21 ; '!'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x07 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x1a ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x00 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0xe8 ; '.'
0000000000001719         db  0x2d ; '-'
000000000000171a         db  0x21 ; '!'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x07 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x1b ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x00 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0xf0 ; '.'
0000000000001731         db  0x2d ; '-'
0000000000001732         db  0x21 ; '!'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x07 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x1c ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x00 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0xf8 ; '.'
0000000000001749         db  0x2d ; '-'
000000000000174a         db  0x21 ; '!'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x07 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x1d ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x00 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x2e ; '.'
0000000000001762         db  0x21 ; '!'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x07 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x1e ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x00 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x08 ; '.'
0000000000001779         db  0x2e ; '.'
000000000000177a         db  0x21 ; '!'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x07 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x1f ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x00 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x10 ; '.'
0000000000001791         db  0x2e ; '.'
0000000000001792         db  0x21 ; '!'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x07 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x20 ; ' '
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x00 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x18 ; '.'
00000000000017a9         db  0x2e ; '.'
00000000000017aa         db  0x21 ; '!'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x07 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x21 ; '!'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x00 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x20 ; ' '
00000000000017c1         db  0x2e ; '.'
00000000000017c2         db  0x21 ; '!'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x07 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x22 ; '"'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x00 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x28 ; '('
00000000000017d9         db  0x2e ; '.'
00000000000017da         db  0x21 ; '!'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x07 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x23 ; '#'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x00 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x30 ; '0'
00000000000017f1         db  0x2e ; '.'
00000000000017f2         db  0x21 ; '!'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x07 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x24 ; '$'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x00 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x38 ; '8'
0000000000001809         db  0x2e ; '.'
000000000000180a         db  0x21 ; '!'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x07 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x25 ; '%'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x00 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x40 ; '@'
0000000000001821         db  0x2e ; '.'
0000000000001822         db  0x21 ; '!'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x07 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x26 ; '&'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x00 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x48 ; 'H'
0000000000001839         db  0x2e ; '.'
000000000000183a         db  0x21 ; '!'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x07 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x27 ; '''
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x00 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x50 ; 'P'
0000000000001851         db  0x2e ; '.'
0000000000001852         db  0x21 ; '!'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x07 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x28 ; '('
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x00 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x58 ; 'X'
0000000000001869         db  0x2e ; '.'
000000000000186a         db  0x21 ; '!'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x07 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x29 ; ')'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x00 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x60 ; '`'
0000000000001881         db  0x2e ; '.'
0000000000001882         db  0x21 ; '!'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x07 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x2a ; '*'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x00 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x68 ; 'h'
0000000000001899         db  0x2e ; '.'
000000000000189a         db  0x21 ; '!'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x07 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x2b ; '+'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x00 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x70 ; 'p'
00000000000018b1         db  0x2e ; '.'
00000000000018b2         db  0x21 ; '!'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x07 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x2d ; '-'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x00 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x78 ; 'x'
00000000000018c9         db  0x2e ; '.'
00000000000018ca         db  0x21 ; '!'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x07 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x2e ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x80 ; '.'
00000000000018e1         db  0x2e ; '.'
00000000000018e2         db  0x21 ; '!'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x07 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x2f ; '/'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x00 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x88 ; '.'
00000000000018f9         db  0x2e ; '.'
00000000000018fa         db  0x21 ; '!'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x07 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x30 ; '0'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x00 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x90 ; '.'
0000000000001911         db  0x2e ; '.'
0000000000001912         db  0x21 ; '!'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x07 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x31 ; '1'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x00 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x98 ; '.'
0000000000001929         db  0x2e ; '.'
000000000000192a         db  0x21 ; '!'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x07 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x33 ; '3'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x00 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0xa0 ; '.'
0000000000001941         db  0x2e ; '.'
0000000000001942         db  0x21 ; '!'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x07 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x34 ; '4'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x00 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0xa8 ; '.'
0000000000001959         db  0x2e ; '.'
000000000000195a         db  0x21 ; '!'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x07 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x35 ; '5'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x00 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0xb0 ; '.'
0000000000001971         db  0x2e ; '.'
0000000000001972         db  0x21 ; '!'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x07 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x36 ; '6'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x00 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x00 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0xb8 ; '.'
0000000000001989         db  0x2e ; '.'
000000000000198a         db  0x21 ; '!'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x07 ; '.'
0000000000001991         db  0x00 ; '.'
0000000000001992         db  0x00 ; '.'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x37 ; '7'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x00 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x00 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0xc0 ; '.'
00000000000019a1         db  0x2e ; '.'
00000000000019a2         db  0x21 ; '!'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x07 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x38 ; '8'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x00 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x00 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0xc8 ; '.'
00000000000019b9         db  0x2e ; '.'
00000000000019ba         db  0x21 ; '!'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x07 ; '.'
00000000000019c1         db  0x00 ; '.'
00000000000019c2         db  0x00 ; '.'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x39 ; '9'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x00 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x00 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0xd0 ; '.'
00000000000019d1         db  0x2e ; '.'
00000000000019d2         db  0x21 ; '!'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x07 ; '.'
00000000000019d9         db  0x00 ; '.'
00000000000019da         db  0x00 ; '.'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x3a ; ':'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x00 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x00 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0xd8 ; '.'
00000000000019e9         db  0x2e ; '.'
00000000000019ea         db  0x21 ; '!'
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x00 ; '.'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0x07 ; '.'
00000000000019f1         db  0x00 ; '.'
00000000000019f2         db  0x00 ; '.'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x3b ; ';'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x00 ; '.'
00000000000019f9         db  0x00 ; '.'
00000000000019fa         db  0x00 ; '.'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x00 ; '.'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0xe0 ; '.'
0000000000001a01         db  0x2e ; '.'
0000000000001a02         db  0x21 ; '!'
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x00 ; '.'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0x07 ; '.'
0000000000001a09         db  0x00 ; '.'
0000000000001a0a         db  0x00 ; '.'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x3c ; '<'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x00 ; '.'
0000000000001a11         db  0x00 ; '.'
0000000000001a12         db  0x00 ; '.'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x00 ; '.'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'
0000000000001a18         db  0xe8 ; '.'
0000000000001a19         db  0x2e ; '.'
0000000000001a1a         db  0x21 ; '!'
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x00 ; '.'
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0x07 ; '.'
0000000000001a21         db  0x00 ; '.'
0000000000001a22         db  0x00 ; '.'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x3d ; '='
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x00 ; '.'
0000000000001a29         db  0x00 ; '.'
0000000000001a2a         db  0x00 ; '.'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x00 ; '.'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0xf0 ; '.'
0000000000001a31         db  0x2e ; '.'
0000000000001a32         db  0x21 ; '!'
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x00 ; '.'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0x07 ; '.'
0000000000001a39         db  0x00 ; '.'
0000000000001a3a         db  0x00 ; '.'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x3e ; '>'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x00 ; '.'
0000000000001a41         db  0x00 ; '.'
0000000000001a42         db  0x00 ; '.'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x00 ; '.'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0xf8 ; '.'
0000000000001a49         db  0x2e ; '.'
0000000000001a4a         db  0x21 ; '!'
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x00 ; '.'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0x07 ; '.'
0000000000001a51         db  0x00 ; '.'
0000000000001a52         db  0x00 ; '.'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x3f ; '?'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x00 ; '.'
0000000000001a59         db  0x00 ; '.'
0000000000001a5a         db  0x00 ; '.'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x00 ; '.'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0x00 ; '.'
0000000000001a61         db  0x2f ; '/'
0000000000001a62         db  0x21 ; '!'
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x00 ; '.'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0x07 ; '.'
0000000000001a69         db  0x00 ; '.'
0000000000001a6a         db  0x00 ; '.'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x40 ; '@'
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x00 ; '.'
0000000000001a71         db  0x00 ; '.'
0000000000001a72         db  0x00 ; '.'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x00 ; '.'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0x08 ; '.'
0000000000001a79         db  0x2f ; '/'
0000000000001a7a         db  0x21 ; '!'
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x00 ; '.'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0x07 ; '.'
0000000000001a81         db  0x00 ; '.'
0000000000001a82         db  0x00 ; '.'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x41 ; 'A'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x00 ; '.'
0000000000001a89         db  0x00 ; '.'
0000000000001a8a         db  0x00 ; '.'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x00 ; '.'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0x10 ; '.'
0000000000001a91         db  0x2f ; '/'
0000000000001a92         db  0x21 ; '!'
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x00 ; '.'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'
0000000000001a98         db  0x07 ; '.'
0000000000001a99         db  0x00 ; '.'
0000000000001a9a         db  0x00 ; '.'
0000000000001a9b         db  0x00 ; '.'
0000000000001a9c         db  0x42 ; 'B'
0000000000001a9d         db  0x00 ; '.'
0000000000001a9e         db  0x00 ; '.'
0000000000001a9f         db  0x00 ; '.'
0000000000001aa0         db  0x00 ; '.'
0000000000001aa1         db  0x00 ; '.'
0000000000001aa2         db  0x00 ; '.'
0000000000001aa3         db  0x00 ; '.'
0000000000001aa4         db  0x00 ; '.'
0000000000001aa5         db  0x00 ; '.'
0000000000001aa6         db  0x00 ; '.'
0000000000001aa7         db  0x00 ; '.'
0000000000001aa8         db  0x18 ; '.'
0000000000001aa9         db  0x2f ; '/'
0000000000001aaa         db  0x21 ; '!'
0000000000001aab         db  0x00 ; '.'
0000000000001aac         db  0x00 ; '.'
0000000000001aad         db  0x00 ; '.'
0000000000001aae         db  0x00 ; '.'
0000000000001aaf         db  0x00 ; '.'
0000000000001ab0         db  0x07 ; '.'
0000000000001ab1         db  0x00 ; '.'
0000000000001ab2         db  0x00 ; '.'
0000000000001ab3         db  0x00 ; '.'
0000000000001ab4         db  0x43 ; 'C'
0000000000001ab5         db  0x00 ; '.'
0000000000001ab6         db  0x00 ; '.'
0000000000001ab7         db  0x00 ; '.'
0000000000001ab8         db  0x00 ; '.'
0000000000001ab9         db  0x00 ; '.'
0000000000001aba         db  0x00 ; '.'
0000000000001abb         db  0x00 ; '.'
0000000000001abc         db  0x00 ; '.'
0000000000001abd         db  0x00 ; '.'
0000000000001abe         db  0x00 ; '.'
0000000000001abf         db  0x00 ; '.'
0000000000001ac0         db  0x20 ; ' '
0000000000001ac1         db  0x2f ; '/'
0000000000001ac2         db  0x21 ; '!'
0000000000001ac3         db  0x00 ; '.'
0000000000001ac4         db  0x00 ; '.'
0000000000001ac5         db  0x00 ; '.'
0000000000001ac6         db  0x00 ; '.'
0000000000001ac7         db  0x00 ; '.'
0000000000001ac8         db  0x07 ; '.'
0000000000001ac9         db  0x00 ; '.'
0000000000001aca         db  0x00 ; '.'
0000000000001acb         db  0x00 ; '.'
0000000000001acc         db  0x44 ; 'D'
0000000000001acd         db  0x00 ; '.'
0000000000001ace         db  0x00 ; '.'
0000000000001acf         db  0x00 ; '.'
0000000000001ad0         db  0x00 ; '.'
0000000000001ad1         db  0x00 ; '.'
0000000000001ad2         db  0x00 ; '.'
0000000000001ad3         db  0x00 ; '.'
0000000000001ad4         db  0x00 ; '.'
0000000000001ad5         db  0x00 ; '.'
0000000000001ad6         db  0x00 ; '.'
0000000000001ad7         db  0x00 ; '.'
0000000000001ad8         db  0x28 ; '('
0000000000001ad9         db  0x2f ; '/'
0000000000001ada         db  0x21 ; '!'
0000000000001adb         db  0x00 ; '.'
0000000000001adc         db  0x00 ; '.'
0000000000001add         db  0x00 ; '.'
0000000000001ade         db  0x00 ; '.'
0000000000001adf         db  0x00 ; '.'
0000000000001ae0         db  0x07 ; '.'
0000000000001ae1         db  0x00 ; '.'
0000000000001ae2         db  0x00 ; '.'
0000000000001ae3         db  0x00 ; '.'
0000000000001ae4         db  0x45 ; 'E'
0000000000001ae5         db  0x00 ; '.'
0000000000001ae6         db  0x00 ; '.'
0000000000001ae7         db  0x00 ; '.'
0000000000001ae8         db  0x00 ; '.'
0000000000001ae9         db  0x00 ; '.'
0000000000001aea         db  0x00 ; '.'
0000000000001aeb         db  0x00 ; '.'
0000000000001aec         db  0x00 ; '.'
0000000000001aed         db  0x00 ; '.'
0000000000001aee         db  0x00 ; '.'
0000000000001aef         db  0x00 ; '.'
0000000000001af0         db  0x30 ; '0'
0000000000001af1         db  0x2f ; '/'
0000000000001af2         db  0x21 ; '!'
0000000000001af3         db  0x00 ; '.'
0000000000001af4         db  0x00 ; '.'
0000000000001af5         db  0x00 ; '.'
0000000000001af6         db  0x00 ; '.'
0000000000001af7         db  0x00 ; '.'
0000000000001af8         db  0x07 ; '.'
0000000000001af9         db  0x00 ; '.'
0000000000001afa         db  0x00 ; '.'
0000000000001afb         db  0x00 ; '.'
0000000000001afc         db  0x46 ; 'F'
0000000000001afd         db  0x00 ; '.'
0000000000001afe         db  0x00 ; '.'
0000000000001aff         db  0x00 ; '.'
0000000000001b00         db  0x00 ; '.'
0000000000001b01         db  0x00 ; '.'
0000000000001b02         db  0x00 ; '.'
0000000000001b03         db  0x00 ; '.'
0000000000001b04         db  0x00 ; '.'
0000000000001b05         db  0x00 ; '.'
0000000000001b06         db  0x00 ; '.'
0000000000001b07         db  0x00 ; '.'
0000000000001b08         db  0x38 ; '8'
0000000000001b09         db  0x2f ; '/'
0000000000001b0a         db  0x21 ; '!'
0000000000001b0b         db  0x00 ; '.'
0000000000001b0c         db  0x00 ; '.'
0000000000001b0d         db  0x00 ; '.'
0000000000001b0e         db  0x00 ; '.'
0000000000001b0f         db  0x00 ; '.'
0000000000001b10         db  0x07 ; '.'
0000000000001b11         db  0x00 ; '.'
0000000000001b12         db  0x00 ; '.'
0000000000001b13         db  0x00 ; '.'
0000000000001b14         db  0x47 ; 'G'
0000000000001b15         db  0x00 ; '.'
0000000000001b16         db  0x00 ; '.'
0000000000001b17         db  0x00 ; '.'
0000000000001b18         db  0x00 ; '.'
0000000000001b19         db  0x00 ; '.'
0000000000001b1a         db  0x00 ; '.'
0000000000001b1b         db  0x00 ; '.'
0000000000001b1c         db  0x00 ; '.'
0000000000001b1d         db  0x00 ; '.'
0000000000001b1e         db  0x00 ; '.'
0000000000001b1f         db  0x00 ; '.'
0000000000001b20         db  0x40 ; '@'
0000000000001b21         db  0x2f ; '/'
0000000000001b22         db  0x21 ; '!'
0000000000001b23         db  0x00 ; '.'
0000000000001b24         db  0x00 ; '.'
0000000000001b25         db  0x00 ; '.'
0000000000001b26         db  0x00 ; '.'
0000000000001b27         db  0x00 ; '.'
0000000000001b28         db  0x07 ; '.'
0000000000001b29         db  0x00 ; '.'
0000000000001b2a         db  0x00 ; '.'
0000000000001b2b         db  0x00 ; '.'
0000000000001b2c         db  0x48 ; 'H'
0000000000001b2d         db  0x00 ; '.'
0000000000001b2e         db  0x00 ; '.'
0000000000001b2f         db  0x00 ; '.'
0000000000001b30         db  0x00 ; '.'
0000000000001b31         db  0x00 ; '.'
0000000000001b32         db  0x00 ; '.'
0000000000001b33         db  0x00 ; '.'
0000000000001b34         db  0x00 ; '.'
0000000000001b35         db  0x00 ; '.'
0000000000001b36         db  0x00 ; '.'
0000000000001b37         db  0x00 ; '.'
0000000000001b38         db  0x48 ; 'H'
0000000000001b39         db  0x2f ; '/'
0000000000001b3a         db  0x21 ; '!'
0000000000001b3b         db  0x00 ; '.'
0000000000001b3c         db  0x00 ; '.'
0000000000001b3d         db  0x00 ; '.'
0000000000001b3e         db  0x00 ; '.'
0000000000001b3f         db  0x00 ; '.'
0000000000001b40         db  0x07 ; '.'
0000000000001b41         db  0x00 ; '.'
0000000000001b42         db  0x00 ; '.'
0000000000001b43         db  0x00 ; '.'
0000000000001b44         db  0x49 ; 'I'
0000000000001b45         db  0x00 ; '.'
0000000000001b46         db  0x00 ; '.'
0000000000001b47         db  0x00 ; '.'
0000000000001b48         db  0x00 ; '.'
0000000000001b49         db  0x00 ; '.'
0000000000001b4a         db  0x00 ; '.'
0000000000001b4b         db  0x00 ; '.'
0000000000001b4c         db  0x00 ; '.'
0000000000001b4d         db  0x00 ; '.'
0000000000001b4e         db  0x00 ; '.'
0000000000001b4f         db  0x00 ; '.'
0000000000001b50         db  0x50 ; 'P'
0000000000001b51         db  0x2f ; '/'
0000000000001b52         db  0x21 ; '!'
0000000000001b53         db  0x00 ; '.'
0000000000001b54         db  0x00 ; '.'
0000000000001b55         db  0x00 ; '.'
0000000000001b56         db  0x00 ; '.'
0000000000001b57         db  0x00 ; '.'
0000000000001b58         db  0x07 ; '.'
0000000000001b59         db  0x00 ; '.'
0000000000001b5a         db  0x00 ; '.'
0000000000001b5b         db  0x00 ; '.'
0000000000001b5c         db  0x4a ; 'J'
0000000000001b5d         db  0x00 ; '.'
0000000000001b5e         db  0x00 ; '.'
0000000000001b5f         db  0x00 ; '.'
0000000000001b60         db  0x00 ; '.'
0000000000001b61         db  0x00 ; '.'
0000000000001b62         db  0x00 ; '.'
0000000000001b63         db  0x00 ; '.'
0000000000001b64         db  0x00 ; '.'
0000000000001b65         db  0x00 ; '.'
0000000000001b66         db  0x00 ; '.'
0000000000001b67         db  0x00 ; '.'
0000000000001b68         db  0x58 ; 'X'
0000000000001b69         db  0x2f ; '/'
0000000000001b6a         db  0x21 ; '!'
0000000000001b6b         db  0x00 ; '.'
0000000000001b6c         db  0x00 ; '.'
0000000000001b6d         db  0x00 ; '.'
0000000000001b6e         db  0x00 ; '.'
0000000000001b6f         db  0x00 ; '.'
0000000000001b70         db  0x07 ; '.'
0000000000001b71         db  0x00 ; '.'
0000000000001b72         db  0x00 ; '.'
0000000000001b73         db  0x00 ; '.'
0000000000001b74         db  0x4b ; 'K'
0000000000001b75         db  0x00 ; '.'
0000000000001b76         db  0x00 ; '.'
0000000000001b77         db  0x00 ; '.'
0000000000001b78         db  0x00 ; '.'
0000000000001b79         db  0x00 ; '.'
0000000000001b7a         db  0x00 ; '.'
0000000000001b7b         db  0x00 ; '.'
0000000000001b7c         db  0x00 ; '.'
0000000000001b7d         db  0x00 ; '.'
0000000000001b7e         db  0x00 ; '.'
0000000000001b7f         db  0x00 ; '.'
0000000000001b80         db  0x60 ; '`'
0000000000001b81         db  0x2f ; '/'
0000000000001b82         db  0x21 ; '!'
0000000000001b83         db  0x00 ; '.'
0000000000001b84         db  0x00 ; '.'
0000000000001b85         db  0x00 ; '.'
0000000000001b86         db  0x00 ; '.'
0000000000001b87         db  0x00 ; '.'
0000000000001b88         db  0x07 ; '.'
0000000000001b89         db  0x00 ; '.'
0000000000001b8a         db  0x00 ; '.'
0000000000001b8b         db  0x00 ; '.'
0000000000001b8c         db  0x4c ; 'L'
0000000000001b8d         db  0x00 ; '.'
0000000000001b8e         db  0x00 ; '.'
0000000000001b8f         db  0x00 ; '.'
0000000000001b90         db  0x00 ; '.'
0000000000001b91         db  0x00 ; '.'
0000000000001b92         db  0x00 ; '.'
0000000000001b93         db  0x00 ; '.'
0000000000001b94         db  0x00 ; '.'
0000000000001b95         db  0x00 ; '.'
0000000000001b96         db  0x00 ; '.'
0000000000001b97         db  0x00 ; '.'
0000000000001b98         db  0x68 ; 'h'
0000000000001b99         db  0x2f ; '/'
0000000000001b9a         db  0x21 ; '!'
0000000000001b9b         db  0x00 ; '.'
0000000000001b9c         db  0x00 ; '.'
0000000000001b9d         db  0x00 ; '.'
0000000000001b9e         db  0x00 ; '.'
0000000000001b9f         db  0x00 ; '.'
0000000000001ba0         db  0x07 ; '.'
0000000000001ba1         db  0x00 ; '.'
0000000000001ba2         db  0x00 ; '.'
0000000000001ba3         db  0x00 ; '.'
0000000000001ba4         db  0x4d ; 'M'
0000000000001ba5         db  0x00 ; '.'
0000000000001ba6         db  0x00 ; '.'
0000000000001ba7         db  0x00 ; '.'
0000000000001ba8         db  0x00 ; '.'
0000000000001ba9         db  0x00 ; '.'
0000000000001baa         db  0x00 ; '.'
0000000000001bab         db  0x00 ; '.'
0000000000001bac         db  0x00 ; '.'
0000000000001bad         db  0x00 ; '.'
0000000000001bae         db  0x00 ; '.'
0000000000001baf         db  0x00 ; '.'
0000000000001bb0         db  0x70 ; 'p'
0000000000001bb1         db  0x2f ; '/'
0000000000001bb2         db  0x21 ; '!'
0000000000001bb3         db  0x00 ; '.'
0000000000001bb4         db  0x00 ; '.'
0000000000001bb5         db  0x00 ; '.'
0000000000001bb6         db  0x00 ; '.'
0000000000001bb7         db  0x00 ; '.'
0000000000001bb8         db  0x07 ; '.'
0000000000001bb9         db  0x00 ; '.'
0000000000001bba         db  0x00 ; '.'
0000000000001bbb         db  0x00 ; '.'
0000000000001bbc         db  0x4e ; 'N'
0000000000001bbd         db  0x00 ; '.'
0000000000001bbe         db  0x00 ; '.'
0000000000001bbf         db  0x00 ; '.'
0000000000001bc0         db  0x00 ; '.'
0000000000001bc1         db  0x00 ; '.'
0000000000001bc2         db  0x00 ; '.'
0000000000001bc3         db  0x00 ; '.'
0000000000001bc4         db  0x00 ; '.'
0000000000001bc5         db  0x00 ; '.'
0000000000001bc6         db  0x00 ; '.'
0000000000001bc7         db  0x00 ; '.'
0000000000001bc8         db  0x78 ; 'x'
0000000000001bc9         db  0x2f ; '/'
0000000000001bca         db  0x21 ; '!'
0000000000001bcb         db  0x00 ; '.'
0000000000001bcc         db  0x00 ; '.'
0000000000001bcd         db  0x00 ; '.'
0000000000001bce         db  0x00 ; '.'
0000000000001bcf         db  0x00 ; '.'
0000000000001bd0         db  0x07 ; '.'
0000000000001bd1         db  0x00 ; '.'
0000000000001bd2         db  0x00 ; '.'
0000000000001bd3         db  0x00 ; '.'
0000000000001bd4         db  0x4f ; 'O'
0000000000001bd5         db  0x00 ; '.'
0000000000001bd6         db  0x00 ; '.'
0000000000001bd7         db  0x00 ; '.'
0000000000001bd8         db  0x00 ; '.'
0000000000001bd9         db  0x00 ; '.'
0000000000001bda         db  0x00 ; '.'
0000000000001bdb         db  0x00 ; '.'
0000000000001bdc         db  0x00 ; '.'
0000000000001bdd         db  0x00 ; '.'
0000000000001bde         db  0x00 ; '.'
0000000000001bdf         db  0x00 ; '.'
0000000000001be0         db  0x80 ; '.'
0000000000001be1         db  0x2f ; '/'
0000000000001be2         db  0x21 ; '!'
0000000000001be3         db  0x00 ; '.'
0000000000001be4         db  0x00 ; '.'
0000000000001be5         db  0x00 ; '.'
0000000000001be6         db  0x00 ; '.'
0000000000001be7         db  0x00 ; '.'
0000000000001be8         db  0x07 ; '.'
0000000000001be9         db  0x00 ; '.'
0000000000001bea         db  0x00 ; '.'
0000000000001beb         db  0x00 ; '.'
0000000000001bec         db  0x50 ; 'P'
0000000000001bed         db  0x00 ; '.'
0000000000001bee         db  0x00 ; '.'
0000000000001bef         db  0x00 ; '.'
0000000000001bf0         db  0x00 ; '.'
0000000000001bf1         db  0x00 ; '.'
0000000000001bf2         db  0x00 ; '.'
0000000000001bf3         db  0x00 ; '.'
0000000000001bf4         db  0x00 ; '.'
0000000000001bf5         db  0x00 ; '.'
0000000000001bf6         db  0x00 ; '.'
0000000000001bf7         db  0x00 ; '.'
0000000000001bf8         db  0x88 ; '.'
0000000000001bf9         db  0x2f ; '/'
0000000000001bfa         db  0x21 ; '!'
0000000000001bfb         db  0x00 ; '.'
0000000000001bfc         db  0x00 ; '.'
0000000000001bfd         db  0x00 ; '.'
0000000000001bfe         db  0x00 ; '.'
0000000000001bff         db  0x00 ; '.'
0000000000001c00         db  0x07 ; '.'
0000000000001c01         db  0x00 ; '.'
0000000000001c02         db  0x00 ; '.'
0000000000001c03         db  0x00 ; '.'
0000000000001c04         db  0x51 ; 'Q'
0000000000001c05         db  0x00 ; '.'
0000000000001c06         db  0x00 ; '.'
0000000000001c07         db  0x00 ; '.'
0000000000001c08         db  0x00 ; '.'
0000000000001c09         db  0x00 ; '.'
0000000000001c0a         db  0x00 ; '.'
0000000000001c0b         db  0x00 ; '.'
0000000000001c0c         db  0x00 ; '.'
0000000000001c0d         db  0x00 ; '.'
0000000000001c0e         db  0x00 ; '.'
0000000000001c0f         db  0x00 ; '.'
0000000000001c10         db  0x90 ; '.'
0000000000001c11         db  0x2f ; '/'
0000000000001c12         db  0x21 ; '!'
0000000000001c13         db  0x00 ; '.'
0000000000001c14         db  0x00 ; '.'
0000000000001c15         db  0x00 ; '.'
0000000000001c16         db  0x00 ; '.'
0000000000001c17         db  0x00 ; '.'
0000000000001c18         db  0x07 ; '.'
0000000000001c19         db  0x00 ; '.'
0000000000001c1a         db  0x00 ; '.'
0000000000001c1b         db  0x00 ; '.'
0000000000001c1c         db  0x53 ; 'S'
0000000000001c1d         db  0x00 ; '.'
0000000000001c1e         db  0x00 ; '.'
0000000000001c1f         db  0x00 ; '.'
0000000000001c20         db  0x00 ; '.'
0000000000001c21         db  0x00 ; '.'
0000000000001c22         db  0x00 ; '.'
0000000000001c23         db  0x00 ; '.'
0000000000001c24         db  0x00 ; '.'
0000000000001c25         db  0x00 ; '.'
0000000000001c26         db  0x00 ; '.'
0000000000001c27         db  0x00 ; '.'
0000000000001c28         db  0x98 ; '.'
0000000000001c29         db  0x2f ; '/'
0000000000001c2a         db  0x21 ; '!'
0000000000001c2b         db  0x00 ; '.'
0000000000001c2c         db  0x00 ; '.'
0000000000001c2d         db  0x00 ; '.'
0000000000001c2e         db  0x00 ; '.'
0000000000001c2f         db  0x00 ; '.'
0000000000001c30         db  0x07 ; '.'
0000000000001c31         db  0x00 ; '.'
0000000000001c32         db  0x00 ; '.'
0000000000001c33         db  0x00 ; '.'
0000000000001c34         db  0x54 ; 'T'
0000000000001c35         db  0x00 ; '.'
0000000000001c36         db  0x00 ; '.'
0000000000001c37         db  0x00 ; '.'
0000000000001c38         db  0x00 ; '.'
0000000000001c39         db  0x00 ; '.'
0000000000001c3a         db  0x00 ; '.'
0000000000001c3b         db  0x00 ; '.'
0000000000001c3c         db  0x00 ; '.'
0000000000001c3d         db  0x00 ; '.'
0000000000001c3e         db  0x00 ; '.'
0000000000001c3f         db  0x00 ; '.'
0000000000001c40         db  0xa0 ; '.'
0000000000001c41         db  0x2f ; '/'
0000000000001c42         db  0x21 ; '!'
0000000000001c43         db  0x00 ; '.'
0000000000001c44         db  0x00 ; '.'
0000000000001c45         db  0x00 ; '.'
0000000000001c46         db  0x00 ; '.'
0000000000001c47         db  0x00 ; '.'
0000000000001c48         db  0x07 ; '.'
0000000000001c49         db  0x00 ; '.'
0000000000001c4a         db  0x00 ; '.'
0000000000001c4b         db  0x00 ; '.'
0000000000001c4c         db  0x55 ; 'U'
0000000000001c4d         db  0x00 ; '.'
0000000000001c4e         db  0x00 ; '.'
0000000000001c4f         db  0x00 ; '.'
0000000000001c50         db  0x00 ; '.'
0000000000001c51         db  0x00 ; '.'
0000000000001c52         db  0x00 ; '.'
0000000000001c53         db  0x00 ; '.'
0000000000001c54         db  0x00 ; '.'
0000000000001c55         db  0x00 ; '.'
0000000000001c56         db  0x00 ; '.'
0000000000001c57         db  0x00 ; '.'
0000000000001c58         db  0xa8 ; '.'
0000000000001c59         db  0x2f ; '/'
0000000000001c5a         db  0x21 ; '!'
0000000000001c5b         db  0x00 ; '.'
0000000000001c5c         db  0x00 ; '.'
0000000000001c5d         db  0x00 ; '.'
0000000000001c5e         db  0x00 ; '.'
0000000000001c5f         db  0x00 ; '.'
0000000000001c60         db  0x07 ; '.'
0000000000001c61         db  0x00 ; '.'
0000000000001c62         db  0x00 ; '.'
0000000000001c63         db  0x00 ; '.'
0000000000001c64         db  0x57 ; 'W'
0000000000001c65         db  0x00 ; '.'
0000000000001c66         db  0x00 ; '.'
0000000000001c67         db  0x00 ; '.'
0000000000001c68         db  0x00 ; '.'
0000000000001c69         db  0x00 ; '.'
0000000000001c6a         db  0x00 ; '.'
0000000000001c6b         db  0x00 ; '.'
0000000000001c6c         db  0x00 ; '.'
0000000000001c6d         db  0x00 ; '.'
0000000000001c6e         db  0x00 ; '.'
0000000000001c6f         db  0x00 ; '.'
0000000000001c70         db  0xb0 ; '.'
0000000000001c71         db  0x2f ; '/'
0000000000001c72         db  0x21 ; '!'
0000000000001c73         db  0x00 ; '.'
0000000000001c74         db  0x00 ; '.'
0000000000001c75         db  0x00 ; '.'
0000000000001c76         db  0x00 ; '.'
0000000000001c77         db  0x00 ; '.'
0000000000001c78         db  0x07 ; '.'
0000000000001c79         db  0x00 ; '.'
0000000000001c7a         db  0x00 ; '.'
0000000000001c7b         db  0x00 ; '.'
0000000000001c7c         db  0x58 ; 'X'
0000000000001c7d         db  0x00 ; '.'
0000000000001c7e         db  0x00 ; '.'
0000000000001c7f         db  0x00 ; '.'
0000000000001c80         db  0x00 ; '.'
0000000000001c81         db  0x00 ; '.'
0000000000001c82         db  0x00 ; '.'
0000000000001c83         db  0x00 ; '.'
0000000000001c84         db  0x00 ; '.'
0000000000001c85         db  0x00 ; '.'
0000000000001c86         db  0x00 ; '.'
0000000000001c87         db  0x00 ; '.'
0000000000001c88         db  0xb8 ; '.'
0000000000001c89         db  0x2f ; '/'
0000000000001c8a         db  0x21 ; '!'
0000000000001c8b         db  0x00 ; '.'
0000000000001c8c         db  0x00 ; '.'
0000000000001c8d         db  0x00 ; '.'
0000000000001c8e         db  0x00 ; '.'
0000000000001c8f         db  0x00 ; '.'
0000000000001c90         db  0x07 ; '.'
0000000000001c91         db  0x00 ; '.'
0000000000001c92         db  0x00 ; '.'
0000000000001c93         db  0x00 ; '.'
0000000000001c94         db  0x59 ; 'Y'
0000000000001c95         db  0x00 ; '.'
0000000000001c96         db  0x00 ; '.'
0000000000001c97         db  0x00 ; '.'
0000000000001c98         db  0x00 ; '.'
0000000000001c99         db  0x00 ; '.'
0000000000001c9a         db  0x00 ; '.'
0000000000001c9b         db  0x00 ; '.'
0000000000001c9c         db  0x00 ; '.'
0000000000001c9d         db  0x00 ; '.'
0000000000001c9e         db  0x00 ; '.'
0000000000001c9f         db  0x00 ; '.'
0000000000001ca0         db  0xc0 ; '.'
0000000000001ca1         db  0x2f ; '/'
0000000000001ca2         db  0x21 ; '!'
0000000000001ca3         db  0x00 ; '.'
0000000000001ca4         db  0x00 ; '.'
0000000000001ca5         db  0x00 ; '.'
0000000000001ca6         db  0x00 ; '.'
0000000000001ca7         db  0x00 ; '.'
0000000000001ca8         db  0x07 ; '.'
0000000000001ca9         db  0x00 ; '.'
0000000000001caa         db  0x00 ; '.'
0000000000001cab         db  0x00 ; '.'
0000000000001cac         db  0x5a ; 'Z'
0000000000001cad         db  0x00 ; '.'
0000000000001cae         db  0x00 ; '.'
0000000000001caf         db  0x00 ; '.'
0000000000001cb0         db  0x00 ; '.'
0000000000001cb1         db  0x00 ; '.'
0000000000001cb2         db  0x00 ; '.'
0000000000001cb3         db  0x00 ; '.'
0000000000001cb4         db  0x00 ; '.'
0000000000001cb5         db  0x00 ; '.'
0000000000001cb6         db  0x00 ; '.'
0000000000001cb7         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1cb8; 0x1ccf[ (23 bytes)
        ; File offset : [7352; 7375[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001cb8         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001cbc         mov        rax, qword [qword_212fd8]                   ; qword_212fd8
0000000000001cc3         test       rax, rax
0000000000001cc6         je         loc_1cca

0000000000001cc8         call       rax

                     loc_1cca:
0000000000001cca         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001cce         ret
                        ; endp
0000000000001ccf         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1cd0; 0x2230[ (1376 bytes)
        ; File offset : [7376; 8752[ (1376 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1cd0:
0000000000001cd0         push       qword [qword_212d10]                        ; Begin of unwind block (FDE at 0x1067c), qword_212d10, CODE XREF=sub_1ce6+5
0000000000001cd6         jmp        qword [qword_212d10+8]                      ; 0x212d18
                        ; endp
0000000000001cdc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
0000000000001ce0         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=memcpy_uppcase+19
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x0
0000000000001ceb         jmp        loc_1cd0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000001cf0         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=main+527, human_time+207, set_tz+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x1
0000000000001cfb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000001d00         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x2
0000000000001d0b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001d10         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=print_it+279, default_format+131, default_format+181, default_format+231, print_stat+413, print_stat+456, find_mount_point+152, areadlink_with_size+110, areadlink_with_size+199, quotearg_n_options+277, quotearg_free+55
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x3
0000000000001d1b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_endmntent:        // endmntent
0000000000001d20         jmp        qword [endmntent@GOT]                       ; endmntent, endmntent@GOT, CODE XREF=read_file_system_list+1793
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x4
0000000000001d2b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001d30         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_8090+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, vasnprintf+3878
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x5
0000000000001d3b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001d40         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1056, main+1122, find_bind_mount+285, print_stat+1044, print_stat+1397, print_stat+1499, find_mount_point+59, areadlink_with_size+184, areadlink_with_size+224, close_stdout+22, quotearg_n_options+28
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x6
0000000000001d4b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001d50         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+972, usage+1165, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x7
0000000000001d5b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localtime_r:        // localtime_r
0000000000001d60         jmp        qword [localtime_r@GOT]                     ; localtime_r, localtime_r@GOT, CODE XREF=localtime_rz+43, mktime_z+170
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x8
0000000000001d6b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001d70         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x9
0000000000001d7b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcpy:        // strcpy
0000000000001d80         jmp        qword [strcpy@GOT]                          ; strcpy, strcpy@GOT, CODE XREF=make_format+177
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0xa
0000000000001d8b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001d90         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0xb
0000000000001d9b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localeconv:        // localeconv
0000000000001da0         jmp        qword [localeconv@GOT]                      ; localeconv, localeconv@GOT, CODE XREF=main+110
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0xc
0000000000001dab         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_readlink:        // readlink
0000000000001db0         jmp        qword [readlink@GOT]                        ; readlink, readlink@GOT, CODE XREF=areadlink_with_size+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0xd
0000000000001dbb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001dc0         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0xe
0000000000001dcb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setenv:        // setenv
0000000000001dd0         jmp        qword [setenv@GOT]                          ; setenv, setenv@GOT, CODE XREF=setenv_TZ+20
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd6:
0000000000001dd6         push       0xf
0000000000001ddb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001de0         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+105
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1de6:
0000000000001de6         push       0x10
0000000000001deb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001df0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1df6:
0000000000001df6         push       0x11
0000000000001dfb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getpwuid:        // getpwuid
0000000000001e00         jmp        qword [getpwuid@GOT]                        ; getpwuid, getpwuid@GOT, CODE XREF=print_stat+772
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e06:
0000000000001e06         push       0x12
0000000000001e0b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001e10         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+93
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e16:
0000000000001e16         push       0x13
0000000000001e1b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001e20         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+902, main+1048, main+1114, main+1222, main+1356, print_it+140, print_it+868, print_it+1241, find_bind_mount+277, default_format+59, default_format+100
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e26:
0000000000001e26         push       0x14
0000000000001e2b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001e30         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e36:
0000000000001e36         push       0x15
0000000000001e3b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001e40         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=main+142, print_it+36, find_mount_point+109, argmatch+33, argmatch+174, base_len+4, sub_6560+36, quotearg_buffer_restyled+343, sub_8090+411, sub_8090+1742, xstrdup+4
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e46:
0000000000001e46         push       0x16
0000000000001e4b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
0000000000001e50         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=main+994
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e56:
0000000000001e56         push       0x17
0000000000001e5b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_openat:        // openat
0000000000001e60         jmp        qword [openat@GOT]                          ; openat, openat@GOT, CODE XREF=cdb_advance_fd+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e66:
0000000000001e66         push       0x18
0000000000001e6b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_chdir:        // chdir
0000000000001e70         jmp        qword [chdir@GOT]                           ; chdir, chdir@GOT, CODE XREF=find_mount_point+160, find_mount_point+267, find_mount_point+689, chdir_long+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e76:
0000000000001e76         push       0x19
0000000000001e7b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001e80         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+1337, human_time+235, find_bind_mount+313, find_mount_point+947, sub_7690+181, nstrftime+73, sub_8090+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e86:
0000000000001e86         push       0x1a
0000000000001e8b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001e90         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+194
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e96:
0000000000001e96         push       0x1b
0000000000001e9b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001ea0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ea6:
0000000000001ea6         push       0x1c
0000000000001eab         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001eb0         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=make_format+55, make_format+95, read_file_system_list+630, read_file_system_list+1716
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1eb6:
0000000000001eb6         push       0x1d
0000000000001ebb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getgrgid:        // getgrgid
0000000000001ec0         jmp        qword [getgrgid@GOT]                        ; getgrgid, getgrgid@GOT, CODE XREF=print_stat+988
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ec6:
0000000000001ec6         push       0x1e
0000000000001ecb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001ed0         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=print_statfs+1381, print_it+806, print_it+949, print_it+971, print_it+1106, print_it+1143, print_it+1191, print_stat+1445, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ed6:
0000000000001ed6         push       0x1f
0000000000001edb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001ee0         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ee6:
0000000000001ee6         push       0x20
0000000000001eeb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_gmtime_r:        // gmtime_r
0000000000001ef0         jmp        qword [gmtime_r@GOT]                        ; gmtime_r, gmtime_r@GOT, CODE XREF=localtime_rz+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ef6:
0000000000001ef6         push       0x21
0000000000001efb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001f00         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f06:
0000000000001f06         push       0x22
0000000000001f0b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001f10         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=cdb_free+60, chdir_long+588, chdir_long+624, chdir_long+655, chdir_long+686, chdir_long+717
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f16:
0000000000001f16         push       0x23
0000000000001f1b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001f20         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=__strftime_internal+285, __strftime_internal+737, __strftime_internal+1204, __strftime_internal+1570, sub_6360+119, sub_6360+321, sub_6560+162, sub_67b0+363, sub_67b0+429, sub_67b0+564, sub_6a20+1560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f26:
0000000000001f26         push       0x24
0000000000001f2b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getcwd:        // getcwd
0000000000001f30         jmp        qword [getcwd@GOT]                          ; getcwd, getcwd@GOT, CODE XREF=save_cwd+52, xgetcwd+5
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f36:
0000000000001f36         push       0x25
0000000000001f3b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_canonicalize_file_name:        // canonicalize_file_name
0000000000001f40         jmp        qword [canonicalize_file_name@GOT]          ; canonicalize_file_name, canonicalize_file_name@GOT, CODE XREF=print_stat+361
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f46:
0000000000001f46         push       0x26
0000000000001f4b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001f50         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=free_cwd+10, cdb_free+10, fd_safer+38, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f56:
0000000000001f56         push       0x27
0000000000001f5b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strspn:        // strspn
0000000000001f60         jmp        qword [strspn@GOT]                          ; strspn, strspn@GOT, CODE XREF=print_it+338, print_it+358, print_it+387, chdir_long+146, chdir_long+289, chdir_long+435
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f66:
0000000000001f66         push       0x28
0000000000001f6b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
0000000000001f70         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=out_epoch_sec.isra.9+38, chdir_long+382
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f76:
0000000000001f76         push       0x29
0000000000001f7b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001f80         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=argmatch+111, argmatch_valid+150, argmatch_to_argument+56, quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f86:
0000000000001f86         push       0x2a
0000000000001f8b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001f90         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=print_it+298, usage+157, usage+194, usage+231, usage+268, usage+305, usage+342, usage+379, usage+416, usage+453, usage+490
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f96:
0000000000001f96         push       0x2b
0000000000001f9b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001fa0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fa6:
0000000000001fa6         push       0x2c
0000000000001fab         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___getdelim:        // __getdelim
0000000000001fb0         jmp        qword [__getdelim@GOT]                      ; __getdelim, __getdelim@GOT, CODE XREF=read_file_system_list+110
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fb6:
0000000000001fb6         push       0x2d
0000000000001fbb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001fc0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=find_bind_mount+127, read_file_system_list+1060, read_file_system_list+1088, read_file_system_list+1639, read_file_system_list+1663, save_abbr+70, save_abbr+142, set_tz+157
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fc6:
0000000000001fc6         push       0x2e
0000000000001fcb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtol:        // strtol
0000000000001fd0         jmp        qword [strtol@GOT]                          ; strtol, strtol@GOT, CODE XREF=out_epoch_sec.isra.9+303, out_epoch_sec.isra.9+624
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fd6:
0000000000001fd6         push       0x2f
0000000000001fdb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001fe0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=print_it+423, find_mount_point+141, mdir_name+53, sub_67b0+609, sub_6a20+1904, sub_74d9+303, xmemdup+35, tzalloc+81, save_abbr+294, xstrcat+186, vasnprintf+686
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fe6:
0000000000001fe6         push       0x30
0000000000001feb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_tzset:        // tzset
0000000000001ff0         jmp        qword [tzset@GOT]                           ; tzset, tzset@GOT, CODE XREF=revert_tz.part.1+80, set_tz+216
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ff6:
0000000000001ff6         push       0x31
0000000000001ffb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000002000         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36, DATA XREF=main+846, file_type+49, strmode+47
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2006:
0000000000002006         push       0x32
000000000000200b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_statfs:        // statfs
0000000000002010         jmp        qword [statfs@GOT]                          ; statfs, statfs@GOT, CODE XREF=main+667
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2016:
0000000000002016         push       0x33
000000000000201b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
0000000000002020         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=main+800, find_bind_mount+59, find_bind_mount+147, find_mount_point+192, find_mount_point+414
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2026:
0000000000002026         push       0x34
000000000000202b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000002030         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=areadlink_with_size+67, areadlink_with_size+126, mdir_name+31, xmalloc+4, tzalloc+42, tzalloc+109, vasnprintf+210, vasnprintf+2547, vasnprintf+3007, vasnprintf+3353, vasnprintf+3497
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2036:
0000000000002036         push       0x35
000000000000203b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000002040         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2046:
0000000000002046         push       0x36
000000000000204b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getmntent:        // getmntent
0000000000002050         jmp        qword [getmntent@GOT]                       ; getmntent, getmntent@GOT, CODE XREF=read_file_system_list+1198, read_file_system_list+1773
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2056:
0000000000002056         push       0x37
000000000000205b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setmntent:        // setmntent
0000000000002060         jmp        qword [setmntent@GOT]                       ; setmntent, setmntent@GOT, CODE XREF=read_file_system_list+1166
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2066:
0000000000002066         push       0x38
000000000000206b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000002070         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2076:
0000000000002076         push       0x39
000000000000207b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000002080         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=main+1019
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2086:
0000000000002086         push       0x3a
000000000000208b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sscanf:        // sscanf
0000000000002090         jmp        qword [sscanf@GOT]                          ; sscanf, sscanf@GOT, CODE XREF=read_file_system_list+181, read_file_system_list+269
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2096:
0000000000002096         push       0x3b
000000000000209b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mktime:        // mktime
00000000000020a0         jmp        qword [mktime@GOT]                          ; mktime, mktime@GOT, CODE XREF=mktime_z+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20a6:
00000000000020a6         push       0x3c
00000000000020ab         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
00000000000020b0         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20b6:
00000000000020b6         push       0x3d
00000000000020bb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchdir:        // fchdir
00000000000020c0         jmp        qword [fchdir@GOT]                          ; fchdir, fchdir@GOT, CODE XREF=restore_cwd+8, chdir_long+504
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20c6:
00000000000020c6         push       0x3e
00000000000020cb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
00000000000020d0         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266, printf_parse+2729
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20d6:
00000000000020d6         push       0x3f
00000000000020db         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
00000000000020e0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+74, usage+947, usage+1140, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20e6:
00000000000020e6         push       0x40
00000000000020eb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
00000000000020f0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=out_uint_x+50, out_string+50, out_uint+50, out_int+50, out_epoch_sec.isra.9+258, out_epoch_sec.isra.9+559, print_stat+662, print_stat+950, print_stat+1148, usage+120, usage+612
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20f6:
00000000000020f6         push       0x41
00000000000020fb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_timegm:        // timegm
0000000000002100         jmp        qword [timegm@GOT]                          ; timegm, timegm@GOT, CODE XREF=mktime_z+291
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2106:
0000000000002106         push       0x42
000000000000210b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strftime:        // strftime
0000000000002110         jmp        qword [strftime@GOT]                        ; strftime, strftime@GOT, CODE XREF=__strftime_internal+1048
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2116:
0000000000002116         push       0x43
000000000000211b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000002120         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+919, main+1070, main+1141, main+1239, main+1370, print_it+154, print_it+885, print_it+1261, find_bind_mount+306, print_stat+1117, print_stat+1414
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2126:
0000000000002126         push       0x44
000000000000212b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memrchr:        // memrchr
0000000000002130         jmp        qword [memrchr@GOT]                         ; memrchr, memrchr@GOT, CODE XREF=chdir_long+329
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2136:
0000000000002136         push       0x45
000000000000213b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000002140         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=open_safer+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2146:
0000000000002146         push       0x46
000000000000214b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000002150         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2156:
0000000000002156         push       0x47
000000000000215b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000002160         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=read_file_system_list+44
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2166:
0000000000002166         push       0x48
000000000000216b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unsetenv:        // unsetenv
0000000000002170         jmp        qword [unsetenv@GOT]                        ; unsetenv, unsetenv@GOT, CODE XREF=setenv_TZ+39
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2176:
0000000000002176         push       0x49
000000000000217b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000002180         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2186:
0000000000002186         push       0x4a
000000000000218b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000002190         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+363, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2196:
0000000000002196         push       0x4b
000000000000219b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
00000000000021a0         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21a6:
00000000000021a6         push       0x4c
00000000000021ab         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
00000000000021b0         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, argmatch_valid+122, argmatch_valid+198, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21b6:
00000000000021b6         push       0x4d
00000000000021bb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
00000000000021c0         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_8090+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21c6:
00000000000021c6         push       0x4e
00000000000021cb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
00000000000021d0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_8090+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21d6:
00000000000021d6         push       0x4f
00000000000021db         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_hasmntopt:        // hasmntopt
00000000000021e0         jmp        qword [hasmntopt@GOT]                       ; hasmntopt, hasmntopt@GOT, CODE XREF=read_file_system_list+1226
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21e6:
00000000000021e6         push       0x50
00000000000021eb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strstr:        // strstr
00000000000021f0         jmp        qword [strstr@GOT]                          ; strstr, strstr@GOT, CODE XREF=main+505, read_file_system_list+215
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21f6:
00000000000021f6         push       0x51
00000000000021fb         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000002200         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=memcpy_lowcase+19
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2206:
0000000000002206         push       0x52
000000000000220b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000002210         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=print_it+640, sub_7e30+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2216:
0000000000002216         push       0x53
000000000000221b         jmp        0x1cd0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
0000000000002220         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=print_statfs+279, human_time+190, out_epoch_sec.isra.9+848
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2226:
0000000000002226         push       0x54
000000000000222b         jmp        0x1cd0
                        ; endp


        ; Section .plt.got
        ; Range: [0x2230; 0x2238[ (8 bytes)
        ; File offset : [8752; 8760[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_212fe8:        // qword_212fe8
0000000000002230         jmp        qword [qword_212fe8]                        ; qword, End of unwind block (FDE at 0x1067c), Begin of unwind block (FDE at 0x106a4), qword_212fe8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000002236         align      8
0000000000002238         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x106a4)
0000000000002239         db  0x00 ; '.'
000000000000223a         db  0x00 ; '.'
000000000000223b         db  0x00 ; '.'
000000000000223c         db  0x00 ; '.'
000000000000223d         db  0x00 ; '.'
000000000000223e         db  0x00 ; '.'
000000000000223f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x2240; 0xda5e[ (47134 bytes)
        ; File offset : [8768; 55902[ (47134 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F1: int8_t, -241


                     main:
0000000000002240         push       r15                                         ; Begin of unwind block (FDE at 0x1099c), DATA XREF=_start+29
0000000000002242         push       r14
0000000000002244         mov        r15d, 0x1
000000000000224a         push       r13
000000000000224c         push       r12
000000000000224e         lea        r12, qword [long_options]                   ; long_options
0000000000002255         push       rbp
0000000000002256         push       rbx
0000000000002257         mov        ebp, edi
0000000000002259         mov        rbx, rsi
000000000000225c         sub        rsp, 0xc8
0000000000002263         mov        rdi, qword [rsi]
0000000000002266         mov        rax, qword [fs:0x28]
000000000000226f         mov        qword [rsp+0xf8+var_40], rax
0000000000002277         xor        eax, eax
0000000000002279         call       set_program_name                            ; set_program_name
000000000000227e         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0xfb81
0000000000002285         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
000000000000228a         call       j_setlocale                                 ; setlocale
000000000000228f         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000002296         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
000000000000229d         call       j_bindtextdomain                            ; bindtextdomain
00000000000022a2         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
00000000000022a9         call       j_textdomain                                ; textdomain
00000000000022ae         call       j_localeconv                                ; localeconv
00000000000022b3         mov        rdi, qword [rax]
00000000000022b6         lea        rax, qword [aCannotChangeTo+31]             ; 0xf2b4
00000000000022bd         cmp        byte [rdi], 0x0
00000000000022c0         cmove      rdi, rax                                    ; argument "__s" for method j_strlen
00000000000022c4         xor        r13d, r13d
00000000000022c7         mov        qword [decimal_point], rdi                  ; decimal_point
00000000000022ce         call       j_strlen                                    ; strlen
00000000000022d3         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
00000000000022da         mov        qword [decimal_point_len], rax              ; decimal_point_len
00000000000022e1         call       atexit                                      ; atexit
00000000000022e6         mov        byte [rsp+0xf8+var_F0], 0x0
00000000000022eb         mov        byte [rsp+0xf8+var_F1], 0x0

                     loc_22f0:
00000000000022f0         lea        rdx, qword [aCflt]                          ; argument "__shortopts" for method j_getopt_long, "c:fLt", CODE XREF=main+277, main+375, main+412, main+452, main+469
00000000000022f7         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
00000000000022fa         mov        rcx, r12                                    ; argument "__longopts" for method j_getopt_long
00000000000022fd         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000002300         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000002302         call       j_getopt_long                               ; getopt_long
0000000000002307         cmp        eax, 0xffffffff
000000000000230a         mov        r14d, eax
000000000000230d         je         loc_241a

0000000000002313         cmp        r14d, 0x63
0000000000002317         je         loc_23c0

000000000000231d         jle        loc_2360

000000000000231f         cmp        r14d, 0x74
0000000000002323         je         loc_2410

0000000000002329         cmp        r14d, 0x80
0000000000002330         je         loc_23e8

0000000000002336         cmp        r14d, 0x66
000000000000233a         je         loc_2350

                     loc_233c:
000000000000233c         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+314, main+1375
0000000000002341         call       usage                                       ; usage
0000000000002346         nop        word [cs:rax+rax]

                     loc_2350:
0000000000002350         mov        byte [rsp+0xf8+var_F1], 0x1                 ; CODE XREF=main+250
0000000000002355         jmp        loc_22f0
0000000000002357         align      32

                     loc_2360:
0000000000002360         cmp        r14d, 0xffffff7e                            ; CODE XREF=main+221
0000000000002367         je         loc_2772

000000000000236d         cmp        r14d, 0x4c
0000000000002371         je         loc_23b0

0000000000002373         cmp        r14d, 0xffffff7d
000000000000237a         jne        loc_233c

000000000000237c         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002383         mov        rcx, qword [Version]                        ; Version
000000000000238a         lea        r8, qword [aMichaelMeskes]                  ; "Michael Meskes"
0000000000002391         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xdeac
0000000000002398         lea        rsi, qword [aFailedToCanoni+26]             ; 0xde31
000000000000239f         xor        r9d, r9d
00000000000023a2         xor        eax, eax
00000000000023a4         call       version_etc                                 ; version_etc
00000000000023a9         xor        edi, edi                                    ; argument "__status" for method j_exit
00000000000023ab         call       j_exit                                      ; exit
                        ; endp

                     loc_23b0:
00000000000023b0         mov        byte [follow_links], r15b                   ; follow_links, CODE XREF=main+305
00000000000023b7         jmp        loc_22f0
00000000000023bc         align      64

                     loc_23c0:
00000000000023c0         lea        rax, qword [aWrittenBySSAnd+26]             ; 0xfb80, CODE XREF=main+215
00000000000023c7         mov        r13, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000023ce         mov        byte [interpret_backslash_escapes], 0x0     ; interpret_backslash_escapes
00000000000023d5         mov        qword [trailing_delim], rax                 ; trailing_delim
00000000000023dc         jmp        loc_22f0
00000000000023e1         align      8

                     loc_23e8:
00000000000023e8         lea        rax, qword [aWrittenBySSAnd+27]             ; 0xfb81, CODE XREF=main+240
00000000000023ef         mov        r13, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000023f6         mov        byte [interpret_backslash_escapes], r15b    ; interpret_backslash_escapes
00000000000023fd         mov        qword [trailing_delim], rax                 ; trailing_delim
0000000000002404         jmp        loc_22f0
0000000000002409         align      16

                     loc_2410:
0000000000002410         mov        byte [rsp+0xf8+var_F0], 0x1                 ; CODE XREF=main+227
0000000000002415         jmp        loc_22f0

                     loc_241a:
000000000000241a         cmp        dword [optind@@GLIBC_2.2.5], ebp            ; optind@@GLIBC_2.2.5, CODE XREF=main+205
0000000000002420         je         loc_277e

0000000000002426         test       r13, r13
0000000000002429         je         loc_2726

000000000000242f         lea        rsi, qword [aMissingOperand+16]             ; argument "__needle" for method j_strstr, 0xdf16
0000000000002436         mov        rdi, r13                                    ; argument "__haystack" for method j_strstr
0000000000002439         call       j_strstr                                    ; strstr
000000000000243e         test       rax, rax
0000000000002441         mov        qword [rsp+0xf8+var_E8], r13
0000000000002446         je         loc_249b

0000000000002448         lea        rdi, qword [aQuotingstyle]                  ; argument "__name" for method j_getenv, "QUOTING_STYLE"
000000000000244f         call       j_getenv                                    ; getenv
0000000000002454         test       rax, rax
0000000000002457         mov        r12, rax
000000000000245a         je         loc_275c

0000000000002460         lea        rdx, qword [quoting_style_vals]             ; quoting_style_vals
0000000000002467         lea        rsi, qword [quoting_style_args]             ; quoting_style_args
000000000000246e         mov        ecx, 0x4
0000000000002473         mov        rdi, rax
0000000000002476         call       argmatch                                    ; argmatch
000000000000247b         test       eax, eax
000000000000247d         js         loc_26e1

0000000000002483         lea        rdx, qword [quoting_style_vals]             ; quoting_style_vals
000000000000248a         cdqe
000000000000248c         xor        edi, edi
000000000000248e         mov        esi, dword [rdx+rax*4]
0000000000002491         call       set_quoting_style                           ; set_quoting_style
0000000000002496         mov        qword [rsp+0xf8+var_E8], r13

                     loc_249b:
000000000000249b         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+518, main+1249, main+1303, main+1325
00000000000024a1         cmp        ebp, eax
00000000000024a3         jle        loc_25e3

00000000000024a9         movsxd     rdx, eax
00000000000024ac         not        eax
00000000000024ae         add        eax, ebp
00000000000024b0         lea        r12, qword [rbx+rdx*8]
00000000000024b4         lea        rbp, qword [rsp+0xf8+var_D8]
00000000000024b9         add        rax, rdx
00000000000024bc         lea        rax, qword [rbx+rax*8+8]
00000000000024c1         mov        ebx, 0x1
00000000000024c6         mov        qword [rsp+0xf8+var_F0], rax
00000000000024cb         jmp        loc_251c

                     loc_24cd:
00000000000024cd         test       eax, eax                                    ; CODE XREF=main+766
00000000000024cf         je         loc_25a8

00000000000024d5         mov        rsi, rbp                                    ; argument "__buf" for method j_statfs
00000000000024d8         mov        rdi, r15                                    ; argument "__file" for method j_statfs
00000000000024db         call       j_statfs                                    ; statfs
00000000000024e0         test       eax, eax
00000000000024e2         jne        loc_267a

00000000000024e8         lea        rcx, qword [print_statfs]                   ; print_statfs
00000000000024ef         mov        r8, rbp
00000000000024f2         mov        rdx, r15
00000000000024f5         or         esi, 0xffffffff
00000000000024f8         mov        rdi, r13
00000000000024fb         call       print_it                                    ; print_it
0000000000002500         xor        eax, 0x1
0000000000002503         nop        dword [rax+rax]

                     loc_2508:
0000000000002508         movzx      eax, al                                     ; CODE XREF=main+867, main+926, main+1077, main+1148
000000000000250b         add        r12, 0x8
000000000000250f         and        ebx, eax
0000000000002511         cmp        qword [rsp+0xf8+var_F0], r12
0000000000002516         je         loc_25e8

                     loc_251c:
000000000000251c         mov        r15, qword [r12]                            ; CODE XREF=main+651
0000000000002520         lea        rdi, qword [aLibs+10]                       ; 0xf642, DATA XREF=__strftime_internal+965, __strftime_internal+1328, __strftime_internal+1420
0000000000002527         mov        ecx, 0x2
000000000000252c         mov        rsi, r15
000000000000252f         rep  cmpsb byte [rsi], byte [rdi]
0000000000002531         seta       al
0000000000002534         sbb        al, 0x0
0000000000002536         cmp        byte [rsp+0xf8+var_F1], 0x0
000000000000253b         movsx      eax, al
000000000000253e         jne        loc_24cd

0000000000002540         test       eax, eax
0000000000002542         je         loc_2631

0000000000002548         cmp        byte [follow_links], 0x0                    ; follow_links
000000000000254f         je         loc_2617

0000000000002555         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___xstat
0000000000002558         mov        rsi, r15                                    ; argument "__filename" for method j___xstat
000000000000255b         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002560         call       j___xstat                                   ; __xstat
0000000000002565         test       eax, eax
0000000000002567         setne      al

                     loc_256a:
000000000000256a         test       al, al                                      ; CODE XREF=main+1004
000000000000256c         mov        esi, r14d
000000000000256f         jne        loc_26c1

                     loc_2575:
0000000000002575         mov        edx, dword [rsp+0xf8+var_C0]                ; CODE XREF=main+1028
0000000000002579         mov        rdi, qword [rsp+0xf8+var_E8]
000000000000257e         lea        rcx, qword [print_stat]                     ; print_stat
0000000000002585         mov        r8, rbp
0000000000002588         and        edx, 0xb000
000000000000258e         cmp        edx, j_fileno
0000000000002594         mov        rdx, r15
0000000000002597         cmovne     rdi, r13
000000000000259b         call       print_it                                    ; print_it
00000000000025a0         xor        eax, 0x1
00000000000025a3         jmp        loc_2508

                     loc_25a8:
00000000000025a8         mov        rsi, r15                                    ; CODE XREF=main+655
00000000000025ab         mov        edi, 0x4
00000000000025b0         call       quotearg_style                              ; quotearg_style
00000000000025b5         lea        rsi, qword [aUsingSToDenote]                ; argument "msgid" for method j_dcgettext, "using %s to denote standard input does not work in file system mode"
00000000000025bc         mov        r15, rax
00000000000025bf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000025c4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000025c6         call       j_dcgettext                                 ; dcgettext
00000000000025cb         mov        rcx, r15
00000000000025ce         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000025d1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000025d3         xor        eax, eax
00000000000025d5         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000025d7         call       j_error                                     ; error
00000000000025dc         xor        eax, eax
00000000000025de         jmp        loc_2508

                     loc_25e3:
00000000000025e3         mov        ebx, 0x1                                    ; CODE XREF=main+611

                     loc_25e8:
00000000000025e8         xor        ebx, 0x1                                    ; CODE XREF=main+726
00000000000025eb         movzx      eax, bl
00000000000025ee         mov        rbx, qword [rsp+0xf8+var_40]
00000000000025f6         xor        rbx, qword [fs:0x28]
00000000000025ff         jne        loc_2779

0000000000002605         add        rsp, 0xc8
000000000000260c         pop        rbx
000000000000260d         pop        rbp
000000000000260e         pop        r12
0000000000002610         pop        r13
0000000000002612         pop        r14
0000000000002614         pop        r15
0000000000002616         ret
                        ; endp

                     loc_2617:
0000000000002617         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___lxstat, CODE XREF=main+783
000000000000261a         mov        rsi, r15                                    ; argument "__filename" for method j___lxstat
000000000000261d         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000002622         call       j___lxstat                                  ; __lxstat
0000000000002627         test       eax, eax
0000000000002629         setne      al
000000000000262c         jmp        loc_256a

                     loc_2631:
0000000000002631         xor        esi, esi                                    ; argument "__fildes" for method j___fxstat, CODE XREF=main+770
0000000000002633         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___fxstat
0000000000002636         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
000000000000263b         call       j___fxstat                                  ; __fxstat
0000000000002640         test       eax, eax
0000000000002642         mov        esi, eax
0000000000002644         je         loc_2575

000000000000264a         lea        rsi, qword [aCannotStatStan]                ; argument "msgid" for method j_dcgettext, "cannot stat standard input"
0000000000002651         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002656         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002658         call       j_dcgettext                                 ; dcgettext
000000000000265d         mov        r15, rax
0000000000002660         call       j___errno_location                          ; __errno_location
0000000000002665         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002667         mov        rdx, r15                                    ; argument "__format" for method j_error
000000000000266a         xor        eax, eax
000000000000266c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000266e         call       j_error                                     ; error
0000000000002673         xor        eax, eax
0000000000002675         jmp        loc_2508

                     loc_267a:
000000000000267a         mov        rsi, r15                                    ; CODE XREF=main+674
000000000000267d         mov        edi, 0x4
0000000000002682         call       quotearg_style                              ; quotearg_style
0000000000002687         lea        rsi, qword [aCannotReadFile]                ; "cannot read file system information for %s"
000000000000268e         mov        qword [rsp+0xf8+var_E0], rax
0000000000002693         mov        edx, 0x5

                     loc_2698:
0000000000002698         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+1183
000000000000269a         call       j_dcgettext                                 ; dcgettext
000000000000269f         mov        r15, rax
00000000000026a2         call       j___errno_location                          ; __errno_location
00000000000026a7         mov        rcx, qword [rsp+0xf8+var_E0]
00000000000026ac         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000026ae         mov        rdx, r15                                    ; argument "__format" for method j_error
00000000000026b1         xor        eax, eax
00000000000026b3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000026b5         call       j_error                                     ; error
00000000000026ba         xor        eax, eax
00000000000026bc         jmp        loc_2508

                     loc_26c1:
00000000000026c1         mov        rsi, r15                                    ; CODE XREF=main+815
00000000000026c4         mov        edi, 0x4
00000000000026c9         call       quotearg_style                              ; quotearg_style
00000000000026ce         mov        edx, 0x5
00000000000026d3         mov        qword [rsp+0xf8+var_E0], rax
00000000000026d8         lea        rsi, qword [aCannotStatS]                   ; "cannot stat %s"
00000000000026df         jmp        loc_2698

                     loc_26e1:
00000000000026e1         mov        esi, 0x4                                    ; CODE XREF=main+573
00000000000026e6         xor        edi, edi
00000000000026e8         call       set_quoting_style                           ; set_quoting_style
00000000000026ed         mov        rdi, r12
00000000000026f0         call       quote                                       ; quote
00000000000026f5         lea        rsi, qword [aIgnoringInvali]                ; argument "msgid" for method j_dcgettext, "ignoring invalid value of environment variable QUOTING_STYLE: %s"
00000000000026fc         mov        r12, rax
00000000000026ff         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002704         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002706         call       j_dcgettext                                 ; dcgettext
000000000000270b         mov        rcx, r12
000000000000270e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002711         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002713         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002715         xor        eax, eax
0000000000002717         call       j_error                                     ; error
000000000000271c         mov        qword [rsp+0xf8+var_E8], r13
0000000000002721         jmp        loc_249b

                     loc_2726:
0000000000002726         movzx      r12d, byte [rsp+0xf8+var_F0]                ; CODE XREF=main+489
000000000000272c         movzx      r15d, byte [rsp+0xf8+var_F1]
0000000000002732         xor        edx, edx
0000000000002734         mov        esi, r12d
0000000000002737         mov        edi, r15d
000000000000273a         call       default_format                              ; default_format
000000000000273f         mov        edx, 0x1
0000000000002744         mov        esi, r12d
0000000000002747         mov        edi, r15d
000000000000274a         mov        r13, rax
000000000000274d         call       default_format                              ; default_format
0000000000002752         mov        qword [rsp+0xf8+var_E8], rax
0000000000002757         jmp        loc_249b

                     loc_275c:
000000000000275c         mov        esi, 0x4                                    ; CODE XREF=main+538
0000000000002761         xor        edi, edi
0000000000002763         call       set_quoting_style                           ; set_quoting_style
0000000000002768         mov        qword [rsp+0xf8+var_E8], r13
000000000000276d         jmp        loc_249b

                     loc_2772:
0000000000002772         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+295
0000000000002774         call       usage                                       ; usage

                     loc_2779:
0000000000002779         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+959
                        ; endp

                     loc_277e:
000000000000277e         lea        rsi, qword [aMissingOperand]                ; argument "msgid" for method j_dcgettext, "missing operand", CODE XREF=main+480
0000000000002785         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002787         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000278c         call       j_dcgettext                                 ; dcgettext
0000000000002791         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002793         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002796         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002798         xor        eax, eax
000000000000279a         call       j_error                                     ; error
000000000000279f         jmp        loc_233c
00000000000027a4         align      16                                          ; End of unwind block (FDE at 0x1099c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
00000000000027b0         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x1064c)
00000000000027b2         mov        r9, rdx
00000000000027b5         pop        rsi
00000000000027b6         mov        rdx, rsp
00000000000027b9         and        rsp, 0xfffffffffffffff0
00000000000027bd         push       rax
00000000000027be         push       rsp
00000000000027bf         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
00000000000027c6         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
00000000000027cd         lea        rdi, qword [main]                           ; main
00000000000027d4         call       qword [qword_212fc8+8]                      ; 0x212fd0
00000000000027da         hlt
                        ; endp
00000000000027db         align      32                                          ; End of unwind block (FDE at 0x1064c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
00000000000027e0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
00000000000027e7         push       rbp
00000000000027e8         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
00000000000027ef         cmp        rax, rdi
00000000000027f2         mov        rbp, rsp
00000000000027f5         je         loc_2810

00000000000027f7         mov        rax, qword [qword_212fc8]                   ; qword_212fc8
00000000000027fe         test       rax, rax
0000000000002801         je         loc_2810

0000000000002803         pop        rbp
0000000000002804         jmp        rax
                        ; endp
0000000000002806         align      16

                     loc_2810:
0000000000002810         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002811         ret
                        ; endp
0000000000002812         align      32

                     register_tm_clones:
0000000000002820         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002827         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000282e         push       rbp
000000000000282f         sub        rsi, rdi
0000000000002832         mov        rbp, rsp
0000000000002835         sar        rsi, 0x3
0000000000002839         mov        rax, rsi
000000000000283c         shr        rax, 0x3f
0000000000002840         add        rsi, rax
0000000000002843         sar        rsi, 0x1
0000000000002846         je         loc_2860

0000000000002848         mov        rax, qword [qword_212fe0]                   ; qword_212fe0
000000000000284f         test       rax, rax
0000000000002852         je         loc_2860

0000000000002854         pop        rbp
0000000000002855         jmp        rax
                        ; endp
0000000000002857         align      32

                     loc_2860:
0000000000002860         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000002861         ret
                        ; endp
0000000000002862         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002870         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002877         jne        loc_28a8

0000000000002879         cmp        qword [qword_212fe8], 0x0                   ; qword_212fe8
0000000000002881         push       rbp
0000000000002882         mov        rbp, rsp
0000000000002885         je         loc_2893

0000000000002887         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000288e         call       j_qword_212fe8                              ; qword_212fe8

                     loc_2893:
0000000000002893         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002898         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000289f         pop        rbp
00000000000028a0         ret
                        ; endp
00000000000028a1         align      8

                     loc_28a8:
00000000000028a8         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
00000000000028aa         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
00000000000028b0         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
00000000000028b1         mov        rbp, rsp
00000000000028b4         pop        rbp
00000000000028b5         jmp        register_tm_clones                          ; register_tm_clones
00000000000028ba         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     make_format:
00000000000028c0         push       r15                                         ; Begin of unwind block (FDE at 0x106bc), CODE XREF=out_uint_x+26, out_string+26, out_uint+26, out_int+26, out_epoch_sec.isra.9+533, print_stat+634
00000000000028c2         push       r14
00000000000028c4         push       r13
00000000000028c6         push       r12
00000000000028c8         lea        r12, qword [rdi+rsi]
00000000000028cc         push       rbp
00000000000028cd         lea        rbp, qword [rdi+1]
00000000000028d1         push       rbx
00000000000028d2         lea        r13, qword [printf_flags]                   ; "'-+ #0I"
00000000000028d9         sub        rsp, 0x18
00000000000028dd         cmp        rbp, r12
00000000000028e0         mov        rbx, rbp
00000000000028e3         mov        qword [rsp+0x48+var_48], rdx
00000000000028e7         mov        qword [rsp+0x48+var_40], rcx
00000000000028ec         jb         loc_2912

00000000000028ee         jmp        loc_295b

                     loc_28f0:
00000000000028f0         mov        rdi, qword [rsp+0x48+var_48]                ; argument "__s" for method j_strchr, CODE XREF=make_format+103
00000000000028f4         mov        esi, r14d                                   ; argument "__c" for method j_strchr
00000000000028f7         call       j_strchr                                    ; strchr
00000000000028fc         test       rax, rax
00000000000028ff         je         loc_2909

0000000000002901         mov        byte [rbp], r15b
0000000000002905         add        rbp, 0x1

                     loc_2909:
0000000000002909         add        rbx, 0x1                                    ; CODE XREF=make_format+63
000000000000290d         cmp        r12, rbx
0000000000002910         jbe        loc_295b

                     loc_2912:
0000000000002912         movsx      r14d, byte [rbx]                            ; CODE XREF=make_format+44
0000000000002916         mov        rdi, r13                                    ; argument "__s" for method j_strchr
0000000000002919         mov        esi, r14d                                   ; argument "__c" for method j_strchr
000000000000291c         mov        r15d, r14d
000000000000291f         call       j_strchr                                    ; strchr
0000000000002924         test       rax, rax
0000000000002927         jne        loc_28f0

0000000000002929         cmp        rbx, r12
000000000000292c         jae        loc_295b

000000000000292e         mov        rsi, r12
0000000000002931         mov        rcx, rbx
0000000000002934         mov        rax, rbp
0000000000002937         sub        rsi, rbx
000000000000293a         add        rsi, rbp
000000000000293d         jmp        loc_2944
000000000000293f         align      64

                     loc_2940:
0000000000002940         movzx      r15d, byte [rcx]                            ; CODE XREF=make_format+147

                     loc_2944:
0000000000002944         add        rax, 0x1                                    ; CODE XREF=make_format+125
0000000000002948         add        rcx, 0x1
000000000000294c         mov        byte [rax-1], r15b
0000000000002950         cmp        rax, rsi
0000000000002953         jne        loc_2940

0000000000002955         sub        r12, rbx
0000000000002958         add        rbp, r12

                     loc_295b:
000000000000295b         mov        rsi, qword [rsp+0x48+var_40]                ; argument "__src" for method j_strcpy, CODE XREF=make_format+46, make_format+80, make_format+108
0000000000002960         add        rsp, 0x18
0000000000002964         mov        rdi, rbp                                    ; argument "__dest" for method j_strcpy
0000000000002967         pop        rbx
0000000000002968         pop        rbp
0000000000002969         pop        r12
000000000000296b         pop        r13
000000000000296d         pop        r14
000000000000296f         pop        r15
0000000000002971         jmp        j_strcpy                                    ; strcpy
                        ; endp
0000000000002976         align      128                                         ; End of unwind block (FDE at 0x106bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     out_uint_x:
0000000000002980         push       rbp                                         ; Begin of unwind block (FDE at 0x10704), CODE XREF=print_statfs+91, print_statfs+415, print_stat+216, print_stat+527, print_stat+1030
0000000000002981         push       rbx
0000000000002982         mov        rbp, rdx
0000000000002985         lea        rcx, qword [_IO_stdin_used+4]               ; 0xda84
000000000000298c         lea        rdx, qword [_IO_stdin_used+7]               ; 0xda87
0000000000002993         mov        rbx, rdi
0000000000002996         sub        rsp, 0x8
000000000000299a         call       make_format                                 ; make_format
000000000000299f         add        rsp, 0x8
00000000000029a3         mov        rdx, rbp
00000000000029a6         mov        rsi, rbx
00000000000029a9         pop        rbx
00000000000029aa         pop        rbp
00000000000029ab         mov        edi, 0x1
00000000000029b0         xor        eax, eax
00000000000029b2         jmp        j___printf_chk                              ; __printf_chk
                        ; endp
00000000000029b7         align      64                                          ; End of unwind block (FDE at 0x10704)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     out_string:
00000000000029c0         push       rbp                                         ; Begin of unwind block (FDE at 0x1072c), CODE XREF=print_statfs+302, print_statfs+451, print_stat+73, print_stat+144, print_stat+310, print_stat+448, print_stat+874, print_stat+1230
00000000000029c1         push       rbx
00000000000029c2         mov        rbp, rdx
00000000000029c5         lea        rcx, qword [aNS+11]                         ; 0xf36b
00000000000029cc         lea        rdx, qword [aLibs+10]                       ; 0xf642
00000000000029d3         mov        rbx, rdi
00000000000029d6         sub        rsp, 0x8
00000000000029da         call       make_format                                 ; make_format
00000000000029df         add        rsp, 0x8
00000000000029e3         mov        rdx, rbp
00000000000029e6         mov        rsi, rbx
00000000000029e9         pop        rbx
00000000000029ea         pop        rbp
00000000000029eb         mov        edi, 0x1
00000000000029f0         xor        eax, eax
00000000000029f2         jmp        j___printf_chk                              ; __printf_chk
                        ; endp
00000000000029f7         align      512                                         ; End of unwind block (FDE at 0x1072c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     out_uint:
0000000000002a00         push       rbp                                         ; Begin of unwind block (FDE at 0x10754), CODE XREF=print_statfs+67, print_statfs+436, print_stat+167, print_stat+289, print_stat+479, print_stat+503, print_stat+551, print_stat+574, print_stat+599, print_stat+1176
0000000000002a01         push       rbx
0000000000002a02         mov        rbp, rdx
0000000000002a05         lea        rcx, qword [_IO_stdin_used+11]              ; 0xda8b
0000000000002a0c         lea        rdx, qword [_IO_stdin_used+14]              ; 0xda8e
0000000000002a13         mov        rbx, rdi
0000000000002a16         sub        rsp, 0x8
0000000000002a1a         call       make_format                                 ; make_format
0000000000002a1f         add        rsp, 0x8
0000000000002a23         mov        rdx, rbp
0000000000002a26         mov        rsi, rbx
0000000000002a29         pop        rbx
0000000000002a2a         pop        rbp
0000000000002a2b         mov        edi, 0x1
0000000000002a30         xor        eax, eax
0000000000002a32         jmp        j___printf_chk                              ; __printf_chk
                        ; endp
0000000000002a37         align      64                                          ; End of unwind block (FDE at 0x10754)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     out_int:
0000000000002a40         push       rbp                                         ; Begin of unwind block (FDE at 0x1077c), CODE XREF=print_statfs+324, print_statfs+340, print_statfs+372, print_statfs+388, out_epoch_sec.isra.9+159, print_stat+239
0000000000002a41         push       rbx
0000000000002a42         mov        rbp, rdx
0000000000002a45         lea        rcx, qword [_IO_stdin_used+18]              ; 0xda92
0000000000002a4c         lea        rdx, qword [a0]                             ; "'-+ 0"
0000000000002a53         mov        rbx, rdi
0000000000002a56         sub        rsp, 0x8
0000000000002a5a         call       make_format                                 ; make_format
0000000000002a5f         add        rsp, 0x8
0000000000002a63         mov        rdx, rbp
0000000000002a66         mov        rsi, rbx
0000000000002a69         pop        rbx
0000000000002a6a         pop        rbp
0000000000002a6b         mov        edi, 0x1
0000000000002a70         xor        eax, eax
0000000000002a72         jmp        j___printf_chk                              ; __printf_chk
                        ; endp
0000000000002a77         align      128                                         ; End of unwind block (FDE at 0x1077c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_statfs:
0000000000002a80         push       rbp                                         ; Begin of unwind block (FDE at 0x107a4), DATA XREF=main+680
0000000000002a81         lea        eax, dword [rdx-0x53]
0000000000002a84         push       rbx
0000000000002a85         sub        rsp, 0x8
0000000000002a89         cmp        eax, 0x21
0000000000002a8c         ja         loc_2c50

0000000000002a92         lea        rcx, qword [switch_table_dfa0]              ; switch_table_dfa0
0000000000002a99         mov        rbx, rdi
0000000000002a9c         mov        rbp, rsi
0000000000002a9f         movsxd     rax, dword [rcx+rax*4]
0000000000002aa3         add        rax, rcx
0000000000002aa6         jmp        rax                                         ; switch statement using table at 0xdfa0, with 34 cases, 0x2ab0,0x2ab9,0x2ad8,0x2ae8,0x2bc0,0x2bd0,0x2be0,0x2bf0,0x2c00,0x2c10,0x2c30,0x2c40,0x2c50
0000000000002aa8         align      16

                     loc_2ab0:
0000000000002ab0         mov        rdx, qword [r9+0x48]                        ; case 0, CODE XREF=print_statfs+38
0000000000002ab4         test       rdx, rdx
0000000000002ab7         jne        loc_2abd

                     loc_2ab9:
0000000000002ab9         mov        rdx, qword [r9+8]                           ; case 32, CODE XREF=print_statfs+38

                     loc_2abd:
0000000000002abd         mov        rsi, rbp                                    ; CODE XREF=print_statfs+55, print_statfs+356
0000000000002ac0         mov        rdi, rbx
0000000000002ac3         call       out_uint                                    ; out_uint

                     loc_2ac8:
0000000000002ac8         add        rsp, 0x8                                    ; CODE XREF=print_statfs+96, print_statfs+307, print_statfs+329, print_statfs+345, print_statfs+377, print_statfs+393, print_statfs+420, print_statfs+441, print_statfs+456, print_statfs+496, print_statfs+1386
0000000000002acc         xor        eax, eax
0000000000002ace         pop        rbx
0000000000002acf         pop        rbp
0000000000002ad0         ret
                        ; endp
0000000000002ad1         align      8

                     loc_2ad8:
0000000000002ad8         mov        rdx, qword [r9]                             ; case 33, CODE XREF=print_statfs+38
0000000000002adb         call       out_uint_x                                  ; out_uint_x
0000000000002ae0         jmp        loc_2ac8
0000000000002ae2         align      8

                     loc_2ae8:
0000000000002ae8         mov        r8, qword [r9]                              ; case 1, CODE XREF=print_statfs+38
0000000000002aeb         cmp        r8, 0x2bad1dea
0000000000002af2         je         loc_36bd

0000000000002af8         jle        loc_2c78

0000000000002afe         cmp        r8, 0x65735543
0000000000002b05         je         loc_3741

0000000000002b0b         jg         loc_2d10

0000000000002b11         cmp        r8, 0x534f434b
0000000000002b18         je         loc_371d

0000000000002b1e         jg         loc_2e20

0000000000002b24         cmp        r8, 0x45584653
0000000000002b2b         je         loc_36a5

0000000000002b31         jle        loc_3230

0000000000002b37         cmp        r8, 0x5346314d
0000000000002b3e         lea        rdx, qword [aLustre+7]                      ; 0xdc23
0000000000002b45         je         loc_2ba8

0000000000002b47         jg         loc_353e

0000000000002b4d         cmp        r8, 0x50495045
0000000000002b54         lea        rdx, qword [aPipefs]                        ; "pipefs"
0000000000002b5b         je         loc_2ba8

0000000000002b5d         cmp        r8, 0x52654973
0000000000002b64         lea        rdx, qword [aReiserfs]                      ; "reiserfs"
0000000000002b6b         je         loc_2ba8

0000000000002b6d         cmp        r8, 0x47504653
0000000000002b74         lea        rdx, qword [aGfsgfs2+9]                     ; 0xdbb3
0000000000002b7b         je         loc_2ba8

                     loc_2b7d:
0000000000002b7d         lea        rcx, qword [aUnknown0xlx]                   ; "UNKNOWN (0x%lx)", CODE XREF=print_statfs+641, print_statfs+775, print_statfs+910, print_statfs+1020, print_statfs+1136, print_statfs+1252, print_statfs+1356, print_statfs+1471, print_statfs+1568, print_statfs+1671, print_statfs+1761
0000000000002b84         lea        rdi, qword [buf.7290]                       ; buf.7290
0000000000002b8b         mov        edx, 0x1d
0000000000002b90         mov        esi, 0x1
0000000000002b95         xor        eax, eax
0000000000002b97         call       j___sprintf_chk                             ; __sprintf_chk
0000000000002b9c         lea        rdx, qword [buf.7290]                       ; buf.7290
0000000000002ba3         nop        dword [rax+rax]

                     loc_2ba8:
0000000000002ba8         mov        rsi, rbp                                    ; CODE XREF=print_statfs+197, print_statfs+219, print_statfs+235, print_statfs+251, print_statfs+575, print_statfs+601, print_statfs+621, print_statfs+647, print_statfs+709, print_statfs+735, print_statfs+755
0000000000002bab         mov        rdi, rbx
0000000000002bae         call       out_string                                  ; out_string
0000000000002bb3         jmp        loc_2ac8
0000000000002bb8         align      64

                     loc_2bc0:
0000000000002bc0         mov        rdx, qword [r9+0x20]                        ; case 14, CODE XREF=print_statfs+38
0000000000002bc4         call       out_int                                     ; out_int
0000000000002bc9         jmp        loc_2ac8
0000000000002bce         align      16

                     loc_2bd0:
0000000000002bd0         mov        rdx, qword [r9+0x10]                        ; case 15, CODE XREF=print_statfs+38
0000000000002bd4         call       out_int                                     ; out_int
0000000000002bd9         jmp        loc_2ac8
0000000000002bde         align      32

                     loc_2be0:
0000000000002be0         mov        rdx, qword [r9+0x28]                        ; case 16, CODE XREF=print_statfs+38
0000000000002be4         jmp        loc_2abd
0000000000002be9         align      16

                     loc_2bf0:
0000000000002bf0         mov        rdx, qword [r9+0x30]                        ; case 17, CODE XREF=print_statfs+38
0000000000002bf4         call       out_int                                     ; out_int
0000000000002bf9         jmp        loc_2ac8
0000000000002bfe         align      1024

                     loc_2c00:
0000000000002c00         mov        rdx, qword [r9+0x18]                        ; case 19, CODE XREF=print_statfs+38
0000000000002c04         call       out_int                                     ; out_int
0000000000002c09         jmp        loc_2ac8
0000000000002c0e         align      16

                     loc_2c10:
0000000000002c10         mov        edx, dword [r9+0x38]                        ; case 22, CODE XREF=print_statfs+38
0000000000002c14         mov        eax, dword [r9+0x3c]
0000000000002c18         shl        rdx, 0x20
0000000000002c1c         or         rdx, rax
0000000000002c1f         call       out_uint_x                                  ; out_uint_x
0000000000002c24         jmp        loc_2ac8
0000000000002c29         align      16

                     loc_2c30:
0000000000002c30         mov        rdx, qword [r9+0x40]                        ; case 25, CODE XREF=print_statfs+38
0000000000002c34         call       out_uint                                    ; out_uint
0000000000002c39         jmp        loc_2ac8
0000000000002c3e         align      64

                     loc_2c40:
0000000000002c40         mov        rdx, r8                                     ; case 27, CODE XREF=print_statfs+38
0000000000002c43         call       out_string                                  ; out_string
0000000000002c48         jmp        loc_2ac8
0000000000002c4d         align      16

                     loc_2c50:
0000000000002c50         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 31, stdout@@GLIBC_2.2.5, CODE XREF=print_statfs+12, print_statfs+38
0000000000002c57         mov        rax, qword [rdi+0x28]
0000000000002c5b         cmp        rax, qword [rdi+0x30]
0000000000002c5f         jae        loc_2fe0

0000000000002c65         lea        rdx, qword [rax+1]
0000000000002c69         mov        qword [rdi+0x28], rdx
0000000000002c6d         mov        byte [rax], 0x3f
0000000000002c70         jmp        loc_2ac8
0000000000002c75         align      8

                     loc_2c78:
0000000000002c78         cmp        r8, 0xadf5                                  ; CODE XREF=print_statfs+120
0000000000002c7f         je         loc_36f9

0000000000002c85         jg         loc_2d98

0000000000002c8b         cmp        r8, 0x4244
0000000000002c92         je         loc_36ed

0000000000002c98         jg         loc_2f70

0000000000002c9e         cmp        r8, 0x138f
0000000000002ca5         je         loc_36d5

0000000000002cab         jle        loc_3290

0000000000002cb1         cmp        r8, 0x3434
0000000000002cb8         lea        rdx, qword [aNilfs]                         ; "nilfs"
0000000000002cbf         je         loc_2ba8

0000000000002cc5         jg         loc_357f

0000000000002ccb         cmp        r8, 0x2468
0000000000002cd2         lea        rdx, qword [aMinixV2]                       ; "minix v2"
0000000000002cd9         je         loc_2ba8

0000000000002cdf         cmp        r8, 0x2478
0000000000002ce6         lea        rdx, qword [aMinixV230Char]                 ; "minix v2 (30 char.)"
0000000000002ced         je         loc_2ba8

0000000000002cf3         cmp        r8, 0x1cd1
0000000000002cfa         lea        rdx, qword [aDevpts]                        ; "devpts"
0000000000002d01         jne        loc_2b7d

0000000000002d07         jmp        loc_2ba8
0000000000002d0c         align      16

                     loc_2d10:
0000000000002d10         mov        eax, 0x858458f6                             ; CODE XREF=print_statfs+139
0000000000002d15         cmp        r8, rax
0000000000002d18         je         loc_3705

0000000000002d1e         jg         loc_2ef8

0000000000002d24         cmp        r8, 0x73636673
0000000000002d2b         je         loc_3729

0000000000002d31         jle        loc_31d0

0000000000002d37         cmp        r8, 0x7461636f
0000000000002d3e         lea        rdx, qword [aOcfs2]                         ; "ocfs2"
0000000000002d45         je         loc_2ba8

0000000000002d4b         jg         loc_33f4

0000000000002d51         cmp        r8, 0x73727279
0000000000002d58         lea        rdx, qword [aBtrfstest]                     ; "btrfs_test"
0000000000002d5f         je         loc_2ba8

0000000000002d65         cmp        r8, 0x73757245
0000000000002d6c         lea        rdx, qword [aCgroup2fs+15]                  ; 0xdb1e
0000000000002d73         je         loc_2ba8

0000000000002d79         cmp        r8, 0x73717368
0000000000002d80         lea        rdx, qword [aSquashfs]                      ; "squashfs"
0000000000002d87         jne        loc_2b7d

0000000000002d8d         jmp        loc_2ba8
0000000000002d92         align      8

                     loc_2d98:
0000000000002d98         cmp        r8, 0x12ff7b5                               ; CODE XREF=print_statfs+517
0000000000002d9f         je         loc_36c9

0000000000002da5         jg         loc_2e8e

0000000000002dab         cmp        r8, 0x414a53
0000000000002db2         je         loc_374d

0000000000002db8         jle        loc_3118

0000000000002dbe         cmp        r8, 0x1021997
0000000000002dc5         lea        rdx, qword [aBdevfs+7]                      ; 0xdd5d
0000000000002dcc         je         loc_2ba8

0000000000002dd2         jg         loc_332c

0000000000002dd8         cmp        r8, 0xc36400
0000000000002ddf         lea        rdx, qword [aBtrfstest+11]                  ; 0xdb01
0000000000002de6         je         loc_2ba8

0000000000002dec         cmp        r8, 0x1021994
0000000000002df3         lea        rdx, qword [aTmpfs]                         ; "tmpfs"
0000000000002dfa         je         loc_2ba8

0000000000002e00         cmp        r8, 0xc0ffee
0000000000002e07         lea        rdx, qword [aHostfs]                        ; "hostfs"
0000000000002e0e         jne        loc_2b7d

0000000000002e14         jmp        loc_2ba8
0000000000002e19         align      32

                     loc_2e20:
0000000000002e20         cmp        r8, 0x6165676c                              ; CODE XREF=print_statfs+158
0000000000002e27         je         loc_3711

0000000000002e2d         jg         loc_2fef

0000000000002e33         cmp        r8, 0x58465342
0000000000002e3a         lea        rdx, qword [aDaxfs+2]                       ; 0xdb45
0000000000002e41         je         loc_2ba8

0000000000002e47         jg         loc_32eb

0000000000002e4d         cmp        r8, 0x565a4653
0000000000002e54         lea        rdx, qword [aVmhgfs+12]                     ; 0xdd6e
0000000000002e5b         je         loc_2ba8

0000000000002e61         cmp        r8, 0x58295829
0000000000002e68         lea        rdx, qword [aZsmallocfs]                    ; "zsmallocfs"
0000000000002e6f         je         loc_2ba8

0000000000002e75         cmp        r8, 0x54190100
0000000000002e7c         jne        loc_2b7d

                     loc_2e82:
0000000000002e82         lea        rdx, qword [aAnoninodeFs+15]                ; 0xdabe, CODE XREF=print_statfs+1721
0000000000002e89         jmp        loc_2ba8

                     loc_2e8e:
0000000000002e8e         cmp        r8, 0x11307854                              ; CODE XREF=print_statfs+805
0000000000002e95         je         loc_36e1

0000000000002e9b         jg         loc_3050

0000000000002ea1         cmp        r8, 0x7655821
0000000000002ea8         lea        rdx, qword [aPstorefs+19]                   ; 0xdcca
0000000000002eaf         je         loc_2ba8

0000000000002eb5         jg         loc_3435

0000000000002ebb         cmp        r8, 0x12ff7b7
0000000000002ec2         lea        rdx, qword [aCgroup2fs+20]                  ; 0xdb23
0000000000002ec9         je         loc_2ba8

0000000000002ecf         lea        rdx, qword [aSysv2]                         ; "sysv2"
0000000000002ed6         jl         loc_2ba8

0000000000002edc         cmp        r8, 0x13111a8
0000000000002ee3         lea        rdx, qword [aIbrix]                         ; "ibrix"
0000000000002eea         je         loc_2ba8

0000000000002ef0         jmp        loc_2b7d
0000000000002ef5         align      8

                     loc_2ef8:
0000000000002ef8         mov        eax, 0xc97e8168                             ; CODE XREF=print_statfs+670
0000000000002efd         cmp        r8, rax
0000000000002f00         je         loc_36b1

0000000000002f06         jg         loc_30b0

0000000000002f0c         sub        rax, 0x1ea6d67e
0000000000002f12         lea        rdx, qword [aPanfs]                         ; "panfs"
0000000000002f19         cmp        r8, rax
0000000000002f1c         je         loc_2ba8

0000000000002f22         jg         loc_34b7

0000000000002f28         sub        rax, 0x155351f4
0000000000002f2e         lea        rdx, qword [aHugetlbfs]                     ; "hugetlbfs"
0000000000002f35         cmp        r8, rax
0000000000002f38         je         loc_2ba8

0000000000002f3e         add        rax, 0xf7da3ff
0000000000002f44         lea        rdx, qword [aVmhgfs+7]                      ; 0xdd69
0000000000002f4b         cmp        r8, rax
0000000000002f4e         je         loc_2ba8

0000000000002f54         sub        rax, 0x13de94b7
0000000000002f5a         lea        rdx, qword [aBtrfs]                         ; "btrfs"
0000000000002f61         cmp        r8, rax
0000000000002f64         jne        loc_2b7d

0000000000002f6a         jmp        loc_2ba8
0000000000002f6f         align      16

                     loc_2f70:
0000000000002f70         cmp        r8, 0x5df5                                  ; CODE XREF=print_statfs+536
0000000000002f77         je         loc_3735

0000000000002f7d         jle        loc_3170

0000000000002f83         cmp        r8, 0x9660
0000000000002f8a         je         loc_35a9

0000000000002f90         jg         loc_33b3

0000000000002f96         cmp        r8, 0x7275
0000000000002f9d         lea        rdx, qword [aRomfs]                         ; "romfs"
0000000000002fa4         je         loc_2ba8

0000000000002faa         cmp        r8, 0x72b6
0000000000002fb1         lea        rdx, qword [aJffs2]                         ; "jffs2"
0000000000002fb8         je         loc_2ba8

0000000000002fbe         cmp        r8, 0x6969
0000000000002fc5         lea        rdx, qword [aPanfs+2]                       ; 0xdca7
0000000000002fcc         jne        loc_2b7d

0000000000002fd2         jmp        loc_2ba8
0000000000002fd7         align      32

                     loc_2fe0:
0000000000002fe0         mov        esi, 0x3f                                   ; argument #2 for method j___overflow, CODE XREF=print_statfs+479
0000000000002fe5         call       j___overflow                                ; __overflow
0000000000002fea         jmp        loc_2ac8

                     loc_2fef:
0000000000002fef         cmp        r8, 0x62656572                              ; CODE XREF=print_statfs+941
0000000000002ff6         lea        rdx, qword [aSysfs]                         ; "sysfs"
0000000000002ffd         je         loc_2ba8

0000000000003003         jg         loc_3476

0000000000003009         cmp        r8, 0x62646576
0000000000003010         lea        rdx, qword [aBdevfs]                        ; "bdevfs"
0000000000003017         je         loc_2ba8

000000000000301d         cmp        r8, 0x62656570
0000000000003024         lea        rdx, qword [aConfigfs]                      ; "configfs"
000000000000302b         je         loc_2ba8

0000000000003031         cmp        r8, 0x61756673
0000000000003038         lea        rdx, qword [aAnoninodeFs+14]                ; 0xdabd
000000000000303f         jne        loc_2b7d

0000000000003045         jmp        loc_2ba8
000000000000304a         align      16

                     loc_3050:
0000000000003050         cmp        r8, 0x19830326                              ; CODE XREF=print_statfs+1051
0000000000003057         lea        rdx, qword [aFhgfs]                         ; "fhgfs"
000000000000305e         je         loc_2ba8

0000000000003064         jg         loc_34fd

000000000000306a         cmp        r8, 0x15013346
0000000000003071         lea        rdx, qword [aUbifs+6]                       ; 0xdd50
0000000000003078         je         loc_2ba8

000000000000307e         cmp        r8, 0x19800202
0000000000003085         lea        rdx, qword [aMqueue]                        ; "mqueue"
000000000000308c         je         loc_2ba8

0000000000003092         cmp        r8, 0x13661366
0000000000003099         lea        rdx, qword [aBalloonkvmfs]                  ; "balloon-kvm-fs"
00000000000030a0         jne        loc_2b7d

00000000000030a6         jmp        loc_2ba8
00000000000030ab         align      16

                     loc_30b0:
00000000000030b0         mov        eax, 0xf97cff8c                             ; CODE XREF=print_statfs+1158
00000000000030b5         lea        rdx, qword [aSelinux]                       ; "selinux"
00000000000030bc         cmp        r8, rax
00000000000030bf         je         loc_2ba8

00000000000030c5         jg         loc_336d

00000000000030cb         sub        rax, 0x1b1e7da8
00000000000030d1         lea        rdx, qword [aEfivarfs]                      ; "efivarfs"
00000000000030d8         cmp        r8, rax
00000000000030db         je         loc_2ba8

00000000000030e1         add        rax, 0x14969e2c
00000000000030e7         lea        rdx, qword [aExt2ext3+15]                   ; 0xdb83
00000000000030ee         cmp        r8, rax
00000000000030f1         je         loc_2ba8

00000000000030f7         sub        rax, 0x27f6d5ff
00000000000030fd         lea        rdx, qword [aBpffs]                         ; "bpf_fs"
0000000000003104         cmp        r8, rax
0000000000003107         jne        loc_2b7d

000000000000310d         jmp        loc_2ba8
0000000000003112         align      8

                     loc_3118:
0000000000003118         cmp        r8, aLBlockSizeForB                         ; "l block size (for block counts)\\n  %t   file system type in hex\\n  %T   file system type in human readable form\\n", CODE XREF=print_statfs+824
000000000000311f         lea        rdx, qword [aExt2ext3]                      ; "ext2/ext3"
0000000000003126         je         loc_2ba8

000000000000312c         jle        loc_35e8

0000000000003132         cmp        r8, 0x11954
0000000000003139         je         loc_2e82

000000000000313f         cmp        r8, 0x27e0eb
0000000000003146         lea        rdx, qword [aCgroupfs]                      ; "cgroupfs"
000000000000314d         je         loc_2ba8

0000000000003153         cmp        r8, aTionprojectorg                         ; "tionproject.org/team/>\\n"
000000000000315a         lea        rdx, qword [aEcryptfs]                      ; "ecryptfs"
0000000000003161         jne        loc_2b7d

0000000000003167         jmp        loc_2ba8
000000000000316c         align      16

                     loc_3170:
0000000000003170         cmp        r8, 0x4d44                                  ; CODE XREF=print_statfs+1277
0000000000003177         lea        rdx, qword [aMsdos]                         ; "msdos"
000000000000317e         je         loc_2ba8

0000000000003184         jle        loc_35b5

000000000000318a         cmp        r8, 0x517b
0000000000003191         lea        rdx, qword [aSmackfs+8]                     ; 0xdd0c
0000000000003198         je         loc_2ba8

000000000000319e         cmp        r8, 0x564c
00000000000031a5         lea        rdx, qword [aNovell]                        ; "novell"
00000000000031ac         je         loc_2ba8

00000000000031b2         cmp        r8, 0x4d5a
00000000000031b9         lea        rdx, qword [aMinix3]                        ; "minix3"
00000000000031c0         jne        loc_2b7d

00000000000031c6         jmp        loc_2ba8
00000000000031cb         align      16

                     loc_31d0:
00000000000031d0         cmp        r8, 0x68191122                              ; CODE XREF=print_statfs+689
00000000000031d7         lea        rdx, qword [aPstorefs+14]                   ; 0xdcc5
00000000000031de         je         loc_2ba8

00000000000031e4         jle        loc_3678

00000000000031ea         cmp        r8, 0x6e667364
00000000000031f1         lea        rdx, qword [aNovell+7]                      ; 0xdc77
00000000000031f8         je         loc_2ba8

00000000000031fe         cmp        r8, 0x6e736673
0000000000003205         lea        rdx, qword [aNilfs+6]                       ; 0xdc82
000000000000320c         je         loc_2ba8

0000000000003212         cmp        r8, 0x6b414653
0000000000003219         lea        rdx, qword [aKafs]                          ; "k-afs"
0000000000003220         jne        loc_2b7d

0000000000003226         jmp        loc_2ba8
000000000000322b         align      16

                     loc_3230:
0000000000003230         cmp        r8, 0x42465331                              ; CODE XREF=print_statfs+177
0000000000003237         lea        rdx, qword [aBalloonkvmfs+15]               ; 0xdad8
000000000000323e         je         loc_2ba8

0000000000003244         jle        loc_3648

000000000000324a         cmp        r8, 0x43415d53
0000000000003251         lea        rdx, qword [aSmackfs]                       ; "smackfs"
0000000000003258         je         loc_2ba8

000000000000325e         cmp        r8, 0x453dcd28
0000000000003265         lea        rdx, qword [aCramfswend]                    ; "cramfs-wend"
000000000000326c         je         loc_2ba8

0000000000003272         cmp        r8, 0x42494e4d
0000000000003279         lea        rdx, qword [aBinfmtmisc]                    ; "binfmt_misc"
0000000000003280         jne        loc_2b7d

0000000000003286         jmp        loc_2ba8
000000000000328b         align      16

                     loc_3290:
0000000000003290         cmp        r8, 0x7c0                                   ; CODE XREF=print_statfs+555
0000000000003297         lea        rdx, qword [aZsmallocfs+11]                 ; 0xdc01
000000000000329e         je         loc_2ba8

00000000000032a4         jle        loc_3618

00000000000032aa         cmp        r8, 0x137d
00000000000032b1         lea        rdx, qword [aExofs+6]                       ; 0xdb70
00000000000032b8         je         loc_2ba8

00000000000032be         cmp        r8, 0x137f
00000000000032c5         lea        rdx, qword [aMinix]                         ; "minix"
00000000000032cc         je         loc_2ba8

00000000000032d2         cmp        r8, 0x1373
00000000000032d9         lea        rdx, qword [aBdevfs+1]                      ; 0xdd57
00000000000032e0         jne        loc_2b7d

00000000000032e6         jmp        loc_2ba8

                     loc_32eb:
00000000000032eb         cmp        r8, 0x5dca2df5                              ; CODE XREF=print_statfs+967
00000000000032f2         lea        rdx, qword [aSdcardfs]                      ; "sdcardfs"
00000000000032f9         je         loc_2ba8

00000000000032ff         cmp        r8, 0x61636673
0000000000003306         lea        rdx, qword [a0+11]                          ; 0xdaa0
000000000000330d         je         loc_2ba8

0000000000003313         cmp        r8, 0x5a3c69f0
000000000000331a         lea        rdx, qword [a0+6]                           ; 0xda9b
0000000000003321         jne        loc_2b7d

0000000000003327         jmp        loc_2ba8

                     loc_332c:
000000000000332c         cmp        r8, 0x12fd16d                               ; CODE XREF=print_statfs+850
0000000000003333         lea        rdx, qword [aXenix+6]                       ; 0xdd85
000000000000333a         je         loc_2ba8

0000000000003340         cmp        r8, 0x12ff7b4
0000000000003347         lea        rdx, qword [aXenix]                         ; "xenix"
000000000000334e         je         loc_2ba8

0000000000003354         cmp        r8, 0x1161970
000000000000335b         lea        rdx, qword [aGfsgfs2]                       ; "gfs/gfs2"
0000000000003362         jne        loc_2b7d

0000000000003368         jmp        loc_2ba8

                     loc_336d:
000000000000336d         mov        eax, 0xfe534d42                             ; CODE XREF=print_statfs+1605
0000000000003372         lea        rdx, qword [aSmackfs+12]                    ; 0xdd10
0000000000003379         cmp        r8, rax
000000000000337c         je         loc_2ba8

0000000000003382         add        rax, 0x1000000
0000000000003388         lea        rdx, qword [aCgroup2fs+10]                  ; 0xdb19
000000000000338f         cmp        r8, rax
0000000000003392         je         loc_2ba8

0000000000003398         sub        rax, 0x5bd64f9
000000000000339e         lea        rdx, qword [aHostfs+7]                      ; 0xdbc9
00000000000033a5         cmp        r8, rax
00000000000033a8         jne        loc_2b7d

00000000000033ae         jmp        loc_2ba8

                     loc_33b3:
00000000000033b3         cmp        r8, 0x9fa1                                  ; CODE XREF=print_statfs+1296
00000000000033ba         lea        rdx, qword [aOpenprom]                      ; "openprom"
00000000000033c1         je         loc_2ba8

00000000000033c7         cmp        r8, 0x9fa2
00000000000033ce         lea        rdx, qword [aUbifs+10]                      ; 0xdd54
00000000000033d5         je         loc_2ba8

00000000000033db         cmp        r8, 0x9fa0
00000000000033e2         lea        rdx, qword [aPrlfs+7]                       ; 0xdcb2
00000000000033e9         jne        loc_2b7d

00000000000033ef         jmp        loc_2ba8

                     loc_33f4:
00000000000033f4         cmp        r8, 0x794c7630                              ; CODE XREF=print_statfs+715
00000000000033fb         lea        rdx, qword [aOverlayfs]                     ; "overlayfs"
0000000000003402         je         loc_2ba8

0000000000003408         cmp        r8, 0x7c7c6673
000000000000340f         lea        rdx, qword [aPrlfs]                         ; "prl_fs"
0000000000003416         je         loc_2ba8

000000000000341c         cmp        r8, 0x74726163
0000000000003423         lea        rdx, qword [aTracefs]                       ; "tracefs"
000000000000342a         jne        loc_2b7d

0000000000003430         jmp        loc_2ba8

                     loc_3435:
0000000000003435         cmp        r8, 0xbad1dea                               ; CODE XREF=print_statfs+1077
000000000000343c         lea        rdx, qword [aFutexfs]                       ; "futexfs"
0000000000003443         je         loc_2ba8

0000000000003449         cmp        r8, 0xbd00bd0
0000000000003450         lea        rdx, qword [aLustre]                        ; "lustre"
0000000000003457         je         loc_2ba8

000000000000345d         cmp        r8, 0x9041934
0000000000003464         lea        rdx, qword [aAnoninodeFs]                   ; "anon-inode FS"
000000000000346b         jne        loc_2b7d

0000000000003471         jmp        loc_2ba8

                     loc_3476:
0000000000003476         cmp        r8, 0x64626720                              ; CODE XREF=print_statfs+1411
000000000000347d         lea        rdx, qword [aDebugfs]                       ; "debugfs"
0000000000003484         je         loc_2ba8

000000000000348a         cmp        r8, 0x64646178
0000000000003491         lea        rdx, qword [aDaxfs]                         ; "daxfs"
0000000000003498         je         loc_2ba8

000000000000349e         cmp        r8, 0x63677270
00000000000034a5         lea        rdx, qword [aCgroup2fs]                     ; "cgroup2fs"
00000000000034ac         jne        loc_2b7d

00000000000034b2         jmp        loc_2ba8

                     loc_34b7:
00000000000034b7         mov        eax, 0xbacbacbc                             ; CODE XREF=print_statfs+1186
00000000000034bc         lea        rdx, qword [aVmhgfs]                        ; "vmhgfs"
00000000000034c3         cmp        r8, rax
00000000000034c6         je         loc_2ba8

00000000000034cc         add        rax, 0x42431f1
00000000000034d2         lea        rdx, qword [aSmackfs+17]                    ; 0xdd15
00000000000034d9         cmp        r8, rax
00000000000034dc         je         loc_2ba8

00000000000034e2         sub        rax, 0x1335c539
00000000000034e8         lea        rdx, qword [aXenfs]                         ; "xenfs"
00000000000034ef         cmp        r8, rax
00000000000034f2         jne        loc_2b7d

00000000000034f8         jmp        loc_2ba8

                     loc_34fd:
00000000000034fd         cmp        r8, 0x24051905                              ; CODE XREF=print_statfs+1508
0000000000003504         lea        rdx, qword [aUbifs]                         ; "ubifs"
000000000000350b         je         loc_2ba8

0000000000003511         cmp        r8, 0x28cd3d45
0000000000003518         lea        rdx, qword [aConfigfs+9]                    ; 0xdb30
000000000000351f         je         loc_2ba8

0000000000003525         cmp        r8, 0x1badface
000000000000352c         lea        rdx, qword [aHugetlbfs+6]                   ; 0xdbd4
0000000000003533         jne        loc_2b7d

0000000000003539         jmp        loc_2ba8

                     loc_353e:
000000000000353e         cmp        r8, 0x53464846                              ; CODE XREF=print_statfs+199
0000000000003545         lea        rdx, qword [aWslfs]                         ; "wslfs"
000000000000354c         je         loc_2ba8

0000000000003552         cmp        r8, 0x5346544e
0000000000003559         lea        rdx, qword [aNilfs+11]                      ; 0xdc87
0000000000003560         je         loc_2ba8

0000000000003566         cmp        r8, 0x5346414f
000000000000356d         lea        rdx, qword [aKafs+2]                        ; 0xdc12
0000000000003574         jne        loc_2b7d

000000000000357a         jmp        loc_2ba8

                     loc_357f:
000000000000357f         cmp        r8, 0x4004                                  ; CODE XREF=print_statfs+581
0000000000003586         je         loc_35a9

0000000000003588         cmp        r8, 0x4006
000000000000358f         lea        rdx, qword [aExt2ext3+20]                   ; 0xdb88
0000000000003596         je         loc_2ba8

000000000000359c         cmp        r8, 0x4000
00000000000035a3         jne        loc_2b7d

                     loc_35a9:
00000000000035a9         lea        rdx, qword [aIsofs]                         ; "isofs", CODE XREF=print_statfs+1290, print_statfs+2822
00000000000035b0         jmp        loc_2ba8

                     loc_35b5:
00000000000035b5         cmp        r8, 0x482b                                  ; CODE XREF=print_statfs+1796
00000000000035bc         lea        rdx, qword [aGfsgfs2+14]                    ; 0xdbb8
00000000000035c3         je         loc_2ba8

00000000000035c9         cmp        r8, 0x4858
00000000000035d0         lea        rdx, qword [aGfsgfs2+19]                    ; 0xdbbd
00000000000035d7         je         loc_2ba8

00000000000035dd         jmp        loc_2b7d
00000000000035e2         align      8

                     loc_35e8:
00000000000035e8         cmp        r8, 0xadff                                  ; CODE XREF=print_statfs+1708
00000000000035ef         lea        rdx, qword [a0+21]                          ; 0xdaaa
00000000000035f6         je         loc_2ba8

00000000000035fc         cmp        r8, 0xef51
0000000000003603         lea        rdx, qword [aExt2ext3+10]                   ; 0xdb7e
000000000000360a         je         loc_2ba8

0000000000003610         jmp        loc_2b7d
0000000000003615         align      8

                     loc_3618:
0000000000003618         cmp        r8, 0x2f                                    ; CODE XREF=print_statfs+2084
000000000000361c         lea        rdx, qword [aPstorefs+9]                    ; 0xdcc0
0000000000003623         je         loc_2ba8

0000000000003629         cmp        r8, 0x187
0000000000003630         lea        rdx, qword [aAutofs]                        ; "autofs"
0000000000003637         je         loc_2ba8

000000000000363d         jmp        loc_2b7d
0000000000003642         align      8

                     loc_3648:
0000000000003648         cmp        r8, 0x2fc12fc1                              ; CODE XREF=print_statfs+1988
000000000000364f         lea        rdx, qword [aVmhgfs+13]                     ; 0xdd6f
0000000000003656         je         loc_2ba8

000000000000365c         cmp        r8, 0x3153464a
0000000000003663         lea        rdx, qword [aJffs2+6]                       ; 0xdc0c
000000000000366a         je         loc_2ba8

0000000000003670         jmp        loc_2b7d
0000000000003675         align      8

                     loc_3678:
0000000000003678         cmp        r8, 0x65735546                              ; CODE XREF=print_statfs+1892
000000000000367f         lea        rdx, qword [aFuseblk]                       ; "fuseblk"
0000000000003686         je         loc_2ba8

000000000000368c         cmp        r8, 0x67596969
0000000000003693         lea        rdx, qword [aRomfs+6]                       ; 0xdcdd
000000000000369a         je         loc_2ba8

00000000000036a0         jmp        loc_2b7d

                     loc_36a5:
00000000000036a5         lea        rdx, qword [aFutexfs+3]                     ; 0xdba5, CODE XREF=print_statfs+171
00000000000036ac         jmp        loc_2ba8

                     loc_36b1:
00000000000036b1         lea        rdx, qword [aLogfs]                         ; "logfs", CODE XREF=print_statfs+1152
00000000000036b8         jmp        loc_2ba8

                     loc_36bd:
00000000000036bd         lea        rdx, qword [aInotifyfs]                     ; "inotifyfs", CODE XREF=print_statfs+114
00000000000036c4         jmp        loc_2ba8

                     loc_36c9:
00000000000036c9         lea        rdx, qword [aSysv4]                         ; "sysv4", CODE XREF=print_statfs+799
00000000000036d0         jmp        loc_2ba8

                     loc_36d5:
00000000000036d5         lea        rdx, qword [aMinix30Char]                   ; "minix (30 char.)", CODE XREF=print_statfs+549
00000000000036dc         jmp        loc_2ba8

                     loc_36e1:
00000000000036e1         lea        rdx, qword [aInodefs]                       ; "inodefs", CODE XREF=print_statfs+1045
00000000000036e8         jmp        loc_2ba8

                     loc_36ed:
00000000000036ed         lea        rdx, qword [aSquashfs+5]                    ; 0xdd26, CODE XREF=print_statfs+530
00000000000036f4         jmp        loc_2ba8

                     loc_36f9:
00000000000036f9         lea        rdx, qword [a0+16]                          ; 0xdaa5, CODE XREF=print_statfs+511
0000000000003700         jmp        loc_2ba8

                     loc_3705:
0000000000003705         lea        rdx, qword [aRamfs]                         ; "ramfs", CODE XREF=print_statfs+664
000000000000370c         jmp        loc_2ba8

                     loc_3711:
0000000000003711         lea        rdx, qword [aPstorefs]                      ; "pstorefs", CODE XREF=print_statfs+935
0000000000003718         jmp        loc_2ba8

                     loc_371d:
000000000000371d         lea        rdx, qword [aSockfs]                        ; "sockfs", CODE XREF=print_statfs+152
0000000000003724         jmp        loc_2ba8

                     loc_3729:
0000000000003729         lea        rdx, qword [aSecurityfs]                    ; "securityfs", CODE XREF=print_statfs+683
0000000000003730         jmp        loc_2ba8

                     loc_3735:
0000000000003735         lea        rdx, qword [aExofs]                         ; "exofs", CODE XREF=print_statfs+1271
000000000000373c         jmp        loc_2ba8

                     loc_3741:
0000000000003741         lea        rdx, qword [aFusectl]                       ; "fusectl", CODE XREF=print_statfs+133
0000000000003748         jmp        loc_2ba8

                     loc_374d:
000000000000374d         lea        rdx, qword [aBalloonkvmfs+16]               ; 0xdad9, CODE XREF=print_statfs+818
0000000000003754         jmp        loc_2ba8
0000000000003759         align      32                                          ; End of unwind block (FDE at 0x107a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_54: int32_t, -84
        ;    var_55: int8_t, -85
        ;    var_78: int64_t, -120
        ;    var_90: int8_t, -144
        ;    var_D0: int8_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224


                     print_it:
0000000000003760         push       r15                                         ; Begin of unwind block (FDE at 0x107d0), CODE XREF=main+699, main+859
0000000000003762         push       r14
0000000000003764         mov        r14, rdi
0000000000003767         push       r13
0000000000003769         push       r12
000000000000376b         push       rbp
000000000000376c         push       rbx
000000000000376d         sub        rsp, 0x28
0000000000003771         mov        dword [rsp+0x58+var_54], esi
0000000000003775         mov        qword [rsp+0x58+var_50], rdx
000000000000377a         mov        qword [rsp+0x58+var_48], rcx
000000000000377f         mov        qword [rsp+0x58+var_40], r8
0000000000003784         call       j_strlen                                    ; strlen
0000000000003789         lea        rdi, qword [rax+3]
000000000000378d         call       xmalloc                                     ; xmalloc
0000000000003792         movzx      esi, byte [r14]
0000000000003796         mov        rbx, rax
0000000000003799         mov        byte [rsp+0x58+var_55], 0x0
000000000000379e         test       sil, sil
00000000000037a1         je         loc_3874

00000000000037a7         mov        r12, r14
00000000000037aa         jmp        loc_382f
00000000000037af         align      16

                     loc_37b0:
00000000000037b0         cmp        byte [interpret_backslash_escapes], 0x0     ; interpret_backslash_escapes, CODE XREF=print_it+222
00000000000037b7         je         loc_37ff

00000000000037b9         movsx      r14d, byte [r12+1]
00000000000037bf         lea        eax, dword [r14-0x30]
00000000000037c3         cmp        al, 0x7
00000000000037c5         jbe        loc_3980

00000000000037cb         cmp        r14b, 0x78
00000000000037cf         je         loc_39e0

00000000000037d5         test       r14b, r14b
00000000000037d8         jne        loc_3a90

00000000000037de         lea        rsi, qword [aWarningBacksla]                ; argument "msgid" for method j_dcgettext, "warning: backslash at end of format"
00000000000037e5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000037ea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000037ec         call       j_dcgettext                                 ; dcgettext
00000000000037f1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000037f3         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000037f6         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000037f8         xor        eax, eax
00000000000037fa         call       j_error                                     ; error

                     loc_37ff:
00000000000037ff         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_it+87
0000000000003806         mov        rax, qword [rdi+0x28]
000000000000380a         cmp        rax, qword [rdi+0x30]
000000000000380e         jae        loc_3b20

0000000000003814         lea        rdx, qword [rax+1]
0000000000003818         mov        r14, r12
000000000000381b         mov        r12, rbp
000000000000381e         mov        qword [rdi+0x28], rdx
0000000000003822         mov        byte [rax], 0x5c

                     loc_3825:
0000000000003825         movzx      esi, byte [r14+1]                           ; CODE XREF=print_it+478, print_it+537, print_it+635, print_it+786, print_it+811, print_it+935, print_it+954, print_it+976, print_it+1148, print_it+1196
000000000000382a         test       sil, sil
000000000000382d         je         loc_3874

                     loc_382f:
000000000000382f         cmp        sil, 0x25                                   ; CODE XREF=print_it+74, print_it+274
0000000000003833         lea        rbp, qword [r12+1]
0000000000003838         je         loc_38a8

000000000000383a         cmp        sil, 0x5c
000000000000383e         je         loc_37b0

0000000000003844         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000384b         mov        rax, qword [rdi+0x28]
000000000000384f         cmp        rax, qword [rdi+0x30]
0000000000003853         jae        loc_3a80

0000000000003859         lea        rdx, qword [rax+1]
000000000000385d         mov        r14, r12
0000000000003860         mov        r12, rbp
0000000000003863         mov        qword [rdi+0x28], rdx
0000000000003867         mov        byte [rax], sil
000000000000386a         movzx      esi, byte [r14+1]
000000000000386f         test       sil, sil
0000000000003872         jne        loc_382f

                     loc_3874:
0000000000003874         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=print_it+65, print_it+205
0000000000003877         call       j_free                                      ; free
000000000000387c         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; argument "__stream" for method j_fputs_unlocked, stdout@@GLIBC_2.2.5
0000000000003883         mov        rdi, qword [trailing_delim]                 ; argument "__s" for method j_fputs_unlocked, trailing_delim
000000000000388a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000388f         movzx      eax, byte [rsp+0x58+var_55]
0000000000003894         add        rsp, 0x28
0000000000003898         pop        rbx
0000000000003899         pop        rbp
000000000000389a         pop        r12
000000000000389c         pop        r13
000000000000389e         pop        r14
00000000000038a0         pop        r15
00000000000038a2         ret
                        ; endp
00000000000038a3         align      8

                     loc_38a8:
00000000000038a8         lea        rsi, qword [printf_flags]                   ; argument "__accept" for method j_strspn, "'-+ #0I", CODE XREF=print_it+216
00000000000038af         mov        rdi, rbp                                    ; argument "__s" for method j_strspn
00000000000038b2         call       j_strspn                                    ; strspn
00000000000038b7         lea        r14, qword [r12+rax+1]
00000000000038bc         lea        rsi, qword [digits]                         ; argument "__accept" for method j_strspn, "0123456789"
00000000000038c3         mov        rdi, r14                                    ; argument "__s" for method j_strspn
00000000000038c6         call       j_strspn                                    ; strspn
00000000000038cb         add        r14, rax
00000000000038ce         movzx      r13d, byte [r14]
00000000000038d2         cmp        r13b, 0x2e
00000000000038d6         jne        loc_38f1

00000000000038d8         lea        rdi, qword [r14+1]                          ; argument "__s" for method j_strspn
00000000000038dc         lea        rsi, qword [digits]                         ; argument "__accept" for method j_strspn, "0123456789"
00000000000038e3         call       j_strspn                                    ; strspn
00000000000038e8         lea        r14, qword [r14+rax+1]
00000000000038ed         movzx      r13d, byte [r14]

                     loc_38f1:
00000000000038f1         mov        rax, r14                                    ; CODE XREF=print_it+374
00000000000038f4         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
00000000000038f7         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
00000000000038fa         sub        rax, rbp
00000000000038fd         lea        r15, qword [rax+1]
0000000000003901         mov        rbp, rax
0000000000003904         mov        rdx, r15                                    ; argument "__n" for method j_memcpy
0000000000003907         call       j_memcpy                                    ; memcpy
000000000000390c         test       r13b, r13b
000000000000390f         je         loc_3948

0000000000003911         cmp        r13b, 0x25
0000000000003915         je         loc_394c

0000000000003917         movsx      edx, r13b
000000000000391b         mov        r9, qword [rsp+0x58+var_40]
0000000000003920         mov        r8, qword [rsp+0x58+var_50]
0000000000003925         mov        ecx, dword [rsp+0x58+var_54]
0000000000003929         mov        rsi, r15
000000000000392c         mov        rdi, rbx
000000000000392f         mov        rax, qword [rsp+0x58+var_48]
0000000000003934         lea        r12, qword [r14+1]
0000000000003938         call       rax
000000000000393a         or         byte [rsp+0x58+var_55], al
000000000000393e         jmp        loc_3825
0000000000003943         align      8

                     loc_3948:
0000000000003948         sub        r14, 0x1                                    ; CODE XREF=print_it+431

                     loc_394c:
000000000000394c         test       rbp, rbp                                    ; CODE XREF=print_it+437
000000000000394f         jne        loc_3c11

0000000000003955         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000395c         lea        r12, qword [r14+1]
0000000000003960         mov        rax, qword [rdi+0x28]
0000000000003964         cmp        rax, qword [rdi+0x30]
0000000000003968         jae        loc_3b10

000000000000396e         lea        rdx, qword [rax+1]
0000000000003972         mov        qword [rdi+0x28], rdx
0000000000003976         mov        byte [rax], 0x25
0000000000003979         jmp        loc_3825
000000000000397e         align      128

                     loc_3980:
0000000000003980         movsx      eax, byte [r12+2]                           ; CODE XREF=print_it+101
0000000000003986         sub        r14d, 0x30
000000000000398a         lea        edx, dword [rax-0x30]
000000000000398d         cmp        dl, 0x7
0000000000003990         ja         loc_3be1

0000000000003996         lea        r14d, dword [rax+r14*8-0x30]
000000000000399b         movsx      eax, byte [r12+3]
00000000000039a1         lea        edx, dword [rax-0x30]
00000000000039a4         cmp        dl, 0x7
00000000000039a7         ja         loc_3bea

00000000000039ad         lea        r14d, dword [rax+r14*8-0x30]
00000000000039b2         add        r12, 0x4

                     loc_39b6:
00000000000039b6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_it+1157, print_it+1166
00000000000039bd         mov        rax, qword [rdi+0x28]
00000000000039c1         cmp        rax, qword [rdi+0x30]
00000000000039c5         jae        loc_3bae

00000000000039cb         lea        rdx, qword [rax+1]
00000000000039cf         mov        qword [rdi+0x28], rdx
00000000000039d3         mov        byte [rax], r14b

                     loc_39d6:
00000000000039d6         lea        r14, qword [r12-1]                          ; CODE XREF=print_it+1111
00000000000039db         jmp        loc_3825

                     loc_39e0:
00000000000039e0         call       j___ctype_b_loc                             ; __ctype_b_loc, CODE XREF=print_it+111
00000000000039e5         movzx      ecx, byte [r12+2]
00000000000039eb         mov        rdx, qword [rax]
00000000000039ee         test       byte [rdx+rcx*2+1], 0x10
00000000000039f3         mov        rax, rcx
00000000000039f6         je         loc_3ab0

00000000000039fc         lea        esi, dword [rax-0x61]
00000000000039ff         movsx      ecx, cl
0000000000003a02         cmp        sil, 0x5
0000000000003a06         jbe        loc_3b35

0000000000003a0c         lea        esi, dword [rcx-0x37]
0000000000003a0f         sub        eax, 0x41
0000000000003a12         sub        ecx, 0x30
0000000000003a15         cmp        al, 0x5
0000000000003a17         mov        eax, esi
0000000000003a19         cmova      eax, ecx

                     loc_3a1c:
0000000000003a1c         movzx      esi, byte [r12+3]                           ; CODE XREF=print_it+984
0000000000003a22         lea        r14, qword [r12+2]
0000000000003a27         test       byte [rdx+rsi*2+1], 0x10
0000000000003a2c         mov        rcx, rsi
0000000000003a2f         je         loc_3a4f

0000000000003a31         movsx      edx, sil
0000000000003a35         lea        esi, dword [rsi-0x61]
0000000000003a38         shl        eax, 0x4
0000000000003a3b         lea        r14, qword [r12+3]
0000000000003a40         cmp        sil, 0x5
0000000000003a44         ja         loc_3bbc

0000000000003a4a         sub        edx, 0x57

                     loc_3a4d:
0000000000003a4d         add        eax, edx                                    ; CODE XREF=print_it+1131

                     loc_3a4f:
0000000000003a4f         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_it+719
0000000000003a56         lea        r12, qword [r14+1]
0000000000003a5a         mov        rdx, qword [rdi+0x28]
0000000000003a5e         cmp        rdx, qword [rdi+0x30]
0000000000003a62         jae        loc_3c04

0000000000003a68         lea        rcx, qword [rdx+1]
0000000000003a6c         mov        qword [rdi+0x28], rcx
0000000000003a70         mov        byte [rdx], al
0000000000003a72         jmp        loc_3825
0000000000003a77         align      128

                     loc_3a80:
0000000000003a80         mov        r14, r12                                    ; CODE XREF=print_it+243
0000000000003a83         mov        r12, rbp
0000000000003a86         call       j___overflow                                ; __overflow
0000000000003a8b         jmp        loc_3825

                     loc_3a90:
0000000000003a90         lea        eax, dword [r14-0x22]                       ; CODE XREF=print_it+120
0000000000003a94         movsx      r13d, r14b
0000000000003a98         cmp        al, 0x54
0000000000003a9a         ja         loc_3ab6

0000000000003a9c         lea        rcx, qword [switch_table_e028]              ; switch_table_e028
0000000000003aa3         movzx      eax, al
0000000000003aa6         movsxd     rax, dword [rcx+rax*4]
0000000000003aaa         add        rax, rcx
0000000000003aad         jmp        rax                                         ; switch statement using table at 0xe028, with 85 cases, 0x3ab6,0x3ae0,0x3b3d,0x3b4b,0x3b59,0x3b6a,0x3b7b,0x3b8c,0x3b9d,0x3bf3
0000000000003aaf         align      16

                     loc_3ab0:
0000000000003ab0         mov        r13d, 0x78                                  ; CODE XREF=print_it+662

                     loc_3ab6:
0000000000003ab6         lea        rsi, qword [aWarningUnrecog]                ; case 83, argument "msgid" for method j_dcgettext, "warning: unrecognized escape '\\%c'", CODE XREF=print_it+826, print_it+845
0000000000003abd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ac2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ac4         call       j_dcgettext                                 ; dcgettext
0000000000003ac9         mov        ecx, r13d
0000000000003acc         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003acf         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003ad1         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003ad3         xor        eax, eax
0000000000003ad5         call       j_error                                     ; error
0000000000003ada         nop        word [rax+rax]

                     loc_3ae0:
0000000000003ae0         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 58, stdout@@GLIBC_2.2.5, CODE XREF=print_it+845, print_it+1001, print_it+1015, print_it+1029, print_it+1046, print_it+1063, print_it+1080, print_it+1097, print_it+1183
0000000000003ae7         add        r12, 0x2
0000000000003aeb         mov        rax, qword [rdi+0x28]
0000000000003aef         cmp        rax, qword [rdi+0x30]
0000000000003af3         jae        loc_3bd0

0000000000003af9         lea        rdx, qword [rax+1]
0000000000003afd         mov        qword [rdi+0x28], rdx
0000000000003b01         mov        byte [rax], r14b
0000000000003b04         mov        r14, rbp
0000000000003b07         jmp        loc_3825
0000000000003b0c         align      16

                     loc_3b10:
0000000000003b10         mov        esi, 0x25                                   ; argument #2 for method j___overflow, CODE XREF=print_it+520
0000000000003b15         call       j___overflow                                ; __overflow
0000000000003b1a         jmp        loc_3825
0000000000003b1f         align      32

                     loc_3b20:
0000000000003b20         mov        esi, 0x5c                                   ; argument #2 for method j___overflow, CODE XREF=print_it+174
0000000000003b25         mov        r14, r12
0000000000003b28         mov        r12, rbp
0000000000003b2b         call       j___overflow                                ; __overflow
0000000000003b30         jmp        loc_3825

                     loc_3b35:
0000000000003b35         lea        eax, dword [rcx-0x57]                       ; CODE XREF=print_it+678
0000000000003b38         jmp        loc_3a1c

                     loc_3b3d:
0000000000003b3d         mov        r13d, 0xb                                   ; case 84, CODE XREF=print_it+845
0000000000003b43         mov        r14d, 0xb
0000000000003b49         jmp        loc_3ae0

                     loc_3b4b:
0000000000003b4b         mov        r13d, 0x9                                   ; case 82, CODE XREF=print_it+845
0000000000003b51         mov        r14d, 0x9
0000000000003b57         jmp        loc_3ae0

                     loc_3b59:
0000000000003b59         mov        r13d, 0xd                                   ; case 80, CODE XREF=print_it+845
0000000000003b5f         mov        r14d, 0xd
0000000000003b65         jmp        loc_3ae0

                     loc_3b6a:
0000000000003b6a         mov        r13d, 0xa                                   ; case 76, CODE XREF=print_it+845
0000000000003b70         mov        r14d, 0xa
0000000000003b76         jmp        loc_3ae0

                     loc_3b7b:
0000000000003b7b         mov        r13d, 0xc                                   ; case 68, CODE XREF=print_it+845
0000000000003b81         mov        r14d, 0xc
0000000000003b87         jmp        loc_3ae0

                     loc_3b8c:
0000000000003b8c         mov        r13d, 0x1b                                  ; case 67, CODE XREF=print_it+845
0000000000003b92         mov        r14d, 0x1b
0000000000003b98         jmp        loc_3ae0

                     loc_3b9d:
0000000000003b9d         mov        r13d, 0x8                                   ; case 64, CODE XREF=print_it+845
0000000000003ba3         mov        r14d, 0x8
0000000000003ba9         jmp        loc_3ae0

                     loc_3bae:
0000000000003bae         movzx      esi, r14b                                   ; argument #2 for method j___overflow, CODE XREF=print_it+613
0000000000003bb2         call       j___overflow                                ; __overflow
0000000000003bb7         jmp        loc_39d6

                     loc_3bbc:
0000000000003bbc         lea        esi, dword [rdx-0x37]                       ; CODE XREF=print_it+740
0000000000003bbf         sub        ecx, 0x41
0000000000003bc2         sub        edx, 0x30
0000000000003bc5         cmp        cl, 0x5
0000000000003bc8         cmovbe     edx, esi
0000000000003bcb         jmp        loc_3a4d

                     loc_3bd0:
0000000000003bd0         movzx      esi, r13b                                   ; argument #2 for method j___overflow, CODE XREF=print_it+915
0000000000003bd4         mov        r14, rbp
0000000000003bd7         call       j___overflow                                ; __overflow
0000000000003bdc         jmp        loc_3825

                     loc_3be1:
0000000000003be1         add        r12, 0x2                                    ; CODE XREF=print_it+560
0000000000003be5         jmp        loc_39b6

                     loc_3bea:
0000000000003bea         add        r12, 0x3                                    ; CODE XREF=print_it+583
0000000000003bee         jmp        loc_39b6

                     loc_3bf3:
0000000000003bf3         mov        r13d, 0x7                                   ; case 63, CODE XREF=print_it+845
0000000000003bf9         mov        r14d, 0x7
0000000000003bff         jmp        loc_3ae0

                     loc_3c04:
0000000000003c04         movzx      esi, al                                     ; argument #2 for method j___overflow, CODE XREF=print_it+770
0000000000003c07         call       j___overflow                                ; __overflow
0000000000003c0c         jmp        loc_3825

                     loc_3c11:
0000000000003c11         mov        rax, r15                                    ; CODE XREF=print_it+495
0000000000003c14         mov        r15d, r13d
0000000000003c17         mov        rdi, rbx
0000000000003c1a         mov        byte [rbx+rax], r15b
0000000000003c1e         mov        byte [rbx+rbp+2], 0x0
0000000000003c23         call       quote                                       ; quote
0000000000003c28         lea        rsi, qword [aSInvalidDirect]                ; argument "msgid" for method j_dcgettext, "%s: invalid directive"
0000000000003c2f         mov        rbx, rax
0000000000003c32         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003c37         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003c39         call       j_dcgettext                                 ; dcgettext
0000000000003c3e         mov        rcx, rbx
0000000000003c41         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003c44         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003c46         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003c4b         xor        eax, eax
0000000000003c4d         call       j_error                                     ; error
0000000000003c52         nop        dword [rax]                                 ; End of unwind block (FDE at 0x107d0)
0000000000003c56         nop        word [cs:rax+rax]
                     human_time:
0000000000003c60         push       rbp                                         ; Begin of unwind block (FDE at 0x1081c), CODE XREF=print_stat+56
0000000000003c61         push       rbx
0000000000003c62         sub        rsp, 0x78
0000000000003c66         mov        qword [rsp+0xe0+var_E0], rdi
0000000000003c6a         mov        rdi, qword [tz.7299]                        ; tz.7299
0000000000003c71         mov        rax, qword [fs:0x28]
0000000000003c7a         mov        qword [rsp+0xe0+var_78], rax
0000000000003c7f         xor        eax, eax
0000000000003c81         mov        qword [rsp+0xe0+var_D8], rsi
0000000000003c86         test       rdi, rdi
0000000000003c89         je         loc_3d28

                     loc_3c8f:
0000000000003c8f         lea        rbx, qword [rsp+0xe0+var_D0]                ; CODE XREF=human_time+230
0000000000003c94         mov        rsi, rsp
0000000000003c97         mov        rbp, qword [rsp+0xe0+var_D8]
0000000000003c9c         mov        rdx, rbx
0000000000003c9f         call       localtime_rz                                ; localtime_rz
0000000000003ca4         test       rax, rax
0000000000003ca7         je         loc_3cf0

0000000000003ca9         mov        r8, qword [tz.7299]                         ; tz.7299
0000000000003cb0         lea        rdx, qword [aYmdHmsnZ]                      ; "%Y-%m-%d %H:%M:%S.%N %z"
0000000000003cb7         lea        rdi, qword [str.7298]                       ; str.7298
0000000000003cbe         mov        r9d, ebp
0000000000003cc1         mov        rcx, rbx
0000000000003cc4         mov        esi, 0x3d
0000000000003cc9         call       nstrftime                                   ; nstrftime

                     loc_3cce:
0000000000003cce         mov        rcx, qword [rsp+0xe0+var_78]                ; CODE XREF=human_time+195
0000000000003cd3         xor        rcx, qword [fs:0x28]
0000000000003cdc         lea        rax, qword [str.7298]                       ; str.7298
0000000000003ce3         jne        loc_3d4b

0000000000003ce5         add        rsp, 0x78
0000000000003ce9         pop        rbx
0000000000003cea         pop        rbp
0000000000003ceb         ret
                        ; endp
0000000000003cec         align      16

                     loc_3cf0:
0000000000003cf0         mov        rdi, qword [rsp+0xe0+var_E0]                ; CODE XREF=human_time+71
0000000000003cf4         lea        rsi, qword [rsp+0xe0+var_90]
0000000000003cf9         call       imaxtostr                                   ; imaxtostr
0000000000003cfe         lea        rcx, qword [aS09d]                          ; "%s.%09d"
0000000000003d05         lea        rdi, qword [str.7298]                       ; str.7298
0000000000003d0c         mov        r8, rax
0000000000003d0f         mov        r9d, ebp
0000000000003d12         mov        edx, 0x3d
0000000000003d17         mov        esi, 0x1
0000000000003d1c         xor        eax, eax
0000000000003d1e         call       j___sprintf_chk                             ; __sprintf_chk
0000000000003d23         jmp        loc_3cce
0000000000003d25         align      8

                     loc_3d28:
0000000000003d28         lea        rdi, qword [aSInvalidDirect+22]             ; argument "__name" for method j_getenv, 0xddaf, CODE XREF=human_time+41
0000000000003d2f         call       j_getenv                                    ; getenv
0000000000003d34         mov        rdi, rax
0000000000003d37         call       tzalloc                                     ; tzalloc
0000000000003d3c         mov        rdi, rax
0000000000003d3f         mov        qword [tz.7299], rax                        ; tz.7299
0000000000003d46         jmp        loc_3c8f

                     loc_3d4b:
0000000000003d4b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=human_time+131
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     find_bind_mount:
0000000000003d50         push       r13                                         ; End of unwind block (FDE at 0x1081c), Begin of unwind block (FDE at 0x10848), CODE XREF=print_stat+399, print_stat+1334
0000000000003d52         push       r12
0000000000003d54         mov        r12, rdi
0000000000003d57         push       rbp
0000000000003d58         push       rbx
0000000000003d59         sub        rsp, 0x138
0000000000003d60         mov        rax, qword [fs:0x28]
0000000000003d69         mov        qword [rsp+0x158+var_30], rax
0000000000003d71         xor        eax, eax
0000000000003d73         cmp        byte [tried_mount_list.7429], 0x0           ; tried_mount_list.7429
0000000000003d7a         je         loc_3e38

                     loc_3d80:
0000000000003d80         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat, CODE XREF=find_bind_mount+258
0000000000003d83         mov        rsi, r12                                    ; argument "__filename" for method j___xstat
0000000000003d86         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000003d8b         call       j___xstat                                   ; __xstat
0000000000003d90         test       eax, eax
0000000000003d92         jne        loc_3e10

0000000000003d94         mov        rbx, qword [mount_list.7428]                ; mount_list.7428
0000000000003d9b         test       rbx, rbx
0000000000003d9e         je         loc_3e10

0000000000003da0         lea        r13, qword [rsp+0x158+var_C8]
0000000000003da8         jmp        loc_3db9
0000000000003daa         align      16

                     loc_3db0:
0000000000003db0         mov        rbx, qword [rbx+0x30]                       ; CODE XREF=find_bind_mount+109, find_bind_mount+118, find_bind_mount+134, find_bind_mount+154, find_bind_mount+169, find_bind_mount+183
0000000000003db4         test       rbx, rbx
0000000000003db7         je         loc_3e10

                     loc_3db9:
0000000000003db9         test       byte [rbx+0x28], 0x1                        ; CODE XREF=find_bind_mount+88
0000000000003dbd         je         loc_3db0

0000000000003dbf         mov        rbp, qword [rbx]
0000000000003dc2         cmp        byte [rbp], 0x2f
0000000000003dc6         jne        loc_3db0

0000000000003dc8         mov        rdi, qword [rbx+8]                          ; argument "__s1" for method j_strcmp
0000000000003dcc         mov        rsi, r12                                    ; argument "__s2" for method j_strcmp
0000000000003dcf         call       j_strcmp                                    ; strcmp
0000000000003dd4         test       eax, eax
0000000000003dd6         jne        loc_3db0

0000000000003dd8         mov        rdx, r13                                    ; argument "__stat_buf" for method j___xstat
0000000000003ddb         mov        rsi, rbp                                    ; argument "__filename" for method j___xstat
0000000000003dde         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000003de3         call       j___xstat                                   ; __xstat
0000000000003de8         test       eax, eax
0000000000003dea         jne        loc_3db0

0000000000003dec         mov        rax, qword [rsp+0x158+var_C0]
0000000000003df4         cmp        qword [rsp+0x158+var_150], rax
0000000000003df9         jne        loc_3db0

0000000000003dfb         mov        rax, qword [rsp+0x158+var_C8]
0000000000003e03         cmp        qword [rsp+0x158+var_158], rax
0000000000003e07         jne        loc_3db0

0000000000003e09         mov        rax, qword [rbx]
0000000000003e0c         jmp        loc_3e12
0000000000003e0e         align      16

                     loc_3e10:
0000000000003e10         xor        eax, eax                                    ; CODE XREF=find_bind_mount+66, find_bind_mount+78, find_bind_mount+103

                     loc_3e12:
0000000000003e12         mov        rcx, qword [rsp+0x158+var_30]               ; CODE XREF=find_bind_mount+188
0000000000003e1a         xor        rcx, qword [fs:0x28]
0000000000003e23         jne        loc_3e89

0000000000003e25         add        rsp, 0x138
0000000000003e2c         pop        rbx
0000000000003e2d         pop        rbp
0000000000003e2e         pop        r12
0000000000003e30         pop        r13
0000000000003e32         ret
                        ; endp
0000000000003e33         align      8

                     loc_3e38:
0000000000003e38         xor        edi, edi                                    ; CODE XREF=find_bind_mount+42
0000000000003e3a         call       read_file_system_list                       ; read_file_system_list
0000000000003e3f         test       rax, rax
0000000000003e42         mov        qword [mount_list.7428], rax                ; mount_list.7428
0000000000003e49         je         loc_3e57

                     loc_3e4b:
0000000000003e4b         mov        byte [tried_mount_list.7429], 0x1           ; tried_mount_list.7429, CODE XREF=find_bind_mount+311
0000000000003e52         jmp        loc_3d80

                     loc_3e57:
0000000000003e57         lea        rsi, qword [aCannotReadTabl]                ; argument "msgid" for method j_dcgettext, "cannot read table of mounted file systems", CODE XREF=find_bind_mount+249
0000000000003e5e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003e60         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003e65         call       j_dcgettext                                 ; dcgettext
0000000000003e6a         mov        rbx, rax
0000000000003e6d         call       j___errno_location                          ; __errno_location
0000000000003e72         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003e74         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xf36a
0000000000003e7b         mov        rcx, rbx
0000000000003e7e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003e80         xor        eax, eax
0000000000003e82         call       j_error                                     ; error
0000000000003e87         jmp        loc_3e4b

                     loc_3e89:
0000000000003e89         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=find_bind_mount+211
                        ; endp
0000000000003e8e         align      16                                          ; End of unwind block (FDE at 0x10848)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     default_format:
0000000000003e90         test       dil, dil                                    ; Begin of unwind block (FDE at 0x10884), CODE XREF=main+1274, main+1293
0000000000003e93         push       r12
0000000000003e95         push       rbp
0000000000003e96         push       rbx
0000000000003e97         je         loc_3eb2

0000000000003e99         test       sil, sil
0000000000003e9c         je         loc_3f84

0000000000003ea2         pop        rbx
0000000000003ea3         pop        rbp
0000000000003ea4         pop        r12
0000000000003ea6         lea        rdi, qword [fmt_terse_fs]                   ; "%n %i %l %t %s %S %b %f %a %c %d\\n"
0000000000003ead         jmp        xstrdup                                     ; xstrdup

                     loc_3eb2:
0000000000003eb2         test       sil, sil                                    ; CODE XREF=default_format+7
0000000000003eb5         jne        loc_3fa3

0000000000003ebb         lea        rsi, qword [aFileNnSize10st]                ; argument "msgid" for method j_dcgettext, "  File: %N\\n  Size: %-10s\\tBlocks: %-10b IO Block: %-6o %F\\n"
0000000000003ec2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ec4         mov        ebx, edx
0000000000003ec6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ecb         call       j_dcgettext                                 ; dcgettext
0000000000003ed0         mov        rdi, rax
0000000000003ed3         call       xstrdup                                     ; xstrdup
0000000000003ed8         test       bl, bl
0000000000003eda         mov        r12, rax
0000000000003edd         mov        edx, 0x5
0000000000003ee2         lea        rsi, qword [aDeviceDhddtino]                ; "Device: %Dh/%dd\\tInode: %-10i  Links: %-5h Device type: %t,%T\\n"
0000000000003ee9         jne        loc_3ef2

0000000000003eeb         lea        rsi, qword [aDeviceDhddtino_e4b0]           ; "Device: %Dh/%dd\\tInode: %-10i  Links: %h\\n"

                     loc_3ef2:
0000000000003ef2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=default_format+89
0000000000003ef4         call       j_dcgettext                                 ; dcgettext
0000000000003ef9         lea        rdi, qword [aS09d+8]                        ; 0xddd2
0000000000003f00         mov        rdx, rax
0000000000003f03         mov        rsi, r12
0000000000003f06         xor        eax, eax
0000000000003f08         call       xasprintf                                   ; xasprintf
0000000000003f0d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000003f10         mov        rbp, rax
0000000000003f13         call       j_free                                      ; free
0000000000003f18         lea        rsi, qword [aAccess04a1010a]                ; argument "msgid" for method j_dcgettext, "Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)\\n"
0000000000003f1f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f24         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f26         call       j_dcgettext                                 ; dcgettext
0000000000003f2b         lea        rdi, qword [aS09d+8]                        ; 0xddd2
0000000000003f32         mov        rdx, rax
0000000000003f35         mov        rsi, rbp
0000000000003f38         xor        eax, eax
0000000000003f3a         call       xasprintf                                   ; xasprintf
0000000000003f3f         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000003f42         mov        rbx, rax
0000000000003f45         call       j_free                                      ; free
0000000000003f4a         lea        rsi, qword [aAccessXnmodify]                ; argument "msgid" for method j_dcgettext, "Access: %x\\nModify: %y\\nChange: %z\\n Birth: %w\\n"
0000000000003f51         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f56         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f58         call       j_dcgettext                                 ; dcgettext
0000000000003f5d         lea        rdi, qword [aS09d+8]                        ; 0xddd2
0000000000003f64         mov        rdx, rax
0000000000003f67         mov        rsi, rbx
0000000000003f6a         xor        eax, eax
0000000000003f6c         call       xasprintf                                   ; xasprintf
0000000000003f71         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000003f74         mov        rbp, rax
0000000000003f77         call       j_free                                      ; free
0000000000003f7c         mov        rax, rbp
0000000000003f7f         pop        rbx
0000000000003f80         pop        rbp
0000000000003f81         pop        r12
0000000000003f83         ret
                        ; endp

                     loc_3f84:
0000000000003f84         lea        rsi, qword [aFileNnId8iName]                ; argument "msgid" for method j_dcgettext, "  File: \\\"%n\\\"\\n    ID: %-8i Namelen: %-7l Type: %T\\nBlock size: %-10s Fundamental block size: %S\\nBlocks: Total: %-10b Free: %-10f Available: %a\\nInodes: Total: %-10c Free: %d\\n", CODE XREF=default_format+12
0000000000003f8b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f8d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003f92         call       j_dcgettext                                 ; dcgettext
0000000000003f97         pop        rbx
0000000000003f98         pop        rbp
0000000000003f99         pop        r12
0000000000003f9b         mov        rdi, rax
0000000000003f9e         jmp        xstrdup                                     ; xstrdup

                     loc_3fa3:
0000000000003fa3         pop        rbx                                         ; CODE XREF=default_format+37
0000000000003fa4         pop        rbp
0000000000003fa5         pop        r12
0000000000003fa7         lea        rdi, qword [fmt_terse_regular]              ; "%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o\\n"
0000000000003fae         jmp        xstrdup                                     ; xstrdup
0000000000003fb3         align      64                                          ; End of unwind block (FDE at 0x10884)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     out_epoch_sec.isra.9:
0000000000003fc0         push       r15                                         ; Begin of unwind block (FDE at 0x108d4), CODE XREF=print_stat+683, print_stat+707, print_stat+731, print_stat+751
0000000000003fc2         push       r14
0000000000003fc4         push       r13
0000000000003fc6         push       r12
0000000000003fc8         mov        r13, rdx
0000000000003fcb         push       rbp
0000000000003fcc         push       rbx
0000000000003fcd         mov        r12, rdx
0000000000003fd0         mov        rdx, rsi                                    ; argument "__n" for method j_memchr
0000000000003fd3         mov        rbp, rdi
0000000000003fd6         mov        rbx, rcx
0000000000003fd9         sub        rsp, 0x18
0000000000003fdd         mov        qword [rsp+0x48+var_48], rsi
0000000000003fe1         mov        esi, 0x2e                                   ; argument "__c" for method j_memchr
0000000000003fe6         call       j_memchr                                    ; memchr
0000000000003feb         test       rax, rax
0000000000003fee         mov        r10, qword [rsp+0x48+var_48]
0000000000003ff2         je         loc_4150

0000000000003ff8         mov        rcx, rax
0000000000003ffb         mov        r15, rax
0000000000003ffe         mov        byte [rbp+r10], 0x0
0000000000004004         movsx      eax, byte [rax+1]                           ; DATA XREF=print_statfs+2815
0000000000004008         sub        rcx, rbp
000000000000400b         sub        eax, 0x30
000000000000400e         cmp        eax, 0x9
0000000000004011         jbe        loc_40e0

0000000000004017         movsx      eax, byte [r15-1]
000000000000401c         sub        eax, 0x30
000000000000401f         cmp        eax, 0x9
0000000000004022         jbe        loc_4200

0000000000004028         mov        r10, rcx
000000000000402b         mov        r15, rbx
000000000000402e         mov        esi, 0x1
0000000000004033         mov        dword [rsp+0x48+var_48], 0x0
000000000000403a         mov        r14d, 0x9
0000000000004040         mov        ecx, 0x1
0000000000004045         nop        dword [rax]

                     loc_4048:
0000000000004048         test       r12, r12                                    ; CODE XREF=out_epoch_sec.isra.9+387, out_epoch_sec.isra.9+451
000000000000404b         jns        loc_4056

000000000000404d         test       rbx, rbx
0000000000004050         jne        loc_4190

                     loc_4056:
0000000000004056         mov        rdx, r13                                    ; CODE XREF=out_epoch_sec.isra.9+139, out_epoch_sec.isra.9+507
0000000000004059         mov        rsi, r10
000000000000405c         mov        rdi, rbp
000000000000405f         call       out_int                                     ; out_int

                     loc_4064:
0000000000004064         test       r14d, r14d                                  ; CODE XREF=out_epoch_sec.isra.9+564
0000000000004067         je         loc_40c9

0000000000004069         cmp        r14d, 0x9
000000000000406d         mov        ecx, 0x9
0000000000004072         mov        ebx, dword [rsp+0x48+var_48]
0000000000004075         cmovle     ecx, r14d
0000000000004079         mov        edx, 0x0
000000000000407e         sub        r14d, ecx
0000000000004081         test       eax, eax
0000000000004083         cmovs      eax, edx
0000000000004086         xor        r9d, r9d
0000000000004089         cmp        eax, ebx
000000000000408b         jge        loc_40a6

000000000000408d         mov        ebp, ebx
000000000000408f         sub        ebp, eax
0000000000004091         mov        rax, qword [decimal_point_len]              ; decimal_point_len
0000000000004098         movsxd     rdx, ebp
000000000000409b         sub        ebp, eax
000000000000409d         sub        ebp, ecx
000000000000409f         cmp        rdx, rax
00000000000040a2         cmova      r9d, ebp

                     loc_40a6:
00000000000040a6         mov        rdx, qword [decimal_point]                  ; decimal_point, CODE XREF=out_epoch_sec.isra.9+203
00000000000040ad         push       0x0
00000000000040af         lea        rsi, qword [aSdd]                           ; "%s%.*d%-*.*d"
00000000000040b6         push       r14
00000000000040b8         mov        r8d, r15d
00000000000040bb         mov        edi, 0x1
00000000000040c0         xor        eax, eax
00000000000040c2         call       j___printf_chk                              ; __printf_chk
00000000000040c7         pop        rax
00000000000040c8         pop        rdx

                     loc_40c9:
00000000000040c9         add        rsp, 0x18                                   ; CODE XREF=out_epoch_sec.isra.9+167
00000000000040cd         pop        rbx
00000000000040ce         pop        rbp
00000000000040cf         pop        r12
00000000000040d1         pop        r13
00000000000040d3         pop        r14
00000000000040d5         pop        r15
00000000000040d7         ret
                        ; endp
00000000000040d8         align      32

                     loc_40e0:
00000000000040e0         lea        rdi, qword [r15+1]                          ; argument "__nptr" for method j_strtol, CODE XREF=out_epoch_sec.isra.9+81
00000000000040e4         mov        edx, 0xa                                    ; argument "__base" for method j_strtol
00000000000040e9         xor        esi, esi                                    ; argument "__endptr" for method j_strtol
00000000000040eb         mov        qword [rsp+0x48+var_48], rcx
00000000000040ef         call       j_strtol                                    ; strtol
00000000000040f4         mov        edx, 0x7fffffff
00000000000040f9         cmp        rax, 0x7fffffff
00000000000040ff         mov        rcx, qword [rsp+0x48+var_48]
0000000000004103         cmovg      rax, rdx
0000000000004107         test       eax, eax
0000000000004109         mov        r14d, eax
000000000000410c         je         loc_42d0

0000000000004112         movsx      eax, byte [r15-1]
0000000000004117         sub        eax, 0x30
000000000000411a         cmp        eax, 0x9
000000000000411d         jbe        loc_4206

0000000000004123         mov        r10, rcx
0000000000004126         mov        dword [rsp+0x48+var_48], 0x0
000000000000412d         nop        dword [rax]

                     loc_4130:
0000000000004130         cmp        r14d, 0x8                                   ; CODE XREF=out_epoch_sec.isra.9+658, out_epoch_sec.isra.9+695, out_epoch_sec.isra.9+706, out_epoch_sec.isra.9+718, out_epoch_sec.isra.9+816
0000000000004134         jle        loc_415a

0000000000004136         mov        r15, rbx
0000000000004139         mov        esi, 0x1
000000000000413e         mov        ecx, 0x1
0000000000004143         jmp        loc_4048
0000000000004148         align      16

                     loc_4150:
0000000000004150         mov        dword [rsp+0x48+var_48], 0x0                ; CODE XREF=out_epoch_sec.isra.9+50
0000000000004157         xor        r14d, r14d

                     loc_415a:
000000000000415a         mov        esi, r14d                                   ; CODE XREF=out_epoch_sec.isra.9+372, out_epoch_sec.isra.9+794
000000000000415d         mov        ecx, 0x1
0000000000004162         nop        word [rax+rax]

                     loc_4168:
0000000000004168         lea        ecx, dword [rcx+rcx*4]                      ; CODE XREF=out_epoch_sec.isra.9+435
000000000000416b         add        esi, 0x1
000000000000416e         add        ecx, ecx
0000000000004170         cmp        esi, 0x9
0000000000004173         jne        loc_4168

0000000000004175         mov        rax, rbx
0000000000004178         movsxd     rsi, ecx
000000000000417b         cqo
000000000000417d         idiv       rsi
0000000000004180         mov        r15, rax
0000000000004183         jmp        loc_4048
0000000000004188         align      16

                     loc_4190:
0000000000004190         mov        eax, 0x3b9aca00                             ; CODE XREF=out_epoch_sec.isra.9+144
0000000000004195         cdq
0000000000004196         idiv       ecx
0000000000004198         sub        eax, r15d
000000000000419b         mov        r15d, eax
000000000000419e         mov        rax, rbx
00000000000041a1         cqo
00000000000041a3         idiv       rsi
00000000000041a6         xor        eax, eax
00000000000041a8         test       rdx, rdx
00000000000041ab         setne      al
00000000000041ae         xor        r13d, r13d
00000000000041b1         sub        r15d, eax
00000000000041b4         setne      r13b
00000000000041b8         add        r13, r12
00000000000041bb         jne        loc_4056

00000000000041c1         lea        rcx, qword [aS09d+13]                       ; 0xddd7
00000000000041c8         lea        rdx, qword [a0]                             ; "'-+ 0"
00000000000041cf         mov        rsi, r10
00000000000041d2         mov        rdi, rbp
00000000000041d5         call       make_format                                 ; make_format
00000000000041da         movsd      xmm0, qword [aCannotReadFile+48]            ; 0xf270
00000000000041e2         mov        rsi, rbp
00000000000041e5         mov        edi, 0x1
00000000000041ea         mov        eax, 0x1
00000000000041ef         call       j___printf_chk                              ; __printf_chk
00000000000041f4         jmp        loc_4064
00000000000041f9         align      512

                     loc_4200:
0000000000004200         mov        r14d, 0x9                                   ; CODE XREF=out_epoch_sec.isra.9+98

                     loc_4206:
0000000000004206         mov        byte [r15], 0x0                             ; CODE XREF=out_epoch_sec.isra.9+349
000000000000420a         nop        word [rax+rax]

                     loc_4210:
0000000000004210         sub        r15, 0x1                                    ; CODE XREF=out_epoch_sec.isra.9+607
0000000000004214         movsx      eax, byte [r15-1]
0000000000004219         sub        eax, 0x30
000000000000421c         cmp        eax, 0x9
000000000000421f         jbe        loc_4210

0000000000004221         mov        edx, 0xa                                    ; argument "__base" for method j_strtol
0000000000004226         xor        esi, esi                                    ; argument "__endptr" for method j_strtol
0000000000004228         mov        rdi, r15                                    ; argument "__nptr" for method j_strtol
000000000000422b         mov        qword [rsp+0x48+var_40], rcx
0000000000004230         call       j_strtol                                    ; strtol
0000000000004235         mov        edx, 0x7fffffff
000000000000423a         cmp        rax, 0x7fffffff
0000000000004240         mov        rcx, qword [rsp+0x48+var_40]
0000000000004245         cmovg      rax, rdx
0000000000004249         cmp        eax, 0x1
000000000000424c         mov        dword [rsp+0x48+var_48], eax
000000000000424f         mov        r10, rcx
0000000000004252         jle        loc_4130

0000000000004258         xor        edx, edx
000000000000425a         cmp        byte [r15], 0x30
000000000000425e         movsxd     rcx, eax
0000000000004261         sete       dl
0000000000004264         add        r15, rdx
0000000000004267         mov        rdx, qword [decimal_point_len]              ; decimal_point_len
000000000000426e         mov        r10, r15
0000000000004271         sub        r10, rbp
0000000000004274         cmp        rcx, rdx
0000000000004277         jbe        loc_4130

000000000000427d         sub        eax, edx
000000000000427f         cmp        eax, 0x1
0000000000004282         jle        loc_4130

0000000000004288         sub        eax, r14d
000000000000428b         cmp        eax, 0x1
000000000000428e         jle        loc_4130

0000000000004294         cmp        rbp, r15
0000000000004297         mov        rdi, rbp
000000000000429a         jae        loc_42f5

000000000000429c         mov        rdx, rbp
000000000000429f         xor        esi, esi
00000000000042a1         jmp        loc_42b7
00000000000042a3         align      8

                     loc_42a8:
00000000000042a8         mov        byte [rdi], cl                              ; CODE XREF=out_epoch_sec.isra.9+765
00000000000042aa         add        rdi, 0x1

                     loc_42ae:
00000000000042ae         add        rdx, 0x1                                    ; CODE XREF=out_epoch_sec.isra.9+772
00000000000042b2         cmp        r15, rdx
00000000000042b5         je         loc_42df

                     loc_42b7:
00000000000042b7         movzx      ecx, byte [rdx]                             ; CODE XREF=out_epoch_sec.isra.9+737
00000000000042ba         cmp        cl, 0x2d
00000000000042bd         jne        loc_42a8

00000000000042bf         mov        esi, 0x1
00000000000042c4         jmp        loc_42ae
00000000000042c6         align      16

                     loc_42d0:
00000000000042d0         mov        dword [rsp+0x48+var_48], 0x0                ; CODE XREF=out_epoch_sec.isra.9+332
00000000000042d7         mov        r10, rcx
00000000000042da         jmp        loc_415a

                     loc_42df:
00000000000042df         mov        r15, rdi                                    ; CODE XREF=out_epoch_sec.isra.9+757
00000000000042e2         xor        r10d, r10d
00000000000042e5         sub        r15, rbp
00000000000042e8         test       sil, sil
00000000000042eb         je         loc_42f8

                     loc_42ed:
00000000000042ed         add        r10, r15                                    ; CODE XREF=out_epoch_sec.isra.9+856
00000000000042f0         jmp        loc_4130

                     loc_42f5:
00000000000042f5         xor        r15d, r15d                                  ; CODE XREF=out_epoch_sec.isra.9+730

                     loc_42f8:
00000000000042f8         lea        rcx, qword [aYmd+6]                         ; 0xf404, CODE XREF=out_epoch_sec.isra.9+811
00000000000042ff         mov        r8d, eax
0000000000004302         mov        rdx, 0xffffffffffffffff
0000000000004309         mov        esi, 0x1
000000000000430e         xor        eax, eax
0000000000004310         call       j___sprintf_chk                             ; __sprintf_chk
0000000000004315         movsxd     r10, eax
0000000000004318         jmp        loc_42ed
000000000000431a         align      32                                          ; End of unwind block (FDE at 0x108d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     print_stat:
0000000000004320         push       r14                                         ; Begin of unwind block (FDE at 0x1092c), DATA XREF=main+830
0000000000004322         push       r13
0000000000004324         sub        edx, 0x41
0000000000004327         push       r12
0000000000004329         push       rbp
000000000000432a         push       rbx
000000000000432b         sub        rsp, 0x10
000000000000432f         cmp        edx, 0x39
0000000000004332         ja         loc_4810

0000000000004338         lea        rcx, qword [switch_table_e17c]              ; switch_table_e17c
000000000000433f         mov        rbx, rdi
0000000000004342         mov        rbp, rsi
0000000000004345         movsxd     rax, dword [rcx+rdx*4]
0000000000004349         add        rax, rcx
000000000000434c         jmp        rax                                         ; switch statement using table at 0xe17c, with 58 cases, 0x4350,0x4380,0x4390,0x43a0,0x43c0,0x43d0,0x4408,0x4420,0x4450,0x4460,0x44f8,0x4510,0x4528,0x4540,0x4558,0x4570,0x4588,0x45c0,0x45d8,0x45f0,0x4608,0x4620,0x4648,0x4660,0x46f8,0x4720,0x4730,0x47b0,0x47c8,0x4800,0x4810
000000000000434e         align      16

                     loc_4350:
0000000000004350         mov        rsi, qword [r9+0x70]                        ; case 57, CODE XREF=print_stat+44
0000000000004354         mov        rdi, qword [r9+0x68]

                     loc_4358:
0000000000004358         call       human_time                                  ; human_time, CODE XREF=print_stat+104, print_stat+120

                     loc_435d:
000000000000435d         mov        rdx, rax                                    ; CODE XREF=print_stat+1256
0000000000004360         mov        rsi, rbp
0000000000004363         mov        rdi, rbx
0000000000004366         xor        r12d, r12d
0000000000004369         call       out_string                                  ; out_string

                     loc_436e:
000000000000436e         add        rsp, 0x10                                   ; CODE XREF=print_stat+149, print_stat+172, print_stat+224, print_stat+244, print_stat+294, print_stat+315, print_stat+461, print_stat+484, print_stat+508, print_stat+532, print_stat+556
0000000000004372         mov        eax, r12d
0000000000004375         pop        rbx
0000000000004376         pop        rbp
0000000000004377         pop        r12
0000000000004379         pop        r13
000000000000437b         pop        r14
000000000000437d         ret
                        ; endp
000000000000437e         align      128

                     loc_4380:
0000000000004380         mov        rsi, qword [r9+0x60]                        ; case 56, CODE XREF=print_stat+44
0000000000004384         mov        rdi, qword [r9+0x58]
0000000000004388         jmp        loc_4358
000000000000438a         align      16

                     loc_4390:
0000000000004390         mov        rsi, qword [r9+0x50]                        ; case 55, CODE XREF=print_stat+44
0000000000004394         mov        rdi, qword [r9+0x48]
0000000000004398         jmp        loc_4358
000000000000439a         align      32

                     loc_43a0:
00000000000043a0         lea        rdx, qword [aLibs+10]                       ; case 54, 0xf642, CODE XREF=print_stat+44

                     loc_43a7:
00000000000043a7         mov        rsi, rbp                                    ; CODE XREF=print_stat+787, print_stat+796, print_stat+1009
00000000000043aa         mov        rdi, rbx
00000000000043ad         xor        r12d, r12d
00000000000043b0         call       out_string                                  ; out_string
00000000000043b5         jmp        loc_436e
00000000000043b7         align      64

                     loc_43c0:
00000000000043c0         mov        edx, dword [r9+0x1c]                        ; case 52, CODE XREF=print_stat+44
00000000000043c4         xor        r12d, r12d
00000000000043c7         call       out_uint                                    ; out_uint
00000000000043cc         jmp        loc_436e
00000000000043ce         align      16

                     loc_43d0:
00000000000043d0         mov        rax, qword [r9+0x28]                        ; case 51, CODE XREF=print_stat+44
00000000000043d4         mov        rdx, rax
00000000000043d7         shr        rax, 0x20
00000000000043db         shr        rdx, 0x8
00000000000043df         mov        ecx, edx
00000000000043e1         mov        rdx, rax
00000000000043e4         and        ecx, aStertmclonetab                        ; "sterTMCloneTable"
00000000000043ea         and        edx, 0xfffff000

                     loc_43f0:
00000000000043f0         or         edx, ecx                                    ; CODE XREF=print_stat+824
00000000000043f2         mov        rsi, rbp
00000000000043f5         mov        rdi, rbx
00000000000043f8         call       out_uint_x                                  ; out_uint_x
00000000000043fd         xor        r12d, r12d
0000000000004400         jmp        loc_436e
0000000000004405         align      8

                     loc_4408:
0000000000004408         mov        rdx, qword [r9+0x30]                        ; case 50, CODE XREF=print_stat+44
000000000000440c         xor        r12d, r12d
000000000000440f         call       out_int                                     ; out_int
0000000000004414         jmp        loc_436e
0000000000004419         align      32

                     loc_4420:
0000000000004420         mov        rdx, qword [r9+0x38]                        ; case 46, CODE XREF=print_stat+44
0000000000004424         movabs     rax, 0x1fffffffffffffff
000000000000442e         lea        rcx, qword [rdx-1]
0000000000004432         cmp        rcx, rax
0000000000004435         mov        eax, 0x200
000000000000443a         cmova      rdx, rax
000000000000443e         xor        r12d, r12d
0000000000004441         call       out_uint                                    ; out_uint
0000000000004446         jmp        loc_436e
000000000000444b         align      16

                     loc_4450:
0000000000004450         mov        rdx, r8                                     ; case 45, CODE XREF=print_stat+44
0000000000004453         xor        r12d, r12d
0000000000004456         call       out_string                                  ; out_string
000000000000445b         jmp        loc_436e

                     loc_4460:
0000000000004460         cmp        byte [follow_links], 0x0                    ; case 44, follow_links, CODE XREF=print_stat+44
0000000000004467         jne        loc_447d

0000000000004469         mov        eax, dword [r9+0x18]
000000000000446d         and        eax, aTerseFilesyste                        ; "--terse --file-system is equivalent to the following FORMAT:\\n    %s"
0000000000004472         cmp        eax, 0xa000
0000000000004477         je         loc_4840

                     loc_447d:
000000000000447d         mov        rdi, r8                                     ; argument "__name" for method j_canonicalize_file_name, CODE XREF=print_stat+327
0000000000004480         mov        qword [rsp+0x38+var_30], r9
0000000000004485         mov        qword [rsp+0x38+var_38], r8
0000000000004489         call       j_canonicalize_file_name                    ; canonicalize_file_name
000000000000448e         test       rax, rax
0000000000004491         mov        r13, rax
0000000000004494         mov        r8, qword [rsp+0x38+var_38]
0000000000004498         mov        r9, qword [rsp+0x38+var_30]
000000000000449d         je         loc_486f

00000000000044a3         mov        rdi, rax
00000000000044a6         mov        qword [rsp+0x38+var_30], r9
00000000000044ab         mov        qword [rsp+0x38+var_38], r8
00000000000044af         call       find_bind_mount                             ; find_bind_mount
00000000000044b4         mov        rdi, r13                                    ; argument "__ptr" for method j_free
00000000000044b7         mov        r14, rax
00000000000044ba         xor        r12d, r12d
00000000000044bd         call       j_free                                      ; free
00000000000044c2         xor        r13d, r13d
00000000000044c5         test       r14, r14
00000000000044c8         mov        r8, qword [rsp+0x38+var_38]
00000000000044cc         mov        r9, qword [rsp+0x38+var_30]
00000000000044d1         je         loc_4840

                     loc_44d7:
00000000000044d7         mov        rdx, r14                                    ; CODE XREF=print_stat+1354, print_stat+1432, print_stat+1532

                     loc_44da:
00000000000044da         mov        rdi, rbx                                    ; CODE XREF=print_stat+975
00000000000044dd         mov        rsi, rbp
00000000000044e0         call       out_string                                  ; out_string
00000000000044e5         mov        rdi, r13                                    ; argument "__ptr" for method j_free
00000000000044e8         call       j_free                                      ; free
00000000000044ed         jmp        loc_436e
00000000000044f2         align      8

                     loc_44f8:
00000000000044f8         mov        rdx, qword [r9+8]                           ; case 40, CODE XREF=print_stat+44
00000000000044fc         xor        r12d, r12d
00000000000044ff         call       out_uint                                    ; out_uint
0000000000004504         jmp        loc_436e
0000000000004509         align      16

                     loc_4510:
0000000000004510         mov        edx, dword [r9+0x20]                        ; case 38, CODE XREF=print_stat+44
0000000000004514         xor        r12d, r12d
0000000000004517         call       out_uint                                    ; out_uint
000000000000451c         jmp        loc_436e
0000000000004521         align      8

                     loc_4528:
0000000000004528         mov        edx, dword [r9+0x18]                        ; case 37, CODE XREF=print_stat+44
000000000000452c         xor        r12d, r12d
000000000000452f         call       out_uint_x                                  ; out_uint_x
0000000000004534         jmp        loc_436e
0000000000004539         align      64

                     loc_4540:
0000000000004540         mov        rdx, qword [r9+0x10]                        ; case 39, CODE XREF=print_stat+44
0000000000004544         xor        r12d, r12d
0000000000004547         call       out_uint                                    ; out_uint
000000000000454c         jmp        loc_436e
0000000000004551         align      8

                     loc_4558:
0000000000004558         mov        rdx, qword [r9]                             ; case 35, CODE XREF=print_stat+44
000000000000455b         xor        r12d, r12d
000000000000455e         call       out_uint                                    ; out_uint
0000000000004563         jmp        loc_436e
0000000000004568         align      16

                     loc_4570:
0000000000004570         mov        rdx, qword [r9+0x40]                        ; case 33, CODE XREF=print_stat+44
0000000000004574         xor        r12d, r12d
0000000000004577         call       out_uint                                    ; out_uint
000000000000457c         jmp        loc_436e
0000000000004581         align      8

                     loc_4588:
0000000000004588         mov        r12d, dword [r9+0x18]                       ; case 32, CODE XREF=print_stat+44
000000000000458c         lea        rcx, qword [aCannotReadSymb+34]             ; 0xde14
0000000000004593         lea        rdx, qword [_IO_stdin_used+7]               ; 0xda87
000000000000459a         call       make_format                                 ; make_format
000000000000459f         and        r12d, aStertmclonetab                       ; "sterTMCloneTable"
00000000000045a6         mov        rsi, rbx
00000000000045a9         mov        edi, 0x1
00000000000045ae         mov        rdx, r12
00000000000045b1         xor        eax, eax
00000000000045b3         xor        r12d, r12d
00000000000045b6         call       j___printf_chk                              ; __printf_chk
00000000000045bb         jmp        loc_436e

                     loc_45c0:
00000000000045c0         mov        rcx, qword [r9+0x70]                        ; case 25, CODE XREF=print_stat+44
00000000000045c4         mov        rdx, qword [r9+0x68]
00000000000045c8         xor        r12d, r12d
00000000000045cb         call       out_epoch_sec.isra.9                        ; out_epoch_sec.isra.9
00000000000045d0         jmp        loc_436e
00000000000045d5         align      8

                     loc_45d8:
00000000000045d8         mov        rcx, qword [r9+0x60]                        ; case 24, CODE XREF=print_stat+44
00000000000045dc         mov        rdx, qword [r9+0x58]
00000000000045e0         xor        r12d, r12d
00000000000045e3         call       out_epoch_sec.isra.9                        ; out_epoch_sec.isra.9
00000000000045e8         jmp        loc_436e
00000000000045ed         align      16

                     loc_45f0:
00000000000045f0         mov        rcx, qword [r9+0x50]                        ; case 23, CODE XREF=print_stat+44
00000000000045f4         mov        rdx, qword [r9+0x48]
00000000000045f8         xor        r12d, r12d
00000000000045fb         call       out_epoch_sec.isra.9                        ; out_epoch_sec.isra.9
0000000000004600         jmp        loc_436e
0000000000004605         align      8

                     loc_4608:
0000000000004608         xor        edx, edx                                    ; case 22, CODE XREF=print_stat+44
000000000000460a         xor        ecx, ecx
000000000000460c         xor        r12d, r12d
000000000000460f         call       out_epoch_sec.isra.9                        ; out_epoch_sec.isra.9
0000000000004614         jmp        loc_436e
0000000000004619         align      32

                     loc_4620:
0000000000004620         mov        edi, dword [r9+0x1c]                        ; case 20, argument "__uid" for method j_getpwuid, CODE XREF=print_stat+44
0000000000004624         call       j_getpwuid                                  ; getpwuid
0000000000004629         test       rax, rax
000000000000462c         lea        rdx, qword [aUnknown]                       ; "UNKNOWN"
0000000000004633         je         loc_43a7

                     loc_4639:
0000000000004639         mov        rdx, qword [rax]                            ; CODE XREF=print_stat+1003
000000000000463c         jmp        loc_43a7
0000000000004641         align      8

                     loc_4648:
0000000000004648         mov        rax, qword [r9+0x28]                        ; case 19, CODE XREF=print_stat+44
000000000000464c         movzx      ecx, al
000000000000464f         shr        rax, 0xc
0000000000004653         mov        rdx, rax
0000000000004656         xor        dl, dl
0000000000004658         jmp        loc_43f0
000000000000465d         align      32

                     loc_4660:
0000000000004660         xor        edi, edi                                    ; case 13, CODE XREF=print_stat+44
0000000000004662         mov        qword [rsp+0x38+var_30], r9
0000000000004667         mov        qword [rsp+0x38+var_38], r8
000000000000466b         call       get_quoting_style                           ; get_quoting_style
0000000000004670         mov        r8, qword [rsp+0x38+var_38]
0000000000004674         mov        edi, eax
0000000000004676         xor        r12d, r12d
0000000000004679         mov        rsi, r8
000000000000467c         call       quotearg_style                              ; quotearg_style
0000000000004681         mov        rsi, rbp
0000000000004684         mov        rdx, rax
0000000000004687         mov        rdi, rbx
000000000000468a         call       out_string                                  ; out_string
000000000000468f         mov        r9, qword [rsp+0x38+var_30]
0000000000004694         mov        r8, qword [rsp+0x38+var_38]
0000000000004698         mov        eax, dword [r9+0x18]
000000000000469c         and        eax, aTerseFilesyste                        ; "--terse --file-system is equivalent to the following FORMAT:\\n    %s"
00000000000046a1         cmp        eax, 0xa000
00000000000046a6         jne        loc_436e

00000000000046ac         mov        rsi, qword [r9+0x30]
00000000000046b0         mov        rdi, r8
00000000000046b3         call       areadlink_with_size                         ; areadlink_with_size
00000000000046b8         test       rax, rax
00000000000046bb         mov        r13, rax
00000000000046be         mov        r8, qword [rsp+0x38+var_38]
00000000000046c2         je         loc_48cf

00000000000046c8         lea        rsi, qword [aCannotReadSymb+29]             ; 0xde0f
00000000000046cf         mov        edi, 0x1
00000000000046d4         xor        eax, eax
00000000000046d6         call       j___printf_chk                              ; __printf_chk
00000000000046db         xor        edi, edi
00000000000046dd         call       get_quoting_style                           ; get_quoting_style
00000000000046e2         mov        rsi, r13
00000000000046e5         mov        edi, eax
00000000000046e7         call       quotearg_style                              ; quotearg_style
00000000000046ec         mov        rdx, rax
00000000000046ef         jmp        loc_44da
00000000000046f4         align      8

                     loc_46f8:
00000000000046f8         mov        edi, dword [r9+0x20]                        ; case 6, argument "__gid" for method j_getgrgid, CODE XREF=print_stat+44
00000000000046fc         call       j_getgrgid                                  ; getgrgid
0000000000004701         test       rax, rax
0000000000004704         lea        rdx, qword [aUnknown]                       ; "UNKNOWN"
000000000000470b         jne        loc_4639

0000000000004711         jmp        loc_43a7
0000000000004716         align      32

                     loc_4720:
0000000000004720         mov        rdx, qword [r9]                             ; case 3, CODE XREF=print_stat+44
0000000000004723         xor        r12d, r12d
0000000000004726         call       out_uint_x                                  ; out_uint_x
000000000000472b         jmp        loc_436e

                     loc_4730:
0000000000004730         mov        qword [rsp+0x38+var_38], r8                 ; case 2, CODE XREF=print_stat+44
0000000000004734         call       j___errno_location                          ; __errno_location
0000000000004739         mov        r8, qword [rsp+0x38+var_38]
000000000000473d         mov        edi, 0x4
0000000000004742         mov        dword [rax], 0x5f
0000000000004748         mov        r12, rax
000000000000474b         mov        rsi, r8
000000000000474e         call       quotearg_style                              ; quotearg_style
0000000000004753         lea        rsi, qword [aFailedToGetSec]                ; argument "msgid" for method j_dcgettext, "failed to get security context of %s"
000000000000475a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000475f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004761         mov        r13, rax
0000000000004764         call       j_dcgettext                                 ; dcgettext
0000000000004769         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
000000000000476d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000004770         mov        rcx, r13
0000000000004773         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000004775         xor        eax, eax
0000000000004777         mov        r12d, 0x1
000000000000477d         call       j_error                                     ; error
0000000000004782         mov        eax, 0x73
0000000000004787         lea        rdx, qword [aUnknown+8]                     ; 0xddf0
000000000000478e         mov        rsi, rbx
0000000000004791         mov        word [rbx+rbp], ax
0000000000004795         mov        edi, 0x1
000000000000479a         xor        eax, eax
000000000000479c         call       j___printf_chk                              ; __printf_chk
00000000000047a1         jmp        loc_436e
00000000000047a6         align      16

                     loc_47b0:
00000000000047b0         mov        edx, 0x200                                  ; case 1, CODE XREF=print_stat+44
00000000000047b5         xor        r12d, r12d
00000000000047b8         call       out_uint                                    ; out_uint
00000000000047bd         jmp        loc_436e
00000000000047c2         align      8

                     loc_47c8:
00000000000047c8         lea        rsi, qword [modebuf.7294]                   ; case 0, modebuf.7294, CODE XREF=print_stat+44
00000000000047cf         mov        rdi, r9
00000000000047d2         xor        r12d, r12d
00000000000047d5         call       filemodestring                              ; filemodestring
00000000000047da         lea        rdx, qword [modebuf.7294]                   ; modebuf.7294
00000000000047e1         mov        rsi, rbp
00000000000047e4         mov        rdi, rbx
00000000000047e7         mov        byte [byte_213162], 0x0                     ; byte_213162
00000000000047ee         call       out_string                                  ; out_string
00000000000047f3         jmp        loc_436e
00000000000047f8         align      2048

                     loc_4800:
0000000000004800         mov        rdi, r9                                     ; case 5, CODE XREF=print_stat+44
0000000000004803         call       file_type                                   ; file_type
0000000000004808         jmp        loc_435d
000000000000480d         align      16

                     loc_4810:
0000000000004810         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; case 53, stdout@@GLIBC_2.2.5, CODE XREF=print_stat+18, print_stat+44
0000000000004817         mov        rax, qword [rdi+0x28]
000000000000481b         cmp        rax, qword [rdi+0x30]
000000000000481f         jae        loc_48bd

0000000000004825         lea        rdx, qword [rax+1]
0000000000004829         xor        r12d, r12d
000000000000482c         mov        qword [rdi+0x28], rdx
0000000000004830         mov        byte [rax], 0x3f
0000000000004833         jmp        loc_436e
0000000000004838         align      64

                     loc_4840:
0000000000004840         mov        rsi, r9                                     ; CODE XREF=print_stat+343, print_stat+433
0000000000004843         mov        rdi, r8
0000000000004846         call       find_mount_point                            ; find_mount_point
000000000000484b         test       rax, rax
000000000000484e         mov        r13, rax
0000000000004851         je         loc_48ab

0000000000004853         mov        rdi, rax
0000000000004856         call       find_bind_mount                             ; find_bind_mount
000000000000485b         test       rax, rax
000000000000485e         mov        r14, rax
0000000000004861         je         loc_4916

0000000000004867         xor        r12d, r12d
000000000000486a         jmp        loc_44d7

                     loc_486f:
000000000000486f         mov        rsi, r8                                     ; CODE XREF=print_stat+381
0000000000004872         mov        edi, 0x4
0000000000004877         call       quotearg_style                              ; quotearg_style
000000000000487c         lea        rsi, qword [aFailedToCanoni]                ; argument "msgid" for method j_dcgettext, "failed to canonicalize %s"
0000000000004883         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004888         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000488a         mov        r14, rax
000000000000488d         call       j_dcgettext                                 ; dcgettext
0000000000004892         mov        r12, rax
0000000000004895         call       j___errno_location                          ; __errno_location
000000000000489a         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000489c         mov        rcx, r14
000000000000489f         mov        rdx, r12                                    ; argument "__format" for method j_error
00000000000048a2         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000048a4         xor        eax, eax
00000000000048a6         call       j_error                                     ; error

                     loc_48ab:
00000000000048ab         mov        r12d, 0x1                                   ; CODE XREF=print_stat+1329
00000000000048b1         lea        r14, qword [aUnknown+8]                     ; 0xddf0
00000000000048b8         jmp        loc_44d7

                     loc_48bd:
00000000000048bd         mov        esi, 0x3f                                   ; argument #2 for method j___overflow, CODE XREF=print_stat+1279
00000000000048c2         xor        r12d, r12d
00000000000048c5         call       j___overflow                                ; __overflow
00000000000048ca         jmp        loc_436e

                     loc_48cf:
00000000000048cf         mov        rsi, r8                                     ; CODE XREF=print_stat+930
00000000000048d2         mov        edi, 0x4
00000000000048d7         mov        r12d, 0x1
00000000000048dd         call       quotearg_style                              ; quotearg_style
00000000000048e2         lea        rsi, qword [aCannotReadSymb]                ; argument "msgid" for method j_dcgettext, "cannot read symbolic link %s"
00000000000048e9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000048ee         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000048f0         mov        rbp, rax
00000000000048f3         call       j_dcgettext                                 ; dcgettext
00000000000048f8         mov        rbx, rax
00000000000048fb         call       j___errno_location                          ; __errno_location
0000000000004900         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000004902         mov        rcx, rbp
0000000000004905         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000004908         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000490a         xor        eax, eax
000000000000490c         call       j_error                                     ; error
0000000000004911         jmp        loc_436e

                     loc_4916:
0000000000004916         mov        r14, r13                                    ; CODE XREF=print_stat+1345
0000000000004919         xor        r12d, r12d
000000000000491c         jmp        loc_44d7
0000000000004921         align      16                                          ; End of unwind block (FDE at 0x1092c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000004930         push       r13                                         ; Begin of unwind block (FDE at 0x10970), CODE XREF=main+257, main+1332, __argmatch_die+5
0000000000004932         push       r12
0000000000004934         mov        edx, 0x5
0000000000004939         push       rbp
000000000000493a         push       rbx
000000000000493b         mov        ebp, edi
000000000000493d         sub        rsp, 0x88
0000000000004944         mov        rbx, qword [program_name]                   ; program_name
000000000000494b         mov        rax, qword [fs:0x28]
0000000000004954         mov        qword [rsp+0xa8+var_30], rax
0000000000004959         xor        eax, eax
000000000000495b         test       edi, edi
000000000000495d         je         loc_498d

000000000000495f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000004966         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004968         call       j_dcgettext                                 ; dcgettext
000000000000496d         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004974         mov        rdx, rax
0000000000004977         mov        rcx, rbx
000000000000497a         mov        esi, 0x1
000000000000497f         xor        eax, eax
0000000000004981         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4986:
0000000000004986         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1094
0000000000004988         call       j_exit                                      ; exit
                        ; endp

                     loc_498d:
000000000000498d         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... FILE...\\n", CODE XREF=usage+45
0000000000004994         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004996         call       j_dcgettext                                 ; dcgettext
000000000000499b         mov        rdx, rbx
000000000000499e         mov        rsi, rax
00000000000049a1         mov        edi, 0x1
00000000000049a6         xor        eax, eax
00000000000049a8         call       j___printf_chk                              ; __printf_chk
00000000000049ad         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000049b4         lea        rsi, qword [aDisplayFileOrF]                ; argument "msgid" for method j_dcgettext, "Display file or file system status.\\n"
00000000000049bb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000049c0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000049c2         call       j_dcgettext                                 ; dcgettext
00000000000049c7         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000049ca         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000049cd         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000049d2         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000049d9         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
00000000000049e0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000049e5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000049e7         call       j_dcgettext                                 ; dcgettext
00000000000049ec         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000049ef         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000049f2         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000049f7         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000049fe         lea        rsi, qword [aLDereferenceFo]                ; argument "msgid" for method j_dcgettext, "  -L, --dereference     follow links\\n  -f, --file-system     display file system status instead of file status\\n"
0000000000004a05         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a0a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a0c         call       j_dcgettext                                 ; dcgettext
0000000000004a11         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a14         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a17         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a1c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a23         lea        rsi, qword [aCFormatformatU]                ; argument "msgid" for method j_dcgettext, "  -c  --format=FORMAT   use the specified FORMAT instead of the default;\\n                          output a newline after each use of FORMAT\\n      --printf=FORMAT   like --format, but interpret backslash escapes,\\n                          and do not output…"
0000000000004a2a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a2f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a31         call       j_dcgettext                                 ; dcgettext
0000000000004a36         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a39         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a3c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a41         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a48         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000004a4f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a54         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a56         call       j_dcgettext                                 ; dcgettext
0000000000004a5b         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a5e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a61         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a66         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a6d         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000004a74         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a79         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004a7b         call       j_dcgettext                                 ; dcgettext
0000000000004a80         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004a83         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004a86         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004a8b         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a92         lea        rsi, qword [aNtheValidForma]                ; argument "msgid" for method j_dcgettext, "\\nThe valid format sequences for files (without --file-system):\\n\\n  %a   access rights in octal (note '#' and '0' printf flags)\\n  %A   access rights in human readable form\\n  %b   number of blocks allocated (see %B)\\n  %B   the size in bytes of each block repo…"
0000000000004a99         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004a9e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004aa0         call       j_dcgettext                                 ; dcgettext
0000000000004aa5         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004aa8         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004aab         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ab0         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ab7         lea        rsi, qword [aDDeviceNumberI]                ; argument "msgid" for method j_dcgettext, "  %d   device number in decimal\\n  %D   device number in hex\\n  %f   raw mode in hex\\n  %F   file type\\n  %g   group ID of owner\\n  %G   group name of owner\\n"
0000000000004abe         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ac3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ac5         call       j_dcgettext                                 ; dcgettext
0000000000004aca         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004acd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ad0         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ad5         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004adc         lea        rsi, qword [aHNumberOfHardL]                ; argument "msgid" for method j_dcgettext, "  %h   number of hard links\\n  %i   inode number\\n  %m   mount point\\n  %n   file name\\n  %N   quoted file name with dereference if symbolic link\\n  %o   optimal I/O transfer size hint\\n  %s   total size, in bytes\\n  %t   major device type in hex, for character/b…"
0000000000004ae3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ae8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004aea         call       j_dcgettext                                 ; dcgettext
0000000000004aef         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004af2         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004af5         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004afa         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004b01         lea        rsi, qword [aUUserIdOfOwner]                ; argument "msgid" for method j_dcgettext, "  %u   user ID of owner\\n  %U   user name of owner\\n  %w   time of file birth, human-readable; - if unknown\\n  %W   time of file birth, seconds since Epoch; 0 if unknown\\n  %x   time of last access, human-readable\\n  %X   time of last access, seconds since Epoc…"
0000000000004b08         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b0d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b0f         call       j_dcgettext                                 ; dcgettext
0000000000004b14         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b17         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b1a         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b1f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004b26         lea        rsi, qword [aValidFormatSeq]                ; argument "msgid" for method j_dcgettext, "Valid format sequences for file systems:\\n\\n  %a   free blocks available to non-superuser\\n  %b   total data blocks in file system\\n  %c   total file nodes in file system\\n  %d   free file nodes in file system\\n  %f   free blocks in file system\\n"
0000000000004b2d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b32         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b34         call       j_dcgettext                                 ; dcgettext
0000000000004b39         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b3c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b3f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b44         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004b4b         lea        rsi, qword [aValidFormatSeq+240]            ; argument "msgid" for method j_dcgettext, 0xeec8
0000000000004b52         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b57         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b59         call       j_dcgettext                                 ; dcgettext
0000000000004b5e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004b61         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004b64         lea        rbx, qword [aFailedToCanoni+26]             ; 0xde31
0000000000004b6b         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004b70         lea        rsi, qword [aNterseIsEquiva]                ; argument "msgid" for method j_dcgettext, "\\n--terse is equivalent to the following FORMAT:\\n    %s"
0000000000004b77         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004b7c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004b7e         call       j_dcgettext                                 ; dcgettext
0000000000004b83         lea        rdx, qword [fmt_terse_regular]              ; "%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o\\n"
0000000000004b8a         mov        rsi, rax
0000000000004b8d         mov        edi, 0x1
0000000000004b92         xor        eax, eax
0000000000004b94         call       j___printf_chk                              ; __printf_chk
0000000000004b99         lea        rsi, qword [aTerseFilesyste]                ; argument "msgid" for method j_dcgettext, "--terse --file-system is equivalent to the following FORMAT:\\n    %s"
0000000000004ba0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ba5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ba7         call       j_dcgettext                                 ; dcgettext
0000000000004bac         lea        rdx, qword [fmt_terse_fs]                   ; "%n %i %l %t %s %S %b %f %a %c %d\\n"
0000000000004bb3         mov        rsi, rax
0000000000004bb6         mov        edi, 0x1
0000000000004bbb         xor        eax, eax
0000000000004bbd         call       j___printf_chk                              ; __printf_chk
0000000000004bc2         lea        rsi, qword [aNnoteYourShell]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n"
0000000000004bc9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004bce         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004bd0         call       j_dcgettext                                 ; dcgettext
0000000000004bd5         lea        rdx, qword [aFailedToCanoni+26]             ; 0xde31
0000000000004bdc         mov        rsi, rax
0000000000004bdf         mov        edi, 0x1
0000000000004be4         xor        eax, eax
0000000000004be6         call       j___printf_chk                              ; __printf_chk
0000000000004beb         lea        rax, qword [aFailedToCanoni+31]             ; 0xde36
0000000000004bf2         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000004bf9         mov        qword [rsp+0xa8+var_48], 0x0
0000000000004c02         mov        qword [rsp+0xa8+var_40], 0x0
0000000000004c0b         mov        rdx, rsp
0000000000004c0e         mov        qword [rsp+0xa8+var_A8], rax
0000000000004c12         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000004c19         mov        qword [rsp+0xa8+var_78], rcx
0000000000004c1e         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000004c25         mov        qword [rsp+0xa8+var_A0], rax
0000000000004c2a         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000004c31         mov        qword [rsp+0xa8+var_68], rcx
0000000000004c36         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000004c3d         mov        qword [rsp+0xa8+var_98], rax
0000000000004c42         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000004c49         mov        qword [rsp+0xa8+var_58], rcx
0000000000004c4e         mov        qword [rsp+0xa8+var_90], rax
0000000000004c53         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000004c5a         mov        qword [rsp+0xa8+var_88], rax
0000000000004c5f         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000004c66         mov        qword [rsp+0xa8+var_80], rax
0000000000004c6b         mov        qword [rsp+0xa8+var_70], rax
0000000000004c70         mov        qword [rsp+0xa8+var_60], rax
0000000000004c75         mov        qword [rsp+0xa8+var_50], rax
0000000000004c7a         nop        word [rax+rax]

                     loc_4c80:
0000000000004c80         add        rdx, 0x10                                   ; CODE XREF=usage+877
0000000000004c84         mov        rdi, qword [rdx]
0000000000004c87         test       rdi, rdi
0000000000004c8a         je         loc_4c9f

0000000000004c8c         mov        ecx, 0x5
0000000000004c91         mov        rsi, rbx
0000000000004c94         rep  cmpsb byte [rsi], byte [rdi]
0000000000004c96         seta       al
0000000000004c99         sbb        al, 0x0
0000000000004c9b         test       al, al
0000000000004c9d         jne        loc_4c80

                     loc_4c9f:
0000000000004c9f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+858
0000000000004ca3         xor        edi, edi
0000000000004ca5         mov        edx, 0x5
0000000000004caa         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000004cb1         test       r12, r12
0000000000004cb4         je         loc_4d7b

0000000000004cba         call       j_dcgettext                                 ; dcgettext
0000000000004cbf         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004cc6         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xdeac
0000000000004ccd         mov        rsi, rax
0000000000004cd0         mov        edi, 0x1
0000000000004cd5         xor        eax, eax
0000000000004cd7         call       j___printf_chk                              ; __printf_chk
0000000000004cdc         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000004cde         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000004ce3         call       j_setlocale                                 ; setlocale
0000000000004ce8         test       rax, rax
0000000000004ceb         je         loc_4d09

0000000000004ced         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xdeba
0000000000004cf4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000004cf9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000004cfc         call       j_strncmp                                   ; strncmp
0000000000004d01         test       eax, eax
0000000000004d03         jne        loc_4e10

                     loc_4d09:
0000000000004d09         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+955, usage+1285
0000000000004d10         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d12         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d17         call       j_dcgettext                                 ; dcgettext
0000000000004d1c         lea        rcx, qword [aFailedToCanoni+26]             ; 0xde31
0000000000004d23         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004d2a         mov        rsi, rax
0000000000004d2d         mov        edi, 0x1
0000000000004d32         xor        eax, eax
0000000000004d34         call       j___printf_chk                              ; __printf_chk
0000000000004d39         cmp        r12, rbx
0000000000004d3c         lea        rcx, qword [aMulticallInvoc+10]             ; 0xde52
0000000000004d43         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xfb81
0000000000004d4a         cmove      rbx, rcx

                     loc_4d4e:
0000000000004d4e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1236
0000000000004d55         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004d57         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004d5c         call       j_dcgettext                                 ; dcgettext
0000000000004d61         mov        rcx, rbx
0000000000004d64         mov        rsi, rax
0000000000004d67         mov        rdx, r12
0000000000004d6a         mov        edi, 0x1
0000000000004d6f         xor        eax, eax
0000000000004d71         call       j___printf_chk                              ; __printf_chk
0000000000004d76         jmp        loc_4986

                     loc_4d7b:
0000000000004d7b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+900
0000000000004d80         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004d87         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xdeac
0000000000004d8e         mov        rsi, rax
0000000000004d91         mov        edi, 0x1
0000000000004d96         xor        eax, eax
0000000000004d98         call       j___printf_chk                              ; __printf_chk
0000000000004d9d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000004d9f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000004da4         call       j_setlocale                                 ; setlocale
0000000000004da9         test       rax, rax
0000000000004dac         je         loc_4dc6

0000000000004dae         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xdeba
0000000000004db5         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000004dba         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000004dbd         call       j_strncmp                                   ; strncmp
0000000000004dc2         test       eax, eax
0000000000004dc4         jne        loc_4e09

                     loc_4dc6:
0000000000004dc6         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1148
0000000000004dcd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004dd2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004dd4         lea        r12, qword [aFailedToCanoni+26]             ; 0xde31
0000000000004ddb         lea        rbx, qword [aMulticallInvoc+10]             ; 0xde52
0000000000004de2         call       j_dcgettext                                 ; dcgettext
0000000000004de7         lea        rcx, qword [aFailedToCanoni+26]             ; 0xde31
0000000000004dee         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000004df5         mov        rsi, rax
0000000000004df8         mov        edi, 0x1
0000000000004dfd         xor        eax, eax
0000000000004dff         call       j___printf_chk                              ; __printf_chk
0000000000004e04         jmp        loc_4d4e

                     loc_4e09:
0000000000004e09         lea        r12, qword [aFailedToCanoni+26]             ; 0xde31, CODE XREF=usage+1172

                     loc_4e10:
0000000000004e10         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+979
0000000000004e17         lea        rsi, qword [aHttpswwwgnuorg+40]             ; argument "msgid" for method j_dcgettext, 0xf130
0000000000004e1e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e20         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e25         call       j_dcgettext                                 ; dcgettext
0000000000004e2a         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e2d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e30         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e35         jmp        loc_4d09
0000000000004e3a         align      64                                          ; End of unwind block (FDE at 0x10970)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_50: -80
        ;    var_60: -96
        ;    var_70: -112
        ;    var_80: -128
        ;    var_90: -144
        ;    var_A0: -160
        ;    var_B0: -176
        ;    var_C0: -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_E0: -224
        ;    var_F0: -240
        ;    var_100: -256
        ;    var_110: -272
        ;    var_120: -288
        ;    var_130: -304
        ;    var_140: -320
        ;    var_150: -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352
        ;    var_161: int8_t, -353
        ;    var_170: int8_t, -368


                     find_mount_point:
0000000000004e40         push       rbp                                         ; Begin of unwind block (FDE at 0x109ec), CODE XREF=print_stat+1318
0000000000004e41         mov        rbp, rsp
0000000000004e44         push       r15
0000000000004e46         push       r14
0000000000004e48         push       r13
0000000000004e4a         lea        r13, qword [rbp+var_170]
0000000000004e51         push       r12
0000000000004e53         push       rbx
0000000000004e54         mov        r12, rdi
0000000000004e57         mov        rbx, rsi
0000000000004e5a         mov        rdi, r13
0000000000004e5d         sub        rsp, 0x148
0000000000004e64         mov        rax, qword [fs:0x28]
0000000000004e6d         mov        qword [rbp+var_38], rax
0000000000004e71         xor        eax, eax
0000000000004e73         call       save_cwd                                    ; save_cwd
0000000000004e78         mov        r15d, eax
0000000000004e7b         call       j___errno_location                          ; __errno_location
0000000000004e80         test       r15d, r15d
0000000000004e83         mov        r14, rax
0000000000004e86         jne        loc_51a5

0000000000004e8c         mov        eax, dword [rbx+0x18]
0000000000004e8f         and        eax, aTerseFilesyste                        ; "--terse --file-system is equivalent to the following FORMAT:\\n    %s"
0000000000004e94         cmp        eax, 0x4000
0000000000004e99         je         loc_5080

0000000000004e9f         mov        rdi, r12
0000000000004ea2         call       dir_name                                    ; dir_name
0000000000004ea7         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000004eaa         mov        rbx, rax
0000000000004ead         call       j_strlen                                    ; strlen
0000000000004eb2         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memcpy
0000000000004eb6         add        rax, 0x1f
0000000000004eba         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000004ebd         and        rax, 0xfffffffffffffff0
0000000000004ec1         sub        rsp, rax
0000000000004ec4         lea        rdi, qword [rsp+0x170+var_161]
0000000000004ec9         and        rdi, 0xfffffffffffffff0                     ; argument "__dest" for method j_memcpy
0000000000004ecd         call       j_memcpy                                    ; memcpy
0000000000004ed2         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000004ed5         mov        r12, rax
0000000000004ed8         call       j_free                                      ; free
0000000000004edd         mov        rdi, r12                                    ; argument "__path" for method j_chdir
0000000000004ee0         call       j_chdir                                     ; chdir
0000000000004ee5         test       eax, eax
0000000000004ee7         js         loc_50fe

0000000000004eed         lea        rdx, qword [rbp+var_160]                    ; argument "__stat_buf" for method j___xstat
0000000000004ef4         lea        rsi, qword [aCannotChangeTo+31]             ; argument "__filename" for method j___xstat, 0xf2b4
0000000000004efb         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000004f00         call       j___xstat                                   ; __xstat
0000000000004f05         test       eax, eax
0000000000004f07         js         loc_5140

                     loc_4f0d:
0000000000004f0d         lea        r12, qword [rbp+var_D0]                     ; CODE XREF=find_mount_point+696
0000000000004f14         lea        rbx, qword [aCannotChangeTo+30]             ; 0xf2b3
0000000000004f1b         jmp        loc_4fd3

                     loc_4f20:
0000000000004f20         mov        rax, qword [rbp+var_160]                    ; CODE XREF=find_mount_point+421
0000000000004f27         cmp        qword [rbp+var_D0], rax
0000000000004f2e         jne        loc_5070

0000000000004f34         mov        rax, qword [rbp+var_158]
0000000000004f3b         cmp        qword [rbp+var_C8], rax
0000000000004f42         je         loc_5070

0000000000004f48         mov        rdi, rbx                                    ; argument "__path" for method j_chdir
0000000000004f4b         call       j_chdir                                     ; chdir
0000000000004f50         test       eax, eax
0000000000004f52         js         loc_5180

0000000000004f58         movdqa     xmm0, xmmword [rbp+var_D0]
0000000000004f60         movaps     xmmword [rbp+var_160], xmm0
0000000000004f67         movdqa     xmm0, xmmword [rbp+var_C0]
0000000000004f6f         movaps     xmmword [rbp+var_150], xmm0
0000000000004f76         movdqa     xmm0, xmmword [rbp+var_B0]
0000000000004f7e         movaps     xmmword [rbp+var_140], xmm0
0000000000004f85         movdqa     xmm0, xmmword [rbp+var_A0]
0000000000004f8d         movaps     xmmword [rbp+var_130], xmm0
0000000000004f94         movdqa     xmm0, xmmword [rbp+var_90]
0000000000004f9c         movaps     xmmword [rbp+var_120], xmm0
0000000000004fa3         movdqa     xmm0, xmmword [rbp+var_80]
0000000000004fa8         movaps     xmmword [rbp+var_110], xmm0
0000000000004faf         movdqa     xmm0, xmmword [rbp+var_70]
0000000000004fb4         movaps     xmmword [rbp+var_100], xmm0
0000000000004fbb         movdqa     xmm0, xmmword [rbp+var_60]
0000000000004fc0         movaps     xmmword [rbp+var_F0], xmm0
0000000000004fc7         movdqa     xmm0, xmmword [rbp+var_50]
0000000000004fcc         movaps     xmmword [rbp+var_E0], xmm0

                     loc_4fd3:
0000000000004fd3         mov        rdx, r12                                    ; argument "__stat_buf" for method j___xstat, CODE XREF=find_mount_point+219
0000000000004fd6         mov        rsi, rbx                                    ; argument "__filename" for method j___xstat
0000000000004fd9         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000004fde         call       j___xstat                                   ; __xstat
0000000000004fe3         test       eax, eax
0000000000004fe5         jns        loc_4f20

0000000000004feb         lea        rsi, qword [aCannotChangeTo+30]             ; 0xf2b3
0000000000004ff2         mov        edi, 0x4
0000000000004ff7         call       quotearg_style                              ; quotearg_style
0000000000004ffc         lea        rsi, qword [aCannotStatS]                   ; "cannot stat %s"
0000000000005003         mov        rbx, rax
0000000000005006         mov        edx, 0x5

                     loc_500b:
000000000000500b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=find_mount_point+864
000000000000500d         call       j_dcgettext                                 ; dcgettext
0000000000005012         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000005015         mov        rcx, rbx
0000000000005018         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000501b         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000501d         xor        eax, eax
000000000000501f         xor        ebx, ebx
0000000000005021         call       j_error                                     ; error

                     loc_5026:
0000000000005026         mov        rdi, r13                                    ; CODE XREF=find_mount_point+568, find_mount_point+823
0000000000005029         mov        r12d, dword [r14]
000000000000502c         call       restore_cwd                                 ; restore_cwd
0000000000005031         test       eax, eax
0000000000005033         jne        loc_51ce

0000000000005039         mov        rdi, r13
000000000000503c         call       free_cwd                                    ; free_cwd
0000000000005041         mov        dword [r14], r12d

                     loc_5044:
0000000000005044         mov        rcx, qword [rbp+var_38]                     ; CODE XREF=find_mount_point+757, find_mount_point+905
0000000000005048         xor        rcx, qword [fs:0x28]
0000000000005051         mov        rax, rbx
0000000000005054         jne        loc_51f3

000000000000505a         lea        rsp, qword [rbp+var_28]
000000000000505e         pop        rbx
000000000000505f         pop        r12
0000000000005061         pop        r13
0000000000005063         pop        r14
0000000000005065         pop        r15
0000000000005067         pop        rbp
0000000000005068         ret
                        ; endp
0000000000005069         align      16

                     loc_5070:
0000000000005070         call       xgetcwd                                     ; xgetcwd, CODE XREF=find_mount_point+238, find_mount_point+258
0000000000005075         mov        rbx, rax
0000000000005078         jmp        loc_5026
000000000000507a         align      128

                     loc_5080:
0000000000005080         movdqu     xmm0, xmmword [rbx]                         ; CODE XREF=find_mount_point+89
0000000000005084         mov        rdi, r12                                    ; argument "__path" for method j_chdir
0000000000005087         movaps     xmmword [rbp+var_160], xmm0
000000000000508e         movdqu     xmm0, xmmword [rbx+0x10]
0000000000005093         movaps     xmmword [rbp+var_150], xmm0
000000000000509a         movdqu     xmm0, xmmword [rbx+0x20]
000000000000509f         movaps     xmmword [rbp+var_140], xmm0
00000000000050a6         movdqu     xmm0, xmmword [rbx+0x30]
00000000000050ab         movaps     xmmword [rbp+var_130], xmm0
00000000000050b2         movdqu     xmm0, xmmword [rbx+0x40]
00000000000050b7         movaps     xmmword [rbp+var_120], xmm0
00000000000050be         movdqu     xmm0, xmmword [rbx+0x50]
00000000000050c3         movaps     xmmword [rbp+var_110], xmm0
00000000000050ca         movdqu     xmm0, xmmword [rbx+0x60]
00000000000050cf         movaps     xmmword [rbp+var_100], xmm0
00000000000050d6         movdqu     xmm0, xmmword [rbx+0x70]
00000000000050db         movaps     xmmword [rbp+var_F0], xmm0
00000000000050e2         movdqu     xmm0, xmmword [rbx+0x80]
00000000000050ea         movaps     xmmword [rbp+var_E0], xmm0
00000000000050f1         call       j_chdir                                     ; chdir
00000000000050f6         test       eax, eax
00000000000050f8         jns        loc_4f0d

                     loc_50fe:
00000000000050fe         mov        rsi, r12                                    ; CODE XREF=find_mount_point+167
0000000000005101         mov        edi, 0x4
0000000000005106         call       quotearg_style                              ; quotearg_style
000000000000510b         lea        rsi, qword [aCannotChangeTo]                ; argument "msgid" for method j_dcgettext, "cannot change to directory %s"
0000000000005112         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005117         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005119         mov        rbx, rax
000000000000511c         call       j_dcgettext                                 ; dcgettext
0000000000005121         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000005124         mov        rcx, rbx
0000000000005127         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000512a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000512c         xor        eax, eax
000000000000512e         xor        ebx, ebx
0000000000005130         call       j_error                                     ; error
0000000000005135         jmp        loc_5044
000000000000513a         align      64

                     loc_5140:
0000000000005140         mov        rsi, r12                                    ; CODE XREF=find_mount_point+199
0000000000005143         mov        edi, 0x4
0000000000005148         call       quotearg_style                              ; quotearg_style
000000000000514d         lea        rsi, qword [aCannotStatCurr]                ; argument "msgid" for method j_dcgettext, "cannot stat current directory (now %s)"
0000000000005154         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005159         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000515b         mov        rbx, rax
000000000000515e         call       j_dcgettext                                 ; dcgettext
0000000000005163         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000005166         mov        rcx, rbx
0000000000005169         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000516c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000516e         xor        eax, eax
0000000000005170         xor        ebx, ebx
0000000000005172         call       j_error                                     ; error
0000000000005177         jmp        loc_5026
000000000000517c         align      128

                     loc_5180:
0000000000005180         lea        rsi, qword [aCannotChangeTo+30]             ; 0xf2b3, CODE XREF=find_mount_point+274
0000000000005187         mov        edi, 0x4
000000000000518c         call       quotearg_style                              ; quotearg_style
0000000000005191         mov        edx, 0x5
0000000000005196         mov        rbx, rax
0000000000005199         lea        rsi, qword [aCannotChangeTo]                ; "cannot change to directory %s"
00000000000051a0         jmp        loc_500b

                     loc_51a5:
00000000000051a5         lea        rsi, qword [aCannotGetCurre]                ; argument "msgid" for method j_dcgettext, "cannot get current directory", CODE XREF=find_mount_point+70
00000000000051ac         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051b1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051b3         xor        ebx, ebx
00000000000051b5         call       j_dcgettext                                 ; dcgettext
00000000000051ba         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
00000000000051bd         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000051c0         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000051c2         xor        eax, eax
00000000000051c4         call       j_error                                     ; error
00000000000051c9         jmp        loc_5044

                     loc_51ce:
00000000000051ce         lea        rsi, qword [aFailedToReturn]                ; argument "msgid" for method j_dcgettext, "failed to return to initial working directory", CODE XREF=find_mount_point+499
00000000000051d5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051da         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051dc         call       j_dcgettext                                 ; dcgettext
00000000000051e1         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
00000000000051e4         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000051e7         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000051ec         xor        eax, eax
00000000000051ee         call       j_error                                     ; error

                     loc_51f3:
00000000000051f3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=find_mount_point+532
                        ; endp
00000000000051f8         align      512                                         ; End of unwind block (FDE at 0x109ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     areadlink_with_size:
0000000000005200         push       r15                                         ; Begin of unwind block (FDE at 0x10a1c), CODE XREF=print_stat+915
0000000000005202         push       r14
0000000000005204         mov        eax, 0x401
0000000000005209         push       r13
000000000000520b         push       r12
000000000000520d         mov        r13, rdi
0000000000005210         push       rbp
0000000000005211         push       rbx
0000000000005212         lea        rbx, qword [rsi+1]
0000000000005216         movabs     r14, 0x3fffffffffffffff
0000000000005220         movabs     r15, 0x7ffffffffffffffe
000000000000522a         sub        rsp, 0x8
000000000000522e         cmp        rsi, 0x401
0000000000005235         cmovae     rbx, rax
0000000000005239         nop        dword [rax]

                     loc_5240:
0000000000005240         mov        rdi, rbx                                    ; argument "__size" for method j_malloc, CODE XREF=areadlink_with_size+175
0000000000005243         call       j_malloc                                    ; malloc
0000000000005248         test       rax, rax
000000000000524b         mov        rbp, rax
000000000000524e         je         loc_528b

                     loc_5250:
0000000000005250         mov        rdx, rbx                                    ; argument "__len" for method j_readlink, CODE XREF=areadlink_with_size+137
0000000000005253         mov        rsi, rax                                    ; argument "__buf" for method j_readlink
0000000000005256         mov        rdi, r13                                    ; argument "__path" for method j_readlink
0000000000005259         call       j_readlink                                  ; readlink
000000000000525e         test       rax, rax
0000000000005261         mov        r12, rax
0000000000005264         js         loc_52b8

                     loc_5266:
0000000000005266         cmp        rbx, r12                                    ; CODE XREF=areadlink_with_size+192
0000000000005269         ja         loc_52d0

000000000000526b         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000526e         call       j_free                                      ; free
0000000000005273         cmp        rbx, r14
0000000000005276         ja         loc_52a0

0000000000005278         add        rbx, rbx
000000000000527b         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000527e         call       j_malloc                                    ; malloc
0000000000005283         test       rax, rax
0000000000005286         mov        rbp, rax
0000000000005289         jne        loc_5250

                     loc_528b:
000000000000528b         add        rsp, 0x8                                    ; CODE XREF=areadlink_with_size+78, areadlink_with_size+204, areadlink_with_size+214, areadlink_with_size+237
000000000000528f         mov        rax, rbp
0000000000005292         pop        rbx
0000000000005293         pop        rbp
0000000000005294         pop        r12
0000000000005296         pop        r13
0000000000005298         pop        r14
000000000000529a         pop        r15
000000000000529c         ret
                        ; endp
000000000000529d         align      32

                     loc_52a0:
00000000000052a0         cmp        rbx, r15                                    ; CODE XREF=areadlink_with_size+118
00000000000052a3         ja         loc_52e0

00000000000052a5         movabs     rbx, 0x7fffffffffffffff
00000000000052af         jmp        loc_5240
00000000000052b1         align      8

                     loc_52b8:
00000000000052b8         call       j___errno_location                          ; __errno_location, CODE XREF=areadlink_with_size+100
00000000000052bd         cmp        dword [rax], 0x22
00000000000052c0         je         loc_5266

00000000000052c2         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
00000000000052c5         xor        ebp, ebp
00000000000052c7         call       j_free                                      ; free
00000000000052cc         jmp        loc_528b
00000000000052ce         align      16

                     loc_52d0:
00000000000052d0         mov        byte [rbp+r12], 0x0                         ; CODE XREF=areadlink_with_size+105
00000000000052d6         jmp        loc_528b
00000000000052d8         align      32

                     loc_52e0:
00000000000052e0         call       j___errno_location                          ; __errno_location, CODE XREF=areadlink_with_size+163
00000000000052e5         xor        ebp, ebp
00000000000052e7         mov        dword [rax], 0xc
00000000000052ed         jmp        loc_528b
00000000000052ef         align      16                                          ; End of unwind block (FDE at 0x10a1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
00000000000052f0         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0x10a6c), argument #1 for method usage
00000000000052f5         jmp        usage                                       ; usage
                        ; endp
00000000000052fa         align      256                                         ; End of unwind block (FDE at 0x10a6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000005300         push       r15                                         ; Begin of unwind block (FDE at 0x10a80), CODE XREF=main+566, __xargmatch_internal+44
0000000000005302         push       r14
0000000000005304         mov        r15, rsi
0000000000005307         push       r13
0000000000005309         push       r12
000000000000530b         mov        r13, rcx
000000000000530e         push       rbp
000000000000530f         push       rbx
0000000000005310         mov        rbp, rdx
0000000000005313         sub        rsp, 0x28
0000000000005317         mov        qword [rsp+0x58+var_50], rdi
000000000000531c         mov        qword [rsp+0x58+var_40], rdx
0000000000005321         call       j_strlen                                    ; strlen
0000000000005326         mov        r14, qword [r15]
0000000000005329         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
0000000000005331         test       r14, r14
0000000000005334         je         loc_53ed

000000000000533a         mov        r12, rax
000000000000533d         mov        byte [rsp+0x58+var_41], 0x0
0000000000005342         xor        ebx, ebx
0000000000005344         jmp        loc_5397
0000000000005346         align      16

                     loc_5350:
0000000000005350         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
0000000000005355         test       rax, rax
0000000000005358         je         loc_5400

000000000000535e         mov        rdi, qword [rsp+0x58+var_58]
0000000000005362         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
0000000000005365         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005368         imul       rdi, r13
000000000000536c         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000536f         call       j_memcmp                                    ; memcmp
0000000000005374         test       eax, eax
0000000000005376         movzx      eax, byte [rsp+0x58+var_41]
000000000000537b         mov        ecx, 0x1
0000000000005380         cmovne     eax, ecx
0000000000005383         mov        byte [rsp+0x58+var_41], al

                     loc_5387:
0000000000005387         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000538b         add        rbp, r13
000000000000538e         mov        r14, qword [r15+rbx*8]
0000000000005392         test       r14, r14
0000000000005395         je         loc_53d8

                     loc_5397:
0000000000005397         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000000539c         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000000539f         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
00000000000053a2         call       j_strncmp                                   ; strncmp
00000000000053a7         test       eax, eax
00000000000053a9         jne        loc_5387

00000000000053ab         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000053ae         call       j_strlen                                    ; strlen
00000000000053b3         cmp        rax, r12
00000000000053b6         je         loc_5410

00000000000053b8         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
00000000000053bd         jne        loc_5350

00000000000053bf         mov        qword [rsp+0x58+var_58], rbx
00000000000053c3         add        rbx, 0x1
00000000000053c7         add        rbp, r13
00000000000053ca         mov        r14, qword [r15+rbx*8]
00000000000053ce         test       r14, r14
00000000000053d1         jne        loc_5397

00000000000053d3         nop        dword [rax+rax]

                     loc_53d8:
00000000000053d8         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
00000000000053dd         mov        rax, 0xfffffffffffffffe
00000000000053e4         cmove      rax, qword [rsp+0x58+var_58]
00000000000053e9         mov        qword [rsp+0x58+var_58], rax

                     loc_53ed:
00000000000053ed         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
00000000000053f1         add        rsp, 0x28
00000000000053f5         pop        rbx
00000000000053f6         pop        rbp
00000000000053f7         pop        r12
00000000000053f9         pop        r13
00000000000053fb         pop        r14
00000000000053fd         pop        r15
00000000000053ff         ret
                        ; endp

                     loc_5400:
0000000000005400         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000005405         jmp        loc_5387
0000000000005407         align      16

                     loc_5410:
0000000000005410         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
0000000000005414         jmp        loc_53ed
0000000000005416         align      32                                          ; End of unwind block (FDE at 0x10a80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
0000000000005420         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0x10acc), CODE XREF=__xargmatch_internal+78
0000000000005424         push       r12
0000000000005426         mov        edx, 0x5
000000000000542b         push       rbp
000000000000542c         mov        r12, rsi
000000000000542f         push       rbx
0000000000005430         mov        rbp, rdi
0000000000005433         je         loc_5480

0000000000005435         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
000000000000543c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000543e         call       j_dcgettext                                 ; dcgettext
0000000000005443         mov        rbx, rax

                     loc_5446:
0000000000005446         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
0000000000005449         mov        edi, 0x1
000000000000544e         call       quote_n                                     ; quote_n
0000000000005453         mov        rdx, r12
0000000000005456         mov        rbp, rax
0000000000005459         mov        esi, 0x8
000000000000545e         xor        edi, edi
0000000000005460         call       quotearg_n_style                            ; quotearg_n_style
0000000000005465         mov        r8, rbp
0000000000005468         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000546b         mov        rcx, rax
000000000000546e         pop        rbx
000000000000546f         pop        rbp
0000000000005470         pop        r12
0000000000005472         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005474         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005476         xor        eax, eax
0000000000005478         jmp        j_error                                     ; error
                        ; endp
000000000000547d         align      128

                     loc_5480:
0000000000005480         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
0000000000005487         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005489         call       j_dcgettext                                 ; dcgettext
000000000000548e         mov        rbx, rax
0000000000005491         jmp        loc_5446
0000000000005493         align      32                                          ; End of unwind block (FDE at 0x10acc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
00000000000054a0         push       r15                                         ; Begin of unwind block (FDE at 0x10af8), CODE XREF=__xargmatch_internal+92
00000000000054a2         push       r14
00000000000054a4         mov        r14, rdi
00000000000054a7         push       r13
00000000000054a9         push       r12
00000000000054ab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000054ad         push       rbp
00000000000054ae         push       rbx
00000000000054af         mov        rbp, rsi
00000000000054b2         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
00000000000054b9         mov        r12, rdx
00000000000054bc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000054c1         sub        rsp, 0x8
00000000000054c5         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000054cc         call       j_dcgettext                                 ; dcgettext
00000000000054d1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000054d4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000054d7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000054dc         mov        r15, qword [r14]
00000000000054df         test       r15, r15
00000000000054e2         je         loc_5578

00000000000054e8         xor        r13d, r13d
00000000000054eb         xor        ebx, ebx
00000000000054ed         jmp        loc_5528
00000000000054ef         align      16

                     loc_54f0:
00000000000054f0         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
00000000000054f3         add        rbx, 0x1
00000000000054f7         mov        r13, rbp
00000000000054fa         call       quote                                       ; quote
00000000000054ff         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005506         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000000550d         mov        rcx, rax
0000000000005510         mov        esi, 0x1
0000000000005515         xor        eax, eax
0000000000005517         add        rbp, r12
000000000000551a         call       j___fprintf_chk                             ; __fprintf_chk
000000000000551f         mov        r15, qword [r14+rbx*8]
0000000000005523         test       r15, r15
0000000000005526         je         loc_5578

                     loc_5528:
0000000000005528         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
000000000000552b         je         loc_54f0

000000000000552d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
0000000000005530         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005533         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000005536         call       j_memcmp                                    ; memcmp
000000000000553b         test       eax, eax
000000000000553d         jne        loc_54f0

000000000000553f         mov        rdi, r15
0000000000005542         add        rbx, 0x1
0000000000005546         add        rbp, r12
0000000000005549         call       quote                                       ; quote
000000000000554e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000005555         lea        rdx, qword [aNS+8]                          ; 0xf368
000000000000555c         mov        rcx, rax
000000000000555f         mov        esi, 0x1
0000000000005564         xor        eax, eax
0000000000005566         call       j___fprintf_chk                             ; __fprintf_chk
000000000000556b         mov        r15, qword [r14+rbx*8]
000000000000556f         test       r15, r15
0000000000005572         jne        loc_5528

0000000000005574         nop        dword [rax]

                     loc_5578:
0000000000005578         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
000000000000557f         mov        rax, qword [rdi+0x28]
0000000000005583         cmp        rax, qword [rdi+0x30]
0000000000005587         jae        loc_55a8

0000000000005589         lea        rdx, qword [rax+1]
000000000000558d         mov        qword [rdi+0x28], rdx
0000000000005591         mov        byte [rax], 0xa
0000000000005594         add        rsp, 0x8
0000000000005598         pop        rbx
0000000000005599         pop        rbp
000000000000559a         pop        r12
000000000000559c         pop        r13
000000000000559e         pop        r14
00000000000055a0         pop        r15
00000000000055a2         ret
                        ; endp
00000000000055a3         align      8

                     loc_55a8:
00000000000055a8         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
00000000000055ac         mov        esi, 0xa                                    ; argument #2 for method j___overflow
00000000000055b1         pop        rbx
00000000000055b2         pop        rbp
00000000000055b3         pop        r12
00000000000055b5         pop        r13
00000000000055b7         pop        r14
00000000000055b9         pop        r15
00000000000055bb         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
00000000000055c0         push       r15                                         ; End of unwind block (FDE at 0x10af8), Begin of unwind block (FDE at 0x10b58)
00000000000055c2         push       r14
00000000000055c4         mov        r14, rdi
00000000000055c7         push       r13
00000000000055c9         push       r12
00000000000055cb         mov        r12, rsi
00000000000055ce         push       rbp
00000000000055cf         push       rbx
00000000000055d0         mov        rbp, rcx
00000000000055d3         mov        rbx, rdx
00000000000055d6         mov        rcx, r8
00000000000055d9         mov        rdx, rbp
00000000000055dc         sub        rsp, 0x8
00000000000055e0         mov        rsi, rbx
00000000000055e3         mov        rdi, r12
00000000000055e6         mov        r15, r8
00000000000055e9         mov        r13, r9
00000000000055ec         call       argmatch                                    ; argmatch
00000000000055f1         test       rax, rax
00000000000055f4         js         loc_5605

                     loc_55f6:
00000000000055f6         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
00000000000055fa         pop        rbx
00000000000055fb         pop        rbp
00000000000055fc         pop        r12
00000000000055fe         pop        r13
0000000000005600         pop        r14
0000000000005602         pop        r15
0000000000005604         ret
                        ; endp

                     loc_5605:
0000000000005605         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000005608         mov        rsi, r12
000000000000560b         mov        rdi, r14
000000000000560e         call       argmatch_invalid                            ; argmatch_invalid
0000000000005613         mov        rdx, r15
0000000000005616         mov        rsi, rbp
0000000000005619         mov        rdi, rbx
000000000000561c         call       argmatch_valid                              ; argmatch_valid
0000000000005621         call       r13
0000000000005624         mov        rax, 0xffffffffffffffff
000000000000562b         jmp        loc_55f6
000000000000562d         align      16                                          ; End of unwind block (FDE at 0x10b58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
0000000000005630         push       r14                                         ; Begin of unwind block (FDE at 0x10ba4)
0000000000005632         push       r13
0000000000005634         push       r12
0000000000005636         push       rbp
0000000000005637         push       rbx
0000000000005638         mov        r14, qword [rsi]
000000000000563b         test       r14, r14
000000000000563e         je         loc_5671

0000000000005640         mov        r12, rcx
0000000000005643         mov        r13, rdi
0000000000005646         mov        rbp, rdx
0000000000005649         lea        rbx, qword [rsi+8]
000000000000564d         jmp        loc_565f
000000000000564f         align      16

                     loc_5650:
0000000000005650         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
0000000000005653         add        rbp, r12
0000000000005656         add        rbx, 0x8
000000000000565a         test       r14, r14
000000000000565d         je         loc_5671

                     loc_565f:
000000000000565f         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
0000000000005662         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000005665         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000005668         call       j_memcmp                                    ; memcmp
000000000000566d         test       eax, eax
000000000000566f         jne        loc_5650

                     loc_5671:
0000000000005671         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000005672         mov        rax, r14
0000000000005675         pop        rbp
0000000000005676         pop        r12
0000000000005678         pop        r13
000000000000567a         pop        r14
000000000000567c         ret
                        ; endp
000000000000567d         align      128                                         ; End of unwind block (FDE at 0x10ba4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005680         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x10be4), file_name
0000000000005687         ret
                        ; endp
0000000000005688         align      16                                          ; End of unwind block (FDE at 0x10be4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005690         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x10bf8), ignore_EPIPE
0000000000005697         ret
                        ; endp
0000000000005698         align      32                                          ; End of unwind block (FDE at 0x10bf8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
00000000000056a0         push       rbp                                         ; Begin of unwind block (FDE at 0x10c0c), DATA XREF=main+147
00000000000056a1         push       rbx
00000000000056a2         sub        rsp, 0x8
00000000000056a6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000056ad         call       close_stream                                ; close_stream
00000000000056b2         test       eax, eax
00000000000056b4         je         loc_56cc

00000000000056b6         call       j___errno_location                          ; __errno_location
00000000000056bb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
00000000000056c2         mov        rbx, rax
00000000000056c5         je         loc_56e3

00000000000056c7         cmp        dword [rax], 0x20
00000000000056ca         jne        loc_56e3

                     loc_56cc:
00000000000056cc         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
00000000000056d3         call       close_stream                                ; close_stream
00000000000056d8         test       eax, eax
00000000000056da         jne        loc_5722

00000000000056dc         add        rsp, 0x8
00000000000056e0         pop        rbx
00000000000056e1         pop        rbp
00000000000056e2         ret
                        ; endp

                     loc_56e3:
00000000000056e3         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
00000000000056ea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056ec         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056f1         call       j_dcgettext                                 ; dcgettext
00000000000056f6         mov        rdi, qword [file_name]                      ; file_name
00000000000056fd         mov        rbp, rax
0000000000005700         test       rdi, rdi
0000000000005703         je         loc_572d

0000000000005705         call       quotearg_colon                              ; quotearg_colon
000000000000570a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000570c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005713         mov        rcx, rax
0000000000005716         mov        r8, rbp
0000000000005719         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000571b         xor        eax, eax
000000000000571d         call       j_error                                     ; error

                     loc_5722:
0000000000005722         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000005728         call       j__exit                                     ; _exit
                        ; endp

                     loc_572d:
000000000000572d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
000000000000572f         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xf36a
0000000000005736         mov        rcx, rax
0000000000005739         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000573b         xor        eax, eax
000000000000573d         call       j_error                                     ; error
0000000000005742         jmp        loc_5722
0000000000005744         align      16                                          ; End of unwind block (FDE at 0x10c0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dir_name:
0000000000005750         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x10c3c), CODE XREF=find_mount_point+98
0000000000005754         call       mdir_name                                   ; mdir_name
0000000000005759         test       rax, rax
000000000000575c         je         loc_5763

000000000000575e         add        rsp, 0x8
0000000000005762         ret
                        ; endp

                     loc_5763:
0000000000005763         call       xalloc_die                                  ; xalloc_die, CODE XREF=dir_name+12
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5768:
0000000000005768         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x10c3c)
                     dir_len:
0000000000005770         push       rbp                                         ; Begin of unwind block (FDE at 0x10c5c), CODE XREF=mdir_name+9
0000000000005771         push       rbx
0000000000005772         xor        ebp, ebp
0000000000005774         mov        rbx, rdi
0000000000005777         sub        rsp, 0x8
000000000000577b         cmp        byte [rdi], 0x2f                            ; argument #1 for method last_component
000000000000577e         sete       bpl
0000000000005782         call       last_component                              ; last_component
0000000000005787         mov        rcx, rax
000000000000578a         sub        rcx, rbx
000000000000578d         cmp        rcx, rbp
0000000000005790         jbe        loc_57c0

0000000000005792         cmp        byte [rax-1], 0x2f
0000000000005796         lea        rdx, qword [rcx-1]
000000000000579a         je         loc_57ae

000000000000579c         jmp        loc_57c0
000000000000579e         align      32

                     loc_57a0:
00000000000057a0         cmp        byte [rbx+rdx-1], 0x2f                      ; CODE XREF=dir_len+65
00000000000057a5         lea        rax, qword [rdx-1]
00000000000057a9         jne        loc_57b3

00000000000057ab         mov        rdx, rax

                     loc_57ae:
00000000000057ae         cmp        rbp, rdx                                    ; CODE XREF=dir_len+42
00000000000057b1         jne        loc_57a0

                     loc_57b3:
00000000000057b3         add        rsp, 0x8                                    ; CODE XREF=dir_len+57
00000000000057b7         mov        rax, rdx
00000000000057ba         pop        rbx
00000000000057bb         pop        rbp
00000000000057bc         ret
                        ; endp
00000000000057bd         align      64

                     loc_57c0:
00000000000057c0         add        rsp, 0x8                                    ; CODE XREF=dir_len+32, dir_len+44
00000000000057c4         mov        rdx, rcx
00000000000057c7         mov        rax, rdx
00000000000057ca         pop        rbx
00000000000057cb         pop        rbp
00000000000057cc         ret
                        ; endp
00000000000057cd         align      16                                          ; End of unwind block (FDE at 0x10c5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mdir_name:
00000000000057d0         push       rbp                                         ; Begin of unwind block (FDE at 0x10c90), CODE XREF=dir_name+4
00000000000057d1         push       rbx
00000000000057d2         mov        rbp, rdi
00000000000057d5         sub        rsp, 0x8
00000000000057d9         call       dir_len                                     ; dir_len
00000000000057de         test       rax, rax
00000000000057e1         mov        rbx, rax
00000000000057e4         sete       al
00000000000057e7         movzx      eax, al
00000000000057ea         lea        rdi, qword [rbx+rax+1]                      ; argument "__size" for method j_malloc
00000000000057ef         call       j_malloc                                    ; malloc
00000000000057f4         test       rax, rax
00000000000057f7         mov        rcx, rax
00000000000057fa         je         loc_5816

00000000000057fc         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000057ff         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000005802         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000005805         call       j_memcpy                                    ; memcpy
000000000000580a         test       rbx, rbx
000000000000580d         mov        rcx, rax
0000000000005810         je         loc_5820

                     loc_5812:
0000000000005812         mov        byte [rcx+rbx], 0x0                         ; CODE XREF=mdir_name+88

                     loc_5816:
0000000000005816         add        rsp, 0x8                                    ; CODE XREF=mdir_name+42
000000000000581a         mov        rax, rcx
000000000000581d         pop        rbx
000000000000581e         pop        rbp
000000000000581f         ret
                        ; endp

                     loc_5820:
0000000000005820         mov        byte [rax], 0x2e                            ; CODE XREF=mdir_name+64
0000000000005823         mov        ebx, 0x1
0000000000005828         jmp        loc_5812
000000000000582a         align      16                                          ; End of unwind block (FDE at 0x10c90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     last_component:
0000000000005830         movzx      edx, byte [rdi]                             ; Begin of unwind block (FDE at 0x10cbc), CODE XREF=dir_len+18
0000000000005833         mov        rax, rdi
0000000000005836         cmp        dl, 0x2f
0000000000005839         jne        loc_584c

000000000000583b         nop        dword [rax+rax]

                     loc_5840:
0000000000005840         add        rax, 0x1                                    ; CODE XREF=last_component+26
0000000000005844         movzx      edx, byte [rax]
0000000000005847         cmp        dl, 0x2f
000000000000584a         je         loc_5840

                     loc_584c:
000000000000584c         test       dl, dl                                      ; CODE XREF=last_component+9
000000000000584e         je         loc_588a

0000000000005850         mov        rcx, rax
0000000000005853         xor        esi, esi
0000000000005855         jmp        loc_5875
0000000000005857         align      32

                     loc_5860:
0000000000005860         test       sil, sil                                    ; CODE XREF=last_component+72
0000000000005863         je         loc_586a

0000000000005865         mov        rax, rcx
0000000000005868         xor        esi, esi

                     loc_586a:
000000000000586a         add        rcx, 0x1                                    ; CODE XREF=last_component+51
000000000000586e         movzx      edx, byte [rcx]
0000000000005871         test       dl, dl
0000000000005873         je         loc_588a

                     loc_5875:
0000000000005875         cmp        dl, 0x2f                                    ; CODE XREF=last_component+37, last_component+88
0000000000005878         jne        loc_5860

000000000000587a         add        rcx, 0x1
000000000000587e         movzx      edx, byte [rcx]
0000000000005881         mov        esi, 0x1
0000000000005886         test       dl, dl
0000000000005888         jne        loc_5875

                     loc_588a:
000000000000588a         ret                                                    ; CODE XREF=last_component+30, last_component+67
                        ; endp
000000000000588c         align      16                                          ; End of unwind block (FDE at 0x10cbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     base_len:
0000000000005890         push       rbx                                         ; Begin of unwind block (FDE at 0x10cd0)
0000000000005891         mov        rbx, rdi
0000000000005894         call       j_strlen                                    ; strlen
0000000000005899         cmp        rax, 0x1
000000000000589d         jbe        loc_58aa

000000000000589f         cmp        byte [rbx+rax-1], 0x2f
00000000000058a4         lea        rdx, qword [rax-1]
00000000000058a8         je         loc_58b8

                     loc_58aa:
00000000000058aa         pop        rbx                                         ; CODE XREF=base_len+13
00000000000058ab         ret
                        ; endp
00000000000058ac         align      16

                     loc_58b0:
00000000000058b0         mov        rdx, rax                                    ; CODE XREF=base_len+55
00000000000058b3         nop        dword [rax+rax]

                     loc_58b8:
00000000000058b8         cmp        rdx, 0x1                                    ; CODE XREF=base_len+24
00000000000058bc         je         loc_58d0

00000000000058be         cmp        byte [rbx+rdx-1], 0x2f
00000000000058c3         lea        rax, qword [rdx-1]
00000000000058c7         je         loc_58b0

00000000000058c9         mov        rax, rdx
00000000000058cc         pop        rbx
00000000000058cd         ret
                        ; endp
00000000000058ce         align      16

                     loc_58d0:
00000000000058d0         mov        eax, 0x1                                    ; CODE XREF=base_len+44
00000000000058d5         pop        rbx
00000000000058d6         ret
                        ; endp
00000000000058d7         align      32                                          ; End of unwind block (FDE at 0x10cd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     file_type:
00000000000058e0         mov        eax, dword [rdi+0x18]                       ; Begin of unwind block (FDE at 0x10cfc), CODE XREF=print_stat+1251
00000000000058e3         mov        edx, 0x5
00000000000058e8         and        eax, aTerseFilesyste                        ; "--terse --file-system is equivalent to the following FORMAT:\\n    %s"
00000000000058ed         cmp        eax, sub_8000
00000000000058f2         je         loc_5940

00000000000058f4         cmp        eax, 0x4000
00000000000058f9         je         loc_5990

00000000000058ff         cmp        eax, 0xa000
0000000000005904         je         loc_5970

0000000000005906         cmp        eax, 0x6000
000000000000590b         je         loc_59a0

0000000000005911         cmp        eax, j_fileno
0000000000005916         je         loc_59b0

000000000000591c         cmp        eax, 0x1000
0000000000005921         je         loc_59c0

0000000000005927         cmp        eax, 0xc000
000000000000592c         je         loc_5980

000000000000592e         lea        rsi, qword [aWeirdFile]                     ; argument "msgid" for method j_dcgettext, "weird file"
0000000000005935         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005937         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000593c         align      64

                     loc_5940:
0000000000005940         cmp        qword [rdi+0x30], 0x0                       ; CODE XREF=file_type+18
0000000000005945         jne        loc_5958

0000000000005947         lea        rsi, qword [aRegularEmptyFi]                ; argument "msgid" for method j_dcgettext, "regular empty file"
000000000000594e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005950         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000005955         align      8

                     loc_5958:
0000000000005958         lea        rsi, qword [aRegularFile]                   ; argument "msgid" for method j_dcgettext, "regular file", CODE XREF=file_type+101
000000000000595f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005961         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000005966         align      16

                     loc_5970:
0000000000005970         lea        rsi, qword [aSymbolicLink]                  ; argument "msgid" for method j_dcgettext, "symbolic link", CODE XREF=file_type+36
0000000000005977         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005979         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000597e         align      128

                     loc_5980:
0000000000005980         lea        rsi, qword [aSocket]                        ; argument "msgid" for method j_dcgettext, "socket", CODE XREF=file_type+76
0000000000005987         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005989         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000598e         align      16

                     loc_5990:
0000000000005990         lea        rsi, qword [aCannotGetCurre+19]             ; argument "msgid" for method j_dcgettext, 0xf28b, CODE XREF=file_type+25
0000000000005997         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005999         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000599e         align      32

                     loc_59a0:
00000000000059a0         lea        rsi, qword [aBlockSpecialFi]                ; argument "msgid" for method j_dcgettext, "block special file", CODE XREF=file_type+43
00000000000059a7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000059a9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
00000000000059ae         align      16

                     loc_59b0:
00000000000059b0         lea        rsi, qword [aCharacterSpeci]                ; argument "msgid" for method j_dcgettext, "character special file", CODE XREF=file_type+54
00000000000059b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000059b9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
00000000000059be         align      64

                     loc_59c0:
00000000000059c0         lea        rsi, qword [aCharacterSpeci+23]             ; argument "msgid" for method j_dcgettext, 0xf3d8, CODE XREF=file_type+65
00000000000059c7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000059c9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
00000000000059ce         align      16                                          ; End of unwind block (FDE at 0x10cfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strmode:
00000000000059d0         mov        edx, edi                                    ; Begin of unwind block (FDE at 0x10d14), CODE XREF=filemodestring+3
00000000000059d2         mov        eax, 0x2d
00000000000059d7         and        edx, aTerseFilesyste                        ; "--terse --file-system is equivalent to the following FORMAT:\\n    %s"
00000000000059dd         cmp        edx, sub_8000
00000000000059e3         je         loc_5a40

00000000000059e5         cmp        edx, 0x4000
00000000000059eb         mov        eax, 0x64
00000000000059f0         je         loc_5a40

00000000000059f2         cmp        edx, 0x6000
00000000000059f8         mov        eax, 0x62
00000000000059fd         je         loc_5a40

00000000000059ff         cmp        edx, j_fileno
0000000000005a05         mov        eax, 0x63
0000000000005a0a         je         loc_5a40

0000000000005a0c         cmp        edx, 0xa000
0000000000005a12         mov        eax, 0x6c
0000000000005a17         je         loc_5a40

0000000000005a19         cmp        edx, 0x1000
0000000000005a1f         mov        eax, 0x70
0000000000005a24         je         loc_5a40

0000000000005a26         cmp        edx, 0xc000
0000000000005a2c         mov        eax, 0x73
0000000000005a31         mov        edx, 0x3f
0000000000005a36         cmovne     eax, edx
0000000000005a39         nop        dword [rax]

                     loc_5a40:
0000000000005a40         mov        byte [rsi], al                              ; CODE XREF=strmode+19, strmode+32, strmode+45, strmode+58, strmode+71, strmode+84
0000000000005a42         mov        eax, edi
0000000000005a44         and        eax, 0x100
0000000000005a49         cmp        eax, 0x1
0000000000005a4c         sbb        eax, eax
0000000000005a4e         and        eax, 0xffffffbb
0000000000005a51         add        eax, 0x72
0000000000005a54         mov        byte [rsi+1], al
0000000000005a57         mov        eax, edi
0000000000005a59         and        eax, 0x80
0000000000005a5e         cmp        eax, 0x1
0000000000005a61         sbb        eax, eax
0000000000005a63         and        eax, 0xffffffb6
0000000000005a66         add        eax, 0x77
0000000000005a69         mov        byte [rsi+2], al
0000000000005a6c         mov        eax, edi
0000000000005a6e         and        eax, 0x40
0000000000005a71         cmp        eax, 0x1
0000000000005a74         sbb        eax, eax
0000000000005a76         test       edi, 0x800
0000000000005a7c         je         loc_5b20

0000000000005a82         and        eax, 0xffffffe0
0000000000005a85         add        eax, 0x73

                     loc_5a88:
0000000000005a88         mov        byte [rsi+3], al                            ; CODE XREF=strmode+342
0000000000005a8b         mov        eax, edi
0000000000005a8d         and        eax, 0x20
0000000000005a90         cmp        eax, 0x1
0000000000005a93         sbb        eax, eax
0000000000005a95         and        eax, 0xffffffbb
0000000000005a98         add        eax, 0x72
0000000000005a9b         mov        byte [rsi+4], al
0000000000005a9e         mov        eax, edi
0000000000005aa0         and        eax, 0x10
0000000000005aa3         cmp        eax, 0x1
0000000000005aa6         sbb        eax, eax
0000000000005aa8         and        eax, 0xffffffb6
0000000000005aab         add        eax, 0x77
0000000000005aae         mov        byte [rsi+5], al
0000000000005ab1         mov        eax, edi
0000000000005ab3         and        eax, 0x8
0000000000005ab6         cmp        eax, 0x1
0000000000005ab9         sbb        eax, eax
0000000000005abb         test       edi, 0x400
0000000000005ac1         je         loc_5b48

0000000000005ac7         and        eax, 0xffffffe0
0000000000005aca         add        eax, 0x73

                     loc_5acd:
0000000000005acd         mov        byte [rsi+6], al                            ; CODE XREF=strmode+382
0000000000005ad0         mov        eax, edi
0000000000005ad2         and        eax, 0x4
0000000000005ad5         cmp        eax, 0x1
0000000000005ad8         sbb        eax, eax
0000000000005ada         and        eax, 0xffffffbb
0000000000005add         add        eax, 0x72
0000000000005ae0         mov        byte [rsi+7], al
0000000000005ae3         mov        eax, edi
0000000000005ae5         and        eax, 0x2
0000000000005ae8         cmp        eax, 0x1
0000000000005aeb         sbb        eax, eax
0000000000005aed         and        eax, 0xffffffb6
0000000000005af0         add        eax, 0x77
0000000000005af3         mov        byte [rsi+8], al
0000000000005af6         mov        eax, edi
0000000000005af8         and        eax, 0x1
0000000000005afb         cmp        eax, 0x1
0000000000005afe         sbb        eax, eax
0000000000005b00         and        edi, 0x200
0000000000005b06         je         loc_5b30

0000000000005b08         and        eax, 0xffffffe0
0000000000005b0b         add        eax, 0x74
0000000000005b0e         mov        byte [rsi+9], al
0000000000005b11         mov        eax, 0x20
0000000000005b16         mov        word [rsi+0xa], ax
0000000000005b1a         ret
                        ; endp
0000000000005b1b         align      32

                     loc_5b20:
0000000000005b20         and        eax, 0xffffffb5                             ; CODE XREF=strmode+172
0000000000005b23         add        eax, 0x78
0000000000005b26         jmp        loc_5a88
0000000000005b2b         align      16

                     loc_5b30:
0000000000005b30         and        eax, 0xffffffb5                             ; CODE XREF=strmode+310
0000000000005b33         add        eax, 0x78
0000000000005b36         mov        byte [rsi+9], al
0000000000005b39         mov        eax, 0x20
0000000000005b3e         mov        word [rsi+0xa], ax
0000000000005b42         ret
                        ; endp
0000000000005b43         align      8

                     loc_5b48:
0000000000005b48         and        eax, 0xffffffb5                             ; CODE XREF=strmode+241
0000000000005b4b         add        eax, 0x78
0000000000005b4e         jmp        loc_5acd
0000000000005b53         align      32                                          ; End of unwind block (FDE at 0x10d14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     filemodestring:
0000000000005b60         mov        edi, dword [rdi+0x18]                       ; Begin of unwind block (FDE at 0x10d28), argument "mode" for method strmode, CODE XREF=print_stat+1205
0000000000005b63         jmp        strmode                                     ; strmode
                        ; endp
0000000000005b68         align      16                                          ; End of unwind block (FDE at 0x10d28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     imaxtostr:
0000000000005b70         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x10d3c), CODE XREF=human_time+153
0000000000005b73         lea        rcx, qword [rsi+0x14]
0000000000005b77         mov        byte [rsi+0x14], 0x0
0000000000005b7b         movabs     r9, 0x6666666666666667
0000000000005b85         movabs     rsi, 0xcccccccccccccccd
0000000000005b8f         mov        r8d, 0x30
0000000000005b95         js         loc_5bd3

0000000000005b97         nop        word [rax+rax]

                     loc_5ba0:
0000000000005ba0         mov        rax, rdi                                    ; CODE XREF=imaxtostr+84
0000000000005ba3         sub        rcx, 0x1
0000000000005ba7         mul        rsi
0000000000005baa         shr        rdx, 0x3
0000000000005bae         lea        rax, qword [rdx+rdx*4]
0000000000005bb2         add        rax, rax
0000000000005bb5         sub        rdi, rax
0000000000005bb8         add        edi, 0x30
0000000000005bbb         test       rdx, rdx
0000000000005bbe         mov        byte [rcx], dil
0000000000005bc1         mov        rdi, rdx
0000000000005bc4         jne        loc_5ba0

0000000000005bc6         mov        rax, rcx
0000000000005bc9         ret
                        ; endp
0000000000005bca         align      16

                     loc_5bd0:
0000000000005bd0         mov        rcx, rsi                                    ; CODE XREF=imaxtostr+142

                     loc_5bd3:
0000000000005bd3         mov        rax, rdi                                    ; CODE XREF=imaxtostr+37
0000000000005bd6         lea        rsi, qword [rcx-1]
0000000000005bda         imul       r9
0000000000005bdd         mov        rax, rdi
0000000000005be0         sar        rax, 0x3f
0000000000005be4         sar        rdx, 0x2
0000000000005be8         sub        rdx, rax
0000000000005beb         lea        rax, qword [rdx+rdx*4]
0000000000005bef         lea        eax, dword [r8+rax*2]
0000000000005bf3         sub        eax, edi
0000000000005bf5         test       rdx, rdx
0000000000005bf8         mov        rdi, rdx
0000000000005bfb         mov        byte [rcx-1], al
0000000000005bfe         jne        loc_5bd0

0000000000005c00         sub        rcx, 0x2
0000000000005c04         mov        byte [rsi-1], 0x2d
0000000000005c08         mov        rax, rcx
0000000000005c0b         ret
                        ; endp
0000000000005c0c         align      16                                          ; End of unwind block (FDE at 0x10d3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     memcpy_lowcase:
0000000000005c10         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x10d54), CODE XREF=sub_6a20+1936, sub_74d9+334
0000000000005c13         push       r12
0000000000005c15         push       rbp
0000000000005c16         mov        rbp, rdi
0000000000005c19         push       rbx
0000000000005c1a         je         loc_5c49

0000000000005c1c         mov        r12, rsi
0000000000005c1f         lea        rbx, qword [rdx-1]
0000000000005c23         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000005c28         nop        dword [rax+rax]

                     loc_5c30:
0000000000005c30         movzx      ecx, byte [r12+rbx]                         ; CODE XREF=memcpy_lowcase+55
0000000000005c35         mov        rdx, qword [rax]
0000000000005c38         mov        edx, dword [rdx+rcx*4]
0000000000005c3b         mov        byte [rbp+rbx], dl
0000000000005c3f         sub        rbx, 0x1
0000000000005c43         cmp        rbx, 0xffffffffffffffff
0000000000005c47         jne        loc_5c30

                     loc_5c49:
0000000000005c49         mov        rax, rbp                                    ; CODE XREF=memcpy_lowcase+10
0000000000005c4c         pop        rbx
0000000000005c4d         pop        rbp
0000000000005c4e         pop        r12
0000000000005c50         ret
                        ; endp
0000000000005c51         align      32                                          ; End of unwind block (FDE at 0x10d54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     memcpy_uppcase:
0000000000005c60         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0x10d80), CODE XREF=__strftime_internal+787, __strftime_internal+1265, sub_6560+219
0000000000005c63         push       r12
0000000000005c65         push       rbp
0000000000005c66         mov        rbp, rdi
0000000000005c69         push       rbx
0000000000005c6a         je         loc_5c99

0000000000005c6c         mov        r12, rsi
0000000000005c6f         lea        rbx, qword [rdx-1]
0000000000005c73         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
0000000000005c78         nop        dword [rax+rax]

                     loc_5c80:
0000000000005c80         movzx      ecx, byte [r12+rbx]                         ; CODE XREF=memcpy_uppcase+55
0000000000005c85         mov        rdx, qword [rax]
0000000000005c88         mov        edx, dword [rdx+rcx*4]
0000000000005c8b         mov        byte [rbp+rbx], dl
0000000000005c8f         sub        rbx, 0x1
0000000000005c93         cmp        rbx, 0xffffffffffffffff
0000000000005c97         jne        loc_5c80

                     loc_5c99:
0000000000005c99         mov        rax, rbp                                    ; CODE XREF=memcpy_uppcase+10
0000000000005c9c         pop        rbx
0000000000005c9d         pop        rbp
0000000000005c9e         pop        r12
0000000000005ca0         ret
                        ; endp
0000000000005ca1         align      16                                          ; End of unwind block (FDE at 0x10d80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_490: int32_t, -1168
        ;    var_4B0: int64_t, -1200
        ;    var_4B8: int64_t, -1208
        ;    var_4C0: int64_t, -1216
        ;    var_4C8: int64_t, -1224
        ;    var_4CC: int32_t, -1228
        ;    var_4CD: int8_t, -1229
        ;    var_4D8: int64_t, -1240
        ;    var_4E0: int64_t, -1248
        ;    var_4E8: int64_t, -1256
        ;    var_4F0: int64_t, -1264


                     __strftime_internal:
0000000000005cb0         push       r15                                         ; Begin of unwind block (FDE at 0x10dac), CODE XREF=__strftime_internal+1707, sub_6360+184, nstrftime+43
0000000000005cb2         push       r14
0000000000005cb4         mov        r11, rdx
0000000000005cb7         push       r13
0000000000005cb9         push       r12
0000000000005cbb         mov        r13, rcx
0000000000005cbe         push       rbp
0000000000005cbf         push       rbx
0000000000005cc0         mov        rbp, rdi
0000000000005cc3         sub        rsp, 0x4c8
0000000000005cca         mov        rdi, qword [rcx+0x30]
0000000000005cce         mov        r15d, dword [rcx+8]
0000000000005cd2         mov        rax, qword [rsp+0x4f8+arg_8]
0000000000005cda         mov        qword [rsp+0x4f8+var_4F0], rsi
0000000000005cdf         mov        dword [rsp+0x4f8+var_4CC], r9d
0000000000005ce4         movsxd     r10, dword [rsp+0x4f8+arg_0]
0000000000005cec         mov        byte [rsp+0x4f8+var_4CD], r8b
0000000000005cf1         mov        qword [rsp+0x4f8+var_4E0], rax
0000000000005cf6         mov        rax, qword [rsp+0x4f8+arg_10]
0000000000005cfe         mov        qword [rsp+0x4f8+var_4E8], rax
0000000000005d03         mov        rax, qword [fs:0x28]
0000000000005d0c         mov        qword [rsp+0x4f8+var_40], rax
0000000000005d14         xor        eax, eax
0000000000005d16         lea        rax, qword [aWrittenBySSAnd+27]             ; 0xfb81
0000000000005d1d         test       rdi, rdi
0000000000005d20         cmovne     rax, rdi
0000000000005d24         cmp        r15d, 0xc
0000000000005d28         mov        qword [rsp+0x4f8+var_4D8], rax
0000000000005d2d         jle        loc_5e20

0000000000005d33         sub        r15d, 0xc

                     loc_5d37:
0000000000005d37         movzx      eax, byte [r11]                             ; CODE XREF=__strftime_internal+380
0000000000005d3b         xor        r14d, r14d
0000000000005d3e         test       al, al
0000000000005d40         je         loc_5dfc

0000000000005d46         mov        dword [rsp+0x4f8+var_490], r15d
0000000000005d4b         mov        rbx, r11

                     loc_5d4e:
0000000000005d4e         cmp        al, 0x25                                    ; CODE XREF=__strftime_internal+326
0000000000005d50         je         loc_5e38

0000000000005d56         test       r10d, r10d
0000000000005d59         mov        r12d, 0x0
0000000000005d5f         mov        eax, 0x1
0000000000005d64         cmovns     r12, r10
0000000000005d68         test       r12, r12
0000000000005d6b         cmove      r12, rax
0000000000005d6f         mov        rax, qword [rsp+0x4f8+var_4F0]
0000000000005d74         sub        rax, r14
0000000000005d77         cmp        rax, r12
0000000000005d7a         ja         loc_5db0

                     loc_5d7c:
0000000000005d7c         xor        r14d, r14d                                  ; CODE XREF=__strftime_internal+660, __strftime_internal+1505, sub_6360+252, sub_6a20+1491

                     loc_5d7f:
0000000000005d7f         mov        rbx, qword [rsp+0x4f8+var_40]               ; CODE XREF=__strftime_internal+335, __strftime_internal+347, __strftime_internal+357
0000000000005d87         xor        rbx, qword [fs:0x28]
0000000000005d90         mov        rax, r14
0000000000005d93         jne        loc_7745

0000000000005d99         add        rsp, 0x4c8
0000000000005da0         pop        rbx
0000000000005da1         pop        rbp
0000000000005da2         pop        r12
0000000000005da4         pop        r13
0000000000005da6         pop        r14
0000000000005da8         pop        r15
0000000000005daa         ret
                        ; endp
0000000000005dab         align      16

                     loc_5db0:
0000000000005db0         test       rbp, rbp                                    ; CODE XREF=__strftime_internal+202
0000000000005db3         je         loc_5ddc

0000000000005db5         cmp        r10d, 0x1
0000000000005db9         jle        loc_5dd2

0000000000005dbb         lea        r15, qword [r10-1]
0000000000005dbf         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000005dc2         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000005dc7         mov        rdx, r15                                    ; argument "__n" for method j_memset
0000000000005dca         add        rbp, r15
0000000000005dcd         call       j_memset                                    ; memset

                     loc_5dd2:
0000000000005dd2         movzx      eax, byte [rbx]                             ; CODE XREF=__strftime_internal+265
0000000000005dd5         add        rbp, 0x1
0000000000005dd9         mov        byte [rbp-1], al

                     loc_5ddc:
0000000000005ddc         add        r14, r12                                    ; CODE XREF=__strftime_internal+259
0000000000005ddf         mov        r12, rbx

                     loc_5de2:
0000000000005de2         movzx      eax, byte [r12+1]                           ; CODE XREF=__strftime_internal+808, sub_6a20+2417
0000000000005de8         lea        rbx, qword [r12+1]
0000000000005ded         mov        r10, 0xffffffffffffffff
0000000000005df4         test       al, al
0000000000005df6         jne        loc_5d4e

                     loc_5dfc:
0000000000005dfc         test       rbp, rbp                                    ; CODE XREF=__strftime_internal+144
0000000000005dff         je         loc_5d7f

0000000000005e05         cmp        qword [rsp+0x4f8+var_4F0], 0x0
0000000000005e0b         je         loc_5d7f

0000000000005e11         mov        byte [rbp], 0x0
0000000000005e15         jmp        loc_5d7f
0000000000005e1a         align      32

                     loc_5e20:
0000000000005e20         test       r15d, r15d                                  ; CODE XREF=__strftime_internal+125
0000000000005e23         mov        eax, 0xc
0000000000005e28         cmove      r15d, eax
0000000000005e2c         jmp        loc_5d37
0000000000005e31         align      8

                     loc_5e38:
0000000000005e38         movzx      eax, byte [rsp+0x4f8+var_4CD]               ; CODE XREF=__strftime_internal+160
0000000000005e3d         xor        r8d, r8d
0000000000005e40         xor        r15d, r15d
0000000000005e43         mov        edx, 0x1
0000000000005e48         mov        byte [rsp+0x4f8+var_4C8], al

                     loc_5e4c:
0000000000005e4c         add        rbx, 0x1                                    ; CODE XREF=__strftime_internal+563, __strftime_internal+582, __strftime_internal+821
0000000000005e50         movsx      eax, byte [rbx]
0000000000005e53         lea        ecx, dword [rax-0x23]
0000000000005e56         mov        esi, eax
0000000000005e58         mov        r9d, eax
0000000000005e5b         cmp        cl, 0x3c
0000000000005e5e         ja         loc_5e8c

0000000000005e60         mov        rdi, rdx
0000000000005e63         movabs     r11, 0x1000000000002500
0000000000005e6d         shl        rdi, cl
0000000000005e70         test       rdi, r11
0000000000005e73         jne        loc_5ee0

0000000000005e75         test       cl, cl
0000000000005e77         je         loc_5ef0

0000000000005e79         movabs     rcx, 0x800000000000000
0000000000005e83         test       rdi, rcx
0000000000005e86         jne        loc_5fe0

                     loc_5e8c:
0000000000005e8c         lea        edx, dword [rax-0x30]                       ; CODE XREF=__strftime_internal+430
0000000000005e8f         cmp        edx, 0x9
0000000000005e92         jbe        loc_5ff0

                     loc_5e98:
0000000000005e98         cmp        sil, 0x45                                   ; CODE XREF=__strftime_internal+882, __strftime_internal+940
0000000000005e9c         je         loc_5ec8

0000000000005e9e         xor        r11d, r11d
0000000000005ea1         cmp        sil, 0x4f
0000000000005ea5         je         loc_5ec8

                     loc_5ea7:
0000000000005ea7         cmp        sil, 0x7a                                   ; CODE XREF=__strftime_internal+551
0000000000005eab         ja         loc_5f00

0000000000005ead         lea        rdx, qword [aMdy+9]                         ; 0xf410
0000000000005eb4         movzx      eax, sil
0000000000005eb8         movsxd     rax, dword [rdx+rax*4]
0000000000005ebc         add        rax, rdx
0000000000005ebf         jmp        rax
                        ; endp
0000000000005ec1         align      8

                     loc_5ec8:
0000000000005ec8         movsx      r9d, byte [rbx+1]                           ; CODE XREF=__strftime_internal+492, __strftime_internal+501
0000000000005ecd         mov        r11d, eax
0000000000005ed0         add        rbx, 0x1
0000000000005ed4         mov        esi, r9d
0000000000005ed7         jmp        loc_5ea7
0000000000005ed9         align      32

                     loc_5ee0:
0000000000005ee0         mov        r15d, eax                                   ; CODE XREF=__strftime_internal+451
0000000000005ee3         jmp        loc_5e4c
0000000000005ee8         align      16

                     loc_5ef0:
0000000000005ef0         mov        r8d, 0x1                                    ; CODE XREF=__strftime_internal+455
0000000000005ef6         jmp        loc_5e4c
0000000000005efb         mov        rbx, r9                                     ; CODE XREF=sub_6a20+1186
0000000000005efe         nop

                     loc_5f00:
0000000000005f00         lea        rax, qword [rbx-1]                          ; CODE XREF=__strftime_internal+507, __strftime_internal+956, __strftime_internal+1289, __strftime_internal+1354, sub_6360+376, sub_6360+437, sub_6a20+287, sub_6a20+305, sub_6a20+712, sub_6a20+789, sub_6a20+813
0000000000005f04         mov        r8d, 0x1

                     loc_5f0a:
0000000000005f0a         mov        r9, rax                                     ; CODE XREF=__strftime_internal+617
0000000000005f0d         lea        rax, qword [rax-1]
0000000000005f11         add        r8d, 0x1
0000000000005f15         cmp        byte [rax+1], 0x25
0000000000005f19         jne        loc_5f0a

0000000000005f1b         mov        rdx, qword [rsp+0x4f8+var_4F0]
0000000000005f20         mov        eax, 0x0
0000000000005f25         movsxd     r8, r8d
0000000000005f28         mov        rcx, r8
0000000000005f2b         mov        r12, rbx
0000000000005f2e         sub        rdx, r14
0000000000005f31         test       r10d, r10d
0000000000005f34         cmovns     eax, r10d
0000000000005f38         cdqe
0000000000005f3a         cmp        rax, r8
0000000000005f3d         cmovae     rcx, rax
0000000000005f41         cmp        rcx, rdx                                    ; CODE XREF=sub_6a20+1213, sub_6a20+2676
0000000000005f44         jae        loc_5d7c

0000000000005f4a         test       rbp, rbp
0000000000005f4d         je         loc_5fd5

0000000000005f53         cmp        rax, r8
0000000000005f56         jbe        loc_5fa5

0000000000005f58         movsxd     rdx, r10d
0000000000005f5b         mov        qword [rsp+0x4f8+var_4B0], r8
0000000000005f60         mov        qword [rsp+0x4f8+var_4B8], rcx
0000000000005f65         sub        rdx, r8
0000000000005f68         cmp        r15d, 0x30
0000000000005f6c         mov        qword [rsp+0x4f8+var_4C0], r9
0000000000005f71         lea        rbx, qword [rbp+rdx]
0000000000005f76         je         loc_71e6

0000000000005f7c         cmp        r15d, 0x2b
0000000000005f80         je         loc_71e6

0000000000005f86         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000005f89         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000005f8e         mov        rbp, rbx
0000000000005f91         call       j_memset                                    ; memset
0000000000005f96         mov        r8, qword [rsp+0x4f8+var_4B0]
0000000000005f9b         mov        rcx, qword [rsp+0x4f8+var_4B8]
0000000000005fa0         mov        r9, qword [rsp+0x4f8+var_4C0]

                     loc_5fa5:
0000000000005fa5         cmp        byte [rsp+0x4f8+var_4C8], 0x0               ; CODE XREF=__strftime_internal+678, sub_6a20+2021
0000000000005faa         mov        qword [rsp+0x4f8+var_4C0], rcx
0000000000005faf         mov        rdx, r8
0000000000005fb2         mov        qword [rsp+0x4f8+var_4C8], r8
0000000000005fb7         mov        rsi, r9
0000000000005fba         mov        rdi, rbp
0000000000005fbd         je         loc_7190

0000000000005fc3         call       memcpy_uppcase                              ; memcpy_uppcase
0000000000005fc8         mov        r8, qword [rsp+0x4f8+var_4C8]
0000000000005fcd         mov        rcx, qword [rsp+0x4f8+var_4C0]

                     loc_5fd2:
0000000000005fd2         add        rbp, r8                                     ; CODE XREF=sub_6a20+1919

                     loc_5fd5:
0000000000005fd5         add        r14, rcx                                    ; CODE XREF=__strftime_internal+669
0000000000005fd8         jmp        loc_5de2
0000000000005fdd         align      32

                     loc_5fe0:
0000000000005fe0         mov        byte [rsp+0x4f8+var_4C8], 0x1               ; CODE XREF=__strftime_internal+470
0000000000005fe5         jmp        loc_5e4c
0000000000005fea         align      16

                     loc_5ff0:
0000000000005ff0         xor        r10d, r10d                                  ; CODE XREF=__strftime_internal+482

                     loc_5ff3:
0000000000005ff3         movsx      eax, byte [rbx+1]                           ; CODE XREF=__strftime_internal+877
0000000000005ff7         cmp        r10d, 0xccccccc
0000000000005ffe         lea        rcx, qword [rbx+1]
0000000000006002         mov        esi, eax
0000000000006004         lea        edx, dword [rax-0x30]
0000000000006007         jg         loc_6036

0000000000006009         movsx      edi, byte [rbx]
000000000000600c         je         loc_6030

                     loc_600e:
000000000000600e         lea        r9d, dword [r10+r10*4]                      ; CODE XREF=__strftime_internal+900
0000000000006012         mov        rbx, rcx
0000000000006015         lea        r10d, dword [rdi+r9*2-0x30]

                     loc_601a:
000000000000601a         cmp        edx, 0x9                                    ; CODE XREF=__strftime_internal+926
000000000000601d         jbe        loc_5ff3

000000000000601f         mov        r9d, eax
0000000000006022         jmp        loc_5e98
0000000000006027         align      16

                     loc_6030:
0000000000006030         cmp        dil, 0x37                                   ; CODE XREF=__strftime_internal+860
0000000000006034         jle        loc_600e

                     loc_6036:
0000000000006036         cmp        edx, 0x9                                    ; CODE XREF=__strftime_internal+855
0000000000006039         ja         loc_6050

000000000000603b         movsx      eax, byte [rbx+2]
000000000000603f         mov        r10d, 0x7fffffff
0000000000006045         add        rbx, 0x2
0000000000006049         mov        esi, eax
000000000000604b         lea        edx, dword [rax-0x30]
000000000000604e         jmp        loc_601a

                     loc_6050:
0000000000006050         mov        r9d, eax                                    ; CODE XREF=__strftime_internal+905
0000000000006053         mov        rbx, rcx
0000000000006056         mov        r10d, 0x7fffffff
000000000000605c         jmp        loc_5e98
0000000000006061         nop        dword [rax]
0000000000006068         cmp        r11d, 0x4f
000000000000606c         je         __strftime_internal+592
0000000000006072         xor        r8d, r8d                                    ; CODE XREF=sub_6a20+902
0000000000006075         mov        eax, 0x2520                                 ; CODE XREF=__strftime_internal+1625, sub_6560+375, sub_6a20+891, sub_6a20+2069
000000000000607a         test       r11d, r11d
000000000000607d         mov        word [rsp+0xab], ax
0000000000006085         jne        sub_7690+203
000000000000608b         lea        rdx, qword [rsp+0xab]
0000000000006093         mov        r12, rbx
0000000000006096         lea        rax, qword [rdx+2]

                     loc_609a:
000000000000609a         lea        r9, qword [rsp+0x1+arg_A7]                  ; CODE XREF=__strftime_internal+1345, __strftime_internal+1462
00000000000060a2         mov        byte [rax], sil
00000000000060a5         mov        byte [rax+1], 0x0
00000000000060a9         mov        rcx, r13                                    ; argument "__tp" for method j_strftime
00000000000060ac         mov        esi, 0x400                                  ; argument "__maxsize" for method j_strftime
00000000000060b1         mov        dword [rsp+0x1+arg_2F], r10d
00000000000060b6         mov        rdi, r9                                     ; argument "__s" for method j_strftime
00000000000060b9         mov        byte [rsp+0x1+arg_47], r8b
00000000000060be         mov        dword [rsp+0x1+arg_3F], r11d
00000000000060c3         mov        qword [rsp+0x1+arg_37], r9
00000000000060c8         call       j_strftime                                  ; strftime
00000000000060cd         test       rax, rax
00000000000060d0         je         __strftime_internal+306

00000000000060d6         movsxd     r10, dword [rsp+0x1+arg_2F]
00000000000060db         lea        rcx, qword [rax-1]
00000000000060df         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]
00000000000060e4         mov        eax, 0x0
00000000000060e9         test       r10d, r10d
00000000000060ec         cmovns     rax, r10
00000000000060f0         cmp        rcx, rax
00000000000060f3         mov        rbx, rax
00000000000060f6         cmovae     rbx, rcx
00000000000060fa         sub        rdx, r14
00000000000060fd         cmp        rdx, rbx
0000000000006100         jbe        __strftime_internal+204

0000000000006106         test       rbp, rbp
0000000000006109         je         loc_61ae

000000000000610f         mov        r11d, dword [rsp+0x1+arg_3F]
0000000000006114         mov        r9, qword [rsp+0x1+arg_37]
0000000000006119         movzx      r8d, byte [rsp+0x1+arg_47]
000000000000611f         test       r11d, r11d
0000000000006122         jne        loc_617e

0000000000006124         cmp        rcx, rax
0000000000006127         jae        loc_617e

0000000000006129         movsxd     rdx, r10d
000000000000612c         mov        qword [rsp+0x1+arg_47], r9
0000000000006131         mov        qword [rsp+0x1+arg_3F], rcx
0000000000006136         sub        rdx, rcx
0000000000006139         cmp        r15d, 0x30
000000000000613d         mov        byte [rsp+0x1+arg_37], r8b
0000000000006142         lea        rax, qword [rbp+rdx]
0000000000006147         mov        qword [rsp+0x1+arg_2F], rax
000000000000614c         je         loc_71bf

0000000000006152         cmp        r15d, 0x2b
0000000000006156         je         loc_71bf

000000000000615c         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000615f         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000006164         call       j_memset                                    ; memset
0000000000006169         movzx      r8d, byte [rsp+0x1+arg_37]
000000000000616f         mov        rbp, qword [rsp+0x1+arg_2F]
0000000000006174         mov        r9, qword [rsp+0x1+arg_47]
0000000000006179         mov        rcx, qword [rsp+0x1+arg_3F]

                     loc_617e:
000000000000617e         test       r8b, r8b                                    ; CODE XREF=__strftime_internal+1138, __strftime_internal+1143, sub_6a20+1985
0000000000006181         lea        rsi, qword [r9+1]
0000000000006185         mov        rdx, rcx
0000000000006188         jne        loc_71a8

000000000000618e         cmp        byte [rsp+0x1+arg_27], 0x0
0000000000006193         mov        rdi, rbp
0000000000006196         mov        qword [rsp+0x1+arg_27], rcx
000000000000619b         je         loc_6a11

                     loc_61a1:
00000000000061a1         call       memcpy_uppcase                              ; memcpy_uppcase, CODE XREF=sub_67b0+603
00000000000061a6         mov        rcx, qword [rsp+0x1+arg_27]

                     loc_61ab:
00000000000061ab         add        rbp, rcx                                    ; CODE XREF=sub_67b0+619, sub_6a20+1946

                     loc_61ae:
00000000000061ae         add        r14, rbx                                    ; CODE XREF=__strftime_internal+1113, sub_67b0+491
00000000000061b1         jmp        __strftime_internal+306
                        ; endp
00000000000061b6         test       r11d, r11d
00000000000061b9         jne        __strftime_internal+592
00000000000061bf         movzx      eax, byte [rsp+0x30]
00000000000061c4         test       r8b, r8b
00000000000061c7         lea        rdx, qword [rsp+0xab]
00000000000061cf         mov        r12, rbx
00000000000061d2         cmovne     eax, r8d
00000000000061d6         xor        r8d, r8d
00000000000061d9         xor        r11d, r11d
00000000000061dc         mov        byte [rsp+0x30], al
00000000000061e0         mov        eax, 0x2520
00000000000061e5         mov        word [rsp+0xab], ax
00000000000061ed         lea        rax, qword [rdx+2]
00000000000061f1         jmp        __strftime_internal+1002
00000000000061f6         cmp        r11d, 0x45
00000000000061fa         je         __strftime_internal+592
0000000000006200         mov        ecx, dword [r13]
0000000000006204         mov        edi, 0x2
0000000000006209         nop        dword [rax]

                     loc_6210:
0000000000006210         mov        eax, ecx                                    ; CODE XREF=sub_6360+418, sub_6a20+727, sub_6a20+780, sub_6a20+804, sub_6a20+1237, sub_6a20+1261, sub_6a20+1337, sub_6a20+1361, sub_6a20+1388, sub_6a20+1400, sub_6a20+2659
0000000000006212         xor        esi, esi
0000000000006214         mov        byte [rsp+0x1+arg_37], 0x0
0000000000006219         shr        eax, 0x1f
000000000000621c         mov        dword [rsp+0x1+arg_2F], eax
0000000000006220         mov        eax, ecx
0000000000006222         not        eax
0000000000006224         shr        eax, 0x1f

                     loc_6227:
0000000000006227         cmp        r11d, 0x4f                                  ; CODE XREF=sub_6360+507, sub_6560+338, sub_6560+580, sub_6a20+703, sub_6a20+1056, sub_6a20+1448, sub_6a20+1633, sub_74d9+177, sub_74d9+246
000000000000622b         jne        loc_70b0

0000000000006231         test       al, al
0000000000006233         je         loc_70b0

0000000000006239         mov        esi, r9d
000000000000623c         mov        edx, 0x2520                                 ; CODE XREF=sub_6a20+2076
0000000000006241         xor        r8d, r8d
0000000000006244         mov        word [rsp+0x1+arg_A2], dx
000000000000624c         lea        rdx, qword [rsp+0x1+arg_A2]                 ; CODE XREF=sub_7690+205
0000000000006254         mov        byte [rsp+0x1+arg_A4], r11b
000000000000625c         mov        r12, rbx
000000000000625f         mov        r11d, edi
0000000000006262         lea        rax, qword [rdx+3]
0000000000006266         jmp        loc_609a
000000000000626b         test       r10d, r10d
000000000000626e         mov        ecx, 0x0
0000000000006273         mov        eax, 0x1
0000000000006278         cmovns     ecx, r10d
000000000000627c         movsxd     rcx, ecx
000000000000627f         test       rcx, rcx
0000000000006282         cmove      rcx, rax
0000000000006286         mov        rax, qword [rsp+8]
000000000000628b         sub        rax, r14
000000000000628e         cmp        rax, rcx
0000000000006291         jbe        __strftime_internal+204
0000000000006297         test       rbp, rbp
000000000000629a         je         __strftime_internal+1592
000000000000629c         cmp        r10d, 0x1
00000000000062a0         jle        __strftime_internal+1580
00000000000062a2         movsxd     rdx, r10d
00000000000062a5         mov        qword [rsp+0x30], rcx
00000000000062aa         sub        rdx, 0x1
00000000000062ae         cmp        r15d, 0x30
00000000000062b2         lea        r12, qword [rbp+rdx]
00000000000062b7         je         sub_74d9+251
00000000000062bd         cmp        r15d, 0x2b
00000000000062c1         je         sub_74d9+251
00000000000062c7         mov        rdi, rbp
00000000000062ca         mov        esi, 0x20
00000000000062cf         mov        rbp, r12
00000000000062d2         call       j_memset                                    ; memset
00000000000062d7         mov        rcx, qword [rsp+0x30]
00000000000062dc         mov        byte [rbp], 0x9                             ; CODE XREF=__strftime_internal+1520, sub_74d9+272
00000000000062e0         add        rbp, 0x1
00000000000062e4         nop        dword [rax]

                     loc_62e8:
00000000000062e8         add        r14, rcx                                    ; CODE XREF=__strftime_internal+1514, sub_6360+261, sub_6360+342, sub_6560+91, sub_6560+232, sub_6a20+1500, sub_6a20+1578
00000000000062eb         mov        r12, rbx
00000000000062ee         jmp        __strftime_internal+306
                        ; endp
00000000000062f3         mov        eax, 0x1
00000000000062f8         test       r8b, r8b                                    ; CODE XREF=sub_6a20+1585
00000000000062fb         jne        sub_6a20+2059
0000000000006301         mov        r8d, eax
0000000000006304         mov        esi, 0x70
0000000000006309         jmp        __strftime_internal+965
000000000000630e         lea        rax, qword [aHm]                            ; "%H:%M"
0000000000006315         mov        dword [rsp+0x38], 0xffffffff
000000000000631d         mov        qword [rsp+0x40], rax
0000000000006322         movzx      r8d, byte [rsp+0x30]                        ; CODE XREF=sub_6360+367, sub_6a20+1090, sub_6a20+1148, sub_74d9+434
0000000000006328         mov        eax, dword [rsp+0x518]
000000000000632f         mov        rsi, 0xffffffffffffffff
0000000000006336         mov        dword [rsp+0x48], r10d
000000000000633b         xor        edi, edi
000000000000633d         mov        r9d, r15d
0000000000006340         mov        rcx, r13
0000000000006343         mov        dword [rsp+0x30], r8d
0000000000006348         push       rax
0000000000006349         push       qword [rsp+0x18]
000000000000634d         push       qword [rsp+0x28]
0000000000006351         mov        eax, dword [rsp+0x50]
0000000000006355         push       rax
0000000000006356         mov        rdx, qword [rsp+0x60]
000000000000635b         call       __strftime_internal                         ; __strftime_internal


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6360:
0000000000006360         add        rsp, 0x20
0000000000006364         movsxd     r10, dword [rsp+72]
0000000000006369         mov        r11, rax
000000000000636c         mov        rsi, qword [rsp+8]
0000000000006371         mov        eax, 0x0
0000000000006376         test       r10d, r10d
0000000000006379         cmovns     rax, r10
000000000000637d         cmp        r11, rax
0000000000006380         mov        r12, rax
0000000000006383         cmovae     r12, r11
0000000000006387         sub        rsi, r14
000000000000638a         cmp        rsi, r12
000000000000638d         mov        qword [rsp+72], rsi
0000000000006392         jbe        __strftime_internal+204

0000000000006398         test       rbp, rbp
000000000000639b         je         __strftime_internal+300

00000000000063a1         cmp        r11, rax
00000000000063a4         jae        loc_63e6

00000000000063a6         movsxd     rdx, r10d
00000000000063a9         mov        qword [rsp+88], r11
00000000000063ae         sub        rdx, r11
00000000000063b1         cmp        r15d, 0x30
00000000000063b5         lea        rax, qword [rbp+rdx]
00000000000063ba         mov        qword [rsp+80], rax
00000000000063bf         je         loc_74bc

00000000000063c5         cmp        r15d, 0x2b
00000000000063c9         je         loc_74bc

00000000000063cf         mov        rdi, rbp                                    ; argument "__s" for method j_memset
00000000000063d2         mov        esi, 0x20                                   ; argument "__c" for method j_memset
00000000000063d7         call       j_memset                                    ; memset
00000000000063dc         mov        rbp, qword [rsp+80]
00000000000063e1         mov        r11, qword [rsp+88]

                     loc_63e6:
00000000000063e6         mov        eax, dword [rsp+1304]                       ; CODE XREF=sub_6360+68, sub_6a20+2739
00000000000063ed         mov        qword [rsp+80], r11
00000000000063f2         mov        rdi, rbp                                    ; argument #1 for method __strftime_internal
00000000000063f5         mov        r9d, r15d                                   ; argument #6 for method __strftime_internal
00000000000063f8         mov        rcx, r13                                    ; argument #4 for method __strftime_internal
00000000000063fb         push       rax
00000000000063fc         push       qword [rsp+24]                              ; argument #9 for method __strftime_internal
0000000000006400         push       qword [rsp+40]                              ; argument #8 for method __strftime_internal
0000000000006404         mov        eax, dword [rsp+80]
0000000000006408         push       rax                                         ; argument #7 for method __strftime_internal
0000000000006409         mov        r8d, dword [rsp+80]                         ; argument #5 for method __strftime_internal
000000000000640e         mov        rdx, qword [rsp+96]                         ; argument #3 for method __strftime_internal
0000000000006413         mov        rsi, qword [rsp+104]                        ; argument #2 for method __strftime_internal
0000000000006418         call       __strftime_internal                         ; __strftime_internal
000000000000641d         mov        r11, qword [rsp+112]
0000000000006422         add        rsp, 0x20
0000000000006426         add        rbp, r11
0000000000006429         jmp        __strftime_internal+300
                        ; endp
000000000000642e         mov        rdx, qword [rsp+8]
0000000000006433         mov        eax, 0x0
0000000000006438         mov        ecx, 0x1
000000000000643d         sub        rdx, r14
0000000000006440         test       r10d, r10d
0000000000006443         cmovns     eax, r10d
0000000000006447         cdqe
0000000000006449         test       rax, rax
000000000000644c         cmovne     rcx, rax
0000000000006450         test       r11d, r11d
0000000000006453         jne        sub_6a20+2664
0000000000006459         cmp        rcx, rdx
000000000000645c         jae        __strftime_internal+204
0000000000006462         test       rbp, rbp
0000000000006465         je         __strftime_internal+1592
000000000000646b         cmp        r10d, 0x1
000000000000646f         jle        sub_6360+334
0000000000006471         movsxd     rdx, r10d
0000000000006474         mov        qword [rsp+0x30], rcx
0000000000006479         sub        rdx, 0x1
000000000000647d         cmp        r15d, 0x30
0000000000006481         lea        r12, qword [rbp+rdx]
0000000000006486         je         sub_7690+101
000000000000648c         cmp        r15d, 0x2b
0000000000006490         mov        esi, 0x20
0000000000006495         je         sub_7690+101
000000000000649b         mov        rdi, rbp                                    ; CODE XREF=sub_7690+106
000000000000649e         mov        rbp, r12
00000000000064a1         call       j_memset                                    ; memset
00000000000064a6         movzx      esi, byte [rbx]
00000000000064a9         mov        rcx, qword [rsp+0x30]
00000000000064ae         mov        byte [rbp], sil                             ; CODE XREF=sub_6360+271
00000000000064b2         add        rbp, 0x1
00000000000064b6         jmp        __strftime_internal+1592
00000000000064bb         lea        rax, qword [aHms]                           ; "%H:%M:%S"
00000000000064c2         mov        dword [rsp+0x38], 0xffffffff
00000000000064ca         mov        qword [rsp+0x40], rax
00000000000064cf         jmp        __strftime_internal+1650
00000000000064d4         cmp        r11d, 0x45
00000000000064d8         je         __strftime_internal+592
00000000000064de         mov        esi, dword [r13+0x1c]
00000000000064e2         sub        esi, dword [r13+0x18]
00000000000064e6         mov        edx, 0x92492493
00000000000064eb         add        esi, 0x7
00000000000064ee         mov        eax, esi
00000000000064f0         imul       edx
00000000000064f2         lea        ecx, dword [rdx+rsi]                        ; CODE XREF=sub_6a20+873
00000000000064f5         sar        esi, 0x1f
00000000000064f8         mov        edi, 0x2
00000000000064fd         sar        ecx, 0x2
0000000000006500         sub        ecx, esi
0000000000006502         jmp        __strftime_internal+1376
0000000000006507         cmp        r11d, 0x45
000000000000650b         je         sub_6a20+2074
0000000000006511         cmp        r11d, 0x4f
0000000000006515         je         __strftime_internal+592
000000000000651b         mov        eax, dword [r13+0x14]
000000000000651f         cmp        eax, 0xfffff894
0000000000006524         lea        ecx, dword [rax+0x76c]
000000000000652a         setl       byte [rsp+0x38]
000000000000652f         cmp        eax, 0xfffff894
0000000000006534         setge      al
0000000000006537         test       r15d, r15d
000000000000653a         jne        sub_6a20+2457

                     loc_6540:
0000000000006540         mov        r15d, dword [rsp+0x1+arg_23]                ; CODE XREF=sub_6a20+2451
0000000000006545         cmp        r15d, 0x2b
0000000000006549         je         loc_73c3

                     loc_654f:
000000000000654f         mov        byte [rsp+0x1+arg_37], 0x0                  ; CODE XREF=sub_6a20+2461
0000000000006554         mov        edi, 0x4

                     loc_6559:
0000000000006559         xor        esi, esi                                    ; CODE XREF=sub_6a20+1034
000000000000655b         jmp        loc_6227


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6560:
0000000000006560         movzx      esi, byte [rsp+48]
0000000000006565         mov        rdi, qword [rsp+32]                         ; argument "__s" for method j_strlen
000000000000656a         test       r8b, r8b
000000000000656d         mov        eax, 0x0
0000000000006572         mov        dword [rsp+56], r10d
0000000000006577         mov        byte [rsp+64], r8b
000000000000657c         cmovne     esi, eax
000000000000657f         mov        byte [rsp+48], sil
0000000000006584         call       j_strlen                                    ; strlen
0000000000006589         movsxd     r10, dword [rsp+56]
000000000000658e         mov        r12, rax
0000000000006591         mov        rdx, qword [rsp+8]
0000000000006596         mov        eax, 0x0
000000000000659b         test       r10d, r10d
000000000000659e         cmovns     rax, r10
00000000000065a2         cmp        r12, rax
00000000000065a5         mov        rcx, rax
00000000000065a8         cmovae     rcx, r12
00000000000065ac         sub        rdx, r14
00000000000065af         cmp        rdx, rcx
00000000000065b2         jbe        __strftime_internal+204

00000000000065b8         test       rbp, rbp
00000000000065bb         je         loc_62e8

00000000000065c1         cmp        r12, rax
00000000000065c4         movzx      r8d, byte [rsp+64]
00000000000065ca         jae        loc_6617

00000000000065cc         movsxd     rdx, r10d
00000000000065cf         mov        qword [rsp+72], rcx
00000000000065d4         mov        byte [rsp+64], r8b
00000000000065d9         sub        rdx, r12
00000000000065dc         cmp        r15d, 0x30
00000000000065e0         lea        rax, qword [rbp+rdx]
00000000000065e5         mov        qword [rsp+56], rax
00000000000065ea         je         loc_76af

00000000000065f0         cmp        r15d, 0x2b
00000000000065f4         je         loc_76af

00000000000065fa         mov        rdi, rbp                                    ; argument "__s" for method j_memset
00000000000065fd         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000006602         call       j_memset                                    ; memset
0000000000006607         movzx      r8d, byte [rsp+64]
000000000000660d         mov        rbp, qword [rsp+56]
0000000000006612         mov        rcx, qword [rsp+72]

                     loc_6617:
0000000000006617         test       r8b, r8b                                    ; CODE XREF=sub_6560+106, sub_7690+60
000000000000661a         jne        loc_7617

0000000000006620         cmp        byte [rsp+48], 0x0
0000000000006625         mov        rdx, r12
0000000000006628         mov        qword [rsp+48], rcx
000000000000662d         mov        rsi, qword [rsp+32]
0000000000006632         mov        rdi, rbp
0000000000006635         je         loc_7608

000000000000663b         call       memcpy_uppcase                              ; memcpy_uppcase
0000000000006640         mov        rcx, qword [rsp+48]

                     loc_6645:
0000000000006645         add        rbp, r12                                    ; CODE XREF=sub_74d9+313, sub_74d9+344
0000000000006648         jmp        loc_62e8
000000000000664d         cmp        r11d, 0x45
0000000000006651         je         sub_6a20+2074
0000000000006657         mov        esi, dword [r13+0x14]
000000000000665b         mov        edx, 0x51eb851f
0000000000006660         mov        eax, esi
0000000000006662         imul       edx
0000000000006664         mov        eax, esi
0000000000006666         sar        eax, 0x1f
0000000000006669         mov        ecx, edx
000000000000666b         sar        ecx, 0x5
000000000000666e         sub        ecx, eax
0000000000006670         mov        eax, esi
0000000000006672         imul       ecx, ecx, 0x64
0000000000006675         sub        eax, ecx
0000000000006677         mov        ecx, eax
0000000000006679         jns        sub_6560+297
000000000000667b         neg        eax
000000000000667d         add        ecx, 0x64
0000000000006680         cmp        esi, 0xfffff893
0000000000006686         cmovle     ecx, eax

                     loc_6689:
0000000000006689         test       r15d, r15d                                  ; CODE XREF=sub_6560+281, sub_6a20+633
000000000000668c         je         loc_6cba

                     loc_6692:
0000000000006692         mov        eax, 0x1                                    ; CODE XREF=sub_6a20+660, sub_7690+198
0000000000006697         mov        byte [rsp+0x1+arg_2F], 0x0
000000000000669c         cmp        r15d, 0x2b                                  ; CODE XREF=sub_6a20+989
00000000000066a0         je         loc_6e13

00000000000066a6         mov        byte [rsp+0x1+arg_37], 0x0                  ; CODE XREF=sub_6a20+1005
00000000000066ab         mov        edi, 0x2
00000000000066b0         xor        esi, esi
00000000000066b2         jmp        loc_6227
00000000000066b7         movzx      eax, byte [rsp+0x30]
00000000000066bc         test       r8b, r8b
00000000000066bf         cmovne     eax, r8d
00000000000066c3         cmp        r11d, 0x45
00000000000066c7         je         sub_74d9+349
00000000000066cd         mov        esi, r9d
00000000000066d0         mov        byte [rsp+0x30], al
00000000000066d4         xor        r8d, r8d
00000000000066d7         jmp        __strftime_internal+965
00000000000066dc         xor        r8d, r8d
00000000000066df         mov        ecx, dword [r13+0x20]                       ; CODE XREF=sub_6a20+296
00000000000066e3         test       ecx, ecx
00000000000066e5         js         sub_6a20+2414
00000000000066eb         mov        rcx, qword [r13+0x28]
00000000000066ef         mov        byte [rsp+0x38], 0x1
00000000000066f4         test       ecx, ecx
00000000000066f6         js         sub_6560+428
00000000000066f8         mov        byte [rsp+0x38], 0x0
00000000000066fd         jne        sub_6560+428
00000000000066ff         mov        rax, qword [rsp+0x20]
0000000000006704         cmp        byte [rax], 0x2d
0000000000006707         sete       byte [rsp+0x38]
000000000000670c         mov        eax, ecx                                    ; CODE XREF=sub_6560+406, sub_6560+413
000000000000670e         mov        edx, 0x91a2b3c5
0000000000006713         mov        esi, 0x88888889
0000000000006718         imul       edx
000000000000671a         mov        eax, ecx
000000000000671c         sar        eax, 0x1f
000000000000671f         mov        dword [rsp+0x40], eax
0000000000006723         lea        r12d, dword [rdx+rcx]
0000000000006727         sar        r12d, 0xb
000000000000672b         sub        r12d, eax
000000000000672e         mov        eax, ecx
0000000000006730         imul       esi
0000000000006732         lea        edi, dword [rdx+rcx]
0000000000006735         sar        edi, 0x5
0000000000006738         sub        edi, dword [rsp+0x40]
000000000000673c         mov        eax, edi
000000000000673e         imul       esi
0000000000006740         mov        eax, edi
0000000000006742         sar        eax, 0x1f
0000000000006745         lea        esi, dword [rdx+rdi]
0000000000006748         sar        esi, 0x5
000000000000674b         sub        esi, eax
000000000000674d         mov        eax, edi
000000000000674f         imul       esi, esi, 0x3c
0000000000006752         imul       edi, edi, 0x3c
0000000000006755         sub        eax, esi
0000000000006757         sub        ecx, edi
0000000000006759         cmp        r8, 0x1
000000000000675d         mov        esi, eax
000000000000675f         je         sub_74d9+217
0000000000006765         jb         sub_7690                                    ; sub_7690
000000000000676b         cmp        r8, 0x2
000000000000676f         je         sub_74d9+140
0000000000006775         cmp        r8, 0x3
0000000000006779         jne        sub_74d9+358
000000000000677f         test       ecx, ecx
0000000000006781         jne        sub_74d9+140
0000000000006787         test       eax, eax
0000000000006789         jne        sub_74d9+217
000000000000678f         movzx      eax, byte [rsp+0x38]
0000000000006794         mov        ecx, r12d
0000000000006797         mov        byte [rsp+0x40], 0x1
000000000000679c         mov        edi, 0x3
00000000000067a1         xor        eax, 0x1
00000000000067a4         jmp        __strftime_internal+1399
00000000000067a9         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_67b0:
00000000000067b0         cmp        r11d, 0x4f
00000000000067b4         mov        eax, dword [r13+0x10]
00000000000067b8         mov        edi, 0x1
00000000000067bd         je         __strftime_internal+1420

00000000000067c3         lea        edx, dword [rax+rax*4]
00000000000067c6         mov        byte [rsp+64], 0x0
00000000000067cb         mov        byte [rsp+56], 0x0
00000000000067d0         xor        esi, esi
00000000000067d2         lea        ecx, dword [rax+rdx*2]
00000000000067d5         sar        ecx, 0x5
00000000000067d8         add        ecx, 0x1
00000000000067db         nop        dword [rax+rax]
                        ; endp

                     loc_67e0:
00000000000067e0         lea        r9, qword [rsp+0x1+arg_A7]                  ; CODE XREF=sub_6a20+1692
00000000000067e8         mov        r12d, 0xcccccccd
00000000000067ee         lea        r11, qword [r9+0x17]
00000000000067f2         nop        word [rax+rax]

                     loc_67f8:
00000000000067f8         test       sil, 0x1                                    ; CODE XREF=sub_67b0+130
00000000000067fc         lea        r8, qword [r11-1]
0000000000006800         je         loc_6811

0000000000006802         lea        rax, qword [r11-2]
0000000000006806         mov        byte [r11-1], 0x3a
000000000000680b         mov        r11, r8
000000000000680e         mov        r8, rax

                     loc_6811:
0000000000006811         mov        eax, ecx                                    ; CODE XREF=sub_67b0+80
0000000000006813         sar        esi, 0x1
0000000000006815         mul        r12d
0000000000006818         shr        edx, 0x3
000000000000681b         lea        eax, dword [rdx+rdx*4]
000000000000681e         add        eax, eax
0000000000006820         sub        ecx, eax
0000000000006822         mov        eax, esi
0000000000006824         add        ecx, 0x30
0000000000006827         or         eax, edx
0000000000006829         mov        byte [r11-1], cl
000000000000682d         mov        ecx, edx
000000000000682f         mov        r11, r8
0000000000006832         jne        loc_67f8

0000000000006834         cmp        r10d, edi
0000000000006837         cmovge     edi, r10d
000000000000683b         cmp        byte [rsp+0x1+arg_2F], 0x0
0000000000006840         mov        dword [rsp+0x1+arg_3F], edi
0000000000006844         jne        loc_70c8

000000000000684a         cmp        byte [rsp+0x1+arg_37], 0x0
000000000000684f         je         loc_6ae9

0000000000006855         cmp        r15d, 0x2d
0000000000006859         je         loc_7383

000000000000685f         mov        byte [rsp+0x1+arg_2F], 0x2b

                     loc_6864:
0000000000006864         mov        eax, dword [rsp+0x1+arg_3F]                 ; CODE XREF=sub_6a20+1713
0000000000006868         lea        rcx, qword [r9+0x17]
000000000000686c         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]
0000000000006871         sub        rcx, r8
0000000000006874         lea        r12d, dword [rax-1]
0000000000006878         sub        rdx, r14
000000000000687b         sub        r12d, ecx
000000000000687e         test       r12d, r12d
0000000000006881         jle        loc_72cc

0000000000006887         cmp        r15d, 0x5f
000000000000688b         je         loc_7246

0000000000006891         movsxd     rax, dword [rsp+0x1+arg_3F]
0000000000006896         cmp        rax, rdx
0000000000006899         mov        rdi, rax
000000000000689c         jae        __strftime_internal+204

00000000000068a2         test       r10d, r10d
00000000000068a5         mov        eax, 0x0
00000000000068aa         mov        esi, 0x1
00000000000068af         cmovns     eax, r10d
00000000000068b3         cdqe
00000000000068b5         test       rax, rax
00000000000068b8         cmovne     rsi, rax
00000000000068bc         cmp        rsi, rdx
00000000000068bf         jae        __strftime_internal+204

00000000000068c5         add        r14, rsi
00000000000068c8         test       rbp, rbp
00000000000068cb         movsxd     r9, r12d
00000000000068ce         mov        r12, rbx
00000000000068d1         je         loc_6974

00000000000068d7         test       edi, edi
00000000000068d9         jne        loc_692f

00000000000068db         cmp        rax, 0x1
00000000000068df         jbe        loc_692f

00000000000068e1         movsxd     rdx, r10d
00000000000068e4         mov        qword [rsp+0x1+arg_4F], r8
00000000000068e9         mov        qword [rsp+0x1+arg_47], r9
00000000000068ee         sub        rdx, 0x1
00000000000068f2         cmp        r15d, 0x30
00000000000068f6         mov        qword [rsp+0x1+arg_37], rcx
00000000000068fb         lea        r12, qword [rbp+rdx]
0000000000006900         je         loc_76d1

0000000000006906         cmp        r15d, 0x2b
000000000000690a         je         loc_76d1

0000000000006910         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000006913         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000006918         mov        rbp, r12
000000000000691b         call       j_memset                                    ; memset
0000000000006920         mov        r8, qword [rsp+0x1+arg_4F]
0000000000006925         mov        r9, qword [rsp+0x1+arg_47]
000000000000692a         mov        rcx, qword [rsp+0x1+arg_37]

                     loc_692f:
000000000000692f         movzx      eax, byte [rsp+0x1+arg_2F]                  ; CODE XREF=sub_67b0+297, sub_67b0+303, sub_7690+96
0000000000006934         add        rbp, 0x1
0000000000006938         mov        r12, rbx
000000000000693b         mov        byte [rbp-1], al

                     loc_693e:
000000000000693e         test       rbp, rbp                                    ; CODE XREF=sub_6a20+2711
0000000000006941         je         loc_6974

0000000000006943         mov        rdx, r9                                     ; argument "__n" for method j_memset
0000000000006946         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000006949         mov        esi, 0x30                                   ; argument "__c" for method j_memset
000000000000694e         mov        qword [rsp+0x1+arg_47], r8
0000000000006953         mov        qword [rsp+0x1+arg_37], rcx
0000000000006958         mov        qword [rsp+0x1+arg_2F], r9
000000000000695d         call       j_memset                                    ; memset
0000000000006962         mov        r9, qword [rsp+0x1+arg_2F]
0000000000006967         mov        r8, qword [rsp+0x1+arg_47]
000000000000696c         mov        rcx, qword [rsp+0x1+arg_37]
0000000000006971         add        rbp, r9

                     loc_6974:
0000000000006974         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_67b0+289, sub_67b0+401
0000000000006979         add        r14, r9
000000000000697c         xor        r11d, r11d
000000000000697f         xor        r10d, r10d
0000000000006982         sub        rdx, r14

                     loc_6985:
0000000000006985         cmp        rcx, r11                                    ; CODE XREF=sub_6a20+258, sub_6a20+1895, sub_6a20+2215, sub_6a20+2398, sub_6a20+2636
0000000000006988         mov        rbx, r11
000000000000698b         cmovae     rbx, rcx
000000000000698f         cmp        rbx, rdx
0000000000006992         jae        __strftime_internal+204

0000000000006998         test       rbp, rbp
000000000000699b         je         loc_61ae

00000000000069a1         mov        esi, dword [rsp+0x1+arg_3F]
00000000000069a5         test       esi, esi
00000000000069a7         jne        loc_69f8

00000000000069a9         cmp        rcx, r11
00000000000069ac         jae        loc_69f8

00000000000069ae         movsxd     rdx, r10d
00000000000069b1         mov        qword [rsp+0x1+arg_3F], r8
00000000000069b6         mov        qword [rsp+0x1+arg_37], rcx
00000000000069bb         sub        rdx, rcx
00000000000069be         cmp        r15d, 0x30
00000000000069c2         lea        rax, qword [rbp+rdx]
00000000000069c7         mov        qword [rsp+0x1+arg_2F], rax
00000000000069cc         je         loc_720a

00000000000069d2         cmp        r15d, 0x2b
00000000000069d6         je         loc_720a

00000000000069dc         mov        rdi, rbp                                    ; argument "__s" for method j_memset
00000000000069df         mov        esi, 0x20                                   ; argument "__c" for method j_memset
00000000000069e4         call       j_memset                                    ; memset
00000000000069e9         mov        rbp, qword [rsp+0x1+arg_2F]
00000000000069ee         mov        r8, qword [rsp+0x1+arg_3F]
00000000000069f3         mov        rcx, qword [rsp+0x1+arg_37]

                     loc_69f8:
00000000000069f8         cmp        byte [rsp+0x1+arg_27], 0x0                  ; CODE XREF=sub_67b0+503, sub_67b0+508, sub_6a20+2054
00000000000069fd         mov        rdx, rcx
0000000000006a00         mov        qword [rsp+0x1+arg_27], rcx
0000000000006a05         mov        rsi, r8
0000000000006a08         mov        rdi, rbp
0000000000006a0b         jne        loc_61a1

                     loc_6a11:
0000000000006a11         call       j_memcpy                                    ; memcpy, CODE XREF=__strftime_internal+1259
0000000000006a16         mov        rcx, qword [rsp+0x1+arg_27]
0000000000006a1b         jmp        loc_61ab


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6a20:
0000000000006a20         movdqu     xmm0, xmmword [r13]
0000000000006a26         lea        rsi, qword [rsp+112]                        ; argument #2 for method mktime_z
0000000000006a2b         mov        rax, qword [r13+0x30]
0000000000006a2f         mov        rdi, qword [rsp+16]                         ; argument #1 for method mktime_z
0000000000006a34         movaps     xmmword [rsp+112], xmm0
0000000000006a39         mov        dword [rsp+56], r10d
0000000000006a3e         movdqu     xmm0, xmmword [r13+0x10]
0000000000006a44         mov        qword [rsp+160], rax
0000000000006a4c         movaps     xmmword [rsp+128], xmm0
0000000000006a54         movdqu     xmm0, xmmword [r13+0x20]
0000000000006a5a         movaps     xmmword [rsp+144], xmm0
0000000000006a62         call       mktime_z                                    ; mktime_z
0000000000006a67         lea        r9, qword [rsp+176]
0000000000006a6f         mov        rsi, rax
0000000000006a72         mov        rcx, rax
0000000000006a75         movabs     r11, 0x6666666666666667
0000000000006a7f         mov        edi, 0x30
0000000000006a84         mov        r10d, dword [rsp+56]
0000000000006a89         lea        r8, qword [r9+0x17]
0000000000006a8d         nop        dword [rax]

                     loc_6a90:
0000000000006a90         mov        rax, rcx                                    ; CODE XREF=sub_6a20+174
0000000000006a93         imul       r11
0000000000006a96         mov        rax, rcx
0000000000006a99         sar        rax, 0x3f
0000000000006a9d         sar        rdx, 0x2
0000000000006aa1         sub        rdx, rax
0000000000006aa4         mov        rax, rdx
0000000000006aa7         lea        rdx, qword [rdx+rdx*4]
0000000000006aab         add        rdx, rdx
0000000000006aae         sub        rcx, rdx
0000000000006ab1         mov        rdx, rcx
0000000000006ab4         mov        rcx, rax
0000000000006ab7         mov        eax, edi
0000000000006ab9         sub        eax, edx
0000000000006abb         add        edx, 0x30
0000000000006abe         test       rsi, rsi
0000000000006ac1         cmovs      edx, eax
0000000000006ac4         sub        r8, 0x1
0000000000006ac8         test       rcx, rcx
0000000000006acb         mov        byte [r8], dl
0000000000006ace         jne        loc_6a90

0000000000006ad0         test       r10d, r10d
0000000000006ad3         mov        edi, 0x1
0000000000006ad8         cmovg      edi, r10d
0000000000006adc         test       rsi, rsi
0000000000006adf         mov        dword [rsp+72], edi
0000000000006ae3         js         sub_6a20+1704
                        ; endp

                     loc_6ae9:
0000000000006ae9         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_67b0+159
0000000000006aee         lea        rcx, qword [r9+0x17]
0000000000006af2         sub        rcx, r8
0000000000006af5         sub        rdx, r14
0000000000006af8         cmp        r15d, 0x2d
0000000000006afc         je         loc_6b0f

0000000000006afe         mov        r12d, dword [rsp+0x1+arg_3F]
0000000000006b03         sub        r12d, ecx
0000000000006b06         test       r12d, r12d
0000000000006b09         jg         loc_7499

                     loc_6b0f:
0000000000006b0f         test       r10d, r10d                                  ; CODE XREF=sub_6a20+220
0000000000006b12         mov        r11d, 0x0
0000000000006b18         mov        r12, rbx
0000000000006b1b         cmovns     r11d, r10d
0000000000006b1f         movsxd     r11, r11d
0000000000006b22         jmp        loc_6985
0000000000006b27         movzx      eax, byte [rbx+1]
0000000000006b2b         lea        rdx, qword [rbx+1]
0000000000006b2f         cmp        al, 0x3a
0000000000006b31         je         sub_74d9+369
0000000000006b37         mov        r8d, 0x1
0000000000006b3d         cmp        al, 0x7a                                    ; CODE XREF=sub_74d9+396
0000000000006b3f         jne        __strftime_internal+592
0000000000006b45         mov        rbx, rdx
0000000000006b48         jmp        sub_6560+383
0000000000006b4d         cmp        r11d, 0x45
0000000000006b51         je         __strftime_internal+592
0000000000006b57         mov        edi, dword [r13+0x14]
0000000000006b5b         mov        r8d, dword [r13+0x1c]
0000000000006b5f         mov        edx, 0x92492493
0000000000006b64         mov        eax, edi
0000000000006b66         mov        ecx, r8d
0000000000006b69         sar        eax, 0x1f
0000000000006b6c         and        eax, 0x190
0000000000006b71         lea        r12d, dword [rdi+rax-0x64]
0000000000006b76         mov        eax, dword [r13+0x18]
0000000000006b7a         sub        ecx, eax
0000000000006b7c         mov        dword [rsp+0x38], eax
0000000000006b80         add        ecx, 0x17e
0000000000006b86         mov        eax, ecx
0000000000006b88         imul       edx
0000000000006b8a         lea        eax, dword [rdx+rcx]
0000000000006b8d         mov        edx, ecx
0000000000006b8f         sar        edx, 0x1f
0000000000006b92         sar        eax, 0x2
0000000000006b95         sub        eax, edx
0000000000006b97         lea        edx, dword [rax*8]
0000000000006b9e         sub        edx, eax
0000000000006ba0         mov        eax, edx
0000000000006ba2         mov        edx, r8d
0000000000006ba5         sub        edx, ecx
0000000000006ba7         lea        eax, dword [rdx+rax+3]
0000000000006bab         test       eax, eax
0000000000006bad         mov        dword [rsp+0x40], eax
0000000000006bb1         js         sub_6a20+2744
0000000000006bb7         test       r12b, 0x3
0000000000006bbb         mov        eax, 0x16d
0000000000006bc0         jne        sub_6a20+487
0000000000006bc2         mov        ecx, 0x51eb851f
0000000000006bc7         mov        eax, r12d
0000000000006bca         imul       ecx
0000000000006bcc         mov        eax, r12d
0000000000006bcf         sar        eax, 0x1f
0000000000006bd2         mov        dword [rsp+0x48], eax
0000000000006bd6         mov        ecx, edx
0000000000006bd8         sar        edx, 0x5
0000000000006bdb         sub        edx, eax
0000000000006bdd         mov        eax, 0x16e
0000000000006be2         imul       edx, edx, 0x64
0000000000006be5         cmp        r12d, edx
0000000000006be8         jne        sub_6a20+487
0000000000006bea         sar        ecx, 0x7
0000000000006bed         mov        eax, ecx
0000000000006bef         sub        eax, dword [rsp+0x48]
0000000000006bf3         imul       eax, eax, 0x190
0000000000006bf9         cmp        r12d, eax
0000000000006bfc         sete       al
0000000000006bff         movzx      eax, al
0000000000006c02         add        eax, 0x16d
0000000000006c07         sub        r8d, eax                                    ; CODE XREF=sub_6a20+416, sub_6a20+456
0000000000006c0a         mov        edx, 0x92492493
0000000000006c0f         mov        ecx, r8d
0000000000006c12         sub        ecx, dword [rsp+0x38]
0000000000006c16         add        ecx, 0x17e
0000000000006c1c         mov        eax, ecx
0000000000006c1e         sub        r8d, ecx
0000000000006c21         imul       edx
0000000000006c23         lea        eax, dword [rdx+rcx]
0000000000006c26         mov        edx, ecx
0000000000006c28         sar        edx, 0x1f
0000000000006c2b         sar        eax, 0x2
0000000000006c2e         sub        eax, edx
0000000000006c30         lea        edx, dword [rax*8]
0000000000006c37         sub        edx, eax
0000000000006c39         lea        ecx, dword [r8+rdx+3]
0000000000006c3e         mov        r8d, 0x1
0000000000006c44         test       ecx, ecx
0000000000006c46         jns        sub_6a20+559
0000000000006c48         mov        ecx, dword [rsp+0x40]
0000000000006c4c         xor        r8d, r8d

                     loc_6c4f:
0000000000006c4f         cmp        sil, 0x47                                   ; CODE XREF=sub_6a20+550, sub_74d9+135
0000000000006c53         je         loc_7396

0000000000006c59         cmp        sil, 0x67
0000000000006c5d         jne        loc_758f

0000000000006c63         mov        ecx, 0x51eb851f
0000000000006c68         mov        eax, edi
0000000000006c6a         mov        esi, edi
0000000000006c6c         imul       ecx
0000000000006c6e         mov        eax, edx
0000000000006c70         mov        edx, edi
0000000000006c72         sar        edx, 0x1f
0000000000006c75         sar        eax, 0x5
0000000000006c78         sub        eax, edx
0000000000006c7a         imul       eax, eax, 0x64
0000000000006c7d         sub        esi, eax
0000000000006c7f         add        esi, r8d
0000000000006c82         mov        eax, esi
0000000000006c84         imul       ecx
0000000000006c86         mov        eax, esi
0000000000006c88         sar        eax, 0x1f
0000000000006c8b         mov        ecx, edx
0000000000006c8d         sar        ecx, 0x5
0000000000006c90         sub        ecx, eax
0000000000006c92         imul       ecx, ecx, 0x64
0000000000006c95         sub        esi, ecx
0000000000006c97         mov        ecx, esi
0000000000006c99         jns        loc_6689

0000000000006c9f         mov        eax, 0xfffff894
0000000000006ca4         sub        eax, r8d
0000000000006ca7         cmp        edi, eax
0000000000006ca9         jge        loc_774a

0000000000006caf         neg        ecx
0000000000006cb1         test       r15d, r15d
0000000000006cb4         jne        loc_6692

                     loc_6cba:
0000000000006cba         mov        r15d, dword [rsp+0x1+arg_23]                ; CODE XREF=sub_6560+300, sub_7690+192
0000000000006cbf         mov        eax, 0x1
0000000000006cc4         cmp        r15d, 0x2b
0000000000006cc8         je         loc_772a

0000000000006cce         mov        byte [rsp+0x1+arg_37], 0x0
0000000000006cd3         mov        byte [rsp+0x1+arg_2F], 0x0
0000000000006cd8         mov        edi, 0x2
0000000000006cdd         xor        esi, esi
0000000000006cdf         jmp        loc_6227
0000000000006ce4         cmp        r11d, 0x45
0000000000006ce8         je         __strftime_internal+592
0000000000006cee         mov        ecx, dword [r13+0xc]
0000000000006cf2         mov        edi, 0x2
0000000000006cf7         jmp        __strftime_internal+1376
0000000000006cfc         mov        eax, dword [r13+0x18]
0000000000006d00         mov        edx, 0x92492493
0000000000006d05         mov        edi, 0x1
0000000000006d0a         lea        ecx, dword [rax+6]
0000000000006d0d         mov        eax, ecx
0000000000006d0f         imul       edx
0000000000006d11         lea        eax, dword [rdx+rcx]
0000000000006d14         mov        edx, ecx
0000000000006d16         sar        edx, 0x1f
0000000000006d19         sar        eax, 0x2
0000000000006d1c         sub        eax, edx
0000000000006d1e         lea        edx, dword [rax*8]
0000000000006d25         sub        edx, eax
0000000000006d27         sub        ecx, edx
0000000000006d29         add        ecx, 0x1
0000000000006d2c         jmp        __strftime_internal+1376
0000000000006d31         cmp        r11d, 0x45
0000000000006d35         je         __strftime_internal+592
0000000000006d3b         mov        ecx, dword [r13+0x18]
0000000000006d3f         mov        edi, 0x1
0000000000006d44         jmp        __strftime_internal+1376
0000000000006d49         cmp        r11d, 0x45
0000000000006d4d         je         __strftime_internal+592
0000000000006d53         mov        eax, dword [r13+0x18]
0000000000006d57         mov        ecx, 0x92492493
0000000000006d5c         lea        esi, dword [rax+6]
0000000000006d5f         mov        eax, esi
0000000000006d61         imul       ecx
0000000000006d63         lea        eax, dword [rdx+rsi]
0000000000006d66         mov        edx, esi
0000000000006d68         sar        edx, 0x1f
0000000000006d6b         sar        eax, 0x2
0000000000006d6e         sub        eax, edx
0000000000006d70         lea        edx, dword [rax*8]
0000000000006d77         sub        edx, eax
0000000000006d79         mov        eax, edx
0000000000006d7b         mov        edx, dword [r13+0x1c]
0000000000006d7f         sub        eax, esi
0000000000006d81         lea        esi, dword [rax+rdx+7]
0000000000006d85         mov        eax, esi
0000000000006d87         imul       ecx
0000000000006d89         jmp        sub_6360+402
0000000000006d8e         cmp        r11d, 0x45
0000000000006d92         je         __strftime_internal+592
0000000000006d98         test       r8b, r8b
0000000000006d9b         je         __strftime_internal+965
0000000000006da1         mov        byte [rsp+0x30], r8b
0000000000006da6         jmp        __strftime_internal+962
0000000000006dab         cmp        r11d, 0x45
0000000000006daf         je         sub_6a20+2074
0000000000006db5         mov        esi, dword [r13+0x14]
0000000000006db9         mov        edx, 0x51eb851f
0000000000006dbe         mov        eax, esi
0000000000006dc0         imul       edx
0000000000006dc2         mov        eax, edx
0000000000006dc4         mov        edx, esi
0000000000006dc6         sar        edx, 0x1f
0000000000006dc9         sar        eax, 0x5
0000000000006dcc         sub        eax, edx
0000000000006dce         mov        edx, esi
0000000000006dd0         lea        ecx, dword [rax+0x13]
0000000000006dd3         imul       eax, eax, 0x64
0000000000006dd6         sub        edx, eax
0000000000006dd8         mov        eax, edx
0000000000006dda         shr        eax, 0x1f
0000000000006ddd         test       ecx, ecx
0000000000006ddf         setg       dl
0000000000006de2         and        eax, edx
0000000000006de4         cmp        esi, 0xfffff894
0000000000006dea         setl       byte [rsp+0x38]
0000000000006def         sub        ecx, eax
0000000000006df1         cmp        esi, 0xfffff894
0000000000006df7         setge      al
0000000000006dfa         test       r15d, r15d
0000000000006dfd         jne        sub_6560+316
0000000000006e03         cmp        dword [rsp+0x2c], 0x2b
0000000000006e08         mov        r15d, dword [rsp+0x2c]
0000000000006e0d         jne        sub_6560+326

                     loc_6e13:
0000000000006e13         mov        edi, 0x2                                    ; CODE XREF=sub_6560+320
0000000000006e18         mov        edx, 0x63

                     loc_6e1d:
0000000000006e1d         cmp        edx, ecx                                    ; CODE XREF=sub_6a20+2477
0000000000006e1f         mov        byte [rsp+0x1+arg_37], 0x1
0000000000006e24         mov        r15d, 0x2b
0000000000006e2a         jb         loc_6559

                     loc_6e30:
0000000000006e30         cmp        r10d, edi                                   ; CODE XREF=sub_7690+164
0000000000006e33         mov        r15d, 0x2b
0000000000006e39         setg       byte [rsp+0x1+arg_37]
0000000000006e3e         xor        esi, esi
0000000000006e40         jmp        loc_6227
0000000000006e45         test       r11d, r11d
0000000000006e48         jne        __strftime_internal+592
0000000000006e4e         lea        rax, qword [aMdy]                           ; "%m/%d/%y"
0000000000006e55         mov        dword [rsp+0x38], 0xffffffff
0000000000006e5d         mov        qword [rsp+0x40], rax
0000000000006e62         jmp        __strftime_internal+1650
0000000000006e67         test       r11d, r11d
0000000000006e6a         jne        __strftime_internal+592
0000000000006e70         test       r15d, r15d
0000000000006e73         jne        sub_74d9+404
0000000000006e79         test       r10d, r10d
0000000000006e7c         jns        sub_74d9+404
0000000000006e82         lea        rax, qword [aYmd]                           ; "%Y-%m-%d"
0000000000006e89         mov        dword [rsp+0x38], 0x4
0000000000006e91         mov        r15d, 0x2b
0000000000006e97         mov        qword [rsp+0x40], rax
0000000000006e9c         jmp        __strftime_internal+1650
0000000000006ea1         movzx      ecx, byte [rbx-1]
0000000000006ea5         lea        r9, qword [rbx-1]
0000000000006ea9         mov        rdx, qword [rsp+8]                          ; CODE XREF=sub_74d9+364
0000000000006eae         mov        eax, 0x0
0000000000006eb3         sub        rdx, r14
0000000000006eb6         test       r10d, r10d
0000000000006eb9         cmovns     eax, r10d
0000000000006ebd         cmp        cl, 0x25
0000000000006ec0         cdqe
0000000000006ec2         jne        __strftime_internal+587
0000000000006ec8         test       rax, rax
0000000000006ecb         mov        ecx, 0x1
0000000000006ed0         mov        r12, r9
0000000000006ed3         cmovne     rcx, rax
0000000000006ed7         mov        r8d, 0x1
0000000000006edd         jmp        __strftime_internal+657
0000000000006ee2         cmp        r11d, 0x45
0000000000006ee6         je         __strftime_internal+592
0000000000006eec         mov        ecx, dword [r13+8]
0000000000006ef0         mov        edi, 0x2
0000000000006ef5         jmp        __strftime_internal+1376
0000000000006efa         cmp        r11d, 0x45
0000000000006efe         je         __strftime_internal+592
0000000000006f04         mov        ecx, dword [r13+4]
0000000000006f08         mov        edi, 0x2
0000000000006f0d         jmp        __strftime_internal+1376
0000000000006f12         cmp        r11d, 0x45
0000000000006f16         je         __strftime_internal+592
0000000000006f1c         cmp        r10d, 0xffffffff
0000000000006f20         je         sub_6a20+2641
0000000000006f26         cmp        r10d, 0x8
0000000000006f2a         jg         sub_7690+169
0000000000006f30         mov        ecx, dword [rsp+0x518]
0000000000006f37         mov        esi, r10d
0000000000006f3a         mov        edi, 0x66666667
0000000000006f3f         nop
0000000000006f40         mov        eax, ecx                                    ; CODE XREF=sub_6a20+1332
0000000000006f42         add        esi, 0x1
0000000000006f45         sar        ecx, 0x1f
0000000000006f48         imul       edi
0000000000006f4a         sar        edx, 0x2
0000000000006f4d         sub        edx, ecx
0000000000006f4f         cmp        esi, 0x9
0000000000006f52         mov        ecx, edx
0000000000006f54         jne        sub_6a20+1312
0000000000006f56         mov        edi, r10d                                   ; CODE XREF=sub_7690+176
0000000000006f59         jmp        __strftime_internal+1376
0000000000006f5e         cmp        r11d, 0x45
0000000000006f62         je         __strftime_internal+592
0000000000006f68         mov        ecx, dword [rsp+0x68]
0000000000006f6c         mov        edi, 0x2
0000000000006f71         jmp        __strftime_internal+1376
0000000000006f76         cmp        r11d, 0x45
0000000000006f7a         je         __strftime_internal+592
0000000000006f80         mov        ecx, dword [rsp+0x68]
0000000000006f84         test       r15d, r15d                                  ; CODE XREF=sub_6a20+1652, sub_6a20+1671
0000000000006f87         mov        edi, 0x2
0000000000006f8c         jne        __strftime_internal+1376
0000000000006f92         mov        r15d, 0x5f
0000000000006f98         jmp        __strftime_internal+1376
0000000000006f9d         cmp        r11d, 0x45
0000000000006fa1         je         __strftime_internal+592
0000000000006fa7         mov        eax, dword [r13+0x10]
0000000000006fab         mov        byte [rsp+0x40], 0x0
0000000000006fb0         mov        edi, 0x2
0000000000006fb5         cmp        eax, 0xffffffff
0000000000006fb8         lea        ecx, dword [rax+1]
0000000000006fbb         setl       byte [rsp+0x38]
0000000000006fc0         cmp        eax, 0xffffffff
0000000000006fc3         setge      al
0000000000006fc6         xor        esi, esi
0000000000006fc8         jmp        __strftime_internal+1399
0000000000006fcd         test       r10d, r10d
0000000000006fd0         mov        ecx, 0x0
0000000000006fd5         mov        eax, 0x1
0000000000006fda         cmovns     ecx, r10d
0000000000006fde         movsxd     rcx, ecx
0000000000006fe1         test       rcx, rcx
0000000000006fe4         cmove      rcx, rax
0000000000006fe8         mov        rax, qword [rsp+8]
0000000000006fed         sub        rax, r14
0000000000006ff0         cmp        rax, rcx
0000000000006ff3         jbe        __strftime_internal+204
0000000000006ff9         test       rbp, rbp
0000000000006ffc         je         __strftime_internal+1592
0000000000007002         cmp        r10d, 0x1
0000000000007006         jle        sub_6a20+1570
0000000000007008         movsxd     rdx, r10d
000000000000700b         mov        qword [rsp+0x30], rcx
0000000000007010         sub        rdx, 0x1
0000000000007014         cmp        r15d, 0x30
0000000000007018         lea        r12, qword [rbp+rdx]
000000000000701d         je         sub_74d9+277
0000000000007023         cmp        r15d, 0x2b
0000000000007027         je         sub_74d9+277
000000000000702d         mov        rdi, rbp
0000000000007030         mov        esi, 0x20
0000000000007035         mov        rbp, r12
0000000000007038         call       j_memset                                    ; memset
000000000000703d         mov        rcx, qword [rsp+0x30]
0000000000007042         mov        byte [rbp], 0xa                             ; CODE XREF=sub_6a20+1510, sub_74d9+298
0000000000007046         add        rbp, 0x1
000000000000704a         jmp        __strftime_internal+1592
000000000000704f         xor        eax, eax
0000000000007051         jmp        __strftime_internal+1608
0000000000007056         cmp        r11d, 0x45
000000000000705a         je         __strftime_internal+592
0000000000007060         mov        eax, dword [r13+0x1c]
0000000000007064         mov        byte [rsp+0x40], 0x0
0000000000007069         mov        edi, 0x3
000000000000706e         cmp        eax, 0xffffffff
0000000000007071         lea        ecx, dword [rax+1]
0000000000007074         setl       byte [rsp+0x38]
0000000000007079         cmp        eax, 0xffffffff
000000000000707c         setge      al
000000000000707f         xor        esi, esi
0000000000007081         jmp        __strftime_internal+1399
0000000000007086         cmp        r11d, 0x45
000000000000708a         je         __strftime_internal+592
0000000000007090         mov        ecx, dword [r13+8]
0000000000007094         jmp        sub_6a20+1380
0000000000007099         cmp        r11d, 0x45
000000000000709d         je         __strftime_internal+592
00000000000070a3         mov        ecx, dword [r13+0xc]
00000000000070a7         jmp        sub_6a20+1380
00000000000070ac         nop        dword [rax]

                     loc_70b0:
00000000000070b0         mov        eax, ecx                                    ; CODE XREF=__strftime_internal+1403, __strftime_internal+1411
00000000000070b2         neg        eax
00000000000070b4         cmp        byte [rsp+0x1+arg_2F], 0x0
00000000000070b9         cmovne     ecx, eax
00000000000070bc         jmp        loc_67e0
00000000000070c1         align      8

                     loc_70c8:
00000000000070c8         cmp        r15d, 0x2d                                  ; CODE XREF=sub_67b0+148
00000000000070cc         mov        byte [rsp+0x1+arg_2F], 0x2d
00000000000070d1         jne        loc_6864

                     loc_70d7:
00000000000070d7         test       r10d, r10d                                  ; CODE XREF=sub_6a20+2409
00000000000070da         mov        r11d, 0x0
00000000000070e0         mov        rax, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]
00000000000070e5         cmovns     r11d, r10d
00000000000070e9         mov        r12d, 0x1
00000000000070ef         movsxd     r11, r11d
00000000000070f2         test       r11, r11
00000000000070f5         cmovne     r12, r11
00000000000070f9         sub        rax, r14
00000000000070fc         cmp        rax, r12
00000000000070ff         jbe        __strftime_internal+204

0000000000007105         test       rbp, rbp
0000000000007108         je         loc_716c

000000000000710a         mov        eax, dword [rsp+0x1+arg_3F]
000000000000710e         test       eax, eax
0000000000007110         jne        loc_7164

0000000000007112         cmp        r11, 0x1
0000000000007116         jbe        loc_7164

0000000000007118         movsxd     rax, r10d
000000000000711b         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000711e         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000007123         lea        rcx, qword [rax-1]
0000000000007127         mov        qword [rsp+0x1+arg_57], r9
000000000000712c         mov        qword [rsp+0x1+arg_4F], r8
0000000000007131         mov        qword [rsp+0x1+arg_47], r11
0000000000007136         mov        dword [rsp+0x1+arg_37], r10d
000000000000713b         mov        rdx, rcx                                    ; argument "__n" for method j_memset
000000000000713e         mov        qword [rsp+0x1+arg_2F], rcx
0000000000007143         call       j_memset                                    ; memset
0000000000007148         mov        rcx, qword [rsp+0x1+arg_2F]
000000000000714d         mov        r9, qword [rsp+0x1+arg_57]
0000000000007152         mov        r8, qword [rsp+0x1+arg_4F]
0000000000007157         mov        r11, qword [rsp+0x1+arg_47]
000000000000715c         mov        r10d, dword [rsp+0x1+arg_37]
0000000000007161         add        rbp, rcx

                     loc_7164:
0000000000007164         mov        byte [rbp], r15b                            ; CODE XREF=sub_6a20+1776, sub_6a20+1782
0000000000007168         add        rbp, 0x1

                     loc_716c:
000000000000716c         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6a20+1768
0000000000007171         lea        rcx, qword [r9+0x17]
0000000000007175         add        r14, r12
0000000000007178         mov        r15d, 0x2d
000000000000717e         mov        r12, rbx
0000000000007181         sub        rcx, r8
0000000000007184         sub        rdx, r14
0000000000007187         jmp        loc_6985
000000000000718c         align      16

                     loc_7190:
0000000000007190         call       j_memcpy                                    ; memcpy, CODE XREF=__strftime_internal+781
0000000000007195         mov        rcx, qword [rsp+0x4f8+var_4C0]
000000000000719a         mov        r8, qword [rsp+0x4f8+var_4C8]
000000000000719f         jmp        loc_5fd2
00000000000071a4         align      8

                     loc_71a8:
00000000000071a8         mov        rdi, rbp                                    ; CODE XREF=__strftime_internal+1240
00000000000071ab         mov        qword [rsp+0x1+arg_27], rcx
00000000000071b0         call       memcpy_lowcase                              ; memcpy_lowcase
00000000000071b5         mov        rcx, qword [rsp+0x1+arg_27]
00000000000071ba         jmp        loc_61ab

                     loc_71bf:
00000000000071bf         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=__strftime_internal+1180, __strftime_internal+1190
00000000000071c2         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000071c7         call       j_memset                                    ; memset
00000000000071cc         mov        rbp, qword [rsp+0x1+arg_2F]
00000000000071d1         movzx      r8d, byte [rsp+0x1+arg_37]
00000000000071d7         mov        rcx, qword [rsp+0x1+arg_3F]
00000000000071dc         mov        r9, qword [rsp+0x1+arg_47]
00000000000071e1         jmp        loc_617e

                     loc_71e6:
00000000000071e6         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=__strftime_internal+710, __strftime_internal+720
00000000000071e9         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000071ee         mov        rbp, rbx
00000000000071f1         call       j_memset                                    ; memset
00000000000071f6         mov        r9, qword [rsp+0x4f8+var_4C0]
00000000000071fb         mov        rcx, qword [rsp+0x4f8+var_4B8]
0000000000007200         mov        r8, qword [rsp+0x4f8+var_4B0]
0000000000007205         jmp        loc_5fa5

                     loc_720a:
000000000000720a         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_67b0+540, sub_67b0+550
000000000000720d         mov        esi, 0x30                                   ; argument "__c" for method j_memset
0000000000007212         call       j_memset                                    ; memset
0000000000007217         mov        rbp, qword [rsp+0x1+arg_2F]
000000000000721c         mov        rcx, qword [rsp+0x1+arg_37]
0000000000007221         mov        r8, qword [rsp+0x1+arg_3F]
0000000000007226         jmp        loc_69f8
000000000000722b         mov        esi, 0x70                                   ; CODE XREF=__strftime_internal+1611
0000000000007230         mov        byte [rsp+0x30], 0x0
0000000000007235         jmp        __strftime_internal+965
000000000000723a         xor        edi, edi                                    ; CODE XREF=sub_6360+427, sub_6560+241, sub_6a20+911
000000000000723c         jmp        __strftime_internal+1420

                     loc_7241:
0000000000007241         mov        byte [rsp+0x1+arg_2F], 0x0                  ; CODE XREF=sub_6a20+2685

                     loc_7246:
0000000000007246         movsxd     r15, r12d                                   ; CODE XREF=sub_67b0+219
0000000000007249         cmp        r15, rdx
000000000000724c         jae        __strftime_internal+204

0000000000007252         test       rbp, rbp
0000000000007255         je         loc_7288

0000000000007257         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000725a         mov        rdx, r15                                    ; argument "__n" for method j_memset
000000000000725d         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000007262         mov        dword [rsp+0x1+arg_4F], r10d
0000000000007267         mov        qword [rsp+0x1+arg_47], r9
000000000000726c         add        rbp, r15
000000000000726f         mov        qword [rsp+0x1+arg_37], r8
0000000000007274         call       j_memset                                    ; memset
0000000000007279         mov        r10d, dword [rsp+0x1+arg_4F]
000000000000727e         mov        r9, qword [rsp+0x1+arg_47]
0000000000007283         mov        r8, qword [rsp+0x1+arg_37]

                     loc_7288:
0000000000007288         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6a20+2101
000000000000728d         mov        eax, r10d
0000000000007290         add        r14, r15
0000000000007293         sub        eax, r12d
0000000000007296         cmp        r10d, r12d
0000000000007299         mov        r10d, 0x0
000000000000729f         cmovg      r10d, eax
00000000000072a3         sub        rdx, r14
00000000000072a6         cmp        byte [rsp+0x1+arg_2F], 0x0
00000000000072ab         jne        loc_73d2

00000000000072b1         add        r9, 0x17
00000000000072b5         movsxd     r11, r10d
00000000000072b8         mov        r12, rbx
00000000000072bb         mov        rcx, r9
00000000000072be         mov        r15d, 0x5f
00000000000072c4         sub        rcx, r8
00000000000072c7         jmp        loc_6985

                     loc_72cc:
00000000000072cc         test       r10d, r10d                                  ; CODE XREF=sub_67b0+209
00000000000072cf         mov        r11d, 0x0
00000000000072d5         mov        r12d, 0x1
00000000000072db         cmovns     r11d, r10d
00000000000072df         movsxd     r11, r11d
00000000000072e2         test       r11, r11
00000000000072e5         cmovne     r12, r11
00000000000072e9         cmp        r12, rdx
00000000000072ec         jae        __strftime_internal+204

00000000000072f2         test       rbp, rbp
00000000000072f5         je         loc_7370

00000000000072f7         mov        edi, dword [rsp+0x1+arg_3F]
00000000000072fb         test       edi, edi
00000000000072fd         jne        loc_7364

00000000000072ff         cmp        r11, 0x1
0000000000007303         jbe        loc_7364

0000000000007305         movsxd     rdx, r10d
0000000000007308         mov        dword [rsp+0x1+arg_63], r10d
000000000000730d         mov        qword [rsp+0x1+arg_57], r8
0000000000007312         sub        rdx, 0x1
0000000000007316         cmp        r15d, 0x30
000000000000731a         mov        qword [rsp+0x1+arg_4F], rcx
000000000000731f         lea        rax, qword [rbp+rdx]
0000000000007324         mov        qword [rsp+0x1+arg_47], r11
0000000000007329         mov        qword [rsp+0x1+arg_37], rax
000000000000732e         je         loc_76ff

0000000000007334         cmp        r15d, 0x2b
0000000000007338         je         loc_76ff

000000000000733e         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000007341         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000007346         call       j_memset                                    ; memset
000000000000734b         mov        rbp, qword [rsp+0x1+arg_37]
0000000000007350         mov        r10d, dword [rsp+0x1+arg_63]
0000000000007355         mov        r8, qword [rsp+0x1+arg_57]
000000000000735a         mov        rcx, qword [rsp+0x1+arg_4F]
000000000000735f         mov        r11, qword [rsp+0x1+arg_47]

                     loc_7364:
0000000000007364         movzx      eax, byte [rsp+0x1+arg_2F]                  ; CODE XREF=sub_6a20+2269, sub_6a20+2275, sub_7690+149
0000000000007369         add        rbp, 0x1
000000000000736d         mov        byte [rbp-1], al

                     loc_7370:
0000000000007370         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6a20+2261
0000000000007375         add        r14, r12
0000000000007378         mov        r12, rbx
000000000000737b         sub        rdx, r14
000000000000737e         jmp        loc_6985

                     loc_7383:
0000000000007383         mov        r15d, 0x2b                                  ; CODE XREF=sub_67b0+169
0000000000007389         jmp        loc_70d7
000000000000738e         mov        r12, rbx                                    ; CODE XREF=sub_6560+389
0000000000007391         jmp        __strftime_internal+306

                     loc_7396:
0000000000007396         mov        eax, 0xfffff894                             ; CODE XREF=sub_6a20+563
000000000000739b         lea        ecx, dword [rdi+r8+0x76c]
00000000000073a3         sub        eax, r8d
00000000000073a6         cmp        edi, eax
00000000000073a8         setl       byte [rsp+0x1+arg_2F]
00000000000073ad         setge      al
00000000000073b0         test       r15d, r15d
00000000000073b3         je         loc_6540

00000000000073b9         cmp        r15d, 0x2b                                  ; CODE XREF=sub_6360+474
00000000000073bd         jne        loc_654f

                     loc_73c3:
00000000000073c3         mov        edi, 0x4                                    ; CODE XREF=sub_6360+489
00000000000073c8         mov        edx, 0x270f
00000000000073cd         jmp        loc_6e1d

                     loc_73d2:
00000000000073d2         movsxd     r15, r10d                                   ; CODE XREF=sub_6a20+2187
00000000000073d5         mov        r12d, 0x1
00000000000073db         test       r15, r15
00000000000073de         cmovne     r12, r15
00000000000073e2         cmp        r12, rdx
00000000000073e5         jae        __strftime_internal+204

00000000000073eb         test       rbp, rbp
00000000000073ee         je         loc_744b

00000000000073f0         mov        r11d, dword [rsp+0x1+arg_3F]
00000000000073f5         test       r11d, r11d
00000000000073f8         jne        loc_743f

00000000000073fa         cmp        r15, 0x1
00000000000073fe         jbe        loc_743f

0000000000007400         lea        rcx, qword [r15-1]
0000000000007404         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000007407         mov        esi, 0x20                                   ; argument "__c" for method j_memset
000000000000740c         mov        dword [rsp+0x1+arg_57], r10d
0000000000007411         mov        qword [rsp+0x1+arg_4F], r9
0000000000007416         mov        rdx, rcx                                    ; argument "__n" for method j_memset
0000000000007419         mov        qword [rsp+0x1+arg_47], r8
000000000000741e         mov        qword [rsp+0x1+arg_37], rcx
0000000000007423         call       j_memset                                    ; memset
0000000000007428         mov        rcx, qword [rsp+0x1+arg_37]
000000000000742d         mov        r10d, dword [rsp+0x1+arg_57]
0000000000007432         mov        r9, qword [rsp+0x1+arg_4F]
0000000000007437         mov        r8, qword [rsp+0x1+arg_47]
000000000000743c         add        rbp, rcx

                     loc_743f:
000000000000743f         movzx      eax, byte [rsp+0x1+arg_2F]                  ; CODE XREF=sub_6a20+2520, sub_6a20+2526
0000000000007444         add        rbp, 0x1
0000000000007448         mov        byte [rbp-1], al

                     loc_744b:
000000000000744b         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6a20+2510
0000000000007450         add        r9, 0x17
0000000000007454         add        r14, r12
0000000000007457         mov        rcx, r9
000000000000745a         mov        r11, r15
000000000000745d         mov        r12, rbx
0000000000007460         sub        rcx, r8
0000000000007463         mov        r15d, 0x5f
0000000000007469         sub        rdx, r14
000000000000746c         jmp        loc_6985
0000000000007471         mov        ecx, dword [rsp+0x518]                      ; CODE XREF=sub_6a20+1280
0000000000007478         mov        edi, 0x9
000000000000747d         mov        r10d, 0x9
0000000000007483         jmp        __strftime_internal+1376
0000000000007488         mov        r12, rbx                                    ; CODE XREF=sub_6360+243
000000000000748b         mov        r9, rbx
000000000000748e         mov        r8d, 0x1
0000000000007494         jmp        __strftime_internal+657

                     loc_7499:
0000000000007499         cmp        r15d, 0x5f                                  ; CODE XREF=sub_6a20+233
000000000000749d         je         loc_7241

00000000000074a3         movsxd     rax, dword [rsp+0x1+arg_3F]
00000000000074a8         cmp        rax, rdx
00000000000074ab         jae        __strftime_internal+204

00000000000074b1         movsxd     r9, r12d
00000000000074b4         mov        r12, rbx
00000000000074b7         jmp        loc_693e

                     loc_74bc:
00000000000074bc         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_6360+95, sub_6360+105
00000000000074bf         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000074c4         call       j_memset                                    ; memset
00000000000074c9         mov        rbp, qword [rsp+80]
00000000000074ce         mov        r11, qword [rsp+88]
00000000000074d3         jmp        loc_63e6
00000000000074d8         db  0x41 ; 'A'                                         ; CODE XREF=sub_6a20+401


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_A7: int8_t, 175
        ;    arg_A4: int8_t, 172
        ;    arg_A2: int16_t, 170
        ;    arg_63: int32_t, 107
        ;    arg_57: int64_t, 95
        ;    arg_4F: int64_t, 87
        ;    arg_47: int64_t, 79
        ;    arg_3F: int64_t, 71
        ;    arg_37: int64_t, 63
        ;    arg_2F: int64_t, 55
        ;    arg_27: int64_t, 47
        ;    arg_23: int32_t, 43
        ;    var_FFFFFFFFFFFFFFF9: int64_t, 7


                     sub_74d9:
00000000000074d9         sub        esp, 0x1
00000000000074dc         mov        edx, 0x16d
00000000000074e1         test       r12b, 0x3
00000000000074e5         jne        loc_7523

00000000000074e7         mov        eax, r12d
00000000000074ea         mov        edx, 0x51eb851f
00000000000074ef         imul       edx
00000000000074f1         mov        eax, edx
00000000000074f3         mov        edx, r12d
00000000000074f6         sar        edx, 0x1f
00000000000074f9         sar        eax, 0x5
00000000000074fc         sub        eax, edx
00000000000074fe         mov        edx, 0x16e
0000000000007503         imul       eax, eax, 0x64
0000000000007506         cmp        r12d, eax
0000000000007509         jne        loc_7523

000000000000750b         mov        eax, r12d
000000000000750e         mov        ecx, 0x190
0000000000007513         cdq
0000000000007514         idiv       ecx
0000000000007516         cmp        edx, 0x1
0000000000007519         sbb        edx, edx
000000000000751b         not        edx
000000000000751d         add        edx, 0x16e

                     loc_7523:
0000000000007523         add        r8d, edx                                    ; CODE XREF=sub_74d9+12, sub_74d9+48
0000000000007526         mov        edx, 0x92492493
000000000000752b         mov        ecx, r8d
000000000000752e         sub        ecx, dword [rsp+0x1+arg_2F]
0000000000007532         add        ecx, 0x17e
0000000000007538         mov        eax, ecx
000000000000753a         sub        r8d, ecx
000000000000753d         imul       edx
000000000000753f         lea        eax, dword [rdx+rcx]
0000000000007542         mov        edx, ecx
0000000000007544         sar        edx, 0x1f
0000000000007547         sar        eax, 0x2
000000000000754a         sub        eax, edx
000000000000754c         lea        edx, dword [rax*8]
0000000000007553         sub        edx, eax
0000000000007555         lea        ecx, dword [r8+rdx+3]
000000000000755a         mov        r8d, 0xffffffff
0000000000007560         jmp        loc_6c4f
0000000000007565         imul       esi, esi, 0x64                              ; CODE XREF=sub_6560+527, sub_6560+545
0000000000007568         mov        byte [rsp+0x40], 0x1
000000000000756d         mov        edi, 0x9
0000000000007572         imul       eax, r12d, 0x2710
0000000000007579         add        eax, esi
000000000000757b         mov        esi, 0x14
0000000000007580         add        ecx, eax
0000000000007582         movzx      eax, byte [rsp+0x38]
0000000000007587         xor        eax, 0x1
000000000000758a         jmp        __strftime_internal+1399

                     loc_758f:
000000000000758f         mov        eax, ecx                                    ; CODE XREF=sub_6a20+573
0000000000007591         mov        edx, 0x92492493
0000000000007596         mov        edi, 0x2
000000000000759b         imul       edx
000000000000759d         lea        eax, dword [rdx+rcx]
00000000000075a0         sar        ecx, 0x1f
00000000000075a3         sar        eax, 0x2
00000000000075a6         sub        eax, ecx
00000000000075a8         mov        ecx, eax
00000000000075aa         add        ecx, 0x1
00000000000075ad         jmp        loc_6210
00000000000075b2         movzx      eax, byte [rsp+0x38]                        ; CODE XREF=sub_6560+511, sub_6560+553
00000000000075b7         mov        byte [rsp+0x40], 0x1
00000000000075bc         mov        edi, 0x6
00000000000075c1         imul       ecx, r12d, 0x64
00000000000075c5         xor        eax, 0x1
00000000000075c8         add        ecx, esi
00000000000075ca         mov        esi, 0x4
00000000000075cf         jmp        __strftime_internal+1399
00000000000075d4         mov        rdi, rbp                                    ; CODE XREF=__strftime_internal+1543, __strftime_internal+1553
00000000000075d7         mov        esi, 0x30
00000000000075dc         mov        rbp, r12
00000000000075df         call       j_memset                                    ; memset
00000000000075e4         mov        rcx, qword [rsp+0x30]
00000000000075e9         jmp        __strftime_internal+1580
00000000000075ee         mov        rdi, rbp                                    ; CODE XREF=sub_6a20+1533, sub_6a20+1543
00000000000075f1         mov        esi, 0x30
00000000000075f6         mov        rbp, r12
00000000000075f9         call       j_memset                                    ; memset
00000000000075fe         mov        rcx, qword [rsp+0x30]
0000000000007603         jmp        sub_6a20+1570

                     loc_7608:
0000000000007608         call       j_memcpy                                    ; memcpy, CODE XREF=sub_6560+213
000000000000760d         mov        rcx, qword [rsp+48]
0000000000007612         jmp        loc_6645

                     loc_7617:
0000000000007617         mov        rsi, qword [rsp+32]                         ; argument #2 for method memcpy_lowcase, CODE XREF=sub_6560+186
000000000000761c         mov        rdx, r12                                    ; argument #3 for method memcpy_lowcase
000000000000761f         mov        rdi, rbp                                    ; argument #1 for method memcpy_lowcase
0000000000007622         mov        qword [rsp+48], rcx
0000000000007627         call       memcpy_lowcase                              ; memcpy_lowcase
000000000000762c         mov        rcx, qword [rsp+48]
0000000000007631         jmp        loc_6645
0000000000007636         mov        byte [rsp+0x30], al                         ; CODE XREF=sub_6560+359
000000000000763a         jmp        __strftime_internal+592
000000000000763f         movzx      ecx, byte [rbx]                             ; CODE XREF=sub_6560+537
0000000000007642         mov        r9, rbx
0000000000007645         jmp        sub_6a20+1161
000000000000764a         lea        rcx, qword [rbx+2]                          ; CODE XREF=sub_6a20+273
000000000000764e         mov        r8d, 0x1
0000000000007654         mov        rdx, rcx                                    ; CODE XREF=sub_74d9+402
0000000000007657         add        rcx, 0x1
000000000000765b         movzx      eax, byte [rcx-1]
000000000000765f         add        r8, 0x1
0000000000007663         cmp        al, 0x3a
0000000000007665         jne        sub_6a20+285
000000000000766b         jmp        sub_74d9+379
000000000000766d         mov        esi, r10d                                   ; CODE XREF=sub_6a20+1107, sub_6a20+1116
0000000000007670         mov        eax, 0x0
0000000000007675         sub        esi, 0x6
0000000000007678         cmovns     eax, esi
000000000000767b         mov        dword [rsp+0x38], eax
000000000000767f         lea        rax, qword [aYmd]                           ; "%Y-%m-%d"
0000000000007686         mov        qword [rsp+0x40], rax
000000000000768b         jmp        __strftime_internal+1650


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7690:
0000000000007690         imul       ecx, r12d, 0x64                             ; CODE XREF=sub_6560+517
0000000000007694         xor        esi, esi
0000000000007696         mov        byte [rsp+64], 0x1
000000000000769b         mov        edi, 0x5
00000000000076a0         add        ecx, eax
00000000000076a2         movzx      eax, byte [rsp+56]
00000000000076a7         xor        eax, 0x1
00000000000076aa         jmp        __strftime_internal+1399
                        ; endp

                     loc_76af:
00000000000076af         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_6560+138, sub_6560+148
00000000000076b2         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000076b7         call       j_memset                                    ; memset
00000000000076bc         mov        rbp, qword [rsp+56]
00000000000076c1         movzx      r8d, byte [rsp+64]
00000000000076c7         mov        rcx, qword [rsp+72]
00000000000076cc         jmp        loc_6617

                     loc_76d1:
00000000000076d1         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_67b0+336, sub_67b0+346
00000000000076d4         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000076d9         mov        rbp, r12
00000000000076dc         call       j_memset                                    ; memset
00000000000076e1         mov        rcx, qword [rsp+0x1+arg_37]
00000000000076e6         mov        r9, qword [rsp+0x1+arg_47]
00000000000076eb         mov        r8, qword [rsp+0x1+arg_4F]
00000000000076f0         jmp        loc_692f
00000000000076f5         mov        esi, 0x30                                   ; CODE XREF=sub_6360+294, sub_6360+309
00000000000076fa         jmp        sub_6360+315

                     loc_76ff:
00000000000076ff         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_6a20+2318, sub_6a20+2328
0000000000007702         mov        esi, 0x30                                   ; argument "__c" for method j_memset
0000000000007707         call       j_memset                                    ; memset
000000000000770c         mov        rbp, qword [rsp+0x1+arg_37]
0000000000007711         mov        r11, qword [rsp+0x1+arg_47]
0000000000007716         mov        rcx, qword [rsp+0x1+arg_4F]
000000000000771b         mov        r8, qword [rsp+0x1+arg_57]
0000000000007720         mov        r10d, dword [rsp+0x1+arg_63]
0000000000007725         jmp        loc_7364

                     loc_772a:
000000000000772a         mov        byte [rsp+0x1+arg_2F], 0x0                  ; CODE XREF=sub_6a20+680
000000000000772f         mov        edi, 0x2
0000000000007734         jmp        loc_6e30
0000000000007739         mov        ecx, dword [rsp+0x518]                      ; CODE XREF=sub_6a20+1290
0000000000007740         jmp        sub_6a20+1334

                     loc_7745:
0000000000007745         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=__strftime_internal+227
                        ; endp

                     loc_774a:
000000000000774a         add        ecx, 0x64                                   ; CODE XREF=sub_6a20+649
000000000000774d         test       r15d, r15d
0000000000007750         je         loc_6cba

0000000000007756         jmp        loc_6692
000000000000775b         xor        edi, edi                                    ; CODE XREF=__strftime_internal+981
000000000000775d         jmp        __strftime_internal+1436
0000000000007762         nop        dword [rax]                                 ; End of unwind block (FDE at 0x10dac)
0000000000007766         nop        word [cs:rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_11: int8_t, -17


                     nstrftime:
0000000000007770         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0x10e24), CODE XREF=human_time+105
0000000000007774         mov        rax, qword [fs:0x28]
000000000000777d         mov        qword [rsp+0x18+var_10], rax
0000000000007782         xor        eax, eax
0000000000007784         mov        byte [rsp+0x18+var_11], 0x0
0000000000007789         push       r9
000000000000778b         xor        r9d, r9d
000000000000778e         push       r8
0000000000007790         xor        r8d, r8d
0000000000007793         lea        rax, qword [rsp+0x28+var_11]
0000000000007798         push       rax
0000000000007799         push       0xffffffffffffffff
000000000000779b         call       __strftime_internal                         ; __strftime_internal
00000000000077a0         add        rsp, 0x20
00000000000077a4         mov        rdx, qword [rsp+0x18+var_10]
00000000000077a9         xor        rdx, qword [fs:0x28]
00000000000077b2         jne        loc_77b9

00000000000077b4         add        rsp, 0x18
00000000000077b8         ret
                        ; endp

                     loc_77b9:
00000000000077b9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=nstrftime+66
                        ; endp
00000000000077be         align      64                                          ; End of unwind block (FDE at 0x10e24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
00000000000077c0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x10e54), CODE XREF=main+57
00000000000077c3         push       rbx
00000000000077c4         je         loc_783d

00000000000077c6         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
00000000000077cb         mov        rbx, rdi
00000000000077ce         call       j_strrchr                                   ; strrchr
00000000000077d3         test       rax, rax
00000000000077d6         je         loc_782d

00000000000077d8         lea        r8, qword [rax+1]
00000000000077dc         mov        rdx, r8
00000000000077df         sub        rdx, rbx
00000000000077e2         cmp        rdx, 0x6
00000000000077e6         jle        loc_782d

00000000000077e8         lea        rsi, qword [rax-6]
00000000000077ec         lea        rdi, qword [aLibs]                          ; "/.libs/"
00000000000077f3         mov        ecx, 0x7
00000000000077f8         rep  cmpsb byte [rsi], byte [rdi]
00000000000077fa         seta       dl
00000000000077fd         sbb        dl, 0x0
0000000000007800         test       dl, dl
0000000000007802         jne        loc_782d

0000000000007804         lea        rdi, qword [aLibs+8]                        ; 0xf640
000000000000780b         mov        ecx, 0x3
0000000000007810         mov        rsi, r8
0000000000007813         mov        rbx, r8
0000000000007816         rep  cmpsb byte [rsi], byte [rdi]
0000000000007818         seta       dl
000000000000781b         sbb        dl, 0x0
000000000000781e         test       dl, dl
0000000000007820         jne        loc_782d

0000000000007822         lea        rbx, qword [rax+4]
0000000000007826         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_782d:
000000000000782d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000007834         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000783b         pop        rbx
000000000000783c         ret
                        ; endp

                     loc_783d:
000000000000783d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000007844         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000784b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000007850         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000007855         call       j_fwrite                                    ; fwrite
000000000000785a         call       j_abort                                     ; abort
                        ; endp
000000000000785f         align      32                                          ; End of unwind block (FDE at 0x10e54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000007860         push       rbp                                         ; Begin of unwind block (FDE at 0x10e74), CODE XREF=sub_8090+2597, sub_8090+2619
0000000000007861         push       rbx
0000000000007862         mov        rbp, rdi
0000000000007865         mov        ebx, esi
0000000000007867         sub        rsp, 0x8
000000000000786b         call       locale_charset                              ; locale_charset
0000000000007870         movzx      edx, byte [rax]
0000000000007873         and        edx, 0xffffffdf
0000000000007876         cmp        dl, 0x55
0000000000007879         je         loc_78f0

000000000000787b         cmp        dl, 0x47
000000000000787e         je         loc_78a0

                     loc_7880:
0000000000007880         lea        rax, qword [aLibs+27]                       ; 0xf653, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000007887         lea        rdx, qword [a4096Len+22]                    ; 0xfeee
000000000000788e         cmp        ebx, 0x9
0000000000007891         cmovne     rax, rdx
0000000000007895         add        rsp, 0x8
0000000000007899         pop        rbx
000000000000789a         pop        rbp
000000000000789b         ret
                        ; endp
000000000000789c         align      32

                     loc_78a0:
00000000000078a0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
00000000000078a4         and        edx, 0xffffffdf
00000000000078a7         cmp        dl, 0x42
00000000000078aa         jne        loc_7880

00000000000078ac         cmp        byte [rax+2], 0x31
00000000000078b0         jne        loc_7880

00000000000078b2         cmp        byte [rax+3], 0x38
00000000000078b6         jne        loc_7880

00000000000078b8         cmp        byte [rax+4], 0x30
00000000000078bc         jne        loc_7880

00000000000078be         cmp        byte [rax+5], 0x33
00000000000078c2         jne        loc_7880

00000000000078c4         cmp        byte [rax+6], 0x30
00000000000078c8         jne        loc_7880

00000000000078ca         cmp        byte [rax+7], 0x0
00000000000078ce         jne        loc_7880

00000000000078d0         cmp        byte [rbp], 0x60
00000000000078d4         lea        rax, qword [aLibs+20]                       ; 0xf64c
00000000000078db         lea        rdx, qword [aLibs+24]                       ; 0xf650
00000000000078e2         cmovne     rax, rdx
00000000000078e6         add        rsp, 0x8
00000000000078ea         pop        rbx
00000000000078eb         pop        rbp
00000000000078ec         ret
                        ; endp
00000000000078ed         align      16

                     loc_78f0:
00000000000078f0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
00000000000078f4         and        edx, 0xffffffdf
00000000000078f7         cmp        dl, 0x54
00000000000078fa         jne        loc_7880

00000000000078fc         movzx      edx, byte [rax+2]
0000000000007900         and        edx, 0xffffffdf
0000000000007903         cmp        dl, 0x46
0000000000007906         jne        loc_7880

000000000000790c         cmp        byte [rax+3], 0x2d
0000000000007910         jne        loc_7880

0000000000007916         cmp        byte [rax+4], 0x38
000000000000791a         jne        loc_7880

0000000000007920         cmp        byte [rax+5], 0x0
0000000000007924         jne        loc_7880

000000000000792a         cmp        byte [rbp], 0x60
000000000000792e         lea        rax, qword [aLibs+12]                       ; 0xf644
0000000000007935         lea        rdx, qword [aLibs+16]                       ; 0xf648
000000000000793c         cmovne     rax, rdx
0000000000007940         add        rsp, 0x8
0000000000007944         pop        rbx
0000000000007945         pop        rbp
0000000000007946         ret
                        ; endp
0000000000007947         align      16                                          ; End of unwind block (FDE at 0x10e74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000007950         push       r15                                         ; Begin of unwind block (FDE at 0x10eb8), CODE XREF=sub_8090+1165, sub_8090+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000007952         push       r14
0000000000007954         mov        r15d, r8d
0000000000007957         push       r13
0000000000007959         push       r12
000000000000795b         mov        r14, rdi
000000000000795e         push       rbp
000000000000795f         push       rbx
0000000000007960         mov        ebx, r9d
0000000000007963         mov        r13, rsi
0000000000007966         mov        rbp, rcx
0000000000007969         and        ebx, 0x2
000000000000796c         sub        rsp, 0xb8
0000000000007973         mov        rax, qword [rsp+0xe8+arg_0]
000000000000797b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000007980         mov        dword [rsp+0xe8+var_E0], r8d
0000000000007985         mov        dword [rsp+0xe8+var_70], r9d
000000000000798a         mov        qword [rsp+0xe8+var_C8], rax
000000000000798f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000007997         mov        qword [rsp+0xe8+var_80], rax
000000000000799c         mov        rax, qword [rsp+0xe8+arg_10]
00000000000079a4         mov        qword [rsp+0xe8+var_88], rax
00000000000079a9         mov        rax, qword [fs:0x28]
00000000000079b2         mov        qword [rsp+0xe8+var_40], rax
00000000000079ba         xor        eax, eax
00000000000079bc         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000079c1         cmp        r15d, 0xa
00000000000079c5         mov        qword [rsp+0xe8+var_90], rax
00000000000079ca         ja         loc_8b7f

00000000000079d0         lea        rcx, qword [switch_table_f6c0]              ; switch_table_f6c0
00000000000079d7         mov        edx, r15d
00000000000079da         movsxd     rax, dword [rcx+rdx*4]
00000000000079de         add        rax, rcx
00000000000079e1         jmp        rax                                         ; switch statement using table at 0xf6c0, with 11 cases, 0x79e3,0x85b4,0x8610,0x8665,0x86aa,0x86e4,0x878a,0x87c4,0x89b8

                     loc_79e3:
00000000000079e3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_8090+1318
00000000000079e8         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000079ed         xor        r12d, r12d
00000000000079f0         mov        qword [rsp+0xe8+var_98], 0x0
00000000000079f9         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000079fe         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_7a03:
0000000000007a03         lea        rax, qword [a4096Len+22]                    ; 0xfeee, CODE XREF=sub_8090+1876
0000000000007a0a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007a13         xor        r15d, r15d
0000000000007a16         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000007a1e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_7a23:
0000000000007a23         xor        r11d, r11d                                  ; CODE XREF=sub_8090+180, sub_8090+1400, sub_8090+1488, sub_8090+1557, sub_8090+1615, sub_8090+1781, sub_8090+1839, sub_8090+2408, sub_8090+2485
0000000000007a26         mov        rax, rbp
0000000000007a29         mov        r8d, r12d
0000000000007a2c         mov        rbp, r11
0000000000007a2f         mov        r11, rax
0000000000007a32         nop        word [rax+rax]

                     loc_7a38:
0000000000007a38         cmp        r11, rbp                                    ; CODE XREF=sub_7b40+194
0000000000007a3b         setne      r12b
0000000000007a3f         cmp        r11, 0xffffffffffffffff
0000000000007a43         jne        loc_7a52

0000000000007a45         mov        rax, qword [rsp+0xe8+var_D8]
0000000000007a4a         cmp        byte [rax+rbp], 0x0
0000000000007a4e         setne      r12b

                     loc_7a52:
0000000000007a52         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000007a55         je         loc_80b0

0000000000007a5b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000007a60         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000007a65         lea        r9, qword [rdi+rbp]
0000000000007a69         setne      al
0000000000007a6c         and        al, byte [rsp+0xe8+var_DB]
0000000000007a70         mov        r10d, eax
0000000000007a73         je         loc_7b20

0000000000007a79         mov        rax, qword [rsp+0xe8+var_D0]
0000000000007a7e         test       rax, rax
0000000000007a81         je         loc_7eb0

0000000000007a87         cmp        r11, 0xffffffffffffffff
0000000000007a8b         lea        rbx, qword [rbp+rax]
0000000000007a90         jne        loc_7ac0

0000000000007a92         cmp        rax, 0x1
0000000000007a96         jbe        loc_7ac0

0000000000007a98         mov        byte [rsp+0xe8+var_B0], r8b
0000000000007a9d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000007aa2         mov        qword [rsp+0xe8+var_C0], r9
0000000000007aa7         call       j_strlen                                    ; strlen
0000000000007aac         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000007ab2         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000007ab8         mov        r11, rax
0000000000007abb         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_7ac0:
0000000000007ac0         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000007ac3         mov        byte [rsp+0xe8+var_C0], r10b
0000000000007ac8         ja         loc_8080

0000000000007ace         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000007ad3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000007ad8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000007adb         mov        qword [rsp+0xe8+var_A8], r11
0000000000007ae0         mov        byte [rsp+0xe8+var_B0], r8b
0000000000007ae5         mov        qword [rsp+0xe8+var_B8], r9
0000000000007aea         call       j_memcmp                                    ; memcmp
0000000000007aef         test       eax, eax
0000000000007af1         mov        r9, qword [rsp+0xe8+var_B8]
0000000000007af6         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000007afc         mov        r11, qword [rsp+0xe8+var_A8]
0000000000007b01         jne        loc_8080

0000000000007b07         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000007b0c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000007b12         jne        loc_8a95

0000000000007b18         nop        dword [rax+rax]

                     loc_7b20:
0000000000007b20         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_8070+19
0000000000007b24         cmp        bl, 0x7e
0000000000007b27         ja         loc_7e48

0000000000007b2d         lea        rcx, qword [switch_table_f6c0+44]           ; 0xf6ec
0000000000007b34         movzx      edx, bl
0000000000007b37         movsxd     rax, dword [rcx+rdx*4]
0000000000007b3b         add        rax, rcx
0000000000007b3e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7b40:
0000000000007b40         xor        r10d, r10d
0000000000007b43         cmp        r11, 0x1
0000000000007b47         setne      al
0000000000007b4a         cmp        r11, 0xffffffffffffffff
0000000000007b4e         jne        loc_7b5c

0000000000007b50         mov        rax, qword [rsp+arg_8]
0000000000007b55         cmp        byte [rax+1], 0x0
0000000000007b59         setne      al

                     loc_7b5c:
0000000000007b5c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7b40+14
0000000000007b61         sete       dl
0000000000007b64         test       al, al
0000000000007b66         je         loc_7db8

                     loc_7b6c:
0000000000007b6c         xor        r12d, r12d                                  ; CODE XREF=sub_7db0+11
0000000000007b6f         xor        eax, eax
0000000000007b71         nop        dword [rax]
                        ; endp

                     loc_7b78:
0000000000007b78         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_7d60+50, sub_7e30+119
0000000000007b7d         jne        loc_7c92

0000000000007b83         test       dl, dl
0000000000007b85         jne        loc_7c92

                     loc_7b8b:
0000000000007b8b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_7c40+87
0000000000007b90         test       rsi, rsi
0000000000007b93         je         loc_7ba9

0000000000007b95         mov        edx, ebx
0000000000007b97         shr        dl, 0x5
0000000000007b9a         movzx      edx, dl
0000000000007b9d         mov        edx, dword [rsi+rdx*4]
0000000000007ba0         bt         edx, ebx
0000000000007ba3         jb         loc_7cf3

                     loc_7ba9:
0000000000007ba9         test       r10b, r10b                                  ; CODE XREF=sub_7b40+83, sub_7c40+93
0000000000007bac         jne        loc_7cf3

0000000000007bb2         xor        eax, 0x1
0000000000007bb5         add        rbp, 0x1
0000000000007bb9         and        eax, r8d

                     loc_7bbc:
0000000000007bbc         test       al, al                                      ; CODE XREF=sub_8090+936
0000000000007bbe         je         loc_7be0

0000000000007bc0         cmp        r13, r15
0000000000007bc3         jbe        loc_7bca

0000000000007bc5         mov        byte [r14+r15], 0x27

                     loc_7bca:
0000000000007bca         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7b40+131
0000000000007bce         cmp        r13, rax
0000000000007bd1         jbe        loc_7bd9

0000000000007bd3         mov        byte [r14+r15+1], 0x27

                     loc_7bd9:
0000000000007bd9         add        r15, 0x2                                    ; CODE XREF=sub_7b40+145
0000000000007bdd         xor        r8d, r8d

                     loc_7be0:
0000000000007be0         cmp        r15, r13                                    ; CODE XREF=sub_7b40+126, sub_7c40+275, sub_8090+869
0000000000007be3         jae        loc_7be9

0000000000007be5         mov        byte [r14+r15], bl

                     loc_7be9:
0000000000007be9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_7b40+163
0000000000007bee         add        r15, 0x1
0000000000007bf2         mov        eax, 0x0
0000000000007bf7         test       r12b, r12b
0000000000007bfa         cmove      edi, eax
0000000000007bfd         mov        byte [rsp+0xe8+var_DA], dil
0000000000007c02         jmp        loc_7a38
0000000000007c07         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7c10:
0000000000007c10         xor        r10d, r10d
0000000000007c13         mov        eax, dword [rsp+arg_0]
0000000000007c17         cmp        eax, 0x2
0000000000007c1a         je         loc_81d8

0000000000007c20         cmp        eax, 0x5
0000000000007c23         je         loc_8198

0000000000007c29         cmp        eax, 0x2
0000000000007c2c         mov        ebx, 0x3f
0000000000007c31         sete       dl
0000000000007c34         xor        r12d, r12d
0000000000007c37         xor        eax, eax
0000000000007c39         jmp        sub_7b40+56
                        ; endp
0000000000007c3e         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7c40:
0000000000007c40         xor        r10d, r10d
0000000000007c43         cmp        dword [rsp+arg_0], 0x2
0000000000007c48         je         loc_8150

0000000000007c4e         mov        byte [rsp+arg_74], r12b
0000000000007c53         xor        edx, edx
0000000000007c55         xor        eax, eax
0000000000007c57         mov        ebx, 0x27
0000000000007c5c         jmp        sub_7b40+56
                        ; endp
0000000000007c61         nop        dword [rax]
0000000000007c68         mov        edx, 0x9
0000000000007c6d         mov        ebx, 0x74

                     loc_7c72:
0000000000007c72         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7e00+10, sub_7ef0+37, sub_8030+53
0000000000007c77         sete       al
0000000000007c7a         and        al, byte [rsp+arg_7]
0000000000007c7e         jne        sub_7db0+30

0000000000007c84         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_7c40+114
0000000000007c89         jne        loc_7cf0

                     loc_7c8b:
0000000000007c8b         mov        ebx, edx                                    ; CODE XREF=sub_7d60+18
0000000000007c8d         xor        r12d, r12d
0000000000007c90         xor        eax, eax
                        ; endp

                     loc_7c92:
0000000000007c92         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_7b40+61, sub_7b40+69
0000000000007c97         jne        loc_7b8b

0000000000007c9d         jmp        loc_7ba9
0000000000007ca2         nop        word [rax+rax]
0000000000007ca8         mov        edx, 0x8
0000000000007cad         mov        ebx, 0x62
0000000000007cb2         jmp        sub_7c40+68
0000000000007cb4         nop        dword [rax]
0000000000007cb8         cmp        dword [rsp+8], 0x2
0000000000007cbd         je         sub_8090                                    ; sub_8090
0000000000007cc3         cmp        byte [rsp+0xd], 0x0
0000000000007cc8         je         sub_7ed0+16

                     loc_7cce:
0000000000007cce         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7ed0+8
0000000000007cd3         je         loc_7ee0

0000000000007cd9         cmp        qword [rsp+arg_10], 0x0
0000000000007cdf         jne        loc_809b

0000000000007ce5         mov        ebx, 0x5c
0000000000007cea         nop        word [rax+rax]
                        ; endp

                     loc_7cf0:
0000000000007cf0         xor        r12d, r12d                                  ; CODE XREF=sub_7c40+73, sub_8030+29
                        ; endp

                     loc_7cf3:
0000000000007cf3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7b40+99, sub_7b40+108
0000000000007cf8         sete       dl
0000000000007cfb         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000007d00         mov        eax, edx
0000000000007d02         jne        loc_8558

0000000000007d08         mov        eax, r8d
0000000000007d0b         xor        eax, 0x1
0000000000007d0e         and        al, dl
0000000000007d10         je         loc_7d41

0000000000007d12         cmp        r13, r15
0000000000007d15         jbe        loc_7d1c

0000000000007d17         mov        byte [r14+r15], 0x27

                     loc_7d1c:
0000000000007d1c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_7c40+213
0000000000007d20         cmp        r13, rdx
0000000000007d23         jbe        loc_7d2b

0000000000007d25         mov        byte [r14+r15+1], 0x24

                     loc_7d2b:
0000000000007d2b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_7c40+227
0000000000007d2f         cmp        r13, rdx
0000000000007d32         jbe        loc_7d3a

0000000000007d34         mov        byte [r14+r15+2], 0x27

                     loc_7d3a:
0000000000007d3a         add        r15, 0x3                                    ; CODE XREF=sub_7c40+242
0000000000007d3e         mov        r8d, eax

                     loc_7d41:
0000000000007d41         cmp        r13, r15                                    ; CODE XREF=sub_7c40+208
0000000000007d44         jbe        loc_7d4b

0000000000007d46         mov        byte [r14+r15], 0x5c

                     loc_7d4b:
0000000000007d4b         add        r15, 0x1                                    ; CODE XREF=sub_7c40+260
0000000000007d4f         add        rbp, 0x1
0000000000007d53         jmp        loc_7be0
0000000000007d58         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7d60:
0000000000007d60         cmp        byte [rsp+arg_5], 0x0
0000000000007d65         jne        loc_7f33

0000000000007d6b         xor        edx, edx
0000000000007d6d         test       byte [rsp+arg_70], 0x1
0000000000007d72         je         loc_7c8b

0000000000007d78         add        rbp, 0x1
0000000000007d7c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000007d81         nop        dword [rax]
0000000000007d88         cmp        dword [rsp+8], 0x2
0000000000007d8d         sete       dl
0000000000007d90         xor        eax, eax
0000000000007d92         jmp        sub_7b40+56
0000000000007d97         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7da0:
0000000000007da0         mov        edx, 0x7
0000000000007da5         mov        ebx, 0x61
0000000000007daa         jmp        sub_7c40+68
                        ; endp
0000000000007daf         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7db0:
0000000000007db0         cmp        dword [rsp+8], 0x2
0000000000007db5         sete       dl
                        ; endp

                     loc_7db8:
0000000000007db8         test       rbp, rbp                                    ; CODE XREF=sub_7b40+38, sub_7fd0+35
0000000000007dbb         jne        loc_7b6c

0000000000007dc1         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_8000+43
0000000000007dc6         and        al, dl
0000000000007dc8         je         sub_7b40+56

0000000000007dce         mov        rbp, r11
0000000000007dd1         mov        dword [rsp+arg_0], 0x2
0000000000007dd9         jmp        sub_8090+1097
                        ; endp
0000000000007dde         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_7de0:
0000000000007de0         cmp        dword [rsp+arg_0], 0x2
0000000000007de5         sete       dl
0000000000007de8         xor        r12d, r12d
0000000000007deb         jmp        sub_7db0+17
                        ; endp
0000000000007ded         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_7df0:
0000000000007df0         cmp        dword [rsp+arg_0], 0x2
0000000000007df5         mov        ebx, 0x20
0000000000007dfa         sete       dl
0000000000007dfd         jmp        sub_7db0+17
                        ; endp
0000000000007dff         align      512


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7e00:
0000000000007e00         mov        edx, 0xd
0000000000007e05         mov        ebx, 0x72
0000000000007e0a         jmp        loc_7c72
0000000000007e0f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7e10:
0000000000007e10         mov        edx, 0xc
0000000000007e15         mov        ebx, 0x66
0000000000007e1a         jmp        sub_7c40+68
                        ; endp
0000000000007e1f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7e20:
0000000000007e20         mov        edx, 0xb
0000000000007e25         mov        ebx, 0x76
0000000000007e2a         jmp        sub_7c40+68
                        ; endp
0000000000007e2f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7e30:
0000000000007e30         mov        edx, 0xa
0000000000007e35         mov        ebx, 0x6e
0000000000007e3a         jmp        sub_7c40+50
                        ; endp
0000000000007e3f         align      64

                     loc_7e40:
0000000000007e40         xor        r10d, r10d                                  ; CODE XREF=sub_7e30+135
0000000000007e43         nop        dword [rax+rax]

                     loc_7e48:
0000000000007e48         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
0000000000007e4e         jne        loc_81f8

0000000000007e54         mov        qword [rsp+0xe8+var_B0], r11
0000000000007e59         mov        byte [rsp+0xe8+var_B8], r8b
0000000000007e5e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000007e63         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000007e68         mov        rcx, qword [rax]
0000000000007e6b         movzx      edx, bl
0000000000007e6e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000007e74         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000007e7a         mov        r11, qword [rsp+0xe8+var_B0]
0000000000007e7f         mov        edi, 0x1
0000000000007e84         movzx      eax, word [rcx+rdx*2]
0000000000007e88         and        ax, 0x4000
0000000000007e8c         setne      r12b
0000000000007e90         sete       al
0000000000007e93         and        al, byte [rsp+0xe8+var_DB]

                     loc_7e97:
0000000000007e97         test       al, al                                      ; CODE XREF=sub_8090+2221
0000000000007e99         jne        loc_8831

0000000000007e9f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000007ea4         sete       dl
0000000000007ea7         jmp        loc_7b78
0000000000007eac         align      16

                     loc_7eb0:
0000000000007eb0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000007eb4         cmp        bl, 0x7e
0000000000007eb7         ja         loc_7e40

0000000000007eb9         lea        rcx, qword [switch_table_f6c0+552]          ; 0xf8e8
0000000000007ec0         movzx      edx, bl
0000000000007ec3         movsxd     rax, dword [rcx+rdx*4]
0000000000007ec7         add        rax, rcx
0000000000007eca         jmp        rax
                        ; endp
0000000000007ecc         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7ed0:
0000000000007ed0         xor        r10d, r10d
0000000000007ed3         cmp        byte [rsp+arg_5], 0x0
0000000000007ed8         jne        loc_7cce

0000000000007ede         nop

                     loc_7ee0:
0000000000007ee0         mov        edx, 0x5c                                   ; CODE XREF=sub_7c40+136, sub_7c40+147
0000000000007ee5         mov        ebx, 0x5c
0000000000007eea         jmp        sub_7c40+68
                        ; endp
0000000000007eef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7ef0:
0000000000007ef0         mov        edx, 0xc
0000000000007ef5         xor        r10d, r10d
0000000000007ef8         mov        ebx, 0x66
0000000000007efd         jmp        sub_7c40+68
                        ; endp
0000000000007f02         nop        word [rax+rax]
0000000000007f08         mov        edx, 0xa
0000000000007f0d         xor        r10d, r10d
0000000000007f10         mov        ebx, 0x6e
0000000000007f15         jmp        sub_7c40+50
0000000000007f1a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7f20:
0000000000007f20         mov        ebx, 0x61
0000000000007f25         jmp        sub_7c40+176
                        ; endp
0000000000007f2a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7f30:
0000000000007f30         xor        r10d, r10d
                        ; endp

                     loc_7f33:
0000000000007f33         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7d60+5
0000000000007f38         sete       dl
0000000000007f3b         cmp        byte [rsp+arg_7], 0x0
0000000000007f40         jne        loc_8ada

0000000000007f46         mov        eax, r8d
0000000000007f49         mov        rcx, r15
0000000000007f4c         xor        eax, 0x1
0000000000007f4f         and        al, dl
0000000000007f51         je         loc_7f80

0000000000007f53         cmp        r13, r15
0000000000007f56         jbe        loc_7f5d

0000000000007f58         mov        byte [r14+r15], 0x27

                     loc_7f5d:
0000000000007f5d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_7f30+38
0000000000007f61         cmp        r13, rcx
0000000000007f64         jbe        loc_7f6c

0000000000007f66         mov        byte [r14+r15+1], 0x24

                     loc_7f6c:
0000000000007f6c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_7f30+52
0000000000007f70         cmp        r13, rcx
0000000000007f73         ja         loc_85a9

                     loc_7f79:
0000000000007f79         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_8090+1311
0000000000007f7d         mov        r8d, eax

                     loc_7f80:
0000000000007f80         cmp        r13, rcx                                    ; CODE XREF=sub_7f30+33
0000000000007f83         jbe        loc_7f8a

0000000000007f85         mov        byte [r14+rcx], 0x5c

                     loc_7f8a:
0000000000007f8a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7f30+83
0000000000007f8f         lea        r15, qword [rcx+1]
0000000000007f93         je         loc_8599

0000000000007f99         lea        rax, qword [rbp+1]
0000000000007f9d         cmp        rax, r11
0000000000007fa0         jae        loc_7fbb

0000000000007fa2         mov        rax, qword [rsp+arg_8]
0000000000007fa7         movzx      eax, byte [rax+rbp+1]
0000000000007fac         mov        byte [rsp+arg_20], al
0000000000007fb0         sub        eax, 0x30
0000000000007fb3         cmp        al, 0x9
0000000000007fb5         jbe        loc_87e9

                     loc_7fbb:
0000000000007fbb         mov        eax, r12d                                   ; CODE XREF=sub_7f30+112
0000000000007fbe         mov        ebx, 0x30
0000000000007fc3         xor        r12d, r12d
0000000000007fc6         jmp        sub_7b40+56
                        ; endp
0000000000007fcb         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_7fd0:
0000000000007fd0         cmp        dword [rsp+arg_0], 0x2
0000000000007fd5         mov        r12d, r10d
0000000000007fd8         sete       dl
0000000000007fdb         xor        r10d, r10d
0000000000007fde         xor        eax, eax
0000000000007fe0         jmp        sub_7b40+56
                        ; endp
0000000000007fe5         nop        dword [rax]
0000000000007fe8         cmp        dword [rsp+8], 0x2
0000000000007fed         sete       dl
0000000000007ff0         xor        r10d, r10d
0000000000007ff3         jmp        sub_7db0+8
0000000000007ff8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8000:
0000000000008000         cmp        dword [rsp+8], 0x2                          ; DATA XREF=file_type+13, strmode+13
0000000000008005         sete       dl
0000000000008008         xor        r10d, r10d
000000000000800b         xor        r12d, r12d
000000000000800e         jmp        sub_7db0+17
                        ; endp
0000000000008013         nop        dword [rax+rax]
0000000000008018         cmp        dword [rsp+8], 0x2
000000000000801d         mov        r12d, r10d
0000000000008020         mov        ebx, 0x20
0000000000008025         sete       dl
0000000000008028         xor        r10d, r10d
000000000000802b         jmp        sub_7db0+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8030:
0000000000008030         mov        edx, 0xd
0000000000008035         xor        r10d, r10d
0000000000008038         mov        ebx, 0x72
000000000000803d         jmp        sub_7c40+50
                        ; endp
0000000000008042         nop        word [rax+rax]
0000000000008048         mov        ebx, 0x76
000000000000804d         jmp        sub_7c40+176
0000000000008052         nop        word [rax+rax]
0000000000008058         mov        edx, 0x9
000000000000805d         xor        r10d, r10d
0000000000008060         mov        ebx, 0x74
0000000000008065         jmp        sub_7c40+50
000000000000806a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8070:
0000000000008070         mov        ebx, 0x62
0000000000008075         jmp        sub_7c40+176
                        ; endp
000000000000807a         nop        word [rax+rax]

                     loc_8080:
0000000000008080         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000008083         jmp        loc_7b20
0000000000008088         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_8090:
0000000000008090         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7c40+125
0000000000008095         jne        sub_8090+2416
                        ; endp

                     loc_809b:
000000000000809b         add        rbp, 0x1                                    ; CODE XREF=sub_7c40+159
000000000000809f         mov        eax, r8d
00000000000080a2         xor        r12d, r12d
00000000000080a5         mov        ebx, 0x5c
00000000000080aa         jmp        sub_7b40+124
                        ; endp
00000000000080af         align      16

                     loc_80b0:
00000000000080b0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
00000000000080b5         movzx      ebx, byte [rsp+0xe8+var_D9]
00000000000080ba         mov        r12d, r8d
00000000000080bd         mov        rbp, r11
00000000000080c0         sete       dl
00000000000080c3         mov        eax, ebx
00000000000080c5         test       r15, r15
00000000000080c8         sete       cl
00000000000080cb         and        eax, edx
00000000000080cd         and        al, cl
00000000000080cf         jne        loc_8b36

00000000000080d5         mov        eax, ebx
00000000000080d7         xor        eax, 0x1
00000000000080da         and        dl, al
00000000000080dc         je         loc_8a4c

00000000000080e2         cmp        byte [rsp+0xe8+var_6C], 0x0
00000000000080e7         je         loc_8a4a

00000000000080ed         cmp        byte [rsp+0xe8+var_DA], 0x0
00000000000080f2         jne        loc_8aed

00000000000080f8         test       r13, r13
00000000000080fb         sete       al
00000000000080fe         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000008104         setne      dl
0000000000008107         and        al, dl
0000000000008109         je         loc_8b2c

000000000000810f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_8114:
0000000000008114         lea        rbx, qword [a4096Len+22]                    ; 0xfeee, CODE XREF=sub_8090+2781
000000000000811b         mov        byte [r14], 0x27
000000000000811f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000008127         mov        r15d, 0x1
000000000000812d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008136         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000813b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000008140         mov        byte [rsp+0xe8+var_6C], al
0000000000008144         jmp        loc_7a23
0000000000008149         align      16

                     loc_8150:
0000000000008150         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7c40+8
0000000000008155         jne        sub_8090+2416

000000000000815b         test       r13, r13
000000000000815e         je         loc_8560

0000000000008164         xor        edx, edx
0000000000008166         cmp        qword [rsp+arg_48], 0x0
000000000000816c         jne        loc_8560

                     loc_8172:
0000000000008172         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_8090+1284, sub_8090+2794
0000000000008177         add        r15, 0x3
000000000000817b         xor        eax, eax
000000000000817d         mov        byte [rsp+arg_74], r12b
0000000000008182         xor        r8d, r8d
0000000000008185         mov        r13, rdx
0000000000008188         mov        ebx, 0x27
000000000000818d         jmp        sub_7b40+105
                        ; endp
0000000000008192         align      8

                     loc_8198:
0000000000008198         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_7c10+19
000000000000819d         je         loc_81c0

000000000000819f         lea        rcx, qword [rbp+2]
00000000000081a3         cmp        rcx, r11
00000000000081a6         jae        loc_81c0

00000000000081a8         mov        rax, qword [rsp+arg_8]
00000000000081ad         cmp        byte [rax+rbp+1], 0x3f
00000000000081b2         je         loc_8942

00000000000081b8         nop        dword [rax+rax]

                     loc_81c0:
00000000000081c0         xor        edx, edx                                    ; CODE XREF=sub_8090+269, sub_8090+278, sub_8090+2233, sub_8090+2253
00000000000081c2         xor        r12d, r12d
00000000000081c5         xor        eax, eax
00000000000081c7         mov        ebx, 0x3f
00000000000081cc         jmp        sub_7b40+56
                        ; endp
00000000000081d1         align      8

                     loc_81d8:
00000000000081d8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7c10+10
00000000000081dd         jne        loc_8a00

00000000000081e3         xor        r12d, r12d
00000000000081e6         xor        eax, eax
00000000000081e8         mov        ebx, 0x3f
00000000000081ed         jmp        sub_7b40+105
                        ; endp
00000000000081f2         align      8

                     loc_81f8:
00000000000081f8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_7e30+30
0000000000008200         cmp        r11, 0xffffffffffffffff
0000000000008204         mov        qword [rsp+0xe8+var_48], 0x0
0000000000008210         mov        qword [rsp+0xe8+var_C0], rax
0000000000008215         jne        loc_8244

0000000000008217         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
000000000000821c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000008221         mov        byte [rsp+0xe8+var_B0], r10b
0000000000008226         mov        qword [rsp+0xe8+var_B8], r9
000000000000822b         call       j_strlen                                    ; strlen
0000000000008230         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000008236         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000823c         mov        r11, rax
000000000000823f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_8244:
0000000000008244         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_8090+389
000000000000824c         xor        ecx, ecx
000000000000824e         mov        byte [rsp+0xe8+var_6A], bl
0000000000008252         mov        byte [rsp+0xe8+var_6B], r8b
0000000000008257         mov        rbx, rcx
000000000000825a         mov        qword [rsp+0xe8+var_60], r9
0000000000008262         mov        qword [rsp+0xe8+var_B0], rax
0000000000008267         mov        byte [rsp+0xe8+var_69], r10b
000000000000826c         mov        qword [rsp+0xe8+var_68], r15
0000000000008274         mov        qword [rsp+0xe8+var_A8], r14
0000000000008279         mov        qword [rsp+0xe8+var_78], r13
000000000000827e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_8283:
0000000000008283         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_8090+623
0000000000008288         lea        r14, qword [rbp+rbx]
000000000000828d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000008292         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000008297         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000829c         lea        r13, qword [rax+r14]
00000000000082a0         sub        rdx, r14
00000000000082a3         mov        rsi, r13
00000000000082a6         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000082ab         test       rax, rax
00000000000082ae         mov        r15, rax
00000000000082b1         je         loc_8301

00000000000082b3         cmp        rax, 0xffffffffffffffff
00000000000082b7         je         loc_88d5

00000000000082bd         cmp        rax, 0xfffffffffffffffe
00000000000082c1         je         loc_8861

00000000000082c7         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000082cc         sete       al
00000000000082cf         and        al, byte [rsp+0xe8+var_D9]
00000000000082d3         jne        loc_8470

                     loc_82d9:
00000000000082d9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_8090+996, sub_8090+1031
00000000000082e0         call       j_iswprint                                  ; iswprint
00000000000082e5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
00000000000082ea         test       eax, eax
00000000000082ec         mov        eax, 0x0
00000000000082f1         cmove      r12d, eax
00000000000082f5         add        rbx, r15
00000000000082f8         call       j_mbsinit                                   ; mbsinit
00000000000082fd         test       eax, eax
00000000000082ff         je         loc_8283

                     loc_8301:
0000000000008301         mov        edx, r12d                                   ; CODE XREF=sub_8090+545
0000000000008304         mov        rdi, rbx
0000000000008307         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000830d         xor        edx, 0x1
0000000000008310         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000008315         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000831b         and        dl, byte [rsp+0xe8+var_DB]
000000000000831f         mov        r15, qword [rsp+0xe8+var_68]
0000000000008327         mov        r14, qword [rsp+0xe8+var_A8]
000000000000832c         mov        r13, qword [rsp+0xe8+var_78]
0000000000008331         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_8336:
0000000000008336         cmp        rdi, 0x1                                    ; CODE XREF=sub_8090+2112, sub_8090+2168
000000000000833a         jbe        loc_893b

                     loc_8340:
0000000000008340         mov        rcx, rdi                                    ; CODE XREF=sub_8090+1961
0000000000008343         xor        esi, esi
0000000000008345         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000834b         add        rcx, rbp
000000000000834e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000008353         jmp        loc_840e
0000000000008358         align      32

                     loc_8360:
0000000000008360         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_8090+896
0000000000008365         sete       al
0000000000008368         test       r9b, r9b
000000000000836b         jne        loc_8820

0000000000008371         mov        esi, r8d
0000000000008374         xor        esi, 0x1
0000000000008377         and        al, sil
000000000000837a         je         loc_83ab

000000000000837c         cmp        r13, r15
000000000000837f         jbe        loc_8386

0000000000008381         mov        byte [r14+r15], 0x27

                     loc_8386:
0000000000008386         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_8090+751
000000000000838a         cmp        r13, rsi
000000000000838d         jbe        loc_8395

000000000000838f         mov        byte [r14+r15+1], 0x24

                     loc_8395:
0000000000008395         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_8090+765
0000000000008399         cmp        r13, rsi
000000000000839c         jbe        loc_83a4

000000000000839e         mov        byte [r14+r15+2], 0x27

                     loc_83a4:
00000000000083a4         add        r15, 0x3                                    ; CODE XREF=sub_8090+780
00000000000083a8         mov        r8d, eax

                     loc_83ab:
00000000000083ab         cmp        r13, r15                                    ; CODE XREF=sub_8090+746
00000000000083ae         jbe        loc_83b5

00000000000083b0         mov        byte [r14+r15], 0x5c

                     loc_83b5:
00000000000083b5         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8090+798
00000000000083b9         cmp        r13, rax
00000000000083bc         jbe        loc_83cb

00000000000083be         mov        eax, ebx
00000000000083c0         shr        al, 0x6
00000000000083c3         add        eax, 0x30
00000000000083c6         mov        byte [r14+r15+1], al

                     loc_83cb:
00000000000083cb         lea        rax, qword [r15+2]                          ; CODE XREF=sub_8090+812
00000000000083cf         cmp        r13, rax
00000000000083d2         jbe        loc_83e4

00000000000083d4         mov        eax, ebx
00000000000083d6         shr        al, 0x3
00000000000083d9         and        eax, 0x7
00000000000083dc         add        eax, 0x30
00000000000083df         mov        byte [r14+r15+2], al

                     loc_83e4:
00000000000083e4         and        ebx, 0x7                                    ; CODE XREF=sub_8090+834
00000000000083e7         add        rbp, 0x1
00000000000083eb         add        r15, 0x3
00000000000083ef         add        ebx, 0x30
00000000000083f2         cmp        rbp, rcx
00000000000083f5         jae        loc_7be0

00000000000083fb         mov        esi, edx

                     loc_83fd:
00000000000083fd         cmp        r13, r15                                    ; CODE XREF=sub_8090+985, sub_8090+1969
0000000000008400         jbe        loc_8406

0000000000008402         mov        byte [r14+r15], bl

                     loc_8406:
0000000000008406         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_8090+880
000000000000840a         add        r15, 0x1

                     loc_840e:
000000000000840e         test       dl, dl                                      ; CODE XREF=sub_8090+707
0000000000008410         jne        loc_8360

0000000000008416         mov        eax, esi
0000000000008418         xor        eax, 0x1
000000000000841b         and        eax, r8d
000000000000841e         test       r10b, r10b
0000000000008421         je         loc_8431

0000000000008423         cmp        r13, r15
0000000000008426         jbe        loc_842d

0000000000008428         mov        byte [r14+r15], 0x5c

                     loc_842d:
000000000000842d         add        r15, 0x1                                    ; CODE XREF=sub_8090+918

                     loc_8431:
0000000000008431         add        rbp, 0x1                                    ; CODE XREF=sub_8090+913
0000000000008435         cmp        rbp, rcx
0000000000008438         jae        loc_7bbc

000000000000843e         test       al, al
0000000000008440         je         loc_883e

0000000000008446         cmp        r13, r15
0000000000008449         jbe        loc_8450

000000000000844b         mov        byte [r14+r15], 0x27

                     loc_8450:
0000000000008450         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8090+953
0000000000008454         cmp        r13, rax
0000000000008457         jbe        loc_845f

0000000000008459         mov        byte [r14+r15+1], 0x27

                     loc_845f:
000000000000845f         add        r15, 0x2                                    ; CODE XREF=sub_8090+967
0000000000008463         xor        r10d, r10d
0000000000008466         xor        r8d, r8d
0000000000008469         jmp        loc_83fd
000000000000846b         align      16

                     loc_8470:
0000000000008470         cmp        r15, 0x1                                    ; CODE XREF=sub_8090+579
0000000000008474         je         loc_82d9

000000000000847a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000847f         lea        rcx, qword [rdi+r15]
0000000000008483         lea        rdx, qword [rdi+r14+1]
0000000000008488         lea        r8, qword [rcx+r14]
000000000000848c         jmp        loc_849d
000000000000848e         align      16

                     loc_8490:
0000000000008490         add        rdx, 0x1                                    ; CODE XREF=sub_8090+1046, sub_8090+1072
0000000000008494         cmp        r8, rdx
0000000000008497         je         loc_82d9

                     loc_849d:
000000000000849d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_8090+1020
00000000000084a0         sub        ecx, 0x5b
00000000000084a3         cmp        cl, 0x21
00000000000084a6         ja         loc_8490

00000000000084a8         mov        esi, 0x1
00000000000084ad         shl        rsi, cl
00000000000084b0         mov        rcx, rsi
00000000000084b3         movabs     rsi, 0x20000002b
00000000000084bd         test       rcx, rsi
00000000000084c0         je         loc_8490

00000000000084c2         mov        r14, qword [rsp+0xe8+var_A8]
00000000000084c7         mov        r13, qword [rsp+0xe8+var_78]
00000000000084cc         mov        rbp, qword [rsp+0xe8+var_B8]
00000000000084d1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_84d9:
00000000000084d9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_8090+1227, sub_8090+1948, sub_8090+2585, sub_8090+2734
00000000000084de         je         loc_84f0

00000000000084e0         test       al, al
00000000000084e2         mov        eax, 0x4
00000000000084e7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000084ec         mov        dword [rsp+0xe8+var_E0], eax

                     loc_84f0:
00000000000084f0         sub        rsp, 0x8                                    ; CODE XREF=sub_8090+1102
00000000000084f4         mov        rcx, rbp
00000000000084f7         mov        rsi, r13
00000000000084fa         push       qword [rsp+0xf0+var_88]
00000000000084fe         push       qword [rsp+0xf8+var_80]
0000000000008502         mov        rdi, r14
0000000000008505         push       0x0
0000000000008507         mov        r9d, dword [rsp+0x108+var_70]
000000000000850f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000008514         mov        rdx, qword [rsp+0x108+var_D8]
0000000000008519         and        r9d, 0xfffffffd
000000000000851d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008522         add        rsp, 0x20
0000000000008526         mov        r15, rax

                     loc_8529:
0000000000008529         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_8090+2549, sub_8090+2560, sub_8090+2711
0000000000008531         xor        rbx, qword [fs:0x28]
000000000000853a         mov        rax, r15
000000000000853d         jne        loc_8b43

0000000000008543         add        rsp, 0xb8
000000000000854a         pop        rbx
000000000000854b         pop        rbp
000000000000854c         pop        r12
000000000000854e         pop        r13
0000000000008550         pop        r14
0000000000008552         pop        r15
0000000000008554         ret
                        ; endp
0000000000008555         align      8

                     loc_8558:
0000000000008558         mov        rbp, r11                                    ; CODE XREF=sub_7c40+194
000000000000855b         jmp        loc_84d9

                     loc_8560:
0000000000008560         cmp        r13, r15                                    ; CODE XREF=sub_8090+206, sub_8090+220
0000000000008563         jbe        loc_856a

0000000000008565         mov        byte [r14+r15], 0x27

                     loc_856a:
000000000000856a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8090+1235
000000000000856e         cmp        r13, rax
0000000000008571         jbe        loc_8579

0000000000008573         mov        byte [r14+r15+1], 0x5c

                     loc_8579:
0000000000008579         lea        rax, qword [r15+2]                          ; CODE XREF=sub_8090+1249
000000000000857d         cmp        r13, rax
0000000000008580         jbe        loc_8b72

0000000000008586         mov        rdx, r13
0000000000008589         mov        byte [r14+r15+2], 0x27
000000000000858f         mov        r13, qword [rsp+arg_48]
0000000000008594         jmp        loc_8172

                     loc_8599:
0000000000008599         mov        eax, r12d                                   ; CODE XREF=sub_7f30+99
000000000000859c         mov        ebx, 0x30
00000000000085a1         xor        r12d, r12d
00000000000085a4         jmp        sub_7b40+105
                        ; endp

                     loc_85a9:
00000000000085a9         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_7f30+67
00000000000085af         jmp        loc_7f79

                     loc_85b4:
00000000000085b4         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
00000000000085b6         jne        loc_79e3

00000000000085bc         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_85c1:
00000000000085c1         test       r13, r13                                    ; CODE XREF=sub_8090+2749
00000000000085c4         jne        loc_8b5a

00000000000085ca         lea        rax, qword [a4096Len+22]                    ; 0xfeee
00000000000085d1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000085da         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000085df         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000085e4         xor        r12d, r12d
00000000000085e7         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000085ec         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000085f5         mov        qword [rsp+0xe8+var_A0], rax
00000000000085fa         mov        r15d, 0x1
0000000000008600         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000008608         jmp        loc_7a23
000000000000860d         align      16

                     loc_8610:
0000000000008610         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000008612         jne        loc_8a0d

0000000000008618         test       r13, r13
000000000000861b         je         loc_8846

0000000000008621         mov        byte [r14], 0x22
0000000000008625         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000862a         xor        r12d, r12d
000000000000862d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008632         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_863b:
000000000000863b         lea        rax, qword [aLibs+27]                       ; 0xf653, CODE XREF=sub_8090+1996
0000000000008642         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000008647         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000864c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008655         mov        r15d, 0x1
000000000000865b         mov        qword [rsp+0xe8+var_A0], rax
0000000000008660         jmp        loc_7a23

                     loc_8665:
0000000000008665         lea        rax, qword [aLibs+27]                       ; case 6, 0xf653, CODE XREF=quotearg_buffer_restyled+145
000000000000866c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008671         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008676         xor        r12d, r12d
0000000000008679         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008682         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000008687         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000868c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008695         xor        r15d, r15d
0000000000008698         mov        qword [rsp+0xe8+var_A0], rax
000000000000869d         mov        dword [rsp+0xe8+var_E0], 0x5
00000000000086a5         jmp        loc_7a23

                     loc_86aa:
00000000000086aa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
00000000000086af         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000086b4         xor        r12d, r12d
00000000000086b7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000086c0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000086c5         xor        r15d, r15d
00000000000086c8         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000086cd         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000086d6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000086df         jmp        loc_7a23

                     loc_86e4:
00000000000086e4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
00000000000086e9         je         loc_8741

00000000000086eb         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xf655
00000000000086f2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000086f4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000086f9         call       j_dcgettext                                 ; dcgettext
00000000000086fe         mov        rcx, rax
0000000000008701         mov        qword [rsp+0xe8+var_80], rax
0000000000008706         lea        rax, qword [aLibs+29]                       ; 0xf655
000000000000870d         cmp        rcx, rax
0000000000008710         je         loc_8aae

                     loc_8716:
0000000000008716         lea        rsi, qword [a4096Len+22]                    ; argument "msgid" for method j_dcgettext, 0xfeee, CODE XREF=sub_8090+2607
000000000000871d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000871f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008724         call       j_dcgettext                                 ; dcgettext
0000000000008729         mov        rcx, rax
000000000000872c         mov        qword [rsp+0xe8+var_88], rax
0000000000008731         lea        rax, qword [a4096Len+22]                    ; 0xfeee
0000000000008738         cmp        rcx, rax
000000000000873b         je         loc_8ac4

                     loc_8741:
0000000000008741         xor        r15d, r15d                                  ; CODE XREF=sub_8090+1625, sub_8090+2629
0000000000008744         test       ebx, ebx
0000000000008746         je         loc_890d

                     loc_874c:
000000000000874c         test       ebx, ebx                                    ; CODE XREF=sub_8090+2183, sub_8090+2214
000000000000874e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000008753         setne      byte [rsp+0xe8+var_D9]
0000000000008758         xor        r12d, r12d
000000000000875b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000875e         call       j_strlen                                    ; strlen
0000000000008763         mov        qword [rsp+0xe8+var_A0], rbx
0000000000008768         mov        qword [rsp+0xe8+var_D0], rax
000000000000876d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008772         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008777         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008780         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008785         jmp        loc_7a23

                     loc_878a:
000000000000878a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000878f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008794         xor        r12d, r12d
0000000000008797         mov        qword [rsp+0xe8+var_98], 0x0
00000000000087a0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000087a5         xor        r15d, r15d
00000000000087a8         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000087ad         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000087b6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000087bf         jmp        loc_7a23

                     loc_87c4:
00000000000087c4         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
00000000000087c9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000087ce         xor        r12d, r12d
00000000000087d1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000087da         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000087df         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000087e4         jmp        loc_7a03

                     loc_87e9:
00000000000087e9         cmp        r13, r15                                    ; CODE XREF=sub_7f30+133
00000000000087ec         jbe        loc_87f3

00000000000087ee         mov        byte [r14+r15], 0x30

                     loc_87f3:
00000000000087f3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_8090+1884
00000000000087f7         cmp        r13, rax
00000000000087fa         jbe        loc_8802

00000000000087fc         mov        byte [r14+rcx+2], 0x30

                     loc_8802:
0000000000008802         mov        eax, r12d                                   ; CODE XREF=sub_8090+1898
0000000000008805         lea        r15, qword [rcx+3]
0000000000008809         xor        r12d, r12d
000000000000880c         mov        ebx, 0x30
0000000000008811         jmp        sub_7b40+56
                        ; endp
0000000000008816         align      32

                     loc_8820:
0000000000008820         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_8090+731
0000000000008825         mov        rbp, r11
0000000000008828         mov        byte [rsp+0xe8+var_DB], bl
000000000000882c         jmp        loc_84d9

                     loc_8831:
0000000000008831         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_7e30+105
0000000000008836         xor        r12d, r12d
0000000000008839         jmp        loc_8340

                     loc_883e:
000000000000883e         xor        r10d, r10d                                  ; CODE XREF=sub_8090+944
0000000000008841         jmp        loc_83fd

                     loc_8846:
0000000000008846         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_8090+1419
000000000000884f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008854         xor        r12d, r12d
0000000000008857         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000885c         jmp        loc_863b

                     loc_8861:
0000000000008861         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_8090+561
0000000000008866         mov        rsi, r14
0000000000008869         mov        rcx, r13
000000000000886c         mov        rax, rbx
000000000000886f         mov        rdi, rbx
0000000000008872         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000008878         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000887d         mov        r9, qword [rsp+0xe8+var_60]
0000000000008885         cmp        rsi, r11
0000000000008888         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000888e         mov        r15, qword [rsp+0xe8+var_68]
0000000000008896         mov        r14, qword [rsp+0xe8+var_A8]
000000000000889b         mov        r13, qword [rsp+0xe8+var_78]
00000000000088a0         jae        loc_88c8

00000000000088a2         cmp        byte [rcx], 0x0
00000000000088a5         jne        loc_88b7

00000000000088a7         jmp        loc_88c8
00000000000088a9         align      16

                     loc_88b0:
00000000000088b0         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_8090+2099
00000000000088b5         je         loc_88c5

                     loc_88b7:
00000000000088b7         add        rax, 0x1                                    ; CODE XREF=sub_8090+2069
00000000000088bb         lea        rdx, qword [rbp+rax]
00000000000088c0         cmp        r11, rdx
00000000000088c3         ja         loc_88b0

                     loc_88c5:
00000000000088c5         mov        rdi, rax                                    ; CODE XREF=sub_8090+2085

                     loc_88c8:
00000000000088c8         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_8090+2064, sub_8090+2071
00000000000088cd         xor        r12d, r12d
00000000000088d0         jmp        loc_8336

                     loc_88d5:
00000000000088d5         mov        rdi, rbx                                    ; CODE XREF=sub_8090+551
00000000000088d8         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000088de         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000088e3         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000088e9         mov        r15, qword [rsp+0xe8+var_68]
00000000000088f1         xor        r12d, r12d
00000000000088f4         mov        r14, qword [rsp+0xe8+var_A8]
00000000000088f9         mov        r13, qword [rsp+0xe8+var_78]
00000000000088fe         mov        r11, qword [rsp+0xe8+var_B8]
0000000000008903         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000008908         jmp        loc_8336

                     loc_890d:
000000000000890d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_8090+1718
0000000000008912         movzx      eax, byte [rdx]
0000000000008915         test       al, al
0000000000008917         je         loc_874c

000000000000891d         nop        dword [rax]

                     loc_8920:
0000000000008920         cmp        r13, r15                                    ; CODE XREF=sub_8090+2212
0000000000008923         jbe        loc_8929

0000000000008925         mov        byte [r14+r15], al

                     loc_8929:
0000000000008929         add        r15, 0x1                                    ; CODE XREF=sub_8090+2195
000000000000892d         movzx      eax, byte [rdx+r15]
0000000000008932         test       al, al
0000000000008934         jne        loc_8920

0000000000008936         jmp        loc_874c

                     loc_893b:
000000000000893b         mov        eax, edx                                    ; CODE XREF=sub_8090+682
000000000000893d         jmp        loc_7e97

                     loc_8942:
0000000000008942         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_8090+290
0000000000008946         cmp        bl, 0x3e
0000000000008949         ja         loc_81c0

000000000000894f         movabs     rax, 0x7000a38200000000
0000000000008959         bt         rax, rbx
000000000000895d         jae        loc_81c0

0000000000008963         cmp        byte [rsp+arg_7], 0x0
0000000000008968         jne        loc_8b52

000000000000896e         cmp        r13, r15
0000000000008971         jbe        loc_8978

0000000000008973         mov        byte [r14+r15], 0x3f

                     loc_8978:
0000000000008978         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8090+2273
000000000000897c         cmp        r13, rax
000000000000897f         jbe        loc_8987

0000000000008981         mov        byte [r14+r15+1], 0x22

                     loc_8987:
0000000000008987         lea        rax, qword [r15+2]                          ; CODE XREF=sub_8090+2287
000000000000898b         cmp        r13, rax
000000000000898e         jbe        loc_8996

0000000000008990         mov        byte [r14+r15+2], 0x22

                     loc_8996:
0000000000008996         lea        rax, qword [r15+3]                          ; CODE XREF=sub_8090+2302
000000000000899a         cmp        r13, rax
000000000000899d         jbe        loc_89a5

000000000000899f         mov        byte [r14+r15+3], 0x3f

                     loc_89a5:
00000000000089a5         add        r15, 0x4                                    ; CODE XREF=sub_8090+2317
00000000000089a9         xor        edx, edx
00000000000089ab         xor        r12d, r12d
00000000000089ae         xor        eax, eax
00000000000089b0         mov        rbp, rcx
00000000000089b3         jmp        sub_7b40+56
                        ; endp

                     loc_89b8:
00000000000089b8         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
00000000000089ba         je         loc_8b48

00000000000089c0         lea        rax, qword [a4096Len+22]                    ; 0xfeee
00000000000089c7         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000089cc         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000089d1         xor        r12d, r12d
00000000000089d4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000089dd         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000089e2         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000089e7         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000089f0         xor        r15d, r15d
00000000000089f3         mov        qword [rsp+0xe8+var_A0], rax
00000000000089f8         jmp        loc_7a23
00000000000089fd         align      512

                     loc_8a00:
0000000000008a00         mov        rbp, r11                                    ; CODE XREF=sub_8090+333
0000000000008a03         movzx      eax, byte [rsp+arg_7]
0000000000008a08         jmp        sub_8090+1097
                        ; endp

                     loc_8a0d:
0000000000008a0d         lea        rax, qword [aLibs+27]                       ; 0xf653, CODE XREF=sub_8090+1410
0000000000008a14         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008a19         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008a1e         xor        r12d, r12d
0000000000008a21         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008a2a         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000008a2f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008a34         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008a3d         xor        r15d, r15d
0000000000008a40         mov        qword [rsp+0xe8+var_A0], rax
0000000000008a45         jmp        loc_7a23

                     loc_8a4a:
0000000000008a4a         mov        eax, edx                                    ; CODE XREF=sub_8090+87

                     loc_8a4c:
0000000000008a4c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_8090+76, sub_8090+2721
0000000000008a51         test       rbx, rbx
0000000000008a54         je         loc_8a82

0000000000008a56         test       al, al
0000000000008a58         je         loc_8a82

0000000000008a5a         movzx      ecx, byte [rbx]
0000000000008a5d         mov        rax, rbx
0000000000008a60         test       cl, cl
0000000000008a62         je         loc_8a82

0000000000008a64         mov        rdx, r15
0000000000008a67         sub        rax, r15

                     loc_8a6a:
0000000000008a6a         cmp        r13, rdx                                    ; CODE XREF=sub_8090+2541
0000000000008a6d         jbe        loc_8a73

0000000000008a6f         mov        byte [r14+rdx], cl

                     loc_8a73:
0000000000008a73         add        rdx, 0x1                                    ; CODE XREF=sub_8090+2525
0000000000008a77         movzx      ecx, byte [rax+rdx]
0000000000008a7b         test       cl, cl
0000000000008a7d         jne        loc_8a6a

0000000000008a7f         mov        r15, rdx

                     loc_8a82:
0000000000008a82         cmp        r13, r15                                    ; CODE XREF=sub_8090+2500, sub_8090+2504, sub_8090+2514
0000000000008a85         jbe        loc_8529

0000000000008a8b         mov        byte [r14+r15], 0x0
0000000000008a90         jmp        loc_8529

                     loc_8a95:
0000000000008a95         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000008a9a         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000008a9f         mov        rbp, r11
0000000000008aa2         sete       al
0000000000008aa5         mov        byte [rsp+0xe8+var_DB], bl
0000000000008aa9         jmp        loc_84d9

                     loc_8aae:
0000000000008aae         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_8090+1664
0000000000008ab2         mov        rdi, rcx
0000000000008ab5         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000008aba         mov        qword [rsp+0xe8+var_80], rax
0000000000008abf         jmp        loc_8716

                     loc_8ac4:
0000000000008ac4         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_8090+1707
0000000000008ac8         mov        rdi, rcx
0000000000008acb         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000008ad0         mov        qword [rsp+0xe8+var_88], rax
0000000000008ad5         jmp        loc_8741

                     loc_8ada:
0000000000008ada         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_7f30+16
0000000000008adf         mov        rbp, r11
0000000000008ae2         mov        eax, edx
0000000000008ae4         mov        byte [rsp+arg_5], bl
0000000000008ae8         jmp        sub_8090+1097
                        ; endp

                     loc_8aed:
0000000000008aed         sub        rsp, 0x8                                    ; CODE XREF=sub_8090+98
0000000000008af1         mov        r8d, 0x5
0000000000008af7         mov        rcx, r11
0000000000008afa         push       qword [rsp+0xf0+var_88]
0000000000008afe         push       qword [rsp+0xf8+var_80]
0000000000008b02         mov        rdi, r14
0000000000008b05         push       qword [rsp+0x100+var_C8]
0000000000008b09         mov        r9d, dword [rsp+0x108+var_70]
0000000000008b11         mov        rdx, qword [rsp+0x108+var_D8]
0000000000008b16         mov        rsi, qword [rsp+0x108+var_98]
0000000000008b1b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008b20         add        rsp, 0x20
0000000000008b24         mov        r15, rax
0000000000008b27         jmp        loc_8529

                     loc_8b2c:
0000000000008b2c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_8090+121
0000000000008b31         jmp        loc_8a4c

                     loc_8b36:
0000000000008b36         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_8090+63
0000000000008b3e         jmp        loc_84d9

                     loc_8b43:
0000000000008b43         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_8090+1197
                        ; endp

                     loc_8b48:
0000000000008b48         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_8090+2346
0000000000008b4d         jmp        loc_85c1

                     loc_8b52:
0000000000008b52         mov        rbp, r11                                    ; CODE XREF=sub_8090+2264
0000000000008b55         jmp        sub_8090+1120
                        ; endp

                     loc_8b5a:
0000000000008b5a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_8090+1332
0000000000008b5f         xor        eax, eax
0000000000008b61         xor        r12d, r12d
0000000000008b64         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008b6d         jmp        loc_8114

                     loc_8b72:
0000000000008b72         mov        rdx, r13                                    ; CODE XREF=sub_8090+1264
0000000000008b75         mov        r13, qword [rsp+arg_48]
0000000000008b7a         jmp        loc_8172

                     loc_8b7f:
0000000000008b7f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000008b84         align      16                                          ; End of unwind block (FDE at 0x10eb8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000008b90         push       r15                                         ; Begin of unwind block (FDE at 0x10f30), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000008b92         push       r14
0000000000008b94         movsxd     r15, edi
0000000000008b97         push       r13
0000000000008b99         push       r12
0000000000008b9b         mov        r14, rdx
0000000000008b9e         push       rbp
0000000000008b9f         push       rbx
0000000000008ba0         mov        rbp, rcx
0000000000008ba3         sub        rsp, 0x28
0000000000008ba7         mov        qword [rsp+0x58+var_50], rsi
0000000000008bac         call       j___errno_location                          ; __errno_location
0000000000008bb1         mov        r13, rax
0000000000008bb4         mov        eax, dword [rax]
0000000000008bb6         test       r15d, r15d
0000000000008bb9         mov        rbx, qword [slotvec]                        ; slotvec
0000000000008bc0         mov        dword [rsp+0x58+var_40], eax
0000000000008bc4         js         loc_8d31

0000000000008bca         cmp        dword [nslots], r15d                        ; nslots
0000000000008bd1         jg         loc_8c35

0000000000008bd3         cmp        r15d, 0x7fffffff
0000000000008bda         je         loc_8d36

0000000000008be0         lea        r12d, dword [r15+1]
0000000000008be4         lea        rax, qword [slotvec0]                       ; slotvec0
0000000000008beb         movsxd     rsi, r12d
0000000000008bee         shl        rsi, 0x4
0000000000008bf2         cmp        rbx, rax
0000000000008bf5         je         loc_8d10

0000000000008bfb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
0000000000008bfe         call       xrealloc                                    ; xrealloc
0000000000008c03         mov        rbx, rax
0000000000008c06         mov        qword [slotvec], rax                        ; slotvec

                     loc_8c0d:
0000000000008c0d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000008c14         mov        edx, r12d
0000000000008c17         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000008c19         sub        edx, edi
0000000000008c1b         shl        rdi, 0x4
0000000000008c1f         movsxd     rdx, edx
0000000000008c22         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000008c25         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000008c29         call       j_memset                                    ; memset
0000000000008c2e         mov        dword [nslots], r12d                        ; nslots

                     loc_8c35:
0000000000008c35         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000008c38         shl        r15, 0x4
0000000000008c3c         sub        rsp, 0x8
0000000000008c40         add        rbx, r15
0000000000008c43         lea        r15, qword [rbp+8]
0000000000008c47         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000008c4b         mov        r11, qword [rbx]
0000000000008c4e         mov        r12, qword [rbx+8]
0000000000008c52         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000008c55         or         eax, 0x1
0000000000008c58         mov        dword [rsp+0x60+var_3C], eax
0000000000008c5c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000008c5f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000008c62         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000008c65         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000008c67         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
0000000000008c6a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000008c6f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000008c72         mov        qword [rsp+0x78+var_48], r11
0000000000008c77         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008c7c         add        rsp, 0x20
0000000000008c80         mov        r11, qword [rsp+0x58+var_48]
0000000000008c85         cmp        r11, rax
0000000000008c88         ja         loc_8cf1

0000000000008c8a         lea        rsi, qword [rax+1]
0000000000008c8e         lea        rax, qword [slot0]                          ; slot0
0000000000008c95         cmp        r12, rax
0000000000008c98         mov        qword [rbx], rsi
0000000000008c9b         je         loc_8caf

0000000000008c9d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008ca0         mov        qword [rsp+0x58+var_48], rsi
0000000000008ca5         call       j_free                                      ; free
0000000000008caa         mov        rsi, qword [rsp+0x58+var_48]

                     loc_8caf:
0000000000008caf         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000008cb2         mov        qword [rsp+0x58+var_48], rsi
0000000000008cb7         call       xmalloc                                     ; xmalloc
0000000000008cbc         sub        rsp, 0x8
0000000000008cc0         mov        qword [rbx+8], rax
0000000000008cc4         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000008cc8         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000008ccb         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000008cce         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000008cd1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000008cd3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000008cd8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
0000000000008cdb         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000008ce0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000008ce5         mov        r12, rax
0000000000008ce8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008ced         add        rsp, 0x20

                     loc_8cf1:
0000000000008cf1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000008cf5         mov        dword [r13], eax
0000000000008cf9         add        rsp, 0x28
0000000000008cfd         mov        rax, r12
0000000000008d00         pop        rbx
0000000000008d01         pop        rbp
0000000000008d02         pop        r12
0000000000008d04         pop        r13
0000000000008d06         pop        r14
0000000000008d08         pop        r15
0000000000008d0a         ret
                        ; endp
0000000000008d0b         align      16

                     loc_8d10:
0000000000008d10         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000008d12         call       xrealloc                                    ; xrealloc
0000000000008d17         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
0000000000008d1f         mov        rbx, rax
0000000000008d22         mov        qword [slotvec], rax                        ; slotvec
0000000000008d29         movups     xmmword [rax], xmm0
0000000000008d2c         jmp        loc_8c0d

                     loc_8d31:
0000000000008d31         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_8d36:
0000000000008d36         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8d3b:
0000000000008d3b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x10f30)
                     clone_quoting_options:
0000000000008d40         push       r12                                         ; Begin of unwind block (FDE at 0x10f9c)
0000000000008d42         push       rbp
0000000000008d43         push       rbx
0000000000008d44         mov        rbx, rdi
0000000000008d47         call       j___errno_location                          ; __errno_location
0000000000008d4c         mov        r12d, dword [rax]
0000000000008d4f         mov        rbp, rax
0000000000008d52         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000008d59         test       rbx, rbx
0000000000008d5c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000008d61         cmove      rbx, rax
0000000000008d65         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000008d68         call       xmemdup                                     ; xmemdup
0000000000008d6d         mov        dword [rbp], r12d
0000000000008d71         pop        rbx
0000000000008d72         pop        rbp
0000000000008d73         pop        r12
0000000000008d75         ret
                        ; endp
0000000000008d76         align      128                                         ; End of unwind block (FDE at 0x10f9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000008d80         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x10fc8), default_quoting_options, CODE XREF=print_stat+843, print_stat+957
0000000000008d87         test       rdi, rdi
0000000000008d8a         cmove      rdi, rax
0000000000008d8e         mov        eax, dword [rdi]
0000000000008d90         ret
                        ; endp
0000000000008d91         align      32                                          ; End of unwind block (FDE at 0x10fc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000008da0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x10fdc), default_quoting_options, CODE XREF=main+593, main+1192, main+1315
0000000000008da7         test       rdi, rdi
0000000000008daa         cmove      rdi, rax
0000000000008dae         mov        dword [rdi], esi
0000000000008db0         ret
                        ; endp
0000000000008db1         align      64                                          ; End of unwind block (FDE at 0x10fdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000008dc0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x10ff0), default_quoting_options
0000000000008dc7         test       rdi, rdi
0000000000008dca         mov        ecx, esi
0000000000008dcc         cmove      rdi, rax
0000000000008dd0         mov        eax, esi
0000000000008dd2         and        ecx, 0x1f
0000000000008dd5         shr        al, 0x5
0000000000008dd8         movzx      eax, al
0000000000008ddb         lea        rdi, qword [rdi+rax*4+8]
0000000000008de0         mov        esi, dword [rdi]
0000000000008de2         mov        eax, esi
0000000000008de4         shr        eax, cl
0000000000008de6         xor        edx, eax
0000000000008de8         and        eax, 0x1
0000000000008deb         and        edx, 0x1
0000000000008dee         shl        edx, cl
0000000000008df0         xor        edx, esi
0000000000008df2         mov        dword [rdi], edx
0000000000008df4         ret
                        ; endp
0000000000008df5         align      512                                         ; End of unwind block (FDE at 0x10ff0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000008e00         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x11004), default_quoting_options
0000000000008e07         test       rdi, rdi
0000000000008e0a         cmove      rdi, rax
0000000000008e0e         mov        eax, dword [rdi+4]
0000000000008e11         mov        dword [rdi+4], esi
0000000000008e14         ret
                        ; endp
0000000000008e15         align      32                                          ; End of unwind block (FDE at 0x11004)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000008e20         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x11018), default_quoting_options
0000000000008e27         test       rdi, rdi
0000000000008e2a         cmove      rdi, rax
0000000000008e2e         test       rsi, rsi
0000000000008e31         mov        dword [rdi], 0xa
0000000000008e37         je         loc_8e47

0000000000008e39         test       rdx, rdx
0000000000008e3c         je         loc_8e47

0000000000008e3e         mov        qword [rdi+0x28], rsi
0000000000008e42         mov        qword [rdi+0x30], rdx
0000000000008e46         ret
                        ; endp

                     loc_8e47:
0000000000008e47         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
0000000000008e4b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000008e50         push       r15                                         ; End of unwind block (FDE at 0x11018), Begin of unwind block (FDE at 0x1102c)
0000000000008e52         push       r14
0000000000008e54         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000008e5b         push       r13
0000000000008e5d         push       r12
0000000000008e5f         mov        r13, rdi
0000000000008e62         push       rbp
0000000000008e63         push       rbx
0000000000008e64         mov        rbx, r8
0000000000008e67         mov        r14, rsi
0000000000008e6a         mov        r15, rdx
0000000000008e6d         sub        rsp, 0x18
0000000000008e71         test       r8, r8
0000000000008e74         cmove      rbx, rax
0000000000008e78         mov        qword [rsp+0x48+var_40], rcx
0000000000008e7d         call       j___errno_location                          ; __errno_location
0000000000008e82         mov        r12d, dword [rax]
0000000000008e85         mov        rbp, rax
0000000000008e88         lea        rax, qword [rbx+8]
0000000000008e8c         sub        rsp, 0x8
0000000000008e90         mov        r9d, dword [rbx+4]
0000000000008e94         push       qword [rbx+0x30]
0000000000008e97         mov        r8d, dword [rbx]
0000000000008e9a         push       qword [rbx+0x28]
0000000000008e9d         mov        rdx, r15
0000000000008ea0         push       rax
0000000000008ea1         mov        rcx, qword [rsp+0x68+var_40]
0000000000008ea6         mov        rsi, r14
0000000000008ea9         mov        rdi, r13
0000000000008eac         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008eb1         mov        dword [rbp], r12d
0000000000008eb5         add        rsp, 0x38
0000000000008eb9         pop        rbx
0000000000008eba         pop        rbp
0000000000008ebb         pop        r12
0000000000008ebd         pop        r13
0000000000008ebf         pop        r14
0000000000008ec1         pop        r15
0000000000008ec3         ret
                        ; endp
0000000000008ec4         align      16                                          ; End of unwind block (FDE at 0x1102c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000008ed0         push       r15                                         ; Begin of unwind block (FDE at 0x11080), CODE XREF=quotearg_alloc+5
0000000000008ed2         push       r14
0000000000008ed4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000008edb         push       r13
0000000000008edd         push       r12
0000000000008edf         mov        r12, rdx
0000000000008ee2         push       rbp
0000000000008ee3         push       rbx
0000000000008ee4         mov        rbx, rcx
0000000000008ee7         mov        r14, rdi
0000000000008eea         mov        r15, rsi
0000000000008eed         sub        rsp, 0x38
0000000000008ef1         test       rcx, rcx
0000000000008ef4         cmove      rbx, rax
0000000000008ef8         xor        ebp, ebp
0000000000008efa         call       j___errno_location                          ; __errno_location
0000000000008eff         test       r12, r12
0000000000008f02         mov        r13, rax
0000000000008f05         mov        eax, dword [rax]
0000000000008f07         sete       bpl
0000000000008f0b         or         ebp, dword [rbx+4]
0000000000008f0e         lea        r10, qword [rbx+8]
0000000000008f12         sub        rsp, 0x8
0000000000008f16         mov        r8d, dword [rbx]
0000000000008f19         mov        rcx, r15
0000000000008f1c         mov        dword [rsp+0x70+var_5C], eax
0000000000008f20         push       qword [rbx+0x30]
0000000000008f23         mov        rdx, r14
0000000000008f26         push       qword [rbx+0x28]
0000000000008f29         push       r10
0000000000008f2b         xor        esi, esi
0000000000008f2d         mov        r9d, ebp
0000000000008f30         xor        edi, edi
0000000000008f32         mov        qword [rsp+0x88+var_48], r10
0000000000008f37         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008f3c         lea        rsi, qword [rax+1]
0000000000008f40         mov        qword [rsp+0x88+var_40], rax
0000000000008f45         add        rsp, 0x20
0000000000008f49         mov        rdi, rsi
0000000000008f4c         mov        qword [rsp+0x68+var_50], rsi
0000000000008f51         call       xmalloc                                     ; xmalloc
0000000000008f56         mov        qword [rsp+0x68+var_58], rax
0000000000008f5b         sub        rsp, 0x8
0000000000008f5f         push       qword [rbx+0x30]
0000000000008f62         push       qword [rbx+0x28]
0000000000008f65         mov        r10, qword [rsp+0x80+var_48]
0000000000008f6a         mov        r9d, ebp
0000000000008f6d         mov        r8d, dword [rbx]
0000000000008f70         mov        rcx, r15
0000000000008f73         mov        rdx, r14
0000000000008f76         mov        rdi, rax
0000000000008f79         push       r10
0000000000008f7b         mov        rsi, qword [rsp+0x88+var_50]
0000000000008f80         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008f85         mov        eax, dword [rsp+0x88+var_5C]
0000000000008f89         add        rsp, 0x20
0000000000008f8d         test       r12, r12
0000000000008f90         mov        dword [r13], eax
0000000000008f94         je         loc_8f9f

0000000000008f96         mov        r11, qword [rsp+0x68+var_40]
0000000000008f9b         mov        qword [r12], r11

                     loc_8f9f:
0000000000008f9f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000008fa4         add        rsp, 0x38
0000000000008fa8         pop        rbx
0000000000008fa9         pop        rbp
0000000000008faa         pop        r12
0000000000008fac         pop        r13
0000000000008fae         pop        r14
0000000000008fb0         pop        r15
0000000000008fb2         ret
                        ; endp
0000000000008fb3         align      64                                          ; End of unwind block (FDE at 0x11080)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000008fc0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x110ec)
0000000000008fc3         xor        edx, edx
0000000000008fc5         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000008fca         align      16                                          ; End of unwind block (FDE at 0x110ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000008fd0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x11100), nslots
0000000000008fd6         push       r12
0000000000008fd8         mov        r12, qword [slotvec]                        ; slotvec
0000000000008fdf         push       rbp
0000000000008fe0         push       rbx
0000000000008fe1         cmp        eax, 0x1
0000000000008fe4         jle        loc_9011

0000000000008fe6         sub        eax, 0x2
0000000000008fe9         lea        rbx, qword [r12+0x18]
0000000000008fee         shl        rax, 0x4
0000000000008ff2         lea        rbp, qword [r12+rax+0x28]
0000000000008ff7         nop        word [rax+rax]

                     loc_9000:
0000000000009000         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000009003         add        rbx, 0x10
0000000000009007         call       j_free                                      ; free
000000000000900c         cmp        rbx, rbp
000000000000900f         jne        loc_9000

                     loc_9011:
0000000000009011         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000009016         lea        rbx, qword [slot0]                          ; slot0
000000000000901d         cmp        rdi, rbx
0000000000009020         je         loc_9039

0000000000009022         call       j_free                                      ; free
0000000000009027         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000009032         mov        qword [slotvec0+8], rbx                     ; 0x213098

                     loc_9039:
0000000000009039         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000009040         cmp        r12, rbx
0000000000009043         je         loc_9054

0000000000009045         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000009048         call       j_free                                      ; free
000000000000904d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_9054:
0000000000009054         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000009055         mov        dword [nslots], 0x1                         ; nslots
000000000000905f         pop        rbp
0000000000009060         pop        r12
0000000000009062         ret
                        ; endp
0000000000009063         align      16                                          ; End of unwind block (FDE at 0x11100)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000009070         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1112c), default_quoting_options
0000000000009077         mov        rdx, 0xffffffffffffffff
000000000000907e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000009083         align      16                                          ; End of unwind block (FDE at 0x1112c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000009090         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x11140), default_quoting_options
0000000000009097         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000909c         align      32                                          ; End of unwind block (FDE at 0x11140)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
00000000000090a0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x11154), default_quoting_options
00000000000090a7         mov        rsi, rdi
00000000000090aa         mov        rdx, 0xffffffffffffffff
00000000000090b1         xor        edi, edi
00000000000090b3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000090b8         align      64                                          ; End of unwind block (FDE at 0x11154)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
00000000000090c0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x11168), default_quoting_options
00000000000090c7         mov        rdx, rsi
00000000000090ca         mov        rsi, rdi
00000000000090cd         xor        edi, edi
00000000000090cf         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000090d4         align      32                                          ; End of unwind block (FDE at 0x11168)

                     quotearg_n_style:
00000000000090e0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1117c), CODE XREF=argmatch_invalid+64, quotearg_style+7
00000000000090e4         mov        rax, rdx
00000000000090e7         mov        rdx, qword [fs:0x28]
00000000000090f0         mov        qword [rsp+0x48+var_10], rdx
00000000000090f5         xor        edx, edx
00000000000090f7         cmp        esi, 0xa
00000000000090fa         je         loc_9164

00000000000090fc         mov        dword [rsp+0x48+var_48], esi
00000000000090ff         mov        rcx, rsp
0000000000009102         mov        rdx, 0xffffffffffffffff
0000000000009109         mov        rsi, rax
000000000000910c         mov        qword [rsp+0x48+var_44], 0x0
0000000000009115         mov        qword [rsp+0x48+var_3C], 0x0
000000000000911e         mov        qword [rsp+0x48+var_34], 0x0
0000000000009127         mov        qword [rsp+0x48+var_2C], 0x0
0000000000009130         mov        qword [rsp+0x48+var_24], 0x0
0000000000009139         mov        qword [rsp+0x48+var_1C], 0x0
0000000000009142         mov        dword [rsp+0x48+var_14], 0x0
000000000000914a         call       quotearg_n_options                          ; quotearg_n_options
000000000000914f         mov        rcx, qword [rsp+0x48+var_10]
0000000000009154         xor        rcx, qword [fs:0x28]
000000000000915d         jne        loc_9169

000000000000915f         add        rsp, 0x48
0000000000009163         ret
                        ; endp

                     loc_9164:
0000000000009164         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_9169:
0000000000009169         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000916e         align      16                                          ; End of unwind block (FDE at 0x1117c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000009170         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x11198), CODE XREF=quotearg_style_mem+10
0000000000009174         mov        rax, rdx
0000000000009177         mov        rdx, rcx
000000000000917a         mov        rcx, qword [fs:0x28]
0000000000009183         mov        qword [rsp+0x48+var_10], rcx
0000000000009188         xor        ecx, ecx
000000000000918a         cmp        esi, 0xa
000000000000918d         je         loc_91f0

000000000000918f         mov        dword [rsp+0x48+var_48], esi
0000000000009192         mov        rcx, rsp
0000000000009195         mov        rsi, rax
0000000000009198         mov        qword [rsp+0x48+var_44], 0x0
00000000000091a1         mov        qword [rsp+0x48+var_3C], 0x0
00000000000091aa         mov        qword [rsp+0x48+var_34], 0x0
00000000000091b3         mov        qword [rsp+0x48+var_2C], 0x0
00000000000091bc         mov        qword [rsp+0x48+var_24], 0x0
00000000000091c5         mov        qword [rsp+0x48+var_1C], 0x0
00000000000091ce         mov        dword [rsp+0x48+var_14], 0x0
00000000000091d6         call       quotearg_n_options                          ; quotearg_n_options
00000000000091db         mov        rdx, qword [rsp+0x48+var_10]
00000000000091e0         xor        rdx, qword [fs:0x28]
00000000000091e9         jne        loc_91f5

00000000000091eb         add        rsp, 0x48
00000000000091ef         ret
                        ; endp

                     loc_91f0:
00000000000091f0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_91f5:
00000000000091f5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
00000000000091fa         align      512                                         ; End of unwind block (FDE at 0x11198)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_style:
0000000000009200         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x111b4), CODE XREF=main+880, main+1090, main+1161, print_stat+860, print_stat+967, print_stat+1070, print_stat+1367, print_stat+1469, find_mount_point+439, find_mount_point+710, find_mount_point+776
0000000000009203         mov        esi, edi
0000000000009205         xor        edi, edi
0000000000009207         jmp        quotearg_n_style                            ; quotearg_n_style
000000000000920c         align      16                                          ; End of unwind block (FDE at 0x111b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000009210         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x111c8)
0000000000009213         mov        rdx, rsi
0000000000009216         mov        esi, edi
0000000000009218         xor        edi, edi
000000000000921a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
000000000000921f         align      32                                          ; End of unwind block (FDE at 0x111c8)

                     quotearg_char_mem:
0000000000009220         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x111dc), CODE XREF=quotearg_char+11
0000000000009224         mov        ecx, edx
0000000000009226         mov        rax, qword [fs:0x28]
000000000000922f         mov        qword [rsp+0x48+var_10], rax
0000000000009234         xor        eax, eax
0000000000009236         mov        rax, qword [qword_2132f0]                   ; qword_2132f0
000000000000923d         mov        r8, rsp
0000000000009240         and        ecx, 0x1f
0000000000009243         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000924b         mov        qword [rsp+0x48+var_18], rax
0000000000009250         mov        eax, edx
0000000000009252         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000009256         shr        al, 0x5
0000000000009259         movzx      eax, al
000000000000925c         lea        r9, qword [r8+rax*4+8]
0000000000009261         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2132d0
0000000000009269         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000926e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2132e0
0000000000009276         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000927b         mov        edx, dword [r9]
000000000000927e         mov        eax, edx
0000000000009280         shr        eax, cl
0000000000009282         not        eax
0000000000009284         and        eax, 0x1
0000000000009287         shl        eax, cl
0000000000009289         mov        rcx, r8
000000000000928c         xor        eax, edx
000000000000928e         mov        rdx, rsi
0000000000009291         mov        rsi, rdi
0000000000009294         mov        dword [r9], eax
0000000000009297         xor        edi, edi
0000000000009299         call       quotearg_n_options                          ; quotearg_n_options
000000000000929e         mov        rsi, qword [rsp+0x48+var_10]
00000000000092a3         xor        rsi, qword [fs:0x28]
00000000000092ac         jne        loc_92b3

00000000000092ae         add        rsp, 0x48
00000000000092b2         ret
                        ; endp

                     loc_92b3:
00000000000092b3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
00000000000092b8         align      64                                          ; End of unwind block (FDE at 0x111dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
00000000000092c0         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x111f8)
00000000000092c4         mov        rsi, 0xffffffffffffffff
00000000000092cb         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
00000000000092d0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x111f8), Begin of unwind block (FDE at 0x1120c), CODE XREF=close_stdout+101
00000000000092d5         mov        rsi, 0xffffffffffffffff
00000000000092dc         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000092e1         align      16                                          ; End of unwind block (FDE at 0x1120c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
00000000000092f0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x11220)
00000000000092f5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000092fa         align      256                                         ; End of unwind block (FDE at 0x11220)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000009300         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x11234)
0000000000009304         mov        rax, rdx
0000000000009307         mov        rdx, qword [fs:0x28]
0000000000009310         mov        qword [rsp+0x48+var_10], rdx
0000000000009315         xor        edx, edx
0000000000009317         cmp        esi, 0xa
000000000000931a         je         loc_9384

000000000000931c         mov        dword [rsp+0x48+var_48], esi
000000000000931f         mov        rcx, rsp
0000000000009322         mov        rdx, 0xffffffffffffffff
0000000000009329         mov        rsi, rax
000000000000932c         mov        qword [rsp+0x48+var_44], 0x0
0000000000009335         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000933e         mov        qword [rsp+0x48+var_34], 0x0
0000000000009347         mov        qword [rsp+0x48+var_2C], 0x0
0000000000009350         mov        qword [rsp+0x48+var_24], 0x0
0000000000009359         mov        qword [rsp+0x48+var_1C], 0x0
0000000000009362         mov        dword [rsp+0x48+var_14], 0x0
000000000000936a         call       quotearg_n_options                          ; quotearg_n_options
000000000000936f         mov        rcx, qword [rsp+0x48+var_10]
0000000000009374         xor        rcx, qword [fs:0x28]
000000000000937d         jne        loc_9389

000000000000937f         add        rsp, 0x48
0000000000009383         ret
                        ; endp

                     loc_9384:
0000000000009384         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_9389:
0000000000009389         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000938e         align      16                                          ; End of unwind block (FDE at 0x11234)

                     quotearg_n_custom_mem:
0000000000009390         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x11250), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000009394         mov        r9, rcx
0000000000009397         mov        rcx, qword [qword_2132f0]                   ; qword_2132f0
000000000000939e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
00000000000093a6         mov        rax, qword [fs:0x28]
00000000000093af         mov        qword [rsp+0x48+var_10], rax
00000000000093b4         xor        eax, eax
00000000000093b6         movaps     xmmword [rsp+0x48+var_48], xmm0
00000000000093ba         test       rsi, rsi
00000000000093bd         mov        qword [rsp+0x48+var_18], rcx
00000000000093c2         mov        dword [rsp+0x48+var_48], 0xa
00000000000093c9         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x2132d0
00000000000093d1         movaps     xmmword [rsp+0x48+var_38], xmm0
00000000000093d6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x2132e0
00000000000093de         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000093e3         je         loc_9417

00000000000093e5         test       rdx, rdx
00000000000093e8         je         loc_9417

00000000000093ea         mov        qword [rsp+0x48+var_20], rsi
00000000000093ef         mov        qword [rsp+0x48+var_18], rdx
00000000000093f4         mov        rcx, rsp
00000000000093f7         mov        rdx, r8
00000000000093fa         mov        rsi, r9
00000000000093fd         call       quotearg_n_options                          ; quotearg_n_options
0000000000009402         mov        rdi, qword [rsp+0x48+var_10]
0000000000009407         xor        rdi, qword [fs:0x28]
0000000000009410         jne        loc_941c

0000000000009412         add        rsp, 0x48
0000000000009416         ret
                        ; endp

                     loc_9417:
0000000000009417         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_941c:
000000000000941c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000009421         align      16                                          ; End of unwind block (FDE at 0x11250)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
0000000000009430         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x1126c)
0000000000009437         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
000000000000943c         align      64                                          ; End of unwind block (FDE at 0x1126c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000009440         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x11280)
0000000000009443         mov        r8, 0xffffffffffffffff
000000000000944a         mov        rdx, rsi
000000000000944d         mov        rsi, rdi
0000000000009450         xor        edi, edi
0000000000009452         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000009457         align      32                                          ; End of unwind block (FDE at 0x11280)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000009460         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x11294)
0000000000009463         mov        rcx, rdx
0000000000009466         mov        rdx, rsi
0000000000009469         mov        rsi, rdi
000000000000946c         xor        edi, edi
000000000000946e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000009473         align      128                                         ; End of unwind block (FDE at 0x11294)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000009480         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x112a8), quote_quoting_options
0000000000009487         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000948c         align      16                                          ; End of unwind block (FDE at 0x112a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000009490         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x112bc), quote_quoting_options
0000000000009497         mov        rdx, rsi
000000000000949a         mov        rsi, rdi
000000000000949d         xor        edi, edi
000000000000949f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000094a4         align      16                                          ; End of unwind block (FDE at 0x112bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
00000000000094b0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x112d0), quote_quoting_options, CODE XREF=argmatch_invalid+46
00000000000094b7         mov        rdx, 0xffffffffffffffff
00000000000094be         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000094c3         align      16                                          ; End of unwind block (FDE at 0x112d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
00000000000094d0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x112e4), quote_quoting_options, CODE XREF=main+1200, print_it+1219, argmatch_valid+90, argmatch_valid+169
00000000000094d7         mov        rsi, rdi
00000000000094da         mov        rdx, 0xffffffffffffffff
00000000000094e1         xor        edi, edi
00000000000094e3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000094e8         align      16                                          ; End of unwind block (FDE at 0x112e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     save_cwd:
00000000000094f0         push       rbx                                         ; Begin of unwind block (FDE at 0x112fc), CODE XREF=find_mount_point+51
00000000000094f1         mov        rbx, rdi
00000000000094f4         mov        qword [rdi+8], 0x0
00000000000094fc         lea        rdi, qword [aCannotChangeTo+31]             ; 0xf2b4
0000000000009503         xor        eax, eax
0000000000009505         mov        esi, 0x80000
000000000000950a         call       open_safer                                  ; open_safer
000000000000950f         mov        edx, eax
0000000000009511         mov        dword [rbx], eax
0000000000009513         xor        eax, eax
0000000000009515         test       edx, edx
0000000000009517         js         loc_9520

0000000000009519         pop        rbx
000000000000951a         ret
                        ; endp
000000000000951b         align      32

                     loc_9520:
0000000000009520         xor        esi, esi                                    ; argument "__size" for method j_getcwd, CODE XREF=save_cwd+39
0000000000009522         xor        edi, edi                                    ; argument "__buf" for method j_getcwd
0000000000009524         call       j_getcwd                                    ; getcwd
0000000000009529         test       rax, rax
000000000000952c         mov        qword [rbx+8], rax
0000000000009530         sete       al
0000000000009533         movzx      eax, al
0000000000009536         neg        eax
0000000000009538         pop        rbx
0000000000009539         ret
                        ; endp
000000000000953a         align      64                                          ; End of unwind block (FDE at 0x112fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int32_t, -68


                     restore_cwd:
0000000000009540         mov        eax, dword [rdi]                            ; Begin of unwind block (FDE at 0x1131c), CODE XREF=find_mount_point+492
0000000000009542         test       eax, eax
0000000000009544         js         loc_9550

0000000000009546         mov        edi, eax                                    ; argument "__fd" for method j_fchdir
0000000000009548         jmp        j_fchdir                                    ; fchdir
                        ; endp
000000000000954d         align      16

                     loc_9550:
0000000000009550         mov        rdi, qword [rdi+8]                          ; CODE XREF=restore_cwd+4
0000000000009554         jmp        chdir_long                                  ; chdir_long
0000000000009559         align      32                                          ; End of unwind block (FDE at 0x1131c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_cwd:
0000000000009560         push       rbx                                         ; Begin of unwind block (FDE at 0x11330), CODE XREF=find_mount_point+508
0000000000009561         mov        rbx, rdi
0000000000009564         mov        edi, dword [rdi]
0000000000009566         test       edi, edi
0000000000009568         js         loc_956f

000000000000956a         call       j_close                                     ; close

                     loc_956f:
000000000000956f         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free, CODE XREF=free_cwd+8
0000000000009573         pop        rbx
0000000000009574         jmp        j_free                                      ; free
                        ; endp
0000000000009579         align      128                                         ; End of unwind block (FDE at 0x11330)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000009580         push       r15                                         ; Begin of unwind block (FDE at 0x1134c), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
0000000000009582         push       r14
0000000000009584         push       r13
0000000000009586         push       r12
0000000000009588         mov        r12, r9
000000000000958b         push       rbp
000000000000958c         push       rbx
000000000000958d         mov        rbp, rdi
0000000000009590         mov        rbx, r8
0000000000009593         sub        rsp, 0x28
0000000000009597         test       rsi, rsi
000000000000959a         je         loc_96b8

00000000000095a0         mov        r8, rdx
00000000000095a3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
00000000000095aa         mov        r9, rcx
00000000000095ad         xor        eax, eax
00000000000095af         mov        rcx, rsi
00000000000095b2         mov        esi, 0x1
00000000000095b7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_95bc:
00000000000095bc         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xfb3b, CODE XREF=version_etc_arn+337
00000000000095c3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000095c5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000095ca         call       j_dcgettext                                 ; dcgettext
00000000000095cf         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000095d6         mov        rcx, rax
00000000000095d9         mov        r8d, 0x7e3
00000000000095df         mov        esi, 0x1
00000000000095e4         mov        rdi, rbp
00000000000095e7         xor        eax, eax
00000000000095e9         call       j___fprintf_chk                             ; __fprintf_chk
00000000000095ee         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
00000000000095f5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000095f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000095fc         call       j_dcgettext                                 ; dcgettext
0000000000009601         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000009604         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000009607         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000960c         cmp        r12, 0x9
0000000000009610         ja         loc_9950

0000000000009616         lea        rdx, qword [switch_table_fe24]              ; switch_table_fe24
000000000000961d         movsxd     rax, dword [rdx+r12*4]
0000000000009621         add        rax, rdx
0000000000009624         jmp        rax                                         ; switch statement using table at 0xfe24, with 10 cases, 0x9630,0x96a6,0x96e0,0x9738,0x9778,0x97c0,0x9810,0x9868,0x9898,0x9900
0000000000009626         align      16

                     loc_9630:
0000000000009630         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000009634         mov        rax, qword [rbx+0x10]
0000000000009638         lea        rsi, qword [aWrittenBySSSns_fd38]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000963f         mov        r8, qword [rbx+8]
0000000000009643         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009648         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000964a         mov        r13, qword [rbx+0x30]
000000000000964e         mov        r12, qword [rbx+0x28]
0000000000009652         mov        qword [rsp+0x58+var_48], r9
0000000000009657         mov        r15, qword [rbx+0x20]
000000000000965b         mov        r14, qword [rbx+0x18]
000000000000965f         mov        qword [rsp+0x58+var_58], rax
0000000000009663         mov        qword [rsp+0x58+var_50], r8
0000000000009668         mov        rbx, qword [rbx]
000000000000966b         call       j_dcgettext                                 ; dcgettext
0000000000009670         sub        rsp, 0x8

                     loc_9674:
0000000000009674         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000009679         mov        rdx, rax
000000000000967c         mov        rcx, rbx
000000000000967f         mov        esi, 0x1
0000000000009684         mov        rdi, rbp
0000000000009687         xor        eax, eax
0000000000009689         push       r9
000000000000968b         push       r13
000000000000968d         push       r12
000000000000968f         push       r15
0000000000009691         push       r14
0000000000009693         mov        r9, qword [rsp+0x88+var_58]
0000000000009698         mov        r8, qword [rsp+0x88+var_50]
000000000000969d         call       j___fprintf_chk                             ; __fprintf_chk
00000000000096a2         add        rsp, 0x30

                     loc_96a6:
00000000000096a6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
00000000000096aa         pop        rbx
00000000000096ab         pop        rbp
00000000000096ac         pop        r12
00000000000096ae         pop        r13
00000000000096b0         pop        r14
00000000000096b2         pop        r15
00000000000096b4         ret
                        ; endp
00000000000096b5         align      8

                     loc_96b8:
00000000000096b8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
00000000000096bb         mov        rcx, rdx
00000000000096be         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
00000000000096c5         mov        esi, 0x1
00000000000096ca         xor        eax, eax
00000000000096cc         call       j___fprintf_chk                             ; __fprintf_chk
00000000000096d1         jmp        loc_95bc
00000000000096d6         align      32

                     loc_96e0:
00000000000096e0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000096e4         mov        r9, qword [rbx+0x38]
00000000000096e8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000096ef         mov        rax, qword [rbx+0x10]
00000000000096f3         mov        r8, qword [rbx+8]
00000000000096f7         mov        edx, 0x5
00000000000096fc         mov        r13, qword [rbx+0x30]
0000000000009700         mov        r12, qword [rbx+0x28]
0000000000009704         mov        r15, qword [rbx+0x20]
0000000000009708         mov        r14, qword [rbx+0x18]
000000000000970c         mov        rbx, qword [rbx]
000000000000970f         mov        qword [rsp+0x58+var_40], r10
0000000000009714         mov        qword [rsp+0x58+var_48], r9
0000000000009719         mov        qword [rsp+0x58+var_58], rax
000000000000971d         mov        qword [rsp+0x58+var_50], r8

                     loc_9722:
0000000000009722         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000009724         call       j_dcgettext                                 ; dcgettext
0000000000009729         mov        r10, qword [rsp+0x58+var_40]
000000000000972e         push       r10
0000000000009730         jmp        loc_9674
0000000000009735         align      8

                     loc_9738:
0000000000009738         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000973b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000009742         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009747         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009749         call       j_dcgettext                                 ; dcgettext
000000000000974e         add        rsp, 0x28
0000000000009752         mov        rcx, rbx
0000000000009755         mov        rdi, rbp
0000000000009758         pop        rbx
0000000000009759         pop        rbp
000000000000975a         pop        r12
000000000000975c         pop        r13
000000000000975e         pop        r14
0000000000009760         pop        r15
0000000000009762         mov        rdx, rax
0000000000009765         mov        esi, 0x1
000000000000976a         xor        eax, eax
000000000000976c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000009771         align      8

                     loc_9778:
0000000000009778         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000977c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000009783         mov        rbx, qword [rbx]
0000000000009786         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000978b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000978d         call       j_dcgettext                                 ; dcgettext
0000000000009792         add        rsp, 0x28
0000000000009796         mov        r8, r12
0000000000009799         mov        rcx, rbx
000000000000979c         mov        rdi, rbp
000000000000979f         mov        rdx, rax
00000000000097a2         mov        esi, 0x1
00000000000097a7         pop        rbx
00000000000097a8         pop        rbp
00000000000097a9         pop        r12
00000000000097ab         pop        r13
00000000000097ad         pop        r14
00000000000097af         pop        r15
00000000000097b1         xor        eax, eax
00000000000097b3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000097b8         align      64

                     loc_97c0:
00000000000097c0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
00000000000097c4         mov        r12, qword [rbx+8]
00000000000097c8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
00000000000097cf         mov        rbx, qword [rbx]
00000000000097d2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000097d7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000097d9         call       j_dcgettext                                 ; dcgettext
00000000000097de         add        rsp, 0x28
00000000000097e2         mov        r9, r13
00000000000097e5         mov        r8, r12
00000000000097e8         mov        rcx, rbx
00000000000097eb         mov        rdi, rbp
00000000000097ee         mov        rdx, rax
00000000000097f1         pop        rbx
00000000000097f2         pop        rbp
00000000000097f3         pop        r12
00000000000097f5         pop        r13
00000000000097f7         pop        r14
00000000000097f9         pop        r15
00000000000097fb         mov        esi, 0x1
0000000000009800         xor        eax, eax
0000000000009802         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000009807         align      16

                     loc_9810:
0000000000009810         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000009817         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000981c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000981e         mov        r14, qword [rbx+0x18]
0000000000009822         mov        r13, qword [rbx+0x10]
0000000000009826         mov        r12, qword [rbx+8]
000000000000982a         mov        rbx, qword [rbx]
000000000000982d         call       j_dcgettext                                 ; dcgettext
0000000000009832         sub        rsp, 0x8

                     loc_9836:
0000000000009836         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000009838         mov        rdx, rax
000000000000983b         mov        r9, r13
000000000000983e         mov        r8, r12
0000000000009841         mov        rcx, rbx
0000000000009844         mov        rdi, rbp
0000000000009847         mov        esi, 0x1
000000000000984c         xor        eax, eax
000000000000984e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009853         pop        rax
0000000000009854         pop        rdx
0000000000009855         add        rsp, 0x28
0000000000009859         pop        rbx
000000000000985a         pop        rbp
000000000000985b         pop        r12
000000000000985d         pop        r13
000000000000985f         pop        r14
0000000000009861         pop        r15
0000000000009863         ret
                        ; endp
0000000000009864         align      8

                     loc_9868:
0000000000009868         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000986c         lea        rsi, qword [aWrittenBySSSns_fcb8]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000009873         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009878         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000987a         mov        r14, qword [rbx+0x18]
000000000000987e         mov        r13, qword [rbx+0x10]
0000000000009882         mov        r12, qword [rbx+8]
0000000000009886         mov        rbx, qword [rbx]
0000000000009889         call       j_dcgettext                                 ; dcgettext
000000000000988e         push       r15
0000000000009890         jmp        loc_9836
0000000000009892         align      8

                     loc_9898:
0000000000009898         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000989c         mov        r12, qword [rbx+0x28]
00000000000098a0         lea        rsi, qword [aWrittenBySSSns_fce0]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
00000000000098a7         mov        r15, qword [rbx+0x20]
00000000000098ab         mov        r14, qword [rbx+0x18]
00000000000098af         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000098b4         mov        r13, qword [rbx+0x10]
00000000000098b8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000098ba         mov        rbx, qword [rbx]
00000000000098bd         mov        qword [rsp+0x58+var_58], r8
00000000000098c1         call       j_dcgettext                                 ; dcgettext
00000000000098c6         sub        rsp, 0x8
00000000000098ca         mov        r9, r13
00000000000098cd         push       r12
00000000000098cf         push       r15
00000000000098d1         push       r14

                     loc_98d3:
00000000000098d3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000098d8         mov        rcx, rbx
00000000000098db         mov        rdx, rax
00000000000098de         mov        rdi, rbp
00000000000098e1         mov        esi, 0x1
00000000000098e6         xor        eax, eax
00000000000098e8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000098ed         add        rsp, 0x20
00000000000098f1         add        rsp, 0x28
00000000000098f5         pop        rbx
00000000000098f6         pop        rbp
00000000000098f7         pop        r12
00000000000098f9         pop        r13
00000000000098fb         pop        r14
00000000000098fd         pop        r15
00000000000098ff         ret
                        ; endp

                     loc_9900:
0000000000009900         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000009904         mov        r13, qword [rbx+0x30]
0000000000009908         lea        rsi, qword [aWrittenBySSSns_fd08]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000990f         mov        r12, qword [rbx+0x28]
0000000000009913         mov        r15, qword [rbx+0x20]
0000000000009917         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000991c         mov        r14, qword [rbx+0x18]
0000000000009920         mov        r8, qword [rbx+8]
0000000000009924         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009926         mov        qword [rsp+0x58+var_50], r9
000000000000992b         mov        rbx, qword [rbx]
000000000000992e         mov        qword [rsp+0x58+var_58], r8
0000000000009932         call       j_dcgettext                                 ; dcgettext
0000000000009937         push       r13
0000000000009939         push       r12
000000000000993b         push       r15
000000000000993d         push       r14
000000000000993f         mov        r9, qword [rsp+0x78+var_50]
0000000000009944         jmp        loc_98d3
0000000000009946         align      16

                     loc_9950:
0000000000009950         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000009954         mov        r9, qword [rbx+0x38]
0000000000009958         mov        edx, 0x5
000000000000995d         mov        rax, qword [rbx+0x10]
0000000000009961         mov        r8, qword [rbx+8]
0000000000009965         lea        rsi, qword [aWrittenBySSSns_fda0]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000996c         mov        r13, qword [rbx+0x30]
0000000000009970         mov        r12, qword [rbx+0x28]
0000000000009974         mov        r15, qword [rbx+0x20]
0000000000009978         mov        r14, qword [rbx+0x18]
000000000000997c         mov        qword [rsp+0x58+var_40], r10
0000000000009981         mov        qword [rsp+0x58+var_48], r9
0000000000009986         mov        qword [rsp+0x58+var_58], rax
000000000000998a         mov        qword [rsp+0x58+var_50], r8
000000000000998f         mov        rbx, qword [rbx]
0000000000009992         jmp        loc_9722
0000000000009997         align      32                                          ; End of unwind block (FDE at 0x1134c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
00000000000099a0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x11460)
00000000000099a3         cmp        qword [r8], 0x0
00000000000099a7         je         j_version_etc_arn                           ; version_etc_arn

00000000000099a9         nop        dword [rax]

                     loc_99b0:
00000000000099b0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
00000000000099b4         cmp        qword [r8+r9*8], 0x0
00000000000099b9         jne        loc_99b0

                     j_version_etc_arn:        // version_etc_arn
00000000000099bb         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
00000000000099c0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x11460), Begin of unwind block (FDE at 0x11474)
00000000000099c4         mov        r10, r8
00000000000099c7         xor        r9d, r9d
00000000000099ca         mov        rax, qword [fs:0x28]
00000000000099d3         mov        qword [rsp+0x68+var_10], rax
00000000000099d8         xor        eax, eax
00000000000099da         mov        r8, rsp
00000000000099dd         nop        dword [rax]

                     loc_99e0:
00000000000099e0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000099e3         cmp        eax, 0x2f
00000000000099e6         ja         loc_9a2a

00000000000099e8         mov        r11d, eax
00000000000099eb         add        r11, qword [r10+0x10]
00000000000099ef         add        eax, 0x8
00000000000099f2         mov        dword [r10], eax

                     loc_99f5:
00000000000099f5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
00000000000099f8         test       rax, rax
00000000000099fb         mov        qword [r8+r9*8], rax
00000000000099ff         je         loc_9a0b

0000000000009a01         add        r9, 0x1
0000000000009a05         cmp        r9, 0xa
0000000000009a09         jne        loc_99e0

                     loc_9a0b:
0000000000009a0b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000009a10         mov        rax, qword [rsp+0x68+var_10]
0000000000009a15         xor        rax, qword [fs:0x28]
0000000000009a1e         jne        loc_9a25

0000000000009a20         add        rsp, 0x68
0000000000009a24         ret
                        ; endp

                     loc_9a25:
0000000000009a25         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_9a2a:
0000000000009a2a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
0000000000009a2e         lea        rax, qword [r11+8]
0000000000009a32         mov        qword [r10+8], rax
0000000000009a36         jmp        loc_99f5
0000000000009a38         align      64                                          ; End of unwind block (FDE at 0x11474)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000009a40         push       rbp                                         ; Begin of unwind block (FDE at 0x11490), CODE XREF=main+356
0000000000009a41         push       rbx
0000000000009a42         mov        r10d, 0x20
0000000000009a48         xor        r11d, r11d
0000000000009a4b         sub        rsp, 0xb8
0000000000009a52         mov        rax, qword [fs:0x28]
0000000000009a5b         mov        qword [rsp+0xc8+var_50], rax
0000000000009a60         xor        eax, eax
0000000000009a62         lea        rax, qword [rsp+0xc8+arg_0]
0000000000009a6a         mov        qword [rsp+0xc8+var_28], r8
0000000000009a72         lea        rbx, qword [rsp+0xc8+arg_0]
0000000000009a7a         lea        r8, qword [rsp+0xc8+var_A8]
0000000000009a7f         mov        qword [rsp+0xc8+var_20], r9
0000000000009a87         mov        dword [rsp+0xc8+var_C0], 0x20
0000000000009a8f         mov        qword [rsp+0xc8+var_B8], rax
0000000000009a94         lea        rax, qword [rsp+0xc8+var_48]
0000000000009a9c         xor        r9d, r9d
0000000000009a9f         mov        qword [rsp+0xc8+var_B0], rax
0000000000009aa4         mov        rbp, rax
0000000000009aa7         nop        word [rax+rax]

                     loc_9ab0:
0000000000009ab0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000009ab4         ja         loc_9b0c

0000000000009ab6         mov        eax, r10d
0000000000009ab9         mov        r11d, 0x1
0000000000009abf         add        r10d, 0x8
0000000000009ac3         add        rax, rbp

                     loc_9ac6:
0000000000009ac6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000009ac9         test       rax, rax
0000000000009acc         mov        qword [r8+r9*8], rax
0000000000009ad0         je         loc_9adc

0000000000009ad2         add        r9, 0x1
0000000000009ad6         cmp        r9, 0xa
0000000000009ada         jne        loc_9ab0

                     loc_9adc:
0000000000009adc         test       r11b, r11b                                  ; CODE XREF=version_etc+144
0000000000009adf         jne        loc_9b05

                     loc_9ae1:
0000000000009ae1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000009ae6         mov        rax, qword [rsp+0xc8+var_50]
0000000000009aeb         xor        rax, qword [fs:0x28]
0000000000009af4         jne        loc_9b00

0000000000009af6         add        rsp, 0xb8
0000000000009afd         pop        rbx
0000000000009afe         pop        rbp
0000000000009aff         ret
                        ; endp

                     loc_9b00:
0000000000009b00         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_9b05:
0000000000009b05         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
0000000000009b0a         jmp        loc_9ae1

                     loc_9b0c:
0000000000009b0c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
0000000000009b0f         add        rbx, 0x8
0000000000009b13         jmp        loc_9ac6
0000000000009b15         align      32                                          ; End of unwind block (FDE at 0x11490)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000009b20         push       rbx                                         ; Begin of unwind block (FDE at 0x114bc)
0000000000009b21         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000009b28         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009b2d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009b2f         call       j_dcgettext                                 ; dcgettext
0000000000009b34         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000009b3b         mov        rsi, rax
0000000000009b3e         mov        edi, 0x1
0000000000009b43         xor        eax, eax
0000000000009b45         call       j___printf_chk                              ; __printf_chk
0000000000009b4a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000009b51         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009b56         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009b58         call       j_dcgettext                                 ; dcgettext
0000000000009b5d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000009b64         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xdeac
0000000000009b6b         mov        rsi, rax
0000000000009b6e         mov        edi, 0x1
0000000000009b73         xor        eax, eax
0000000000009b75         call       j___printf_chk                              ; __printf_chk
0000000000009b7a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000009b81         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000009b88         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009b8a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009b8f         call       j_dcgettext                                 ; dcgettext
0000000000009b94         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000009b97         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000009b9a         pop        rbx
0000000000009b9b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000009ba0         push       rbx                                         ; End of unwind block (FDE at 0x114bc), Begin of unwind block (FDE at 0x114dc), CODE XREF=print_it+45, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15, read_file_system_list+384, read_file_system_list+1239, xstrcat+135, xstrcat+229
0000000000009ba1         mov        rbx, rdi
0000000000009ba4         call       j_malloc                                    ; malloc
0000000000009ba9         test       rax, rax
0000000000009bac         jne        loc_9bb3

0000000000009bae         test       rbx, rbx
0000000000009bb1         jne        loc_9bb5

                     loc_9bb3:
0000000000009bb3         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000009bb4         ret
                        ; endp

                     loc_9bb5:
0000000000009bb5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9bba:
0000000000009bba         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x114dc)
                     xnmalloc:
0000000000009bc0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x114f8)
0000000000009bc3         mul        rsi
0000000000009bc6         mov        rdi, rax
0000000000009bc9         seto       al
0000000000009bcc         test       rdi, rdi
0000000000009bcf         js         loc_9bdb

0000000000009bd1         movzx      eax, al
0000000000009bd4         test       rax, rax
0000000000009bd7         jne        loc_9bdb

0000000000009bd9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_9bdb:
0000000000009bdb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
0000000000009bdf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9be4:
0000000000009be4         nop                                                    ; End of unwind block (FDE at 0x114f8)
0000000000009be6         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000009bf0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x1150c)
                        ; endp
0000000000009bf2         align      1024                                        ; End of unwind block (FDE at 0x1150c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000009c00         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x11520), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000009c03         push       rbx
0000000000009c04         mov        rbx, rsi
0000000000009c07         jne        loc_9c0e

0000000000009c09         test       rdi, rdi
0000000000009c0c         jne        loc_9c28

                     loc_9c0e:
0000000000009c0e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000009c11         call       j_realloc                                   ; realloc
0000000000009c16         test       rax, rax
0000000000009c19         jne        loc_9c20

0000000000009c1b         test       rbx, rbx
0000000000009c1e         jne        loc_9c31

                     loc_9c20:
0000000000009c20         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000009c21         ret
                        ; endp
0000000000009c22         align      8

                     loc_9c28:
0000000000009c28         call       j_free                                      ; free, CODE XREF=xrealloc+12
0000000000009c2d         xor        eax, eax
0000000000009c2f         pop        rbx
0000000000009c30         ret
                        ; endp

                     loc_9c31:
0000000000009c31         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9c36:
0000000000009c36         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x11520)
                     xnrealloc:
0000000000009c40         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x11544)
0000000000009c43         mul        rdx
0000000000009c46         mov        rsi, rax
0000000000009c49         seto       al
0000000000009c4c         test       rsi, rsi
0000000000009c4f         js         loc_9c5b

0000000000009c51         movzx      eax, al
0000000000009c54         test       rax, rax
0000000000009c57         jne        loc_9c5b

0000000000009c59         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_9c5b:
0000000000009c5b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000009c5f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9c64:
0000000000009c64         nop                                                    ; End of unwind block (FDE at 0x11544)
0000000000009c66         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000009c70         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x11558)
0000000000009c73         mov        r9, rdx
0000000000009c76         mov        rcx, qword [rsi]
0000000000009c79         je         loc_9cb0

0000000000009c7b         xor        edx, edx
0000000000009c7d         movabs     rax, 0x5555555555555554
0000000000009c87         div        r9
0000000000009c8a         cmp        rax, rcx
0000000000009c8d         jbe        loc_9ccb

0000000000009c8f         mov        rax, rcx
0000000000009c92         shr        rax, 0x1
0000000000009c95         lea        rcx, qword [rax+rcx+1]

                     loc_9c9a:
0000000000009c9a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000009c9d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000009ca1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000009ca4         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000009ca9         align      16

                     loc_9cb0:
0000000000009cb0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000009cb3         je         loc_9cd8

                     loc_9cb5:
0000000000009cb5         mov        rax, rcx                                    ; CODE XREF=sub_9cd4+28
0000000000009cb8         mul        r9
0000000000009cbb         seto       dl
0000000000009cbe         test       rax, rax
0000000000009cc1         movzx      edx, dl
0000000000009cc4         js         loc_9ccb

0000000000009cc6         test       rdx, rdx
0000000000009cc9         je         loc_9c9a

                     loc_9ccb:
0000000000009ccb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000009ccf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9cd4:
0000000000009cd4         nop        dword [rax]
                        ; endp

                     loc_9cd8:
0000000000009cd8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000009cda         mov        eax, 0x80
0000000000009cdf         xor        r8d, r8d
0000000000009ce2         div        r9
0000000000009ce5         test       rax, rax
0000000000009ce8         sete       r8b
0000000000009cec         lea        rcx, qword [r8+rax]
0000000000009cf0         jmp        loc_9cb5
0000000000009cf2         align      256                                         ; End of unwind block (FDE at 0x11558)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000009d00         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x11570)
0000000000009d03         mov        rax, qword [rsi]
0000000000009d06         je         loc_9d30

0000000000009d08         movabs     rdx, 0x5555555555555553
0000000000009d12         cmp        rax, rdx
0000000000009d15         ja         loc_9d41

0000000000009d17         mov        rdx, rax
0000000000009d1a         shr        rdx, 0x1
0000000000009d1d         lea        rax, qword [rdx+rax+1]

                     loc_9d22:
0000000000009d22         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000009d25         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000009d28         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000009d2d         align      16

                     loc_9d30:
0000000000009d30         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000009d33         mov        edx, 0x80
0000000000009d38         cmove      rax, rdx
0000000000009d3c         test       rax, rax
0000000000009d3f         jns        loc_9d22

                     loc_9d41:
0000000000009d41         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000009d45         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d4a:
0000000000009d4a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x11570)
                     xzalloc:
0000000000009d50         push       rbx                                         ; Begin of unwind block (FDE at 0x11588)
0000000000009d51         mov        rbx, rdi
0000000000009d54         call       xmalloc                                     ; xmalloc
0000000000009d59         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000009d5c         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000009d5e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000009d61         pop        rbx
0000000000009d62         jmp        j_memset                                    ; memset
                        ; endp
0000000000009d67         align      16                                          ; End of unwind block (FDE at 0x11588)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000009d70         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x115a4)
0000000000009d73         sub        rsp, 0x8
0000000000009d77         mul        rsi
0000000000009d7a         seto       dl
0000000000009d7d         test       rax, rax
0000000000009d80         js         loc_9d99

0000000000009d82         movzx      edx, dl
0000000000009d85         test       rdx, rdx
0000000000009d88         jne        loc_9d99

0000000000009d8a         call       j_calloc                                    ; calloc
0000000000009d8f         test       rax, rax
0000000000009d92         je         loc_9d99

0000000000009d94         add        rsp, 0x8
0000000000009d98         ret
                        ; endp

                     loc_9d99:
0000000000009d99         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d9e:
0000000000009d9e         nop                                                    ; End of unwind block (FDE at 0x115a4)
                        ; endp

                     xmemdup:
0000000000009da0         push       rbp                                         ; Begin of unwind block (FDE at 0x115c0), CODE XREF=clone_quoting_options+40, xstrdup+17
0000000000009da1         push       rbx
0000000000009da2         mov        rbp, rdi
0000000000009da5         mov        rdi, rsi
0000000000009da8         mov        rbx, rsi
0000000000009dab         sub        rsp, 0x8
0000000000009daf         call       xmalloc                                     ; xmalloc
0000000000009db4         add        rsp, 0x8
0000000000009db8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000009dbb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000009dbe         pop        rbx
0000000000009dbf         pop        rbp
0000000000009dc0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000009dc3         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000009dc8         align      16                                          ; End of unwind block (FDE at 0x115c0)

                     xstrdup:
0000000000009dd0         push       rbx                                         ; Begin of unwind block (FDE at 0x115e8), CODE XREF=default_format+29, default_format+67, default_format+270, default_format+286, read_file_system_list+400, read_file_system_list+418, read_file_system_list+437, read_file_system_list+454, read_file_system_list+1251, read_file_system_list+1264, read_file_system_list+1287
0000000000009dd1         mov        rbx, rdi
0000000000009dd4         call       j_strlen                                    ; strlen
0000000000009dd9         mov        rdi, rbx
0000000000009ddc         lea        rsi, qword [rax+1]
0000000000009de0         pop        rbx
0000000000009de1         jmp        xmemdup                                     ; xmemdup
0000000000009de3         align      16                                          ; End of unwind block (FDE at 0x115e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000009df0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x11604), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=dir_name+19, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xgetcwd+42, xvasprintf+159
0000000000009df7         sub        rsp, 0x8
0000000000009dfb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009e00         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009e02         call       j_dcgettext                                 ; dcgettext
0000000000009e07         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000009e0d         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xf36a
0000000000009e14         mov        rcx, rax
0000000000009e17         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000009e19         xor        eax, eax
0000000000009e1b         call       j_error                                     ; error
0000000000009e20         call       j_abort                                     ; abort
                        ; endp
0000000000009e25         align      16                                          ; End of unwind block (FDE at 0x11604)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xgetcwd:
0000000000009e30         push       rbx                                         ; Begin of unwind block (FDE at 0x1161c), CODE XREF=find_mount_point+560
0000000000009e31         xor        esi, esi                                    ; argument "__size" for method j_getcwd
0000000000009e33         xor        edi, edi                                    ; argument "__buf" for method j_getcwd
0000000000009e35         call       j_getcwd                                    ; getcwd
0000000000009e3a         test       rax, rax
0000000000009e3d         mov        rbx, rax
0000000000009e40         je         loc_9e50

                     loc_9e42:
0000000000009e42         mov        rax, rbx                                    ; CODE XREF=xgetcwd+40
0000000000009e45         pop        rbx
0000000000009e46         ret
                        ; endp
0000000000009e47         align      16

                     loc_9e50:
0000000000009e50         call       j___errno_location                          ; __errno_location, CODE XREF=xgetcwd+16
0000000000009e55         cmp        dword [rax], 0xc
0000000000009e58         jne        loc_9e42

0000000000009e5a         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     sub_9e5f:
0000000000009e5f         nop                                                    ; End of unwind block (FDE at 0x1161c)
                     xasprintf:
0000000000009e60         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0x1163c), CODE XREF=default_format+120, default_format+170, default_format+220
0000000000009e67         test       al, al
0000000000009e69         mov        qword [rsp+0xd8+var_B0], rsi
0000000000009e6e         mov        qword [rsp+0xd8+var_A8], rdx
0000000000009e73         mov        qword [rsp+0xd8+var_A0], rcx
0000000000009e78         mov        qword [rsp+0xd8+var_98], r8
0000000000009e7d         mov        qword [rsp+0xd8+var_90], r9
0000000000009e82         je         loc_9ebb

0000000000009e84         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000009e89         movaps     xmmword [rsp+0xd8+var_78], xmm1
0000000000009e8e         movaps     xmmword [rsp+0xd8+var_68], xmm2
0000000000009e93         movaps     xmmword [rsp+0xd8+var_58], xmm3
0000000000009e9b         movaps     xmmword [rsp+0xd8+var_48], xmm4
0000000000009ea3         movaps     xmmword [rsp+0xd8+var_38], xmm5
0000000000009eab         movaps     xmmword [rsp+0xd8+var_28], xmm6
0000000000009eb3         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_9ebb:
0000000000009ebb         mov        rax, qword [fs:0x28]                        ; CODE XREF=xasprintf+34
0000000000009ec4         mov        qword [rsp+0xd8+var_C0], rax
0000000000009ec9         xor        eax, eax
0000000000009ecb         lea        rax, qword [rsp+0xd8+arg_0]
0000000000009ed3         mov        rsi, rsp
0000000000009ed6         mov        qword [rsp+0xd8+var_D0], rax
0000000000009edb         lea        rax, qword [rsp+0xd8+var_B8]
0000000000009ee0         mov        dword [rsp+0xd8+var_D8], 0x8
0000000000009ee7         mov        dword [rsp+0xd8+var_D4], 0x30
0000000000009eef         mov        qword [rsp+0xd8+var_C8], rax
0000000000009ef4         call       xvasprintf                                  ; xvasprintf
0000000000009ef9         mov        rdx, qword [rsp+0xd8+var_C0]
0000000000009efe         xor        rdx, qword [fs:0x28]
0000000000009f07         jne        loc_9f11

0000000000009f09         add        rsp, 0xd8
0000000000009f10         ret
                        ; endp

                     loc_9f11:
0000000000009f11         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xasprintf+167
                        ; endp
0000000000009f16         align      32                                          ; End of unwind block (FDE at 0x1163c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cdb_free:
0000000000009f20         mov        edi, dword [rdi]                            ; Begin of unwind block (FDE at 0x1165c), CODE XREF=cdb_advance_fd+32, chdir_long+462, chdir_long+518
0000000000009f22         test       edi, edi
0000000000009f24         js         loc_9f40

0000000000009f26         sub        rsp, 0x8
0000000000009f2a         call       j_close                                     ; close
0000000000009f2f         test       eax, eax
0000000000009f31         jne        loc_9f42

0000000000009f33         add        rsp, 0x8
0000000000009f37         ret
                        ; endp
0000000000009f38         align      64

                     loc_9f40:
0000000000009f40         ret                                                    ; CODE XREF=cdb_free+4
                        ; endp

                     loc_9f42:
0000000000009f42         lea        rcx, qword [__PRETTY_FUNCTION__.5081]       ; argument "__function" for method j___assert_fail, "cdb_free", CODE XREF=cdb_free+17
0000000000009f49         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
0000000000009f50         lea        rdi, qword [aClosefail]                     ; argument "__assertion" for method j___assert_fail, "! close_fail"
0000000000009f57         mov        edx, 0x40                                   ; argument "__line" for method j___assert_fail
0000000000009f5c         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000009f61         align      16                                          ; End of unwind block (FDE at 0x1165c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cdb_advance_fd:
0000000000009f70         push       rbp                                         ; Begin of unwind block (FDE at 0x11678), CODE XREF=chdir_long+259, chdir_long+409, chdir_long+491, chdir_long+543
0000000000009f71         push       rbx
0000000000009f72         mov        rbx, rdi
0000000000009f75         xor        eax, eax
0000000000009f77         mov        edx, 0x10900                                ; argument "__oflag" for method j_openat
0000000000009f7c         sub        rsp, 0x8
0000000000009f80         mov        edi, dword [rdi]                            ; argument "__fd" for method j_openat
0000000000009f82         call       j_openat                                    ; openat
0000000000009f87         test       eax, eax
0000000000009f89         js         loc_9fa0

0000000000009f8b         mov        ebp, eax
0000000000009f8d         mov        rdi, rbx                                    ; argument #1 for method cdb_free
0000000000009f90         call       cdb_free                                    ; cdb_free
0000000000009f95         mov        dword [rbx], ebp
0000000000009f97         xor        eax, eax

                     loc_9f99:
0000000000009f99         add        rsp, 0x8                                    ; CODE XREF=cdb_advance_fd+53
0000000000009f9d         pop        rbx
0000000000009f9e         pop        rbp
0000000000009f9f         ret
                        ; endp

                     loc_9fa0:
0000000000009fa0         mov        eax, 0xffffffff                             ; CODE XREF=cdb_advance_fd+25, DATA XREF=print_statfs+2395
0000000000009fa5         jmp        loc_9f99
0000000000009fa7         align      16                                          ; End of unwind block (FDE at 0x11678)

                     chdir_long:
0000000000009fb0         push       r15                                         ; Begin of unwind block (FDE at 0x116a4), CODE XREF=restore_cwd+20
0000000000009fb2         push       r14
0000000000009fb4         push       r13
0000000000009fb6         push       r12
0000000000009fb8         push       rbp
0000000000009fb9         push       rbx
0000000000009fba         mov        rbp, rdi
0000000000009fbd         sub        rsp, 0x18
0000000000009fc1         mov        rax, qword [fs:0x28]
0000000000009fca         mov        qword [rsp+0x48+var_40], rax
0000000000009fcf         xor        eax, eax
0000000000009fd1         call       j_chdir                                     ; chdir
0000000000009fd6         test       eax, eax
0000000000009fd8         mov        ebx, eax
0000000000009fda         je         loc_9fe9

0000000000009fdc         call       j___errno_location                          ; __errno_location
0000000000009fe1         cmp        dword [rax], 0x24
0000000000009fe4         mov        r14, rax
0000000000009fe7         je         loc_a010

                     loc_9fe9:
0000000000009fe9         mov        rcx, qword [rsp+0x48+var_40]                ; CODE XREF=chdir_long+42, chdir_long+354, chdir_long+475, chdir_long+523
0000000000009fee         xor        rcx, qword [fs:0x28]
0000000000009ff7         mov        eax, ebx
0000000000009ff9         jne        loc_a201

0000000000009fff         add        rsp, 0x18
000000000000a003         pop        rbx
000000000000a004         pop        rbp
000000000000a005         pop        r12
000000000000a007         pop        r13
000000000000a009         pop        r14
000000000000a00b         pop        r15
000000000000a00d         ret
                        ; endp
000000000000a00e         align      16

                     loc_a010:
000000000000a010         mov        rdi, rbp                                    ; argument "__s" for method j_strlen, CODE XREF=chdir_long+55
000000000000a013         call       j_strlen                                    ; strlen
000000000000a018         test       rax, rax
000000000000a01b         mov        r12, rax
000000000000a01e         mov        dword [rsp+0x48+var_44], 0xffffff9c
000000000000a026         je         loc_a206

000000000000a02c         cmp        rax, aStertmclonetab                        ; "sterTMCloneTable"
000000000000a032         jbe        loc_a225

000000000000a038         lea        rsi, qword [aLibs+6]                        ; argument "__accept" for method j_strspn, 0xf63e
000000000000a03f         mov        rdi, rbp                                    ; argument "__s" for method j_strspn
000000000000a042         call       j_strspn                                    ; strspn
000000000000a047         cmp        rax, 0x2
000000000000a04b         mov        rbx, rax
000000000000a04e         je         loc_a120

000000000000a054         test       rax, rax
000000000000a057         mov        r15, rbp
000000000000a05a         jne        loc_a1c0

                     loc_a060:
000000000000a060         cmp        byte [r15], 0x2f                            ; CODE XREF=chdir_long+444, chdir_long+557
000000000000a064         je         loc_a263

000000000000a06a         add        rbp, r12
000000000000a06d         cmp        r15, rbp
000000000000a070         ja         loc_a244

000000000000a076         mov        rax, rbp
000000000000a079         lea        r12, qword [rsp+0x48+var_44]
000000000000a07e         sub        rax, r15
000000000000a081         cmp        rax, aStertmclonetab                        ; "sterTMCloneTable"
000000000000a087         mov        r13, r12
000000000000a08a         jg         loc_a0ec

000000000000a08c         jmp        loc_a190
000000000000a091         align      8

                     loc_a098:
000000000000a098         mov        byte [rax], 0x0                             ; CODE XREF=chdir_long+340
000000000000a09b         sub        rax, r15
000000000000a09e         cmp        rax, aStertmclonetab                        ; "sterTMCloneTable"
000000000000a0a4         jg         loc_a1e2

000000000000a0aa         mov        rsi, r15
000000000000a0ad         mov        rdi, r12
000000000000a0b0         mov        r13, r12
000000000000a0b3         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000a0b8         test       eax, eax
000000000000a0ba         mov        byte [rbx], 0x2f
000000000000a0bd         jne        loc_a178

000000000000a0c3         add        rbx, 0x1
000000000000a0c7         lea        rsi, qword [aLibs+6]                        ; argument "__accept" for method j_strspn, 0xf63e
000000000000a0ce         mov        rdi, rbx                                    ; argument "__s" for method j_strspn
000000000000a0d1         call       j_strspn                                    ; strspn
000000000000a0d6         lea        r15, qword [rbx+rax]
000000000000a0da         mov        rax, rbp
000000000000a0dd         sub        rax, r15
000000000000a0e0         cmp        rax, aStertmclonetab                        ; "sterTMCloneTable"
000000000000a0e6         jle        loc_a190

                     loc_a0ec:
000000000000a0ec         mov        edx, 0x1000                                 ; argument "__n" for method j_memrchr, CODE XREF=chdir_long+218
000000000000a0f1         mov        esi, 0x2f                                   ; argument "__c" for method j_memrchr
000000000000a0f6         mov        rdi, r15                                    ; argument "__s" for method j_memrchr
000000000000a0f9         call       j_memrchr                                   ; memrchr
000000000000a0fe         test       rax, rax
000000000000a101         mov        rbx, rax
000000000000a104         jne        loc_a098

000000000000a106         mov        dword [r14], 0x24
000000000000a10d         mov        ebx, 0xffffffff
000000000000a112         jmp        loc_9fe9
000000000000a117         align      32

                     loc_a120:
000000000000a120         lea        rdx, qword [r12-3]                          ; argument "__n" for method j_memchr, CODE XREF=chdir_long+158
000000000000a125         lea        rdi, qword [rbp+3]                          ; argument "__s" for method j_memchr
000000000000a129         mov        esi, 0x2f                                   ; argument "__c" for method j_memchr
000000000000a12e         call       j_memchr                                    ; memchr
000000000000a133         test       rax, rax
000000000000a136         mov        rbx, rax
000000000000a139         je         loc_a186

000000000000a13b         lea        r13, qword [rsp+0x48+var_44]
000000000000a140         mov        byte [rax], 0x0
000000000000a143         mov        rsi, rbp
000000000000a146         mov        rdi, r13
000000000000a149         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000a14e         test       eax, eax
000000000000a150         mov        byte [rbx], 0x2f
000000000000a153         jne        loc_a178

000000000000a155         add        rbx, 0x1
000000000000a159         lea        rsi, qword [aLibs+6]                        ; argument "__accept" for method j_strspn, 0xf63e
000000000000a160         mov        rdi, rbx                                    ; argument "__s" for method j_strspn
000000000000a163         call       j_strspn                                    ; strspn
000000000000a168         lea        r15, qword [rbx+rax]
000000000000a16c         jmp        loc_a060
000000000000a171         align      8

                     loc_a178:
000000000000a178         mov        ebx, dword [r14]                            ; CODE XREF=chdir_long+269, chdir_long+419, chdir_long+498, chdir_long+513, chdir_long+550
000000000000a17b         mov        rdi, r13                                    ; argument #1 for method cdb_free
000000000000a17e         call       cdb_free                                    ; cdb_free
000000000000a183         mov        dword [r14], ebx

                     loc_a186:
000000000000a186         mov        ebx, 0xffffffff                             ; CODE XREF=chdir_long+393
000000000000a18b         jmp        loc_9fe9

                     loc_a190:
000000000000a190         cmp        rbp, r15                                    ; CODE XREF=chdir_long+220, chdir_long+310
000000000000a193         jbe        loc_a1a4

000000000000a195         mov        rsi, r15
000000000000a198         mov        rdi, r13
000000000000a19b         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000a1a0         test       eax, eax
000000000000a1a2         jne        loc_a178

                     loc_a1a4:
000000000000a1a4         mov        edi, dword [rsp+0x48+var_44]                ; argument "__fd" for method j_fchdir, CODE XREF=chdir_long+483
000000000000a1a8         call       j_fchdir                                    ; fchdir
000000000000a1ad         test       eax, eax
000000000000a1af         mov        ebx, eax
000000000000a1b1         jne        loc_a178

000000000000a1b3         mov        rdi, r13                                    ; argument #1 for method cdb_free
000000000000a1b6         call       cdb_free                                    ; cdb_free
000000000000a1bb         jmp        loc_9fe9

                     loc_a1c0:
000000000000a1c0         lea        r13, qword [rsp+0x48+var_44]                ; CODE XREF=chdir_long+170
000000000000a1c5         lea        rsi, qword [aLibs+6]                        ; 0xf63e
000000000000a1cc         mov        rdi, r13
000000000000a1cf         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000a1d4         test       eax, eax
000000000000a1d6         jne        loc_a178

000000000000a1d8         lea        r15, qword [rbp+rbx]
000000000000a1dd         jmp        loc_a060

                     loc_a1e2:
000000000000a1e2         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+244
000000000000a1e9         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000a1f0         lea        rdi, qword [aSlashDir4096]                  ; argument "__assertion" for method j___assert_fail, "slash - dir < 4096"
000000000000a1f7         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
000000000000a1fc         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a201:
000000000000a201         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=chdir_long+73
                        ; endp

                     loc_a206:
000000000000a206         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+118
000000000000a20d         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000a214         lea        rdi, qword [a0Len]                          ; argument "__assertion" for method j___assert_fail, "0 < len"
000000000000a21b         mov        edx, 0x7e                                   ; argument "__line" for method j___assert_fail
000000000000a220         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a225:
000000000000a225         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+130
000000000000a22c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000a233         lea        rdi, qword [a4096Len]                       ; argument "__assertion" for method j___assert_fail, "4096 <= len"
000000000000a23a         mov        edx, 0x7f                                   ; argument "__line" for method j___assert_fail
000000000000a23f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a244:
000000000000a244         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+192
000000000000a24b         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000a252         lea        rdi, qword [aDirDirend]                     ; argument "__assertion" for method j___assert_fail, "dir <= dir_end"
000000000000a259         mov        edx, 0xa3                                   ; argument "__line" for method j___assert_fail
000000000000a25e         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a263:
000000000000a263         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+180
000000000000a26a         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000a271         lea        rdi, qword [a4096Len+12]                    ; argument "__assertion" for method j___assert_fail, 0xfee4
000000000000a278         mov        edx, 0xa2                                   ; argument "__line" for method j___assert_fail
000000000000a27d         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000a282         align      16                                          ; End of unwind block (FDE at 0x116a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
000000000000a290         push       r13                                         ; Begin of unwind block (FDE at 0x116f4), CODE XREF=sub_8090+534
000000000000a292         push       r12
000000000000a294         mov        r13, rsi
000000000000a297         push       rbp
000000000000a298         push       rbx
000000000000a299         mov        rbx, rdi
000000000000a29c         mov        r12, rdx
000000000000a29f         sub        rsp, 0x18
000000000000a2a3         mov        rax, qword [fs:0x28]
000000000000a2ac         mov        qword [rsp+0x38+var_30], rax
000000000000a2b1         xor        eax, eax
000000000000a2b3         lea        rax, qword [rsp+0x38+var_34]
000000000000a2b8         test       rdi, rdi
000000000000a2bb         cmove      rbx, rax
000000000000a2bf         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
000000000000a2c2         call       j_mbrtowc                                   ; mbrtowc
000000000000a2c7         cmp        rax, 0xfffffffffffffffd
000000000000a2cb         mov        rbp, rax
000000000000a2ce         jbe        loc_a2f0

000000000000a2d0         test       r12, r12
000000000000a2d3         je         loc_a2f0

000000000000a2d5         xor        edi, edi
000000000000a2d7         call       hard_locale                                 ; hard_locale
000000000000a2dc         test       al, al
000000000000a2de         jne        loc_a2f0

000000000000a2e0         movzx      eax, byte [r13]
000000000000a2e5         mov        ebp, 0x1
000000000000a2ea         mov        dword [rbx], eax
000000000000a2ec         nop        dword [rax]

                     loc_a2f0:
000000000000a2f0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
000000000000a2f5         xor        rdx, qword [fs:0x28]
000000000000a2fe         mov        rax, rbp
000000000000a301         jne        loc_a30e

000000000000a303         add        rsp, 0x18
000000000000a307         pop        rbx
000000000000a308         pop        rbp
000000000000a309         pop        r12
000000000000a30b         pop        r13
000000000000a30d         ret
                        ; endp

                     loc_a30e:
000000000000a30e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
000000000000a313         align      32                                          ; End of unwind block (FDE at 0x116f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     unescape_tab:
000000000000a320         push       rbx                                         ; Begin of unwind block (FDE at 0x11734), CODE XREF=read_file_system_list+344, read_file_system_list+359, read_file_system_list+374
000000000000a321         mov        rbx, rdi
000000000000a324         call       j_strlen                                    ; strlen
000000000000a329         mov        rcx, rbx
000000000000a32c         add        rax, 0x1
000000000000a330         xor        edx, edx
000000000000a332         jmp        loc_a347
000000000000a334         align      8

                     loc_a338:
000000000000a338         mov        byte [rcx], sil                             ; CODE XREF=unescape_tab+51, unescape_tab+60, unescape_tab+75, unescape_tab+91, unescape_tab+106
000000000000a33b         mov        rdx, rdi

                     loc_a33e:
000000000000a33e         add        rcx, 0x1                                    ; CODE XREF=unescape_tab+122
000000000000a342         cmp        rax, rdx
000000000000a345         jbe        loc_a3a0

                     loc_a347:
000000000000a347         movzx      esi, byte [rbx+rdx]                         ; CODE XREF=unescape_tab+18
000000000000a34b         lea        rdi, qword [rdx+1]
000000000000a34f         cmp        sil, 0x5c
000000000000a353         jne        loc_a338

000000000000a355         lea        r8, qword [rdx+4]
000000000000a359         cmp        r8, rax
000000000000a35c         jae        loc_a338

000000000000a35e         movzx      r9d, byte [rbx+rdi]
000000000000a363         lea        r10d, dword [r9-0x30]
000000000000a367         cmp        r10b, 0x3
000000000000a36b         ja         loc_a338

000000000000a36d         movzx      r10d, byte [rbx+rdx+2]
000000000000a373         lea        r11d, dword [r10-0x30]
000000000000a377         cmp        r11b, 0x7
000000000000a37b         ja         loc_a338

000000000000a37d         movzx      edx, byte [rbx+rdx+3]
000000000000a382         lea        r11d, dword [rdx-0x30]
000000000000a386         cmp        r11b, 0x7
000000000000a38a         ja         loc_a338

000000000000a38c         lea        edx, dword [r10+r9*8]
000000000000a390         lea        edx, dword [r11+rdx*8-0x80]
000000000000a395         mov        byte [rcx], dl
000000000000a397         mov        rdx, r8
000000000000a39a         jmp        loc_a33e
000000000000a39c         align      32

                     loc_a3a0:
000000000000a3a0         pop        rbx                                         ; CODE XREF=unescape_tab+37
000000000000a3a1         ret
                        ; endp
000000000000a3a2         align      16                                          ; End of unwind block (FDE at 0x11734)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_mount_entry:
000000000000a3b0         push       rbx                                         ; Begin of unwind block (FDE at 0x11750), CODE XREF=read_file_system_list+1844
000000000000a3b1         mov        rbx, rdi
000000000000a3b4         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
000000000000a3b7         call       j_free                                      ; free
000000000000a3bc         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free
000000000000a3c0         call       j_free                                      ; free
000000000000a3c5         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_free
000000000000a3c9         call       j_free                                      ; free
000000000000a3ce         test       byte [rbx+0x28], 0x4
000000000000a3d2         je         loc_a3dd

000000000000a3d4         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
000000000000a3d8         call       j_free                                      ; free

                     loc_a3dd:
000000000000a3dd         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=free_mount_entry+34
000000000000a3e0         pop        rbx
000000000000a3e1         jmp        j_free                                      ; free
                        ; endp
000000000000a3e6         align      16                                          ; End of unwind block (FDE at 0x11750)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_60: int32_t, -96
        ;    var_64: int32_t, -100
        ;    var_68: int32_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_74: int32_t, -116
        ;    var_78: int32_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_81: int8_t, -129
        ;    var_90: int64_t, -144


                     read_file_system_list:
000000000000a3f0         push       r15                                         ; Begin of unwind block (FDE at 0x1176c), CODE XREF=find_bind_mount+234
000000000000a3f2         push       r14
000000000000a3f4         lea        rsi, qword [aWriteError+10]                 ; argument "__modes" for method j_fopen, 0xf377
000000000000a3fb         push       r13
000000000000a3fd         push       r12
000000000000a3ff         lea        rdi, qword [aProcselfmounti]                ; argument "__filename" for method j_fopen, "/proc/self/mountinfo"
000000000000a406         push       rbp
000000000000a407         push       rbx
000000000000a408         sub        rsp, 0x68
000000000000a40c         mov        rax, qword [fs:0x28]
000000000000a415         mov        qword [rsp+0x98+var_40], rax
000000000000a41a         xor        eax, eax
000000000000a41c         call       j_fopen                                     ; fopen
000000000000a421         test       rax, rax
000000000000a424         je         loc_a870

000000000000a42a         lea        r14, qword [rsp+0x98+var_58]
000000000000a42f         lea        r13, qword [rsp+0x98+var_48]
000000000000a434         lea        r12, qword [rsp+0x98+var_50]
000000000000a439         mov        rbp, rax
000000000000a43c         mov        qword [rsp+0x98+var_50], 0x0
000000000000a445         mov        qword [rsp+0x98+var_48], 0x0
000000000000a44e         nop

                     loc_a450:
000000000000a450         mov        rcx, rbp                                    ; argument "__stream" for method j___getdelim, CODE XREF=read_file_system_list+196, read_file_system_list+226, read_file_system_list+282, read_file_system_list+675
000000000000a453         mov        edx, 0xa                                    ; argument "__delimiter" for method j___getdelim
000000000000a458         mov        rsi, r13                                    ; argument "__n" for method j___getdelim
000000000000a45b         mov        rdi, r12                                    ; argument "__lineptr" for method j___getdelim
000000000000a45e         call       j___getdelim                                ; __getdelim
000000000000a463         cmp        rax, 0xffffffffffffffff
000000000000a467         je         loc_a6a0

000000000000a46d         lea        rcx, qword [rsp+0x98+var_7C]
000000000000a472         lea        rdx, qword [rsp+0x98+var_80]
000000000000a477         sub        rsp, 0x8
000000000000a47b         lea        rbx, qword [rsp+0xa0+var_81]
000000000000a480         lea        rsi, qword [aUUUuNsnNsnc]                   ; argument "__format" for method j_sscanf, "%*u %*u %u:%u %n%*s%n %n%*s%n%c"
000000000000a487         push       rbx
000000000000a488         lea        rax, qword [rsp+0xa8+var_74]
000000000000a48d         push       rax
000000000000a48e         lea        rax, qword [rsp+0xb0+var_78]
000000000000a493         push       rax
000000000000a494         mov        rdi, qword [rsp+0xb8+var_50]                ; argument "__s" for method j_sscanf
000000000000a499         xor        eax, eax
000000000000a49b         lea        r9, qword [rsp+0xb8+var_5C]
000000000000a4a0         lea        r8, qword [rsp+0xb8+var_60]
000000000000a4a5         call       j_sscanf                                    ; sscanf
000000000000a4aa         and        eax, 0xfffffffb
000000000000a4ad         add        rsp, 0x20
000000000000a4b1         cmp        eax, 0x3
000000000000a4b4         jne        loc_a450

000000000000a4b6         movsxd     rdi, dword [rsp+0x98+var_74]
000000000000a4bb         lea        rsi, qword [aProcselfmounti+21]             ; argument "__needle" for method j_strstr, 0xff48
000000000000a4c2         add        rdi, qword [rsp+0x98+var_50]                ; argument "__haystack" for method j_strstr
000000000000a4c7         call       j_strstr                                    ; strstr
000000000000a4cc         test       rax, rax
000000000000a4cf         mov        r15, rax
000000000000a4d2         je         loc_a450

000000000000a4d8         lea        rcx, qword [rsp+0x98+var_6C]
000000000000a4dd         lea        rdx, qword [rsp+0x98+var_70]
000000000000a4e2         sub        rsp, 0x8
000000000000a4e6         push       rbx
000000000000a4e7         lea        rsi, qword [aNsnNsnC]                       ; argument "__format" for method j_sscanf, " - %n%*s%n %n%*s%n %c"
000000000000a4ee         mov        rdi, rax                                    ; argument "__s" for method j_sscanf
000000000000a4f1         xor        eax, eax
000000000000a4f3         lea        r9, qword [rsp+0xa8+var_64]
000000000000a4f8         lea        r8, qword [rsp+0xa8+var_68]
000000000000a4fd         call       j_sscanf                                    ; sscanf
000000000000a502         and        eax, 0xfffffffb
000000000000a505         cmp        eax, 0x1
000000000000a508         pop        rdx
000000000000a509         pop        rcx
000000000000a50a         jne        loc_a450

000000000000a510         movsxd     rax, dword [rsp+0x98+var_5C]
000000000000a515         mov        rdx, qword [rsp+0x98+var_50]
000000000000a51a         mov        byte [rdx+rax], 0x0
000000000000a51e         movsxd     rax, dword [rsp+0x98+var_74]
000000000000a523         mov        rdx, qword [rsp+0x98+var_50]
000000000000a528         mov        byte [rdx+rax], 0x0
000000000000a52c         movsxd     rax, dword [rsp+0x98+var_6C]
000000000000a531         mov        byte [r15+rax], 0x0
000000000000a536         movsxd     rax, dword [rsp+0x98+var_64]
000000000000a53b         mov        byte [r15+rax], 0x0
000000000000a540         movsxd     rdi, dword [rsp+0x98+var_68]
000000000000a545         add        rdi, r15
000000000000a548         call       unescape_tab                                ; unescape_tab
000000000000a54d         movsxd     rdi, dword [rsp+0x98+var_78]
000000000000a552         add        rdi, qword [rsp+0x98+var_50]
000000000000a557         call       unescape_tab                                ; unescape_tab
000000000000a55c         movsxd     rdi, dword [rsp+0x98+var_60]
000000000000a561         add        rdi, qword [rsp+0x98+var_50]
000000000000a566         call       unescape_tab                                ; unescape_tab
000000000000a56b         mov        edi, 0x38
000000000000a570         call       xmalloc                                     ; xmalloc
000000000000a575         movsxd     rdi, dword [rsp+0x98+var_68]
000000000000a57a         mov        rbx, rax
000000000000a57d         add        rdi, r15
000000000000a580         call       xstrdup                                     ; xstrdup
000000000000a585         movsxd     rdi, dword [rsp+0x98+var_78]
000000000000a58a         mov        qword [rbx], rax
000000000000a58d         add        rdi, qword [rsp+0x98+var_50]
000000000000a592         call       xstrdup                                     ; xstrdup
000000000000a597         movsxd     rdi, dword [rsp+0x98+var_60]
000000000000a59c         mov        qword [rbx+8], rax
000000000000a5a0         add        rdi, qword [rsp+0x98+var_50]
000000000000a5a5         call       xstrdup                                     ; xstrdup
000000000000a5aa         movsxd     rdi, dword [rsp+0x98+var_70]
000000000000a5af         mov        qword [rbx+0x10], rax
000000000000a5b3         add        rdi, r15
000000000000a5b6         call       xstrdup                                     ; xstrdup
000000000000a5bb         mov        edx, dword [rsp+0x98+var_80]
000000000000a5bf         mov        r15, rax
000000000000a5c2         mov        qword [rbx+0x18], rax
000000000000a5c6         mov        eax, dword [rsp+0x98+var_7C]
000000000000a5ca         movabs     rsi, 0xfffff00000000000
000000000000a5d4         lea        rdi, qword [aAutofs]                        ; "autofs"
000000000000a5db         or         byte [rbx+0x28], 0x4
000000000000a5df         mov        rcx, rdx
000000000000a5e2         shl        rdx, 0x20
000000000000a5e6         shl        rcx, 0x8
000000000000a5ea         and        rdx, rsi
000000000000a5ed         movabs     rsi, 0xffffff00000
000000000000a5f7         and        ecx, 0xfff00
000000000000a5fd         or         rdx, rcx
000000000000a600         movzx      ecx, al
000000000000a603         shl        rax, 0xc
000000000000a607         or         rdx, rcx
000000000000a60a         and        rax, rsi
000000000000a60d         mov        ecx, 0x7
000000000000a612         mov        rsi, r15
000000000000a615         or         rax, rdx
000000000000a618         mov        edx, 0x1
000000000000a61d         rep  cmpsb byte [rsi], byte [rdi]
000000000000a61f         mov        qword [rbx+0x20], rax
000000000000a623         seta       al
000000000000a626         sbb        al, 0x0
000000000000a628         test       al, al
000000000000a62a         je         loc_a64a

000000000000a62c         lea        rdi, qword [aPrlfs+7]                       ; 0xdcb2
000000000000a633         mov        ecx, 0x5
000000000000a638         mov        rsi, r15
000000000000a63b         rep  cmpsb byte [rsi], byte [rdi]
000000000000a63d         seta       al
000000000000a640         sbb        al, 0x0
000000000000a642         test       al, al
000000000000a644         jne        loc_a6f8

                     loc_a64a:
000000000000a64a         movzx      eax, byte [rbx+0x28]                        ; CODE XREF=read_file_system_list+570, read_file_system_list+800, read_file_system_list+830, read_file_system_list+860, read_file_system_list+890, read_file_system_list+920, read_file_system_list+950, read_file_system_list+980, read_file_system_list+1010, read_file_system_list+1040, read_file_system_list+1072
000000000000a64e         mov        r8, qword [rbx]
000000000000a651         mov        esi, 0x3a                                   ; argument "__c" for method j_strchr
000000000000a656         mov        rdi, r8                                     ; argument "__s" for method j_strchr
000000000000a659         mov        qword [rsp+0x98+var_90], r8
000000000000a65e         and        eax, 0xfffffffe
000000000000a661         or         eax, edx
000000000000a663         mov        byte [rbx+0x28], al
000000000000a666         call       j_strchr                                    ; strchr
000000000000a66b         test       rax, rax
000000000000a66e         mov        edx, 0x1
000000000000a673         mov        r8, qword [rsp+0x98+var_90]
000000000000a678         je         loc_a840

                     loc_a67e:
000000000000a67e         movzx      eax, byte [rbx+0x28]                        ; CODE XREF=read_file_system_list+1141, read_file_system_list+1955, read_file_system_list+1985
000000000000a682         add        edx, edx
000000000000a684         and        eax, 0xfffffffd
000000000000a687         or         eax, edx
000000000000a689         mov        byte [rbx+0x28], al
000000000000a68c         mov        qword [r14], rbx
000000000000a68f         lea        r14, qword [rbx+0x30]
000000000000a693         jmp        loc_a450
000000000000a698         align      32

                     loc_a6a0:
000000000000a6a0         mov        rdi, qword [rsp+0x98+var_50]                ; argument "__ptr" for method j_free, CODE XREF=read_file_system_list+119
000000000000a6a5         call       j_free                                      ; free
000000000000a6aa         test       byte [rbp], 0x20
000000000000a6ae         jne        loc_ac10

000000000000a6b4         mov        rdi, rbp
000000000000a6b7         call       rpl_fclose                                  ; rpl_fclose
000000000000a6bc         cmp        eax, 0xffffffff
000000000000a6bf         je         loc_aafe

                     loc_a6c5:
000000000000a6c5         mov        qword [r14], 0x0                            ; CODE XREF=read_file_system_list+1800
000000000000a6cc         mov        rax, qword [rsp+0x98+var_58]

                     loc_a6d1:
000000000000a6d1         mov        rbx, qword [rsp+0x98+var_40]                ; CODE XREF=read_file_system_list+1868, read_file_system_list+2110
000000000000a6d6         xor        rbx, qword [fs:0x28]
000000000000a6df         jne        loc_ac33

000000000000a6e5         add        rsp, 0x68
000000000000a6e9         pop        rbx
000000000000a6ea         pop        rbp
000000000000a6eb         pop        r12
000000000000a6ed         pop        r13
000000000000a6ef         pop        r14
000000000000a6f1         pop        r15
000000000000a6f3         ret
                        ; endp
000000000000a6f4         align      8

                     loc_a6f8:
000000000000a6f8         lea        rdi, qword [aSubfs]                         ; "subfs", CODE XREF=read_file_system_list+596
000000000000a6ff         mov        ecx, 0x6
000000000000a704         mov        rsi, r15
000000000000a707         rep  cmpsb byte [rsi], byte [rdi]
000000000000a709         seta       al
000000000000a70c         sbb        al, 0x0
000000000000a70e         test       al, al
000000000000a710         je         loc_a64a

000000000000a716         lea        rdi, qword [aDebugfs]                       ; "debugfs"
000000000000a71d         mov        ecx, 0x8
000000000000a722         mov        rsi, r15
000000000000a725         rep  cmpsb byte [rsi], byte [rdi]
000000000000a727         seta       al
000000000000a72a         sbb        al, 0x0
000000000000a72c         test       al, al
000000000000a72e         je         loc_a64a

000000000000a734         lea        rdi, qword [aDevpts]                        ; "devpts"
000000000000a73b         mov        ecx, 0x7
000000000000a740         mov        rsi, r15
000000000000a743         rep  cmpsb byte [rsi], byte [rdi]
000000000000a745         seta       al
000000000000a748         sbb        al, 0x0
000000000000a74a         test       al, al
000000000000a74c         je         loc_a64a

000000000000a752         lea        rdi, qword [aFusectl]                       ; "fusectl"
000000000000a759         mov        ecx, 0x8
000000000000a75e         mov        rsi, r15
000000000000a761         rep  cmpsb byte [rsi], byte [rdi]
000000000000a763         seta       al
000000000000a766         sbb        al, 0x0
000000000000a768         test       al, al
000000000000a76a         je         loc_a64a

000000000000a770         lea        rdi, qword [aMqueue]                        ; "mqueue"
000000000000a777         mov        ecx, 0x7
000000000000a77c         mov        rsi, r15
000000000000a77f         rep  cmpsb byte [rsi], byte [rdi]
000000000000a781         seta       al
000000000000a784         sbb        al, 0x0
000000000000a786         test       al, al
000000000000a788         je         loc_a64a

000000000000a78e         lea        rdi, qword [aRomfs+6]                       ; 0xdcdd
000000000000a795         mov        ecx, 0xb
000000000000a79a         mov        rsi, r15
000000000000a79d         rep  cmpsb byte [rsi], byte [rdi]
000000000000a79f         seta       al
000000000000a7a2         sbb        al, 0x0
000000000000a7a4         test       al, al
000000000000a7a6         je         loc_a64a

000000000000a7ac         lea        rdi, qword [aSysfs]                         ; "sysfs"
000000000000a7b3         mov        ecx, 0x6
000000000000a7b8         mov        rsi, r15
000000000000a7bb         rep  cmpsb byte [rsi], byte [rdi]
000000000000a7bd         seta       al
000000000000a7c0         sbb        al, 0x0
000000000000a7c2         test       al, al
000000000000a7c4         je         loc_a64a

000000000000a7ca         lea        rdi, qword [aBdevfs+1]                      ; 0xdd57
000000000000a7d1         mov        ecx, 0x6
000000000000a7d6         mov        rsi, r15
000000000000a7d9         rep  cmpsb byte [rsi], byte [rdi]
000000000000a7db         seta       al
000000000000a7de         sbb        al, 0x0
000000000000a7e0         test       al, al
000000000000a7e2         je         loc_a64a

000000000000a7e8         lea        rdi, qword [aKernfs]                        ; "kernfs"
000000000000a7ef         mov        ecx, 0x7
000000000000a7f4         mov        rsi, r15
000000000000a7f7         rep  cmpsb byte [rsi], byte [rdi]
000000000000a7f9         seta       al
000000000000a7fc         sbb        al, 0x0
000000000000a7fe         test       al, al
000000000000a800         je         loc_a64a

000000000000a806         lea        rsi, qword [aIgnore]                        ; argument "__s2" for method j_strcmp, "ignore"
000000000000a80d         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
000000000000a810         mov        byte [rsp+0x98+var_90], dl
000000000000a814         call       j_strcmp                                    ; strcmp
000000000000a819         test       eax, eax
000000000000a81b         movzx      edx, byte [rsp+0x98+var_90]
000000000000a820         je         loc_a64a

000000000000a826         lea        rsi, qword [aIgnore+7]                      ; argument "__s2" for method j_strcmp, 0xff76
000000000000a82d         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
000000000000a830         call       j_strcmp                                    ; strcmp
000000000000a835         test       eax, eax
000000000000a837         sete       dl
000000000000a83a         jmp        loc_a64a
000000000000a83f         align      64

                     loc_a840:
000000000000a840         cmp        byte [r8], 0x2f                             ; CODE XREF=read_file_system_list+648
000000000000a844         je         loc_ab70

                     loc_a84a:
000000000000a84a         lea        rsi, qword [aHosts]                         ; "-hosts", CODE XREF=read_file_system_list+1925, read_file_system_list+1991
000000000000a851         mov        ecx, 0x7
000000000000a856         mov        rdi, r8
000000000000a859         rep  cmpsb byte [rsi], byte [rdi]
000000000000a85b         seta       al
000000000000a85e         sbb        al, 0x0
000000000000a860         test       al, al
000000000000a862         sete       dl
000000000000a865         jmp        loc_a67e
000000000000a86a         align      16

                     loc_a870:
000000000000a870         lea        rsi, qword [aWriteError+10]                 ; argument "__mode" for method j_setmntent, 0xf377, CODE XREF=read_file_system_list+52
000000000000a877         lea        rdi, qword [aEtcmtab]                       ; argument "__file" for method j_setmntent, "/etc/mtab"
000000000000a87e         call       j_setmntent                                 ; setmntent
000000000000a883         test       rax, rax
000000000000a886         mov        rbx, rax
000000000000a889         je         loc_ac2c

000000000000a88f         mov        rdi, rbx                                    ; argument "__stream" for method j_getmntent
000000000000a892         lea        r14, qword [rsp+0x98+var_58]
000000000000a897         lea        rbp, qword [aAutofs]                        ; "autofs"
000000000000a89e         call       j_getmntent                                 ; getmntent
000000000000a8a3         test       rax, rax
000000000000a8a6         mov        r13, rax
000000000000a8a9         je         loc_aaee

000000000000a8af         nop

                     loc_a8b0:
000000000000a8b0         lea        rsi, qword [aEtcmtab+10]                    ; argument "__opt" for method j_hasmntopt, 0xff92, CODE XREF=read_file_system_list+1784
000000000000a8b7         mov        rdi, r13                                    ; argument "__mnt" for method j_hasmntopt
000000000000a8ba         call       j_hasmntopt                                 ; hasmntopt
000000000000a8bf         mov        edi, 0x38
000000000000a8c4         mov        r15, rax
000000000000a8c7         call       xmalloc                                     ; xmalloc
000000000000a8cc         mov        rdi, qword [r13]
000000000000a8d0         mov        r12, rax
000000000000a8d3         call       xstrdup                                     ; xstrdup
000000000000a8d8         mov        rdi, qword [r13+8]
000000000000a8dc         mov        qword [r12], rax
000000000000a8e0         call       xstrdup                                     ; xstrdup
000000000000a8e5         mov        rdi, qword [r13+0x10]
000000000000a8e9         mov        qword [r12+8], rax
000000000000a8ee         mov        qword [r12+0x10], 0x0
000000000000a8f7         call       xstrdup                                     ; xstrdup
000000000000a8fc         mov        ecx, 0x7
000000000000a901         mov        rsi, rax
000000000000a904         mov        rdi, rbp
000000000000a907         or         byte [r12+0x28], 0x4
000000000000a90d         mov        r13, rax
000000000000a910         mov        qword [r12+0x18], rax
000000000000a915         rep  cmpsb byte [rsi], byte [rdi]
000000000000a917         mov        edx, 0x1
000000000000a91c         seta       al
000000000000a91f         sbb        al, 0x0
000000000000a921         test       al, al
000000000000a923         je         loc_aa88

000000000000a929         lea        rdi, qword [aPrlfs+7]                       ; 0xdcb2
000000000000a930         mov        ecx, 0x5
000000000000a935         mov        rsi, r13
000000000000a938         rep  cmpsb byte [rsi], byte [rdi]
000000000000a93a         seta       al
000000000000a93d         sbb        al, 0x0
000000000000a93f         test       al, al
000000000000a941         je         loc_aa88

000000000000a947         lea        rdi, qword [aSubfs]                         ; "subfs"
000000000000a94e         mov        ecx, 0x6
000000000000a953         mov        rsi, r13
000000000000a956         rep  cmpsb byte [rsi], byte [rdi]
000000000000a958         seta       al
000000000000a95b         sbb        al, 0x0
000000000000a95d         test       al, al
000000000000a95f         je         loc_aa88

000000000000a965         lea        rdi, qword [aDebugfs]                       ; "debugfs"
000000000000a96c         mov        ecx, 0x8
000000000000a971         mov        rsi, r13
000000000000a974         rep  cmpsb byte [rsi], byte [rdi]
000000000000a976         seta       al
000000000000a979         sbb        al, 0x0
000000000000a97b         test       al, al
000000000000a97d         je         loc_aa88

000000000000a983         lea        rdi, qword [aDevpts]                        ; "devpts"
000000000000a98a         mov        ecx, 0x7
000000000000a98f         mov        rsi, r13
000000000000a992         rep  cmpsb byte [rsi], byte [rdi]
000000000000a994         seta       al
000000000000a997         sbb        al, 0x0
000000000000a999         test       al, al
000000000000a99b         je         loc_aa88

000000000000a9a1         lea        rdi, qword [aFusectl]                       ; "fusectl"
000000000000a9a8         mov        ecx, 0x8
000000000000a9ad         mov        rsi, r13
000000000000a9b0         rep  cmpsb byte [rsi], byte [rdi]
000000000000a9b2         seta       al
000000000000a9b5         sbb        al, 0x0
000000000000a9b7         test       al, al
000000000000a9b9         je         loc_aa88

000000000000a9bf         lea        rdi, qword [aMqueue]                        ; "mqueue"
000000000000a9c6         mov        ecx, 0x7
000000000000a9cb         mov        rsi, r13
000000000000a9ce         rep  cmpsb byte [rsi], byte [rdi]
000000000000a9d0         seta       al
000000000000a9d3         sbb        al, 0x0
000000000000a9d5         test       al, al
000000000000a9d7         je         loc_aa88

000000000000a9dd         lea        rdi, qword [aRomfs+6]                       ; 0xdcdd
000000000000a9e4         mov        ecx, 0xb
000000000000a9e9         mov        rsi, r13
000000000000a9ec         rep  cmpsb byte [rsi], byte [rdi]
000000000000a9ee         seta       al
000000000000a9f1         sbb        al, 0x0
000000000000a9f3         test       al, al
000000000000a9f5         je         loc_aa88

000000000000a9fb         lea        rdi, qword [aSysfs]                         ; "sysfs"
000000000000aa02         mov        ecx, 0x6
000000000000aa07         mov        rsi, r13
000000000000aa0a         rep  cmpsb byte [rsi], byte [rdi]
000000000000aa0c         seta       al
000000000000aa0f         sbb        al, 0x0
000000000000aa11         test       al, al
000000000000aa13         je         loc_aa88

000000000000aa15         lea        rdi, qword [aBdevfs+1]                      ; 0xdd57
000000000000aa1c         mov        ecx, 0x6
000000000000aa21         mov        rsi, r13
000000000000aa24         rep  cmpsb byte [rsi], byte [rdi]
000000000000aa26         seta       al
000000000000aa29         sbb        al, 0x0
000000000000aa2b         test       al, al
000000000000aa2d         je         loc_aa88

000000000000aa2f         lea        rdi, qword [aKernfs]                        ; "kernfs"
000000000000aa36         mov        ecx, 0x7
000000000000aa3b         mov        rsi, r13
000000000000aa3e         rep  cmpsb byte [rsi], byte [rdi]
000000000000aa40         seta       al
000000000000aa43         sbb        al, 0x0
000000000000aa45         test       al, al
000000000000aa47         je         loc_aa88

000000000000aa49         lea        rsi, qword [aIgnore]                        ; argument "__s2" for method j_strcmp, "ignore"
000000000000aa50         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
000000000000aa53         mov        byte [rsp+0x98+var_90], dl
000000000000aa57         call       j_strcmp                                    ; strcmp
000000000000aa5c         test       eax, eax
000000000000aa5e         movzx      edx, byte [rsp+0x98+var_90]
000000000000aa63         je         loc_aa88

000000000000aa65         lea        rsi, qword [aIgnore+7]                      ; argument "__s2" for method j_strcmp, 0xff76
000000000000aa6c         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
000000000000aa6f         call       j_strcmp                                    ; strcmp
000000000000aa74         test       r15, r15
000000000000aa77         sete       dl
000000000000aa7a         test       eax, eax
000000000000aa7c         sete       al
000000000000aa7f         and        edx, eax
000000000000aa81         nop        dword [rax]

                     loc_aa88:
000000000000aa88         movzx      eax, byte [r12+0x28]                        ; CODE XREF=read_file_system_list+1331, read_file_system_list+1361, read_file_system_list+1391, read_file_system_list+1421, read_file_system_list+1451, read_file_system_list+1481, read_file_system_list+1511, read_file_system_list+1541, read_file_system_list+1571, read_file_system_list+1597, read_file_system_list+1623
000000000000aa8e         mov        r15, qword [r12]
000000000000aa92         mov        esi, 0x3a                                   ; argument "__c" for method j_strchr
000000000000aa97         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000aa9a         and        eax, 0xfffffffe
000000000000aa9d         or         eax, edx
000000000000aa9f         mov        byte [r12+0x28], al
000000000000aaa4         call       j_strchr                                    ; strchr
000000000000aaa9         test       rax, rax
000000000000aaac         mov        edx, 0x1
000000000000aab1         je         loc_ab48

                     loc_aab7:
000000000000aab7         movzx      eax, byte [r12+0x28]                        ; CODE XREF=read_file_system_list+1913, read_file_system_list+2031, read_file_system_list+2061
000000000000aabd         add        edx, edx
000000000000aabf         mov        qword [r12+0x20], 0xffffffffffffffff
000000000000aac8         mov        rdi, rbx                                    ; argument "__stream" for method j_getmntent
000000000000aacb         and        eax, 0xfffffffd
000000000000aace         or         eax, edx
000000000000aad0         mov        byte [r12+0x28], al
000000000000aad5         mov        qword [r14], r12
000000000000aad8         lea        r14, qword [r12+0x30]
000000000000aadd         call       j_getmntent                                 ; getmntent
000000000000aae2         test       rax, rax
000000000000aae5         mov        r13, rax
000000000000aae8         jne        loc_a8b0

                     loc_aaee:
000000000000aaee         mov        rdi, rbx                                    ; argument "__stream" for method j_endmntent, CODE XREF=read_file_system_list+1209
000000000000aaf1         call       j_endmntent                                 ; endmntent
000000000000aaf6         test       eax, eax
000000000000aaf8         jne        loc_a6c5

                     loc_aafe:
000000000000aafe         call       j___errno_location                          ; __errno_location, CODE XREF=read_file_system_list+719
000000000000ab03         mov        r13d, dword [rax]
000000000000ab06         mov        r12, rax

                     loc_ab09:
000000000000ab09         mov        qword [r14], 0x0                            ; CODE XREF=read_file_system_list+2103
000000000000ab10         mov        rdi, qword [rsp+0x98+var_58]
000000000000ab15         test       rdi, rdi
000000000000ab18         je         loc_ab36

000000000000ab1a         nop        word [rax+rax]

                     loc_ab20:
000000000000ab20         mov        rbx, qword [rdi+0x30]                       ; CODE XREF=read_file_system_list+1860
000000000000ab24         call       free_mount_entry                            ; free_mount_entry
000000000000ab29         test       rbx, rbx
000000000000ab2c         mov        qword [rsp+0x98+var_58], rbx
000000000000ab31         mov        rdi, rbx
000000000000ab34         jne        loc_ab20

                     loc_ab36:
000000000000ab36         mov        dword [r12], r13d                           ; CODE XREF=read_file_system_list+1832
000000000000ab3a         xor        eax, eax
000000000000ab3c         jmp        loc_a6d1
000000000000ab41         align      8

                     loc_ab48:
000000000000ab48         cmp        byte [r15], 0x2f                            ; CODE XREF=read_file_system_list+1729
000000000000ab4c         je         loc_abc0

                     loc_ab4e:
000000000000ab4e         lea        rsi, qword [aHosts]                         ; "-hosts", CODE XREF=read_file_system_list+2005, read_file_system_list+2067
000000000000ab55         mov        ecx, 0x7
000000000000ab5a         mov        rdi, r15
000000000000ab5d         rep  cmpsb byte [rsi], byte [rdi]
000000000000ab5f         seta       al
000000000000ab62         sbb        al, 0x0
000000000000ab64         test       al, al
000000000000ab66         sete       dl
000000000000ab69         jmp        loc_aab7
000000000000ab6e         align      16

                     loc_ab70:
000000000000ab70         cmp        byte [r8+1], 0x2f                           ; CODE XREF=read_file_system_list+1108
000000000000ab75         jne        loc_a84a

000000000000ab7b         lea        rdi, qword [aSmbfs]                         ; "smbfs"
000000000000ab82         mov        ecx, 0x6
000000000000ab87         mov        rsi, r15
000000000000ab8a         rep  cmpsb byte [rsi], byte [rdi]
000000000000ab8c         seta       al
000000000000ab8f         sbb        al, 0x0
000000000000ab91         test       al, al
000000000000ab93         je         loc_a67e

000000000000ab99         lea        rdi, qword [aCgroup2fs+10]                  ; 0xdb19
000000000000aba0         mov        ecx, 0x5
000000000000aba5         mov        rsi, r15
000000000000aba8         rep  cmpsb byte [rsi], byte [rdi]
000000000000abaa         seta       al
000000000000abad         sbb        al, 0x0
000000000000abaf         test       al, al
000000000000abb1         je         loc_a67e

000000000000abb7         jmp        loc_a84a
000000000000abbc         align      64

                     loc_abc0:
000000000000abc0         cmp        byte [r15+1], 0x2f                          ; CODE XREF=read_file_system_list+1884
000000000000abc5         jne        loc_ab4e

000000000000abc7         lea        rdi, qword [aSmbfs]                         ; "smbfs"
000000000000abce         mov        ecx, 0x6
000000000000abd3         mov        rsi, r13
000000000000abd6         rep  cmpsb byte [rsi], byte [rdi]
000000000000abd8         seta       al
000000000000abdb         sbb        al, 0x0
000000000000abdd         test       al, al
000000000000abdf         je         loc_aab7

000000000000abe5         lea        rdi, qword [aCgroup2fs+10]                  ; 0xdb19
000000000000abec         mov        ecx, 0x5
000000000000abf1         mov        rsi, r13
000000000000abf4         rep  cmpsb byte [rsi], byte [rdi]
000000000000abf6         seta       al
000000000000abf9         sbb        al, 0x0
000000000000abfb         test       al, al
000000000000abfd         je         loc_aab7

000000000000ac03         jmp        loc_ab4e
000000000000ac08         align      16

                     loc_ac10:
000000000000ac10         call       j___errno_location                          ; __errno_location, CODE XREF=read_file_system_list+702
000000000000ac15         mov        r13d, dword [rax]
000000000000ac18         mov        r12, rax
000000000000ac1b         mov        rdi, rbp
000000000000ac1e         call       rpl_fclose                                  ; rpl_fclose
000000000000ac23         mov        dword [r12], r13d
000000000000ac27         jmp        loc_ab09

                     loc_ac2c:
000000000000ac2c         xor        eax, eax                                    ; CODE XREF=read_file_system_list+1177
000000000000ac2e         jmp        loc_a6d1

                     loc_ac33:
000000000000ac33         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=read_file_system_list+751
                        ; endp
000000000000ac38         align      64                                          ; End of unwind block (FDE at 0x1176c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setenv_TZ:
000000000000ac40         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x117e4), CODE XREF=revert_tz.part.1+36, set_tz+69
000000000000ac43         je         loc_ac60

000000000000ac45         mov        rsi, rdi                                    ; argument "__value" for method j_setenv
000000000000ac48         lea        rdi, qword [aSInvalidDirect+22]             ; argument "__name" for method j_setenv, 0xddaf
000000000000ac4f         mov        edx, 0x1                                    ; argument "__replace" for method j_setenv
000000000000ac54         jmp        j_setenv                                    ; setenv
                        ; endp
000000000000ac59         align      32

                     loc_ac60:
000000000000ac60         lea        rdi, qword [aSInvalidDirect+22]             ; argument "__name" for method j_unsetenv, 0xddaf, CODE XREF=setenv_TZ+3
000000000000ac67         jmp        j_unsetenv                                  ; unsetenv
                        ; endp
000000000000ac6c         align      16                                          ; End of unwind block (FDE at 0x117e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzfree.part.0:
000000000000ac70         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x117f8), CODE XREF=revert_tz.part.1+54, set_tz+103, tzfree+6
000000000000ac73         je         loc_ac98

000000000000ac75         push       rbx
000000000000ac76         nop        word [cs:rax+rax]

                     loc_ac80:
000000000000ac80         mov        rbx, qword [rdi]                            ; CODE XREF=tzfree.part.0+30
000000000000ac83         call       j_free                                      ; free
000000000000ac88         test       rbx, rbx
000000000000ac8b         mov        rdi, rbx
000000000000ac8e         jne        loc_ac80

000000000000ac90         pop        rbx
000000000000ac91         ret
                        ; endp
000000000000ac92         align      8

                     loc_ac98:
000000000000ac98         ret                                                    ; CODE XREF=tzfree.part.0+3
                        ; endp
000000000000ac9a         align      32                                          ; End of unwind block (FDE at 0x117f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     revert_tz.part.1:
000000000000aca0         push       r13                                         ; Begin of unwind block (FDE at 0x11814), CODE XREF=localtime_rz+105, localtime_rz+152, mktime_z+108
000000000000aca2         push       r12
000000000000aca4         push       rbp
000000000000aca5         push       rbx
000000000000aca6         mov        rbp, rdi
000000000000aca9         sub        rsp, 0x8
000000000000acad         call       j___errno_location                          ; __errno_location
000000000000acb2         cmp        byte [rbp+8], 0x0
000000000000acb6         mov        rbx, rax
000000000000acb9         mov        r12d, dword [rax]
000000000000acbc         lea        rdi, qword [rbp+9]
000000000000acc0         jne        loc_acc4

000000000000acc2         xor        edi, edi

                     loc_acc4:
000000000000acc4         call       setenv_TZ                                   ; setenv_TZ, CODE XREF=revert_tz.part.1+32
000000000000acc9         test       eax, eax
000000000000accb         je         loc_acf0

000000000000accd         mov        r12d, dword [rbx]
000000000000acd0         xor        r13d, r13d

                     loc_acd3:
000000000000acd3         mov        rdi, rbp                                    ; CODE XREF=revert_tz.part.1+91
000000000000acd6         call       tzfree.part.0                               ; tzfree.part.0
000000000000acdb         mov        dword [rbx], r12d
000000000000acde         add        rsp, 0x8
000000000000ace2         mov        eax, r13d
000000000000ace5         pop        rbx
000000000000ace6         pop        rbp
000000000000ace7         pop        r12
000000000000ace9         pop        r13
000000000000aceb         ret
                        ; endp
000000000000acec         align      16

                     loc_acf0:
000000000000acf0         call       j_tzset                                     ; tzset, CODE XREF=revert_tz.part.1+43
000000000000acf5         mov        r13d, 0x1
000000000000acfb         jmp        loc_acd3
000000000000acfd         align      256                                         ; End of unwind block (FDE at 0x11814)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzalloc:
000000000000ad00         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x11850), CODE XREF=human_time+215, save_abbr+236, set_tz+44
000000000000ad03         push       r12
000000000000ad05         push       rbp
000000000000ad06         push       rbx
000000000000ad07         je         loc_ad68

000000000000ad09         mov        r12, rdi
000000000000ad0c         call       j_strlen                                    ; strlen
000000000000ad11         lea        rbp, qword [rax+1]
000000000000ad15         mov        edi, 0x76
000000000000ad1a         cmp        rbp, 0x76
000000000000ad1e         cmovae     rdi, rbp
000000000000ad22         add        rdi, 0x11
000000000000ad26         and        rdi, 0xfffffffffffffff8                     ; argument "__size" for method j_malloc
000000000000ad2a         call       j_malloc                                    ; malloc
000000000000ad2f         test       rax, rax
000000000000ad32         mov        rbx, rax
000000000000ad35         je         loc_ad5b

000000000000ad37         mov        qword [rax], 0x0
000000000000ad3e         lea        rdi, qword [rbx+9]                          ; argument "__dest" for method j_memcpy
000000000000ad42         mov        eax, 0x1
000000000000ad47         mov        word [rbx+8], ax
000000000000ad4b         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000ad4e         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
000000000000ad51         call       j_memcpy                                    ; memcpy
000000000000ad56         mov        byte [rbx+rbp+9], 0x0

                     loc_ad5b:
000000000000ad5b         mov        rax, rbx                                    ; CODE XREF=tzalloc+53, tzalloc+120
000000000000ad5e         pop        rbx
000000000000ad5f         pop        rbp
000000000000ad60         pop        r12
000000000000ad62         ret
                        ; endp
000000000000ad63         align      8

                     loc_ad68:
000000000000ad68         mov        edi, 0x80                                   ; argument "__size" for method j_malloc, CODE XREF=tzalloc+7
000000000000ad6d         call       j_malloc                                    ; malloc
000000000000ad72         test       rax, rax
000000000000ad75         mov        rbx, rax
000000000000ad78         je         loc_ad5b

000000000000ad7a         xor        edx, edx
000000000000ad7c         mov        qword [rbx], 0x0
000000000000ad83         mov        rax, rbx
000000000000ad86         mov        word [rbx+8], dx
000000000000ad8a         pop        rbx
000000000000ad8b         pop        rbp
000000000000ad8c         pop        r12
000000000000ad8e         ret
                        ; endp
000000000000ad8f         align      16                                          ; End of unwind block (FDE at 0x11850)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     save_abbr:
000000000000ad90         push       r15                                         ; Begin of unwind block (FDE at 0x11888), CODE XREF=localtime_rz+59, mktime_z+81
000000000000ad92         push       r14
000000000000ad94         mov        eax, 0x1
000000000000ad99         push       r13
000000000000ad9b         push       r12
000000000000ad9d         push       rbp
000000000000ad9e         push       rbx
000000000000ad9f         sub        rsp, 0x8
000000000000ada3         mov        rbp, qword [rsi+0x30]
000000000000ada7         test       rbp, rbp
000000000000adaa         je         loc_ae40

000000000000adb0         cmp        rsi, rbp
000000000000adb3         mov        r12, rdi
000000000000adb6         mov        r13, rsi
000000000000adb9         ja         loc_adc4

000000000000adbb         lea        rdx, qword [rsi+0x38]
000000000000adbf         cmp        rbp, rdx
000000000000adc2         jb         loc_ae40

                     loc_adc4:
000000000000adc4         cmp        byte [rbp], 0x0                             ; CODE XREF=save_abbr+41
000000000000adc8         lea        rbx, qword [r12+9]
000000000000adcd         je         loc_ae30

000000000000adcf         nop

                     loc_add0:
000000000000add0         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp, CODE XREF=save_abbr+118, save_abbr+127
000000000000add3         mov        rdi, rbx                                    ; argument "__s1" for method j_strcmp
000000000000add6         call       j_strcmp                                    ; strcmp
000000000000addb         test       eax, eax
000000000000addd         je         loc_ae37

                     loc_addf:
000000000000addf         cmp        byte [rbx], 0x0                             ; CODE XREF=save_abbr+149
000000000000ade2         jne        loc_adf6

000000000000ade4         lea        r14, qword [r12+9]
000000000000ade9         cmp        r14, rbx
000000000000adec         jne        loc_ae50

000000000000adee         cmp        byte [r12+8], 0x0
000000000000adf4         je         loc_ae50

                     loc_adf6:
000000000000adf6         mov        rdi, rbx                                    ; argument "__s" for method j_strlen, CODE XREF=save_abbr+82
000000000000adf9         call       j_strlen                                    ; strlen
000000000000adfe         lea        rbx, qword [rbx+rax+1]
000000000000ae03         cmp        byte [rbx], 0x0
000000000000ae06         jne        loc_add0

000000000000ae08         mov        rax, qword [r12]
000000000000ae0c         test       rax, rax
000000000000ae0f         je         loc_add0

000000000000ae11         lea        rbx, qword [rax+9]
000000000000ae15         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp
000000000000ae18         mov        r12, rax
000000000000ae1b         mov        rdi, rbx                                    ; argument "__s1" for method j_strcmp
000000000000ae1e         call       j_strcmp                                    ; strcmp
000000000000ae23         test       eax, eax
000000000000ae25         jne        loc_addf

000000000000ae27         jmp        loc_ae37
000000000000ae29         align      16

                     loc_ae30:
000000000000ae30         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xfb81, CODE XREF=save_abbr+61

                     loc_ae37:
000000000000ae37         mov        qword [r13+0x30], rbx                       ; CODE XREF=save_abbr+77, save_abbr+151, save_abbr+263, save_abbr+305
000000000000ae3b         mov        eax, 0x1

                     loc_ae40:
000000000000ae40         add        rsp, 0x8                                    ; CODE XREF=save_abbr+26, save_abbr+50, save_abbr+253, save_abbr+285
000000000000ae44         pop        rbx
000000000000ae45         pop        rbp
000000000000ae46         pop        r12
000000000000ae48         pop        r13
000000000000ae4a         pop        r14
000000000000ae4c         pop        r15
000000000000ae4e         ret
                        ; endp
000000000000ae4f         align      16

                     loc_ae50:
000000000000ae50         mov        rdi, rbp                                    ; argument "__s" for method j_strlen, CODE XREF=save_abbr+92, save_abbr+100
000000000000ae53         call       j_strlen                                    ; strlen
000000000000ae58         lea        rdx, qword [rax+1]
000000000000ae5c         mov        r15, rax
000000000000ae5f         mov        rax, rbx
000000000000ae62         sub        rax, r14
000000000000ae65         mov        rcx, rax
000000000000ae68         not        rcx
000000000000ae6b         cmp        rcx, rdx
000000000000ae6e         jb         loc_aea0

000000000000ae70         add        rax, rdx
000000000000ae73         cmp        rax, 0x76
000000000000ae77         jbe        loc_aeb0

000000000000ae79         mov        rdi, rbp
000000000000ae7c         call       tzalloc                                     ; tzalloc
000000000000ae81         mov        rbx, rax
000000000000ae84         mov        qword [r12], rax
000000000000ae88         xor        eax, eax
000000000000ae8a         test       rbx, rbx
000000000000ae8d         je         loc_ae40

000000000000ae8f         mov        byte [rbx+8], 0x0
000000000000ae93         add        rbx, 0x9
000000000000ae97         jmp        loc_ae37
000000000000ae99         align      32

                     loc_aea0:
000000000000aea0         call       j___errno_location                          ; __errno_location, CODE XREF=save_abbr+222
000000000000aea5         mov        dword [rax], 0xc
000000000000aeab         xor        eax, eax
000000000000aead         jmp        loc_ae40
000000000000aeaf         align      16

                     loc_aeb0:
000000000000aeb0         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy, CODE XREF=save_abbr+231
000000000000aeb3         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000aeb6         call       j_memcpy                                    ; memcpy
000000000000aebb         mov        byte [rbx+r15+1], 0x0
000000000000aec1         jmp        loc_ae37
000000000000aec6         align      16                                          ; End of unwind block (FDE at 0x11888)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32


                     set_tz:
000000000000aed0         push       r12                                         ; Begin of unwind block (FDE at 0x118d4), CODE XREF=localtime_rz+24, mktime_z+39
000000000000aed2         push       rbp
000000000000aed3         mov        rbp, rdi
000000000000aed6         push       rbx
000000000000aed7         lea        rdi, qword [aSInvalidDirect+22]             ; argument "__name" for method j_getenv, 0xddaf
000000000000aede         sub        rsp, 0x10
000000000000aee2         call       j_getenv                                    ; getenv
000000000000aee7         test       rax, rax
000000000000aeea         mov        rbx, rax
000000000000aeed         je         loc_af88

000000000000aef3         cmp        byte [rbp+8], 0x0
000000000000aef7         jne        loc_af60

                     loc_aef9:
000000000000aef9         mov        rdi, rbx                                    ; CODE XREF=set_tz+164, set_tz+194
000000000000aefc         call       tzalloc                                     ; tzalloc
000000000000af01         test       rax, rax
000000000000af04         mov        r12, rax
000000000000af07         je         loc_af4d

000000000000af09         xor        edi, edi
000000000000af0b         cmp        byte [rbp+8], 0x0
000000000000af0f         je         loc_af15

000000000000af11         lea        rdi, qword [rbp+9]

                     loc_af15:
000000000000af15         call       setenv_TZ                                   ; setenv_TZ, CODE XREF=set_tz+63
000000000000af1a         test       eax, eax
000000000000af1c         je         loc_afa8

000000000000af22         call       j___errno_location                          ; __errno_location
000000000000af27         cmp        r12, 0x1
000000000000af2b         mov        ebx, dword [rax]
000000000000af2d         je         loc_af48

000000000000af2f         mov        rdi, r12
000000000000af32         mov        qword [rsp+0x28+var_20], rax
000000000000af37         call       tzfree.part.0                               ; tzfree.part.0
000000000000af3c         mov        rax, qword [rsp+0x28+var_20]
000000000000af41         nop        dword [rax]

                     loc_af48:
000000000000af48         mov        dword [rax], ebx                            ; CODE XREF=set_tz+93
000000000000af4a         xor        r12d, r12d

                     loc_af4d:
000000000000af4d         add        rsp, 0x10                                   ; CODE XREF=set_tz+55, set_tz+221
000000000000af51         mov        rax, r12
000000000000af54         pop        rbx
000000000000af55         pop        rbp
000000000000af56         pop        r12
000000000000af58         ret
                        ; endp
000000000000af59         align      32

                     loc_af60:
000000000000af60         lea        rdi, qword [rbp+9]                          ; argument "__s1" for method j_strcmp, CODE XREF=set_tz+39
000000000000af64         mov        rsi, rax                                    ; argument "__s2" for method j_strcmp
000000000000af67         mov        r12d, 0x1
000000000000af6d         call       j_strcmp                                    ; strcmp
000000000000af72         test       eax, eax
000000000000af74         jne        loc_aef9

000000000000af76         add        rsp, 0x10
000000000000af7a         mov        rax, r12
000000000000af7d         pop        rbx
000000000000af7e         pop        rbp
000000000000af7f         pop        r12
000000000000af81         ret
                        ; endp
000000000000af82         align      8

                     loc_af88:
000000000000af88         cmp        byte [rbp+8], 0x0                           ; CODE XREF=set_tz+29
000000000000af8c         mov        r12d, 0x1
000000000000af92         jne        loc_aef9

000000000000af98         add        rsp, 0x10
000000000000af9c         mov        rax, r12
000000000000af9f         pop        rbx
000000000000afa0         pop        rbp
000000000000afa1         pop        r12
000000000000afa3         ret
                        ; endp
000000000000afa4         align      8

                     loc_afa8:
000000000000afa8         call       j_tzset                                     ; tzset, CODE XREF=set_tz+76
000000000000afad         jmp        loc_af4d
000000000000afaf         align      16                                          ; End of unwind block (FDE at 0x118d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzfree:
000000000000afb0         cmp        rdi, 0x1                                    ; Begin of unwind block (FDE at 0x11928)
000000000000afb4         je         loc_afbb

000000000000afb6         jmp        tzfree.part.0                               ; tzfree.part.0
                        ; endp

                     loc_afbb:
000000000000afbb         ret                                                    ; CODE XREF=tzfree+4
                        ; endp
000000000000afbc         align      64                                          ; End of unwind block (FDE at 0x11928)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     localtime_rz:
000000000000afc0         push       r13                                         ; Begin of unwind block (FDE at 0x1193c), CODE XREF=human_time+63
000000000000afc2         push       r12
000000000000afc4         push       rbp
000000000000afc5         push       rbx
000000000000afc6         mov        rbp, rsi
000000000000afc9         sub        rsp, 0x8
000000000000afcd         test       rdi, rdi
000000000000afd0         je         loc_b040

000000000000afd2         mov        r13, rdx
000000000000afd5         mov        rbx, rdi
000000000000afd8         call       set_tz                                      ; set_tz
000000000000afdd         test       rax, rax
000000000000afe0         mov        r12, rax
000000000000afe3         je         loc_b02e

000000000000afe5         mov        rsi, r13                                    ; argument "__tp" for method j_localtime_r
000000000000afe8         mov        rdi, rbp                                    ; argument "__timer" for method j_localtime_r
000000000000afeb         call       j_localtime_r                               ; localtime_r
000000000000aff0         test       rax, rax
000000000000aff3         je         loc_b020

000000000000aff5         mov        rsi, r13
000000000000aff8         mov        rdi, rbx
000000000000affb         call       save_abbr                                   ; save_abbr
000000000000b000         test       al, al                                      ; DATA XREF=main+840
000000000000b002         je         loc_b020

000000000000b004         cmp        r12, 0x1
000000000000b008         jne        loc_b055

                     loc_b00a:
000000000000b00a         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+159
000000000000b00e         mov        rax, r13
000000000000b011         pop        rbx
000000000000b012         pop        rbp
000000000000b013         pop        r12
000000000000b015         pop        r13
000000000000b017         ret
                        ; endp
000000000000b018         align      32

                     loc_b020:
000000000000b020         cmp        r12, 0x1                                    ; CODE XREF=localtime_rz+51, localtime_rz+66
000000000000b024         je         loc_b02e

000000000000b026         mov        rdi, r12
000000000000b029         call       revert_tz.part.1                            ; revert_tz.part.1

                     loc_b02e:
000000000000b02e         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+35, localtime_rz+100, localtime_rz+161
000000000000b032         xor        eax, eax
000000000000b034         pop        rbx
000000000000b035         pop        rbp
000000000000b036         pop        r12
000000000000b038         pop        r13
000000000000b03a         ret
                        ; endp
000000000000b03b         align      64

                     loc_b040:
000000000000b040         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+16
000000000000b044         mov        rdi, rbp                                    ; argument "__timer" for method j_gmtime_r
000000000000b047         mov        rsi, rdx                                    ; argument "__tp" for method j_gmtime_r
000000000000b04a         pop        rbx
000000000000b04b         pop        rbp
000000000000b04c         pop        r12
000000000000b04e         pop        r13
000000000000b050         jmp        j_gmtime_r                                  ; gmtime_r
                        ; endp

                     loc_b055:
000000000000b055         mov        rdi, r12                                    ; CODE XREF=localtime_rz+72
000000000000b058         call       revert_tz.part.1                            ; revert_tz.part.1
000000000000b05d         test       al, al
000000000000b05f         jne        loc_b00a

000000000000b061         jmp        loc_b02e
000000000000b063         align      16                                          ; End of unwind block (FDE at 0x1193c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_38: int32_t, -56
        ;    var_44: int32_t, -68
        ;    var_48: int32_t, -72
        ;    var_4C: int32_t, -76
        ;    var_50: int32_t, -80
        ;    var_54: int32_t, -84
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96


                     mktime_z:
000000000000b070         push       r12                                         ; Begin of unwind block (FDE at 0x1199c), CODE XREF=sub_6a20+66
000000000000b072         push       rbp
000000000000b073         push       rbx
000000000000b074         mov        rbx, rsi
000000000000b077         sub        rsp, 0x50
000000000000b07b         mov        rax, qword [fs:0x28]
000000000000b084         mov        qword [rsp+0x68+var_20], rax
000000000000b089         xor        eax, eax
000000000000b08b         test       rdi, rdi
000000000000b08e         je         loc_b190

000000000000b094         mov        rbp, rdi
000000000000b097         call       set_tz                                      ; set_tz
000000000000b09c         test       rax, rax
000000000000b09f         mov        r12, rax
000000000000b0a2         je         loc_b1a0

000000000000b0a8         mov        rdi, rbx                                    ; argument "__tp" for method j_mktime
000000000000b0ab         call       j_mktime                                    ; mktime
000000000000b0b0         cmp        rax, 0xffffffffffffffff
000000000000b0b4         mov        qword [rsp+0x68+var_60], rax
000000000000b0b9         je         loc_b110

                     loc_b0bb:
000000000000b0bb         mov        rsi, rbx                                    ; CODE XREF=mktime_z+269
000000000000b0be         mov        rdi, rbp
000000000000b0c1         call       save_abbr                                   ; save_abbr
000000000000b0c6         test       al, al
000000000000b0c8         jne        loc_b0d3

000000000000b0ca         mov        qword [rsp+0x68+var_60], 0xffffffffffffffff

                     loc_b0d3:
000000000000b0d3         cmp        r12, 0x1                                    ; CODE XREF=mktime_z+88, mktime_z+178, mktime_z+261, mktime_z+275
000000000000b0d7         je         loc_b0e9

000000000000b0d9         mov        rdi, r12
000000000000b0dc         call       revert_tz.part.1                            ; revert_tz.part.1
000000000000b0e1         test       al, al
000000000000b0e3         je         loc_b1a0

                     loc_b0e9:
000000000000b0e9         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=mktime_z+103

                     loc_b0ee:
000000000000b0ee         mov        rcx, qword [rsp+0x68+var_20]                ; CODE XREF=mktime_z+296, mktime_z+311
000000000000b0f3         xor        rcx, qword [fs:0x28]
000000000000b0fc         jne        loc_b1ac

000000000000b102         add        rsp, 0x50
000000000000b106         pop        rbx
000000000000b107         pop        rbp
000000000000b108         pop        r12
000000000000b10a         ret
                        ; endp
000000000000b10b         align      16

                     loc_b110:
000000000000b110         lea        rsi, qword [rsp+0x68+var_58]                ; argument "__tp" for method j_localtime_r, CODE XREF=mktime_z+73
000000000000b115         lea        rdi, qword [rsp+0x68+var_60]                ; argument "__timer" for method j_localtime_r
000000000000b11a         call       j_localtime_r                               ; localtime_r
000000000000b11f         test       rax, rax
000000000000b122         je         loc_b0d3

000000000000b124         mov        eax, dword [rbx]
000000000000b126         mov        edx, dword [rbx+4]
000000000000b129         xor        eax, dword [rsp+0x68+var_58]
000000000000b12d         xor        edx, dword [rsp+0x68+var_54]
000000000000b131         mov        ecx, dword [rsp+0x68+var_38]
000000000000b135         or         eax, edx
000000000000b137         mov        edx, dword [rbx+8]
000000000000b13a         xor        edx, dword [rsp+0x68+var_50]
000000000000b13e         or         eax, edx
000000000000b140         mov        edx, dword [rbx+0xc]
000000000000b143         xor        edx, dword [rsp+0x68+var_4C]
000000000000b147         or         eax, edx
000000000000b149         mov        edx, dword [rbx+0x10]
000000000000b14c         xor        edx, dword [rsp+0x68+var_48]
000000000000b150         or         eax, edx
000000000000b152         mov        edx, dword [rbx+0x14]
000000000000b155         xor        edx, dword [rsp+0x68+var_44]
000000000000b159         or         eax, edx
000000000000b15b         mov        edx, dword [rbx+0x20]
000000000000b15e         test       edx, edx
000000000000b160         sete       dil
000000000000b164         test       ecx, ecx
000000000000b166         sete       sil
000000000000b16a         cmp        dil, sil
000000000000b16d         je         loc_b17b

000000000000b16f         test       edx, edx
000000000000b171         js         loc_b17b

000000000000b173         test       ecx, ecx
000000000000b175         jns        loc_b0d3

                     loc_b17b:
000000000000b17b         test       eax, eax                                    ; CODE XREF=mktime_z+253, mktime_z+257
000000000000b17d         je         loc_b0bb

000000000000b183         jmp        loc_b0d3
000000000000b188         align      16

                     loc_b190:
000000000000b190         mov        rdi, rsi                                    ; argument "__tp" for method j_timegm, CODE XREF=mktime_z+30
000000000000b193         call       j_timegm                                    ; timegm
000000000000b198         jmp        loc_b0ee
000000000000b19d         align      32

                     loc_b1a0:
000000000000b1a0         mov        rax, 0xffffffffffffffff                     ; CODE XREF=mktime_z+50, mktime_z+115
000000000000b1a7         jmp        loc_b0ee

                     loc_b1ac:
000000000000b1ac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mktime_z+140
                        ; endp
000000000000b1b1         align      64                                          ; End of unwind block (FDE at 0x1199c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
000000000000b1c0         push       r12                                         ; Begin of unwind block (FDE at 0x119d4), CODE XREF=close_stdout+13, close_stdout+51
000000000000b1c2         push       rbp
000000000000b1c3         mov        rbp, rdi
000000000000b1c6         push       rbx
000000000000b1c7         call       j___fpending                                ; __fpending
000000000000b1cc         mov        ebx, dword [rbp]
000000000000b1cf         mov        rdi, rbp
000000000000b1d2         mov        r12, rax
000000000000b1d5         call       rpl_fclose                                  ; rpl_fclose
000000000000b1da         and        ebx, 0x20
000000000000b1dd         test       ebx, ebx
000000000000b1df         jne        loc_b1f8

000000000000b1e1         test       eax, eax
000000000000b1e3         je         loc_b1ef

000000000000b1e5         test       r12, r12
000000000000b1e8         mov        eax, 0xffffffff
000000000000b1ed         je         loc_b228

                     loc_b1ef:
000000000000b1ef         pop        rbx                                         ; CODE XREF=close_stream+35
000000000000b1f0         pop        rbp
000000000000b1f1         pop        r12
000000000000b1f3         ret
                        ; endp
000000000000b1f4         align      8

                     loc_b1f8:
000000000000b1f8         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000000b1fa         jne        loc_b218

000000000000b1fc         call       j___errno_location                          ; __errno_location
000000000000b201         mov        dword [rax], 0x0
000000000000b207         mov        eax, 0xffffffff
000000000000b20c         pop        rbx
000000000000b20d         pop        rbp
000000000000b20e         pop        r12
000000000000b210         ret
                        ; endp
000000000000b211         align      8

                     loc_b218:
000000000000b218         pop        rbx                                         ; CODE XREF=close_stream+58
000000000000b219         mov        eax, 0xffffffff
000000000000b21e         pop        rbp
000000000000b21f         pop        r12
000000000000b221         ret
                        ; endp
000000000000b222         align      8

                     loc_b228:
000000000000b228         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000b22d         cmp        dword [rax], 0x9
000000000000b230         pop        rbx
000000000000b231         pop        rbp
000000000000b232         pop        r12
000000000000b234         setne      al
000000000000b237         movzx      eax, al
000000000000b23a         neg        eax
000000000000b23c         ret
                        ; endp
000000000000b23d         align      64                                          ; End of unwind block (FDE at 0x119d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_28: int64_t, -40
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     open_safer:
000000000000b240         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0x11a24), CODE XREF=save_cwd+26
000000000000b244         mov        qword [rsp+0x58+var_28], rdx
000000000000b249         xor        edx, edx
000000000000b24b         mov        rax, qword [fs:0x28]
000000000000b254         mov        qword [rsp+0x58+var_40], rax
000000000000b259         xor        eax, eax
000000000000b25b         test       sil, 0x40
000000000000b25f         jne        loc_b288

                     loc_b261:
000000000000b261         xor        eax, eax                                    ; CODE XREF=open_safer+103
000000000000b263         call       j_open                                      ; open
000000000000b268         mov        edi, eax
000000000000b26a         call       fd_safer                                    ; fd_safer
000000000000b26f         mov        rcx, qword [rsp+0x58+var_40]
000000000000b274         xor        rcx, qword [fs:0x28]
000000000000b27d         jne        loc_b2a9

000000000000b27f         add        rsp, 0x58
000000000000b283         ret
                        ; endp
000000000000b284         align      8

                     loc_b288:
000000000000b288         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=open_safer+31
000000000000b28d         mov        dword [rsp+0x58+var_58], 0x10
000000000000b294         mov        edx, dword [rsp+0x58+var_28]
000000000000b298         mov        qword [rsp+0x58+var_50], rax
000000000000b29d         lea        rax, qword [rsp+0x58+var_38]
000000000000b2a2         mov        qword [rsp+0x58+var_48], rax
000000000000b2a7         jmp        loc_b261

                     loc_b2a9:
000000000000b2a9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=open_safer+61
                        ; endp
000000000000b2ae         align      16                                          ; End of unwind block (FDE at 0x11a24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
000000000000b2b0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x11a44), CODE XREF=rpl_mbrtowc+71
000000000000b2b4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000b2b6         call       j_setlocale                                 ; setlocale
000000000000b2bb         mov        rdx, rax
000000000000b2be         mov        eax, 0x1
000000000000b2c3         test       rdx, rdx
000000000000b2c6         je         loc_b2e5

000000000000b2c8         lea        rdi, qword [aUUUuNsnNsnc+32]                ; 0xffb8
000000000000b2cf         mov        ecx, 0x2
000000000000b2d4         mov        rsi, rdx
000000000000b2d7         rep  cmpsb byte [rsi], byte [rdi]
000000000000b2d9         seta       cl
000000000000b2dc         sbb        cl, 0x0
000000000000b2df         xor        eax, eax
000000000000b2e1         test       cl, cl
000000000000b2e3         jne        loc_b2f0

                     loc_b2e5:
000000000000b2e5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
000000000000b2e9         ret
                        ; endp
000000000000b2ea         align      16

                     loc_b2f0:
000000000000b2f0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
000000000000b2f7         mov        ecx, 0x6
000000000000b2fc         mov        rsi, rdx
000000000000b2ff         rep  cmpsb byte [rsi], byte [rdi]
000000000000b301         seta       al
000000000000b304         sbb        al, 0x0
000000000000b306         test       al, al
000000000000b308         setne      al
000000000000b30b         add        rsp, 0x8
000000000000b30f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000000b310         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x11a44), Begin of unwind block (FDE at 0x11a64), CODE XREF=gettext_quote.part.1+11
000000000000b314         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000000b319         call       j_nl_langinfo                               ; nl_langinfo
000000000000b31e         test       rax, rax
000000000000b321         je         loc_b340

000000000000b323         cmp        byte [rax], 0x0
000000000000b326         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000b32d         cmove      rax, rdx
000000000000b331         add        rsp, 0x8
000000000000b335         ret
                        ; endp
000000000000b336         align      64

                     loc_b340:
000000000000b340         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000000b347         add        rsp, 0x8
000000000000b34b         ret
                        ; endp
000000000000b34c         align      16                                          ; End of unwind block (FDE at 0x11a64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer:
000000000000b350         push       r13                                         ; Begin of unwind block (FDE at 0x11a84), CODE XREF=open_safer+42
000000000000b352         push       r12
000000000000b354         push       rbp
000000000000b355         push       rbx
000000000000b356         mov        ebx, edi
000000000000b358         sub        rsp, 0x8
000000000000b35c         cmp        edi, 0x2
000000000000b35f         ja         loc_b382

000000000000b361         call       dup_safer                                   ; dup_safer
000000000000b366         mov        r12d, eax
000000000000b369         call       j___errno_location                          ; __errno_location
000000000000b36e         mov        r13d, dword [rax]
000000000000b371         mov        rbp, rax
000000000000b374         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000b376         call       j_close                                     ; close
000000000000b37b         mov        ebx, r12d
000000000000b37e         mov        dword [rbp], r13d

                     loc_b382:
000000000000b382         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
000000000000b386         mov        eax, ebx
000000000000b388         pop        rbx
000000000000b389         pop        rbp
000000000000b38a         pop        r12
000000000000b38c         pop        r13
000000000000b38e         ret
                        ; endp
000000000000b38f         align      16                                          ; End of unwind block (FDE at 0x11a84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     xstrcat:
000000000000b390         push       r15                                         ; Begin of unwind block (FDE at 0x11abc), CODE XREF=xvasprintf+74
000000000000b392         push       r14
000000000000b394         push       r13
000000000000b396         push       r12
000000000000b398         push       rbp
000000000000b399         push       rbx
000000000000b39a         sub        rsp, 0x28
000000000000b39e         mov        rax, qword [fs:0x28]
000000000000b3a7         mov        qword [rsp+0x58+var_40], rax
000000000000b3ac         xor        eax, eax
000000000000b3ae         test       rdi, rdi
000000000000b3b1         movdqu     xmm0, xmmword [rsi]
000000000000b3b5         movups     xmmword [rsp+0x58+var_58], xmm0
000000000000b3b9         mov        r14, qword [rsi+0x10]
000000000000b3bd         mov        qword [rsp+0x58+var_48], r14
000000000000b3c2         je         loc_b470

000000000000b3c8         mov        r12, rdi
000000000000b3cb         mov        r15, rsi
000000000000b3ce         mov        rbp, rdi
000000000000b3d1         xor        ebx, ebx
000000000000b3d3         mov        r13, 0xffffffffffffffff

                     loc_b3da:
000000000000b3da         mov        edx, dword [rsp+0x58+var_58]                ; CODE XREF=xstrcat+116
000000000000b3dd         cmp        edx, 0x2f
000000000000b3e0         ja         loc_b4c0

000000000000b3e6         mov        eax, edx
000000000000b3e8         add        edx, 0x8
000000000000b3eb         add        rax, r14
000000000000b3ee         mov        dword [rsp+0x58+var_58], edx

                     loc_b3f1:
000000000000b3f1         mov        rdi, qword [rax]                            ; argument "__s" for method j_strlen, CODE XREF=xstrcat+318
000000000000b3f4         call       j_strlen                                    ; strlen
000000000000b3f9         add        rbx, rax
000000000000b3fc         cmovb      rbx, r13
000000000000b400         sub        rbp, 0x1
000000000000b404         jne        loc_b3da

000000000000b406         cmp        rbx, 0x7fffffff
000000000000b40d         ja         loc_b4b0

000000000000b413         lea        rdi, qword [rbx+1]
000000000000b417         call       xmalloc                                     ; xmalloc
000000000000b41c         mov        r14, rax
000000000000b41f         mov        rbx, rax
000000000000b422         jmp        loc_b455

                     loc_b424:
000000000000b424         mov        eax, edx                                    ; CODE XREF=xstrcat+203
000000000000b426         add        rax, qword [r15+0x10]
000000000000b42a         add        edx, 0x8
000000000000b42d         mov        dword [r15], edx

                     loc_b430:
000000000000b430         mov        r13, qword [rax]                            ; CODE XREF=xstrcat+217
000000000000b433         mov        rdi, r13                                    ; argument "__s" for method j_strlen
000000000000b436         call       j_strlen                                    ; strlen
000000000000b43b         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000b43e         mov        rbp, rax
000000000000b441         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000b444         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
000000000000b447         add        rbx, rbp
000000000000b44a         call       j_memcpy                                    ; memcpy
000000000000b44f         sub        r12, 0x1
000000000000b453         je         loc_b480

                     loc_b455:
000000000000b455         mov        edx, dword [r15]                            ; CODE XREF=xstrcat+146
000000000000b458         cmp        edx, 0x2f
000000000000b45b         jbe        loc_b424

000000000000b45d         mov        rax, qword [r15+8]
000000000000b461         lea        rdx, qword [rax+8]
000000000000b465         mov        qword [r15+8], rdx
000000000000b469         jmp        loc_b430
000000000000b46b         align      16

                     loc_b470:
000000000000b470         mov        edi, 0x1                                    ; CODE XREF=xstrcat+50
000000000000b475         call       xmalloc                                     ; xmalloc
000000000000b47a         mov        rbx, rax
000000000000b47d         mov        r14, rax

                     loc_b480:
000000000000b480         mov        byte [rbx], 0x0                             ; CODE XREF=xstrcat+195

                     loc_b483:
000000000000b483         mov        rcx, qword [rsp+0x58+var_40]                ; CODE XREF=xstrcat+302
000000000000b488         xor        rcx, qword [fs:0x28]
000000000000b491         mov        rax, r14
000000000000b494         jne        loc_b4a5

000000000000b496         add        rsp, 0x28
000000000000b49a         pop        rbx
000000000000b49b         pop        rbp
000000000000b49c         pop        r12
000000000000b49e         pop        r13
000000000000b4a0         pop        r14
000000000000b4a2         pop        r15
000000000000b4a4         ret
                        ; endp

                     loc_b4a5:
000000000000b4a5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrcat+260
                        ; endp
000000000000b4aa         align      16

                     loc_b4b0:
000000000000b4b0         call       j___errno_location                          ; __errno_location, CODE XREF=xstrcat+125
000000000000b4b5         xor        r14d, r14d
000000000000b4b8         mov        dword [rax], 0x4b
000000000000b4be         jmp        loc_b483

                     loc_b4c0:
000000000000b4c0         mov        rax, qword [rsp+0x58+var_50]                ; CODE XREF=xstrcat+80
000000000000b4c5         lea        rdx, qword [rax+8]
000000000000b4c9         mov        qword [rsp+0x58+var_50], rdx
000000000000b4ce         jmp        loc_b3f1
000000000000b4d3         align      32                                          ; End of unwind block (FDE at 0x11abc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     xvasprintf:
000000000000b4e0         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0x11b08), CODE XREF=xasprintf+148
000000000000b4e4         mov        rax, qword [fs:0x28]
000000000000b4ed         mov        qword [rsp+0x18+var_10], rax
000000000000b4f2         xor        eax, eax
000000000000b4f4         movzx      eax, byte [rdi]
000000000000b4f7         test       al, al
000000000000b4f9         je         loc_b576

000000000000b4fb         cmp        al, 0x25
000000000000b4fd         mov        r8, rdi
000000000000b500         jne        loc_b538

000000000000b502         cmp        byte [rdi+1], 0x73
000000000000b506         jne        loc_b538

000000000000b508         xor        edi, edi
000000000000b50a         jmp        loc_b51d
000000000000b50c         align      16

                     loc_b510:
000000000000b510         cmp        cl, 0x25                                    ; CODE XREF=xvasprintf+72
000000000000b513         jne        loc_b538

000000000000b515         cmp        byte [r8+rdi*2+1], 0x73
000000000000b51b         jne        loc_b538

                     loc_b51d:
000000000000b51d         add        rdi, 0x1                                    ; CODE XREF=xvasprintf+42
000000000000b521         movzx      ecx, byte [r8+rdi*2]
000000000000b526         test       cl, cl
000000000000b528         jne        loc_b510

                     loc_b52a:
000000000000b52a         call       xstrcat                                     ; xstrcat, CODE XREF=xvasprintf+152
000000000000b52f         jmp        loc_b54e
000000000000b531         align      8

                     loc_b538:
000000000000b538         mov        rdx, rsi                                    ; CODE XREF=xvasprintf+32, xvasprintf+38, xvasprintf+51, xvasprintf+59
000000000000b53b         mov        rdi, rsp
000000000000b53e         mov        rsi, r8
000000000000b541         call       rpl_vasprintf                               ; rpl_vasprintf
000000000000b546         test       eax, eax
000000000000b548         js         loc_b568

000000000000b54a         mov        rax, qword [rsp+0x18+var_18]

                     loc_b54e:
000000000000b54e         mov        rdx, qword [rsp+0x18+var_10]                ; CODE XREF=xvasprintf+79, xvasprintf+148
000000000000b553         xor        rdx, qword [fs:0x28]
000000000000b55c         jne        loc_b57a

000000000000b55e         add        rsp, 0x18
000000000000b562         ret
                        ; endp
000000000000b563         align      8

                     loc_b568:
000000000000b568         call       j___errno_location                          ; __errno_location, CODE XREF=xvasprintf+104
000000000000b56d         cmp        dword [rax], 0xc
000000000000b570         je         loc_b57f

000000000000b572         xor        eax, eax
000000000000b574         jmp        loc_b54e

                     loc_b576:
000000000000b576         xor        edi, edi                                    ; CODE XREF=xvasprintf+25
000000000000b578         jmp        loc_b52a

                     loc_b57a:
000000000000b57a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xvasprintf+124
                        ; endp

                     loc_b57f:
000000000000b57f         call       xalloc_die                                  ; xalloc_die, CODE XREF=xvasprintf+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b584:
000000000000b584         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x11b08)
000000000000b58e         nop
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000b590         push       r12                                         ; Begin of unwind block (FDE at 0x11b24), CODE XREF=read_file_system_list+711, read_file_system_list+2094, close_stream+21
000000000000b592         push       rbp
000000000000b593         push       rbx
000000000000b594         mov        rbx, rdi
000000000000b597         call       j_fileno                                    ; fileno
000000000000b59c         test       eax, eax
000000000000b59e         mov        rdi, rbx
000000000000b5a1         js         loc_b5f7

000000000000b5a3         call       j___freading                                ; __freading
000000000000b5a8         test       eax, eax
000000000000b5aa         jne        loc_b5d8

                     loc_b5ac:
000000000000b5ac         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000b5af         call       rpl_fflush                                  ; rpl_fflush
000000000000b5b4         test       eax, eax
000000000000b5b6         je         loc_b5f4

000000000000b5b8         call       j___errno_location                          ; __errno_location
000000000000b5bd         mov        r12d, dword [rax]
000000000000b5c0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000b5c3         mov        rbp, rax
000000000000b5c6         call       j_fclose                                    ; fclose
000000000000b5cb         test       r12d, r12d
000000000000b5ce         jne        loc_b600

                     loc_b5d0:
000000000000b5d0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000b5d1         pop        rbp
000000000000b5d2         pop        r12
000000000000b5d4         ret
                        ; endp
000000000000b5d5         align      8

                     loc_b5d8:
000000000000b5d8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000b5db         call       j_fileno                                    ; fileno
000000000000b5e0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000b5e2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000b5e7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000b5e9         call       j_lseek                                     ; lseek
000000000000b5ee         cmp        rax, 0xffffffffffffffff
000000000000b5f2         jne        loc_b5ac

                     loc_b5f4:
000000000000b5f4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_b5f7:
000000000000b5f7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000b5f8         pop        rbp
000000000000b5f9         pop        r12
000000000000b5fb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_b600:
000000000000b600         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000b604         mov        eax, 0xffffffff
000000000000b609         jmp        loc_b5d0
000000000000b60b         align      16                                          ; End of unwind block (FDE at 0x11b24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
000000000000b610         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x11b5c), CODE XREF=rpl_fclose+31
000000000000b613         push       rbx
000000000000b614         mov        rbx, rdi
000000000000b617         je         loc_b62a

000000000000b619         call       j___freading                                ; __freading
000000000000b61e         test       eax, eax
000000000000b620         je         loc_b62a

000000000000b622         test       dword [rbx], 0x100
000000000000b628         jne        loc_b638

                     loc_b62a:
000000000000b62a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000b62d         pop        rbx
000000000000b62e         jmp        j_fflush                                    ; fflush
                        ; endp
000000000000b633         align      8

                     loc_b638:
000000000000b638         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000b63b         mov        edx, 0x1
000000000000b640         xor        esi, esi
000000000000b642         call       rpl_fseeko                                  ; rpl_fseeko
000000000000b647         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000b64a         pop        rbx
000000000000b64b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
000000000000b650         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x11b5c), Begin of unwind block (FDE at 0x11b7c), CODE XREF=rpl_fflush+50
000000000000b654         cmp        qword [rdi+0x10], rax
000000000000b658         je         loc_b660

                     j_j_fseeko:        // fseeko
000000000000b65a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000b65f         align      32

                     loc_b660:
000000000000b660         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
000000000000b664         cmp        qword [rdi+0x28], rax
000000000000b668         jne        j_j_fseeko                                  ; fseeko

000000000000b66a         cmp        qword [rdi+0x48], 0x0
000000000000b66f         jne        j_j_fseeko                                  ; fseeko

000000000000b671         push       r12
000000000000b673         push       rbp
000000000000b674         mov        r12d, edx
000000000000b677         push       rbx
000000000000b678         mov        rbp, rsi
000000000000b67b         mov        rbx, rdi
000000000000b67e         call       j_fileno                                    ; fileno
000000000000b683         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
000000000000b686         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
000000000000b689         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000b68b         call       j_lseek                                     ; lseek
000000000000b690         cmp        rax, 0xffffffffffffffff
000000000000b694         je         loc_b6a2

000000000000b696         and        dword [rbx], 0xffffffef
000000000000b699         mov        qword [rbx+0x90], rax
000000000000b6a0         xor        eax, eax

                     loc_b6a2:
000000000000b6a2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000b6a3         pop        rbp
000000000000b6a4         pop        r12
000000000000b6a6         ret
                        ; endp
000000000000b6a7         align      16                                          ; End of unwind block (FDE at 0x11b7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     rpl_vasprintf:
000000000000b6b0         push       rbx                                         ; Begin of unwind block (FDE at 0x11bac), CODE XREF=xvasprintf+97
000000000000b6b1         mov        rax, rsi
000000000000b6b4         mov        rbx, rdi
000000000000b6b7         xor        edi, edi
000000000000b6b9         sub        rsp, 0x10
000000000000b6bd         mov        rcx, qword [fs:0x28]
000000000000b6c6         mov        qword [rsp+0x18+var_10], rcx
000000000000b6cb         xor        ecx, ecx
000000000000b6cd         mov        rsi, rsp
000000000000b6d0         mov        rcx, rdx
000000000000b6d3         mov        rdx, rax
000000000000b6d6         call       vasnprintf                                  ; vasnprintf
000000000000b6db         test       rax, rax
000000000000b6de         je         loc_b722

000000000000b6e0         mov        rdx, qword [rsp+0x18+var_18]
000000000000b6e4         cmp        rdx, 0x7fffffff
000000000000b6eb         ja         loc_b708

000000000000b6ed         mov        qword [rbx], rax
000000000000b6f0         mov        eax, edx

                     loc_b6f2:
000000000000b6f2         mov        rbx, qword [rsp+0x18+var_10]                ; CODE XREF=rpl_vasprintf+112, rpl_vasprintf+119
000000000000b6f7         xor        rbx, qword [fs:0x28]
000000000000b700         jne        loc_b729

000000000000b702         add        rsp, 0x10
000000000000b706         pop        rbx
000000000000b707         ret
                        ; endp

                     loc_b708:
000000000000b708         mov        rdi, rax                                    ; argument "__ptr" for method j_free, CODE XREF=rpl_vasprintf+59
000000000000b70b         call       j_free                                      ; free
000000000000b710         call       j___errno_location                          ; __errno_location
000000000000b715         mov        dword [rax], 0x4b
000000000000b71b         mov        eax, 0xffffffff
000000000000b720         jmp        loc_b6f2

                     loc_b722:
000000000000b722         mov        eax, 0xffffffff                             ; CODE XREF=rpl_vasprintf+46
000000000000b727         jmp        loc_b6f2

                     loc_b729:
000000000000b729         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vasprintf+80
                        ; endp
000000000000b72e         align      16                                          ; End of unwind block (FDE at 0x11bac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dup_safer:
000000000000b730         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0x11bd4), CODE XREF=fd_safer+17
000000000000b735         xor        esi, esi
000000000000b737         xor        eax, eax
000000000000b739         jmp        rpl_fcntl                                   ; rpl_fcntl
                        ; endp
000000000000b73e         align      64                                          ; End of unwind block (FDE at 0x11bd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     rpl_fcntl:
000000000000b740         push       r12                                         ; Begin of unwind block (FDE at 0x11bec), CODE XREF=dup_safer+9
000000000000b742         push       rbp
000000000000b743         mov        ebp, edi
000000000000b745         push       rbx
000000000000b746         sub        rsp, 0x50
000000000000b74a         mov        rax, qword [fs:0x28]
000000000000b753         mov        qword [rsp+0x68+var_50], rax
000000000000b758         xor        eax, eax
000000000000b75a         lea        rax, qword [rsp+0x68+arg_0]
000000000000b75f         test       esi, esi
000000000000b761         mov        qword [rsp+0x68+var_38], rdx
000000000000b766         mov        qword [rsp+0x68+var_30], rcx
000000000000b76b         mov        qword [rsp+0x68+var_28], r8
000000000000b770         mov        qword [rsp+0x68+var_60], rax
000000000000b775         lea        rax, qword [rsp+0x68+var_48]
000000000000b77a         mov        qword [rsp+0x68+var_20], r9
000000000000b77f         mov        dword [rsp+0x68+var_68], 0x10
000000000000b786         mov        qword [rsp+0x68+var_58], rax
000000000000b78b         je         loc_b992

000000000000b791         cmp        esi, 0x406
000000000000b797         jne        loc_b7e0

000000000000b799         mov        rax, qword [rsp+0x68+var_58]
000000000000b79e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
000000000000b7a5         mov        dword [rsp+0x68+var_68], 0x18
000000000000b7ac         mov        r12d, dword [rax+0x10]
000000000000b7b0         mov        edx, r12d
000000000000b7b3         js         loc_b8e3

000000000000b7b9         xor        eax, eax
000000000000b7bb         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
000000000000b7c0         call       j_fcntl                                     ; fcntl
000000000000b7c5         test       eax, eax
000000000000b7c7         mov        ebx, eax
000000000000b7c9         js         loc_b958

                     loc_b7cf:
000000000000b7cf         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
000000000000b7d9         jmp        loc_b820
000000000000b7db         align      32

                     loc_b7e0:
000000000000b7e0         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
000000000000b7e3         je         loc_b810

000000000000b7e5         jg         loc_b840

000000000000b7e7         cmp        esi, 0x4
000000000000b7ea         je         loc_b8c0

000000000000b7f0         jg         loc_b8b0

000000000000b7f6         cmp        esi, 0x2
000000000000b7f9         je         loc_b8c0

000000000000b7ff         jg         loc_b810

000000000000b801         cmp        esi, 0x1
000000000000b804         jne        loc_b868

000000000000b806         nop        word [cs:rax+rax]

                     loc_b810:
000000000000b810         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
000000000000b812         xor        eax, eax
000000000000b814         call       j_fcntl                                     ; fcntl
000000000000b819         mov        ebx, eax
000000000000b81b         nop        dword [rax+rax]

                     loc_b820:
000000000000b820         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
000000000000b825         xor        rcx, qword [fs:0x28]
000000000000b82e         mov        eax, ebx
000000000000b830         jne        loc_b98d

000000000000b836         add        rsp, 0x50
000000000000b83a         pop        rbx
000000000000b83b         pop        rbp
000000000000b83c         pop        r12
000000000000b83e         ret
                        ; endp
000000000000b83f         align      64

                     loc_b840:
000000000000b840         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
000000000000b846         jg         loc_b890

000000000000b848         cmp        esi, 0x406
000000000000b84e         jge        loc_b8c0

000000000000b850         cmp        esi, 0x401
000000000000b856         je         loc_b810

000000000000b858         cmp        esi, 0x402
000000000000b85e         je         loc_b8c0

000000000000b860         cmp        esi, 0x400
000000000000b866         je         loc_b8c0

                     loc_b868:
000000000000b868         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000000b86b         cmp        eax, 0x2f
000000000000b86e         ja         loc_b9aa

000000000000b874         add        rax, qword [rsp+0x68+var_58]

                     loc_b879:
000000000000b879         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000000b87c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000b87e         xor        eax, eax
000000000000b880         call       j_fcntl                                     ; fcntl
000000000000b885         mov        ebx, eax
000000000000b887         jmp        loc_b820
000000000000b889         align      16

                     loc_b890:
000000000000b890         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
000000000000b896         je         loc_b8c0

000000000000b898         jl         loc_b810

000000000000b89e         cmp        esi, 0x40a
000000000000b8a4         jne        loc_b868

000000000000b8a6         jmp        loc_b810
000000000000b8ab         align      16

                     loc_b8b0:
000000000000b8b0         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
000000000000b8b3         je         loc_b810

000000000000b8b9         jg         loc_b8c0

000000000000b8bb         cmp        esi, 0x8
000000000000b8be         jne        loc_b868

                     loc_b8c0:
000000000000b8c0         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
000000000000b8c3         cmp        eax, 0x2f
000000000000b8c6         ja         loc_b9b4

000000000000b8cc         add        rax, qword [rsp+0x68+var_58]

                     loc_b8d1:
000000000000b8d1         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
000000000000b8d3         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000b8d5         xor        eax, eax
000000000000b8d7         call       j_fcntl                                     ; fcntl
000000000000b8dc         mov        ebx, eax
000000000000b8de         jmp        loc_b820

                     loc_b8e3:
000000000000b8e3         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
000000000000b8e5         xor        eax, eax
000000000000b8e7         call       j_fcntl                                     ; fcntl
000000000000b8ec         test       eax, eax
000000000000b8ee         mov        ebx, eax
000000000000b8f0         js         loc_b820

000000000000b8f6         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000b8fd         jne        loc_b820

                     loc_b903:
000000000000b903         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
000000000000b905         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
000000000000b90a         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000b90c         call       j_fcntl                                     ; fcntl
000000000000b911         test       eax, eax
000000000000b913         js         loc_b931

000000000000b915         or         eax, 0x1
000000000000b918         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
000000000000b91d         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000b91f         mov        edx, eax
000000000000b921         xor        eax, eax
000000000000b923         call       j_fcntl                                     ; fcntl
000000000000b928         cmp        eax, 0xffffffff
000000000000b92b         jne        loc_b820

                     loc_b931:
000000000000b931         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
000000000000b936         mov        r12d, dword [rax]
000000000000b939         mov        rbp, rax
000000000000b93c         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000b93e         call       j_close                                     ; close
000000000000b943         mov        ebx, 0xffffffff
000000000000b948         mov        dword [rbp], r12d
000000000000b94c         jmp        loc_b820
000000000000b951         align      8

                     loc_b958:
000000000000b958         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
000000000000b95d         cmp        dword [rax], 0x16
000000000000b960         jne        loc_b7cf

000000000000b966         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000b968         xor        eax, eax
000000000000b96a         mov        edx, r12d
000000000000b96d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000b96f         call       j_fcntl                                     ; fcntl
000000000000b974         test       eax, eax
000000000000b976         mov        ebx, eax
000000000000b978         js         loc_b820

000000000000b97e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000b988         jmp        loc_b903

                     loc_b98d:
000000000000b98d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_b992:
000000000000b992         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
000000000000b997         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000b999         mov        edx, dword [rax+0x10]
000000000000b99c         xor        eax, eax
000000000000b99e         call       j_fcntl                                     ; fcntl
000000000000b9a3         mov        ebx, eax
000000000000b9a5         jmp        loc_b820

                     loc_b9aa:
000000000000b9aa         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000000b9af         jmp        loc_b879

                     loc_b9b4:
000000000000b9b4         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
000000000000b9b9         jmp        loc_b8d1
000000000000b9be         align      64                                          ; End of unwind block (FDE at 0x11bec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
000000000000b9c0         push       rbp                                         ; Begin of unwind block (FDE at 0x11c24), CODE XREF=rpl_vasprintf+38
000000000000b9c1         mov        rbp, rsp
000000000000b9c4         push       r15
000000000000b9c6         push       r14
000000000000b9c8         push       r13
000000000000b9ca         push       r12
000000000000b9cc         lea        r14, qword [rbp+var_3B0]
000000000000b9d3         push       rbx
000000000000b9d4         mov        rbx, rdx
000000000000b9d7         mov        r12, rcx
000000000000b9da         mov        rdx, r14
000000000000b9dd         sub        rsp, 0x408
000000000000b9e4         mov        qword [rbp+var_418], rsi
000000000000b9eb         lea        rsi, qword [rbp+var_2C0]
000000000000b9f2         mov        qword [rbp+var_3E8], rdi
000000000000b9f9         mov        rdi, rbx
000000000000b9fc         mov        qword [rbp+var_410], r14
000000000000ba03         mov        rax, qword [fs:0x28]
000000000000ba0c         mov        qword [rbp+var_38], rax
000000000000ba10         xor        eax, eax
000000000000ba12         mov        qword [rbp+var_408], rsi
000000000000ba19         call       printf_parse                                ; printf_parse
000000000000ba1e         test       eax, eax
000000000000ba20         js         loc_c888

000000000000ba26         mov        rsi, r14
000000000000ba29         mov        rdi, r12
000000000000ba2c         call       printf_fetchargs                            ; printf_fetchargs
000000000000ba31         test       eax, eax
000000000000ba33         js         loc_c8f0

000000000000ba39         mov        rax, qword [rbp+var_2B0]
000000000000ba40         mov        rdx, 0xffffffffffffffff
000000000000ba47         add        rax, 0x7
000000000000ba4b         cmp        rax, 0x6
000000000000ba4f         cmovbe     rax, rdx
000000000000ba53         add        rax, qword [rbp+var_2A8]
000000000000ba5a         jb         loc_c488

000000000000ba60         mov        rdi, rax
000000000000ba63         xor        r8d, r8d
000000000000ba66         add        rdi, 0x6
000000000000ba6a         setb       r8b
000000000000ba6e         jb         loc_c488

000000000000ba74         cmp        rdi, 0xf9f
000000000000ba7b         jbe        loc_bbc8

000000000000ba81         cmp        rdi, 0xffffffffffffffff
000000000000ba85         mov        qword [rbp+var_3C8], r8
000000000000ba8c         je         loc_c488

000000000000ba92         call       j_malloc                                    ; malloc
000000000000ba97         test       rax, rax
000000000000ba9a         mov        qword [rbp+var_3D8], rax
000000000000baa1         je         loc_c488

000000000000baa7         mov        r8, qword [rbp+var_3C8]
000000000000baae         mov        qword [rbp+var_420], rax

                     loc_bab5:
000000000000bab5         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
000000000000bab8         cmp        qword [rbp+var_3E8], 0x0
000000000000bac0         je         loc_bacc

000000000000bac2         mov        rax, qword [rbp+var_418]
000000000000bac9         mov        r12, qword [rax]

                     loc_bacc:
000000000000bacc         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
000000000000bad3         lea        rax, qword [rbp+var_3BC]
000000000000bada         mov        r15, qword [rbp+var_3E8]
000000000000bae1         mov        qword [rbp+var_400], 0x0
000000000000baec         mov        qword [rbp+var_3F0], rax
000000000000baf3         mov        rax, rbx
000000000000baf6         mov        rbx, r8
000000000000baf9         mov        rcx, qword [r13]
000000000000bafd         mov        r8, rax
000000000000bb00         cmp        rcx, r8
000000000000bb03         je         loc_c471

                     loc_bb09:
000000000000bb09         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
000000000000bb0c         mov        rax, rbx
000000000000bb0f         add        rax, rcx
000000000000bb12         mov        r14, rax
000000000000bb15         jae        loc_bbf8

000000000000bb1b         cmp        r12, 0xffffffffffffffff
000000000000bb1f         je         loc_c5f0

                     loc_bb25:
000000000000bb25         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_c530, vasnprintf+2950, vasnprintf+3039, loc_c688, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_c8a0
000000000000bb2a         mov        qword [rbp+var_3C8], rax

                     loc_bb31:
000000000000bb31         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
000000000000bb38         je         loc_bb43

000000000000bb3a         test       r15, r15
000000000000bb3d         jne        loc_c620

                     loc_bb43:
000000000000bb43         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
000000000000bb4a         test       rax, rax
000000000000bb4d         je         loc_bb57

000000000000bb4f         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000bb52         call       j_free                                      ; free

                     loc_bb57:
000000000000bb57         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
000000000000bb5e         mov        rdi, qword [rbp+var_2B8]
000000000000bb65         add        rax, 0x20
000000000000bb69         cmp        rdi, rax
000000000000bb6c         je         loc_bb73

000000000000bb6e         call       j_free                                      ; free

                     loc_bb73:
000000000000bb73         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
000000000000bb7a         mov        rdi, qword [rbp+var_3A8]
000000000000bb81         add        rax, 0x10
000000000000bb85         cmp        rdi, rax
000000000000bb88         je         loc_bb8f

000000000000bb8a         call       j_free                                      ; free

                     loc_bb8f:
000000000000bb8f         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
000000000000bb96         xor        r15d, r15d
000000000000bb99         mov        dword [rax], 0xc

                     loc_bb9f:
000000000000bb9f         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
000000000000bba3         xor        rdi, qword [fs:0x28]
000000000000bbac         mov        rax, r15
000000000000bbaf         jne        loc_cab7

000000000000bbb5         lea        rsp, qword [rbp+var_28]
000000000000bbb9         pop        rbx
000000000000bbba         pop        r12
000000000000bbbc         pop        r13
000000000000bbbe         pop        r14
000000000000bbc0         pop        r15
000000000000bbc2         pop        rbp
000000000000bbc3         ret
                        ; endp
000000000000bbc4         align      8

                     loc_bbc8:
000000000000bbc8         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
000000000000bbcc         mov        qword [rbp+var_420], 0x0
000000000000bbd7         and        rax, 0xfffffffffffffff0
000000000000bbdb         sub        rsp, rax
000000000000bbde         lea        rax, qword [rsp+0x430+var_421]
000000000000bbe3         and        rax, 0xfffffffffffffff0
000000000000bbe7         mov        qword [rbp+var_3D8], rax
000000000000bbee         jmp        loc_bab5
000000000000bbf3         align      8

                     loc_bbf8:
000000000000bbf8         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
000000000000bbfb         jae        loc_bc64

000000000000bbfd         test       r12, r12
000000000000bc00         jne        loc_c530

000000000000bc06         cmp        rax, 0xc
000000000000bc0a         ja         loc_c542

000000000000bc10         mov        r12d, 0xc

                     loc_bc16:
000000000000bc16         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
000000000000bc1d         sete       dl
000000000000bc20         test       r15, r15
000000000000bc23         je         loc_c568

                     loc_bc29:
000000000000bc29         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
000000000000bc2b         jne        loc_c568

000000000000bc31         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000bc34         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000bc37         mov        qword [rbp+var_3D0], r8
000000000000bc3e         mov        qword [rbp+var_3C8], rcx
000000000000bc45         call       j_realloc                                   ; realloc
000000000000bc4a         test       rax, rax
000000000000bc4d         mov        rcx, qword [rbp+var_3C8]
000000000000bc54         mov        r8, qword [rbp+var_3D0]
000000000000bc5b         je         loc_c60b

000000000000bc61         mov        r15, rax

                     loc_bc64:
000000000000bc64         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
000000000000bc68         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000bc6b         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
000000000000bc6e         call       j_memcpy                                    ; memcpy

                     loc_bc73:
000000000000bc73         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
000000000000bc7a         cmp        qword [rbp+var_2C0], rax
000000000000bc81         je         loc_c93b

000000000000bc87         movzx      edx, byte [r13+0x48]
000000000000bc8c         mov        rax, qword [r13+0x50]
000000000000bc90         cmp        dl, 0x25
000000000000bc93         je         loc_c428

000000000000bc99         cmp        rax, 0xffffffffffffffff
000000000000bc9d         je         loc_c8e6

000000000000bca3         mov        r8, qword [rbp+var_3A8]
000000000000bcaa         shl        rax, 0x5
000000000000bcae         add        rax, r8
000000000000bcb1         cmp        dl, 0x6e
000000000000bcb4         mov        edi, dword [rax]
000000000000bcb6         mov        dword [rbp+var_3D0], edi
000000000000bcbc         je         loc_c4a0

000000000000bcc2         mov        eax, dword [r13+0x10]
000000000000bcc6         mov        rdi, qword [rbp+var_3D8]
000000000000bccd         test       al, 0x1
000000000000bccf         mov        byte [rdi], 0x25
000000000000bcd2         lea        rbx, qword [rdi+1]
000000000000bcd6         je         loc_bce7

000000000000bcd8         mov        rdi, qword [rbp+var_3D8]
000000000000bcdf         lea        rbx, qword [rdi+2]
000000000000bce3         mov        byte [rdi+1], 0x27

                     loc_bce7:
000000000000bce7         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
000000000000bce9         je         loc_bcf2

000000000000bceb         mov        byte [rbx], 0x2d
000000000000bcee         add        rbx, 0x1

                     loc_bcf2:
000000000000bcf2         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
000000000000bcf4         je         loc_bcfd

000000000000bcf6         mov        byte [rbx], 0x2b
000000000000bcf9         add        rbx, 0x1

                     loc_bcfd:
000000000000bcfd         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
000000000000bcff         je         loc_bd08

000000000000bd01         mov        byte [rbx], 0x20
000000000000bd04         add        rbx, 0x1

                     loc_bd08:
000000000000bd08         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
000000000000bd0a         je         loc_bd13

000000000000bd0c         mov        byte [rbx], 0x23
000000000000bd0f         add        rbx, 0x1

                     loc_bd13:
000000000000bd13         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
000000000000bd15         je         loc_bd1e

000000000000bd17         mov        byte [rbx], 0x49
000000000000bd1a         add        rbx, 0x1

                     loc_bd1e:
000000000000bd1e         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
000000000000bd20         je         loc_bd29

000000000000bd22         mov        byte [rbx], 0x30
000000000000bd25         add        rbx, 0x1

                     loc_bd29:
000000000000bd29         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
000000000000bd2d         mov        rdx, qword [r13+0x20]
000000000000bd31         cmp        rsi, rdx
000000000000bd34         je         loc_bd66

000000000000bd36         mov        rcx, rdx
000000000000bd39         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000bd3c         mov        qword [rbp+var_3E0], r8
000000000000bd43         sub        rcx, rsi
000000000000bd46         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000bd49         mov        qword [rbp+var_3C8], rcx
000000000000bd50         call       j_memcpy                                    ; memcpy
000000000000bd55         mov        rcx, qword [rbp+var_3C8]
000000000000bd5c         mov        r8, qword [rbp+var_3E0]
000000000000bd63         add        rbx, rcx

                     loc_bd66:
000000000000bd66         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
000000000000bd6a         mov        rdx, qword [r13+0x38]
000000000000bd6e         cmp        rsi, rdx
000000000000bd71         je         loc_bda3

000000000000bd73         mov        rcx, rdx
000000000000bd76         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000bd79         mov        qword [rbp+var_3E0], r8
000000000000bd80         sub        rcx, rsi
000000000000bd83         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000bd86         mov        qword [rbp+var_3C8], rcx
000000000000bd8d         call       j_memcpy                                    ; memcpy
000000000000bd92         mov        rcx, qword [rbp+var_3C8]
000000000000bd99         mov        r8, qword [rbp+var_3E0]
000000000000bda0         add        rbx, rcx

                     loc_bda3:
000000000000bda3         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
000000000000bda9         cmp        edi, 0x10
000000000000bdac         ja         loc_bddb

000000000000bdae         mov        eax, 0x1
000000000000bdb3         mov        ecx, edi
000000000000bdb5         shl        rax, cl
000000000000bdb8         test       eax, 0x14180
000000000000bdbd         jne        loc_bdd4

000000000000bdbf         test       ah, 0x10
000000000000bdc2         jne        loc_c720

000000000000bdc8         test       ah, 0x6
000000000000bdcb         je         loc_bddb

000000000000bdcd         mov        byte [rbx], 0x6c
000000000000bdd0         add        rbx, 0x1

                     loc_bdd4:
000000000000bdd4         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
000000000000bdd7         add        rbx, 0x1

                     loc_bddb:
000000000000bddb         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
000000000000bde0         mov        byte [rbx+1], 0x0
000000000000bde4         mov        byte [rbx], al
000000000000bde6         mov        rax, qword [r13+0x28]
000000000000bdea         cmp        rax, 0xffffffffffffffff
000000000000bdee         je         loc_c520

000000000000bdf4         shl        rax, 0x5
000000000000bdf8         add        rax, r8
000000000000bdfb         cmp        dword [rax], 0x5
000000000000bdfe         jne        loc_c8e6

000000000000be04         mov        eax, dword [rax+0x10]
000000000000be07         mov        dword [rbp+var_3E0], 0x1
000000000000be11         mov        dword [rbp+var_3B8], eax

                     loc_be17:
000000000000be17         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
000000000000be1b         cmp        rax, 0xffffffffffffffff
000000000000be1f         je         loc_be4c

000000000000be21         shl        rax, 0x5
000000000000be25         add        r8, rax
000000000000be28         cmp        dword [r8], 0x5
000000000000be2c         jne        loc_c8e6

000000000000be32         mov        eax, dword [rbp+var_3E0]
000000000000be38         mov        edx, dword [r8+0x10]
000000000000be3c         mov        dword [rbp+rax*4+var_3B8], edx
000000000000be43         lea        eax, dword [rax+1]
000000000000be46         mov        dword [rbp+var_3E0], eax

                     loc_be4c:
000000000000be4c         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
000000000000be4f         xor        edx, edx
000000000000be51         add        rax, 0x2
000000000000be55         jb         loc_cabc

000000000000be5b         cmp        r12, rax
000000000000be5e         jae        loc_beab

000000000000be60         test       r12, r12
000000000000be63         jne        loc_c688

000000000000be69         cmp        rax, 0xc
000000000000be6d         ja         loc_c6a0

000000000000be73         mov        r12d, 0xc

                     loc_be79:
000000000000be79         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
000000000000be80         sete       dl
000000000000be83         test       r15, r15
000000000000be86         je         loc_c6d0

                     loc_be8c:
000000000000be8c         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
000000000000be8e         jne        loc_c6d0

000000000000be94         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000be97         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000be9a         call       j_realloc                                   ; realloc
000000000000be9f         test       rax, rax
000000000000bea2         je         loc_bb25

000000000000bea8         mov        r15, rax

                     loc_beab:
000000000000beab         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
000000000000beb0         call       j___errno_location                          ; __errno_location
000000000000beb5         mov        qword [rbp+var_3C8], rax
000000000000bebc         mov        eax, dword [rax]
000000000000bebe         mov        qword [rbp+var_3F8], rbx
000000000000bec5         mov        dword [rbp+var_424], eax
000000000000becb         nop        dword [rax+rax]

                     loc_bed0:
000000000000bed0         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
000000000000bed7         mov        rbx, r12
000000000000beda         mov        r10d, 0x7fffffff
000000000000bee0         sub        rbx, r14
000000000000bee3         mov        dword [rbp+var_3BC], 0xffffffff
000000000000beed         cmp        rbx, 0x7fffffff
000000000000bef4         mov        dword [rax], 0x0
000000000000befa         mov        eax, dword [rbp+var_3D0]
000000000000bf00         cmovbe     r10, rbx
000000000000bf04         cmp        eax, 0x11
000000000000bf07         ja         loc_c8e6

000000000000bf0d         lea        rsi, qword [switch_table_ffc8]              ; switch_table_ffc8
000000000000bf14         movsxd     rax, dword [rsi+rax*4]
000000000000bf18         add        rax, rsi
000000000000bf1b         jmp        rax                                         ; switch statement using table at 0xffc8, with 18 cases, 0xbf20,0xc058,0xc180,0xc208,0xc288,0xc2c8,0xc350,0xc380,0xc8e6
000000000000bf1d         align      32

                     loc_bf20:
000000000000bf20         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
000000000000bf24         lea        rdi, qword [r15+r14]
000000000000bf28         shl        rax, 0x5
000000000000bf2c         add        rax, qword [rbp+var_3A8]
000000000000bf33         mov        r9, qword [rax+0x10]
000000000000bf37         mov        eax, dword [rbp+var_3E0]
000000000000bf3d         cmp        eax, 0x1
000000000000bf40         je         loc_c408

000000000000bf46         cmp        eax, 0x2
000000000000bf49         je         loc_c3f0

000000000000bf4f         sub        rsp, 0x8
000000000000bf53         push       qword [rbp+var_3F0]

                     loc_bf59:
000000000000bf59         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
000000000000bf60         mov        rsi, r10
000000000000bf63         mov        rcx, 0xffffffffffffffff
000000000000bf6a         mov        edx, 0x1
000000000000bf6f         xor        eax, eax
000000000000bf71         mov        qword [rbp+var_430], r10
000000000000bf78         call       j___snprintf_chk                            ; __snprintf_chk
000000000000bf7d         pop        rsi
000000000000bf7e         pop        rdi
000000000000bf7f         mov        r10, qword [rbp+var_430]

                     loc_bf86:
000000000000bf86         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
000000000000bf8c         test       ecx, ecx
000000000000bf8e         js         loc_c0cc

                     loc_bf94:
000000000000bf94         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
000000000000bf97         cmp        rdx, r10
000000000000bf9a         jae        loc_bfaa

000000000000bf9c         add        rdx, r15
000000000000bf9f         cmp        byte [rdx+r14], 0x0
000000000000bfa4         jne        loc_c8e6

                     loc_bfaa:
000000000000bfaa         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
000000000000bfac         jge        loc_bfb6

                     loc_bfae:
000000000000bfae         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
000000000000bfb4         mov        ecx, eax

                     loc_bfb6:
000000000000bfb6         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
000000000000bfb9         cmp        rax, r10
000000000000bfbc         jb         loc_c7f0

000000000000bfc2         cmp        rbx, 0x7ffffffe
000000000000bfc9         ja         loc_c810

000000000000bfcf         lea        rsi, qword [r12+r12]
000000000000bfd3         lea        edx, dword [rcx+2]
000000000000bfd6         test       r12, r12
000000000000bfd9         mov        rax, 0xffffffffffffffff
000000000000bfe0         cmovns     rax, rsi
000000000000bfe4         add        rdx, r14
000000000000bfe7         jb         loc_caa8

000000000000bfed         cmp        rax, rdx
000000000000bff0         cmovb      rax, rdx
000000000000bff4         cmp        r12, rax
000000000000bff7         jae        loc_bed0

000000000000bffd         test       r12, r12
000000000000c000         js         loc_bb31                                    ; DATA XREF=file_type+71, strmode+86

000000000000c006         cmp        rsi, rax
000000000000c009         mov        r12, rsi
000000000000c00c         jae        loc_c01b

000000000000c00e         cmp        rax, 0xffffffffffffffff
000000000000c012         je         loc_bb31

000000000000c018         mov        r12, rax

                     loc_c01b:
000000000000c01b         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
000000000000c022         sete       bl
000000000000c025         test       r15, r15
000000000000c028         je         loc_c3b0

000000000000c02e         test       bl, bl
000000000000c030         jne        loc_c3b0

000000000000c036         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000c039         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000c03c         call       j_realloc                                   ; realloc
000000000000c041         test       rax, rax
000000000000c044         je         loc_bb31

000000000000c04a         mov        r15, rax
000000000000c04d         jmp        loc_bed0
000000000000c052         align      8

                     loc_c058:
000000000000c058         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
000000000000c05c         lea        rdi, qword [r15+r14]
000000000000c060         shl        rax, 0x5
000000000000c064         add        rax, qword [rbp+var_3A8]
000000000000c06b         mov        r9d, dword [rax+0x10]
000000000000c06f         mov        eax, dword [rbp+var_3E0]
000000000000c075         cmp        eax, 0x1
000000000000c078         je         loc_c2b0

                     loc_c07e:
000000000000c07e         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
000000000000c081         je         loc_c2f8

                     loc_c087:
000000000000c087         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
000000000000c08b         push       qword [rbp+var_3F0]

                     loc_c091:
000000000000c091         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
000000000000c098         mov        rcx, 0xffffffffffffffff
000000000000c09f         mov        edx, 0x1
000000000000c0a4         mov        rsi, r10
000000000000c0a7         xor        eax, eax
000000000000c0a9         mov        qword [rbp+var_430], r10
000000000000c0b0         call       j___snprintf_chk                            ; __snprintf_chk
000000000000c0b5         pop        rdx
000000000000c0b6         pop        rcx
000000000000c0b7         mov        ecx, dword [rbp+var_3BC]
000000000000c0bd         mov        r10, qword [rbp+var_430]
000000000000c0c4         test       ecx, ecx
000000000000c0c6         jns        loc_bf94

                     loc_c0cc:
000000000000c0cc         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
000000000000c0d3         cmp        byte [rdi+1], 0x0
000000000000c0d7         jne        loc_c418

000000000000c0dd         test       eax, eax
000000000000c0df         jns        loc_bfae

000000000000c0e5         mov        rax, qword [rbp+var_3C8]
000000000000c0ec         mov        ebx, dword [rax]
000000000000c0ee         test       ebx, ebx
000000000000c0f0         jne        loc_c110

000000000000c0f2         movzx      eax, byte [r13+0x48]
000000000000c0f7         mov        ebx, 0x16
000000000000c0fc         and        eax, 0xffffffef
000000000000c0ff         cmp        al, 0x63
000000000000c101         mov        eax, 0x54
000000000000c106         cmove      ebx, eax
000000000000c109         nop        dword [rax]

                     loc_c110:
000000000000c110         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
000000000000c117         je         loc_c122

000000000000c119         test       r15, r15
000000000000c11c         jne        loc_c8cc

                     loc_c122:
000000000000c122         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
000000000000c129         test       rax, rax
000000000000c12c         je         loc_c136

000000000000c12e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000c131         call       j_free                                      ; free

                     loc_c136:
000000000000c136         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
000000000000c13d         mov        rdi, qword [rbp+var_2B8]
000000000000c144         add        rax, 0x20
000000000000c148         cmp        rdi, rax
000000000000c14b         je         loc_c152

000000000000c14d         call       j_free                                      ; free

                     loc_c152:
000000000000c152         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
000000000000c159         mov        rdi, qword [rbp+var_3A8]
000000000000c160         add        rax, 0x10
000000000000c164         cmp        rdi, rax
000000000000c167         je         loc_c16e

000000000000c169         call       j_free                                      ; free

                     loc_c16e:
000000000000c16e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
000000000000c175         xor        r15d, r15d
000000000000c178         mov        dword [rax], ebx
000000000000c17a         jmp        loc_bb9f
000000000000c17f         align      128

                     loc_c180:
000000000000c180         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
000000000000c184         lea        rdi, qword [r15+r14]
000000000000c188         shl        rax, 0x5
000000000000c18c         add        rax, qword [rbp+var_3A8]
000000000000c193         fld        tword [rax+0x10]
000000000000c196         mov        eax, dword [rbp+var_3E0]
000000000000c19c         cmp        eax, 0x1
000000000000c19f         je         loc_c7d0

000000000000c1a5         cmp        eax, 0x2
000000000000c1a8         jne        loc_c670

000000000000c1ae         mov        eax, dword [rbp+var_3B4]
000000000000c1b4         sub        rsp, 0x8
000000000000c1b8         push       qword [rbp+var_3F0]
000000000000c1be         mov        r9d, dword [rbp+var_3B8]
000000000000c1c5         mov        r8, qword [rbp+var_3D8]
000000000000c1cc         mov        rsi, r10
000000000000c1cf         sub        rsp, 0x18
000000000000c1d3         mov        rcx, 0xffffffffffffffff
000000000000c1da         mov        edx, 0x1
000000000000c1df         fstp       tword [rsp+0x458+var_450]
000000000000c1e3         push       rax
000000000000c1e4         xor        eax, eax
000000000000c1e6         mov        qword [rbp+var_430], r10
000000000000c1ed         call       j___snprintf_chk                            ; __snprintf_chk
000000000000c1f2         add        rsp, 0x30
000000000000c1f6         mov        r10, qword [rbp+var_430]
000000000000c1fd         jmp        loc_bf86
000000000000c202         align      8

                     loc_c208:
000000000000c208         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
000000000000c20c         lea        rdi, qword [r15+r14]
000000000000c210         shl        rax, 0x5
000000000000c214         add        rax, qword [rbp+var_3A8]
000000000000c21b         movsd      xmm0, qword [rax+0x10]
000000000000c220         mov        eax, dword [rbp+var_3E0]
000000000000c226         cmp        eax, 0x1
000000000000c229         je         loc_c7c0

000000000000c22f         cmp        eax, 0x2
000000000000c232         jne        loc_c630

000000000000c238         mov        eax, dword [rbp+var_3B4]
000000000000c23e         push       qword [rbp+var_3F0]
000000000000c244         push       rax

                     loc_c245:
000000000000c245         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
000000000000c24c         mov        r8, qword [rbp+var_3D8]
000000000000c253         mov        rsi, r10
000000000000c256         mov        rcx, 0xffffffffffffffff
000000000000c25d         mov        edx, 0x1
000000000000c262         mov        eax, 0x1
000000000000c267         mov        qword [rbp+var_430], r10
000000000000c26e         call       j___snprintf_chk                            ; __snprintf_chk
000000000000c273         pop        r8
000000000000c275         mov        r10, qword [rbp+var_430]
000000000000c27c         pop        r9
000000000000c27e         jmp        loc_bf86
000000000000c283         align      8

                     loc_c288:
000000000000c288         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
000000000000c28c         lea        rdi, qword [r15+r14]
000000000000c290         shl        rax, 0x5
000000000000c294         add        rax, qword [rbp+var_3A8]
000000000000c29b         movzx      r9d, word [rax+0x10]
000000000000c2a0         mov        eax, dword [rbp+var_3E0]
000000000000c2a6         cmp        eax, 0x1
000000000000c2a9         jne        loc_c07e

000000000000c2af         nop

                     loc_c2b0:
000000000000c2b0         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
000000000000c2b6         push       r9

                     loc_c2b8:
000000000000c2b8         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
000000000000c2bf         jmp        loc_c091
000000000000c2c4         align      8

                     loc_c2c8:
000000000000c2c8         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
000000000000c2cc         lea        rdi, qword [r15+r14]
000000000000c2d0         shl        rax, 0x5
000000000000c2d4         add        rax, qword [rbp+var_3A8]
000000000000c2db         movsx      r9d, word [rax+0x10]
000000000000c2e0         mov        eax, dword [rbp+var_3E0]
000000000000c2e6         cmp        eax, 0x1
000000000000c2e9         je         loc_c2b0

000000000000c2eb         cmp        eax, 0x2
000000000000c2ee         jne        loc_c087

000000000000c2f4         nop        dword [rax]

                     loc_c2f8:
000000000000c2f8         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
000000000000c2fc         push       qword [rbp+var_3F0]
000000000000c302         push       r9

                     loc_c304:
000000000000c304         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
000000000000c30a         push       rax

                     loc_c30b:
000000000000c30b         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
000000000000c312         mov        r8, qword [rbp+var_3D8]
000000000000c319         mov        rsi, r10
000000000000c31c         mov        rcx, 0xffffffffffffffff
000000000000c323         mov        edx, 0x1
000000000000c328         xor        eax, eax
000000000000c32a         mov        qword [rbp+var_430], r10
000000000000c331         call       j___snprintf_chk                            ; __snprintf_chk
000000000000c336         add        rsp, 0x20
000000000000c33a         mov        r10, qword [rbp+var_430]
000000000000c341         jmp        loc_bf86
000000000000c346         align      16

                     loc_c350:
000000000000c350         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
000000000000c354         lea        rdi, qword [r15+r14]
000000000000c358         shl        rax, 0x5
000000000000c35c         add        rax, qword [rbp+var_3A8]
000000000000c363         movzx      r9d, byte [rax+0x10]
000000000000c368         mov        eax, dword [rbp+var_3E0]
000000000000c36e         cmp        eax, 0x1
000000000000c371         jne        loc_c07e

000000000000c377         jmp        loc_c2b0
000000000000c37c         align      128

                     loc_c380:
000000000000c380         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
000000000000c384         lea        rdi, qword [r15+r14]
000000000000c388         shl        rax, 0x5
000000000000c38c         add        rax, qword [rbp+var_3A8]
000000000000c393         movsx      r9d, byte [rax+0x10]
000000000000c398         mov        eax, dword [rbp+var_3E0]
000000000000c39e         cmp        eax, 0x1
000000000000c3a1         jne        loc_c07e

000000000000c3a7         jmp        loc_c2b0
000000000000c3ac         align      16

                     loc_c3b0:
000000000000c3b0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
000000000000c3b3         call       j_malloc                                    ; malloc
000000000000c3b8         test       rax, rax
000000000000c3bb         mov        rcx, rax
000000000000c3be         je         loc_bb31

000000000000c3c4         test       r14, r14
000000000000c3c7         je         loc_c480

000000000000c3cd         test       bl, bl
000000000000c3cf         je         loc_c480

000000000000c3d5         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000c3d8         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000c3db         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000c3de         call       j_memcpy                                    ; memcpy
000000000000c3e3         mov        r15, rax
000000000000c3e6         jmp        loc_bed0
000000000000c3eb         align      16

                     loc_c3f0:
000000000000c3f0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
000000000000c3f4         push       qword [rbp+var_3F0]
000000000000c3fa         push       r9
000000000000c3fc         jmp        loc_c304
000000000000c401         align      8

                     loc_c408:
000000000000c408         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
000000000000c40e         push       r9
000000000000c410         jmp        loc_c2b8
000000000000c415         align      8

                     loc_c418:
000000000000c418         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
000000000000c41c         jmp        loc_bed0
000000000000c421         align      8

                     loc_c428:
000000000000c428         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
000000000000c42c         jne        loc_c8e6

000000000000c432         mov        rax, r14
000000000000c435         add        rax, 0x1
000000000000c439         mov        rbx, rax
000000000000c43c         jae        loc_c4c8

000000000000c442         cmp        r12, 0xffffffffffffffff
000000000000c446         jne        loc_bb25

000000000000c44c         mov        rbx, r12

                     loc_c44f:
000000000000c44f         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_c454:
000000000000c454         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
000000000000c458         add        r13, 0x58
000000000000c45c         mov        rcx, qword [r13]
000000000000c460         add        qword [rbp+var_400], 0x1
000000000000c468         cmp        rcx, r8
000000000000c46b         jne        loc_bb09

                     loc_c471:
000000000000c471         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
000000000000c474         jmp        loc_bc73
000000000000c479         align      128

                     loc_c480:
000000000000c480         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
000000000000c483         jmp        loc_bed0

                     loc_c488:
000000000000c488         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
000000000000c48d         mov        qword [rbp+var_3C8], rax
000000000000c494         jmp        loc_bb57
000000000000c499         align      32

                     loc_c4a0:
000000000000c4a0         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
000000000000c4a2         sub        edx, 0x12
000000000000c4a5         cmp        edx, 0x4
000000000000c4a8         ja         loc_c8e6

000000000000c4ae         lea        rdi, qword [switch_table_10010]             ; switch_table_10010
000000000000c4b5         mov        rax, qword [rax+0x10]
000000000000c4b9         movsxd     rdx, dword [rdi+rdx*4]
000000000000c4bd         add        rdx, rdi
000000000000c4c0         jmp        rdx                                         ; switch statement using table at 0x10010, with 5 cases, 0xc600,0xc730,0xc740,0xc750
000000000000c4c2         align      8

                     loc_c4c8:
000000000000c4c8         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
000000000000c4cb         jae        loc_c44f

000000000000c4cd         test       r12, r12
000000000000c4d0         jne        loc_c8a0

000000000000c4d6         cmp        rax, 0xc
000000000000c4da         ja         loc_c8b2

000000000000c4e0         mov        r12d, 0xc

                     loc_c4e6:
000000000000c4e6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
000000000000c4ed         sete       dl
000000000000c4f0         test       r15, r15
000000000000c4f3         je         loc_c760

000000000000c4f9         test       dl, dl
000000000000c4fb         jne        loc_c760

000000000000c501         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000c504         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000c507         call       j_realloc                                   ; realloc
000000000000c50c         test       rax, rax
000000000000c50f         je         loc_c60b

000000000000c515         mov        r15, rax
000000000000c518         jmp        loc_c44f
000000000000c51d         align      32

                     loc_c520:
000000000000c520         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
000000000000c52a         jmp        loc_be17
000000000000c52f         align      16

                     loc_c530:
000000000000c530         js         loc_bb25                                    ; CODE XREF=vasnprintf+576

000000000000c536         add        r12, r12
000000000000c539         cmp        r12, rax
000000000000c53c         jae        loc_bc16

                     loc_c542:
000000000000c542         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
000000000000c546         je         loc_bb25

000000000000c54c         cmp        r15, qword [rbp+var_3E8]
000000000000c553         mov        r12, rax
000000000000c556         sete       dl
000000000000c559         test       r15, r15
000000000000c55c         jne        loc_bc29

000000000000c562         nop        word [rax+rax]

                     loc_c568:
000000000000c568         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
000000000000c56b         mov        qword [rbp+var_3E0], r8
000000000000c572         mov        byte [rbp+var_3D0], dl
000000000000c578         mov        qword [rbp+var_3C8], rcx
000000000000c57f         call       j_malloc                                    ; malloc
000000000000c584         test       rax, rax
000000000000c587         mov        r9, rax
000000000000c58a         mov        rcx, qword [rbp+var_3C8]
000000000000c591         movzx      edx, byte [rbp+var_3D0]
000000000000c598         mov        r8, qword [rbp+var_3E0]
000000000000c59f         je         loc_bb25

000000000000c5a5         test       rbx, rbx
000000000000c5a8         je         loc_c7b0

000000000000c5ae         test       dl, dl
000000000000c5b0         je         loc_c7b0

000000000000c5b6         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000c5b9         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000c5bc         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000c5bf         mov        qword [rbp+var_3D0], r8
000000000000c5c6         mov        qword [rbp+var_3C8], rcx
000000000000c5cd         call       j_memcpy                                    ; memcpy
000000000000c5d2         mov        rcx, qword [rbp+var_3C8]
000000000000c5d9         mov        r15, rax
000000000000c5dc         mov        r8, qword [rbp+var_3D0]
000000000000c5e3         jmp        loc_bc64
000000000000c5e8         align      16

                     loc_c5f0:
000000000000c5f0         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
000000000000c5f3         jmp        loc_bc64
000000000000c5f8         align      512

                     loc_c600:
000000000000c600         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
000000000000c603         mov        rbx, r14
000000000000c606         jmp        loc_c454

                     loc_c60b:
000000000000c60b         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
000000000000c610         mov        qword [rbp+var_3C8], rax
000000000000c617         nop        word [rax+rax]

                     loc_c620:
000000000000c620         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
000000000000c623         call       j_free                                      ; free
000000000000c628         jmp        loc_bb43
000000000000c62d         align      16

                     loc_c630:
000000000000c630         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
000000000000c637         mov        r8, qword [rbp+var_3D8]
000000000000c63e         mov        rsi, r10
000000000000c641         mov        rcx, 0xffffffffffffffff
000000000000c648         mov        edx, 0x1
000000000000c64d         mov        eax, 0x1
000000000000c652         mov        qword [rbp+var_430], r10
000000000000c659         call       j___snprintf_chk                            ; __snprintf_chk
000000000000c65e         mov        r10, qword [rbp+var_430]
000000000000c665         jmp        loc_bf86
000000000000c66a         align      16

                     loc_c670:
000000000000c670         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
000000000000c674         mov        r9, qword [rbp+var_3F0]
000000000000c67b         fstp       tword [rsp+0x440+var_440]
000000000000c67e         jmp        loc_bf59
000000000000c683         align      8

                     loc_c688:
000000000000c688         js         loc_bb25                                    ; CODE XREF=vasnprintf+1187

000000000000c68e         add        r12, r12
000000000000c691         cmp        r12, rax
000000000000c694         jae        loc_be79

000000000000c69a         nop        word [rax+rax]

                     loc_c6a0:
000000000000c6a0         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
000000000000c6a3         jne        loc_bb25

000000000000c6a9         cmp        rax, 0xffffffffffffffff
000000000000c6ad         je         loc_bb25

000000000000c6b3         cmp        r15, qword [rbp+var_3E8]
000000000000c6ba         mov        r12, rax
000000000000c6bd         sete       dl
000000000000c6c0         test       r15, r15
000000000000c6c3         jne        loc_be8c

000000000000c6c9         nop        dword [rax]

                     loc_c6d0:
000000000000c6d0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
000000000000c6d3         mov        byte [rbp+var_3C8], dl
000000000000c6d9         call       j_malloc                                    ; malloc
000000000000c6de         test       rax, rax
000000000000c6e1         mov        rcx, rax
000000000000c6e4         movzx      edx, byte [rbp+var_3C8]
000000000000c6eb         je         loc_bb25

000000000000c6f1         test       r14, r14
000000000000c6f4         je         loc_c890

000000000000c6fa         test       dl, dl
000000000000c6fc         je         loc_c890

000000000000c702         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000c705         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000c708         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000c70b         call       j_memcpy                                    ; memcpy
000000000000c710         mov        r15, rax
000000000000c713         jmp        loc_beab
000000000000c718         align      32

                     loc_c720:
000000000000c720         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
000000000000c723         add        rbx, 0x1
000000000000c727         jmp        loc_bddb
000000000000c72c         align      16

                     loc_c730:
000000000000c730         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
000000000000c733         mov        rbx, r14
000000000000c736         jmp        loc_c454
000000000000c73b         align      64

                     loc_c740:
000000000000c740         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
000000000000c743         mov        rbx, r14
000000000000c746         jmp        loc_c454
000000000000c74b         align      16

                     loc_c750:
000000000000c750         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
000000000000c754         mov        rbx, r14
000000000000c757         jmp        loc_c454
000000000000c75c         align      32

                     loc_c760:
000000000000c760         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
000000000000c763         mov        byte [rbp+var_3C8], dl
000000000000c769         call       j_malloc                                    ; malloc
000000000000c76e         test       rax, rax
000000000000c771         mov        rcx, rax
000000000000c774         movzx      edx, byte [rbp+var_3C8]
000000000000c77b         je         loc_bb25

000000000000c781         test       r14, r14
000000000000c784         je         loc_c8c4

000000000000c78a         test       dl, dl
000000000000c78c         je         loc_c8c4

000000000000c792         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000c795         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000c798         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000c79b         call       j_memcpy                                    ; memcpy
000000000000c7a0         mov        r15, rax
000000000000c7a3         jmp        loc_c44f
000000000000c7a8         align      16

                     loc_c7b0:
000000000000c7b0         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
000000000000c7b3         jmp        loc_bc64
000000000000c7b8         align      64

                     loc_c7c0:
000000000000c7c0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
000000000000c7c4         push       qword [rbp+var_3F0]
000000000000c7ca         jmp        loc_c245
000000000000c7cf         align      16

                     loc_c7d0:
000000000000c7d0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
000000000000c7d4         push       qword [rbp+var_3F0]
000000000000c7da         sub        rsp, 0x10
000000000000c7de         fstp       tword [rsp+0x450+var_450]
000000000000c7e1         jmp        loc_c30b
000000000000c7e6         align      16

                     loc_c7f0:
000000000000c7f0         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
000000000000c7f7         mov        edi, dword [rbp+var_424]
000000000000c7fd         movsxd     rbx, ecx
000000000000c800         add        rbx, r14
000000000000c803         mov        dword [rax], edi
000000000000c805         jmp        loc_c454
000000000000c80a         align      16

                     loc_c810:
000000000000c810         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
000000000000c817         je         loc_c822

000000000000c819         test       r15, r15
000000000000c81c         jne        loc_c8d9

                     loc_c822:
000000000000c822         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
000000000000c829         test       rax, rax
000000000000c82c         je         loc_c836

000000000000c82e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000c831         call       j_free                                      ; free

                     loc_c836:
000000000000c836         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
000000000000c83d         mov        rdi, qword [rbp+var_2B8]
000000000000c844         add        rax, 0x20
000000000000c848         cmp        rdi, rax
000000000000c84b         je         loc_c852

000000000000c84d         call       j_free                                      ; free

                     loc_c852:
000000000000c852         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
000000000000c859         mov        rdi, qword [rbp+var_3A8]
000000000000c860         add        rax, 0x10
000000000000c864         cmp        rdi, rax
000000000000c867         je         loc_c86e

000000000000c869         call       j_free                                      ; free

                     loc_c86e:
000000000000c86e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
000000000000c875         xor        r15d, r15d
000000000000c878         mov        dword [rax], 0x4b
000000000000c87e         jmp        loc_bb9f
000000000000c883         align      8

                     loc_c888:
000000000000c888         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
000000000000c88b         jmp        loc_bb9f

                     loc_c890:
000000000000c890         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
000000000000c893         jmp        loc_beab
000000000000c898         align      32

                     loc_c8a0:
000000000000c8a0         js         loc_bb25                                    ; CODE XREF=vasnprintf+2832

000000000000c8a6         add        r12, r12
000000000000c8a9         cmp        r12, rax
000000000000c8ac         jae        loc_c4e6

                     loc_c8b2:
000000000000c8b2         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
000000000000c8b6         je         loc_bb25

000000000000c8bc         mov        r12, rax
000000000000c8bf         jmp        loc_c4e6

                     loc_c8c4:
000000000000c8c4         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
000000000000c8c7         jmp        loc_c44f

                     loc_c8cc:
000000000000c8cc         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
000000000000c8cf         call       j_free                                      ; free
000000000000c8d4         jmp        loc_c122

                     loc_c8d9:
000000000000c8d9         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
000000000000c8dc         call       j_free                                      ; free
000000000000c8e1         jmp        loc_c822

                     loc_c8e6:
000000000000c8e6         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
000000000000c8eb         align      16

                     loc_c8f0:
000000000000c8f0         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
000000000000c8f7         mov        rdi, qword [rbp+var_2B8]
000000000000c8fe         add        rax, 0x20
000000000000c902         cmp        rdi, rax
000000000000c905         je         loc_c90c

000000000000c907         call       j_free                                      ; free

                     loc_c90c:
000000000000c90c         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
000000000000c913         mov        rdi, qword [rbp+var_3A8]
000000000000c91a         add        rax, 0x10
000000000000c91e         cmp        rdi, rax
000000000000c921         je         loc_c928

000000000000c923         call       j_free                                      ; free

                     loc_c928:
000000000000c928         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
000000000000c92d         xor        r15d, r15d
000000000000c930         mov        dword [rax], 0x16
000000000000c936         jmp        loc_bb9f

                     loc_c93b:
000000000000c93b         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
000000000000c93e         xor        eax, eax
000000000000c940         add        rbx, 0x1
000000000000c944         jb         loc_ca50

000000000000c94a         cmp        r12, rbx
000000000000c94d         jae        loc_c99c

000000000000c94f         test       r12, r12
000000000000c952         jne        loc_ca89

000000000000c958         cmp        rbx, 0xc
000000000000c95c         ja         loc_ca6e

000000000000c962         mov        r12d, 0xc

                     loc_c968:
000000000000c968         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
000000000000c96f         sete       r13b
000000000000c973         test       r15, r15
000000000000c976         je         loc_ca1c

000000000000c97c         test       r13b, r13b
000000000000c97f         jne        loc_ca1c

000000000000c985         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000c988         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000c98b         call       j_realloc                                   ; realloc
000000000000c990         test       rax, rax
000000000000c993         je         loc_c60b

000000000000c999         mov        r15, rax

                     loc_c99c:
000000000000c99c         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
000000000000c9a3         mov        byte [r15+r14], 0x0
000000000000c9a8         je         loc_c9c1

000000000000c9aa         cmp        r12, rbx
000000000000c9ad         jbe        loc_c9c1

000000000000c9af         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000c9b2         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
000000000000c9b5         call       j_realloc                                   ; realloc
000000000000c9ba         test       rax, rax
000000000000c9bd         cmovne     r15, rax

                     loc_c9c1:
000000000000c9c1         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
000000000000c9c8         test       rax, rax
000000000000c9cb         je         loc_c9d5

000000000000c9cd         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000c9d0         call       j_free                                      ; free

                     loc_c9d5:
000000000000c9d5         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
000000000000c9dc         mov        rdi, qword [rbp+var_2B8]
000000000000c9e3         add        rax, 0x20
000000000000c9e7         cmp        rdi, rax
000000000000c9ea         je         loc_c9f1

000000000000c9ec         call       j_free                                      ; free

                     loc_c9f1:
000000000000c9f1         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
000000000000c9f8         mov        rdi, qword [rbp+var_3A8]
000000000000c9ff         add        rax, 0x10
000000000000ca03         cmp        rdi, rax
000000000000ca06         je         loc_ca0d

000000000000ca08         call       j_free                                      ; free

                     loc_ca0d:
000000000000ca0d         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
000000000000ca14         mov        qword [rax], r14
000000000000ca17         jmp        loc_bb9f

                     loc_ca1c:
000000000000ca1c         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
000000000000ca1f         call       j_malloc                                    ; malloc
000000000000ca24         test       rax, rax
000000000000ca27         mov        rcx, rax
000000000000ca2a         je         loc_bb25

000000000000ca30         test       r14, r14
000000000000ca33         je         loc_caa0

000000000000ca35         test       r13b, r13b
000000000000ca38         je         loc_caa0

000000000000ca3a         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000ca3d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000ca40         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000ca43         call       j_memcpy                                    ; memcpy
000000000000ca48         mov        r15, rax
000000000000ca4b         jmp        loc_c99c

                     loc_ca50:
000000000000ca50         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
000000000000ca54         mov        eax, 0x1
000000000000ca59         je         loc_c99c

000000000000ca5f         test       r12, r12
000000000000ca62         je         loc_bb25

000000000000ca68         js         loc_bb25

                     loc_ca6e:
000000000000ca6e         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
000000000000ca71         jne        loc_bb25

000000000000ca77         cmp        rbx, 0xffffffffffffffff
000000000000ca7b         je         loc_bb25

000000000000ca81         mov        r12, rbx
000000000000ca84         jmp        loc_c968

                     loc_ca89:
000000000000ca89         js         loc_bb25                                    ; CODE XREF=vasnprintf+3986

000000000000ca8f         add        r12, r12
000000000000ca92         cmp        r12, rbx
000000000000ca95         jae        loc_c968

000000000000ca9b         jmp        loc_ca6e
000000000000ca9d         align      32

                     loc_caa0:
000000000000caa0         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
000000000000caa3         jmp        loc_c99c

                     loc_caa8:
000000000000caa8         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
000000000000caac         je         loc_bed0

000000000000cab2         jmp        loc_bb31

                     loc_cab7:
000000000000cab7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_cabc:
000000000000cabc         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
000000000000cac0         mov        edx, 0x1
000000000000cac5         je         loc_beab

000000000000cacb         test       r12, r12
000000000000cace         je         loc_bb25

000000000000cad4         jns        loc_c6a0

000000000000cada         jmp        loc_bb25
000000000000cadf         align      32                                          ; End of unwind block (FDE at 0x11c24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
000000000000cae0         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0x11c54), CODE XREF=vasnprintf+108
000000000000cae4         mov        rax, qword [rsi+8]
000000000000cae8         je         loc_cb4d

000000000000caea         lea        r8, qword [aNull+12]                        ; 0x10030
000000000000caf1         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
000000000000caf8         lea        r9, qword [aNull]                           ; "(NULL)"
000000000000caff         xor        ecx, ecx
000000000000cb01         nop        dword [rax]
000000000000cb08         cmp        dword [rax], 0x16
000000000000cb0b         ja         loc_cb50

000000000000cb0d         mov        edx, dword [rax]
000000000000cb0f         movsxd     rdx, dword [r8+rdx*4]
000000000000cb13         add        rdx, r8
000000000000cb16         jmp        rdx
                        ; endp
000000000000cb18         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cb20:
000000000000cb20         mov        rdx, qword [rdi+8]
000000000000cb24         add        rdx, 0xf
000000000000cb28         and        rdx, 0xfffffffffffffff0
000000000000cb2c         lea        r11, qword [rdx+0x10]
000000000000cb30         mov        qword [rdi+8], r11
000000000000cb34         fld        tword [rdx]
000000000000cb36         fstp       tword [rax+0x10]
000000000000cb39         nop        dword [rax]
000000000000cb40         add        rcx, 0x1                                    ; CODE XREF=sub_cb56+137, sub_cb56+183
000000000000cb44         add        rax, 0x20
000000000000cb48         cmp        qword [rsi], rcx
000000000000cb4b         ja         printf_fetchargs+40
                        ; endp

                     loc_cb4d:
000000000000cb4d         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
000000000000cb4f         ret
                        ; endp

                     loc_cb50:
000000000000cb50         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
000000000000cb55         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cb56:
000000000000cb56         mov        r11d, dword [rdi]
000000000000cb59         cmp        r11d, 0x2f
000000000000cb5d         ja         loc_cc9a

000000000000cb63         mov        edx, r11d
000000000000cb66         add        rdx, qword [rdi+0x10]
000000000000cb6a         add        r11d, 0x8
000000000000cb6e         mov        dword [rdi], r11d

                     loc_cb71:
000000000000cb71         mov        rdx, qword [rdx]                            ; CODE XREF=sub_cc40+102
000000000000cb74         mov        qword [rax+0x10], rdx
000000000000cb78         jmp        sub_cb20+32
                        ; endp
000000000000cb7a         mov        r11d, dword [rdi]
000000000000cb7d         cmp        r11d, 0x2f
000000000000cb81         ja         sub_ccbc                                    ; sub_ccbc
000000000000cb87         mov        edx, r11d
000000000000cb8a         add        rdx, qword [rdi+0x10]
000000000000cb8e         add        r11d, 0x8
000000000000cb92         mov        dword [rdi], r11d

                     loc_cb95:
000000000000cb95         mov        edx, dword [rdx]                            ; CODE XREF=sub_ccbc+12
000000000000cb97         mov        dword [rax+0x10], edx
000000000000cb9a         jmp        sub_cb20+32
                        ; endp
000000000000cb9c         mov        r11d, dword [rdi]
000000000000cb9f         cmp        r11d, 0x2f
000000000000cba3         ja         sub_ccab                                    ; sub_ccab
000000000000cba9         mov        edx, r11d
000000000000cbac         add        rdx, qword [rdi+0x10]
000000000000cbb0         add        r11d, 0x8
000000000000cbb4         mov        dword [rdi], r11d

                     loc_cbb7:
000000000000cbb7         mov        edx, dword [rdx]                            ; CODE XREF=sub_ccab+12
000000000000cbb9         mov        byte [rax+0x10], dl
000000000000cbbc         jmp        sub_cb20+32
                        ; endp
000000000000cbbe         mov        r11d, dword [rdi]
000000000000cbc1         cmp        r11d, 0x2f
000000000000cbc5         ja         sub_cc40+42
000000000000cbcb         mov        edx, r11d
000000000000cbce         add        rdx, qword [rdi+0x10]
000000000000cbd2         add        r11d, 0x8
000000000000cbd6         mov        dword [rdi], r11d
000000000000cbd9         mov        edx, dword [rdx]                            ; CODE XREF=sub_cc40+54
000000000000cbdb         mov        word [rax+0x10], dx
000000000000cbdf         jmp        sub_cb20+32
000000000000cbe4         mov        r11d, dword [rdi]
000000000000cbe7         cmp        r11d, 0x2f
000000000000cbeb         ja         sub_cc40+59
000000000000cbf1         mov        edx, r11d
000000000000cbf4         add        rdx, qword [rdi+0x10]
000000000000cbf8         add        r11d, 0x8
000000000000cbfc         mov        dword [rdi], r11d
000000000000cbff         mov        rdx, qword [rdx]                            ; CODE XREF=sub_cc40+71
000000000000cc02         test       rdx, rdx
000000000000cc05         cmove      rdx, r9
000000000000cc09         mov        qword [rax+0x10], rdx
000000000000cc0d         jmp        sub_cb20+32
000000000000cc12         mov        r11d, dword [rdi+4]
000000000000cc16         cmp        r11d, 0xaf
000000000000cc1d         ja         sub_cccd                                    ; sub_cccd
000000000000cc23         mov        edx, r11d
000000000000cc26         add        rdx, qword [rdi+0x10]
000000000000cc2a         add        r11d, 0x10
000000000000cc2e         mov        dword [rdi+4], r11d

                     loc_cc32:
000000000000cc32         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_cccd+12
000000000000cc36         movsd      qword [rax+0x10], xmm0
000000000000cc3b         jmp        sub_cb20+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cc40:
000000000000cc40         mov        r11d, dword [rdi]
000000000000cc43         cmp        r11d, 0x2f
000000000000cc47         ja         loc_cc8c

000000000000cc49         mov        edx, r11d
000000000000cc4c         add        rdx, qword [rdi+0x10]
000000000000cc50         add        r11d, 0x8
000000000000cc54         mov        dword [rdi], r11d

                     loc_cc57:
000000000000cc57         mov        rdx, qword [rdx]                            ; CODE XREF=sub_cc40+88
000000000000cc5a         test       rdx, rdx
000000000000cc5d         cmove      rdx, r10
000000000000cc61         mov        qword [rax+0x10], rdx
000000000000cc65         jmp        sub_cb20+32
                        ; endp
000000000000cc6a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_cb56+111
000000000000cc6e         lea        r11, qword [rdx+8]
000000000000cc72         mov        qword [rdi+8], r11
000000000000cc76         jmp        sub_cb56+131
000000000000cc7b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_cb56+149
000000000000cc7f         lea        r11, qword [rdx+8]
000000000000cc83         mov        qword [rdi+8], r11
000000000000cc87         jmp        sub_cb56+169

                     loc_cc8c:
000000000000cc8c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_cc40+7
000000000000cc90         lea        r11, qword [rdx+8]
000000000000cc94         mov        qword [rdi+8], r11
000000000000cc98         jmp        loc_cc57

                     loc_cc9a:
000000000000cc9a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_cb56+7
000000000000cc9e         lea        r11, qword [rdx+8]
000000000000cca2         mov        qword [rdi+8], r11
000000000000cca6         jmp        loc_cb71


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ccab:
000000000000ccab         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_cb56+77
000000000000ccaf         lea        r11, qword [rdx+8]
000000000000ccb3         mov        qword [rdi+8], r11
000000000000ccb7         jmp        loc_cbb7


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ccbc:
000000000000ccbc         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_cb56+43
000000000000ccc0         lea        r11, qword [rdx+8]
000000000000ccc4         mov        qword [rdi+8], r11
000000000000ccc8         jmp        loc_cb95


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_cccd:
000000000000cccd         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_cb56+199
000000000000ccd1         lea        r11, qword [rdx+8]
000000000000ccd5         mov        qword [rdi+8], r11
000000000000ccd9         jmp        loc_cc32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ccde:
000000000000ccde         nop                                                    ; End of unwind block (FDE at 0x11c54)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
000000000000cce0         push       r15                                         ; Begin of unwind block (FDE at 0x11c6c), CODE XREF=vasnprintf+89
000000000000cce2         push       r14
000000000000cce4         lea        rcx, qword [rsi+0x20]
000000000000cce8         push       r13
000000000000ccea         push       r12
000000000000ccec         lea        rax, qword [rdx+0x10]
000000000000ccf0         push       rbp
000000000000ccf1         push       rbx
000000000000ccf2         mov        r14, rsi
000000000000ccf5         mov        r15, rdx
000000000000ccf8         xor        ebx, ebx
000000000000ccfa         mov        r9d, 0x7
000000000000cd00         sub        rsp, 0x58
000000000000cd04         mov        r10d, 0x7
000000000000cd0a         mov        qword [rsi], 0x0
000000000000cd11         mov        qword [rsi+8], rcx
000000000000cd15         mov        qword [rsp+0x88+var_60], rcx
000000000000cd1a         mov        r8, 0xffffffffffffffff
000000000000cd21         mov        qword [rdx], 0x0
000000000000cd28         mov        qword [rsp+0x88+var_80], rax
000000000000cd2d         mov        qword [rdx+8], rax
000000000000cd31         mov        qword [rsp+0x88+var_70], 0x0
000000000000cd3a         mov        qword [rsp+0x88+var_78], 0x0
000000000000cd43         mov        qword [rsp+0x88+var_68], 0x0
000000000000cd4c         jmp        loc_cd5b
000000000000cd4e         align      16

                     loc_cd50:
000000000000cd50         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
000000000000cd52         lea        rbp, qword [rdi+1]
000000000000cd56         je         loc_cd98

                     loc_cd58:
000000000000cd58         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_cd5b:
000000000000cd5b         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
000000000000cd5e         test       al, al
000000000000cd60         jne        loc_cd50

000000000000cd62         lea        rax, qword [rbx+rbx*4]
000000000000cd66         lea        rax, qword [rbx+rax*2]
000000000000cd6a         mov        qword [rcx+rax*8], rdi
000000000000cd6e         mov        rax, qword [rsp+0x88+var_78]
000000000000cd73         mov        qword [r14+0x10], rax
000000000000cd77         mov        rax, qword [rsp+0x88+var_70]
000000000000cd7c         mov        qword [r14+0x18], rax
000000000000cd80         xor        eax, eax

                     loc_cd82:
000000000000cd82         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
000000000000cd86         pop        rbx
000000000000cd87         pop        rbp
000000000000cd88         pop        r12
000000000000cd8a         pop        r13
000000000000cd8c         pop        r14
000000000000cd8e         pop        r15
000000000000cd90         ret
                        ; endp
000000000000cd91         align      8

                     loc_cd98:
000000000000cd98         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
000000000000cd9c         mov        r13, r8
000000000000cd9f         lea        rax, qword [rbx+rax*2]
000000000000cda3         lea        r12, qword [rcx+rax*8]
000000000000cda7         mov        qword [r12], rdi
000000000000cdab         mov        dword [r12+0x10], 0x0
000000000000cdb4         mov        qword [r12+0x18], 0x0
000000000000cdbd         mov        qword [r12+0x20], 0x0
000000000000cdc6         mov        qword [r12+0x28], r8
000000000000cdcb         mov        qword [r12+0x30], 0x0
000000000000cdd4         mov        qword [r12+0x38], 0x0
000000000000cddd         mov        qword [r12+0x40], r8
000000000000cde2         mov        qword [r12+0x50], r8
000000000000cde7         movzx      ebx, byte [rdi+1]
000000000000cdeb         lea        eax, dword [rbx-0x30]
000000000000cdee         cmp        al, 0x9
000000000000cdf0         ja         loc_ce2e

000000000000cdf2         jmp        loc_d22a
000000000000cdf7         align      512

                     loc_ce00:
000000000000ce00         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
000000000000ce03         je         loc_ce48

000000000000ce05         cmp        bl, 0x2b
000000000000ce08         je         loc_ce50

000000000000ce0a         cmp        bl, 0x20
000000000000ce0d         je         loc_ce60

000000000000ce0f         cmp        bl, 0x23
000000000000ce12         je         loc_ce70

000000000000ce14         cmp        bl, 0x30
000000000000ce17         je         loc_ce80

000000000000ce19         cmp        bl, 0x49
000000000000ce1c         jne        loc_ce90

000000000000ce1e         or         dword [r12+0x10], 0x40
000000000000ce24         nop        dword [rax]

                     loc_ce28:
000000000000ce28         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
000000000000ce2b         mov        rbp, rax

                     loc_ce2e:
000000000000ce2e         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
000000000000ce32         cmp        bl, 0x27
000000000000ce35         mov        rdx, rax
000000000000ce38         jne        loc_ce00

000000000000ce3a         or         dword [r12+0x10], 0x1
000000000000ce40         jmp        loc_ce28
000000000000ce42         align      8

                     loc_ce48:
000000000000ce48         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
000000000000ce4e         jmp        loc_ce28

                     loc_ce50:
000000000000ce50         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
000000000000ce56         jmp        loc_ce28
000000000000ce58         align      32

                     loc_ce60:
000000000000ce60         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
000000000000ce66         jmp        loc_ce28
000000000000ce68         align      16

                     loc_ce70:
000000000000ce70         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
000000000000ce76         jmp        loc_ce28
000000000000ce78         align      128

                     loc_ce80:
000000000000ce80         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
000000000000ce86         jmp        loc_ce28
000000000000ce88         align      16

                     loc_ce90:
000000000000ce90         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
000000000000ce93         je         loc_d049

000000000000ce99         lea        ecx, dword [rbx-0x30]
000000000000ce9c         cmp        cl, 0x9
000000000000ce9f         jbe        loc_d2b7

                     loc_cea5:
000000000000cea5         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
000000000000cea8         je         loc_d17f

                     loc_ceae:
000000000000ceae         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
000000000000ceb0         mov        esi, 0x1
000000000000ceb5         jmp        loc_cee7
000000000000ceb7         align      64

                     loc_cec0:
000000000000cec0         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
000000000000cec3         je         loc_cf00

000000000000cec5         cmp        bl, 0x6c
000000000000cec8         je         loc_cee0

000000000000ceca         cmp        bl, 0x6a
000000000000cecd         je         loc_cee0

000000000000cecf         mov        edx, ebx
000000000000ced1         and        edx, 0xffffffdf
000000000000ced4         cmp        dl, 0x5a
000000000000ced7         je         loc_cee0

000000000000ced9         cmp        bl, 0x74
000000000000cedc         jne        loc_cf08

000000000000cede         nop

                     loc_cee0:
000000000000cee0         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_cee3:
000000000000cee3         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_cee7:
000000000000cee7         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
000000000000ceeb         cmp        bl, 0x68
000000000000ceee         jne        loc_cec0

000000000000cef0         mov        ecx, eax
000000000000cef2         mov        edx, esi
000000000000cef4         and        ecx, 0x1
000000000000cef7         shl        edx, cl
000000000000cef9         or         eax, edx
000000000000cefb         jmp        loc_cee3
000000000000cefd         align      256

                     loc_cf00:
000000000000cf00         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
000000000000cf03         jmp        loc_cee3
000000000000cf05         align      8

                     loc_cf08:
000000000000cf08         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
000000000000cf0b         cmp        dl, 0x53
000000000000cf0e         ja         loc_d52b

000000000000cf14         lea        rcx, qword [switch_table_100ac]             ; switch_table_100ac
000000000000cf1b         movzx      edx, dl
000000000000cf1e         movsxd     rdx, dword [rcx+rdx*4]
000000000000cf22         add        rdx, rcx
000000000000cf25         jmp        rdx                                         ; switch statement using table at 0x100ac, with 84 cases, 0xcf27,0xcf9b,0xd3dc,0xd428,0xd43b,0xd488,0xd49b,0xd4bc,0xd4cc,0xd520,0xd52b

                     loc_cf27:
000000000000cf27         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
000000000000cf2d         mov        ebx, 0x73
000000000000cf32         nop        word [rax+rax]

                     loc_cf38:
000000000000cf38         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
000000000000cf3c         je         loc_d5f7

000000000000cf42         mov        qword [r12+0x50], r13

                     loc_cf47:
000000000000cf47         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
000000000000cf4a         mov        rcx, qword [r15+8]
000000000000cf4e         jbe        loc_d570

                     loc_cf54:
000000000000cf54         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
000000000000cf57         mov        rdx, rax
000000000000cf5a         shl        rdx, 0x5
000000000000cf5e         add        rdx, rcx
000000000000cf61         cmp        rax, r13
000000000000cf64         ja         loc_cf86

000000000000cf66         nop        word [cs:rax+rax]

                     loc_cf70:
000000000000cf70         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
000000000000cf74         mov        dword [rdx], 0x0
000000000000cf7a         add        rdx, 0x20
000000000000cf7e         cmp        rax, r13
000000000000cf81         jbe        loc_cf70

000000000000cf83         mov        qword [r15], rax

                     loc_cf86:
000000000000cf86         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
000000000000cf8a         lea        rax, qword [rcx+r13]
000000000000cf8e         mov        edx, dword [rax]
000000000000cf90         test       edx, edx
000000000000cf92         jne        loc_d563

000000000000cf98         mov        dword [rax], r11d

                     loc_cf9b:
000000000000cf9b         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
000000000000cfa0         mov        rax, qword [r14]
000000000000cfa3         mov        qword [r12+8], rbp
000000000000cfa8         lea        rbx, qword [rax+1]
000000000000cfac         cmp        r10, rbx
000000000000cfaf         mov        qword [r14], rbx
000000000000cfb2         ja         loc_d040

000000000000cfb8         test       r10, r10
000000000000cfbb         js         loc_d967

000000000000cfc1         add        r10, r10
000000000000cfc4         movabs     rax, 0x2e8ba2e8ba2e8ba
000000000000cfce         cmp        r10, rax
000000000000cfd1         ja         loc_d967

000000000000cfd7         lea        rax, qword [r10+r10*4]
000000000000cfdb         mov        rdi, qword [r14+8]
000000000000cfdf         cmp        qword [rsp+0x88+var_60], rdi
000000000000cfe4         mov        qword [rsp+0x88+var_48], r9
000000000000cfe9         mov        qword [rsp+0x88+var_50], r10
000000000000cfee         lea        rax, qword [r10+rax*2]
000000000000cff2         mov        qword [rsp+0x88+var_58], r8
000000000000cff7         lea        rsi, qword [rax*8]
000000000000cfff         je         loc_d6bd

000000000000d005         call       j_realloc                                   ; realloc
000000000000d00a         test       rax, rax
000000000000d00d         mov        rcx, rax
000000000000d010         mov        r8, qword [rsp+0x88+var_58]
000000000000d015         mov        r10, qword [rsp+0x88+var_50]
000000000000d01a         mov        r9, qword [rsp+0x88+var_48]
000000000000d01f         je         loc_d967

000000000000d025         mov        rax, qword [rsp+0x88+var_60]
000000000000d02a         cmp        rax, qword [r14+8]
000000000000d02e         mov        rbx, qword [r14]
000000000000d031         je         loc_d6e0

                     loc_d037:
000000000000d037         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
000000000000d03b         jmp        loc_cd58

                     loc_d040:
000000000000d040         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
000000000000d044         jmp        loc_cd58

                     loc_d049:
000000000000d049         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
000000000000d04e         mov        ecx, 0x1
000000000000d053         mov        qword [r12+0x18], rbp
000000000000d058         mov        qword [r12+0x20], rax
000000000000d05d         test       rsi, rsi
000000000000d060         cmovne     rcx, rsi
000000000000d064         mov        qword [rsp+0x88+var_78], rcx
000000000000d069         movzx      ecx, byte [rbp+1]
000000000000d06d         lea        esi, dword [rcx-0x30]
000000000000d070         cmp        sil, 0x9
000000000000d074         jbe        loc_d355

                     loc_d07a:
000000000000d07a         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
000000000000d07f         cmp        rsi, 0xffffffffffffffff
000000000000d083         lea        rdx, qword [rsi+1]
000000000000d087         mov        qword [r12+0x28], rsi
000000000000d08c         je         loc_d52b

000000000000d092         mov        rbx, qword [rsp+0x88+var_68]
000000000000d097         mov        rbp, rax
000000000000d09a         mov        qword [rsp+0x88+var_68], rdx

                     loc_d09f:
000000000000d09f         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
000000000000d0a2         mov        rcx, qword [r15+8]
000000000000d0a6         ja         loc_d722

000000000000d0ac         add        r9, r9
000000000000d0af         lea        rax, qword [rbx+1]
000000000000d0b3         cmp        r9, rbx
000000000000d0b6         cmovbe     r9, rax
000000000000d0ba         movabs     rax, 0x7ffffffffffffff
000000000000d0c4         cmp        r9, rax
000000000000d0c7         ja         loc_d96b

000000000000d0cd         mov        rsi, r9
000000000000d0d0         mov        qword [rsp+0x88+var_48], r9
000000000000d0d5         mov        qword [rsp+0x88+var_50], r10
000000000000d0da         shl        rsi, 0x5
000000000000d0de         cmp        qword [rsp+0x88+var_80], rcx
000000000000d0e3         mov        qword [rsp+0x88+var_58], r8
000000000000d0e8         je         loc_d801

000000000000d0ee         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000d0f1         call       j_realloc                                   ; realloc
000000000000d0f6         mov        rdx, qword [r15+8]
000000000000d0fa         mov        r8, qword [rsp+0x88+var_58]
000000000000d0ff         mov        rcx, rax
000000000000d102         mov        r10, qword [rsp+0x88+var_50]
000000000000d107         mov        r9, qword [rsp+0x88+var_48]

                     loc_d10c:
000000000000d10c         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
000000000000d10f         je         loc_d9c7

000000000000d115         cmp        qword [rsp+0x88+var_80], rdx
000000000000d11a         mov        rax, qword [r15]
000000000000d11d         je         loc_d8db

                     loc_d123:
000000000000d123         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_d127:
000000000000d127         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
000000000000d12a         shl        rdx, 0x5
000000000000d12e         add        rdx, rcx
000000000000d131         cmp        rax, rbx
000000000000d134         ja         loc_d156

000000000000d136         nop        word [cs:rax+rax]

                     loc_d140:
000000000000d140         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
000000000000d144         mov        dword [rdx], 0x0
000000000000d14a         add        rdx, 0x20
000000000000d14e         cmp        rax, rbx
000000000000d151         jbe        loc_d140

000000000000d153         mov        qword [r15], rax

                     loc_d156:
000000000000d156         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
000000000000d15a         lea        rax, qword [rcx+rbx]
000000000000d15e         mov        edx, dword [rax]
000000000000d160         test       edx, edx
000000000000d162         jne        loc_d63b

000000000000d168         mov        dword [rax], 0x5
000000000000d16e         movzx      ebx, byte [rbp]
000000000000d172         lea        rdx, qword [rbp+1]
000000000000d176         cmp        bl, 0x2e
000000000000d179         jne        loc_ceae

                     loc_d17f:
000000000000d17f         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
000000000000d183         mov        qword [r12+0x30], rbp
000000000000d188         jne        loc_d30e

000000000000d18e         mov        rsi, qword [rsp+0x88+var_70]
000000000000d193         lea        r11, qword [rbp+2]
000000000000d197         mov        eax, 0x2
000000000000d19c         mov        qword [r12+0x38], r11
000000000000d1a1         cmp        rsi, 0x2
000000000000d1a5         cmovae     rax, rsi
000000000000d1a9         mov        qword [rsp+0x88+var_70], rax
000000000000d1ae         movsx      eax, byte [rbp+2]
000000000000d1b2         lea        edx, dword [rax-0x30]
000000000000d1b5         cmp        dl, 0x9
000000000000d1b8         jbe        loc_d84c

                     loc_d1be:
000000000000d1be         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
000000000000d1c3         cmp        rbx, 0xffffffffffffffff
000000000000d1c7         je         loc_d825

                     loc_d1cd:
000000000000d1cd         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
000000000000d1d0         mov        rcx, qword [r15+8]
000000000000d1d4         jbe        loc_d73f

000000000000d1da         mov        rax, qword [r15]

                     loc_d1dd:
000000000000d1dd         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
000000000000d1e0         shl        rdx, 0x5
000000000000d1e4         add        rdx, rcx
000000000000d1e7         cmp        rax, rbx
000000000000d1ea         ja         loc_d206

000000000000d1ec         nop        dword [rax]

                     loc_d1f0:
000000000000d1f0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
000000000000d1f4         mov        dword [rdx], 0x0
000000000000d1fa         add        rdx, 0x20
000000000000d1fe         cmp        rax, rbx
000000000000d201         jbe        loc_d1f0

000000000000d203         mov        qword [r15], rax

                     loc_d206:
000000000000d206         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
000000000000d20a         lea        rax, qword [rcx+rbx]
000000000000d20e         mov        edx, dword [rax]
000000000000d210         test       edx, edx
000000000000d212         jne        loc_d72a

000000000000d218         mov        dword [rax], 0x5
000000000000d21e         mov        rbp, r11
000000000000d221         movzx      ebx, byte [r11]
000000000000d225         jmp        loc_ceae

                     loc_d22a:
000000000000d22a         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
000000000000d22d         nop        dword [rax]

                     loc_d230:
000000000000d230         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
000000000000d234         movzx      edx, byte [rax]
000000000000d237         lea        ecx, dword [rdx-0x30]
000000000000d23a         cmp        cl, 0x9
000000000000d23d         jbe        loc_d230

000000000000d23f         cmp        dl, 0x24
000000000000d242         mov        r13, r8
000000000000d245         jne        loc_ce2e

000000000000d24b         xor        edx, edx

                     loc_d24d:
000000000000d24d         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
000000000000d250         movabs     rdi, 0x1999999999999999
000000000000d25a         mov        rsi, r8
000000000000d25d         sub        eax, 0x30
000000000000d260         cmp        rdx, rdi
000000000000d263         cdqe
000000000000d265         ja         loc_d26e

000000000000d267         lea        rsi, qword [rdx+rdx*4]
000000000000d26b         add        rsi, rsi

                     loc_d26e:
000000000000d26e         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_d271:
000000000000d271         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
000000000000d274         movzx      ebx, byte [rbp+1]
000000000000d278         setb       sil
000000000000d27c         add        rbp, 0x1
000000000000d280         mov        rdx, rax
000000000000d283         movzx      esi, sil
000000000000d287         test       rsi, rsi
000000000000d28a         lea        edi, dword [rbx-0x30]
000000000000d28d         jne        loc_d61e

000000000000d293         cmp        dil, 0x9
000000000000d297         jbe        loc_d24d

000000000000d299         mov        r13, rax
000000000000d29c         sub        r13, 0x1
000000000000d2a0         cmp        r13, 0xfffffffffffffffd
000000000000d2a4         ja         loc_d52b

000000000000d2aa         lea        rbp, qword [rcx+2]
000000000000d2ae         movzx      ebx, byte [rcx+2]
000000000000d2b2         jmp        loc_ce2e

                     loc_d2b7:
000000000000d2b7         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
000000000000d2bc         movzx      edi, byte [rbp]
000000000000d2c0         mov        rsi, rbp
000000000000d2c3         lea        ecx, dword [rdi-0x30]
000000000000d2c6         cmp        cl, 0x9
000000000000d2c9         jbe        loc_d2d7

000000000000d2cb         jmp        loc_d300
000000000000d2cd         align      16

                     loc_d2d0:
000000000000d2d0         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
000000000000d2d3         add        rax, 0x1

                     loc_d2d7:
000000000000d2d7         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
000000000000d2da         lea        edx, dword [rdi-0x30]
000000000000d2dd         cmp        dl, 0x9
000000000000d2e0         jbe        loc_d2d0

000000000000d2e2         mov        rcx, rax
000000000000d2e5         lea        rdx, qword [rbp+2]
000000000000d2e9         mov        rbp, rax
000000000000d2ec         sub        rcx, rsi
000000000000d2ef         mov        rsi, qword [rsp+0x88+var_78]
000000000000d2f4         cmp        rsi, rcx
000000000000d2f7         cmovae     rcx, rsi
000000000000d2fb         mov        qword [rsp+0x88+var_78], rcx

                     loc_d300:
000000000000d300         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
000000000000d305         movzx      ebx, byte [rbp]
000000000000d309         jmp        loc_cea5

                     loc_d30e:
000000000000d30e         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
000000000000d312         sub        eax, 0x30
000000000000d315         cmp        al, 0x9
000000000000d317         ja         loc_d32e

000000000000d319         nop        dword [rax]

                     loc_d320:
000000000000d320         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
000000000000d324         movzx      eax, byte [rdx]
000000000000d327         sub        eax, 0x30
000000000000d32a         cmp        al, 0x9
000000000000d32c         jbe        loc_d320

                     loc_d32e:
000000000000d32e         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
000000000000d333         mov        rax, rdx
000000000000d336         mov        qword [r12+0x38], rdx
000000000000d33b         sub        rax, rbp
000000000000d33e         movzx      ebx, byte [rdx]
000000000000d341         mov        rbp, rdx
000000000000d344         cmp        rsi, rax
000000000000d347         cmovae     rax, rsi
000000000000d34b         mov        qword [rsp+0x88+var_70], rax
000000000000d350         jmp        loc_ceae

                     loc_d355:
000000000000d355         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_d358:
000000000000d358         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
000000000000d35c         movzx      edi, byte [rsi]
000000000000d35f         lea        r11d, dword [rdi-0x30]
000000000000d363         cmp        r11b, 0x9
000000000000d367         jbe        loc_d358

000000000000d369         cmp        dil, 0x24
000000000000d36d         jne        loc_d07a

000000000000d373         xor        esi, esi

                     loc_d375:
000000000000d375         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
000000000000d378         movabs     rdi, 0x1999999999999999
000000000000d382         mov        rcx, r8
000000000000d385         sub        eax, 0x30
000000000000d388         cmp        rsi, rdi
000000000000d38b         cdqe
000000000000d38d         ja         loc_d396

000000000000d38f         lea        rcx, qword [rsi+rsi*4]
000000000000d393         add        rcx, rcx

                     loc_d396:
000000000000d396         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_d399:
000000000000d399         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
000000000000d39c         add        rax, rcx
000000000000d39f         movzx      ecx, byte [rdx+1]
000000000000d3a3         setb       r11b
000000000000d3a7         add        rdx, 0x1
000000000000d3ab         mov        rsi, rax
000000000000d3ae         test       r11, r11
000000000000d3b1         lea        edi, dword [rcx-0x30]
000000000000d3b4         jne        loc_d8be

000000000000d3ba         cmp        dil, 0x9
000000000000d3be         jbe        loc_d375

000000000000d3c0         lea        rbx, qword [rax-1]
000000000000d3c4         cmp        rbx, 0xfffffffffffffffd
000000000000d3c8         ja         loc_d52b

000000000000d3ce         mov        qword [r12+0x28], rbx
000000000000d3d3         add        rbp, 0x2
000000000000d3d7         jmp        loc_d09f

                     loc_d3dc:
000000000000d3dc         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
000000000000d3df         mov        r11d, 0x16
000000000000d3e5         jg         loc_cf38

000000000000d3eb         test       al, 0x4
000000000000d3ed         jne        loc_cf38

000000000000d3f3         cmp        eax, 0x7
000000000000d3f6         mov        r11d, 0x15
000000000000d3fc         jg         loc_cf38

000000000000d402         test       al, 0x2
000000000000d404         mov        r11d, 0x12
000000000000d40a         jne        loc_cf38

000000000000d410         xor        r11d, r11d
000000000000d413         test       al, 0x1
000000000000d415         sete       r11b
000000000000d419         add        r11d, 0x13
000000000000d41d         jmp        loc_cf38
000000000000d422         align      8

                     loc_d428:
000000000000d428         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
000000000000d42b         cmp        eax, 0x7
000000000000d42e         setg       r11b
000000000000d432         add        r11d, 0xd
000000000000d436         jmp        loc_cf38

                     loc_d43b:
000000000000d43b         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
000000000000d43e         mov        r11d, 0x9
000000000000d444         jg         loc_cf38

000000000000d44a         test       al, 0x4
000000000000d44c         jne        loc_cf38

000000000000d452         cmp        eax, 0x7
000000000000d455         mov        r11d, 0x7
000000000000d45b         jg         loc_cf38

000000000000d461         test       al, 0x2
000000000000d463         mov        r11d, 0x1
000000000000d469         jne        loc_cf38

000000000000d46f         and        eax, 0x1
000000000000d472         cmp        eax, 0x1
000000000000d475         sbb        r11d, r11d
000000000000d478         and        r11d, 0x2
000000000000d47c         add        r11d, 0x3
000000000000d480         jmp        loc_cf38
000000000000d485         align      8

                     loc_d488:
000000000000d488         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
000000000000d48b         cmp        eax, 0x7
000000000000d48e         setg       r11b
000000000000d492         add        r11d, 0xf
000000000000d496         jmp        loc_cf38

                     loc_d49b:
000000000000d49b         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
000000000000d49e         mov        r11d, 0xc
000000000000d4a4         jg         loc_cf38

000000000000d4aa         xor        r11d, r11d
000000000000d4ad         test       al, 0x4
000000000000d4af         setne      r11b
000000000000d4b3         add        r11d, 0xb
000000000000d4b7         jmp        loc_cf38

                     loc_d4bc:
000000000000d4bc         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
000000000000d4c2         mov        ebx, 0x63
000000000000d4c7         jmp        loc_cf38

                     loc_d4cc:
000000000000d4cc         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
000000000000d4cf         mov        r11d, 0xa
000000000000d4d5         jg         loc_cf38

000000000000d4db         test       al, 0x4
000000000000d4dd         jne        loc_cf38

000000000000d4e3         cmp        eax, 0x7
000000000000d4e6         mov        r11d, 0x8
000000000000d4ec         jg         loc_cf38

000000000000d4f2         test       al, 0x2
000000000000d4f4         mov        r11d, 0x2
000000000000d4fa         jne        loc_cf38

000000000000d500         and        eax, 0x1
000000000000d503         cmp        eax, 0x1
000000000000d506         sbb        r11d, r11d
000000000000d509         and        r11d, 0x2
000000000000d50d         add        r11d, 0x4
000000000000d511         jmp        loc_cf38
000000000000d516         align      32

                     loc_d520:
000000000000d520         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
000000000000d526         jmp        loc_cf38

                     loc_d52b:
000000000000d52b         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_d52f:
000000000000d52f         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
000000000000d534         je         loc_d53e

000000000000d536         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
000000000000d539         call       j_free                                      ; free

                     loc_d53e:
000000000000d53e         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
000000000000d542         cmp        qword [rsp+0x88+var_60], rdi
000000000000d547         je         loc_d54e

000000000000d549         call       j_free                                      ; free

                     loc_d54e:
000000000000d54e         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
000000000000d553         mov        dword [rax], 0x16
000000000000d559         mov        eax, 0xffffffff
000000000000d55e         jmp        loc_cd82

                     loc_d563:
000000000000d563         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
000000000000d566         je         loc_cf9b

000000000000d56c         jmp        loc_d52f
000000000000d56e         align      16

                     loc_d570:
000000000000d570         add        r9, r9                                      ; CODE XREF=printf_parse+622
000000000000d573         lea        rax, qword [r13+1]
000000000000d577         cmp        r9, r13
000000000000d57a         cmovbe     r9, rax
000000000000d57e         movabs     rax, 0x7ffffffffffffff
000000000000d588         cmp        r9, rax
000000000000d58b         ja         loc_d96b

000000000000d591         mov        rsi, r9
000000000000d594         mov        qword [rsp+0x88+var_40], r9
000000000000d599         mov        qword [rsp+0x88+var_48], r10
000000000000d59e         shl        rsi, 0x5
000000000000d5a2         cmp        qword [rsp+0x88+var_80], rcx
000000000000d5a7         mov        qword [rsp+0x88+var_50], r8
000000000000d5ac         mov        dword [rsp+0x88+var_58], r11d
000000000000d5b1         je         loc_d651

000000000000d5b7         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000d5ba         call       j_realloc                                   ; realloc
000000000000d5bf         test       rax, rax
000000000000d5c2         mov        rcx, rax
000000000000d5c5         mov        r11d, dword [rsp+0x88+var_58]
000000000000d5ca         mov        r8, qword [rsp+0x88+var_50]
000000000000d5cf         mov        r10, qword [rsp+0x88+var_48]
000000000000d5d4         mov        r9, qword [rsp+0x88+var_40]
000000000000d5d9         je         loc_d967

000000000000d5df         mov        rax, qword [rsp+0x88+var_80]
000000000000d5e4         cmp        rax, qword [r15+8]
000000000000d5e8         je         loc_d679

                     loc_d5ee:
000000000000d5ee         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
000000000000d5f2         jmp        loc_cf54

                     loc_d5f7:
000000000000d5f7         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
000000000000d5fc         cmp        rsi, 0xffffffffffffffff
000000000000d600         lea        rax, qword [rsi+1]
000000000000d604         mov        qword [r12+0x50], rsi
000000000000d609         je         loc_d52b

000000000000d60f         mov        r13, qword [rsp+0x88+var_68]
000000000000d614         mov        qword [rsp+0x88+var_68], rax
000000000000d619         jmp        loc_cf47

                     loc_d61e:
000000000000d61e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
000000000000d622         ja         loc_d52b

000000000000d628         movsx      eax, bl
000000000000d62b         mov        rsi, r8
000000000000d62e         mov        rcx, rbp
000000000000d631         sub        eax, 0x30
000000000000d634         cdqe
000000000000d636         jmp        loc_d271

                     loc_d63b:
000000000000d63b         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
000000000000d63e         jne        loc_d52f

000000000000d644         movzx      ebx, byte [rbp]
000000000000d648         lea        rdx, qword [rbp+1]
000000000000d64c         jmp        loc_cea5

                     loc_d651:
000000000000d651         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
000000000000d654         call       j_malloc                                    ; malloc
000000000000d659         test       rax, rax
000000000000d65c         mov        rcx, rax
000000000000d65f         mov        r11d, dword [rsp+0x88+var_58]
000000000000d664         mov        r8, qword [rsp+0x88+var_50]
000000000000d669         mov        r10, qword [rsp+0x88+var_48]
000000000000d66e         mov        r9, qword [rsp+0x88+var_40]
000000000000d673         je         loc_d7dc

                     loc_d679:
000000000000d679         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
000000000000d67c         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
000000000000d681         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000d684         mov        qword [rsp+0x88+var_40], r9
000000000000d689         mov        qword [rsp+0x88+var_48], r10
000000000000d68e         mov        qword [rsp+0x88+var_50], r8
000000000000d693         mov        dword [rsp+0x88+var_58], r11d
000000000000d698         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
000000000000d69c         call       j_memcpy                                    ; memcpy
000000000000d6a1         mov        r9, qword [rsp+0x88+var_40]
000000000000d6a6         mov        r10, qword [rsp+0x88+var_48]
000000000000d6ab         mov        rcx, rax
000000000000d6ae         mov        r8, qword [rsp+0x88+var_50]
000000000000d6b3         mov        r11d, dword [rsp+0x88+var_58]
000000000000d6b8         jmp        loc_d5ee

                     loc_d6bd:
000000000000d6bd         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
000000000000d6c0         call       j_malloc                                    ; malloc
000000000000d6c5         test       rax, rax
000000000000d6c8         mov        rcx, rax
000000000000d6cb         mov        r8, qword [rsp+0x88+var_58]
000000000000d6d0         mov        r10, qword [rsp+0x88+var_50]
000000000000d6d5         mov        r9, qword [rsp+0x88+var_48]
000000000000d6da         je         loc_d7c9

                     loc_d6e0:
000000000000d6e0         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
000000000000d6e4         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
000000000000d6e9         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000d6ec         mov        qword [rsp+0x88+var_48], r9
000000000000d6f1         mov        qword [rsp+0x88+var_50], r10
000000000000d6f6         lea        rdx, qword [rbx+rax*2]
000000000000d6fa         mov        qword [rsp+0x88+var_58], r8
000000000000d6ff         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000d703         call       j_memcpy                                    ; memcpy
000000000000d708         mov        rbx, qword [r14]
000000000000d70b         mov        rcx, rax
000000000000d70e         mov        r9, qword [rsp+0x88+var_48]
000000000000d713         mov        r10, qword [rsp+0x88+var_50]
000000000000d718         mov        r8, qword [rsp+0x88+var_58]
000000000000d71d         jmp        loc_d037

                     loc_d722:
000000000000d722         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
000000000000d725         jmp        loc_d127

                     loc_d72a:
000000000000d72a         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
000000000000d72d         jne        loc_d52f

000000000000d733         movzx      ebx, byte [r11]
000000000000d737         mov        rbp, r11
000000000000d73a         jmp        loc_ceae

                     loc_d73f:
000000000000d73f         add        r9, r9                                      ; CODE XREF=printf_parse+1268
000000000000d742         lea        rax, qword [rbx+1]
000000000000d746         cmp        r9, rbx
000000000000d749         cmovbe     r9, rax
000000000000d74d         movabs     rax, 0x7ffffffffffffff
000000000000d757         cmp        r9, rax
000000000000d75a         ja         loc_d96b

000000000000d760         mov        rsi, r9
000000000000d763         mov        qword [rsp+0x88+var_40], r9
000000000000d768         mov        qword [rsp+0x88+var_48], r10
000000000000d76d         shl        rsi, 0x5
000000000000d771         cmp        qword [rsp+0x88+var_80], rcx
000000000000d776         mov        qword [rsp+0x88+var_50], r8
000000000000d77b         mov        qword [rsp+0x88+var_58], r11
000000000000d780         je         loc_d93e

000000000000d786         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000d789         call       j_realloc                                   ; realloc
000000000000d78e         mov        rdx, qword [r15+8]
000000000000d792         mov        r11, qword [rsp+0x88+var_58]
000000000000d797         mov        rcx, rax
000000000000d79a         mov        r8, qword [rsp+0x88+var_50]
000000000000d79f         mov        r10, qword [rsp+0x88+var_48]
000000000000d7a4         mov        r9, qword [rsp+0x88+var_40]

                     loc_d7a9:
000000000000d7a9         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
000000000000d7ac         je         loc_d9c7

000000000000d7b2         cmp        qword [rsp+0x88+var_80], rdx
000000000000d7b7         mov        rax, qword [r15]
000000000000d7ba         je         loc_d980

                     loc_d7c0:
000000000000d7c0         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
000000000000d7c4         jmp        loc_d1dd

                     loc_d7c9:
000000000000d7c9         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
000000000000d7cd         cmp        qword [rsp+0x88+var_80], rcx
000000000000d7d2         je         loc_d7ec

                     loc_d7d4:
000000000000d7d4         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
000000000000d7d7         call       j_free                                      ; free

                     loc_d7dc:
000000000000d7dc         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
000000000000d7e0         cmp        qword [rsp+0x88+var_60], rdi
000000000000d7e5         je         loc_d7ec

000000000000d7e7         call       j_free                                      ; free

                     loc_d7ec:
000000000000d7ec         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
000000000000d7f1         mov        dword [rax], 0xc
000000000000d7f7         mov        eax, 0xffffffff
000000000000d7fc         jmp        loc_cd82

                     loc_d801:
000000000000d801         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
000000000000d804         call       j_malloc                                    ; malloc
000000000000d809         mov        rdx, qword [rsp+0x88+var_80]
000000000000d80e         mov        rcx, rax
000000000000d811         mov        r9, qword [rsp+0x88+var_48]
000000000000d816         mov        r10, qword [rsp+0x88+var_50]
000000000000d81b         mov        r8, qword [rsp+0x88+var_58]
000000000000d820         jmp        loc_d10c

                     loc_d825:
000000000000d825         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
000000000000d82a         cmp        rsi, 0xffffffffffffffff
000000000000d82e         lea        rax, qword [rsi+1]
000000000000d832         mov        qword [r12+0x40], rsi
000000000000d837         je         loc_d52b

000000000000d83d         mov        rbx, qword [rsp+0x88+var_68]
000000000000d842         mov        qword [rsp+0x88+var_68], rax
000000000000d847         jmp        loc_d1cd

                     loc_d84c:
000000000000d84c         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_d84f:
000000000000d84f         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
000000000000d853         movzx      ecx, byte [rdx]
000000000000d856         lea        esi, dword [rcx-0x30]
000000000000d859         cmp        sil, 0x9
000000000000d85d         jbe        loc_d84f

000000000000d85f         cmp        cl, 0x24
000000000000d862         jne        loc_d1be

000000000000d868         xor        ecx, ecx

                     loc_d86a:
000000000000d86a         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
000000000000d874         sub        eax, 0x30
000000000000d877         mov        rdx, r8
000000000000d87a         cmp        rcx, rsi
000000000000d87d         cdqe
000000000000d87f         ja         loc_d888

000000000000d881         lea        rdx, qword [rcx+rcx*4]
000000000000d885         add        rdx, rdx

                     loc_d888:
000000000000d888         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_d88b:
000000000000d88b         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
000000000000d88d         add        rdx, rax
000000000000d890         movsx      eax, byte [r11+1]
000000000000d895         setb       bl
000000000000d898         add        r11, 0x1
000000000000d89c         mov        rcx, rdx
000000000000d89f         test       rbx, rbx
000000000000d8a2         lea        edi, dword [rax-0x30]
000000000000d8a5         je         loc_d918

000000000000d8a7         cmp        dil, 0x9
000000000000d8ab         ja         loc_d52b

000000000000d8b1         sub        eax, 0x30
000000000000d8b4         mov        rdx, r8
000000000000d8b7         mov        rsi, r11
000000000000d8ba         cdqe
000000000000d8bc         jmp        loc_d88b

                     loc_d8be:
000000000000d8be         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
000000000000d8c2         ja         loc_d52b

000000000000d8c8         movsx      eax, cl
000000000000d8cb         mov        rbp, rdx
000000000000d8ce         mov        rcx, r8
000000000000d8d1         sub        eax, 0x30
000000000000d8d4         cdqe
000000000000d8d6         jmp        loc_d399

                     loc_d8db:
000000000000d8db         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
000000000000d8e0         shl        rax, 0x5
000000000000d8e4         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000d8e7         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000d8ea         mov        qword [rsp+0x88+var_48], r9
000000000000d8ef         mov        qword [rsp+0x88+var_50], r10
000000000000d8f4         mov        qword [rsp+0x88+var_58], r8
000000000000d8f9         call       j_memcpy                                    ; memcpy
000000000000d8fe         mov        r9, qword [rsp+0x88+var_48]
000000000000d903         mov        rcx, rax
000000000000d906         mov        r10, qword [rsp+0x88+var_50]
000000000000d90b         mov        rax, qword [r15]
000000000000d90e         mov        r8, qword [rsp+0x88+var_58]
000000000000d913         jmp        loc_d123

                     loc_d918:
000000000000d918         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
000000000000d91c         jbe        loc_d86a

000000000000d922         lea        rbx, qword [rdx-1]
000000000000d926         cmp        rbx, 0xfffffffffffffffd
000000000000d92a         ja         loc_d52b

000000000000d930         mov        qword [r12+0x40], rbx
000000000000d935         lea        r11, qword [rsi+2]
000000000000d939         jmp        loc_d1cd

                     loc_d93e:
000000000000d93e         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
000000000000d941         call       j_malloc                                    ; malloc
000000000000d946         mov        rdx, qword [rsp+0x88+var_80]
000000000000d94b         mov        rcx, rax
000000000000d94e         mov        r9, qword [rsp+0x88+var_40]
000000000000d953         mov        r10, qword [rsp+0x88+var_48]
000000000000d958         mov        r8, qword [rsp+0x88+var_50]
000000000000d95d         mov        r11, qword [rsp+0x88+var_58]
000000000000d962         jmp        loc_d7a9

                     loc_d967:
000000000000d967         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_d96b:
000000000000d96b         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
000000000000d970         jne        loc_d7d4

000000000000d976         jmp        loc_d7dc
000000000000d97b         align      128

                     loc_d980:
000000000000d980         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
000000000000d985         shl        rax, 0x5
000000000000d989         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000d98c         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000d98f         mov        qword [rsp+0x88+var_40], r9
000000000000d994         mov        qword [rsp+0x88+var_48], r10
000000000000d999         mov        qword [rsp+0x88+var_50], r8
000000000000d99e         mov        qword [rsp+0x88+var_58], r11
000000000000d9a3         call       j_memcpy                                    ; memcpy
000000000000d9a8         mov        r9, qword [rsp+0x88+var_40]
000000000000d9ad         mov        rcx, rax
000000000000d9b0         mov        r10, qword [rsp+0x88+var_48]
000000000000d9b5         mov        rax, qword [r15]
000000000000d9b8         mov        r8, qword [rsp+0x88+var_50]
000000000000d9bd         mov        r11, qword [rsp+0x88+var_58]
000000000000d9c2         jmp        loc_d7c0

                     loc_d9c7:
000000000000d9c7         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
000000000000d9ca         jmp        loc_d96b
000000000000d9cc         align      16                                          ; End of unwind block (FDE at 0x11c6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000d9d0         push       r15                                         ; Begin of unwind block (FDE at 0x11cbc), DATA XREF=_start+22
000000000000d9d2         push       r14
000000000000d9d4         mov        r15, rdx
000000000000d9d7         push       r13
000000000000d9d9         push       r12
000000000000d9db         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000d9e2         push       rbp
000000000000d9e3         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000d9ea         push       rbx
000000000000d9eb         mov        r13d, edi
000000000000d9ee         mov        r14, rsi
000000000000d9f1         sub        rbp, r12
000000000000d9f4         sub        rsp, 0x8
000000000000d9f8         sar        rbp, 0x3
000000000000d9fc         call       _init                                       ; _init
000000000000da01         test       rbp, rbp
000000000000da04         je         loc_da26

000000000000da06         xor        ebx, ebx
000000000000da08         nop        dword [rax+rax]

                     loc_da10:
000000000000da10         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000da13         mov        rsi, r14
000000000000da16         mov        edi, r13d
000000000000da19         call       qword [r12+rbx*8]
000000000000da1d         add        rbx, 0x1
000000000000da21         cmp        rbp, rbx
000000000000da24         jne        loc_da10

                     loc_da26:
000000000000da26         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000da2a         pop        rbx
000000000000da2b         pop        rbp
000000000000da2c         pop        r12
000000000000da2e         pop        r13
000000000000da30         pop        r14
000000000000da32         pop        r15
000000000000da34         ret
                        ; endp
000000000000da35         align      64                                          ; End of unwind block (FDE at 0x11cbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000da40         ret                                                    ; Begin of unwind block (FDE at 0x11d04), DATA XREF=_start+15
                        ; endp
000000000000da42         align      16                                          ; End of unwind block (FDE at 0x11d04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000da50         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x11d1c), __dso_handle, CODE XREF=main+161
000000000000da57         xor        esi, esi
000000000000da59         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000da5e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x11d1c)
000000000000da5f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xda60; 0xda69[ (9 bytes)
        ; File offset : [55904; 55913[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000da60         sub        rsp, 0x8
000000000000da64         add        rsp, 0x8
000000000000da68         ret
                        ; endp
000000000000da69         db  0x00 ; '.'
000000000000da6a         db  0x00 ; '.'
000000000000da6b         db  0x00 ; '.'
000000000000da6c         db  0x00 ; '.'
000000000000da6d         db  0x00 ; '.'
000000000000da6e         db  0x00 ; '.'
000000000000da6f         db  0x00 ; '.'
000000000000da70         db  0x00 ; '.'
000000000000da71         db  0x00 ; '.'
000000000000da72         db  0x00 ; '.'
000000000000da73         db  0x00 ; '.'
000000000000da74         db  0x00 ; '.'
000000000000da75         db  0x00 ; '.'
000000000000da76         db  0x00 ; '.'
000000000000da77         db  0x00 ; '.'
000000000000da78         db  0x00 ; '.'
000000000000da79         db  0x00 ; '.'
000000000000da7a         db  0x00 ; '.'
000000000000da7b         db  0x00 ; '.'
000000000000da7c         db  0x00 ; '.'
000000000000da7d         db  0x00 ; '.'
000000000000da7e         db  0x00 ; '.'
000000000000da7f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xda80; 0x101fc[ (10108 bytes)
        ; File offset : [55936; 66044[ (10108 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000da80         db  0x01 ; '.'
000000000000da81         db  0x00 ; '.'
000000000000da82         db  0x02 ; '.'
000000000000da83         db  0x00 ; '.'
000000000000da84         db  0x6c ; 'l'                                         ; DATA XREF=out_uint_x+5
000000000000da85         db  0x78 ; 'x'
000000000000da86         db  0x00 ; '.'
000000000000da87         db  0x2d ; '-'                                         ; DATA XREF=out_uint_x+12, print_stat+627
000000000000da88         db  0x23 ; '#'
000000000000da89         db  0x30 ; '0'
000000000000da8a         db  0x00 ; '.'
000000000000da8b         db  0x6c ; 'l'                                         ; DATA XREF=out_uint+5
000000000000da8c         db  0x75 ; 'u'
000000000000da8d         db  0x00 ; '.'
000000000000da8e         db  0x27 ; '''                                         ; DATA XREF=out_uint+12
000000000000da8f         db  0x2d ; '-'
000000000000da90         db  0x30 ; '0'
000000000000da91         db  0x00 ; '.'
000000000000da92         db  0x6c ; 'l'                                         ; DATA XREF=out_int+5
000000000000da93         db  0x64 ; 'd'
000000000000da94         db  0x00 ; '.'
                     a0:
000000000000da95         db         "'-+ 0", 0                                  ; DATA XREF=out_int+12, out_epoch_sec.isra.9+520
000000000000da9b         db  0x61 ; 'a'                                         ; DATA XREF=print_statfs+2202
000000000000da9c         db  0x61 ; 'a'
000000000000da9d         db  0x66 ; 'f'
000000000000da9e         db  0x73 ; 's'
000000000000da9f         db  0x00 ; '.'
000000000000daa0         db  0x61 ; 'a'                                         ; DATA XREF=print_statfs+2182
000000000000daa1         db  0x63 ; 'c'
000000000000daa2         db  0x66 ; 'f'
000000000000daa3         db  0x73 ; 's'
000000000000daa4         db  0x00 ; '.'
000000000000daa5         db  0x61 ; 'a'                                         ; DATA XREF=print_statfs+3193
000000000000daa6         db  0x64 ; 'd'
000000000000daa7         db  0x66 ; 'f'
000000000000daa8         db  0x73 ; 's'
000000000000daa9         db  0x00 ; '.'
000000000000daaa         db  0x61 ; 'a'                                         ; DATA XREF=print_statfs+2927
000000000000daab         db  0x66 ; 'f'
000000000000daac         db  0x66 ; 'f'
000000000000daad         db  0x73 ; 's'
000000000000daae         db  0x00 ; '.'
                     aAnoninodeFs:
000000000000daaf         db         "anon-inode FS", 0                          ; DATA XREF=print_statfs+2532
000000000000dabd         db  0x61 ; 'a'                                         ; DATA XREF=print_statfs+1464
000000000000dabe         db  0x75 ; 'u'                                         ; DATA XREF=print_statfs+1026
000000000000dabf         db  0x66 ; 'f'
000000000000dac0         db  0x73 ; 's'
000000000000dac1         db  0x00 ; '.'
                     aAutofs:
000000000000dac2         db         "autofs", 0                                 ; DATA XREF=print_statfs+2992, read_file_system_list+484, read_file_system_list+1191
                     aBalloonkvmfs:
000000000000dac9         db         "balloon-kvm-fs", 0                         ; DATA XREF=print_statfs+1561
000000000000dad8         db  0x62 ; 'b'                                         ; DATA XREF=print_statfs+1975
000000000000dad9         db  0x65 ; 'e'                                         ; DATA XREF=print_statfs+3277
000000000000dada         db  0x66 ; 'f'
000000000000dadb         db  0x73 ; 's'
000000000000dadc         db  0x00 ; '.'
                     aBpffs:
000000000000dadd         db         "bpf_fs", 0                                 ; DATA XREF=print_statfs+1661
                     aBinfmtmisc:
000000000000dae4         db         "binfmt_misc", 0                            ; DATA XREF=print_statfs+2041
                     aBtrfs:
000000000000daf0         db         "btrfs", 0                                  ; DATA XREF=print_statfs+1242
                     aBtrfstest:
000000000000daf6         db         "btrfs_test", 0                             ; DATA XREF=print_statfs+728
000000000000db01         db  0x63 ; 'c'                                         ; DATA XREF=print_statfs+863
000000000000db02         db  0x65 ; 'e'
000000000000db03         db  0x70 ; 'p'
000000000000db04         db  0x68 ; 'h'
000000000000db05         db  0x00 ; '.'
                     aCgroupfs:
000000000000db06         db         "cgroupfs", 0                               ; DATA XREF=print_statfs+1734
                     aCgroup2fs:
000000000000db0f         db         "cgroup2fs", 0                              ; DATA XREF=print_statfs+2597
000000000000db19         db  0x63 ; 'c'                                         ; DATA XREF=print_statfs+2312, read_file_system_list+1961, read_file_system_list+2037
000000000000db1a         db  0x69 ; 'i'
000000000000db1b         db  0x66 ; 'f'
000000000000db1c         db  0x73 ; 's'
000000000000db1d         db  0x00 ; '.'
000000000000db1e         db  0x63 ; 'c'                                         ; DATA XREF=print_statfs+748
000000000000db1f         db  0x6f ; 'o'
000000000000db20         db  0x64 ; 'd'
000000000000db21         db  0x61 ; 'a'
000000000000db22         db  0x00 ; '.'
000000000000db23         db  0x63 ; 'c'                                         ; DATA XREF=print_statfs+1090
000000000000db24         db  0x6f ; 'o'
000000000000db25         db  0x68 ; 'h'
000000000000db26         db  0x00 ; '.'
                     aConfigfs:
000000000000db27         db         "configfs", 0                               ; DATA XREF=print_statfs+1444
000000000000db30         db  0x63 ; 'c'                                         ; DATA XREF=print_statfs+2712
                     aRamfs:
000000000000db31         db         "ramfs", 0                                  ; DATA XREF=print_statfs+3205
                     aCramfswend:
000000000000db37         db         "cramfs-wend", 0                            ; DATA XREF=print_statfs+2021
                     aDaxfs:
000000000000db43         db         "daxfs", 0                                  ; DATA XREF=print_statfs+2577
                     aDebugfs:
000000000000db49         db         "debugfs", 0                                ; DATA XREF=print_statfs+2557, read_file_system_list+806, read_file_system_list+1397
                     aDevpts:
000000000000db51         db         "devpts", 0                                 ; DATA XREF=print_statfs+634, read_file_system_list+836, read_file_system_list+1427
                     aEcryptfs:
000000000000db58         db         "ecryptfs", 0                               ; DATA XREF=print_statfs+1754
                     aEfivarfs:
000000000000db61         db         "efivarfs", 0                               ; DATA XREF=print_statfs+1617
                     aExofs:
000000000000db6a         db         "exofs", 0                                  ; DATA XREF=print_statfs+3253
000000000000db70         db  0x65 ; 'e'                                         ; DATA XREF=print_statfs+2097
000000000000db71         db  0x78 ; 'x'
000000000000db72         db  0x74 ; 't'
000000000000db73         db  0x00 ; '.'
                     aExt2ext3:
000000000000db74         db         "ext2/ext3", 0                              ; DATA XREF=print_statfs+1695
000000000000db7e         db  0x65 ; 'e'                                         ; DATA XREF=print_statfs+2947
000000000000db7f         db  0x78 ; 'x'
000000000000db80         db  0x74 ; 't'
000000000000db81         db  0x32 ; '2'
000000000000db82         db  0x00 ; '.'
000000000000db83         db  0x66 ; 'f'                                         ; DATA XREF=print_statfs+1639
000000000000db84         db  0x32 ; '2'
000000000000db85         db  0x66 ; 'f'
000000000000db86         db  0x73 ; 's'
000000000000db87         db  0x00 ; '.'
000000000000db88         db  0x66 ; 'f'                                         ; DATA XREF=print_statfs+2831
000000000000db89         db  0x61 ; 'a'
000000000000db8a         db  0x74 ; 't'
000000000000db8b         db  0x00 ; '.'
                     aFhgfs:
000000000000db8c         db         "fhgfs", 0                                  ; DATA XREF=print_statfs+1495
                     aFuseblk:
000000000000db92         db         "fuseblk", 0                                ; DATA XREF=print_statfs+3071
                     aFusectl:
000000000000db9a         db         "fusectl", 0                                ; DATA XREF=print_statfs+3265, read_file_system_list+866, read_file_system_list+1457
                     aFutexfs:
000000000000dba2         db         "futexfs", 0                                ; DATA XREF=print_statfs+2492
                     aGfsgfs2:
000000000000dbaa         db         "gfs/gfs2", 0                               ; DATA XREF=print_statfs+2267
000000000000dbb3         db  0x67 ; 'g'                                         ; DATA XREF=print_statfs+244
000000000000dbb4         db  0x70 ; 'p'
000000000000dbb5         db  0x66 ; 'f'
000000000000dbb6         db  0x73 ; 's'
000000000000dbb7         db  0x00 ; '.'
000000000000dbb8         db  0x68 ; 'h'                                         ; DATA XREF=print_statfs+2876
000000000000dbb9         db  0x66 ; 'f'
000000000000dbba         db  0x73 ; 's'
000000000000dbbb         db  0x2b ; '+'
000000000000dbbc         db  0x00 ; '.'
000000000000dbbd         db  0x68 ; 'h'                                         ; DATA XREF=print_statfs+2896
000000000000dbbe         db  0x66 ; 'f'
000000000000dbbf         db  0x73 ; 's'
000000000000dbc0         db  0x78 ; 'x'
000000000000dbc1         db  0x00 ; '.'
                     aHostfs:
000000000000dbc2         db         "hostfs", 0                                 ; DATA XREF=print_statfs+903
000000000000dbc9         db  0x68 ; 'h'                                         ; DATA XREF=print_statfs+2334
000000000000dbca         db  0x70 ; 'p'
000000000000dbcb         db  0x66 ; 'f'
000000000000dbcc         db  0x73 ; 's'
000000000000dbcd         db  0x00 ; '.'
                     aHugetlbfs:
000000000000dbce         db         "hugetlbfs", 0                              ; DATA XREF=print_statfs+1198
                     aInodefs:
000000000000dbd8         db         "inodefs", 0                                ; DATA XREF=print_statfs+3169
                     aIbrix:
000000000000dbe0         db         "ibrix", 0                                  ; DATA XREF=print_statfs+1123
                     aInotifyfs:
000000000000dbe6         db         "inotifyfs", 0                              ; DATA XREF=print_statfs+3133
                     aIsofs:
000000000000dbf0         db         "isofs", 0                                  ; DATA XREF=print_statfs+2857
                     aZsmallocfs:
000000000000dbf6         db         "zsmallocfs", 0                             ; DATA XREF=print_statfs+1000
000000000000dc01         db  0x6a ; 'j'                                         ; DATA XREF=print_statfs+2071
000000000000dc02         db  0x66 ; 'f'
000000000000dc03         db  0x66 ; 'f'
000000000000dc04         db  0x73 ; 's'
000000000000dc05         db  0x00 ; '.'
                     aJffs2:
000000000000dc06         db         "jffs2", 0                                  ; DATA XREF=print_statfs+1329
000000000000dc0c         db  0x6a ; 'j'                                         ; DATA XREF=print_statfs+3043
000000000000dc0d         db  0x66 ; 'f'
000000000000dc0e         db  0x73 ; 's'
000000000000dc0f         db  0x00 ; '.'
                     aKafs:
000000000000dc10         db         "k-afs", 0                                  ; DATA XREF=print_statfs+1945
                     aLogfs:
000000000000dc16         db         "logfs", 0                                  ; DATA XREF=print_statfs+3121
                     aLustre:
000000000000dc1c         db         "lustre", 0                                 ; DATA XREF=print_statfs+2512
000000000000dc23         db  0x6d ; 'm'                                         ; DATA XREF=print_statfs+190
000000000000dc24         db  0x31 ; '1'
000000000000dc25         db  0x66 ; 'f'
000000000000dc26         db  0x73 ; 's'
000000000000dc27         db  0x00 ; '.'
                     aMinix:
000000000000dc28         db         "minix", 0                                  ; DATA XREF=print_statfs+2117
                     aMinix30Char:
000000000000dc2e         db         "minix (30 char.)", 0                       ; DATA XREF=print_statfs+3157
                     aMinixV2:
000000000000dc3f         db         "minix v2", 0                               ; DATA XREF=print_statfs+594
                     aMinixV230Char:
000000000000dc48         db         "minix v2 (30 char.)", 0                    ; DATA XREF=print_statfs+614
                     aMinix3:
000000000000dc5c         db         "minix3", 0                                 ; DATA XREF=print_statfs+1849
                     aMqueue:
000000000000dc63         db         "mqueue", 0                                 ; DATA XREF=print_statfs+1541, read_file_system_list+896, read_file_system_list+1487
                     aMsdos:
000000000000dc6a         db         "msdos", 0                                  ; DATA XREF=print_statfs+1783
                     aNovell:
000000000000dc70         db         "novell", 0                                 ; DATA XREF=print_statfs+1829
000000000000dc77         db  0x6e ; 'n'                                         ; DATA XREF=print_statfs+1905
000000000000dc78         db  0x66 ; 'f'
000000000000dc79         db  0x73 ; 's'
000000000000dc7a         db  0x64 ; 'd'
000000000000dc7b         db  0x00 ; '.'
                     aNilfs:
000000000000dc7c         db         "nilfs", 0                                  ; DATA XREF=print_statfs+568
000000000000dc82         db  0x6e ; 'n'                                         ; DATA XREF=print_statfs+1925
000000000000dc83         db  0x73 ; 's'
000000000000dc84         db  0x66 ; 'f'
000000000000dc85         db  0x73 ; 's'
000000000000dc86         db  0x00 ; '.'
000000000000dc87         db  0x6e ; 'n'                                         ; DATA XREF=print_statfs+2777
000000000000dc88         db  0x74 ; 't'
000000000000dc89         db  0x66 ; 'f'
000000000000dc8a         db  0x73 ; 's'
000000000000dc8b         db  0x00 ; '.'
                     aOpenprom:
000000000000dc8c         db         "openprom", 0                               ; DATA XREF=print_statfs+2362
                     aOcfs2:
000000000000dc95         db         "ocfs2", 0                                  ; DATA XREF=print_statfs+702
                     aOverlayfs:
000000000000dc9b         db         "overlayfs", 0                              ; DATA XREF=print_statfs+2427
                     aPanfs:
000000000000dca5         db         "panfs", 0                                  ; DATA XREF=print_statfs+1170
                     aPrlfs:
000000000000dcab         db         "prl_fs", 0                                 ; DATA XREF=print_statfs+2447
000000000000dcb2         db  0x70 ; 'p'                                         ; DATA XREF=print_statfs+2402, read_file_system_list+572, read_file_system_list+1337
000000000000dcb3         db  0x72 ; 'r'
000000000000dcb4         db  0x6f ; 'o'
000000000000dcb5         db  0x63 ; 'c'
000000000000dcb6         db  0x00 ; '.'
                     aPstorefs:
000000000000dcb7         db         "pstorefs", 0                               ; DATA XREF=print_statfs+3217
000000000000dcc0         db  0x71 ; 'q'                                         ; DATA XREF=print_statfs+2972
000000000000dcc1         db  0x6e ; 'n'
000000000000dcc2         db  0x78 ; 'x'
000000000000dcc3         db  0x34 ; '4'
000000000000dcc4         db  0x00 ; '.'
000000000000dcc5         db  0x71 ; 'q'                                         ; DATA XREF=print_statfs+1879
000000000000dcc6         db  0x6e ; 'n'
000000000000dcc7         db  0x78 ; 'x'
000000000000dcc8         db  0x36 ; '6'
000000000000dcc9         db  0x00 ; '.'
000000000000dcca         db  0x72 ; 'r'                                         ; DATA XREF=print_statfs+1064
000000000000dccb         db  0x64 ; 'd'
000000000000dccc         db  0x74 ; 't'
000000000000dccd         db  0x00 ; '.'
                     aReiserfs:
000000000000dcce         db         "reiserfs", 0                               ; DATA XREF=print_statfs+228
                     aRomfs:
000000000000dcd7         db         "romfs", 0                                  ; DATA XREF=print_statfs+1309
000000000000dcdd         db  0x72 ; 'r'                                         ; DATA XREF=print_statfs+3091, read_file_system_list+926, read_file_system_list+1517
000000000000dcde         db  0x70 ; 'p'
000000000000dcdf         db  0x63 ; 'c'
000000000000dce0         db  0x5f ; '_'
                     aPipefs:
000000000000dce1         db         "pipefs", 0                                 ; DATA XREF=print_statfs+212
                     aSdcardfs:
000000000000dce8         db         "sdcardfs", 0                               ; DATA XREF=print_statfs+2162
                     aSecurityfs:
000000000000dcf1         db         "securityfs", 0                             ; DATA XREF=print_statfs+3241
                     aSelinux:
000000000000dcfc         db         "selinux", 0                                ; DATA XREF=print_statfs+1589
                     aSmackfs:
000000000000dd04         db         "smackfs", 0                                ; DATA XREF=print_statfs+2001
000000000000dd0c         db  0x73 ; 's'                                         ; DATA XREF=print_statfs+1809
000000000000dd0d         db  0x6d ; 'm'
000000000000dd0e         db  0x62 ; 'b'
000000000000dd0f         db  0x00 ; '.'
000000000000dd10         db  0x73 ; 's'                                         ; DATA XREF=print_statfs+2290
000000000000dd11         db  0x6d ; 'm'
000000000000dd12         db  0x62 ; 'b'
000000000000dd13         db  0x32 ; '2'
000000000000dd14         db  0x00 ; '.'
000000000000dd15         db  0x73 ; 's'                                         ; DATA XREF=print_statfs+2642
000000000000dd16         db  0x6e ; 'n'
000000000000dd17         db  0x66 ; 'f'
000000000000dd18         db  0x73 ; 's'
000000000000dd19         db  0x00 ; '.'
                     aSockfs:
000000000000dd1a         db         "sockfs", 0                                 ; DATA XREF=print_statfs+3229
                     aSquashfs:
000000000000dd21         db         "squashfs", 0                               ; DATA XREF=print_statfs+768
                     aSysfs:
000000000000dd2a         db         "sysfs", 0                                  ; DATA XREF=print_statfs+1398, read_file_system_list+956, read_file_system_list+1547
                     aSysv2:
000000000000dd30         db         "sysv2", 0                                  ; DATA XREF=print_statfs+1103
                     aSysv4:
000000000000dd36         db         "sysv4", 0                                  ; DATA XREF=print_statfs+3145
                     aTmpfs:
000000000000dd3c         db         "tmpfs", 0                                  ; DATA XREF=print_statfs+883
                     aTracefs:
000000000000dd42         db         "tracefs", 0                                ; DATA XREF=print_statfs+2467
                     aUbifs:
000000000000dd4a         db         "ubifs", 0                                  ; DATA XREF=print_statfs+2692
000000000000dd50         db  0x75 ; 'u'                                         ; DATA XREF=print_statfs+1521
000000000000dd51         db  0x64 ; 'd'
000000000000dd52         db  0x66 ; 'f'
000000000000dd53         db  0x00 ; '.'
000000000000dd54         db  0x75 ; 'u'                                         ; DATA XREF=print_statfs+2382
000000000000dd55         db  0x73 ; 's'
                     aBdevfs:
000000000000dd56         db         "bdevfs", 0                                 ; DATA XREF=print_statfs+1424
000000000000dd5d         db  0x76 ; 'v'                                         ; DATA XREF=print_statfs+837
000000000000dd5e         db  0x39 ; '9'
000000000000dd5f         db  0x66 ; 'f'
000000000000dd60         db  0x73 ; 's'
000000000000dd61         db  0x00 ; '.'
                     aVmhgfs:
000000000000dd62         db         "vmhgfs", 0                                 ; DATA XREF=print_statfs+2620
000000000000dd69         db  0x76 ; 'v'                                         ; DATA XREF=print_statfs+1220
000000000000dd6a         db  0x78 ; 'x'
000000000000dd6b         db  0x66 ; 'f'
000000000000dd6c         db  0x73 ; 's'
000000000000dd6d         db  0x00 ; '.'
000000000000dd6e         db  0x76 ; 'v'                                         ; DATA XREF=print_statfs+980
000000000000dd6f         db  0x7a ; 'z'                                         ; DATA XREF=print_statfs+3023
000000000000dd70         db  0x66 ; 'f'
000000000000dd71         db  0x73 ; 's'
000000000000dd72         db  0x00 ; '.'
                     aWslfs:
000000000000dd73         db         "wslfs", 0                                  ; DATA XREF=print_statfs+2757
                     aXenfs:
000000000000dd79         db         "xenfs", 0                                  ; DATA XREF=print_statfs+2664
                     aXenix:
000000000000dd7f         db         "xenix", 0                                  ; DATA XREF=print_statfs+2247
000000000000dd85         db  0x78 ; 'x'                                         ; DATA XREF=print_statfs+2227
000000000000dd86         db  0x69 ; 'i'
000000000000dd87         db  0x61 ; 'a'
000000000000dd88         db  0x00 ; '.'
                     aUnknown0xlx:
000000000000dd89         db         "UNKNOWN (0x%lx)", 0                        ; DATA XREF=print_statfs+253
                     aSInvalidDirect:
000000000000dd99         db         "%s: invalid directive", 0                  ; DATA XREF=print_it+1224
000000000000ddaf         db  0x54 ; 'T'                                         ; DATA XREF=human_time+200, setenv_TZ+8, setenv_TZ+32, set_tz+7
000000000000ddb0         db  0x5a ; 'Z'
000000000000ddb1         db  0x00 ; '.'
                     aYmdHmsnZ:
000000000000ddb2         db         "%Y-%m-%d %H:%M:%S.%N %z", 0                ; DATA XREF=human_time+80
                     aS09d:
000000000000ddca         db         "%s.%09d", 0                                ; DATA XREF=human_time+158
000000000000ddd2         db  0x25 ; '%'                                         ; DATA XREF=default_format+105, default_format+155, default_format+205
000000000000ddd3         db  0x73 ; 's'
000000000000ddd4         db  0x25 ; '%'
000000000000ddd5         db  0x73 ; 's'
000000000000ddd6         db  0x00 ; '.'
000000000000ddd7         db  0x2e ; '.'                                         ; DATA XREF=out_epoch_sec.isra.9+513
000000000000ddd8         db  0x30 ; '0'
000000000000ddd9         db  0x66 ; 'f'
000000000000ddda         db  0x00 ; '.'
                     aSdd:
000000000000dddb         db         "%s%.*d%-*.*d", 0                           ; DATA XREF=out_epoch_sec.isra.9+239
                     aUnknown:
000000000000dde8         db         "UNKNOWN", 0                                ; DATA XREF=print_stat+780, print_stat+996
000000000000ddf0         db  0x3f ; '?'                                         ; DATA XREF=print_stat+1127, print_stat+1425
000000000000ddf1         db  0x00 ; '.'
                     aCannotReadSymb:
000000000000ddf2         db         "cannot read symbolic link %s", 0           ; DATA XREF=print_stat+1474
000000000000de0f         db  0x20 ; ' '                                         ; DATA XREF=print_stat+936
000000000000de10         db  0x2d ; '-'
000000000000de11         db  0x3e ; '>'
000000000000de12         db  0x20 ; ' '
000000000000de13         db  0x00 ; '.'
000000000000de14         db  0x6c ; 'l'                                         ; DATA XREF=print_stat+620
000000000000de15         db  0x6f ; 'o'
000000000000de16         db  0x00 ; '.'
                     aFailedToCanoni:
000000000000de17         db         "failed to canonicalize %s", 0              ; DATA XREF=print_stat+1372
000000000000de31         db  0x73 ; 's'                                         ; DATA XREF=main+344, usage+564, usage+677, usage+1004, usage+1188, usage+1207, usage+1241
000000000000de32         db  0x74 ; 't'
000000000000de33         db  0x61 ; 'a'
000000000000de34         db  0x74 ; 't'
000000000000de35         db  0x00 ; '.'
000000000000de36         db  0x5b ; '['                                         ; DATA XREF=usage+699
000000000000de37         db  0x00 ; '.'
                     aTestInvocation:
000000000000de38         db         "test invocation", 0                        ; DATA XREF=usage+738
                     aMulticallInvoc:
000000000000de48         db         "Multi-call invocation", 0                  ; DATA XREF=usage+786
                     aSha224sum:
000000000000de5e         db         "sha224sum", 0                              ; DATA XREF=usage+803
                     aSha2Utilities:
000000000000de68         db         "sha2 utilities", 0                         ; DATA XREF=usage+815
                     aSha256sum:
000000000000de77         db         "sha256sum", 0                              ; DATA XREF=usage+706
                     aSha384sum:
000000000000de81         db         "sha384sum", 0                              ; DATA XREF=usage+750
                     aSha512sum:
000000000000de8b         db         "sha512sum", 0                              ; DATA XREF=usage+774
                     aNsOnlineHelpSn:
000000000000de95         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+890
000000000000deac         db  0x47 ; 'G'                                         ; DATA XREF=main+337, usage+918, usage+1111, emit_bug_reporting_address+68
000000000000dead         db  0x4e ; 'N'
000000000000deae         db  0x55 ; 'U'
000000000000deaf         db  0x20 ; ' '
                     aCoreutils:
000000000000deb0         db         "coreutils", 0                              ; DATA XREF=main+86, main+98, usage+762
000000000000deba         db  0x65 ; 'e'                                         ; DATA XREF=usage+957, usage+1150
000000000000debb         db  0x6e ; 'n'
000000000000debc         db  0x5f ; '_'
000000000000debd         db  0x00 ; '.'
                     aFullDocumentat:
000000000000debe         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+985, usage+1174
                     aUsrlocalsharel:
000000000000ded9         db         "/usr/local/share/locale", 0                ; DATA XREF=main+79
                     aMichaelMeskes:
000000000000def1         db         "Michael Meskes", 0                         ; DATA XREF=main+330
                     aCflt:
000000000000df00         db         "c:fLt", 0                                  ; DATA XREF=main+176
                     aMissingOperand:
000000000000df06         db         "missing operand", 0                        ; DATA XREF=main+1342
000000000000df16         db  0x25 ; '%'                                         ; DATA XREF=main+495
000000000000df17         db  0x4e ; 'N'
000000000000df18         db  0x00 ; '.'
                     aQuotingstyle:
000000000000df19         db         "QUOTING_STYLE", 0                          ; DATA XREF=main+520
                     aCannotStatStan:
000000000000df27         db         "cannot stat standard input", 0             ; DATA XREF=main+1034
                     aCannotStatS:
000000000000df42         db         "cannot stat %s", 0                         ; DATA XREF=main+1176, find_mount_point+444
                     aDereference:
000000000000df51         db         "dereference", 0
                     aFilesystem:
000000000000df5d         db         "file-system", 0
                     aFormat:
000000000000df69         db         "format", 0
                     aPrintf:
000000000000df70         db         "printf", 0
                     aTerse:
000000000000df77         db         "terse", 0
                     aHelp:
000000000000df7d         db         "help", 0
                     aVersion:
000000000000df82         db         "version", 0
000000000000df8a         align      32
                     switch_table_dfa0:        // switch_table
000000000000dfa0         dd         print_statfs.loc_2ab0-switch_table_dfa0, print_statfs.loc_2ae8-switch_table_dfa0, 12 dup (print_statfs.loc_2c50-switch_table_dfa0), print_statfs.loc_2bc0-switch_table_dfa0 ; switch table used at 0x2aa6 containing 34 entries, DATA XREF=print_statfs+18
000000000000dfdc         dd         print_statfs.loc_2bd0-switch_table_dfa0, print_statfs.loc_2be0-switch_table_dfa0, print_statfs.loc_2bf0-switch_table_dfa0, print_statfs.loc_2c50-switch_table_dfa0
000000000000dfec         dd         print_statfs.loc_2c00-switch_table_dfa0, 2 dup (print_statfs.loc_2c50-switch_table_dfa0), print_statfs.loc_2c10-switch_table_dfa0, 2 dup (print_statfs.loc_2c50-switch_table_dfa0)
000000000000e004         dd         print_statfs.loc_2c30-switch_table_dfa0, print_statfs.loc_2c50-switch_table_dfa0, print_statfs.loc_2c40-switch_table_dfa0, 4 dup (print_statfs.loc_2c50-switch_table_dfa0)
000000000000e020         dd         print_statfs.loc_2ab9-switch_table_dfa0, print_statfs.loc_2ad8-switch_table_dfa0
                     switch_table_e028:        // switch_table
000000000000e028         dd         print_it.loc_3ae0-switch_table_e028, 57 dup (print_it.loc_3ab6-switch_table_e028), print_it.loc_3ae0-switch_table_e028, 4 dup (print_it.loc_3ab6-switch_table_e028) ; switch table used at 0x3aad containing 85 entries, DATA XREF=print_it+828
000000000000e124         dd         print_it.loc_3bf3-switch_table_e028, print_it.loc_3b9d-switch_table_e028, 2 dup (print_it.loc_3ab6-switch_table_e028), print_it.loc_3b8c-switch_table_e028
000000000000e138         dd         print_it.loc_3b7b-switch_table_e028, 7 dup (print_it.loc_3ab6-switch_table_e028), print_it.loc_3b6a-switch_table_e028, 3 dup (print_it.loc_3ab6-switch_table_e028)
000000000000e168         dd         print_it.loc_3b59-switch_table_e028, print_it.loc_3ab6-switch_table_e028, print_it.loc_3b4b-switch_table_e028, print_it.loc_3ab6-switch_table_e028
000000000000e178         dd         print_it.loc_3b3d-switch_table_e028
                     switch_table_e17c:        // switch_table
000000000000e17c         dd         print_stat.loc_47c8-switch_table_e17c, print_stat.loc_47b0-switch_table_e17c, print_stat.loc_4730-switch_table_e17c, print_stat.loc_4720-switch_table_e17c ; switch table used at 0x434c containing 58 entries, DATA XREF=print_stat+24
000000000000e18c         dd         print_stat.loc_4810-switch_table_e17c, print_stat.loc_4800-switch_table_e17c, print_stat.loc_46f8-switch_table_e17c, 6 dup (print_stat.loc_4810-switch_table_e17c)
000000000000e1b0         dd         print_stat.loc_4660-switch_table_e17c, 5 dup (print_stat.loc_4810-switch_table_e17c), print_stat.loc_4648-switch_table_e17c, print_stat.loc_4620-switch_table_e17c
000000000000e1d0         dd         print_stat.loc_4810-switch_table_e17c, print_stat.loc_4608-switch_table_e17c, print_stat.loc_45f0-switch_table_e17c, print_stat.loc_45d8-switch_table_e17c
000000000000e1e0         dd         print_stat.loc_45c0-switch_table_e17c, 6 dup (print_stat.loc_4810-switch_table_e17c), print_stat.loc_4588-switch_table_e17c, print_stat.loc_4570-switch_table_e17c
000000000000e204         dd         print_stat.loc_4810-switch_table_e17c, print_stat.loc_4558-switch_table_e17c, print_stat.loc_4810-switch_table_e17c, print_stat.loc_4528-switch_table_e17c
000000000000e214         dd         print_stat.loc_4510-switch_table_e17c, print_stat.loc_4540-switch_table_e17c, print_stat.loc_44f8-switch_table_e17c, 3 dup (print_stat.loc_4810-switch_table_e17c)
000000000000e22c         dd         print_stat.loc_4460-switch_table_e17c, print_stat.loc_4450-switch_table_e17c, print_stat.loc_4420-switch_table_e17c, 3 dup (print_stat.loc_4810-switch_table_e17c)
000000000000e244         dd         print_stat.loc_4408-switch_table_e17c, print_stat.loc_43d0-switch_table_e17c, print_stat.loc_43c0-switch_table_e17c, print_stat.loc_4810-switch_table_e17c
000000000000e254         dd         print_stat.loc_43a0-switch_table_e17c, print_stat.loc_4390-switch_table_e17c, print_stat.loc_4380-switch_table_e17c, print_stat.loc_4350-switch_table_e17c
000000000000e264         align      128
                     fmt_terse_regular:
000000000000e280         db         "%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o\n", 0 ; DATA XREF=default_format+279, usage+595
000000000000e2b1         align      64
                     fmt_terse_fs:
000000000000e2c0         db         "%n %i %l %t %s %S %b %f %a %c %d\n", 0     ; DATA XREF=default_format+22, usage+636
000000000000e2e2         align      8
                     printf_flags:
000000000000e2e8         db         "'-+ #0I", 0                                ; DATA XREF=make_format+18, print_it+328
                     digits:
000000000000e2f0         db         "0123456789", 0                             ; DATA XREF=print_it+348, print_it+380
000000000000e2fb         align      256
                     aWarningBacksla:
000000000000e300         db         "warning: backslash at end of format", 0    ; DATA XREF=print_it+126
000000000000e324         align      8
                     aWarningUnrecog:
000000000000e328         db         "warning: unrecognized escape '\%c'", 0     ; DATA XREF=print_it+854
000000000000e34b         align      16
                     aCannotReadTabl:
000000000000e350         db         "cannot read table of mounted file systems", 0 ; DATA XREF=find_bind_mount+263
000000000000e37a         align      128
                     aFileNnId8iName:
000000000000e380         db         "  File: \"%n\"\n    ID: %-8i Namelen: %-7l Type: %T\nBlock size: %-10s Fundamental block size: %S\nBlocks: Total: %-10b Free: %-10f Available: %a\nInodes: Total: %-10c Free: %d\n", 0 ; DATA XREF=default_format+244
000000000000e42c         align      16
                     aFileNnSize10st:
000000000000e430         db         "  File: %N\n  Size: %-10s\tBlocks: %-10b IO Block: %-6o %F\n", 0 ; DATA XREF=default_format+43
000000000000e46a         align      16
                     aDeviceDhddtino:
000000000000e470         db         "Device: %Dh/%dd\tInode: %-10i  Links: %-5h Device type: %t,%T\n", 0 ; DATA XREF=default_format+82
000000000000e4ae         align      16
                     aDeviceDhddtino_e4b0:        // aDeviceDhddtino
000000000000e4b0         db         "Device: %Dh/%dd\tInode: %-10i  Links: %h\n", 0 ; DATA XREF=default_format+91
000000000000e4d9         align      32
                     aAccess04a1010a:
000000000000e4e0         db         "Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)\n", 0 ; DATA XREF=default_format+136
000000000000e519         align      32
                     aAccessXnmodify:
000000000000e520         db         "Access: %x\nModify: %y\nChange: %z\n Birth: %w\n", 0 ; DATA XREF=default_format+186
000000000000e54d         align      16
                     aFailedToGetSec:
000000000000e550         db         "failed to get security context of %s", 0   ; DATA XREF=print_stat+1075
000000000000e575         align      8
                     aTrySHelpForMor:
000000000000e578         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000e59f         align      32
                     aUsageSOptionFi:
000000000000e5a0         db         "Usage: %s [OPTION]... FILE...\n", 0        ; DATA XREF=usage+93
000000000000e5bf         align      64
                     aDisplayFileOrF:
000000000000e5c0         db         "Display file or file system status.\n", 0  ; DATA XREF=usage+132
000000000000e5e5         align      8
                     aNmandatoryArgu:
000000000000e5e8         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+169
000000000000e633         align      8
                     aLDereferenceFo:
000000000000e638         db         "  -L, --dereference     follow links\n  -f, --file-system     display file system status instead of file status\n", 0 ; DATA XREF=usage+206
                     aCFormatformatU:
000000000000e6a8         db         "  -c  --format=FORMAT   use the specified FORMAT instead of the default;\n                          output a newline after each use of FORMAT\n      --printf=FORMAT   like --format, but interpret backslash escapes,\n                          and do not output" ; DATA XREF=usage+243
000000000000e7a8         db         " a mandatory trailing newline;\n                          if you want a newline, include \n in FORMAT\n  -t, --terse           print the information in terse form\n", 0
000000000000e84a         align      16
                     aHelpDisplayThi:
000000000000e850         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+280
000000000000e87d         align      128
                     aVersionOutputV:
000000000000e880         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+317
000000000000e8b6         align      8
                     aNtheValidForma:
000000000000e8b8         db         "\nThe valid format sequences for files (without --file-system):\n\n  %a   access rights in octal (note '#' and '0' printf flags)\n  %A   access rights in human readable form\n  %b   number of blocks allocated (see %B)\n  %B   the size in bytes of each block repo" ; DATA XREF=usage+354
000000000000e9b8         db         "rted by %b\n  %C   SELinux security context string\n", 0
000000000000e9eb         align      16
                     aDDeviceNumberI:
000000000000e9f0         db         "  %d   device number in decimal\n  %D   device number in hex\n  %f   raw mode in hex\n  %F   file type\n  %g   group ID of owner\n  %G   group name of owner\n", 0 ; DATA XREF=usage+391
000000000000ea89         align      16
                     aHNumberOfHardL:
000000000000ea90         db         "  %h   number of hard links\n  %i   inode number\n  %m   mount point\n  %n   file name\n  %N   quoted file name with dereference if symbolic link\n  %o   optimal I/O transfer size hint\n  %s   total size, in bytes\n  %t   major device type in hex, for character/b" ; DATA XREF=usage+428
000000000000eb90         db         "lock device special files\n  %T   minor device type in hex, for character/block device special files\n", 0
000000000000ebf5         align      8
                     aUUserIdOfOwner:
000000000000ebf8         db         "  %u   user ID of owner\n  %U   user name of owner\n  %w   time of file birth, human-readable; - if unknown\n  %W   time of file birth, seconds since Epoch; 0 if unknown\n  %x   time of last access, human-readable\n  %X   time of last access, seconds since Epoc" ; DATA XREF=usage+465
000000000000ecf8         db         "h\n  %y   time of last data modification, human-readable\n  %Y   time of last data modification, seconds since Epoch\n  %z   time of last status change, human-readable\n  %Z   time of last status change, seconds since Epoch\n\n", 0
000000000000edd6         align      8
                     aValidFormatSeq:
000000000000edd8         db         "Valid format sequences for file systems:\n\n  %a   free blocks available to non-superuser\n  %b   total data blocks in file system\n  %c   total file nodes in file system\n  %d   free file nodes in file system\n  %f   free blocks in file system\n", 0 ; DATA XREF=usage+502
000000000000eec8         db  0x20 ; ' '                                         ; DATA XREF=usage+539
000000000000eec9         db  0x20 ; ' '
000000000000eeca         db  0x25 ; '%'
000000000000eecb         db  0x69 ; 'i'
000000000000eecc         db  0x20 ; ' '
000000000000eecd         db  0x20 ; ' '
000000000000eece         db  0x20 ; ' '
000000000000eecf         db  0x66 ; 'f'
000000000000eed0         db  0x69 ; 'i'
000000000000eed1         db  0x6c ; 'l'
000000000000eed2         db  0x65 ; 'e'
000000000000eed3         db  0x20 ; ' '
000000000000eed4         db  0x73 ; 's'
000000000000eed5         db  0x79 ; 'y'
000000000000eed6         db  0x73 ; 's'
000000000000eed7         db  0x74 ; 't'
000000000000eed8         db  0x65 ; 'e'
000000000000eed9         db  0x6d ; 'm'
000000000000eeda         db  0x20 ; ' '
000000000000eedb         db  0x49 ; 'I'
000000000000eedc         db  0x44 ; 'D'
000000000000eedd         db  0x20 ; ' '
000000000000eede         db  0x69 ; 'i'
000000000000eedf         db  0x6e ; 'n'
000000000000eee0         db  0x20 ; ' '
000000000000eee1         db  0x68 ; 'h'
000000000000eee2         db  0x65 ; 'e'
000000000000eee3         db  0x78 ; 'x'
000000000000eee4         db  0x0a ; '.'
000000000000eee5         db  0x20 ; ' '
000000000000eee6         db  0x20 ; ' '
000000000000eee7         db  0x25 ; '%'
000000000000eee8         db  0x6c ; 'l'
000000000000eee9         db  0x20 ; ' '
000000000000eeea         db  0x20 ; ' '
000000000000eeeb         db  0x20 ; ' '
000000000000eeec         db  0x6d ; 'm'
000000000000eeed         db  0x61 ; 'a'
000000000000eeee         db  0x78 ; 'x'
000000000000eeef         db  0x69 ; 'i'
000000000000eef0         db  0x6d ; 'm'
000000000000eef1         db  0x75 ; 'u'
000000000000eef2         db  0x6d ; 'm'
000000000000eef3         db  0x20 ; ' '
000000000000eef4         db  0x6c ; 'l'
000000000000eef5         db  0x65 ; 'e'
000000000000eef6         db  0x6e ; 'n'
000000000000eef7         db  0x67 ; 'g'
000000000000eef8         db  0x74 ; 't'
000000000000eef9         db  0x68 ; 'h'
000000000000eefa         db  0x20 ; ' '
000000000000eefb         db  0x6f ; 'o'
000000000000eefc         db  0x66 ; 'f'
000000000000eefd         db  0x20 ; ' '
000000000000eefe         db  0x66 ; 'f'
000000000000eeff         db  0x69 ; 'i'
000000000000ef00         db  0x6c ; 'l'
000000000000ef01         db  0x65 ; 'e'
000000000000ef02         db  0x6e ; 'n'
000000000000ef03         db  0x61 ; 'a'
000000000000ef04         db  0x6d ; 'm'
000000000000ef05         db  0x65 ; 'e'
000000000000ef06         db  0x73 ; 's'
000000000000ef07         db  0x0a ; '.'
000000000000ef08         db  0x20 ; ' '
000000000000ef09         db  0x20 ; ' '
000000000000ef0a         db  0x25 ; '%'
000000000000ef0b         db  0x6e ; 'n'
000000000000ef0c         db  0x20 ; ' '
000000000000ef0d         db  0x20 ; ' '
000000000000ef0e         db  0x20 ; ' '
000000000000ef0f         db  0x66 ; 'f'
000000000000ef10         db  0x69 ; 'i'
000000000000ef11         db  0x6c ; 'l'
000000000000ef12         db  0x65 ; 'e'
000000000000ef13         db  0x20 ; ' '
000000000000ef14         db  0x6e ; 'n'
000000000000ef15         db  0x61 ; 'a'
000000000000ef16         db  0x6d ; 'm'
000000000000ef17         db  0x65 ; 'e'
000000000000ef18         db  0x0a ; '.'
000000000000ef19         db  0x20 ; ' '
000000000000ef1a         db  0x20 ; ' '
000000000000ef1b         db  0x25 ; '%'
000000000000ef1c         db  0x73 ; 's'
000000000000ef1d         db  0x20 ; ' '
000000000000ef1e         db  0x20 ; ' '
000000000000ef1f         db  0x20 ; ' '
000000000000ef20         db  0x62 ; 'b'
000000000000ef21         db  0x6c ; 'l'
000000000000ef22         db  0x6f ; 'o'
000000000000ef23         db  0x63 ; 'c'
000000000000ef24         db  0x6b ; 'k'
000000000000ef25         db  0x20 ; ' '
000000000000ef26         db  0x73 ; 's'
000000000000ef27         db  0x69 ; 'i'
000000000000ef28         db  0x7a ; 'z'
000000000000ef29         db  0x65 ; 'e'
000000000000ef2a         db  0x20 ; ' '
000000000000ef2b         db  0x28 ; '('
000000000000ef2c         db  0x66 ; 'f'
000000000000ef2d         db  0x6f ; 'o'
000000000000ef2e         db  0x72 ; 'r'
000000000000ef2f         db  0x20 ; ' '
000000000000ef30         db  0x66 ; 'f'
000000000000ef31         db  0x61 ; 'a'
000000000000ef32         db  0x73 ; 's'
000000000000ef33         db  0x74 ; 't'
000000000000ef34         db  0x65 ; 'e'
000000000000ef35         db  0x72 ; 'r'
000000000000ef36         db  0x20 ; ' '
000000000000ef37         db  0x74 ; 't'
000000000000ef38         db  0x72 ; 'r'
000000000000ef39         db  0x61 ; 'a'
000000000000ef3a         db  0x6e ; 'n'
000000000000ef3b         db  0x73 ; 's'
000000000000ef3c         db  0x66 ; 'f'
000000000000ef3d         db  0x65 ; 'e'
000000000000ef3e         db  0x72 ; 'r'
000000000000ef3f         db  0x73 ; 's'
000000000000ef40         db  0x29 ; ')'
000000000000ef41         db  0x0a ; '.'
000000000000ef42         db  0x20 ; ' '
000000000000ef43         db  0x20 ; ' '
000000000000ef44         db  0x25 ; '%'
000000000000ef45         db  0x53 ; 'S'
000000000000ef46         db  0x20 ; ' '
000000000000ef47         db  0x20 ; ' '
000000000000ef48         db  0x20 ; ' '
000000000000ef49         db  0x66 ; 'f'
000000000000ef4a         db  0x75 ; 'u'
000000000000ef4b         db  0x6e ; 'n'
000000000000ef4c         db  0x64 ; 'd'
000000000000ef4d         db  0x61 ; 'a'
000000000000ef4e         db  0x6d ; 'm'
000000000000ef4f         db  0x65 ; 'e'
000000000000ef50         db  0x6e ; 'n'
000000000000ef51         db  0x74 ; 't'                                         ; DATA XREF=print_statfs+2940
000000000000ef52         db  0x61 ; 'a'
                     aLBlockSizeForB:
000000000000ef53         db         "l block size (for block counts)\n  %t   file system type in hex\n  %T   file system type in human readable form\n", 0 ; DATA XREF=print_statfs+1688
000000000000efc2         align      8
                     aNterseIsEquiva:
000000000000efc8         db         "\n--terse is equivalent to the following FORMAT:\n    %s", 0 ; DATA XREF=usage+576
000000000000efff         align      4096
                     aTerseFilesyste:
000000000000f000         db         "--terse --file-system is equivalent to the following FORMAT:\n    %s", 0 ; DATA XREF=print_stat+333, print_stat+892, usage+617, find_mount_point+79, file_type+8, strmode+7
000000000000f044         align      8
                     aNnoteYourShell:
000000000000f048         db         "\nNOTE: your shell may have its own version of %s, which usually supersedes\nthe version described here.  Please refer to your shell's documentation\nfor details about the options it supports.\n", 0 ; DATA XREF=usage+658
000000000000f107         align      8
                     aHttpswwwgnuorg:
000000000000f108         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+911, usage+1011, usage+1104, usage+1214, emit_bug_reporting_address+61
000000000000f130         db  0x52 ; 'R'                                         ; DATA XREF=usage+1255
000000000000f131         db  0x65 ; 'e'
000000000000f132         db  0x70 ; 'p'
000000000000f133         db  0x6f ; 'o'
000000000000f134         db  0x72 ; 'r'
000000000000f135         db  0x74 ; 't'
000000000000f136         db  0x20 ; ' '
000000000000f137         db  0x61 ; 'a'
000000000000f138         db  0x6e ; 'n'
000000000000f139         db  0x79 ; 'y'
000000000000f13a         db  0x20 ; ' '
000000000000f13b         db  0x74 ; 't'
000000000000f13c         db  0x72 ; 'r'
000000000000f13d         db  0x61 ; 'a'
000000000000f13e         db  0x6e ; 'n'
000000000000f13f         db  0x73 ; 's'
000000000000f140         db  0x6c ; 'l'
000000000000f141         db  0x61 ; 'a'
000000000000f142         db  0x74 ; 't'
000000000000f143         db  0x69 ; 'i'
000000000000f144         db  0x6f ; 'o'
000000000000f145         db  0x6e ; 'n'
000000000000f146         db  0x20 ; ' '
000000000000f147         db  0x62 ; 'b'
000000000000f148         db  0x75 ; 'u'
000000000000f149         db  0x67 ; 'g'
000000000000f14a         db  0x73 ; 's'
000000000000f14b         db  0x20 ; ' '
000000000000f14c         db  0x74 ; 't'
000000000000f14d         db  0x6f ; 'o'
000000000000f14e         db  0x20 ; ' '
000000000000f14f         db  0x3c ; '<'
000000000000f150         db  0x68 ; 'h'
000000000000f151         db  0x74 ; 't'
000000000000f152         db  0x74 ; 't'
000000000000f153         db  0x70 ; 'p'
000000000000f154         db  0x73 ; 's'
000000000000f155         db  0x3a ; ':'
000000000000f156         db  0x2f ; '/'
000000000000f157         db  0x2f ; '/'
000000000000f158         db  0x74 ; 't'
000000000000f159         db  0x72 ; 'r'
000000000000f15a         db  0x61 ; 'a'
000000000000f15b         db  0x6e ; 'n'
000000000000f15c         db  0x73 ; 's'
000000000000f15d         db  0x6c ; 'l'
000000000000f15e         db  0x61 ; 'a'
                     aTionprojectorg:
000000000000f15f         db         "tionproject.org/team/>\n", 0               ; DATA XREF=print_statfs+1747
000000000000f177         align      8
                     aOrAvailableLoc:
000000000000f178         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+1054
000000000000f1ab         align      16
                     aIgnoringInvali:
000000000000f1b0         db         "ignoring invalid value of environment variable QUOTING_STYLE: %s", 0 ; DATA XREF=main+1205
000000000000f1f1         align      8
                     aUsingSToDenote:
000000000000f1f8         db         "using %s to denote standard input does not work in file system mode", 0 ; DATA XREF=main+885
000000000000f23c         align      64
                     aCannotReadFile:
000000000000f240         db         "cannot read file system information for %s", 0 ; DATA XREF=main+1095
000000000000f26b         align      2
000000000000f276         db  0xd0 ; '.'
000000000000f277         db  0xbf ; '.'
                     aCannotGetCurre:
000000000000f278         db         "cannot get current directory", 0           ; DATA XREF=find_mount_point+869
                     aCannotChangeTo:
000000000000f295         db         "cannot change to directory %s", 0          ; DATA XREF=find_mount_point+715, find_mount_point+857
000000000000f2b3         db  0x2e ; '.'                                         ; DATA XREF=find_mount_point+212, find_mount_point+427, find_mount_point+832
000000000000f2b4         db  0x2e ; '.'                                         ; DATA XREF=main+118, find_mount_point+180, save_cwd+12
000000000000f2b5         db  0x00 ; '.'
000000000000f2b6         db  0x00 ; '.'
000000000000f2b7         db  0x00 ; '.'
                     aCannotStatCurr:
000000000000f2b8         db         "cannot stat current directory (now %s)", 0 ; DATA XREF=find_mount_point+781
000000000000f2df         align      32
                     aFailedToReturn:
000000000000f2e0         db         "failed to return to initial working directory", 0 ; DATA XREF=find_mount_point+910
                     a831:
000000000000f30e         db         "8.31", 0                                   ; DATA XREF=Version
                     aInvalidArgumen:
000000000000f313         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000000f32e         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
000000000000f34b         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000000f360         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000000f368         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
000000000000f369         db  0x20 ; ' '
000000000000f36a         db  0x25 ; '%'                                         ; DATA XREF=find_bind_mount+292, close_stdout+143, xalloc_die+29
000000000000f36b         db  0x73 ; 's'                                         ; DATA XREF=out_string+5
000000000000f36c         db  0x00 ; '.'
                     aWriteError:
000000000000f36d         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
000000000000f379         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
                     aRegularEmptyFi:
000000000000f380         db         "regular empty file", 0                     ; DATA XREF=file_type+103
                     aRegularFile:
000000000000f393         db         "regular file", 0                           ; DATA XREF=file_type+120
                     aSymbolicLink:
000000000000f3a0         db         "symbolic link", 0                          ; DATA XREF=file_type+144
                     aBlockSpecialFi:
000000000000f3ae         db         "block special file", 0                     ; DATA XREF=file_type+192
                     aCharacterSpeci:
000000000000f3c1         db         "character special file", 0                 ; DATA XREF=file_type+208
000000000000f3d8         db  0x66 ; 'f'                                         ; DATA XREF=file_type+224
000000000000f3d9         db  0x69 ; 'i'
000000000000f3da         db  0x66 ; 'f'
000000000000f3db         db  0x6f ; 'o'
000000000000f3dc         db  0x00 ; '.'
                     aSocket:
000000000000f3dd         db         "socket", 0                                 ; DATA XREF=file_type+160
                     aWeirdFile:
000000000000f3e4         db         "weird file", 0                             ; DATA XREF=file_type+78
                     aHm:
000000000000f3ef         db         "%H:%M", 0                                  ; DATA XREF=__strftime_internal+1630
                     aHms:
000000000000f3f5         db         "%H:%M:%S", 0                               ; DATA XREF=sub_6360+347
                     aYmd:
000000000000f3fe         db         "%Y-%m-%d", 0                               ; DATA XREF=sub_6a20+1122, sub_74d9+422
                     aMdy:
000000000000f407         db         "%m/%d/%y", 0                               ; DATA XREF=sub_6a20+1070
000000000000f410         db  0x91 ; '.'                                         ; DATA XREF=__strftime_internal+509
000000000000f411         db  0x7a ; 'z'
000000000000f412         db  0xff ; '.'
000000000000f413         db  0xff ; '.'
000000000000f414         db  0xf0 ; '.'
000000000000f415         db  0x6a ; 'j'
000000000000f416         db  0xff ; '.'
000000000000f417         db  0xff ; '.'
000000000000f418         db  0xf0 ; '.'
000000000000f419         db  0x6a ; 'j'
000000000000f41a         db  0xff ; '.'
000000000000f41b         db  0xff ; '.'
000000000000f41c         db  0xf0 ; '.'
000000000000f41d         db  0x6a ; 'j'
000000000000f41e         db  0xff ; '.'
000000000000f41f         db  0xff ; '.'
000000000000f420         db  0xf0 ; '.'
000000000000f421         db  0x6a ; 'j'
000000000000f422         db  0xff ; '.'
000000000000f423         db  0xff ; '.'
000000000000f424         db  0xf0 ; '.'
000000000000f425         db  0x6a ; 'j'
000000000000f426         db  0xff ; '.'
000000000000f427         db  0xff ; '.'
000000000000f428         db  0xf0 ; '.'
000000000000f429         db  0x6a ; 'j'
000000000000f42a         db  0xff ; '.'
000000000000f42b         db  0xff ; '.'
000000000000f42c         db  0xf0 ; '.'
000000000000f42d         db  0x6a ; 'j'
000000000000f42e         db  0xff ; '.'
000000000000f42f         db  0xff ; '.'
000000000000f430         db  0xf0 ; '.'
000000000000f431         db  0x6a ; 'j'
000000000000f432         db  0xff ; '.'
000000000000f433         db  0xff ; '.'
000000000000f434         db  0xf0 ; '.'
000000000000f435         db  0x6a ; 'j'
000000000000f436         db  0xff ; '.'
000000000000f437         db  0xff ; '.'
000000000000f438         db  0xf0 ; '.'
000000000000f439         db  0x6a ; 'j'
000000000000f43a         db  0xff ; '.'
000000000000f43b         db  0xff ; '.'
000000000000f43c         db  0xf0 ; '.'
000000000000f43d         db  0x6a ; 'j'
000000000000f43e         db  0xff ; '.'
000000000000f43f         db  0xff ; '.'
000000000000f440         db  0xf0 ; '.'
000000000000f441         db  0x6a ; 'j'
000000000000f442         db  0xff ; '.'
000000000000f443         db  0xff ; '.'
000000000000f444         db  0xf0 ; '.'
000000000000f445         db  0x6a ; 'j'
000000000000f446         db  0xff ; '.'
000000000000f447         db  0xff ; '.'
000000000000f448         db  0xf0 ; '.'
000000000000f449         db  0x6a ; 'j'
000000000000f44a         db  0xff ; '.'
000000000000f44b         db  0xff ; '.'
000000000000f44c         db  0xf0 ; '.'
000000000000f44d         db  0x6a ; 'j'
000000000000f44e         db  0xff ; '.'
000000000000f44f         db  0xff ; '.'
000000000000f450         db  0xf0 ; '.'
000000000000f451         db  0x6a ; 'j'
000000000000f452         db  0xff ; '.'
000000000000f453         db  0xff ; '.'
000000000000f454         db  0xf0 ; '.'
000000000000f455         db  0x6a ; 'j'
000000000000f456         db  0xff ; '.'
000000000000f457         db  0xff ; '.'
000000000000f458         db  0xf0 ; '.'
000000000000f459         db  0x6a ; 'j'
000000000000f45a         db  0xff ; '.'
000000000000f45b         db  0xff ; '.'
000000000000f45c         db  0xf0 ; '.'
000000000000f45d         db  0x6a ; 'j'
000000000000f45e         db  0xff ; '.'
000000000000f45f         db  0xff ; '.'
000000000000f460         db  0xf0 ; '.'
000000000000f461         db  0x6a ; 'j'
000000000000f462         db  0xff ; '.'
000000000000f463         db  0xff ; '.'
000000000000f464         db  0xf0 ; '.'
000000000000f465         db  0x6a ; 'j'
000000000000f466         db  0xff ; '.'
000000000000f467         db  0xff ; '.'
000000000000f468         db  0xf0 ; '.'
000000000000f469         db  0x6a ; 'j'
000000000000f46a         db  0xff ; '.'
000000000000f46b         db  0xff ; '.'
000000000000f46c         db  0xf0 ; '.'
000000000000f46d         db  0x6a ; 'j'
000000000000f46e         db  0xff ; '.'
000000000000f46f         db  0xff ; '.'
000000000000f470         db  0xf0 ; '.'
000000000000f471         db  0x6a ; 'j'
000000000000f472         db  0xff ; '.'
000000000000f473         db  0xff ; '.'
000000000000f474         db  0xf0 ; '.'
000000000000f475         db  0x6a ; 'j'
000000000000f476         db  0xff ; '.'
000000000000f477         db  0xff ; '.'
000000000000f478         db  0xf0 ; '.'
000000000000f479         db  0x6a ; 'j'
000000000000f47a         db  0xff ; '.'
000000000000f47b         db  0xff ; '.'
000000000000f47c         db  0xf0 ; '.'
000000000000f47d         db  0x6a ; 'j'
000000000000f47e         db  0xff ; '.'
000000000000f47f         db  0xff ; '.'
000000000000f480         db  0xf0 ; '.'
000000000000f481         db  0x6a ; 'j'
000000000000f482         db  0xff ; '.'
000000000000f483         db  0xff ; '.'
000000000000f484         db  0xf0 ; '.'
000000000000f485         db  0x6a ; 'j'
000000000000f486         db  0xff ; '.'
000000000000f487         db  0xff ; '.'
000000000000f488         db  0xf0 ; '.'
000000000000f489         db  0x6a ; 'j'
000000000000f48a         db  0xff ; '.'
000000000000f48b         db  0xff ; '.'
000000000000f48c         db  0xf0 ; '.'
000000000000f48d         db  0x6a ; 'j'
000000000000f48e         db  0xff ; '.'
000000000000f48f         db  0xff ; '.'
000000000000f490         db  0xf0 ; '.'
000000000000f491         db  0x6a ; 'j'
000000000000f492         db  0xff ; '.'
000000000000f493         db  0xff ; '.'
000000000000f494         db  0xf0 ; '.'
000000000000f495         db  0x6a ; 'j'
000000000000f496         db  0xff ; '.'
000000000000f497         db  0xff ; '.'
000000000000f498         db  0xf0 ; '.'
000000000000f499         db  0x6a ; 'j'
000000000000f49a         db  0xff ; '.'
000000000000f49b         db  0xff ; '.'
000000000000f49c         db  0xf0 ; '.'
000000000000f49d         db  0x6a ; 'j'
000000000000f49e         db  0xff ; '.'
000000000000f49f         db  0xff ; '.'
000000000000f4a0         db  0xf0 ; '.'
000000000000f4a1         db  0x6a ; 'j'
000000000000f4a2         db  0xff ; '.'
000000000000f4a3         db  0xff ; '.'
000000000000f4a4         db  0x1e ; '.'
000000000000f4a5         db  0x70 ; 'p'
000000000000f4a6         db  0xff ; '.'
000000000000f4a7         db  0xff ; '.'
000000000000f4a8         db  0xf0 ; '.'
000000000000f4a9         db  0x6a ; 'j'
000000000000f4aa         db  0xff ; '.'
000000000000f4ab         db  0xff ; '.'
000000000000f4ac         db  0xf0 ; '.'
000000000000f4ad         db  0x6a ; 'j'
000000000000f4ae         db  0xff ; '.'
000000000000f4af         db  0xff ; '.'
000000000000f4b0         db  0xf0 ; '.'
000000000000f4b1         db  0x6a ; 'j'
000000000000f4b2         db  0xff ; '.'
000000000000f4b3         db  0xff ; '.'
000000000000f4b4         db  0xf0 ; '.'
000000000000f4b5         db  0x6a ; 'j'
000000000000f4b6         db  0xff ; '.'
000000000000f4b7         db  0xff ; '.'
000000000000f4b8         db  0xf0 ; '.'
000000000000f4b9         db  0x6a ; 'j'
000000000000f4ba         db  0xff ; '.'
000000000000f4bb         db  0xff ; '.'
000000000000f4bc         db  0xf0 ; '.'
000000000000f4bd         db  0x6a ; 'j'
000000000000f4be         db  0xff ; '.'
000000000000f4bf         db  0xff ; '.'
000000000000f4c0         db  0xf0 ; '.'
000000000000f4c1         db  0x6a ; 'j'
000000000000f4c2         db  0xff ; '.'
000000000000f4c3         db  0xff ; '.'
000000000000f4c4         db  0xf0 ; '.'
000000000000f4c5         db  0x6a ; 'j'
000000000000f4c6         db  0xff ; '.'
000000000000f4c7         db  0xff ; '.'
000000000000f4c8         db  0xf0 ; '.'
000000000000f4c9         db  0x6a ; 'j'
000000000000f4ca         db  0xff ; '.'
000000000000f4cb         db  0xff ; '.'
000000000000f4cc         db  0xf0 ; '.'
000000000000f4cd         db  0x6a ; 'j'
000000000000f4ce         db  0xff ; '.'
000000000000f4cf         db  0xff ; '.'
000000000000f4d0         db  0xf0 ; '.'
000000000000f4d1         db  0x6a ; 'j'
000000000000f4d2         db  0xff ; '.'
000000000000f4d3         db  0xff ; '.'
000000000000f4d4         db  0xf0 ; '.'
000000000000f4d5         db  0x6a ; 'j'
000000000000f4d6         db  0xff ; '.'
000000000000f4d7         db  0xff ; '.'
000000000000f4d8         db  0xf0 ; '.'
000000000000f4d9         db  0x6a ; 'j'
000000000000f4da         db  0xff ; '.'
000000000000f4db         db  0xff ; '.'
000000000000f4dc         db  0xf0 ; '.'
000000000000f4dd         db  0x6a ; 'j'
000000000000f4de         db  0xff ; '.'
000000000000f4df         db  0xff ; '.'
000000000000f4e0         db  0xf0 ; '.'
000000000000f4e1         db  0x6a ; 'j'
000000000000f4e2         db  0xff ; '.'
000000000000f4e3         db  0xff ; '.'
000000000000f4e4         db  0xf0 ; '.'
000000000000f4e5         db  0x6a ; 'j'
000000000000f4e6         db  0xff ; '.'
000000000000f4e7         db  0xff ; '.'
000000000000f4e8         db  0xf0 ; '.'
000000000000f4e9         db  0x6a ; 'j'
000000000000f4ea         db  0xff ; '.'
000000000000f4eb         db  0xff ; '.'
000000000000f4ec         db  0xf0 ; '.'
000000000000f4ed         db  0x6a ; 'j'
000000000000f4ee         db  0xff ; '.'
000000000000f4ef         db  0xff ; '.'
000000000000f4f0         db  0xf0 ; '.'
000000000000f4f1         db  0x6a ; 'j'
000000000000f4f2         db  0xff ; '.'
000000000000f4f3         db  0xff ; '.'
000000000000f4f4         db  0xf0 ; '.'
000000000000f4f5         db  0x6a ; 'j'
000000000000f4f6         db  0xff ; '.'
000000000000f4f7         db  0xff ; '.'
000000000000f4f8         db  0x17 ; '.'
000000000000f4f9         db  0x77 ; 'w'
000000000000f4fa         db  0xff ; '.'
000000000000f4fb         db  0xff ; '.'
000000000000f4fc         db  0xf0 ; '.'
000000000000f4fd         db  0x6a ; 'j'
000000000000f4fe         db  0xff ; '.'
000000000000f4ff         db  0xff ; '.'
000000000000f500         db  0xf0 ; '.'
000000000000f501         db  0x6a ; 'j'
000000000000f502         db  0xff ; '.'
000000000000f503         db  0xff ; '.'
000000000000f504         db  0xf0 ; '.'
000000000000f505         db  0x6a ; 'j'
000000000000f506         db  0xff ; '.'
000000000000f507         db  0xff ; '.'
000000000000f508         db  0xf0 ; '.'
000000000000f509         db  0x6a ; 'j'
000000000000f50a         db  0xff ; '.'
000000000000f50b         db  0xff ; '.'
000000000000f50c         db  0xf0 ; '.'
000000000000f50d         db  0x6a ; 'j'
000000000000f50e         db  0xff ; '.'
000000000000f50f         db  0xff ; '.'
000000000000f510         db  0xf0 ; '.'
000000000000f511         db  0x6a ; 'j'
000000000000f512         db  0xff ; '.'
000000000000f513         db  0xff ; '.'
000000000000f514         db  0xa6 ; '.'
000000000000f515         db  0x6d ; 'm'
000000000000f516         db  0xff ; '.'
000000000000f517         db  0xff ; '.'
000000000000f518         db  0x7e ; '~'
000000000000f519         db  0x79 ; 'y'
000000000000f51a         db  0xff ; '.'
000000000000f51b         db  0xff ; '.'
000000000000f51c         db  0x9b ; '.'
000000000000f51d         db  0x79 ; 'y'
000000000000f51e         db  0xff ; '.'
000000000000f51f         db  0xff ; '.'
000000000000f520         db  0x35 ; '5'
000000000000f521         db  0x7a ; 'z'
000000000000f522         db  0xff ; '.'
000000000000f523         db  0xff ; '.'
000000000000f524         db  0xf0 ; '.'
000000000000f525         db  0x6a ; 'j'
000000000000f526         db  0xff ; '.'
000000000000f527         db  0xff ; '.'
000000000000f528         db  0x57 ; 'W'
000000000000f529         db  0x7a ; 'z'
000000000000f52a         db  0xff ; '.'
000000000000f52b         db  0xff ; '.'
000000000000f52c         db  0x3d ; '='
000000000000f52d         db  0x77 ; 'w'
000000000000f52e         db  0xff ; '.'
000000000000f52f         db  0xff ; '.'
000000000000f530         db  0xd2 ; '.'
000000000000f531         db  0x7a ; 'z'
000000000000f532         db  0xff ; '.'
000000000000f533         db  0xff ; '.'
000000000000f534         db  0x4e ; 'N'
000000000000f535         db  0x7b ; '{'
000000000000f536         db  0xff ; '.'
000000000000f537         db  0xff ; '.'
000000000000f538         db  0xf0 ; '.'
000000000000f539         db  0x6a ; 'j'
000000000000f53a         db  0xff ; '.'
000000000000f53b         db  0xff ; '.'
000000000000f53c         db  0xf0 ; '.'
000000000000f53d         db  0x6a ; 'j'
000000000000f53e         db  0xff ; '.'
000000000000f53f         db  0xff ; '.'
000000000000f540         db  0xf0 ; '.'
000000000000f541         db  0x6a ; 'j'
000000000000f542         db  0xff ; '.'
000000000000f543         db  0xff ; '.'
000000000000f544         db  0xea ; '.'
000000000000f545         db  0x7a ; 'z'
000000000000f546         db  0xff ; '.'
000000000000f547         db  0xff ; '.'
000000000000f548         db  0x02 ; '.'
000000000000f549         db  0x7b ; '{'
000000000000f54a         db  0xff ; '.'
000000000000f54b         db  0xff ; '.'
000000000000f54c         db  0xf0 ; '.'
000000000000f54d         db  0x6a ; 'j'
000000000000f54e         db  0xff ; '.'
000000000000f54f         db  0xff ; '.'
000000000000f550         db  0xe3 ; '.'
000000000000f551         db  0x6e ; 'n'
000000000000f552         db  0xff ; '.'
000000000000f553         db  0xff ; '.'
000000000000f554         db  0xf0 ; '.'
000000000000f555         db  0x6a ; 'j'
000000000000f556         db  0xff ; '.'
000000000000f557         db  0xff ; '.'
000000000000f558         db  0xfe ; '.'
000000000000f559         db  0x6e ; 'n'
000000000000f55a         db  0xff ; '.'
000000000000f55b         db  0xff ; '.'
000000000000f55c         db  0xe6 ; '.'
000000000000f55d         db  0x6d ; 'm'
000000000000f55e         db  0xff ; '.'
000000000000f55f         db  0xff ; '.'
000000000000f560         db  0xab ; '.'
000000000000f561         db  0x70 ; 'p'
000000000000f562         db  0xff ; '.'
000000000000f563         db  0xff ; '.'
000000000000f564         db  0xc4 ; '.'
000000000000f565         db  0x70 ; 'p'
000000000000f566         db  0xff ; '.'
000000000000f567         db  0xff ; '.'
000000000000f568         db  0x3d ; '='
000000000000f569         db  0x77 ; 'w'
000000000000f56a         db  0xff ; '.'
000000000000f56b         db  0xff ; '.'
000000000000f56c         db  0x39 ; '9'
000000000000f56d         db  0x79 ; 'y'
000000000000f56e         db  0xff ; '.'
000000000000f56f         db  0xff ; '.'
000000000000f570         db  0x58 ; 'X'
000000000000f571         db  0x6c ; 'l'
000000000000f572         db  0xff ; '.'
000000000000f573         db  0xff ; '.'
000000000000f574         db  0xf7 ; '.'
000000000000f575         db  0x70 ; 'p'
000000000000f576         db  0xff ; '.'
000000000000f577         db  0xff ; '.'
000000000000f578         db  0x50 ; 'P'
000000000000f579         db  0x71 ; 'q'
000000000000f57a         db  0xff ; '.'
000000000000f57b         db  0xff ; '.'
000000000000f57c         db  0xf0 ; '.'
000000000000f57d         db  0x6a ; 'j'
000000000000f57e         db  0xff ; '.'
000000000000f57f         db  0xff ; '.'
000000000000f580         db  0xf0 ; '.'
000000000000f581         db  0x6a ; 'j'
000000000000f582         db  0xff ; '.'
000000000000f583         db  0xff ; '.'
000000000000f584         db  0xf0 ; '.'
000000000000f585         db  0x6a ; 'j'
000000000000f586         db  0xff ; '.'
000000000000f587         db  0xff ; '.'
000000000000f588         db  0xf0 ; '.'
000000000000f589         db  0x6a ; 'j'
000000000000f58a         db  0xff ; '.'
000000000000f58b         db  0xff ; '.'
000000000000f58c         db  0xf0 ; '.'
000000000000f58d         db  0x6a ; 'j'
000000000000f58e         db  0xff ; '.'
000000000000f58f         db  0xff ; '.'
000000000000f590         db  0xf0 ; '.'
000000000000f591         db  0x6a ; 'j'
000000000000f592         db  0xff ; '.'
000000000000f593         db  0xff ; '.'
000000000000f594         db  0xa6 ; '.'
000000000000f595         db  0x6d ; 'm'
000000000000f596         db  0xff ; '.'
000000000000f597         db  0xff ; '.'
000000000000f598         db  0xa7 ; '.'
000000000000f599         db  0x72 ; 'r'
000000000000f59a         db  0xff ; '.'
000000000000f59b         db  0xff ; '.'
000000000000f59c         db  0x58 ; 'X'
000000000000f59d         db  0x6c ; 'l'
000000000000f59e         db  0xff ; '.'
000000000000f59f         db  0xff ; '.'
000000000000f5a0         db  0xd4 ; '.'
000000000000f5a1         db  0x78 ; 'x'
000000000000f5a2         db  0xff ; '.'
000000000000f5a3         db  0xff ; '.'
000000000000f5a4         db  0x89 ; '.'
000000000000f5a5         db  0x7c ; '|'
000000000000f5a6         db  0xff ; '.'
000000000000f5a7         db  0xff ; '.'
000000000000f5a8         db  0xf0 ; '.'
000000000000f5a9         db  0x6a ; 'j'
000000000000f5aa         db  0xff ; '.'
000000000000f5ab         db  0xff ; '.'
000000000000f5ac         db  0x3d ; '='
000000000000f5ad         db  0x77 ; 'w'
000000000000f5ae         db  0xff ; '.'
000000000000f5af         db  0xff ; '.'
000000000000f5b0         db  0xa7 ; '.'
000000000000f5b1         db  0x72 ; 'r'
000000000000f5b2         db  0xff ; '.'
000000000000f5b3         db  0xff ; '.'
000000000000f5b4         db  0xf0 ; '.'
000000000000f5b5         db  0x6a ; 'j'
000000000000f5b6         db  0xff ; '.'
000000000000f5b7         db  0xff ; '.'
000000000000f5b8         db  0x46 ; 'F'
000000000000f5b9         db  0x7c ; '|'
000000000000f5ba         db  0xff ; '.'
000000000000f5bb         db  0xff ; '.'
000000000000f5bc         db  0x76 ; 'v'
000000000000f5bd         db  0x7c ; '|'
000000000000f5be         db  0xff ; '.'
000000000000f5bf         db  0xff ; '.'
000000000000f5c0         db  0x66 ; 'f'
000000000000f5c1         db  0x7b ; '{'
000000000000f5c2         db  0xff ; '.'
000000000000f5c3         db  0xff ; '.'
000000000000f5c4         db  0x8d ; '.'
000000000000f5c5         db  0x7b ; '{'
000000000000f5c6         db  0xff ; '.'
000000000000f5c7         db  0xff ; '.'
000000000000f5c8         db  0xbd ; '.'
000000000000f5c9         db  0x7b ; '{'
000000000000f5ca         db  0xff ; '.'
000000000000f5cb         db  0xff ; '.'
000000000000f5cc         db  0xf0 ; '.'
000000000000f5cd         db  0x6a ; 'j'
000000000000f5ce         db  0xff ; '.'
000000000000f5cf         db  0xff ; '.'
000000000000f5d0         db  0x3f ; '?'
000000000000f5d1         db  0x7c ; '|'
000000000000f5d2         db  0xff ; '.'
000000000000f5d3         db  0xff ; '.'
000000000000f5d4         db  0xa0 ; '.'
000000000000f5d5         db  0x73 ; 's'
000000000000f5d6         db  0xff ; '.'
000000000000f5d7         db  0xff ; '.'
000000000000f5d8         db  0x62 ; 'b'
000000000000f5d9         db  0x6c ; 'l'
000000000000f5da         db  0xff ; '.'
000000000000f5db         db  0xff ; '.'
000000000000f5dc         db  0x10 ; '.'
000000000000f5dd         db  0x76 ; 'v'
000000000000f5de         db  0xff ; '.'
000000000000f5df         db  0xff ; '.'
000000000000f5e0         db  0x5b ; '['
000000000000f5e1         db  0x6e ; 'n'
000000000000f5e2         db  0xff ; '.'
000000000000f5e3         db  0xff ; '.'
000000000000f5e4         db  0xec ; '.'
000000000000f5e5         db  0x78 ; 'x'
000000000000f5e6         db  0xff ; '.'
000000000000f5e7         db  0xff ; '.'
000000000000f5e8         db  0xf0 ; '.'
000000000000f5e9         db  0x6a ; 'j'
000000000000f5ea         db  0xff ; '.'
000000000000f5eb         db  0xff ; '.'
000000000000f5ec         db  0x21 ; '!'
000000000000f5ed         db  0x79 ; 'y'
000000000000f5ee         db  0xff ; '.'
000000000000f5ef         db  0xff ; '.'
000000000000f5f0         db  0x58 ; 'X'
000000000000f5f1         db  0x6c ; 'l'
000000000000f5f2         db  0xff ; '.'
000000000000f5f3         db  0xff ; '.'
000000000000f5f4         db  0x3d ; '='
000000000000f5f5         db  0x72 ; 'r'
000000000000f5f6         db  0xff ; '.'
000000000000f5f7         db  0xff ; '.'
000000000000f5f8         db  0xcc ; '.'
000000000000f5f9         db  0x72 ; 'r'
000000000000f5fa         db  0xff ; '.'
000000000000f5fb         db  0xff ; '.'
000000000000f5fc         db  0x00 ; '.'
000000000000f5fd         db  0x00 ; '.'
000000000000f5fe         db  0x00 ; '.'
000000000000f5ff         db  0x00 ; '.'
                     aANullArgv0WasP:
000000000000f600         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000f638         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000f640         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000f641         db  0x74 ; 't'
000000000000f642         db  0x2d ; '-'                                         ; DATA XREF=main+736, out_string+12, print_stat+128
000000000000f643         db  0x00 ; '.'
000000000000f644         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000f645         db  0x80 ; '.'
000000000000f646         db  0x98 ; '.'
000000000000f647         db  0x00 ; '.'
000000000000f648         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000f649         db  0x80 ; '.'
000000000000f64a         db  0x99 ; '.'
000000000000f64b         db  0x00 ; '.'
000000000000f64c         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000f64d         db  0x07 ; '.'
000000000000f64e         db  0x65 ; 'e'
000000000000f64f         db  0x00 ; '.'
000000000000f650         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000f651         db  0xaf ; '.'
000000000000f652         db  0x00 ; '.'
000000000000f653         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_8090+1451, sub_8090+1493, sub_8090+2429
000000000000f654         db  0x00 ; '.'
000000000000f655         db  0x60 ; '`'                                         ; DATA XREF=sub_8090+1627, sub_8090+1654
000000000000f656         db  0x00 ; '.'
                     aLiteral:
000000000000f657         db         "literal", 0
                     aShell:
000000000000f65f         db         "shell", 0
                     aShellalways:
000000000000f665         db         "shell-always", 0
000000000000f672         db  0x73 ; 's'
000000000000f673         db  0x68 ; 'h'
000000000000f674         db  0x65 ; 'e'
000000000000f675         db  0x6c ; 'l'
000000000000f676         db  0x6c ; 'l'
000000000000f677         db  0x2d ; '-'
                     aEscape:
000000000000f678         db         "escape", 0
                     aShellescapealw:
000000000000f67f         db         "shell-escape-always", 0
                     aCmaybe:
000000000000f693         db         "c-maybe", 0
                     aClocale:
000000000000f69b         db         "clocale", 0
000000000000f6a3         align      64
                     switch_table_f6c0:        // switch_table
000000000000f6c0         dd         quotearg_buffer_restyled.loc_878a-switch_table_f6c0, quotearg_buffer_restyled.loc_79e3-switch_table_f6c0, quotearg_buffer_restyled.loc_89b8-switch_table_f6c0, quotearg_buffer_restyled.loc_87c4-switch_table_f6c0 ; switch table used at 0x79e1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000f6d0         dd         quotearg_buffer_restyled.loc_85b4-switch_table_f6c0, quotearg_buffer_restyled.loc_8610-switch_table_f6c0, quotearg_buffer_restyled.loc_8665-switch_table_f6c0, quotearg_buffer_restyled.loc_86aa-switch_table_f6c0
000000000000f6e0         dd         3 dup (quotearg_buffer_restyled.loc_86e4-switch_table_f6c0)
000000000000f6ec         db  0x74 ; 't'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000f6ed         db  0x86 ; '.'
000000000000f6ee         db  0xff ; '.'
000000000000f6ef         db  0xff ; '.'
000000000000f6f0         db  0x5c ; '\'
000000000000f6f1         db  0x87 ; '.'
000000000000f6f2         db  0xff ; '.'
000000000000f6f3         db  0xff ; '.'
000000000000f6f4         db  0x5c ; '\'
000000000000f6f5         db  0x87 ; '.'
000000000000f6f6         db  0xff ; '.'
000000000000f6f7         db  0xff ; '.'
000000000000f6f8         db  0x5c ; '\'
000000000000f6f9         db  0x87 ; '.'
000000000000f6fa         db  0xff ; '.'
000000000000f6fb         db  0xff ; '.'
000000000000f6fc         db  0x5c ; '\'
000000000000f6fd         db  0x87 ; '.'
000000000000f6fe         db  0xff ; '.'
000000000000f6ff         db  0xff ; '.'
000000000000f700         db  0x5c ; '\'
000000000000f701         db  0x87 ; '.'
000000000000f702         db  0xff ; '.'
000000000000f703         db  0xff ; '.'
000000000000f704         db  0x5c ; '\'
000000000000f705         db  0x87 ; '.'
000000000000f706         db  0xff ; '.'
000000000000f707         db  0xff ; '.'
000000000000f708         db  0xb4 ; '.'
000000000000f709         db  0x86 ; '.'
000000000000f70a         db  0xff ; '.'
000000000000f70b         db  0xff ; '.'
000000000000f70c         db  0xbc ; '.'
000000000000f70d         db  0x85 ; '.'
000000000000f70e         db  0xff ; '.'
000000000000f70f         db  0xff ; '.'
000000000000f710         db  0x7c ; '|'
000000000000f711         db  0x85 ; '.'
000000000000f712         db  0xff ; '.'
000000000000f713         db  0xff ; '.'
000000000000f714         db  0x44 ; 'D'
000000000000f715         db  0x87 ; '.'
000000000000f716         db  0xff ; '.'
000000000000f717         db  0xff ; '.'
000000000000f718         db  0x34 ; '4'
000000000000f719         db  0x87 ; '.'
000000000000f71a         db  0xff ; '.'
000000000000f71b         db  0xff ; '.'
000000000000f71c         db  0x24 ; '$'
000000000000f71d         db  0x87 ; '.'
000000000000f71e         db  0xff ; '.'
000000000000f71f         db  0xff ; '.'
000000000000f720         db  0x14 ; '.'
000000000000f721         db  0x87 ; '.'
000000000000f722         db  0xff ; '.'
000000000000f723         db  0xff ; '.'
000000000000f724         db  0x5c ; '\'
000000000000f725         db  0x87 ; '.'
000000000000f726         db  0xff ; '.'
000000000000f727         db  0xff ; '.'
000000000000f728         db  0x5c ; '\'
000000000000f729         db  0x87 ; '.'
000000000000f72a         db  0xff ; '.'
000000000000f72b         db  0xff ; '.'
000000000000f72c         db  0x5c ; '\'
000000000000f72d         db  0x87 ; '.'
000000000000f72e         db  0xff ; '.'
000000000000f72f         db  0xff ; '.'
000000000000f730         db  0x5c ; '\'
000000000000f731         db  0x87 ; '.'
000000000000f732         db  0xff ; '.'
000000000000f733         db  0xff ; '.'
000000000000f734         db  0x5c ; '\'
000000000000f735         db  0x87 ; '.'
000000000000f736         db  0xff ; '.'
000000000000f737         db  0xff ; '.'
000000000000f738         db  0x5c ; '\'
000000000000f739         db  0x87 ; '.'
000000000000f73a         db  0xff ; '.'
000000000000f73b         db  0xff ; '.'
000000000000f73c         db  0x5c ; '\'
000000000000f73d         db  0x87 ; '.'
000000000000f73e         db  0xff ; '.'
000000000000f73f         db  0xff ; '.'
000000000000f740         db  0x5c ; '\'
000000000000f741         db  0x87 ; '.'
000000000000f742         db  0xff ; '.'
000000000000f743         db  0xff ; '.'
000000000000f744         db  0x5c ; '\'
000000000000f745         db  0x87 ; '.'
000000000000f746         db  0xff ; '.'
000000000000f747         db  0xff ; '.'
000000000000f748         db  0x5c ; '\'
000000000000f749         db  0x87 ; '.'
000000000000f74a         db  0xff ; '.'
000000000000f74b         db  0xff ; '.'
000000000000f74c         db  0x5c ; '\'
000000000000f74d         db  0x87 ; '.'
000000000000f74e         db  0xff ; '.'
000000000000f74f         db  0xff ; '.'
000000000000f750         db  0x5c ; '\'
000000000000f751         db  0x87 ; '.'
000000000000f752         db  0xff ; '.'
000000000000f753         db  0xff ; '.'
000000000000f754         db  0x5c ; '\'
000000000000f755         db  0x87 ; '.'
000000000000f756         db  0xff ; '.'
000000000000f757         db  0xff ; '.'
000000000000f758         db  0x5c ; '\'
000000000000f759         db  0x87 ; '.'
000000000000f75a         db  0xff ; '.'
000000000000f75b         db  0xff ; '.'
000000000000f75c         db  0x5c ; '\'
000000000000f75d         db  0x87 ; '.'
000000000000f75e         db  0xff ; '.'
000000000000f75f         db  0xff ; '.'
000000000000f760         db  0x5c ; '\'
000000000000f761         db  0x87 ; '.'
000000000000f762         db  0xff ; '.'
000000000000f763         db  0xff ; '.'
000000000000f764         db  0x5c ; '\'
000000000000f765         db  0x87 ; '.'
000000000000f766         db  0xff ; '.'
000000000000f767         db  0xff ; '.'
000000000000f768         db  0x5c ; '\'
000000000000f769         db  0x87 ; '.'
000000000000f76a         db  0xff ; '.'
000000000000f76b         db  0xff ; '.'
000000000000f76c         db  0x04 ; '.'
000000000000f76d         db  0x87 ; '.'
000000000000f76e         db  0xff ; '.'
000000000000f76f         db  0xff ; '.'
000000000000f770         db  0xf4 ; '.'
000000000000f771         db  0x86 ; '.'
000000000000f772         db  0xff ; '.'
000000000000f773         db  0xff ; '.'
000000000000f774         db  0xf4 ; '.'
000000000000f775         db  0x86 ; '.'
000000000000f776         db  0xff ; '.'
000000000000f777         db  0xff ; '.'
000000000000f778         db  0xc4 ; '.'
000000000000f779         db  0x86 ; '.'
000000000000f77a         db  0xff ; '.'
000000000000f77b         db  0xff ; '.'
000000000000f77c         db  0xf4 ; '.'
000000000000f77d         db  0x86 ; '.'
000000000000f77e         db  0xff ; '.'
000000000000f77f         db  0xff ; '.'
000000000000f780         db  0x9c ; '.'
000000000000f781         db  0x86 ; '.'
000000000000f782         db  0xff ; '.'
000000000000f783         db  0xff ; '.'
000000000000f784         db  0xf4 ; '.'
000000000000f785         db  0x86 ; '.'
000000000000f786         db  0xff ; '.'
000000000000f787         db  0xff ; '.'
000000000000f788         db  0x57 ; 'W'
000000000000f789         db  0x85 ; '.'
000000000000f78a         db  0xff ; '.'
000000000000f78b         db  0xff ; '.'
000000000000f78c         db  0xf4 ; '.'
000000000000f78d         db  0x86 ; '.'
000000000000f78e         db  0xff ; '.'
000000000000f78f         db  0xff ; '.'
000000000000f790         db  0xf4 ; '.'
000000000000f791         db  0x86 ; '.'
000000000000f792         db  0xff ; '.'
000000000000f793         db  0xff ; '.'
000000000000f794         db  0xf4 ; '.'
000000000000f795         db  0x86 ; '.'
000000000000f796         db  0xff ; '.'
000000000000f797         db  0xff ; '.'
000000000000f798         db  0x9c ; '.'
000000000000f799         db  0x86 ; '.'
000000000000f79a         db  0xff ; '.'
000000000000f79b         db  0xff ; '.'
000000000000f79c         db  0x9c ; '.'
000000000000f79d         db  0x86 ; '.'
000000000000f79e         db  0xff ; '.'
000000000000f79f         db  0xff ; '.'
000000000000f7a0         db  0x9c ; '.'
000000000000f7a1         db  0x86 ; '.'
000000000000f7a2         db  0xff ; '.'
000000000000f7a3         db  0xff ; '.'
000000000000f7a4         db  0x9c ; '.'
000000000000f7a5         db  0x86 ; '.'
000000000000f7a6         db  0xff ; '.'
000000000000f7a7         db  0xff ; '.'
000000000000f7a8         db  0x9c ; '.'
000000000000f7a9         db  0x86 ; '.'
000000000000f7aa         db  0xff ; '.'
000000000000f7ab         db  0xff ; '.'
000000000000f7ac         db  0x9c ; '.'
000000000000f7ad         db  0x86 ; '.'
000000000000f7ae         db  0xff ; '.'
000000000000f7af         db  0xff ; '.'
000000000000f7b0         db  0x9c ; '.'
000000000000f7b1         db  0x86 ; '.'
000000000000f7b2         db  0xff ; '.'
000000000000f7b3         db  0xff ; '.'
000000000000f7b4         db  0x9c ; '.'
000000000000f7b5         db  0x86 ; '.'
000000000000f7b6         db  0xff ; '.'
000000000000f7b7         db  0xff ; '.'
000000000000f7b8         db  0x9c ; '.'
000000000000f7b9         db  0x86 ; '.'
000000000000f7ba         db  0xff ; '.'
000000000000f7bb         db  0xff ; '.'
000000000000f7bc         db  0x9c ; '.'
000000000000f7bd         db  0x86 ; '.'
000000000000f7be         db  0xff ; '.'
000000000000f7bf         db  0xff ; '.'
000000000000f7c0         db  0x9c ; '.'
000000000000f7c1         db  0x86 ; '.'
000000000000f7c2         db  0xff ; '.'
000000000000f7c3         db  0xff ; '.'
000000000000f7c4         db  0x9c ; '.'
000000000000f7c5         db  0x86 ; '.'
000000000000f7c6         db  0xff ; '.'
000000000000f7c7         db  0xff ; '.'
000000000000f7c8         db  0x9c ; '.'
000000000000f7c9         db  0x86 ; '.'
000000000000f7ca         db  0xff ; '.'
000000000000f7cb         db  0xff ; '.'
000000000000f7cc         db  0x9c ; '.'
000000000000f7cd         db  0x86 ; '.'
000000000000f7ce         db  0xff ; '.'
000000000000f7cf         db  0xff ; '.'
000000000000f7d0         db  0x9c ; '.'
000000000000f7d1         db  0x86 ; '.'
000000000000f7d2         db  0xff ; '.'
000000000000f7d3         db  0xff ; '.'
000000000000f7d4         db  0x9c ; '.'
000000000000f7d5         db  0x86 ; '.'
000000000000f7d6         db  0xff ; '.'
000000000000f7d7         db  0xff ; '.'
000000000000f7d8         db  0xf4 ; '.'
000000000000f7d9         db  0x86 ; '.'
000000000000f7da         db  0xff ; '.'
000000000000f7db         db  0xff ; '.'
000000000000f7dc         db  0xf4 ; '.'
000000000000f7dd         db  0x86 ; '.'
000000000000f7de         db  0xff ; '.'
000000000000f7df         db  0xff ; '.'
000000000000f7e0         db  0xf4 ; '.'
000000000000f7e1         db  0x86 ; '.'
000000000000f7e2         db  0xff ; '.'
000000000000f7e3         db  0xff ; '.'
000000000000f7e4         db  0xf4 ; '.'
000000000000f7e5         db  0x86 ; '.'
000000000000f7e6         db  0xff ; '.'
000000000000f7e7         db  0xff ; '.'
000000000000f7e8         db  0x27 ; '''
000000000000f7e9         db  0x85 ; '.'
000000000000f7ea         db  0xff ; '.'
000000000000f7eb         db  0xff ; '.'
000000000000f7ec         db  0x5c ; '\'
000000000000f7ed         db  0x87 ; '.'
000000000000f7ee         db  0xff ; '.'
000000000000f7ef         db  0xff ; '.'
000000000000f7f0         db  0x9c ; '.'
000000000000f7f1         db  0x86 ; '.'
000000000000f7f2         db  0xff ; '.'
000000000000f7f3         db  0xff ; '.'
000000000000f7f4         db  0x9c ; '.'
000000000000f7f5         db  0x86 ; '.'
000000000000f7f6         db  0xff ; '.'
000000000000f7f7         db  0xff ; '.'
000000000000f7f8         db  0x9c ; '.'
000000000000f7f9         db  0x86 ; '.'
000000000000f7fa         db  0xff ; '.'
000000000000f7fb         db  0xff ; '.'
000000000000f7fc         db  0x9c ; '.'
000000000000f7fd         db  0x86 ; '.'
000000000000f7fe         db  0xff ; '.'
000000000000f7ff         db  0xff ; '.'
000000000000f800         db  0x9c ; '.'
000000000000f801         db  0x86 ; '.'
000000000000f802         db  0xff ; '.'
000000000000f803         db  0xff ; '.'
000000000000f804         db  0x9c ; '.'
000000000000f805         db  0x86 ; '.'
000000000000f806         db  0xff ; '.'
000000000000f807         db  0xff ; '.'
000000000000f808         db  0x9c ; '.'
000000000000f809         db  0x86 ; '.'
000000000000f80a         db  0xff ; '.'
000000000000f80b         db  0xff ; '.'
000000000000f80c         db  0x9c ; '.'
000000000000f80d         db  0x86 ; '.'
000000000000f80e         db  0xff ; '.'
000000000000f80f         db  0xff ; '.'
000000000000f810         db  0x9c ; '.'
000000000000f811         db  0x86 ; '.'
000000000000f812         db  0xff ; '.'
000000000000f813         db  0xff ; '.'
000000000000f814         db  0x9c ; '.'
000000000000f815         db  0x86 ; '.'
000000000000f816         db  0xff ; '.'
000000000000f817         db  0xff ; '.'
000000000000f818         db  0x9c ; '.'
000000000000f819         db  0x86 ; '.'
000000000000f81a         db  0xff ; '.'
000000000000f81b         db  0xff ; '.'
000000000000f81c         db  0x9c ; '.'
000000000000f81d         db  0x86 ; '.'
000000000000f81e         db  0xff ; '.'
000000000000f81f         db  0xff ; '.'
000000000000f820         db  0x9c ; '.'
000000000000f821         db  0x86 ; '.'
000000000000f822         db  0xff ; '.'
000000000000f823         db  0xff ; '.'
000000000000f824         db  0x9c ; '.'
000000000000f825         db  0x86 ; '.'
000000000000f826         db  0xff ; '.'
000000000000f827         db  0xff ; '.'
000000000000f828         db  0x9c ; '.'
000000000000f829         db  0x86 ; '.'
000000000000f82a         db  0xff ; '.'
000000000000f82b         db  0xff ; '.'
000000000000f82c         db  0x9c ; '.'
000000000000f82d         db  0x86 ; '.'
000000000000f82e         db  0xff ; '.'
000000000000f82f         db  0xff ; '.'
000000000000f830         db  0x9c ; '.'
000000000000f831         db  0x86 ; '.'
000000000000f832         db  0xff ; '.'
000000000000f833         db  0xff ; '.'
000000000000f834         db  0x9c ; '.'
000000000000f835         db  0x86 ; '.'
000000000000f836         db  0xff ; '.'
000000000000f837         db  0xff ; '.'
000000000000f838         db  0x9c ; '.'
000000000000f839         db  0x86 ; '.'
000000000000f83a         db  0xff ; '.'
000000000000f83b         db  0xff ; '.'
000000000000f83c         db  0x9c ; '.'
000000000000f83d         db  0x86 ; '.'
000000000000f83e         db  0xff ; '.'
000000000000f83f         db  0xff ; '.'
000000000000f840         db  0x9c ; '.'
000000000000f841         db  0x86 ; '.'
000000000000f842         db  0xff ; '.'
000000000000f843         db  0xff ; '.'
000000000000f844         db  0x9c ; '.'
000000000000f845         db  0x86 ; '.'
000000000000f846         db  0xff ; '.'
000000000000f847         db  0xff ; '.'
000000000000f848         db  0x9c ; '.'
000000000000f849         db  0x86 ; '.'
000000000000f84a         db  0xff ; '.'
000000000000f84b         db  0xff ; '.'
000000000000f84c         db  0x9c ; '.'
000000000000f84d         db  0x86 ; '.'
000000000000f84e         db  0xff ; '.'
000000000000f84f         db  0xff ; '.'
000000000000f850         db  0x9c ; '.'
000000000000f851         db  0x86 ; '.'
000000000000f852         db  0xff ; '.'
000000000000f853         db  0xff ; '.'
000000000000f854         db  0x9c ; '.'
000000000000f855         db  0x86 ; '.'
000000000000f856         db  0xff ; '.'
000000000000f857         db  0xff ; '.'
000000000000f858         db  0xf4 ; '.'
000000000000f859         db  0x86 ; '.'
000000000000f85a         db  0xff ; '.'
000000000000f85b         db  0xff ; '.'
000000000000f85c         db  0xcc ; '.'
000000000000f85d         db  0x85 ; '.'
000000000000f85e         db  0xff ; '.'
000000000000f85f         db  0xff ; '.'
000000000000f860         db  0x9c ; '.'
000000000000f861         db  0x86 ; '.'
000000000000f862         db  0xff ; '.'
000000000000f863         db  0xff ; '.'
000000000000f864         db  0xf4 ; '.'
000000000000f865         db  0x86 ; '.'
000000000000f866         db  0xff ; '.'
000000000000f867         db  0xff ; '.'
000000000000f868         db  0x9c ; '.'
000000000000f869         db  0x86 ; '.'
000000000000f86a         db  0xff ; '.'
000000000000f86b         db  0xff ; '.'
000000000000f86c         db  0xf4 ; '.'
000000000000f86d         db  0x86 ; '.'
000000000000f86e         db  0xff ; '.'
000000000000f86f         db  0xff ; '.'
000000000000f870         db  0x9c ; '.'
000000000000f871         db  0x86 ; '.'
000000000000f872         db  0xff ; '.'
000000000000f873         db  0xff ; '.'
000000000000f874         db  0x9c ; '.'
000000000000f875         db  0x86 ; '.'
000000000000f876         db  0xff ; '.'
000000000000f877         db  0xff ; '.'
000000000000f878         db  0x9c ; '.'
000000000000f879         db  0x86 ; '.'
000000000000f87a         db  0xff ; '.'
000000000000f87b         db  0xff ; '.'
000000000000f87c         db  0x9c ; '.'
000000000000f87d         db  0x86 ; '.'
000000000000f87e         db  0xff ; '.'
000000000000f87f         db  0xff ; '.'
000000000000f880         db  0x9c ; '.'
000000000000f881         db  0x86 ; '.'
000000000000f882         db  0xff ; '.'
000000000000f883         db  0xff ; '.'
000000000000f884         db  0x9c ; '.'
000000000000f885         db  0x86 ; '.'
000000000000f886         db  0xff ; '.'
000000000000f887         db  0xff ; '.'
000000000000f888         db  0x9c ; '.'
000000000000f889         db  0x86 ; '.'
000000000000f88a         db  0xff ; '.'
000000000000f88b         db  0xff ; '.'
000000000000f88c         db  0x9c ; '.'
000000000000f88d         db  0x86 ; '.'
000000000000f88e         db  0xff ; '.'
000000000000f88f         db  0xff ; '.'
000000000000f890         db  0x9c ; '.'
000000000000f891         db  0x86 ; '.'
000000000000f892         db  0xff ; '.'
000000000000f893         db  0xff ; '.'
000000000000f894         db  0x9c ; '.'
000000000000f895         db  0x86 ; '.'
000000000000f896         db  0xff ; '.'
000000000000f897         db  0xff ; '.'
000000000000f898         db  0x9c ; '.'
000000000000f899         db  0x86 ; '.'
000000000000f89a         db  0xff ; '.'
000000000000f89b         db  0xff ; '.'
000000000000f89c         db  0x9c ; '.'
000000000000f89d         db  0x86 ; '.'
000000000000f89e         db  0xff ; '.'
000000000000f89f         db  0xff ; '.'
000000000000f8a0         db  0x9c ; '.'
000000000000f8a1         db  0x86 ; '.'
000000000000f8a2         db  0xff ; '.'
000000000000f8a3         db  0xff ; '.'
000000000000f8a4         db  0x9c ; '.'
000000000000f8a5         db  0x86 ; '.'
000000000000f8a6         db  0xff ; '.'
000000000000f8a7         db  0xff ; '.'
000000000000f8a8         db  0x9c ; '.'
000000000000f8a9         db  0x86 ; '.'
000000000000f8aa         db  0xff ; '.'
000000000000f8ab         db  0xff ; '.'
000000000000f8ac         db  0x9c ; '.'
000000000000f8ad         db  0x86 ; '.'
000000000000f8ae         db  0xff ; '.'
000000000000f8af         db  0xff ; '.'
000000000000f8b0         db  0x9c ; '.'
000000000000f8b1         db  0x86 ; '.'
000000000000f8b2         db  0xff ; '.'
000000000000f8b3         db  0xff ; '.'
000000000000f8b4         db  0x9c ; '.'
000000000000f8b5         db  0x86 ; '.'
000000000000f8b6         db  0xff ; '.'
000000000000f8b7         db  0xff ; '.'
000000000000f8b8         db  0x9c ; '.'
000000000000f8b9         db  0x86 ; '.'
000000000000f8ba         db  0xff ; '.'
000000000000f8bb         db  0xff ; '.'
000000000000f8bc         db  0x9c ; '.'
000000000000f8bd         db  0x86 ; '.'
000000000000f8be         db  0xff ; '.'
000000000000f8bf         db  0xff ; '.'
000000000000f8c0         db  0x9c ; '.'
000000000000f8c1         db  0x86 ; '.'
000000000000f8c2         db  0xff ; '.'
000000000000f8c3         db  0xff ; '.'
000000000000f8c4         db  0x9c ; '.'
000000000000f8c5         db  0x86 ; '.'
000000000000f8c6         db  0xff ; '.'
000000000000f8c7         db  0xff ; '.'
000000000000f8c8         db  0x9c ; '.'
000000000000f8c9         db  0x86 ; '.'
000000000000f8ca         db  0xff ; '.'
000000000000f8cb         db  0xff ; '.'
000000000000f8cc         db  0x9c ; '.'
000000000000f8cd         db  0x86 ; '.'
000000000000f8ce         db  0xff ; '.'
000000000000f8cf         db  0xff ; '.'
000000000000f8d0         db  0x9c ; '.'
000000000000f8d1         db  0x86 ; '.'
000000000000f8d2         db  0xff ; '.'
000000000000f8d3         db  0xff ; '.'
000000000000f8d4         db  0x9c ; '.'
000000000000f8d5         db  0x86 ; '.'
000000000000f8d6         db  0xff ; '.'
000000000000f8d7         db  0xff ; '.'
000000000000f8d8         db  0x57 ; 'W'
000000000000f8d9         db  0x84 ; '.'
000000000000f8da         db  0xff ; '.'
000000000000f8db         db  0xff ; '.'
000000000000f8dc         db  0xf4 ; '.'
000000000000f8dd         db  0x86 ; '.'
000000000000f8de         db  0xff ; '.'
000000000000f8df         db  0xff ; '.'
000000000000f8e0         db  0x57 ; 'W'
000000000000f8e1         db  0x84 ; '.'
000000000000f8e2         db  0xff ; '.'
000000000000f8e3         db  0xff ; '.'
000000000000f8e4         db  0xc4 ; '.'
000000000000f8e5         db  0x86 ; '.'
000000000000f8e6         db  0xff ; '.'
000000000000f8e7         db  0xff ; '.'
000000000000f8e8         db  0x48 ; 'H'                                         ; DATA XREF=sub_7e30+137
000000000000f8e9         db  0x86 ; '.'
000000000000f8ea         db  0xff ; '.'
000000000000f8eb         db  0xff ; '.'
000000000000f8ec         db  0x58 ; 'X'
000000000000f8ed         db  0x85 ; '.'
000000000000f8ee         db  0xff ; '.'
000000000000f8ef         db  0xff ; '.'
000000000000f8f0         db  0x58 ; 'X'
000000000000f8f1         db  0x85 ; '.'
000000000000f8f2         db  0xff ; '.'
000000000000f8f3         db  0xff ; '.'
000000000000f8f4         db  0x58 ; 'X'
000000000000f8f5         db  0x85 ; '.'
000000000000f8f6         db  0xff ; '.'
000000000000f8f7         db  0xff ; '.'
000000000000f8f8         db  0x58 ; 'X'
000000000000f8f9         db  0x85 ; '.'
000000000000f8fa         db  0xff ; '.'
000000000000f8fb         db  0xff ; '.'
000000000000f8fc         db  0x58 ; 'X'
000000000000f8fd         db  0x85 ; '.'
000000000000f8fe         db  0xff ; '.'
000000000000f8ff         db  0xff ; '.'
000000000000f900         db  0x58 ; 'X'
000000000000f901         db  0x85 ; '.'
000000000000f902         db  0xff ; '.'
000000000000f903         db  0xff ; '.'
000000000000f904         db  0x38 ; '8'
000000000000f905         db  0x86 ; '.'
000000000000f906         db  0xff ; '.'
000000000000f907         db  0xff ; '.'
000000000000f908         db  0x88 ; '.'
000000000000f909         db  0x87 ; '.'
000000000000f90a         db  0xff ; '.'
000000000000f90b         db  0xff ; '.'
000000000000f90c         db  0x70 ; 'p'
000000000000f90d         db  0x87 ; '.'
000000000000f90e         db  0xff ; '.'
000000000000f90f         db  0xff ; '.'
000000000000f910         db  0x20 ; ' '
000000000000f911         db  0x86 ; '.'
000000000000f912         db  0xff ; '.'
000000000000f913         db  0xff ; '.'
000000000000f914         db  0x60 ; '`'
000000000000f915         db  0x87 ; '.'
000000000000f916         db  0xff ; '.'
000000000000f917         db  0xff ; '.'
000000000000f918         db  0x08 ; '.'
000000000000f919         db  0x86 ; '.'
000000000000f91a         db  0xff ; '.'
000000000000f91b         db  0xff ; '.'
000000000000f91c         db  0x48 ; 'H'
000000000000f91d         db  0x87 ; '.'
000000000000f91e         db  0xff ; '.'
000000000000f91f         db  0xff ; '.'
000000000000f920         db  0x58 ; 'X'
000000000000f921         db  0x85 ; '.'
000000000000f922         db  0xff ; '.'
000000000000f923         db  0xff ; '.'
000000000000f924         db  0x58 ; 'X'
000000000000f925         db  0x85 ; '.'
000000000000f926         db  0xff ; '.'
000000000000f927         db  0xff ; '.'
000000000000f928         db  0x58 ; 'X'
000000000000f929         db  0x85 ; '.'
000000000000f92a         db  0xff ; '.'
000000000000f92b         db  0xff ; '.'
000000000000f92c         db  0x58 ; 'X'
000000000000f92d         db  0x85 ; '.'
000000000000f92e         db  0xff ; '.'
000000000000f92f         db  0xff ; '.'
000000000000f930         db  0x58 ; 'X'
000000000000f931         db  0x85 ; '.'
000000000000f932         db  0xff ; '.'
000000000000f933         db  0xff ; '.'
000000000000f934         db  0x58 ; 'X'
000000000000f935         db  0x85 ; '.'
000000000000f936         db  0xff ; '.'
000000000000f937         db  0xff ; '.'
000000000000f938         db  0x58 ; 'X'
000000000000f939         db  0x85 ; '.'
000000000000f93a         db  0xff ; '.'
000000000000f93b         db  0xff ; '.'
000000000000f93c         db  0x58 ; 'X'
000000000000f93d         db  0x85 ; '.'
000000000000f93e         db  0xff ; '.'
000000000000f93f         db  0xff ; '.'
000000000000f940         db  0x58 ; 'X'
000000000000f941         db  0x85 ; '.'
000000000000f942         db  0xff ; '.'
000000000000f943         db  0xff ; '.'
000000000000f944         db  0x58 ; 'X'
000000000000f945         db  0x85 ; '.'
000000000000f946         db  0xff ; '.'
000000000000f947         db  0xff ; '.'
000000000000f948         db  0x58 ; 'X'
000000000000f949         db  0x85 ; '.'
000000000000f94a         db  0xff ; '.'
000000000000f94b         db  0xff ; '.'
000000000000f94c         db  0x58 ; 'X'
000000000000f94d         db  0x85 ; '.'
000000000000f94e         db  0xff ; '.'
000000000000f94f         db  0xff ; '.'
000000000000f950         db  0x58 ; 'X'
000000000000f951         db  0x85 ; '.'
000000000000f952         db  0xff ; '.'
000000000000f953         db  0xff ; '.'
000000000000f954         db  0x58 ; 'X'
000000000000f955         db  0x85 ; '.'
000000000000f956         db  0xff ; '.'
000000000000f957         db  0xff ; '.'
000000000000f958         db  0x58 ; 'X'
000000000000f959         db  0x85 ; '.'
000000000000f95a         db  0xff ; '.'
000000000000f95b         db  0xff ; '.'
000000000000f95c         db  0x58 ; 'X'
000000000000f95d         db  0x85 ; '.'
000000000000f95e         db  0xff ; '.'
000000000000f95f         db  0xff ; '.'
000000000000f960         db  0x58 ; 'X'
000000000000f961         db  0x85 ; '.'
000000000000f962         db  0xff ; '.'
000000000000f963         db  0xff ; '.'
000000000000f964         db  0x58 ; 'X'
000000000000f965         db  0x85 ; '.'
000000000000f966         db  0xff ; '.'
000000000000f967         db  0xff ; '.'
000000000000f968         db  0x30 ; '0'
000000000000f969         db  0x87 ; '.'
000000000000f96a         db  0xff ; '.'
000000000000f96b         db  0xff ; '.'
000000000000f96c         db  0x18 ; '.'
000000000000f96d         db  0x87 ; '.'
000000000000f96e         db  0xff ; '.'
000000000000f96f         db  0xff ; '.'
000000000000f970         db  0x18 ; '.'
000000000000f971         db  0x87 ; '.'
000000000000f972         db  0xff ; '.'
000000000000f973         db  0xff ; '.'
000000000000f974         db  0x00 ; '.'
000000000000f975         db  0x87 ; '.'
000000000000f976         db  0xff ; '.'
000000000000f977         db  0xff ; '.'
000000000000f978         db  0x18 ; '.'
000000000000f979         db  0x87 ; '.'
000000000000f97a         db  0xff ; '.'
000000000000f97b         db  0xff ; '.'
000000000000f97c         db  0xe8 ; '.'
000000000000f97d         db  0x86 ; '.'
000000000000f97e         db  0xff ; '.'
000000000000f97f         db  0xff ; '.'
000000000000f980         db  0x18 ; '.'
000000000000f981         db  0x87 ; '.'
000000000000f982         db  0xff ; '.'
000000000000f983         db  0xff ; '.'
000000000000f984         db  0x58 ; 'X'
000000000000f985         db  0x83 ; '.'
000000000000f986         db  0xff ; '.'
000000000000f987         db  0xff ; '.'
000000000000f988         db  0x18 ; '.'
000000000000f989         db  0x87 ; '.'
000000000000f98a         db  0xff ; '.'
000000000000f98b         db  0xff ; '.'
000000000000f98c         db  0x18 ; '.'
000000000000f98d         db  0x87 ; '.'
000000000000f98e         db  0xff ; '.'
000000000000f98f         db  0xff ; '.'
000000000000f990         db  0x18 ; '.'
000000000000f991         db  0x87 ; '.'
000000000000f992         db  0xff ; '.'
000000000000f993         db  0xff ; '.'
000000000000f994         db  0xe8 ; '.'
000000000000f995         db  0x86 ; '.'
000000000000f996         db  0xff ; '.'
000000000000f997         db  0xff ; '.'
000000000000f998         db  0xe8 ; '.'
000000000000f999         db  0x86 ; '.'
000000000000f99a         db  0xff ; '.'
000000000000f99b         db  0xff ; '.'
000000000000f99c         db  0xe8 ; '.'
000000000000f99d         db  0x86 ; '.'
000000000000f99e         db  0xff ; '.'
000000000000f99f         db  0xff ; '.'
000000000000f9a0         db  0xe8 ; '.'
000000000000f9a1         db  0x86 ; '.'
000000000000f9a2         db  0xff ; '.'
000000000000f9a3         db  0xff ; '.'
000000000000f9a4         db  0xe8 ; '.'
000000000000f9a5         db  0x86 ; '.'
000000000000f9a6         db  0xff ; '.'
000000000000f9a7         db  0xff ; '.'
000000000000f9a8         db  0xe8 ; '.'
000000000000f9a9         db  0x86 ; '.'
000000000000f9aa         db  0xff ; '.'
000000000000f9ab         db  0xff ; '.'
000000000000f9ac         db  0xe8 ; '.'
000000000000f9ad         db  0x86 ; '.'
000000000000f9ae         db  0xff ; '.'
000000000000f9af         db  0xff ; '.'
000000000000f9b0         db  0xe8 ; '.'
000000000000f9b1         db  0x86 ; '.'
000000000000f9b2         db  0xff ; '.'
000000000000f9b3         db  0xff ; '.'
000000000000f9b4         db  0xe8 ; '.'
000000000000f9b5         db  0x86 ; '.'
000000000000f9b6         db  0xff ; '.'
000000000000f9b7         db  0xff ; '.'
000000000000f9b8         db  0xe8 ; '.'
000000000000f9b9         db  0x86 ; '.'
000000000000f9ba         db  0xff ; '.'
000000000000f9bb         db  0xff ; '.'
000000000000f9bc         db  0xe8 ; '.'
000000000000f9bd         db  0x86 ; '.'
000000000000f9be         db  0xff ; '.'
000000000000f9bf         db  0xff ; '.'
000000000000f9c0         db  0xe8 ; '.'
000000000000f9c1         db  0x86 ; '.'
000000000000f9c2         db  0xff ; '.'
000000000000f9c3         db  0xff ; '.'
000000000000f9c4         db  0xe8 ; '.'
000000000000f9c5         db  0x86 ; '.'
000000000000f9c6         db  0xff ; '.'
000000000000f9c7         db  0xff ; '.'
000000000000f9c8         db  0xe8 ; '.'
000000000000f9c9         db  0x86 ; '.'
000000000000f9ca         db  0xff ; '.'
000000000000f9cb         db  0xff ; '.'
000000000000f9cc         db  0xe8 ; '.'
000000000000f9cd         db  0x86 ; '.'
000000000000f9ce         db  0xff ; '.'
000000000000f9cf         db  0xff ; '.'
000000000000f9d0         db  0xe8 ; '.'
000000000000f9d1         db  0x86 ; '.'
000000000000f9d2         db  0xff ; '.'
000000000000f9d3         db  0xff ; '.'
000000000000f9d4         db  0x18 ; '.'
000000000000f9d5         db  0x87 ; '.'
000000000000f9d6         db  0xff ; '.'
000000000000f9d7         db  0xff ; '.'
000000000000f9d8         db  0x18 ; '.'
000000000000f9d9         db  0x87 ; '.'
000000000000f9da         db  0xff ; '.'
000000000000f9db         db  0xff ; '.'
000000000000f9dc         db  0x18 ; '.'
000000000000f9dd         db  0x87 ; '.'
000000000000f9de         db  0xff ; '.'
000000000000f9df         db  0xff ; '.'
000000000000f9e0         db  0x18 ; '.'
000000000000f9e1         db  0x87 ; '.'
000000000000f9e2         db  0xff ; '.'
000000000000f9e3         db  0xff ; '.'
000000000000f9e4         db  0x28 ; '('
000000000000f9e5         db  0x83 ; '.'
000000000000f9e6         db  0xff ; '.'
000000000000f9e7         db  0xff ; '.'
000000000000f9e8         db  0x58 ; 'X'
000000000000f9e9         db  0x85 ; '.'
000000000000f9ea         db  0xff ; '.'
000000000000f9eb         db  0xff ; '.'
000000000000f9ec         db  0xe8 ; '.'
000000000000f9ed         db  0x86 ; '.'
000000000000f9ee         db  0xff ; '.'
000000000000f9ef         db  0xff ; '.'
000000000000f9f0         db  0xe8 ; '.'
000000000000f9f1         db  0x86 ; '.'
000000000000f9f2         db  0xff ; '.'
000000000000f9f3         db  0xff ; '.'
000000000000f9f4         db  0xe8 ; '.'
000000000000f9f5         db  0x86 ; '.'
000000000000f9f6         db  0xff ; '.'
000000000000f9f7         db  0xff ; '.'
000000000000f9f8         db  0xe8 ; '.'
000000000000f9f9         db  0x86 ; '.'
000000000000f9fa         db  0xff ; '.'
000000000000f9fb         db  0xff ; '.'
000000000000f9fc         db  0xe8 ; '.'
000000000000f9fd         db  0x86 ; '.'
000000000000f9fe         db  0xff ; '.'
000000000000f9ff         db  0xff ; '.'
000000000000fa00         db  0xe8 ; '.'
000000000000fa01         db  0x86 ; '.'
000000000000fa02         db  0xff ; '.'
000000000000fa03         db  0xff ; '.'
000000000000fa04         db  0xe8 ; '.'
000000000000fa05         db  0x86 ; '.'
000000000000fa06         db  0xff ; '.'
000000000000fa07         db  0xff ; '.'
000000000000fa08         db  0xe8 ; '.'
000000000000fa09         db  0x86 ; '.'
000000000000fa0a         db  0xff ; '.'
000000000000fa0b         db  0xff ; '.'
000000000000fa0c         db  0xe8 ; '.'
000000000000fa0d         db  0x86 ; '.'
000000000000fa0e         db  0xff ; '.'
000000000000fa0f         db  0xff ; '.'
000000000000fa10         db  0xe8 ; '.'
000000000000fa11         db  0x86 ; '.'
000000000000fa12         db  0xff ; '.'
000000000000fa13         db  0xff ; '.'
000000000000fa14         db  0xe8 ; '.'
000000000000fa15         db  0x86 ; '.'
000000000000fa16         db  0xff ; '.'
000000000000fa17         db  0xff ; '.'
000000000000fa18         db  0xe8 ; '.'
000000000000fa19         db  0x86 ; '.'
000000000000fa1a         db  0xff ; '.'
000000000000fa1b         db  0xff ; '.'
000000000000fa1c         db  0xe8 ; '.'
000000000000fa1d         db  0x86 ; '.'
000000000000fa1e         db  0xff ; '.'
000000000000fa1f         db  0xff ; '.'
000000000000fa20         db  0xe8 ; '.'
000000000000fa21         db  0x86 ; '.'
000000000000fa22         db  0xff ; '.'
000000000000fa23         db  0xff ; '.'
000000000000fa24         db  0xe8 ; '.'
000000000000fa25         db  0x86 ; '.'
000000000000fa26         db  0xff ; '.'
000000000000fa27         db  0xff ; '.'
000000000000fa28         db  0xe8 ; '.'
000000000000fa29         db  0x86 ; '.'
000000000000fa2a         db  0xff ; '.'
000000000000fa2b         db  0xff ; '.'
000000000000fa2c         db  0xe8 ; '.'
000000000000fa2d         db  0x86 ; '.'
000000000000fa2e         db  0xff ; '.'
000000000000fa2f         db  0xff ; '.'
000000000000fa30         db  0xe8 ; '.'
000000000000fa31         db  0x86 ; '.'
000000000000fa32         db  0xff ; '.'
000000000000fa33         db  0xff ; '.'
000000000000fa34         db  0xe8 ; '.'
000000000000fa35         db  0x86 ; '.'
000000000000fa36         db  0xff ; '.'
000000000000fa37         db  0xff ; '.'
000000000000fa38         db  0xe8 ; '.'
000000000000fa39         db  0x86 ; '.'
000000000000fa3a         db  0xff ; '.'
000000000000fa3b         db  0xff ; '.'
000000000000fa3c         db  0xe8 ; '.'
000000000000fa3d         db  0x86 ; '.'
000000000000fa3e         db  0xff ; '.'
000000000000fa3f         db  0xff ; '.'
000000000000fa40         db  0xe8 ; '.'
000000000000fa41         db  0x86 ; '.'
000000000000fa42         db  0xff ; '.'
000000000000fa43         db  0xff ; '.'
000000000000fa44         db  0xe8 ; '.'
000000000000fa45         db  0x86 ; '.'
000000000000fa46         db  0xff ; '.'
000000000000fa47         db  0xff ; '.'
000000000000fa48         db  0xe8 ; '.'
000000000000fa49         db  0x86 ; '.'
000000000000fa4a         db  0xff ; '.'
000000000000fa4b         db  0xff ; '.'
000000000000fa4c         db  0xe8 ; '.'
000000000000fa4d         db  0x86 ; '.'
000000000000fa4e         db  0xff ; '.'
000000000000fa4f         db  0xff ; '.'
000000000000fa50         db  0xe8 ; '.'
000000000000fa51         db  0x86 ; '.'
000000000000fa52         db  0xff ; '.'
000000000000fa53         db  0xff ; '.'
000000000000fa54         db  0x18 ; '.'
000000000000fa55         db  0x87 ; '.'
000000000000fa56         db  0xff ; '.'
000000000000fa57         db  0xff ; '.'
000000000000fa58         db  0xe8 ; '.'
000000000000fa59         db  0x85 ; '.'
000000000000fa5a         db  0xff ; '.'
000000000000fa5b         db  0xff ; '.'
000000000000fa5c         db  0xe8 ; '.'
000000000000fa5d         db  0x86 ; '.'
000000000000fa5e         db  0xff ; '.'
000000000000fa5f         db  0xff ; '.'
000000000000fa60         db  0x18 ; '.'
000000000000fa61         db  0x87 ; '.'
000000000000fa62         db  0xff ; '.'
000000000000fa63         db  0xff ; '.'
000000000000fa64         db  0xe8 ; '.'
000000000000fa65         db  0x86 ; '.'
000000000000fa66         db  0xff ; '.'
000000000000fa67         db  0xff ; '.'
000000000000fa68         db  0x18 ; '.'
000000000000fa69         db  0x87 ; '.'
000000000000fa6a         db  0xff ; '.'
000000000000fa6b         db  0xff ; '.'
000000000000fa6c         db  0xe8 ; '.'
000000000000fa6d         db  0x86 ; '.'
000000000000fa6e         db  0xff ; '.'
000000000000fa6f         db  0xff ; '.'
000000000000fa70         db  0xe8 ; '.'
000000000000fa71         db  0x86 ; '.'
000000000000fa72         db  0xff ; '.'
000000000000fa73         db  0xff ; '.'
000000000000fa74         db  0xe8 ; '.'
000000000000fa75         db  0x86 ; '.'
000000000000fa76         db  0xff ; '.'
000000000000fa77         db  0xff ; '.'
000000000000fa78         db  0xe8 ; '.'
000000000000fa79         db  0x86 ; '.'
000000000000fa7a         db  0xff ; '.'
000000000000fa7b         db  0xff ; '.'
000000000000fa7c         db  0xe8 ; '.'
000000000000fa7d         db  0x86 ; '.'
000000000000fa7e         db  0xff ; '.'
000000000000fa7f         db  0xff ; '.'
000000000000fa80         db  0xe8 ; '.'
000000000000fa81         db  0x86 ; '.'
000000000000fa82         db  0xff ; '.'
000000000000fa83         db  0xff ; '.'
000000000000fa84         db  0xe8 ; '.'
000000000000fa85         db  0x86 ; '.'
000000000000fa86         db  0xff ; '.'
000000000000fa87         db  0xff ; '.'
000000000000fa88         db  0xe8 ; '.'
000000000000fa89         db  0x86 ; '.'
000000000000fa8a         db  0xff ; '.'
000000000000fa8b         db  0xff ; '.'
000000000000fa8c         db  0xe8 ; '.'
000000000000fa8d         db  0x86 ; '.'
000000000000fa8e         db  0xff ; '.'
000000000000fa8f         db  0xff ; '.'
000000000000fa90         db  0xe8 ; '.'
000000000000fa91         db  0x86 ; '.'
000000000000fa92         db  0xff ; '.'
000000000000fa93         db  0xff ; '.'
000000000000fa94         db  0xe8 ; '.'
000000000000fa95         db  0x86 ; '.'
000000000000fa96         db  0xff ; '.'
000000000000fa97         db  0xff ; '.'
000000000000fa98         db  0xe8 ; '.'
000000000000fa99         db  0x86 ; '.'
000000000000fa9a         db  0xff ; '.'
000000000000fa9b         db  0xff ; '.'
000000000000fa9c         db  0xe8 ; '.'
000000000000fa9d         db  0x86 ; '.'
000000000000fa9e         db  0xff ; '.'
000000000000fa9f         db  0xff ; '.'
000000000000faa0         db  0xe8 ; '.'
000000000000faa1         db  0x86 ; '.'
000000000000faa2         db  0xff ; '.'
000000000000faa3         db  0xff ; '.'
000000000000faa4         db  0xe8 ; '.'
000000000000faa5         db  0x86 ; '.'
000000000000faa6         db  0xff ; '.'
000000000000faa7         db  0xff ; '.'
000000000000faa8         db  0xe8 ; '.'
000000000000faa9         db  0x86 ; '.'
000000000000faaa         db  0xff ; '.'
000000000000faab         db  0xff ; '.'
000000000000faac         db  0xe8 ; '.'
000000000000faad         db  0x86 ; '.'
000000000000faae         db  0xff ; '.'
000000000000faaf         db  0xff ; '.'
000000000000fab0         db  0xe8 ; '.'
000000000000fab1         db  0x86 ; '.'
000000000000fab2         db  0xff ; '.'
000000000000fab3         db  0xff ; '.'
000000000000fab4         db  0xe8 ; '.'
000000000000fab5         db  0x86 ; '.'
000000000000fab6         db  0xff ; '.'
000000000000fab7         db  0xff ; '.'
000000000000fab8         db  0xe8 ; '.'
000000000000fab9         db  0x86 ; '.'
000000000000faba         db  0xff ; '.'
000000000000fabb         db  0xff ; '.'
000000000000fabc         db  0xe8 ; '.'
000000000000fabd         db  0x86 ; '.'
000000000000fabe         db  0xff ; '.'
000000000000fabf         db  0xff ; '.'
000000000000fac0         db  0xe8 ; '.'
000000000000fac1         db  0x86 ; '.'
000000000000fac2         db  0xff ; '.'
000000000000fac3         db  0xff ; '.'
000000000000fac4         db  0xe8 ; '.'
000000000000fac5         db  0x86 ; '.'
000000000000fac6         db  0xff ; '.'
000000000000fac7         db  0xff ; '.'
000000000000fac8         db  0xe8 ; '.'
000000000000fac9         db  0x86 ; '.'
000000000000faca         db  0xff ; '.'
000000000000facb         db  0xff ; '.'
000000000000facc         db  0xe8 ; '.'
000000000000facd         db  0x86 ; '.'
000000000000face         db  0xff ; '.'
000000000000facf         db  0xff ; '.'
000000000000fad0         db  0xe8 ; '.'
000000000000fad1         db  0x86 ; '.'
000000000000fad2         db  0xff ; '.'
000000000000fad3         db  0xff ; '.'
000000000000fad4         db  0x58 ; 'X'
000000000000fad5         db  0x82 ; '.'
000000000000fad6         db  0xff ; '.'
000000000000fad7         db  0xff ; '.'
000000000000fad8         db  0x18 ; '.'
000000000000fad9         db  0x87 ; '.'
000000000000fada         db  0xff ; '.'
000000000000fadb         db  0xff ; '.'
000000000000fadc         db  0x58 ; 'X'
000000000000fadd         db  0x82 ; '.'
000000000000fade         db  0xff ; '.'
000000000000fadf         db  0xff ; '.'
000000000000fae0         db  0x00 ; '.'
000000000000fae1         db  0x87 ; '.'
000000000000fae2         db  0xff ; '.'
000000000000fae3         db  0xff ; '.'
000000000000fae4         db  0x00 ; '.'
000000000000fae5         db  0x00 ; '.'
000000000000fae6         db  0x00 ; '.'
000000000000fae7         db  0x00 ; '.'
000000000000fae8         db  0x00 ; '.'
000000000000fae9         db  0x00 ; '.'
000000000000faea         db  0x00 ; '.'
000000000000faeb         db  0x00 ; '.'
000000000000faec         db  0x00 ; '.'
000000000000faed         db  0x00 ; '.'
000000000000faee         db  0x00 ; '.'
000000000000faef         db  0x00 ; '.'
000000000000faf0         db  0x00 ; '.'
000000000000faf1         db  0x00 ; '.'
000000000000faf2         db  0x00 ; '.'
000000000000faf3         db  0x00 ; '.'
000000000000faf4         db  0x00 ; '.'
000000000000faf5         db  0x00 ; '.'
000000000000faf6         db  0x00 ; '.'
000000000000faf7         db  0x00 ; '.'
000000000000faf8         db  0x00 ; '.'
000000000000faf9         db  0x00 ; '.'
000000000000fafa         db  0x00 ; '.'
000000000000fafb         db  0x00 ; '.'
000000000000fafc         db  0x00 ; '.'
000000000000fafd         db  0x00 ; '.'
000000000000fafe         db  0x00 ; '.'
000000000000faff         db  0x00 ; '.'
                     quoting_style_vals:
000000000000fb00         db  0x00 ; '.'                                         ; DATA XREF=main+544, main+579
000000000000fb01         db  0x00 ; '.'
000000000000fb02         db  0x00 ; '.'
000000000000fb03         db  0x00 ; '.'
000000000000fb04         db  0x01 ; '.'
000000000000fb05         db  0x00 ; '.'
000000000000fb06         db  0x00 ; '.'
000000000000fb07         db  0x00 ; '.'
000000000000fb08         db  0x02 ; '.'
000000000000fb09         db  0x00 ; '.'
000000000000fb0a         db  0x00 ; '.'
000000000000fb0b         db  0x00 ; '.'
000000000000fb0c         db  0x03 ; '.'
000000000000fb0d         db  0x00 ; '.'
000000000000fb0e         db  0x00 ; '.'
000000000000fb0f         db  0x00 ; '.'
000000000000fb10         db  0x04 ; '.'
000000000000fb11         db  0x00 ; '.'
000000000000fb12         db  0x00 ; '.'
000000000000fb13         db  0x00 ; '.'
000000000000fb14         db  0x05 ; '.'
000000000000fb15         db  0x00 ; '.'
000000000000fb16         db  0x00 ; '.'
000000000000fb17         db  0x00 ; '.'
000000000000fb18         db  0x06 ; '.'
000000000000fb19         db  0x00 ; '.'
000000000000fb1a         db  0x00 ; '.'
000000000000fb1b         db  0x00 ; '.'
000000000000fb1c         db  0x07 ; '.'
000000000000fb1d         db  0x00 ; '.'
000000000000fb1e         db  0x00 ; '.'
000000000000fb1f         db  0x00 ; '.'
000000000000fb20         db  0x08 ; '.'
000000000000fb21         db  0x00 ; '.'
000000000000fb22         db  0x00 ; '.'
000000000000fb23         db  0x00 ; '.'
000000000000fb24         db  0x09 ; '.'
000000000000fb25         db  0x00 ; '.'
000000000000fb26         db  0x00 ; '.'
000000000000fb27         db  0x00 ; '.'
                     aSSSn:
000000000000fb28         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000fb34         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000fb3b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000fb3c         db  0x43 ; 'C'
000000000000fb3d         db  0x29 ; ')'
000000000000fb3e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000fb3f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000fb4f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000fb66         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000fb82         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000000fb97         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000fbad         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000fbc1         align      8
                     aNlicenseGplv3G:
000000000000fbc8         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000fc94         align      8
                     aWrittenBySSSna:
000000000000fc98         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_fcb8:        // aWrittenBySSSns
000000000000fcb8         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000fcdc         align      32
                     aWrittenBySSSns_fce0:        // aWrittenBySSSns
000000000000fce0         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_fd08:        // aWrittenBySSSns
000000000000fd08         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000fd34         align      8
                     aWrittenBySSSns_fd38:        // aWrittenBySSSns
000000000000fd38         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000fd68         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000fd9c         align      32
                     aWrittenBySSSns_fda0:        // aWrittenBySSSns
000000000000fda0         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000fddc         align      32
                     aGeneralHelpUsi:
000000000000fde0         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000fe21         align      4
                     switch_table_fe24:        // switch_table
000000000000fe24         dd         version_etc_arn.loc_96a6-switch_table_fe24, version_etc_arn.loc_9738-switch_table_fe24, version_etc_arn.loc_9778-switch_table_fe24, version_etc_arn.loc_97c0-switch_table_fe24 ; switch table used at 0x9624 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000fe34         dd         version_etc_arn.loc_9810-switch_table_fe24, version_etc_arn.loc_9868-switch_table_fe24, version_etc_arn.loc_9898-switch_table_fe24, version_etc_arn.loc_9900-switch_table_fe24
000000000000fe44         dd         version_etc_arn.loc_9630-switch_table_fe24, version_etc_arn.loc_96e0-switch_table_fe24
000000000000fe4c         align      32
                     version_etc_copyright:
000000000000fe60         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000fe8f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
000000000000fea0         db         "../coreutils-8.31/lib/chdir-long.c", 0     ; DATA XREF=cdb_free+41, chdir_long+569, chdir_long+605, chdir_long+636, chdir_long+667, chdir_long+698
                     aClosefail:
000000000000fec3         db         "! close_fail", 0                           ; DATA XREF=cdb_free+48
                     a0Len:
000000000000fed0         db         "0 < len", 0                                ; DATA XREF=chdir_long+612
                     a4096Len:
000000000000fed8         db         "4096 <= len", 0                            ; DATA XREF=chdir_long+643
000000000000fee4         db  0x2a ; '*'                                         ; DATA XREF=chdir_long+705
000000000000fee5         db  0x64 ; 'd'
000000000000fee6         db  0x69 ; 'i'
000000000000fee7         db  0x72 ; 'r'
000000000000fee8         db  0x20 ; ' '
000000000000fee9         db  0x21 ; '!'
000000000000feea         db  0x3d ; '='
000000000000feeb         db  0x20 ; ' '
000000000000feec         db  0x27 ; '''
000000000000feed         db  0x2f ; '/'
000000000000feee         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_8090+132, sub_8090+1338, sub_8090+1670, sub_8090+1697, sub_8090+2352
000000000000feef         db  0x00 ; '.'
                     aDirDirend:
000000000000fef0         db         "dir <= dir_end", 0                         ; DATA XREF=chdir_long+674
                     aSlashDir4096:
000000000000feff         db         "slash - dir < 4096", 0                     ; DATA XREF=chdir_long+576
000000000000ff12         align      8
                     __PRETTY_FUNCTION__.5081:
000000000000ff18         db         "cdb_free", 0                               ; DATA XREF=cdb_free+34
000000000000ff21         align      8
                     __PRETTY_FUNCTION__.5099:
000000000000ff28         db         "chdir_long", 0                             ; DATA XREF=chdir_long+562, chdir_long+598, chdir_long+629, chdir_long+660, chdir_long+691
                     aProcselfmounti:
000000000000ff33         db         "/proc/self/mountinfo", 0                   ; DATA XREF=read_file_system_list+15
000000000000ff48         db  0x20 ; ' '                                         ; DATA XREF=read_file_system_list+203
000000000000ff49         db  0x2d ; '-'
000000000000ff4a         db  0x20 ; ' '
000000000000ff4b         db  0x00 ; '.'
                     aNsnNsnC:
000000000000ff4c         db         " - %n%*s%n %n%*s%n %c", 0                  ; DATA XREF=read_file_system_list+247
                     aSubfs:
000000000000ff62         db         "subfs", 0                                  ; DATA XREF=read_file_system_list+776, read_file_system_list+1367
                     aKernfs:
000000000000ff68         db         "kernfs", 0                                 ; DATA XREF=read_file_system_list+1016, read_file_system_list+1599
                     aIgnore:
000000000000ff6f         db         "ignore", 0                                 ; DATA XREF=read_file_system_list+1046, read_file_system_list+1625
000000000000ff76         db  0x6e ; 'n'                                         ; DATA XREF=read_file_system_list+1078, read_file_system_list+1653
000000000000ff77         db  0x6f ; 'o'
000000000000ff78         db  0x6e ; 'n'
000000000000ff79         db  0x65 ; 'e'
000000000000ff7a         db  0x00 ; '.'
                     aSmbfs:
000000000000ff7b         db         "smbfs", 0                                  ; DATA XREF=read_file_system_list+1931, read_file_system_list+2007
                     aHosts:
000000000000ff81         db         "-hosts", 0                                 ; DATA XREF=read_file_system_list+1114, read_file_system_list+1886
                     aEtcmtab:
000000000000ff88         db         "/etc/mtab", 0                              ; DATA XREF=read_file_system_list+1159
000000000000ff92         db  0x62 ; 'b'                                         ; DATA XREF=read_file_system_list+1216
000000000000ff93         db  0x69 ; 'i'
000000000000ff94         db  0x6e ; 'n'
000000000000ff95         db  0x64 ; 'd'
000000000000ff96         db  0x00 ; '.'
000000000000ff97         db  0x00 ; '.'
                     aUUUuNsnNsnc:
000000000000ff98         db         "%*u %*u %u:%u %n%*s%n %n%*s%n%c", 0        ; DATA XREF=read_file_system_list+144
000000000000ffb8         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000ffb9         db  0x00 ; '.'
                     aPosix:
000000000000ffba         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
000000000000ffc0         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000ffc6         align      8
                     switch_table_ffc8:        // switch_table
000000000000ffc8         dd         vasnprintf.loc_c8e6-switch_table_ffc8, vasnprintf.loc_c380-switch_table_ffc8, vasnprintf.loc_c350-switch_table_ffc8, vasnprintf.loc_c2c8-switch_table_ffc8 ; switch table used at 0xbf1b containing 18 entries, DATA XREF=vasnprintf+1357
000000000000ffd8         dd         vasnprintf.loc_c288-switch_table_ffc8, 2 dup (vasnprintf.loc_c058-switch_table_ffc8), 4 dup (vasnprintf.loc_bf20-switch_table_ffc8), vasnprintf.loc_c208-switch_table_ffc8
000000000000fff8         dd         vasnprintf.loc_c180-switch_table_ffc8, 2 dup (vasnprintf.loc_c058-switch_table_ffc8), 3 dup (vasnprintf.loc_bf20-switch_table_ffc8)
                     switch_table_10010:        // switch_table
0000000000010010         dd         vasnprintf.loc_c730-switch_table_10010, vasnprintf.loc_c750-switch_table_10010, vasnprintf.loc_c740-switch_table_10010, 2 dup (vasnprintf.loc_c600-switch_table_10010) ; switch table used at 0xc4c0 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
0000000000010024         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
000000000001002b         db  0x00 ; '.'
000000000001002c         db  0x00 ; '.'
000000000001002d         db  0x00 ; '.'
000000000001002e         db  0x00 ; '.'
000000000001002f         db  0x00 ; '.'
0000000000010030         db  0x20 ; ' '                                         ; DATA XREF=printf_fetchargs+10
0000000000010031         db  0xcb ; '.'
0000000000010032         db  0xff ; '.'
0000000000010033         db  0xff ; '.'
0000000000010034         db  0x6c ; 'l'
0000000000010035         db  0xcb ; '.'
0000000000010036         db  0xff ; '.'
0000000000010037         db  0xff ; '.'
0000000000010038         db  0x6c ; 'l'
0000000000010039         db  0xcb ; '.'
000000000001003a         db  0xff ; '.'
000000000001003b         db  0xff ; '.'
000000000001003c         db  0x8e ; '.'
000000000001003d         db  0xcb ; '.'
000000000001003e         db  0xff ; '.'
000000000001003f         db  0xff ; '.'
0000000000010040         db  0x8e ; '.'
0000000000010041         db  0xcb ; '.'
0000000000010042         db  0xff ; '.'
0000000000010043         db  0xff ; '.'
0000000000010044         db  0x4a ; 'J'
0000000000010045         db  0xcb ; '.'
0000000000010046         db  0xff ; '.'
0000000000010047         db  0xff ; '.'
0000000000010048         db  0x4a ; 'J'
0000000000010049         db  0xcb ; '.'
000000000001004a         db  0xff ; '.'
000000000001004b         db  0xff ; '.'
000000000001004c         db  0x26 ; '&'
000000000001004d         db  0xcb ; '.'
000000000001004e         db  0xff ; '.'
000000000001004f         db  0xff ; '.'
0000000000010050         db  0x26 ; '&'
0000000000010051         db  0xcb ; '.'
0000000000010052         db  0xff ; '.'
0000000000010053         db  0xff ; '.'
0000000000010054         db  0x26 ; '&'
0000000000010055         db  0xcb ; '.'
0000000000010056         db  0xff ; '.'
0000000000010057         db  0xff ; '.'
0000000000010058         db  0x26 ; '&'
0000000000010059         db  0xcb ; '.'
000000000001005a         db  0xff ; '.'
000000000001005b         db  0xff ; '.'
000000000001005c         db  0xe2 ; '.'
000000000001005d         db  0xcb ; '.'
000000000001005e         db  0xff ; '.'
000000000001005f         db  0xff ; '.'
0000000000010060         db  0xf0 ; '.'
0000000000010061         db  0xca ; '.'
0000000000010062         db  0xff ; '.'
0000000000010063         db  0xff ; '.'
0000000000010064         db  0x4a ; 'J'
0000000000010065         db  0xcb ; '.'
0000000000010066         db  0xff ; '.'
0000000000010067         db  0xff ; '.'
0000000000010068         db  0x4a ; 'J'
0000000000010069         db  0xcb ; '.'
000000000001006a         db  0xff ; '.'
000000000001006b         db  0xff ; '.'
000000000001006c         db  0xb4 ; '.'
000000000001006d         db  0xcb ; '.'
000000000001006e         db  0xff ; '.'
000000000001006f         db  0xff ; '.'
0000000000010070         db  0x10 ; '.'
0000000000010071         db  0xcc ; '.'
0000000000010072         db  0xff ; '.'
0000000000010073         db  0xff ; '.'
0000000000010074         db  0x26 ; '&'
0000000000010075         db  0xcb ; '.'
0000000000010076         db  0xff ; '.'
0000000000010077         db  0xff ; '.'
0000000000010078         db  0x26 ; '&'
0000000000010079         db  0xcb ; '.'
000000000001007a         db  0xff ; '.'
000000000001007b         db  0xff ; '.'
000000000001007c         db  0x26 ; '&'
000000000001007d         db  0xcb ; '.'
000000000001007e         db  0xff ; '.'
000000000001007f         db  0xff ; '.'
0000000000010080         db  0x26 ; '&'
0000000000010081         db  0xcb ; '.'
0000000000010082         db  0xff ; '.'
0000000000010083         db  0xff ; '.'
0000000000010084         db  0x26 ; '&'
0000000000010085         db  0xcb ; '.'
0000000000010086         db  0xff ; '.'
0000000000010087         db  0xff ; '.'
0000000000010088         db  0x26 ; '&'
0000000000010089         db  0xcb ; '.'
000000000001008a         db  0xff ; '.'
000000000001008b         db  0xff ; '.'
000000000001008c         db  0x00 ; '.'
000000000001008d         db  0x00 ; '.'
000000000001008e         db  0x00 ; '.'
000000000001008f         db  0x00 ; '.'
                     wide_null_string.2696:
0000000000010090         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
0000000000010091         db  0x00 ; '.'
0000000000010092         db  0x00 ; '.'
0000000000010093         db  0x00 ; '.'
0000000000010094         db  0x4e ; 'N'
0000000000010095         db  0x00 ; '.'
0000000000010096         db  0x00 ; '.'
0000000000010097         db  0x00 ; '.'
0000000000010098         db  0x55 ; 'U'
0000000000010099         db  0x00 ; '.'
000000000001009a         db  0x00 ; '.'
000000000001009b         db  0x00 ; '.'
000000000001009c         db  0x4c ; 'L'
000000000001009d         db  0x00 ; '.'
000000000001009e         db  0x00 ; '.'
000000000001009f         db  0x00 ; '.'
00000000000100a0         db  0x4c ; 'L'
00000000000100a1         db  0x00 ; '.'
00000000000100a2         db  0x00 ; '.'
00000000000100a3         db  0x00 ; '.'
00000000000100a4         db  0x29 ; ')'
00000000000100a5         db  0x00 ; '.'
00000000000100a6         db  0x00 ; '.'
00000000000100a7         db  0x00 ; '.'
00000000000100a8         db  0x00 ; '.'
00000000000100a9         db  0x00 ; '.'
00000000000100aa         db  0x00 ; '.'
00000000000100ab         db  0x00 ; '.'
                     switch_table_100ac:        // switch_table
00000000000100ac         dd         printf_parse.loc_cf9b-switch_table_100ac, 27 dup (printf_parse.loc_d52b-switch_table_100ac), printf_parse.loc_d49b-switch_table_100ac, printf_parse.loc_d52b-switch_table_100ac ; switch table used at 0xcf25 containing 84 entries, DATA XREF=printf_parse+564
0000000000010124         dd         printf_parse.loc_d4bc-switch_table_100ac, printf_parse.loc_d52b-switch_table_100ac, 3 dup (printf_parse.loc_d49b-switch_table_100ac), 11 dup (printf_parse.loc_d52b-switch_table_100ac)
0000000000010164         dd         printf_parse.loc_cf27-switch_table_100ac, 4 dup (printf_parse.loc_d52b-switch_table_100ac), printf_parse.loc_d4cc-switch_table_100ac, 8 dup (printf_parse.loc_d52b-switch_table_100ac)
000000000001019c         dd         printf_parse.loc_d49b-switch_table_100ac, printf_parse.loc_d52b-switch_table_100ac, printf_parse.loc_d428-switch_table_100ac, printf_parse.loc_d43b-switch_table_100ac
00000000000101ac         dd         3 dup (printf_parse.loc_d49b-switch_table_100ac), printf_parse.loc_d52b-switch_table_100ac, printf_parse.loc_d43b-switch_table_100ac, 4 dup (printf_parse.loc_d52b-switch_table_100ac)
00000000000101d0         dd         printf_parse.loc_d3dc-switch_table_100ac, printf_parse.loc_d4cc-switch_table_100ac, printf_parse.loc_d520-switch_table_100ac, 2 dup (printf_parse.loc_d52b-switch_table_100ac)
00000000000101e4         dd         printf_parse.loc_d488-switch_table_100ac, printf_parse.loc_d52b-switch_table_100ac, printf_parse.loc_d4cc-switch_table_100ac, 2 dup (printf_parse.loc_d52b-switch_table_100ac)
00000000000101f8         dd         printf_parse.loc_d4cc-switch_table_100ac


        ; Section .eh_frame_hdr
        ; Range: [0x101fc; 0x10630[ (1076 bytes)
        ; File offset : [66044; 67120[ (1076 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000101fc         db  0x01 ; '.'
00000000000101fd         db  0x1b ; '.'
00000000000101fe         db  0x03 ; '.'
00000000000101ff         db  0x3b ; ';'
0000000000010200         db  0x30 ; '0'
0000000000010201         db  0x04 ; '.'
0000000000010202         db  0x00 ; '.'
0000000000010203         db  0x00 ; '.'
0000000000010204         db  0x85 ; '.'
0000000000010205         db  0x00 ; '.'
0000000000010206         db  0x00 ; '.'
0000000000010207         db  0x00 ; '.'
0000000000010208         db  0xd4 ; '.'
0000000000010209         db  0x1a ; '.'
000000000001020a         db  0xff ; '.'
000000000001020b         db  0xff ; '.'
000000000001020c         db  0x7c ; '|'
000000000001020d         db  0x04 ; '.'
000000000001020e         db  0x00 ; '.'
000000000001020f         db  0x00 ; '.'
0000000000010210         db  0x34 ; '4'
0000000000010211         db  0x20 ; ' '
0000000000010212         db  0xff ; '.'
0000000000010213         db  0xff ; '.'
0000000000010214         db  0xa4 ; '.'
0000000000010215         db  0x04 ; '.'
0000000000010216         db  0x00 ; '.'
0000000000010217         db  0x00 ; '.'
0000000000010218         db  0x44 ; 'D'
0000000000010219         db  0x20 ; ' '
000000000001021a         db  0xff ; '.'
000000000001021b         db  0xff ; '.'
000000000001021c         db  0x9c ; '.'
000000000001021d         db  0x07 ; '.'
000000000001021e         db  0x00 ; '.'
000000000001021f         db  0x00 ; '.'
0000000000010220         db  0xb4 ; '.'
0000000000010221         db  0x25 ; '%'
0000000000010222         db  0xff ; '.'
0000000000010223         db  0xff ; '.'
0000000000010224         db  0x4c ; 'L'
0000000000010225         db  0x04 ; '.'
0000000000010226         db  0x00 ; '.'
0000000000010227         db  0x00 ; '.'
0000000000010228         db  0xc4 ; '.'
0000000000010229         db  0x26 ; '&'
000000000001022a         db  0xff ; '.'
000000000001022b         db  0xff ; '.'
000000000001022c         db  0xbc ; '.'
000000000001022d         db  0x04 ; '.'
000000000001022e         db  0x00 ; '.'
000000000001022f         db  0x00 ; '.'
0000000000010230         db  0x84 ; '.'
0000000000010231         db  0x27 ; '''
0000000000010232         db  0xff ; '.'
0000000000010233         db  0xff ; '.'
0000000000010234         db  0x04 ; '.'
0000000000010235         db  0x05 ; '.'
0000000000010236         db  0x00 ; '.'
0000000000010237         db  0x00 ; '.'
0000000000010238         db  0xc4 ; '.'
0000000000010239         db  0x27 ; '''
000000000001023a         db  0xff ; '.'
000000000001023b         db  0xff ; '.'
000000000001023c         db  0x2c ; ','
000000000001023d         db  0x05 ; '.'
000000000001023e         db  0x00 ; '.'
000000000001023f         db  0x00 ; '.'
0000000000010240         db  0x04 ; '.'
0000000000010241         db  0x28 ; '('
0000000000010242         db  0xff ; '.'
0000000000010243         db  0xff ; '.'
0000000000010244         db  0x54 ; 'T'
0000000000010245         db  0x05 ; '.'
0000000000010246         db  0x00 ; '.'
0000000000010247         db  0x00 ; '.'
0000000000010248         db  0x44 ; 'D'
0000000000010249         db  0x28 ; '('
000000000001024a         db  0xff ; '.'
000000000001024b         db  0xff ; '.'
000000000001024c         db  0x7c ; '|'
000000000001024d         db  0x05 ; '.'
000000000001024e         db  0x00 ; '.'
000000000001024f         db  0x00 ; '.'
0000000000010250         db  0x84 ; '.'
0000000000010251         db  0x28 ; '('
0000000000010252         db  0xff ; '.'
0000000000010253         db  0xff ; '.'
0000000000010254         db  0xa4 ; '.'
0000000000010255         db  0x05 ; '.'
0000000000010256         db  0x00 ; '.'
0000000000010257         db  0x00 ; '.'
0000000000010258         db  0x64 ; 'd'
0000000000010259         db  0x35 ; '5'
000000000001025a         db  0xff ; '.'
000000000001025b         db  0xff ; '.'
000000000001025c         db  0xd0 ; '.'
000000000001025d         db  0x05 ; '.'
000000000001025e         db  0x00 ; '.'
000000000001025f         db  0x00 ; '.'
0000000000010260         db  0x64 ; 'd'
0000000000010261         db  0x3a ; ':'
0000000000010262         db  0xff ; '.'
0000000000010263         db  0xff ; '.'
0000000000010264         db  0x1c ; '.'
0000000000010265         db  0x06 ; '.'
0000000000010266         db  0x00 ; '.'
0000000000010267         db  0x00 ; '.'
0000000000010268         db  0x54 ; 'T'
0000000000010269         db  0x3b ; ';'
000000000001026a         db  0xff ; '.'
000000000001026b         db  0xff ; '.'
000000000001026c         db  0x48 ; 'H'
000000000001026d         db  0x06 ; '.'
000000000001026e         db  0x00 ; '.'
000000000001026f         db  0x00 ; '.'
0000000000010270         db  0x94 ; '.'
0000000000010271         db  0x3c ; '<'
0000000000010272         db  0xff ; '.'
0000000000010273         db  0xff ; '.'
0000000000010274         db  0x84 ; '.'
0000000000010275         db  0x06 ; '.'
0000000000010276         db  0x00 ; '.'
0000000000010277         db  0x00 ; '.'
0000000000010278         db  0xc4 ; '.'
0000000000010279         db  0x3d ; '='
000000000001027a         db  0xff ; '.'
000000000001027b         db  0xff ; '.'
000000000001027c         db  0xd4 ; '.'
000000000001027d         db  0x06 ; '.'
000000000001027e         db  0x00 ; '.'
000000000001027f         db  0x00 ; '.'
0000000000010280         db  0x24 ; '$'
0000000000010281         db  0x41 ; 'A'
0000000000010282         db  0xff ; '.'
0000000000010283         db  0xff ; '.'
0000000000010284         db  0x2c ; ','
0000000000010285         db  0x07 ; '.'
0000000000010286         db  0x00 ; '.'
0000000000010287         db  0x00 ; '.'
0000000000010288         db  0x34 ; '4'
0000000000010289         db  0x47 ; 'G'
000000000001028a         db  0xff ; '.'
000000000001028b         db  0xff ; '.'
000000000001028c         db  0x70 ; 'p'
000000000001028d         db  0x07 ; '.'
000000000001028e         db  0x00 ; '.'
000000000001028f         db  0x00 ; '.'
0000000000010290         db  0x44 ; 'D'
0000000000010291         db  0x4c ; 'L'
0000000000010292         db  0xff ; '.'
0000000000010293         db  0xff ; '.'
0000000000010294         db  0xec ; '.'
0000000000010295         db  0x07 ; '.'
0000000000010296         db  0x00 ; '.'
0000000000010297         db  0x00 ; '.'
0000000000010298         db  0x04 ; '.'
0000000000010299         db  0x50 ; 'P'
000000000001029a         db  0xff ; '.'
000000000001029b         db  0xff ; '.'
000000000001029c         db  0x1c ; '.'
000000000001029d         db  0x08 ; '.'
000000000001029e         db  0x00 ; '.'
000000000001029f         db  0x00 ; '.'
00000000000102a0         db  0xf4 ; '.'
00000000000102a1         db  0x50 ; 'P'
00000000000102a2         db  0xff ; '.'
00000000000102a3         db  0xff ; '.'
00000000000102a4         db  0x6c ; 'l'
00000000000102a5         db  0x08 ; '.'
00000000000102a6         db  0x00 ; '.'
00000000000102a7         db  0x00 ; '.'
00000000000102a8         db  0x04 ; '.'
00000000000102a9         db  0x51 ; 'Q'
00000000000102aa         db  0xff ; '.'
00000000000102ab         db  0xff ; '.'
00000000000102ac         db  0x80 ; '.'
00000000000102ad         db  0x08 ; '.'
00000000000102ae         db  0x00 ; '.'
00000000000102af         db  0x00 ; '.'
00000000000102b0         db  0x24 ; '$'
00000000000102b1         db  0x52 ; 'R'
00000000000102b2         db  0xff ; '.'
00000000000102b3         db  0xff ; '.'
00000000000102b4         db  0xcc ; '.'
00000000000102b5         db  0x08 ; '.'
00000000000102b6         db  0x00 ; '.'
00000000000102b7         db  0x00 ; '.'
00000000000102b8         db  0xa4 ; '.'
00000000000102b9         db  0x52 ; 'R'
00000000000102ba         db  0xff ; '.'
00000000000102bb         db  0xff ; '.'
00000000000102bc         db  0xf8 ; '.'
00000000000102bd         db  0x08 ; '.'
00000000000102be         db  0x00 ; '.'
00000000000102bf         db  0x00 ; '.'
00000000000102c0         db  0xc4 ; '.'
00000000000102c1         db  0x53 ; 'S'
00000000000102c2         db  0xff ; '.'
00000000000102c3         db  0xff ; '.'
00000000000102c4         db  0x58 ; 'X'
00000000000102c5         db  0x09 ; '.'
00000000000102c6         db  0x00 ; '.'
00000000000102c7         db  0x00 ; '.'
00000000000102c8         db  0x34 ; '4'
00000000000102c9         db  0x54 ; 'T'
00000000000102ca         db  0xff ; '.'
00000000000102cb         db  0xff ; '.'
00000000000102cc         db  0xa4 ; '.'
00000000000102cd         db  0x09 ; '.'
00000000000102ce         db  0x00 ; '.'
00000000000102cf         db  0x00 ; '.'
00000000000102d0         db  0x84 ; '.'
00000000000102d1         db  0x54 ; 'T'
00000000000102d2         db  0xff ; '.'
00000000000102d3         db  0xff ; '.'
00000000000102d4         db  0xe4 ; '.'
00000000000102d5         db  0x09 ; '.'
00000000000102d6         db  0x00 ; '.'
00000000000102d7         db  0x00 ; '.'
00000000000102d8         db  0x94 ; '.'
00000000000102d9         db  0x54 ; 'T'
00000000000102da         db  0xff ; '.'
00000000000102db         db  0xff ; '.'
00000000000102dc         db  0xf8 ; '.'
00000000000102dd         db  0x09 ; '.'
00000000000102de         db  0x00 ; '.'
00000000000102df         db  0x00 ; '.'
00000000000102e0         db  0xa4 ; '.'
00000000000102e1         db  0x54 ; 'T'
00000000000102e2         db  0xff ; '.'
00000000000102e3         db  0xff ; '.'
00000000000102e4         db  0x0c ; '.'
00000000000102e5         db  0x0a ; '.'
00000000000102e6         db  0x00 ; '.'
00000000000102e7         db  0x00 ; '.'
00000000000102e8         db  0x54 ; 'T'
00000000000102e9         db  0x55 ; 'U'
00000000000102ea         db  0xff ; '.'
00000000000102eb         db  0xff ; '.'
00000000000102ec         db  0x3c ; '<'
00000000000102ed         db  0x0a ; '.'
00000000000102ee         db  0x00 ; '.'
00000000000102ef         db  0x00 ; '.'
00000000000102f0         db  0x74 ; 't'
00000000000102f1         db  0x55 ; 'U'
00000000000102f2         db  0xff ; '.'
00000000000102f3         db  0xff ; '.'
00000000000102f4         db  0x5c ; '\'
00000000000102f5         db  0x0a ; '.'
00000000000102f6         db  0x00 ; '.'
00000000000102f7         db  0x00 ; '.'
00000000000102f8         db  0xd4 ; '.'
00000000000102f9         db  0x55 ; 'U'
00000000000102fa         db  0xff ; '.'
00000000000102fb         db  0xff ; '.'
00000000000102fc         db  0x90 ; '.'
00000000000102fd         db  0x0a ; '.'
00000000000102fe         db  0x00 ; '.'
00000000000102ff         db  0x00 ; '.'
0000000000010300         db  0x34 ; '4'
0000000000010301         db  0x56 ; 'V'
0000000000010302         db  0xff ; '.'
0000000000010303         db  0xff ; '.'
0000000000010304         db  0xbc ; '.'
0000000000010305         db  0x0a ; '.'
0000000000010306         db  0x00 ; '.'
0000000000010307         db  0x00 ; '.'
0000000000010308         db  0x94 ; '.'
0000000000010309         db  0x56 ; 'V'
000000000001030a         db  0xff ; '.'
000000000001030b         db  0xff ; '.'
000000000001030c         db  0xd0 ; '.'
000000000001030d         db  0x0a ; '.'
000000000001030e         db  0x00 ; '.'
000000000001030f         db  0x00 ; '.'
0000000000010310         db  0xe4 ; '.'
0000000000010311         db  0x56 ; 'V'
0000000000010312         db  0xff ; '.'
0000000000010313         db  0xff ; '.'
0000000000010314         db  0xfc ; '.'
0000000000010315         db  0x0a ; '.'
0000000000010316         db  0x00 ; '.'
0000000000010317         db  0x00 ; '.'
0000000000010318         db  0xd4 ; '.'
0000000000010319         db  0x57 ; 'W'
000000000001031a         db  0xff ; '.'
000000000001031b         db  0xff ; '.'
000000000001031c         db  0x14 ; '.'
000000000001031d         db  0x0b ; '.'
000000000001031e         db  0x00 ; '.'
000000000001031f         db  0x00 ; '.'
0000000000010320         db  0x64 ; 'd'
0000000000010321         db  0x59 ; 'Y'
0000000000010322         db  0xff ; '.'
0000000000010323         db  0xff ; '.'
0000000000010324         db  0x28 ; '('
0000000000010325         db  0x0b ; '.'
0000000000010326         db  0x00 ; '.'
0000000000010327         db  0x00 ; '.'
0000000000010328         db  0x74 ; 't'
0000000000010329         db  0x59 ; 'Y'
000000000001032a         db  0xff ; '.'
000000000001032b         db  0xff ; '.'
000000000001032c         db  0x3c ; '<'
000000000001032d         db  0x0b ; '.'
000000000001032e         db  0x00 ; '.'
000000000001032f         db  0x00 ; '.'
0000000000010330         db  0x14 ; '.'
0000000000010331         db  0x5a ; 'Z'
0000000000010332         db  0xff ; '.'
0000000000010333         db  0xff ; '.'
0000000000010334         db  0x54 ; 'T'
0000000000010335         db  0x0b ; '.'
0000000000010336         db  0x00 ; '.'
0000000000010337         db  0x00 ; '.'
0000000000010338         db  0x64 ; 'd'
0000000000010339         db  0x5a ; 'Z'
000000000001033a         db  0xff ; '.'
000000000001033b         db  0xff ; '.'
000000000001033c         db  0x80 ; '.'
000000000001033d         db  0x0b ; '.'
000000000001033e         db  0x00 ; '.'
000000000001033f         db  0x00 ; '.'
0000000000010340         db  0xb4 ; '.'
0000000000010341         db  0x5a ; 'Z'
0000000000010342         db  0xff ; '.'
0000000000010343         db  0xff ; '.'
0000000000010344         db  0xac ; '.'
0000000000010345         db  0x0b ; '.'
0000000000010346         db  0x00 ; '.'
0000000000010347         db  0x00 ; '.'
0000000000010348         db  0x74 ; 't'
0000000000010349         db  0x75 ; 'u'
000000000001034a         db  0xff ; '.'
000000000001034b         db  0xff ; '.'
000000000001034c         db  0x24 ; '$'
000000000001034d         db  0x0c ; '.'
000000000001034e         db  0x00 ; '.'
000000000001034f         db  0x00 ; '.'
0000000000010350         db  0xc4 ; '.'
0000000000010351         db  0x75 ; 'u'
0000000000010352         db  0xff ; '.'
0000000000010353         db  0xff ; '.'
0000000000010354         db  0x54 ; 'T'
0000000000010355         db  0x0c ; '.'
0000000000010356         db  0x00 ; '.'
0000000000010357         db  0x00 ; '.'
0000000000010358         db  0x64 ; 'd'
0000000000010359         db  0x76 ; 'v'
000000000001035a         db  0xff ; '.'
000000000001035b         db  0xff ; '.'
000000000001035c         db  0x74 ; 't'
000000000001035d         db  0x0c ; '.'
000000000001035e         db  0x00 ; '.'
000000000001035f         db  0x00 ; '.'
0000000000010360         db  0x54 ; 'T'
0000000000010361         db  0x77 ; 'w'
0000000000010362         db  0xff ; '.'
0000000000010363         db  0xff ; '.'
0000000000010364         db  0xb8 ; '.'
0000000000010365         db  0x0c ; '.'
0000000000010366         db  0x00 ; '.'
0000000000010367         db  0x00 ; '.'
0000000000010368         db  0x94 ; '.'
0000000000010369         db  0x89 ; '.'
000000000001036a         db  0xff ; '.'
000000000001036b         db  0xff ; '.'
000000000001036c         db  0x30 ; '0'
000000000001036d         db  0x0d ; '.'
000000000001036e         db  0x00 ; '.'
000000000001036f         db  0x00 ; '.'
0000000000010370         db  0x44 ; 'D'
0000000000010371         db  0x8b ; '.'
0000000000010372         db  0xff ; '.'
0000000000010373         db  0xff ; '.'
0000000000010374         db  0x9c ; '.'
0000000000010375         db  0x0d ; '.'
0000000000010376         db  0x00 ; '.'
0000000000010377         db  0x00 ; '.'
0000000000010378         db  0x84 ; '.'
0000000000010379         db  0x8b ; '.'
000000000001037a         db  0xff ; '.'
000000000001037b         db  0xff ; '.'
000000000001037c         db  0xc8 ; '.'
000000000001037d         db  0x0d ; '.'
000000000001037e         db  0x00 ; '.'
000000000001037f         db  0x00 ; '.'
0000000000010380         db  0xa4 ; '.'
0000000000010381         db  0x8b ; '.'
0000000000010382         db  0xff ; '.'
0000000000010383         db  0xff ; '.'
0000000000010384         db  0xdc ; '.'
0000000000010385         db  0x0d ; '.'
0000000000010386         db  0x00 ; '.'
0000000000010387         db  0x00 ; '.'
0000000000010388         db  0xc4 ; '.'
0000000000010389         db  0x8b ; '.'
000000000001038a         db  0xff ; '.'
000000000001038b         db  0xff ; '.'
000000000001038c         db  0xf0 ; '.'
000000000001038d         db  0x0d ; '.'
000000000001038e         db  0x00 ; '.'
000000000001038f         db  0x00 ; '.'
0000000000010390         db  0x04 ; '.'
0000000000010391         db  0x8c ; '.'
0000000000010392         db  0xff ; '.'
0000000000010393         db  0xff ; '.'
0000000000010394         db  0x04 ; '.'
0000000000010395         db  0x0e ; '.'
0000000000010396         db  0x00 ; '.'
0000000000010397         db  0x00 ; '.'
0000000000010398         db  0x24 ; '$'
0000000000010399         db  0x8c ; '.'
000000000001039a         db  0xff ; '.'
000000000001039b         db  0xff ; '.'
000000000001039c         db  0x18 ; '.'
000000000001039d         db  0x0e ; '.'
000000000001039e         db  0x00 ; '.'
000000000001039f         db  0x00 ; '.'
00000000000103a0         db  0x54 ; 'T'
00000000000103a1         db  0x8c ; '.'
00000000000103a2         db  0xff ; '.'
00000000000103a3         db  0xff ; '.'
00000000000103a4         db  0x2c ; ','
00000000000103a5         db  0x0e ; '.'
00000000000103a6         db  0x00 ; '.'
00000000000103a7         db  0x00 ; '.'
00000000000103a8         db  0xd4 ; '.'
00000000000103a9         db  0x8c ; '.'
00000000000103aa         db  0xff ; '.'
00000000000103ab         db  0xff ; '.'
00000000000103ac         db  0x80 ; '.'
00000000000103ad         db  0x0e ; '.'
00000000000103ae         db  0x00 ; '.'
00000000000103af         db  0x00 ; '.'
00000000000103b0         db  0xc4 ; '.'
00000000000103b1         db  0x8d ; '.'
00000000000103b2         db  0xff ; '.'
00000000000103b3         db  0xff ; '.'
00000000000103b4         db  0xec ; '.'
00000000000103b5         db  0x0e ; '.'
00000000000103b6         db  0x00 ; '.'
00000000000103b7         db  0x00 ; '.'
00000000000103b8         db  0xd4 ; '.'
00000000000103b9         db  0x8d ; '.'
00000000000103ba         db  0xff ; '.'
00000000000103bb         db  0xff ; '.'
00000000000103bc         db  0x00 ; '.'
00000000000103bd         db  0x0f ; '.'
00000000000103be         db  0x00 ; '.'
00000000000103bf         db  0x00 ; '.'
00000000000103c0         db  0x74 ; 't'
00000000000103c1         db  0x8e ; '.'
00000000000103c2         db  0xff ; '.'
00000000000103c3         db  0xff ; '.'
00000000000103c4         db  0x2c ; ','
00000000000103c5         db  0x0f ; '.'
00000000000103c6         db  0x00 ; '.'
00000000000103c7         db  0x00 ; '.'
00000000000103c8         db  0x94 ; '.'
00000000000103c9         db  0x8e ; '.'
00000000000103ca         db  0xff ; '.'
00000000000103cb         db  0xff ; '.'
00000000000103cc         db  0x40 ; '@'
00000000000103cd         db  0x0f ; '.'
00000000000103ce         db  0x00 ; '.'
00000000000103cf         db  0x00 ; '.'
00000000000103d0         db  0xa4 ; '.'
00000000000103d1         db  0x8e ; '.'
00000000000103d2         db  0xff ; '.'
00000000000103d3         db  0xff ; '.'
00000000000103d4         db  0x54 ; 'T'
00000000000103d5         db  0x0f ; '.'
00000000000103d6         db  0x00 ; '.'
00000000000103d7         db  0x00 ; '.'
00000000000103d8         db  0xc4 ; '.'
00000000000103d9         db  0x8e ; '.'
00000000000103da         db  0xff ; '.'
00000000000103db         db  0xff ; '.'
00000000000103dc         db  0x68 ; 'h'
00000000000103dd         db  0x0f ; '.'
00000000000103de         db  0x00 ; '.'
00000000000103df         db  0x00 ; '.'
00000000000103e0         db  0xe4 ; '.'
00000000000103e1         db  0x8e ; '.'
00000000000103e2         db  0xff ; '.'
00000000000103e3         db  0xff ; '.'
00000000000103e4         db  0x7c ; '|'
00000000000103e5         db  0x0f ; '.'
00000000000103e6         db  0x00 ; '.'
00000000000103e7         db  0x00 ; '.'
00000000000103e8         db  0x74 ; 't'
00000000000103e9         db  0x8f ; '.'
00000000000103ea         db  0xff ; '.'
00000000000103eb         db  0xff ; '.'
00000000000103ec         db  0x98 ; '.'
00000000000103ed         db  0x0f ; '.'
00000000000103ee         db  0x00 ; '.'
00000000000103ef         db  0x00 ; '.'
00000000000103f0         db  0x04 ; '.'
00000000000103f1         db  0x90 ; '.'
00000000000103f2         db  0xff ; '.'
00000000000103f3         db  0xff ; '.'
00000000000103f4         db  0xb4 ; '.'
00000000000103f5         db  0x0f ; '.'
00000000000103f6         db  0x00 ; '.'
00000000000103f7         db  0x00 ; '.'
00000000000103f8         db  0x14 ; '.'
00000000000103f9         db  0x90 ; '.'
00000000000103fa         db  0xff ; '.'
00000000000103fb         db  0xff ; '.'
00000000000103fc         db  0xc8 ; '.'
00000000000103fd         db  0x0f ; '.'
00000000000103fe         db  0x00 ; '.'
00000000000103ff         db  0x00 ; '.'
0000000000010400         db  0x24 ; '$'
0000000000010401         db  0x90 ; '.'
0000000000010402         db  0xff ; '.'
0000000000010403         db  0xff ; '.'
0000000000010404         db  0xdc ; '.'
0000000000010405         db  0x0f ; '.'
0000000000010406         db  0x00 ; '.'
0000000000010407         db  0x00 ; '.'
0000000000010408         db  0xc4 ; '.'
0000000000010409         db  0x90 ; '.'
000000000001040a         db  0xff ; '.'
000000000001040b         db  0xff ; '.'
000000000001040c         db  0xf8 ; '.'
000000000001040d         db  0x0f ; '.'
000000000001040e         db  0x00 ; '.'
000000000001040f         db  0x00 ; '.'
0000000000010410         db  0xd4 ; '.'
0000000000010411         db  0x90 ; '.'
0000000000010412         db  0xff ; '.'
0000000000010413         db  0xff ; '.'
0000000000010414         db  0x0c ; '.'
0000000000010415         db  0x10 ; '.'
0000000000010416         db  0x00 ; '.'
0000000000010417         db  0x00 ; '.'
0000000000010418         db  0xf4 ; '.'
0000000000010419         db  0x90 ; '.'
000000000001041a         db  0xff ; '.'
000000000001041b         db  0xff ; '.'
000000000001041c         db  0x20 ; ' '
000000000001041d         db  0x10 ; '.'
000000000001041e         db  0x00 ; '.'
000000000001041f         db  0x00 ; '.'
0000000000010420         db  0x04 ; '.'
0000000000010421         db  0x91 ; '.'
0000000000010422         db  0xff ; '.'
0000000000010423         db  0xff ; '.'
0000000000010424         db  0x34 ; '4'
0000000000010425         db  0x10 ; '.'
0000000000010426         db  0x00 ; '.'
0000000000010427         db  0x00 ; '.'
0000000000010428         db  0x94 ; '.'
0000000000010429         db  0x91 ; '.'
000000000001042a         db  0xff ; '.'
000000000001042b         db  0xff ; '.'
000000000001042c         db  0x50 ; 'P'
000000000001042d         db  0x10 ; '.'
000000000001042e         db  0x00 ; '.'
000000000001042f         db  0x00 ; '.'
0000000000010430         db  0x34 ; '4'
0000000000010431         db  0x92 ; '.'
0000000000010432         db  0xff ; '.'
0000000000010433         db  0xff ; '.'
0000000000010434         db  0x6c ; 'l'
0000000000010435         db  0x10 ; '.'
0000000000010436         db  0x00 ; '.'
0000000000010437         db  0x00 ; '.'
0000000000010438         db  0x44 ; 'D'
0000000000010439         db  0x92 ; '.'
000000000001043a         db  0xff ; '.'
000000000001043b         db  0xff ; '.'
000000000001043c         db  0x80 ; '.'
000000000001043d         db  0x10 ; '.'
000000000001043e         db  0x00 ; '.'
000000000001043f         db  0x00 ; '.'
0000000000010440         db  0x64 ; 'd'
0000000000010441         db  0x92 ; '.'
0000000000010442         db  0xff ; '.'
0000000000010443         db  0xff ; '.'
0000000000010444         db  0x94 ; '.'
0000000000010445         db  0x10 ; '.'
0000000000010446         db  0x00 ; '.'
0000000000010447         db  0x00 ; '.'
0000000000010448         db  0x84 ; '.'
0000000000010449         db  0x92 ; '.'
000000000001044a         db  0xff ; '.'
000000000001044b         db  0xff ; '.'
000000000001044c         db  0xa8 ; '.'
000000000001044d         db  0x10 ; '.'
000000000001044e         db  0x00 ; '.'
000000000001044f         db  0x00 ; '.'
0000000000010450         db  0x94 ; '.'
0000000000010451         db  0x92 ; '.'
0000000000010452         db  0xff ; '.'
0000000000010453         db  0xff ; '.'
0000000000010454         db  0xbc ; '.'
0000000000010455         db  0x10 ; '.'
0000000000010456         db  0x00 ; '.'
0000000000010457         db  0x00 ; '.'
0000000000010458         db  0xb4 ; '.'
0000000000010459         db  0x92 ; '.'
000000000001045a         db  0xff ; '.'
000000000001045b         db  0xff ; '.'
000000000001045c         db  0xd0 ; '.'
000000000001045d         db  0x10 ; '.'
000000000001045e         db  0x00 ; '.'
000000000001045f         db  0x00 ; '.'
0000000000010460         db  0xd4 ; '.'
0000000000010461         db  0x92 ; '.'
0000000000010462         db  0xff ; '.'
0000000000010463         db  0xff ; '.'
0000000000010464         db  0xe4 ; '.'
0000000000010465         db  0x10 ; '.'
0000000000010466         db  0x00 ; '.'
0000000000010467         db  0x00 ; '.'
0000000000010468         db  0xf4 ; '.'
0000000000010469         db  0x92 ; '.'
000000000001046a         db  0xff ; '.'
000000000001046b         db  0xff ; '.'
000000000001046c         db  0xfc ; '.'
000000000001046d         db  0x10 ; '.'
000000000001046e         db  0x00 ; '.'
000000000001046f         db  0x00 ; '.'
0000000000010470         db  0x44 ; 'D'
0000000000010471         db  0x93 ; '.'
0000000000010472         db  0xff ; '.'
0000000000010473         db  0xff ; '.'
0000000000010474         db  0x1c ; '.'
0000000000010475         db  0x11 ; '.'
0000000000010476         db  0x00 ; '.'
0000000000010477         db  0x00 ; '.'
0000000000010478         db  0x64 ; 'd'
0000000000010479         db  0x93 ; '.'
000000000001047a         db  0xff ; '.'
000000000001047b         db  0xff ; '.'
000000000001047c         db  0x30 ; '0'
000000000001047d         db  0x11 ; '.'
000000000001047e         db  0x00 ; '.'
000000000001047f         db  0x00 ; '.'
0000000000010480         db  0x84 ; '.'
0000000000010481         db  0x93 ; '.'
0000000000010482         db  0xff ; '.'
0000000000010483         db  0xff ; '.'
0000000000010484         db  0x4c ; 'L'
0000000000010485         db  0x11 ; '.'
0000000000010486         db  0x00 ; '.'
0000000000010487         db  0x00 ; '.'
0000000000010488         db  0xa4 ; '.'
0000000000010489         db  0x97 ; '.'
000000000001048a         db  0xff ; '.'
000000000001048b         db  0xff ; '.'
000000000001048c         db  0x60 ; '`'
000000000001048d         db  0x12 ; '.'
000000000001048e         db  0x00 ; '.'
000000000001048f         db  0x00 ; '.'
0000000000010490         db  0xc4 ; '.'
0000000000010491         db  0x97 ; '.'
0000000000010492         db  0xff ; '.'
0000000000010493         db  0xff ; '.'
0000000000010494         db  0x74 ; 't'
0000000000010495         db  0x12 ; '.'
0000000000010496         db  0x00 ; '.'
0000000000010497         db  0x00 ; '.'
0000000000010498         db  0x44 ; 'D'
0000000000010499         db  0x98 ; '.'
000000000001049a         db  0xff ; '.'
000000000001049b         db  0xff ; '.'
000000000001049c         db  0x90 ; '.'
000000000001049d         db  0x12 ; '.'
000000000001049e         db  0x00 ; '.'
000000000001049f         db  0x00 ; '.'
00000000000104a0         db  0x24 ; '$'
00000000000104a1         db  0x99 ; '.'
00000000000104a2         db  0xff ; '.'
00000000000104a3         db  0xff ; '.'
00000000000104a4         db  0xbc ; '.'
00000000000104a5         db  0x12 ; '.'
00000000000104a6         db  0x00 ; '.'
00000000000104a7         db  0x00 ; '.'
00000000000104a8         db  0xa4 ; '.'
00000000000104a9         db  0x99 ; '.'
00000000000104aa         db  0xff ; '.'
00000000000104ab         db  0xff ; '.'
00000000000104ac         db  0xdc ; '.'
00000000000104ad         db  0x12 ; '.'
00000000000104ae         db  0x00 ; '.'
00000000000104af         db  0x00 ; '.'
00000000000104b0         db  0xc4 ; '.'
00000000000104b1         db  0x99 ; '.'
00000000000104b2         db  0xff ; '.'
00000000000104b3         db  0xff ; '.'
00000000000104b4         db  0xf8 ; '.'
00000000000104b5         db  0x12 ; '.'
00000000000104b6         db  0x00 ; '.'
00000000000104b7         db  0x00 ; '.'
00000000000104b8         db  0xf4 ; '.'
00000000000104b9         db  0x99 ; '.'
00000000000104ba         db  0xff ; '.'
00000000000104bb         db  0xff ; '.'
00000000000104bc         db  0x0c ; '.'
00000000000104bd         db  0x13 ; '.'
00000000000104be         db  0x00 ; '.'
00000000000104bf         db  0x00 ; '.'
00000000000104c0         db  0x04 ; '.'
00000000000104c1         db  0x9a ; '.'
00000000000104c2         db  0xff ; '.'
00000000000104c3         db  0xff ; '.'
00000000000104c4         db  0x20 ; ' '
00000000000104c5         db  0x13 ; '.'
00000000000104c6         db  0x00 ; '.'
00000000000104c7         db  0x00 ; '.'
00000000000104c8         db  0x44 ; 'D'
00000000000104c9         db  0x9a ; '.'
00000000000104ca         db  0xff ; '.'
00000000000104cb         db  0xff ; '.'
00000000000104cc         db  0x44 ; 'D'
00000000000104cd         db  0x13 ; '.'
00000000000104ce         db  0x00 ; '.'
00000000000104cf         db  0x00 ; '.'
00000000000104d0         db  0x74 ; 't'
00000000000104d1         db  0x9a ; '.'
00000000000104d2         db  0xff ; '.'
00000000000104d3         db  0xff ; '.'
00000000000104d4         db  0x58 ; 'X'
00000000000104d5         db  0x13 ; '.'
00000000000104d6         db  0x00 ; '.'
00000000000104d7         db  0x00 ; '.'
00000000000104d8         db  0x04 ; '.'
00000000000104d9         db  0x9b ; '.'
00000000000104da         db  0xff ; '.'
00000000000104db         db  0xff ; '.'
00000000000104dc         db  0x70 ; 'p'
00000000000104dd         db  0x13 ; '.'
00000000000104de         db  0x00 ; '.'
00000000000104df         db  0x00 ; '.'
00000000000104e0         db  0x54 ; 'T'
00000000000104e1         db  0x9b ; '.'
00000000000104e2         db  0xff ; '.'
00000000000104e3         db  0xff ; '.'
00000000000104e4         db  0x88 ; '.'
00000000000104e5         db  0x13 ; '.'
00000000000104e6         db  0x00 ; '.'
00000000000104e7         db  0x00 ; '.'
00000000000104e8         db  0x74 ; 't'
00000000000104e9         db  0x9b ; '.'
00000000000104ea         db  0xff ; '.'
00000000000104eb         db  0xff ; '.'
00000000000104ec         db  0xa4 ; '.'
00000000000104ed         db  0x13 ; '.'
00000000000104ee         db  0x00 ; '.'
00000000000104ef         db  0x00 ; '.'
00000000000104f0         db  0xa4 ; '.'
00000000000104f1         db  0x9b ; '.'
00000000000104f2         db  0xff ; '.'
00000000000104f3         db  0xff ; '.'
00000000000104f4         db  0xc0 ; '.'
00000000000104f5         db  0x13 ; '.'
00000000000104f6         db  0x00 ; '.'
00000000000104f7         db  0x00 ; '.'
00000000000104f8         db  0xd4 ; '.'
00000000000104f9         db  0x9b ; '.'
00000000000104fa         db  0xff ; '.'
00000000000104fb         db  0xff ; '.'
00000000000104fc         db  0xe8 ; '.'
00000000000104fd         db  0x13 ; '.'
00000000000104fe         db  0x00 ; '.'
00000000000104ff         db  0x00 ; '.'
0000000000010500         db  0xf4 ; '.'
0000000000010501         db  0x9b ; '.'
0000000000010502         db  0xff ; '.'
0000000000010503         db  0xff ; '.'
0000000000010504         db  0x04 ; '.'
0000000000010505         db  0x14 ; '.'
0000000000010506         db  0x00 ; '.'
0000000000010507         db  0x00 ; '.'
0000000000010508         db  0x34 ; '4'
0000000000010509         db  0x9c ; '.'
000000000001050a         db  0xff ; '.'
000000000001050b         db  0xff ; '.'
000000000001050c         db  0x1c ; '.'
000000000001050d         db  0x14 ; '.'
000000000001050e         db  0x00 ; '.'
000000000001050f         db  0x00 ; '.'
0000000000010510         db  0x64 ; 'd'
0000000000010511         db  0x9c ; '.'
0000000000010512         db  0xff ; '.'
0000000000010513         db  0xff ; '.'
0000000000010514         db  0x3c ; '<'
0000000000010515         db  0x14 ; '.'
0000000000010516         db  0x00 ; '.'
0000000000010517         db  0x00 ; '.'
0000000000010518         db  0x24 ; '$'
0000000000010519         db  0x9d ; '.'
000000000001051a         db  0xff ; '.'
000000000001051b         db  0xff ; '.'
000000000001051c         db  0x5c ; '\'
000000000001051d         db  0x14 ; '.'
000000000001051e         db  0x00 ; '.'
000000000001051f         db  0x00 ; '.'
0000000000010520         db  0x74 ; 't'
0000000000010521         db  0x9d ; '.'
0000000000010522         db  0xff ; '.'
0000000000010523         db  0xff ; '.'
0000000000010524         db  0x78 ; 'x'
0000000000010525         db  0x14 ; '.'
0000000000010526         db  0x00 ; '.'
0000000000010527         db  0x00 ; '.'
0000000000010528         db  0xb4 ; '.'
0000000000010529         db  0x9d ; '.'
000000000001052a         db  0xff ; '.'
000000000001052b         db  0xff ; '.'
000000000001052c         db  0xa4 ; '.'
000000000001052d         db  0x14 ; '.'
000000000001052e         db  0x00 ; '.'
000000000001052f         db  0x00 ; '.'
0000000000010530         db  0x94 ; '.'
0000000000010531         db  0xa0 ; '.'
0000000000010532         db  0xff ; '.'
0000000000010533         db  0xff ; '.'
0000000000010534         db  0xf4 ; '.'
0000000000010535         db  0x14 ; '.'
0000000000010536         db  0x00 ; '.'
0000000000010537         db  0x00 ; '.'
0000000000010538         db  0x24 ; '$'
0000000000010539         db  0xa1 ; '.'
000000000001053a         db  0xff ; '.'
000000000001053b         db  0xff ; '.'
000000000001053c         db  0x34 ; '4'
000000000001053d         db  0x15 ; '.'
000000000001053e         db  0x00 ; '.'
000000000001053f         db  0x00 ; '.'
0000000000010540         db  0xb4 ; '.'
0000000000010541         db  0xa1 ; '.'
0000000000010542         db  0xff ; '.'
0000000000010543         db  0xff ; '.'
0000000000010544         db  0x50 ; 'P'
0000000000010545         db  0x15 ; '.'
0000000000010546         db  0x00 ; '.'
0000000000010547         db  0x00 ; '.'
0000000000010548         db  0xf4 ; '.'
0000000000010549         db  0xa1 ; '.'
000000000001054a         db  0xff ; '.'
000000000001054b         db  0xff ; '.'
000000000001054c         db  0x6c ; 'l'
000000000001054d         db  0x15 ; '.'
000000000001054e         db  0x00 ; '.'
000000000001054f         db  0x00 ; '.'
0000000000010550         db  0x44 ; 'D'
0000000000010551         db  0xaa ; '.'
0000000000010552         db  0xff ; '.'
0000000000010553         db  0xff ; '.'
0000000000010554         db  0xe4 ; '.'
0000000000010555         db  0x15 ; '.'
0000000000010556         db  0x00 ; '.'
0000000000010557         db  0x00 ; '.'
0000000000010558         db  0x74 ; 't'
0000000000010559         db  0xaa ; '.'
000000000001055a         db  0xff ; '.'
000000000001055b         db  0xff ; '.'
000000000001055c         db  0xf8 ; '.'
000000000001055d         db  0x15 ; '.'
000000000001055e         db  0x00 ; '.'
000000000001055f         db  0x00 ; '.'
0000000000010560         db  0xa4 ; '.'
0000000000010561         db  0xaa ; '.'
0000000000010562         db  0xff ; '.'
0000000000010563         db  0xff ; '.'
0000000000010564         db  0x14 ; '.'
0000000000010565         db  0x16 ; '.'
0000000000010566         db  0x00 ; '.'
0000000000010567         db  0x00 ; '.'
0000000000010568         db  0x04 ; '.'
0000000000010569         db  0xab ; '.'
000000000001056a         db  0xff ; '.'
000000000001056b         db  0xff ; '.'
000000000001056c         db  0x50 ; 'P'
000000000001056d         db  0x16 ; '.'
000000000001056e         db  0x00 ; '.'
000000000001056f         db  0x00 ; '.'
0000000000010570         db  0x94 ; '.'
0000000000010571         db  0xab ; '.'
0000000000010572         db  0xff ; '.'
0000000000010573         db  0xff ; '.'
0000000000010574         db  0x88 ; '.'
0000000000010575         db  0x16 ; '.'
0000000000010576         db  0x00 ; '.'
0000000000010577         db  0x00 ; '.'
0000000000010578         db  0xd4 ; '.'
0000000000010579         db  0xac ; '.'
000000000001057a         db  0xff ; '.'
000000000001057b         db  0xff ; '.'
000000000001057c         db  0xd4 ; '.'
000000000001057d         db  0x16 ; '.'
000000000001057e         db  0x00 ; '.'
000000000001057f         db  0x00 ; '.'
0000000000010580         db  0xb4 ; '.'
0000000000010581         db  0xad ; '.'
0000000000010582         db  0xff ; '.'
0000000000010583         db  0xff ; '.'
0000000000010584         db  0x28 ; '('
0000000000010585         db  0x17 ; '.'
0000000000010586         db  0x00 ; '.'
0000000000010587         db  0x00 ; '.'
0000000000010588         db  0xc4 ; '.'
0000000000010589         db  0xad ; '.'
000000000001058a         db  0xff ; '.'
000000000001058b         db  0xff ; '.'
000000000001058c         db  0x3c ; '<'
000000000001058d         db  0x17 ; '.'
000000000001058e         db  0x00 ; '.'
000000000001058f         db  0x00 ; '.'
0000000000010590         db  0x74 ; 't'
0000000000010591         db  0xae ; '.'
0000000000010592         db  0xff ; '.'
0000000000010593         db  0xff ; '.'
0000000000010594         db  0x9c ; '.'
0000000000010595         db  0x17 ; '.'
0000000000010596         db  0x00 ; '.'
0000000000010597         db  0x00 ; '.'
0000000000010598         db  0xc4 ; '.'
0000000000010599         db  0xaf ; '.'
000000000001059a         db  0xff ; '.'
000000000001059b         db  0xff ; '.'
000000000001059c         db  0xd4 ; '.'
000000000001059d         db  0x17 ; '.'
000000000001059e         db  0x00 ; '.'
000000000001059f         db  0x00 ; '.'
00000000000105a0         db  0x44 ; 'D'
00000000000105a1         db  0xb0 ; '.'
00000000000105a2         db  0xff ; '.'
00000000000105a3         db  0xff ; '.'
00000000000105a4         db  0x24 ; '$'
00000000000105a5         db  0x18 ; '.'
00000000000105a6         db  0x00 ; '.'
00000000000105a7         db  0x00 ; '.'
00000000000105a8         db  0xb4 ; '.'
00000000000105a9         db  0xb0 ; '.'
00000000000105aa         db  0xff ; '.'
00000000000105ab         db  0xff ; '.'
00000000000105ac         db  0x44 ; 'D'
00000000000105ad         db  0x18 ; '.'
00000000000105ae         db  0x00 ; '.'
00000000000105af         db  0x00 ; '.'
00000000000105b0         db  0x14 ; '.'
00000000000105b1         db  0xb1 ; '.'
00000000000105b2         db  0xff ; '.'
00000000000105b3         db  0xff ; '.'
00000000000105b4         db  0x64 ; 'd'
00000000000105b5         db  0x18 ; '.'
00000000000105b6         db  0x00 ; '.'
00000000000105b7         db  0x00 ; '.'
00000000000105b8         db  0x54 ; 'T'
00000000000105b9         db  0xb1 ; '.'
00000000000105ba         db  0xff ; '.'
00000000000105bb         db  0xff ; '.'
00000000000105bc         db  0x84 ; '.'
00000000000105bd         db  0x18 ; '.'
00000000000105be         db  0x00 ; '.'
00000000000105bf         db  0x00 ; '.'
00000000000105c0         db  0x94 ; '.'
00000000000105c1         db  0xb1 ; '.'
00000000000105c2         db  0xff ; '.'
00000000000105c3         db  0xff ; '.'
00000000000105c4         db  0xbc ; '.'
00000000000105c5         db  0x18 ; '.'
00000000000105c6         db  0x00 ; '.'
00000000000105c7         db  0x00 ; '.'
00000000000105c8         db  0xe4 ; '.'
00000000000105c9         db  0xb2 ; '.'
00000000000105ca         db  0xff ; '.'
00000000000105cb         db  0xff ; '.'
00000000000105cc         db  0x08 ; '.'
00000000000105cd         db  0x19 ; '.'
00000000000105ce         db  0x00 ; '.'
00000000000105cf         db  0x00 ; '.'
00000000000105d0         db  0x94 ; '.'
00000000000105d1         db  0xb3 ; '.'
00000000000105d2         db  0xff ; '.'
00000000000105d3         db  0xff ; '.'
00000000000105d4         db  0x24 ; '$'
00000000000105d5         db  0x19 ; '.'
00000000000105d6         db  0x00 ; '.'
00000000000105d7         db  0x00 ; '.'
00000000000105d8         db  0x14 ; '.'
00000000000105d9         db  0xb4 ; '.'
00000000000105da         db  0xff ; '.'
00000000000105db         db  0xff ; '.'
00000000000105dc         db  0x5c ; '\'
00000000000105dd         db  0x19 ; '.'
00000000000105de         db  0x00 ; '.'
00000000000105df         db  0x00 ; '.'
00000000000105e0         db  0x54 ; 'T'
00000000000105e1         db  0xb4 ; '.'
00000000000105e2         db  0xff ; '.'
00000000000105e3         db  0xff ; '.'
00000000000105e4         db  0x7c ; '|'
00000000000105e5         db  0x19 ; '.'
00000000000105e6         db  0x00 ; '.'
00000000000105e7         db  0x00 ; '.'
00000000000105e8         db  0xb4 ; '.'
00000000000105e9         db  0xb4 ; '.'
00000000000105ea         db  0xff ; '.'
00000000000105eb         db  0xff ; '.'
00000000000105ec         db  0xac ; '.'
00000000000105ed         db  0x19 ; '.'
00000000000105ee         db  0x00 ; '.'
00000000000105ef         db  0x00 ; '.'
00000000000105f0         db  0x34 ; '4'
00000000000105f1         db  0xb5 ; '.'
00000000000105f2         db  0xff ; '.'
00000000000105f3         db  0xff ; '.'
00000000000105f4         db  0xd4 ; '.'
00000000000105f5         db  0x19 ; '.'
00000000000105f6         db  0x00 ; '.'
00000000000105f7         db  0x00 ; '.'
00000000000105f8         db  0x44 ; 'D'
00000000000105f9         db  0xb5 ; '.'
00000000000105fa         db  0xff ; '.'
00000000000105fb         db  0xff ; '.'
00000000000105fc         db  0xec ; '.'
00000000000105fd         db  0x19 ; '.'
00000000000105fe         db  0x00 ; '.'
00000000000105ff         db  0x00 ; '.'
0000000000010600         db  0xc4 ; '.'
0000000000010601         db  0xb7 ; '.'
0000000000010602         db  0xff ; '.'
0000000000010603         db  0xff ; '.'
0000000000010604         db  0x24 ; '$'
0000000000010605         db  0x1a ; '.'
0000000000010606         db  0x00 ; '.'
0000000000010607         db  0x00 ; '.'
0000000000010608         db  0xe4 ; '.'
0000000000010609         db  0xc8 ; '.'
000000000001060a         db  0xff ; '.'
000000000001060b         db  0xff ; '.'
000000000001060c         db  0x54 ; 'T'
000000000001060d         db  0x1a ; '.'
000000000001060e         db  0x00 ; '.'
000000000001060f         db  0x00 ; '.'
0000000000010610         db  0xe4 ; '.'
0000000000010611         db  0xca ; '.'
0000000000010612         db  0xff ; '.'
0000000000010613         db  0xff ; '.'
0000000000010614         db  0x6c ; 'l'
0000000000010615         db  0x1a ; '.'
0000000000010616         db  0x00 ; '.'
0000000000010617         db  0x00 ; '.'
0000000000010618         db  0xd4 ; '.'
0000000000010619         db  0xd7 ; '.'
000000000001061a         db  0xff ; '.'
000000000001061b         db  0xff ; '.'
000000000001061c         db  0xbc ; '.'
000000000001061d         db  0x1a ; '.'
000000000001061e         db  0x00 ; '.'
000000000001061f         db  0x00 ; '.'
0000000000010620         db  0x44 ; 'D'
0000000000010621         db  0xd8 ; '.'
0000000000010622         db  0xff ; '.'
0000000000010623         db  0xff ; '.'
0000000000010624         db  0x04 ; '.'
0000000000010625         db  0x1b ; '.'
0000000000010626         db  0x00 ; '.'
0000000000010627         db  0x00 ; '.'
0000000000010628         db  0x54 ; 'T'
0000000000010629         db  0xd8 ; '.'
000000000001062a         db  0xff ; '.'
000000000001062b         db  0xff ; '.'
000000000001062c         db  0x1c ; '.'
000000000001062d         db  0x1b ; '.'
000000000001062e         db  0x00 ; '.'
000000000001062f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x10630; 0x11d30[ (5888 bytes)
        ; File offset : [67120; 73008[ (5888 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000010630         dd         0x00000014                                  ; Length of the record
0000000000010634         dd         0x00000000                                  ; CIE ID
0000000000010638         db         0x01                                        ; Version
0000000000010639         db         "zR", 0                                     ; Augmentation String
000000000001063c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000001063d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000001063e         db         0x10                                        ; Return address register
000000000001063f         db         0x01                                        ; Augmentation data length
0000000000010640         db         0x1b                                        ; FDE encoding
0000000000010641         db  0x0c ; '.'
0000000000010642         db  0x07 ; '.'
0000000000010643         db  0x08 ; '.'
0000000000010644         db  0x90 ; '.'
0000000000010645         db  0x01 ; '.'
0000000000010646         db  0x07 ; '.'
0000000000010647         db  0x10 ; '.'
0000000000010648         dd         0x00000014                                  ; Length of the record
000000000001064c         dd         0x0000001c                                  ; FDE: parent CIE at 0x10630 (FDE encoding = 0x1B)
0000000000010650         db         0x60, 0x21, 2 dup (0xff)                    ; begin 0x27b0
0000000000010654         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x27db)
0000000000010658         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010659         align      32
0000000000010660         dd         0x00000014                                  ; Length of the record
0000000000010664         dd         0x00000000                                  ; CIE ID
0000000000010668         db         0x01                                        ; Version
0000000000010669         db         "zR", 0                                     ; Augmentation String
000000000001066c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000001066d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000001066e         db         0x10                                        ; Return address register
000000000001066f         db         0x01                                        ; Augmentation data length
0000000000010670         db         0x1b                                        ; FDE encoding
0000000000010671         db  0x0c ; '.'
0000000000010672         db  0x07 ; '.'
0000000000010673         db  0x08 ; '.'
0000000000010674         db  0x90 ; '.'
0000000000010675         db  0x01 ; '.'
0000000000010676         db  0x00 ; '.'
0000000000010677         db  0x00 ; '.'
0000000000010678         dd         0x00000024                                  ; Length of the record
000000000001067c         dd         0x0000001c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010680         db         0x50, 0x16, 2 dup (0xff)                    ; begin 0x1cd0
0000000000010684         db         0x60, 0x05, 2 dup (0x00)                    ; length 0x560 (end at 0x2230)
0000000000010688         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010689         db  0x0e ; '.'
000000000001068a         db  0x10 ; '.'
000000000001068b         db  0x46 ; 'F'
000000000001068c         db  0x0e ; '.'
000000000001068d         db  0x18 ; '.'
000000000001068e         db  0x4a ; 'J'
000000000001068f         db  0x0f ; '.'
0000000000010690         db  0x0b ; '.'
0000000000010691         db  0x77 ; 'w'
0000000000010692         db  0x08 ; '.'
0000000000010693         db  0x80 ; '.'
0000000000010694         db  0x00 ; '.'
0000000000010695         db  0x3f ; '?'
0000000000010696         db  0x1a ; '.'
0000000000010697         db  0x3b ; ';'
0000000000010698         db  0x2a ; '*'
0000000000010699         db  0x33 ; '3'
000000000001069a         db  0x24 ; '$'
000000000001069b         db  0x22 ; '"'
000000000001069c         db  0x00 ; '.'
000000000001069d         db  0x00 ; '.'
000000000001069e         db  0x00 ; '.'
000000000001069f         db  0x00 ; '.'
00000000000106a0         dd         0x00000014                                  ; Length of the record
00000000000106a4         dd         0x00000044                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000106a8         db         0x88, 0x1b, 2 dup (0xff)                    ; begin 0x2230
00000000000106ac         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x2238)
00000000000106b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000106b1         align      8
00000000000106b8         dd         0x00000044                                  ; Length of the record
00000000000106bc         dd         0x0000005c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000106c0         db         0x00, 0x22, 2 dup (0xff)                    ; begin 0x28c0
00000000000106c4         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x2976)
00000000000106c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000106c9         db  0x42 ; 'B'
00000000000106ca         db  0x0e ; '.'
00000000000106cb         db  0x10 ; '.'
00000000000106cc         db  0x8f ; '.'
00000000000106cd         db  0x02 ; '.'
00000000000106ce         db  0x42 ; 'B'
00000000000106cf         db  0x0e ; '.'
00000000000106d0         db  0x18 ; '.'
00000000000106d1         db  0x8e ; '.'
00000000000106d2         db  0x03 ; '.'
00000000000106d3         db  0x42 ; 'B'
00000000000106d4         db  0x0e ; '.'
00000000000106d5         db  0x20 ; ' '
00000000000106d6         db  0x8d ; '.'
00000000000106d7         db  0x04 ; '.'
00000000000106d8         db  0x42 ; 'B'
00000000000106d9         db  0x0e ; '.'
00000000000106da         db  0x28 ; '('
00000000000106db         db  0x8c ; '.'
00000000000106dc         db  0x05 ; '.'
00000000000106dd         db  0x45 ; 'E'
00000000000106de         db  0x0e ; '.'
00000000000106df         db  0x30 ; '0'
00000000000106e0         db  0x86 ; '.'
00000000000106e1         db  0x06 ; '.'
00000000000106e2         db  0x45 ; 'E'
00000000000106e3         db  0x0e ; '.'
00000000000106e4         db  0x38 ; '8'
00000000000106e5         db  0x83 ; '.'
00000000000106e6         db  0x07 ; '.'
00000000000106e7         db  0x4b ; 'K'
00000000000106e8         db  0x0e ; '.'
00000000000106e9         db  0x50 ; 'P'
00000000000106ea         db  0x02 ; '.'
00000000000106eb         db  0x87 ; '.'
00000000000106ec         db  0x0e ; '.'
00000000000106ed         db  0x38 ; '8'
00000000000106ee         db  0x44 ; 'D'
00000000000106ef         db  0x0e ; '.'
00000000000106f0         db  0x30 ; '0'
00000000000106f1         db  0x41 ; 'A'
00000000000106f2         db  0x0e ; '.'
00000000000106f3         db  0x28 ; '('
00000000000106f4         db  0x42 ; 'B'
00000000000106f5         db  0x0e ; '.'
00000000000106f6         db  0x20 ; ' '
00000000000106f7         db  0x42 ; 'B'
00000000000106f8         db  0x0e ; '.'
00000000000106f9         db  0x18 ; '.'
00000000000106fa         db  0x42 ; 'B'
00000000000106fb         db  0x0e ; '.'
00000000000106fc         db  0x10 ; '.'
00000000000106fd         db  0x42 ; 'B'
00000000000106fe         db  0x0e ; '.'
00000000000106ff         db  0x08 ; '.'
0000000000010700         dd         0x00000024                                  ; Length of the record
0000000000010704         dd         0x000000a4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010708         db         0x78, 0x22, 2 dup (0xff)                    ; begin 0x2980
000000000001070c         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0x29b7)
0000000000010710         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010711         db  0x41 ; 'A'
0000000000010712         db  0x0e ; '.'
0000000000010713         db  0x10 ; '.'
0000000000010714         db  0x86 ; '.'
0000000000010715         db  0x02 ; '.'
0000000000010716         db  0x41 ; 'A'
0000000000010717         db  0x0e ; '.'
0000000000010718         db  0x18 ; '.'
0000000000010719         db  0x83 ; '.'
000000000001071a         db  0x03 ; '.'
000000000001071b         db  0x58 ; 'X'
000000000001071c         db  0x0e ; '.'
000000000001071d         db  0x20 ; ' '
000000000001071e         db  0x49 ; 'I'
000000000001071f         db  0x0e ; '.'
0000000000010720         db  0x18 ; '.'
0000000000010721         db  0x47 ; 'G'
0000000000010722         db  0x0e ; '.'
0000000000010723         db  0x10 ; '.'
0000000000010724         db  0x41 ; 'A'
0000000000010725         db  0x0e ; '.'
0000000000010726         db  0x08 ; '.'
0000000000010727         db  0x00 ; '.'
0000000000010728         dd         0x00000024                                  ; Length of the record
000000000001072c         dd         0x000000cc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010730         db         0x90, 0x22, 2 dup (0xff)                    ; begin 0x29c0
0000000000010734         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0x29f7)
0000000000010738         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010739         db  0x41 ; 'A'
000000000001073a         db  0x0e ; '.'
000000000001073b         db  0x10 ; '.'
000000000001073c         db  0x86 ; '.'
000000000001073d         db  0x02 ; '.'
000000000001073e         db  0x41 ; 'A'
000000000001073f         db  0x0e ; '.'
0000000000010740         db  0x18 ; '.'
0000000000010741         db  0x83 ; '.'
0000000000010742         db  0x03 ; '.'
0000000000010743         db  0x58 ; 'X'
0000000000010744         db  0x0e ; '.'
0000000000010745         db  0x20 ; ' '
0000000000010746         db  0x49 ; 'I'
0000000000010747         db  0x0e ; '.'
0000000000010748         db  0x18 ; '.'
0000000000010749         db  0x47 ; 'G'
000000000001074a         db  0x0e ; '.'
000000000001074b         db  0x10 ; '.'
000000000001074c         db  0x41 ; 'A'
000000000001074d         db  0x0e ; '.'
000000000001074e         db  0x08 ; '.'
000000000001074f         db  0x00 ; '.'
0000000000010750         dd         0x00000024                                  ; Length of the record
0000000000010754         dd         0x000000f4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010758         db         0xa8, 0x22, 2 dup (0xff)                    ; begin 0x2a00
000000000001075c         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0x2a37)
0000000000010760         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010761         db  0x41 ; 'A'
0000000000010762         db  0x0e ; '.'
0000000000010763         db  0x10 ; '.'
0000000000010764         db  0x86 ; '.'
0000000000010765         db  0x02 ; '.'
0000000000010766         db  0x41 ; 'A'
0000000000010767         db  0x0e ; '.'
0000000000010768         db  0x18 ; '.'
0000000000010769         db  0x83 ; '.'
000000000001076a         db  0x03 ; '.'
000000000001076b         db  0x58 ; 'X'
000000000001076c         db  0x0e ; '.'
000000000001076d         db  0x20 ; ' '
000000000001076e         db  0x49 ; 'I'
000000000001076f         db  0x0e ; '.'
0000000000010770         db  0x18 ; '.'
0000000000010771         db  0x47 ; 'G'
0000000000010772         db  0x0e ; '.'
0000000000010773         db  0x10 ; '.'
0000000000010774         db  0x41 ; 'A'
0000000000010775         db  0x0e ; '.'
0000000000010776         db  0x08 ; '.'
0000000000010777         db  0x00 ; '.'
0000000000010778         dd         0x00000024                                  ; Length of the record
000000000001077c         dd         0x0000011c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010780         db         0xc0, 0x22, 2 dup (0xff)                    ; begin 0x2a40
0000000000010784         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0x2a77)
0000000000010788         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010789         db  0x41 ; 'A'
000000000001078a         db  0x0e ; '.'
000000000001078b         db  0x10 ; '.'
000000000001078c         db  0x86 ; '.'
000000000001078d         db  0x02 ; '.'
000000000001078e         db  0x41 ; 'A'
000000000001078f         db  0x0e ; '.'
0000000000010790         db  0x18 ; '.'
0000000000010791         db  0x83 ; '.'
0000000000010792         db  0x03 ; '.'
0000000000010793         db  0x58 ; 'X'
0000000000010794         db  0x0e ; '.'
0000000000010795         db  0x20 ; ' '
0000000000010796         db  0x49 ; 'I'
0000000000010797         db  0x0e ; '.'
0000000000010798         db  0x18 ; '.'
0000000000010799         db  0x47 ; 'G'
000000000001079a         db  0x0e ; '.'
000000000001079b         db  0x10 ; '.'
000000000001079c         db  0x41 ; 'A'
000000000001079d         db  0x0e ; '.'
000000000001079e         db  0x08 ; '.'
000000000001079f         db  0x00 ; '.'
00000000000107a0         dd         0x00000028                                  ; Length of the record
00000000000107a4         dd         0x00000144                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000107a8         db         0xd8, 0x22, 2 dup (0xff)                    ; begin 0x2a80
00000000000107ac         db         0xd9, 0x0c, 2 dup (0x00)                    ; length 0xcd9 (end at 0x3759)
00000000000107b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000107b1         db  0x41 ; 'A'
00000000000107b2         db  0x0e ; '.'
00000000000107b3         db  0x10 ; '.'
00000000000107b4         db  0x86 ; '.'
00000000000107b5         db  0x02 ; '.'
00000000000107b6         db  0x44 ; 'D'
00000000000107b7         db  0x0e ; '.'
00000000000107b8         db  0x18 ; '.'
00000000000107b9         db  0x83 ; '.'
00000000000107ba         db  0x03 ; '.'
00000000000107bb         db  0x44 ; 'D'
00000000000107bc         db  0x0e ; '.'
00000000000107bd         db  0x20 ; ' '
00000000000107be         db  0x02 ; '.'
00000000000107bf         db  0x43 ; 'C'
00000000000107c0         db  0x0a ; '.'
00000000000107c1         db  0x0e ; '.'
00000000000107c2         db  0x18 ; '.'
00000000000107c3         db  0x43 ; 'C'
00000000000107c4         db  0x0e ; '.'
00000000000107c5         db  0x10 ; '.'
00000000000107c6         db  0x41 ; 'A'
00000000000107c7         db  0x0e ; '.'
00000000000107c8         db  0x08 ; '.'
00000000000107c9         db  0x48 ; 'H'
00000000000107ca         db  0x0b ; '.'
00000000000107cb         db  0x00 ; '.'
00000000000107cc         dd         0x00000048                                  ; Length of the record
00000000000107d0         dd         0x00000170                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000107d4         db         0x8c, 0x2f, 2 dup (0xff)                    ; begin 0x3760
00000000000107d8         db         0xf2, 0x04, 2 dup (0x00)                    ; length 0x4f2 (end at 0x3c52)
00000000000107dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000107dd         db  0x42 ; 'B'
00000000000107de         db  0x0e ; '.'
00000000000107df         db  0x10 ; '.'
00000000000107e0         db  0x8f ; '.'
00000000000107e1         db  0x02 ; '.'
00000000000107e2         db  0x42 ; 'B'
00000000000107e3         db  0x0e ; '.'
00000000000107e4         db  0x18 ; '.'
00000000000107e5         db  0x8e ; '.'
00000000000107e6         db  0x03 ; '.'
00000000000107e7         db  0x45 ; 'E'
00000000000107e8         db  0x0e ; '.'
00000000000107e9         db  0x20 ; ' '
00000000000107ea         db  0x8d ; '.'
00000000000107eb         db  0x04 ; '.'
00000000000107ec         db  0x42 ; 'B'
00000000000107ed         db  0x0e ; '.'
00000000000107ee         db  0x28 ; '('
00000000000107ef         db  0x8c ; '.'
00000000000107f0         db  0x05 ; '.'
00000000000107f1         db  0x41 ; 'A'
00000000000107f2         db  0x0e ; '.'
00000000000107f3         db  0x30 ; '0'
00000000000107f4         db  0x86 ; '.'
00000000000107f5         db  0x06 ; '.'
00000000000107f6         db  0x41 ; 'A'
00000000000107f7         db  0x0e ; '.'
00000000000107f8         db  0x38 ; '8'
00000000000107f9         db  0x83 ; '.'
00000000000107fa         db  0x07 ; '.'
00000000000107fb         db  0x44 ; 'D'
00000000000107fc         db  0x0e ; '.'
00000000000107fd         db  0x60 ; '`'
00000000000107fe         db  0x03 ; '.'
00000000000107ff         db  0x27 ; '''
0000000000010800         db  0x01 ; '.'
0000000000010801         db  0x0a ; '.'
0000000000010802         db  0x0e ; '.'
0000000000010803         db  0x38 ; '8'
0000000000010804         db  0x41 ; 'A'
0000000000010805         db  0x0e ; '.'
0000000000010806         db  0x30 ; '0'
0000000000010807         db  0x41 ; 'A'
0000000000010808         db  0x0e ; '.'
0000000000010809         db  0x28 ; '('
000000000001080a         db  0x42 ; 'B'
000000000001080b         db  0x0e ; '.'
000000000001080c         db  0x20 ; ' '
000000000001080d         db  0x42 ; 'B'
000000000001080e         db  0x0e ; '.'
000000000001080f         db  0x18 ; '.'
0000000000010810         db  0x42 ; 'B'
0000000000010811         db  0x0e ; '.'
0000000000010812         db  0x10 ; '.'
0000000000010813         db  0x42 ; 'B'
0000000000010814         db  0x0e ; '.'
0000000000010815         db  0x08 ; '.'
0000000000010816         db  0x46 ; 'F'
0000000000010817         db  0x0b ; '.'
0000000000010818         dd         0x00000028                                  ; Length of the record
000000000001081c         dd         0x000001bc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010820         db         0x40, 0x34, 2 dup (0xff)                    ; begin 0x3c60
0000000000010824         db         0xf0, 3 dup (0x00)                          ; length 0xf0 (end at 0x3d50)
0000000000010828         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010829         db  0x41 ; 'A'
000000000001082a         db  0x0e ; '.'
000000000001082b         db  0x10 ; '.'
000000000001082c         db  0x86 ; '.'
000000000001082d         db  0x02 ; '.'
000000000001082e         db  0x41 ; 'A'
000000000001082f         db  0x0e ; '.'
0000000000010830         db  0x18 ; '.'
0000000000010831         db  0x83 ; '.'
0000000000010832         db  0x03 ; '.'
0000000000010833         db  0x44 ; 'D'
0000000000010834         db  0x0e ; '.'
0000000000010835         db  0x90 ; '.'
0000000000010836         db  0x01 ; '.'
0000000000010837         db  0x02 ; '.'
0000000000010838         db  0x83 ; '.'
0000000000010839         db  0x0a ; '.'
000000000001083a         db  0x0e ; '.'
000000000001083b         db  0x18 ; '.'
000000000001083c         db  0x41 ; 'A'
000000000001083d         db  0x0e ; '.'
000000000001083e         db  0x10 ; '.'
000000000001083f         db  0x41 ; 'A'
0000000000010840         db  0x0e ; '.'
0000000000010841         db  0x08 ; '.'
0000000000010842         db  0x45 ; 'E'
0000000000010843         db  0x0b ; '.'
0000000000010844         dd         0x00000038                                  ; Length of the record
0000000000010848         dd         0x000001e8                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001084c         db         0x04, 0x35, 2 dup (0xff)                    ; begin 0x3d50
0000000000010850         db         0x3e, 0x01, 2 dup (0x00)                    ; length 0x13e (end at 0x3e8e)
0000000000010854         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010855         db  0x42 ; 'B'
0000000000010856         db  0x0e ; '.'
0000000000010857         db  0x10 ; '.'
0000000000010858         db  0x8d ; '.'
0000000000010859         db  0x02 ; '.'
000000000001085a         db  0x42 ; 'B'
000000000001085b         db  0x0e ; '.'
000000000001085c         db  0x18 ; '.'
000000000001085d         db  0x8c ; '.'
000000000001085e         db  0x03 ; '.'
000000000001085f         db  0x44 ; 'D'
0000000000010860         db  0x0e ; '.'
0000000000010861         db  0x20 ; ' '
0000000000010862         db  0x86 ; '.'
0000000000010863         db  0x04 ; '.'
0000000000010864         db  0x41 ; 'A'
0000000000010865         db  0x0e ; '.'
0000000000010866         db  0x28 ; '('
0000000000010867         db  0x83 ; '.'
0000000000010868         db  0x05 ; '.'
0000000000010869         db  0x47 ; 'G'
000000000001086a         db  0x0e ; '.'
000000000001086b         db  0xe0 ; '.'
000000000001086c         db  0x02 ; '.'
000000000001086d         db  0x02 ; '.'
000000000001086e         db  0xcc ; '.'
000000000001086f         db  0x0a ; '.'
0000000000010870         db  0x0e ; '.'
0000000000010871         db  0x28 ; '('
0000000000010872         db  0x41 ; 'A'
0000000000010873         db  0x0e ; '.'
0000000000010874         db  0x20 ; ' '
0000000000010875         db  0x41 ; 'A'
0000000000010876         db  0x0e ; '.'
0000000000010877         db  0x18 ; '.'
0000000000010878         db  0x42 ; 'B'
0000000000010879         db  0x0e ; '.'
000000000001087a         db  0x10 ; '.'
000000000001087b         db  0x42 ; 'B'
000000000001087c         db  0x0e ; '.'
000000000001087d         db  0x08 ; '.'
000000000001087e         db  0x46 ; 'F'
000000000001087f         db  0x0b ; '.'
0000000000010880         dd         0x0000004c                                  ; Length of the record
0000000000010884         dd         0x00000224                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010888         db         0x08, 0x36, 2 dup (0xff)                    ; begin 0x3e90
000000000001088c         db         0x23, 0x01, 2 dup (0x00)                    ; length 0x123 (end at 0x3fb3)
0000000000010890         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010891         db  0x45 ; 'E'
0000000000010892         db  0x0e ; '.'
0000000000010893         db  0x10 ; '.'
0000000000010894         db  0x8c ; '.'
0000000000010895         db  0x02 ; '.'
0000000000010896         db  0x41 ; 'A'
0000000000010897         db  0x0e ; '.'
0000000000010898         db  0x18 ; '.'
0000000000010899         db  0x86 ; '.'
000000000001089a         db  0x03 ; '.'
000000000001089b         db  0x41 ; 'A'
000000000001089c         db  0x0e ; '.'
000000000001089d         db  0x20 ; ' '
000000000001089e         db  0x83 ; '.'
000000000001089f         db  0x04 ; '.'
00000000000108a0         db  0x4c ; 'L'
00000000000108a1         db  0x0a ; '.'
00000000000108a2         db  0x0e ; '.'
00000000000108a3         db  0x18 ; '.'
00000000000108a4         db  0x41 ; 'A'
00000000000108a5         db  0x0e ; '.'
00000000000108a6         db  0x10 ; '.'
00000000000108a7         db  0x42 ; 'B'
00000000000108a8         db  0x0e ; '.'
00000000000108a9         db  0x08 ; '.'
00000000000108aa         db  0x4c ; 'L'
00000000000108ab         db  0x0b ; '.'
00000000000108ac         db  0x02 ; '.'
00000000000108ad         db  0xce ; '.'
00000000000108ae         db  0x0a ; '.'
00000000000108af         db  0x0e ; '.'
00000000000108b0         db  0x18 ; '.'
00000000000108b1         db  0x41 ; 'A'
00000000000108b2         db  0x0e ; '.'
00000000000108b3         db  0x10 ; '.'
00000000000108b4         db  0x42 ; 'B'
00000000000108b5         db  0x0e ; '.'
00000000000108b6         db  0x08 ; '.'
00000000000108b7         db  0x41 ; 'A'
00000000000108b8         db  0x0b ; '.'
00000000000108b9         db  0x54 ; 'T'
00000000000108ba         db  0x0a ; '.'
00000000000108bb         db  0x0e ; '.'
00000000000108bc         db  0x18 ; '.'
00000000000108bd         db  0x41 ; 'A'
00000000000108be         db  0x0e ; '.'
00000000000108bf         db  0x10 ; '.'
00000000000108c0         db  0x42 ; 'B'
00000000000108c1         db  0x0e ; '.'
00000000000108c2         db  0x08 ; '.'
00000000000108c3         db  0x48 ; 'H'
00000000000108c4         db  0x0b ; '.'
00000000000108c5         db  0x41 ; 'A'
00000000000108c6         db  0x0e ; '.'
00000000000108c7         db  0x18 ; '.'
00000000000108c8         db  0x41 ; 'A'
00000000000108c9         db  0x0e ; '.'
00000000000108ca         db  0x10 ; '.'
00000000000108cb         db  0x42 ; 'B'
00000000000108cc         db  0x0e ; '.'
00000000000108cd         db  0x08 ; '.'
00000000000108ce         db  0x00 ; '.'
00000000000108cf         db  0x00 ; '.'
00000000000108d0         dd         0x00000054                                  ; Length of the record
00000000000108d4         dd         0x00000274                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000108d8         db         0xe8, 0x36, 2 dup (0xff)                    ; begin 0x3fc0
00000000000108dc         db         0x5a, 0x03, 2 dup (0x00)                    ; length 0x35a (end at 0x431a)
00000000000108e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000108e1         db  0x42 ; 'B'
00000000000108e2         db  0x0e ; '.'
00000000000108e3         db  0x10 ; '.'
00000000000108e4         db  0x8f ; '.'
00000000000108e5         db  0x02 ; '.'
00000000000108e6         db  0x42 ; 'B'
00000000000108e7         db  0x0e ; '.'
00000000000108e8         db  0x18 ; '.'
00000000000108e9         db  0x8e ; '.'
00000000000108ea         db  0x03 ; '.'
00000000000108eb         db  0x42 ; 'B'
00000000000108ec         db  0x0e ; '.'
00000000000108ed         db  0x20 ; ' '
00000000000108ee         db  0x8d ; '.'
00000000000108ef         db  0x04 ; '.'
00000000000108f0         db  0x42 ; 'B'
00000000000108f1         db  0x0e ; '.'
00000000000108f2         db  0x28 ; '('
00000000000108f3         db  0x8c ; '.'
00000000000108f4         db  0x05 ; '.'
00000000000108f5         db  0x44 ; 'D'
00000000000108f6         db  0x0e ; '.'
00000000000108f7         db  0x30 ; '0'
00000000000108f8         db  0x86 ; '.'
00000000000108f9         db  0x06 ; '.'
00000000000108fa         db  0x41 ; 'A'
00000000000108fb         db  0x0e ; '.'
00000000000108fc         db  0x38 ; '8'
00000000000108fd         db  0x83 ; '.'
00000000000108fe         db  0x07 ; '.'
00000000000108ff         db  0x50 ; 'P'
0000000000010900         db  0x0e ; '.'                                         ; DATA XREF=cdb_advance_fd+7
0000000000010901         db  0x50 ; 'P'
0000000000010902         db  0x02 ; '.'
0000000000010903         db  0xd2 ; '.'
0000000000010904         db  0x0e ; '.'
0000000000010905         db  0x58 ; 'X'
0000000000010906         db  0x49 ; 'I'
0000000000010907         db  0x0e ; '.'
0000000000010908         db  0x60 ; '`'
0000000000010909         db  0x50 ; 'P'
000000000001090a         db  0x0e ; '.'
000000000001090b         db  0x58 ; 'X'
000000000001090c         db  0x41 ; 'A'
000000000001090d         db  0x0e ; '.'
000000000001090e         db  0x50 ; 'P'
000000000001090f         db  0x44 ; 'D'
0000000000010910         db  0x0a ; '.'
0000000000010911         db  0x0e ; '.'
0000000000010912         db  0x38 ; '8'
0000000000010913         db  0x41 ; 'A'
0000000000010914         db  0x0e ; '.'
0000000000010915         db  0x30 ; '0'
0000000000010916         db  0x41 ; 'A'
0000000000010917         db  0x0e ; '.'
0000000000010918         db  0x28 ; '('
0000000000010919         db  0x42 ; 'B'
000000000001091a         db  0x0e ; '.'
000000000001091b         db  0x20 ; ' '
000000000001091c         db  0x42 ; 'B'
000000000001091d         db  0x0e ; '.'
000000000001091e         db  0x18 ; '.'
000000000001091f         db  0x42 ; 'B'
0000000000010920         db  0x0e ; '.'
0000000000010921         db  0x10 ; '.'
0000000000010922         db  0x42 ; 'B'
0000000000010923         db  0x0e ; '.'
0000000000010924         db  0x08 ; '.'
0000000000010925         db  0x49 ; 'I'
0000000000010926         db  0x0b ; '.'
0000000000010927         db  0x00 ; '.'
0000000000010928         dd         0x00000040                                  ; Length of the record
000000000001092c         dd         0x000002cc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010930         db         0xf0, 0x39, 2 dup (0xff)                    ; begin 0x4320
0000000000010934         db         0x01, 0x06, 2 dup (0x00)                    ; length 0x601 (end at 0x4921)
0000000000010938         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010939         db  0x42 ; 'B'
000000000001093a         db  0x0e ; '.'
000000000001093b         db  0x10 ; '.'
000000000001093c         db  0x8e ; '.'
000000000001093d         db  0x02 ; '.'
000000000001093e         db  0x42 ; 'B'
000000000001093f         db  0x0e ; '.'
0000000000010940         db  0x18 ; '.'
0000000000010941         db  0x8d ; '.'
0000000000010942         db  0x03 ; '.'
0000000000010943         db  0x45 ; 'E'
0000000000010944         db  0x0e ; '.'
0000000000010945         db  0x20 ; ' '
0000000000010946         db  0x8c ; '.'
0000000000010947         db  0x04 ; '.'
0000000000010948         db  0x41 ; 'A'
0000000000010949         db  0x0e ; '.'
000000000001094a         db  0x28 ; '('
000000000001094b         db  0x86 ; '.'
000000000001094c         db  0x05 ; '.'
000000000001094d         db  0x41 ; 'A'
000000000001094e         db  0x0e ; '.'
000000000001094f         db  0x30 ; '0'
0000000000010950         db  0x83 ; '.'
0000000000010951         db  0x06 ; '.'
0000000000010952         db  0x44 ; 'D'
0000000000010953         db  0x0e ; '.'
0000000000010954         db  0x40 ; '@'
0000000000010955         db  0x02 ; '.'
0000000000010956         db  0x43 ; 'C'
0000000000010957         db  0x0a ; '.'
0000000000010958         db  0x0e ; '.'
0000000000010959         db  0x30 ; '0'
000000000001095a         db  0x44 ; 'D'
000000000001095b         db  0x0e ; '.'
000000000001095c         db  0x28 ; '('
000000000001095d         db  0x41 ; 'A'
000000000001095e         db  0x0e ; '.'
000000000001095f         db  0x20 ; ' '
0000000000010960         db  0x42 ; 'B'
0000000000010961         db  0x0e ; '.'
0000000000010962         db  0x18 ; '.'
0000000000010963         db  0x42 ; 'B'
0000000000010964         db  0x0e ; '.'
0000000000010965         db  0x10 ; '.'
0000000000010966         db  0x42 ; 'B'
0000000000010967         db  0x0e ; '.'
0000000000010968         db  0x08 ; '.'
0000000000010969         db  0x43 ; 'C'
000000000001096a         db  0x0b ; '.'
000000000001096b         db  0x00 ; '.'
000000000001096c         dd         0x00000028                                  ; Length of the record
0000000000010970         dd         0x00000310                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010974         db         0xbc, 0x3f, 2 dup (0xff)                    ; begin 0x4930
0000000000010978         db         0x0a, 0x05, 2 dup (0x00)                    ; length 0x50a (end at 0x4e3a)
000000000001097c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001097d         db  0x42 ; 'B'
000000000001097e         db  0x0e ; '.'
000000000001097f         db  0x10 ; '.'
0000000000010980         db  0x8d ; '.'
0000000000010981         db  0x02 ; '.'
0000000000010982         db  0x42 ; 'B'
0000000000010983         db  0x0e ; '.'
0000000000010984         db  0x18 ; '.'
0000000000010985         db  0x8c ; '.'
0000000000010986         db  0x03 ; '.'
0000000000010987         db  0x46 ; 'F'
0000000000010988         db  0x0e ; '.'
0000000000010989         db  0x20 ; ' '
000000000001098a         db  0x86 ; '.'
000000000001098b         db  0x04 ; '.'
000000000001098c         db  0x41 ; 'A'
000000000001098d         db  0x0e ; '.'
000000000001098e         db  0x28 ; '('
000000000001098f         db  0x83 ; '.'
0000000000010990         db  0x05 ; '.'
0000000000010991         db  0x49 ; 'I'
0000000000010992         db  0x0e ; '.'
0000000000010993         db  0xb0 ; '.'
0000000000010994         db  0x01 ; '.'
0000000000010995         db  0x00 ; '.'
0000000000010996         db  0x00 ; '.'
0000000000010997         db  0x00 ; '.'
0000000000010998         dd         0x0000004c                                  ; Length of the record
000000000001099c         dd         0x0000033c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000109a0         db         0xa0, 0x18, 2 dup (0xff)                    ; begin 0x2240
00000000000109a4         db         0x64, 0x05, 2 dup (0x00)                    ; length 0x564 (end at 0x27a4)
00000000000109a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000109a9         db  0x42 ; 'B'
00000000000109aa         db  0x0e ; '.'
00000000000109ab         db  0x10 ; '.'
00000000000109ac         db  0x8f ; '.'
00000000000109ad         db  0x02 ; '.'
00000000000109ae         db  0x42 ; 'B'
00000000000109af         db  0x0e ; '.'
00000000000109b0         db  0x18 ; '.'
00000000000109b1         db  0x8e ; '.'
00000000000109b2         db  0x03 ; '.'
00000000000109b3         db  0x48 ; 'H'
00000000000109b4         db  0x0e ; '.'
00000000000109b5         db  0x20 ; ' '
00000000000109b6         db  0x8d ; '.'
00000000000109b7         db  0x04 ; '.'
00000000000109b8         db  0x42 ; 'B'
00000000000109b9         db  0x0e ; '.'
00000000000109ba         db  0x28 ; '('
00000000000109bb         db  0x8c ; '.'
00000000000109bc         db  0x05 ; '.'
00000000000109bd         db  0x48 ; 'H'
00000000000109be         db  0x0e ; '.'
00000000000109bf         db  0x30 ; '0'
00000000000109c0         db  0x86 ; '.'
00000000000109c1         db  0x06 ; '.'
00000000000109c2         db  0x41 ; 'A'
00000000000109c3         db  0x0e ; '.'
00000000000109c4         db  0x38 ; '8'
00000000000109c5         db  0x83 ; '.'
00000000000109c6         db  0x07 ; '.'
00000000000109c7         db  0x4c ; 'L'
00000000000109c8         db  0x0e ; '.'
00000000000109c9         db  0x80 ; '.'
00000000000109ca         db  0x02 ; '.'
00000000000109cb         db  0x03 ; '.'
00000000000109cc         db  0xa9 ; '.'
00000000000109cd         db  0x03 ; '.'
00000000000109ce         db  0x0a ; '.'
00000000000109cf         db  0x0e ; '.'
00000000000109d0         db  0x38 ; '8'
00000000000109d1         db  0x41 ; 'A'
00000000000109d2         db  0x0e ; '.'
00000000000109d3         db  0x30 ; '0'
00000000000109d4         db  0x41 ; 'A'
00000000000109d5         db  0x0e ; '.'
00000000000109d6         db  0x28 ; '('
00000000000109d7         db  0x42 ; 'B'
00000000000109d8         db  0x0e ; '.'
00000000000109d9         db  0x20 ; ' '
00000000000109da         db  0x42 ; 'B'
00000000000109db         db  0x0e ; '.'
00000000000109dc         db  0x18 ; '.'
00000000000109dd         db  0x42 ; 'B'
00000000000109de         db  0x0e ; '.'
00000000000109df         db  0x10 ; '.'
00000000000109e0         db  0x42 ; 'B'
00000000000109e1         db  0x0e ; '.'
00000000000109e2         db  0x08 ; '.'
00000000000109e3         db  0x41 ; 'A'
00000000000109e4         db  0x0b ; '.'
00000000000109e5         db  0x00 ; '.'
00000000000109e6         db  0x00 ; '.'
00000000000109e7         db  0x00 ; '.'
00000000000109e8         dd         0x0000002c                                  ; Length of the record
00000000000109ec         dd         0x0000038c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000109f0         db         0x50, 0x44, 2 dup (0xff)                    ; begin 0x4e40
00000000000109f4         db         0xb8, 0x03, 2 dup (0x00)                    ; length 0x3b8 (end at 0x51f8)
00000000000109f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000109f9         db  0x41 ; 'A'
00000000000109fa         db  0x0e ; '.'
00000000000109fb         db  0x10 ; '.'
00000000000109fc         db  0x86 ; '.'
00000000000109fd         db  0x02 ; '.'
00000000000109fe         db  0x43 ; 'C'
00000000000109ff         db  0x0d ; '.'
0000000000010a00         db  0x06 ; '.'
0000000000010a01         db  0x46 ; 'F'
0000000000010a02         db  0x8f ; '.'
0000000000010a03         db  0x03 ; '.'
0000000000010a04         db  0x8e ; '.'
0000000000010a05         db  0x04 ; '.'
0000000000010a06         db  0x8d ; '.'
0000000000010a07         db  0x05 ; '.'
0000000000010a08         db  0x4a ; 'J'
0000000000010a09         db  0x8c ; '.'
0000000000010a0a         db  0x06 ; '.'
0000000000010a0b         db  0x83 ; '.'
0000000000010a0c         db  0x07 ; '.'
0000000000010a0d         db  0x03 ; '.'
0000000000010a0e         db  0x14 ; '.'
0000000000010a0f         db  0x02 ; '.'
0000000000010a10         db  0x0a ; '.'
0000000000010a11         db  0x0c ; '.'
0000000000010a12         db  0x07 ; '.'
0000000000010a13         db  0x08 ; '.'
0000000000010a14         db  0x48 ; 'H'
0000000000010a15         db  0x0b ; '.'
0000000000010a16         db  0x00 ; '.'
0000000000010a17         db  0x00 ; '.'
0000000000010a18         dd         0x0000004c                                  ; Length of the record
0000000000010a1c         dd         0x000003bc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010a20         db         0xe0, 0x47, 2 dup (0xff)                    ; begin 0x5200
0000000000010a24         db         0xef, 3 dup (0x00)                          ; length 0xef (end at 0x52ef)
0000000000010a28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010a29         db  0x42 ; 'B'
0000000000010a2a         db  0x0e ; '.'
0000000000010a2b         db  0x10 ; '.'
0000000000010a2c         db  0x8f ; '.'
0000000000010a2d         db  0x02 ; '.'
0000000000010a2e         db  0x42 ; 'B'
0000000000010a2f         db  0x0e ; '.'
0000000000010a30         db  0x18 ; '.'
0000000000010a31         db  0x8e ; '.'
0000000000010a32         db  0x03 ; '.'
0000000000010a33         db  0x47 ; 'G'
0000000000010a34         db  0x0e ; '.'
0000000000010a35         db  0x20 ; ' '
0000000000010a36         db  0x8d ; '.'
0000000000010a37         db  0x04 ; '.'
0000000000010a38         db  0x42 ; 'B'
0000000000010a39         db  0x0e ; '.'
0000000000010a3a         db  0x28 ; '('
0000000000010a3b         db  0x8c ; '.'
0000000000010a3c         db  0x05 ; '.'
0000000000010a3d         db  0x44 ; 'D'
0000000000010a3e         db  0x0e ; '.'
0000000000010a3f         db  0x30 ; '0'
0000000000010a40         db  0x86 ; '.'
0000000000010a41         db  0x06 ; '.'
0000000000010a42         db  0x41 ; 'A'
0000000000010a43         db  0x0e ; '.'
0000000000010a44         db  0x38 ; '8'
0000000000010a45         db  0x83 ; '.'
0000000000010a46         db  0x07 ; '.'
0000000000010a47         db  0x5c ; '\'
0000000000010a48         db  0x0e ; '.'
0000000000010a49         db  0x40 ; '@'
0000000000010a4a         db  0x02 ; '.'
0000000000010a4b         db  0x61 ; 'a'
0000000000010a4c         db  0x0a ; '.'
0000000000010a4d         db  0x0e ; '.'
0000000000010a4e         db  0x38 ; '8'
0000000000010a4f         db  0x44 ; 'D'
0000000000010a50         db  0x0e ; '.'
0000000000010a51         db  0x30 ; '0'
0000000000010a52         db  0x41 ; 'A'
0000000000010a53         db  0x0e ; '.'
0000000000010a54         db  0x28 ; '('
0000000000010a55         db  0x42 ; 'B'
0000000000010a56         db  0x0e ; '.'
0000000000010a57         db  0x20 ; ' '
0000000000010a58         db  0x42 ; 'B'
0000000000010a59         db  0x0e ; '.'
0000000000010a5a         db  0x18 ; '.'
0000000000010a5b         db  0x42 ; 'B'
0000000000010a5c         db  0x0e ; '.'
0000000000010a5d         db  0x10 ; '.'
0000000000010a5e         db  0x42 ; 'B'
0000000000010a5f         db  0x0e ; '.'
0000000000010a60         db  0x08 ; '.'
0000000000010a61         db  0x44 ; 'D'
0000000000010a62         db  0x0b ; '.'
0000000000010a63         db  0x00 ; '.'
0000000000010a64         db  0x00 ; '.'
0000000000010a65         db  0x00 ; '.'
0000000000010a66         db  0x00 ; '.'
0000000000010a67         db  0x00 ; '.'
0000000000010a68         dd         0x00000010                                  ; Length of the record
0000000000010a6c         dd         0x0000040c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010a70         db         0x80, 0x48, 2 dup (0xff)                    ; begin 0x52f0
0000000000010a74         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x52fa)
0000000000010a78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010a79         align      4
0000000000010a7c         dd         0x00000048                                  ; Length of the record
0000000000010a80         dd         0x00000420                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010a84         db         0x7c, 0x48, 2 dup (0xff)                    ; begin 0x5300
0000000000010a88         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x5416)
0000000000010a8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010a8d         db  0x42 ; 'B'
0000000000010a8e         db  0x0e ; '.'
0000000000010a8f         db  0x10 ; '.'
0000000000010a90         db  0x8f ; '.'
0000000000010a91         db  0x02 ; '.'
0000000000010a92         db  0x42 ; 'B'
0000000000010a93         db  0x0e ; '.'
0000000000010a94         db  0x18 ; '.'
0000000000010a95         db  0x8e ; '.'
0000000000010a96         db  0x03 ; '.'
0000000000010a97         db  0x45 ; 'E'
0000000000010a98         db  0x0e ; '.'
0000000000010a99         db  0x20 ; ' '
0000000000010a9a         db  0x8d ; '.'
0000000000010a9b         db  0x04 ; '.'
0000000000010a9c         db  0x42 ; 'B'
0000000000010a9d         db  0x0e ; '.'
0000000000010a9e         db  0x28 ; '('
0000000000010a9f         db  0x8c ; '.'
0000000000010aa0         db  0x05 ; '.'
0000000000010aa1         db  0x44 ; 'D'
0000000000010aa2         db  0x0e ; '.'
0000000000010aa3         db  0x30 ; '0'
0000000000010aa4         db  0x86 ; '.'
0000000000010aa5         db  0x06 ; '.'
0000000000010aa6         db  0x41 ; 'A'
0000000000010aa7         db  0x0e ; '.'
0000000000010aa8         db  0x38 ; '8'
0000000000010aa9         db  0x83 ; '.'
0000000000010aaa         db  0x07 ; '.'
0000000000010aab         db  0x47 ; 'G'
0000000000010aac         db  0x0e ; '.'
0000000000010aad         db  0x60 ; '`'
0000000000010aae         db  0x02 ; '.'
0000000000010aaf         db  0xde ; '.'
0000000000010ab0         db  0x0a ; '.'
0000000000010ab1         db  0x0e ; '.'
0000000000010ab2         db  0x38 ; '8'
0000000000010ab3         db  0x41 ; 'A'
0000000000010ab4         db  0x0e ; '.'
0000000000010ab5         db  0x30 ; '0'
0000000000010ab6         db  0x41 ; 'A'
0000000000010ab7         db  0x0e ; '.'
0000000000010ab8         db  0x28 ; '('
0000000000010ab9         db  0x42 ; 'B'
0000000000010aba         db  0x0e ; '.'
0000000000010abb         db  0x20 ; ' '
0000000000010abc         db  0x42 ; 'B'
0000000000010abd         db  0x0e ; '.'
0000000000010abe         db  0x18 ; '.'
0000000000010abf         db  0x42 ; 'B'
0000000000010ac0         db  0x0e ; '.'
0000000000010ac1         db  0x10 ; '.'
0000000000010ac2         db  0x42 ; 'B'
0000000000010ac3         db  0x0e ; '.'
0000000000010ac4         db  0x08 ; '.'
0000000000010ac5         db  0x41 ; 'A'
0000000000010ac6         db  0x0b ; '.'
0000000000010ac7         db  0x00 ; '.'
0000000000010ac8         dd         0x00000028                                  ; Length of the record
0000000000010acc         dd         0x0000046c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010ad0         db         0x50, 0x49, 2 dup (0xff)                    ; begin 0x5420
0000000000010ad4         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x5493)
0000000000010ad8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010ad9         db  0x46 ; 'F'
0000000000010ada         db  0x0e ; '.'
0000000000010adb         db  0x10 ; '.'
0000000000010adc         db  0x8c ; '.'
0000000000010add         db  0x02 ; '.'
0000000000010ade         db  0x46 ; 'F'
0000000000010adf         db  0x0e ; '.'
0000000000010ae0         db  0x18 ; '.'
0000000000010ae1         db  0x86 ; '.'
0000000000010ae2         db  0x03 ; '.'
0000000000010ae3         db  0x44 ; 'D'
0000000000010ae4         db  0x0e ; '.'
0000000000010ae5         db  0x20 ; ' '
0000000000010ae6         db  0x83 ; '.'
0000000000010ae7         db  0x04 ; '.'
0000000000010ae8         db  0x7f ; '.'
0000000000010ae9         db  0x0a ; '.'
0000000000010aea         db  0x0e ; '.'
0000000000010aeb         db  0x18 ; '.'
0000000000010aec         db  0x41 ; 'A'
0000000000010aed         db  0x0e ; '.'
0000000000010aee         db  0x10 ; '.'
0000000000010aef         db  0x42 ; 'B'
0000000000010af0         db  0x0e ; '.'
0000000000010af1         db  0x08 ; '.'
0000000000010af2         db  0x4e ; 'N'
0000000000010af3         db  0x0b ; '.'
0000000000010af4         dd         0x0000005c                                  ; Length of the record
0000000000010af8         dd         0x00000498                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010afc         db         0xa4, 0x49, 2 dup (0xff)                    ; begin 0x54a0
0000000000010b00         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x55c0)
0000000000010b04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010b05         db  0x42 ; 'B'
0000000000010b06         db  0x0e ; '.'
0000000000010b07         db  0x10 ; '.'
0000000000010b08         db  0x8f ; '.'
0000000000010b09         db  0x02 ; '.'
0000000000010b0a         db  0x42 ; 'B'
0000000000010b0b         db  0x0e ; '.'
0000000000010b0c         db  0x18 ; '.'
0000000000010b0d         db  0x8e ; '.'
0000000000010b0e         db  0x03 ; '.'
0000000000010b0f         db  0x45 ; 'E'
0000000000010b10         db  0x0e ; '.'
0000000000010b11         db  0x20 ; ' '
0000000000010b12         db  0x8d ; '.'
0000000000010b13         db  0x04 ; '.'
0000000000010b14         db  0x42 ; 'B'
0000000000010b15         db  0x0e ; '.'
0000000000010b16         db  0x28 ; '('
0000000000010b17         db  0x8c ; '.'
0000000000010b18         db  0x05 ; '.'
0000000000010b19         db  0x43 ; 'C'
0000000000010b1a         db  0x0e ; '.'
0000000000010b1b         db  0x30 ; '0'
0000000000010b1c         db  0x86 ; '.'
0000000000010b1d         db  0x06 ; '.'
0000000000010b1e         db  0x41 ; 'A'
0000000000010b1f         db  0x0e ; '.'
0000000000010b20         db  0x38 ; '8'
0000000000010b21         db  0x83 ; '.'
0000000000010b22         db  0x07 ; '.'
0000000000010b23         db  0x56 ; 'V'
0000000000010b24         db  0x0e ; '.'
0000000000010b25         db  0x40 ; '@'
0000000000010b26         db  0x02 ; '.'
0000000000010b27         db  0xd3 ; '.'
0000000000010b28         db  0x0a ; '.'
0000000000010b29         db  0x0e ; '.'
0000000000010b2a         db  0x38 ; '8'
0000000000010b2b         db  0x41 ; 'A'
0000000000010b2c         db  0x0e ; '.'
0000000000010b2d         db  0x30 ; '0'
0000000000010b2e         db  0x41 ; 'A'
0000000000010b2f         db  0x0e ; '.'
0000000000010b30         db  0x28 ; '('
0000000000010b31         db  0x42 ; 'B'
0000000000010b32         db  0x0e ; '.'
0000000000010b33         db  0x20 ; ' '
0000000000010b34         db  0x42 ; 'B'
0000000000010b35         db  0x0e ; '.'
0000000000010b36         db  0x18 ; '.'
0000000000010b37         db  0x42 ; 'B'
0000000000010b38         db  0x0e ; '.'
0000000000010b39         db  0x10 ; '.'
0000000000010b3a         db  0x42 ; 'B'
0000000000010b3b         db  0x0e ; '.'
0000000000010b3c         db  0x08 ; '.'
0000000000010b3d         db  0x46 ; 'F'
0000000000010b3e         db  0x0b ; '.'
0000000000010b3f         db  0x44 ; 'D'
0000000000010b40         db  0x0e ; '.'
0000000000010b41         db  0x38 ; '8'
0000000000010b42         db  0x46 ; 'F'
0000000000010b43         db  0x0e ; '.'
0000000000010b44         db  0x30 ; '0'
0000000000010b45         db  0x41 ; 'A'
0000000000010b46         db  0x0e ; '.'
0000000000010b47         db  0x28 ; '('
0000000000010b48         db  0x42 ; 'B'
0000000000010b49         db  0x0e ; '.'
0000000000010b4a         db  0x20 ; ' '
0000000000010b4b         db  0x42 ; 'B'
0000000000010b4c         db  0x0e ; '.'
0000000000010b4d         db  0x18 ; '.'
0000000000010b4e         db  0x42 ; 'B'
0000000000010b4f         db  0x0e ; '.'
0000000000010b50         db  0x10 ; '.'
0000000000010b51         db  0x42 ; 'B'
0000000000010b52         db  0x0e ; '.'
0000000000010b53         db  0x08 ; '.'
0000000000010b54         dd         0x00000048                                  ; Length of the record
0000000000010b58         dd         0x000004f8                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010b5c         db         0x64, 0x4a, 2 dup (0xff)                    ; begin 0x55c0
0000000000010b60         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x562d)
0000000000010b64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010b65         db  0x42 ; 'B'
0000000000010b66         db  0x0e ; '.'
0000000000010b67         db  0x10 ; '.'
0000000000010b68         db  0x8f ; '.'
0000000000010b69         db  0x02 ; '.'
0000000000010b6a         db  0x42 ; 'B'
0000000000010b6b         db  0x0e ; '.'
0000000000010b6c         db  0x18 ; '.'
0000000000010b6d         db  0x8e ; '.'
0000000000010b6e         db  0x03 ; '.'
0000000000010b6f         db  0x45 ; 'E'
0000000000010b70         db  0x0e ; '.'
0000000000010b71         db  0x20 ; ' '
0000000000010b72         db  0x8d ; '.'
0000000000010b73         db  0x04 ; '.'
0000000000010b74         db  0x42 ; 'B'
0000000000010b75         db  0x0e ; '.'
0000000000010b76         db  0x28 ; '('
0000000000010b77         db  0x8c ; '.'
0000000000010b78         db  0x05 ; '.'
0000000000010b79         db  0x44 ; 'D'
0000000000010b7a         db  0x0e ; '.'
0000000000010b7b         db  0x30 ; '0'
0000000000010b7c         db  0x86 ; '.'
0000000000010b7d         db  0x06 ; '.'
0000000000010b7e         db  0x41 ; 'A'
0000000000010b7f         db  0x0e ; '.'
0000000000010b80         db  0x38 ; '8'
0000000000010b81         db  0x83 ; '.'
0000000000010b82         db  0x07 ; '.'
0000000000010b83         db  0x50 ; 'P'
0000000000010b84         db  0x0e ; '.'
0000000000010b85         db  0x40 ; '@'
0000000000010b86         db  0x5a ; 'Z'
0000000000010b87         db  0x0a ; '.'
0000000000010b88         db  0x0e ; '.'
0000000000010b89         db  0x38 ; '8'
0000000000010b8a         db  0x41 ; 'A'
0000000000010b8b         db  0x0e ; '.'
0000000000010b8c         db  0x30 ; '0'
0000000000010b8d         db  0x41 ; 'A'
0000000000010b8e         db  0x0e ; '.'
0000000000010b8f         db  0x28 ; '('
0000000000010b90         db  0x42 ; 'B'
0000000000010b91         db  0x0e ; '.'
0000000000010b92         db  0x20 ; ' '
0000000000010b93         db  0x42 ; 'B'
0000000000010b94         db  0x0e ; '.'
0000000000010b95         db  0x18 ; '.'
0000000000010b96         db  0x42 ; 'B'
0000000000010b97         db  0x0e ; '.'
0000000000010b98         db  0x10 ; '.'
0000000000010b99         db  0x42 ; 'B'
0000000000010b9a         db  0x0e ; '.'
0000000000010b9b         db  0x08 ; '.'
0000000000010b9c         db  0x41 ; 'A'
0000000000010b9d         db  0x0b ; '.'
0000000000010b9e         db  0x00 ; '.'
0000000000010b9f         db  0x00 ; '.'
0000000000010ba0         dd         0x0000003c                                  ; Length of the record
0000000000010ba4         dd         0x00000544                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010ba8         db         0x88, 0x4a, 2 dup (0xff)                    ; begin 0x5630
0000000000010bac         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x567d)
0000000000010bb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010bb1         db  0x42 ; 'B'
0000000000010bb2         db  0x0e ; '.'
0000000000010bb3         db  0x10 ; '.'
0000000000010bb4         db  0x8e ; '.'
0000000000010bb5         db  0x02 ; '.'
0000000000010bb6         db  0x42 ; 'B'
0000000000010bb7         db  0x0e ; '.'
0000000000010bb8         db  0x18 ; '.'
0000000000010bb9         db  0x8d ; '.'
0000000000010bba         db  0x03 ; '.'
0000000000010bbb         db  0x42 ; 'B'
0000000000010bbc         db  0x0e ; '.'
0000000000010bbd         db  0x20 ; ' '
0000000000010bbe         db  0x8c ; '.'
0000000000010bbf         db  0x04 ; '.'
0000000000010bc0         db  0x41 ; 'A'
0000000000010bc1         db  0x0e ; '.'
0000000000010bc2         db  0x28 ; '('
0000000000010bc3         db  0x86 ; '.'
0000000000010bc4         db  0x05 ; '.'
0000000000010bc5         db  0x41 ; 'A'
0000000000010bc6         db  0x0e ; '.'
0000000000010bc7         db  0x30 ; '0'
0000000000010bc8         db  0x83 ; '.'
0000000000010bc9         db  0x06 ; '.'
0000000000010bca         db  0x7a ; 'z'
0000000000010bcb         db  0x0e ; '.'
0000000000010bcc         db  0x28 ; '('
0000000000010bcd         db  0x44 ; 'D'
0000000000010bce         db  0x0e ; '.'
0000000000010bcf         db  0x20 ; ' '
0000000000010bd0         db  0x42 ; 'B'
0000000000010bd1         db  0x0e ; '.'
0000000000010bd2         db  0x18 ; '.'
0000000000010bd3         db  0x42 ; 'B'
0000000000010bd4         db  0x0e ; '.'
0000000000010bd5         db  0x10 ; '.'
0000000000010bd6         db  0x42 ; 'B'
0000000000010bd7         db  0x0e ; '.'
0000000000010bd8         db  0x08 ; '.'
0000000000010bd9         db  0x00 ; '.'
0000000000010bda         db  0x00 ; '.'
0000000000010bdb         db  0x00 ; '.'
0000000000010bdc         db  0x00 ; '.'
0000000000010bdd         db  0x00 ; '.'
0000000000010bde         db  0x00 ; '.'
0000000000010bdf         db  0x00 ; '.'
0000000000010be0         dd         0x00000010                                  ; Length of the record
0000000000010be4         dd         0x00000584                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010be8         db         0x98, 0x4a, 2 dup (0xff)                    ; begin 0x5680
0000000000010bec         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5688)
0000000000010bf0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010bf1         align      4
0000000000010bf4         dd         0x00000010                                  ; Length of the record
0000000000010bf8         dd         0x00000598                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010bfc         db         0x94, 0x4a, 2 dup (0xff)                    ; begin 0x5690
0000000000010c00         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5698)
0000000000010c04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010c05         align      8
0000000000010c08         dd         0x0000002c                                  ; Length of the record
0000000000010c0c         dd         0x000005ac                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010c10         db         0x90, 0x4a, 2 dup (0xff)                    ; begin 0x56a0
0000000000010c14         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5744)
0000000000010c18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010c19         db  0x41 ; 'A'
0000000000010c1a         db  0x0e ; '.'
0000000000010c1b         db  0x10 ; '.'
0000000000010c1c         db  0x86 ; '.'
0000000000010c1d         db  0x02 ; '.'
0000000000010c1e         db  0x41 ; 'A'
0000000000010c1f         db  0x0e ; '.'
0000000000010c20         db  0x18 ; '.'
0000000000010c21         db  0x83 ; '.'
0000000000010c22         db  0x03 ; '.'
0000000000010c23         db  0x44 ; 'D'
0000000000010c24         db  0x0e ; '.'
0000000000010c25         db  0x20 ; ' '
0000000000010c26         db  0x7a ; 'z'
0000000000010c27         db  0x0a ; '.'
0000000000010c28         db  0x0e ; '.'
0000000000010c29         db  0x18 ; '.'
0000000000010c2a         db  0x41 ; 'A'
0000000000010c2b         db  0x0e ; '.'
0000000000010c2c         db  0x10 ; '.'
0000000000010c2d         db  0x41 ; 'A'
0000000000010c2e         db  0x0e ; '.'
0000000000010c2f         db  0x08 ; '.'
0000000000010c30         db  0x41 ; 'A'
0000000000010c31         db  0x0b ; '.'
0000000000010c32         db  0x00 ; '.'
0000000000010c33         db  0x00 ; '.'
0000000000010c34         db  0x00 ; '.'
0000000000010c35         db  0x00 ; '.'
0000000000010c36         db  0x00 ; '.'
0000000000010c37         db  0x00 ; '.'
0000000000010c38         dd         0x0000001c                                  ; Length of the record
0000000000010c3c         dd         0x000005dc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010c40         db         0x10, 0x4b, 2 dup (0xff)                    ; begin 0x5750
0000000000010c44         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x5768)
0000000000010c48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010c49         db  0x44 ; 'D'
0000000000010c4a         db  0x0e ; '.'
0000000000010c4b         db  0x10 ; '.'
0000000000010c4c         db  0x4e ; 'N'
0000000000010c4d         db  0x0a ; '.'
0000000000010c4e         db  0x0e ; '.'
0000000000010c4f         db  0x08 ; '.'
0000000000010c50         db  0x41 ; 'A'
0000000000010c51         db  0x0b ; '.'
0000000000010c52         db  0x00 ; '.'
0000000000010c53         db  0x00 ; '.'
0000000000010c54         db  0x00 ; '.'
0000000000010c55         db  0x00 ; '.'
0000000000010c56         db  0x00 ; '.'
0000000000010c57         db  0x00 ; '.'
0000000000010c58         dd         0x00000030                                  ; Length of the record
0000000000010c5c         dd         0x000005fc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010c60         db         0x10, 0x4b, 2 dup (0xff)                    ; begin 0x5770
0000000000010c64         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0x57cd)
0000000000010c68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010c69         db  0x41 ; 'A'
0000000000010c6a         db  0x0e ; '.'
0000000000010c6b         db  0x10 ; '.'
0000000000010c6c         db  0x86 ; '.'
0000000000010c6d         db  0x02 ; '.'
0000000000010c6e         db  0x41 ; 'A'
0000000000010c6f         db  0x0e ; '.'
0000000000010c70         db  0x18 ; '.'
0000000000010c71         db  0x83 ; '.'
0000000000010c72         db  0x03 ; '.'
0000000000010c73         db  0x49 ; 'I'
0000000000010c74         db  0x0e ; '.'
0000000000010c75         db  0x20 ; ' '
0000000000010c76         db  0x7c ; '|'
0000000000010c77         db  0x0a ; '.'
0000000000010c78         db  0x0e ; '.'
0000000000010c79         db  0x18 ; '.'
0000000000010c7a         db  0x44 ; 'D'
0000000000010c7b         db  0x0e ; '.'
0000000000010c7c         db  0x10 ; '.'
0000000000010c7d         db  0x41 ; 'A'
0000000000010c7e         db  0x0e ; '.'
0000000000010c7f         db  0x08 ; '.'
0000000000010c80         db  0x44 ; 'D'
0000000000010c81         db  0x0b ; '.'
0000000000010c82         db  0x44 ; 'D'
0000000000010c83         db  0x0e ; '.'
0000000000010c84         db  0x18 ; '.'
0000000000010c85         db  0x47 ; 'G'
0000000000010c86         db  0x0e ; '.'
0000000000010c87         db  0x10 ; '.'
0000000000010c88         db  0x41 ; 'A'
0000000000010c89         db  0x0e ; '.'
0000000000010c8a         db  0x08 ; '.'
0000000000010c8b         db  0x00 ; '.'
0000000000010c8c         dd         0x00000028                                  ; Length of the record
0000000000010c90         dd         0x00000630                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010c94         db         0x3c, 0x4b, 2 dup (0xff)                    ; begin 0x57d0
0000000000010c98         db         0x5a, 3 dup (0x00)                          ; length 0x5a (end at 0x582a)
0000000000010c9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010c9d         db  0x41 ; 'A'
0000000000010c9e         db  0x0e ; '.'
0000000000010c9f         db  0x10 ; '.'
0000000000010ca0         db  0x86 ; '.'
0000000000010ca1         db  0x02 ; '.'
0000000000010ca2         db  0x41 ; 'A'
0000000000010ca3         db  0x0e ; '.'
0000000000010ca4         db  0x18 ; '.'
0000000000010ca5         db  0x83 ; '.'
0000000000010ca6         db  0x03 ; '.'
0000000000010ca7         db  0x47 ; 'G'
0000000000010ca8         db  0x0e ; '.'
0000000000010ca9         db  0x20 ; ' '
0000000000010caa         db  0x02 ; '.'
0000000000010cab         db  0x41 ; 'A'
0000000000010cac         db  0x0a ; '.'
0000000000010cad         db  0x0e ; '.'
0000000000010cae         db  0x18 ; '.'
0000000000010caf         db  0x44 ; 'D'
0000000000010cb0         db  0x0e ; '.'
0000000000010cb1         db  0x10 ; '.'
0000000000010cb2         db  0x41 ; 'A'
0000000000010cb3         db  0x0e ; '.'
0000000000010cb4         db  0x08 ; '.'
0000000000010cb5         db  0x41 ; 'A'
0000000000010cb6         db  0x0b ; '.'
0000000000010cb7         db  0x00 ; '.'
0000000000010cb8         dd         0x00000010                                  ; Length of the record
0000000000010cbc         dd         0x0000065c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010cc0         db         0x70, 0x4b, 2 dup (0xff)                    ; begin 0x5830
0000000000010cc4         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x588c)
0000000000010cc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010cc9         align      4
0000000000010ccc         dd         0x00000028                                  ; Length of the record
0000000000010cd0         dd         0x00000670                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010cd4         db         0xbc, 0x4b, 2 dup (0xff)                    ; begin 0x5890
0000000000010cd8         db         0x47, 3 dup (0x00)                          ; length 0x47 (end at 0x58d7)
0000000000010cdc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010cdd         db  0x41 ; 'A'
0000000000010cde         db  0x0e ; '.'
0000000000010cdf         db  0x10 ; '.'
0000000000010ce0         db  0x83 ; '.'
0000000000010ce1         db  0x02 ; '.'
0000000000010ce2         db  0x5a ; 'Z'
0000000000010ce3         db  0x0a ; '.'
0000000000010ce4         db  0x0e ; '.'
0000000000010ce5         db  0x08 ; '.'
0000000000010ce6         db  0x45 ; 'E'
0000000000010ce7         db  0x0b ; '.'
0000000000010ce8         db  0x5d ; ']'
0000000000010ce9         db  0x0a ; '.'
0000000000010cea         db  0x0e ; '.'
0000000000010ceb         db  0x08 ; '.'
0000000000010cec         db  0x43 ; 'C'
0000000000010ced         db  0x0b ; '.'
0000000000010cee         db  0x46 ; 'F'
0000000000010cef         db  0x0e ; '.'
0000000000010cf0         db  0x08 ; '.'
0000000000010cf1         db  0x00 ; '.'
0000000000010cf2         db  0x00 ; '.'
0000000000010cf3         db  0x00 ; '.'
0000000000010cf4         db  0x00 ; '.'
0000000000010cf5         db  0x00 ; '.'
0000000000010cf6         db  0x00 ; '.'
0000000000010cf7         db  0x00 ; '.'
0000000000010cf8         dd         0x00000014                                  ; Length of the record
0000000000010cfc         dd         0x0000069c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010d00         db         0xe0, 0x4b, 2 dup (0xff)                    ; begin 0x58e0
0000000000010d04         db         0xee, 3 dup (0x00)                          ; length 0xee (end at 0x59ce)
0000000000010d08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010d09         align      16
0000000000010d10         dd         0x00000010                                  ; Length of the record
0000000000010d14         dd         0x000006b4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010d18         db         0xb8, 0x4c, 2 dup (0xff)                    ; begin 0x59d0
0000000000010d1c         db         0x83, 0x01, 2 dup (0x00)                    ; length 0x183 (end at 0x5b53)
0000000000010d20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010d21         align      4
0000000000010d24         dd         0x00000010                                  ; Length of the record
0000000000010d28         dd         0x000006c8                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010d2c         db         0x34, 0x4e, 2 dup (0xff)                    ; begin 0x5b60
0000000000010d30         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5b68)
0000000000010d34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010d35         align      8
0000000000010d38         dd         0x00000014                                  ; Length of the record
0000000000010d3c         dd         0x000006dc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010d40         db         0x30, 0x4e, 2 dup (0xff)                    ; begin 0x5b70
0000000000010d44         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x5c0c)
0000000000010d48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010d49         align      16
0000000000010d50         dd         0x00000028                                  ; Length of the record
0000000000010d54         dd         0x000006f4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010d58         db         0xb8, 0x4e, 2 dup (0xff)                    ; begin 0x5c10
0000000000010d5c         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x5c51)
0000000000010d60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010d61         db  0x45 ; 'E'
0000000000010d62         db  0x0e ; '.'
0000000000010d63         db  0x10 ; '.'
0000000000010d64         db  0x8c ; '.'
0000000000010d65         db  0x02 ; '.'
0000000000010d66         db  0x41 ; 'A'
0000000000010d67         db  0x0e ; '.'
0000000000010d68         db  0x18 ; '.'
0000000000010d69         db  0x86 ; '.'
0000000000010d6a         db  0x03 ; '.'
0000000000010d6b         db  0x44 ; 'D'
0000000000010d6c         db  0x0e ; '.'
0000000000010d6d         db  0x20 ; ' '
0000000000010d6e         db  0x83 ; '.'
0000000000010d6f         db  0x04 ; '.'
0000000000010d70         db  0x73 ; 's'
0000000000010d71         db  0x0e ; '.'
0000000000010d72         db  0x18 ; '.'
0000000000010d73         db  0x41 ; 'A'
0000000000010d74         db  0x0e ; '.'
0000000000010d75         db  0x10 ; '.'
0000000000010d76         db  0x42 ; 'B'
0000000000010d77         db  0x0e ; '.'
0000000000010d78         db  0x08 ; '.'
0000000000010d79         db  0x00 ; '.'
0000000000010d7a         db  0x00 ; '.'
0000000000010d7b         db  0x00 ; '.'
0000000000010d7c         dd         0x00000028                                  ; Length of the record
0000000000010d80         dd         0x00000720                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010d84         db         0xdc, 0x4e, 2 dup (0xff)                    ; begin 0x5c60
0000000000010d88         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x5ca1)
0000000000010d8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010d8d         db  0x45 ; 'E'
0000000000010d8e         db  0x0e ; '.'
0000000000010d8f         db  0x10 ; '.'
0000000000010d90         db  0x8c ; '.'
0000000000010d91         db  0x02 ; '.'
0000000000010d92         db  0x41 ; 'A'
0000000000010d93         db  0x0e ; '.'
0000000000010d94         db  0x18 ; '.'
0000000000010d95         db  0x86 ; '.'
0000000000010d96         db  0x03 ; '.'
0000000000010d97         db  0x44 ; 'D'
0000000000010d98         db  0x0e ; '.'
0000000000010d99         db  0x20 ; ' '
0000000000010d9a         db  0x83 ; '.'
0000000000010d9b         db  0x04 ; '.'
0000000000010d9c         db  0x73 ; 's'
0000000000010d9d         db  0x0e ; '.'
0000000000010d9e         db  0x18 ; '.'
0000000000010d9f         db  0x41 ; 'A'
0000000000010da0         db  0x0e ; '.'
0000000000010da1         db  0x10 ; '.'
0000000000010da2         db  0x42 ; 'B'
0000000000010da3         db  0x0e ; '.'
0000000000010da4         db  0x08 ; '.'
0000000000010da5         db  0x00 ; '.'
0000000000010da6         db  0x00 ; '.'
0000000000010da7         db  0x00 ; '.'
0000000000010da8         dd         0x00000074                                  ; Length of the record
0000000000010dac         dd         0x0000074c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010db0         db         0x00, 0x4f, 2 dup (0xff)                    ; begin 0x5cb0
0000000000010db4         db         0xb2, 0x1a, 2 dup (0x00)                    ; length 0x1ab2 (end at 0x7762)
0000000000010db8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010db9         db  0x42 ; 'B'
0000000000010dba         db  0x0e ; '.'
0000000000010dbb         db  0x10 ; '.'
0000000000010dbc         db  0x8f ; '.'
0000000000010dbd         db  0x02 ; '.'
0000000000010dbe         db  0x42 ; 'B'
0000000000010dbf         db  0x0e ; '.'
0000000000010dc0         db  0x18 ; '.'
0000000000010dc1         db  0x8e ; '.'
0000000000010dc2         db  0x03 ; '.'
0000000000010dc3         db  0x45 ; 'E'
0000000000010dc4         db  0x0e ; '.'
0000000000010dc5         db  0x20 ; ' '
0000000000010dc6         db  0x8d ; '.'
0000000000010dc7         db  0x04 ; '.'
0000000000010dc8         db  0x42 ; 'B'
0000000000010dc9         db  0x0e ; '.'
0000000000010dca         db  0x28 ; '('
0000000000010dcb         db  0x8c ; '.'
0000000000010dcc         db  0x05 ; '.'
0000000000010dcd         db  0x44 ; 'D'
0000000000010dce         db  0x0e ; '.'
0000000000010dcf         db  0x30 ; '0'
0000000000010dd0         db  0x86 ; '.'
0000000000010dd1         db  0x06 ; '.'
0000000000010dd2         db  0x41 ; 'A'
0000000000010dd3         db  0x0e ; '.'
0000000000010dd4         db  0x38 ; '8'
0000000000010dd5         db  0x83 ; '.'
0000000000010dd6         db  0x07 ; '.'
0000000000010dd7         db  0x4a ; 'J'
0000000000010dd8         db  0x0e ; '.'
0000000000010dd9         db  0x80 ; '.'
0000000000010dda         db  0x0a ; '.'
0000000000010ddb         db  0x02 ; '.'
0000000000010ddc         db  0xd6 ; '.'
0000000000010ddd         db  0x0a ; '.'
0000000000010dde         db  0x0e ; '.'
0000000000010ddf         db  0x38 ; '8'
0000000000010de0         db  0x41 ; 'A'
0000000000010de1         db  0x0e ; '.'
0000000000010de2         db  0x30 ; '0'
0000000000010de3         db  0x41 ; 'A'
0000000000010de4         db  0x0e ; '.'
0000000000010de5         db  0x28 ; '('
0000000000010de6         db  0x42 ; 'B'
0000000000010de7         db  0x0e ; '.'
0000000000010de8         db  0x20 ; ' '
0000000000010de9         db  0x42 ; 'B'
0000000000010dea         db  0x0e ; '.'
0000000000010deb         db  0x18 ; '.'
0000000000010dec         db  0x42 ; 'B'
0000000000010ded         db  0x0e ; '.'
0000000000010dee         db  0x10 ; '.'
0000000000010def         db  0x42 ; 'B'
0000000000010df0         db  0x0e ; '.'
0000000000010df1         db  0x08 ; '.'
0000000000010df2         db  0x46 ; 'F'
0000000000010df3         db  0x0b ; '.'
0000000000010df4         db  0x03 ; '.'
0000000000010df5         db  0x99 ; '.'
0000000000010df6         db  0x05 ; '.'
0000000000010df7         db  0x0e ; '.'
0000000000010df8         db  0x88 ; '.'
0000000000010df9         db  0x0a ; '.'
0000000000010dfa         db  0x44 ; 'D'
0000000000010dfb         db  0x0e ; '.'
0000000000010dfc         db  0x90 ; '.'
0000000000010dfd         db  0x0a ; '.'
0000000000010dfe         db  0x44 ; 'D'
0000000000010dff         db  0x0e ; '.'
0000000000010e00         db  0x98 ; '.'
0000000000010e01         db  0x0a ; '.'
0000000000010e02         db  0x45 ; 'E'
0000000000010e03         db  0x0e ; '.'
0000000000010e04         db  0xa0 ; '.'
0000000000010e05         db  0x0a ; '.'
0000000000010e06         db  0x4e ; 'N'
0000000000010e07         db  0x0e ; '.'
0000000000010e08         db  0x80 ; '.'
0000000000010e09         db  0x0a ; '.'
0000000000010e0a         db  0x02 ; '.'
0000000000010e0b         db  0x98 ; '.'
0000000000010e0c         db  0x0e ; '.'
0000000000010e0d         db  0x88 ; '.'
0000000000010e0e         db  0x0a ; '.'
0000000000010e0f         db  0x44 ; 'D'
0000000000010e10         db  0x0e ; '.'
0000000000010e11         db  0x90 ; '.'
0000000000010e12         db  0x0a ; '.'
0000000000010e13         db  0x44 ; 'D'
0000000000010e14         db  0x0e ; '.'
0000000000010e15         db  0x98 ; '.'
0000000000010e16         db  0x0a ; '.'
0000000000010e17         db  0x45 ; 'E'
0000000000010e18         db  0x0e ; '.'
0000000000010e19         db  0xa0 ; '.'
0000000000010e1a         db  0x0a ; '.'
0000000000010e1b         db  0x5d ; ']'
0000000000010e1c         db  0x0e ; '.'
0000000000010e1d         db  0x80 ; '.'
0000000000010e1e         db  0x0a ; '.'
0000000000010e1f         db  0x00 ; '.'
0000000000010e20         dd         0x0000002c                                  ; Length of the record
0000000000010e24         dd         0x000007c4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010e28         db         0x48, 0x69, 2 dup (0xff)                    ; begin 0x7770
0000000000010e2c         db         0x4e, 3 dup (0x00)                          ; length 0x4e (end at 0x77be)
0000000000010e30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010e31         db  0x44 ; 'D'
0000000000010e32         db  0x0e ; '.'
0000000000010e33         db  0x20 ; ' '
0000000000010e34         db  0x57 ; 'W'
0000000000010e35         db  0x0e ; '.'
0000000000010e36         db  0x28 ; '('
0000000000010e37         db  0x45 ; 'E'
0000000000010e38         db  0x0e ; '.'
0000000000010e39         db  0x30 ; '0'
0000000000010e3a         db  0x49 ; 'I'
0000000000010e3b         db  0x0e ; '.'
0000000000010e3c         db  0x38 ; '8'
0000000000010e3d         db  0x42 ; 'B'
0000000000010e3e         db  0x0e ; '.'
0000000000010e3f         db  0x40 ; '@'
0000000000010e40         db  0x49 ; 'I'
0000000000010e41         db  0x0e ; '.'
0000000000010e42         db  0x20 ; ' '
0000000000010e43         db  0x54 ; 'T'
0000000000010e44         db  0x0a ; '.'
0000000000010e45         db  0x0e ; '.'
0000000000010e46         db  0x08 ; '.'
0000000000010e47         db  0x41 ; 'A'
0000000000010e48         db  0x0b ; '.'
0000000000010e49         db  0x00 ; '.'
0000000000010e4a         db  0x00 ; '.'
0000000000010e4b         db  0x00 ; '.'
0000000000010e4c         db  0x00 ; '.'
0000000000010e4d         db  0x00 ; '.'
0000000000010e4e         db  0x00 ; '.'
0000000000010e4f         db  0x00 ; '.'
0000000000010e50         dd         0x0000001c                                  ; Length of the record
0000000000010e54         dd         0x000007f4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010e58         db         0x68, 0x69, 2 dup (0xff)                    ; begin 0x77c0
0000000000010e5c         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x785f)
0000000000010e60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010e61         db  0x44 ; 'D'
0000000000010e62         db  0x0e ; '.'
0000000000010e63         db  0x10 ; '.'
0000000000010e64         db  0x83 ; '.'
0000000000010e65         db  0x02 ; '.'
0000000000010e66         db  0x02 ; '.'
0000000000010e67         db  0x78 ; 'x'
0000000000010e68         db  0x0a ; '.'
0000000000010e69         db  0x0e ; '.'
0000000000010e6a         db  0x08 ; '.'
0000000000010e6b         db  0x41 ; 'A'
0000000000010e6c         db  0x0b ; '.'
0000000000010e6d         db  0x00 ; '.'
0000000000010e6e         db  0x00 ; '.'
0000000000010e6f         db  0x00 ; '.'
0000000000010e70         dd         0x00000040                                  ; Length of the record
0000000000010e74         dd         0x00000814                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010e78         db         0xe8, 0x69, 2 dup (0xff)                    ; begin 0x7860
0000000000010e7c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x7947)
0000000000010e80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010e81         db  0x41 ; 'A'
0000000000010e82         db  0x0e ; '.'
0000000000010e83         db  0x10 ; '.'
0000000000010e84         db  0x86 ; '.'
0000000000010e85         db  0x02 ; '.'
0000000000010e86         db  0x41 ; 'A'
0000000000010e87         db  0x0e ; '.'
0000000000010e88         db  0x18 ; '.'
0000000000010e89         db  0x83 ; '.'
0000000000010e8a         db  0x03 ; '.'
0000000000010e8b         db  0x49 ; 'I'
0000000000010e8c         db  0x0e ; '.'
0000000000010e8d         db  0x20 ; ' '
0000000000010e8e         db  0x6e ; 'n'
0000000000010e8f         db  0x0a ; '.'
0000000000010e90         db  0x0e ; '.'
0000000000010e91         db  0x18 ; '.'
0000000000010e92         db  0x41 ; 'A'
0000000000010e93         db  0x0e ; '.'
0000000000010e94         db  0x10 ; '.'
0000000000010e95         db  0x41 ; 'A'
0000000000010e96         db  0x0e ; '.'
0000000000010e97         db  0x08 ; '.'
0000000000010e98         db  0x45 ; 'E'
0000000000010e99         db  0x0b ; '.'
0000000000010e9a         db  0x02 ; '.'
0000000000010e9b         db  0x4a ; 'J'
0000000000010e9c         db  0x0a ; '.'
0000000000010e9d         db  0x0e ; '.'
0000000000010e9e         db  0x18 ; '.'
0000000000010e9f         db  0x41 ; 'A'
0000000000010ea0         db  0x0e ; '.'
0000000000010ea1         db  0x10 ; '.'
0000000000010ea2         db  0x41 ; 'A'
0000000000010ea3         db  0x0e ; '.'
0000000000010ea4         db  0x08 ; '.'
0000000000010ea5         db  0x44 ; 'D'
0000000000010ea6         db  0x0b ; '.'
0000000000010ea7         db  0x02 ; '.'
0000000000010ea8         db  0x54 ; 'T'
0000000000010ea9         db  0x0e ; '.'
0000000000010eaa         db  0x18 ; '.'
0000000000010eab         db  0x41 ; 'A'
0000000000010eac         db  0x0e ; '.'
0000000000010ead         db  0x10 ; '.'
0000000000010eae         db  0x41 ; 'A'
0000000000010eaf         db  0x0e ; '.'
0000000000010eb0         db  0x08 ; '.'
0000000000010eb1         db  0x00 ; '.'
0000000000010eb2         db  0x00 ; '.'
0000000000010eb3         db  0x00 ; '.'
0000000000010eb4         dd         0x00000074                                  ; Length of the record
0000000000010eb8         dd         0x00000858                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010ebc         db         0x94, 0x6a, 2 dup (0xff)                    ; begin 0x7950
0000000000010ec0         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x8b84)
0000000000010ec4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010ec5         db  0x42 ; 'B'
0000000000010ec6         db  0x0e ; '.'
0000000000010ec7         db  0x10 ; '.'
0000000000010ec8         db  0x8f ; '.'
0000000000010ec9         db  0x02 ; '.'
0000000000010eca         db  0x42 ; 'B'
0000000000010ecb         db  0x0e ; '.'
0000000000010ecc         db  0x18 ; '.'
0000000000010ecd         db  0x8e ; '.'
0000000000010ece         db  0x03 ; '.'
0000000000010ecf         db  0x45 ; 'E'
0000000000010ed0         db  0x0e ; '.'
0000000000010ed1         db  0x20 ; ' '
0000000000010ed2         db  0x8d ; '.'
0000000000010ed3         db  0x04 ; '.'
0000000000010ed4         db  0x42 ; 'B'
0000000000010ed5         db  0x0e ; '.'
0000000000010ed6         db  0x28 ; '('
0000000000010ed7         db  0x8c ; '.'
0000000000010ed8         db  0x05 ; '.'
0000000000010ed9         db  0x44 ; 'D'
0000000000010eda         db  0x0e ; '.'
0000000000010edb         db  0x30 ; '0'
0000000000010edc         db  0x86 ; '.'
0000000000010edd         db  0x06 ; '.'
0000000000010ede         db  0x41 ; 'A'
0000000000010edf         db  0x0e ; '.'
0000000000010ee0         db  0x38 ; '8'
0000000000010ee1         db  0x83 ; '.'
0000000000010ee2         db  0x07 ; '.'
0000000000010ee3         db  0x53 ; 'S'
0000000000010ee4         db  0x0e ; '.'
0000000000010ee5         db  0xf0 ; '.'
0000000000010ee6         db  0x01 ; '.'
0000000000010ee7         db  0x03 ; '.'
0000000000010ee8         db  0x81 ; '.'
0000000000010ee9         db  0x0b ; '.'
0000000000010eea         db  0x0e ; '.'
0000000000010eeb         db  0xf8 ; '.'
0000000000010eec         db  0x01 ; '.'
0000000000010eed         db  0x4a ; 'J'
0000000000010eee         db  0x0e ; '.'
0000000000010eef         db  0x80 ; '.'
0000000000010ef0         db  0x02 ; '.'
0000000000010ef1         db  0x44 ; 'D'
0000000000010ef2         db  0x0e ; '.'
0000000000010ef3         db  0x88 ; '.'
0000000000010ef4         db  0x02 ; '.'
0000000000010ef5         db  0x45 ; 'E'
0000000000010ef6         db  0x0e ; '.'
0000000000010ef7         db  0x90 ; '.'
0000000000010ef8         db  0x02 ; '.'
0000000000010ef9         db  0x5f ; '_'
0000000000010efa         db  0x0e ; '.'
0000000000010efb         db  0xf0 ; '.'
0000000000010efc         db  0x01 ; '.'
0000000000010efd         db  0x64 ; 'd'
0000000000010efe         db  0x0a ; '.'
0000000000010eff         db  0x0e ; '.'
0000000000010f00         db  0x38 ; '8'
0000000000010f01         db  0x41 ; 'A'
0000000000010f02         db  0x0e ; '.'
0000000000010f03         db  0x30 ; '0'
0000000000010f04         db  0x41 ; 'A'
0000000000010f05         db  0x0e ; '.'
0000000000010f06         db  0x28 ; '('
0000000000010f07         db  0x42 ; 'B'
0000000000010f08         db  0x0e ; '.'
0000000000010f09         db  0x20 ; ' '
0000000000010f0a         db  0x42 ; 'B'
0000000000010f0b         db  0x0e ; '.'
0000000000010f0c         db  0x18 ; '.'
0000000000010f0d         db  0x42 ; 'B'
0000000000010f0e         db  0x0e ; '.'
0000000000010f0f         db  0x10 ; '.'
0000000000010f10         db  0x42 ; 'B'
0000000000010f11         db  0x0e ; '.'
0000000000010f12         db  0x08 ; '.'
0000000000010f13         db  0x44 ; 'D'
0000000000010f14         db  0x0b ; '.'
0000000000010f15         db  0x03 ; '.'
0000000000010f16         db  0x99 ; '.'
0000000000010f17         db  0x05 ; '.'
0000000000010f18         db  0x0e ; '.'
0000000000010f19         db  0xf8 ; '.'
0000000000010f1a         db  0x01 ; '.'
0000000000010f1b         db  0x4d ; 'M'
0000000000010f1c         db  0x0e ; '.'
0000000000010f1d         db  0x80 ; '.'
0000000000010f1e         db  0x02 ; '.'
0000000000010f1f         db  0x44 ; 'D'
0000000000010f20         db  0x0e ; '.'
0000000000010f21         db  0x88 ; '.'
0000000000010f22         db  0x02 ; '.'
0000000000010f23         db  0x47 ; 'G'
0000000000010f24         db  0x0e ; '.'
0000000000010f25         db  0x90 ; '.'
0000000000010f26         db  0x02 ; '.'
0000000000010f27         db  0x5b ; '['
0000000000010f28         db  0x0e ; '.'
0000000000010f29         db  0xf0 ; '.'
0000000000010f2a         db  0x01 ; '.'
0000000000010f2b         db  0x00 ; '.'
0000000000010f2c         dd         0x00000068                                  ; Length of the record
0000000000010f30         dd         0x000008d0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010f34         db         0x5c, 0x7c, 2 dup (0xff)                    ; begin 0x8b90
0000000000010f38         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x8d3b)
0000000000010f3c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010f3d         db  0x42 ; 'B'
0000000000010f3e         db  0x0e ; '.'
0000000000010f3f         db  0x10 ; '.'
0000000000010f40         db  0x8f ; '.'
0000000000010f41         db  0x02 ; '.'
0000000000010f42         db  0x42 ; 'B'
0000000000010f43         db  0x0e ; '.'
0000000000010f44         db  0x18 ; '.'
0000000000010f45         db  0x8e ; '.'
0000000000010f46         db  0x03 ; '.'
0000000000010f47         db  0x45 ; 'E'
0000000000010f48         db  0x0e ; '.'
0000000000010f49         db  0x20 ; ' '
0000000000010f4a         db  0x8d ; '.'
0000000000010f4b         db  0x04 ; '.'
0000000000010f4c         db  0x42 ; 'B'
0000000000010f4d         db  0x0e ; '.'
0000000000010f4e         db  0x28 ; '('
0000000000010f4f         db  0x8c ; '.'
0000000000010f50         db  0x05 ; '.'
0000000000010f51         db  0x44 ; 'D'
0000000000010f52         db  0x0e ; '.'
0000000000010f53         db  0x30 ; '0'
0000000000010f54         db  0x86 ; '.'
0000000000010f55         db  0x06 ; '.'
0000000000010f56         db  0x41 ; 'A'
0000000000010f57         db  0x0e ; '.'
0000000000010f58         db  0x38 ; '8'
0000000000010f59         db  0x83 ; '.'
0000000000010f5a         db  0x07 ; '.'
0000000000010f5b         db  0x47 ; 'G'
0000000000010f5c         db  0x0e ; '.'
0000000000010f5d         db  0x60 ; '`'
0000000000010f5e         db  0x02 ; '.'
0000000000010f5f         db  0x99 ; '.'
0000000000010f60         db  0x0e ; '.'
0000000000010f61         db  0x68 ; 'h'
0000000000010f62         db  0x5f ; '_'
0000000000010f63         db  0x0e ; '.'
0000000000010f64         db  0x70 ; 'p'
0000000000010f65         db  0x46 ; 'F'
0000000000010f66         db  0x0e ; '.'
0000000000010f67         db  0x78 ; 'x'
0000000000010f68         db  0x42 ; 'B'
0000000000010f69         db  0x0e ; '.'
0000000000010f6a         db  0x80 ; '.'
0000000000010f6b         db  0x01 ; '.'
0000000000010f6c         db  0x59 ; 'Y'
0000000000010f6d         db  0x0e ; '.'
0000000000010f6e         db  0x60 ; '`'
0000000000010f6f         db  0x02 ; '.'
0000000000010f70         db  0x40 ; '@'
0000000000010f71         db  0x0e ; '.'
0000000000010f72         db  0x68 ; 'h'
0000000000010f73         db  0x4b ; 'K'
0000000000010f74         db  0x0e ; '.'
0000000000010f75         db  0x70 ; 'p'
0000000000010f76         db  0x43 ; 'C'
0000000000010f77         db  0x0e ; '.'
0000000000010f78         db  0x78 ; 'x'
0000000000010f79         db  0x45 ; 'E'
0000000000010f7a         db  0x0e ; '.'
0000000000010f7b         db  0x80 ; '.'
0000000000010f7c         db  0x01 ; '.'
0000000000010f7d         db  0x5e ; '^'
0000000000010f7e         db  0x0e ; '.'
0000000000010f7f         db  0x60 ; '`'
0000000000010f80         db  0x4c ; 'L'
0000000000010f81         db  0x0a ; '.'
0000000000010f82         db  0x0e ; '.'
0000000000010f83         db  0x38 ; '8'
0000000000010f84         db  0x44 ; 'D'
0000000000010f85         db  0x0e ; '.'
0000000000010f86         db  0x30 ; '0'
0000000000010f87         db  0x41 ; 'A'
0000000000010f88         db  0x0e ; '.'
0000000000010f89         db  0x28 ; '('
0000000000010f8a         db  0x42 ; 'B'
0000000000010f8b         db  0x0e ; '.'
0000000000010f8c         db  0x20 ; ' '
0000000000010f8d         db  0x42 ; 'B'
0000000000010f8e         db  0x0e ; '.'
0000000000010f8f         db  0x18 ; '.'
0000000000010f90         db  0x42 ; 'B'
0000000000010f91         db  0x0e ; '.'
0000000000010f92         db  0x10 ; '.'
0000000000010f93         db  0x42 ; 'B'
0000000000010f94         db  0x0e ; '.'
0000000000010f95         db  0x08 ; '.'
0000000000010f96         db  0x46 ; 'F'
0000000000010f97         db  0x0b ; '.'
0000000000010f98         dd         0x00000028                                  ; Length of the record
0000000000010f9c         dd         0x0000093c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010fa0         db         0xa0, 0x7d, 2 dup (0xff)                    ; begin 0x8d40
0000000000010fa4         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x8d76)
0000000000010fa8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010fa9         db  0x42 ; 'B'
0000000000010faa         db  0x0e ; '.'
0000000000010fab         db  0x10 ; '.'
0000000000010fac         db  0x8c ; '.'
0000000000010fad         db  0x02 ; '.'
0000000000010fae         db  0x41 ; 'A'
0000000000010faf         db  0x0e ; '.'
0000000000010fb0         db  0x18 ; '.'
0000000000010fb1         db  0x86 ; '.'
0000000000010fb2         db  0x03 ; '.'
0000000000010fb3         db  0x41 ; 'A'
0000000000010fb4         db  0x0e ; '.'
0000000000010fb5         db  0x20 ; ' '
0000000000010fb6         db  0x83 ; '.'
0000000000010fb7         db  0x04 ; '.'
0000000000010fb8         db  0x6e ; 'n'
0000000000010fb9         db  0x0e ; '.'
0000000000010fba         db  0x18 ; '.'
0000000000010fbb         db  0x41 ; 'A'
0000000000010fbc         db  0x0e ; '.'
0000000000010fbd         db  0x10 ; '.'
0000000000010fbe         db  0x42 ; 'B'
0000000000010fbf         db  0x0e ; '.'
0000000000010fc0         db  0x08 ; '.'
0000000000010fc1         db  0x00 ; '.'
0000000000010fc2         db  0x00 ; '.'
0000000000010fc3         db  0x00 ; '.'
0000000000010fc4         dd         0x00000010                                  ; Length of the record
0000000000010fc8         dd         0x00000968                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010fcc         db         0xb4, 0x7d, 2 dup (0xff)                    ; begin 0x8d80
0000000000010fd0         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8d91)
0000000000010fd4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010fd5         align      8
0000000000010fd8         dd         0x00000010                                  ; Length of the record
0000000000010fdc         dd         0x0000097c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010fe0         db         0xc0, 0x7d, 2 dup (0xff)                    ; begin 0x8da0
0000000000010fe4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8db1)
0000000000010fe8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010fe9         align      4
0000000000010fec         dd         0x00000010                                  ; Length of the record
0000000000010ff0         dd         0x00000990                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000010ff4         db         0xcc, 0x7d, 2 dup (0xff)                    ; begin 0x8dc0
0000000000010ff8         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x8df5)
0000000000010ffc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010ffd         align      4096
0000000000011000         dd         0x00000010                                  ; Length of the record
0000000000011004         dd         0x000009a4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011008         db         0xf8, 0x7d, 2 dup (0xff)                    ; begin 0x8e00
000000000001100c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x8e15)
0000000000011010         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011011         align      4
0000000000011014         dd         0x00000010                                  ; Length of the record
0000000000011018         dd         0x000009b8                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001101c         db         0x04, 0x7e, 2 dup (0xff)                    ; begin 0x8e20
0000000000011020         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x8e50)
0000000000011024         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011025         db  0x6b ; 'k'
0000000000011026         db  0x0e ; '.'
0000000000011027         db  0x10 ; '.'
0000000000011028         dd         0x00000050                                  ; Length of the record
000000000001102c         dd         0x000009cc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011030         db         0x20, 0x7e, 2 dup (0xff)                    ; begin 0x8e50
0000000000011034         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x8ec4)
0000000000011038         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011039         db  0x42 ; 'B'
000000000001103a         db  0x0e ; '.'
000000000001103b         db  0x10 ; '.'
000000000001103c         db  0x8f ; '.'
000000000001103d         db  0x02 ; '.'
000000000001103e         db  0x42 ; 'B'
000000000001103f         db  0x0e ; '.'
0000000000011040         db  0x18 ; '.'
0000000000011041         db  0x8e ; '.'
0000000000011042         db  0x03 ; '.'
0000000000011043         db  0x49 ; 'I'
0000000000011044         db  0x0e ; '.'
0000000000011045         db  0x20 ; ' '
0000000000011046         db  0x8d ; '.'
0000000000011047         db  0x04 ; '.'
0000000000011048         db  0x42 ; 'B'
0000000000011049         db  0x0e ; '.'
000000000001104a         db  0x28 ; '('
000000000001104b         db  0x8c ; '.'
000000000001104c         db  0x05 ; '.'
000000000001104d         db  0x44 ; 'D'
000000000001104e         db  0x0e ; '.'
000000000001104f         db  0x30 ; '0'
0000000000011050         db  0x86 ; '.'
0000000000011051         db  0x06 ; '.'
0000000000011052         db  0x41 ; 'A'
0000000000011053         db  0x0e ; '.'
0000000000011054         db  0x38 ; '8'
0000000000011055         db  0x83 ; '.'
0000000000011056         db  0x07 ; '.'
0000000000011057         db  0x4d ; 'M'
0000000000011058         db  0x0e ; '.'
0000000000011059         db  0x50 ; 'P'
000000000001105a         db  0x5f ; '_'
000000000001105b         db  0x0e ; '.'
000000000001105c         db  0x58 ; 'X'
000000000001105d         db  0x47 ; 'G'
000000000001105e         db  0x0e ; '.'
000000000001105f         db  0x60 ; '`'
0000000000011060         db  0x46 ; 'F'
0000000000011061         db  0x0e ; '.'
0000000000011062         db  0x68 ; 'h'
0000000000011063         db  0x44 ; 'D'
0000000000011064         db  0x0e ; '.'
0000000000011065         db  0x70 ; 'p'
0000000000011066         db  0x58 ; 'X'
0000000000011067         db  0x0e ; '.'
0000000000011068         db  0x38 ; '8'
0000000000011069         db  0x41 ; 'A'
000000000001106a         db  0x0e ; '.'
000000000001106b         db  0x30 ; '0'
000000000001106c         db  0x41 ; 'A'
000000000001106d         db  0x0e ; '.'
000000000001106e         db  0x28 ; '('
000000000001106f         db  0x42 ; 'B'
0000000000011070         db  0x0e ; '.'
0000000000011071         db  0x20 ; ' '
0000000000011072         db  0x42 ; 'B'
0000000000011073         db  0x0e ; '.'
0000000000011074         db  0x18 ; '.'
0000000000011075         db  0x42 ; 'B'
0000000000011076         db  0x0e ; '.'
0000000000011077         db  0x10 ; '.'
0000000000011078         db  0x42 ; 'B'
0000000000011079         db  0x0e ; '.'
000000000001107a         db  0x08 ; '.'
000000000001107b         db  0x00 ; '.'
000000000001107c         dd         0x00000068                                  ; Length of the record
0000000000011080         dd         0x00000a20                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011084         db         0x4c, 0x7e, 2 dup (0xff)                    ; begin 0x8ed0
0000000000011088         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x8fb3)
000000000001108c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001108d         db  0x42 ; 'B'
000000000001108e         db  0x0e ; '.'
000000000001108f         db  0x10 ; '.'
0000000000011090         db  0x8f ; '.'
0000000000011091         db  0x02 ; '.'
0000000000011092         db  0x42 ; 'B'
0000000000011093         db  0x0e ; '.'
0000000000011094         db  0x18 ; '.'
0000000000011095         db  0x8e ; '.'
0000000000011096         db  0x03 ; '.'
0000000000011097         db  0x49 ; 'I'
0000000000011098         db  0x0e ; '.'
0000000000011099         db  0x20 ; ' '
000000000001109a         db  0x8d ; '.'
000000000001109b         db  0x04 ; '.'
000000000001109c         db  0x42 ; 'B'
000000000001109d         db  0x0e ; '.'
000000000001109e         db  0x28 ; '('
000000000001109f         db  0x8c ; '.'
00000000000110a0         db  0x05 ; '.'
00000000000110a1         db  0x44 ; 'D'
00000000000110a2         db  0x0e ; '.'
00000000000110a3         db  0x30 ; '0'
00000000000110a4         db  0x86 ; '.'
00000000000110a5         db  0x06 ; '.'
00000000000110a6         db  0x41 ; 'A'
00000000000110a7         db  0x0e ; '.'
00000000000110a8         db  0x38 ; '8'
00000000000110a9         db  0x83 ; '.'
00000000000110aa         db  0x07 ; '.'
00000000000110ab         db  0x4d ; 'M'
00000000000110ac         db  0x0e ; '.'
00000000000110ad         db  0x70 ; 'p'
00000000000110ae         db  0x65 ; 'e'
00000000000110af         db  0x0e ; '.'
00000000000110b0         db  0x78 ; 'x'
00000000000110b1         db  0x4d ; 'M'
00000000000110b2         db  0x0e ; '.'
00000000000110b3         db  0x80 ; '.'
00000000000110b4         db  0x01 ; '.'
00000000000110b5         db  0x46 ; 'F'
00000000000110b6         db  0x0e ; '.'
00000000000110b7         db  0x88 ; '.'
00000000000110b8         db  0x01 ; '.'
00000000000110b9         db  0x42 ; 'B'
00000000000110ba         db  0x0e ; '.'
00000000000110bb         db  0x90 ; '.'
00000000000110bc         db  0x01 ; '.'
00000000000110bd         db  0x5e ; '^'
00000000000110be         db  0x0e ; '.'
00000000000110bf         db  0x70 ; 'p'
00000000000110c0         db  0x56 ; 'V'
00000000000110c1         db  0x0e ; '.'
00000000000110c2         db  0x78 ; 'x'
00000000000110c3         db  0x43 ; 'C'
00000000000110c4         db  0x0e ; '.'
00000000000110c5         db  0x80 ; '.'
00000000000110c6         db  0x01 ; '.'
00000000000110c7         db  0x43 ; 'C'
00000000000110c8         db  0x0e ; '.'
00000000000110c9         db  0x88 ; '.'
00000000000110ca         db  0x01 ; '.'
00000000000110cb         db  0x56 ; 'V'
00000000000110cc         db  0x0e ; '.'
00000000000110cd         db  0x90 ; '.'
00000000000110ce         db  0x01 ; '.'
00000000000110cf         db  0x52 ; 'R'
00000000000110d0         db  0x0e ; '.'
00000000000110d1         db  0x70 ; 'p'
00000000000110d2         db  0x5b ; '['
00000000000110d3         db  0x0e ; '.'
00000000000110d4         db  0x38 ; '8'
00000000000110d5         db  0x41 ; 'A'
00000000000110d6         db  0x0e ; '.'
00000000000110d7         db  0x30 ; '0'
00000000000110d8         db  0x41 ; 'A'
00000000000110d9         db  0x0e ; '.'
00000000000110da         db  0x28 ; '('
00000000000110db         db  0x42 ; 'B'
00000000000110dc         db  0x0e ; '.'
00000000000110dd         db  0x20 ; ' '
00000000000110de         db  0x42 ; 'B'
00000000000110df         db  0x0e ; '.'
00000000000110e0         db  0x18 ; '.'
00000000000110e1         db  0x42 ; 'B'
00000000000110e2         db  0x0e ; '.'
00000000000110e3         db  0x10 ; '.'
00000000000110e4         db  0x42 ; 'B'
00000000000110e5         db  0x0e ; '.'
00000000000110e6         db  0x08 ; '.'
00000000000110e7         db  0x00 ; '.'
00000000000110e8         dd         0x00000010                                  ; Length of the record
00000000000110ec         dd         0x00000a8c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000110f0         db         0xd0, 0x7e, 2 dup (0xff)                    ; begin 0x8fc0
00000000000110f4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x8fca)
00000000000110f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000110f9         align      4
00000000000110fc         dd         0x00000028                                  ; Length of the record
0000000000011100         dd         0x00000aa0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011104         db         0xcc, 0x7e, 2 dup (0xff)                    ; begin 0x8fd0
0000000000011108         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x9063)
000000000001110c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001110d         db  0x48 ; 'H'
000000000001110e         db  0x0e ; '.'
000000000001110f         db  0x10 ; '.'
0000000000011110         db  0x8c ; '.'
0000000000011111         db  0x02 ; '.'
0000000000011112         db  0x48 ; 'H'
0000000000011113         db  0x0e ; '.'
0000000000011114         db  0x18 ; '.'
0000000000011115         db  0x86 ; '.'
0000000000011116         db  0x03 ; '.'
0000000000011117         db  0x41 ; 'A'
0000000000011118         db  0x0e ; '.'
0000000000011119         db  0x20 ; ' '
000000000001111a         db  0x83 ; '.'
000000000001111b         db  0x04 ; '.'
000000000001111c         db  0x02 ; '.'
000000000001111d         db  0x74 ; 't'
000000000001111e         db  0x0e ; '.'
000000000001111f         db  0x18 ; '.'
0000000000011120         db  0x4b ; 'K'
0000000000011121         db  0x0e ; '.'
0000000000011122         db  0x10 ; '.'
0000000000011123         db  0x42 ; 'B'
0000000000011124         db  0x0e ; '.'
0000000000011125         db  0x08 ; '.'
0000000000011126         db  0x00 ; '.'
0000000000011127         db  0x00 ; '.'
0000000000011128         dd         0x00000010                                  ; Length of the record
000000000001112c         dd         0x00000acc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011130         db         0x40, 0x7f, 2 dup (0xff)                    ; begin 0x9070
0000000000011134         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9083)
0000000000011138         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011139         align      4
000000000001113c         dd         0x00000010                                  ; Length of the record
0000000000011140         dd         0x00000ae0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011144         db         0x4c, 0x7f, 2 dup (0xff)                    ; begin 0x9090
0000000000011148         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x909c)
000000000001114c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001114d         align      16
0000000000011150         dd         0x00000010                                  ; Length of the record
0000000000011154         dd         0x00000af4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011158         db         0x48, 0x7f, 2 dup (0xff)                    ; begin 0x90a0
000000000001115c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x90b8)
0000000000011160         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011161         align      4
0000000000011164         dd         0x00000010                                  ; Length of the record
0000000000011168         dd         0x00000b08                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001116c         db         0x54, 0x7f, 2 dup (0xff)                    ; begin 0x90c0
0000000000011170         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x90d4)
0000000000011174         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011175         align      8
0000000000011178         dd         0x00000018                                  ; Length of the record
000000000001117c         dd         0x00000b1c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011180         db         0x60, 0x7f, 2 dup (0xff)                    ; begin 0x90e0
0000000000011184         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x916e)
0000000000011188         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011189         db  0x44 ; 'D'
000000000001118a         db  0x0e ; '.'
000000000001118b         db  0x50 ; 'P'
000000000001118c         db  0x02 ; '.'
000000000001118d         db  0x7f ; '.'
000000000001118e         db  0x0a ; '.'
000000000001118f         db  0x0e ; '.'
0000000000011190         db  0x08 ; '.'
0000000000011191         db  0x41 ; 'A'
0000000000011192         db  0x0b ; '.'
0000000000011193         db  0x00 ; '.'
0000000000011194         dd         0x00000018                                  ; Length of the record
0000000000011198         dd         0x00000b38                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001119c         db         0xd4, 0x7f, 2 dup (0xff)                    ; begin 0x9170
00000000000111a0         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x91fa)
00000000000111a4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000111a5         db  0x44 ; 'D'
00000000000111a6         db  0x0e ; '.'
00000000000111a7         db  0x50 ; 'P'
00000000000111a8         db  0x02 ; '.'
00000000000111a9         db  0x7b ; '{'
00000000000111aa         db  0x0a ; '.'
00000000000111ab         db  0x0e ; '.'
00000000000111ac         db  0x08 ; '.'
00000000000111ad         db  0x41 ; 'A'
00000000000111ae         db  0x0b ; '.'
00000000000111af         db  0x00 ; '.'
00000000000111b0         dd         0x00000010                                  ; Length of the record
00000000000111b4         dd         0x00000b54                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000111b8         db         0x48, 0x80, 2 dup (0xff)                    ; begin 0x9200
00000000000111bc         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x920c)
00000000000111c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000111c1         align      4
00000000000111c4         dd         0x00000010                                  ; Length of the record
00000000000111c8         dd         0x00000b68                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000111cc         db         0x44, 0x80, 2 dup (0xff)                    ; begin 0x9210
00000000000111d0         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x921f)
00000000000111d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000111d5         align      8
00000000000111d8         dd         0x00000018                                  ; Length of the record
00000000000111dc         dd         0x00000b7c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000111e0         db         0x40, 0x80, 2 dup (0xff)                    ; begin 0x9220
00000000000111e4         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x92b8)
00000000000111e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000111e9         db  0x44 ; 'D'
00000000000111ea         db  0x0e ; '.'
00000000000111eb         db  0x50 ; 'P'
00000000000111ec         db  0x02 ; '.'
00000000000111ed         db  0x8e ; '.'
00000000000111ee         db  0x0a ; '.'
00000000000111ef         db  0x0e ; '.'
00000000000111f0         db  0x08 ; '.'
00000000000111f1         db  0x41 ; 'A'
00000000000111f2         db  0x0b ; '.'
00000000000111f3         db  0x00 ; '.'
00000000000111f4         dd         0x00000010                                  ; Length of the record
00000000000111f8         dd         0x00000b98                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000111fc         db         0xc4, 0x80, 2 dup (0xff)                    ; begin 0x92c0
0000000000011200         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x92d0)
0000000000011204         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011205         align      8
0000000000011208         dd         0x00000010                                  ; Length of the record
000000000001120c         dd         0x00000bac                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011210         db         0xc0, 0x80, 2 dup (0xff)                    ; begin 0x92d0
0000000000011214         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x92e1)
0000000000011218         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011219         align      4
000000000001121c         dd         0x00000010                                  ; Length of the record
0000000000011220         dd         0x00000bc0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011224         db         0xcc, 0x80, 2 dup (0xff)                    ; begin 0x92f0
0000000000011228         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x92fa)
000000000001122c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001122d         align      16
0000000000011230         dd         0x00000018                                  ; Length of the record
0000000000011234         dd         0x00000bd4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011238         db         0xc8, 0x80, 2 dup (0xff)                    ; begin 0x9300
000000000001123c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x938e)
0000000000011240         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011241         db  0x44 ; 'D'
0000000000011242         db  0x0e ; '.'
0000000000011243         db  0x50 ; 'P'
0000000000011244         db  0x02 ; '.'
0000000000011245         db  0x7f ; '.'
0000000000011246         db  0x0a ; '.'
0000000000011247         db  0x0e ; '.'
0000000000011248         db  0x08 ; '.'
0000000000011249         db  0x41 ; 'A'
000000000001124a         db  0x0b ; '.'
000000000001124b         db  0x00 ; '.'
000000000001124c         dd         0x00000018                                  ; Length of the record
0000000000011250         dd         0x00000bf0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011254         db         0x3c, 0x81, 2 dup (0xff)                    ; begin 0x9390
0000000000011258         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x9421)
000000000001125c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001125d         db  0x44 ; 'D'
000000000001125e         db  0x0e ; '.'
000000000001125f         db  0x50 ; 'P'
0000000000011260         db  0x02 ; '.'
0000000000011261         db  0x82 ; '.'
0000000000011262         db  0x0a ; '.'
0000000000011263         db  0x0e ; '.'
0000000000011264         db  0x08 ; '.'
0000000000011265         db  0x41 ; 'A'
0000000000011266         db  0x0b ; '.'
0000000000011267         db  0x00 ; '.'
0000000000011268         dd         0x00000010                                  ; Length of the record
000000000001126c         dd         0x00000c0c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011270         db         0xc0, 0x81, 2 dup (0xff)                    ; begin 0x9430
0000000000011274         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x943c)
0000000000011278         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011279         align      4
000000000001127c         dd         0x00000010                                  ; Length of the record
0000000000011280         dd         0x00000c20                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011284         db         0xbc, 0x81, 2 dup (0xff)                    ; begin 0x9440
0000000000011288         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x9457)
000000000001128c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001128d         align      16
0000000000011290         dd         0x00000010                                  ; Length of the record
0000000000011294         dd         0x00000c34                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011298         db         0xc8, 0x81, 2 dup (0xff)                    ; begin 0x9460
000000000001129c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9473)
00000000000112a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000112a1         align      4
00000000000112a4         dd         0x00000010                                  ; Length of the record
00000000000112a8         dd         0x00000c48                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000112ac         db         0xd4, 0x81, 2 dup (0xff)                    ; begin 0x9480
00000000000112b0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x948c)
00000000000112b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000112b5         align      8
00000000000112b8         dd         0x00000010                                  ; Length of the record
00000000000112bc         dd         0x00000c5c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000112c0         db         0xd0, 0x81, 2 dup (0xff)                    ; begin 0x9490
00000000000112c4         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x94a4)
00000000000112c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000112c9         align      4
00000000000112cc         dd         0x00000010                                  ; Length of the record
00000000000112d0         dd         0x00000c70                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000112d4         db         0xdc, 0x81, 2 dup (0xff)                    ; begin 0x94b0
00000000000112d8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x94c3)
00000000000112dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000112dd         align      32
00000000000112e0         dd         0x00000014                                  ; Length of the record
00000000000112e4         dd         0x00000c84                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000112e8         db         0xe8, 0x81, 2 dup (0xff)                    ; begin 0x94d0
00000000000112ec         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x94e8)
00000000000112f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000112f1         align      8
00000000000112f8         dd         0x0000001c                                  ; Length of the record
00000000000112fc         dd         0x00000c9c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011300         db         0xf0, 0x81, 2 dup (0xff)                    ; begin 0x94f0
0000000000011304         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x953a)
0000000000011308         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011309         db  0x41 ; 'A'
000000000001130a         db  0x0e ; '.'
000000000001130b         db  0x10 ; '.'
000000000001130c         db  0x83 ; '.'
000000000001130d         db  0x02 ; '.'
000000000001130e         db  0x69 ; 'i'
000000000001130f         db  0x0a ; '.'
0000000000011310         db  0x0e ; '.'
0000000000011311         db  0x08 ; '.'
0000000000011312         db  0x46 ; 'F'
0000000000011313         db  0x0b ; '.'
0000000000011314         db  0x59 ; 'Y'
0000000000011315         db  0x0e ; '.'
0000000000011316         db  0x08 ; '.'
0000000000011317         db  0x00 ; '.'
0000000000011318         dd         0x00000010                                  ; Length of the record
000000000001131c         dd         0x00000cbc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011320         db         0x20, 0x82, 2 dup (0xff)                    ; begin 0x9540
0000000000011324         db         0x19, 3 dup (0x00)                          ; length 0x19 (end at 0x9559)
0000000000011328         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011329         align      4
000000000001132c         dd         0x00000018                                  ; Length of the record
0000000000011330         dd         0x00000cd0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011334         db         0x2c, 0x82, 2 dup (0xff)                    ; begin 0x9560
0000000000011338         db         0x19, 3 dup (0x00)                          ; length 0x19 (end at 0x9579)
000000000001133c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001133d         db  0x41 ; 'A'
000000000001133e         db  0x0e ; '.'
000000000001133f         db  0x10 ; '.'
0000000000011340         db  0x83 ; '.'
0000000000011341         db  0x02 ; '.'
0000000000011342         db  0x53 ; 'S'
0000000000011343         db  0x0e ; '.'
0000000000011344         db  0x08 ; '.'
0000000000011345         db  0x00 ; '.'
0000000000011346         db  0x00 ; '.'
0000000000011347         db  0x00 ; '.'
0000000000011348         dd         0x00000110                                  ; Length of the record
000000000001134c         dd         0x00000cec                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011350         db         0x30, 0x82, 2 dup (0xff)                    ; begin 0x9580
0000000000011354         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x9997)
0000000000011358         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011359         db  0x42 ; 'B'
000000000001135a         db  0x0e ; '.'
000000000001135b         db  0x10 ; '.'
000000000001135c         db  0x8f ; '.'
000000000001135d         db  0x02 ; '.'
000000000001135e         db  0x42 ; 'B'
000000000001135f         db  0x0e ; '.'
0000000000011360         db  0x18 ; '.'
0000000000011361         db  0x8e ; '.'
0000000000011362         db  0x03 ; '.'
0000000000011363         db  0x42 ; 'B'
0000000000011364         db  0x0e ; '.'
0000000000011365         db  0x20 ; ' '
0000000000011366         db  0x8d ; '.'
0000000000011367         db  0x04 ; '.'
0000000000011368         db  0x42 ; 'B'
0000000000011369         db  0x0e ; '.'
000000000001136a         db  0x28 ; '('
000000000001136b         db  0x8c ; '.'
000000000001136c         db  0x05 ; '.'
000000000001136d         db  0x44 ; 'D'
000000000001136e         db  0x0e ; '.'
000000000001136f         db  0x30 ; '0'
0000000000011370         db  0x86 ; '.'
0000000000011371         db  0x06 ; '.'
0000000000011372         db  0x41 ; 'A'
0000000000011373         db  0x0e ; '.'
0000000000011374         db  0x38 ; '8'
0000000000011375         db  0x83 ; '.'
0000000000011376         db  0x07 ; '.'
0000000000011377         db  0x4a ; 'J'
0000000000011378         db  0x0e ; '.'
0000000000011379         db  0x60 ; '`'
000000000001137a         db  0x02 ; '.'
000000000001137b         db  0xdd ; '.'
000000000001137c         db  0x0e ; '.'
000000000001137d         db  0x68 ; 'h'
000000000001137e         db  0x57 ; 'W'
000000000001137f         db  0x0e ; '.'
0000000000011380         db  0x70 ; 'p'
0000000000011381         db  0x42 ; 'B'
0000000000011382         db  0x0e ; '.'
0000000000011383         db  0x78 ; 'x'
0000000000011384         db  0x42 ; 'B'
0000000000011385         db  0x0e ; '.'
0000000000011386         db  0x80 ; '.'
0000000000011387         db  0x01 ; '.'
0000000000011388         db  0x42 ; 'B'
0000000000011389         db  0x0e ; '.'
000000000001138a         db  0x88 ; '.'
000000000001138b         db  0x01 ; '.'
000000000001138c         db  0x42 ; 'B'
000000000001138d         db  0x0e ; '.'
000000000001138e         db  0x90 ; '.'
000000000001138f         db  0x01 ; '.'
0000000000011390         db  0x53 ; 'S'
0000000000011391         db  0x0e ; '.'
0000000000011392         db  0x60 ; '`'
0000000000011393         db  0x44 ; 'D'
0000000000011394         db  0x0a ; '.'
0000000000011395         db  0x0e ; '.'
0000000000011396         db  0x38 ; '8'
0000000000011397         db  0x41 ; 'A'
0000000000011398         db  0x0e ; '.'
0000000000011399         db  0x30 ; '0'
000000000001139a         db  0x41 ; 'A'
000000000001139b         db  0x0e ; '.'
000000000001139c         db  0x28 ; '('
000000000001139d         db  0x42 ; 'B'
000000000001139e         db  0x0e ; '.'
000000000001139f         db  0x20 ; ' '
00000000000113a0         db  0x42 ; 'B'
00000000000113a1         db  0x0e ; '.'
00000000000113a2         db  0x18 ; '.'
00000000000113a3         db  0x42 ; 'B'
00000000000113a4         db  0x0e ; '.'
00000000000113a5         db  0x10 ; '.'
00000000000113a6         db  0x42 ; 'B'
00000000000113a7         db  0x0e ; '.'
00000000000113a8         db  0x08 ; '.'
00000000000113a9         db  0x44 ; 'D'
00000000000113aa         db  0x0b ; '.'
00000000000113ab         db  0x02 ; '.'
00000000000113ac         db  0x78 ; 'x'
00000000000113ad         db  0x0a ; '.'
00000000000113ae         db  0x0e ; '.'
00000000000113af         db  0x68 ; 'h'
00000000000113b0         db  0x48 ; 'H'
00000000000113b1         db  0x0b ; '.'
00000000000113b2         db  0x5a ; 'Z'
00000000000113b3         db  0x0a ; '.'
00000000000113b4         db  0x0e ; '.'
00000000000113b5         db  0x38 ; '8'
00000000000113b6         db  0x47 ; 'G'
00000000000113b7         db  0x0e ; '.'
00000000000113b8         db  0x30 ; '0'
00000000000113b9         db  0x41 ; 'A'
00000000000113ba         db  0x0e ; '.'
00000000000113bb         db  0x28 ; '('
00000000000113bc         db  0x42 ; 'B'
00000000000113bd         db  0x0e ; '.'
00000000000113be         db  0x20 ; ' '
00000000000113bf         db  0x42 ; 'B'
00000000000113c0         db  0x0e ; '.'
00000000000113c1         db  0x18 ; '.'
00000000000113c2         db  0x42 ; 'B'
00000000000113c3         db  0x0e ; '.'
00000000000113c4         db  0x10 ; '.'
00000000000113c5         db  0x42 ; 'B'
00000000000113c6         db  0x0e ; '.'
00000000000113c7         db  0x08 ; '.'
00000000000113c8         db  0x56 ; 'V'
00000000000113c9         db  0x0b ; '.'
00000000000113ca         db  0x5e ; '^'
00000000000113cb         db  0x0a ; '.'
00000000000113cc         db  0x0e ; '.'
00000000000113cd         db  0x38 ; '8'
00000000000113ce         db  0x52 ; 'R'
00000000000113cf         db  0x0e ; '.'
00000000000113d0         db  0x30 ; '0'
00000000000113d1         db  0x41 ; 'A'
00000000000113d2         db  0x0e ; '.'
00000000000113d3         db  0x28 ; '('
00000000000113d4         db  0x42 ; 'B'
00000000000113d5         db  0x0e ; '.'
00000000000113d6         db  0x20 ; ' '
00000000000113d7         db  0x42 ; 'B'
00000000000113d8         db  0x0e ; '.'
00000000000113d9         db  0x18 ; '.'
00000000000113da         db  0x42 ; 'B'
00000000000113db         db  0x0e ; '.'
00000000000113dc         db  0x10 ; '.'
00000000000113dd         db  0x42 ; 'B'
00000000000113de         db  0x0e ; '.'
00000000000113df         db  0x08 ; '.'
00000000000113e0         db  0x4f ; 'O'
00000000000113e1         db  0x0b ; '.'
00000000000113e2         db  0x62 ; 'b'
00000000000113e3         db  0x0a ; '.'
00000000000113e4         db  0x0e ; '.'
00000000000113e5         db  0x38 ; '8'
00000000000113e6         db  0x50 ; 'P'
00000000000113e7         db  0x0e ; '.'
00000000000113e8         db  0x30 ; '0'
00000000000113e9         db  0x41 ; 'A'
00000000000113ea         db  0x0e ; '.'
00000000000113eb         db  0x28 ; '('
00000000000113ec         db  0x42 ; 'B'
00000000000113ed         db  0x0e ; '.'
00000000000113ee         db  0x20 ; ' '
00000000000113ef         db  0x42 ; 'B'
00000000000113f0         db  0x0e ; '.'
00000000000113f1         db  0x18 ; '.'
00000000000113f2         db  0x42 ; 'B'
00000000000113f3         db  0x0e ; '.'
00000000000113f4         db  0x10 ; '.'
00000000000113f5         db  0x42 ; 'B'
00000000000113f6         db  0x0e ; '.'
00000000000113f7         db  0x08 ; '.'
00000000000113f8         db  0x55 ; 'U'
00000000000113f9         db  0x0b ; '.'
00000000000113fa         db  0x66 ; 'f'
00000000000113fb         db  0x0e ; '.'
00000000000113fc         db  0x68 ; 'h'
00000000000113fd         db  0x42 ; 'B'
00000000000113fe         db  0x0e ; '.'
00000000000113ff         db  0x70 ; 'p'
0000000000011400         db  0x5c ; '\'
0000000000011401         db  0x0e ; '.'
0000000000011402         db  0x68 ; 'h'
0000000000011403         db  0x41 ; 'A'
0000000000011404         db  0x0e ; '.'
0000000000011405         db  0x60 ; '`'
0000000000011406         db  0x44 ; 'D'
0000000000011407         db  0x0a ; '.'
0000000000011408         db  0x0e ; '.'
0000000000011409         db  0x38 ; '8'
000000000001140a         db  0x41 ; 'A'
000000000001140b         db  0x0e ; '.'
000000000001140c         db  0x30 ; '0'
000000000001140d         db  0x41 ; 'A'
000000000001140e         db  0x0e ; '.'
000000000001140f         db  0x28 ; '('
0000000000011410         db  0x42 ; 'B'
0000000000011411         db  0x0e ; '.'
0000000000011412         db  0x20 ; ' '
0000000000011413         db  0x42 ; 'B'
0000000000011414         db  0x0e ; '.'
0000000000011415         db  0x18 ; '.'
0000000000011416         db  0x42 ; 'B'
0000000000011417         db  0x0e ; '.'
0000000000011418         db  0x10 ; '.'
0000000000011419         db  0x42 ; 'B'
000000000001141a         db  0x0e ; '.'
000000000001141b         db  0x08 ; '.'
000000000001141c         db  0x45 ; 'E'
000000000001141d         db  0x0b ; '.'
000000000001141e         db  0x68 ; 'h'
000000000001141f         db  0x0a ; '.'
0000000000011420         db  0x0e ; '.'
0000000000011421         db  0x68 ; 'h'
0000000000011422         db  0x48 ; 'H'
0000000000011423         db  0x0b ; '.'
0000000000011424         db  0x72 ; 'r'
0000000000011425         db  0x0e ; '.'
0000000000011426         db  0x68 ; 'h'
0000000000011427         db  0x45 ; 'E'
0000000000011428         db  0x0e ; '.'
0000000000011429         db  0x70 ; 'p'
000000000001142a         db  0x42 ; 'B'
000000000001142b         db  0x0e ; '.'
000000000001142c         db  0x78 ; 'x'
000000000001142d         db  0x42 ; 'B'
000000000001142e         db  0x0e ; '.'
000000000001142f         db  0x80 ; '.'
0000000000011430         db  0x01 ; '.'
0000000000011431         db  0x5e ; '^'
0000000000011432         db  0x0e ; '.'
0000000000011433         db  0x60 ; '`'
0000000000011434         db  0x44 ; 'D'
0000000000011435         db  0x0a ; '.'
0000000000011436         db  0x0e ; '.'
0000000000011437         db  0x38 ; '8'
0000000000011438         db  0x41 ; 'A'
0000000000011439         db  0x0e ; '.'
000000000001143a         db  0x30 ; '0'
000000000001143b         db  0x41 ; 'A'
000000000001143c         db  0x0e ; '.'
000000000001143d         db  0x28 ; '('
000000000001143e         db  0x42 ; 'B'
000000000001143f         db  0x0e ; '.'
0000000000011440         db  0x20 ; ' '
0000000000011441         db  0x42 ; 'B'
0000000000011442         db  0x0e ; '.'
0000000000011443         db  0x18 ; '.'
0000000000011444         db  0x42 ; 'B'
0000000000011445         db  0x0e ; '.'
0000000000011446         db  0x10 ; '.'
0000000000011447         db  0x42 ; 'B'
0000000000011448         db  0x0e ; '.'
0000000000011449         db  0x08 ; '.'
000000000001144a         db  0x41 ; 'A'
000000000001144b         db  0x0b ; '.'
000000000001144c         db  0x79 ; 'y'
000000000001144d         db  0x0a ; '.'
000000000001144e         db  0x0e ; '.'
000000000001144f         db  0x68 ; 'h'
0000000000011450         db  0x42 ; 'B'
0000000000011451         db  0x0e ; '.'
0000000000011452         db  0x70 ; 'p'
0000000000011453         db  0x42 ; 'B'
0000000000011454         db  0x0e ; '.'
0000000000011455         db  0x78 ; 'x'
0000000000011456         db  0x42 ; 'B'
0000000000011457         db  0x0e ; '.'
0000000000011458         db  0x80 ; '.'
0000000000011459         db  0x01 ; '.'
000000000001145a         db  0x51 ; 'Q'
000000000001145b         db  0x0b ; '.'
000000000001145c         dd         0x00000010                                  ; Length of the record
0000000000011460         dd         0x00000e00                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011464         db         0x3c, 0x85, 2 dup (0xff)                    ; begin 0x99a0
0000000000011468         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x99c0)
000000000001146c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001146d         align      16
0000000000011470         dd         0x00000018                                  ; Length of the record
0000000000011474         dd         0x00000e14                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011478         db         0x48, 0x85, 2 dup (0xff)                    ; begin 0x99c0
000000000001147c         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x9a38)
0000000000011480         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011481         db  0x44 ; 'D'
0000000000011482         db  0x0e ; '.'
0000000000011483         db  0x70 ; 'p'
0000000000011484         db  0x02 ; '.'
0000000000011485         db  0x60 ; '`'
0000000000011486         db  0x0a ; '.'
0000000000011487         db  0x0e ; '.'
0000000000011488         db  0x08 ; '.'
0000000000011489         db  0x41 ; 'A'
000000000001148a         db  0x0b ; '.'
000000000001148b         db  0x00 ; '.'
000000000001148c         dd         0x00000028                                  ; Length of the record
0000000000011490         dd         0x00000e30                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011494         db         0xac, 0x85, 2 dup (0xff)                    ; begin 0x9a40
0000000000011498         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x9b15)
000000000001149c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001149d         db  0x41 ; 'A'
000000000001149e         db  0x0e ; '.'
000000000001149f         db  0x10 ; '.'
00000000000114a0         db  0x86 ; '.'
00000000000114a1         db  0x02 ; '.'
00000000000114a2         db  0x41 ; 'A'
00000000000114a3         db  0x0e ; '.'
00000000000114a4         db  0x18 ; '.'
00000000000114a5         db  0x83 ; '.'
00000000000114a6         db  0x03 ; '.'
00000000000114a7         db  0x50 ; 'P'
00000000000114a8         db  0x0e ; '.'
00000000000114a9         db  0xd0 ; '.'
00000000000114aa         db  0x01 ; '.'
00000000000114ab         db  0x02 ; '.'
00000000000114ac         db  0xab ; '.'
00000000000114ad         db  0x0a ; '.'
00000000000114ae         db  0x0e ; '.'
00000000000114af         db  0x18 ; '.'
00000000000114b0         db  0x41 ; 'A'
00000000000114b1         db  0x0e ; '.'
00000000000114b2         db  0x10 ; '.'
00000000000114b3         db  0x41 ; 'A'
00000000000114b4         db  0x0e ; '.'
00000000000114b5         db  0x08 ; '.'
00000000000114b6         db  0x41 ; 'A'
00000000000114b7         db  0x0b ; '.'
00000000000114b8         dd         0x0000001c                                  ; Length of the record
00000000000114bc         dd         0x00000e5c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000114c0         db         0x60, 0x86, 2 dup (0xff)                    ; begin 0x9b20
00000000000114c4         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x9ba0)
00000000000114c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000114c9         db  0x41 ; 'A'
00000000000114ca         db  0x0e ; '.'
00000000000114cb         db  0x10 ; '.'
00000000000114cc         db  0x83 ; '.'
00000000000114cd         db  0x02 ; '.'
00000000000114ce         db  0x02 ; '.'
00000000000114cf         db  0x7a ; 'z'
00000000000114d0         db  0x0e ; '.'
00000000000114d1         db  0x08 ; '.'
00000000000114d2         db  0x00 ; '.'
00000000000114d3         db  0x00 ; '.'
00000000000114d4         db  0x00 ; '.'
00000000000114d5         db  0x00 ; '.'
00000000000114d6         db  0x00 ; '.'
00000000000114d7         db  0x00 ; '.'
00000000000114d8         dd         0x00000018                                  ; Length of the record
00000000000114dc         dd         0x00000e7c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000114e0         db         0xc0, 0x86, 2 dup (0xff)                    ; begin 0x9ba0
00000000000114e4         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x9bba)
00000000000114e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000114e9         db  0x41 ; 'A'
00000000000114ea         db  0x0e ; '.'
00000000000114eb         db  0x10 ; '.'
00000000000114ec         db  0x83 ; '.'
00000000000114ed         db  0x02 ; '.'
00000000000114ee         db  0x53 ; 'S'
00000000000114ef         db  0x0a ; '.'
00000000000114f0         db  0x0e ; '.'
00000000000114f1         db  0x08 ; '.'
00000000000114f2         db  0x41 ; 'A'
00000000000114f3         db  0x0b ; '.'
00000000000114f4         dd         0x00000010                                  ; Length of the record
00000000000114f8         dd         0x00000e98                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000114fc         db         0xc4, 0x86, 2 dup (0xff)                    ; begin 0x9bc0
0000000000011500         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9be4)
0000000000011504         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011505         db  0x5f ; '_'
0000000000011506         db  0x0e ; '.'
0000000000011507         db  0x10 ; '.'
0000000000011508         dd         0x00000010                                  ; Length of the record
000000000001150c         dd         0x00000eac                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011510         db         0xe0, 0x86, 2 dup (0xff)                    ; begin 0x9bf0
0000000000011514         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x9bf2)
0000000000011518         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011519         align      4
000000000001151c         dd         0x00000020                                  ; Length of the record
0000000000011520         dd         0x00000ec0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011524         db         0xdc, 0x86, 2 dup (0xff)                    ; begin 0x9c00
0000000000011528         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x9c36)
000000000001152c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001152d         db  0x44 ; 'D'
000000000001152e         db  0x0e ; '.'
000000000001152f         db  0x10 ; '.'
0000000000011530         db  0x83 ; '.'
0000000000011531         db  0x02 ; '.'
0000000000011532         db  0x5d ; ']'
0000000000011533         db  0x0a ; '.'
0000000000011534         db  0x0e ; '.'
0000000000011535         db  0x08 ; '.'
0000000000011536         db  0x47 ; 'G'
0000000000011537         db  0x0b ; '.'
0000000000011538         db  0x48 ; 'H'
0000000000011539         db  0x0a ; '.'
000000000001153a         db  0x0e ; '.'
000000000001153b         db  0x08 ; '.'
000000000001153c         db  0x41 ; 'A'
000000000001153d         db  0x0b ; '.'
000000000001153e         db  0x00 ; '.'
000000000001153f         db  0x00 ; '.'
0000000000011540         dd         0x00000010                                  ; Length of the record
0000000000011544         dd         0x00000ee4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011548         db         0xf8, 0x86, 2 dup (0xff)                    ; begin 0x9c40
000000000001154c         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9c64)
0000000000011550         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011551         db  0x5f ; '_'
0000000000011552         db  0x0e ; '.'
0000000000011553         db  0x10 ; '.'
0000000000011554         dd         0x00000014                                  ; Length of the record
0000000000011558         dd         0x00000ef8                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001155c         db         0x14, 0x87, 2 dup (0xff)                    ; begin 0x9c70
0000000000011560         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x9cf2)
0000000000011564         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011565         db  0x02 ; '.'
0000000000011566         db  0x5f ; '_'
0000000000011567         db  0x0e ; '.'
0000000000011568         db  0x10 ; '.'
0000000000011569         db  0x49 ; 'I'
000000000001156a         db  0x0e ; '.'
000000000001156b         db  0x08 ; '.'
000000000001156c         dd         0x00000014                                  ; Length of the record
0000000000011570         dd         0x00000f10                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011574         db         0x8c, 0x87, 2 dup (0xff)                    ; begin 0x9d00
0000000000011578         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x9d4a)
000000000001157c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001157d         db  0x02 ; '.'
000000000001157e         db  0x45 ; 'E'
000000000001157f         db  0x0e ; '.'
0000000000011580         db  0x10 ; '.'
0000000000011581         db  0x00 ; '.'
0000000000011582         db  0x00 ; '.'
0000000000011583         db  0x00 ; '.'
0000000000011584         dd         0x00000018                                  ; Length of the record
0000000000011588         dd         0x00000f28                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001158c         db         0xc4, 0x87, 2 dup (0xff)                    ; begin 0x9d50
0000000000011590         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x9d67)
0000000000011594         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011595         db  0x41 ; 'A'
0000000000011596         db  0x0e ; '.'
0000000000011597         db  0x10 ; '.'
0000000000011598         db  0x83 ; '.'
0000000000011599         db  0x02 ; '.'
000000000001159a         db  0x51 ; 'Q'
000000000001159b         db  0x0e ; '.'
000000000001159c         db  0x08 ; '.'
000000000001159d         db  0x00 ; '.'
000000000001159e         db  0x00 ; '.'
000000000001159f         db  0x00 ; '.'
00000000000115a0         dd         0x00000018                                  ; Length of the record
00000000000115a4         dd         0x00000f44                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000115a8         db         0xc8, 0x87, 2 dup (0xff)                    ; begin 0x9d70
00000000000115ac         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x9d9e)
00000000000115b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000115b1         db  0x47 ; 'G'
00000000000115b2         db  0x0e ; '.'
00000000000115b3         db  0x10 ; '.'
00000000000115b4         db  0x61 ; 'a'
00000000000115b5         db  0x0a ; '.'
00000000000115b6         db  0x0e ; '.'
00000000000115b7         db  0x08 ; '.'
00000000000115b8         db  0x41 ; 'A'
00000000000115b9         db  0x0b ; '.'
00000000000115ba         db  0x00 ; '.'
00000000000115bb         db  0x00 ; '.'
00000000000115bc         dd         0x00000024                                  ; Length of the record
00000000000115c0         dd         0x00000f60                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000115c4         db         0xdc, 0x87, 2 dup (0xff)                    ; begin 0x9da0
00000000000115c8         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x9dc8)
00000000000115cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000115cd         db  0x41 ; 'A'
00000000000115ce         db  0x0e ; '.'
00000000000115cf         db  0x10 ; '.'
00000000000115d0         db  0x86 ; '.'
00000000000115d1         db  0x02 ; '.'
00000000000115d2         db  0x41 ; 'A'
00000000000115d3         db  0x0e ; '.'
00000000000115d4         db  0x18 ; '.'
00000000000115d5         db  0x83 ; '.'
00000000000115d6         db  0x03 ; '.'
00000000000115d7         db  0x4d ; 'M'
00000000000115d8         db  0x0e ; '.'
00000000000115d9         db  0x20 ; ' '
00000000000115da         db  0x49 ; 'I'
00000000000115db         db  0x0e ; '.'
00000000000115dc         db  0x18 ; '.'
00000000000115dd         db  0x47 ; 'G'
00000000000115de         db  0x0e ; '.'
00000000000115df         db  0x10 ; '.'
00000000000115e0         db  0x41 ; 'A'
00000000000115e1         db  0x0e ; '.'
00000000000115e2         db  0x08 ; '.'
00000000000115e3         db  0x00 ; '.'
00000000000115e4         dd         0x00000018                                  ; Length of the record
00000000000115e8         dd         0x00000f88                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000115ec         db         0xe4, 0x87, 2 dup (0xff)                    ; begin 0x9dd0
00000000000115f0         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9de3)
00000000000115f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000115f5         db  0x41 ; 'A'
00000000000115f6         db  0x0e ; '.'
00000000000115f7         db  0x10 ; '.'
00000000000115f8         db  0x83 ; '.'
00000000000115f9         db  0x02 ; '.'
00000000000115fa         db  0x50 ; 'P'
00000000000115fb         db  0x0e ; '.'
00000000000115fc         db  0x08 ; '.'
00000000000115fd         db  0x00 ; '.'
00000000000115fe         db  0x00 ; '.'
00000000000115ff         db  0x00 ; '.'
0000000000011600         dd         0x00000014                                  ; Length of the record
0000000000011604         dd         0x00000fa4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011608         db         0xe8, 0x87, 2 dup (0xff)                    ; begin 0x9df0
000000000001160c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x9e25)
0000000000011610         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011611         db  0x4b ; 'K'
0000000000011612         db  0x0e ; '.'
0000000000011613         db  0x10 ; '.'
0000000000011614         db  0x00 ; '.'
0000000000011615         db  0x00 ; '.'
0000000000011616         db  0x00 ; '.'
0000000000011617         db  0x00 ; '.'
0000000000011618         dd         0x0000001c                                  ; Length of the record
000000000001161c         dd         0x00000fbc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011620         db         0x10, 0x88, 2 dup (0xff)                    ; begin 0x9e30
0000000000011624         db         0x2f, 3 dup (0x00)                          ; length 0x2f (end at 0x9e5f)
0000000000011628         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011629         db  0x41 ; 'A'
000000000001162a         db  0x0e ; '.'
000000000001162b         db  0x10 ; '.'
000000000001162c         db  0x83 ; '.'
000000000001162d         db  0x02 ; '.'
000000000001162e         db  0x55 ; 'U'
000000000001162f         db  0x0a ; '.'
0000000000011630         db  0x0e ; '.'
0000000000011631         db  0x08 ; '.'
0000000000011632         db  0x4a ; 'J'
0000000000011633         db  0x0b ; '.'
0000000000011634         db  0x00 ; '.'
0000000000011635         db  0x00 ; '.'
0000000000011636         db  0x00 ; '.'
0000000000011637         db  0x00 ; '.'
0000000000011638         dd         0x0000001c                                  ; Length of the record
000000000001163c         dd         0x00000fdc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011640         db         0x20, 0x88, 2 dup (0xff)                    ; begin 0x9e60
0000000000011644         db         0xb6, 3 dup (0x00)                          ; length 0xb6 (end at 0x9f16)
0000000000011648         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011649         db  0x47 ; 'G'
000000000001164a         db  0x0e ; '.'
000000000001164b         db  0xe0 ; '.'
000000000001164c         db  0x01 ; '.'
000000000001164d         db  0x02 ; '.'
000000000001164e         db  0xa9 ; '.'
000000000001164f         db  0x0a ; '.'
0000000000011650         db  0x0e ; '.'
0000000000011651         db  0x08 ; '.'
0000000000011652         db  0x41 ; 'A'
0000000000011653         db  0x0b ; '.'
0000000000011654         db  0x00 ; '.'
0000000000011655         db  0x00 ; '.'
0000000000011656         db  0x00 ; '.'
0000000000011657         db  0x00 ; '.'
0000000000011658         dd         0x00000018                                  ; Length of the record
000000000001165c         dd         0x00000ffc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011660         db         0xc0, 0x88, 2 dup (0xff)                    ; begin 0x9f20
0000000000011664         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x9f61)
0000000000011668         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011669         db  0x4a ; 'J'
000000000001166a         db  0x0e ; '.'
000000000001166b         db  0x10 ; '.'
000000000001166c         db  0x4d ; 'M'
000000000001166d         db  0x0e ; '.'
000000000001166e         db  0x08 ; '.'
000000000001166f         db  0x4b ; 'K'
0000000000011670         db  0x0e ; '.'
0000000000011671         db  0x10 ; '.'
0000000000011672         db  0x00 ; '.'
0000000000011673         db  0x00 ; '.'
0000000000011674         dd         0x00000028                                  ; Length of the record
0000000000011678         dd         0x00001018                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001167c         db         0xf4, 0x88, 2 dup (0xff)                    ; begin 0x9f70
0000000000011680         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0x9fa7)
0000000000011684         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011685         db  0x41 ; 'A'
0000000000011686         db  0x0e ; '.'
0000000000011687         db  0x10 ; '.'
0000000000011688         db  0x86 ; '.'
0000000000011689         db  0x02 ; '.'
000000000001168a         db  0x41 ; 'A'
000000000001168b         db  0x0e ; '.'
000000000001168c         db  0x18 ; '.'
000000000001168d         db  0x83 ; '.'
000000000001168e         db  0x03 ; '.'
000000000001168f         db  0x4e ; 'N'
0000000000011690         db  0x0e ; '.'
0000000000011691         db  0x20 ; ' '
0000000000011692         db  0x5d ; ']'
0000000000011693         db  0x0a ; '.'
0000000000011694         db  0x0e ; '.'
0000000000011695         db  0x18 ; '.'
0000000000011696         db  0x41 ; 'A'
0000000000011697         db  0x0e ; '.'
0000000000011698         db  0x10 ; '.'
0000000000011699         db  0x41 ; 'A'
000000000001169a         db  0x0e ; '.'
000000000001169b         db  0x08 ; '.'
000000000001169c         db  0x41 ; 'A'
000000000001169d         db  0x0b ; '.'
000000000001169e         db  0x00 ; '.'
000000000001169f         db  0x00 ; '.'
00000000000116a0         dd         0x0000004c                                  ; Length of the record
00000000000116a4         dd         0x00001044                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000116a8         db         0x08, 0x89, 2 dup (0xff)                    ; begin 0x9fb0
00000000000116ac         db         0xd2, 0x02, 2 dup (0x00)                    ; length 0x2d2 (end at 0xa282)
00000000000116b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000116b1         db  0x42 ; 'B'
00000000000116b2         db  0x0e ; '.'
00000000000116b3         db  0x10 ; '.'
00000000000116b4         db  0x8f ; '.'
00000000000116b5         db  0x02 ; '.'
00000000000116b6         db  0x42 ; 'B'
00000000000116b7         db  0x0e ; '.'
00000000000116b8         db  0x18 ; '.'
00000000000116b9         db  0x8e ; '.'
00000000000116ba         db  0x03 ; '.'
00000000000116bb         db  0x42 ; 'B'
00000000000116bc         db  0x0e ; '.'
00000000000116bd         db  0x20 ; ' '
00000000000116be         db  0x8d ; '.'
00000000000116bf         db  0x04 ; '.'
00000000000116c0         db  0x42 ; 'B'
00000000000116c1         db  0x0e ; '.'
00000000000116c2         db  0x28 ; '('
00000000000116c3         db  0x8c ; '.'
00000000000116c4         db  0x05 ; '.'
00000000000116c5         db  0x41 ; 'A'
00000000000116c6         db  0x0e ; '.'
00000000000116c7         db  0x30 ; '0'
00000000000116c8         db  0x86 ; '.'
00000000000116c9         db  0x06 ; '.'
00000000000116ca         db  0x41 ; 'A'
00000000000116cb         db  0x0e ; '.'
00000000000116cc         db  0x38 ; '8'
00000000000116cd         db  0x83 ; '.'
00000000000116ce         db  0x07 ; '.'
00000000000116cf         db  0x47 ; 'G'
00000000000116d0         db  0x0e ; '.'
00000000000116d1         db  0x50 ; 'P'
00000000000116d2         db  0x02 ; '.'
00000000000116d3         db  0x42 ; 'B'
00000000000116d4         db  0x0a ; '.'
00000000000116d5         db  0x0e ; '.'
00000000000116d6         db  0x38 ; '8'
00000000000116d7         db  0x41 ; 'A'
00000000000116d8         db  0x0e ; '.'
00000000000116d9         db  0x30 ; '0'
00000000000116da         db  0x41 ; 'A'
00000000000116db         db  0x0e ; '.'
00000000000116dc         db  0x28 ; '('
00000000000116dd         db  0x42 ; 'B'
00000000000116de         db  0x0e ; '.'
00000000000116df         db  0x20 ; ' '
00000000000116e0         db  0x42 ; 'B'
00000000000116e1         db  0x0e ; '.'
00000000000116e2         db  0x18 ; '.'
00000000000116e3         db  0x42 ; 'B'
00000000000116e4         db  0x0e ; '.'
00000000000116e5         db  0x10 ; '.'
00000000000116e6         db  0x42 ; 'B'
00000000000116e7         db  0x0e ; '.'
00000000000116e8         db  0x08 ; '.'
00000000000116e9         db  0x43 ; 'C'
00000000000116ea         db  0x0b ; '.'
00000000000116eb         db  0x00 ; '.'
00000000000116ec         db  0x00 ; '.'
00000000000116ed         db  0x00 ; '.'
00000000000116ee         db  0x00 ; '.'
00000000000116ef         db  0x00 ; '.'
00000000000116f0         dd         0x0000003c                                  ; Length of the record
00000000000116f4         dd         0x00001094                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000116f8         db         0x98, 0x8b, 2 dup (0xff)                    ; begin 0xa290
00000000000116fc         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0xa313)
0000000000011700         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011701         db  0x42 ; 'B'
0000000000011702         db  0x0e ; '.'
0000000000011703         db  0x10 ; '.'
0000000000011704         db  0x8d ; '.'
0000000000011705         db  0x02 ; '.'
0000000000011706         db  0x42 ; 'B'
0000000000011707         db  0x0e ; '.'
0000000000011708         db  0x18 ; '.'
0000000000011709         db  0x8c ; '.'
000000000001170a         db  0x03 ; '.'
000000000001170b         db  0x44 ; 'D'
000000000001170c         db  0x0e ; '.'
000000000001170d         db  0x20 ; ' '
000000000001170e         db  0x86 ; '.'
000000000001170f         db  0x04 ; '.'
0000000000011710         db  0x41 ; 'A'
0000000000011711         db  0x0e ; '.'
0000000000011712         db  0x28 ; '('
0000000000011713         db  0x83 ; '.'
0000000000011714         db  0x05 ; '.'
0000000000011715         db  0x4a ; 'J'
0000000000011716         db  0x0e ; '.'
0000000000011717         db  0x40 ; '@'
0000000000011718         db  0x02 ; '.'
0000000000011719         db  0x64 ; 'd'
000000000001171a         db  0x0a ; '.'
000000000001171b         db  0x0e ; '.'
000000000001171c         db  0x28 ; '('
000000000001171d         db  0x41 ; 'A'
000000000001171e         db  0x0e ; '.'
000000000001171f         db  0x20 ; ' '
0000000000011720         db  0x41 ; 'A'
0000000000011721         db  0x0e ; '.'
0000000000011722         db  0x18 ; '.'
0000000000011723         db  0x42 ; 'B'
0000000000011724         db  0x0e ; '.'
0000000000011725         db  0x10 ; '.'
0000000000011726         db  0x42 ; 'B'
0000000000011727         db  0x0e ; '.'
0000000000011728         db  0x08 ; '.'
0000000000011729         db  0x41 ; 'A'
000000000001172a         db  0x0b ; '.'
000000000001172b         db  0x00 ; '.'
000000000001172c         db  0x00 ; '.'
000000000001172d         db  0x00 ; '.'
000000000001172e         db  0x00 ; '.'
000000000001172f         db  0x00 ; '.'
0000000000011730         dd         0x00000018                                  ; Length of the record
0000000000011734         dd         0x000010d4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011738         db         0xe8, 0x8b, 2 dup (0xff)                    ; begin 0xa320
000000000001173c         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0xa3a2)
0000000000011740         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011741         db  0x41 ; 'A'
0000000000011742         db  0x0e ; '.'
0000000000011743         db  0x10 ; '.'
0000000000011744         db  0x83 ; '.'
0000000000011745         db  0x02 ; '.'
0000000000011746         db  0x02 ; '.'
0000000000011747         db  0x80 ; '.'
0000000000011748         db  0x0e ; '.'
0000000000011749         db  0x08 ; '.'
000000000001174a         db  0x00 ; '.'
000000000001174b         db  0x00 ; '.'
000000000001174c         dd         0x00000018                                  ; Length of the record
0000000000011750         dd         0x000010f0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011754         db         0x5c, 0x8c, 2 dup (0xff)                    ; begin 0xa3b0
0000000000011758         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xa3e6)
000000000001175c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001175d         db  0x41 ; 'A'
000000000001175e         db  0x0e ; '.'
000000000001175f         db  0x10 ; '.'
0000000000011760         db  0x83 ; '.'
0000000000011761         db  0x02 ; '.'
0000000000011762         db  0x70 ; 'p'
0000000000011763         db  0x0e ; '.'
0000000000011764         db  0x08 ; '.'
0000000000011765         db  0x00 ; '.'
0000000000011766         db  0x00 ; '.'
0000000000011767         db  0x00 ; '.'
0000000000011768         dd         0x00000074                                  ; Length of the record
000000000001176c         dd         0x0000110c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011770         db         0x80, 0x8c, 2 dup (0xff)                    ; begin 0xa3f0
0000000000011774         db         0x48, 0x08, 2 dup (0x00)                    ; length 0x848 (end at 0xac38)
0000000000011778         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011779         db  0x42 ; 'B'
000000000001177a         db  0x0e ; '.'
000000000001177b         db  0x10 ; '.'
000000000001177c         db  0x8f ; '.'
000000000001177d         db  0x02 ; '.'
000000000001177e         db  0x42 ; 'B'
000000000001177f         db  0x0e ; '.'
0000000000011780         db  0x18 ; '.'
0000000000011781         db  0x8e ; '.'
0000000000011782         db  0x03 ; '.'
0000000000011783         db  0x49 ; 'I'
0000000000011784         db  0x0e ; '.'
0000000000011785         db  0x20 ; ' '
0000000000011786         db  0x8d ; '.'
0000000000011787         db  0x04 ; '.'
0000000000011788         db  0x42 ; 'B'
0000000000011789         db  0x0e ; '.'
000000000001178a         db  0x28 ; '('
000000000001178b         db  0x8c ; '.'
000000000001178c         db  0x05 ; '.'
000000000001178d         db  0x48 ; 'H'
000000000001178e         db  0x0e ; '.'
000000000001178f         db  0x30 ; '0'
0000000000011790         db  0x86 ; '.'
0000000000011791         db  0x06 ; '.'
0000000000011792         db  0x41 ; 'A'
0000000000011793         db  0x0e ; '.'
0000000000011794         db  0x38 ; '8'
0000000000011795         db  0x83 ; '.'
0000000000011796         db  0x07 ; '.'
0000000000011797         db  0x44 ; 'D'
0000000000011798         db  0x0e ; '.'
0000000000011799         db  0xa0 ; '.'
000000000001179a         db  0x01 ; '.'
000000000001179b         db  0x02 ; '.'
000000000001179c         db  0x6f ; 'o'
000000000001179d         db  0x0e ; '.'
000000000001179e         db  0xa8 ; '.'
000000000001179f         db  0x01 ; '.'
00000000000117a0         db  0x4d ; 'M'
00000000000117a1         db  0x0e ; '.'
00000000000117a2         db  0xb0 ; '.'
00000000000117a3         db  0x01 ; '.'
00000000000117a4         db  0x46 ; 'F'
00000000000117a5         db  0x0e ; '.'
00000000000117a6         db  0xb8 ; '.'
00000000000117a7         db  0x01 ; '.'
00000000000117a8         db  0x46 ; 'F'
00000000000117a9         db  0x0e ; '.'
00000000000117aa         db  0xc0 ; '.'
00000000000117ab         db  0x01 ; '.'
00000000000117ac         db  0x5d ; ']'
00000000000117ad         db  0x0e ; '.'
00000000000117ae         db  0xa0 ; '.'
00000000000117af         db  0x01 ; '.'
00000000000117b0         db  0x75 ; 'u'
00000000000117b1         db  0x0e ; '.'
00000000000117b2         db  0xa8 ; '.'
00000000000117b3         db  0x01 ; '.'
00000000000117b4         db  0x41 ; 'A'
00000000000117b5         db  0x0e ; '.'
00000000000117b6         db  0xb0 ; '.'
00000000000117b7         db  0x01 ; '.'
00000000000117b8         db  0x62 ; 'b'
00000000000117b9         db  0x0e ; '.'
00000000000117ba         db  0xa8 ; '.'
00000000000117bb         db  0x01 ; '.'
00000000000117bc         db  0x41 ; 'A'
00000000000117bd         db  0x0e ; '.'
00000000000117be         db  0xa0 ; '.'
00000000000117bf         db  0x01 ; '.'
00000000000117c0         db  0x03 ; '.'
00000000000117c1         db  0xdf ; '.'
00000000000117c2         db  0x01 ; '.'
00000000000117c3         db  0x0a ; '.'
00000000000117c4         db  0x0e ; '.'
00000000000117c5         db  0x38 ; '8'
00000000000117c6         db  0x41 ; 'A'
00000000000117c7         db  0x0e ; '.'
00000000000117c8         db  0x30 ; '0'
00000000000117c9         db  0x41 ; 'A'
00000000000117ca         db  0x0e ; '.'
00000000000117cb         db  0x28 ; '('
00000000000117cc         db  0x42 ; 'B'
00000000000117cd         db  0x0e ; '.'
00000000000117ce         db  0x20 ; ' '
00000000000117cf         db  0x42 ; 'B'
00000000000117d0         db  0x0e ; '.'
00000000000117d1         db  0x18 ; '.'
00000000000117d2         db  0x42 ; 'B'
00000000000117d3         db  0x0e ; '.'
00000000000117d4         db  0x10 ; '.'
00000000000117d5         db  0x42 ; 'B'
00000000000117d6         db  0x0e ; '.'
00000000000117d7         db  0x08 ; '.'
00000000000117d8         db  0x45 ; 'E'
00000000000117d9         db  0x0b ; '.'
00000000000117da         db  0x00 ; '.'
00000000000117db         db  0x00 ; '.'
00000000000117dc         db  0x00 ; '.'
00000000000117dd         db  0x00 ; '.'
00000000000117de         db  0x00 ; '.'
00000000000117df         db  0x00 ; '.'
00000000000117e0         dd         0x00000010                                  ; Length of the record
00000000000117e4         dd         0x00001184                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000117e8         db         0x58, 0x94, 2 dup (0xff)                    ; begin 0xac40
00000000000117ec         db         0x2c, 3 dup (0x00)                          ; length 0x2c (end at 0xac6c)
00000000000117f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000117f1         align      4
00000000000117f4         dd         0x00000018                                  ; Length of the record
00000000000117f8         dd         0x00001198                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000117fc         db         0x74, 0x94, 2 dup (0xff)                    ; begin 0xac70
0000000000011800         db         0x2a, 3 dup (0x00)                          ; length 0x2a (end at 0xac9a)
0000000000011804         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011805         db  0x46 ; 'F'
0000000000011806         db  0x0e ; '.'
0000000000011807         db  0x10 ; '.'
0000000000011808         db  0x83 ; '.'
0000000000011809         db  0x02 ; '.'
000000000001180a         db  0x5b ; '['
000000000001180b         db  0x0e ; '.'
000000000001180c         db  0x08 ; '.'
000000000001180d         db  0x47 ; 'G'
000000000001180e         db  0xc3 ; '.'
000000000001180f         db  0x00 ; '.'
0000000000011810         dd         0x00000038                                  ; Length of the record
0000000000011814         dd         0x000011b4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011818         db         0x88, 0x94, 2 dup (0xff)                    ; begin 0xaca0
000000000001181c         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0xacfd)
0000000000011820         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011821         db  0x42 ; 'B'
0000000000011822         db  0x0e ; '.'
0000000000011823         db  0x10 ; '.'
0000000000011824         db  0x8d ; '.'
0000000000011825         db  0x02 ; '.'
0000000000011826         db  0x42 ; 'B'
0000000000011827         db  0x0e ; '.'
0000000000011828         db  0x18 ; '.'
0000000000011829         db  0x8c ; '.'
000000000001182a         db  0x03 ; '.'
000000000001182b         db  0x41 ; 'A'
000000000001182c         db  0x0e ; '.'
000000000001182d         db  0x20 ; ' '
000000000001182e         db  0x86 ; '.'
000000000001182f         db  0x04 ; '.'
0000000000011830         db  0x41 ; 'A'
0000000000011831         db  0x0e ; '.'
0000000000011832         db  0x28 ; '('
0000000000011833         db  0x83 ; '.'
0000000000011834         db  0x05 ; '.'
0000000000011835         db  0x47 ; 'G'
0000000000011836         db  0x0e ; '.'
0000000000011837         db  0x30 ; '0'
0000000000011838         db  0x75 ; 'u'
0000000000011839         db  0x0a ; '.'
000000000001183a         db  0x0e ; '.'
000000000001183b         db  0x28 ; '('
000000000001183c         db  0x44 ; 'D'
000000000001183d         db  0x0e ; '.'
000000000001183e         db  0x20 ; ' '
000000000001183f         db  0x41 ; 'A'
0000000000011840         db  0x0e ; '.'
0000000000011841         db  0x18 ; '.'
0000000000011842         db  0x42 ; 'B'
0000000000011843         db  0x0e ; '.'
0000000000011844         db  0x10 ; '.'
0000000000011845         db  0x42 ; 'B'
0000000000011846         db  0x0e ; '.'
0000000000011847         db  0x08 ; '.'
0000000000011848         db  0x45 ; 'E'
0000000000011849         db  0x0b ; '.'
000000000001184a         db  0x00 ; '.'
000000000001184b         db  0x00 ; '.'
000000000001184c         dd         0x00000034                                  ; Length of the record
0000000000011850         dd         0x000011f0                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011854         db         0xac, 0x94, 2 dup (0xff)                    ; begin 0xad00
0000000000011858         db         0x8f, 3 dup (0x00)                          ; length 0x8f (end at 0xad8f)
000000000001185c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001185d         db  0x45 ; 'E'
000000000001185e         db  0x0e ; '.'
000000000001185f         db  0x10 ; '.'
0000000000011860         db  0x8c ; '.'
0000000000011861         db  0x02 ; '.'
0000000000011862         db  0x41 ; 'A'
0000000000011863         db  0x0e ; '.'
0000000000011864         db  0x18 ; '.'
0000000000011865         db  0x86 ; '.'
0000000000011866         db  0x03 ; '.'
0000000000011867         db  0x41 ; 'A'
0000000000011868         db  0x0e ; '.'
0000000000011869         db  0x20 ; ' '
000000000001186a         db  0x83 ; '.'
000000000001186b         db  0x04 ; '.'
000000000001186c         db  0x02 ; '.'
000000000001186d         db  0x58 ; 'X'
000000000001186e         db  0x0a ; '.'
000000000001186f         db  0x0e ; '.'
0000000000011870         db  0x18 ; '.'
0000000000011871         db  0x41 ; 'A'
0000000000011872         db  0x0e ; '.'
0000000000011873         db  0x10 ; '.'
0000000000011874         db  0x42 ; 'B'
0000000000011875         db  0x0e ; '.'
0000000000011876         db  0x08 ; '.'
0000000000011877         db  0x46 ; 'F'
0000000000011878         db  0x0b ; '.'
0000000000011879         db  0x63 ; 'c'
000000000001187a         db  0x0e ; '.'
000000000001187b         db  0x18 ; '.'
000000000001187c         db  0x41 ; 'A'
000000000001187d         db  0x0e ; '.'
000000000001187e         db  0x10 ; '.'
000000000001187f         db  0x42 ; 'B'
0000000000011880         db  0x0e ; '.'
0000000000011881         db  0x08 ; '.'
0000000000011882         db  0x00 ; '.'
0000000000011883         db  0x00 ; '.'
0000000000011884         dd         0x00000048                                  ; Length of the record
0000000000011888         dd         0x00001228                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001188c         db         0x04, 0x95, 2 dup (0xff)                    ; begin 0xad90
0000000000011890         db         0x36, 0x01, 2 dup (0x00)                    ; length 0x136 (end at 0xaec6)
0000000000011894         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011895         db  0x42 ; 'B'
0000000000011896         db  0x0e ; '.'
0000000000011897         db  0x10 ; '.'
0000000000011898         db  0x8f ; '.'
0000000000011899         db  0x02 ; '.'
000000000001189a         db  0x42 ; 'B'
000000000001189b         db  0x0e ; '.'
000000000001189c         db  0x18 ; '.'
000000000001189d         db  0x8e ; '.'
000000000001189e         db  0x03 ; '.'
000000000001189f         db  0x47 ; 'G'
00000000000118a0         db  0x0e ; '.'
00000000000118a1         db  0x20 ; ' '
00000000000118a2         db  0x8d ; '.'
00000000000118a3         db  0x04 ; '.'
00000000000118a4         db  0x42 ; 'B'
00000000000118a5         db  0x0e ; '.'
00000000000118a6         db  0x28 ; '('
00000000000118a7         db  0x8c ; '.'
00000000000118a8         db  0x05 ; '.'
00000000000118a9         db  0x41 ; 'A'
00000000000118aa         db  0x0e ; '.'
00000000000118ab         db  0x30 ; '0'
00000000000118ac         db  0x86 ; '.'
00000000000118ad         db  0x06 ; '.'
00000000000118ae         db  0x41 ; 'A'
00000000000118af         db  0x0e ; '.'
00000000000118b0         db  0x38 ; '8'
00000000000118b1         db  0x83 ; '.'
00000000000118b2         db  0x07 ; '.'
00000000000118b3         db  0x44 ; 'D'
00000000000118b4         db  0x0e ; '.'
00000000000118b5         db  0x40 ; '@'
00000000000118b6         db  0x02 ; '.'
00000000000118b7         db  0xa1 ; '.'
00000000000118b8         db  0x0a ; '.'
00000000000118b9         db  0x0e ; '.'
00000000000118ba         db  0x38 ; '8'
00000000000118bb         db  0x41 ; 'A'
00000000000118bc         db  0x0e ; '.'
00000000000118bd         db  0x30 ; '0'
00000000000118be         db  0x41 ; 'A'
00000000000118bf         db  0x0e ; '.'
00000000000118c0         db  0x28 ; '('
00000000000118c1         db  0x42 ; 'B'
00000000000118c2         db  0x0e ; '.'
00000000000118c3         db  0x20 ; ' '
00000000000118c4         db  0x42 ; 'B'
00000000000118c5         db  0x0e ; '.'
00000000000118c6         db  0x18 ; '.'
00000000000118c7         db  0x42 ; 'B'
00000000000118c8         db  0x0e ; '.'
00000000000118c9         db  0x10 ; '.'
00000000000118ca         db  0x42 ; 'B'
00000000000118cb         db  0x0e ; '.'
00000000000118cc         db  0x08 ; '.'
00000000000118cd         db  0x42 ; 'B'
00000000000118ce         db  0x0b ; '.'
00000000000118cf         db  0x00 ; '.'
00000000000118d0         dd         0x00000050                                  ; Length of the record
00000000000118d4         dd         0x00001274                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000118d8         db         0xf8, 0x95, 2 dup (0xff)                    ; begin 0xaed0
00000000000118dc         db         0xdf, 3 dup (0x00)                          ; length 0xdf (end at 0xafaf)
00000000000118e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000118e1         db  0x42 ; 'B'
00000000000118e2         db  0x0e ; '.'
00000000000118e3         db  0x10 ; '.'
00000000000118e4         db  0x8c ; '.'
00000000000118e5         db  0x02 ; '.'
00000000000118e6         db  0x41 ; 'A'
00000000000118e7         db  0x0e ; '.'
00000000000118e8         db  0x18 ; '.'
00000000000118e9         db  0x86 ; '.'
00000000000118ea         db  0x03 ; '.'
00000000000118eb         db  0x44 ; 'D'
00000000000118ec         db  0x0e ; '.'
00000000000118ed         db  0x20 ; ' '
00000000000118ee         db  0x83 ; '.'
00000000000118ef         db  0x04 ; '.'
00000000000118f0         db  0x4b ; 'K'
00000000000118f1         db  0x0e ; '.'
00000000000118f2         db  0x30 ; '0'
00000000000118f3         db  0x02 ; '.'
00000000000118f4         db  0x6f ; 'o'
00000000000118f5         db  0x0a ; '.'
00000000000118f6         db  0x0e ; '.'
00000000000118f7         db  0x20 ; ' '
00000000000118f8         db  0x44 ; 'D'
00000000000118f9         db  0x0e ; '.'
00000000000118fa         db  0x18 ; '.'
00000000000118fb         db  0x41 ; 'A'
00000000000118fc         db  0x0e ; '.'
00000000000118fd         db  0x10 ; '.'
00000000000118fe         db  0x42 ; 'B'
00000000000118ff         db  0x0e ; '.'
0000000000011900         db  0x08 ; '.'
0000000000011901         db  0x48 ; 'H'
0000000000011902         db  0x0b ; '.'
0000000000011903         db  0x5a ; 'Z'
0000000000011904         db  0x0a ; '.'
0000000000011905         db  0x0e ; '.'
0000000000011906         db  0x20 ; ' '
0000000000011907         db  0x44 ; 'D'
0000000000011908         db  0x0e ; '.'
0000000000011909         db  0x18 ; '.'
000000000001190a         db  0x41 ; 'A'
000000000001190b         db  0x0e ; '.'
000000000001190c         db  0x10 ; '.'
000000000001190d         db  0x42 ; 'B'
000000000001190e         db  0x0e ; '.'
000000000001190f         db  0x08 ; '.'
0000000000011910         db  0x47 ; 'G'
0000000000011911         db  0x0b ; '.'
0000000000011912         db  0x54 ; 'T'
0000000000011913         db  0x0a ; '.'
0000000000011914         db  0x0e ; '.'
0000000000011915         db  0x20 ; ' '
0000000000011916         db  0x44 ; 'D'
0000000000011917         db  0x0e ; '.'
0000000000011918         db  0x18 ; '.'
0000000000011919         db  0x41 ; 'A'
000000000001191a         db  0x0e ; '.'
000000000001191b         db  0x10 ; '.'
000000000001191c         db  0x42 ; 'B'
000000000001191d         db  0x0e ; '.'
000000000001191e         db  0x08 ; '.'
000000000001191f         db  0x45 ; 'E'
0000000000011920         db  0x0b ; '.'
0000000000011921         db  0x00 ; '.'
0000000000011922         db  0x00 ; '.'
0000000000011923         db  0x00 ; '.'
0000000000011924         dd         0x00000010                                  ; Length of the record
0000000000011928         dd         0x000012c8                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
000000000001192c         db         0x84, 0x96, 2 dup (0xff)                    ; begin 0xafb0
0000000000011930         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xafbc)
0000000000011934         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011935         align      8
0000000000011938         dd         0x0000005c                                  ; Length of the record
000000000001193c         dd         0x000012dc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011940         db         0x80, 0x96, 2 dup (0xff)                    ; begin 0xafc0
0000000000011944         db         0xa3, 3 dup (0x00)                          ; length 0xa3 (end at 0xb063)
0000000000011948         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011949         db  0x42 ; 'B'
000000000001194a         db  0x0e ; '.'
000000000001194b         db  0x10 ; '.'
000000000001194c         db  0x8d ; '.'
000000000001194d         db  0x02 ; '.'
000000000001194e         db  0x42 ; 'B'
000000000001194f         db  0x0e ; '.'
0000000000011950         db  0x18 ; '.'
0000000000011951         db  0x8c ; '.'
0000000000011952         db  0x03 ; '.'
0000000000011953         db  0x41 ; 'A'
0000000000011954         db  0x0e ; '.'                                         ; DATA XREF=print_statfs+1714
0000000000011955         db  0x20 ; ' '
0000000000011956         db  0x86 ; '.'
0000000000011957         db  0x04 ; '.'
0000000000011958         db  0x41 ; 'A'
0000000000011959         db  0x0e ; '.'
000000000001195a         db  0x28 ; '('
000000000001195b         db  0x83 ; '.'
000000000001195c         db  0x05 ; '.'
000000000001195d         db  0x47 ; 'G'
000000000001195e         db  0x0e ; '.'
000000000001195f         db  0x30 ; '0'
0000000000011960         db  0x02 ; '.'
0000000000011961         db  0x41 ; 'A'
0000000000011962         db  0x0a ; '.'
0000000000011963         db  0x0e ; '.'
0000000000011964         db  0x28 ; '('
0000000000011965         db  0x44 ; 'D'
0000000000011966         db  0x0e ; '.'
0000000000011967         db  0x20 ; ' '
0000000000011968         db  0x41 ; 'A'
0000000000011969         db  0x0e ; '.'
000000000001196a         db  0x18 ; '.'
000000000001196b         db  0x42 ; 'B'
000000000001196c         db  0x0e ; '.'
000000000001196d         db  0x10 ; '.'
000000000001196e         db  0x42 ; 'B'
000000000001196f         db  0x0e ; '.'
0000000000011970         db  0x08 ; '.'
0000000000011971         db  0x49 ; 'I'
0000000000011972         db  0x0b ; '.'
0000000000011973         db  0x52 ; 'R'
0000000000011974         db  0x0a ; '.'
0000000000011975         db  0x0e ; '.'
0000000000011976         db  0x28 ; '('
0000000000011977         db  0x43 ; 'C'
0000000000011978         db  0x0e ; '.'
0000000000011979         db  0x20 ; ' '
000000000001197a         db  0x41 ; 'A'
000000000001197b         db  0x0e ; '.'
000000000001197c         db  0x18 ; '.'
000000000001197d         db  0x42 ; 'B'
000000000001197e         db  0x0e ; '.'
000000000001197f         db  0x10 ; '.'
0000000000011980         db  0x42 ; 'B'
0000000000011981         db  0x0e ; '.'
0000000000011982         db  0x08 ; '.'
0000000000011983         db  0x46 ; 'F'
0000000000011984         db  0x0b ; '.'
0000000000011985         db  0x44 ; 'D'
0000000000011986         db  0x0a ; '.'
0000000000011987         db  0x0e ; '.'
0000000000011988         db  0x28 ; '('
0000000000011989         db  0x47 ; 'G'
000000000001198a         db  0x0e ; '.'
000000000001198b         db  0x20 ; ' '
000000000001198c         db  0x41 ; 'A'
000000000001198d         db  0x0e ; '.'
000000000001198e         db  0x18 ; '.'
000000000001198f         db  0x42 ; 'B'
0000000000011990         db  0x0e ; '.'
0000000000011991         db  0x10 ; '.'
0000000000011992         db  0x42 ; 'B'
0000000000011993         db  0x0e ; '.'
0000000000011994         db  0x08 ; '.'
0000000000011995         db  0x45 ; 'E'
0000000000011996         db  0x0b ; '.'
0000000000011997         db  0x00 ; '.'
0000000000011998         dd         0x00000034                                  ; Length of the record
000000000001199c         dd         0x0000133c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000119a0         db         0xd0, 0x96, 2 dup (0xff)                    ; begin 0xb070
00000000000119a4         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0xb1b1)
00000000000119a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000119a9         db  0x42 ; 'B'
00000000000119aa         db  0x0e ; '.'
00000000000119ab         db  0x10 ; '.'
00000000000119ac         db  0x8c ; '.'
00000000000119ad         db  0x02 ; '.'
00000000000119ae         db  0x41 ; 'A'
00000000000119af         db  0x0e ; '.'
00000000000119b0         db  0x18 ; '.'
00000000000119b1         db  0x86 ; '.'
00000000000119b2         db  0x03 ; '.'
00000000000119b3         db  0x41 ; 'A'
00000000000119b4         db  0x0e ; '.'
00000000000119b5         db  0x20 ; ' '
00000000000119b6         db  0x83 ; '.'
00000000000119b7         db  0x04 ; '.'
00000000000119b8         db  0x47 ; 'G'
00000000000119b9         db  0x0e ; '.'
00000000000119ba         db  0x70 ; 'p'
00000000000119bb         db  0x02 ; '.'
00000000000119bc         db  0x8b ; '.'
00000000000119bd         db  0x0a ; '.'
00000000000119be         db  0x0e ; '.'
00000000000119bf         db  0x20 ; ' '
00000000000119c0         db  0x41 ; 'A'
00000000000119c1         db  0x0e ; '.'
00000000000119c2         db  0x18 ; '.'
00000000000119c3         db  0x41 ; 'A'
00000000000119c4         db  0x0e ; '.'
00000000000119c5         db  0x10 ; '.'
00000000000119c6         db  0x42 ; 'B'
00000000000119c7         db  0x0e ; '.'
00000000000119c8         db  0x08 ; '.'
00000000000119c9         db  0x46 ; 'F'
00000000000119ca         db  0x0b ; '.'
00000000000119cb         db  0x00 ; '.'
00000000000119cc         db  0x00 ; '.'
00000000000119cd         db  0x00 ; '.'
00000000000119ce         db  0x00 ; '.'
00000000000119cf         db  0x00 ; '.'
00000000000119d0         dd         0x0000004c                                  ; Length of the record
00000000000119d4         dd         0x00001374                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
00000000000119d8         db         0xe8, 0x97, 2 dup (0xff)                    ; begin 0xb1c0
00000000000119dc         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0xb23d)
00000000000119e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000119e1         db  0x42 ; 'B'
00000000000119e2         db  0x0e ; '.'
00000000000119e3         db  0x10 ; '.'
00000000000119e4         db  0x8c ; '.'
00000000000119e5         db  0x02 ; '.'
00000000000119e6         db  0x41 ; 'A'
00000000000119e7         db  0x0e ; '.'
00000000000119e8         db  0x18 ; '.'
00000000000119e9         db  0x86 ; '.'
00000000000119ea         db  0x03 ; '.'
00000000000119eb         db  0x44 ; 'D'
00000000000119ec         db  0x0e ; '.'
00000000000119ed         db  0x20 ; ' '
00000000000119ee         db  0x83 ; '.'
00000000000119ef         db  0x04 ; '.'
00000000000119f0         db  0x69 ; 'i'
00000000000119f1         db  0x0a ; '.'
00000000000119f2         db  0x0e ; '.'
00000000000119f3         db  0x18 ; '.'
00000000000119f4         db  0x41 ; 'A'
00000000000119f5         db  0x0e ; '.'
00000000000119f6         db  0x10 ; '.'
00000000000119f7         db  0x42 ; 'B'
00000000000119f8         db  0x0e ; '.'
00000000000119f9         db  0x08 ; '.'
00000000000119fa         db  0x45 ; 'E'
00000000000119fb         db  0x0b ; '.'
00000000000119fc         db  0x55 ; 'U'
00000000000119fd         db  0x0a ; '.'
00000000000119fe         db  0x0e ; '.'
00000000000119ff         db  0x18 ; '.'
0000000000011a00         db  0x41 ; 'A'
0000000000011a01         db  0x0e ; '.'
0000000000011a02         db  0x10 ; '.'
0000000000011a03         db  0x42 ; 'B'
0000000000011a04         db  0x0e ; '.'
0000000000011a05         db  0x08 ; '.'
0000000000011a06         db  0x48 ; 'H'
0000000000011a07         db  0x0b ; '.'
0000000000011a08         db  0x41 ; 'A'
0000000000011a09         db  0x0a ; '.'
0000000000011a0a         db  0x0e ; '.'
0000000000011a0b         db  0x18 ; '.'
0000000000011a0c         db  0x46 ; 'F'
0000000000011a0d         db  0x0e ; '.'
0000000000011a0e         db  0x10 ; '.'
0000000000011a0f         db  0x42 ; 'B'
0000000000011a10         db  0x0e ; '.'
0000000000011a11         db  0x08 ; '.'
0000000000011a12         db  0x47 ; 'G'
0000000000011a13         db  0x0b ; '.'
0000000000011a14         db  0x49 ; 'I'
0000000000011a15         db  0x0e ; '.'
0000000000011a16         db  0x18 ; '.'
0000000000011a17         db  0x41 ; 'A'
0000000000011a18         db  0x0e ; '.'
0000000000011a19         db  0x10 ; '.'
0000000000011a1a         db  0x42 ; 'B'
0000000000011a1b         db  0x0e ; '.'
0000000000011a1c         db  0x08 ; '.'
0000000000011a1d         db  0x00 ; '.'
0000000000011a1e         db  0x00 ; '.'
0000000000011a1f         db  0x00 ; '.'
0000000000011a20         dd         0x0000001c                                  ; Length of the record
0000000000011a24         dd         0x000013c4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011a28         db         0x18, 0x98, 2 dup (0xff)                    ; begin 0xb240
0000000000011a2c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0xb2ae)
0000000000011a30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a31         db  0x44 ; 'D'
0000000000011a32         db  0x0e ; '.'
0000000000011a33         db  0x60 ; '`'
0000000000011a34         db  0x7f ; '.'
0000000000011a35         db  0x0a ; '.'
0000000000011a36         db  0x0e ; '.'
0000000000011a37         db  0x08 ; '.'
0000000000011a38         db  0x45 ; 'E'
0000000000011a39         db  0x0b ; '.'
0000000000011a3a         db  0x00 ; '.'
0000000000011a3b         db  0x00 ; '.'
0000000000011a3c         db  0x00 ; '.'
0000000000011a3d         db  0x00 ; '.'
0000000000011a3e         db  0x00 ; '.'
0000000000011a3f         db  0x00 ; '.'
0000000000011a40         dd         0x0000001c                                  ; Length of the record
0000000000011a44         dd         0x000013e4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011a48         db         0x68, 0x98, 2 dup (0xff)                    ; begin 0xb2b0
0000000000011a4c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0xb310)
0000000000011a50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a51         db  0x44 ; 'D'
0000000000011a52         db  0x0e ; '.'
0000000000011a53         db  0x10 ; '.'
0000000000011a54         db  0x75 ; 'u'
0000000000011a55         db  0x0a ; '.'
0000000000011a56         db  0x0e ; '.'
0000000000011a57         db  0x08 ; '.'
0000000000011a58         db  0x47 ; 'G'
0000000000011a59         db  0x0b ; '.'
0000000000011a5a         db  0x5f ; '_'
0000000000011a5b         db  0x0e ; '.'
0000000000011a5c         db  0x08 ; '.'
0000000000011a5d         db  0x00 ; '.'
0000000000011a5e         db  0x00 ; '.'
0000000000011a5f         db  0x00 ; '.'
0000000000011a60         dd         0x0000001c                                  ; Length of the record
0000000000011a64         dd         0x00001404                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011a68         db         0xa8, 0x98, 2 dup (0xff)                    ; begin 0xb310
0000000000011a6c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0xb34c)
0000000000011a70         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a71         db  0x44 ; 'D'
0000000000011a72         db  0x0e ; '.'
0000000000011a73         db  0x10 ; '.'
0000000000011a74         db  0x61 ; 'a'
0000000000011a75         db  0x0a ; '.'
0000000000011a76         db  0x0e ; '.'
0000000000011a77         db  0x08 ; '.'
0000000000011a78         db  0x4b ; 'K'
0000000000011a79         db  0x0b ; '.'
0000000000011a7a         db  0x4b ; 'K'
0000000000011a7b         db  0x0e ; '.'
0000000000011a7c         db  0x08 ; '.'
0000000000011a7d         db  0x00 ; '.'
0000000000011a7e         db  0x00 ; '.'
0000000000011a7f         db  0x00 ; '.'
0000000000011a80         dd         0x00000034                                  ; Length of the record
0000000000011a84         dd         0x00001424                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011a88         db         0xc8, 0x98, 2 dup (0xff)                    ; begin 0xb350
0000000000011a8c         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0xb38f)
0000000000011a90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a91         db  0x42 ; 'B'
0000000000011a92         db  0x0e ; '.'
0000000000011a93         db  0x10 ; '.'
0000000000011a94         db  0x8d ; '.'
0000000000011a95         db  0x02 ; '.'
0000000000011a96         db  0x42 ; 'B'
0000000000011a97         db  0x0e ; '.'
0000000000011a98         db  0x18 ; '.'
0000000000011a99         db  0x8c ; '.'
0000000000011a9a         db  0x03 ; '.'
0000000000011a9b         db  0x41 ; 'A'
0000000000011a9c         db  0x0e ; '.'
0000000000011a9d         db  0x20 ; ' '
0000000000011a9e         db  0x86 ; '.'
0000000000011a9f         db  0x04 ; '.'
0000000000011aa0         db  0x41 ; 'A'
0000000000011aa1         db  0x0e ; '.'
0000000000011aa2         db  0x28 ; '('
0000000000011aa3         db  0x83 ; '.'
0000000000011aa4         db  0x05 ; '.'
0000000000011aa5         db  0x46 ; 'F'
0000000000011aa6         db  0x0e ; '.'
0000000000011aa7         db  0x30 ; '0'
0000000000011aa8         db  0x6a ; 'j'
0000000000011aa9         db  0x0e ; '.'
0000000000011aaa         db  0x28 ; '('
0000000000011aab         db  0x43 ; 'C'
0000000000011aac         db  0x0e ; '.'
0000000000011aad         db  0x20 ; ' '
0000000000011aae         db  0x41 ; 'A'
0000000000011aaf         db  0x0e ; '.'
0000000000011ab0         db  0x18 ; '.'
0000000000011ab1         db  0x42 ; 'B'
0000000000011ab2         db  0x0e ; '.'
0000000000011ab3         db  0x10 ; '.'
0000000000011ab4         db  0x42 ; 'B'
0000000000011ab5         db  0x0e ; '.'
0000000000011ab6         db  0x08 ; '.'
0000000000011ab7         db  0x00 ; '.'
0000000000011ab8         dd         0x00000048                                  ; Length of the record
0000000000011abc         dd         0x0000145c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011ac0         db         0xd0, 0x98, 2 dup (0xff)                    ; begin 0xb390
0000000000011ac4         db         0x43, 0x01, 2 dup (0x00)                    ; length 0x143 (end at 0xb4d3)
0000000000011ac8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ac9         db  0x42 ; 'B'
0000000000011aca         db  0x0e ; '.'
0000000000011acb         db  0x10 ; '.'
0000000000011acc         db  0x8f ; '.'
0000000000011acd         db  0x02 ; '.'
0000000000011ace         db  0x42 ; 'B'
0000000000011acf         db  0x0e ; '.'
0000000000011ad0         db  0x18 ; '.'
0000000000011ad1         db  0x8e ; '.'
0000000000011ad2         db  0x03 ; '.'
0000000000011ad3         db  0x42 ; 'B'
0000000000011ad4         db  0x0e ; '.'
0000000000011ad5         db  0x20 ; ' '
0000000000011ad6         db  0x8d ; '.'
0000000000011ad7         db  0x04 ; '.'
0000000000011ad8         db  0x42 ; 'B'
0000000000011ad9         db  0x0e ; '.'
0000000000011ada         db  0x28 ; '('
0000000000011adb         db  0x8c ; '.'
0000000000011adc         db  0x05 ; '.'
0000000000011add         db  0x41 ; 'A'
0000000000011ade         db  0x0e ; '.'
0000000000011adf         db  0x30 ; '0'
0000000000011ae0         db  0x86 ; '.'
0000000000011ae1         db  0x06 ; '.'
0000000000011ae2         db  0x41 ; 'A'
0000000000011ae3         db  0x0e ; '.'
0000000000011ae4         db  0x38 ; '8'
0000000000011ae5         db  0x83 ; '.'
0000000000011ae6         db  0x07 ; '.'
0000000000011ae7         db  0x44 ; 'D'
0000000000011ae8         db  0x0e ; '.'
0000000000011ae9         db  0x60 ; '`'
0000000000011aea         db  0x02 ; '.'
0000000000011aeb         db  0xfc ; '.'
0000000000011aec         db  0x0a ; '.'
0000000000011aed         db  0x0e ; '.'
0000000000011aee         db  0x38 ; '8'
0000000000011aef         db  0x41 ; 'A'
0000000000011af0         db  0x0e ; '.'
0000000000011af1         db  0x30 ; '0'
0000000000011af2         db  0x41 ; 'A'
0000000000011af3         db  0x0e ; '.'
0000000000011af4         db  0x28 ; '('
0000000000011af5         db  0x42 ; 'B'
0000000000011af6         db  0x0e ; '.'
0000000000011af7         db  0x20 ; ' '
0000000000011af8         db  0x42 ; 'B'
0000000000011af9         db  0x0e ; '.'
0000000000011afa         db  0x18 ; '.'
0000000000011afb         db  0x42 ; 'B'
0000000000011afc         db  0x0e ; '.'
0000000000011afd         db  0x10 ; '.'
0000000000011afe         db  0x42 ; 'B'
0000000000011aff         db  0x0e ; '.'
0000000000011b00         db  0x08 ; '.'
0000000000011b01         db  0x41 ; 'A'
0000000000011b02         db  0x0b ; '.'
0000000000011b03         db  0x00 ; '.'
0000000000011b04         dd         0x00000018                                  ; Length of the record
0000000000011b08         dd         0x000014a8                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011b0c         db         0xd4, 0x99, 2 dup (0xff)                    ; begin 0xb4e0
0000000000011b10         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0xb584)
0000000000011b14         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b15         db  0x44 ; 'D'
0000000000011b16         db  0x0e ; '.'
0000000000011b17         db  0x20 ; ' '
0000000000011b18         db  0x02 ; '.'
0000000000011b19         db  0x7e ; '~'
0000000000011b1a         db  0x0a ; '.'
0000000000011b1b         db  0x0e ; '.'
0000000000011b1c         db  0x08 ; '.'
0000000000011b1d         db  0x46 ; 'F'
0000000000011b1e         db  0x0b ; '.'
0000000000011b1f         db  0x00 ; '.'
0000000000011b20         dd         0x00000034                                  ; Length of the record
0000000000011b24         dd         0x000014c4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011b28         db         0x68, 0x9a, 2 dup (0xff)                    ; begin 0xb590
0000000000011b2c         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xb60b)
0000000000011b30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b31         db  0x42 ; 'B'
0000000000011b32         db  0x0e ; '.'
0000000000011b33         db  0x10 ; '.'
0000000000011b34         db  0x8c ; '.'
0000000000011b35         db  0x02 ; '.'
0000000000011b36         db  0x41 ; 'A'
0000000000011b37         db  0x0e ; '.'
0000000000011b38         db  0x18 ; '.'
0000000000011b39         db  0x86 ; '.'
0000000000011b3a         db  0x03 ; '.'
0000000000011b3b         db  0x41 ; 'A'
0000000000011b3c         db  0x0e ; '.'
0000000000011b3d         db  0x20 ; ' '
0000000000011b3e         db  0x83 ; '.'
0000000000011b3f         db  0x04 ; '.'
0000000000011b40         db  0x7d ; '}'
0000000000011b41         db  0x0a ; '.'
0000000000011b42         db  0x0e ; '.'
0000000000011b43         db  0x18 ; '.'
0000000000011b44         db  0x41 ; 'A'
0000000000011b45         db  0x0e ; '.'
0000000000011b46         db  0x10 ; '.'
0000000000011b47         db  0x42 ; 'B'
0000000000011b48         db  0x0e ; '.'
0000000000011b49         db  0x08 ; '.'
0000000000011b4a         db  0x44 ; 'D'
0000000000011b4b         db  0x0b ; '.'
0000000000011b4c         db  0x60 ; '`'
0000000000011b4d         db  0x0a ; '.'
0000000000011b4e         db  0x0e ; '.'
0000000000011b4f         db  0x18 ; '.'
0000000000011b50         db  0x41 ; 'A'
0000000000011b51         db  0x0e ; '.'
0000000000011b52         db  0x10 ; '.'
0000000000011b53         db  0x42 ; 'B'
0000000000011b54         db  0x0e ; '.'
0000000000011b55         db  0x08 ; '.'
0000000000011b56         db  0x45 ; 'E'
0000000000011b57         db  0x0b ; '.'
0000000000011b58         dd         0x0000001c                                  ; Length of the record
0000000000011b5c         dd         0x000014fc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011b60         db         0xb0, 0x9a, 2 dup (0xff)                    ; begin 0xb610
0000000000011b64         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0xb650)
0000000000011b68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b69         db  0x44 ; 'D'
0000000000011b6a         db  0x0e ; '.'
0000000000011b6b         db  0x10 ; '.'
0000000000011b6c         db  0x83 ; '.'
0000000000011b6d         db  0x02 ; '.'
0000000000011b6e         db  0x5a ; 'Z'
0000000000011b6f         db  0x0a ; '.'
0000000000011b70         db  0x0e ; '.'
0000000000011b71         db  0x08 ; '.'
0000000000011b72         db  0x4a ; 'J'
0000000000011b73         db  0x0b ; '.'
0000000000011b74         db  0x53 ; 'S'
0000000000011b75         db  0x0e ; '.'
0000000000011b76         db  0x08 ; '.'
0000000000011b77         db  0x00 ; '.'
0000000000011b78         dd         0x0000002c                                  ; Length of the record
0000000000011b7c         dd         0x0000151c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011b80         db         0xd0, 0x9a, 2 dup (0xff)                    ; begin 0xb650
0000000000011b84         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xb6a7)
0000000000011b88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b89         db  0x63 ; 'c'
0000000000011b8a         db  0x0e ; '.'
0000000000011b8b         db  0x10 ; '.'
0000000000011b8c         db  0x8c ; '.'
0000000000011b8d         db  0x02 ; '.'
0000000000011b8e         db  0x41 ; 'A'
0000000000011b8f         db  0x0e ; '.'
0000000000011b90         db  0x18 ; '.'
0000000000011b91         db  0x86 ; '.'
0000000000011b92         db  0x03 ; '.'
0000000000011b93         db  0x44 ; 'D'
0000000000011b94         db  0x0e ; '.'
0000000000011b95         db  0x20 ; ' '
0000000000011b96         db  0x83 ; '.'
0000000000011b97         db  0x04 ; '.'
0000000000011b98         db  0x6b ; 'k'
0000000000011b99         db  0x0e ; '.'
0000000000011b9a         db  0x18 ; '.'
0000000000011b9b         db  0x41 ; 'A'
0000000000011b9c         db  0x0e ; '.'
0000000000011b9d         db  0x10 ; '.'
0000000000011b9e         db  0x42 ; 'B'
0000000000011b9f         db  0x0e ; '.'
0000000000011ba0         db  0x08 ; '.'
0000000000011ba1         db  0x00 ; '.'
0000000000011ba2         db  0x00 ; '.'
0000000000011ba3         db  0x00 ; '.'
0000000000011ba4         db  0x00 ; '.'
0000000000011ba5         db  0x00 ; '.'
0000000000011ba6         db  0x00 ; '.'
0000000000011ba7         db  0x00 ; '.'
0000000000011ba8         dd         0x00000024                                  ; Length of the record
0000000000011bac         dd         0x0000154c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011bb0         db         0x00, 0x9b, 2 dup (0xff)                    ; begin 0xb6b0
0000000000011bb4         db         0x7e, 3 dup (0x00)                          ; length 0x7e (end at 0xb72e)
0000000000011bb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011bb9         db  0x41 ; 'A'
0000000000011bba         db  0x0e ; '.'
0000000000011bbb         db  0x10 ; '.'
0000000000011bbc         db  0x83 ; '.'
0000000000011bbd         db  0x02 ; '.'
0000000000011bbe         db  0x4c ; 'L'
0000000000011bbf         db  0x0e ; '.'
0000000000011bc0         db  0x20 ; ' '
0000000000011bc1         db  0x02 ; '.'
0000000000011bc2         db  0x49 ; 'I'
0000000000011bc3         db  0x0a ; '.'
0000000000011bc4         db  0x0e ; '.'
0000000000011bc5         db  0x10 ; '.'
0000000000011bc6         db  0x41 ; 'A'
0000000000011bc7         db  0x0e ; '.'
0000000000011bc8         db  0x08 ; '.'
0000000000011bc9         db  0x41 ; 'A'
0000000000011bca         db  0x0b ; '.'
0000000000011bcb         db  0x00 ; '.'
0000000000011bcc         db  0x00 ; '.'
0000000000011bcd         db  0x00 ; '.'
0000000000011bce         db  0x00 ; '.'
0000000000011bcf         db  0x00 ; '.'
0000000000011bd0         dd         0x00000014                                  ; Length of the record
0000000000011bd4         dd         0x00001574                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011bd8         db         0x58, 0x9b, 2 dup (0xff)                    ; begin 0xb730
0000000000011bdc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xb73e)
0000000000011be0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011be1         align      8
0000000000011be8         dd         0x00000034                                  ; Length of the record
0000000000011bec         dd         0x0000158c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011bf0         db         0x50, 0x9b, 2 dup (0xff)                    ; begin 0xb740
0000000000011bf4         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0xb9be)
0000000000011bf8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011bf9         db  0x42 ; 'B'
0000000000011bfa         db  0x0e ; '.'
0000000000011bfb         db  0x10 ; '.'
0000000000011bfc         db  0x8c ; '.'
0000000000011bfd         db  0x02 ; '.'
0000000000011bfe         db  0x41 ; 'A'
0000000000011bff         db  0x0e ; '.'
0000000000011c00         db  0x18 ; '.'
0000000000011c01         db  0x86 ; '.'
0000000000011c02         db  0x03 ; '.'
0000000000011c03         db  0x43 ; 'C'
0000000000011c04         db  0x0e ; '.'
0000000000011c05         db  0x20 ; ' '
0000000000011c06         db  0x83 ; '.'
0000000000011c07         db  0x04 ; '.'
0000000000011c08         db  0x44 ; 'D'
0000000000011c09         db  0x0e ; '.'
0000000000011c0a         db  0x70 ; 'p'
0000000000011c0b         db  0x02 ; '.'
0000000000011c0c         db  0xf0 ; '.'
0000000000011c0d         db  0x0a ; '.'
0000000000011c0e         db  0x0e ; '.'
0000000000011c0f         db  0x20 ; ' '
0000000000011c10         db  0x41 ; 'A'
0000000000011c11         db  0x0e ; '.'
0000000000011c12         db  0x18 ; '.'
0000000000011c13         db  0x41 ; 'A'
0000000000011c14         db  0x0e ; '.'
0000000000011c15         db  0x10 ; '.'
0000000000011c16         db  0x42 ; 'B'
0000000000011c17         db  0x0e ; '.'
0000000000011c18         db  0x08 ; '.'
0000000000011c19         db  0x42 ; 'B'
0000000000011c1a         db  0x0b ; '.'
0000000000011c1b         db  0x00 ; '.'
0000000000011c1c         db  0x00 ; '.'
0000000000011c1d         db  0x00 ; '.'
0000000000011c1e         db  0x00 ; '.'
0000000000011c1f         db  0x00 ; '.'
0000000000011c20         dd         0x0000002c                                  ; Length of the record
0000000000011c24         dd         0x000015c4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011c28         db         0x98, 0x9d, 2 dup (0xff)                    ; begin 0xb9c0
0000000000011c2c         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0xcadf)
0000000000011c30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011c31         db  0x41 ; 'A'
0000000000011c32         db  0x0e ; '.'
0000000000011c33         db  0x10 ; '.'
0000000000011c34         db  0x86 ; '.'
0000000000011c35         db  0x02 ; '.'
0000000000011c36         db  0x43 ; 'C'
0000000000011c37         db  0x0d ; '.'
0000000000011c38         db  0x06 ; '.'
0000000000011c39         db  0x48 ; 'H'
0000000000011c3a         db  0x8f ; '.'
0000000000011c3b         db  0x03 ; '.'
0000000000011c3c         db  0x8e ; '.'
0000000000011c3d         db  0x04 ; '.'
0000000000011c3e         db  0x8d ; '.'
0000000000011c3f         db  0x05 ; '.'
0000000000011c40         db  0x8c ; '.'
0000000000011c41         db  0x06 ; '.'
0000000000011c42         db  0x48 ; 'H'
0000000000011c43         db  0x83 ; '.'
0000000000011c44         db  0x07 ; '.'
0000000000011c45         db  0x03 ; '.'
0000000000011c46         db  0xef ; '.'
0000000000011c47         db  0x01 ; '.'
0000000000011c48         db  0x0a ; '.'
0000000000011c49         db  0x0c ; '.'
0000000000011c4a         db  0x07 ; '.'
0000000000011c4b         db  0x08 ; '.'
0000000000011c4c         db  0x45 ; 'E'
0000000000011c4d         db  0x0b ; '.'
0000000000011c4e         db  0x00 ; '.'
0000000000011c4f         db  0x00 ; '.'
0000000000011c50         dd         0x00000014                                  ; Length of the record
0000000000011c54         dd         0x000015f4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011c58         db         0x88, 0xae, 2 dup (0xff)                    ; begin 0xcae0
0000000000011c5c         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0xccde)
0000000000011c60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011c61         align      8
0000000000011c68         dd         0x0000004c                                  ; Length of the record
0000000000011c6c         dd         0x0000160c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011c70         db         0x70, 0xb0, 2 dup (0xff)                    ; begin 0xcce0
0000000000011c74         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0xd9cc)
0000000000011c78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011c79         db  0x42 ; 'B'
0000000000011c7a         db  0x0e ; '.'
0000000000011c7b         db  0x10 ; '.'
0000000000011c7c         db  0x8f ; '.'
0000000000011c7d         db  0x02 ; '.'
0000000000011c7e         db  0x42 ; 'B'
0000000000011c7f         db  0x0e ; '.'
0000000000011c80         db  0x18 ; '.'
0000000000011c81         db  0x8e ; '.'
0000000000011c82         db  0x03 ; '.'
0000000000011c83         db  0x46 ; 'F'
0000000000011c84         db  0x0e ; '.'
0000000000011c85         db  0x20 ; ' '
0000000000011c86         db  0x8d ; '.'
0000000000011c87         db  0x04 ; '.'
0000000000011c88         db  0x42 ; 'B'
0000000000011c89         db  0x0e ; '.'
0000000000011c8a         db  0x28 ; '('
0000000000011c8b         db  0x8c ; '.'
0000000000011c8c         db  0x05 ; '.'
0000000000011c8d         db  0x45 ; 'E'
0000000000011c8e         db  0x0e ; '.'
0000000000011c8f         db  0x30 ; '0'
0000000000011c90         db  0x86 ; '.'
0000000000011c91         db  0x06 ; '.'
0000000000011c92         db  0x41 ; 'A'
0000000000011c93         db  0x0e ; '.'
0000000000011c94         db  0x38 ; '8'
0000000000011c95         db  0x83 ; '.'
0000000000011c96         db  0x07 ; '.'
0000000000011c97         db  0x52 ; 'R'
0000000000011c98         db  0x0e ; '.'
0000000000011c99         db  0x90 ; '.'
0000000000011c9a         db  0x01 ; '.'
0000000000011c9b         db  0x02 ; '.'
0000000000011c9c         db  0x82 ; '.'
0000000000011c9d         db  0x0a ; '.'
0000000000011c9e         db  0x0e ; '.'
0000000000011c9f         db  0x38 ; '8'
0000000000011ca0         db  0x41 ; 'A'
0000000000011ca1         db  0x0e ; '.'
0000000000011ca2         db  0x30 ; '0'
0000000000011ca3         db  0x41 ; 'A'
0000000000011ca4         db  0x0e ; '.'
0000000000011ca5         db  0x28 ; '('
0000000000011ca6         db  0x42 ; 'B'
0000000000011ca7         db  0x0e ; '.'
0000000000011ca8         db  0x20 ; ' '
0000000000011ca9         db  0x42 ; 'B'
0000000000011caa         db  0x0e ; '.'
0000000000011cab         db  0x18 ; '.'
0000000000011cac         db  0x42 ; 'B'
0000000000011cad         db  0x0e ; '.'
0000000000011cae         db  0x10 ; '.'
0000000000011caf         db  0x42 ; 'B'
0000000000011cb0         db  0x0e ; '.'
0000000000011cb1         db  0x08 ; '.'
0000000000011cb2         db  0x48 ; 'H'
0000000000011cb3         db  0x0b ; '.'
0000000000011cb4         db  0x00 ; '.'
0000000000011cb5         db  0x00 ; '.'
0000000000011cb6         db  0x00 ; '.'
0000000000011cb7         db  0x00 ; '.'
0000000000011cb8         dd         0x00000044                                  ; Length of the record
0000000000011cbc         dd         0x0000165c                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011cc0         db         0x10, 0xbd, 2 dup (0xff)                    ; begin 0xd9d0
0000000000011cc4         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xda35)
0000000000011cc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011cc9         db  0x42 ; 'B'
0000000000011cca         db  0x0e ; '.'
0000000000011ccb         db  0x10 ; '.'
0000000000011ccc         db  0x8f ; '.'
0000000000011ccd         db  0x02 ; '.'
0000000000011cce         db  0x42 ; 'B'
0000000000011ccf         db  0x0e ; '.'
0000000000011cd0         db  0x18 ; '.'
0000000000011cd1         db  0x8e ; '.'
0000000000011cd2         db  0x03 ; '.'
0000000000011cd3         db  0x45 ; 'E'
0000000000011cd4         db  0x0e ; '.'
0000000000011cd5         db  0x20 ; ' '
0000000000011cd6         db  0x8d ; '.'
0000000000011cd7         db  0x04 ; '.'
0000000000011cd8         db  0x42 ; 'B'
0000000000011cd9         db  0x0e ; '.'
0000000000011cda         db  0x28 ; '('
0000000000011cdb         db  0x8c ; '.'
0000000000011cdc         db  0x05 ; '.'
0000000000011cdd         db  0x48 ; 'H'
0000000000011cde         db  0x0e ; '.'
0000000000011cdf         db  0x30 ; '0'
0000000000011ce0         db  0x86 ; '.'
0000000000011ce1         db  0x06 ; '.'
0000000000011ce2         db  0x48 ; 'H'
0000000000011ce3         db  0x0e ; '.'
0000000000011ce4         db  0x38 ; '8'
0000000000011ce5         db  0x83 ; '.'
0000000000011ce6         db  0x07 ; '.'
0000000000011ce7         db  0x4d ; 'M'
0000000000011ce8         db  0x0e ; '.'
0000000000011ce9         db  0x40 ; '@'
0000000000011cea         db  0x72 ; 'r'
0000000000011ceb         db  0x0e ; '.'
0000000000011cec         db  0x38 ; '8'
0000000000011ced         db  0x41 ; 'A'
0000000000011cee         db  0x0e ; '.'
0000000000011cef         db  0x30 ; '0'
0000000000011cf0         db  0x41 ; 'A'
0000000000011cf1         db  0x0e ; '.'
0000000000011cf2         db  0x28 ; '('
0000000000011cf3         db  0x42 ; 'B'
0000000000011cf4         db  0x0e ; '.'
0000000000011cf5         db  0x20 ; ' '
0000000000011cf6         db  0x42 ; 'B'
0000000000011cf7         db  0x0e ; '.'
0000000000011cf8         db  0x18 ; '.'
0000000000011cf9         db  0x42 ; 'B'
0000000000011cfa         db  0x0e ; '.'
0000000000011cfb         db  0x10 ; '.'
0000000000011cfc         db  0x42 ; 'B'
0000000000011cfd         db  0x0e ; '.'
0000000000011cfe         db  0x08 ; '.'
0000000000011cff         db  0x00 ; '.'
0000000000011d00         dd         0x00000014                                  ; Length of the record
0000000000011d04         dd         0x000016a4                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011d08         db         0x38, 0xbd, 2 dup (0xff)                    ; begin 0xda40
0000000000011d0c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xda42)
0000000000011d10         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011d11         align      8
0000000000011d18         dd         0x00000010                                  ; Length of the record
0000000000011d1c         dd         0x000016bc                                  ; FDE: parent CIE at 0x10660 (FDE encoding = 0x1B)
0000000000011d20         db         0x30, 0xbd, 2 dup (0xff)                    ; begin 0xda50
0000000000011d24         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xda5e)
0000000000011d28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011d29         align      16


        ; Segment Segment 3
        ; Range: [0x2129b0; 0x213300[ (2384 bytes)
        ; File offset : [76208; 77984[ (1776 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x2129b0; 0x2129b8[ (8 bytes)
        ; File offset : [76208; 76216[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
00000000002129b0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x2129b8; 0x2129c0[ (8 bytes)
        ; File offset : [76216; 76224[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
00000000002129b8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x2129c0; 0x212b18[ (344 bytes)
        ; File offset : [76224; 76568[ (344 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
00000000002129c0         db  0x51 ; 'Q'                                         ; DATA XREF=main+14
00000000002129c1         db  0xdf ; '.'
00000000002129c2         db  0x00 ; '.'
00000000002129c3         db  0x00 ; '.'
00000000002129c4         db  0x00 ; '.'
00000000002129c5         db  0x00 ; '.'
00000000002129c6         db  0x00 ; '.'
00000000002129c7         db  0x00 ; '.'
00000000002129c8         db  0x00 ; '.'
00000000002129c9         db  0x00 ; '.'
00000000002129ca         db  0x00 ; '.'
00000000002129cb         db  0x00 ; '.'
00000000002129cc         db  0x00 ; '.'
00000000002129cd         db  0x00 ; '.'
00000000002129ce         db  0x00 ; '.'
00000000002129cf         db  0x00 ; '.'
00000000002129d0         db  0x00 ; '.'
00000000002129d1         db  0x00 ; '.'
00000000002129d2         db  0x00 ; '.'
00000000002129d3         db  0x00 ; '.'
00000000002129d4         db  0x00 ; '.'
00000000002129d5         db  0x00 ; '.'
00000000002129d6         db  0x00 ; '.'
00000000002129d7         db  0x00 ; '.'
00000000002129d8         db  0x4c ; 'L'
00000000002129d9         db  0x00 ; '.'
00000000002129da         db  0x00 ; '.'
00000000002129db         db  0x00 ; '.'
00000000002129dc         db  0x00 ; '.'
00000000002129dd         db  0x00 ; '.'
00000000002129de         db  0x00 ; '.'
00000000002129df         db  0x00 ; '.'
00000000002129e0         db  0x5d ; ']'
00000000002129e1         db  0xdf ; '.'
00000000002129e2         db  0x00 ; '.'
00000000002129e3         db  0x00 ; '.'
00000000002129e4         db  0x00 ; '.'
00000000002129e5         db  0x00 ; '.'
00000000002129e6         db  0x00 ; '.'
00000000002129e7         db  0x00 ; '.'
00000000002129e8         db  0x00 ; '.'
00000000002129e9         db  0x00 ; '.'
00000000002129ea         db  0x00 ; '.'
00000000002129eb         db  0x00 ; '.'
00000000002129ec         db  0x00 ; '.'
00000000002129ed         db  0x00 ; '.'
00000000002129ee         db  0x00 ; '.'
00000000002129ef         db  0x00 ; '.'
00000000002129f0         db  0x00 ; '.'
00000000002129f1         db  0x00 ; '.'
00000000002129f2         db  0x00 ; '.'
00000000002129f3         db  0x00 ; '.'
00000000002129f4         db  0x00 ; '.'
00000000002129f5         db  0x00 ; '.'
00000000002129f6         db  0x00 ; '.'
00000000002129f7         db  0x00 ; '.'
00000000002129f8         db  0x66 ; 'f'
00000000002129f9         db  0x00 ; '.'
00000000002129fa         db  0x00 ; '.'
00000000002129fb         db  0x00 ; '.'
00000000002129fc         db  0x00 ; '.'
00000000002129fd         db  0x00 ; '.'
00000000002129fe         db  0x00 ; '.'
00000000002129ff         db  0x00 ; '.'
0000000000212a00         db  0x69 ; 'i'
0000000000212a01         db  0xdf ; '.'
0000000000212a02         db  0x00 ; '.'
0000000000212a03         db  0x00 ; '.'
0000000000212a04         db  0x00 ; '.'
0000000000212a05         db  0x00 ; '.'
0000000000212a06         db  0x00 ; '.'
0000000000212a07         db  0x00 ; '.'
0000000000212a08         db  0x01 ; '.'
0000000000212a09         db  0x00 ; '.'
0000000000212a0a         db  0x00 ; '.'
0000000000212a0b         db  0x00 ; '.'
0000000000212a0c         db  0x00 ; '.'
0000000000212a0d         db  0x00 ; '.'
0000000000212a0e         db  0x00 ; '.'
0000000000212a0f         db  0x00 ; '.'
0000000000212a10         db  0x00 ; '.'
0000000000212a11         db  0x00 ; '.'
0000000000212a12         db  0x00 ; '.'
0000000000212a13         db  0x00 ; '.'
0000000000212a14         db  0x00 ; '.'
0000000000212a15         db  0x00 ; '.'
0000000000212a16         db  0x00 ; '.'
0000000000212a17         db  0x00 ; '.'
0000000000212a18         db  0x63 ; 'c'
0000000000212a19         db  0x00 ; '.'
0000000000212a1a         db  0x00 ; '.'
0000000000212a1b         db  0x00 ; '.'
0000000000212a1c         db  0x00 ; '.'
0000000000212a1d         db  0x00 ; '.'
0000000000212a1e         db  0x00 ; '.'
0000000000212a1f         db  0x00 ; '.'
0000000000212a20         db  0x70 ; 'p'
0000000000212a21         db  0xdf ; '.'
0000000000212a22         db  0x00 ; '.'
0000000000212a23         db  0x00 ; '.'
0000000000212a24         db  0x00 ; '.'
0000000000212a25         db  0x00 ; '.'
0000000000212a26         db  0x00 ; '.'
0000000000212a27         db  0x00 ; '.'
0000000000212a28         db  0x01 ; '.'
0000000000212a29         db  0x00 ; '.'
0000000000212a2a         db  0x00 ; '.'
0000000000212a2b         db  0x00 ; '.'
0000000000212a2c         db  0x00 ; '.'
0000000000212a2d         db  0x00 ; '.'
0000000000212a2e         db  0x00 ; '.'
0000000000212a2f         db  0x00 ; '.'
0000000000212a30         db  0x00 ; '.'
0000000000212a31         db  0x00 ; '.'
0000000000212a32         db  0x00 ; '.'
0000000000212a33         db  0x00 ; '.'
0000000000212a34         db  0x00 ; '.'
0000000000212a35         db  0x00 ; '.'
0000000000212a36         db  0x00 ; '.'
0000000000212a37         db  0x00 ; '.'
0000000000212a38         db  0x80 ; '.'
0000000000212a39         db  0x00 ; '.'
0000000000212a3a         db  0x00 ; '.'
0000000000212a3b         db  0x00 ; '.'
0000000000212a3c         db  0x00 ; '.'
0000000000212a3d         db  0x00 ; '.'
0000000000212a3e         db  0x00 ; '.'
0000000000212a3f         db  0x00 ; '.'
0000000000212a40         db  0x77 ; 'w'
0000000000212a41         db  0xdf ; '.'
0000000000212a42         db  0x00 ; '.'
0000000000212a43         db  0x00 ; '.'
0000000000212a44         db  0x00 ; '.'
0000000000212a45         db  0x00 ; '.'
0000000000212a46         db  0x00 ; '.'
0000000000212a47         db  0x00 ; '.'
0000000000212a48         db  0x00 ; '.'
0000000000212a49         db  0x00 ; '.'
0000000000212a4a         db  0x00 ; '.'
0000000000212a4b         db  0x00 ; '.'
0000000000212a4c         db  0x00 ; '.'
0000000000212a4d         db  0x00 ; '.'
0000000000212a4e         db  0x00 ; '.'
0000000000212a4f         db  0x00 ; '.'
0000000000212a50         db  0x00 ; '.'
0000000000212a51         db  0x00 ; '.'
0000000000212a52         db  0x00 ; '.'
0000000000212a53         db  0x00 ; '.'
0000000000212a54         db  0x00 ; '.'
0000000000212a55         db  0x00 ; '.'
0000000000212a56         db  0x00 ; '.'
0000000000212a57         db  0x00 ; '.'
0000000000212a58         db  0x74 ; 't'
0000000000212a59         db  0x00 ; '.'
0000000000212a5a         db  0x00 ; '.'
0000000000212a5b         db  0x00 ; '.'
0000000000212a5c         db  0x00 ; '.'
0000000000212a5d         db  0x00 ; '.'
0000000000212a5e         db  0x00 ; '.'
0000000000212a5f         db  0x00 ; '.'
0000000000212a60         db  0x7d ; '}'
0000000000212a61         db  0xdf ; '.'
0000000000212a62         db  0x00 ; '.'
0000000000212a63         db  0x00 ; '.'
0000000000212a64         db  0x00 ; '.'
0000000000212a65         db  0x00 ; '.'
0000000000212a66         db  0x00 ; '.'
0000000000212a67         db  0x00 ; '.'
0000000000212a68         db  0x00 ; '.'
0000000000212a69         db  0x00 ; '.'
0000000000212a6a         db  0x00 ; '.'
0000000000212a6b         db  0x00 ; '.'
0000000000212a6c         db  0x00 ; '.'
0000000000212a6d         db  0x00 ; '.'
0000000000212a6e         db  0x00 ; '.'
0000000000212a6f         db  0x00 ; '.'
0000000000212a70         db  0x00 ; '.'
0000000000212a71         db  0x00 ; '.'
0000000000212a72         db  0x00 ; '.'
0000000000212a73         db  0x00 ; '.'
0000000000212a74         db  0x00 ; '.'
0000000000212a75         db  0x00 ; '.'
0000000000212a76         db  0x00 ; '.'
0000000000212a77         db  0x00 ; '.'
0000000000212a78         db  0x7e ; '~'
0000000000212a79         db  0xff ; '.'
0000000000212a7a         db  0xff ; '.'
0000000000212a7b         db  0xff ; '.'
0000000000212a7c         db  0x00 ; '.'
0000000000212a7d         db  0x00 ; '.'
0000000000212a7e         db  0x00 ; '.'
0000000000212a7f         db  0x00 ; '.'
0000000000212a80         db  0x82 ; '.'
0000000000212a81         db  0xdf ; '.'
0000000000212a82         db  0x00 ; '.'
0000000000212a83         db  0x00 ; '.'
0000000000212a84         db  0x00 ; '.'
0000000000212a85         db  0x00 ; '.'
0000000000212a86         db  0x00 ; '.'
0000000000212a87         db  0x00 ; '.'
0000000000212a88         db  0x00 ; '.'
0000000000212a89         db  0x00 ; '.'
0000000000212a8a         db  0x00 ; '.'
0000000000212a8b         db  0x00 ; '.'
0000000000212a8c         db  0x00 ; '.'
0000000000212a8d         db  0x00 ; '.'
0000000000212a8e         db  0x00 ; '.'
0000000000212a8f         db  0x00 ; '.'
0000000000212a90         db  0x00 ; '.'
0000000000212a91         db  0x00 ; '.'
0000000000212a92         db  0x00 ; '.'
0000000000212a93         db  0x00 ; '.'
0000000000212a94         db  0x00 ; '.'
0000000000212a95         db  0x00 ; '.'
0000000000212a96         db  0x00 ; '.'
0000000000212a97         db  0x00 ; '.'
0000000000212a98         db  0x7d ; '}'
0000000000212a99         db  0xff ; '.'
0000000000212a9a         db  0xff ; '.'
0000000000212a9b         db  0xff ; '.'
0000000000212a9c         db  0x00 ; '.'
0000000000212a9d         db  0x00 ; '.'
0000000000212a9e         db  0x00 ; '.'
0000000000212a9f         db  0x00 ; '.'
0000000000212aa0         db  0x00 ; '.'
0000000000212aa1         db  0x00 ; '.'
0000000000212aa2         db  0x00 ; '.'
0000000000212aa3         db  0x00 ; '.'
0000000000212aa4         db  0x00 ; '.'
0000000000212aa5         db  0x00 ; '.'
0000000000212aa6         db  0x00 ; '.'
0000000000212aa7         db  0x00 ; '.'
0000000000212aa8         db  0x00 ; '.'
0000000000212aa9         db  0x00 ; '.'
0000000000212aaa         db  0x00 ; '.'
0000000000212aab         db  0x00 ; '.'
0000000000212aac         db  0x00 ; '.'
0000000000212aad         db  0x00 ; '.'
0000000000212aae         db  0x00 ; '.'
0000000000212aaf         db  0x00 ; '.'
0000000000212ab0         db  0x00 ; '.'
0000000000212ab1         db  0x00 ; '.'
0000000000212ab2         db  0x00 ; '.'
0000000000212ab3         db  0x00 ; '.'
0000000000212ab4         db  0x00 ; '.'
0000000000212ab5         db  0x00 ; '.'
0000000000212ab6         db  0x00 ; '.'
0000000000212ab7         db  0x00 ; '.'
0000000000212ab8         db  0x00 ; '.'
0000000000212ab9         db  0x00 ; '.'
0000000000212aba         db  0x00 ; '.'
0000000000212abb         db  0x00 ; '.'
0000000000212abc         db  0x00 ; '.'
0000000000212abd         db  0x00 ; '.'
0000000000212abe         db  0x00 ; '.'
0000000000212abf         db  0x00 ; '.'
                     quoting_style_args:
0000000000212ac0         db  0x57 ; 'W'                                         ; DATA XREF=main+551
0000000000212ac1         db  0xf6 ; '.'
0000000000212ac2         db  0x00 ; '.'
0000000000212ac3         db  0x00 ; '.'
0000000000212ac4         db  0x00 ; '.'
0000000000212ac5         db  0x00 ; '.'
0000000000212ac6         db  0x00 ; '.'
0000000000212ac7         db  0x00 ; '.'
0000000000212ac8         db  0x5f ; '_'
0000000000212ac9         db  0xf6 ; '.'
0000000000212aca         db  0x00 ; '.'
0000000000212acb         db  0x00 ; '.'
0000000000212acc         db  0x00 ; '.'
0000000000212acd         db  0x00 ; '.'
0000000000212ace         db  0x00 ; '.'
0000000000212acf         db  0x00 ; '.'
0000000000212ad0         db  0x65 ; 'e'
0000000000212ad1         db  0xf6 ; '.'
0000000000212ad2         db  0x00 ; '.'
0000000000212ad3         db  0x00 ; '.'
0000000000212ad4         db  0x00 ; '.'
0000000000212ad5         db  0x00 ; '.'
0000000000212ad6         db  0x00 ; '.'
0000000000212ad7         db  0x00 ; '.'
0000000000212ad8         db  0x72 ; 'r'
0000000000212ad9         db  0xf6 ; '.'
0000000000212ada         db  0x00 ; '.'
0000000000212adb         db  0x00 ; '.'
0000000000212adc         db  0x00 ; '.'
0000000000212add         db  0x00 ; '.'
0000000000212ade         db  0x00 ; '.'
0000000000212adf         db  0x00 ; '.'
0000000000212ae0         db  0x7f ; '.'
0000000000212ae1         db  0xf6 ; '.'
0000000000212ae2         db  0x00 ; '.'
0000000000212ae3         db  0x00 ; '.'
0000000000212ae4         db  0x00 ; '.'
0000000000212ae5         db  0x00 ; '.'
0000000000212ae6         db  0x00 ; '.'
0000000000212ae7         db  0x00 ; '.'
0000000000212ae8         db  0x60 ; '`'
0000000000212ae9         db  0xff ; '.'
0000000000212aea         db  0x00 ; '.'
0000000000212aeb         db  0x00 ; '.'
0000000000212aec         db  0x00 ; '.'
0000000000212aed         db  0x00 ; '.'
0000000000212aee         db  0x00 ; '.'
0000000000212aef         db  0x00 ; '.'
0000000000212af0         db  0x93 ; '.'
0000000000212af1         db  0xf6 ; '.'
0000000000212af2         db  0x00 ; '.'
0000000000212af3         db  0x00 ; '.'
0000000000212af4         db  0x00 ; '.'
0000000000212af5         db  0x00 ; '.'
0000000000212af6         db  0x00 ; '.'
0000000000212af7         db  0x00 ; '.'
0000000000212af8         db  0x78 ; 'x'
0000000000212af9         db  0xf6 ; '.'
0000000000212afa         db  0x00 ; '.'
0000000000212afb         db  0x00 ; '.'
0000000000212afc         db  0x00 ; '.'
0000000000212afd         db  0x00 ; '.'
0000000000212afe         db  0x00 ; '.'
0000000000212aff         db  0x00 ; '.'
0000000000212b00         db  0xea ; '.'
0000000000212b01         db  0xde ; '.'
0000000000212b02         db  0x00 ; '.'
0000000000212b03         db  0x00 ; '.'
0000000000212b04         db  0x00 ; '.'
0000000000212b05         db  0x00 ; '.'
0000000000212b06         db  0x00 ; '.'
0000000000212b07         db  0x00 ; '.'
0000000000212b08         db  0x9b ; '.'
0000000000212b09         db  0xf6 ; '.'
0000000000212b0a         db  0x00 ; '.'
0000000000212b0b         db  0x00 ; '.'
0000000000212b0c         db  0x00 ; '.'
0000000000212b0d         db  0x00 ; '.'
0000000000212b0e         db  0x00 ; '.'
0000000000212b0f         db  0x00 ; '.'
0000000000212b10         db  0x00 ; '.'
0000000000212b11         db  0x00 ; '.'
0000000000212b12         db  0x00 ; '.'
0000000000212b13         db  0x00 ; '.'
0000000000212b14         db  0x00 ; '.'
0000000000212b15         db  0x00 ; '.'
0000000000212b16         db  0x00 ; '.'
0000000000212b17         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x212b18; 0x212d08[ (496 bytes)
        ; File offset : [76568; 77064[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000212b18         db  0x01 ; '.'
0000000000212b19         db  0x00 ; '.'
0000000000212b1a         db  0x00 ; '.'
0000000000212b1b         db  0x00 ; '.'
0000000000212b1c         db  0x00 ; '.'
0000000000212b1d         db  0x00 ; '.'
0000000000212b1e         db  0x00 ; '.'
0000000000212b1f         db  0x00 ; '.'
0000000000212b20         db  0x01 ; '.'
0000000000212b21         db  0x00 ; '.'
0000000000212b22         db  0x00 ; '.'
0000000000212b23         db  0x00 ; '.'
0000000000212b24         db  0x00 ; '.'
0000000000212b25         db  0x00 ; '.'
0000000000212b26         db  0x00 ; '.'
0000000000212b27         db  0x00 ; '.'
0000000000212b28         db  0x0c ; '.'
0000000000212b29         db  0x00 ; '.'
0000000000212b2a         db  0x00 ; '.'
0000000000212b2b         db  0x00 ; '.'
0000000000212b2c         db  0x00 ; '.'
0000000000212b2d         db  0x00 ; '.'
0000000000212b2e         db  0x00 ; '.'
0000000000212b2f         db  0x00 ; '.'
0000000000212b30         db  0xb8 ; '.'
0000000000212b31         db  0x1c ; '.'
0000000000212b32         db  0x00 ; '.'
0000000000212b33         db  0x00 ; '.'
0000000000212b34         db  0x00 ; '.'
0000000000212b35         db  0x00 ; '.'
0000000000212b36         db  0x00 ; '.'
0000000000212b37         db  0x00 ; '.'
0000000000212b38         db  0x0d ; '.'
0000000000212b39         db  0x00 ; '.'
0000000000212b3a         db  0x00 ; '.'
0000000000212b3b         db  0x00 ; '.'
0000000000212b3c         db  0x00 ; '.'
0000000000212b3d         db  0x00 ; '.'
0000000000212b3e         db  0x00 ; '.'
0000000000212b3f         db  0x00 ; '.'
0000000000212b40         db  0x60 ; '`'
0000000000212b41         db  0xda ; '.'
0000000000212b42         db  0x00 ; '.'
0000000000212b43         db  0x00 ; '.'
0000000000212b44         db  0x00 ; '.'
0000000000212b45         db  0x00 ; '.'
0000000000212b46         db  0x00 ; '.'
0000000000212b47         db  0x00 ; '.'
0000000000212b48         db  0x19 ; '.'
0000000000212b49         db  0x00 ; '.'
0000000000212b4a         db  0x00 ; '.'
0000000000212b4b         db  0x00 ; '.'
0000000000212b4c         db  0x00 ; '.'
0000000000212b4d         db  0x00 ; '.'
0000000000212b4e         db  0x00 ; '.'
0000000000212b4f         db  0x00 ; '.'
0000000000212b50         db  0xb0 ; '.'
0000000000212b51         db  0x29 ; ')'
0000000000212b52         db  0x21 ; '!'
0000000000212b53         db  0x00 ; '.'
0000000000212b54         db  0x00 ; '.'
0000000000212b55         db  0x00 ; '.'
0000000000212b56         db  0x00 ; '.'
0000000000212b57         db  0x00 ; '.'
0000000000212b58         db  0x1b ; '.'
0000000000212b59         db  0x00 ; '.'
0000000000212b5a         db  0x00 ; '.'
0000000000212b5b         db  0x00 ; '.'
0000000000212b5c         db  0x00 ; '.'
0000000000212b5d         db  0x00 ; '.'
0000000000212b5e         db  0x00 ; '.'
0000000000212b5f         db  0x00 ; '.'
0000000000212b60         db  0x08 ; '.'
0000000000212b61         db  0x00 ; '.'
0000000000212b62         db  0x00 ; '.'
0000000000212b63         db  0x00 ; '.'
0000000000212b64         db  0x00 ; '.'
0000000000212b65         db  0x00 ; '.'
0000000000212b66         db  0x00 ; '.'
0000000000212b67         db  0x00 ; '.'
0000000000212b68         db  0x1a ; '.'
0000000000212b69         db  0x00 ; '.'
0000000000212b6a         db  0x00 ; '.'
0000000000212b6b         db  0x00 ; '.'
0000000000212b6c         db  0x00 ; '.'
0000000000212b6d         db  0x00 ; '.'
0000000000212b6e         db  0x00 ; '.'
0000000000212b6f         db  0x00 ; '.'
0000000000212b70         db  0xb8 ; '.'
0000000000212b71         db  0x29 ; ')'
0000000000212b72         db  0x21 ; '!'
0000000000212b73         db  0x00 ; '.'
0000000000212b74         db  0x00 ; '.'
0000000000212b75         db  0x00 ; '.'
0000000000212b76         db  0x00 ; '.'
0000000000212b77         db  0x00 ; '.'
0000000000212b78         db  0x1c ; '.'
0000000000212b79         db  0x00 ; '.'
0000000000212b7a         db  0x00 ; '.'
0000000000212b7b         db  0x00 ; '.'
0000000000212b7c         db  0x00 ; '.'
0000000000212b7d         db  0x00 ; '.'
0000000000212b7e         db  0x00 ; '.'
0000000000212b7f         db  0x00 ; '.'
0000000000212b80         db  0x08 ; '.'
0000000000212b81         db  0x00 ; '.'
0000000000212b82         db  0x00 ; '.'
0000000000212b83         db  0x00 ; '.'
0000000000212b84         db  0x00 ; '.'
0000000000212b85         db  0x00 ; '.'
0000000000212b86         db  0x00 ; '.'
0000000000212b87         db  0x00 ; '.'
0000000000212b88         db  0xf5 ; '.'
0000000000212b89         db  0xfe ; '.'
0000000000212b8a         db  0xff ; '.'
0000000000212b8b         db  0x6f ; 'o'
0000000000212b8c         db  0x00 ; '.'
0000000000212b8d         db  0x00 ; '.'
0000000000212b8e         db  0x00 ; '.'
0000000000212b8f         db  0x00 ; '.'
0000000000212b90         db  0x98 ; '.'
0000000000212b91         db  0x02 ; '.'
0000000000212b92         db  0x00 ; '.'
0000000000212b93         db  0x00 ; '.'
0000000000212b94         db  0x00 ; '.'
0000000000212b95         db  0x00 ; '.'
0000000000212b96         db  0x00 ; '.'
0000000000212b97         db  0x00 ; '.'
0000000000212b98         db  0x05 ; '.'
0000000000212b99         db  0x00 ; '.'
0000000000212b9a         db  0x00 ; '.'
0000000000212b9b         db  0x00 ; '.'
0000000000212b9c         db  0x00 ; '.'
0000000000212b9d         db  0x00 ; '.'
0000000000212b9e         db  0x00 ; '.'
0000000000212b9f         db  0x00 ; '.'
0000000000212ba0         db  0x28 ; '('
0000000000212ba1         db  0x0c ; '.'
0000000000212ba2         db  0x00 ; '.'
0000000000212ba3         db  0x00 ; '.'
0000000000212ba4         db  0x00 ; '.'
0000000000212ba5         db  0x00 ; '.'
0000000000212ba6         db  0x00 ; '.'
0000000000212ba7         db  0x00 ; '.'
0000000000212ba8         db  0x06 ; '.'
0000000000212ba9         db  0x00 ; '.'
0000000000212baa         db  0x00 ; '.'
0000000000212bab         db  0x00 ; '.'
0000000000212bac         db  0x00 ; '.'
0000000000212bad         db  0x00 ; '.'
0000000000212bae         db  0x00 ; '.'
0000000000212baf         db  0x00 ; '.'
0000000000212bb0         db  0xe0 ; '.'
0000000000212bb1         db  0x02 ; '.'
0000000000212bb2         db  0x00 ; '.'
0000000000212bb3         db  0x00 ; '.'
0000000000212bb4         db  0x00 ; '.'
0000000000212bb5         db  0x00 ; '.'
0000000000212bb6         db  0x00 ; '.'
0000000000212bb7         db  0x00 ; '.'
0000000000212bb8         db  0x0a ; '.'
0000000000212bb9         db  0x00 ; '.'
0000000000212bba         db  0x00 ; '.'
0000000000212bbb         db  0x00 ; '.'
0000000000212bbc         db  0x00 ; '.'
0000000000212bbd         db  0x00 ; '.'
0000000000212bbe         db  0x00 ; '.'
0000000000212bbf         db  0x00 ; '.'
0000000000212bc0         db  0x11 ; '.'
0000000000212bc1         db  0x04 ; '.'
0000000000212bc2         db  0x00 ; '.'
0000000000212bc3         db  0x00 ; '.'
0000000000212bc4         db  0x00 ; '.'
0000000000212bc5         db  0x00 ; '.'
0000000000212bc6         db  0x00 ; '.'
0000000000212bc7         db  0x00 ; '.'
0000000000212bc8         db  0x0b ; '.'
0000000000212bc9         db  0x00 ; '.'
0000000000212bca         db  0x00 ; '.'
0000000000212bcb         db  0x00 ; '.'
0000000000212bcc         db  0x00 ; '.'
0000000000212bcd         db  0x00 ; '.'
0000000000212bce         db  0x00 ; '.'
0000000000212bcf         db  0x00 ; '.'
0000000000212bd0         db  0x18 ; '.'
0000000000212bd1         db  0x00 ; '.'
0000000000212bd2         db  0x00 ; '.'
0000000000212bd3         db  0x00 ; '.'
0000000000212bd4         db  0x00 ; '.'
0000000000212bd5         db  0x00 ; '.'
0000000000212bd6         db  0x00 ; '.'
0000000000212bd7         db  0x00 ; '.'
0000000000212bd8         db  0x15 ; '.'
0000000000212bd9         db  0x00 ; '.'
0000000000212bda         db  0x00 ; '.'
0000000000212bdb         db  0x00 ; '.'
0000000000212bdc         db  0x00 ; '.'
0000000000212bdd         db  0x00 ; '.'
0000000000212bde         db  0x00 ; '.'
0000000000212bdf         db  0x00 ; '.'
0000000000212be0         db  0x00 ; '.'
0000000000212be1         db  0x00 ; '.'
0000000000212be2         db  0x00 ; '.'
0000000000212be3         db  0x00 ; '.'
0000000000212be4         db  0x00 ; '.'
0000000000212be5         db  0x00 ; '.'
0000000000212be6         db  0x00 ; '.'
0000000000212be7         db  0x00 ; '.'
0000000000212be8         db  0x03 ; '.'
0000000000212be9         db  0x00 ; '.'
0000000000212bea         db  0x00 ; '.'
0000000000212beb         db  0x00 ; '.'
0000000000212bec         db  0x00 ; '.'
0000000000212bed         db  0x00 ; '.'
0000000000212bee         db  0x00 ; '.'
0000000000212bef         db  0x00 ; '.'
0000000000212bf0         db  0x08 ; '.'
0000000000212bf1         db  0x2d ; '-'
0000000000212bf2         db  0x21 ; '!'
0000000000212bf3         db  0x00 ; '.'
0000000000212bf4         db  0x00 ; '.'
0000000000212bf5         db  0x00 ; '.'
0000000000212bf6         db  0x00 ; '.'
0000000000212bf7         db  0x00 ; '.'
0000000000212bf8         db  0x02 ; '.'
0000000000212bf9         db  0x00 ; '.'
0000000000212bfa         db  0x00 ; '.'
0000000000212bfb         db  0x00 ; '.'
0000000000212bfc         db  0x00 ; '.'
0000000000212bfd         db  0x00 ; '.'
0000000000212bfe         db  0x00 ; '.'
0000000000212bff         db  0x00 ; '.'
0000000000212c00         db  0xf8 ; '.'
0000000000212c01         db  0x07 ; '.'
0000000000212c02         db  0x00 ; '.'
0000000000212c03         db  0x00 ; '.'
0000000000212c04         db  0x00 ; '.'
0000000000212c05         db  0x00 ; '.'
0000000000212c06         db  0x00 ; '.'
0000000000212c07         db  0x00 ; '.'
0000000000212c08         db  0x14 ; '.'
0000000000212c09         db  0x00 ; '.'
0000000000212c0a         db  0x00 ; '.'
0000000000212c0b         db  0x00 ; '.'
0000000000212c0c         db  0x00 ; '.'
0000000000212c0d         db  0x00 ; '.'
0000000000212c0e         db  0x00 ; '.'
0000000000212c0f         db  0x00 ; '.'
0000000000212c10         db  0x07 ; '.'
0000000000212c11         db  0x00 ; '.'
0000000000212c12         db  0x00 ; '.'
0000000000212c13         db  0x00 ; '.'
0000000000212c14         db  0x00 ; '.'
0000000000212c15         db  0x00 ; '.'
0000000000212c16         db  0x00 ; '.'
0000000000212c17         db  0x00 ; '.'
0000000000212c18         db  0x17 ; '.'
0000000000212c19         db  0x00 ; '.'
0000000000212c1a         db  0x00 ; '.'
0000000000212c1b         db  0x00 ; '.'
0000000000212c1c         db  0x00 ; '.'
0000000000212c1d         db  0x00 ; '.'
0000000000212c1e         db  0x00 ; '.'
0000000000212c1f         db  0x00 ; '.'
0000000000212c20         db  0xc0 ; '.'
0000000000212c21         db  0x14 ; '.'
0000000000212c22         db  0x00 ; '.'
0000000000212c23         db  0x00 ; '.'
0000000000212c24         db  0x00 ; '.'
0000000000212c25         db  0x00 ; '.'
0000000000212c26         db  0x00 ; '.'
0000000000212c27         db  0x00 ; '.'
0000000000212c28         db  0x07 ; '.'
0000000000212c29         db  0x00 ; '.'
0000000000212c2a         db  0x00 ; '.'
0000000000212c2b         db  0x00 ; '.'
0000000000212c2c         db  0x00 ; '.'
0000000000212c2d         db  0x00 ; '.'
0000000000212c2e         db  0x00 ; '.'
0000000000212c2f         db  0x00 ; '.'
0000000000212c30         db  0x60 ; '`'
0000000000212c31         db  0x11 ; '.'
0000000000212c32         db  0x00 ; '.'
0000000000212c33         db  0x00 ; '.'
0000000000212c34         db  0x00 ; '.'
0000000000212c35         db  0x00 ; '.'
0000000000212c36         db  0x00 ; '.'
0000000000212c37         db  0x00 ; '.'
0000000000212c38         db  0x08 ; '.'
0000000000212c39         db  0x00 ; '.'
0000000000212c3a         db  0x00 ; '.'
0000000000212c3b         db  0x00 ; '.'
0000000000212c3c         db  0x00 ; '.'
0000000000212c3d         db  0x00 ; '.'
0000000000212c3e         db  0x00 ; '.'
0000000000212c3f         db  0x00 ; '.'
0000000000212c40         db  0x60 ; '`'
0000000000212c41         db  0x03 ; '.'
0000000000212c42         db  0x00 ; '.'
0000000000212c43         db  0x00 ; '.'
0000000000212c44         db  0x00 ; '.'
0000000000212c45         db  0x00 ; '.'
0000000000212c46         db  0x00 ; '.'
0000000000212c47         db  0x00 ; '.'
0000000000212c48         db  0x09 ; '.'
0000000000212c49         db  0x00 ; '.'
0000000000212c4a         db  0x00 ; '.'
0000000000212c4b         db  0x00 ; '.'
0000000000212c4c         db  0x00 ; '.'
0000000000212c4d         db  0x00 ; '.'
0000000000212c4e         db  0x00 ; '.'
0000000000212c4f         db  0x00 ; '.'
0000000000212c50         db  0x18 ; '.'
0000000000212c51         db  0x00 ; '.'
0000000000212c52         db  0x00 ; '.'
0000000000212c53         db  0x00 ; '.'
0000000000212c54         db  0x00 ; '.'
0000000000212c55         db  0x00 ; '.'
0000000000212c56         db  0x00 ; '.'
0000000000212c57         db  0x00 ; '.'
0000000000212c58         db  0x1e ; '.'
0000000000212c59         db  0x00 ; '.'
0000000000212c5a         db  0x00 ; '.'
0000000000212c5b         db  0x00 ; '.'
0000000000212c5c         db  0x00 ; '.'
0000000000212c5d         db  0x00 ; '.'
0000000000212c5e         db  0x00 ; '.'
0000000000212c5f         db  0x00 ; '.'
0000000000212c60         db  0x08 ; '.'
0000000000212c61         db  0x00 ; '.'
0000000000212c62         db  0x00 ; '.'
0000000000212c63         db  0x00 ; '.'
0000000000212c64         db  0x00 ; '.'
0000000000212c65         db  0x00 ; '.'
0000000000212c66         db  0x00 ; '.'
0000000000212c67         db  0x00 ; '.'
0000000000212c68         db  0xfb ; '.'
0000000000212c69         db  0xff ; '.'
0000000000212c6a         db  0xff ; '.'
0000000000212c6b         db  0x6f ; 'o'
0000000000212c6c         db  0x00 ; '.'
0000000000212c6d         db  0x00 ; '.'
0000000000212c6e         db  0x00 ; '.'
0000000000212c6f         db  0x00 ; '.'
0000000000212c70         db  0x01 ; '.'
0000000000212c71         db  0x00 ; '.'
0000000000212c72         db  0x00 ; '.'
0000000000212c73         db  0x08 ; '.'
0000000000212c74         db  0x00 ; '.'
0000000000212c75         db  0x00 ; '.'
0000000000212c76         db  0x00 ; '.'
0000000000212c77         db  0x00 ; '.'
0000000000212c78         db  0xfe ; '.'
0000000000212c79         db  0xff ; '.'
0000000000212c7a         db  0xff ; '.'
0000000000212c7b         db  0x6f ; 'o'
0000000000212c7c         db  0x00 ; '.'
0000000000212c7d         db  0x00 ; '.'
0000000000212c7e         db  0x00 ; '.'
0000000000212c7f         db  0x00 ; '.'
0000000000212c80         db  0x00 ; '.'
0000000000212c81         db  0x11 ; '.'
0000000000212c82         db  0x00 ; '.'
0000000000212c83         db  0x00 ; '.'
0000000000212c84         db  0x00 ; '.'
0000000000212c85         db  0x00 ; '.'
0000000000212c86         db  0x00 ; '.'
0000000000212c87         db  0x00 ; '.'
0000000000212c88         db  0xff ; '.'
0000000000212c89         db  0xff ; '.'
0000000000212c8a         db  0xff ; '.'
0000000000212c8b         db  0x6f ; 'o'
0000000000212c8c         db  0x00 ; '.'
0000000000212c8d         db  0x00 ; '.'
0000000000212c8e         db  0x00 ; '.'
0000000000212c8f         db  0x00 ; '.'
0000000000212c90         db  0x01 ; '.'
0000000000212c91         db  0x00 ; '.'
0000000000212c92         db  0x00 ; '.'
0000000000212c93         db  0x00 ; '.'
0000000000212c94         db  0x00 ; '.'
0000000000212c95         db  0x00 ; '.'
0000000000212c96         db  0x00 ; '.'
0000000000212c97         db  0x00 ; '.'
0000000000212c98         db  0xf0 ; '.'
0000000000212c99         db  0xff ; '.'
0000000000212c9a         db  0xff ; '.'
0000000000212c9b         db  0x6f ; 'o'
0000000000212c9c         db  0x00 ; '.'
0000000000212c9d         db  0x00 ; '.'
0000000000212c9e         db  0x00 ; '.'
0000000000212c9f         db  0x00 ; '.'
0000000000212ca0         db  0x3a ; ':'
0000000000212ca1         db  0x10 ; '.'
0000000000212ca2         db  0x00 ; '.'
0000000000212ca3         db  0x00 ; '.'
0000000000212ca4         db  0x00 ; '.'
0000000000212ca5         db  0x00 ; '.'
0000000000212ca6         db  0x00 ; '.'
0000000000212ca7         db  0x00 ; '.'
0000000000212ca8         db  0xf9 ; '.'
0000000000212ca9         db  0xff ; '.'
0000000000212caa         db  0xff ; '.'
0000000000212cab         db  0x6f ; 'o'
0000000000212cac         db  0x00 ; '.'
0000000000212cad         db  0x00 ; '.'
0000000000212cae         db  0x00 ; '.'
0000000000212caf         db  0x00 ; '.'
0000000000212cb0         db  0x19 ; '.'
0000000000212cb1         db  0x00 ; '.'
0000000000212cb2         db  0x00 ; '.'
0000000000212cb3         db  0x00 ; '.'
0000000000212cb4         db  0x00 ; '.'
0000000000212cb5         db  0x00 ; '.'
0000000000212cb6         db  0x00 ; '.'
0000000000212cb7         db  0x00 ; '.'
0000000000212cb8         db  0x00 ; '.'
0000000000212cb9         db  0x00 ; '.'
0000000000212cba         db  0x00 ; '.'
0000000000212cbb         db  0x00 ; '.'
0000000000212cbc         db  0x00 ; '.'
0000000000212cbd         db  0x00 ; '.'
0000000000212cbe         db  0x00 ; '.'
0000000000212cbf         db  0x00 ; '.'
0000000000212cc0         db  0x00 ; '.'
0000000000212cc1         db  0x00 ; '.'
0000000000212cc2         db  0x00 ; '.'
0000000000212cc3         db  0x00 ; '.'
0000000000212cc4         db  0x00 ; '.'
0000000000212cc5         db  0x00 ; '.'
0000000000212cc6         db  0x00 ; '.'
0000000000212cc7         db  0x00 ; '.'
0000000000212cc8         db  0x00 ; '.'
0000000000212cc9         db  0x00 ; '.'
0000000000212cca         db  0x00 ; '.'
0000000000212ccb         db  0x00 ; '.'
0000000000212ccc         db  0x00 ; '.'
0000000000212ccd         db  0x00 ; '.'
0000000000212cce         db  0x00 ; '.'
0000000000212ccf         db  0x00 ; '.'
0000000000212cd0         db  0x00 ; '.'
0000000000212cd1         db  0x00 ; '.'
0000000000212cd2         db  0x00 ; '.'
0000000000212cd3         db  0x00 ; '.'
0000000000212cd4         db  0x00 ; '.'
0000000000212cd5         db  0x00 ; '.'
0000000000212cd6         db  0x00 ; '.'
0000000000212cd7         db  0x00 ; '.'
0000000000212cd8         db  0x00 ; '.'
0000000000212cd9         db  0x00 ; '.'
0000000000212cda         db  0x00 ; '.'
0000000000212cdb         db  0x00 ; '.'
0000000000212cdc         db  0x00 ; '.'
0000000000212cdd         db  0x00 ; '.'
0000000000212cde         db  0x00 ; '.'
0000000000212cdf         db  0x00 ; '.'
0000000000212ce0         db  0x00 ; '.'
0000000000212ce1         db  0x00 ; '.'
0000000000212ce2         db  0x00 ; '.'
0000000000212ce3         db  0x00 ; '.'
0000000000212ce4         db  0x00 ; '.'
0000000000212ce5         db  0x00 ; '.'
0000000000212ce6         db  0x00 ; '.'
0000000000212ce7         db  0x00 ; '.'
0000000000212ce8         db  0x00 ; '.'
0000000000212ce9         db  0x00 ; '.'
0000000000212cea         db  0x00 ; '.'
0000000000212ceb         db  0x00 ; '.'
0000000000212cec         db  0x00 ; '.'
0000000000212ced         db  0x00 ; '.'
0000000000212cee         db  0x00 ; '.'
0000000000212cef         db  0x00 ; '.'
0000000000212cf0         db  0x00 ; '.'
0000000000212cf1         db  0x00 ; '.'
0000000000212cf2         db  0x00 ; '.'
0000000000212cf3         db  0x00 ; '.'
0000000000212cf4         db  0x00 ; '.'
0000000000212cf5         db  0x00 ; '.'
0000000000212cf6         db  0x00 ; '.'
0000000000212cf7         db  0x00 ; '.'
0000000000212cf8         db  0x00 ; '.'
0000000000212cf9         db  0x00 ; '.'
0000000000212cfa         db  0x00 ; '.'
0000000000212cfb         db  0x00 ; '.'
0000000000212cfc         db  0x00 ; '.'
0000000000212cfd         db  0x00 ; '.'
0000000000212cfe         db  0x00 ; '.'
0000000000212cff         db  0x00 ; '.'
0000000000212d00         db  0x00 ; '.'
0000000000212d01         db  0x00 ; '.'
0000000000212d02         db  0x00 ; '.'
0000000000212d03         db  0x00 ; '.'
0000000000212d04         db  0x00 ; '.'
0000000000212d05         db  0x00 ; '.'
0000000000212d06         db  0x00 ; '.'
0000000000212d07         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x212d08; 0x212ff0[ (744 bytes)
        ; File offset : [77064; 77808[ (744 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000212d08         db  0x18 ; '.'
0000000000212d09         db  0x2b ; '+'
0000000000212d0a         db  0x21 ; '!'
0000000000212d0b         db  0x00 ; '.'
0000000000212d0c         db  0x00 ; '.'
0000000000212d0d         db  0x00 ; '.'
0000000000212d0e         db  0x00 ; '.'
0000000000212d0f         db  0x00 ; '.'
                     qword_212d10:
0000000000212d10         dq         0x0000000000000000                          ; DATA XREF=0x1cd0
0000000000212d18         db  0x00 ; '.'                                         ; DATA XREF=0x1cd6
0000000000212d19         db  0x00 ; '.'
0000000000212d1a         db  0x00 ; '.'
0000000000212d1b         db  0x00 ; '.'
0000000000212d1c         db  0x00 ; '.'
0000000000212d1d         db  0x00 ; '.'
0000000000212d1e         db  0x00 ; '.'
0000000000212d1f         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
0000000000212d20         dq         0x0000000000213310                          ; DATA XREF=j___ctype_toupper_loc
                     getenv@GOT:        // getenv
0000000000212d28         dq         0x0000000000213318                          ; DATA XREF=j_getenv
                     __snprintf_chk@GOT:        // __snprintf_chk
0000000000212d30         dq         0x0000000000213320                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
0000000000212d38         dq         0x0000000000213328                          ; DATA XREF=j_free
                     endmntent@GOT:        // endmntent
0000000000212d40         dq         0x0000000000213330                          ; DATA XREF=j_endmntent
                     abort@GOT:        // abort
0000000000212d48         dq         0x0000000000213338                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000212d50         dq         0x0000000000213340                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
0000000000212d58         dq         0x0000000000213348                          ; DATA XREF=j_strncmp
                     localtime_r@GOT:        // localtime_r
0000000000212d60         dq         0x0000000000213358                          ; DATA XREF=j_localtime_r
                     _exit@GOT:        // _exit
0000000000212d68         dq         0x0000000000213360                          ; DATA XREF=j__exit
                     strcpy@GOT:        // strcpy
0000000000212d70         dq         0x0000000000213368                          ; DATA XREF=j_strcpy
                     __fpending@GOT:        // __fpending
0000000000212d78         dq         0x0000000000213370                          ; DATA XREF=j___fpending
                     localeconv@GOT:        // localeconv
0000000000212d80         dq         0x0000000000213378                          ; DATA XREF=j_localeconv
                     readlink@GOT:        // readlink
0000000000212d88         dq         0x0000000000213380                          ; DATA XREF=j_readlink
                     fcntl@GOT:        // fcntl
0000000000212d90         dq         0x0000000000213388                          ; DATA XREF=j_fcntl
                     setenv@GOT:        // setenv
0000000000212d98         dq         0x0000000000213390                          ; DATA XREF=j_setenv
                     textdomain@GOT:        // textdomain
0000000000212da0         dq         0x0000000000213398                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
0000000000212da8         dq         0x00000000002133a0                          ; DATA XREF=j_fclose
                     getpwuid@GOT:        // getpwuid
0000000000212db0         dq         0x00000000002133a8                          ; DATA XREF=j_getpwuid
                     bindtextdomain@GOT:        // bindtextdomain
0000000000212db8         dq         0x00000000002133b0                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
0000000000212dc0         dq         0x00000000002133b8                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000212dc8         dq         0x00000000002133c0                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000212dd0         dq         0x00000000002133c8                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
0000000000212dd8         dq         0x00000000002133d0                          ; DATA XREF=j___lxstat
                     openat@GOT:        // openat
0000000000212de0         dq         0x00000000002133d8                          ; DATA XREF=j_openat
                     chdir@GOT:        // chdir
0000000000212de8         dq         0x00000000002133e0                          ; DATA XREF=j_chdir
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000212df0         dq         0x00000000002133e8                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000212df8         dq         0x00000000002133f0                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000212e00         dq         0x00000000002133f8                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
0000000000212e08         dq         0x0000000000213400                          ; DATA XREF=j_strchr
                     getgrgid@GOT:        // getgrgid
0000000000212e10         dq         0x0000000000213408                          ; DATA XREF=j_getgrgid
                     __overflow@GOT:        // __overflow
0000000000212e18         dq         0x0000000000213410                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
0000000000212e20         dq         0x0000000000213418                          ; DATA XREF=j_strrchr
                     gmtime_r@GOT:        // gmtime_r
0000000000212e28         dq         0x0000000000213420                          ; DATA XREF=j_gmtime_r
                     lseek@GOT:        // lseek
0000000000212e30         dq         0x0000000000213428                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000212e38         dq         0x0000000000213430                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
0000000000212e40         dq         0x0000000000213438                          ; DATA XREF=j_memset
                     getcwd@GOT:        // getcwd
0000000000212e48         dq         0x0000000000213440                          ; DATA XREF=j_getcwd
                     canonicalize_file_name@GOT:        // canonicalize_file_name
0000000000212e50         dq         0x0000000000213448                          ; DATA XREF=j_canonicalize_file_name
                     close@GOT:        // close
0000000000212e58         dq         0x0000000000213450                          ; DATA XREF=j_close
                     strspn@GOT:        // strspn
0000000000212e60         dq         0x0000000000213458                          ; DATA XREF=j_strspn
                     memchr@GOT:        // memchr
0000000000212e68         dq         0x0000000000213460                          ; DATA XREF=j_memchr
                     memcmp@GOT:        // memcmp
0000000000212e70         dq         0x0000000000213470                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000212e78         dq         0x0000000000213478                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000212e80         dq         0x0000000000213480                          ; DATA XREF=j_calloc
                     __getdelim@GOT:        // __getdelim
0000000000212e88         dq         0x0000000000213488                          ; DATA XREF=j___getdelim
                     strcmp@GOT:        // strcmp
0000000000212e90         dq         0x0000000000213490                          ; DATA XREF=j_strcmp
                     strtol@GOT:        // strtol
0000000000212e98         dq         0x00000000002134a0                          ; DATA XREF=j_strtol
                     memcpy@GOT:        // memcpy
0000000000212ea0         dq         0x00000000002134a8                          ; DATA XREF=j_memcpy
                     tzset@GOT:        // tzset
0000000000212ea8         dq         0x00000000002134b0                          ; DATA XREF=j_tzset
                     fileno@GOT:        // fileno
0000000000212eb0         dq         0x00000000002134b8                          ; DATA XREF=j_fileno
                     statfs@GOT:        // statfs
0000000000212eb8         dq         0x00000000002134c0                          ; DATA XREF=j_statfs
                     __xstat@GOT:        // __xstat
0000000000212ec0         dq         0x00000000002134c8                          ; DATA XREF=j___xstat
                     malloc@GOT:        // malloc
0000000000212ec8         dq         0x00000000002134d0                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
0000000000212ed0         dq         0x00000000002134d8                          ; DATA XREF=j_fflush
                     getmntent@GOT:        // getmntent
0000000000212ed8         dq         0x00000000002134e0                          ; DATA XREF=j_getmntent
                     setmntent@GOT:        // setmntent
0000000000212ee0         dq         0x00000000002134e8                          ; DATA XREF=j_setmntent
                     nl_langinfo@GOT:        // nl_langinfo
0000000000212ee8         dq         0x00000000002134f0                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
0000000000212ef0         dq         0x00000000002134f8                          ; DATA XREF=j___fxstat
                     sscanf@GOT:        // sscanf
0000000000212ef8         dq         0x0000000000213500                          ; DATA XREF=j_sscanf
                     mktime@GOT:        // mktime
0000000000212f00         dq         0x0000000000213508                          ; DATA XREF=j_mktime
                     __freading@GOT:        // __freading
0000000000212f08         dq         0x0000000000213510                          ; DATA XREF=j___freading
                     fchdir@GOT:        // fchdir
0000000000212f10         dq         0x0000000000213518                          ; DATA XREF=j_fchdir
                     realloc@GOT:        // realloc
0000000000212f18         dq         0x0000000000213520                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
0000000000212f20         dq         0x0000000000213528                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000212f28         dq         0x0000000000213530                          ; DATA XREF=j___printf_chk
                     timegm@GOT:        // timegm
0000000000212f30         dq         0x0000000000213538                          ; DATA XREF=j_timegm
                     strftime@GOT:        // strftime
0000000000212f38         dq         0x0000000000213540                          ; DATA XREF=j_strftime
                     error@GOT:        // error
0000000000212f40         dq         0x0000000000213548                          ; DATA XREF=j_error
                     memrchr@GOT:        // memrchr
0000000000212f48         dq         0x0000000000213550                          ; DATA XREF=j_memrchr
                     open@GOT:        // open
0000000000212f50         dq         0x0000000000213558                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
0000000000212f58         dq         0x0000000000213560                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
0000000000212f60         dq         0x0000000000213568                          ; DATA XREF=j_fopen
                     unsetenv@GOT:        // unsetenv
0000000000212f68         dq         0x0000000000213570                          ; DATA XREF=j_unsetenv
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000212f70         dq         0x0000000000213578                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
0000000000212f78         dq         0x0000000000213580                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000212f80         dq         0x0000000000213588                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000212f88         dq         0x0000000000213590                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
0000000000212f90         dq         0x00000000002135a0                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000212f98         dq         0x00000000002135a8                          ; DATA XREF=j_iswprint
                     hasmntopt@GOT:        // hasmntopt
0000000000212fa0         dq         0x00000000002135b0                          ; DATA XREF=j_hasmntopt
                     strstr@GOT:        // strstr
0000000000212fa8         dq         0x00000000002135c0                          ; DATA XREF=j_strstr
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
0000000000212fb0         dq         0x00000000002135c8                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000212fb8         dq         0x00000000002135d0                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
0000000000212fc0         dq         0x00000000002135d8                          ; DATA XREF=j___sprintf_chk
                     qword_212fc8:
0000000000212fc8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
0000000000212fd0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000212fd1         db  0x00 ; '.'
0000000000212fd2         db  0x00 ; '.'
0000000000212fd3         db  0x00 ; '.'
0000000000212fd4         db  0x00 ; '.'
0000000000212fd5         db  0x00 ; '.'
0000000000212fd6         db  0x00 ; '.'
0000000000212fd7         db  0x00 ; '.'
                     qword_212fd8:
0000000000212fd8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_212fe0:
0000000000212fe0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_212fe8:
0000000000212fe8         dq         0x0000000000000000                          ; DATA XREF=j_qword_212fe8, __do_global_dtors_aux+9
0000000000212ff0         db  0x00 ; '.'
0000000000212ff1         db  0x00 ; '.'
0000000000212ff2         db  0x00 ; '.'
0000000000212ff3         db  0x00 ; '.'
0000000000212ff4         db  0x00 ; '.'
0000000000212ff5         db  0x00 ; '.'
0000000000212ff6         db  0x00 ; '.'
0000000000212ff7         db  0x00 ; '.'
0000000000212ff8         db  0x00 ; '.'
0000000000212ff9         db  0x00 ; '.'
0000000000212ffa         db  0x00 ; '.'
0000000000212ffb         db  0x00 ; '.'
0000000000212ffc         db  0x00 ; '.'
0000000000212ffd         db  0x00 ; '.'
0000000000212ffe         db  0x00 ; '.'
0000000000212fff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x213000; 0x2130a0[ (160 bytes)
        ; File offset : [77824; 77984[ (160 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000213000         db  0x00 ; '.'
0000000000213001         db  0x00 ; '.'
0000000000213002         db  0x00 ; '.'
0000000000213003         db  0x00 ; '.'
0000000000213004         db  0x00 ; '.'
0000000000213005         db  0x00 ; '.'
0000000000213006         db  0x00 ; '.'
0000000000213007         db  0x00 ; '.'
                     __dso_handle:
0000000000213008         dq         0x0000000000213008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     trailing_delim:
0000000000213010         dq         0x000000000000fb81                          ; DATA XREF=main+405, main+445, print_it+291
                     Version:
0000000000213018         dq         0x000000000000f30e                          ; "8.31", DATA XREF=main+323
                     argmatch_die:
0000000000213020         db  0xf0 ; '.'
0000000000213021         db  0x52 ; 'R'
0000000000213022         db  0x00 ; '.'
0000000000213023         db  0x00 ; '.'
0000000000213024         db  0x00 ; '.'
0000000000213025         db  0x00 ; '.'
0000000000213026         db  0x00 ; '.'
0000000000213027         db  0x00 ; '.'
                     exit_failure:
0000000000213028         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23
000000000021302c         db  0x00 ; '.'
000000000021302d         db  0x00 ; '.'
000000000021302e         db  0x00 ; '.'
000000000021302f         db  0x00 ; '.'
0000000000213030         db  0x00 ; '.'
0000000000213031         db  0x00 ; '.'
0000000000213032         db  0x00 ; '.'
0000000000213033         db  0x00 ; '.'
0000000000213034         db  0x00 ; '.'
0000000000213035         db  0x00 ; '.'
0000000000213036         db  0x00 ; '.'
0000000000213037         db  0x00 ; '.'
0000000000213038         db  0x00 ; '.'
0000000000213039         db  0x00 ; '.'
000000000021303a         db  0x00 ; '.'
000000000021303b         db  0x00 ; '.'
000000000021303c         db  0x00 ; '.'
000000000021303d         db  0x00 ; '.'
000000000021303e         db  0x00 ; '.'
000000000021303f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000213040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000213041         db  0x00 ; '.'
0000000000213042         db  0x00 ; '.'
0000000000213043         db  0x00 ; '.'
0000000000213044         db  0x00 ; '.'
0000000000213045         db  0x00 ; '.'
0000000000213046         db  0x00 ; '.'
0000000000213047         db  0x00 ; '.'
0000000000213048         db  0x00 ; '.'
0000000000213049         db  0x00 ; '.'
000000000021304a         db  0x00 ; '.'
000000000021304b         db  0x00 ; '.'
000000000021304c         db  0x00 ; '.'
000000000021304d         db  0x00 ; '.'
000000000021304e         db  0x00 ; '.'
000000000021304f         db  0x00 ; '.'
0000000000213050         db  0x00 ; '.'
0000000000213051         db  0x00 ; '.'
0000000000213052         db  0x00 ; '.'
0000000000213053         db  0x00 ; '.'
0000000000213054         db  0x00 ; '.'
0000000000213055         db  0x00 ; '.'
0000000000213056         db  0x00 ; '.'
0000000000213057         db  0x00 ; '.'
0000000000213058         db  0x00 ; '.'
0000000000213059         db  0x00 ; '.'
000000000021305a         db  0x00 ; '.'
000000000021305b         db  0x00 ; '.'
000000000021305c         db  0x00 ; '.'
000000000021305d         db  0x00 ; '.'
000000000021305e         db  0x00 ; '.'
000000000021305f         db  0x00 ; '.'
0000000000213060         db  0x00 ; '.'
0000000000213061         db  0x00 ; '.'
0000000000213062         db  0x00 ; '.'
0000000000213063         db  0x00 ; '.'
0000000000213064         db  0x00 ; '.'
0000000000213065         db  0x00 ; '.'
0000000000213066         db  0x00 ; '.'
0000000000213067         db  0x00 ; '.'
0000000000213068         db  0x00 ; '.'
0000000000213069         db  0x00 ; '.'
000000000021306a         db  0x00 ; '.'
000000000021306b         db  0x00 ; '.'
000000000021306c         db  0x00 ; '.'
000000000021306d         db  0x00 ; '.'
000000000021306e         db  0x00 ; '.'
000000000021306f         db  0x00 ; '.'
0000000000213070         db  0x00 ; '.'
0000000000213071         db  0x00 ; '.'
0000000000213072         db  0x00 ; '.'
0000000000213073         db  0x00 ; '.'
0000000000213074         db  0x00 ; '.'
0000000000213075         db  0x00 ; '.'
0000000000213076         db  0x00 ; '.'
0000000000213077         db  0x00 ; '.'
                     nslots:
0000000000213078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000021307c         db  0x00 ; '.'
000000000021307d         db  0x00 ; '.'
000000000021307e         db  0x00 ; '.'
000000000021307f         db  0x00 ; '.'
                     slotvec:
0000000000213080         dq         0x0000000000213090                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
0000000000213088         db  0x00 ; '.'
0000000000213089         db  0x00 ; '.'
000000000021308a         db  0x00 ; '.'
000000000021308b         db  0x00 ; '.'
000000000021308c         db  0x00 ; '.'
000000000021308d         db  0x00 ; '.'
000000000021308e         db  0x00 ; '.'
000000000021308f         db  0x00 ; '.'
                     slotvec0:
0000000000213090         dq         1.26481e-321, 1.0748e-317                   ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x2130a0; 0x213300[ (608 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002130a0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
00000000002130a1         db  0x00 ; '.'
00000000002130a2         db  0x00 ; '.'
00000000002130a3         db  0x00 ; '.'
00000000002130a4         db  0x00 ; '.'
00000000002130a5         db  0x00 ; '.'
00000000002130a6         db  0x00 ; '.'
00000000002130a7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002130a8         db  0x00 ; '.'                                         ; DATA XREF=main+316, print_statfs+464, print_it+159, print_it+228, print_it+284, print_it+501, print_it+598, print_it+751, print_it+896, print_stat+1264, usage+125
00000000002130a9         db  0x00 ; '.'
00000000002130aa         db  0x00 ; '.'
00000000002130ab         db  0x00 ; '.'
00000000002130ac         db  0x00 ; '.'
00000000002130ad         db  0x00 ; '.'
00000000002130ae         db  0x00 ; '.'
00000000002130af         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002130b0         db  0x00 ; '.'                                         ; DATA XREF=main+474, main+603
00000000002130b1         db  0x00 ; '.'
00000000002130b2         db  0x00 ; '.'
00000000002130b3         db  0x00 ; '.'
00000000002130b4         db  0x00 ; '.'
00000000002130b5         db  0x00 ; '.'
00000000002130b6         db  0x00 ; '.'
00000000002130b7         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
00000000002130b8         db  0x00 ; '.'                                         ; DATA XREF=main+391, main+431
00000000002130b9         db  0x00 ; '.'
00000000002130ba         db  0x00 ; '.'
00000000002130bb         db  0x00 ; '.'
00000000002130bc         db  0x00 ; '.'
00000000002130bd         db  0x00 ; '.'
00000000002130be         db  0x00 ; '.'
00000000002130bf         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
00000000002130c0         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
00000000002130c1         db  0x00 ; '.'
00000000002130c2         db  0x00 ; '.'
00000000002130c3         db  0x00 ; '.'
00000000002130c4         db  0x00 ; '.'
00000000002130c5         db  0x00 ; '.'
00000000002130c6         db  0x00 ; '.'
00000000002130c7         db  0x00 ; '.'
00000000002130c8         db  0x00 ; '.'
00000000002130c9         db  0x00 ; '.'
00000000002130ca         db  0x00 ; '.'
00000000002130cb         db  0x00 ; '.'
00000000002130cc         db  0x00 ; '.'
00000000002130cd         db  0x00 ; '.'
00000000002130ce         db  0x00 ; '.'
00000000002130cf         db  0x00 ; '.'
00000000002130d0         db  0x00 ; '.'
00000000002130d1         db  0x00 ; '.'
00000000002130d2         db  0x00 ; '.'
00000000002130d3         db  0x00 ; '.'
00000000002130d4         db  0x00 ; '.'
00000000002130d5         db  0x00 ; '.'
00000000002130d6         db  0x00 ; '.'
00000000002130d7         db  0x00 ; '.'
00000000002130d8         db  0x00 ; '.'
00000000002130d9         db  0x00 ; '.'
00000000002130da         db  0x00 ; '.'
00000000002130db         db  0x00 ; '.'
00000000002130dc         db  0x00 ; '.'
00000000002130dd         db  0x00 ; '.'
00000000002130de         db  0x00 ; '.'
00000000002130df         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
00000000002130e0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216, close_stdout+44, set_program_name+125
00000000002130e1         db  0x00 ; '.'
00000000002130e2         db  0x00 ; '.'
00000000002130e3         db  0x00 ; '.'
00000000002130e4         db  0x00 ; '.'
00000000002130e5         db  0x00 ; '.'
00000000002130e6         db  0x00 ; '.'
00000000002130e7         db  0x00 ; '.'
                     completed.7697:
00000000002130e8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
00000000002130e9         db  0x00 ; '.'
00000000002130ea         db  0x00 ; '.'
00000000002130eb         db  0x00 ; '.'
00000000002130ec         db  0x00 ; '.'
00000000002130ed         db  0x00 ; '.'
00000000002130ee         db  0x00 ; '.'
00000000002130ef         db  0x00 ; '.'
00000000002130f0         db  0x00 ; '.'
00000000002130f1         db  0x00 ; '.'
00000000002130f2         db  0x00 ; '.'
00000000002130f3         db  0x00 ; '.'
00000000002130f4         db  0x00 ; '.'
00000000002130f5         db  0x00 ; '.'
00000000002130f6         db  0x00 ; '.'
00000000002130f7         db  0x00 ; '.'
00000000002130f8         db  0x00 ; '.'
00000000002130f9         db  0x00 ; '.'
00000000002130fa         db  0x00 ; '.'
00000000002130fb         db  0x00 ; '.'
00000000002130fc         db  0x00 ; '.'
00000000002130fd         db  0x00 ; '.'
00000000002130fe         db  0x00 ; '.'
00000000002130ff         db  0x00 ; '.'
                     str.7298:
0000000000213100         db  0x00 ; '.'                                         ; DATA XREF=human_time+87, human_time+124, human_time+165
0000000000213101         db  0x00 ; '.'
0000000000213102         db  0x00 ; '.'
0000000000213103         db  0x00 ; '.'
0000000000213104         db  0x00 ; '.'
0000000000213105         db  0x00 ; '.'
0000000000213106         db  0x00 ; '.'
0000000000213107         db  0x00 ; '.'
0000000000213108         db  0x00 ; '.'
0000000000213109         db  0x00 ; '.'
000000000021310a         db  0x00 ; '.'
000000000021310b         db  0x00 ; '.'
000000000021310c         db  0x00 ; '.'
000000000021310d         db  0x00 ; '.'
000000000021310e         db  0x00 ; '.'
000000000021310f         db  0x00 ; '.'
0000000000213110         db  0x00 ; '.'
0000000000213111         db  0x00 ; '.'
0000000000213112         db  0x00 ; '.'
0000000000213113         db  0x00 ; '.'
0000000000213114         db  0x00 ; '.'
0000000000213115         db  0x00 ; '.'
0000000000213116         db  0x00 ; '.'
0000000000213117         db  0x00 ; '.'
0000000000213118         db  0x00 ; '.'
0000000000213119         db  0x00 ; '.'
000000000021311a         db  0x00 ; '.'
000000000021311b         db  0x00 ; '.'
000000000021311c         db  0x00 ; '.'
000000000021311d         db  0x00 ; '.'
000000000021311e         db  0x00 ; '.'
000000000021311f         db  0x00 ; '.'
0000000000213120         db  0x00 ; '.'
0000000000213121         db  0x00 ; '.'
0000000000213122         db  0x00 ; '.'
0000000000213123         db  0x00 ; '.'
0000000000213124         db  0x00 ; '.'
0000000000213125         db  0x00 ; '.'
0000000000213126         db  0x00 ; '.'
0000000000213127         db  0x00 ; '.'
0000000000213128         db  0x00 ; '.'
0000000000213129         db  0x00 ; '.'
000000000021312a         db  0x00 ; '.'
000000000021312b         db  0x00 ; '.'
000000000021312c         db  0x00 ; '.'
000000000021312d         db  0x00 ; '.'
000000000021312e         db  0x00 ; '.'
000000000021312f         db  0x00 ; '.'
0000000000213130         db  0x00 ; '.'
0000000000213131         db  0x00 ; '.'
0000000000213132         db  0x00 ; '.'
0000000000213133         db  0x00 ; '.'
0000000000213134         db  0x00 ; '.'
0000000000213135         db  0x00 ; '.'
0000000000213136         db  0x00 ; '.'
0000000000213137         db  0x00 ; '.'
0000000000213138         db  0x00 ; '.'
0000000000213139         db  0x00 ; '.'
000000000021313a         db  0x00 ; '.'
000000000021313b         db  0x00 ; '.'
000000000021313c         db  0x00 ; '.'
000000000021313d         db  0x00 ; '.'
000000000021313e         db  0x00 ; '.'
000000000021313f         db  0x00 ; '.'
                     tz.7299:
0000000000213140         db  0x00 ; '.'                                         ; DATA XREF=human_time+10, human_time+73, human_time+223
0000000000213141         db  0x00 ; '.'
0000000000213142         db  0x00 ; '.'
0000000000213143         db  0x00 ; '.'
0000000000213144         db  0x00 ; '.'
0000000000213145         db  0x00 ; '.'
0000000000213146         db  0x00 ; '.'
0000000000213147         db  0x00 ; '.'
                     mount_list.7428:
0000000000213148         db  0x00 ; '.'                                         ; DATA XREF=find_bind_mount+68, find_bind_mount+242
0000000000213149         db  0x00 ; '.'
000000000021314a         db  0x00 ; '.'
000000000021314b         db  0x00 ; '.'
000000000021314c         db  0x00 ; '.'
000000000021314d         db  0x00 ; '.'
000000000021314e         db  0x00 ; '.'
000000000021314f         db  0x00 ; '.'
                     tried_mount_list.7429:
0000000000213150         db  0x00 ; '.'                                         ; DATA XREF=find_bind_mount+35, find_bind_mount+251
0000000000213151         db  0x00 ; '.'
0000000000213152         db  0x00 ; '.'
0000000000213153         db  0x00 ; '.'
0000000000213154         db  0x00 ; '.'
0000000000213155         db  0x00 ; '.'
0000000000213156         db  0x00 ; '.'
0000000000213157         db  0x00 ; '.'
                     modebuf.7294:
0000000000213158         db  0x00 ; '.'                                         ; DATA XREF=print_stat+1192, print_stat+1210
0000000000213159         db  0x00 ; '.'
000000000021315a         db  0x00 ; '.'
000000000021315b         db  0x00 ; '.'
000000000021315c         db  0x00 ; '.'
000000000021315d         db  0x00 ; '.'
000000000021315e         db  0x00 ; '.'
000000000021315f         db  0x00 ; '.'
0000000000213160         db  0x00 ; '.'
0000000000213161         db  0x00 ; '.'
                     byte_213162:
0000000000213162         db  0x00 ; '.'                                         ; DATA XREF=print_stat+1223
0000000000213163         db  0x00 ; '.'
0000000000213164         db  0x00 ; '.'
0000000000213165         db  0x00 ; '.'
0000000000213166         db  0x00 ; '.'
0000000000213167         db  0x00 ; '.'
0000000000213168         db  0x00 ; '.'
0000000000213169         db  0x00 ; '.'
000000000021316a         db  0x00 ; '.'
000000000021316b         db  0x00 ; '.'
000000000021316c         db  0x00 ; '.'
000000000021316d         db  0x00 ; '.'
000000000021316e         db  0x00 ; '.'
000000000021316f         db  0x00 ; '.'
                     buf.7290:
0000000000213170         db  0x00 ; '.'                                         ; DATA XREF=print_statfs+260, print_statfs+284
0000000000213171         db  0x00 ; '.'
0000000000213172         db  0x00 ; '.'
0000000000213173         db  0x00 ; '.'
0000000000213174         db  0x00 ; '.'
0000000000213175         db  0x00 ; '.'
0000000000213176         db  0x00 ; '.'
0000000000213177         db  0x00 ; '.'
0000000000213178         db  0x00 ; '.'
0000000000213179         db  0x00 ; '.'
000000000021317a         db  0x00 ; '.'
000000000021317b         db  0x00 ; '.'
000000000021317c         db  0x00 ; '.'
000000000021317d         db  0x00 ; '.'
000000000021317e         db  0x00 ; '.'
000000000021317f         db  0x00 ; '.'
0000000000213180         db  0x00 ; '.'
0000000000213181         db  0x00 ; '.'
0000000000213182         db  0x00 ; '.'
0000000000213183         db  0x00 ; '.'
0000000000213184         db  0x00 ; '.'
0000000000213185         db  0x00 ; '.'
0000000000213186         db  0x00 ; '.'
0000000000213187         db  0x00 ; '.'
0000000000213188         db  0x00 ; '.'
0000000000213189         db  0x00 ; '.'
000000000021318a         db  0x00 ; '.'
000000000021318b         db  0x00 ; '.'
000000000021318c         db  0x00 ; '.'
000000000021318d         db  0x00 ; '.'
000000000021318e         db  0x00 ; '.'
000000000021318f         db  0x00 ; '.'
                     decimal_point_len:
0000000000213190         db  0x00 ; '.'                                         ; DATA XREF=main+154, out_epoch_sec.isra.9+209, out_epoch_sec.isra.9+679
0000000000213191         db  0x00 ; '.'
0000000000213192         db  0x00 ; '.'
0000000000213193         db  0x00 ; '.'
0000000000213194         db  0x00 ; '.'
0000000000213195         db  0x00 ; '.'
0000000000213196         db  0x00 ; '.'
0000000000213197         db  0x00 ; '.'
                     decimal_point:
0000000000213198         db  0x00 ; '.'                                         ; DATA XREF=main+135, out_epoch_sec.isra.9+230
0000000000213199         db  0x00 ; '.'
000000000021319a         db  0x00 ; '.'
000000000021319b         db  0x00 ; '.'
000000000021319c         db  0x00 ; '.'
000000000021319d         db  0x00 ; '.'
000000000021319e         db  0x00 ; '.'
000000000021319f         db  0x00 ; '.'
                     interpret_backslash_escapes:
00000000002131a0         db  0x00 ; '.'                                         ; DATA XREF=main+398, main+438, print_it+80
                     follow_links:
00000000002131a1         db  0x00 ; '.'                                         ; DATA XREF=main+368, main+776, print_stat+320
00000000002131a2         db  0x00 ; '.'
00000000002131a3         db  0x00 ; '.'
00000000002131a4         db  0x00 ; '.'
00000000002131a5         db  0x00 ; '.'
00000000002131a6         db  0x00 ; '.'
00000000002131a7         db  0x00 ; '.'
                     ignore_EPIPE:
00000000002131a8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
00000000002131a9         db  0x00 ; '.'
00000000002131aa         db  0x00 ; '.'
00000000002131ab         db  0x00 ; '.'
00000000002131ac         db  0x00 ; '.'
00000000002131ad         db  0x00 ; '.'
00000000002131ae         db  0x00 ; '.'
00000000002131af         db  0x00 ; '.'
                     file_name:
00000000002131b0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
00000000002131b1         db  0x00 ; '.'
00000000002131b2         db  0x00 ; '.'
00000000002131b3         db  0x00 ; '.'
00000000002131b4         db  0x00 ; '.'
00000000002131b5         db  0x00 ; '.'
00000000002131b6         db  0x00 ; '.'
00000000002131b7         db  0x00 ; '.'
                     program_name:
00000000002131b8         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
00000000002131b9         db  0x00 ; '.'
00000000002131ba         db  0x00 ; '.'
00000000002131bb         db  0x00 ; '.'
00000000002131bc         db  0x00 ; '.'
00000000002131bd         db  0x00 ; '.'
00000000002131be         db  0x00 ; '.'
00000000002131bf         db  0x00 ; '.'
                     slot0:
00000000002131c0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
00000000002131c1         db  0x00 ; '.'
00000000002131c2         db  0x00 ; '.'
00000000002131c3         db  0x00 ; '.'
00000000002131c4         db  0x00 ; '.'
00000000002131c5         db  0x00 ; '.'
00000000002131c6         db  0x00 ; '.'
00000000002131c7         db  0x00 ; '.'
00000000002131c8         db  0x00 ; '.'
00000000002131c9         db  0x00 ; '.'
00000000002131ca         db  0x00 ; '.'
00000000002131cb         db  0x00 ; '.'
00000000002131cc         db  0x00 ; '.'
00000000002131cd         db  0x00 ; '.'
00000000002131ce         db  0x00 ; '.'
00000000002131cf         db  0x00 ; '.'
00000000002131d0         db  0x00 ; '.'
00000000002131d1         db  0x00 ; '.'
00000000002131d2         db  0x00 ; '.'
00000000002131d3         db  0x00 ; '.'
00000000002131d4         db  0x00 ; '.'
00000000002131d5         db  0x00 ; '.'
00000000002131d6         db  0x00 ; '.'
00000000002131d7         db  0x00 ; '.'
00000000002131d8         db  0x00 ; '.'
00000000002131d9         db  0x00 ; '.'
00000000002131da         db  0x00 ; '.'
00000000002131db         db  0x00 ; '.'
00000000002131dc         db  0x00 ; '.'
00000000002131dd         db  0x00 ; '.'
00000000002131de         db  0x00 ; '.'
00000000002131df         db  0x00 ; '.'
00000000002131e0         db  0x00 ; '.'
00000000002131e1         db  0x00 ; '.'
00000000002131e2         db  0x00 ; '.'
00000000002131e3         db  0x00 ; '.'
00000000002131e4         db  0x00 ; '.'
00000000002131e5         db  0x00 ; '.'
00000000002131e6         db  0x00 ; '.'
00000000002131e7         db  0x00 ; '.'
00000000002131e8         db  0x00 ; '.'
00000000002131e9         db  0x00 ; '.'
00000000002131ea         db  0x00 ; '.'
00000000002131eb         db  0x00 ; '.'
00000000002131ec         db  0x00 ; '.'
00000000002131ed         db  0x00 ; '.'
00000000002131ee         db  0x00 ; '.'
00000000002131ef         db  0x00 ; '.'
00000000002131f0         db  0x00 ; '.'
00000000002131f1         db  0x00 ; '.'
00000000002131f2         db  0x00 ; '.'
00000000002131f3         db  0x00 ; '.'
00000000002131f4         db  0x00 ; '.'
00000000002131f5         db  0x00 ; '.'
00000000002131f6         db  0x00 ; '.'
00000000002131f7         db  0x00 ; '.'
00000000002131f8         db  0x00 ; '.'
00000000002131f9         db  0x00 ; '.'
00000000002131fa         db  0x00 ; '.'
00000000002131fb         db  0x00 ; '.'
00000000002131fc         db  0x00 ; '.'
00000000002131fd         db  0x00 ; '.'
00000000002131fe         db  0x00 ; '.'
00000000002131ff         db  0x00 ; '.'
0000000000213200         db  0x00 ; '.'
0000000000213201         db  0x00 ; '.'
0000000000213202         db  0x00 ; '.'
0000000000213203         db  0x00 ; '.'
0000000000213204         db  0x00 ; '.'
0000000000213205         db  0x00 ; '.'
0000000000213206         db  0x00 ; '.'
0000000000213207         db  0x00 ; '.'
0000000000213208         db  0x00 ; '.'
0000000000213209         db  0x00 ; '.'
000000000021320a         db  0x00 ; '.'
000000000021320b         db  0x00 ; '.'
000000000021320c         db  0x00 ; '.'
000000000021320d         db  0x00 ; '.'
000000000021320e         db  0x00 ; '.'
000000000021320f         db  0x00 ; '.'
0000000000213210         db  0x00 ; '.'
0000000000213211         db  0x00 ; '.'
0000000000213212         db  0x00 ; '.'
0000000000213213         db  0x00 ; '.'
0000000000213214         db  0x00 ; '.'
0000000000213215         db  0x00 ; '.'
0000000000213216         db  0x00 ; '.'
0000000000213217         db  0x00 ; '.'
0000000000213218         db  0x00 ; '.'
0000000000213219         db  0x00 ; '.'
000000000021321a         db  0x00 ; '.'
000000000021321b         db  0x00 ; '.'
000000000021321c         db  0x00 ; '.'
000000000021321d         db  0x00 ; '.'
000000000021321e         db  0x00 ; '.'
000000000021321f         db  0x00 ; '.'
0000000000213220         db  0x00 ; '.'
0000000000213221         db  0x00 ; '.'
0000000000213222         db  0x00 ; '.'
0000000000213223         db  0x00 ; '.'
0000000000213224         db  0x00 ; '.'
0000000000213225         db  0x00 ; '.'
0000000000213226         db  0x00 ; '.'
0000000000213227         db  0x00 ; '.'
0000000000213228         db  0x00 ; '.'
0000000000213229         db  0x00 ; '.'
000000000021322a         db  0x00 ; '.'
000000000021322b         db  0x00 ; '.'
000000000021322c         db  0x00 ; '.'
000000000021322d         db  0x00 ; '.'
000000000021322e         db  0x00 ; '.'
000000000021322f         db  0x00 ; '.'
0000000000213230         db  0x00 ; '.'
0000000000213231         db  0x00 ; '.'
0000000000213232         db  0x00 ; '.'
0000000000213233         db  0x00 ; '.'
0000000000213234         db  0x00 ; '.'
0000000000213235         db  0x00 ; '.'
0000000000213236         db  0x00 ; '.'
0000000000213237         db  0x00 ; '.'
0000000000213238         db  0x00 ; '.'
0000000000213239         db  0x00 ; '.'
000000000021323a         db  0x00 ; '.'
000000000021323b         db  0x00 ; '.'
000000000021323c         db  0x00 ; '.'
000000000021323d         db  0x00 ; '.'
000000000021323e         db  0x00 ; '.'
000000000021323f         db  0x00 ; '.'
0000000000213240         db  0x00 ; '.'
0000000000213241         db  0x00 ; '.'
0000000000213242         db  0x00 ; '.'
0000000000213243         db  0x00 ; '.'
0000000000213244         db  0x00 ; '.'
0000000000213245         db  0x00 ; '.'
0000000000213246         db  0x00 ; '.'
0000000000213247         db  0x00 ; '.'
0000000000213248         db  0x00 ; '.'
0000000000213249         db  0x00 ; '.'
000000000021324a         db  0x00 ; '.'
000000000021324b         db  0x00 ; '.'
000000000021324c         db  0x00 ; '.'
000000000021324d         db  0x00 ; '.'
000000000021324e         db  0x00 ; '.'
000000000021324f         db  0x00 ; '.'
0000000000213250         db  0x00 ; '.'
0000000000213251         db  0x00 ; '.'
0000000000213252         db  0x00 ; '.'
0000000000213253         db  0x00 ; '.'
0000000000213254         db  0x00 ; '.'
0000000000213255         db  0x00 ; '.'
0000000000213256         db  0x00 ; '.'
0000000000213257         db  0x00 ; '.'
0000000000213258         db  0x00 ; '.'
0000000000213259         db  0x00 ; '.'
000000000021325a         db  0x00 ; '.'
000000000021325b         db  0x00 ; '.'
000000000021325c         db  0x00 ; '.'
000000000021325d         db  0x00 ; '.'
000000000021325e         db  0x00 ; '.'
000000000021325f         db  0x00 ; '.'
0000000000213260         db  0x00 ; '.'
0000000000213261         db  0x00 ; '.'
0000000000213262         db  0x00 ; '.'
0000000000213263         db  0x00 ; '.'
0000000000213264         db  0x00 ; '.'
0000000000213265         db  0x00 ; '.'
0000000000213266         db  0x00 ; '.'
0000000000213267         db  0x00 ; '.'
0000000000213268         db  0x00 ; '.'
0000000000213269         db  0x00 ; '.'
000000000021326a         db  0x00 ; '.'
000000000021326b         db  0x00 ; '.'
000000000021326c         db  0x00 ; '.'
000000000021326d         db  0x00 ; '.'
000000000021326e         db  0x00 ; '.'
000000000021326f         db  0x00 ; '.'
0000000000213270         db  0x00 ; '.'
0000000000213271         db  0x00 ; '.'
0000000000213272         db  0x00 ; '.'
0000000000213273         db  0x00 ; '.'
0000000000213274         db  0x00 ; '.'
0000000000213275         db  0x00 ; '.'
0000000000213276         db  0x00 ; '.'
0000000000213277         db  0x00 ; '.'
0000000000213278         db  0x00 ; '.'
0000000000213279         db  0x00 ; '.'
000000000021327a         db  0x00 ; '.'
000000000021327b         db  0x00 ; '.'
000000000021327c         db  0x00 ; '.'
000000000021327d         db  0x00 ; '.'
000000000021327e         db  0x00 ; '.'
000000000021327f         db  0x00 ; '.'
0000000000213280         db  0x00 ; '.'
0000000000213281         db  0x00 ; '.'
0000000000213282         db  0x00 ; '.'
0000000000213283         db  0x00 ; '.'
0000000000213284         db  0x00 ; '.'
0000000000213285         db  0x00 ; '.'
0000000000213286         db  0x00 ; '.'
0000000000213287         db  0x00 ; '.'
0000000000213288         db  0x00 ; '.'
0000000000213289         db  0x00 ; '.'
000000000021328a         db  0x00 ; '.'
000000000021328b         db  0x00 ; '.'
000000000021328c         db  0x00 ; '.'
000000000021328d         db  0x00 ; '.'
000000000021328e         db  0x00 ; '.'
000000000021328f         db  0x00 ; '.'
0000000000213290         db  0x00 ; '.'
0000000000213291         db  0x00 ; '.'
0000000000213292         db  0x00 ; '.'
0000000000213293         db  0x00 ; '.'
0000000000213294         db  0x00 ; '.'
0000000000213295         db  0x00 ; '.'
0000000000213296         db  0x00 ; '.'
0000000000213297         db  0x00 ; '.'
0000000000213298         db  0x00 ; '.'
0000000000213299         db  0x00 ; '.'
000000000021329a         db  0x00 ; '.'
000000000021329b         db  0x00 ; '.'
000000000021329c         db  0x00 ; '.'
000000000021329d         db  0x00 ; '.'
000000000021329e         db  0x00 ; '.'
000000000021329f         db  0x00 ; '.'
00000000002132a0         db  0x00 ; '.'
00000000002132a1         db  0x00 ; '.'
00000000002132a2         db  0x00 ; '.'
00000000002132a3         db  0x00 ; '.'
00000000002132a4         db  0x00 ; '.'
00000000002132a5         db  0x00 ; '.'
00000000002132a6         db  0x00 ; '.'
00000000002132a7         db  0x00 ; '.'
00000000002132a8         db  0x00 ; '.'
00000000002132a9         db  0x00 ; '.'
00000000002132aa         db  0x00 ; '.'
00000000002132ab         db  0x00 ; '.'
00000000002132ac         db  0x00 ; '.'
00000000002132ad         db  0x00 ; '.'
00000000002132ae         db  0x00 ; '.'
00000000002132af         db  0x00 ; '.'
00000000002132b0         db  0x00 ; '.'
00000000002132b1         db  0x00 ; '.'
00000000002132b2         db  0x00 ; '.'
00000000002132b3         db  0x00 ; '.'
00000000002132b4         db  0x00 ; '.'
00000000002132b5         db  0x00 ; '.'
00000000002132b6         db  0x00 ; '.'
00000000002132b7         db  0x00 ; '.'
00000000002132b8         db  0x00 ; '.'
00000000002132b9         db  0x00 ; '.'
00000000002132ba         db  0x00 ; '.'
00000000002132bb         db  0x00 ; '.'
00000000002132bc         db  0x00 ; '.'
00000000002132bd         db  0x00 ; '.'
00000000002132be         db  0x00 ; '.'
00000000002132bf         db  0x00 ; '.'
                     default_quoting_options:
00000000002132c0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
00000000002132c1         db  0x00 ; '.'
00000000002132c2         db  0x00 ; '.'
00000000002132c3         db  0x00 ; '.'
00000000002132c4         db  0x00 ; '.'
00000000002132c5         db  0x00 ; '.'
00000000002132c6         db  0x00 ; '.'
00000000002132c7         db  0x00 ; '.'
00000000002132c8         db  0x00 ; '.'
00000000002132c9         db  0x00 ; '.'
00000000002132ca         db  0x00 ; '.'
00000000002132cb         db  0x00 ; '.'
00000000002132cc         db  0x00 ; '.'
00000000002132cd         db  0x00 ; '.'
00000000002132ce         db  0x00 ; '.'
00000000002132cf         db  0x00 ; '.'
00000000002132d0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
00000000002132d1         db  0x00 ; '.'
00000000002132d2         db  0x00 ; '.'
00000000002132d3         db  0x00 ; '.'
00000000002132d4         db  0x00 ; '.'
00000000002132d5         db  0x00 ; '.'
00000000002132d6         db  0x00 ; '.'
00000000002132d7         db  0x00 ; '.'
00000000002132d8         db  0x00 ; '.'
00000000002132d9         db  0x00 ; '.'
00000000002132da         db  0x00 ; '.'
00000000002132db         db  0x00 ; '.'
00000000002132dc         db  0x00 ; '.'
00000000002132dd         db  0x00 ; '.'
00000000002132de         db  0x00 ; '.'
00000000002132df         db  0x00 ; '.'
00000000002132e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
00000000002132e1         db  0x00 ; '.'
00000000002132e2         db  0x00 ; '.'
00000000002132e3         db  0x00 ; '.'
00000000002132e4         db  0x00 ; '.'
00000000002132e5         db  0x00 ; '.'
00000000002132e6         db  0x00 ; '.'
00000000002132e7         db  0x00 ; '.'
00000000002132e8         db  0x00 ; '.'
00000000002132e9         db  0x00 ; '.'
00000000002132ea         db  0x00 ; '.'
00000000002132eb         db  0x00 ; '.'
00000000002132ec         db  0x00 ; '.'
00000000002132ed         db  0x00 ; '.'
00000000002132ee         db  0x00 ; '.'
00000000002132ef         db  0x00 ; '.'
                     qword_2132f0:
00000000002132f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
00000000002132f1         db  0x00 ; '.'
00000000002132f2         db  0x00 ; '.'
00000000002132f3         db  0x00 ; '.'
00000000002132f4         db  0x00 ; '.'
00000000002132f5         db  0x00 ; '.'
00000000002132f6         db  0x00 ; '.'
00000000002132f7         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
00000000002132f8         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
00000000002132f9         db  0x00 ; '.'
00000000002132fa         db  0x00 ; '.'
00000000002132fb         db  0x00 ; '.'
00000000002132fc         db  0x00 ; '.'
00000000002132fd         db  0x00 ; '.'
00000000002132fe         db  0x00 ; '.'
00000000002132ff         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x213310; 0x2138b0[ (1440 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x213310; 0x426bc0[ (2177200 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
0000000000213310         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     getenv:
0000000000213318         extern function code                                   ; DATA XREF=getenv@GOT
                     __snprintf_chk:
0000000000213320         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
0000000000213328         extern function code                                   ; DATA XREF=free@GOT
                     endmntent:
0000000000213330         extern function code                                   ; DATA XREF=endmntent@GOT
                     abort:
0000000000213338         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
0000000000213340         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
0000000000213348         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
0000000000213350         extern function code
                     localtime_r:
0000000000213358         extern function code                                   ; DATA XREF=localtime_r@GOT
                     _exit:
0000000000213360         extern function code                                   ; DATA XREF=_exit@GOT
                     strcpy:
0000000000213368         extern function code                                   ; DATA XREF=strcpy@GOT
                     __fpending:
0000000000213370         extern function code                                   ; DATA XREF=__fpending@GOT
                     localeconv:
0000000000213378         extern function code                                   ; DATA XREF=localeconv@GOT
                     readlink:
0000000000213380         extern function code                                   ; DATA XREF=readlink@GOT
                     fcntl:
0000000000213388         extern function code                                   ; DATA XREF=fcntl@GOT
                     setenv:
0000000000213390         extern function code                                   ; DATA XREF=setenv@GOT
                     textdomain:
0000000000213398         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
00000000002133a0         extern function code                                   ; DATA XREF=fclose@GOT
                     getpwuid:
00000000002133a8         extern function code                                   ; DATA XREF=getpwuid@GOT
                     bindtextdomain:
00000000002133b0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
00000000002133b8         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
00000000002133c0         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
00000000002133c8         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
00000000002133d0         extern function code                                   ; DATA XREF=__lxstat@GOT
                     openat:
00000000002133d8         extern function code                                   ; DATA XREF=openat@GOT
                     chdir:
00000000002133e0         extern function code                                   ; DATA XREF=chdir@GOT
                     __stack_chk_fail:
00000000002133e8         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
00000000002133f0         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
00000000002133f8         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
0000000000213400         extern function code                                   ; DATA XREF=strchr@GOT
                     getgrgid:
0000000000213408         extern function code                                   ; DATA XREF=getgrgid@GOT
                     __overflow:
0000000000213410         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000213418         extern function code                                   ; DATA XREF=strrchr@GOT
                     gmtime_r:
0000000000213420         extern function code                                   ; DATA XREF=gmtime_r@GOT
                     lseek:
0000000000213428         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
0000000000213430         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
0000000000213438         extern function code                                   ; DATA XREF=memset@GOT
                     getcwd:
0000000000213440         extern function code                                   ; DATA XREF=getcwd@GOT
                     canonicalize_file_name:
0000000000213448         extern function code                                   ; DATA XREF=canonicalize_file_name@GOT
                     close:
0000000000213450         extern function code                                   ; DATA XREF=close@GOT
                     strspn:
0000000000213458         extern function code                                   ; DATA XREF=strspn@GOT
                     memchr:
0000000000213460         extern function code                                   ; DATA XREF=memchr@GOT
                     __libc_start_main:
0000000000213468         extern function code
                     memcmp:
0000000000213470         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
0000000000213478         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
0000000000213480         extern function code                                   ; DATA XREF=calloc@GOT
                     __getdelim:
0000000000213488         extern function code                                   ; DATA XREF=__getdelim@GOT
                     strcmp:
0000000000213490         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
0000000000213498         extern function code
                     strtol:
00000000002134a0         extern function code                                   ; DATA XREF=strtol@GOT
                     memcpy:
00000000002134a8         extern function code                                   ; DATA XREF=memcpy@GOT
                     tzset:
00000000002134b0         extern function code                                   ; DATA XREF=tzset@GOT
                     fileno:
00000000002134b8         extern function code                                   ; DATA XREF=fileno@GOT
                     statfs:
00000000002134c0         extern function code                                   ; DATA XREF=statfs@GOT
                     __xstat:
00000000002134c8         extern function code                                   ; DATA XREF=__xstat@GOT
                     malloc:
00000000002134d0         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
00000000002134d8         extern function code                                   ; DATA XREF=fflush@GOT
                     getmntent:
00000000002134e0         extern function code                                   ; DATA XREF=getmntent@GOT
                     setmntent:
00000000002134e8         extern function code                                   ; DATA XREF=setmntent@GOT
                     nl_langinfo:
00000000002134f0         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
00000000002134f8         extern function code                                   ; DATA XREF=__fxstat@GOT
                     sscanf:
0000000000213500         extern function code                                   ; DATA XREF=sscanf@GOT
                     mktime:
0000000000213508         extern function code                                   ; DATA XREF=mktime@GOT
                     __freading:
0000000000213510         extern function code                                   ; DATA XREF=__freading@GOT
                     fchdir:
0000000000213518         extern function code                                   ; DATA XREF=fchdir@GOT
                     realloc:
0000000000213520         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
0000000000213528         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
0000000000213530         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     timegm:
0000000000213538         extern function code                                   ; DATA XREF=timegm@GOT
                     strftime:
0000000000213540         extern function code                                   ; DATA XREF=strftime@GOT
                     error:
0000000000213548         extern function code                                   ; DATA XREF=error@GOT
                     memrchr:
0000000000213550         extern function code                                   ; DATA XREF=memrchr@GOT
                     open:
0000000000213558         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
0000000000213560         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
0000000000213568         extern function code                                   ; DATA XREF=fopen@GOT
                     unsetenv:
0000000000213570         extern function code                                   ; DATA XREF=unsetenv@GOT
                     __cxa_atexit:
0000000000213578         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
0000000000213580         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
0000000000213588         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
0000000000213590         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
0000000000213598         extern function code
                     mbsinit:
00000000002135a0         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
00000000002135a8         extern function code                                   ; DATA XREF=iswprint@GOT
                     hasmntopt:
00000000002135b0         extern function code                                   ; DATA XREF=hasmntopt@GOT
                     __cxa_finalize:
00000000002135b8         extern function code
                     strstr:
00000000002135c0         extern function code                                   ; DATA XREF=strstr@GOT
                     __ctype_tolower_loc:
00000000002135c8         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
00000000002135d0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
00000000002135d8         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
00000000002135e0         extern function code
                     getenv@@GLIBC_2.2.5:
00000000002135e8         extern function code
                     __snprintf_chk@@GLIBC_2.3.4:
00000000002135f0         extern function code
                     free@@GLIBC_2.2.5:
00000000002135f8         extern function code
                     endmntent@@GLIBC_2.2.5:
0000000000213600         extern function code
                     abort@@GLIBC_2.2.5:
0000000000213608         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000213610         extern function code
                     strncmp@@GLIBC_2.2.5:
0000000000213618         extern function code
                     _ITM_deregisterTMCloneTable_213620:        // _ITM_deregisterTMCloneTable
0000000000213620         extern function code
                     localtime_r@@GLIBC_2.2.5:
0000000000213628         extern function code
                     _exit@@GLIBC_2.2.5:
0000000000213630         extern function code
                     strcpy@@GLIBC_2.2.5:
0000000000213638         extern function code
                     __fpending@@GLIBC_2.2.5:
0000000000213640         extern function code
                     localeconv@@GLIBC_2.2.5:
0000000000213648         extern function code
                     readlink@@GLIBC_2.2.5:
0000000000213650         extern function code
                     fcntl@@GLIBC_2.2.5:
0000000000213658         extern function code
                     setenv@@GLIBC_2.2.5:
0000000000213660         extern function code
                     textdomain@@GLIBC_2.2.5:
0000000000213668         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000213670         extern function code
                     getpwuid@@GLIBC_2.2.5:
0000000000213678         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000213680         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000213688         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000213690         extern function code
                     strlen@@GLIBC_2.2.5:
0000000000213698         extern function code
                     __lxstat@@GLIBC_2.2.5:
00000000002136a0         extern function code
                     openat@@GLIBC_2.4:
00000000002136a8         extern function code
                     chdir@@GLIBC_2.2.5:
00000000002136b0         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
00000000002136b8         extern function code
                     getopt_long@@GLIBC_2.2.5:
00000000002136c0         extern function code
                     mbrtowc@@GLIBC_2.2.5:
00000000002136c8         extern function code
                     strchr@@GLIBC_2.2.5:
00000000002136d0         extern function code
                     getgrgid@@GLIBC_2.2.5:
00000000002136d8         extern function code
                     __overflow@@GLIBC_2.2.5:
00000000002136e0         extern function code
                     strrchr@@GLIBC_2.2.5:
00000000002136e8         extern function code
                     gmtime_r@@GLIBC_2.2.5:
00000000002136f0         extern function code
                     lseek@@GLIBC_2.2.5:
00000000002136f8         extern function code
                     __assert_fail@@GLIBC_2.2.5:
0000000000213700         extern function code
                     memset@@GLIBC_2.2.5:
0000000000213708         extern function code
                     getcwd@@GLIBC_2.2.5:
0000000000213710         extern function code
                     canonicalize_file_name@@GLIBC_2.2.5:
0000000000213718         extern function code
                     close@@GLIBC_2.2.5:
0000000000213720         extern function code
                     strspn@@GLIBC_2.2.5:
0000000000213728         extern function code
                     memchr@@GLIBC_2.2.5:
0000000000213730         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
0000000000213738         extern function code
                     memcmp@@GLIBC_2.2.5:
0000000000213740         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000213748         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000213750         extern function code
                     __getdelim@@GLIBC_2.2.5:
0000000000213758         extern function code
                     strcmp@@GLIBC_2.2.5:
0000000000213760         extern function code
                     __gmon_start___213768:        // __gmon_start__
0000000000213768         extern function code
                     strtol@@GLIBC_2.2.5:
0000000000213770         extern function code
                     memcpy@@GLIBC_2.14:
0000000000213778         extern function code
                     tzset@@GLIBC_2.2.5:
0000000000213780         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000213788         extern function code
                     statfs@@GLIBC_2.2.5:
0000000000213790         extern function code
                     __xstat@@GLIBC_2.2.5:
0000000000213798         extern function code
                     malloc@@GLIBC_2.2.5:
00000000002137a0         extern function code
                     fflush@@GLIBC_2.2.5:
00000000002137a8         extern function code
                     getmntent@@GLIBC_2.2.5:
00000000002137b0         extern function code
                     setmntent@@GLIBC_2.2.5:
00000000002137b8         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
00000000002137c0         extern function code
                     __fxstat@@GLIBC_2.2.5:
00000000002137c8         extern function code
                     sscanf@@GLIBC_2.2.5:
00000000002137d0         extern function code
                     mktime@@GLIBC_2.2.5:
00000000002137d8         extern function code
                     __freading@@GLIBC_2.2.5:
00000000002137e0         extern function code
                     fchdir@@GLIBC_2.2.5:
00000000002137e8         extern function code
                     realloc@@GLIBC_2.2.5:
00000000002137f0         extern function code
                     setlocale@@GLIBC_2.2.5:
00000000002137f8         extern function code
                     __printf_chk@@GLIBC_2.3.4:
0000000000213800         extern function code
                     timegm@@GLIBC_2.2.5:
0000000000213808         extern function code
                     strftime@@GLIBC_2.2.5:
0000000000213810         extern function code
                     error@@GLIBC_2.2.5:
0000000000213818         extern function code
                     memrchr@@GLIBC_2.2.5:
0000000000213820         extern function code
                     open@@GLIBC_2.2.5:
0000000000213828         extern function code
                     fseeko@@GLIBC_2.2.5:
0000000000213830         extern function code
                     fopen@@GLIBC_2.2.5:
0000000000213838         extern function code
                     unsetenv@@GLIBC_2.2.5:
0000000000213840         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
0000000000213848         extern function code
                     exit@@GLIBC_2.2.5:
0000000000213850         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000213858         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000213860         extern function code
                     _ITM_registerTMCloneTable_213868:        // _ITM_registerTMCloneTable
0000000000213868         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000213870         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000213878         extern function code
                     hasmntopt@@GLIBC_2.2.5:
0000000000213880         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000213888         extern function code
                     strstr@@GLIBC_2.2.5:
0000000000213890         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
0000000000213898         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
00000000002138a0         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
00000000002138a8         extern function code
