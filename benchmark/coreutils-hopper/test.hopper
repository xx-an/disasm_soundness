
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/test
        UUID: 6699CA53-FBC0-52B1-7281-EF6605856EED
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xa440[ (42048 bytes)
        ; File offset : [0; 42048[ (42048 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0xf0 ; '.'
0000000000000019         db  0x16 ; '.'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x88 ; '.'
0000000000000029         db  0x31 ; '1'
000000000000002a         db  0x03 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x40 ; '@'
00000000000000d1         db  0xa4 ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x40 ; '@'
00000000000000d9         db  0xa4 ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xd0 ; '.'
00000000000000f1         db  0xab ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xd0 ; '.'
00000000000000f9         db  0xab ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xd0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xab ; '.'
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xb0 ; '.'
0000000000000109         db  0x04 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x48 ; 'H'
0000000000000111         db  0x06 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x38 ; '8'
0000000000000129         db  0xac ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x38 ; '8'
0000000000000131         db  0xac ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x38 ; '8'
0000000000000139         db  0xac ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=binary_operator+12, binary_operator+249
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x1c ; '.'
0000000000000199         db  0x95 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x1c ; '.'
00000000000001a1         db  0x95 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x1c ; '.'
00000000000001a9         db  0x95 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xbc ; '.'
00000000000001b1         db  0x02 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xbc ; '.'
00000000000001b9         db  0x02 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xd0 ; '.'
0000000000000209         db  0xab ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xd0 ; '.'
0000000000000211         db  0xab ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xd0 ; '.'
0000000000000219         db  0xab ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x30 ; '0'
0000000000000221         db  0x04 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x30 ; '0'
0000000000000229         db  0x04 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000000238         db  0x2f ; '/'
0000000000000239         db  0x6c ; 'l'
000000000000023a         db  0x69 ; 'i'
000000000000023b         db  0x62 ; 'b'
000000000000023c         db  0x36 ; '6'
000000000000023d         db  0x34 ; '4'
000000000000023e         db  0x2f ; '/'
000000000000023f         db  0x6c ; 'l'
                     aDlinuxx8664so2:
0000000000000240         db         "d-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x66 ; 'f'
0000000000000285         db  0x99 ; '.'
0000000000000286         db  0xca ; '.'
0000000000000287         db  0x53 ; 'S'
0000000000000288         db  0xfb ; '.'
0000000000000289         db  0xc0 ; '.'
000000000000028a         db  0x52 ; 'R'
000000000000028b         db  0xb1 ; '.'
000000000000028c         db  0x72 ; 'r'
000000000000028d         db  0x81 ; '.'
000000000000028e         db  0xef ; '.'
000000000000028f         db  0x66 ; 'f'
0000000000000290         db  0x05 ; '.'
0000000000000291         db  0x85 ; '.'
0000000000000292         db  0x6e ; 'n'
0000000000000293         db  0xed ; '.'
0000000000000294         db  0xbf ; '.'
0000000000000295         db  0x28 ; '('
0000000000000296         db  0x19 ; '.'
0000000000000297         db  0x83 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2d4[ (60 bytes)
        ; File offset : [664; 724[ (60 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x36 ; '6'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x49 ; 'I'
00000000000002aa         db  0x40 ; '@'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x18 ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x36 ; '6'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x37 ; '7'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x00 ; '.'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x00 ; '.'
00000000000002d5         db  0x00 ; '.'
00000000000002d6         db  0x00 ; '.'
00000000000002d7         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2d8; 0x878[ (1440 bytes)
        ; File offset : [728; 2168[ (1440 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002d8         db  0x00 ; '.'
00000000000002d9         db  0x00 ; '.'
00000000000002da         db  0x00 ; '.'
00000000000002db         db  0x00 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'
00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x6f ; 'o'
00000000000002f1         db  0x01 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x12 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x00 ; '.'
00000000000002f9         db  0x00 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x00 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x1a ; '.'
0000000000000309         db  0x02 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x12 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x00 ; '.'
0000000000000311         db  0x00 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x00 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x7c ; '|'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x12 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x00 ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x00 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0xe8 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x12 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x00 ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x00 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0xa0 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x12 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x00 ; '.'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x00 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x31 ; '1'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x12 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x00 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x00 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x7e ; '~'
0000000000000381         db  0x02 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x20 ; ' '
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x00 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x00 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x82 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x12 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x00 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x00 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x9c ; '.'
00000000000003b1         db  0x01 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x12 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x00 ; '.'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x00 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0xcc ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x12 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x00 ; '.'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x00 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0xe0 ; '.'
00000000000003e1         db  0x01 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x12 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x00 ; '.'
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x00 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x22 ; '"'
00000000000003f9         db  0x01 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x12 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x00 ; '.'
0000000000000401         db  0x00 ; '.'
0000000000000402         db  0x00 ; '.'
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x00 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0xdc ; '.'
0000000000000411         db  0x01 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x12 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x00 ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x00 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x41 ; 'A'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x12 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x00 ; '.'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x00 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0xae ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x12 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x00 ; '.'
0000000000000449         db  0x00 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x00 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0xda ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x12 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x00 ; '.'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x00 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x62 ; 'b'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x12 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x00 ; '.'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x00 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x51 ; 'Q'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x12 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x00 ; '.'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x00 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x29 ; ')'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x12 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x00 ; '.'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x00 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x39 ; '9'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x12 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x00 ; '.'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x00 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x15 ; '.'
00000000000004d1         db  0x01 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x12 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x00 ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x00 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0xe1 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x12 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x00 ; '.'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x00 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x94 ; '.'
0000000000000501         db  0x01 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x12 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x00 ; '.'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x00 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0xf2 ; '.'
0000000000000519         db  0x01 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x12 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x00 ; '.'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x00 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0xf9 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x12 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x00 ; '.'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x00 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x0b ; '.'
0000000000000549         db  0x02 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x12 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x00 ; '.'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x00 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0xd3 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x12 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x00 ; '.'
0000000000000569         db  0x00 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x00 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0xeb ; '.'
0000000000000579         db  0x01 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x12 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x00 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x00 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x9a ; '.'
0000000000000591         db  0x02 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x20 ; ' '
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x00 ; '.'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x00 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0xc5 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x12 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x00 ; '.'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x00 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x1b ; '.'
00000000000005c1         db  0x01 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x12 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x00 ; '.'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x00 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x86 ; '.'
00000000000005d9         db  0x01 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x12 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x00 ; '.'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x00 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0xd4 ; '.'
00000000000005f1         db  0x01 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x12 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x00 ; '.'
00000000000005f9         db  0x00 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x00 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x34 ; '4'
0000000000000609         db  0x01 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x12 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x00 ; '.'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x00 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x0b ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x12 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x00 ; '.'
0000000000000629         db  0x00 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x00 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x43 ; 'C'
0000000000000639         db  0x01 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x12 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x00 ; '.'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x00 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x7e ; '~'
0000000000000651         db  0x01 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x12 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x00 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x00 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x5d ; ']'
0000000000000669         db  0x01 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x12 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x00 ; '.'
0000000000000671         db  0x00 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x00 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x74 ; 't'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x12 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x00 ; '.'
0000000000000689         db  0x00 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x00 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x1f ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x12 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x00 ; '.'
00000000000006a1         db  0x00 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x00 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x12 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x12 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x00 ; '.'
00000000000006b9         db  0x00 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x00 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x4b ; 'K'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x12 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x00 ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x00 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x04 ; '.'
00000000000006e1         db  0x02 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x12 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x00 ; '.'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x00 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x29 ; ')'
00000000000006f9         db  0x01 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x12 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x00 ; '.'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x00 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x3a ; ':'
0000000000000711         db  0x02 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x12 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x00 ; '.'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x00 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x83 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x12 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x00 ; '.'
0000000000000731         db  0x00 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x00 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x8d ; '.'
0000000000000741         db  0x01 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x12 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x00 ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x00 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x01 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x12 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x00 ; '.'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x00 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0xa9 ; '.'
0000000000000771         db  0x02 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x20 ; ' '
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x00 ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x00 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x3b ; ';'
0000000000000789         db  0x01 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x12 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x00 ; '.'
0000000000000791         db  0x00 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x00 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x6b ; 'k'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x12 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x00 ; '.'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x00 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0xc5 ; '.'
00000000000007b9         db  0x01 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x22 ; '"'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x00 ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x00 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x4f ; 'O'
00000000000007d1         db  0x01 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x12 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x00 ; '.'
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x00 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x0e ; '.'
00000000000007e9         db  0x01 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x11 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x19 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x88 ; '.'
00000000000007f1         db  0xb0 ; '.'
00000000000007f2         db  0x20 ; ' '
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x00 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x08 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x1f ; '.'
0000000000000801         db  0x02 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x11 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x19 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x80 ; '.'
0000000000000809         db  0xb0 ; '.'
000000000000080a         db  0x20 ; ' '
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x00 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x08 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x88 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x21 ; '!'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x19 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x90 ; '.'
0000000000000821         db  0xb0 ; '.'
0000000000000822         db  0x20 ; ' '
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x00 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x08 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x2a ; '*'
0000000000000831         db  0x02 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x11 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x19 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x90 ; '.'
0000000000000839         db  0xb0 ; '.'
000000000000083a         db  0x20 ; ' '
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x00 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x08 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0xa7 ; '.'
0000000000000849         db  0x01 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x21 ; '!'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x19 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x80 ; '.'
0000000000000851         db  0xb0 ; '.'
0000000000000852         db  0x20 ; ' '
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x00 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x08 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x68 ; 'h'
0000000000000861         db  0x01 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x11 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x19 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xa0 ; '.'
0000000000000869         db  0xb0 ; '.'
000000000000086a         db  0x20 ; ' '
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x00 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x08 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0x878; 0xb3b[ (707 bytes)
        ; File offset : [2168; 2875[ (707 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x6c ; 'l'
000000000000087a         db  0x69 ; 'i'
000000000000087b         db  0x62 ; 'b'
000000000000087c         db  0x63 ; 'c'
000000000000087d         db  0x2e ; '.'
000000000000087e         db  0x73 ; 's'
000000000000087f         db  0x6f ; 'o'
0000000000000880         db  0x2e ; '.'
0000000000000881         db  0x36 ; '6'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x66 ; 'f'
0000000000000884         db  0x66 ; 'f'
0000000000000885         db  0x6c ; 'l'
0000000000000886         db  0x75 ; 'u'
0000000000000887         db  0x73 ; 's'
0000000000000888         db  0x68 ; 'h'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x5f ; '_'
000000000000088b         db  0x5f ; '_'
000000000000088c         db  0x70 ; 'p'
000000000000088d         db  0x72 ; 'r'
000000000000088e         db  0x69 ; 'i'
000000000000088f         db  0x6e ; 'n'
0000000000000890         db  0x74 ; 't'
0000000000000891         db  0x66 ; 'f'
0000000000000892         db  0x5f ; '_'
0000000000000893         db  0x63 ; 'c'
0000000000000894         db  0x68 ; 'h'
0000000000000895         db  0x6b ; 'k'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x73 ; 's'
0000000000000898         db  0x65 ; 'e'
0000000000000899         db  0x74 ; 't'
000000000000089a         db  0x6c ; 'l'
000000000000089b         db  0x6f ; 'o'
000000000000089c         db  0x63 ; 'c'
000000000000089d         db  0x61 ; 'a'
000000000000089e         db  0x6c ; 'l'
000000000000089f         db  0x65 ; 'e'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x6d ; 'm'
00000000000008a2         db  0x62 ; 'b'
00000000000008a3         db  0x72 ; 'r'
00000000000008a4         db  0x74 ; 't'
00000000000008a5         db  0x6f ; 'o'
00000000000008a6         db  0x77 ; 'w'
00000000000008a7         db  0x63 ; 'c'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x73 ; 's'
00000000000008aa         db  0x74 ; 't'
00000000000008ab         db  0x72 ; 'r'
00000000000008ac         db  0x6e ; 'n'
00000000000008ad         db  0x63 ; 'c'
00000000000008ae         db  0x6d ; 'm'
00000000000008af         db  0x70 ; 'p'
00000000000008b0         db  0x00 ; '.'
00000000000008b1         db  0x73 ; 's'
00000000000008b2         db  0x74 ; 't'
00000000000008b3         db  0x72 ; 'r'
00000000000008b4         db  0x72 ; 'r'
00000000000008b5         db  0x63 ; 'c'
00000000000008b6         db  0x68 ; 'h'
00000000000008b7         db  0x72 ; 'r'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x64 ; 'd'
00000000000008ba         db  0x63 ; 'c'
00000000000008bb         db  0x67 ; 'g'
00000000000008bc         db  0x65 ; 'e'
00000000000008bd         db  0x74 ; 't'
00000000000008be         db  0x74 ; 't'
00000000000008bf         db  0x65 ; 'e'
00000000000008c0         db  0x78 ; 'x'
00000000000008c1         db  0x74 ; 't'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x65 ; 'e'
00000000000008c4         db  0x72 ; 'r'
00000000000008c5         db  0x72 ; 'r'
00000000000008c6         db  0x6f ; 'o'
00000000000008c7         db  0x72 ; 'r'
00000000000008c8         db  0x00 ; '.'
00000000000008c9         db  0x5f ; '_'
00000000000008ca         db  0x5f ; '_'
00000000000008cb         db  0x73 ; 's'
00000000000008cc         db  0x74 ; 't'
00000000000008cd         db  0x61 ; 'a'
00000000000008ce         db  0x63 ; 'c'
00000000000008cf         db  0x6b ; 'k'
00000000000008d0         db  0x5f ; '_'
00000000000008d1         db  0x63 ; 'c'
00000000000008d2         db  0x68 ; 'h'
00000000000008d3         db  0x6b ; 'k'
00000000000008d4         db  0x5f ; '_'
00000000000008d5         db  0x66 ; 'f'
00000000000008d6         db  0x61 ; 'a'
00000000000008d7         db  0x69 ; 'i'
00000000000008d8         db  0x6c ; 'l'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x5f ; '_'
00000000000008db         db  0x5f ; '_'
00000000000008dc         db  0x6c ; 'l'
00000000000008dd         db  0x78 ; 'x'
00000000000008de         db  0x73 ; 's'
00000000000008df         db  0x74 ; 't'
00000000000008e0         db  0x61 ; 'a'
00000000000008e1         db  0x74 ; 't'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x69 ; 'i'
00000000000008e4         db  0x73 ; 's'
00000000000008e5         db  0x77 ; 'w'
00000000000008e6         db  0x70 ; 'p'
00000000000008e7         db  0x72 ; 'r'
00000000000008e8         db  0x69 ; 'i'
00000000000008e9         db  0x6e ; 'n'
00000000000008ea         db  0x74 ; 't'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x72 ; 'r'
00000000000008ed         db  0x65 ; 'e'
00000000000008ee         db  0x61 ; 'a'
00000000000008ef         db  0x6c ; 'l'
00000000000008f0         db  0x6c ; 'l'
00000000000008f1         db  0x6f ; 'o'
00000000000008f2         db  0x63 ; 'c'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x61 ; 'a'
00000000000008f5         db  0x62 ; 'b'
00000000000008f6         db  0x6f ; 'o'
00000000000008f7         db  0x72 ; 'r'
00000000000008f8         db  0x74 ; 't'
00000000000008f9         db  0x00 ; '.'
00000000000008fa         db  0x5f ; '_'
00000000000008fb         db  0x65 ; 'e'
00000000000008fc         db  0x78 ; 'x'
00000000000008fd         db  0x69 ; 'i'
00000000000008fe         db  0x74 ; 't'
00000000000008ff         db  0x00 ; '.'
                     aPrograminvocat:
0000000000000900         db         "program_invocation_name", 0
0000000000000918         db  0x65 ; 'e'
0000000000000919         db  0x72 ; 'r'
000000000000091a         db  0x72 ; 'r'
000000000000091b         db  0x6f ; 'o'
000000000000091c         db  0x72 ; 'r'
000000000000091d         db  0x5f ; '_'
000000000000091e         db  0x61 ; 'a'
000000000000091f         db  0x74 ; 't'
0000000000000920         db  0x5f ; '_'
0000000000000921         db  0x6c ; 'l'
0000000000000922         db  0x69 ; 'i'
0000000000000923         db  0x6e ; 'n'
0000000000000924         db  0x65 ; 'e'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x5f ; '_'
0000000000000927         db  0x5f ; '_'
0000000000000928         db  0x63 ; 'c'
0000000000000929         db  0x74 ; 't'
000000000000092a         db  0x79 ; 'y'
000000000000092b         db  0x70 ; 'p'
000000000000092c         db  0x65 ; 'e'
000000000000092d         db  0x5f ; '_'
000000000000092e         db  0x67 ; 'g'
000000000000092f         db  0x65 ; 'e'
0000000000000930         db  0x74 ; 't'
0000000000000931         db  0x5f ; '_'
0000000000000932         db  0x6d ; 'm'
0000000000000933         db  0x62 ; 'b'
0000000000000934         db  0x5f ; '_'
0000000000000935         db  0x63 ; 'c'
0000000000000936         db  0x75 ; 'u'
0000000000000937         db  0x72 ; 'r'
0000000000000938         db  0x5f ; '_'
0000000000000939         db  0x6d ; 'm'
000000000000093a         db  0x61 ; 'a'
000000000000093b         db  0x78 ; 'x'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x73 ; 's'
000000000000093e         db  0x74 ; 't'
000000000000093f         db  0x72 ; 'r'
0000000000000940         db  0x74 ; 't'
0000000000000941         db  0x6f ; 'o'
0000000000000942         db  0x6c ; 'l'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x69 ; 'i'
0000000000000945         db  0x73 ; 's'
0000000000000946         db  0x61 ; 'a'
0000000000000947         db  0x74 ; 't'
0000000000000948         db  0x74 ; 't'
0000000000000949         db  0x79 ; 'y'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x63 ; 'c'
000000000000094c         db  0x61 ; 'a'
000000000000094d         db  0x6c ; 'l'
000000000000094e         db  0x6c ; 'l'
000000000000094f         db  0x6f ; 'o'
0000000000000950         db  0x63 ; 'c'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x73 ; 's'
0000000000000953         db  0x74 ; 't'
0000000000000954         db  0x72 ; 'r'
0000000000000955         db  0x6c ; 'l'
0000000000000956         db  0x65 ; 'e'
0000000000000957         db  0x6e ; 'n'
0000000000000958         db  0x00 ; '.'
0000000000000959         db  0x6d ; 'm'
000000000000095a         db  0x65 ; 'e'
000000000000095b         db  0x6d ; 'm'
000000000000095c         db  0x73 ; 's'
000000000000095d         db  0x65 ; 'e'
000000000000095e         db  0x74 ; 't'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x5f ; '_'
0000000000000961         db  0x5f ; '_'
0000000000000962         db  0x65 ; 'e'
0000000000000963         db  0x72 ; 'r'
0000000000000964         db  0x72 ; 'r'
0000000000000965         db  0x6e ; 'n'
0000000000000966         db  0x6f ; 'o'
0000000000000967         db  0x5f ; '_'
0000000000000968         db  0x6c ; 'l'
0000000000000969         db  0x6f ; 'o'
000000000000096a         db  0x63 ; 'c'
000000000000096b         db  0x61 ; 'a'
000000000000096c         db  0x74 ; 't'
000000000000096d         db  0x69 ; 'i'
000000000000096e         db  0x6f ; 'o'
000000000000096f         db  0x6e ; 'n'
0000000000000970         db  0x00 ; '.'
0000000000000971         db  0x6d ; 'm'
0000000000000972         db  0x65 ; 'e'
0000000000000973         db  0x6d ; 'm'
0000000000000974         db  0x63 ; 'c'
0000000000000975         db  0x6d ; 'm'
0000000000000976         db  0x70 ; 'p'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x5f ; '_'
0000000000000979         db  0x5f ; '_'
000000000000097a         db  0x66 ; 'f'
000000000000097b         db  0x70 ; 'p'
000000000000097c         db  0x72 ; 'r'
000000000000097d         db  0x69 ; 'i'
000000000000097e         db  0x6e ; 'n'
000000000000097f         db  0x74 ; 't'
0000000000000980         db  0x66 ; 'f'
0000000000000981         db  0x5f ; '_'
0000000000000982         db  0x63 ; 'c'
0000000000000983         db  0x68 ; 'h'
0000000000000984         db  0x6b ; 'k'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x73 ; 's'
0000000000000987         db  0x74 ; 't'
0000000000000988         db  0x64 ; 'd'
0000000000000989         db  0x6f ; 'o'
000000000000098a         db  0x75 ; 'u'
000000000000098b         db  0x74 ; 't'
000000000000098c         db  0x00 ; '.'
000000000000098d         db  0x6c ; 'l'
000000000000098e         db  0x73 ; 's'
000000000000098f         db  0x65 ; 'e'
0000000000000990         db  0x65 ; 'e'
0000000000000991         db  0x6b ; 'k'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x6d ; 'm'
0000000000000994         db  0x65 ; 'e'
0000000000000995         db  0x6d ; 'm'
0000000000000996         db  0x63 ; 'c'
0000000000000997         db  0x70 ; 'p'
0000000000000998         db  0x79 ; 'y'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x66 ; 'f'
000000000000099b         db  0x63 ; 'c'
000000000000099c         db  0x6c ; 'l'
000000000000099d         db  0x6f ; 'o'
000000000000099e         db  0x73 ; 's'
000000000000099f         db  0x65 ; 'e'
00000000000009a0         db  0x00 ; '.'
00000000000009a1         db  0x65 ; 'e'
00000000000009a2         db  0x75 ; 'u'
00000000000009a3         db  0x69 ; 'i'
00000000000009a4         db  0x64 ; 'd'
00000000000009a5         db  0x61 ; 'a'
00000000000009a6         db  0x63 ; 'c'
00000000000009a7         db  0x63 ; 'c'
00000000000009a8         db  0x65 ; 'e'
00000000000009a9         db  0x73 ; 's'
00000000000009aa         db  0x73 ; 's'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x6d ; 'm'
00000000000009ad         db  0x61 ; 'a'
00000000000009ae         db  0x6c ; 'l'
00000000000009af         db  0x6c ; 'l'
00000000000009b0         db  0x6f ; 'o'
00000000000009b1         db  0x63 ; 'c'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x6d ; 'm'
00000000000009b4         db  0x62 ; 'b'
00000000000009b5         db  0x73 ; 's'
00000000000009b6         db  0x69 ; 'i'
00000000000009b7         db  0x6e ; 'n'
00000000000009b8         db  0x69 ; 'i'
00000000000009b9         db  0x74 ; 't'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x6e ; 'n'
00000000000009bc         db  0x6c ; 'l'
00000000000009bd         db  0x5f ; '_'
00000000000009be         db  0x6c ; 'l'
00000000000009bf         db  0x61 ; 'a'
00000000000009c0         db  0x6e ; 'n'
00000000000009c1         db  0x67 ; 'g'
00000000000009c2         db  0x69 ; 'i'
00000000000009c3         db  0x6e ; 'n'
00000000000009c4         db  0x66 ; 'f'
00000000000009c5         db  0x6f ; 'o'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x5f ; '_'
00000000000009c8         db  0x5f ; '_'
00000000000009c9         db  0x63 ; 'c'
00000000000009ca         db  0x74 ; 't'
00000000000009cb         db  0x79 ; 'y'
00000000000009cc         db  0x70 ; 'p'
00000000000009cd         db  0x65 ; 'e'
00000000000009ce         db  0x5f ; '_'
00000000000009cf         db  0x62 ; 'b'
00000000000009d0         db  0x5f ; '_'
00000000000009d1         db  0x6c ; 'l'
00000000000009d2         db  0x6f ; 'o'
00000000000009d3         db  0x63 ; 'c'
00000000000009d4         db  0x00 ; '.'
00000000000009d5         db  0x5f ; '_'
00000000000009d6         db  0x5f ; '_'
00000000000009d7         db  0x66 ; 'f'
00000000000009d8         db  0x72 ; 'r'
00000000000009d9         db  0x65 ; 'e'
00000000000009da         db  0x61 ; 'a'
00000000000009db         db  0x64 ; 'd'
00000000000009dc         db  0x69 ; 'i'
00000000000009dd         db  0x6e ; 'n'
00000000000009de         db  0x67 ; 'g'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x73 ; 's'
00000000000009e1         db  0x74 ; 't'
00000000000009e2         db  0x64 ; 'd'
00000000000009e3         db  0x65 ; 'e'
00000000000009e4         db  0x72 ; 'r'
00000000000009e5         db  0x72 ; 'r'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x5f ; '_'
00000000000009e8         db  0x5f ; '_'
00000000000009e9         db  0x73 ; 's'
00000000000009ea         db  0x6e ; 'n'
00000000000009eb         db  0x70 ; 'p'
00000000000009ec         db  0x72 ; 'r'
00000000000009ed         db  0x69 ; 'i'
00000000000009ee         db  0x6e ; 'n'
00000000000009ef         db  0x74 ; 't'
00000000000009f0         db  0x66 ; 'f'
00000000000009f1         db  0x5f ; '_'
00000000000009f2         db  0x63 ; 'c'
00000000000009f3         db  0x68 ; 'h'
00000000000009f4         db  0x6b ; 'k'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x67 ; 'g'
00000000000009f7         db  0x65 ; 'e'
00000000000009f8         db  0x74 ; 't'
00000000000009f9         db  0x65 ; 'e'
00000000000009fa         db  0x67 ; 'g'
00000000000009fb         db  0x69 ; 'i'
00000000000009fc         db  0x64 ; 'd'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x66 ; 'f'
00000000000009ff         db  0x69 ; 'i'
                     aLeno:
0000000000000a00         db         "leno", 0
0000000000000a05         db  0x66 ; 'f'
0000000000000a06         db  0x77 ; 'w'
0000000000000a07         db  0x72 ; 'r'
0000000000000a08         db  0x69 ; 'i'
0000000000000a09         db  0x74 ; 't'
0000000000000a0a         db  0x65 ; 'e'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x67 ; 'g'
0000000000000a0d         db  0x65 ; 'e'
0000000000000a0e         db  0x74 ; 't'
0000000000000a0f         db  0x65 ; 'e'
0000000000000a10         db  0x75 ; 'u'
0000000000000a11         db  0x69 ; 'i'
0000000000000a12         db  0x64 ; 'd'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x5f ; '_'
0000000000000a15         db  0x5f ; '_'
0000000000000a16         db  0x66 ; 'f'
0000000000000a17         db  0x70 ; 'p'
0000000000000a18         db  0x65 ; 'e'
0000000000000a19         db  0x6e ; 'n'
0000000000000a1a         db  0x64 ; 'd'
0000000000000a1b         db  0x69 ; 'i'
0000000000000a1c         db  0x6e ; 'n'
0000000000000a1d         db  0x67 ; 'g'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x70 ; 'p'
0000000000000a20         db  0x72 ; 'r'
0000000000000a21         db  0x6f ; 'o'
0000000000000a22         db  0x67 ; 'g'
0000000000000a23         db  0x72 ; 'r'
0000000000000a24         db  0x61 ; 'a'
0000000000000a25         db  0x6d ; 'm'
0000000000000a26         db  0x5f ; '_'
0000000000000a27         db  0x69 ; 'i'
0000000000000a28         db  0x6e ; 'n'
0000000000000a29         db  0x76 ; 'v'
0000000000000a2a         db  0x6f ; 'o'
0000000000000a2b         db  0x63 ; 'c'
0000000000000a2c         db  0x61 ; 'a'
0000000000000a2d         db  0x74 ; 't'
0000000000000a2e         db  0x69 ; 'i'
0000000000000a2f         db  0x6f ; 'o'
0000000000000a30         db  0x6e ; 'n'
0000000000000a31         db  0x5f ; '_'
0000000000000a32         db  0x73 ; 's'
0000000000000a33         db  0x68 ; 'h'
0000000000000a34         db  0x6f ; 'o'
0000000000000a35         db  0x72 ; 'r'
0000000000000a36         db  0x74 ; 't'
0000000000000a37         db  0x5f ; '_'
0000000000000a38         db  0x6e ; 'n'
0000000000000a39         db  0x61 ; 'a'
0000000000000a3a         db  0x6d ; 'm'
0000000000000a3b         db  0x65 ; 'e'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x5f ; '_'
0000000000000a3e         db  0x5f ; '_'
0000000000000a3f         db  0x63 ; 'c'
0000000000000a40         db  0x78 ; 'x'
0000000000000a41         db  0x61 ; 'a'
0000000000000a42         db  0x5f ; '_'
0000000000000a43         db  0x66 ; 'f'
0000000000000a44         db  0x69 ; 'i'
0000000000000a45         db  0x6e ; 'n'
0000000000000a46         db  0x61 ; 'a'
0000000000000a47         db  0x6c ; 'l'
0000000000000a48         db  0x69 ; 'i'
0000000000000a49         db  0x7a ; 'z'
0000000000000a4a         db  0x65 ; 'e'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x5f ; '_'
0000000000000a4d         db  0x5f ; '_'
0000000000000a4e         db  0x78 ; 'x'
0000000000000a4f         db  0x73 ; 's'
0000000000000a50         db  0x74 ; 't'
0000000000000a51         db  0x61 ; 'a'
0000000000000a52         db  0x74 ; 't'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x62 ; 'b'
0000000000000a55         db  0x69 ; 'i'
0000000000000a56         db  0x6e ; 'n'
0000000000000a57         db  0x64 ; 'd'
0000000000000a58         db  0x74 ; 't'
0000000000000a59         db  0x65 ; 'e'
0000000000000a5a         db  0x78 ; 'x'
0000000000000a5b         db  0x74 ; 't'
0000000000000a5c         db  0x64 ; 'd'
0000000000000a5d         db  0x6f ; 'o'
0000000000000a5e         db  0x6d ; 'm'
0000000000000a5f         db  0x61 ; 'a'
0000000000000a60         db  0x69 ; 'i'
0000000000000a61         db  0x6e ; 'n'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x73 ; 's'
0000000000000a64         db  0x74 ; 't'
0000000000000a65         db  0x72 ; 'r'
0000000000000a66         db  0x63 ; 'c'
0000000000000a67         db  0x6d ; 'm'
0000000000000a68         db  0x70 ; 'p'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x5f ; '_'
0000000000000a6b         db  0x5f ; '_'
0000000000000a6c         db  0x6c ; 'l'
0000000000000a6d         db  0x69 ; 'i'
0000000000000a6e         db  0x62 ; 'b'
0000000000000a6f         db  0x63 ; 'c'
0000000000000a70         db  0x5f ; '_'
0000000000000a71         db  0x73 ; 's'
0000000000000a72         db  0x74 ; 't'
0000000000000a73         db  0x61 ; 'a'
0000000000000a74         db  0x72 ; 'r'
0000000000000a75         db  0x74 ; 't'
0000000000000a76         db  0x5f ; '_'
0000000000000a77         db  0x6d ; 'm'
0000000000000a78         db  0x61 ; 'a'
0000000000000a79         db  0x69 ; 'i'
0000000000000a7a         db  0x6e ; 'n'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x66 ; 'f'
0000000000000a7d         db  0x73 ; 's'
0000000000000a7e         db  0x65 ; 'e'
0000000000000a7f         db  0x65 ; 'e'
0000000000000a80         db  0x6b ; 'k'
0000000000000a81         db  0x6f ; 'o'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x66 ; 'f'
0000000000000a84         db  0x70 ; 'p'
0000000000000a85         db  0x75 ; 'u'
0000000000000a86         db  0x74 ; 't'
0000000000000a87         db  0x73 ; 's'
0000000000000a88         db  0x5f ; '_'
0000000000000a89         db  0x75 ; 'u'
0000000000000a8a         db  0x6e ; 'n'
0000000000000a8b         db  0x6c ; 'l'
0000000000000a8c         db  0x6f ; 'o'
0000000000000a8d         db  0x63 ; 'c'
0000000000000a8e         db  0x6b ; 'k'
0000000000000a8f         db  0x65 ; 'e'
0000000000000a90         db  0x64 ; 'd'
0000000000000a91         db  0x00 ; '.'
0000000000000a92         db  0x66 ; 'f'
0000000000000a93         db  0x72 ; 'r'
0000000000000a94         db  0x65 ; 'e'
0000000000000a95         db  0x65 ; 'e'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x5f ; '_'
0000000000000a98         db  0x5f ; '_'
0000000000000a99         db  0x70 ; 'p'
0000000000000a9a         db  0x72 ; 'r'
0000000000000a9b         db  0x6f ; 'o'
0000000000000a9c         db  0x67 ; 'g'
0000000000000a9d         db  0x6e ; 'n'
0000000000000a9e         db  0x61 ; 'a'
0000000000000a9f         db  0x6d ; 'm'
0000000000000aa0         db  0x65 ; 'e'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x5f ; '_'
0000000000000aa3         db  0x5f ; '_'
0000000000000aa4         db  0x70 ; 'p'
0000000000000aa5         db  0x72 ; 'r'
0000000000000aa6         db  0x6f ; 'o'
0000000000000aa7         db  0x67 ; 'g'
0000000000000aa8         db  0x6e ; 'n'
0000000000000aa9         db  0x61 ; 'a'
0000000000000aaa         db  0x6d ; 'm'
0000000000000aab         db  0x65 ; 'e'
0000000000000aac         db  0x5f ; '_'
0000000000000aad         db  0x66 ; 'f'
0000000000000aae         db  0x75 ; 'u'
0000000000000aaf         db  0x6c ; 'l'
0000000000000ab0         db  0x6c ; 'l'
0000000000000ab1         db  0x00 ; '.'
0000000000000ab2         db  0x5f ; '_'
0000000000000ab3         db  0x5f ; '_'
0000000000000ab4         db  0x63 ; 'c'
0000000000000ab5         db  0x78 ; 'x'
0000000000000ab6         db  0x61 ; 'a'
0000000000000ab7         db  0x5f ; '_'
0000000000000ab8         db  0x61 ; 'a'
0000000000000ab9         db  0x74 ; 't'
0000000000000aba         db  0x65 ; 'e'
0000000000000abb         db  0x78 ; 'x'
0000000000000abc         db  0x69 ; 'i'
0000000000000abd         db  0x74 ; 't'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x47 ; 'G'
0000000000000ac0         db  0x4c ; 'L'
0000000000000ac1         db  0x49 ; 'I'
0000000000000ac2         db  0x42 ; 'B'
0000000000000ac3         db  0x43 ; 'C'
0000000000000ac4         db  0x5f ; '_'
0000000000000ac5         db  0x32 ; '2'
0000000000000ac6         db  0x2e ; '.'
0000000000000ac7         db  0x33 ; '3'
0000000000000ac8         db  0x00 ; '.'
0000000000000ac9         db  0x47 ; 'G'
0000000000000aca         db  0x4c ; 'L'
0000000000000acb         db  0x49 ; 'I'
0000000000000acc         db  0x42 ; 'B'
0000000000000acd         db  0x43 ; 'C'
0000000000000ace         db  0x5f ; '_'
0000000000000acf         db  0x32 ; '2'
0000000000000ad0         db  0x2e ; '.'
0000000000000ad1         db  0x31 ; '1'
0000000000000ad2         db  0x34 ; '4'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x47 ; 'G'
0000000000000ad5         db  0x4c ; 'L'
0000000000000ad6         db  0x49 ; 'I'
0000000000000ad7         db  0x42 ; 'B'
0000000000000ad8         db  0x43 ; 'C'
0000000000000ad9         db  0x5f ; '_'
0000000000000ada         db  0x32 ; '2'
0000000000000adb         db  0x2e ; '.'
0000000000000adc         db  0x34 ; '4'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x47 ; 'G'
0000000000000adf         db  0x4c ; 'L'
0000000000000ae0         db  0x49 ; 'I'
0000000000000ae1         db  0x42 ; 'B'
0000000000000ae2         db  0x43 ; 'C'
0000000000000ae3         db  0x5f ; '_'
0000000000000ae4         db  0x32 ; '2'
0000000000000ae5         db  0x2e ; '.'
0000000000000ae6         db  0x33 ; '3'
0000000000000ae7         db  0x2e ; '.'
0000000000000ae8         db  0x34 ; '4'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x47 ; 'G'
0000000000000aeb         db  0x4c ; 'L'
0000000000000aec         db  0x49 ; 'I'
0000000000000aed         db  0x42 ; 'B'
0000000000000aee         db  0x43 ; 'C'
0000000000000aef         db  0x5f ; '_'
0000000000000af0         db  0x32 ; '2'
0000000000000af1         db  0x2e ; '.'
0000000000000af2         db  0x32 ; '2'
0000000000000af3         db  0x2e ; '.'
0000000000000af4         db  0x35 ; '5'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x5f ; '_'
0000000000000af7         db  0x49 ; 'I'
0000000000000af8         db  0x54 ; 'T'
0000000000000af9         db  0x4d ; 'M'
0000000000000afa         db  0x5f ; '_'
0000000000000afb         db  0x64 ; 'd'
0000000000000afc         db  0x65 ; 'e'
0000000000000afd         db  0x72 ; 'r'
0000000000000afe         db  0x65 ; 'e'
0000000000000aff         db  0x67 ; 'g'
                     aIstertmcloneta:
0000000000000b00         db         "isterTMCloneTable", 0
0000000000000b12         db  0x5f ; '_'
0000000000000b13         db  0x5f ; '_'
0000000000000b14         db  0x67 ; 'g'
0000000000000b15         db  0x6d ; 'm'
0000000000000b16         db  0x6f ; 'o'
0000000000000b17         db  0x6e ; 'n'
0000000000000b18         db  0x5f ; '_'
0000000000000b19         db  0x73 ; 's'
0000000000000b1a         db  0x74 ; 't'
0000000000000b1b         db  0x61 ; 'a'
0000000000000b1c         db  0x72 ; 'r'
0000000000000b1d         db  0x74 ; 't'
0000000000000b1e         db  0x5f ; '_'
0000000000000b1f         db  0x5f ; '_'
0000000000000b20         db  0x00 ; '.'
0000000000000b21         db  0x5f ; '_'
0000000000000b22         db  0x49 ; 'I'
0000000000000b23         db  0x54 ; 'T'
0000000000000b24         db  0x4d ; 'M'
0000000000000b25         db  0x5f ; '_'
0000000000000b26         db  0x72 ; 'r'
0000000000000b27         db  0x65 ; 'e'
0000000000000b28         db  0x67 ; 'g'
0000000000000b29         db  0x69 ; 'i'
0000000000000b2a         db  0x73 ; 's'
0000000000000b2b         db  0x74 ; 't'
0000000000000b2c         db  0x65 ; 'e'
0000000000000b2d         db  0x72 ; 'r'
0000000000000b2e         db  0x54 ; 'T'
0000000000000b2f         db  0x4d ; 'M'
0000000000000b30         db  0x43 ; 'C'
0000000000000b31         db  0x6c ; 'l'
0000000000000b32         db  0x6f ; 'o'
0000000000000b33         db  0x6e ; 'n'
0000000000000b34         db  0x65 ; 'e'
0000000000000b35         db  0x54 ; 'T'
0000000000000b36         db  0x61 ; 'a'
0000000000000b37         db  0x62 ; 'b'
0000000000000b38         db  0x6c ; 'l'
0000000000000b39         db  0x65 ; 'e'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xb3c; 0xbb4[ (120 bytes)
        ; File offset : [2876; 2996[ (120 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000b3c         db  0x00 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x03 ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0x02 ; '.'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x02 ; '.'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x02 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x02 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x02 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x02 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x02 ; '.'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0x02 ; '.'
0000000000000b51         db  0x00 ; '.'
0000000000000b52         db  0x02 ; '.'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x02 ; '.'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x02 ; '.'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0x02 ; '.'
0000000000000b59         db  0x00 ; '.'
0000000000000b5a         db  0x02 ; '.'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x02 ; '.'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x02 ; '.'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x04 ; '.'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x02 ; '.'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x02 ; '.'
0000000000000b65         db  0x00 ; '.'
0000000000000b66         db  0x02 ; '.'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0x02 ; '.'
0000000000000b69         db  0x00 ; '.'
0000000000000b6a         db  0x02 ; '.'
0000000000000b6b         db  0x00 ; '.'
0000000000000b6c         db  0x02 ; '.'
0000000000000b6d         db  0x00 ; '.'
0000000000000b6e         db  0x02 ; '.'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x02 ; '.'
0000000000000b71         db  0x00 ; '.'
0000000000000b72         db  0x02 ; '.'
0000000000000b73         db  0x00 ; '.'
0000000000000b74         db  0x02 ; '.'
0000000000000b75         db  0x00 ; '.'
0000000000000b76         db  0x00 ; '.'
0000000000000b77         db  0x00 ; '.'
0000000000000b78         db  0x02 ; '.'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x05 ; '.'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x02 ; '.'
0000000000000b7d         db  0x00 ; '.'
0000000000000b7e         db  0x02 ; '.'
0000000000000b7f         db  0x00 ; '.'
0000000000000b80         db  0x02 ; '.'
0000000000000b81         db  0x00 ; '.'
0000000000000b82         db  0x02 ; '.'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x02 ; '.'
0000000000000b85         db  0x00 ; '.'
0000000000000b86         db  0x02 ; '.'
0000000000000b87         db  0x00 ; '.'
0000000000000b88         db  0x02 ; '.'
0000000000000b89         db  0x00 ; '.'
0000000000000b8a         db  0x02 ; '.'
0000000000000b8b         db  0x00 ; '.'
0000000000000b8c         db  0x02 ; '.'
0000000000000b8d         db  0x00 ; '.'
0000000000000b8e         db  0x03 ; '.'
0000000000000b8f         db  0x00 ; '.'
0000000000000b90         db  0x02 ; '.'
0000000000000b91         db  0x00 ; '.'
0000000000000b92         db  0x02 ; '.'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x02 ; '.'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x02 ; '.'
0000000000000b97         db  0x00 ; '.'
0000000000000b98         db  0x02 ; '.'
0000000000000b99         db  0x00 ; '.'
0000000000000b9a         db  0x02 ; '.'
0000000000000b9b         db  0x00 ; '.'
0000000000000b9c         db  0x03 ; '.'
0000000000000b9d         db  0x00 ; '.'
0000000000000b9e         db  0x00 ; '.'
0000000000000b9f         db  0x00 ; '.'
0000000000000ba0         db  0x02 ; '.'
0000000000000ba1         db  0x00 ; '.'
0000000000000ba2         db  0x02 ; '.'
0000000000000ba3         db  0x00 ; '.'
0000000000000ba4         db  0x02 ; '.'
0000000000000ba5         db  0x00 ; '.'
0000000000000ba6         db  0x06 ; '.'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x02 ; '.'
0000000000000ba9         db  0x00 ; '.'
0000000000000baa         db  0x02 ; '.'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x02 ; '.'
0000000000000bad         db  0x00 ; '.'
0000000000000bae         db  0x02 ; '.'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0x02 ; '.'
0000000000000bb1         db  0x00 ; '.'
0000000000000bb2         db  0x02 ; '.'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x00 ; '.'
0000000000000bb5         db  0x00 ; '.'
0000000000000bb6         db  0x00 ; '.'
0000000000000bb7         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xbb8; 0xc18[ (96 bytes)
        ; File offset : [3000; 3096[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000bb8         db  0x01 ; '.'
0000000000000bb9         db  0x00 ; '.'
0000000000000bba         db  0x05 ; '.'
0000000000000bbb         db  0x00 ; '.'
0000000000000bbc         db  0x01 ; '.'
0000000000000bbd         db  0x00 ; '.'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x00 ; '.'
0000000000000bc0         db  0x10 ; '.'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x00 ; '.'
0000000000000bc3         db  0x00 ; '.'
0000000000000bc4         db  0x00 ; '.'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0x13 ; '.'
0000000000000bc9         db  0x69 ; 'i'
0000000000000bca         db  0x69 ; 'i'
0000000000000bcb         db  0x0d ; '.'
0000000000000bcc         db  0x00 ; '.'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x06 ; '.'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x47 ; 'G'
0000000000000bd1         db  0x02 ; '.'
0000000000000bd2         db  0x00 ; '.'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x10 ; '.'
0000000000000bd5         db  0x00 ; '.'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x00 ; '.'
0000000000000bd8         db  0x94 ; '.'
0000000000000bd9         db  0x91 ; '.'
0000000000000bda         db  0x96 ; '.'
0000000000000bdb         db  0x06 ; '.'
0000000000000bdc         db  0x00 ; '.'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x05 ; '.'
0000000000000bdf         db  0x00 ; '.'
0000000000000be0         db  0x51 ; 'Q'
0000000000000be1         db  0x02 ; '.'
0000000000000be2         db  0x00 ; '.'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x10 ; '.'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x00 ; '.'
0000000000000be7         db  0x00 ; '.'
0000000000000be8         db  0x14 ; '.'
0000000000000be9         db  0x69 ; 'i'
0000000000000bea         db  0x69 ; 'i'
0000000000000beb         db  0x0d ; '.'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x04 ; '.'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x5c ; '\'
0000000000000bf1         db  0x02 ; '.'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x10 ; '.'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x00 ; '.'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0x74 ; 't'
0000000000000bf9         db  0x19 ; '.'
0000000000000bfa         db  0x69 ; 'i'
0000000000000bfb         db  0x09 ; '.'
0000000000000bfc         db  0x00 ; '.'
0000000000000bfd         db  0x00 ; '.'
0000000000000bfe         db  0x03 ; '.'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0x66 ; 'f'
0000000000000c01         db  0x02 ; '.'
0000000000000c02         db  0x00 ; '.'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x10 ; '.'
0000000000000c05         db  0x00 ; '.'
0000000000000c06         db  0x00 ; '.'
0000000000000c07         db  0x00 ; '.'
0000000000000c08         db  0x75 ; 'u'
0000000000000c09         db  0x1a ; '.'
0000000000000c0a         db  0x69 ; 'i'
0000000000000c0b         db  0x09 ; '.'
0000000000000c0c         db  0x00 ; '.'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x02 ; '.'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x72 ; 'r'
0000000000000c11         db  0x02 ; '.'
0000000000000c12         db  0x00 ; '.'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x00 ; '.'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x00 ; '.'
0000000000000c17         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xc18; 0xe58[ (576 bytes)
        ; File offset : [3096; 3672[ (576 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000c18         db  0xd0 ; '.'
0000000000000c19         db  0xab ; '.'
0000000000000c1a         db  0x20 ; ' '
0000000000000c1b         db  0x00 ; '.'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x00 ; '.'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x08 ; '.'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x00 ; '.'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x00 ; '.'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0xf0 ; '.'
0000000000000c29         db  0x17 ; '.'
0000000000000c2a         db  0x00 ; '.'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x00 ; '.'
0000000000000c2d         db  0x00 ; '.'
0000000000000c2e         db  0x00 ; '.'
0000000000000c2f         db  0x00 ; '.'
0000000000000c30         db  0xd8 ; '.'
0000000000000c31         db  0xab ; '.'
0000000000000c32         db  0x20 ; ' '
0000000000000c33         db  0x00 ; '.'
0000000000000c34         db  0x00 ; '.'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x00 ; '.'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x08 ; '.'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x00 ; '.'
0000000000000c3e         db  0x00 ; '.'
0000000000000c3f         db  0x00 ; '.'
0000000000000c40         db  0xb0 ; '.'
0000000000000c41         db  0x17 ; '.'
0000000000000c42         db  0x00 ; '.'
0000000000000c43         db  0x00 ; '.'
0000000000000c44         db  0x00 ; '.'
0000000000000c45         db  0x00 ; '.'
0000000000000c46         db  0x00 ; '.'
0000000000000c47         db  0x00 ; '.'
0000000000000c48         db  0xe0 ; '.'
0000000000000c49         db  0xab ; '.'
0000000000000c4a         db  0x20 ; ' '
0000000000000c4b         db  0x00 ; '.'
0000000000000c4c         db  0x00 ; '.'
0000000000000c4d         db  0x00 ; '.'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x00 ; '.'
0000000000000c50         db  0x08 ; '.'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x00 ; '.'
0000000000000c53         db  0x00 ; '.'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x00 ; '.'
0000000000000c56         db  0x00 ; '.'
0000000000000c57         db  0x00 ; '.'
0000000000000c58         db  0xf1 ; '.'
0000000000000c59         db  0x8d ; '.'
0000000000000c5a         db  0x00 ; '.'
0000000000000c5b         db  0x00 ; '.'
0000000000000c5c         db  0x00 ; '.'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x00 ; '.'
0000000000000c5f         db  0x00 ; '.'
0000000000000c60         db  0xe8 ; '.'
0000000000000c61         db  0xab ; '.'
0000000000000c62         db  0x20 ; ' '
0000000000000c63         db  0x00 ; '.'
0000000000000c64         db  0x00 ; '.'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x00 ; '.'
0000000000000c67         db  0x00 ; '.'
0000000000000c68         db  0x08 ; '.'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x00 ; '.'
0000000000000c6b         db  0x00 ; '.'
0000000000000c6c         db  0x00 ; '.'
0000000000000c6d         db  0x00 ; '.'
0000000000000c6e         db  0x00 ; '.'
0000000000000c6f         db  0x00 ; '.'
0000000000000c70         db  0xf9 ; '.'
0000000000000c71         db  0x8d ; '.'
0000000000000c72         db  0x00 ; '.'
0000000000000c73         db  0x00 ; '.'
0000000000000c74         db  0x00 ; '.'
0000000000000c75         db  0x00 ; '.'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0xf0 ; '.'
0000000000000c79         db  0xab ; '.'
0000000000000c7a         db  0x20 ; ' '
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x00 ; '.'
0000000000000c7d         db  0x00 ; '.'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x00 ; '.'
0000000000000c80         db  0x08 ; '.'
0000000000000c81         db  0x00 ; '.'
0000000000000c82         db  0x00 ; '.'
0000000000000c83         db  0x00 ; '.'
0000000000000c84         db  0x00 ; '.'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x00 ; '.'
0000000000000c87         db  0x00 ; '.'
0000000000000c88         db  0xff ; '.'
0000000000000c89         db  0x8d ; '.'
0000000000000c8a         db  0x00 ; '.'
0000000000000c8b         db  0x00 ; '.'
0000000000000c8c         db  0x00 ; '.'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x00 ; '.'
0000000000000c8f         db  0x00 ; '.'
0000000000000c90         db  0xf8 ; '.'
0000000000000c91         db  0xab ; '.'
0000000000000c92         db  0x20 ; ' '
0000000000000c93         db  0x00 ; '.'
0000000000000c94         db  0x00 ; '.'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x08 ; '.'
0000000000000c99         db  0x00 ; '.'
0000000000000c9a         db  0x00 ; '.'
0000000000000c9b         db  0x00 ; '.'
0000000000000c9c         db  0x00 ; '.'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x00 ; '.'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x0c ; '.'
0000000000000ca1         db  0x8e ; '.'
0000000000000ca2         db  0x00 ; '.'
0000000000000ca3         db  0x00 ; '.'
0000000000000ca4         db  0x00 ; '.'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x00 ; '.'
0000000000000ca7         db  0x00 ; '.'
0000000000000ca8         db  0x00 ; '.'
0000000000000ca9         db  0xac ; '.'
0000000000000caa         db  0x20 ; ' '
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x00 ; '.'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x00 ; '.'
0000000000000caf         db  0x00 ; '.'
0000000000000cb0         db  0x08 ; '.'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x00 ; '.'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x00 ; '.'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x00 ; '.'
0000000000000cb7         db  0x00 ; '.'
0000000000000cb8         db  0x19 ; '.'
0000000000000cb9         db  0x8e ; '.'
0000000000000cba         db  0x00 ; '.'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x00 ; '.'
0000000000000cbd         db  0x00 ; '.'
0000000000000cbe         db  0x00 ; '.'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0x08 ; '.'
0000000000000cc1         db  0xac ; '.'
0000000000000cc2         db  0x20 ; ' '
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x00 ; '.'
0000000000000cc5         db  0x00 ; '.'
0000000000000cc6         db  0x00 ; '.'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x08 ; '.'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x00 ; '.'
0000000000000ccb         db  0x00 ; '.'
0000000000000ccc         db  0x00 ; '.'
0000000000000ccd         db  0x00 ; '.'
0000000000000cce         db  0x00 ; '.'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0x2d ; '-'
0000000000000cd1         db  0x8e ; '.'
0000000000000cd2         db  0x00 ; '.'
0000000000000cd3         db  0x00 ; '.'
0000000000000cd4         db  0x00 ; '.'
0000000000000cd5         db  0x00 ; '.'
0000000000000cd6         db  0x00 ; '.'
0000000000000cd7         db  0x00 ; '.'
0000000000000cd8         db  0x10 ; '.'
0000000000000cd9         db  0xac ; '.'
0000000000000cda         db  0x20 ; ' '
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x00 ; '.'
0000000000000cdd         db  0x00 ; '.'
0000000000000cde         db  0x00 ; '.'
0000000000000cdf         db  0x00 ; '.'
0000000000000ce0         db  0x08 ; '.'
0000000000000ce1         db  0x00 ; '.'
0000000000000ce2         db  0x00 ; '.'
0000000000000ce3         db  0x00 ; '.'
0000000000000ce4         db  0x00 ; '.'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x00 ; '.'
0000000000000ce8         db  0x2f ; '/'
0000000000000ce9         db  0x8e ; '.'
0000000000000cea         db  0x00 ; '.'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x00 ; '.'
0000000000000ced         db  0x00 ; '.'
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0x18 ; '.'
0000000000000cf1         db  0xac ; '.'
0000000000000cf2         db  0x20 ; ' '
0000000000000cf3         db  0x00 ; '.'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x00 ; '.'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x08 ; '.'
0000000000000cf9         db  0x00 ; '.'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x00 ; '.'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x00 ; '.'
0000000000000cff         db  0x00 ; '.'
0000000000000d00         db  0x12 ; '.'
0000000000000d01         db  0x8e ; '.'
0000000000000d02         db  0x00 ; '.'
0000000000000d03         db  0x00 ; '.'
0000000000000d04         db  0x00 ; '.'
0000000000000d05         db  0x00 ; '.'
0000000000000d06         db  0x00 ; '.'
0000000000000d07         db  0x00 ; '.'
0000000000000d08         db  0x20 ; ' '
0000000000000d09         db  0xac ; '.'
0000000000000d0a         db  0x20 ; ' '
0000000000000d0b         db  0x00 ; '.'
0000000000000d0c         db  0x00 ; '.'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x00 ; '.'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x08 ; '.'
0000000000000d11         db  0x00 ; '.'
0000000000000d12         db  0x00 ; '.'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x00 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x26 ; '&'
0000000000000d19         db  0x7f ; '.'
0000000000000d1a         db  0x00 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x00 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x28 ; '('
0000000000000d21         db  0xac ; '.'
0000000000000d22         db  0x20 ; ' '
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x00 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x00 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x08 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x00 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x00 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x37 ; '7'
0000000000000d31         db  0x8e ; '.'
0000000000000d32         db  0x00 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x00 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x00 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0x08 ; '.'
0000000000000d39         db  0xb0 ; '.'
0000000000000d3a         db  0x20 ; ' '
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x00 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x00 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x08 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x00 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x00 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x00 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x08 ; '.'
0000000000000d49         db  0xb0 ; '.'
0000000000000d4a         db  0x20 ; ' '
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x00 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x00 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x60 ; '`'
0000000000000d51         db  0xb0 ; '.'
0000000000000d52         db  0x20 ; ' '
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x00 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x08 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x00 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x00 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x70 ; 'p'
0000000000000d61         db  0xb0 ; '.'
0000000000000d62         db  0x20 ; ' '
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x00 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x00 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x78 ; 'x'
0000000000000d69         db  0xb0 ; '.'
0000000000000d6a         db  0x20 ; ' '
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x08 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x00 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x00 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x00 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0xe0 ; '.'
0000000000000d79         db  0xb0 ; '.'
0000000000000d7a         db  0x20 ; ' '
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x00 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0xc0 ; '.'
0000000000000d81         db  0xaf ; '.'
0000000000000d82         db  0x20 ; ' '
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x00 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x00 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x06 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x07 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x00 ; '.'
0000000000000d91         db  0x00 ; '.'
0000000000000d92         db  0x00 ; '.'
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x00 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0xc8 ; '.'
0000000000000d99         db  0xaf ; '.'
0000000000000d9a         db  0x20 ; ' '
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x06 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x00 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x18 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x00 ; '.'
0000000000000da9         db  0x00 ; '.'
0000000000000daa         db  0x00 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x00 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0xd0 ; '.'
0000000000000db1         db  0xaf ; '.'
0000000000000db2         db  0x20 ; ' '
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x06 ; '.'
0000000000000db9         db  0x00 ; '.'
0000000000000dba         db  0x00 ; '.'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x1d ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x00 ; '.'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x00 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0xd8 ; '.'
0000000000000dc9         db  0xaf ; '.'
0000000000000dca         db  0x20 ; ' '
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x06 ; '.'
0000000000000dd1         db  0x00 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x31 ; '1'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x00 ; '.'
0000000000000dd9         db  0x00 ; '.'
0000000000000dda         db  0x00 ; '.'
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x00 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0xe0 ; '.'
0000000000000de1         db  0xaf ; '.'
0000000000000de2         db  0x20 ; ' '
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x06 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x00 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x34 ; '4'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x00 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x00 ; '.'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x00 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x80 ; '.'
0000000000000df9         db  0xb0 ; '.'
0000000000000dfa         db  0x20 ; ' '
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x00 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x05 ; '.'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x00 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x37 ; '7'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x00 ; '.'
0000000000000e09         db  0x00 ; '.'
0000000000000e0a         db  0x00 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x88 ; '.'
0000000000000e11         db  0xb0 ; '.'
0000000000000e12         db  0x20 ; ' '
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x05 ; '.'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x00 ; '.'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x36 ; '6'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x00 ; '.'
0000000000000e21         db  0x00 ; '.'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x00 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x90 ; '.'
0000000000000e29         db  0xb0 ; '.'
0000000000000e2a         db  0x20 ; ' '
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x05 ; '.'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x00 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x39 ; '9'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x00 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0xa0 ; '.'
0000000000000e41         db  0xb0 ; '.'
0000000000000e42         db  0x20 ; ' '
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x05 ; '.'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x00 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x3b ; ';'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x00 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0xe58; 0x12d8[ (1152 bytes)
        ; File offset : [3672; 4824[ (1152 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000e58         db  0x40 ; '@'
0000000000000e59         db  0xae ; '.'
0000000000000e5a         db  0x20 ; ' '
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x07 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x00 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x01 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x00 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x48 ; 'H'
0000000000000e71         db  0xae ; '.'
0000000000000e72         db  0x20 ; ' '
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x07 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x00 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x02 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x00 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x00 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x50 ; 'P'
0000000000000e89         db  0xae ; '.'
0000000000000e8a         db  0x20 ; ' '
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x07 ; '.'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x03 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x00 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x58 ; 'X'
0000000000000ea1         db  0xae ; '.'
0000000000000ea2         db  0x20 ; ' '
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x07 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x04 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x00 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x00 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x60 ; '`'
0000000000000eb9         db  0xae ; '.'
0000000000000eba         db  0x20 ; ' '
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x07 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x00 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x05 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x00 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x68 ; 'h'
0000000000000ed1         db  0xae ; '.'
0000000000000ed2         db  0x20 ; ' '
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x07 ; '.'
0000000000000ed9         db  0x00 ; '.'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x06 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x00 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x70 ; 'p'
0000000000000ee9         db  0xae ; '.'
0000000000000eea         db  0x20 ; ' '
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x07 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x08 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x00 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x00 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x78 ; 'x'
0000000000000f01         db  0xae ; '.'
0000000000000f02         db  0x20 ; ' '
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x07 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x00 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x09 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x00 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x80 ; '.'
0000000000000f19         db  0xae ; '.'
0000000000000f1a         db  0x20 ; ' '
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x07 ; '.'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x00 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x0a ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x00 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x88 ; '.'
0000000000000f31         db  0xae ; '.'
0000000000000f32         db  0x20 ; ' '
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x07 ; '.'
0000000000000f39         db  0x00 ; '.'
0000000000000f3a         db  0x00 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x0b ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x00 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x90 ; '.'
0000000000000f49         db  0xae ; '.'
0000000000000f4a         db  0x20 ; ' '
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x07 ; '.'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x00 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x0c ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x00 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x98 ; '.'
0000000000000f61         db  0xae ; '.'
0000000000000f62         db  0x20 ; ' '
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x07 ; '.'
0000000000000f69         db  0x00 ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x0d ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x00 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0xa0 ; '.'
0000000000000f79         db  0xae ; '.'
0000000000000f7a         db  0x20 ; ' '
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x07 ; '.'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x00 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x0e ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x00 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0xa8 ; '.'
0000000000000f91         db  0xae ; '.'
0000000000000f92         db  0x20 ; ' '
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x07 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x0f ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180
0000000000000fa0         db  0x00 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0xb0 ; '.'
0000000000000fa9         db  0xae ; '.'
0000000000000faa         db  0x20 ; ' '
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x07 ; '.'
0000000000000fb1         db  0x00 ; '.'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x10 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x00 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0xb8 ; '.'
0000000000000fc1         db  0xae ; '.'
0000000000000fc2         db  0x20 ; ' '
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x07 ; '.'
0000000000000fc9         db  0x00 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x11 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x00 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0xc0 ; '.'
0000000000000fd9         db  0xae ; '.'
0000000000000fda         db  0x20 ; ' '
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x07 ; '.'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x12 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x00 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0xc8 ; '.'
0000000000000ff1         db  0xae ; '.'
0000000000000ff2         db  0x20 ; ' '
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x07 ; '.'
0000000000000ff9         db  0x00 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x13 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x00 ; '.'                                         ; DATA XREF=unary_operator+539
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0xd0 ; '.'
0000000000001009         db  0xae ; '.'
000000000000100a         db  0x20 ; ' '
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x07 ; '.'
0000000000001011         db  0x00 ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x14 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x00 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0xd8 ; '.'
0000000000001021         db  0xae ; '.'
0000000000001022         db  0x20 ; ' '
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x07 ; '.'
0000000000001029         db  0x00 ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x15 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x00 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0xe0 ; '.'
0000000000001039         db  0xae ; '.'
000000000000103a         db  0x20 ; ' '
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x07 ; '.'
0000000000001041         db  0x00 ; '.'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x16 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x00 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0xe8 ; '.'
0000000000001051         db  0xae ; '.'
0000000000001052         db  0x20 ; ' '
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x07 ; '.'
0000000000001059         db  0x00 ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x17 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x00 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0xf0 ; '.'
0000000000001069         db  0xae ; '.'
000000000000106a         db  0x20 ; ' '
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x07 ; '.'
0000000000001071         db  0x00 ; '.'
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x19 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x00 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xf8 ; '.'
0000000000001081         db  0xae ; '.'
0000000000001082         db  0x20 ; ' '
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x07 ; '.'
0000000000001089         db  0x00 ; '.'
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x1a ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x00 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x00 ; '.'
0000000000001099         db  0xaf ; '.'
000000000000109a         db  0x20 ; ' '
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x07 ; '.'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x00 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x1b ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x00 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0xaf ; '.'
00000000000010b2         db  0x20 ; ' '
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x07 ; '.'
00000000000010b9         db  0x00 ; '.'
00000000000010ba         db  0x00 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x1c ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x00 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x10 ; '.'
00000000000010c9         db  0xaf ; '.'
00000000000010ca         db  0x20 ; ' '
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x07 ; '.'
00000000000010d1         db  0x00 ; '.'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x1e ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x00 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x18 ; '.'
00000000000010e1         db  0xaf ; '.'
00000000000010e2         db  0x20 ; ' '
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x07 ; '.'
00000000000010e9         db  0x00 ; '.'
00000000000010ea         db  0x00 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x1f ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x00 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x20 ; ' '
00000000000010f9         db  0xaf ; '.'
00000000000010fa         db  0x20 ; ' '
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x07 ; '.'
0000000000001101         db  0x00 ; '.'
0000000000001102         db  0x00 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x20 ; ' '
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x00 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x28 ; '('
0000000000001111         db  0xaf ; '.'
0000000000001112         db  0x20 ; ' '
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x07 ; '.'
0000000000001119         db  0x00 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x21 ; '!'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x00 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x30 ; '0'
0000000000001129         db  0xaf ; '.'
000000000000112a         db  0x20 ; ' '
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x07 ; '.'
0000000000001131         db  0x00 ; '.'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x22 ; '"'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x00 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x38 ; '8'
0000000000001141         db  0xaf ; '.'
0000000000001142         db  0x20 ; ' '
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x07 ; '.'
0000000000001149         db  0x00 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x23 ; '#'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x00 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x40 ; '@'
0000000000001159         db  0xaf ; '.'
000000000000115a         db  0x20 ; ' '
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x07 ; '.'
0000000000001161         db  0x00 ; '.'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x24 ; '$'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x00 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x48 ; 'H'
0000000000001171         db  0xaf ; '.'
0000000000001172         db  0x20 ; ' '
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x07 ; '.'
0000000000001179         db  0x00 ; '.'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x25 ; '%'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x00 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x50 ; 'P'
0000000000001189         db  0xaf ; '.'
000000000000118a         db  0x20 ; ' '
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x07 ; '.'
0000000000001191         db  0x00 ; '.'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x26 ; '&'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x00 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x58 ; 'X'
00000000000011a1         db  0xaf ; '.'
00000000000011a2         db  0x20 ; ' '
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x07 ; '.'
00000000000011a9         db  0x00 ; '.'
00000000000011aa         db  0x00 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x27 ; '''
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x00 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x60 ; '`'
00000000000011b9         db  0xaf ; '.'
00000000000011ba         db  0x20 ; ' '
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x07 ; '.'
00000000000011c1         db  0x00 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x28 ; '('
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x00 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x68 ; 'h'
00000000000011d1         db  0xaf ; '.'
00000000000011d2         db  0x20 ; ' '
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x07 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x29 ; ')'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x00 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x70 ; 'p'
00000000000011e9         db  0xaf ; '.'
00000000000011ea         db  0x20 ; ' '
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x07 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x2a ; '*'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x00 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x78 ; 'x'
0000000000001201         db  0xaf ; '.'
0000000000001202         db  0x20 ; ' '
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x07 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x2b ; '+'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x00 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x80 ; '.'
0000000000001219         db  0xaf ; '.'
000000000000121a         db  0x20 ; ' '
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x07 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x2c ; ','
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x00 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x88 ; '.'
0000000000001231         db  0xaf ; '.'
0000000000001232         db  0x20 ; ' '
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x07 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x2d ; '-'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x00 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x90 ; '.'
0000000000001249         db  0xaf ; '.'
000000000000124a         db  0x20 ; ' '
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x07 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x2e ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x00 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x98 ; '.'
0000000000001261         db  0xaf ; '.'
0000000000001262         db  0x20 ; ' '
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x07 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x2f ; '/'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x00 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0xa0 ; '.'
0000000000001279         db  0xaf ; '.'
000000000000127a         db  0x20 ; ' '
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x07 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x30 ; '0'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x00 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0xa8 ; '.'
0000000000001291         db  0xaf ; '.'
0000000000001292         db  0x20 ; ' '
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x07 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x32 ; '2'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x00 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0xb0 ; '.'
00000000000012a9         db  0xaf ; '.'
00000000000012aa         db  0x20 ; ' '
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x07 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x33 ; '3'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x00 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0xb8 ; '.'
00000000000012c1         db  0xaf ; '.'
00000000000012c2         db  0x20 ; ' '
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x07 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x35 ; '5'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x00 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x12d8; 0x12ef[ (23 bytes)
        ; File offset : [4824; 4847[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
00000000000012d8         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
00000000000012dc         mov        rax, qword [qword_20afd0]                   ; qword_20afd0
00000000000012e3         test       rax, rax
00000000000012e6         je         loc_12ea

00000000000012e8         call       rax

                     loc_12ea:
00000000000012ea         add        rsp, 0x8                                    ; CODE XREF=_init+14
00000000000012ee         ret
                        ; endp
00000000000012ef         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x12f0; 0x1600[ (784 bytes)
        ; File offset : [4848; 5632[ (784 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_12f0:
00000000000012f0         push       qword [qword_20ae30]                        ; Begin of unwind block (FDE at 0x9824), qword_20ae30, CODE XREF=sub_1306+5
00000000000012f6         jmp        qword [qword_20ae30+8]                      ; 0x20ae38
                        ; endp
00000000000012fc         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000001300         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1306:
0000000000001306         push       0x0
000000000000130b         jmp        loc_12f0


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001310         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, verror_at_line+84, verror_at_line+130, xrealloc+40, rpl_vasprintf+91, vasnprintf+402, vasnprintf+430, vasnprintf+458
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1316:
0000000000001316         push       0x1
000000000000131b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001320         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=binary_operator+1325, set_program_name+154, sub_3cd0+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, verror_at_line+176, xalloc_die+48
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1326:
0000000000001326         push       0x2
000000000000132b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001330         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=unary_operator+273, unary_operator+1334, unary_operator+1376, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, verror_at_line+157, xstrcat+288, xvasprintf+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1336:
0000000000001336         push       0x3
000000000000133b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error_at_line:        // error_at_line
0000000000001340         jmp        qword [error_at_line@GOT]                   ; error_at_line, error_at_line@GOT, CODE XREF=verror_at_line+68
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1346:
0000000000001346         push       0x4
000000000000134b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001350         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+1020, usage+1213
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1356:
0000000000001356         push       0x5
000000000000135b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001360         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1366:
0000000000001366         push       0x6
000000000000136b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001370         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1376:
0000000000001376         push       0x7
000000000000137b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_isatty:        // isatty
0000000000001380         jmp        qword [isatty@GOT]                          ; isatty, isatty@GOT, CODE XREF=unary_operator+329
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1386:
0000000000001386         push       0x8
000000000000138b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001390         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+62
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1396:
0000000000001396         push       0x9
000000000000139b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
00000000000013a0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13a6:
00000000000013a6         push       0xa
00000000000013ab         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
00000000000013b0         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13b6:
00000000000013b6         push       0xb
00000000000013bb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
00000000000013c0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+193, find_int+194, beyond+42, binary_operator+1091, binary_operator+1344, unary_operator+1436, or+917, or+967, three_arguments+305, usage+56, usage+114
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13c6:
00000000000013c6         push       0xc
00000000000013cb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
00000000000013d0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13d6:
00000000000013d6         push       0xd
00000000000013db         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
00000000000013e0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=binary_operator+830, binary_operator+1152, quotearg_buffer_restyled+343, sub_3cd0+411, sub_3cd0+1742, xstrdup+4, xstrcat+100, xstrcat+166
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13e6:
00000000000013e6         push       0xe
00000000000013eb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
00000000000013f0         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=unary_operator+1249
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13f6:
00000000000013f6         push       0xf
00000000000013fb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001400         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=binary_operator+1320, unary_operator+1484, sub_3cd0+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, xstrcat+277, xvasprintf+154, rpl_mbrtowc+126
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1406:
0000000000001406         push       0x10
000000000000140b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001410         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1416:
0000000000001416         push       0x11
000000000000141b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001420         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1426:
0000000000001426         push       0x12
000000000000142b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001430         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1436:
0000000000001436         push       0x13
000000000000143b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001440         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1446:
0000000000001446         push       0x14
000000000000144b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_geteuid:        // geteuid
0000000000001450         jmp        qword [geteuid@GOT]                         ; geteuid, geteuid@GOT, CODE XREF=unary_operator+1390
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1456:
0000000000001456         push       0x15
000000000000145b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001460         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1466:
0000000000001466         push       0x16
000000000000146b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001470         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+125, usage+162, usage+199, usage+236, usage+273, usage+310, usage+347, usage+384, usage+421, usage+458, usage+495
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1476:
0000000000001476         push       0x17
000000000000147b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001480         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1486:
0000000000001486         push       0x18
000000000000148b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001490         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=binary_operator+203, binary_operator+351
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1496:
0000000000001496         push       0x19
000000000000149b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtol:        // strtol
00000000000014a0         jmp        qword [strtol@GOT]                          ; strtol, strtol@GOT, CODE XREF=unary_operator+297
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14a6:
00000000000014a6         push       0x1a
00000000000014ab         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
00000000000014b0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=xmemdup+35, xstrcat+186, vasnprintf+686, vasnprintf+912, vasnprintf+973, vasnprintf+2590, vasnprintf+3085, vasnprintf+3403, vasnprintf+3547, vasnprintf+4227, printf_parse+2492
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14b6:
00000000000014b6         push       0x1b
00000000000014bb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
00000000000014c0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14c6:
00000000000014c6         push       0x1c
00000000000014cb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
00000000000014d0         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=binary_operator+490, binary_operator+535, binary_operator+671, binary_operator+702, binary_operator+985, binary_operator+1026, binary_operator+1123, unary_operator+217, unary_operator+417, unary_operator+513, unary_operator+617
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14d6:
00000000000014d6         push       0x1d
00000000000014db         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
00000000000014e0         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, vasnprintf+210, vasnprintf+2547, vasnprintf+3007, vasnprintf+3353, vasnprintf+3497, vasnprintf+4191, printf_parse+2420, printf_parse+2528, printf_parse+2852, printf_parse+3169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14e6:
00000000000014e6         push       0x1e
00000000000014eb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
00000000000014f0         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14f6:
00000000000014f6         push       0x1f
00000000000014fb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001500         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1506:
0000000000001506         push       0x20
000000000000150b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getegid:        // getegid
0000000000001510         jmp        qword [getegid@GOT]                         ; getegid, getegid@GOT, CODE XREF=unary_operator+1348
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1516:
0000000000001516         push       0x21
000000000000151b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001520         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1526:
0000000000001526         push       0x22
000000000000152b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001530         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266, printf_parse+2729
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1536:
0000000000001536         push       0x23
000000000000153b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001540         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+31, usage+995, usage+1188, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1546:
0000000000001546         push       0x24
000000000000154b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001550         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+746, usage+983, usage+1076, usage+1137, usage+1176, usage+1279
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1556:
0000000000001556         push       0x25
000000000000155b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001560         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=close_stdout+125, close_stdout+157, verror_at_line+114, verror_at_line+171, xalloc_die+43
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1566:
0000000000001566         push       0x26
000000000000156b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001570         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1576:
0000000000001576         push       0x27
000000000000157b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_euidaccess:        // euidaccess
0000000000001580         jmp        qword [euidaccess@GOT]                      ; euidaccess, euidaccess@GOT, CODE XREF=unary_operator+174, unary_operator+374, unary_operator+470
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1586:
0000000000001586         push       0x28
000000000000158b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001590         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1596:
0000000000001596         push       0x29
000000000000159b         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
00000000000015a0         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=test_syntax_error+165, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15a6:
00000000000015a6         push       0x2a
00000000000015ab         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
00000000000015b0         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15b6:
00000000000015b6         push       0x2b
00000000000015bb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
00000000000015c0         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15c6:
00000000000015c6         push       0x2c
00000000000015cb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
00000000000015d0         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_3cd0+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15d6:
00000000000015d6         push       0x2d
00000000000015db         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
00000000000015e0         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_3cd0+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15e6:
00000000000015e6         push       0x2e
00000000000015eb         jmp        0x12f0
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
00000000000015f0         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=find_int+4, sub_3a70+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15f6:
00000000000015f6         push       0x2f
00000000000015fb         jmp        0x12f0
                        ; endp


        ; Section .plt.got
        ; Range: [0x1600; 0x1608[ (8 bytes)
        ; File offset : [5632; 5640[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20afe0:        // qword_20afe0
0000000000001600         jmp        qword [qword_20afe0]                        ; qword, End of unwind block (FDE at 0x9824), Begin of unwind block (FDE at 0x984c), qword_20afe0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001606         align      8
0000000000001608         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x984c)
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1610; 0x7d2e[ (26398 bytes)
        ; File offset : [5648; 32046[ (26398 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     main:
0000000000001610         push       rbp                                         ; Begin of unwind block (FDE at 0x9a48), DATA XREF=_start+29
0000000000001611         push       rbx
0000000000001612         mov        ebx, edi
0000000000001614         mov        rbp, rsi
0000000000001617         sub        rsp, 0x8
000000000000161b         mov        rdi, qword [rsi]
000000000000161e         call       set_program_name                            ; set_program_name
0000000000001623         lea        rsi, qword [aNsOnlineHelpSn+22]             ; argument "__locale" for method j_setlocale, 0x7ee7
000000000000162a         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
000000000000162f         call       j_setlocale                                 ; setlocale
0000000000001634         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
000000000000163b         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001642         call       j_bindtextdomain                            ; bindtextdomain
0000000000001647         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
000000000000164e         call       j_textdomain                                ; textdomain
0000000000001653         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
000000000000165a         mov        dword [exit_failure], 0x2                   ; exit_failure
0000000000001664         call       atexit                                      ; atexit
0000000000001669         cmp        ebx, 0x1
000000000000166c         mov        qword [argv], rbp                           ; argv
0000000000001673         mov        dword [argc], ebx                           ; argc
0000000000001679         mov        dword [pos], 0x1                            ; pos
0000000000001683         jle        loc_16a9

0000000000001685         lea        edi, dword [rbx-1]
0000000000001688         call       posixtest                                   ; posixtest
000000000000168d         movsxd     rdx, dword [pos]                            ; pos
0000000000001694         cmp        edx, dword [argc]                           ; argc
000000000000169a         jne        loc_16b0

000000000000169c         xor        eax, 0x1
000000000000169f         movzx      eax, al

                     loc_16a2:
00000000000016a2         add        rsp, 0x8                                    ; CODE XREF=main+158
00000000000016a6         pop        rbx
00000000000016a7         pop        rbp
00000000000016a8         ret
                        ; endp

                     loc_16a9:
00000000000016a9         mov        eax, 0x1                                    ; CODE XREF=main+115
00000000000016ae         jmp        loc_16a2

                     loc_16b0:
00000000000016b0         mov        rax, qword [argv]                           ; argv, CODE XREF=main+138
00000000000016b7         mov        rdi, qword [rax+rdx*8]
00000000000016bb         call       quote                                       ; quote
00000000000016c0         lea        rsi, qword [aExtraArgumentS]                ; argument "msgid" for method j_dcgettext, "extra argument %s"
00000000000016c7         mov        rbx, rax
00000000000016ca         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000016cc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000016d1         call       j_dcgettext                                 ; dcgettext
00000000000016d6         mov        rsi, rbx
00000000000016d9         mov        rdi, rax
00000000000016dc         xor        eax, eax
00000000000016de         call       test_syntax_error                           ; test_syntax_error
00000000000016e3         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x9a48)
00000000000016ed         nop        dword [rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
00000000000016f0         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x97f4)
00000000000016f2         mov        r9, rdx
00000000000016f5         pop        rsi
00000000000016f6         mov        rdx, rsp
00000000000016f9         and        rsp, 0xfffffffffffffff0
00000000000016fd         push       rax
00000000000016fe         push       rsp
00000000000016ff         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000001706         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000170d         lea        rdi, qword [main]                           ; main
0000000000001714         call       qword [qword_20afc0+8]                      ; 0x20afc8
000000000000171a         hlt
                        ; endp
000000000000171b         align      32                                          ; End of unwind block (FDE at 0x97f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000001720         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000001727         push       rbp
0000000000001728         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000172f         cmp        rax, rdi
0000000000001732         mov        rbp, rsp
0000000000001735         je         loc_1750

0000000000001737         mov        rax, qword [qword_20afc0]                   ; qword_20afc0
000000000000173e         test       rax, rax
0000000000001741         je         loc_1750

0000000000001743         pop        rbp
0000000000001744         jmp        rax
                        ; endp
0000000000001746         align      16

                     loc_1750:
0000000000001750         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000001751         ret
                        ; endp
0000000000001752         align      32

                     register_tm_clones:
0000000000001760         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000001767         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000176e         push       rbp
000000000000176f         sub        rsi, rdi
0000000000001772         mov        rbp, rsp
0000000000001775         sar        rsi, 0x3
0000000000001779         mov        rax, rsi
000000000000177c         shr        rax, 0x3f
0000000000001780         add        rsi, rax
0000000000001783         sar        rsi, 0x1
0000000000001786         je         loc_17a0

0000000000001788         mov        rax, qword [qword_20afd8]                   ; qword_20afd8
000000000000178f         test       rax, rax
0000000000001792         je         loc_17a0

0000000000001794         pop        rbp
0000000000001795         jmp        rax
                        ; endp
0000000000001797         align      32

                     loc_17a0:
00000000000017a0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000017a1         ret
                        ; endp
00000000000017a2         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
00000000000017b0         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
00000000000017b7         jne        loc_17e8

00000000000017b9         cmp        qword [qword_20afe0], 0x0                   ; qword_20afe0
00000000000017c1         push       rbp
00000000000017c2         mov        rbp, rsp
00000000000017c5         je         loc_17d3

00000000000017c7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000017ce         call       j_qword_20afe0                              ; qword_20afe0

                     loc_17d3:
00000000000017d3         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
00000000000017d8         mov        byte [completed.7697], 0x1                  ; completed.7697
00000000000017df         pop        rbp
00000000000017e0         ret
                        ; endp
00000000000017e1         align      8

                     loc_17e8:
00000000000017e8         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
00000000000017ea         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
00000000000017f0         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
00000000000017f1         mov        rbp, rsp
00000000000017f4         pop        rbp
00000000000017f5         jmp        register_tm_clones                          ; register_tm_clones
00000000000017fa         align      2048


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     binop:
0000000000001800         mov        r8, rdi                                     ; Begin of unwind block (FDE at 0x9864), CODE XREF=or+562, or+580, three_arguments+37
0000000000001803         lea        rdi, qword [_IO_stdin_used+5]               ; 0x7d45
000000000000180a         mov        ecx, 0x2
000000000000180f         mov        rsi, r8
0000000000001812         mov        eax, 0x1
0000000000001817         rep  cmpsb byte [rsi], byte [rdi]
0000000000001819         seta       dl
000000000000181c         sbb        dl, 0x0
000000000000181f         test       dl, dl
0000000000001821         je         loc_1968

0000000000001827         lea        rdi, qword [_IO_stdin_used+4]               ; 0x7d44
000000000000182e         mov        ecx, 0x3
0000000000001833         mov        rsi, r8
0000000000001836         rep  cmpsb byte [rsi], byte [rdi]
0000000000001838         seta       dl
000000000000183b         sbb        dl, 0x0
000000000000183e         test       dl, dl
0000000000001840         je         loc_1968

0000000000001846         lea        rdi, qword [_IO_stdin_used+7]               ; 0x7d47
000000000000184d         mov        ecx, 0x3
0000000000001852         mov        rsi, r8
0000000000001855         rep  cmpsb byte [rsi], byte [rdi]
0000000000001857         seta       dl
000000000000185a         sbb        dl, 0x0
000000000000185d         test       dl, dl
000000000000185f         je         loc_1968

0000000000001865         lea        rdi, qword [_IO_stdin_used+10]              ; 0x7d4a
000000000000186c         mov        ecx, 0x4
0000000000001871         mov        rsi, r8
0000000000001874         rep  cmpsb byte [rsi], byte [rdi]
0000000000001876         seta       dl
0000000000001879         sbb        dl, 0x0
000000000000187c         test       dl, dl
000000000000187e         je         loc_1968

0000000000001884         lea        rdi, qword [_IO_stdin_used+14]              ; 0x7d4e
000000000000188b         mov        ecx, 0x4
0000000000001890         mov        rsi, r8
0000000000001893         rep  cmpsb byte [rsi], byte [rdi]
0000000000001895         seta       dl
0000000000001898         sbb        dl, 0x0
000000000000189b         test       dl, dl
000000000000189d         je         loc_1968

00000000000018a3         lea        rdi, qword [_IO_stdin_used+18]              ; 0x7d52
00000000000018aa         mov        ecx, 0x4
00000000000018af         mov        rsi, r8
00000000000018b2         rep  cmpsb byte [rsi], byte [rdi]
00000000000018b4         seta       dl
00000000000018b7         sbb        dl, 0x0
00000000000018ba         test       dl, dl
00000000000018bc         je         loc_1968

00000000000018c2         lea        rdi, qword [_IO_stdin_used+22]              ; 0x7d56
00000000000018c9         mov        ecx, 0x4
00000000000018ce         mov        rsi, r8
00000000000018d1         rep  cmpsb byte [rsi], byte [rdi]
00000000000018d3         seta       dl
00000000000018d6         sbb        dl, 0x0
00000000000018d9         test       dl, dl
00000000000018db         je         loc_1968

00000000000018e1         lea        rdi, qword [_IO_stdin_used+26]              ; 0x7d5a
00000000000018e8         mov        ecx, 0x4
00000000000018ed         mov        rsi, r8
00000000000018f0         rep  cmpsb byte [rsi], byte [rdi]
00000000000018f2         seta       dl
00000000000018f5         sbb        dl, 0x0
00000000000018f8         test       dl, dl
00000000000018fa         je         loc_1968

00000000000018fc         lea        rdi, qword [_IO_stdin_used+30]              ; 0x7d5e
0000000000001903         mov        ecx, 0x4
0000000000001908         mov        rsi, r8
000000000000190b         rep  cmpsb byte [rsi], byte [rdi]
000000000000190d         seta       dl
0000000000001910         sbb        dl, 0x0
0000000000001913         test       dl, dl
0000000000001915         je         loc_1968

0000000000001917         lea        rdi, qword [_IO_stdin_used+34]              ; 0x7d62
000000000000191e         mov        ecx, 0x4
0000000000001923         mov        rsi, r8
0000000000001926         rep  cmpsb byte [rsi], byte [rdi]
0000000000001928         seta       dl
000000000000192b         sbb        dl, 0x0
000000000000192e         test       dl, dl
0000000000001930         je         loc_1968

0000000000001932         lea        rdi, qword [_IO_stdin_used+38]              ; 0x7d66
0000000000001939         mov        ecx, 0x4
000000000000193e         mov        rsi, r8
0000000000001941         rep  cmpsb byte [rsi], byte [rdi]
0000000000001943         seta       dl
0000000000001946         sbb        dl, 0x0
0000000000001949         test       dl, dl
000000000000194b         je         loc_1968

000000000000194d         lea        rdi, qword [_IO_stdin_used+42]              ; 0x7d6a
0000000000001954         mov        ecx, 0x4
0000000000001959         mov        rsi, r8
000000000000195c         rep  cmpsb byte [rsi], byte [rdi]
000000000000195e         seta       al
0000000000001961         sbb        al, 0x0
0000000000001963         test       al, al
0000000000001965         sete       al

                     loc_1968:
0000000000001968         ret                                                    ; CODE XREF=binop+33, binop+64, binop+95, binop+126, binop+157, binop+188, binop+219, binop+250, binop+277, binop+304, binop+331
                        ; endp
000000000000196a         align      16                                          ; End of unwind block (FDE at 0x9864)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     test_syntax_error:
0000000000001970         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0x9878), CODE XREF=main+206, find_int+207, beyond+55, binary_operator+1104, binary_operator+1356, unary_operator+1449, or+933, or+980, three_arguments+318
0000000000001977         test       al, al
0000000000001979         mov        qword [rsp+0xd8+var_B0], rsi
000000000000197e         mov        qword [rsp+0xd8+var_A8], rdx
0000000000001983         mov        qword [rsp+0xd8+var_A0], rcx
0000000000001988         mov        qword [rsp+0xd8+var_98], r8
000000000000198d         mov        qword [rsp+0xd8+var_90], r9
0000000000001992         je         loc_19cb

0000000000001994         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000001999         movaps     xmmword [rsp+0xd8+var_78], xmm1
000000000000199e         movaps     xmmword [rsp+0xd8+var_68], xmm2
00000000000019a3         movaps     xmmword [rsp+0xd8+var_58], xmm3
00000000000019ab         movaps     xmmword [rsp+0xd8+var_48], xmm4
00000000000019b3         movaps     xmmword [rsp+0xd8+var_38], xmm5
00000000000019bb         movaps     xmmword [rsp+0xd8+var_28], xmm6
00000000000019c3         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_19cb:
00000000000019cb         mov        rax, qword [fs:0x28]                        ; CODE XREF=test_syntax_error+34
00000000000019d4         mov        qword [rsp+0xd8+var_C0], rax
00000000000019d9         xor        eax, eax
00000000000019db         lea        rax, qword [rsp+0xd8+arg_0]
00000000000019e3         mov        rdx, rdi
00000000000019e6         mov        rcx, rsp
00000000000019e9         xor        edi, edi
00000000000019eb         xor        esi, esi
00000000000019ed         mov        qword [rsp+0xd8+var_D0], rax
00000000000019f2         lea        rax, qword [rsp+0xd8+var_B8]
00000000000019f7         mov        dword [rsp+0xd8+var_D8], 0x8
00000000000019fe         mov        dword [rsp+0xd8+var_D4], 0x30
0000000000001a06         mov        qword [rsp+0xd8+var_C8], rax
0000000000001a0b         call       verror                                      ; verror
0000000000001a10         mov        edi, 0x2                                    ; argument "__status" for method j_exit
0000000000001a15         call       j_exit                                      ; exit
                        ; endp
0000000000001a1a         align      32                                          ; End of unwind block (FDE at 0x9878)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_58: int64_t, -88
        ;    var_70: int8_t, -112
        ;    var_90: int8_t, -144
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440


                     find_int:
0000000000001a20         push       rbx                                         ; Begin of unwind block (FDE at 0x9890), CODE XREF=binary_operator+801, binary_operator+1189, unary_operator+265
0000000000001a21         mov        rbx, rdi
0000000000001a24         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000001a29         mov        r8, qword [rax]
0000000000001a2c         mov        rax, rbx

                     loc_1a2f:
0000000000001a2f         movzx      ecx, byte [rax]                             ; CODE XREF=find_int+148
0000000000001a32         test       byte [r8+rcx*2], 0x1
0000000000001a37         mov        rdx, rcx
0000000000001a3a         jne        loc_1ab0

0000000000001a3c         cmp        cl, 0x2b
0000000000001a3f         je         loc_1ac0

0000000000001a41         xor        ecx, ecx
0000000000001a43         cmp        dl, 0x2d
0000000000001a46         sete       cl
0000000000001a49         add        rcx, rax

                     loc_1a4c:
0000000000001a4c         movsx      esi, byte [rcx]                             ; CODE XREF=find_int+167
0000000000001a4f         lea        rdx, qword [rcx+1]
0000000000001a53         sub        esi, 0x30
0000000000001a56         cmp        esi, 0x9
0000000000001a59         ja         loc_1ac9

0000000000001a5b         movsx      esi, byte [rcx+1]
0000000000001a5f         mov        ecx, esi
0000000000001a61         sub        esi, 0x30
0000000000001a64         cmp        esi, 0x9
0000000000001a67         ja         loc_1a81

0000000000001a69         nop        dword [rax]

                     loc_1a70:
0000000000001a70         add        rdx, 0x1                                    ; CODE XREF=find_int+95
0000000000001a74         movsx      esi, byte [rdx]
0000000000001a77         mov        ecx, esi
0000000000001a79         sub        esi, 0x30
0000000000001a7c         cmp        esi, 0x9
0000000000001a7f         jbe        loc_1a70

                     loc_1a81:
0000000000001a81         movzx      esi, cl                                     ; CODE XREF=find_int+71
0000000000001a84         test       byte [r8+rsi*2], 0x1
0000000000001a89         je         loc_1aa1

0000000000001a8b         nop        dword [rax+rax]

                     loc_1a90:
0000000000001a90         add        rdx, 0x1                                    ; CODE XREF=find_int+127
0000000000001a94         movzx      esi, byte [rdx]
0000000000001a97         test       byte [r8+rsi*2], 0x1
0000000000001a9c         mov        rcx, rsi
0000000000001a9f         jne        loc_1a90

                     loc_1aa1:
0000000000001aa1         test       cl, cl                                      ; CODE XREF=find_int+105
0000000000001aa3         jne        loc_1ac9

0000000000001aa5         pop        rbx
0000000000001aa6         ret
                        ; endp
0000000000001aa7         align      16

                     loc_1ab0:
0000000000001ab0         add        rax, 0x1                                    ; CODE XREF=find_int+26
0000000000001ab4         jmp        loc_1a2f
0000000000001ab9         align      64

                     loc_1ac0:
0000000000001ac0         lea        rcx, qword [rax+1]                          ; CODE XREF=find_int+31
0000000000001ac4         mov        rax, rcx
0000000000001ac7         jmp        loc_1a4c

                     loc_1ac9:
0000000000001ac9         mov        rdi, rbx                                    ; CODE XREF=find_int+57, find_int+131
0000000000001acc         call       quote                                       ; quote
0000000000001ad1         lea        rsi, qword [aInvalidInteger]                ; argument "msgid" for method j_dcgettext, "invalid integer %s"
0000000000001ad8         mov        rbx, rax
0000000000001adb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001add         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001ae2         call       j_dcgettext                                 ; dcgettext
0000000000001ae7         mov        rsi, rbx
0000000000001aea         mov        rdi, rax
0000000000001aed         xor        eax, eax
0000000000001aef         call       test_syntax_error                           ; test_syntax_error
0000000000001af4         nop                                                    ; End of unwind block (FDE at 0x9890)
0000000000001af6         nop        word [cs:rax+rax]
                     beyond:
0000000000001b00         movsxd     rdx, dword [argc]                           ; Begin of unwind block (FDE at 0x98b0), argc, CODE XREF=unary_advance+37, two_arguments+107, posixtest+314, or+494, three_arguments+323
0000000000001b07         mov        rax, qword [argv]                           ; argv
0000000000001b0e         push       rbx
0000000000001b0f         mov        rdi, qword [rax+rdx*8-8]
0000000000001b14         call       quote                                       ; quote
0000000000001b19         lea        rsi, qword [aMissingArgumen]                ; argument "msgid" for method j_dcgettext, "missing argument after %s"
0000000000001b20         mov        rbx, rax
0000000000001b23         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001b25         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001b2a         call       j_dcgettext                                 ; dcgettext
0000000000001b2f         mov        rsi, rbx
0000000000001b32         mov        rdi, rax
0000000000001b35         xor        eax, eax
0000000000001b37         call       test_syntax_error                           ; test_syntax_error
0000000000001b3c         nop        dword [rax]                                 ; End of unwind block (FDE at 0x98b0)
                     unary_advance:
0000000000001b40         mov        eax, dword [pos]                            ; Begin of unwind block (FDE at 0x98c8), pos, CODE XREF=unary_operator+80, unary_operator+152, unary_operator+192, unary_operator+248, unary_operator+352, unary_operator+392, unary_operator+448, unary_operator+488, unary_operator+560, unary_operator+592, unary_operator+656
0000000000001b46         lea        edx, dword [rax+1]
0000000000001b49         cmp        edx, dword [argc]                           ; argc
0000000000001b4f         mov        dword [pos], edx                            ; pos
0000000000001b55         jge        loc_1b61

0000000000001b57         add        eax, 0x2
0000000000001b5a         mov        dword [pos], eax                            ; pos
0000000000001b60         ret
                        ; endp

                     loc_1b61:
0000000000001b61         sub        rsp, 0x8                                    ; CODE XREF=unary_advance+21
0000000000001b65         call       beyond                                      ; beyond
0000000000001b6a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x98c8)
                     binary_operator:
0000000000001b70         push       r15                                         ; Begin of unwind block (FDE at 0x98dc), CODE XREF=or+770, or+799, three_arguments+275
0000000000001b72         push       r14
0000000000001b74         mov        eax, edi
0000000000001b76         push       r13
0000000000001b78         push       r12
0000000000001b7a         push       rbp
0000000000001b7b         push       rbx
0000000000001b7c         sub        rsp, 0x178
0000000000001b83         mov        ecx, dword [pos]                            ; pos
0000000000001b89         mov        rbx, qword [fs:0x28]
0000000000001b92         mov        qword [rsp+0x1c0+var_58], rbx
0000000000001b9a         xor        ebx, ebx
0000000000001b9c         test       dil, dil
0000000000001b9f         lea        edx, dword [rcx+1]
0000000000001ba2         je         loc_1bad

0000000000001ba4         mov        dword [pos], edx                            ; pos
0000000000001baa         lea        edx, dword [rcx+2]

                     loc_1bad:
0000000000001bad         mov        edi, dword [argc]                           ; argc, CODE XREF=binary_operator+50
0000000000001bb3         xor        r13d, r13d
0000000000001bb6         mov        rbx, qword [argv]                           ; argv
0000000000001bbd         movsxd     r14, edx
0000000000001bc0         lea        ecx, dword [rdi-2]
0000000000001bc3         cmp        ecx, edx
0000000000001bc5         jle        loc_1be8

0000000000001bc7         mov        rsi, qword [rbx+r14*8+8]
0000000000001bcc         lea        rdi, qword [aEfDoesNotAccep+20]             ; 0x7dc6
0000000000001bd3         mov        ecx, 0x3
0000000000001bd8         rep  cmpsb byte [rsi], byte [rdi]
0000000000001bda         seta       cl
0000000000001bdd         sbb        cl, 0x0
0000000000001be0         test       cl, cl
0000000000001be2         je         loc_1c80

                     loc_1be8:
0000000000001be8         mov        rsi, qword [rbx+r14*8]                      ; CODE XREF=binary_operator+85, binary_operator+284
0000000000001bec         lea        r15, qword [r14*8]
0000000000001bf4         movzx      edx, byte [rsi]
0000000000001bf7         cmp        dl, 0x2d
0000000000001bfa         je         loc_1cf0

0000000000001c00         cmp        dl, 0x3d
0000000000001c03         je         loc_1c98

                     loc_1c09:
0000000000001c09         lea        rdi, qword [_IO_stdin_used+4]               ; 0x7d44, CODE XREF=binary_operator+306, binary_operator+316
0000000000001c10         mov        ecx, 0x3
0000000000001c15         rep  cmpsb byte [rsi], byte [rdi]
0000000000001c17         seta       al
0000000000001c1a         sbb        al, 0x0
0000000000001c1c         test       al, al
0000000000001c1e         jne        loc_209d

0000000000001c24         movsxd     rax, dword [pos]                            ; pos
0000000000001c2b         mov        rbp, rax
0000000000001c2e         add        rax, 0x2
0000000000001c32         mov        rsi, qword [rbx+rax*8]                      ; argument "__s2" for method j_strcmp
0000000000001c36         mov        rdi, qword [rbx+rax*8-0x10]                 ; argument "__s1" for method j_strcmp
0000000000001c3b         call       j_strcmp                                    ; strcmp
0000000000001c40         test       eax, eax
0000000000001c42         setne      r13b
0000000000001c46         add        ebp, 0x3
0000000000001c49         mov        dword [pos], ebp                            ; pos

                     loc_1c4f:
0000000000001c4f         mov        rbx, qword [rsp+0x1c0+var_58]               ; CODE XREF=binary_operator+371, binary_operator+542, binary_operator+579, binary_operator+601, binary_operator+678, binary_operator+709, binary_operator+728, binary_operator+751, binary_operator+920, binary_operator+1045, binary_operator+1128
0000000000001c57         xor        rbx, qword [fs:0x28]
0000000000001c60         mov        eax, r13d
0000000000001c63         jne        loc_2098

0000000000001c69         add        rsp, 0x178
0000000000001c70         pop        rbx
0000000000001c71         pop        rbp
0000000000001c72         pop        r12
0000000000001c74         pop        r13
0000000000001c76         pop        r14
0000000000001c78         pop        r15
0000000000001c7a         ret
                        ; endp
0000000000001c7b         align      128

                     loc_1c80:
0000000000001c80         mov        dword [pos], edx                            ; pos, CODE XREF=binary_operator+114
0000000000001c86         mov        r13d, 0x1
0000000000001c8c         jmp        loc_1be8
0000000000001c91         align      8

                     loc_1c98:
0000000000001c98         movzx      eax, byte [rsi+1]                           ; CODE XREF=binary_operator+147
0000000000001c9c         test       al, al
0000000000001c9e         je         loc_1cb8

0000000000001ca0         cmp        al, 0x3d
0000000000001ca2         jne        loc_1c09

0000000000001ca8         cmp        byte [rsi+2], 0x0
0000000000001cac         jne        loc_1c09

0000000000001cb2         nop        word [rax+rax]

                     loc_1cb8:
0000000000001cb8         movsxd     rax, dword [pos]                            ; pos, CODE XREF=binary_operator+302
0000000000001cbf         mov        rbp, rax
0000000000001cc2         add        rax, 0x2
0000000000001cc6         mov        rsi, qword [rbx+rax*8]                      ; argument "__s2" for method j_strcmp
0000000000001cca         mov        rdi, qword [rbx+rax*8-0x10]                 ; argument "__s1" for method j_strcmp
0000000000001ccf         call       j_strcmp                                    ; strcmp
0000000000001cd4         test       eax, eax
0000000000001cd6         sete       r13b
0000000000001cda         add        ebp, 0x3
0000000000001cdd         mov        dword [pos], ebp                            ; pos
0000000000001ce3         jmp        loc_1c4f
0000000000001ce8         align      16

                     loc_1cf0:
0000000000001cf0         movzx      edx, byte [rsi+1]                           ; CODE XREF=binary_operator+138
0000000000001cf4         cmp        dl, 0x6c
0000000000001cf7         je         loc_1e68

0000000000001cfd         cmp        dl, 0x67
0000000000001d00         je         loc_1e68

                     loc_1d06:
0000000000001d06         cmp        dl, 0x65                                    ; CODE XREF=binary_operator+772
0000000000001d09         je         loc_1dd0

0000000000001d0f         cmp        dl, 0x6e
0000000000001d12         je         loc_1f10

                     loc_1d18:
0000000000001d18         cmp        dl, 0x6f                                    ; CODE XREF=binary_operator+1139
0000000000001d1b         jne        loc_2070

0000000000001d21         cmp        byte [rsi+2], 0x74
0000000000001d25         jne        loc_1f9a

0000000000001d2b         cmp        byte [rsi+3], 0x0
0000000000001d2f         jne        loc_1f9a

0000000000001d35         add        dword [pos], 0x3                            ; pos
0000000000001d3c         or         r13b, al
0000000000001d3f         jne        loc_20a2

0000000000001d45         lea        r14, qword [rsp+0x1c0+var_120]
0000000000001d4d         mov        rsi, qword [rbx+r15-8]                      ; argument "__filename" for method j___xstat
0000000000001d52         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001d57         mov        rdx, r14                                    ; argument "__stat_buf" for method j___xstat
0000000000001d5a         call       j___xstat                                   ; __xstat
0000000000001d5f         test       eax, eax
0000000000001d61         mov        ebp, eax
0000000000001d63         jne        loc_1d7a

0000000000001d65         mov        rax, qword [rsp+0x1c0+var_C0]
0000000000001d6d         mov        r12, qword [rsp+0x1c0+var_C8]
0000000000001d75         mov        qword [rsp+0x1c0+var_1B8], rax

                     loc_1d7a:
0000000000001d7a         mov        rsi, qword [rbx+r15+8]                      ; argument "__filename" for method j___xstat, CODE XREF=binary_operator+499
0000000000001d7f         mov        rdx, r14                                    ; argument "__stat_buf" for method j___xstat
0000000000001d82         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001d87         call       j___xstat                                   ; __xstat
0000000000001d8c         test       eax, eax
0000000000001d8e         jne        loc_1c4f

0000000000001d94         mov        rdx, qword [rsp+0x1c0+var_C8]
0000000000001d9c         test       ebp, ebp
0000000000001d9e         mov        rsi, qword [rsp+0x1c0+var_C0]
0000000000001da6         setne      r13b
0000000000001daa         cmp        r12, rdx
0000000000001dad         setl       al
0000000000001db0         or         r13b, al
0000000000001db3         jne        loc_1c4f

0000000000001db9         mov        ebp, dword [rsp+0x1c0+var_1B8]
0000000000001dbd         sub        ebp, esi
0000000000001dbf         shr        ebp, 0x1f
0000000000001dc2         cmp        r12, rdx
0000000000001dc5         cmovle     r13d, ebp
0000000000001dc9         jmp        loc_1c4f
0000000000001dce         align      16

                     loc_1dd0:
0000000000001dd0         movzx      edx, byte [rsi+2]                           ; CODE XREF=binary_operator+409
0000000000001dd4         cmp        dl, 0x71
0000000000001dd7         je         loc_1f90

                     loc_1ddd:
0000000000001ddd         cmp        dl, 0x66                                    ; CODE XREF=binary_operator+1293
0000000000001de0         jne        loc_1f9a

0000000000001de6         cmp        byte [rsi+3], 0x0
0000000000001dea         jne        loc_1f9a

0000000000001df0         add        dword [pos], 0x3                            ; pos
0000000000001df7         or         r13b, al
0000000000001dfa         jne        loc_20c1

0000000000001e00         mov        rsi, qword [rbx+r15-8]                      ; argument "__filename" for method j___xstat
0000000000001e05         lea        rdx, qword [rsp+0x1c0+var_1B0]              ; argument "__stat_buf" for method j___xstat
0000000000001e0a         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001e0f         call       j___xstat                                   ; __xstat
0000000000001e14         test       eax, eax
0000000000001e16         jne        loc_1c4f

0000000000001e1c         mov        rsi, qword [rbx+r15+8]                      ; argument "__filename" for method j___xstat
0000000000001e21         lea        rdx, qword [rsp+0x1c0+var_120]              ; argument "__stat_buf" for method j___xstat
0000000000001e29         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001e2e         call       j___xstat                                   ; __xstat
0000000000001e33         test       eax, eax
0000000000001e35         jne        loc_1c4f

0000000000001e3b         mov        rax, qword [rsp+0x1c0+var_120]
0000000000001e43         cmp        qword [rsp+0x1c0+var_1B0], rax
0000000000001e48         jne        loc_1c4f

0000000000001e4e         mov        rax, qword [rsp+0x1c0+var_118]
0000000000001e56         cmp        qword [rsp+0x1c0+var_1A8], rax
0000000000001e5b         sete       r13b
0000000000001e5f         jmp        loc_1c4f
0000000000001e64         align      8

                     loc_1e68:
0000000000001e68         movzx      ecx, byte [rsi+2]                           ; CODE XREF=binary_operator+391, binary_operator+400
0000000000001e6c         cmp        cl, 0x65
0000000000001e6f         je         loc_1e7a

0000000000001e71         cmp        cl, 0x74
0000000000001e74         jne        loc_1d06

                     loc_1e7a:
0000000000001e7a         cmp        byte [rsi+3], 0x0                           ; CODE XREF=binary_operator+767
0000000000001e7e         jne        loc_1fe0

                     loc_1e84:
0000000000001e84         test       al, al                                      ; CODE XREF=binary_operator+1060
0000000000001e86         mov        rdi, qword [rbx+r15-8]
0000000000001e8b         jne        loc_1ff0

0000000000001e91         call       find_int                                    ; find_int
0000000000001e96         mov        rbx, rax

                     loc_1e99:
0000000000001e99         test       r13b, r13b                                  ; CODE XREF=binary_operator+1176
0000000000001e9c         mov        rax, qword [argv]                           ; argv
0000000000001ea3         je         loc_2010

0000000000001ea9         mov        rdi, qword [rax+r15+0x10]                   ; argument "__s" for method j_strlen
0000000000001eae         call       j_strlen                                    ; strlen
0000000000001eb3         lea        rsi, qword [rsp+0x1c0+var_70]
0000000000001ebb         mov        rdi, rax
0000000000001ebe         call       umaxtostr                                   ; umaxtostr

                     loc_1ec3:
0000000000001ec3         mov        rsi, rax                                    ; CODE XREF=binary_operator+1194
0000000000001ec6         mov        rdi, rbx
0000000000001ec9         call       strintcmp                                   ; strintcmp
0000000000001ece         mov        rdx, qword [argv]                           ; argv
0000000000001ed5         mov        rcx, qword [rdx+r14*8]
0000000000001ed9         cmp        byte [rcx+2], 0x65
0000000000001edd         movzx      ecx, byte [rcx+1]
0000000000001ee1         sete       dl
0000000000001ee4         add        dword [pos], 0x3                            ; pos
0000000000001eeb         cmp        cl, 0x6c
0000000000001eee         je         loc_2058

0000000000001ef4         cmp        cl, 0x67
0000000000001ef7         je         loc_2088

0000000000001efd         test       eax, eax
0000000000001eff         setne      al
0000000000001f02         cmp        al, dl
0000000000001f04         sete       r13b
0000000000001f08         jmp        loc_1c4f
0000000000001f0d         align      16

                     loc_1f10:
0000000000001f10         movzx      ecx, byte [rsi+2]                           ; CODE XREF=binary_operator+418
0000000000001f14         cmp        cl, 0x65
0000000000001f17         je         loc_1f90

                     loc_1f19:
0000000000001f19         cmp        cl, 0x74                                    ; CODE XREF=binary_operator+1145
0000000000001f1c         jne        loc_1f9a

0000000000001f1e         cmp        byte [rsi+3], 0x0
0000000000001f22         jne        loc_1f9a

0000000000001f24         add        dword [pos], 0x3                            ; pos
0000000000001f2b         or         r13b, al
0000000000001f2e         jne        loc_20cf

0000000000001f34         lea        rbp, qword [rsp+0x1c0+var_120]
0000000000001f3c         mov        rsi, qword [rbx+r15-8]                      ; argument "__filename" for method j___xstat
0000000000001f41         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001f46         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___xstat
0000000000001f49         call       j___xstat                                   ; __xstat
0000000000001f4e         test       eax, eax
0000000000001f50         lea        rcx, qword [rbx+r15+8]
0000000000001f55         jne        loc_1fc8

0000000000001f57         mov        rsi, qword [rcx]                            ; argument "__filename" for method j___xstat
0000000000001f5a         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___xstat
0000000000001f5d         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001f62         mov        rbx, qword [rsp+0x1c0+var_C8]
0000000000001f6a         mov        r12, qword [rsp+0x1c0+var_C0]
0000000000001f72         call       j___xstat                                   ; __xstat
0000000000001f77         test       eax, eax
0000000000001f79         je         loc_2020

0000000000001f7f         mov        r13d, 0x1
0000000000001f85         jmp        loc_1c4f
0000000000001f8a         align      16

                     loc_1f90:
0000000000001f90         cmp        byte [rsi+3], 0x0                           ; CODE XREF=binary_operator+615, binary_operator+935
0000000000001f94         je         loc_1e84

                     loc_1f9a:
0000000000001f9a         mov        rdi, rsi                                    ; CODE XREF=binary_operator+437, binary_operator+447, binary_operator+624, binary_operator+634, binary_operator+940, binary_operator+946, binary_operator+1283
0000000000001f9d         call       quote                                       ; quote
0000000000001fa2         lea        rsi, qword [aSUnknownBinary]                ; argument "msgid" for method j_dcgettext, "%s: unknown binary operator"
0000000000001fa9         mov        rbx, rax
0000000000001fac         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001fae         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001fb3         call       j_dcgettext                                 ; dcgettext
0000000000001fb8         mov        rsi, rbx
0000000000001fbb         mov        rdi, rax
0000000000001fbe         xor        eax, eax
0000000000001fc0         call       test_syntax_error                           ; test_syntax_error
0000000000001fc5         nop        dword [rax]

                     loc_1fc8:
0000000000001fc8         mov        rsi, qword [rcx]                            ; argument "__filename" for method j___xstat, CODE XREF=binary_operator+997
0000000000001fcb         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___xstat
0000000000001fce         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001fd3         call       j___xstat                                   ; __xstat
0000000000001fd8         jmp        loc_1c4f
0000000000001fdd         align      32

                     loc_1fe0:
0000000000001fe0         cmp        dl, 0x6e                                    ; CODE XREF=binary_operator+782
0000000000001fe3         jne        loc_1d18

0000000000001fe9         jmp        loc_1f19
0000000000001fee         align      16

                     loc_1ff0:
0000000000001ff0         call       j_strlen                                    ; strlen, CODE XREF=binary_operator+795
0000000000001ff5         lea        rsi, qword [rsp+0x1c0+var_90]
0000000000001ffd         mov        rdi, rax
0000000000002000         call       umaxtostr                                   ; umaxtostr, DATA XREF=unary_operator+947
0000000000002005         mov        rbx, rax
0000000000002008         jmp        loc_1e99
000000000000200d         align      16

                     loc_2010:
0000000000002010         mov        rdi, qword [rax+r15+8]                      ; CODE XREF=binary_operator+819
0000000000002015         call       find_int                                    ; find_int
000000000000201a         jmp        loc_1ec3
000000000000201f         align      32

                     loc_2020:
0000000000002020         cmp        rbx, qword [rsp+0x1c0+var_C8]               ; CODE XREF=binary_operator+1033
0000000000002028         mov        rax, qword [rsp+0x1c0+var_C0]
0000000000002030         jl         loc_1c4f

0000000000002036         mov        r13d, 0x1
000000000000203c         jg         loc_1c4f

0000000000002042         sub        r12d, eax
0000000000002045         test       r12d, r12d
0000000000002048         setg       r13b
000000000000204c         jmp        loc_1c4f
0000000000002051         align      8

                     loc_2058:
0000000000002058         movzx      edx, dl                                     ; CODE XREF=binary_operator+894
000000000000205b         cmp        edx, eax
000000000000205d         setg       r13b
0000000000002061         jmp        loc_1c4f
0000000000002066         align      16

                     loc_2070:
0000000000002070         cmp        dl, 0x65                                    ; CODE XREF=binary_operator+427
0000000000002073         jne        loc_1f9a

0000000000002079         movzx      edx, byte [rsi+2]
000000000000207d         jmp        loc_1ddd
0000000000002082         align      8

                     loc_2088:
0000000000002088         movzx      edx, dl                                     ; CODE XREF=binary_operator+903
000000000000208b         neg        edx
000000000000208d         cmp        edx, eax
000000000000208f         setl       r13b
0000000000002093         jmp        loc_1c4f

                     loc_2098:
0000000000002098         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=binary_operator+243
                        ; endp

                     loc_209d:
000000000000209d         call       j_abort                                     ; abort, CODE XREF=binary_operator+174
                        ; endp

                     loc_20a2:
00000000000020a2         lea        rsi, qword [aOtDoesNotAccep]                ; "-ot does not accept -l", CODE XREF=binary_operator+463
00000000000020a9         mov        edx, 0x5

                     loc_20ae:
00000000000020ae         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=binary_operator+1373, binary_operator+1387
00000000000020b0         call       j_dcgettext                                 ; dcgettext
00000000000020b5         xor        esi, esi
00000000000020b7         mov        rdi, rax
00000000000020ba         xor        eax, eax
00000000000020bc         call       test_syntax_error                           ; test_syntax_error

                     loc_20c1:
00000000000020c1         mov        edx, 0x5                                    ; CODE XREF=binary_operator+650
00000000000020c6         lea        rsi, qword [aEfDoesNotAccep]                ; "-ef does not accept -l"
00000000000020cd         jmp        loc_20ae

                     loc_20cf:
00000000000020cf         mov        edx, 0x5                                    ; CODE XREF=binary_operator+958
00000000000020d4         lea        rsi, qword [aNtDoesNotAccep]                ; "-nt does not accept -l"
00000000000020db         jmp        loc_20ae
00000000000020dd         align      32                                          ; End of unwind block (FDE at 0x98dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_88: int64_t, -136
        ;    var_98: int32_t, -152
        ;    var_9C: int32_t, -156
        ;    var_A0: int32_t, -160


                     unary_operator:
00000000000020e0         push       rbp                                         ; Begin of unwind block (FDE at 0x9928), CODE XREF=two_arguments+72, or+678
00000000000020e1         push       rbx
00000000000020e2         sub        rsp, 0xa8
00000000000020e9         mov        rbx, qword [argv]                           ; argv
00000000000020f0         mov        rax, qword [fs:0x28]
00000000000020f9         mov        qword [rsp+0xb8+var_20], rax
0000000000002101         xor        eax, eax
0000000000002103         movsxd     rax, dword [pos]                            ; pos
000000000000210a         mov        rdi, qword [rbx+rax*8]
000000000000210e         movzx      eax, byte [rdi+1]
0000000000002112         sub        eax, 0x47
0000000000002115         cmp        al, 0x33
0000000000002117         ja         loc_2666

000000000000211d         lea        rdx, qword [switch_table_7f40]              ; switch_table_7f40
0000000000002124         movzx      eax, al
0000000000002127         movsxd     rax, dword [rdx+rax*4]
000000000000212b         add        rax, rdx
000000000000212e         jmp        rax                                         ; switch statement using table at 0x7f40, with 52 cases, 0x2130,0x2178,0x21a0,0x21d8,0x2240,0x2268,0x22a0,0x22c8,0x2310,0x2330,0x2370,0x23b0,0x23f0,0x2420,0x2460,0x24a0,0x24e0,0x2520,0x2550,0x25a8,0x25f0,0x2666

                     loc_2130:
0000000000002130         call       unary_advance                               ; unary_advance, case 51, CODE XREF=unary_operator+78
0000000000002135         movsxd     rax, dword [pos]                            ; pos
000000000000213c         mov        rax, qword [rbx+rax*8-8]
0000000000002141         cmp        byte [rax], 0x0
0000000000002144         sete       al
0000000000002147         nop        word [rax+rax]

                     loc_2150:
0000000000002150         mov        rcx, qword [rsp+0xb8+var_20]                ; CODE XREF=unary_operator+184, unary_operator+228, unary_operator+240, unary_operator+310, unary_operator+323, unary_operator+339, unary_operator+384, unary_operator+428, unary_operator+443, unary_operator+480, unary_operator+524
0000000000002158         xor        rcx, qword [fs:0x28]
0000000000002161         jne        loc_26ac

0000000000002167         add        rsp, 0xa8
000000000000216e         pop        rbx
000000000000216f         pop        rbp
0000000000002170         ret
                        ; endp
0000000000002171         align      8

                     loc_2178:
0000000000002178         call       unary_advance                               ; unary_advance, case 49, CODE XREF=unary_operator+78
000000000000217d         movsxd     rax, dword [pos]                            ; pos
0000000000002184         mov        esi, 0x1                                    ; argument "__type" for method j_euidaccess
0000000000002189         mov        rdi, qword [rbx+rax*8-8]                    ; argument "__name" for method j_euidaccess
000000000000218e         call       j_euidaccess                                ; euidaccess
0000000000002193         test       eax, eax
0000000000002195         sete       al
0000000000002198         jmp        loc_2150
000000000000219a         align      32

                     loc_21a0:
00000000000021a0         call       unary_advance                               ; unary_advance, case 46, CODE XREF=unary_operator+78
00000000000021a5         movsxd     rax, dword [pos]                            ; pos
00000000000021ac         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000021af         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000021b4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000021b9         call       j___xstat                                   ; __xstat
00000000000021be         mov        edx, eax
00000000000021c0         xor        eax, eax
00000000000021c2         test       edx, edx
00000000000021c4         jne        loc_2150

00000000000021c6         mov        eax, dword [rsp+0xb8+var_A0]
00000000000021ca         shr        eax, 0xb
00000000000021cd         and        eax, 0x1
00000000000021d0         jmp        loc_2150
00000000000021d5         align      8

                     loc_21d8:
00000000000021d8         call       unary_advance                               ; unary_advance, case 45, CODE XREF=unary_operator+78
00000000000021dd         movsxd     rax, dword [pos]                            ; pos
00000000000021e4         mov        rdi, qword [rbx+rax*8-8]
00000000000021e9         call       find_int                                    ; find_int
00000000000021ee         mov        rbp, rax
00000000000021f1         call       j___errno_location                          ; __errno_location
00000000000021f6         xor        esi, esi                                    ; argument "__endptr" for method j_strtol
00000000000021f8         mov        rbx, rax
00000000000021fb         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtol
00000000000021fe         mov        dword [rax], 0x0
0000000000002204         mov        edx, 0xa                                    ; argument "__base" for method j_strtol
0000000000002209         call       j_strtol                                    ; strtol
000000000000220e         mov        rdi, rax
0000000000002211         xor        eax, eax
0000000000002213         cmp        dword [rbx], 0x22
0000000000002216         je         loc_2150

000000000000221c         cmp        rdi, 0x7fffffff
0000000000002223         ja         loc_2150

0000000000002229         call       j_isatty                                    ; isatty
000000000000222e         test       eax, eax
0000000000002230         setne      al
0000000000002233         jmp        loc_2150
0000000000002238         align      64

                     loc_2240:
0000000000002240         call       unary_advance                               ; unary_advance, case 48, CODE XREF=unary_operator+78
0000000000002245         movsxd     rax, dword [pos]                            ; pos
000000000000224c         mov        esi, 0x2                                    ; argument "__type" for method j_euidaccess
0000000000002251         mov        rdi, qword [rbx+rax*8-8]                    ; argument "__name" for method j_euidaccess
0000000000002256         call       j_euidaccess                                ; euidaccess
000000000000225b         test       eax, eax
000000000000225d         sete       al
0000000000002260         jmp        loc_2150
0000000000002265         align      8

                     loc_2268:
0000000000002268         call       unary_advance                               ; unary_advance, case 44, CODE XREF=unary_operator+78
000000000000226d         movsxd     rax, dword [pos]                            ; pos
0000000000002274         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
0000000000002277         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
000000000000227c         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002281         call       j___xstat                                   ; __xstat
0000000000002286         mov        edx, eax
0000000000002288         xor        eax, eax
000000000000228a         test       edx, edx
000000000000228c         jne        loc_2150

0000000000002292         cmp        qword [rsp+0xb8+var_88], 0x0
0000000000002298         setg       al
000000000000229b         jmp        loc_2150

                     loc_22a0:
00000000000022a0         call       unary_advance                               ; unary_advance, case 43, CODE XREF=unary_operator+78
00000000000022a5         movsxd     rax, dword [pos]                            ; pos
00000000000022ac         mov        esi, 0x4                                    ; argument "__type" for method j_euidaccess
00000000000022b1         mov        rdi, qword [rbx+rax*8-8]                    ; argument "__name" for method j_euidaccess
00000000000022b6         call       j_euidaccess                                ; euidaccess
00000000000022bb         test       eax, eax
00000000000022bd         sete       al
00000000000022c0         jmp        loc_2150
00000000000022c5         align      8

                     loc_22c8:
00000000000022c8         call       unary_advance                               ; unary_advance, case 41, CODE XREF=unary_operator+78
00000000000022cd         movsxd     rax, dword [pos]                            ; pos
00000000000022d4         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000022d7         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000022dc         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000022e1         call       j___xstat                                   ; __xstat
00000000000022e6         mov        edx, eax
00000000000022e8         xor        eax, eax
00000000000022ea         test       edx, edx
00000000000022ec         jne        loc_2150

00000000000022f2         mov        eax, dword [rsp+0xb8+var_A0]
00000000000022f6         and        eax, 0xf000
00000000000022fb         cmp        eax, 0x1000
0000000000002300         sete       al
0000000000002303         jmp        loc_2150
0000000000002308         align      16

                     loc_2310:
0000000000002310         call       unary_advance                               ; unary_advance, case 39, CODE XREF=unary_operator+78
0000000000002315         movsxd     rax, dword [pos]                            ; pos
000000000000231c         mov        rax, qword [rbx+rax*8-8]
0000000000002321         cmp        byte [rax], 0x0
0000000000002324         setne      al
0000000000002327         jmp        loc_2150
000000000000232c         align      16

                     loc_2330:
0000000000002330         call       unary_advance                               ; unary_advance, case 36, CODE XREF=unary_operator+78
0000000000002335         movsxd     rax, dword [pos]                            ; pos
000000000000233c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000233f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002344         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002349         call       j___xstat                                   ; __xstat
000000000000234e         mov        edx, eax
0000000000002350         xor        eax, eax
0000000000002352         test       edx, edx
0000000000002354         jne        loc_2150

000000000000235a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000235e         shr        eax, 0x9
0000000000002361         and        eax, 0x1
0000000000002364         jmp        loc_2150
0000000000002369         align      16

                     loc_2370:
0000000000002370         call       unary_advance                               ; unary_advance, case 32, CODE XREF=unary_operator+78
0000000000002375         movsxd     rax, dword [pos]                            ; pos
000000000000237c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000237f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002384         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002389         call       j___xstat                                   ; __xstat
000000000000238e         mov        edx, eax
0000000000002390         xor        eax, eax
0000000000002392         test       edx, edx
0000000000002394         jne        loc_2150

000000000000239a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000239e         shr        eax, 0xa
00000000000023a1         and        eax, 0x1
00000000000023a4         jmp        loc_2150
00000000000023a9         align      16

                     loc_23b0:
00000000000023b0         call       unary_advance                               ; unary_advance, case 31, CODE XREF=unary_operator+78
00000000000023b5         movsxd     rax, dword [pos]                            ; pos
00000000000023bc         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000023bf         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000023c4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000023c9         call       j___xstat                                   ; __xstat
00000000000023ce         mov        edx, eax
00000000000023d0         xor        eax, eax
00000000000023d2         test       edx, edx
00000000000023d4         jne        loc_2150

00000000000023da         mov        eax, dword [rsp+0xb8+var_A0]
00000000000023de         and        eax, 0xf000
00000000000023e3         cmp        eax, 0x8000
00000000000023e8         sete       al
00000000000023eb         jmp        loc_2150

                     loc_23f0:
00000000000023f0         call       unary_advance                               ; unary_advance, case 30, CODE XREF=unary_operator+78
00000000000023f5         movsxd     rax, dword [pos]                            ; pos
00000000000023fc         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000023ff         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002404         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002409         call       j___xstat                                   ; __xstat
000000000000240e         test       eax, eax
0000000000002410         sete       al
0000000000002413         jmp        loc_2150
0000000000002418         align      32

                     loc_2420:
0000000000002420         call       unary_advance                               ; unary_advance, case 29, CODE XREF=unary_operator+78
0000000000002425         movsxd     rax, dword [pos]                            ; pos
000000000000242c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000242f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002434         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002439         call       j___xstat                                   ; __xstat
000000000000243e         mov        edx, eax
0000000000002440         xor        eax, eax
0000000000002442         test       edx, edx
0000000000002444         jne        loc_2150

000000000000244a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000244e         and        eax, 0xf000
0000000000002453         cmp        eax, 0x4000
0000000000002458         sete       al
000000000000245b         jmp        loc_2150

                     loc_2460:
0000000000002460         call       unary_advance                               ; unary_advance, case 28, CODE XREF=unary_operator+78
0000000000002465         movsxd     rax, dword [pos]                            ; pos
000000000000246c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000246f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002474         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002479         call       j___xstat                                   ; __xstat
000000000000247e         mov        edx, eax
0000000000002480         xor        eax, eax
0000000000002482         test       edx, edx
0000000000002484         jne        loc_2150

000000000000248a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000248e         and        eax, 0xf000
0000000000002493         cmp        eax, 0x2000
0000000000002498         sete       al
000000000000249b         jmp        loc_2150

                     loc_24a0:
00000000000024a0         call       unary_advance                               ; unary_advance, case 27, CODE XREF=unary_operator+78
00000000000024a5         movsxd     rax, dword [pos]                            ; pos
00000000000024ac         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000024af         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000024b4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000024b9         call       j___xstat                                   ; __xstat
00000000000024be         mov        edx, eax
00000000000024c0         xor        eax, eax
00000000000024c2         test       edx, edx
00000000000024c4         jne        loc_2150

00000000000024ca         mov        eax, dword [rsp+0xb8+var_A0]
00000000000024ce         and        eax, 0xf000
00000000000024d3         cmp        eax, 0x6000
00000000000024d8         sete       al
00000000000024db         jmp        loc_2150

                     loc_24e0:
00000000000024e0         call       unary_advance                               ; unary_advance, case 12, CODE XREF=unary_operator+78
00000000000024e5         movsxd     rax, dword [pos]                            ; pos
00000000000024ec         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000024ef         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000024f4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000024f9         call       j___xstat                                   ; __xstat
00000000000024fe         mov        edx, eax
0000000000002500         xor        eax, eax
0000000000002502         test       edx, edx
0000000000002504         jne        loc_2150

000000000000250a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000250e         and        eax, 0xf000
0000000000002513         cmp        eax, 0xc000
0000000000002518         sete       al
000000000000251b         jmp        loc_2150

                     loc_2520:
0000000000002520         call       unary_advance                               ; unary_advance, case 8, CODE XREF=unary_operator+78
0000000000002525         movsxd     rax, dword [pos]                            ; pos
000000000000252c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000252f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002534         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002539         call       j___xstat                                   ; __xstat
000000000000253e         test       eax, eax
0000000000002540         je         loc_2640

                     loc_2546:
0000000000002546         xor        eax, eax                                    ; CODE XREF=unary_operator+1168, unary_operator+1328
0000000000002548         jmp        loc_2150
000000000000254d         align      16

                     loc_2550:
0000000000002550         call       unary_advance                               ; unary_advance, case 7, CODE XREF=unary_operator+78
0000000000002555         movsxd     rax, dword [pos]                            ; pos
000000000000255c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000255f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002564         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002569         call       j___xstat                                   ; __xstat
000000000000256e         test       eax, eax
0000000000002570         jne        loc_2546

0000000000002572         xor        eax, eax
0000000000002574         mov        rsi, qword [rsp+0xb8+var_60]
0000000000002579         cmp        qword [rsp+0xb8+var_70], rsi
000000000000257e         mov        rcx, qword [rsp+0xb8+var_68]
0000000000002583         mov        rdx, qword [rsp+0xb8+var_58]
0000000000002588         jg         loc_2150

000000000000258e         mov        eax, 0x1
0000000000002593         jl         loc_2150

0000000000002599         sub        edx, ecx
000000000000259b         test       edx, edx
000000000000259d         setg       al
00000000000025a0         jmp        loc_2150
00000000000025a5         align      8

                     loc_25a8:
00000000000025a8         call       unary_advance                               ; unary_advance, case 33, CODE XREF=unary_operator+78
00000000000025ad         movsxd     rax, dword [pos]                            ; pos
00000000000025b4         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___lxstat
00000000000025b7         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
00000000000025bc         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___lxstat
00000000000025c1         call       j___lxstat                                  ; __lxstat
00000000000025c6         mov        edx, eax
00000000000025c8         xor        eax, eax
00000000000025ca         test       edx, edx
00000000000025cc         jne        loc_2150

00000000000025d2         mov        eax, dword [rsp+0xb8+var_A0]
00000000000025d6         and        eax, 0xf000
00000000000025db         cmp        eax, 0xa000
00000000000025e0         sete       al
00000000000025e3         jmp        loc_2150
00000000000025e8         align      16

                     loc_25f0:
00000000000025f0         call       unary_advance                               ; unary_advance, case 0, CODE XREF=unary_operator+78
00000000000025f5         movsxd     rax, dword [pos]                            ; pos
00000000000025fc         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000025ff         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002604         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002609         call       j___xstat                                   ; __xstat
000000000000260e         test       eax, eax
0000000000002610         jne        loc_2546

0000000000002616         call       j___errno_location                          ; __errno_location
000000000000261b         mov        dword [rax], 0x0
0000000000002621         mov        rbx, rax
0000000000002624         call       j_getegid                                   ; getegid
0000000000002629         cmp        eax, 0xffffffff
000000000000262c         mov        edx, eax
000000000000262e         je         loc_269e

                     loc_2630:
0000000000002630         cmp        dword [rsp+0xb8+var_98], edx                ; CODE XREF=unary_operator+1482
0000000000002634         sete       al
0000000000002637         jmp        loc_2150
000000000000263c         align      64

                     loc_2640:
0000000000002640         call       j___errno_location                          ; __errno_location, CODE XREF=unary_operator+1120
0000000000002645         mov        dword [rax], 0x0
000000000000264b         mov        rbx, rax
000000000000264e         call       j_geteuid                                   ; geteuid
0000000000002653         cmp        eax, 0xffffffff
0000000000002656         mov        edx, eax
0000000000002658         je         loc_2690

                     loc_265a:
000000000000265a         cmp        dword [rsp+0xb8+var_9C], edx                ; CODE XREF=unary_operator+1468
000000000000265e         sete       al
0000000000002661         jmp        loc_2150

                     loc_2666:
0000000000002666         call       quote                                       ; quote, case 50, CODE XREF=unary_operator+55, unary_operator+78
000000000000266b         lea        rsi, qword [aSUnaryOperator]                ; argument "msgid" for method j_dcgettext, "%s: unary operator expected"
0000000000002672         mov        rbx, rax
0000000000002675         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002677         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000267c         call       j_dcgettext                                 ; dcgettext
0000000000002681         mov        rsi, rbx
0000000000002684         mov        rdi, rax
0000000000002687         xor        eax, eax
0000000000002689         call       test_syntax_error                           ; test_syntax_error
000000000000268e         nop

                     loc_2690:
0000000000002690         mov        esi, dword [rbx]                            ; CODE XREF=unary_operator+1400
0000000000002692         xor        eax, eax
0000000000002694         test       esi, esi
0000000000002696         jne        loc_2150

000000000000269c         jmp        loc_265a

                     loc_269e:
000000000000269e         mov        ecx, dword [rbx]                            ; CODE XREF=unary_operator+1358
00000000000026a0         xor        eax, eax
00000000000026a2         test       ecx, ecx
00000000000026a4         jne        loc_2150

00000000000026aa         jmp        loc_2630

                     loc_26ac:
00000000000026ac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=unary_operator+129
                        ; endp
00000000000026b1         align      64                                          ; End of unwind block (FDE at 0x9928)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_49: int8_t, -73
        ;    var_90: int64_t, -144
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_108: int64_t, -264


                     two_arguments:
00000000000026c0         movsxd     rax, dword [pos]                            ; Begin of unwind block (FDE at 0x9954), pos, CODE XREF=posixtest+220, posixtest+297, three_arguments+105
00000000000026c7         mov        r9, qword [argv]                            ; argv
00000000000026ce         lea        rdi, qword [aSUnaryOperator+28]             ; 0x7e18
00000000000026d5         mov        ecx, 0x2
00000000000026da         mov        rdx, qword [r9+rax*8]
00000000000026de         mov        r8, rax
00000000000026e1         lea        r10, qword [rax*8]
00000000000026e9         mov        rsi, rdx
00000000000026ec         rep  cmpsb byte [rsi], byte [rdi]
00000000000026ee         seta       al
00000000000026f1         sbb        al, 0x0
00000000000026f3         test       al, al
00000000000026f5         je         loc_2710

00000000000026f7         cmp        byte [rdx], 0x2d
00000000000026fa         jne        loc_2727

00000000000026fc         cmp        byte [rdx+1], 0x0
0000000000002700         je         loc_2727

0000000000002702         cmp        byte [rdx+2], 0x0
0000000000002706         jne        loc_2727

0000000000002708         jmp        unary_operator                              ; unary_operator
                        ; endp
000000000000270d         align      16

                     loc_2710:
0000000000002710         mov        rax, qword [r9+r10+8]                       ; CODE XREF=two_arguments+53
0000000000002715         add        r8d, 0x2
0000000000002719         mov        dword [pos], r8d                            ; pos
0000000000002720         cmp        byte [rax], 0x0
0000000000002723         sete       al
0000000000002726         ret
                        ; endp

                     loc_2727:
0000000000002727         sub        rsp, 0x8                                    ; CODE XREF=two_arguments+58, two_arguments+64, two_arguments+70
000000000000272b         call       beyond                                      ; beyond
                     posixtest:
0000000000002730         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0x9954), Begin of unwind block (FDE at 0x996c), CODE XREF=main+120, or+347
0000000000002734         cmp        edi, 0x2
0000000000002737         je         loc_2808

000000000000273d         jle        loc_27c0

0000000000002743         cmp        edi, 0x3
0000000000002746         je         loc_27b0

0000000000002748         cmp        edi, 0x4
000000000000274b         jne        loc_27f0

0000000000002751         movsxd     rdx, dword [pos]                            ; pos
0000000000002758         mov        r9, qword [argv]                            ; argv
000000000000275f         lea        rdi, qword [aSUnaryOperator+28]             ; 0x7e18
0000000000002766         mov        ecx, 0x2
000000000000276b         mov        r8, qword [r9+rdx*8]
000000000000276f         mov        rax, rdx
0000000000002772         lea        r10, qword [rdx*8]
000000000000277a         mov        rsi, r8
000000000000277d         rep  cmpsb byte [rsi], byte [rdi]
000000000000277f         seta       dl
0000000000002782         sbb        dl, 0x0
0000000000002785         test       dl, dl
0000000000002787         jne        loc_2818

000000000000278d         add        eax, 0x1
0000000000002790         cmp        eax, dword [argc]                           ; argc
0000000000002796         mov        dword [pos], eax                            ; pos
000000000000279c         jge        loc_286a

00000000000027a2         call       three_arguments                             ; three_arguments
00000000000027a7         add        rsp, 0x8
00000000000027ab         xor        eax, 0x1
00000000000027ae         ret
                        ; endp
00000000000027af         align      16

                     loc_27b0:
00000000000027b0         add        rsp, 0x8                                    ; CODE XREF=posixtest+22
00000000000027b4         jmp        three_arguments                             ; three_arguments
00000000000027b9         align      64

                     loc_27c0:
00000000000027c0         cmp        edi, 0x1                                    ; CODE XREF=posixtest+13
00000000000027c3         jne        loc_27f0

00000000000027c5         movsxd     rax, dword [pos]                            ; pos
00000000000027cc         lea        edx, dword [rax+1]
00000000000027cf         mov        dword [pos], edx                            ; pos
00000000000027d5         mov        rdx, qword [argv]                           ; argv
00000000000027dc         mov        rax, qword [rdx+rax*8]
00000000000027e0         cmp        byte [rax], 0x0
00000000000027e3         setne      al

                     loc_27e6:
00000000000027e6         add        rsp, 0x8                                    ; CODE XREF=posixtest+309
00000000000027ea         ret
                        ; endp
00000000000027eb         align      16

                     loc_27f0:
00000000000027f0         mov        eax, dword [pos]                            ; pos, CODE XREF=posixtest+27, posixtest+147

                     loc_27f6:
00000000000027f6         cmp        eax, dword [argc]                           ; argc, CODE XREF=posixtest+257, posixtest+286
00000000000027fc         jge        loc_286a

00000000000027fe         add        rsp, 0x8
0000000000002802         jmp        or                                          ; or
0000000000002804         align      8

                     loc_2808:
0000000000002808         add        rsp, 0x8                                    ; CODE XREF=posixtest+7
000000000000280c         jmp        two_arguments                               ; two_arguments
0000000000002811         align      8

                     loc_2818:
0000000000002818         lea        rdi, qword [aSUnaryOperator+30]             ; 0x7e1a, CODE XREF=posixtest+87
000000000000281f         mov        ecx, 0x2
0000000000002824         mov        rsi, r8
0000000000002827         rep  cmpsb byte [rsi], byte [rdi]
0000000000002829         seta       dl
000000000000282c         sbb        dl, 0x0
000000000000282f         test       dl, dl
0000000000002831         jne        loc_27f6

0000000000002833         mov        rsi, qword [r9+r10+0x18]
0000000000002838         lea        rdi, qword [aNull+5]                        ; 0x9349
000000000000283f         mov        ecx, 0x2
0000000000002844         rep  cmpsb byte [rsi], byte [rdi]
0000000000002846         seta       dl
0000000000002849         sbb        dl, 0x0
000000000000284c         test       dl, dl
000000000000284e         jne        loc_27f6

0000000000002850         add        eax, 0x1
0000000000002853         mov        dword [pos], eax                            ; pos
0000000000002859         call       two_arguments                               ; two_arguments
000000000000285e         add        dword [pos], 0x1                            ; pos
0000000000002865         jmp        loc_27e6

                     loc_286a:
000000000000286a         call       beyond                                      ; beyond, CODE XREF=posixtest+108, posixtest+204
000000000000286f         nop                                                    ; End of unwind block (FDE at 0x996c)

                     or:
0000000000002870         push       r15                                         ; Begin of unwind block (FDE at 0x99a0), CODE XREF=posixtest+210, three_arguments+262
0000000000002872         push       r14
0000000000002874         push       r13
0000000000002876         push       r12
0000000000002878         push       rbp
0000000000002879         push       rbx
000000000000287a         sub        rsp, 0x18
000000000000287e         mov        r11d, dword [pos]                           ; pos
0000000000002885         mov        r12d, dword [argc]                          ; argc
000000000000288c         mov        byte [rsp+0x58+var_49], 0x0
0000000000002891         nop        dword [rax]

                     loc_2898:
0000000000002898         cmp        r11d, r12d                                  ; CODE XREF=or+743
000000000000289b         mov        ebx, 0x1
00000000000028a0         lea        rbp, qword [aSExpectedFound+22]             ; 0x7e3e
00000000000028a7         jge        loc_2a5e

00000000000028ad         nop        dword [rax]

                     loc_28b0:
00000000000028b0         mov        r15, qword [argv]                           ; argv, CODE XREF=or+488
00000000000028b7         movsxd     r9, r11d
00000000000028ba         mov        r10, qword [r15+r9*8]
00000000000028be         movzx      r13d, byte [r10]
00000000000028c2         cmp        r13b, 0x21
00000000000028c6         jne        loc_2ba7

00000000000028cc         cmp        byte [r10+1], 0x0
00000000000028d1         jne        loc_2baf

00000000000028d7         lea        r9d, dword [r11+1]
00000000000028db         cmp        r9d, r12d
00000000000028de         mov        dword [pos], r9d                            ; pos
00000000000028e5         jge        loc_2a5e

00000000000028eb         lea        eax, dword [r12-2]
00000000000028f0         movsxd     r9, r9d
00000000000028f3         xor        ecx, ecx
00000000000028f5         mov        r14d, 0x1
00000000000028fb         sub        eax, r11d
00000000000028fe         lea        rsi, qword [r9+rax+1]
0000000000002903         jmp        loc_292d
0000000000002905         align      8

                     loc_2908:
0000000000002908         cmp        byte [r10+1], 0x0                           ; CODE XREF=or+202
000000000000290d         jne        loc_2a68

0000000000002913         lea        eax, dword [r9+1]
0000000000002917         add        r9, 0x1
000000000000291b         cmp        r9, rsi
000000000000291e         je         loc_2bce

0000000000002924         xor        r14d, 0x1
0000000000002928         mov        ecx, 0x1

                     loc_292d:
000000000000292d         mov        r10, qword [r15+r9*8]                       ; CODE XREF=or+147
0000000000002931         mov        r11d, r9d
0000000000002934         movzx      eax, byte [r10]
0000000000002938         cmp        al, 0x21
000000000000293a         je         loc_2908

000000000000293c         test       cl, cl
000000000000293e         jne        loc_2bc2

                     loc_2944:
0000000000002944         mov        r13d, eax                                   ; CODE XREF=or+857

                     loc_2947:
0000000000002947         cmp        r13b, 0x28                                  ; CODE XREF=or+826
000000000000294b         jne        loc_2a78

0000000000002951         cmp        byte [r10+1], 0x0
0000000000002956         jne        loc_2a78

000000000000295c         lea        r9d, dword [r11+1]
0000000000002960         cmp        r9d, r12d
0000000000002963         mov        dword [pos], r9d                            ; pos
000000000000296a         jge        loc_2a5e

0000000000002970         lea        eax, dword [r11+2]
0000000000002974         cmp        eax, r12d
0000000000002977         jge        loc_2bb7

000000000000297d         cdqe
000000000000297f         mov        r8d, 0x1
0000000000002985         lea        r10, qword [r15+rax*8]
0000000000002989         lea        eax, dword [r12-1]
000000000000298e         sub        eax, r11d
0000000000002991         mov        r11d, eax

                     loc_2994:
0000000000002994         mov        rsi, qword [r10]                            ; CODE XREF=or+339
0000000000002997         lea        rdi, qword [aNull+5]                        ; 0x9349
000000000000299e         mov        ecx, 0x2
00000000000029a3         rep  cmpsb byte [rsi], byte [rdi]
00000000000029a5         seta       al
00000000000029a8         sbb        al, 0x0
00000000000029aa         test       al, al
00000000000029ac         je         loc_29c8

00000000000029ae         cmp        r8d, 0x4
00000000000029b2         je         loc_2b60

00000000000029b8         add        r8d, 0x1
00000000000029bc         add        r10, 0x8
00000000000029c0         cmp        r11d, r8d
00000000000029c3         jne        loc_2994

00000000000029c5         nop        dword [rax]

                     loc_29c8:
00000000000029c8         mov        edi, r8d                                    ; CODE XREF=or+316, or+758, or+845
00000000000029cb         call       posixtest                                   ; posixtest
00000000000029d0         movsxd     rcx, dword [pos]                            ; pos
00000000000029d7         mov        rdx, qword [argv]                           ; argv
00000000000029de         mov        rsi, qword [rdx+rcx*8]
00000000000029e2         mov        r11, rcx
00000000000029e5         test       rsi, rsi
00000000000029e8         je         loc_2c1a

00000000000029ee         cmp        byte [rsi], 0x29
00000000000029f1         jne        loc_2bd9

00000000000029f7         cmp        byte [rsi+1], 0x0
00000000000029fb         jne        loc_2bd9

0000000000002a01         mov        r12d, dword [argc]                          ; argc
0000000000002a08         add        r11d, 0x1
0000000000002a0c         mov        dword [pos], r11d                           ; pos

                     loc_2a13:
0000000000002a13         xor        r14d, eax                                   ; CODE XREF=or+697, or+789, or+818
0000000000002a16         and        ebx, r14d
0000000000002a19         cmp        r12d, r11d
0000000000002a1c         jle        loc_2ae7

                     loc_2a22:
0000000000002a22         mov        rcx, qword [argv]                           ; argv, CODE XREF=or+625
0000000000002a29         movsxd     rax, r11d
0000000000002a2c         mov        rdi, rbp
0000000000002a2f         mov        r8, qword [rcx+rax*8]
0000000000002a33         mov        ecx, 0x3
0000000000002a38         mov        rsi, r8
0000000000002a3b         rep  cmpsb byte [rsi], byte [rdi]
0000000000002a3d         seta       al
0000000000002a40         sbb        al, 0x0
0000000000002a42         test       al, al
0000000000002a44         jne        loc_2b2e

0000000000002a4a         add        r11d, 0x1
0000000000002a4e         cmp        r11d, r12d
0000000000002a51         mov        dword [pos], r11d                           ; pos
0000000000002a58         jl         loc_28b0

                     loc_2a5e:
0000000000002a5e         call       beyond                                      ; beyond, CODE XREF=or+55, or+117, or+250, or+868
0000000000002a63         nop        dword [rax+rax]

                     loc_2a68:
0000000000002a68         test       cl, cl                                      ; CODE XREF=or+157
0000000000002a6a         je         loc_2a78

0000000000002a6c         mov        dword [pos], r9d                            ; pos
0000000000002a73         nop        dword [rax+rax]

                     loc_2a78:
0000000000002a78         mov        eax, r12d                                   ; CODE XREF=or+219, or+230, or+506, or+834
0000000000002a7b         sub        eax, r11d
0000000000002a7e         cmp        eax, 0x3
0000000000002a81         jle        loc_2b00

0000000000002a83         lea        rdi, qword [aEfDoesNotAccep+20]             ; 0x7dc6
0000000000002a8a         mov        ecx, 0x3
0000000000002a8f         mov        rsi, r10
0000000000002a92         rep  cmpsb byte [rsi], byte [rdi]
0000000000002a94         seta       al
0000000000002a97         sbb        al, 0x0
0000000000002a99         test       al, al
0000000000002a9b         jne        loc_2aaf

0000000000002a9d         mov        rdi, qword [r15+r9*8+0x10]
0000000000002aa2         call       binop                                       ; binop
0000000000002aa7         test       al, al
0000000000002aa9         jne        loc_2b8a

                     loc_2aaf:
0000000000002aaf         mov        rdi, qword [r15+r9*8+8]                     ; CODE XREF=or+555, loc_2b00
0000000000002ab4         call       binop                                       ; binop
0000000000002ab9         test       al, al
0000000000002abb         jne        loc_2b70

0000000000002ac1         cmp        r13b, 0x2d
0000000000002ac5         je         loc_2b08

                     loc_2ac7:
0000000000002ac7         test       r13b, r13b                                  ; CODE XREF=or+662, or+669, or+676
0000000000002aca         setne      al
0000000000002acd         add        r11d, 0x1
0000000000002ad1         xor        r14d, eax
0000000000002ad4         mov        dword [pos], r11d                           ; pos
0000000000002adb         and        ebx, r14d
0000000000002ade         cmp        r12d, r11d
0000000000002ae1         jg         loc_2a22

                     loc_2ae7:
0000000000002ae7         or         byte [rsp+0x58+var_49], bl                  ; CODE XREF=or+428

                     loc_2aeb:
0000000000002aeb         movzx      eax, byte [rsp+0x58+var_49]                 ; CODE XREF=or+730
0000000000002af0         add        rsp, 0x18
0000000000002af4         pop        rbx
0000000000002af5         pop        rbp
0000000000002af6         pop        r12
0000000000002af8         pop        r13
0000000000002afa         pop        r14
0000000000002afc         pop        r15
0000000000002afe         ret
                        ; endp
0000000000002aff         align      256

                     loc_2b00:
0000000000002b00         je         loc_2aaf                                    ; CODE XREF=or+529

0000000000002b02         cmp        r13b, 0x2d
0000000000002b06         jne        loc_2ac7

                     loc_2b08:
0000000000002b08         cmp        byte [r10+1], 0x0                           ; CODE XREF=or+597
0000000000002b0d         je         loc_2ac7

0000000000002b0f         cmp        byte [r10+2], 0x0
0000000000002b14         jne        loc_2ac7

0000000000002b16         call       unary_operator                              ; unary_operator
0000000000002b1b         mov        r11d, dword [pos]                           ; pos
0000000000002b22         mov        r12d, dword [argc]                          ; argc
0000000000002b29         jmp        loc_2a13

                     loc_2b2e:
0000000000002b2e         lea        rdi, qword [aSExpectedFound+25]             ; 0x7e41, CODE XREF=or+468
0000000000002b35         mov        ecx, 0x3
0000000000002b3a         mov        rsi, r8
0000000000002b3d         or         byte [rsp+0x58+var_49], bl
0000000000002b41         rep  cmpsb byte [rsi], byte [rdi]
0000000000002b43         seta       al
0000000000002b46         sbb        al, 0x0
0000000000002b48         test       al, al
0000000000002b4a         jne        loc_2aeb

0000000000002b4c         add        r11d, 0x1
0000000000002b50         mov        dword [pos], r11d                           ; pos
0000000000002b57         jmp        loc_2898
0000000000002b5c         align      32

                     loc_2b60:
0000000000002b60         mov        r8d, r12d                                   ; CODE XREF=or+322
0000000000002b63         sub        r8d, r9d
0000000000002b66         jmp        loc_29c8
0000000000002b6b         align      16

                     loc_2b70:
0000000000002b70         xor        edi, edi                                    ; CODE XREF=or+587
0000000000002b72         call       binary_operator                             ; binary_operator
0000000000002b77         mov        r11d, dword [pos]                           ; pos
0000000000002b7e         mov        r12d, dword [argc]                          ; argc
0000000000002b85         jmp        loc_2a13

                     loc_2b8a:
0000000000002b8a         mov        edi, 0x1                                    ; CODE XREF=or+569
0000000000002b8f         call       binary_operator                             ; binary_operator
0000000000002b94         mov        r11d, dword [pos]                           ; pos
0000000000002b9b         mov        r12d, dword [argc]                          ; argc
0000000000002ba2         jmp        loc_2a13

                     loc_2ba7:
0000000000002ba7         xor        r14d, r14d                                  ; CODE XREF=or+86
0000000000002baa         jmp        loc_2947

                     loc_2baf:
0000000000002baf         xor        r14d, r14d                                  ; CODE XREF=or+97
0000000000002bb2         jmp        loc_2a78

                     loc_2bb7:
0000000000002bb7         mov        r8d, 0x1                                    ; CODE XREF=or+263
0000000000002bbd         jmp        loc_29c8

                     loc_2bc2:
0000000000002bc2         mov        dword [pos], r9d                            ; pos, CODE XREF=or+206
0000000000002bc9         jmp        loc_2944

                     loc_2bce:
0000000000002bce         mov        dword [pos], eax                            ; pos, CODE XREF=or+174
0000000000002bd4         jmp        loc_2a5e

                     loc_2bd9:
0000000000002bd9         mov        edi, 0x1                                    ; CODE XREF=or+385, or+395
0000000000002bde         call       quote_n                                     ; quote_n
0000000000002be3         lea        rsi, qword [aNull+5]                        ; 0x9349
0000000000002bea         xor        edi, edi
0000000000002bec         mov        rbp, rax
0000000000002bef         call       quote_n                                     ; quote_n
0000000000002bf4         lea        rsi, qword [aSExpectedFound]                ; argument "msgid" for method j_dcgettext, "%s expected, found %s"
0000000000002bfb         mov        rbx, rax
0000000000002bfe         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c03         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c05         call       j_dcgettext                                 ; dcgettext
0000000000002c0a         mov        rdx, rbp
0000000000002c0d         mov        rdi, rax
0000000000002c10         mov        rsi, rbx
0000000000002c13         xor        eax, eax
0000000000002c15         call       test_syntax_error                           ; test_syntax_error

                     loc_2c1a:
0000000000002c1a         lea        rdi, qword [aNull+5]                        ; 0x9349, CODE XREF=or+376
0000000000002c21         call       quote                                       ; quote
0000000000002c26         lea        rsi, qword [aSExpected]                     ; argument "msgid" for method j_dcgettext, "%s expected"
0000000000002c2d         mov        rbx, rax
0000000000002c30         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002c32         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002c37         call       j_dcgettext                                 ; dcgettext
0000000000002c3c         mov        rsi, rbx
0000000000002c3f         mov        rdi, rax
0000000000002c42         xor        eax, eax
0000000000002c44         call       test_syntax_error                           ; test_syntax_error
0000000000002c49         nop        dword [rax]                                 ; End of unwind block (FDE at 0x99a0)

                     three_arguments:
0000000000002c50         movsxd     rax, dword [pos]                            ; Begin of unwind block (FDE at 0x99ec), pos, CODE XREF=posixtest+114, posixtest+132
0000000000002c57         mov        r10, qword [argv]                           ; argv
0000000000002c5e         push       rbx
0000000000002c5f         mov        r9, rax
0000000000002c62         add        rax, 0x1
0000000000002c66         mov        r11, qword [r10+rax*8]
0000000000002c6a         lea        rbx, qword [rax*8]
0000000000002c72         mov        rdi, r11
0000000000002c75         call       binop                                       ; binop
0000000000002c7a         test       al, al
0000000000002c7c         jne        loc_2d60

0000000000002c82         mov        rdx, qword [r10+rbx-8]
0000000000002c87         lea        rdi, qword [aSUnaryOperator+28]             ; 0x7e18
0000000000002c8e         mov        ecx, 0x2
0000000000002c93         mov        rsi, rdx
0000000000002c96         rep  cmpsb byte [rsi], byte [rdi]
0000000000002c98         seta       al
0000000000002c9b         sbb        al, 0x0
0000000000002c9d         test       al, al
0000000000002c9f         jne        loc_2cc8

0000000000002ca1         add        r9d, 0x1
0000000000002ca5         cmp        r9d, dword [argc]                           ; argc
0000000000002cac         mov        dword [pos], r9d                            ; pos
0000000000002cb3         jge        loc_2d93

0000000000002cb9         call       two_arguments                               ; two_arguments
0000000000002cbe         pop        rbx
0000000000002cbf         xor        eax, 0x1
0000000000002cc2         ret
                        ; endp
0000000000002cc3         align      8

                     loc_2cc8:
0000000000002cc8         lea        rdi, qword [aSUnaryOperator+30]             ; 0x7e1a, CODE XREF=three_arguments+79
0000000000002ccf         mov        ecx, 0x2
0000000000002cd4         mov        rsi, rdx
0000000000002cd7         rep  cmpsb byte [rsi], byte [rdi]
0000000000002cd9         seta       al
0000000000002cdc         sbb        al, 0x0
0000000000002cde         test       al, al
0000000000002ce0         jne        loc_2d18

0000000000002ce2         mov        rsi, qword [r10+rbx+8]
0000000000002ce7         lea        rdi, qword [aNull+5]                        ; 0x9349
0000000000002cee         mov        ecx, 0x2
0000000000002cf3         rep  cmpsb byte [rsi], byte [rdi]
0000000000002cf5         seta       al
0000000000002cf8         sbb        al, 0x0
0000000000002cfa         test       al, al
0000000000002cfc         jne        loc_2d18

0000000000002cfe         cmp        byte [r11], 0x0
0000000000002d02         pop        rbx
0000000000002d03         setne      al
0000000000002d06         add        r9d, 0x3
0000000000002d0a         mov        dword [pos], r9d                            ; pos
0000000000002d11         ret
                        ; endp
0000000000002d12         align      8

                     loc_2d18:
0000000000002d18         lea        rdi, qword [aSExpectedFound+22]             ; 0x7e3e, CODE XREF=three_arguments+144, three_arguments+172
0000000000002d1f         mov        ecx, 0x3
0000000000002d24         mov        rsi, r11
0000000000002d27         rep  cmpsb byte [rsi], byte [rdi]
0000000000002d29         seta       al
0000000000002d2c         sbb        al, 0x0
0000000000002d2e         test       al, al
0000000000002d30         je         loc_2d4c

0000000000002d32         lea        rdi, qword [aSExpectedFound+25]             ; 0x7e41
0000000000002d39         mov        ecx, 0x3
0000000000002d3e         mov        rsi, r11
0000000000002d41         rep  cmpsb byte [rsi], byte [rdi]
0000000000002d43         seta       al
0000000000002d46         sbb        al, 0x0
0000000000002d48         test       al, al
0000000000002d4a         jne        loc_2d68

                     loc_2d4c:
0000000000002d4c         cmp        r9d, dword [argc]                           ; argc, CODE XREF=three_arguments+224
0000000000002d53         jge        loc_2d93

0000000000002d55         pop        rbx
0000000000002d56         jmp        or                                          ; or
0000000000002d5b         align      32

                     loc_2d60:
0000000000002d60         pop        rbx                                         ; CODE XREF=three_arguments+44
0000000000002d61         xor        edi, edi
0000000000002d63         jmp        binary_operator                             ; binary_operator
                        ; endp

                     loc_2d68:
0000000000002d68         mov        rdi, r11                                    ; CODE XREF=three_arguments+250
0000000000002d6b         call       quote                                       ; quote
0000000000002d70         lea        rsi, qword [aSBinaryOperato]                ; argument "msgid" for method j_dcgettext, "%s: binary operator expected"
0000000000002d77         mov        rbx, rax
0000000000002d7a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d7c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d81         call       j_dcgettext                                 ; dcgettext
0000000000002d86         mov        rsi, rbx
0000000000002d89         mov        rdi, rax
0000000000002d8c         xor        eax, eax
0000000000002d8e         call       test_syntax_error                           ; test_syntax_error

                     loc_2d93:
0000000000002d93         call       beyond                                      ; beyond, CODE XREF=three_arguments+99, three_arguments+259
0000000000002d98         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x99ec)
                     usage:
0000000000002da0         push       r13                                         ; Begin of unwind block (FDE at 0x9a1c)
0000000000002da2         push       r12
0000000000002da4         push       rbp
0000000000002da5         push       rbx
0000000000002da6         mov        ebp, edi
0000000000002da8         sub        rsp, 0x88
0000000000002daf         mov        rax, qword [fs:0x28]
0000000000002db8         mov        qword [rsp+0x108+var_90], rax
0000000000002dbd         xor        eax, eax
0000000000002dbf         test       edi, edi
0000000000002dc1         je         loc_2dfd

0000000000002dc3         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000002dca         mov        rbx, qword [program_name]                   ; program_name
0000000000002dd1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002dd6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002dd8         call       j_dcgettext                                 ; dcgettext
0000000000002ddd         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002de4         mov        rdx, rax
0000000000002de7         mov        rcx, rbx
0000000000002dea         mov        esi, 0x1
0000000000002def         xor        eax, eax
0000000000002df1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2df6:
0000000000002df6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1142
0000000000002df8         call       j_exit                                      ; exit
                        ; endp

                     loc_2dfd:
0000000000002dfd         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+33
0000000000002e04         lea        rsi, qword [aUsageTestExpre]                ; argument "msgid" for method j_dcgettext, "Usage: test EXPRESSION\\n  or:  test\\n  or:  [ EXPRESSION ]\\n  or:  [ ]\\n  or:  [ OPTION\\n"
0000000000002e0b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e10         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e12         call       j_dcgettext                                 ; dcgettext
0000000000002e17         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e1a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e1d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e22         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e29         lea        rsi, qword [aExitWithTheSta]                ; argument "msgid" for method j_dcgettext, "Exit with the status determined by EXPRESSION.\\n\\n"
0000000000002e30         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e35         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e37         call       j_dcgettext                                 ; dcgettext
0000000000002e3c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e3f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e42         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e47         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e4e         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000002e55         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e5a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e5c         call       j_dcgettext                                 ; dcgettext
0000000000002e61         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e64         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e67         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e6c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e73         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002e7a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e7f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e81         call       j_dcgettext                                 ; dcgettext
0000000000002e86         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002e89         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002e8c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002e91         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002e98         lea        rsi, qword [aNanOmittedExpr]                ; argument "msgid" for method j_dcgettext, "\\nAn omitted EXPRESSION defaults to false.  Otherwise,\\nEXPRESSION is true or false and sets exit status.  It is one of:\\n"
0000000000002e9f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ea4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ea6         call       j_dcgettext                                 ; dcgettext
0000000000002eab         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002eae         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002eb1         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002eb6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002ebd         lea        rsi, qword [aNExpressionExp]                ; argument "msgid" for method j_dcgettext, "\\n  ( EXPRESSION )               EXPRESSION is true\\n  ! EXPRESSION                 EXPRESSION is false\\n  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 are true\\n  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 is true\\n"
0000000000002ec4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ec9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ecb         call       j_dcgettext                                 ; dcgettext
0000000000002ed0         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002ed3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002ed6         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002edb         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002ee2         lea        rsi, qword [aNNStringTheLen]                ; argument "msgid" for method j_dcgettext, "\\n  -n STRING            the length of STRING is nonzero\\n  STRING               equivalent to -n STRING\\n  -z STRING            the length of STRING is zero\\n  STRING1 = STRING2    the strings are equal\\n  STRING1 != STRING2   the strings are not equal\\n"
0000000000002ee9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002eee         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ef0         call       j_dcgettext                                 ; dcgettext
0000000000002ef5         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002ef8         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002efb         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f00         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f07         lea        rsi, qword [aNInteger1EqInt]                ; argument "msgid" for method j_dcgettext, "\\n  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2\\n  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER2\\n  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2\\n  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER…"
0000000000002f0e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f13         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f15         call       j_dcgettext                                 ; dcgettext
0000000000002f1a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f1d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f20         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f25         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f2c         lea        rsi, qword [aNFile1EfFile2F]                ; argument "msgid" for method j_dcgettext, "\\n  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inode numbers\\n  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2\\n  FILE1 -ot FILE2   FILE1 is older than FILE2\\n"
0000000000002f33         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f38         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f3a         call       j_dcgettext                                 ; dcgettext
0000000000002f3f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f42         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f45         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f4a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f51         lea        rsi, qword [aNBFileFileExis]                ; argument "msgid" for method j_dcgettext, "\\n  -b FILE     FILE exists and is block special\\n  -c FILE     FILE exists and is character special\\n  -d FILE     FILE exists and is a directory\\n  -e FILE     FILE exists\\n"
0000000000002f58         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f5d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f5f         call       j_dcgettext                                 ; dcgettext
0000000000002f64         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f67         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f6a         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f6f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f76         lea        rsi, qword [aFFileFileExist]                ; argument "msgid" for method j_dcgettext, "  -f FILE     FILE exists and is a regular file\\n  -g FILE     FILE exists and is set-group-ID\\n  -G FILE     FILE exists and is owned by the effective group ID\\n  -h FILE     FILE exists and is a symbolic link (same as -L)\\n  -k FILE     FILE exists and has i…"
0000000000002f7d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f82         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f84         call       j_dcgettext                                 ; dcgettext
0000000000002f89         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f8c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f8f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f94         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f9b         lea        rsi, qword [aLFileFileExist]                ; argument "msgid" for method j_dcgettext, "  -L FILE     FILE exists and is a symbolic link (same as -h)\\n  -N FILE     FILE exists and has been modified since it was last read\\n  -O FILE     FILE exists and is owned by the effective user ID\\n  -p FILE     FILE exists and is a named pipe\\n  -r FILE    …"
0000000000002fa2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fa7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fa9         call       j_dcgettext                                 ; dcgettext
0000000000002fae         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002fb1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002fb4         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002fb9         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002fc0         lea        rsi, qword [aSFileFileExist]                ; argument "msgid" for method j_dcgettext, "  -S FILE     FILE exists and is a socket\\n  -t FD       file descriptor FD is opened on a terminal\\n  -u FILE     FILE exists and its set-user-ID bit is set\\n  -w FILE     FILE exists and write permission is granted\\n  -x FILE     FILE exists and execute (or …"
0000000000002fc7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fcc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fce         call       j_dcgettext                                 ; dcgettext
0000000000002fd3         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002fd6         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002fd9         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002fde         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002fe5         lea        rsi, qword [aNexceptForHAnd]                ; argument "msgid" for method j_dcgettext, "\\nExcept for -h and -L, all FILE-related tests dereference symbolic links.\\nBeware that parentheses need to be escaped (e.g., by backslashes) for shells.\\nINTEGER may also be -l STRING, which evaluates to the length of STRING.\\n"
0000000000002fec         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ff1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ff3         call       j_dcgettext                                 ; dcgettext
0000000000002ff8         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002ffb         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002ffe         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003003         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000300a         lea        rsi, qword [aNnoteBinaryAAn]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: Binary -a and -o are inherently ambiguous.  Use 'test EXPR1 && test\\nEXPR2' or 'test EXPR1 || test EXPR2' instead.\\n"
0000000000003011         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003016         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003018         call       j_dcgettext                                 ; dcgettext
000000000000301d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003020         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003023         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003028         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000302f         lea        rsi, qword [aNnoteHonorsThe]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: [ honors the --help and --version options, but test does not.\\ntest treats each of those as it treats any other nonempty STRING.\\n"
0000000000003036         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000303b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000303d         call       j_dcgettext                                 ; dcgettext
0000000000003042         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003045         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003048         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000304d         lea        rsi, qword [aTestAndor]                     ; argument "msgid" for method j_dcgettext, "test and/or ["
0000000000003054         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003059         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000305b         call       j_dcgettext                                 ; dcgettext
0000000000003060         lea        rsi, qword [aNnoteYourShell]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n"
0000000000003067         mov        rbx, rax
000000000000306a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000306f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003071         call       j_dcgettext                                 ; dcgettext
0000000000003076         mov        rdx, rbx
0000000000003079         mov        rsi, rax
000000000000307c         mov        edi, 0x1
0000000000003081         xor        eax, eax
0000000000003083         lea        rbx, qword [aSBinaryOperato+29]             ; 0x7e61
000000000000308a         call       j___printf_chk                              ; __printf_chk
000000000000308f         lea        rax, qword [aTestAndor+12]                  ; 0x7e72
0000000000003096         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
000000000000309d         mov        qword [rsp+0x108+var_A8], 0x0
00000000000030a6         mov        qword [rsp+0x108+var_A0], 0x0
00000000000030af         mov        rdx, rsp
00000000000030b2         mov        qword [rsp+0x108+var_108], rax
00000000000030b6         lea        rax, qword [aTestInvocation]                ; "test invocation"
00000000000030bd         mov        qword [rsp+0x108+var_D8], rcx
00000000000030c2         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
00000000000030c9         mov        qword [rsp+0x108+var_100], rax
00000000000030ce         lea        rax, qword [aCoreutils]                     ; "coreutils"
00000000000030d5         mov        qword [rsp+0x108+var_C8], rcx
00000000000030da         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
00000000000030e1         mov        qword [rsp+0x108+var_F8], rax
00000000000030e6         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
00000000000030ed         mov        qword [rsp+0x108+var_B8], rcx
00000000000030f2         mov        qword [rsp+0x108+var_F0], rax
00000000000030f7         lea        rax, qword [aSha224sum]                     ; "sha224sum"
00000000000030fe         mov        qword [rsp+0x108+var_E8], rax
0000000000003103         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
000000000000310a         mov        qword [rsp+0x108+var_E0], rax
000000000000310f         mov        qword [rsp+0x108+var_D0], rax
0000000000003114         mov        qword [rsp+0x108+var_C0], rax
0000000000003119         mov        qword [rsp+0x108+var_B0], rax
000000000000311e         nop

                     loc_3120:
0000000000003120         add        rdx, 0x10                                   ; CODE XREF=usage+925
0000000000003124         mov        rdi, qword [rdx]
0000000000003127         test       rdi, rdi
000000000000312a         je         loc_313f

000000000000312c         mov        ecx, 0x5
0000000000003131         mov        rsi, rbx
0000000000003134         rep  cmpsb byte [rsi], byte [rdi]
0000000000003136         seta       al
0000000000003139         sbb        al, 0x0
000000000000313b         test       al, al
000000000000313d         jne        loc_3120

                     loc_313f:
000000000000313f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+906
0000000000003143         xor        edi, edi
0000000000003145         mov        edx, 0x5
000000000000314a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000003151         test       r12, r12
0000000000003154         je         loc_321b

000000000000315a         call       j_dcgettext                                 ; dcgettext
000000000000315f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003166         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x7ee8
000000000000316d         mov        rsi, rax
0000000000003170         mov        edi, 0x1
0000000000003175         xor        eax, eax
0000000000003177         call       j___printf_chk                              ; __printf_chk
000000000000317c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000317e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000003183         call       j_setlocale                                 ; setlocale
0000000000003188         test       rax, rax
000000000000318b         je         loc_31a9

000000000000318d         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x7ef6
0000000000003194         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000003199         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000319c         call       j_strncmp                                   ; strncmp
00000000000031a1         test       eax, eax
00000000000031a3         jne        loc_32b0

                     loc_31a9:
00000000000031a9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1003, usage+1333
00000000000031b0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000031b2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000031b7         call       j_dcgettext                                 ; dcgettext
00000000000031bc         lea        rcx, qword [aSBinaryOperato+29]             ; 0x7e61
00000000000031c3         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000031ca         mov        rsi, rax
00000000000031cd         mov        edi, 0x1
00000000000031d2         xor        eax, eax
00000000000031d4         call       j___printf_chk                              ; __printf_chk
00000000000031d9         cmp        r12, rbx
00000000000031dc         lea        rcx, qword [aNsOnlineHelpSn+22]             ; 0x7ee7
00000000000031e3         lea        rbx, qword [aMulticallInvoc+10]             ; 0x7e8e
00000000000031ea         cmovne     rbx, rcx

                     loc_31ee:
00000000000031ee         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1284
00000000000031f5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000031f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000031fc         call       j_dcgettext                                 ; dcgettext
0000000000003201         mov        rcx, rbx
0000000000003204         mov        rsi, rax
0000000000003207         mov        rdx, r12
000000000000320a         mov        edi, 0x1
000000000000320f         xor        eax, eax
0000000000003211         call       j___printf_chk                              ; __printf_chk
0000000000003216         jmp        loc_2df6

                     loc_321b:
000000000000321b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+948
0000000000003220         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003227         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0x7ee8
000000000000322e         mov        rsi, rax
0000000000003231         mov        edi, 0x1
0000000000003236         xor        eax, eax
0000000000003238         call       j___printf_chk                              ; __printf_chk
000000000000323d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000323f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000003244         call       j_setlocale                                 ; setlocale
0000000000003249         test       rax, rax
000000000000324c         je         loc_3266

000000000000324e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0x7ef6
0000000000003255         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
000000000000325a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000325d         call       j_strncmp                                   ; strncmp
0000000000003262         test       eax, eax
0000000000003264         jne        loc_32a9

                     loc_3266:
0000000000003266         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1196
000000000000326d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003272         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003274         lea        r12, qword [aSBinaryOperato+29]             ; 0x7e61
000000000000327b         lea        rbx, qword [aMulticallInvoc+10]             ; 0x7e8e
0000000000003282         call       j_dcgettext                                 ; dcgettext
0000000000003287         lea        rcx, qword [aSBinaryOperato+29]             ; 0x7e61
000000000000328e         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003295         mov        rsi, rax
0000000000003298         mov        edi, 0x1
000000000000329d         xor        eax, eax
000000000000329f         call       j___printf_chk                              ; __printf_chk
00000000000032a4         jmp        loc_31ee

                     loc_32a9:
00000000000032a9         lea        r12, qword [aSBinaryOperato+29]             ; 0x7e61, CODE XREF=usage+1220

                     loc_32b0:
00000000000032b0         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+1027
00000000000032b7         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000032be         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032c0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000032c5         call       j_dcgettext                                 ; dcgettext
00000000000032ca         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000032cd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000032d0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000032d5         jmp        loc_31a9
00000000000032da         align      32                                          ; End of unwind block (FDE at 0x9a1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
00000000000032e0         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x9a74), file_name
00000000000032e7         ret
                        ; endp
00000000000032e8         align      16                                          ; End of unwind block (FDE at 0x9a74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
00000000000032f0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x9a88), ignore_EPIPE
00000000000032f7         ret
                        ; endp
00000000000032f8         align      256                                         ; End of unwind block (FDE at 0x9a88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000003300         push       rbp                                         ; Begin of unwind block (FDE at 0x9a9c), DATA XREF=main+67
0000000000003301         push       rbx
0000000000003302         sub        rsp, 0x8
0000000000003306         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000330d         call       close_stream                                ; close_stream
0000000000003312         test       eax, eax
0000000000003314         je         loc_332c

0000000000003316         call       j___errno_location                          ; __errno_location
000000000000331b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000003322         mov        rbx, rax
0000000000003325         je         loc_3343

0000000000003327         cmp        dword [rax], 0x20
000000000000332a         jne        loc_3343

                     loc_332c:
000000000000332c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000003333         call       close_stream                                ; close_stream
0000000000003338         test       eax, eax
000000000000333a         jne        loc_3382

000000000000333c         add        rsp, 0x8
0000000000003340         pop        rbx
0000000000003341         pop        rbp
0000000000003342         ret
                        ; endp

                     loc_3343:
0000000000003343         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
000000000000334a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000334c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003351         call       j_dcgettext                                 ; dcgettext
0000000000003356         mov        rdi, qword [file_name]                      ; file_name
000000000000335d         mov        rbp, rax
0000000000003360         test       rdi, rdi
0000000000003363         je         loc_338d

0000000000003365         call       quotearg_colon                              ; quotearg_colon
000000000000336a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000336c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003373         mov        rcx, rax
0000000000003376         mov        r8, rbp
0000000000003379         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000337b         xor        eax, eax
000000000000337d         call       j_error                                     ; error

                     loc_3382:
0000000000003382         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003388         call       j__exit                                     ; _exit
                        ; endp

                     loc_338d:
000000000000338d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
000000000000338f         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x8d93
0000000000003396         mov        rcx, rax
0000000000003399         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000339b         xor        eax, eax
000000000000339d         call       j_error                                     ; error
00000000000033a2         jmp        loc_3382
00000000000033a4         align      16                                          ; End of unwind block (FDE at 0x9a9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     umaxtostr:
00000000000033b0         lea        rcx, qword [rsi+0x14]                       ; Begin of unwind block (FDE at 0x9acc), CODE XREF=binary_operator+846, binary_operator+1168
00000000000033b4         mov        byte [rsi+0x14], 0x0
00000000000033b8         movabs     rsi, 0xcccccccccccccccd
00000000000033c2         nop        word [rax+rax]

                     loc_33c8:
00000000000033c8         mov        rax, rdi                                    ; CODE XREF=umaxtostr+60
00000000000033cb         sub        rcx, 0x1
00000000000033cf         mul        rsi
00000000000033d2         shr        rdx, 0x3
00000000000033d6         lea        rax, qword [rdx+rdx*4]
00000000000033da         add        rax, rax
00000000000033dd         sub        rdi, rax
00000000000033e0         add        edi, 0x30
00000000000033e3         test       rdx, rdx
00000000000033e6         mov        byte [rcx], dil
00000000000033e9         mov        rdi, rdx
00000000000033ec         jne        loc_33c8

00000000000033ee         mov        rax, rcx
00000000000033f1         ret
                        ; endp
00000000000033f2         align      1024                                        ; End of unwind block (FDE at 0x9acc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000003400         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x9ae4), CODE XREF=main+14
0000000000003403         push       rbx
0000000000003404         je         loc_347d

0000000000003406         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000340b         mov        rbx, rdi
000000000000340e         call       j_strrchr                                   ; strrchr
0000000000003413         test       rax, rax
0000000000003416         je         loc_346d

0000000000003418         lea        r8, qword [rax+1]
000000000000341c         mov        rdx, r8
000000000000341f         sub        rdx, rbx
0000000000003422         cmp        rdx, 0x6
0000000000003426         jle        loc_346d

0000000000003428         lea        rsi, qword [rax-6]
000000000000342c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000003433         mov        ecx, 0x7
0000000000003438         rep  cmpsb byte [rsi], byte [rdi]
000000000000343a         seta       dl
000000000000343d         sbb        dl, 0x0
0000000000003440         test       dl, dl
0000000000003442         jne        loc_346d

0000000000003444         lea        rdi, qword [aLibs+8]                        ; 0x8dd8
000000000000344b         mov        ecx, 0x3
0000000000003450         mov        rsi, r8
0000000000003453         mov        rbx, r8
0000000000003456         rep  cmpsb byte [rsi], byte [rdi]
0000000000003458         seta       dl
000000000000345b         sbb        dl, 0x0
000000000000345e         test       dl, dl
0000000000003460         jne        loc_346d

0000000000003462         lea        rbx, qword [rax+4]
0000000000003466         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_346d:
000000000000346d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000003474         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000347b         pop        rbx
000000000000347c         ret
                        ; endp

                     loc_347d:
000000000000347d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000003484         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000348b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000003490         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000003495         call       j_fwrite                                    ; fwrite
000000000000349a         call       j_abort                                     ; abort
                        ; endp
000000000000349f         align      32                                          ; End of unwind block (FDE at 0x9ae4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
00000000000034a0         push       rbp                                         ; Begin of unwind block (FDE at 0x9b04), CODE XREF=sub_3cd0+2597, sub_3cd0+2619
00000000000034a1         push       rbx
00000000000034a2         mov        rbp, rdi
00000000000034a5         mov        ebx, esi
00000000000034a7         sub        rsp, 0x8
00000000000034ab         call       locale_charset                              ; locale_charset
00000000000034b0         movzx      edx, byte [rax]
00000000000034b3         and        edx, 0xffffffdf
00000000000034b6         cmp        dl, 0x55
00000000000034b9         je         loc_3530

00000000000034bb         cmp        dl, 0x47
00000000000034be         je         loc_34e0

                     loc_34c0:
00000000000034c0         lea        rax, qword [aLibs+27]                       ; 0x8deb, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
00000000000034c7         lea        rdx, qword [aLibs+29]                       ; 0x8ded
00000000000034ce         cmp        ebx, 0x9
00000000000034d1         cmovne     rax, rdx
00000000000034d5         add        rsp, 0x8
00000000000034d9         pop        rbx
00000000000034da         pop        rbp
00000000000034db         ret
                        ; endp
00000000000034dc         align      32

                     loc_34e0:
00000000000034e0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
00000000000034e4         and        edx, 0xffffffdf
00000000000034e7         cmp        dl, 0x42
00000000000034ea         jne        loc_34c0

00000000000034ec         cmp        byte [rax+2], 0x31
00000000000034f0         jne        loc_34c0

00000000000034f2         cmp        byte [rax+3], 0x38
00000000000034f6         jne        loc_34c0

00000000000034f8         cmp        byte [rax+4], 0x30
00000000000034fc         jne        loc_34c0

00000000000034fe         cmp        byte [rax+5], 0x33
0000000000003502         jne        loc_34c0

0000000000003504         cmp        byte [rax+6], 0x30
0000000000003508         jne        loc_34c0

000000000000350a         cmp        byte [rax+7], 0x0
000000000000350e         jne        loc_34c0

0000000000003510         cmp        byte [rbp], 0x60
0000000000003514         lea        rax, qword [aLibs+20]                       ; 0x8de4
000000000000351b         lea        rdx, qword [aLibs+24]                       ; 0x8de8
0000000000003522         cmovne     rax, rdx
0000000000003526         add        rsp, 0x8
000000000000352a         pop        rbx
000000000000352b         pop        rbp
000000000000352c         ret
                        ; endp
000000000000352d         align      16

                     loc_3530:
0000000000003530         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000003534         and        edx, 0xffffffdf
0000000000003537         cmp        dl, 0x54
000000000000353a         jne        loc_34c0

000000000000353c         movzx      edx, byte [rax+2]
0000000000003540         and        edx, 0xffffffdf
0000000000003543         cmp        dl, 0x46
0000000000003546         jne        loc_34c0

000000000000354c         cmp        byte [rax+3], 0x2d
0000000000003550         jne        loc_34c0

0000000000003556         cmp        byte [rax+4], 0x38
000000000000355a         jne        loc_34c0

0000000000003560         cmp        byte [rax+5], 0x0
0000000000003564         jne        loc_34c0

000000000000356a         cmp        byte [rbp], 0x60
000000000000356e         lea        rax, qword [aLibs+12]                       ; 0x8ddc
0000000000003575         lea        rdx, qword [aLibs+16]                       ; 0x8de0
000000000000357c         cmovne     rax, rdx
0000000000003580         add        rsp, 0x8
0000000000003584         pop        rbx
0000000000003585         pop        rbp
0000000000003586         ret
                        ; endp
0000000000003587         align      16                                          ; End of unwind block (FDE at 0x9b04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000003590         push       r15                                         ; Begin of unwind block (FDE at 0x9b48), CODE XREF=sub_3cd0+1165, sub_3cd0+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000003592         push       r14
0000000000003594         mov        r15d, r8d
0000000000003597         push       r13
0000000000003599         push       r12
000000000000359b         mov        r14, rdi
000000000000359e         push       rbp
000000000000359f         push       rbx
00000000000035a0         mov        ebx, r9d
00000000000035a3         mov        r13, rsi
00000000000035a6         mov        rbp, rcx
00000000000035a9         and        ebx, 0x2
00000000000035ac         sub        rsp, 0xb8
00000000000035b3         mov        rax, qword [rsp+0xe8+arg_0]
00000000000035bb         mov        qword [rsp+0xe8+var_D8], rdx
00000000000035c0         mov        dword [rsp+0xe8+var_E0], r8d
00000000000035c5         mov        dword [rsp+0xe8+var_70], r9d
00000000000035ca         mov        qword [rsp+0xe8+var_C8], rax
00000000000035cf         mov        rax, qword [rsp+0xe8+arg_8]
00000000000035d7         mov        qword [rsp+0xe8+var_80], rax
00000000000035dc         mov        rax, qword [rsp+0xe8+arg_10]
00000000000035e4         mov        qword [rsp+0xe8+var_88], rax
00000000000035e9         mov        rax, qword [fs:0x28]
00000000000035f2         mov        qword [rsp+0xe8+var_40], rax
00000000000035fa         xor        eax, eax
00000000000035fc         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000003601         cmp        r15d, 0xa
0000000000003605         mov        qword [rsp+0xe8+var_90], rax
000000000000360a         ja         loc_47bf

0000000000003610         lea        rcx, qword [switch_table_8e40]              ; switch_table_8e40
0000000000003617         mov        edx, r15d
000000000000361a         movsxd     rax, dword [rcx+rdx*4]
000000000000361e         add        rax, rcx
0000000000003621         jmp        rax                                         ; switch statement using table at 0x8e40, with 11 cases, 0x3623,0x41f4,0x4250,0x42a5,0x42ea,0x4324,0x43ca,0x4404,0x45f8

                     loc_3623:
0000000000003623         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_3cd0+1318
0000000000003628         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000362d         xor        r12d, r12d
0000000000003630         mov        qword [rsp+0xe8+var_98], 0x0
0000000000003639         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000363e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_3643:
0000000000003643         lea        rax, qword [aLibs+29]                       ; 0x8ded, CODE XREF=sub_3cd0+1876
000000000000364a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003653         xor        r15d, r15d
0000000000003656         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000365e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_3663:
0000000000003663         xor        r11d, r11d                                  ; CODE XREF=sub_3cd0+180, sub_3cd0+1400, sub_3cd0+1488, sub_3cd0+1557, sub_3cd0+1615, sub_3cd0+1781, sub_3cd0+1839, sub_3cd0+2408, sub_3cd0+2485
0000000000003666         mov        rax, rbp
0000000000003669         mov        r8d, r12d
000000000000366c         mov        rbp, r11
000000000000366f         mov        r11, rax
0000000000003672         nop        word [rax+rax]

                     loc_3678:
0000000000003678         cmp        r11, rbp                                    ; CODE XREF=sub_3780+194
000000000000367b         setne      r12b
000000000000367f         cmp        r11, 0xffffffffffffffff
0000000000003683         jne        loc_3692

0000000000003685         mov        rax, qword [rsp+0xe8+var_D8]
000000000000368a         cmp        byte [rax+rbp], 0x0
000000000000368e         setne      r12b

                     loc_3692:
0000000000003692         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000003695         je         loc_3cf0

000000000000369b         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000036a0         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000036a5         lea        r9, qword [rdi+rbp]
00000000000036a9         setne      al
00000000000036ac         and        al, byte [rsp+0xe8+var_DB]
00000000000036b0         mov        r10d, eax
00000000000036b3         je         loc_3760

00000000000036b9         mov        rax, qword [rsp+0xe8+var_D0]
00000000000036be         test       rax, rax
00000000000036c1         je         loc_3af0

00000000000036c7         cmp        r11, 0xffffffffffffffff
00000000000036cb         lea        rbx, qword [rbp+rax]
00000000000036d0         jne        loc_3700

00000000000036d2         cmp        rax, 0x1
00000000000036d6         jbe        loc_3700

00000000000036d8         mov        byte [rsp+0xe8+var_B0], r8b
00000000000036dd         mov        byte [rsp+0xe8+var_B8], r10b
00000000000036e2         mov        qword [rsp+0xe8+var_C0], r9
00000000000036e7         call       j_strlen                                    ; strlen
00000000000036ec         movzx      r8d, byte [rsp+0xe8+var_B0]
00000000000036f2         movzx      r10d, byte [rsp+0xe8+var_B8]
00000000000036f8         mov        r11, rax
00000000000036fb         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_3700:
0000000000003700         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000003703         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003708         ja         loc_3cc0

000000000000370e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000003713         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000003718         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000371b         mov        qword [rsp+0xe8+var_A8], r11
0000000000003720         mov        byte [rsp+0xe8+var_B0], r8b
0000000000003725         mov        qword [rsp+0xe8+var_B8], r9
000000000000372a         call       j_memcmp                                    ; memcmp
000000000000372f         test       eax, eax
0000000000003731         mov        r9, qword [rsp+0xe8+var_B8]
0000000000003736         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000373c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000003741         jne        loc_3cc0

0000000000003747         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000374c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003752         jne        loc_46d5

0000000000003758         nop        dword [rax+rax]

                     loc_3760:
0000000000003760         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_3cb0+19
0000000000003764         cmp        bl, 0x7e
0000000000003767         ja         loc_3a88

000000000000376d         lea        rcx, qword [switch_table_8e40+44]           ; 0x8e6c
0000000000003774         movzx      edx, bl
0000000000003777         movsxd     rax, dword [rcx+rdx*4]
000000000000377b         add        rax, rcx
000000000000377e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3780:
0000000000003780         xor        r10d, r10d
0000000000003783         cmp        r11, 0x1
0000000000003787         setne      al
000000000000378a         cmp        r11, 0xffffffffffffffff
000000000000378e         jne        loc_379c

0000000000003790         mov        rax, qword [rsp+arg_8]
0000000000003795         cmp        byte [rax+1], 0x0
0000000000003799         setne      al

                     loc_379c:
000000000000379c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3780+14
00000000000037a1         sete       dl
00000000000037a4         test       al, al
00000000000037a6         je         loc_39f8

                     loc_37ac:
00000000000037ac         xor        r12d, r12d                                  ; CODE XREF=sub_39f0+11
00000000000037af         xor        eax, eax
00000000000037b1         nop        dword [rax]
                        ; endp

                     loc_37b8:
00000000000037b8         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_39a0+50, sub_3a70+119
00000000000037bd         jne        loc_38d2

00000000000037c3         test       dl, dl
00000000000037c5         jne        loc_38d2

                     loc_37cb:
00000000000037cb         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_3880+87
00000000000037d0         test       rsi, rsi
00000000000037d3         je         loc_37e9

00000000000037d5         mov        edx, ebx
00000000000037d7         shr        dl, 0x5
00000000000037da         movzx      edx, dl
00000000000037dd         mov        edx, dword [rsi+rdx*4]
00000000000037e0         bt         edx, ebx
00000000000037e3         jb         loc_3933

                     loc_37e9:
00000000000037e9         test       r10b, r10b                                  ; CODE XREF=sub_3780+83, sub_3880+93
00000000000037ec         jne        loc_3933

00000000000037f2         xor        eax, 0x1
00000000000037f5         add        rbp, 0x1
00000000000037f9         and        eax, r8d

                     loc_37fc:
00000000000037fc         test       al, al                                      ; CODE XREF=sub_3cd0+936
00000000000037fe         je         loc_3820

0000000000003800         cmp        r13, r15
0000000000003803         jbe        loc_380a

0000000000003805         mov        byte [r14+r15], 0x27

                     loc_380a:
000000000000380a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3780+131
000000000000380e         cmp        r13, rax
0000000000003811         jbe        loc_3819

0000000000003813         mov        byte [r14+r15+1], 0x27

                     loc_3819:
0000000000003819         add        r15, 0x2                                    ; CODE XREF=sub_3780+145
000000000000381d         xor        r8d, r8d

                     loc_3820:
0000000000003820         cmp        r15, r13                                    ; CODE XREF=sub_3780+126, sub_3880+275, sub_3cd0+869
0000000000003823         jae        loc_3829

0000000000003825         mov        byte [r14+r15], bl

                     loc_3829:
0000000000003829         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_3780+163
000000000000382e         add        r15, 0x1
0000000000003832         mov        eax, 0x0
0000000000003837         test       r12b, r12b
000000000000383a         cmove      edi, eax
000000000000383d         mov        byte [rsp+0xe8+var_DA], dil
0000000000003842         jmp        loc_3678
0000000000003847         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3850:
0000000000003850         xor        r10d, r10d
0000000000003853         mov        eax, dword [rsp+arg_0]
0000000000003857         cmp        eax, 0x2
000000000000385a         je         loc_3e18

0000000000003860         cmp        eax, 0x5
0000000000003863         je         loc_3dd8

0000000000003869         cmp        eax, 0x2
000000000000386c         mov        ebx, 0x3f
0000000000003871         sete       dl
0000000000003874         xor        r12d, r12d
0000000000003877         xor        eax, eax
0000000000003879         jmp        sub_3780+56
                        ; endp
000000000000387e         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3880:
0000000000003880         xor        r10d, r10d
0000000000003883         cmp        dword [rsp+arg_0], 0x2
0000000000003888         je         loc_3d90

000000000000388e         mov        byte [rsp+arg_74], r12b
0000000000003893         xor        edx, edx
0000000000003895         xor        eax, eax
0000000000003897         mov        ebx, 0x27
000000000000389c         jmp        sub_3780+56
                        ; endp
00000000000038a1         nop        dword [rax]
00000000000038a8         mov        edx, 0x9
00000000000038ad         mov        ebx, 0x74

                     loc_38b2:
00000000000038b2         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3a40+10, sub_3b30+37, sub_3c70+53
00000000000038b7         sete       al
00000000000038ba         and        al, byte [rsp+arg_7]
00000000000038be         jne        sub_39f0+30

00000000000038c4         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_3880+114
00000000000038c9         jne        loc_3930

                     loc_38cb:
00000000000038cb         mov        ebx, edx                                    ; CODE XREF=sub_39a0+18
00000000000038cd         xor        r12d, r12d
00000000000038d0         xor        eax, eax
                        ; endp

                     loc_38d2:
00000000000038d2         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_3780+61, sub_3780+69
00000000000038d7         jne        loc_37cb

00000000000038dd         jmp        loc_37e9
00000000000038e2         nop        word [rax+rax]
00000000000038e8         mov        edx, 0x8
00000000000038ed         mov        ebx, 0x62
00000000000038f2         jmp        sub_3880+68
00000000000038f4         nop        dword [rax]
00000000000038f8         cmp        dword [rsp+8], 0x2
00000000000038fd         je         sub_3cd0                                    ; sub_3cd0
0000000000003903         cmp        byte [rsp+0xd], 0x0
0000000000003908         je         sub_3b10+16

                     loc_390e:
000000000000390e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3b10+8
0000000000003913         je         loc_3b20

0000000000003919         cmp        qword [rsp+arg_10], 0x0
000000000000391f         jne        loc_3cdb

0000000000003925         mov        ebx, 0x5c
000000000000392a         nop        word [rax+rax]
                        ; endp

                     loc_3930:
0000000000003930         xor        r12d, r12d                                  ; CODE XREF=sub_3880+73, sub_3c70+29
                        ; endp

                     loc_3933:
0000000000003933         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3780+99, sub_3780+108
0000000000003938         sete       dl
000000000000393b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000003940         mov        eax, edx
0000000000003942         jne        loc_4198

0000000000003948         mov        eax, r8d
000000000000394b         xor        eax, 0x1
000000000000394e         and        al, dl
0000000000003950         je         loc_3981

0000000000003952         cmp        r13, r15
0000000000003955         jbe        loc_395c

0000000000003957         mov        byte [r14+r15], 0x27

                     loc_395c:
000000000000395c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_3880+213
0000000000003960         cmp        r13, rdx
0000000000003963         jbe        loc_396b

0000000000003965         mov        byte [r14+r15+1], 0x24

                     loc_396b:
000000000000396b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_3880+227
000000000000396f         cmp        r13, rdx
0000000000003972         jbe        loc_397a

0000000000003974         mov        byte [r14+r15+2], 0x27

                     loc_397a:
000000000000397a         add        r15, 0x3                                    ; CODE XREF=sub_3880+242
000000000000397e         mov        r8d, eax

                     loc_3981:
0000000000003981         cmp        r13, r15                                    ; CODE XREF=sub_3880+208
0000000000003984         jbe        loc_398b

0000000000003986         mov        byte [r14+r15], 0x5c

                     loc_398b:
000000000000398b         add        r15, 0x1                                    ; CODE XREF=sub_3880+260
000000000000398f         add        rbp, 0x1
0000000000003993         jmp        loc_3820
0000000000003998         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_39a0:
00000000000039a0         cmp        byte [rsp+arg_5], 0x0
00000000000039a5         jne        loc_3b73

00000000000039ab         xor        edx, edx
00000000000039ad         test       byte [rsp+arg_70], 0x1
00000000000039b2         je         loc_38cb

00000000000039b8         add        rbp, 0x1
00000000000039bc         jmp        quotearg_buffer_restyled+232
                        ; endp
00000000000039c1         nop        dword [rax]
00000000000039c8         cmp        dword [rsp+8], 0x2
00000000000039cd         sete       dl
00000000000039d0         xor        eax, eax
00000000000039d2         jmp        sub_3780+56
00000000000039d7         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39e0:
00000000000039e0         mov        edx, 0x7
00000000000039e5         mov        ebx, 0x61
00000000000039ea         jmp        sub_3880+68
                        ; endp
00000000000039ef         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39f0:
00000000000039f0         cmp        dword [rsp+8], 0x2
00000000000039f5         sete       dl
                        ; endp

                     loc_39f8:
00000000000039f8         test       rbp, rbp                                    ; CODE XREF=sub_3780+38, sub_3c10+35
00000000000039fb         jne        loc_37ac

0000000000003a01         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_3c40+43
0000000000003a06         and        al, dl
0000000000003a08         je         sub_3780+56

0000000000003a0e         mov        rbp, r11
0000000000003a11         mov        dword [rsp+arg_0], 0x2
0000000000003a19         jmp        sub_3cd0+1097
                        ; endp
0000000000003a1e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3a20:
0000000000003a20         cmp        dword [rsp+arg_0], 0x2
0000000000003a25         sete       dl
0000000000003a28         xor        r12d, r12d
0000000000003a2b         jmp        sub_39f0+17
                        ; endp
0000000000003a2d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3a30:
0000000000003a30         cmp        dword [rsp+arg_0], 0x2
0000000000003a35         mov        ebx, 0x20
0000000000003a3a         sete       dl
0000000000003a3d         jmp        sub_39f0+17
                        ; endp
0000000000003a3f         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3a40:
0000000000003a40         mov        edx, 0xd
0000000000003a45         mov        ebx, 0x72
0000000000003a4a         jmp        loc_38b2
0000000000003a4f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a50:
0000000000003a50         mov        edx, 0xc
0000000000003a55         mov        ebx, 0x66
0000000000003a5a         jmp        sub_3880+68
                        ; endp
0000000000003a5f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a60:
0000000000003a60         mov        edx, 0xb
0000000000003a65         mov        ebx, 0x76
0000000000003a6a         jmp        sub_3880+68
                        ; endp
0000000000003a6f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a70:
0000000000003a70         mov        edx, 0xa
0000000000003a75         mov        ebx, 0x6e
0000000000003a7a         jmp        sub_3880+50
                        ; endp
0000000000003a7f         align      128

                     loc_3a80:
0000000000003a80         xor        r10d, r10d                                  ; CODE XREF=sub_3a70+135
0000000000003a83         nop        dword [rax+rax]

                     loc_3a88:
0000000000003a88         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
0000000000003a8e         jne        loc_3e38

0000000000003a94         mov        qword [rsp+0xe8+var_B0], r11
0000000000003a99         mov        byte [rsp+0xe8+var_B8], r8b
0000000000003a9e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003aa3         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003aa8         mov        rcx, qword [rax]
0000000000003aab         movzx      edx, bl
0000000000003aae         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003ab4         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000003aba         mov        r11, qword [rsp+0xe8+var_B0]
0000000000003abf         mov        edi, 0x1
0000000000003ac4         movzx      eax, word [rcx+rdx*2]
0000000000003ac8         and        ax, 0x4000
0000000000003acc         setne      r12b
0000000000003ad0         sete       al
0000000000003ad3         and        al, byte [rsp+0xe8+var_DB]

                     loc_3ad7:
0000000000003ad7         test       al, al                                      ; CODE XREF=sub_3cd0+2221
0000000000003ad9         jne        loc_4471

0000000000003adf         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003ae4         sete       dl
0000000000003ae7         jmp        loc_37b8
0000000000003aec         align      16

                     loc_3af0:
0000000000003af0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000003af4         cmp        bl, 0x7e
0000000000003af7         ja         loc_3a80

0000000000003af9         lea        rcx, qword [switch_table_8e40+552]          ; 0x9068
0000000000003b00         movzx      edx, bl
0000000000003b03         movsxd     rax, dword [rcx+rdx*4]
0000000000003b07         add        rax, rcx
0000000000003b0a         jmp        rax
                        ; endp
0000000000003b0c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3b10:
0000000000003b10         xor        r10d, r10d
0000000000003b13         cmp        byte [rsp+arg_5], 0x0
0000000000003b18         jne        loc_390e

0000000000003b1e         nop

                     loc_3b20:
0000000000003b20         mov        edx, 0x5c                                   ; CODE XREF=sub_3880+136, sub_3880+147
0000000000003b25         mov        ebx, 0x5c
0000000000003b2a         jmp        sub_3880+68
                        ; endp
0000000000003b2f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3b30:
0000000000003b30         mov        edx, 0xc
0000000000003b35         xor        r10d, r10d
0000000000003b38         mov        ebx, 0x66
0000000000003b3d         jmp        sub_3880+68
                        ; endp
0000000000003b42         nop        word [rax+rax]
0000000000003b48         mov        edx, 0xa
0000000000003b4d         xor        r10d, r10d
0000000000003b50         mov        ebx, 0x6e
0000000000003b55         jmp        sub_3880+50
0000000000003b5a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3b60:
0000000000003b60         mov        ebx, 0x61
0000000000003b65         jmp        sub_3880+176
                        ; endp
0000000000003b6a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3b70:
0000000000003b70         xor        r10d, r10d
                        ; endp

                     loc_3b73:
0000000000003b73         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_39a0+5
0000000000003b78         sete       dl
0000000000003b7b         cmp        byte [rsp+arg_7], 0x0
0000000000003b80         jne        loc_471a

0000000000003b86         mov        eax, r8d
0000000000003b89         mov        rcx, r15
0000000000003b8c         xor        eax, 0x1
0000000000003b8f         and        al, dl
0000000000003b91         je         loc_3bc0

0000000000003b93         cmp        r13, r15
0000000000003b96         jbe        loc_3b9d

0000000000003b98         mov        byte [r14+r15], 0x27

                     loc_3b9d:
0000000000003b9d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_3b70+38
0000000000003ba1         cmp        r13, rcx
0000000000003ba4         jbe        loc_3bac

0000000000003ba6         mov        byte [r14+r15+1], 0x24

                     loc_3bac:
0000000000003bac         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_3b70+52
0000000000003bb0         cmp        r13, rcx
0000000000003bb3         ja         loc_41e9

                     loc_3bb9:
0000000000003bb9         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_3cd0+1311
0000000000003bbd         mov        r8d, eax

                     loc_3bc0:
0000000000003bc0         cmp        r13, rcx                                    ; CODE XREF=sub_3b70+33
0000000000003bc3         jbe        loc_3bca

0000000000003bc5         mov        byte [r14+rcx], 0x5c

                     loc_3bca:
0000000000003bca         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3b70+83
0000000000003bcf         lea        r15, qword [rcx+1]
0000000000003bd3         je         loc_41d9

0000000000003bd9         lea        rax, qword [rbp+1]
0000000000003bdd         cmp        rax, r11
0000000000003be0         jae        loc_3bfb

0000000000003be2         mov        rax, qword [rsp+arg_8]
0000000000003be7         movzx      eax, byte [rax+rbp+1]
0000000000003bec         mov        byte [rsp+arg_20], al
0000000000003bf0         sub        eax, 0x30
0000000000003bf3         cmp        al, 0x9
0000000000003bf5         jbe        loc_4429

                     loc_3bfb:
0000000000003bfb         mov        eax, r12d                                   ; CODE XREF=sub_3b70+112
0000000000003bfe         mov        ebx, 0x30
0000000000003c03         xor        r12d, r12d
0000000000003c06         jmp        sub_3780+56
                        ; endp
0000000000003c0b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3c10:
0000000000003c10         cmp        dword [rsp+arg_0], 0x2
0000000000003c15         mov        r12d, r10d
0000000000003c18         sete       dl
0000000000003c1b         xor        r10d, r10d
0000000000003c1e         xor        eax, eax
0000000000003c20         jmp        sub_3780+56
                        ; endp
0000000000003c25         nop        dword [rax]
0000000000003c28         cmp        dword [rsp+8], 0x2
0000000000003c2d         sete       dl
0000000000003c30         xor        r10d, r10d
0000000000003c33         jmp        sub_39f0+8
0000000000003c38         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3c40:
0000000000003c40         cmp        dword [rsp+8], 0x2
0000000000003c45         sete       dl
0000000000003c48         xor        r10d, r10d
0000000000003c4b         xor        r12d, r12d
0000000000003c4e         jmp        sub_39f0+17
                        ; endp
0000000000003c53         nop        dword [rax+rax]
0000000000003c58         cmp        dword [rsp+8], 0x2
0000000000003c5d         mov        r12d, r10d
0000000000003c60         mov        ebx, 0x20
0000000000003c65         sete       dl
0000000000003c68         xor        r10d, r10d
0000000000003c6b         jmp        sub_39f0+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3c70:
0000000000003c70         mov        edx, 0xd
0000000000003c75         xor        r10d, r10d
0000000000003c78         mov        ebx, 0x72
0000000000003c7d         jmp        sub_3880+50
                        ; endp
0000000000003c82         nop        word [rax+rax]
0000000000003c88         mov        ebx, 0x76
0000000000003c8d         jmp        sub_3880+176
0000000000003c92         nop        word [rax+rax]
0000000000003c98         mov        edx, 0x9
0000000000003c9d         xor        r10d, r10d
0000000000003ca0         mov        ebx, 0x74
0000000000003ca5         jmp        sub_3880+50
0000000000003caa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3cb0:
0000000000003cb0         mov        ebx, 0x62
0000000000003cb5         jmp        sub_3880+176
                        ; endp
0000000000003cba         nop        word [rax+rax]

                     loc_3cc0:
0000000000003cc0         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000003cc3         jmp        loc_3760
0000000000003cc8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_3cd0:
0000000000003cd0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3880+125
0000000000003cd5         jne        sub_3cd0+2416
                        ; endp

                     loc_3cdb:
0000000000003cdb         add        rbp, 0x1                                    ; CODE XREF=sub_3880+159
0000000000003cdf         mov        eax, r8d
0000000000003ce2         xor        r12d, r12d
0000000000003ce5         mov        ebx, 0x5c
0000000000003cea         jmp        sub_3780+124
                        ; endp
0000000000003cef         align      16

                     loc_3cf0:
0000000000003cf0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000003cf5         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000003cfa         mov        r12d, r8d
0000000000003cfd         mov        rbp, r11
0000000000003d00         sete       dl
0000000000003d03         mov        eax, ebx
0000000000003d05         test       r15, r15
0000000000003d08         sete       cl
0000000000003d0b         and        eax, edx
0000000000003d0d         and        al, cl
0000000000003d0f         jne        loc_4776

0000000000003d15         mov        eax, ebx
0000000000003d17         xor        eax, 0x1
0000000000003d1a         and        dl, al
0000000000003d1c         je         loc_468c

0000000000003d22         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000003d27         je         loc_468a

0000000000003d2d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000003d32         jne        loc_472d

0000000000003d38         test       r13, r13
0000000000003d3b         sete       al
0000000000003d3e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000003d44         setne      dl
0000000000003d47         and        al, dl
0000000000003d49         je         loc_476c

0000000000003d4f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_3d54:
0000000000003d54         lea        rbx, qword [aLibs+29]                       ; 0x8ded, CODE XREF=sub_3cd0+2781
0000000000003d5b         mov        byte [r14], 0x27
0000000000003d5f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003d67         mov        r15d, 0x1
0000000000003d6d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003d76         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003d7b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000003d80         mov        byte [rsp+0xe8+var_6C], al
0000000000003d84         jmp        loc_3663
0000000000003d89         align      16

                     loc_3d90:
0000000000003d90         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3880+8
0000000000003d95         jne        sub_3cd0+2416

0000000000003d9b         test       r13, r13
0000000000003d9e         je         loc_41a0

0000000000003da4         xor        edx, edx
0000000000003da6         cmp        qword [rsp+arg_48], 0x0
0000000000003dac         jne        loc_41a0

                     loc_3db2:
0000000000003db2         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_3cd0+1284, sub_3cd0+2794
0000000000003db7         add        r15, 0x3
0000000000003dbb         xor        eax, eax
0000000000003dbd         mov        byte [rsp+arg_74], r12b
0000000000003dc2         xor        r8d, r8d
0000000000003dc5         mov        r13, rdx
0000000000003dc8         mov        ebx, 0x27
0000000000003dcd         jmp        sub_3780+105
                        ; endp
0000000000003dd2         align      8

                     loc_3dd8:
0000000000003dd8         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_3850+19
0000000000003ddd         je         loc_3e00

0000000000003ddf         lea        rcx, qword [rbp+2]
0000000000003de3         cmp        rcx, r11
0000000000003de6         jae        loc_3e00

0000000000003de8         mov        rax, qword [rsp+arg_8]
0000000000003ded         cmp        byte [rax+rbp+1], 0x3f
0000000000003df2         je         loc_4582

0000000000003df8         nop        dword [rax+rax]

                     loc_3e00:
0000000000003e00         xor        edx, edx                                    ; CODE XREF=sub_3cd0+269, sub_3cd0+278, sub_3cd0+2233, sub_3cd0+2253
0000000000003e02         xor        r12d, r12d
0000000000003e05         xor        eax, eax
0000000000003e07         mov        ebx, 0x3f
0000000000003e0c         jmp        sub_3780+56
                        ; endp
0000000000003e11         align      8

                     loc_3e18:
0000000000003e18         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3850+10
0000000000003e1d         jne        loc_4640

0000000000003e23         xor        r12d, r12d
0000000000003e26         xor        eax, eax
0000000000003e28         mov        ebx, 0x3f
0000000000003e2d         jmp        sub_3780+105
                        ; endp
0000000000003e32         align      8

                     loc_3e38:
0000000000003e38         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_3a70+30
0000000000003e40         cmp        r11, 0xffffffffffffffff
0000000000003e44         mov        qword [rsp+0xe8+var_48], 0x0
0000000000003e50         mov        qword [rsp+0xe8+var_C0], rax
0000000000003e55         jne        loc_3e84

0000000000003e57         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000003e5c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000003e61         mov        byte [rsp+0xe8+var_B0], r10b
0000000000003e66         mov        qword [rsp+0xe8+var_B8], r9
0000000000003e6b         call       j_strlen                                    ; strlen
0000000000003e70         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000003e76         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000003e7c         mov        r11, rax
0000000000003e7f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_3e84:
0000000000003e84         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_3cd0+389
0000000000003e8c         xor        ecx, ecx
0000000000003e8e         mov        byte [rsp+0xe8+var_6A], bl
0000000000003e92         mov        byte [rsp+0xe8+var_6B], r8b
0000000000003e97         mov        rbx, rcx
0000000000003e9a         mov        qword [rsp+0xe8+var_60], r9
0000000000003ea2         mov        qword [rsp+0xe8+var_B0], rax
0000000000003ea7         mov        byte [rsp+0xe8+var_69], r10b
0000000000003eac         mov        qword [rsp+0xe8+var_68], r15
0000000000003eb4         mov        qword [rsp+0xe8+var_A8], r14
0000000000003eb9         mov        qword [rsp+0xe8+var_78], r13
0000000000003ebe         mov        qword [rsp+0xe8+var_B8], r11

                     loc_3ec3:
0000000000003ec3         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_3cd0+623
0000000000003ec8         lea        r14, qword [rbp+rbx]
0000000000003ecd         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000003ed2         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000003ed7         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000003edc         lea        r13, qword [rax+r14]
0000000000003ee0         sub        rdx, r14
0000000000003ee3         mov        rsi, r13
0000000000003ee6         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000003eeb         test       rax, rax
0000000000003eee         mov        r15, rax
0000000000003ef1         je         loc_3f41

0000000000003ef3         cmp        rax, 0xffffffffffffffff
0000000000003ef7         je         loc_4515

0000000000003efd         cmp        rax, 0xfffffffffffffffe
0000000000003f01         je         loc_44a1

0000000000003f07         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003f0c         sete       al
0000000000003f0f         and        al, byte [rsp+0xe8+var_D9]
0000000000003f13         jne        loc_40b0

                     loc_3f19:
0000000000003f19         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_3cd0+996, sub_3cd0+1031
0000000000003f20         call       j_iswprint                                  ; iswprint
0000000000003f25         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000003f2a         test       eax, eax
0000000000003f2c         mov        eax, 0x0
0000000000003f31         cmove      r12d, eax
0000000000003f35         add        rbx, r15
0000000000003f38         call       j_mbsinit                                   ; mbsinit
0000000000003f3d         test       eax, eax
0000000000003f3f         je         loc_3ec3

                     loc_3f41:
0000000000003f41         mov        edx, r12d                                   ; CODE XREF=sub_3cd0+545
0000000000003f44         mov        rdi, rbx
0000000000003f47         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000003f4d         xor        edx, 0x1
0000000000003f50         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000003f55         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000003f5b         and        dl, byte [rsp+0xe8+var_DB]
0000000000003f5f         mov        r15, qword [rsp+0xe8+var_68]
0000000000003f67         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003f6c         mov        r13, qword [rsp+0xe8+var_78]
0000000000003f71         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_3f76:
0000000000003f76         cmp        rdi, 0x1                                    ; CODE XREF=sub_3cd0+2112, sub_3cd0+2168
0000000000003f7a         jbe        loc_457b

                     loc_3f80:
0000000000003f80         mov        rcx, rdi                                    ; CODE XREF=sub_3cd0+1961
0000000000003f83         xor        esi, esi
0000000000003f85         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000003f8b         add        rcx, rbp
0000000000003f8e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003f93         jmp        loc_404e
0000000000003f98         align      32

                     loc_3fa0:
0000000000003fa0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3cd0+896
0000000000003fa5         sete       al
0000000000003fa8         test       r9b, r9b
0000000000003fab         jne        loc_4460

0000000000003fb1         mov        esi, r8d
0000000000003fb4         xor        esi, 0x1
0000000000003fb7         and        al, sil
0000000000003fba         je         loc_3feb

0000000000003fbc         cmp        r13, r15
0000000000003fbf         jbe        loc_3fc6

0000000000003fc1         mov        byte [r14+r15], 0x27

                     loc_3fc6:
0000000000003fc6         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_3cd0+751
0000000000003fca         cmp        r13, rsi
0000000000003fcd         jbe        loc_3fd5

0000000000003fcf         mov        byte [r14+r15+1], 0x24

                     loc_3fd5:
0000000000003fd5         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_3cd0+765
0000000000003fd9         cmp        r13, rsi
0000000000003fdc         jbe        loc_3fe4

0000000000003fde         mov        byte [r14+r15+2], 0x27

                     loc_3fe4:
0000000000003fe4         add        r15, 0x3                                    ; CODE XREF=sub_3cd0+780
0000000000003fe8         mov        r8d, eax

                     loc_3feb:
0000000000003feb         cmp        r13, r15                                    ; CODE XREF=sub_3cd0+746
0000000000003fee         jbe        loc_3ff5

0000000000003ff0         mov        byte [r14+r15], 0x5c

                     loc_3ff5:
0000000000003ff5         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3cd0+798
0000000000003ff9         cmp        r13, rax
0000000000003ffc         jbe        loc_400b

0000000000003ffe         mov        eax, ebx
0000000000004000         shr        al, 0x6                                     ; DATA XREF=unary_operator+883, sub_3a70+88
0000000000004003         add        eax, 0x30
0000000000004006         mov        byte [r14+r15+1], al

                     loc_400b:
000000000000400b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3cd0+812
000000000000400f         cmp        r13, rax
0000000000004012         jbe        loc_4024

0000000000004014         mov        eax, ebx
0000000000004016         shr        al, 0x3
0000000000004019         and        eax, 0x7
000000000000401c         add        eax, 0x30
000000000000401f         mov        byte [r14+r15+2], al

                     loc_4024:
0000000000004024         and        ebx, 0x7                                    ; CODE XREF=sub_3cd0+834
0000000000004027         add        rbp, 0x1
000000000000402b         add        r15, 0x3
000000000000402f         add        ebx, 0x30
0000000000004032         cmp        rbp, rcx
0000000000004035         jae        loc_3820

000000000000403b         mov        esi, edx

                     loc_403d:
000000000000403d         cmp        r13, r15                                    ; CODE XREF=sub_3cd0+985, sub_3cd0+1969
0000000000004040         jbe        loc_4046

0000000000004042         mov        byte [r14+r15], bl

                     loc_4046:
0000000000004046         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_3cd0+880
000000000000404a         add        r15, 0x1

                     loc_404e:
000000000000404e         test       dl, dl                                      ; CODE XREF=sub_3cd0+707
0000000000004050         jne        loc_3fa0

0000000000004056         mov        eax, esi
0000000000004058         xor        eax, 0x1
000000000000405b         and        eax, r8d
000000000000405e         test       r10b, r10b
0000000000004061         je         loc_4071

0000000000004063         cmp        r13, r15
0000000000004066         jbe        loc_406d

0000000000004068         mov        byte [r14+r15], 0x5c

                     loc_406d:
000000000000406d         add        r15, 0x1                                    ; CODE XREF=sub_3cd0+918

                     loc_4071:
0000000000004071         add        rbp, 0x1                                    ; CODE XREF=sub_3cd0+913
0000000000004075         cmp        rbp, rcx
0000000000004078         jae        loc_37fc

000000000000407e         test       al, al
0000000000004080         je         loc_447e

0000000000004086         cmp        r13, r15
0000000000004089         jbe        loc_4090

000000000000408b         mov        byte [r14+r15], 0x27

                     loc_4090:
0000000000004090         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3cd0+953
0000000000004094         cmp        r13, rax
0000000000004097         jbe        loc_409f

0000000000004099         mov        byte [r14+r15+1], 0x27

                     loc_409f:
000000000000409f         add        r15, 0x2                                    ; CODE XREF=sub_3cd0+967
00000000000040a3         xor        r10d, r10d
00000000000040a6         xor        r8d, r8d
00000000000040a9         jmp        loc_403d
00000000000040ab         align      16

                     loc_40b0:
00000000000040b0         cmp        r15, 0x1                                    ; CODE XREF=sub_3cd0+579
00000000000040b4         je         loc_3f19

00000000000040ba         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000040bf         lea        rcx, qword [rdi+r15]
00000000000040c3         lea        rdx, qword [rdi+r14+1]
00000000000040c8         lea        r8, qword [rcx+r14]
00000000000040cc         jmp        loc_40dd
00000000000040ce         align      16

                     loc_40d0:
00000000000040d0         add        rdx, 0x1                                    ; CODE XREF=sub_3cd0+1046, sub_3cd0+1072
00000000000040d4         cmp        r8, rdx
00000000000040d7         je         loc_3f19

                     loc_40dd:
00000000000040dd         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_3cd0+1020
00000000000040e0         sub        ecx, 0x5b
00000000000040e3         cmp        cl, 0x21
00000000000040e6         ja         loc_40d0

00000000000040e8         mov        esi, 0x1
00000000000040ed         shl        rsi, cl
00000000000040f0         mov        rcx, rsi
00000000000040f3         movabs     rsi, 0x20000002b
00000000000040fd         test       rcx, rsi
0000000000004100         je         loc_40d0

0000000000004102         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004107         mov        r13, qword [rsp+0xe8+var_78]
000000000000410c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000004111         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_4119:
0000000000004119         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3cd0+1227, sub_3cd0+1948, sub_3cd0+2585, sub_3cd0+2734
000000000000411e         je         loc_4130

0000000000004120         test       al, al
0000000000004122         mov        eax, 0x4
0000000000004127         cmove      eax, dword [rsp+0xe8+var_E0]
000000000000412c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_4130:
0000000000004130         sub        rsp, 0x8                                    ; CODE XREF=sub_3cd0+1102
0000000000004134         mov        rcx, rbp
0000000000004137         mov        rsi, r13
000000000000413a         push       qword [rsp+0xf0+var_88]
000000000000413e         push       qword [rsp+0xf8+var_80]
0000000000004142         mov        rdi, r14
0000000000004145         push       0x0
0000000000004147         mov        r9d, dword [rsp+0x108+var_70]
000000000000414f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000004154         mov        rdx, qword [rsp+0x108+var_D8]
0000000000004159         and        r9d, 0xfffffffd
000000000000415d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004162         add        rsp, 0x20
0000000000004166         mov        r15, rax

                     loc_4169:
0000000000004169         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_3cd0+2549, sub_3cd0+2560, sub_3cd0+2711
0000000000004171         xor        rbx, qword [fs:0x28]
000000000000417a         mov        rax, r15
000000000000417d         jne        loc_4783

0000000000004183         add        rsp, 0xb8
000000000000418a         pop        rbx
000000000000418b         pop        rbp
000000000000418c         pop        r12
000000000000418e         pop        r13
0000000000004190         pop        r14
0000000000004192         pop        r15
0000000000004194         ret
                        ; endp
0000000000004195         align      8

                     loc_4198:
0000000000004198         mov        rbp, r11                                    ; CODE XREF=sub_3880+194
000000000000419b         jmp        loc_4119

                     loc_41a0:
00000000000041a0         cmp        r13, r15                                    ; CODE XREF=sub_3cd0+206, sub_3cd0+220
00000000000041a3         jbe        loc_41aa

00000000000041a5         mov        byte [r14+r15], 0x27

                     loc_41aa:
00000000000041aa         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3cd0+1235
00000000000041ae         cmp        r13, rax
00000000000041b1         jbe        loc_41b9

00000000000041b3         mov        byte [r14+r15+1], 0x5c

                     loc_41b9:
00000000000041b9         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3cd0+1249
00000000000041bd         cmp        r13, rax
00000000000041c0         jbe        loc_47b2

00000000000041c6         mov        rdx, r13
00000000000041c9         mov        byte [r14+r15+2], 0x27
00000000000041cf         mov        r13, qword [rsp+arg_48]
00000000000041d4         jmp        loc_3db2

                     loc_41d9:
00000000000041d9         mov        eax, r12d                                   ; CODE XREF=sub_3b70+99
00000000000041dc         mov        ebx, 0x30
00000000000041e1         xor        r12d, r12d
00000000000041e4         jmp        sub_3780+105
                        ; endp

                     loc_41e9:
00000000000041e9         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_3b70+67
00000000000041ef         jmp        loc_3bb9

                     loc_41f4:
00000000000041f4         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
00000000000041f6         jne        loc_3623

00000000000041fc         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_4201:
0000000000004201         test       r13, r13                                    ; CODE XREF=sub_3cd0+2749
0000000000004204         jne        loc_479a

000000000000420a         lea        rax, qword [aLibs+29]                       ; 0x8ded
0000000000004211         mov        qword [rsp+0xe8+var_98], 0x0
000000000000421a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000421f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004224         xor        r12d, r12d
0000000000004227         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000422c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004235         mov        qword [rsp+0xe8+var_A0], rax
000000000000423a         mov        r15d, 0x1
0000000000004240         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000004248         jmp        loc_3663
000000000000424d         align      16

                     loc_4250:
0000000000004250         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000004252         jne        loc_464d

0000000000004258         test       r13, r13
000000000000425b         je         loc_4486

0000000000004261         mov        byte [r14], 0x22
0000000000004265         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000426a         xor        r12d, r12d
000000000000426d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004272         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_427b:
000000000000427b         lea        rax, qword [aLibs+27]                       ; 0x8deb, CODE XREF=sub_3cd0+1996
0000000000004282         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004287         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000428c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004295         mov        r15d, 0x1
000000000000429b         mov        qword [rsp+0xe8+var_A0], rax
00000000000042a0         jmp        loc_3663

                     loc_42a5:
00000000000042a5         lea        rax, qword [aLibs+27]                       ; case 6, 0x8deb, CODE XREF=quotearg_buffer_restyled+145
00000000000042ac         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000042b1         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000042b6         xor        r12d, r12d
00000000000042b9         mov        qword [rsp+0xe8+var_98], 0x0
00000000000042c2         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000042c7         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000042cc         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000042d5         xor        r15d, r15d
00000000000042d8         mov        qword [rsp+0xe8+var_A0], rax
00000000000042dd         mov        dword [rsp+0xe8+var_E0], 0x5
00000000000042e5         jmp        loc_3663

                     loc_42ea:
00000000000042ea         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
00000000000042ef         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000042f4         xor        r12d, r12d
00000000000042f7         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004300         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004305         xor        r15d, r15d
0000000000004308         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000430d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004316         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000431f         jmp        loc_3663

                     loc_4324:
0000000000004324         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000004329         je         loc_4381

000000000000432b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x8def
0000000000004332         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004334         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004339         call       j_dcgettext                                 ; dcgettext
000000000000433e         mov        rcx, rax
0000000000004341         mov        qword [rsp+0xe8+var_80], rax
0000000000004346         lea        rax, qword [aLibs+31]                       ; 0x8def
000000000000434d         cmp        rcx, rax
0000000000004350         je         loc_46ee

                     loc_4356:
0000000000004356         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x8ded, CODE XREF=sub_3cd0+2607
000000000000435d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000435f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004364         call       j_dcgettext                                 ; dcgettext
0000000000004369         mov        rcx, rax
000000000000436c         mov        qword [rsp+0xe8+var_88], rax
0000000000004371         lea        rax, qword [aLibs+29]                       ; 0x8ded
0000000000004378         cmp        rcx, rax
000000000000437b         je         loc_4704

                     loc_4381:
0000000000004381         xor        r15d, r15d                                  ; CODE XREF=sub_3cd0+1625, sub_3cd0+2629
0000000000004384         test       ebx, ebx
0000000000004386         je         loc_454d

                     loc_438c:
000000000000438c         test       ebx, ebx                                    ; CODE XREF=sub_3cd0+2183, sub_3cd0+2214
000000000000438e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000004393         setne      byte [rsp+0xe8+var_D9]
0000000000004398         xor        r12d, r12d
000000000000439b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000439e         call       j_strlen                                    ; strlen
00000000000043a3         mov        qword [rsp+0xe8+var_A0], rbx
00000000000043a8         mov        qword [rsp+0xe8+var_D0], rax
00000000000043ad         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000043b2         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000043b7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000043c0         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000043c5         jmp        loc_3663

                     loc_43ca:
00000000000043ca         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
00000000000043cf         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000043d4         xor        r12d, r12d
00000000000043d7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000043e0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000043e5         xor        r15d, r15d
00000000000043e8         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000043ed         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000043f6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000043ff         jmp        loc_3663

                     loc_4404:
0000000000004404         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000004409         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000440e         xor        r12d, r12d
0000000000004411         mov        qword [rsp+0xe8+var_98], 0x0
000000000000441a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000441f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004424         jmp        loc_3643

                     loc_4429:
0000000000004429         cmp        r13, r15                                    ; CODE XREF=sub_3b70+133
000000000000442c         jbe        loc_4433

000000000000442e         mov        byte [r14+r15], 0x30

                     loc_4433:
0000000000004433         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_3cd0+1884
0000000000004437         cmp        r13, rax
000000000000443a         jbe        loc_4442

000000000000443c         mov        byte [r14+rcx+2], 0x30

                     loc_4442:
0000000000004442         mov        eax, r12d                                   ; CODE XREF=sub_3cd0+1898
0000000000004445         lea        r15, qword [rcx+3]
0000000000004449         xor        r12d, r12d
000000000000444c         mov        ebx, 0x30
0000000000004451         jmp        sub_3780+56
                        ; endp
0000000000004456         align      32

                     loc_4460:
0000000000004460         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_3cd0+731
0000000000004465         mov        rbp, r11
0000000000004468         mov        byte [rsp+0xe8+var_DB], bl
000000000000446c         jmp        loc_4119

                     loc_4471:
0000000000004471         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3a70+105
0000000000004476         xor        r12d, r12d
0000000000004479         jmp        loc_3f80

                     loc_447e:
000000000000447e         xor        r10d, r10d                                  ; CODE XREF=sub_3cd0+944
0000000000004481         jmp        loc_403d

                     loc_4486:
0000000000004486         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_3cd0+1419
000000000000448f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004494         xor        r12d, r12d
0000000000004497         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000449c         jmp        loc_427b

                     loc_44a1:
00000000000044a1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_3cd0+561
00000000000044a6         mov        rsi, r14
00000000000044a9         mov        rcx, r13
00000000000044ac         mov        rax, rbx
00000000000044af         mov        rdi, rbx
00000000000044b2         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000044b8         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000044bd         mov        r9, qword [rsp+0xe8+var_60]
00000000000044c5         cmp        rsi, r11
00000000000044c8         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000044ce         mov        r15, qword [rsp+0xe8+var_68]
00000000000044d6         mov        r14, qword [rsp+0xe8+var_A8]
00000000000044db         mov        r13, qword [rsp+0xe8+var_78]
00000000000044e0         jae        loc_4508

00000000000044e2         cmp        byte [rcx], 0x0
00000000000044e5         jne        loc_44f7

00000000000044e7         jmp        loc_4508
00000000000044e9         align      16

                     loc_44f0:
00000000000044f0         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_3cd0+2099
00000000000044f5         je         loc_4505

                     loc_44f7:
00000000000044f7         add        rax, 0x1                                    ; CODE XREF=sub_3cd0+2069
00000000000044fb         lea        rdx, qword [rbp+rax]
0000000000004500         cmp        r11, rdx
0000000000004503         ja         loc_44f0

                     loc_4505:
0000000000004505         mov        rdi, rax                                    ; CODE XREF=sub_3cd0+2085

                     loc_4508:
0000000000004508         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3cd0+2064, sub_3cd0+2071
000000000000450d         xor        r12d, r12d
0000000000004510         jmp        loc_3f76

                     loc_4515:
0000000000004515         mov        rdi, rbx                                    ; CODE XREF=sub_3cd0+551
0000000000004518         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000451e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004523         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004529         mov        r15, qword [rsp+0xe8+var_68]
0000000000004531         xor        r12d, r12d
0000000000004534         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004539         mov        r13, qword [rsp+0xe8+var_78]
000000000000453e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000004543         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000004548         jmp        loc_3f76

                     loc_454d:
000000000000454d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_3cd0+1718
0000000000004552         movzx      eax, byte [rdx]
0000000000004555         test       al, al
0000000000004557         je         loc_438c

000000000000455d         nop        dword [rax]

                     loc_4560:
0000000000004560         cmp        r13, r15                                    ; CODE XREF=sub_3cd0+2212
0000000000004563         jbe        loc_4569

0000000000004565         mov        byte [r14+r15], al

                     loc_4569:
0000000000004569         add        r15, 0x1                                    ; CODE XREF=sub_3cd0+2195
000000000000456d         movzx      eax, byte [rdx+r15]
0000000000004572         test       al, al
0000000000004574         jne        loc_4560

0000000000004576         jmp        loc_438c

                     loc_457b:
000000000000457b         mov        eax, edx                                    ; CODE XREF=sub_3cd0+682
000000000000457d         jmp        loc_3ad7

                     loc_4582:
0000000000004582         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_3cd0+290
0000000000004586         cmp        bl, 0x3e
0000000000004589         ja         loc_3e00

000000000000458f         movabs     rax, 0x7000a38200000000
0000000000004599         bt         rax, rbx
000000000000459d         jae        loc_3e00

00000000000045a3         cmp        byte [rsp+arg_7], 0x0
00000000000045a8         jne        loc_4792

00000000000045ae         cmp        r13, r15
00000000000045b1         jbe        loc_45b8

00000000000045b3         mov        byte [r14+r15], 0x3f

                     loc_45b8:
00000000000045b8         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3cd0+2273
00000000000045bc         cmp        r13, rax
00000000000045bf         jbe        loc_45c7

00000000000045c1         mov        byte [r14+r15+1], 0x22

                     loc_45c7:
00000000000045c7         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3cd0+2287
00000000000045cb         cmp        r13, rax
00000000000045ce         jbe        loc_45d6

00000000000045d0         mov        byte [r14+r15+2], 0x22

                     loc_45d6:
00000000000045d6         lea        rax, qword [r15+3]                          ; CODE XREF=sub_3cd0+2302
00000000000045da         cmp        r13, rax
00000000000045dd         jbe        loc_45e5

00000000000045df         mov        byte [r14+r15+3], 0x3f

                     loc_45e5:
00000000000045e5         add        r15, 0x4                                    ; CODE XREF=sub_3cd0+2317
00000000000045e9         xor        edx, edx
00000000000045eb         xor        r12d, r12d
00000000000045ee         xor        eax, eax
00000000000045f0         mov        rbp, rcx
00000000000045f3         jmp        sub_3780+56
                        ; endp

                     loc_45f8:
00000000000045f8         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
00000000000045fa         je         loc_4788

0000000000004600         lea        rax, qword [aLibs+29]                       ; 0x8ded
0000000000004607         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000460c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004611         xor        r12d, r12d
0000000000004614         mov        qword [rsp+0xe8+var_98], 0x0
000000000000461d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004622         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000004627         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004630         xor        r15d, r15d
0000000000004633         mov        qword [rsp+0xe8+var_A0], rax
0000000000004638         jmp        loc_3663
000000000000463d         align      64

                     loc_4640:
0000000000004640         mov        rbp, r11                                    ; CODE XREF=sub_3cd0+333
0000000000004643         movzx      eax, byte [rsp+arg_7]
0000000000004648         jmp        sub_3cd0+1097
                        ; endp

                     loc_464d:
000000000000464d         lea        rax, qword [aLibs+27]                       ; 0x8deb, CODE XREF=sub_3cd0+1410
0000000000004654         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004659         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000465e         xor        r12d, r12d
0000000000004661         mov        qword [rsp+0xe8+var_98], 0x0
000000000000466a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000466f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004674         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000467d         xor        r15d, r15d
0000000000004680         mov        qword [rsp+0xe8+var_A0], rax
0000000000004685         jmp        loc_3663

                     loc_468a:
000000000000468a         mov        eax, edx                                    ; CODE XREF=sub_3cd0+87

                     loc_468c:
000000000000468c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_3cd0+76, sub_3cd0+2721
0000000000004691         test       rbx, rbx
0000000000004694         je         loc_46c2

0000000000004696         test       al, al
0000000000004698         je         loc_46c2

000000000000469a         movzx      ecx, byte [rbx]
000000000000469d         mov        rax, rbx
00000000000046a0         test       cl, cl
00000000000046a2         je         loc_46c2

00000000000046a4         mov        rdx, r15
00000000000046a7         sub        rax, r15

                     loc_46aa:
00000000000046aa         cmp        r13, rdx                                    ; CODE XREF=sub_3cd0+2541
00000000000046ad         jbe        loc_46b3

00000000000046af         mov        byte [r14+rdx], cl

                     loc_46b3:
00000000000046b3         add        rdx, 0x1                                    ; CODE XREF=sub_3cd0+2525
00000000000046b7         movzx      ecx, byte [rax+rdx]
00000000000046bb         test       cl, cl
00000000000046bd         jne        loc_46aa

00000000000046bf         mov        r15, rdx

                     loc_46c2:
00000000000046c2         cmp        r13, r15                                    ; CODE XREF=sub_3cd0+2500, sub_3cd0+2504, sub_3cd0+2514
00000000000046c5         jbe        loc_4169

00000000000046cb         mov        byte [r14+r15], 0x0
00000000000046d0         jmp        loc_4169

                     loc_46d5:
00000000000046d5         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
00000000000046da         movzx      ebx, byte [rsp+0xe8+var_D9]
00000000000046df         mov        rbp, r11
00000000000046e2         sete       al
00000000000046e5         mov        byte [rsp+0xe8+var_DB], bl
00000000000046e9         jmp        loc_4119

                     loc_46ee:
00000000000046ee         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3cd0+1664
00000000000046f2         mov        rdi, rcx
00000000000046f5         call       gettext_quote.part.1                        ; gettext_quote.part.1
00000000000046fa         mov        qword [rsp+0xe8+var_80], rax
00000000000046ff         jmp        loc_4356

                     loc_4704:
0000000000004704         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3cd0+1707
0000000000004708         mov        rdi, rcx
000000000000470b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000004710         mov        qword [rsp+0xe8+var_88], rax
0000000000004715         jmp        loc_4381

                     loc_471a:
000000000000471a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_3b70+16
000000000000471f         mov        rbp, r11
0000000000004722         mov        eax, edx
0000000000004724         mov        byte [rsp+arg_5], bl
0000000000004728         jmp        sub_3cd0+1097
                        ; endp

                     loc_472d:
000000000000472d         sub        rsp, 0x8                                    ; CODE XREF=sub_3cd0+98
0000000000004731         mov        r8d, 0x5
0000000000004737         mov        rcx, r11
000000000000473a         push       qword [rsp+0xf0+var_88]
000000000000473e         push       qword [rsp+0xf8+var_80]
0000000000004742         mov        rdi, r14
0000000000004745         push       qword [rsp+0x100+var_C8]
0000000000004749         mov        r9d, dword [rsp+0x108+var_70]
0000000000004751         mov        rdx, qword [rsp+0x108+var_D8]
0000000000004756         mov        rsi, qword [rsp+0x108+var_98]
000000000000475b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004760         add        rsp, 0x20
0000000000004764         mov        r15, rax
0000000000004767         jmp        loc_4169

                     loc_476c:
000000000000476c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_3cd0+121
0000000000004771         jmp        loc_468c

                     loc_4776:
0000000000004776         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3cd0+63
000000000000477e         jmp        loc_4119

                     loc_4783:
0000000000004783         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3cd0+1197
                        ; endp

                     loc_4788:
0000000000004788         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3cd0+2346
000000000000478d         jmp        loc_4201

                     loc_4792:
0000000000004792         mov        rbp, r11                                    ; CODE XREF=sub_3cd0+2264
0000000000004795         jmp        sub_3cd0+1120
                        ; endp

                     loc_479a:
000000000000479a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_3cd0+1332
000000000000479f         xor        eax, eax
00000000000047a1         xor        r12d, r12d
00000000000047a4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000047ad         jmp        loc_3d54

                     loc_47b2:
00000000000047b2         mov        rdx, r13                                    ; CODE XREF=sub_3cd0+1264
00000000000047b5         mov        r13, qword [rsp+arg_48]
00000000000047ba         jmp        loc_3db2

                     loc_47bf:
00000000000047bf         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
00000000000047c4         align      16                                          ; End of unwind block (FDE at 0x9b48)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
00000000000047d0         push       r15                                         ; Begin of unwind block (FDE at 0x9bc0), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
00000000000047d2         push       r14
00000000000047d4         movsxd     r15, edi
00000000000047d7         push       r13
00000000000047d9         push       r12
00000000000047db         mov        r14, rdx
00000000000047de         push       rbp
00000000000047df         push       rbx
00000000000047e0         mov        rbp, rcx
00000000000047e3         sub        rsp, 0x28
00000000000047e7         mov        qword [rsp+0x58+var_50], rsi
00000000000047ec         call       j___errno_location                          ; __errno_location
00000000000047f1         mov        r13, rax
00000000000047f4         mov        eax, dword [rax]
00000000000047f6         test       r15d, r15d
00000000000047f9         mov        rbx, qword [slotvec]                        ; slotvec
0000000000004800         mov        dword [rsp+0x58+var_40], eax
0000000000004804         js         loc_4971

000000000000480a         cmp        dword [nslots], r15d                        ; nslots
0000000000004811         jg         loc_4875

0000000000004813         cmp        r15d, 0x7fffffff
000000000000481a         je         loc_4976

0000000000004820         lea        r12d, dword [r15+1]
0000000000004824         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000482b         movsxd     rsi, r12d
000000000000482e         shl        rsi, 0x4
0000000000004832         cmp        rbx, rax
0000000000004835         je         loc_4950

000000000000483b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000483e         call       xrealloc                                    ; xrealloc
0000000000004843         mov        rbx, rax
0000000000004846         mov        qword [slotvec], rax                        ; slotvec

                     loc_484d:
000000000000484d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000004854         mov        edx, r12d
0000000000004857         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000004859         sub        edx, edi
000000000000485b         shl        rdi, 0x4
000000000000485f         movsxd     rdx, edx
0000000000004862         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000004865         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000004869         call       j_memset                                    ; memset
000000000000486e         mov        dword [nslots], r12d                        ; nslots

                     loc_4875:
0000000000004875         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000004878         shl        r15, 0x4
000000000000487c         sub        rsp, 0x8
0000000000004880         add        rbx, r15
0000000000004883         lea        r15, qword [rbp+8]
0000000000004887         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000488b         mov        r11, qword [rbx]
000000000000488e         mov        r12, qword [rbx+8]
0000000000004892         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004895         or         eax, 0x1
0000000000004898         mov        dword [rsp+0x60+var_3C], eax
000000000000489c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000489f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
00000000000048a2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000048a5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000048a7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
00000000000048aa         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000048af         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
00000000000048b2         mov        qword [rsp+0x78+var_48], r11
00000000000048b7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000048bc         add        rsp, 0x20
00000000000048c0         mov        r11, qword [rsp+0x58+var_48]
00000000000048c5         cmp        r11, rax
00000000000048c8         ja         loc_4931

00000000000048ca         lea        rsi, qword [rax+1]
00000000000048ce         lea        rax, qword [slot0]                          ; slot0
00000000000048d5         cmp        r12, rax
00000000000048d8         mov        qword [rbx], rsi
00000000000048db         je         loc_48ef

00000000000048dd         mov        rdi, r12                                    ; argument "__ptr" for method j_free
00000000000048e0         mov        qword [rsp+0x58+var_48], rsi
00000000000048e5         call       j_free                                      ; free
00000000000048ea         mov        rsi, qword [rsp+0x58+var_48]

                     loc_48ef:
00000000000048ef         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
00000000000048f2         mov        qword [rsp+0x58+var_48], rsi
00000000000048f7         call       xmalloc                                     ; xmalloc
00000000000048fc         sub        rsp, 0x8
0000000000004900         mov        qword [rbx+8], rax
0000000000004904         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000004908         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000490b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000490e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004911         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004913         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000004918         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000491b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000004920         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000004925         mov        r12, rax
0000000000004928         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000492d         add        rsp, 0x20

                     loc_4931:
0000000000004931         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000004935         mov        dword [r13], eax
0000000000004939         add        rsp, 0x28
000000000000493d         mov        rax, r12
0000000000004940         pop        rbx
0000000000004941         pop        rbp
0000000000004942         pop        r12
0000000000004944         pop        r13
0000000000004946         pop        r14
0000000000004948         pop        r15
000000000000494a         ret
                        ; endp
000000000000494b         align      16

                     loc_4950:
0000000000004950         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000004952         call       xrealloc                                    ; xrealloc
0000000000004957         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000495f         mov        rbx, rax
0000000000004962         mov        qword [slotvec], rax                        ; slotvec
0000000000004969         movups     xmmword [rax], xmm0
000000000000496c         jmp        loc_484d

                     loc_4971:
0000000000004971         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_4976:
0000000000004976         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_497b:
000000000000497b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x9bc0)
                     clone_quoting_options:
0000000000004980         push       r12                                         ; Begin of unwind block (FDE at 0x9c2c)
0000000000004982         push       rbp
0000000000004983         push       rbx
0000000000004984         mov        rbx, rdi
0000000000004987         call       j___errno_location                          ; __errno_location
000000000000498c         mov        r12d, dword [rax]
000000000000498f         mov        rbp, rax
0000000000004992         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004999         test       rbx, rbx
000000000000499c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
00000000000049a1         cmove      rbx, rax
00000000000049a5         mov        rdi, rbx                                    ; argument #1 for method xmemdup
00000000000049a8         call       xmemdup                                     ; xmemdup
00000000000049ad         mov        dword [rbp], r12d
00000000000049b1         pop        rbx
00000000000049b2         pop        rbp
00000000000049b3         pop        r12
00000000000049b5         ret
                        ; endp
00000000000049b6         align      64                                          ; End of unwind block (FDE at 0x9c2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
00000000000049c0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9c58), default_quoting_options
00000000000049c7         test       rdi, rdi
00000000000049ca         cmove      rdi, rax
00000000000049ce         mov        eax, dword [rdi]
00000000000049d0         ret
                        ; endp
00000000000049d1         align      32                                          ; End of unwind block (FDE at 0x9c58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
00000000000049e0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9c6c), default_quoting_options
00000000000049e7         test       rdi, rdi
00000000000049ea         cmove      rdi, rax
00000000000049ee         mov        dword [rdi], esi
00000000000049f0         ret
                        ; endp
00000000000049f1         align      512                                         ; End of unwind block (FDE at 0x9c6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000004a00         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9c80), default_quoting_options
0000000000004a07         test       rdi, rdi
0000000000004a0a         mov        ecx, esi
0000000000004a0c         cmove      rdi, rax
0000000000004a10         mov        eax, esi
0000000000004a12         and        ecx, 0x1f
0000000000004a15         shr        al, 0x5
0000000000004a18         movzx      eax, al
0000000000004a1b         lea        rdi, qword [rdi+rax*4+8]
0000000000004a20         mov        esi, dword [rdi]
0000000000004a22         mov        eax, esi
0000000000004a24         shr        eax, cl
0000000000004a26         xor        edx, eax
0000000000004a28         and        eax, 0x1
0000000000004a2b         and        edx, 0x1
0000000000004a2e         shl        edx, cl
0000000000004a30         xor        edx, esi
0000000000004a32         mov        dword [rdi], edx
0000000000004a34         ret
                        ; endp
0000000000004a35         align      64                                          ; End of unwind block (FDE at 0x9c80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000004a40         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9c94), default_quoting_options
0000000000004a47         test       rdi, rdi
0000000000004a4a         cmove      rdi, rax
0000000000004a4e         mov        eax, dword [rdi+4]
0000000000004a51         mov        dword [rdi+4], esi
0000000000004a54         ret
                        ; endp
0000000000004a55         align      32                                          ; End of unwind block (FDE at 0x9c94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000004a60         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9ca8), default_quoting_options
0000000000004a67         test       rdi, rdi
0000000000004a6a         cmove      rdi, rax
0000000000004a6e         test       rsi, rsi
0000000000004a71         mov        dword [rdi], 0xa
0000000000004a77         je         loc_4a87

0000000000004a79         test       rdx, rdx
0000000000004a7c         je         loc_4a87

0000000000004a7e         mov        qword [rdi+0x28], rsi
0000000000004a82         mov        qword [rdi+0x30], rdx
0000000000004a86         ret
                        ; endp

                     loc_4a87:
0000000000004a87         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
0000000000004a8b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000004a90         push       r15                                         ; End of unwind block (FDE at 0x9ca8), Begin of unwind block (FDE at 0x9cbc)
0000000000004a92         push       r14
0000000000004a94         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004a9b         push       r13
0000000000004a9d         push       r12
0000000000004a9f         mov        r13, rdi
0000000000004aa2         push       rbp
0000000000004aa3         push       rbx
0000000000004aa4         mov        rbx, r8
0000000000004aa7         mov        r14, rsi
0000000000004aaa         mov        r15, rdx
0000000000004aad         sub        rsp, 0x18
0000000000004ab1         test       r8, r8
0000000000004ab4         cmove      rbx, rax
0000000000004ab8         mov        qword [rsp+0x48+var_40], rcx
0000000000004abd         call       j___errno_location                          ; __errno_location
0000000000004ac2         mov        r12d, dword [rax]
0000000000004ac5         mov        rbp, rax
0000000000004ac8         lea        rax, qword [rbx+8]
0000000000004acc         sub        rsp, 0x8
0000000000004ad0         mov        r9d, dword [rbx+4]
0000000000004ad4         push       qword [rbx+0x30]
0000000000004ad7         mov        r8d, dword [rbx]
0000000000004ada         push       qword [rbx+0x28]
0000000000004add         mov        rdx, r15
0000000000004ae0         push       rax
0000000000004ae1         mov        rcx, qword [rsp+0x68+var_40]
0000000000004ae6         mov        rsi, r14
0000000000004ae9         mov        rdi, r13
0000000000004aec         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004af1         mov        dword [rbp], r12d
0000000000004af5         add        rsp, 0x38
0000000000004af9         pop        rbx
0000000000004afa         pop        rbp
0000000000004afb         pop        r12
0000000000004afd         pop        r13
0000000000004aff         pop        r14
0000000000004b01         pop        r15
0000000000004b03         ret
                        ; endp
0000000000004b04         align      16                                          ; End of unwind block (FDE at 0x9cbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000004b10         push       r15                                         ; Begin of unwind block (FDE at 0x9d10), CODE XREF=quotearg_alloc+5
0000000000004b12         push       r14
0000000000004b14         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004b1b         push       r13
0000000000004b1d         push       r12
0000000000004b1f         mov        r12, rdx
0000000000004b22         push       rbp
0000000000004b23         push       rbx
0000000000004b24         mov        rbx, rcx
0000000000004b27         mov        r14, rdi
0000000000004b2a         mov        r15, rsi
0000000000004b2d         sub        rsp, 0x38
0000000000004b31         test       rcx, rcx
0000000000004b34         cmove      rbx, rax
0000000000004b38         xor        ebp, ebp
0000000000004b3a         call       j___errno_location                          ; __errno_location
0000000000004b3f         test       r12, r12
0000000000004b42         mov        r13, rax
0000000000004b45         mov        eax, dword [rax]
0000000000004b47         sete       bpl
0000000000004b4b         or         ebp, dword [rbx+4]
0000000000004b4e         lea        r10, qword [rbx+8]
0000000000004b52         sub        rsp, 0x8
0000000000004b56         mov        r8d, dword [rbx]
0000000000004b59         mov        rcx, r15
0000000000004b5c         mov        dword [rsp+0x70+var_5C], eax
0000000000004b60         push       qword [rbx+0x30]
0000000000004b63         mov        rdx, r14
0000000000004b66         push       qword [rbx+0x28]
0000000000004b69         push       r10
0000000000004b6b         xor        esi, esi
0000000000004b6d         mov        r9d, ebp
0000000000004b70         xor        edi, edi
0000000000004b72         mov        qword [rsp+0x88+var_48], r10
0000000000004b77         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004b7c         lea        rsi, qword [rax+1]
0000000000004b80         mov        qword [rsp+0x88+var_40], rax
0000000000004b85         add        rsp, 0x20
0000000000004b89         mov        rdi, rsi
0000000000004b8c         mov        qword [rsp+0x68+var_50], rsi
0000000000004b91         call       xmalloc                                     ; xmalloc
0000000000004b96         mov        qword [rsp+0x68+var_58], rax
0000000000004b9b         sub        rsp, 0x8
0000000000004b9f         push       qword [rbx+0x30]
0000000000004ba2         push       qword [rbx+0x28]
0000000000004ba5         mov        r10, qword [rsp+0x80+var_48]
0000000000004baa         mov        r9d, ebp
0000000000004bad         mov        r8d, dword [rbx]
0000000000004bb0         mov        rcx, r15
0000000000004bb3         mov        rdx, r14
0000000000004bb6         mov        rdi, rax
0000000000004bb9         push       r10
0000000000004bbb         mov        rsi, qword [rsp+0x88+var_50]
0000000000004bc0         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004bc5         mov        eax, dword [rsp+0x88+var_5C]
0000000000004bc9         add        rsp, 0x20
0000000000004bcd         test       r12, r12
0000000000004bd0         mov        dword [r13], eax
0000000000004bd4         je         loc_4bdf

0000000000004bd6         mov        r11, qword [rsp+0x68+var_40]
0000000000004bdb         mov        qword [r12], r11

                     loc_4bdf:
0000000000004bdf         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000004be4         add        rsp, 0x38
0000000000004be8         pop        rbx
0000000000004be9         pop        rbp
0000000000004bea         pop        r12
0000000000004bec         pop        r13
0000000000004bee         pop        r14
0000000000004bf0         pop        r15
0000000000004bf2         ret
                        ; endp
0000000000004bf3         align      1024                                        ; End of unwind block (FDE at 0x9d10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000004c00         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x9d7c)
0000000000004c03         xor        edx, edx
0000000000004c05         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000004c0a         align      16                                          ; End of unwind block (FDE at 0x9d7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000004c10         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x9d90), nslots
0000000000004c16         push       r12
0000000000004c18         mov        r12, qword [slotvec]                        ; slotvec
0000000000004c1f         push       rbp
0000000000004c20         push       rbx
0000000000004c21         cmp        eax, 0x1
0000000000004c24         jle        loc_4c51

0000000000004c26         sub        eax, 0x2
0000000000004c29         lea        rbx, qword [r12+0x18]
0000000000004c2e         shl        rax, 0x4
0000000000004c32         lea        rbp, qword [r12+rax+0x28]
0000000000004c37         nop        word [rax+rax]

                     loc_4c40:
0000000000004c40         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000004c43         add        rbx, 0x10
0000000000004c47         call       j_free                                      ; free
0000000000004c4c         cmp        rbx, rbp
0000000000004c4f         jne        loc_4c40

                     loc_4c51:
0000000000004c51         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000004c56         lea        rbx, qword [slot0]                          ; slot0
0000000000004c5d         cmp        rdi, rbx
0000000000004c60         je         loc_4c79

0000000000004c62         call       j_free                                      ; free
0000000000004c67         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000004c72         mov        qword [slotvec0+8], rbx                     ; 0x20b078

                     loc_4c79:
0000000000004c79         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000004c80         cmp        r12, rbx
0000000000004c83         je         loc_4c94

0000000000004c85         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004c88         call       j_free                                      ; free
0000000000004c8d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_4c94:
0000000000004c94         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000004c95         mov        dword [nslots], 0x1                         ; nslots
0000000000004c9f         pop        rbp
0000000000004ca0         pop        r12
0000000000004ca2         ret
                        ; endp
0000000000004ca3         align      16                                          ; End of unwind block (FDE at 0x9d90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000004cb0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9dbc), default_quoting_options
0000000000004cb7         mov        rdx, 0xffffffffffffffff
0000000000004cbe         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004cc3         align      16                                          ; End of unwind block (FDE at 0x9dbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000004cd0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9dd0), default_quoting_options
0000000000004cd7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004cdc         align      32                                          ; End of unwind block (FDE at 0x9dd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000004ce0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9de4), default_quoting_options
0000000000004ce7         mov        rsi, rdi
0000000000004cea         mov        rdx, 0xffffffffffffffff
0000000000004cf1         xor        edi, edi
0000000000004cf3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004cf8         align      256                                         ; End of unwind block (FDE at 0x9de4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000004d00         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x9df8), default_quoting_options
0000000000004d07         mov        rdx, rsi
0000000000004d0a         mov        rsi, rdi
0000000000004d0d         xor        edi, edi
0000000000004d0f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004d14         align      32                                          ; End of unwind block (FDE at 0x9df8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000004d20         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9e0c)
0000000000004d24         mov        rax, rdx
0000000000004d27         mov        rdx, qword [fs:0x28]
0000000000004d30         mov        qword [rsp+0x48+var_10], rdx
0000000000004d35         xor        edx, edx
0000000000004d37         cmp        esi, 0xa
0000000000004d3a         je         loc_4da4

0000000000004d3c         mov        dword [rsp+0x48+var_48], esi
0000000000004d3f         mov        rcx, rsp
0000000000004d42         mov        rdx, 0xffffffffffffffff
0000000000004d49         mov        rsi, rax
0000000000004d4c         mov        qword [rsp+0x48+var_44], 0x0
0000000000004d55         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004d5e         mov        qword [rsp+0x48+var_34], 0x0
0000000000004d67         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004d70         mov        qword [rsp+0x48+var_24], 0x0
0000000000004d79         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004d82         mov        dword [rsp+0x48+var_14], 0x0
0000000000004d8a         call       quotearg_n_options                          ; quotearg_n_options
0000000000004d8f         mov        rcx, qword [rsp+0x48+var_10]
0000000000004d94         xor        rcx, qword [fs:0x28]
0000000000004d9d         jne        loc_4da9

0000000000004d9f         add        rsp, 0x48
0000000000004da3         ret
                        ; endp

                     loc_4da4:
0000000000004da4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_4da9:
0000000000004da9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000004dae         align      16                                          ; End of unwind block (FDE at 0x9e0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000004db0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9e28), CODE XREF=quotearg_style_mem+10
0000000000004db4         mov        rax, rdx
0000000000004db7         mov        rdx, rcx
0000000000004dba         mov        rcx, qword [fs:0x28]
0000000000004dc3         mov        qword [rsp+0x48+var_10], rcx
0000000000004dc8         xor        ecx, ecx
0000000000004dca         cmp        esi, 0xa
0000000000004dcd         je         loc_4e30

0000000000004dcf         mov        dword [rsp+0x48+var_48], esi
0000000000004dd2         mov        rcx, rsp
0000000000004dd5         mov        rsi, rax
0000000000004dd8         mov        qword [rsp+0x48+var_44], 0x0
0000000000004de1         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004dea         mov        qword [rsp+0x48+var_34], 0x0
0000000000004df3         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004dfc         mov        qword [rsp+0x48+var_24], 0x0
0000000000004e05         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004e0e         mov        dword [rsp+0x48+var_14], 0x0
0000000000004e16         call       quotearg_n_options                          ; quotearg_n_options
0000000000004e1b         mov        rdx, qword [rsp+0x48+var_10]
0000000000004e20         xor        rdx, qword [fs:0x28]
0000000000004e29         jne        loc_4e35

0000000000004e2b         add        rsp, 0x48
0000000000004e2f         ret
                        ; endp

                     loc_4e30:
0000000000004e30         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_4e35:
0000000000004e35         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000004e3a         align      64                                          ; End of unwind block (FDE at 0x9e28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000004e40         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x9e44)
0000000000004e43         mov        esi, edi
0000000000004e45         xor        edi, edi
0000000000004e47         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000004e4c         align      16                                          ; End of unwind block (FDE at 0x9e44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000004e50         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x9e58)
0000000000004e53         mov        rdx, rsi
0000000000004e56         mov        esi, edi
0000000000004e58         xor        edi, edi
0000000000004e5a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000004e5f         align      32                                          ; End of unwind block (FDE at 0x9e58)

                     quotearg_char_mem:
0000000000004e60         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9e6c), CODE XREF=quotearg_char+11
0000000000004e64         mov        ecx, edx
0000000000004e66         mov        rax, qword [fs:0x28]
0000000000004e6f         mov        qword [rsp+0x48+var_10], rax
0000000000004e74         xor        eax, eax
0000000000004e76         mov        rax, qword [qword_20b210]                   ; qword_20b210
0000000000004e7d         mov        r8, rsp
0000000000004e80         and        ecx, 0x1f
0000000000004e83         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004e8b         mov        qword [rsp+0x48+var_18], rax
0000000000004e90         mov        eax, edx
0000000000004e92         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004e96         shr        al, 0x5
0000000000004e99         movzx      eax, al
0000000000004e9c         lea        r9, qword [r8+rax*4+8]
0000000000004ea1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20b1f0
0000000000004ea9         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004eae         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20b200
0000000000004eb6         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004ebb         mov        edx, dword [r9]
0000000000004ebe         mov        eax, edx
0000000000004ec0         shr        eax, cl
0000000000004ec2         not        eax
0000000000004ec4         and        eax, 0x1
0000000000004ec7         shl        eax, cl
0000000000004ec9         mov        rcx, r8
0000000000004ecc         xor        eax, edx
0000000000004ece         mov        rdx, rsi
0000000000004ed1         mov        rsi, rdi
0000000000004ed4         mov        dword [r9], eax
0000000000004ed7         xor        edi, edi
0000000000004ed9         call       quotearg_n_options                          ; quotearg_n_options
0000000000004ede         mov        rsi, qword [rsp+0x48+var_10]
0000000000004ee3         xor        rsi, qword [fs:0x28]
0000000000004eec         jne        loc_4ef3

0000000000004eee         add        rsp, 0x48
0000000000004ef2         ret
                        ; endp

                     loc_4ef3:
0000000000004ef3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000004ef8         align      256                                         ; End of unwind block (FDE at 0x9e6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000004f00         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x9e88)
0000000000004f04         mov        rsi, 0xffffffffffffffff
0000000000004f0b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000004f10         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x9e88), Begin of unwind block (FDE at 0x9e9c), CODE XREF=close_stdout+101
0000000000004f15         mov        rsi, 0xffffffffffffffff
0000000000004f1c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004f21         align      16                                          ; End of unwind block (FDE at 0x9e9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000004f30         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x9eb0)
0000000000004f35         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004f3a         align      64                                          ; End of unwind block (FDE at 0x9eb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000004f40         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9ec4)
0000000000004f44         mov        rax, rdx
0000000000004f47         mov        rdx, qword [fs:0x28]
0000000000004f50         mov        qword [rsp+0x48+var_10], rdx
0000000000004f55         xor        edx, edx
0000000000004f57         cmp        esi, 0xa
0000000000004f5a         je         loc_4fc4

0000000000004f5c         mov        dword [rsp+0x48+var_48], esi
0000000000004f5f         mov        rcx, rsp
0000000000004f62         mov        rdx, 0xffffffffffffffff
0000000000004f69         mov        rsi, rax
0000000000004f6c         mov        qword [rsp+0x48+var_44], 0x0
0000000000004f75         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000004f7e         mov        qword [rsp+0x48+var_34], 0x0
0000000000004f87         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004f90         mov        qword [rsp+0x48+var_24], 0x0
0000000000004f99         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004fa2         mov        dword [rsp+0x48+var_14], 0x0
0000000000004faa         call       quotearg_n_options                          ; quotearg_n_options
0000000000004faf         mov        rcx, qword [rsp+0x48+var_10]
0000000000004fb4         xor        rcx, qword [fs:0x28]
0000000000004fbd         jne        loc_4fc9

0000000000004fbf         add        rsp, 0x48
0000000000004fc3         ret
                        ; endp

                     loc_4fc4:
0000000000004fc4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_4fc9:
0000000000004fc9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000004fce         align      16                                          ; End of unwind block (FDE at 0x9ec4)

                     quotearg_n_custom_mem:
0000000000004fd0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x9ee0), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000004fd4         mov        r9, rcx
0000000000004fd7         mov        rcx, qword [qword_20b210]                   ; qword_20b210
0000000000004fde         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004fe6         mov        rax, qword [fs:0x28]
0000000000004fef         mov        qword [rsp+0x48+var_10], rax
0000000000004ff4         xor        eax, eax
0000000000004ff6         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004ffa         test       rsi, rsi
0000000000004ffd         mov        qword [rsp+0x48+var_18], rcx
0000000000005002         mov        dword [rsp+0x48+var_48], 0xa
0000000000005009         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20b1f0
0000000000005011         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000005016         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20b200
000000000000501e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000005023         je         loc_5057

0000000000005025         test       rdx, rdx
0000000000005028         je         loc_5057

000000000000502a         mov        qword [rsp+0x48+var_20], rsi
000000000000502f         mov        qword [rsp+0x48+var_18], rdx
0000000000005034         mov        rcx, rsp
0000000000005037         mov        rdx, r8
000000000000503a         mov        rsi, r9
000000000000503d         call       quotearg_n_options                          ; quotearg_n_options
0000000000005042         mov        rdi, qword [rsp+0x48+var_10]
0000000000005047         xor        rdi, qword [fs:0x28]
0000000000005050         jne        loc_505c

0000000000005052         add        rsp, 0x48
0000000000005056         ret
                        ; endp

                     loc_5057:
0000000000005057         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_505c:
000000000000505c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000005061         align      16                                          ; End of unwind block (FDE at 0x9ee0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
0000000000005070         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x9efc)
0000000000005077         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
000000000000507c         align      128                                         ; End of unwind block (FDE at 0x9efc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000005080         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x9f10)
0000000000005083         mov        r8, 0xffffffffffffffff
000000000000508a         mov        rdx, rsi
000000000000508d         mov        rsi, rdi
0000000000005090         xor        edi, edi
0000000000005092         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005097         align      32                                          ; End of unwind block (FDE at 0x9f10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
00000000000050a0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x9f24)
00000000000050a3         mov        rcx, rdx
00000000000050a6         mov        rdx, rsi
00000000000050a9         mov        rsi, rdi
00000000000050ac         xor        edi, edi
00000000000050ae         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
00000000000050b3         align      64                                          ; End of unwind block (FDE at 0x9f24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
00000000000050c0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9f38), quote_quoting_options
00000000000050c7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000050cc         align      16                                          ; End of unwind block (FDE at 0x9f38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
00000000000050d0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9f4c), quote_quoting_options
00000000000050d7         mov        rdx, rsi
00000000000050da         mov        rsi, rdi
00000000000050dd         xor        edi, edi
00000000000050df         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000050e4         align      16                                          ; End of unwind block (FDE at 0x9f4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
00000000000050f0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9f60), quote_quoting_options, CODE XREF=or+878, or+895
00000000000050f7         mov        rdx, 0xffffffffffffffff
00000000000050fe         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005103         align      16                                          ; End of unwind block (FDE at 0x9f60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000005110         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x9f74), quote_quoting_options, CODE XREF=main+171, find_int+172, beyond+20, binary_operator+1069, unary_operator+1414, or+945, three_arguments+283
0000000000005117         mov        rsi, rdi
000000000000511a         mov        rdx, 0xffffffffffffffff
0000000000005121         xor        edi, edi
0000000000005123         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005128         align      16                                          ; End of unwind block (FDE at 0x9f74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strintcmp:
0000000000005130         movzx      r8d, byte [rdi]                             ; Begin of unwind block (FDE at 0x9f8c), CODE XREF=binary_operator+857
0000000000005134         movzx      edx, byte [rsi]
0000000000005137         cmp        r8b, 0x2d
000000000000513b         je         loc_51e0

0000000000005141         cmp        dl, 0x2d
0000000000005144         je         loc_5228

000000000000514a         nop        word [rax+rax]

                     loc_5150:
0000000000005150         cmp        r8b, 0x30                                   ; CODE XREF=strintcmp+448
0000000000005154         je         loc_52e8

                     loc_515a:
000000000000515a         cmp        dl, 0x30                                    ; CODE XREF=strintcmp+431
000000000000515d         je         loc_52d8

0000000000005163         movzx      eax, dl
0000000000005166         cmp        dl, r8b
0000000000005169         lea        ecx, dword [rax-0x30]
000000000000516c         jne        loc_5308

0000000000005172         cmp        ecx, 0x9
0000000000005175         ja         loc_53a0

                     loc_517b:
000000000000517b         add        rdi, 0x1                                    ; CODE XREF=strintcmp+107
000000000000517f         add        rsi, 0x1
0000000000005183         movzx      eax, byte [rsi]
0000000000005186         movzx      r8d, byte [rdi]
000000000000518a         mov        edx, eax
000000000000518c         lea        ecx, dword [rax-0x30]
000000000000518f         cmp        r8b, al
0000000000005192         jne        loc_5308

0000000000005198         cmp        ecx, 0x9
000000000000519b         jbe        loc_517b

000000000000519d         movzx      edx, r8b

                     loc_51a1:
00000000000051a1         xor        r9d, r9d                                    ; CODE XREF=strintcmp+482
00000000000051a4         cmp        ecx, 0x9
00000000000051a7         ja         loc_53a0

00000000000051ad         nop        dword [rax]

                     loc_51b0:
00000000000051b0         xor        ecx, ecx                                    ; CODE XREF=strintcmp+517
00000000000051b2         nop        word [rax+rax]

                     loc_51b8:
00000000000051b8         movzx      eax, byte [rsi+rcx+1]                       ; CODE XREF=strintcmp+151
00000000000051bd         add        rcx, 0x1
00000000000051c1         sub        eax, 0x30
00000000000051c4         cmp        eax, 0x9
00000000000051c7         jbe        loc_51b8

00000000000051c9         cmp        r9, rcx
00000000000051cc         je         loc_53a3

00000000000051d2         sbb        eax, eax
00000000000051d4         or         eax, 0x1
00000000000051d7         ret
                        ; endp
00000000000051d8         align      32

                     loc_51e0:
00000000000051e0         add        rdi, 0x1                                    ; CODE XREF=strintcmp+11, strintcmp+186
00000000000051e4         movzx      ecx, byte [rdi]
00000000000051e7         cmp        cl, 0x30
00000000000051ea         je         loc_51e0

00000000000051ec         movzx      eax, cl
00000000000051ef         cmp        dl, 0x2d
00000000000051f2         lea        r8d, dword [rax-0x30]
00000000000051f6         je         loc_5260

00000000000051f8         cmp        r8d, 0x9
00000000000051fc         jbe        loc_53ce

0000000000005202         nop        word [rax+rax]

                     loc_5208:
0000000000005208         cmp        dl, 0x30                                    ; CODE XREF=strintcmp+463
000000000000520b         je         loc_52f8

0000000000005211         sub        edx, 0x30
0000000000005214         xor        r9d, r9d
0000000000005217         cmp        edx, 0x9
000000000000521a         setbe      r9b
000000000000521e         mov        eax, r9d
0000000000005221         neg        eax
0000000000005223         ret
                        ; endp
0000000000005224         align      8

                     loc_5228:
0000000000005228         add        rsi, 0x1                                    ; CODE XREF=strintcmp+20, strintcmp+257
000000000000522c         movzx      eax, byte [rsi]
000000000000522f         cmp        al, 0x30
0000000000005231         je         loc_5228

0000000000005233         lea        edx, dword [rax-0x30]
0000000000005236         mov        eax, 0x1
000000000000523b         cmp        edx, 0x9
000000000000523e         jbe        loc_5343

                     loc_5244:
0000000000005244         cmp        r8b, 0x30                                   ; CODE XREF=strintcmp+544
0000000000005248         je         loc_5348

000000000000524e         sub        r8d, 0x30
0000000000005252         xor        eax, eax
0000000000005254         cmp        r8d, 0x9
0000000000005258         setbe      al
000000000000525b         ret
                        ; endp
000000000000525c         align      32

                     loc_5260:
0000000000005260         add        rsi, 0x1                                    ; CODE XREF=strintcmp+198, strintcmp+316
0000000000005264         movzx      r9d, byte [rsi]
0000000000005268         cmp        r9b, 0x30
000000000000526c         je         loc_5260

000000000000526e         cmp        cl, r9b
0000000000005271         jne        loc_53b4

0000000000005277         cmp        r8d, 0x9
000000000000527b         lea        edx, dword [rax-0x30]
000000000000527e         ja         loc_52a1

                     loc_5280:
0000000000005280         add        rdi, 0x1                                    ; CODE XREF=strintcmp+367
0000000000005284         add        rsi, 0x1
0000000000005288         movzx      eax, byte [rsi]
000000000000528b         movzx      ecx, byte [rdi]
000000000000528e         mov        r9d, eax
0000000000005291         lea        edx, dword [rax-0x30]
0000000000005294         cmp        cl, al
0000000000005296         jne        loc_5358

000000000000529c         cmp        edx, 0x9
000000000000529f         jbe        loc_5280

                     loc_52a1:
00000000000052a1         xor        r10d, r10d                                  ; CODE XREF=strintcmp+334, strintcmp+564
00000000000052a4         cmp        edx, 0x9
00000000000052a7         ja         loc_53a0

                     loc_52ad:
00000000000052ad         xor        edx, edx                                    ; CODE XREF=strintcmp+597
00000000000052af         nop

                     loc_52b0:
00000000000052b0         movzx      eax, byte [rsi+rdx+1]                       ; CODE XREF=strintcmp+399
00000000000052b5         add        rdx, 0x1
00000000000052b9         sub        eax, 0x30
00000000000052bc         cmp        eax, 0x9
00000000000052bf         jbe        loc_52b0

00000000000052c1         cmp        r10, rdx
00000000000052c4         je         loc_53bd

00000000000052ca         sbb        eax, eax
00000000000052cc         and        eax, 0x2
00000000000052cf         sub        eax, 0x1
00000000000052d2         ret
                        ; endp
00000000000052d3         align      8

                     loc_52d8:
00000000000052d8         add        rsi, 0x1                                    ; CODE XREF=strintcmp+45
00000000000052dc         movzx      edx, byte [rsi]
00000000000052df         jmp        loc_515a
00000000000052e4         align      8

                     loc_52e8:
00000000000052e8         add        rdi, 0x1                                    ; CODE XREF=strintcmp+36
00000000000052ec         movzx      r8d, byte [rdi]
00000000000052f0         jmp        loc_5150
00000000000052f5         align      8

                     loc_52f8:
00000000000052f8         add        rsi, 0x1                                    ; CODE XREF=strintcmp+219
00000000000052fc         movzx      edx, byte [rsi]
00000000000052ff         jmp        loc_5208
0000000000005304         align      8

                     loc_5308:
0000000000005308         movzx      eax, r8b                                    ; CODE XREF=strintcmp+60, strintcmp+98
000000000000530c         sub        eax, 0x30
000000000000530f         cmp        eax, 0x9
0000000000005312         ja         loc_51a1

0000000000005318         xor        r9d, r9d
000000000000531b         nop        dword [rax+rax]

                     loc_5320:
0000000000005320         movzx      eax, byte [rdi+r9+1]                        ; CODE XREF=strintcmp+512
0000000000005326         add        r9, 0x1
000000000000532a         sub        eax, 0x30
000000000000532d         cmp        eax, 0x9
0000000000005330         jbe        loc_5320

0000000000005332         cmp        ecx, 0x9
0000000000005335         jbe        loc_51b0

000000000000533b         xor        eax, eax
000000000000533d         test       r9, r9
0000000000005340         setne      al

                     loc_5343:
0000000000005343         ret                                                    ; CODE XREF=strintcmp+270, strintcmp+632, strintcmp+658
                        ; endp
0000000000005345         align      8

                     loc_5348:
0000000000005348         add        rdi, 0x1                                    ; CODE XREF=strintcmp+280
000000000000534c         movzx      r8d, byte [rdi]
0000000000005350         jmp        loc_5244
0000000000005355         align      8

                     loc_5358:
0000000000005358         movzx      r8d, cl                                     ; CODE XREF=strintcmp+358
000000000000535c         sub        r8d, 0x30

                     loc_5360:
0000000000005360         cmp        r8d, 0x9                                    ; CODE XREF=strintcmp+651
0000000000005364         ja         loc_52a1

000000000000536a         xor        r10d, r10d
000000000000536d         nop        dword [rax]

                     loc_5370:
0000000000005370         movzx      eax, byte [rdi+r10+1]                       ; CODE XREF=strintcmp+592
0000000000005376         add        r10, 0x1
000000000000537a         sub        eax, 0x30
000000000000537d         cmp        eax, 0x9
0000000000005380         jbe        loc_5370

0000000000005382         cmp        edx, 0x9
0000000000005385         jbe        loc_52ad

000000000000538b         xor        eax, eax
000000000000538d         test       r10, r10
0000000000005390         setne      al
0000000000005393         neg        eax
0000000000005395         ret
                        ; endp
0000000000005396         align      32

                     loc_53a0:
00000000000053a0         xor        eax, eax                                    ; CODE XREF=strintcmp+69, strintcmp+119, strintcmp+375
00000000000053a2         ret
                        ; endp

                     loc_53a3:
00000000000053a3         xor        eax, eax                                    ; CODE XREF=strintcmp+156
00000000000053a5         test       r9, r9
00000000000053a8         je         loc_5343

00000000000053aa         movzx      r9d, r8b
00000000000053ae         mov        eax, r9d
00000000000053b1         sub        eax, edx
00000000000053b3         ret
                        ; endp

                     loc_53b4:
00000000000053b4         movzx      eax, r9b                                    ; CODE XREF=strintcmp+321
00000000000053b8         lea        edx, dword [rax-0x30]
00000000000053bb         jmp        loc_5360

                     loc_53bd:
00000000000053bd         xor        eax, eax                                    ; CODE XREF=strintcmp+404
00000000000053bf         test       r10, r10
00000000000053c2         je         loc_5343

00000000000053c8         mov        eax, r9d
00000000000053cb         sub        eax, ecx
00000000000053cd         ret
                        ; endp

                     loc_53ce:
00000000000053ce         mov        eax, 0xffffffff                             ; CODE XREF=strintcmp+204
00000000000053d3         ret
                        ; endp
00000000000053d4         align      32                                          ; End of unwind block (FDE at 0x9f8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     verror_at_line:
00000000000053e0         push       r14                                         ; Begin of unwind block (FDE at 0x9fa4), CODE XREF=verror+10
00000000000053e2         push       r13
00000000000053e4         mov        r13d, esi
00000000000053e7         push       r12
00000000000053e9         push       rbp
00000000000053ea         mov        r12d, edi
00000000000053ed         push       rbx
00000000000053ee         mov        rsi, r9
00000000000053f1         mov        rdi, r8
00000000000053f4         mov        rbp, rdx
00000000000053f7         mov        r14d, ecx
00000000000053fa         call       xvasprintf                                  ; xvasprintf
00000000000053ff         test       rax, rax
0000000000005402         je         loc_5467

0000000000005404         test       rbp, rbp
0000000000005407         mov        rbx, rax
000000000000540a         je         loc_5440

000000000000540c         lea        r8, qword [aSS+4]                           ; argument "__format" for method j_error_at_line, 0x8d93
0000000000005413         mov        edi, r12d                                   ; argument "__status" for method j_error_at_line
0000000000005416         mov        r9, rax
0000000000005419         mov        ecx, r14d                                   ; argument "__lineno" for method j_error_at_line
000000000000541c         mov        rdx, rbp                                    ; argument "__fname" for method j_error_at_line
000000000000541f         mov        esi, r13d                                   ; argument "__errnum" for method j_error_at_line
0000000000005422         xor        eax, eax
0000000000005424         call       j_error_at_line                             ; error_at_line
0000000000005429         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000542c         pop        rbx
000000000000542d         pop        rbp
000000000000542e         pop        r12
0000000000005430         pop        r13
0000000000005432         pop        r14
0000000000005434         jmp        j_free                                      ; free
                        ; endp
0000000000005439         align      64

                     loc_5440:
0000000000005440         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x8d93, CODE XREF=verror_at_line+42
0000000000005447         mov        edi, r12d                                   ; argument "__status" for method j_error
000000000000544a         mov        rcx, rax
000000000000544d         mov        esi, r13d                                   ; argument "__errnum" for method j_error
0000000000005450         xor        eax, eax
0000000000005452         call       j_error                                     ; error
0000000000005457         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000545a         pop        rbx
000000000000545b         pop        rbp
000000000000545c         pop        r12
000000000000545e         pop        r13
0000000000005460         pop        r14
0000000000005462         jmp        j_free                                      ; free
                        ; endp

                     loc_5467:
0000000000005467         lea        rsi, qword [aUnableToDispla]                ; argument "msgid" for method j_dcgettext, "unable to display error message", CODE XREF=verror_at_line+34
000000000000546e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005473         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005475         call       j_dcgettext                                 ; dcgettext
000000000000547a         mov        rbx, rax
000000000000547d         call       j___errno_location                          ; __errno_location
0000000000005482         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000005484         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000005487         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005489         xor        eax, eax
000000000000548b         call       j_error                                     ; error
0000000000005490         call       j_abort                                     ; abort
                        ; endp
0000000000005495         align      32                                          ; End of unwind block (FDE at 0x9fa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     verror:
00000000000054a0         mov        r8, rdx                                     ; Begin of unwind block (FDE at 0x9ff4), CODE XREF=test_syntax_error+155
00000000000054a3         mov        r9, rcx
00000000000054a6         xor        edx, edx
00000000000054a8         xor        ecx, ecx
00000000000054aa         jmp        verror_at_line                              ; verror_at_line
                        ; endp
00000000000054af         align      16                                          ; End of unwind block (FDE at 0x9ff4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
00000000000054b0         push       rbx                                         ; Begin of unwind block (FDE at 0xa00c), CODE XREF=quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15, xstrcat+135, xstrcat+229
00000000000054b1         mov        rbx, rdi
00000000000054b4         call       j_malloc                                    ; malloc
00000000000054b9         test       rax, rax
00000000000054bc         jne        loc_54c3

00000000000054be         test       rbx, rbx
00000000000054c1         jne        loc_54c5

                     loc_54c3:
00000000000054c3         pop        rbx                                         ; CODE XREF=xmalloc+12
00000000000054c4         ret
                        ; endp

                     loc_54c5:
00000000000054c5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_54ca:
00000000000054ca         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xa00c)
                     xnmalloc:
00000000000054d0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xa028)
00000000000054d3         mul        rsi
00000000000054d6         mov        rdi, rax
00000000000054d9         seto       al
00000000000054dc         test       rdi, rdi
00000000000054df         js         loc_54eb

00000000000054e1         movzx      eax, al
00000000000054e4         test       rax, rax
00000000000054e7         jne        loc_54eb

00000000000054e9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_54eb:
00000000000054eb         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
00000000000054ef         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_54f4:
00000000000054f4         nop                                                    ; End of unwind block (FDE at 0xa028)
00000000000054f6         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000005500         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xa03c)
                        ; endp
0000000000005502         align      16                                          ; End of unwind block (FDE at 0xa03c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000005510         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xa050), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000005513         push       rbx
0000000000005514         mov        rbx, rsi
0000000000005517         jne        loc_551e

0000000000005519         test       rdi, rdi
000000000000551c         jne        loc_5538

                     loc_551e:
000000000000551e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000005521         call       j_realloc                                   ; realloc
0000000000005526         test       rax, rax
0000000000005529         jne        loc_5530

000000000000552b         test       rbx, rbx
000000000000552e         jne        loc_5541

                     loc_5530:
0000000000005530         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000005531         ret
                        ; endp
0000000000005532         align      8

                     loc_5538:
0000000000005538         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000553d         xor        eax, eax
000000000000553f         pop        rbx
0000000000005540         ret
                        ; endp

                     loc_5541:
0000000000005541         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5546:
0000000000005546         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xa050)
                     xnrealloc:
0000000000005550         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xa074)
0000000000005553         mul        rdx
0000000000005556         mov        rsi, rax
0000000000005559         seto       al
000000000000555c         test       rsi, rsi
000000000000555f         js         loc_556b

0000000000005561         movzx      eax, al
0000000000005564         test       rax, rax
0000000000005567         jne        loc_556b

0000000000005569         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_556b:
000000000000556b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000556f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5574:
0000000000005574         nop                                                    ; End of unwind block (FDE at 0xa074)
0000000000005576         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000005580         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa088)
0000000000005583         mov        r9, rdx
0000000000005586         mov        rcx, qword [rsi]
0000000000005589         je         loc_55c0

000000000000558b         xor        edx, edx
000000000000558d         movabs     rax, 0x5555555555555554
0000000000005597         div        r9
000000000000559a         cmp        rax, rcx
000000000000559d         jbe        loc_55db

000000000000559f         mov        rax, rcx
00000000000055a2         shr        rax, 0x1
00000000000055a5         lea        rcx, qword [rax+rcx+1]

                     loc_55aa:
00000000000055aa         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
00000000000055ad         imul       rcx, r9                                     ; argument #4 for method xrealloc
00000000000055b1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
00000000000055b4         jmp        xrealloc                                    ; xrealloc
                        ; endp
00000000000055b9         align      64

                     loc_55c0:
00000000000055c0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
00000000000055c3         je         loc_55e8

                     loc_55c5:
00000000000055c5         mov        rax, rcx                                    ; CODE XREF=sub_55e4+28
00000000000055c8         mul        r9
00000000000055cb         seto       dl
00000000000055ce         test       rax, rax
00000000000055d1         movzx      edx, dl
00000000000055d4         js         loc_55db

00000000000055d6         test       rdx, rdx
00000000000055d9         je         loc_55aa

                     loc_55db:
00000000000055db         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
00000000000055df         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_55e4:
00000000000055e4         nop        dword [rax]
                        ; endp

                     loc_55e8:
00000000000055e8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
00000000000055ea         mov        eax, 0x80
00000000000055ef         xor        r8d, r8d
00000000000055f2         div        r9
00000000000055f5         test       rax, rax
00000000000055f8         sete       r8b
00000000000055fc         lea        rcx, qword [r8+rax]
0000000000005600         jmp        loc_55c5
0000000000005602         align      16                                          ; End of unwind block (FDE at 0xa088)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000005610         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa0a0)
0000000000005613         mov        rax, qword [rsi]
0000000000005616         je         loc_5640

0000000000005618         movabs     rdx, 0x5555555555555553
0000000000005622         cmp        rax, rdx
0000000000005625         ja         loc_5651

0000000000005627         mov        rdx, rax
000000000000562a         shr        rdx, 0x1
000000000000562d         lea        rax, qword [rdx+rax+1]

                     loc_5632:
0000000000005632         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000005635         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000005638         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000563d         align      64

                     loc_5640:
0000000000005640         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000005643         mov        edx, 0x80
0000000000005648         cmove      rax, rdx
000000000000564c         test       rax, rax
000000000000564f         jns        loc_5632

                     loc_5651:
0000000000005651         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000005655         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_565a:
000000000000565a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xa0a0)
                     xzalloc:
0000000000005660         push       rbx                                         ; Begin of unwind block (FDE at 0xa0b8)
0000000000005661         mov        rbx, rdi
0000000000005664         call       xmalloc                                     ; xmalloc
0000000000005669         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000566c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000566e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000005671         pop        rbx
0000000000005672         jmp        j_memset                                    ; memset
                        ; endp
0000000000005677         align      128                                         ; End of unwind block (FDE at 0xa0b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000005680         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xa0d4)
0000000000005683         sub        rsp, 0x8
0000000000005687         mul        rsi
000000000000568a         seto       dl
000000000000568d         test       rax, rax
0000000000005690         js         loc_56a9

0000000000005692         movzx      edx, dl
0000000000005695         test       rdx, rdx
0000000000005698         jne        loc_56a9

000000000000569a         call       j_calloc                                    ; calloc
000000000000569f         test       rax, rax
00000000000056a2         je         loc_56a9

00000000000056a4         add        rsp, 0x8
00000000000056a8         ret
                        ; endp

                     loc_56a9:
00000000000056a9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_56ae:
00000000000056ae         nop                                                    ; End of unwind block (FDE at 0xa0d4)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
00000000000056b0         push       rbp                                         ; Begin of unwind block (FDE at 0xa0f0), CODE XREF=clone_quoting_options+40
00000000000056b1         push       rbx
00000000000056b2         mov        rbp, rdi
00000000000056b5         mov        rdi, rsi
00000000000056b8         mov        rbx, rsi
00000000000056bb         sub        rsp, 0x8
00000000000056bf         call       xmalloc                                     ; xmalloc
00000000000056c4         add        rsp, 0x8
00000000000056c8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
00000000000056cb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
00000000000056ce         pop        rbx
00000000000056cf         pop        rbp
00000000000056d0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000056d3         jmp        j_memcpy                                    ; memcpy
                        ; endp
00000000000056d8         align      32                                          ; End of unwind block (FDE at 0xa0f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
00000000000056e0         push       rbx                                         ; Begin of unwind block (FDE at 0xa118)
00000000000056e1         mov        rbx, rdi
00000000000056e4         call       j_strlen                                    ; strlen
00000000000056e9         mov        rdi, rbx
00000000000056ec         lea        rsi, qword [rax+1]
00000000000056f0         pop        rbx
00000000000056f1         jmp        xmemdup                                     ; xmemdup
                        ; endp
00000000000056f3         align      256                                         ; End of unwind block (FDE at 0xa118)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000005700         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xa134), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xvasprintf+159
0000000000005707         sub        rsp, 0x8
000000000000570b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005710         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005712         call       j_dcgettext                                 ; dcgettext
0000000000005717         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000571d         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x8d93
0000000000005724         mov        rcx, rax
0000000000005727         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005729         xor        eax, eax
000000000000572b         call       j_error                                     ; error
0000000000005730         call       j_abort                                     ; abort
                        ; endp
0000000000005735         align      64                                          ; End of unwind block (FDE at 0xa134)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     xstrcat:
0000000000005740         push       r15                                         ; Begin of unwind block (FDE at 0xa14c), CODE XREF=xvasprintf+74
0000000000005742         push       r14
0000000000005744         push       r13
0000000000005746         push       r12
0000000000005748         push       rbp
0000000000005749         push       rbx
000000000000574a         sub        rsp, 0x28
000000000000574e         mov        rax, qword [fs:0x28]
0000000000005757         mov        qword [rsp+0x58+var_40], rax
000000000000575c         xor        eax, eax
000000000000575e         test       rdi, rdi
0000000000005761         movdqu     xmm0, xmmword [rsi]
0000000000005765         movups     xmmword [rsp+0x58+var_58], xmm0
0000000000005769         mov        r14, qword [rsi+0x10]
000000000000576d         mov        qword [rsp+0x58+var_48], r14
0000000000005772         je         loc_5820

0000000000005778         mov        r12, rdi
000000000000577b         mov        r15, rsi
000000000000577e         mov        rbp, rdi
0000000000005781         xor        ebx, ebx
0000000000005783         mov        r13, 0xffffffffffffffff

                     loc_578a:
000000000000578a         mov        edx, dword [rsp+0x58+var_58]                ; CODE XREF=xstrcat+116
000000000000578d         cmp        edx, 0x2f
0000000000005790         ja         loc_5870

0000000000005796         mov        eax, edx
0000000000005798         add        edx, 0x8
000000000000579b         add        rax, r14
000000000000579e         mov        dword [rsp+0x58+var_58], edx

                     loc_57a1:
00000000000057a1         mov        rdi, qword [rax]                            ; argument "__s" for method j_strlen, CODE XREF=xstrcat+318
00000000000057a4         call       j_strlen                                    ; strlen
00000000000057a9         add        rbx, rax
00000000000057ac         cmovb      rbx, r13
00000000000057b0         sub        rbp, 0x1
00000000000057b4         jne        loc_578a

00000000000057b6         cmp        rbx, 0x7fffffff
00000000000057bd         ja         loc_5860

00000000000057c3         lea        rdi, qword [rbx+1]
00000000000057c7         call       xmalloc                                     ; xmalloc
00000000000057cc         mov        r14, rax
00000000000057cf         mov        rbx, rax
00000000000057d2         jmp        loc_5805

                     loc_57d4:
00000000000057d4         mov        eax, edx                                    ; CODE XREF=xstrcat+203
00000000000057d6         add        rax, qword [r15+0x10]
00000000000057da         add        edx, 0x8
00000000000057dd         mov        dword [r15], edx

                     loc_57e0:
00000000000057e0         mov        r13, qword [rax]                            ; CODE XREF=xstrcat+217
00000000000057e3         mov        rdi, r13                                    ; argument "__s" for method j_strlen
00000000000057e6         call       j_strlen                                    ; strlen
00000000000057eb         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
00000000000057ee         mov        rbp, rax
00000000000057f1         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
00000000000057f4         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
00000000000057f7         add        rbx, rbp
00000000000057fa         call       j_memcpy                                    ; memcpy
00000000000057ff         sub        r12, 0x1
0000000000005803         je         loc_5830

                     loc_5805:
0000000000005805         mov        edx, dword [r15]                            ; CODE XREF=xstrcat+146
0000000000005808         cmp        edx, 0x2f
000000000000580b         jbe        loc_57d4

000000000000580d         mov        rax, qword [r15+8]
0000000000005811         lea        rdx, qword [rax+8]
0000000000005815         mov        qword [r15+8], rdx
0000000000005819         jmp        loc_57e0
000000000000581b         align      32

                     loc_5820:
0000000000005820         mov        edi, 0x1                                    ; CODE XREF=xstrcat+50
0000000000005825         call       xmalloc                                     ; xmalloc
000000000000582a         mov        rbx, rax
000000000000582d         mov        r14, rax

                     loc_5830:
0000000000005830         mov        byte [rbx], 0x0                             ; CODE XREF=xstrcat+195

                     loc_5833:
0000000000005833         mov        rcx, qword [rsp+0x58+var_40]                ; CODE XREF=xstrcat+302
0000000000005838         xor        rcx, qword [fs:0x28]
0000000000005841         mov        rax, r14
0000000000005844         jne        loc_5855

0000000000005846         add        rsp, 0x28
000000000000584a         pop        rbx
000000000000584b         pop        rbp
000000000000584c         pop        r12
000000000000584e         pop        r13
0000000000005850         pop        r14
0000000000005852         pop        r15
0000000000005854         ret
                        ; endp

                     loc_5855:
0000000000005855         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrcat+260
                        ; endp
000000000000585a         align      32

                     loc_5860:
0000000000005860         call       j___errno_location                          ; __errno_location, CODE XREF=xstrcat+125
0000000000005865         xor        r14d, r14d
0000000000005868         mov        dword [rax], 0x4b
000000000000586e         jmp        loc_5833

                     loc_5870:
0000000000005870         mov        rax, qword [rsp+0x58+var_50]                ; CODE XREF=xstrcat+80
0000000000005875         lea        rdx, qword [rax+8]
0000000000005879         mov        qword [rsp+0x58+var_50], rdx
000000000000587e         jmp        loc_57a1
0000000000005883         align      16                                          ; End of unwind block (FDE at 0xa14c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     xvasprintf:
0000000000005890         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0xa198), CODE XREF=verror_at_line+26
0000000000005894         mov        rax, qword [fs:0x28]
000000000000589d         mov        qword [rsp+0x18+var_10], rax
00000000000058a2         xor        eax, eax
00000000000058a4         movzx      eax, byte [rdi]
00000000000058a7         test       al, al
00000000000058a9         je         loc_5926

00000000000058ab         cmp        al, 0x25
00000000000058ad         mov        r8, rdi
00000000000058b0         jne        loc_58e8

00000000000058b2         cmp        byte [rdi+1], 0x73
00000000000058b6         jne        loc_58e8

00000000000058b8         xor        edi, edi
00000000000058ba         jmp        loc_58cd
00000000000058bc         align      64

                     loc_58c0:
00000000000058c0         cmp        cl, 0x25                                    ; CODE XREF=xvasprintf+72
00000000000058c3         jne        loc_58e8

00000000000058c5         cmp        byte [r8+rdi*2+1], 0x73
00000000000058cb         jne        loc_58e8

                     loc_58cd:
00000000000058cd         add        rdi, 0x1                                    ; CODE XREF=xvasprintf+42
00000000000058d1         movzx      ecx, byte [r8+rdi*2]
00000000000058d6         test       cl, cl
00000000000058d8         jne        loc_58c0

                     loc_58da:
00000000000058da         call       xstrcat                                     ; xstrcat, CODE XREF=xvasprintf+152
00000000000058df         jmp        loc_58fe
00000000000058e1         align      8

                     loc_58e8:
00000000000058e8         mov        rdx, rsi                                    ; CODE XREF=xvasprintf+32, xvasprintf+38, xvasprintf+51, xvasprintf+59
00000000000058eb         mov        rdi, rsp
00000000000058ee         mov        rsi, r8
00000000000058f1         call       rpl_vasprintf                               ; rpl_vasprintf
00000000000058f6         test       eax, eax
00000000000058f8         js         loc_5918

00000000000058fa         mov        rax, qword [rsp+0x18+var_18]

                     loc_58fe:
00000000000058fe         mov        rdx, qword [rsp+0x18+var_10]                ; CODE XREF=xvasprintf+79, xvasprintf+148
0000000000005903         xor        rdx, qword [fs:0x28]
000000000000590c         jne        loc_592a

000000000000590e         add        rsp, 0x18
0000000000005912         ret
                        ; endp
0000000000005913         align      8

                     loc_5918:
0000000000005918         call       j___errno_location                          ; __errno_location, CODE XREF=xvasprintf+104
000000000000591d         cmp        dword [rax], 0xc
0000000000005920         je         loc_592f

0000000000005922         xor        eax, eax
0000000000005924         jmp        loc_58fe

                     loc_5926:
0000000000005926         xor        edi, edi                                    ; CODE XREF=xvasprintf+25
0000000000005928         jmp        loc_58da

                     loc_592a:
000000000000592a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xvasprintf+124
                        ; endp

                     loc_592f:
000000000000592f         call       xalloc_die                                  ; xalloc_die, CODE XREF=xvasprintf+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5934:
0000000000005934         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xa198)
000000000000593e         nop
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000005940         push       r13                                         ; Begin of unwind block (FDE at 0xa1b4), CODE XREF=sub_3cd0+534
0000000000005942         push       r12
0000000000005944         mov        r13, rsi
0000000000005947         push       rbp
0000000000005948         push       rbx
0000000000005949         mov        rbx, rdi
000000000000594c         mov        r12, rdx
000000000000594f         sub        rsp, 0x18
0000000000005953         mov        rax, qword [fs:0x28]
000000000000595c         mov        qword [rsp+0x38+var_30], rax
0000000000005961         xor        eax, eax
0000000000005963         lea        rax, qword [rsp+0x38+var_34]
0000000000005968         test       rdi, rdi
000000000000596b         cmove      rbx, rax
000000000000596f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000005972         call       j_mbrtowc                                   ; mbrtowc
0000000000005977         cmp        rax, 0xfffffffffffffffd
000000000000597b         mov        rbp, rax
000000000000597e         jbe        loc_59a0

0000000000005980         test       r12, r12
0000000000005983         je         loc_59a0

0000000000005985         xor        edi, edi
0000000000005987         call       hard_locale                                 ; hard_locale
000000000000598c         test       al, al
000000000000598e         jne        loc_59a0

0000000000005990         movzx      eax, byte [r13]
0000000000005995         mov        ebp, 0x1
000000000000599a         mov        dword [rbx], eax
000000000000599c         nop        dword [rax]

                     loc_59a0:
00000000000059a0         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
00000000000059a5         xor        rdx, qword [fs:0x28]
00000000000059ae         mov        rax, rbp
00000000000059b1         jne        loc_59be

00000000000059b3         add        rsp, 0x18
00000000000059b7         pop        rbx
00000000000059b8         pop        rbp
00000000000059b9         pop        r12
00000000000059bb         pop        r13
00000000000059bd         ret
                        ; endp

                     loc_59be:
00000000000059be         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
00000000000059c3         align      16                                          ; End of unwind block (FDE at 0xa1b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     rpl_vasprintf:
00000000000059d0         push       rbx                                         ; Begin of unwind block (FDE at 0xa1f4), CODE XREF=xvasprintf+97
00000000000059d1         mov        rax, rsi
00000000000059d4         mov        rbx, rdi
00000000000059d7         xor        edi, edi
00000000000059d9         sub        rsp, 0x10
00000000000059dd         mov        rcx, qword [fs:0x28]
00000000000059e6         mov        qword [rsp+0x18+var_10], rcx
00000000000059eb         xor        ecx, ecx
00000000000059ed         mov        rsi, rsp
00000000000059f0         mov        rcx, rdx
00000000000059f3         mov        rdx, rax
00000000000059f6         call       vasnprintf                                  ; vasnprintf
00000000000059fb         test       rax, rax
00000000000059fe         je         loc_5a42

0000000000005a00         mov        rdx, qword [rsp+0x18+var_18]
0000000000005a04         cmp        rdx, 0x7fffffff
0000000000005a0b         ja         loc_5a28

0000000000005a0d         mov        qword [rbx], rax
0000000000005a10         mov        eax, edx

                     loc_5a12:
0000000000005a12         mov        rbx, qword [rsp+0x18+var_10]                ; CODE XREF=rpl_vasprintf+112, rpl_vasprintf+119
0000000000005a17         xor        rbx, qword [fs:0x28]
0000000000005a20         jne        loc_5a49

0000000000005a22         add        rsp, 0x10
0000000000005a26         pop        rbx
0000000000005a27         ret
                        ; endp

                     loc_5a28:
0000000000005a28         mov        rdi, rax                                    ; argument "__ptr" for method j_free, CODE XREF=rpl_vasprintf+59
0000000000005a2b         call       j_free                                      ; free
0000000000005a30         call       j___errno_location                          ; __errno_location
0000000000005a35         mov        dword [rax], 0x4b
0000000000005a3b         mov        eax, 0xffffffff
0000000000005a40         jmp        loc_5a12

                     loc_5a42:
0000000000005a42         mov        eax, 0xffffffff                             ; CODE XREF=rpl_vasprintf+46
0000000000005a47         jmp        loc_5a12

                     loc_5a49:
0000000000005a49         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vasprintf+80
                        ; endp
0000000000005a4e         align      16                                          ; End of unwind block (FDE at 0xa1f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000005a50         push       r12                                         ; Begin of unwind block (FDE at 0xa21c), CODE XREF=close_stdout+13, close_stdout+51
0000000000005a52         push       rbp
0000000000005a53         mov        rbp, rdi
0000000000005a56         push       rbx
0000000000005a57         call       j___fpending                                ; __fpending
0000000000005a5c         mov        ebx, dword [rbp]
0000000000005a5f         mov        rdi, rbp
0000000000005a62         mov        r12, rax
0000000000005a65         call       rpl_fclose                                  ; rpl_fclose
0000000000005a6a         and        ebx, 0x20
0000000000005a6d         test       ebx, ebx
0000000000005a6f         jne        loc_5a88

0000000000005a71         test       eax, eax
0000000000005a73         je         loc_5a7f

0000000000005a75         test       r12, r12
0000000000005a78         mov        eax, 0xffffffff
0000000000005a7d         je         loc_5ab8

                     loc_5a7f:
0000000000005a7f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000005a80         pop        rbp
0000000000005a81         pop        r12
0000000000005a83         ret
                        ; endp
0000000000005a84         align      8

                     loc_5a88:
0000000000005a88         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000005a8a         jne        loc_5aa8

0000000000005a8c         call       j___errno_location                          ; __errno_location
0000000000005a91         mov        dword [rax], 0x0
0000000000005a97         mov        eax, 0xffffffff
0000000000005a9c         pop        rbx
0000000000005a9d         pop        rbp
0000000000005a9e         pop        r12
0000000000005aa0         ret
                        ; endp
0000000000005aa1         align      8

                     loc_5aa8:
0000000000005aa8         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000005aa9         mov        eax, 0xffffffff
0000000000005aae         pop        rbp
0000000000005aaf         pop        r12
0000000000005ab1         ret
                        ; endp
0000000000005ab2         align      8

                     loc_5ab8:
0000000000005ab8         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000005abd         cmp        dword [rax], 0x9
0000000000005ac0         pop        rbx
0000000000005ac1         pop        rbp
0000000000005ac2         pop        r12
0000000000005ac4         setne      al
0000000000005ac7         movzx      eax, al
0000000000005aca         neg        eax
0000000000005acc         ret
                        ; endp
0000000000005acd         align      16                                          ; End of unwind block (FDE at 0xa21c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000005ad0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xa26c), CODE XREF=rpl_mbrtowc+71
0000000000005ad4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000005ad6         call       j_setlocale                                 ; setlocale
0000000000005adb         mov        rdx, rax
0000000000005ade         mov        eax, 0x1
0000000000005ae3         test       rdx, rdx
0000000000005ae6         je         loc_5b05

0000000000005ae8         lea        rdi, qword [aMemoryExhauste+17]             ; 0x92d9
0000000000005aef         mov        ecx, 0x2
0000000000005af4         mov        rsi, rdx
0000000000005af7         rep  cmpsb byte [rsi], byte [rdi]
0000000000005af9         seta       cl
0000000000005afc         sbb        cl, 0x0
0000000000005aff         xor        eax, eax
0000000000005b01         test       cl, cl
0000000000005b03         jne        loc_5b10

                     loc_5b05:
0000000000005b05         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000005b09         ret
                        ; endp
0000000000005b0a         align      16

                     loc_5b10:
0000000000005b10         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000005b17         mov        ecx, 0x6
0000000000005b1c         mov        rsi, rdx
0000000000005b1f         rep  cmpsb byte [rsi], byte [rdi]
0000000000005b21         seta       al
0000000000005b24         sbb        al, 0x0
0000000000005b26         test       al, al
0000000000005b28         setne      al
0000000000005b2b         add        rsp, 0x8
0000000000005b2f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
0000000000005b30         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xa26c), Begin of unwind block (FDE at 0xa28c), CODE XREF=gettext_quote.part.1+11
0000000000005b34         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
0000000000005b39         call       j_nl_langinfo                               ; nl_langinfo
0000000000005b3e         test       rax, rax
0000000000005b41         je         loc_5b60

0000000000005b43         cmp        byte [rax], 0x0
0000000000005b46         lea        rdx, qword [aAscii]                         ; "ASCII"
0000000000005b4d         cmove      rax, rdx
0000000000005b51         add        rsp, 0x8
0000000000005b55         ret
                        ; endp
0000000000005b56         align      32

                     loc_5b60:
0000000000005b60         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000005b67         add        rsp, 0x8
0000000000005b6b         ret
                        ; endp
0000000000005b6c         align      16                                          ; End of unwind block (FDE at 0xa28c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000005b70         push       r12                                         ; Begin of unwind block (FDE at 0xa2ac), CODE XREF=close_stream+21
0000000000005b72         push       rbp
0000000000005b73         push       rbx
0000000000005b74         mov        rbx, rdi
0000000000005b77         call       j_fileno                                    ; fileno
0000000000005b7c         test       eax, eax
0000000000005b7e         mov        rdi, rbx
0000000000005b81         js         loc_5bd7

0000000000005b83         call       j___freading                                ; __freading
0000000000005b88         test       eax, eax
0000000000005b8a         jne        loc_5bb8

                     loc_5b8c:
0000000000005b8c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
0000000000005b8f         call       rpl_fflush                                  ; rpl_fflush
0000000000005b94         test       eax, eax
0000000000005b96         je         loc_5bd4

0000000000005b98         call       j___errno_location                          ; __errno_location
0000000000005b9d         mov        r12d, dword [rax]
0000000000005ba0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000005ba3         mov        rbp, rax
0000000000005ba6         call       j_fclose                                    ; fclose
0000000000005bab         test       r12d, r12d
0000000000005bae         jne        loc_5be0

                     loc_5bb0:
0000000000005bb0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000005bb1         pop        rbp
0000000000005bb2         pop        r12
0000000000005bb4         ret
                        ; endp
0000000000005bb5         align      8

                     loc_5bb8:
0000000000005bb8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
0000000000005bbb         call       j_fileno                                    ; fileno
0000000000005bc0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000005bc2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000005bc7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000005bc9         call       j_lseek                                     ; lseek
0000000000005bce         cmp        rax, 0xffffffffffffffff
0000000000005bd2         jne        loc_5b8c

                     loc_5bd4:
0000000000005bd4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_5bd7:
0000000000005bd7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000005bd8         pop        rbp
0000000000005bd9         pop        r12
0000000000005bdb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_5be0:
0000000000005be0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
0000000000005be4         mov        eax, 0xffffffff
0000000000005be9         jmp        loc_5bb0
0000000000005beb         align      16                                          ; End of unwind block (FDE at 0xa2ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
0000000000005bf0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa2e4), CODE XREF=rpl_fclose+31
0000000000005bf3         push       rbx
0000000000005bf4         mov        rbx, rdi
0000000000005bf7         je         loc_5c0a

0000000000005bf9         call       j___freading                                ; __freading
0000000000005bfe         test       eax, eax
0000000000005c00         je         loc_5c0a

0000000000005c02         test       dword [rbx], 0x100
0000000000005c08         jne        loc_5c18

                     loc_5c0a:
0000000000005c0a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
0000000000005c0d         pop        rbx
0000000000005c0e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000005c13         align      8

                     loc_5c18:
0000000000005c18         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
0000000000005c1b         mov        edx, 0x1
0000000000005c20         xor        esi, esi
0000000000005c22         call       rpl_fseeko                                  ; rpl_fseeko
0000000000005c27         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
0000000000005c2a         pop        rbx
0000000000005c2b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000005c30         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xa2e4), Begin of unwind block (FDE at 0xa304), CODE XREF=rpl_fflush+50
0000000000005c34         cmp        qword [rdi+0x10], rax
0000000000005c38         je         loc_5c40

                     j_j_fseeko:        // fseeko
0000000000005c3a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
0000000000005c3f         align      64

                     loc_5c40:
0000000000005c40         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000005c44         cmp        qword [rdi+0x28], rax
0000000000005c48         jne        j_j_fseeko                                  ; fseeko

0000000000005c4a         cmp        qword [rdi+0x48], 0x0
0000000000005c4f         jne        j_j_fseeko                                  ; fseeko

0000000000005c51         push       r12
0000000000005c53         push       rbp
0000000000005c54         mov        r12d, edx
0000000000005c57         push       rbx
0000000000005c58         mov        rbp, rsi
0000000000005c5b         mov        rbx, rdi
0000000000005c5e         call       j_fileno                                    ; fileno
0000000000005c63         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000005c66         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000005c69         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000005c6b         call       j_lseek                                     ; lseek
0000000000005c70         cmp        rax, 0xffffffffffffffff
0000000000005c74         je         loc_5c82

0000000000005c76         and        dword [rbx], 0xffffffef
0000000000005c79         mov        qword [rbx+0x90], rax
0000000000005c80         xor        eax, eax

                     loc_5c82:
0000000000005c82         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000005c83         pop        rbp
0000000000005c84         pop        r12
0000000000005c86         ret
                        ; endp
0000000000005c87         align      16                                          ; End of unwind block (FDE at 0xa304)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
0000000000005c90         push       rbp                                         ; Begin of unwind block (FDE at 0xa334), CODE XREF=rpl_vasprintf+38
0000000000005c91         mov        rbp, rsp
0000000000005c94         push       r15
0000000000005c96         push       r14
0000000000005c98         push       r13
0000000000005c9a         push       r12
0000000000005c9c         lea        r14, qword [rbp+var_3B0]
0000000000005ca3         push       rbx
0000000000005ca4         mov        rbx, rdx
0000000000005ca7         mov        r12, rcx
0000000000005caa         mov        rdx, r14
0000000000005cad         sub        rsp, 0x408
0000000000005cb4         mov        qword [rbp+var_418], rsi
0000000000005cbb         lea        rsi, qword [rbp+var_2C0]
0000000000005cc2         mov        qword [rbp+var_3E8], rdi
0000000000005cc9         mov        rdi, rbx
0000000000005ccc         mov        qword [rbp+var_410], r14
0000000000005cd3         mov        rax, qword [fs:0x28]
0000000000005cdc         mov        qword [rbp+var_38], rax
0000000000005ce0         xor        eax, eax
0000000000005ce2         mov        qword [rbp+var_408], rsi
0000000000005ce9         call       printf_parse                                ; printf_parse
0000000000005cee         test       eax, eax
0000000000005cf0         js         loc_6b58

0000000000005cf6         mov        rsi, r14
0000000000005cf9         mov        rdi, r12
0000000000005cfc         call       printf_fetchargs                            ; printf_fetchargs
0000000000005d01         test       eax, eax
0000000000005d03         js         loc_6bc0

0000000000005d09         mov        rax, qword [rbp+var_2B0]
0000000000005d10         mov        rdx, 0xffffffffffffffff
0000000000005d17         add        rax, 0x7
0000000000005d1b         cmp        rax, 0x6
0000000000005d1f         cmovbe     rax, rdx
0000000000005d23         add        rax, qword [rbp+var_2A8]
0000000000005d2a         jb         loc_6758

0000000000005d30         mov        rdi, rax
0000000000005d33         xor        r8d, r8d
0000000000005d36         add        rdi, 0x6
0000000000005d3a         setb       r8b
0000000000005d3e         jb         loc_6758

0000000000005d44         cmp        rdi, 0xf9f
0000000000005d4b         jbe        loc_5e98

0000000000005d51         cmp        rdi, 0xffffffffffffffff
0000000000005d55         mov        qword [rbp+var_3C8], r8
0000000000005d5c         je         loc_6758

0000000000005d62         call       j_malloc                                    ; malloc
0000000000005d67         test       rax, rax
0000000000005d6a         mov        qword [rbp+var_3D8], rax
0000000000005d71         je         loc_6758

0000000000005d77         mov        r8, qword [rbp+var_3C8]
0000000000005d7e         mov        qword [rbp+var_420], rax

                     loc_5d85:
0000000000005d85         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
0000000000005d88         cmp        qword [rbp+var_3E8], 0x0
0000000000005d90         je         loc_5d9c

0000000000005d92         mov        rax, qword [rbp+var_418]
0000000000005d99         mov        r12, qword [rax]

                     loc_5d9c:
0000000000005d9c         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
0000000000005da3         lea        rax, qword [rbp+var_3BC]
0000000000005daa         mov        r15, qword [rbp+var_3E8]
0000000000005db1         mov        qword [rbp+var_400], 0x0
0000000000005dbc         mov        qword [rbp+var_3F0], rax
0000000000005dc3         mov        rax, rbx
0000000000005dc6         mov        rbx, r8
0000000000005dc9         mov        rcx, qword [r13]
0000000000005dcd         mov        r8, rax
0000000000005dd0         cmp        rcx, r8
0000000000005dd3         je         loc_6741

                     loc_5dd9:
0000000000005dd9         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
0000000000005ddc         mov        rax, rbx
0000000000005ddf         add        rax, rcx
0000000000005de2         mov        r14, rax
0000000000005de5         jae        loc_5ec8

0000000000005deb         cmp        r12, 0xffffffffffffffff
0000000000005def         je         loc_68c0

                     loc_5df5:
0000000000005df5         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_6800, vasnprintf+2950, vasnprintf+3039, loc_6958, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_6b70
0000000000005dfa         mov        qword [rbp+var_3C8], rax

                     loc_5e01:
0000000000005e01         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
0000000000005e08         je         loc_5e13

0000000000005e0a         test       r15, r15
0000000000005e0d         jne        loc_68f0

                     loc_5e13:
0000000000005e13         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
0000000000005e1a         test       rax, rax
0000000000005e1d         je         loc_5e27

0000000000005e1f         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000005e22         call       j_free                                      ; free

                     loc_5e27:
0000000000005e27         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
0000000000005e2e         mov        rdi, qword [rbp+var_2B8]
0000000000005e35         add        rax, 0x20
0000000000005e39         cmp        rdi, rax
0000000000005e3c         je         loc_5e43

0000000000005e3e         call       j_free                                      ; free

                     loc_5e43:
0000000000005e43         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
0000000000005e4a         mov        rdi, qword [rbp+var_3A8]
0000000000005e51         add        rax, 0x10
0000000000005e55         cmp        rdi, rax
0000000000005e58         je         loc_5e5f

0000000000005e5a         call       j_free                                      ; free

                     loc_5e5f:
0000000000005e5f         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
0000000000005e66         xor        r15d, r15d
0000000000005e69         mov        dword [rax], 0xc

                     loc_5e6f:
0000000000005e6f         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
0000000000005e73         xor        rdi, qword [fs:0x28]
0000000000005e7c         mov        rax, r15
0000000000005e7f         jne        loc_6d87

0000000000005e85         lea        rsp, qword [rbp+var_28]
0000000000005e89         pop        rbx
0000000000005e8a         pop        r12
0000000000005e8c         pop        r13
0000000000005e8e         pop        r14
0000000000005e90         pop        r15
0000000000005e92         pop        rbp
0000000000005e93         ret
                        ; endp
0000000000005e94         align      8

                     loc_5e98:
0000000000005e98         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
0000000000005e9c         mov        qword [rbp+var_420], 0x0
0000000000005ea7         and        rax, 0xfffffffffffffff0
0000000000005eab         sub        rsp, rax
0000000000005eae         lea        rax, qword [rsp+0x430+var_421]
0000000000005eb3         and        rax, 0xfffffffffffffff0
0000000000005eb7         mov        qword [rbp+var_3D8], rax
0000000000005ebe         jmp        loc_5d85
0000000000005ec3         align      8

                     loc_5ec8:
0000000000005ec8         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
0000000000005ecb         jae        loc_5f34

0000000000005ecd         test       r12, r12
0000000000005ed0         jne        loc_6800

0000000000005ed6         cmp        rax, 0xc
0000000000005eda         ja         loc_6812

0000000000005ee0         mov        r12d, 0xc

                     loc_5ee6:
0000000000005ee6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
0000000000005eed         sete       dl
0000000000005ef0         test       r15, r15
0000000000005ef3         je         loc_6838

                     loc_5ef9:
0000000000005ef9         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
0000000000005efb         jne        loc_6838

0000000000005f01         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000005f04         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000005f07         mov        qword [rbp+var_3D0], r8
0000000000005f0e         mov        qword [rbp+var_3C8], rcx
0000000000005f15         call       j_realloc                                   ; realloc
0000000000005f1a         test       rax, rax
0000000000005f1d         mov        rcx, qword [rbp+var_3C8]
0000000000005f24         mov        r8, qword [rbp+var_3D0]
0000000000005f2b         je         loc_68db

0000000000005f31         mov        r15, rax

                     loc_5f34:
0000000000005f34         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
0000000000005f38         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000005f3b         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
0000000000005f3e         call       j_memcpy                                    ; memcpy

                     loc_5f43:
0000000000005f43         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
0000000000005f4a         cmp        qword [rbp+var_2C0], rax
0000000000005f51         je         loc_6c0b

0000000000005f57         movzx      edx, byte [r13+0x48]
0000000000005f5c         mov        rax, qword [r13+0x50]
0000000000005f60         cmp        dl, 0x25
0000000000005f63         je         loc_66f8

0000000000005f69         cmp        rax, 0xffffffffffffffff
0000000000005f6d         je         loc_6bb6

0000000000005f73         mov        r8, qword [rbp+var_3A8]
0000000000005f7a         shl        rax, 0x5
0000000000005f7e         add        rax, r8
0000000000005f81         cmp        dl, 0x6e
0000000000005f84         mov        edi, dword [rax]
0000000000005f86         mov        dword [rbp+var_3D0], edi
0000000000005f8c         je         loc_6770

0000000000005f92         mov        eax, dword [r13+0x10]
0000000000005f96         mov        rdi, qword [rbp+var_3D8]
0000000000005f9d         test       al, 0x1
0000000000005f9f         mov        byte [rdi], 0x25
0000000000005fa2         lea        rbx, qword [rdi+1]
0000000000005fa6         je         loc_5fb7

0000000000005fa8         mov        rdi, qword [rbp+var_3D8]
0000000000005faf         lea        rbx, qword [rdi+2]
0000000000005fb3         mov        byte [rdi+1], 0x27

                     loc_5fb7:
0000000000005fb7         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
0000000000005fb9         je         loc_5fc2

0000000000005fbb         mov        byte [rbx], 0x2d
0000000000005fbe         add        rbx, 0x1

                     loc_5fc2:
0000000000005fc2         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
0000000000005fc4         je         loc_5fcd

0000000000005fc6         mov        byte [rbx], 0x2b
0000000000005fc9         add        rbx, 0x1

                     loc_5fcd:
0000000000005fcd         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
0000000000005fcf         je         loc_5fd8

0000000000005fd1         mov        byte [rbx], 0x20
0000000000005fd4         add        rbx, 0x1

                     loc_5fd8:
0000000000005fd8         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
0000000000005fda         je         loc_5fe3

0000000000005fdc         mov        byte [rbx], 0x23
0000000000005fdf         add        rbx, 0x1

                     loc_5fe3:
0000000000005fe3         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
0000000000005fe5         je         loc_5fee

0000000000005fe7         mov        byte [rbx], 0x49
0000000000005fea         add        rbx, 0x1

                     loc_5fee:
0000000000005fee         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
0000000000005ff0         je         loc_5ff9

0000000000005ff2         mov        byte [rbx], 0x30
0000000000005ff5         add        rbx, 0x1

                     loc_5ff9:
0000000000005ff9         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
0000000000005ffd         mov        rdx, qword [r13+0x20]
0000000000006001         cmp        rsi, rdx
0000000000006004         je         loc_6036

0000000000006006         mov        rcx, rdx
0000000000006009         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000600c         mov        qword [rbp+var_3E0], r8
0000000000006013         sub        rcx, rsi
0000000000006016         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000006019         mov        qword [rbp+var_3C8], rcx
0000000000006020         call       j_memcpy                                    ; memcpy
0000000000006025         mov        rcx, qword [rbp+var_3C8]
000000000000602c         mov        r8, qword [rbp+var_3E0]
0000000000006033         add        rbx, rcx

                     loc_6036:
0000000000006036         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
000000000000603a         mov        rdx, qword [r13+0x38]
000000000000603e         cmp        rsi, rdx
0000000000006041         je         loc_6073

0000000000006043         mov        rcx, rdx
0000000000006046         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000006049         mov        qword [rbp+var_3E0], r8
0000000000006050         sub        rcx, rsi
0000000000006053         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000006056         mov        qword [rbp+var_3C8], rcx
000000000000605d         call       j_memcpy                                    ; memcpy
0000000000006062         mov        rcx, qword [rbp+var_3C8]
0000000000006069         mov        r8, qword [rbp+var_3E0]
0000000000006070         add        rbx, rcx

                     loc_6073:
0000000000006073         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
0000000000006079         cmp        edi, 0x10
000000000000607c         ja         loc_60ab

000000000000607e         mov        eax, 0x1
0000000000006083         mov        ecx, edi
0000000000006085         shl        rax, cl
0000000000006088         test       eax, 0x14180
000000000000608d         jne        loc_60a4

000000000000608f         test       ah, 0x10
0000000000006092         jne        loc_69f0

0000000000006098         test       ah, 0x6
000000000000609b         je         loc_60ab

000000000000609d         mov        byte [rbx], 0x6c
00000000000060a0         add        rbx, 0x1

                     loc_60a4:
00000000000060a4         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
00000000000060a7         add        rbx, 0x1

                     loc_60ab:
00000000000060ab         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
00000000000060b0         mov        byte [rbx+1], 0x0
00000000000060b4         mov        byte [rbx], al
00000000000060b6         mov        rax, qword [r13+0x28]
00000000000060ba         cmp        rax, 0xffffffffffffffff
00000000000060be         je         loc_67f0

00000000000060c4         shl        rax, 0x5
00000000000060c8         add        rax, r8
00000000000060cb         cmp        dword [rax], 0x5
00000000000060ce         jne        loc_6bb6

00000000000060d4         mov        eax, dword [rax+0x10]
00000000000060d7         mov        dword [rbp+var_3E0], 0x1
00000000000060e1         mov        dword [rbp+var_3B8], eax

                     loc_60e7:
00000000000060e7         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
00000000000060eb         cmp        rax, 0xffffffffffffffff
00000000000060ef         je         loc_611c

00000000000060f1         shl        rax, 0x5
00000000000060f5         add        r8, rax
00000000000060f8         cmp        dword [r8], 0x5
00000000000060fc         jne        loc_6bb6

0000000000006102         mov        eax, dword [rbp+var_3E0]
0000000000006108         mov        edx, dword [r8+0x10]
000000000000610c         mov        dword [rbp+rax*4+var_3B8], edx
0000000000006113         lea        eax, dword [rax+1]
0000000000006116         mov        dword [rbp+var_3E0], eax

                     loc_611c:
000000000000611c         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
000000000000611f         xor        edx, edx
0000000000006121         add        rax, 0x2
0000000000006125         jb         loc_6d8c

000000000000612b         cmp        r12, rax
000000000000612e         jae        loc_617b

0000000000006130         test       r12, r12
0000000000006133         jne        loc_6958

0000000000006139         cmp        rax, 0xc
000000000000613d         ja         loc_6970

0000000000006143         mov        r12d, 0xc

                     loc_6149:
0000000000006149         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
0000000000006150         sete       dl
0000000000006153         test       r15, r15
0000000000006156         je         loc_69a0

                     loc_615c:
000000000000615c         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
000000000000615e         jne        loc_69a0

0000000000006164         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006167         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000616a         call       j_realloc                                   ; realloc
000000000000616f         test       rax, rax
0000000000006172         je         loc_5df5

0000000000006178         mov        r15, rax

                     loc_617b:
000000000000617b         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
0000000000006180         call       j___errno_location                          ; __errno_location
0000000000006185         mov        qword [rbp+var_3C8], rax
000000000000618c         mov        eax, dword [rax]
000000000000618e         mov        qword [rbp+var_3F8], rbx
0000000000006195         mov        dword [rbp+var_424], eax
000000000000619b         nop        dword [rax+rax]

                     loc_61a0:
00000000000061a0         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
00000000000061a7         mov        rbx, r12
00000000000061aa         mov        r10d, 0x7fffffff
00000000000061b0         sub        rbx, r14
00000000000061b3         mov        dword [rbp+var_3BC], 0xffffffff
00000000000061bd         cmp        rbx, 0x7fffffff
00000000000061c4         mov        dword [rax], 0x0
00000000000061ca         mov        eax, dword [rbp+var_3D0]
00000000000061d0         cmovbe     r10, rbx
00000000000061d4         cmp        eax, 0x11
00000000000061d7         ja         loc_6bb6

00000000000061dd         lea        rsi, qword [switch_table_92e8]              ; switch_table_92e8
00000000000061e4         movsxd     rax, dword [rsi+rax*4]
00000000000061e8         add        rax, rsi
00000000000061eb         jmp        rax                                         ; switch statement using table at 0x92e8, with 18 cases, 0x61f0,0x6328,0x6450,0x64d8,0x6558,0x6598,0x6620,0x6650,0x6bb6
00000000000061ed         align      16

                     loc_61f0:
00000000000061f0         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
00000000000061f4         lea        rdi, qword [r15+r14]
00000000000061f8         shl        rax, 0x5
00000000000061fc         add        rax, qword [rbp+var_3A8]
0000000000006203         mov        r9, qword [rax+0x10]
0000000000006207         mov        eax, dword [rbp+var_3E0]
000000000000620d         cmp        eax, 0x1
0000000000006210         je         loc_66d8

0000000000006216         cmp        eax, 0x2
0000000000006219         je         loc_66c0

000000000000621f         sub        rsp, 0x8
0000000000006223         push       qword [rbp+var_3F0]

                     loc_6229:
0000000000006229         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
0000000000006230         mov        rsi, r10
0000000000006233         mov        rcx, 0xffffffffffffffff
000000000000623a         mov        edx, 0x1
000000000000623f         xor        eax, eax
0000000000006241         mov        qword [rbp+var_430], r10
0000000000006248         call       j___snprintf_chk                            ; __snprintf_chk
000000000000624d         pop        rsi
000000000000624e         pop        rdi
000000000000624f         mov        r10, qword [rbp+var_430]

                     loc_6256:
0000000000006256         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
000000000000625c         test       ecx, ecx
000000000000625e         js         loc_639c

                     loc_6264:
0000000000006264         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
0000000000006267         cmp        rdx, r10
000000000000626a         jae        loc_627a

000000000000626c         add        rdx, r15
000000000000626f         cmp        byte [rdx+r14], 0x0
0000000000006274         jne        loc_6bb6

                     loc_627a:
000000000000627a         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
000000000000627c         jge        loc_6286

                     loc_627e:
000000000000627e         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
0000000000006284         mov        ecx, eax

                     loc_6286:
0000000000006286         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
0000000000006289         cmp        rax, r10
000000000000628c         jb         loc_6ac0

0000000000006292         cmp        rbx, 0x7ffffffe
0000000000006299         ja         loc_6ae0

000000000000629f         lea        rsi, qword [r12+r12]
00000000000062a3         lea        edx, dword [rcx+2]
00000000000062a6         test       r12, r12
00000000000062a9         mov        rax, 0xffffffffffffffff
00000000000062b0         cmovns     rax, rsi
00000000000062b4         add        rdx, r14
00000000000062b7         jb         loc_6d78

00000000000062bd         cmp        rax, rdx
00000000000062c0         cmovb      rax, rdx
00000000000062c4         cmp        r12, rax
00000000000062c7         jae        loc_61a0

00000000000062cd         test       r12, r12
00000000000062d0         js         loc_5e01

00000000000062d6         cmp        rsi, rax
00000000000062d9         mov        r12, rsi
00000000000062dc         jae        loc_62eb

00000000000062de         cmp        rax, 0xffffffffffffffff
00000000000062e2         je         loc_5e01

00000000000062e8         mov        r12, rax

                     loc_62eb:
00000000000062eb         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
00000000000062f2         sete       bl
00000000000062f5         test       r15, r15
00000000000062f8         je         loc_6680

00000000000062fe         test       bl, bl
0000000000006300         jne        loc_6680

0000000000006306         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006309         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000630c         call       j_realloc                                   ; realloc
0000000000006311         test       rax, rax
0000000000006314         je         loc_5e01

000000000000631a         mov        r15, rax
000000000000631d         jmp        loc_61a0
0000000000006322         align      8

                     loc_6328:
0000000000006328         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
000000000000632c         lea        rdi, qword [r15+r14]
0000000000006330         shl        rax, 0x5
0000000000006334         add        rax, qword [rbp+var_3A8]
000000000000633b         mov        r9d, dword [rax+0x10]
000000000000633f         mov        eax, dword [rbp+var_3E0]
0000000000006345         cmp        eax, 0x1
0000000000006348         je         loc_6580

                     loc_634e:
000000000000634e         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
0000000000006351         je         loc_65c8

                     loc_6357:
0000000000006357         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
000000000000635b         push       qword [rbp+var_3F0]

                     loc_6361:
0000000000006361         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
0000000000006368         mov        rcx, 0xffffffffffffffff
000000000000636f         mov        edx, 0x1
0000000000006374         mov        rsi, r10
0000000000006377         xor        eax, eax
0000000000006379         mov        qword [rbp+var_430], r10
0000000000006380         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006385         pop        rdx
0000000000006386         pop        rcx
0000000000006387         mov        ecx, dword [rbp+var_3BC]
000000000000638d         mov        r10, qword [rbp+var_430]
0000000000006394         test       ecx, ecx
0000000000006396         jns        loc_6264

                     loc_639c:
000000000000639c         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
00000000000063a3         cmp        byte [rdi+1], 0x0
00000000000063a7         jne        loc_66e8

00000000000063ad         test       eax, eax
00000000000063af         jns        loc_627e

00000000000063b5         mov        rax, qword [rbp+var_3C8]
00000000000063bc         mov        ebx, dword [rax]
00000000000063be         test       ebx, ebx
00000000000063c0         jne        loc_63e0

00000000000063c2         movzx      eax, byte [r13+0x48]
00000000000063c7         mov        ebx, 0x16
00000000000063cc         and        eax, 0xffffffef
00000000000063cf         cmp        al, 0x63
00000000000063d1         mov        eax, 0x54
00000000000063d6         cmove      ebx, eax
00000000000063d9         nop        dword [rax]

                     loc_63e0:
00000000000063e0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
00000000000063e7         je         loc_63f2

00000000000063e9         test       r15, r15
00000000000063ec         jne        loc_6b9c

                     loc_63f2:
00000000000063f2         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
00000000000063f9         test       rax, rax
00000000000063fc         je         loc_6406

00000000000063fe         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006401         call       j_free                                      ; free

                     loc_6406:
0000000000006406         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
000000000000640d         mov        rdi, qword [rbp+var_2B8]
0000000000006414         add        rax, 0x20
0000000000006418         cmp        rdi, rax
000000000000641b         je         loc_6422

000000000000641d         call       j_free                                      ; free

                     loc_6422:
0000000000006422         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
0000000000006429         mov        rdi, qword [rbp+var_3A8]
0000000000006430         add        rax, 0x10
0000000000006434         cmp        rdi, rax
0000000000006437         je         loc_643e

0000000000006439         call       j_free                                      ; free

                     loc_643e:
000000000000643e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
0000000000006445         xor        r15d, r15d
0000000000006448         mov        dword [rax], ebx
000000000000644a         jmp        loc_5e6f
000000000000644f         align      16

                     loc_6450:
0000000000006450         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
0000000000006454         lea        rdi, qword [r15+r14]
0000000000006458         shl        rax, 0x5
000000000000645c         add        rax, qword [rbp+var_3A8]
0000000000006463         fld        tword [rax+0x10]
0000000000006466         mov        eax, dword [rbp+var_3E0]
000000000000646c         cmp        eax, 0x1
000000000000646f         je         loc_6aa0

0000000000006475         cmp        eax, 0x2
0000000000006478         jne        loc_6940

000000000000647e         mov        eax, dword [rbp+var_3B4]
0000000000006484         sub        rsp, 0x8
0000000000006488         push       qword [rbp+var_3F0]
000000000000648e         mov        r9d, dword [rbp+var_3B8]
0000000000006495         mov        r8, qword [rbp+var_3D8]
000000000000649c         mov        rsi, r10
000000000000649f         sub        rsp, 0x18
00000000000064a3         mov        rcx, 0xffffffffffffffff
00000000000064aa         mov        edx, 0x1
00000000000064af         fstp       tword [rsp+0x458+var_450]
00000000000064b3         push       rax
00000000000064b4         xor        eax, eax
00000000000064b6         mov        qword [rbp+var_430], r10
00000000000064bd         call       j___snprintf_chk                            ; __snprintf_chk
00000000000064c2         add        rsp, 0x30
00000000000064c6         mov        r10, qword [rbp+var_430]
00000000000064cd         jmp        loc_6256
00000000000064d2         align      8

                     loc_64d8:
00000000000064d8         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
00000000000064dc         lea        rdi, qword [r15+r14]
00000000000064e0         shl        rax, 0x5
00000000000064e4         add        rax, qword [rbp+var_3A8]
00000000000064eb         movsd      xmm0, qword [rax+0x10]
00000000000064f0         mov        eax, dword [rbp+var_3E0]
00000000000064f6         cmp        eax, 0x1
00000000000064f9         je         loc_6a90

00000000000064ff         cmp        eax, 0x2
0000000000006502         jne        loc_6900

0000000000006508         mov        eax, dword [rbp+var_3B4]
000000000000650e         push       qword [rbp+var_3F0]
0000000000006514         push       rax

                     loc_6515:
0000000000006515         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
000000000000651c         mov        r8, qword [rbp+var_3D8]
0000000000006523         mov        rsi, r10
0000000000006526         mov        rcx, 0xffffffffffffffff
000000000000652d         mov        edx, 0x1
0000000000006532         mov        eax, 0x1
0000000000006537         mov        qword [rbp+var_430], r10
000000000000653e         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006543         pop        r8
0000000000006545         mov        r10, qword [rbp+var_430]
000000000000654c         pop        r9
000000000000654e         jmp        loc_6256
0000000000006553         align      8

                     loc_6558:
0000000000006558         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
000000000000655c         lea        rdi, qword [r15+r14]
0000000000006560         shl        rax, 0x5
0000000000006564         add        rax, qword [rbp+var_3A8]
000000000000656b         movzx      r9d, word [rax+0x10]
0000000000006570         mov        eax, dword [rbp+var_3E0]
0000000000006576         cmp        eax, 0x1
0000000000006579         jne        loc_634e

000000000000657f         nop

                     loc_6580:
0000000000006580         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
0000000000006586         push       r9

                     loc_6588:
0000000000006588         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
000000000000658f         jmp        loc_6361
0000000000006594         align      8

                     loc_6598:
0000000000006598         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
000000000000659c         lea        rdi, qword [r15+r14]
00000000000065a0         shl        rax, 0x5
00000000000065a4         add        rax, qword [rbp+var_3A8]
00000000000065ab         movsx      r9d, word [rax+0x10]
00000000000065b0         mov        eax, dword [rbp+var_3E0]
00000000000065b6         cmp        eax, 0x1
00000000000065b9         je         loc_6580

00000000000065bb         cmp        eax, 0x2
00000000000065be         jne        loc_6357

00000000000065c4         nop        dword [rax]

                     loc_65c8:
00000000000065c8         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
00000000000065cc         push       qword [rbp+var_3F0]
00000000000065d2         push       r9

                     loc_65d4:
00000000000065d4         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
00000000000065da         push       rax

                     loc_65db:
00000000000065db         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
00000000000065e2         mov        r8, qword [rbp+var_3D8]
00000000000065e9         mov        rsi, r10
00000000000065ec         mov        rcx, 0xffffffffffffffff
00000000000065f3         mov        edx, 0x1
00000000000065f8         xor        eax, eax
00000000000065fa         mov        qword [rbp+var_430], r10
0000000000006601         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006606         add        rsp, 0x20
000000000000660a         mov        r10, qword [rbp+var_430]
0000000000006611         jmp        loc_6256
0000000000006616         align      32

                     loc_6620:
0000000000006620         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
0000000000006624         lea        rdi, qword [r15+r14]
0000000000006628         shl        rax, 0x5
000000000000662c         add        rax, qword [rbp+var_3A8]
0000000000006633         movzx      r9d, byte [rax+0x10]
0000000000006638         mov        eax, dword [rbp+var_3E0]
000000000000663e         cmp        eax, 0x1
0000000000006641         jne        loc_634e

0000000000006647         jmp        loc_6580
000000000000664c         align      16

                     loc_6650:
0000000000006650         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
0000000000006654         lea        rdi, qword [r15+r14]
0000000000006658         shl        rax, 0x5
000000000000665c         add        rax, qword [rbp+var_3A8]
0000000000006663         movsx      r9d, byte [rax+0x10]
0000000000006668         mov        eax, dword [rbp+var_3E0]
000000000000666e         cmp        eax, 0x1
0000000000006671         jne        loc_634e

0000000000006677         jmp        loc_6580
000000000000667c         align      128

                     loc_6680:
0000000000006680         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
0000000000006683         call       j_malloc                                    ; malloc
0000000000006688         test       rax, rax
000000000000668b         mov        rcx, rax
000000000000668e         je         loc_5e01

0000000000006694         test       r14, r14
0000000000006697         je         loc_6750

000000000000669d         test       bl, bl
000000000000669f         je         loc_6750

00000000000066a5         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
00000000000066a8         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000066ab         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000066ae         call       j_memcpy                                    ; memcpy
00000000000066b3         mov        r15, rax
00000000000066b6         jmp        loc_61a0
00000000000066bb         align      64

                     loc_66c0:
00000000000066c0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
00000000000066c4         push       qword [rbp+var_3F0]
00000000000066ca         push       r9
00000000000066cc         jmp        loc_65d4
00000000000066d1         align      8

                     loc_66d8:
00000000000066d8         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
00000000000066de         push       r9
00000000000066e0         jmp        loc_6588
00000000000066e5         align      8

                     loc_66e8:
00000000000066e8         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
00000000000066ec         jmp        loc_61a0
00000000000066f1         align      8

                     loc_66f8:
00000000000066f8         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
00000000000066fc         jne        loc_6bb6

0000000000006702         mov        rax, r14
0000000000006705         add        rax, 0x1
0000000000006709         mov        rbx, rax
000000000000670c         jae        loc_6798

0000000000006712         cmp        r12, 0xffffffffffffffff
0000000000006716         jne        loc_5df5

000000000000671c         mov        rbx, r12

                     loc_671f:
000000000000671f         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_6724:
0000000000006724         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
0000000000006728         add        r13, 0x58
000000000000672c         mov        rcx, qword [r13]
0000000000006730         add        qword [rbp+var_400], 0x1
0000000000006738         cmp        rcx, r8
000000000000673b         jne        loc_5dd9

                     loc_6741:
0000000000006741         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
0000000000006744         jmp        loc_5f43
0000000000006749         align      16

                     loc_6750:
0000000000006750         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
0000000000006753         jmp        loc_61a0

                     loc_6758:
0000000000006758         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
000000000000675d         mov        qword [rbp+var_3C8], rax
0000000000006764         jmp        loc_5e27
0000000000006769         align      16

                     loc_6770:
0000000000006770         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
0000000000006772         sub        edx, 0x12
0000000000006775         cmp        edx, 0x4
0000000000006778         ja         loc_6bb6

000000000000677e         lea        rdi, qword [switch_table_9330]              ; switch_table_9330
0000000000006785         mov        rax, qword [rax+0x10]
0000000000006789         movsxd     rdx, dword [rdi+rdx*4]
000000000000678d         add        rdx, rdi
0000000000006790         jmp        rdx                                         ; switch statement using table at 0x9330, with 5 cases, 0x68d0,0x6a00,0x6a10,0x6a20
0000000000006792         align      8

                     loc_6798:
0000000000006798         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
000000000000679b         jae        loc_671f

000000000000679d         test       r12, r12
00000000000067a0         jne        loc_6b70

00000000000067a6         cmp        rax, 0xc
00000000000067aa         ja         loc_6b82

00000000000067b0         mov        r12d, 0xc

                     loc_67b6:
00000000000067b6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
00000000000067bd         sete       dl
00000000000067c0         test       r15, r15
00000000000067c3         je         loc_6a30

00000000000067c9         test       dl, dl
00000000000067cb         jne        loc_6a30

00000000000067d1         mov        rsi, r12                                    ; argument "__size" for method j_realloc
00000000000067d4         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000067d7         call       j_realloc                                   ; realloc
00000000000067dc         test       rax, rax
00000000000067df         je         loc_68db

00000000000067e5         mov        r15, rax
00000000000067e8         jmp        loc_671f
00000000000067ed         align      16

                     loc_67f0:
00000000000067f0         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
00000000000067fa         jmp        loc_60e7
00000000000067ff         align      2048

                     loc_6800:
0000000000006800         js         loc_5df5                                    ; CODE XREF=vasnprintf+576

0000000000006806         add        r12, r12
0000000000006809         cmp        r12, rax
000000000000680c         jae        loc_5ee6

                     loc_6812:
0000000000006812         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
0000000000006816         je         loc_5df5

000000000000681c         cmp        r15, qword [rbp+var_3E8]
0000000000006823         mov        r12, rax
0000000000006826         sete       dl
0000000000006829         test       r15, r15
000000000000682c         jne        loc_5ef9

0000000000006832         nop        word [rax+rax]

                     loc_6838:
0000000000006838         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
000000000000683b         mov        qword [rbp+var_3E0], r8
0000000000006842         mov        byte [rbp+var_3D0], dl
0000000000006848         mov        qword [rbp+var_3C8], rcx
000000000000684f         call       j_malloc                                    ; malloc
0000000000006854         test       rax, rax
0000000000006857         mov        r9, rax
000000000000685a         mov        rcx, qword [rbp+var_3C8]
0000000000006861         movzx      edx, byte [rbp+var_3D0]
0000000000006868         mov        r8, qword [rbp+var_3E0]
000000000000686f         je         loc_5df5

0000000000006875         test       rbx, rbx
0000000000006878         je         loc_6a80

000000000000687e         test       dl, dl
0000000000006880         je         loc_6a80

0000000000006886         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006889         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000688c         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000688f         mov        qword [rbp+var_3D0], r8
0000000000006896         mov        qword [rbp+var_3C8], rcx
000000000000689d         call       j_memcpy                                    ; memcpy
00000000000068a2         mov        rcx, qword [rbp+var_3C8]
00000000000068a9         mov        r15, rax
00000000000068ac         mov        r8, qword [rbp+var_3D0]
00000000000068b3         jmp        loc_5f34
00000000000068b8         align      64

                     loc_68c0:
00000000000068c0         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
00000000000068c3         jmp        loc_5f34
00000000000068c8         align      16

                     loc_68d0:
00000000000068d0         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
00000000000068d3         mov        rbx, r14
00000000000068d6         jmp        loc_6724

                     loc_68db:
00000000000068db         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
00000000000068e0         mov        qword [rbp+var_3C8], rax
00000000000068e7         nop        word [rax+rax]

                     loc_68f0:
00000000000068f0         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
00000000000068f3         call       j_free                                      ; free
00000000000068f8         jmp        loc_5e13
00000000000068fd         align      256

                     loc_6900:
0000000000006900         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
0000000000006907         mov        r8, qword [rbp+var_3D8]
000000000000690e         mov        rsi, r10
0000000000006911         mov        rcx, 0xffffffffffffffff
0000000000006918         mov        edx, 0x1
000000000000691d         mov        eax, 0x1
0000000000006922         mov        qword [rbp+var_430], r10
0000000000006929         call       j___snprintf_chk                            ; __snprintf_chk
000000000000692e         mov        r10, qword [rbp+var_430]
0000000000006935         jmp        loc_6256
000000000000693a         align      64

                     loc_6940:
0000000000006940         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
0000000000006944         mov        r9, qword [rbp+var_3F0]
000000000000694b         fstp       tword [rsp+0x440+var_440]
000000000000694e         jmp        loc_6229
0000000000006953         align      8

                     loc_6958:
0000000000006958         js         loc_5df5                                    ; CODE XREF=vasnprintf+1187

000000000000695e         add        r12, r12
0000000000006961         cmp        r12, rax
0000000000006964         jae        loc_6149

000000000000696a         nop        word [rax+rax]

                     loc_6970:
0000000000006970         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
0000000000006973         jne        loc_5df5

0000000000006979         cmp        rax, 0xffffffffffffffff
000000000000697d         je         loc_5df5

0000000000006983         cmp        r15, qword [rbp+var_3E8]
000000000000698a         mov        r12, rax
000000000000698d         sete       dl
0000000000006990         test       r15, r15
0000000000006993         jne        loc_615c

0000000000006999         nop        dword [rax]

                     loc_69a0:
00000000000069a0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
00000000000069a3         mov        byte [rbp+var_3C8], dl
00000000000069a9         call       j_malloc                                    ; malloc
00000000000069ae         test       rax, rax
00000000000069b1         mov        rcx, rax
00000000000069b4         movzx      edx, byte [rbp+var_3C8]
00000000000069bb         je         loc_5df5

00000000000069c1         test       r14, r14
00000000000069c4         je         loc_6b60

00000000000069ca         test       dl, dl
00000000000069cc         je         loc_6b60

00000000000069d2         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
00000000000069d5         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000069d8         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000069db         call       j_memcpy                                    ; memcpy
00000000000069e0         mov        r15, rax
00000000000069e3         jmp        loc_617b
00000000000069e8         align      16

                     loc_69f0:
00000000000069f0         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
00000000000069f3         add        rbx, 0x1
00000000000069f7         jmp        loc_60ab
00000000000069fc         align      512

                     loc_6a00:
0000000000006a00         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
0000000000006a03         mov        rbx, r14
0000000000006a06         jmp        loc_6724
0000000000006a0b         align      16

                     loc_6a10:
0000000000006a10         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
0000000000006a13         mov        rbx, r14
0000000000006a16         jmp        loc_6724
0000000000006a1b         align      32

                     loc_6a20:
0000000000006a20         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
0000000000006a24         mov        rbx, r14
0000000000006a27         jmp        loc_6724
0000000000006a2c         align      16

                     loc_6a30:
0000000000006a30         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
0000000000006a33         mov        byte [rbp+var_3C8], dl
0000000000006a39         call       j_malloc                                    ; malloc
0000000000006a3e         test       rax, rax
0000000000006a41         mov        rcx, rax
0000000000006a44         movzx      edx, byte [rbp+var_3C8]
0000000000006a4b         je         loc_5df5

0000000000006a51         test       r14, r14
0000000000006a54         je         loc_6b94

0000000000006a5a         test       dl, dl
0000000000006a5c         je         loc_6b94

0000000000006a62         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006a65         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006a68         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006a6b         call       j_memcpy                                    ; memcpy
0000000000006a70         mov        r15, rax
0000000000006a73         jmp        loc_671f
0000000000006a78         align      128

                     loc_6a80:
0000000000006a80         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
0000000000006a83         jmp        loc_5f34
0000000000006a88         align      16

                     loc_6a90:
0000000000006a90         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
0000000000006a94         push       qword [rbp+var_3F0]
0000000000006a9a         jmp        loc_6515
0000000000006a9f         align      32

                     loc_6aa0:
0000000000006aa0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
0000000000006aa4         push       qword [rbp+var_3F0]
0000000000006aaa         sub        rsp, 0x10
0000000000006aae         fstp       tword [rsp+0x450+var_450]
0000000000006ab1         jmp        loc_65db
0000000000006ab6         align      64

                     loc_6ac0:
0000000000006ac0         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
0000000000006ac7         mov        edi, dword [rbp+var_424]
0000000000006acd         movsxd     rbx, ecx
0000000000006ad0         add        rbx, r14
0000000000006ad3         mov        dword [rax], edi
0000000000006ad5         jmp        loc_6724
0000000000006ada         align      32

                     loc_6ae0:
0000000000006ae0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
0000000000006ae7         je         loc_6af2

0000000000006ae9         test       r15, r15
0000000000006aec         jne        loc_6ba9

                     loc_6af2:
0000000000006af2         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
0000000000006af9         test       rax, rax
0000000000006afc         je         loc_6b06

0000000000006afe         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006b01         call       j_free                                      ; free

                     loc_6b06:
0000000000006b06         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
0000000000006b0d         mov        rdi, qword [rbp+var_2B8]
0000000000006b14         add        rax, 0x20
0000000000006b18         cmp        rdi, rax
0000000000006b1b         je         loc_6b22

0000000000006b1d         call       j_free                                      ; free

                     loc_6b22:
0000000000006b22         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
0000000000006b29         mov        rdi, qword [rbp+var_3A8]
0000000000006b30         add        rax, 0x10
0000000000006b34         cmp        rdi, rax
0000000000006b37         je         loc_6b3e

0000000000006b39         call       j_free                                      ; free

                     loc_6b3e:
0000000000006b3e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
0000000000006b45         xor        r15d, r15d
0000000000006b48         mov        dword [rax], 0x4b
0000000000006b4e         jmp        loc_5e6f
0000000000006b53         align      8

                     loc_6b58:
0000000000006b58         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
0000000000006b5b         jmp        loc_5e6f

                     loc_6b60:
0000000000006b60         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
0000000000006b63         jmp        loc_617b
0000000000006b68         align      16

                     loc_6b70:
0000000000006b70         js         loc_5df5                                    ; CODE XREF=vasnprintf+2832

0000000000006b76         add        r12, r12
0000000000006b79         cmp        r12, rax
0000000000006b7c         jae        loc_67b6

                     loc_6b82:
0000000000006b82         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
0000000000006b86         je         loc_5df5

0000000000006b8c         mov        r12, rax
0000000000006b8f         jmp        loc_67b6

                     loc_6b94:
0000000000006b94         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
0000000000006b97         jmp        loc_671f

                     loc_6b9c:
0000000000006b9c         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
0000000000006b9f         call       j_free                                      ; free
0000000000006ba4         jmp        loc_63f2

                     loc_6ba9:
0000000000006ba9         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
0000000000006bac         call       j_free                                      ; free
0000000000006bb1         jmp        loc_6af2

                     loc_6bb6:
0000000000006bb6         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
0000000000006bbb         align      64

                     loc_6bc0:
0000000000006bc0         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
0000000000006bc7         mov        rdi, qword [rbp+var_2B8]
0000000000006bce         add        rax, 0x20
0000000000006bd2         cmp        rdi, rax
0000000000006bd5         je         loc_6bdc

0000000000006bd7         call       j_free                                      ; free

                     loc_6bdc:
0000000000006bdc         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
0000000000006be3         mov        rdi, qword [rbp+var_3A8]
0000000000006bea         add        rax, 0x10
0000000000006bee         cmp        rdi, rax
0000000000006bf1         je         loc_6bf8

0000000000006bf3         call       j_free                                      ; free

                     loc_6bf8:
0000000000006bf8         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
0000000000006bfd         xor        r15d, r15d
0000000000006c00         mov        dword [rax], 0x16
0000000000006c06         jmp        loc_5e6f

                     loc_6c0b:
0000000000006c0b         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
0000000000006c0e         xor        eax, eax
0000000000006c10         add        rbx, 0x1
0000000000006c14         jb         loc_6d20

0000000000006c1a         cmp        r12, rbx
0000000000006c1d         jae        loc_6c6c

0000000000006c1f         test       r12, r12
0000000000006c22         jne        loc_6d59

0000000000006c28         cmp        rbx, 0xc
0000000000006c2c         ja         loc_6d3e

0000000000006c32         mov        r12d, 0xc

                     loc_6c38:
0000000000006c38         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
0000000000006c3f         sete       r13b
0000000000006c43         test       r15, r15
0000000000006c46         je         loc_6cec

0000000000006c4c         test       r13b, r13b
0000000000006c4f         jne        loc_6cec

0000000000006c55         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006c58         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006c5b         call       j_realloc                                   ; realloc
0000000000006c60         test       rax, rax
0000000000006c63         je         loc_68db

0000000000006c69         mov        r15, rax

                     loc_6c6c:
0000000000006c6c         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
0000000000006c73         mov        byte [r15+r14], 0x0
0000000000006c78         je         loc_6c91

0000000000006c7a         cmp        r12, rbx
0000000000006c7d         jbe        loc_6c91

0000000000006c7f         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006c82         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
0000000000006c85         call       j_realloc                                   ; realloc
0000000000006c8a         test       rax, rax
0000000000006c8d         cmovne     r15, rax

                     loc_6c91:
0000000000006c91         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
0000000000006c98         test       rax, rax
0000000000006c9b         je         loc_6ca5

0000000000006c9d         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000006ca0         call       j_free                                      ; free

                     loc_6ca5:
0000000000006ca5         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
0000000000006cac         mov        rdi, qword [rbp+var_2B8]
0000000000006cb3         add        rax, 0x20
0000000000006cb7         cmp        rdi, rax
0000000000006cba         je         loc_6cc1

0000000000006cbc         call       j_free                                      ; free

                     loc_6cc1:
0000000000006cc1         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
0000000000006cc8         mov        rdi, qword [rbp+var_3A8]
0000000000006ccf         add        rax, 0x10
0000000000006cd3         cmp        rdi, rax
0000000000006cd6         je         loc_6cdd

0000000000006cd8         call       j_free                                      ; free

                     loc_6cdd:
0000000000006cdd         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
0000000000006ce4         mov        qword [rax], r14
0000000000006ce7         jmp        loc_5e6f

                     loc_6cec:
0000000000006cec         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
0000000000006cef         call       j_malloc                                    ; malloc
0000000000006cf4         test       rax, rax
0000000000006cf7         mov        rcx, rax
0000000000006cfa         je         loc_5df5

0000000000006d00         test       r14, r14
0000000000006d03         je         loc_6d70

0000000000006d05         test       r13b, r13b
0000000000006d08         je         loc_6d70

0000000000006d0a         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006d0d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006d10         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006d13         call       j_memcpy                                    ; memcpy
0000000000006d18         mov        r15, rax
0000000000006d1b         jmp        loc_6c6c

                     loc_6d20:
0000000000006d20         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
0000000000006d24         mov        eax, 0x1
0000000000006d29         je         loc_6c6c

0000000000006d2f         test       r12, r12
0000000000006d32         je         loc_5df5

0000000000006d38         js         loc_5df5

                     loc_6d3e:
0000000000006d3e         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
0000000000006d41         jne        loc_5df5

0000000000006d47         cmp        rbx, 0xffffffffffffffff
0000000000006d4b         je         loc_5df5

0000000000006d51         mov        r12, rbx
0000000000006d54         jmp        loc_6c38

                     loc_6d59:
0000000000006d59         js         loc_5df5                                    ; CODE XREF=vasnprintf+3986

0000000000006d5f         add        r12, r12
0000000000006d62         cmp        r12, rbx
0000000000006d65         jae        loc_6c38

0000000000006d6b         jmp        loc_6d3e
0000000000006d6d         align      16

                     loc_6d70:
0000000000006d70         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
0000000000006d73         jmp        loc_6c6c

                     loc_6d78:
0000000000006d78         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
0000000000006d7c         je         loc_61a0

0000000000006d82         jmp        loc_5e01

                     loc_6d87:
0000000000006d87         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_6d8c:
0000000000006d8c         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
0000000000006d90         mov        edx, 0x1
0000000000006d95         je         loc_617b

0000000000006d9b         test       r12, r12
0000000000006d9e         je         loc_5df5

0000000000006da4         jns        loc_6970

0000000000006daa         jmp        loc_5df5
0000000000006daf         align      16                                          ; End of unwind block (FDE at 0xa334)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
0000000000006db0         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0xa364), CODE XREF=vasnprintf+108
0000000000006db4         mov        rax, qword [rsi+8]
0000000000006db8         je         loc_6e1d

0000000000006dba         lea        r8, qword [aNull+12]                        ; 0x9350
0000000000006dc1         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
0000000000006dc8         lea        r9, qword [aNull]                           ; "(NULL)"
0000000000006dcf         xor        ecx, ecx
0000000000006dd1         nop        dword [rax]
0000000000006dd8         cmp        dword [rax], 0x16
0000000000006ddb         ja         loc_6e20

0000000000006ddd         mov        edx, dword [rax]
0000000000006ddf         movsxd     rdx, dword [r8+rdx*4]
0000000000006de3         add        rdx, r8
0000000000006de6         jmp        rdx
                        ; endp
0000000000006de8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6df0:
0000000000006df0         mov        rdx, qword [rdi+8]
0000000000006df4         add        rdx, 0xf
0000000000006df8         and        rdx, 0xfffffffffffffff0
0000000000006dfc         lea        r11, qword [rdx+0x10]
0000000000006e00         mov        qword [rdi+8], r11
0000000000006e04         fld        tword [rdx]
0000000000006e06         fstp       tword [rax+0x10]
0000000000006e09         nop        dword [rax]
0000000000006e10         add        rcx, 0x1                                    ; CODE XREF=sub_6e26+137, sub_6e26+183
0000000000006e14         add        rax, 0x20
0000000000006e18         cmp        qword [rsi], rcx
0000000000006e1b         ja         printf_fetchargs+40
                        ; endp

                     loc_6e1d:
0000000000006e1d         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
0000000000006e1f         ret
                        ; endp

                     loc_6e20:
0000000000006e20         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
0000000000006e25         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6e26:
0000000000006e26         mov        r11d, dword [rdi]
0000000000006e29         cmp        r11d, 0x2f
0000000000006e2d         ja         loc_6f6a

0000000000006e33         mov        edx, r11d
0000000000006e36         add        rdx, qword [rdi+0x10]
0000000000006e3a         add        r11d, 0x8
0000000000006e3e         mov        dword [rdi], r11d

                     loc_6e41:
0000000000006e41         mov        rdx, qword [rdx]                            ; CODE XREF=sub_6f10+102
0000000000006e44         mov        qword [rax+0x10], rdx
0000000000006e48         jmp        sub_6df0+32
                        ; endp
0000000000006e4a         mov        r11d, dword [rdi]
0000000000006e4d         cmp        r11d, 0x2f
0000000000006e51         ja         sub_6f8c                                    ; sub_6f8c
0000000000006e57         mov        edx, r11d
0000000000006e5a         add        rdx, qword [rdi+0x10]
0000000000006e5e         add        r11d, 0x8
0000000000006e62         mov        dword [rdi], r11d

                     loc_6e65:
0000000000006e65         mov        edx, dword [rdx]                            ; CODE XREF=sub_6f8c+12
0000000000006e67         mov        dword [rax+0x10], edx
0000000000006e6a         jmp        sub_6df0+32
                        ; endp
0000000000006e6c         mov        r11d, dword [rdi]
0000000000006e6f         cmp        r11d, 0x2f
0000000000006e73         ja         sub_6f7b                                    ; sub_6f7b
0000000000006e79         mov        edx, r11d
0000000000006e7c         add        rdx, qword [rdi+0x10]
0000000000006e80         add        r11d, 0x8
0000000000006e84         mov        dword [rdi], r11d

                     loc_6e87:
0000000000006e87         mov        edx, dword [rdx]                            ; CODE XREF=sub_6f7b+12
0000000000006e89         mov        byte [rax+0x10], dl
0000000000006e8c         jmp        sub_6df0+32
                        ; endp
0000000000006e8e         mov        r11d, dword [rdi]
0000000000006e91         cmp        r11d, 0x2f
0000000000006e95         ja         sub_6f10+42
0000000000006e9b         mov        edx, r11d
0000000000006e9e         add        rdx, qword [rdi+0x10]
0000000000006ea2         add        r11d, 0x8
0000000000006ea6         mov        dword [rdi], r11d
0000000000006ea9         mov        edx, dword [rdx]                            ; CODE XREF=sub_6f10+54
0000000000006eab         mov        word [rax+0x10], dx
0000000000006eaf         jmp        sub_6df0+32
0000000000006eb4         mov        r11d, dword [rdi]
0000000000006eb7         cmp        r11d, 0x2f
0000000000006ebb         ja         sub_6f10+59
0000000000006ec1         mov        edx, r11d
0000000000006ec4         add        rdx, qword [rdi+0x10]
0000000000006ec8         add        r11d, 0x8
0000000000006ecc         mov        dword [rdi], r11d
0000000000006ecf         mov        rdx, qword [rdx]                            ; CODE XREF=sub_6f10+71
0000000000006ed2         test       rdx, rdx
0000000000006ed5         cmove      rdx, r9
0000000000006ed9         mov        qword [rax+0x10], rdx
0000000000006edd         jmp        sub_6df0+32
0000000000006ee2         mov        r11d, dword [rdi+4]
0000000000006ee6         cmp        r11d, 0xaf
0000000000006eed         ja         sub_6f9d                                    ; sub_6f9d
0000000000006ef3         mov        edx, r11d
0000000000006ef6         add        rdx, qword [rdi+0x10]
0000000000006efa         add        r11d, 0x10
0000000000006efe         mov        dword [rdi+4], r11d

                     loc_6f02:
0000000000006f02         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_6f9d+12
0000000000006f06         movsd      qword [rax+0x10], xmm0
0000000000006f0b         jmp        sub_6df0+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6f10:
0000000000006f10         mov        r11d, dword [rdi]
0000000000006f13         cmp        r11d, 0x2f
0000000000006f17         ja         loc_6f5c

0000000000006f19         mov        edx, r11d
0000000000006f1c         add        rdx, qword [rdi+0x10]
0000000000006f20         add        r11d, 0x8
0000000000006f24         mov        dword [rdi], r11d

                     loc_6f27:
0000000000006f27         mov        rdx, qword [rdx]                            ; CODE XREF=sub_6f10+88
0000000000006f2a         test       rdx, rdx
0000000000006f2d         cmove      rdx, r10
0000000000006f31         mov        qword [rax+0x10], rdx
0000000000006f35         jmp        sub_6df0+32
                        ; endp
0000000000006f3a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_6e26+111
0000000000006f3e         lea        r11, qword [rdx+8]
0000000000006f42         mov        qword [rdi+8], r11
0000000000006f46         jmp        sub_6e26+131
0000000000006f4b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_6e26+149
0000000000006f4f         lea        r11, qword [rdx+8]
0000000000006f53         mov        qword [rdi+8], r11
0000000000006f57         jmp        sub_6e26+169

                     loc_6f5c:
0000000000006f5c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_6f10+7
0000000000006f60         lea        r11, qword [rdx+8]
0000000000006f64         mov        qword [rdi+8], r11
0000000000006f68         jmp        loc_6f27

                     loc_6f6a:
0000000000006f6a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_6e26+7
0000000000006f6e         lea        r11, qword [rdx+8]
0000000000006f72         mov        qword [rdi+8], r11
0000000000006f76         jmp        loc_6e41


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6f7b:
0000000000006f7b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_6e26+77
0000000000006f7f         lea        r11, qword [rdx+8]
0000000000006f83         mov        qword [rdi+8], r11
0000000000006f87         jmp        loc_6e87


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6f8c:
0000000000006f8c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_6e26+43
0000000000006f90         lea        r11, qword [rdx+8]
0000000000006f94         mov        qword [rdi+8], r11
0000000000006f98         jmp        loc_6e65


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6f9d:
0000000000006f9d         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_6e26+199
0000000000006fa1         lea        r11, qword [rdx+8]
0000000000006fa5         mov        qword [rdi+8], r11
0000000000006fa9         jmp        loc_6f02


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6fae:
0000000000006fae         nop                                                    ; End of unwind block (FDE at 0xa364)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
0000000000006fb0         push       r15                                         ; Begin of unwind block (FDE at 0xa37c), CODE XREF=vasnprintf+89
0000000000006fb2         push       r14
0000000000006fb4         lea        rcx, qword [rsi+0x20]
0000000000006fb8         push       r13
0000000000006fba         push       r12
0000000000006fbc         lea        rax, qword [rdx+0x10]
0000000000006fc0         push       rbp
0000000000006fc1         push       rbx
0000000000006fc2         mov        r14, rsi
0000000000006fc5         mov        r15, rdx
0000000000006fc8         xor        ebx, ebx
0000000000006fca         mov        r9d, 0x7
0000000000006fd0         sub        rsp, 0x58
0000000000006fd4         mov        r10d, 0x7
0000000000006fda         mov        qword [rsi], 0x0
0000000000006fe1         mov        qword [rsi+8], rcx
0000000000006fe5         mov        qword [rsp+0x88+var_60], rcx
0000000000006fea         mov        r8, 0xffffffffffffffff
0000000000006ff1         mov        qword [rdx], 0x0
0000000000006ff8         mov        qword [rsp+0x88+var_80], rax
0000000000006ffd         mov        qword [rdx+8], rax
0000000000007001         mov        qword [rsp+0x88+var_70], 0x0
000000000000700a         mov        qword [rsp+0x88+var_78], 0x0
0000000000007013         mov        qword [rsp+0x88+var_68], 0x0
000000000000701c         jmp        loc_702b
000000000000701e         align      32

                     loc_7020:
0000000000007020         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
0000000000007022         lea        rbp, qword [rdi+1]
0000000000007026         je         loc_7068

                     loc_7028:
0000000000007028         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_702b:
000000000000702b         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
000000000000702e         test       al, al
0000000000007030         jne        loc_7020

0000000000007032         lea        rax, qword [rbx+rbx*4]
0000000000007036         lea        rax, qword [rbx+rax*2]
000000000000703a         mov        qword [rcx+rax*8], rdi
000000000000703e         mov        rax, qword [rsp+0x88+var_78]
0000000000007043         mov        qword [r14+0x10], rax
0000000000007047         mov        rax, qword [rsp+0x88+var_70]
000000000000704c         mov        qword [r14+0x18], rax
0000000000007050         xor        eax, eax

                     loc_7052:
0000000000007052         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
0000000000007056         pop        rbx
0000000000007057         pop        rbp
0000000000007058         pop        r12
000000000000705a         pop        r13
000000000000705c         pop        r14
000000000000705e         pop        r15
0000000000007060         ret
                        ; endp
0000000000007061         align      8

                     loc_7068:
0000000000007068         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
000000000000706c         mov        r13, r8
000000000000706f         lea        rax, qword [rbx+rax*2]
0000000000007073         lea        r12, qword [rcx+rax*8]
0000000000007077         mov        qword [r12], rdi
000000000000707b         mov        dword [r12+0x10], 0x0
0000000000007084         mov        qword [r12+0x18], 0x0
000000000000708d         mov        qword [r12+0x20], 0x0
0000000000007096         mov        qword [r12+0x28], r8
000000000000709b         mov        qword [r12+0x30], 0x0
00000000000070a4         mov        qword [r12+0x38], 0x0
00000000000070ad         mov        qword [r12+0x40], r8
00000000000070b2         mov        qword [r12+0x50], r8
00000000000070b7         movzx      ebx, byte [rdi+1]
00000000000070bb         lea        eax, dword [rbx-0x30]
00000000000070be         cmp        al, 0x9
00000000000070c0         ja         loc_70fe

00000000000070c2         jmp        loc_74fa
00000000000070c7         align      16

                     loc_70d0:
00000000000070d0         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
00000000000070d3         je         loc_7118

00000000000070d5         cmp        bl, 0x2b
00000000000070d8         je         loc_7120

00000000000070da         cmp        bl, 0x20
00000000000070dd         je         loc_7130

00000000000070df         cmp        bl, 0x23
00000000000070e2         je         loc_7140

00000000000070e4         cmp        bl, 0x30
00000000000070e7         je         loc_7150

00000000000070e9         cmp        bl, 0x49
00000000000070ec         jne        loc_7160

00000000000070ee         or         dword [r12+0x10], 0x40
00000000000070f4         nop        dword [rax]

                     loc_70f8:
00000000000070f8         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
00000000000070fb         mov        rbp, rax

                     loc_70fe:
00000000000070fe         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
0000000000007102         cmp        bl, 0x27
0000000000007105         mov        rdx, rax
0000000000007108         jne        loc_70d0

000000000000710a         or         dword [r12+0x10], 0x1
0000000000007110         jmp        loc_70f8
0000000000007112         align      8

                     loc_7118:
0000000000007118         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
000000000000711e         jmp        loc_70f8

                     loc_7120:
0000000000007120         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
0000000000007126         jmp        loc_70f8
0000000000007128         align      16

                     loc_7130:
0000000000007130         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
0000000000007136         jmp        loc_70f8
0000000000007138         align      64

                     loc_7140:
0000000000007140         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
0000000000007146         jmp        loc_70f8
0000000000007148         align      16

                     loc_7150:
0000000000007150         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
0000000000007156         jmp        loc_70f8
0000000000007158         align      32

                     loc_7160:
0000000000007160         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
0000000000007163         je         loc_7319

0000000000007169         lea        ecx, dword [rbx-0x30]
000000000000716c         cmp        cl, 0x9
000000000000716f         jbe        loc_7587

                     loc_7175:
0000000000007175         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
0000000000007178         je         loc_744f

                     loc_717e:
000000000000717e         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
0000000000007180         mov        esi, 0x1
0000000000007185         jmp        loc_71b7
0000000000007187         align      16

                     loc_7190:
0000000000007190         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
0000000000007193         je         loc_71d0

0000000000007195         cmp        bl, 0x6c
0000000000007198         je         loc_71b0

000000000000719a         cmp        bl, 0x6a
000000000000719d         je         loc_71b0

000000000000719f         mov        edx, ebx
00000000000071a1         and        edx, 0xffffffdf
00000000000071a4         cmp        dl, 0x5a
00000000000071a7         je         loc_71b0

00000000000071a9         cmp        bl, 0x74
00000000000071ac         jne        loc_71d8

00000000000071ae         nop

                     loc_71b0:
00000000000071b0         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_71b3:
00000000000071b3         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_71b7:
00000000000071b7         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
00000000000071bb         cmp        bl, 0x68
00000000000071be         jne        loc_7190

00000000000071c0         mov        ecx, eax
00000000000071c2         mov        edx, esi
00000000000071c4         and        ecx, 0x1
00000000000071c7         shl        edx, cl
00000000000071c9         or         eax, edx
00000000000071cb         jmp        loc_71b3
00000000000071cd         align      16

                     loc_71d0:
00000000000071d0         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
00000000000071d3         jmp        loc_71b3
00000000000071d5         align      8

                     loc_71d8:
00000000000071d8         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
00000000000071db         cmp        dl, 0x53
00000000000071de         ja         loc_77fb

00000000000071e4         lea        rcx, qword [switch_table_93cc]              ; switch_table_93cc
00000000000071eb         movzx      edx, dl
00000000000071ee         movsxd     rdx, dword [rcx+rdx*4]
00000000000071f2         add        rdx, rcx
00000000000071f5         jmp        rdx                                         ; switch statement using table at 0x93cc, with 84 cases, 0x71f7,0x726b,0x76ac,0x76f8,0x770b,0x7758,0x776b,0x778c,0x779c,0x77f0,0x77fb

                     loc_71f7:
00000000000071f7         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
00000000000071fd         mov        ebx, 0x73
0000000000007202         nop        word [rax+rax]

                     loc_7208:
0000000000007208         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
000000000000720c         je         loc_78c7

0000000000007212         mov        qword [r12+0x50], r13

                     loc_7217:
0000000000007217         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
000000000000721a         mov        rcx, qword [r15+8]
000000000000721e         jbe        loc_7840

                     loc_7224:
0000000000007224         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
0000000000007227         mov        rdx, rax
000000000000722a         shl        rdx, 0x5
000000000000722e         add        rdx, rcx
0000000000007231         cmp        rax, r13
0000000000007234         ja         loc_7256

0000000000007236         nop        word [cs:rax+rax]

                     loc_7240:
0000000000007240         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
0000000000007244         mov        dword [rdx], 0x0
000000000000724a         add        rdx, 0x20
000000000000724e         cmp        rax, r13
0000000000007251         jbe        loc_7240

0000000000007253         mov        qword [r15], rax

                     loc_7256:
0000000000007256         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
000000000000725a         lea        rax, qword [rcx+r13]
000000000000725e         mov        edx, dword [rax]
0000000000007260         test       edx, edx
0000000000007262         jne        loc_7833

0000000000007268         mov        dword [rax], r11d

                     loc_726b:
000000000000726b         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
0000000000007270         mov        rax, qword [r14]
0000000000007273         mov        qword [r12+8], rbp
0000000000007278         lea        rbx, qword [rax+1]
000000000000727c         cmp        r10, rbx
000000000000727f         mov        qword [r14], rbx
0000000000007282         ja         loc_7310

0000000000007288         test       r10, r10
000000000000728b         js         loc_7c37

0000000000007291         add        r10, r10
0000000000007294         movabs     rax, 0x2e8ba2e8ba2e8ba
000000000000729e         cmp        r10, rax
00000000000072a1         ja         loc_7c37

00000000000072a7         lea        rax, qword [r10+r10*4]
00000000000072ab         mov        rdi, qword [r14+8]
00000000000072af         cmp        qword [rsp+0x88+var_60], rdi
00000000000072b4         mov        qword [rsp+0x88+var_48], r9
00000000000072b9         mov        qword [rsp+0x88+var_50], r10
00000000000072be         lea        rax, qword [r10+rax*2]
00000000000072c2         mov        qword [rsp+0x88+var_58], r8
00000000000072c7         lea        rsi, qword [rax*8]
00000000000072cf         je         loc_798d

00000000000072d5         call       j_realloc                                   ; realloc
00000000000072da         test       rax, rax
00000000000072dd         mov        rcx, rax
00000000000072e0         mov        r8, qword [rsp+0x88+var_58]
00000000000072e5         mov        r10, qword [rsp+0x88+var_50]
00000000000072ea         mov        r9, qword [rsp+0x88+var_48]
00000000000072ef         je         loc_7c37

00000000000072f5         mov        rax, qword [rsp+0x88+var_60]
00000000000072fa         cmp        rax, qword [r14+8]
00000000000072fe         mov        rbx, qword [r14]
0000000000007301         je         loc_79b0

                     loc_7307:
0000000000007307         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
000000000000730b         jmp        loc_7028

                     loc_7310:
0000000000007310         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
0000000000007314         jmp        loc_7028

                     loc_7319:
0000000000007319         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
000000000000731e         mov        ecx, 0x1
0000000000007323         mov        qword [r12+0x18], rbp
0000000000007328         mov        qword [r12+0x20], rax
000000000000732d         test       rsi, rsi
0000000000007330         cmovne     rcx, rsi
0000000000007334         mov        qword [rsp+0x88+var_78], rcx
0000000000007339         movzx      ecx, byte [rbp+1]
000000000000733d         lea        esi, dword [rcx-0x30]
0000000000007340         cmp        sil, 0x9
0000000000007344         jbe        loc_7625

                     loc_734a:
000000000000734a         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
000000000000734f         cmp        rsi, 0xffffffffffffffff
0000000000007353         lea        rdx, qword [rsi+1]
0000000000007357         mov        qword [r12+0x28], rsi
000000000000735c         je         loc_77fb

0000000000007362         mov        rbx, qword [rsp+0x88+var_68]
0000000000007367         mov        rbp, rax
000000000000736a         mov        qword [rsp+0x88+var_68], rdx

                     loc_736f:
000000000000736f         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
0000000000007372         mov        rcx, qword [r15+8]
0000000000007376         ja         loc_79f2

000000000000737c         add        r9, r9
000000000000737f         lea        rax, qword [rbx+1]
0000000000007383         cmp        r9, rbx
0000000000007386         cmovbe     r9, rax
000000000000738a         movabs     rax, 0x7ffffffffffffff
0000000000007394         cmp        r9, rax
0000000000007397         ja         loc_7c3b

000000000000739d         mov        rsi, r9
00000000000073a0         mov        qword [rsp+0x88+var_48], r9
00000000000073a5         mov        qword [rsp+0x88+var_50], r10
00000000000073aa         shl        rsi, 0x5
00000000000073ae         cmp        qword [rsp+0x88+var_80], rcx
00000000000073b3         mov        qword [rsp+0x88+var_58], r8
00000000000073b8         je         loc_7ad1

00000000000073be         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
00000000000073c1         call       j_realloc                                   ; realloc
00000000000073c6         mov        rdx, qword [r15+8]
00000000000073ca         mov        r8, qword [rsp+0x88+var_58]
00000000000073cf         mov        rcx, rax
00000000000073d2         mov        r10, qword [rsp+0x88+var_50]
00000000000073d7         mov        r9, qword [rsp+0x88+var_48]

                     loc_73dc:
00000000000073dc         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
00000000000073df         je         loc_7c97

00000000000073e5         cmp        qword [rsp+0x88+var_80], rdx
00000000000073ea         mov        rax, qword [r15]
00000000000073ed         je         loc_7bab

                     loc_73f3:
00000000000073f3         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_73f7:
00000000000073f7         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
00000000000073fa         shl        rdx, 0x5
00000000000073fe         add        rdx, rcx
0000000000007401         cmp        rax, rbx
0000000000007404         ja         loc_7426

0000000000007406         nop        word [cs:rax+rax]

                     loc_7410:
0000000000007410         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
0000000000007414         mov        dword [rdx], 0x0
000000000000741a         add        rdx, 0x20
000000000000741e         cmp        rax, rbx
0000000000007421         jbe        loc_7410

0000000000007423         mov        qword [r15], rax

                     loc_7426:
0000000000007426         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
000000000000742a         lea        rax, qword [rcx+rbx]
000000000000742e         mov        edx, dword [rax]
0000000000007430         test       edx, edx
0000000000007432         jne        loc_790b

0000000000007438         mov        dword [rax], 0x5
000000000000743e         movzx      ebx, byte [rbp]
0000000000007442         lea        rdx, qword [rbp+1]
0000000000007446         cmp        bl, 0x2e
0000000000007449         jne        loc_717e

                     loc_744f:
000000000000744f         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
0000000000007453         mov        qword [r12+0x30], rbp
0000000000007458         jne        loc_75de

000000000000745e         mov        rsi, qword [rsp+0x88+var_70]
0000000000007463         lea        r11, qword [rbp+2]
0000000000007467         mov        eax, 0x2
000000000000746c         mov        qword [r12+0x38], r11
0000000000007471         cmp        rsi, 0x2
0000000000007475         cmovae     rax, rsi
0000000000007479         mov        qword [rsp+0x88+var_70], rax
000000000000747e         movsx      eax, byte [rbp+2]
0000000000007482         lea        edx, dword [rax-0x30]
0000000000007485         cmp        dl, 0x9
0000000000007488         jbe        loc_7b1c

                     loc_748e:
000000000000748e         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
0000000000007493         cmp        rbx, 0xffffffffffffffff
0000000000007497         je         loc_7af5

                     loc_749d:
000000000000749d         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
00000000000074a0         mov        rcx, qword [r15+8]
00000000000074a4         jbe        loc_7a0f

00000000000074aa         mov        rax, qword [r15]

                     loc_74ad:
00000000000074ad         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
00000000000074b0         shl        rdx, 0x5
00000000000074b4         add        rdx, rcx
00000000000074b7         cmp        rax, rbx
00000000000074ba         ja         loc_74d6

00000000000074bc         nop        dword [rax]

                     loc_74c0:
00000000000074c0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
00000000000074c4         mov        dword [rdx], 0x0
00000000000074ca         add        rdx, 0x20
00000000000074ce         cmp        rax, rbx
00000000000074d1         jbe        loc_74c0

00000000000074d3         mov        qword [r15], rax

                     loc_74d6:
00000000000074d6         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
00000000000074da         lea        rax, qword [rcx+rbx]
00000000000074de         mov        edx, dword [rax]
00000000000074e0         test       edx, edx
00000000000074e2         jne        loc_79fa

00000000000074e8         mov        dword [rax], 0x5
00000000000074ee         mov        rbp, r11
00000000000074f1         movzx      ebx, byte [r11]
00000000000074f5         jmp        loc_717e

                     loc_74fa:
00000000000074fa         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
00000000000074fd         nop        dword [rax]

                     loc_7500:
0000000000007500         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
0000000000007504         movzx      edx, byte [rax]
0000000000007507         lea        ecx, dword [rdx-0x30]
000000000000750a         cmp        cl, 0x9
000000000000750d         jbe        loc_7500

000000000000750f         cmp        dl, 0x24
0000000000007512         mov        r13, r8
0000000000007515         jne        loc_70fe

000000000000751b         xor        edx, edx

                     loc_751d:
000000000000751d         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
0000000000007520         movabs     rdi, 0x1999999999999999
000000000000752a         mov        rsi, r8
000000000000752d         sub        eax, 0x30
0000000000007530         cmp        rdx, rdi
0000000000007533         cdqe
0000000000007535         ja         loc_753e

0000000000007537         lea        rsi, qword [rdx+rdx*4]
000000000000753b         add        rsi, rsi

                     loc_753e:
000000000000753e         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_7541:
0000000000007541         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
0000000000007544         movzx      ebx, byte [rbp+1]
0000000000007548         setb       sil
000000000000754c         add        rbp, 0x1
0000000000007550         mov        rdx, rax
0000000000007553         movzx      esi, sil
0000000000007557         test       rsi, rsi
000000000000755a         lea        edi, dword [rbx-0x30]
000000000000755d         jne        loc_78ee

0000000000007563         cmp        dil, 0x9
0000000000007567         jbe        loc_751d

0000000000007569         mov        r13, rax
000000000000756c         sub        r13, 0x1
0000000000007570         cmp        r13, 0xfffffffffffffffd
0000000000007574         ja         loc_77fb

000000000000757a         lea        rbp, qword [rcx+2]
000000000000757e         movzx      ebx, byte [rcx+2]
0000000000007582         jmp        loc_70fe

                     loc_7587:
0000000000007587         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
000000000000758c         movzx      edi, byte [rbp]
0000000000007590         mov        rsi, rbp
0000000000007593         lea        ecx, dword [rdi-0x30]
0000000000007596         cmp        cl, 0x9
0000000000007599         jbe        loc_75a7

000000000000759b         jmp        loc_75d0
000000000000759d         align      32

                     loc_75a0:
00000000000075a0         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
00000000000075a3         add        rax, 0x1

                     loc_75a7:
00000000000075a7         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
00000000000075aa         lea        edx, dword [rdi-0x30]
00000000000075ad         cmp        dl, 0x9
00000000000075b0         jbe        loc_75a0

00000000000075b2         mov        rcx, rax
00000000000075b5         lea        rdx, qword [rbp+2]
00000000000075b9         mov        rbp, rax
00000000000075bc         sub        rcx, rsi
00000000000075bf         mov        rsi, qword [rsp+0x88+var_78]
00000000000075c4         cmp        rsi, rcx
00000000000075c7         cmovae     rcx, rsi
00000000000075cb         mov        qword [rsp+0x88+var_78], rcx

                     loc_75d0:
00000000000075d0         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
00000000000075d5         movzx      ebx, byte [rbp]
00000000000075d9         jmp        loc_7175

                     loc_75de:
00000000000075de         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
00000000000075e2         sub        eax, 0x30
00000000000075e5         cmp        al, 0x9
00000000000075e7         ja         loc_75fe

00000000000075e9         nop        dword [rax]

                     loc_75f0:
00000000000075f0         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
00000000000075f4         movzx      eax, byte [rdx]
00000000000075f7         sub        eax, 0x30
00000000000075fa         cmp        al, 0x9
00000000000075fc         jbe        loc_75f0

                     loc_75fe:
00000000000075fe         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
0000000000007603         mov        rax, rdx
0000000000007606         mov        qword [r12+0x38], rdx
000000000000760b         sub        rax, rbp
000000000000760e         movzx      ebx, byte [rdx]
0000000000007611         mov        rbp, rdx
0000000000007614         cmp        rsi, rax
0000000000007617         cmovae     rax, rsi
000000000000761b         mov        qword [rsp+0x88+var_70], rax
0000000000007620         jmp        loc_717e

                     loc_7625:
0000000000007625         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_7628:
0000000000007628         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
000000000000762c         movzx      edi, byte [rsi]
000000000000762f         lea        r11d, dword [rdi-0x30]
0000000000007633         cmp        r11b, 0x9
0000000000007637         jbe        loc_7628

0000000000007639         cmp        dil, 0x24
000000000000763d         jne        loc_734a

0000000000007643         xor        esi, esi

                     loc_7645:
0000000000007645         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
0000000000007648         movabs     rdi, 0x1999999999999999
0000000000007652         mov        rcx, r8
0000000000007655         sub        eax, 0x30
0000000000007658         cmp        rsi, rdi
000000000000765b         cdqe
000000000000765d         ja         loc_7666

000000000000765f         lea        rcx, qword [rsi+rsi*4]
0000000000007663         add        rcx, rcx

                     loc_7666:
0000000000007666         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_7669:
0000000000007669         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
000000000000766c         add        rax, rcx
000000000000766f         movzx      ecx, byte [rdx+1]
0000000000007673         setb       r11b
0000000000007677         add        rdx, 0x1
000000000000767b         mov        rsi, rax
000000000000767e         test       r11, r11
0000000000007681         lea        edi, dword [rcx-0x30]
0000000000007684         jne        loc_7b8e

000000000000768a         cmp        dil, 0x9
000000000000768e         jbe        loc_7645

0000000000007690         lea        rbx, qword [rax-1]
0000000000007694         cmp        rbx, 0xfffffffffffffffd
0000000000007698         ja         loc_77fb

000000000000769e         mov        qword [r12+0x28], rbx
00000000000076a3         add        rbp, 0x2
00000000000076a7         jmp        loc_736f

                     loc_76ac:
00000000000076ac         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
00000000000076af         mov        r11d, 0x16
00000000000076b5         jg         loc_7208

00000000000076bb         test       al, 0x4
00000000000076bd         jne        loc_7208

00000000000076c3         cmp        eax, 0x7
00000000000076c6         mov        r11d, 0x15
00000000000076cc         jg         loc_7208

00000000000076d2         test       al, 0x2
00000000000076d4         mov        r11d, 0x12
00000000000076da         jne        loc_7208

00000000000076e0         xor        r11d, r11d
00000000000076e3         test       al, 0x1
00000000000076e5         sete       r11b
00000000000076e9         add        r11d, 0x13
00000000000076ed         jmp        loc_7208
00000000000076f2         align      8

                     loc_76f8:
00000000000076f8         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
00000000000076fb         cmp        eax, 0x7
00000000000076fe         setg       r11b
0000000000007702         add        r11d, 0xd
0000000000007706         jmp        loc_7208

                     loc_770b:
000000000000770b         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
000000000000770e         mov        r11d, 0x9
0000000000007714         jg         loc_7208

000000000000771a         test       al, 0x4
000000000000771c         jne        loc_7208

0000000000007722         cmp        eax, 0x7
0000000000007725         mov        r11d, 0x7
000000000000772b         jg         loc_7208

0000000000007731         test       al, 0x2
0000000000007733         mov        r11d, 0x1
0000000000007739         jne        loc_7208

000000000000773f         and        eax, 0x1
0000000000007742         cmp        eax, 0x1
0000000000007745         sbb        r11d, r11d
0000000000007748         and        r11d, 0x2
000000000000774c         add        r11d, 0x3
0000000000007750         jmp        loc_7208
0000000000007755         align      8

                     loc_7758:
0000000000007758         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
000000000000775b         cmp        eax, 0x7
000000000000775e         setg       r11b
0000000000007762         add        r11d, 0xf
0000000000007766         jmp        loc_7208

                     loc_776b:
000000000000776b         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
000000000000776e         mov        r11d, 0xc
0000000000007774         jg         loc_7208

000000000000777a         xor        r11d, r11d
000000000000777d         test       al, 0x4
000000000000777f         setne      r11b
0000000000007783         add        r11d, 0xb
0000000000007787         jmp        loc_7208

                     loc_778c:
000000000000778c         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
0000000000007792         mov        ebx, 0x63
0000000000007797         jmp        loc_7208

                     loc_779c:
000000000000779c         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
000000000000779f         mov        r11d, 0xa
00000000000077a5         jg         loc_7208

00000000000077ab         test       al, 0x4
00000000000077ad         jne        loc_7208

00000000000077b3         cmp        eax, 0x7
00000000000077b6         mov        r11d, 0x8
00000000000077bc         jg         loc_7208

00000000000077c2         test       al, 0x2
00000000000077c4         mov        r11d, 0x2
00000000000077ca         jne        loc_7208

00000000000077d0         and        eax, 0x1
00000000000077d3         cmp        eax, 0x1
00000000000077d6         sbb        r11d, r11d
00000000000077d9         and        r11d, 0x2
00000000000077dd         add        r11d, 0x4
00000000000077e1         jmp        loc_7208
00000000000077e6         align      16

                     loc_77f0:
00000000000077f0         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
00000000000077f6         jmp        loc_7208

                     loc_77fb:
00000000000077fb         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_77ff:
00000000000077ff         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
0000000000007804         je         loc_780e

0000000000007806         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000007809         call       j_free                                      ; free

                     loc_780e:
000000000000780e         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
0000000000007812         cmp        qword [rsp+0x88+var_60], rdi
0000000000007817         je         loc_781e

0000000000007819         call       j_free                                      ; free

                     loc_781e:
000000000000781e         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
0000000000007823         mov        dword [rax], 0x16
0000000000007829         mov        eax, 0xffffffff
000000000000782e         jmp        loc_7052

                     loc_7833:
0000000000007833         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
0000000000007836         je         loc_726b

000000000000783c         jmp        loc_77ff
000000000000783e         align      64

                     loc_7840:
0000000000007840         add        r9, r9                                      ; CODE XREF=printf_parse+622
0000000000007843         lea        rax, qword [r13+1]
0000000000007847         cmp        r9, r13
000000000000784a         cmovbe     r9, rax
000000000000784e         movabs     rax, 0x7ffffffffffffff
0000000000007858         cmp        r9, rax
000000000000785b         ja         loc_7c3b

0000000000007861         mov        rsi, r9
0000000000007864         mov        qword [rsp+0x88+var_40], r9
0000000000007869         mov        qword [rsp+0x88+var_48], r10
000000000000786e         shl        rsi, 0x5
0000000000007872         cmp        qword [rsp+0x88+var_80], rcx
0000000000007877         mov        qword [rsp+0x88+var_50], r8
000000000000787c         mov        dword [rsp+0x88+var_58], r11d
0000000000007881         je         loc_7921

0000000000007887         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000788a         call       j_realloc                                   ; realloc
000000000000788f         test       rax, rax
0000000000007892         mov        rcx, rax
0000000000007895         mov        r11d, dword [rsp+0x88+var_58]
000000000000789a         mov        r8, qword [rsp+0x88+var_50]
000000000000789f         mov        r10, qword [rsp+0x88+var_48]
00000000000078a4         mov        r9, qword [rsp+0x88+var_40]
00000000000078a9         je         loc_7c37

00000000000078af         mov        rax, qword [rsp+0x88+var_80]
00000000000078b4         cmp        rax, qword [r15+8]
00000000000078b8         je         loc_7949

                     loc_78be:
00000000000078be         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
00000000000078c2         jmp        loc_7224

                     loc_78c7:
00000000000078c7         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
00000000000078cc         cmp        rsi, 0xffffffffffffffff
00000000000078d0         lea        rax, qword [rsi+1]
00000000000078d4         mov        qword [r12+0x50], rsi
00000000000078d9         je         loc_77fb

00000000000078df         mov        r13, qword [rsp+0x88+var_68]
00000000000078e4         mov        qword [rsp+0x88+var_68], rax
00000000000078e9         jmp        loc_7217

                     loc_78ee:
00000000000078ee         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
00000000000078f2         ja         loc_77fb

00000000000078f8         movsx      eax, bl
00000000000078fb         mov        rsi, r8
00000000000078fe         mov        rcx, rbp
0000000000007901         sub        eax, 0x30
0000000000007904         cdqe
0000000000007906         jmp        loc_7541

                     loc_790b:
000000000000790b         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
000000000000790e         jne        loc_77ff

0000000000007914         movzx      ebx, byte [rbp]
0000000000007918         lea        rdx, qword [rbp+1]
000000000000791c         jmp        loc_7175

                     loc_7921:
0000000000007921         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
0000000000007924         call       j_malloc                                    ; malloc
0000000000007929         test       rax, rax
000000000000792c         mov        rcx, rax
000000000000792f         mov        r11d, dword [rsp+0x88+var_58]
0000000000007934         mov        r8, qword [rsp+0x88+var_50]
0000000000007939         mov        r10, qword [rsp+0x88+var_48]
000000000000793e         mov        r9, qword [rsp+0x88+var_40]
0000000000007943         je         loc_7aac

                     loc_7949:
0000000000007949         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
000000000000794c         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
0000000000007951         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007954         mov        qword [rsp+0x88+var_40], r9
0000000000007959         mov        qword [rsp+0x88+var_48], r10
000000000000795e         mov        qword [rsp+0x88+var_50], r8
0000000000007963         mov        dword [rsp+0x88+var_58], r11d
0000000000007968         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
000000000000796c         call       j_memcpy                                    ; memcpy
0000000000007971         mov        r9, qword [rsp+0x88+var_40]
0000000000007976         mov        r10, qword [rsp+0x88+var_48]
000000000000797b         mov        rcx, rax
000000000000797e         mov        r8, qword [rsp+0x88+var_50]
0000000000007983         mov        r11d, dword [rsp+0x88+var_58]
0000000000007988         jmp        loc_78be

                     loc_798d:
000000000000798d         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
0000000000007990         call       j_malloc                                    ; malloc
0000000000007995         test       rax, rax
0000000000007998         mov        rcx, rax
000000000000799b         mov        r8, qword [rsp+0x88+var_58]
00000000000079a0         mov        r10, qword [rsp+0x88+var_50]
00000000000079a5         mov        r9, qword [rsp+0x88+var_48]
00000000000079aa         je         loc_7a99

                     loc_79b0:
00000000000079b0         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
00000000000079b4         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
00000000000079b9         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
00000000000079bc         mov        qword [rsp+0x88+var_48], r9
00000000000079c1         mov        qword [rsp+0x88+var_50], r10
00000000000079c6         lea        rdx, qword [rbx+rax*2]
00000000000079ca         mov        qword [rsp+0x88+var_58], r8
00000000000079cf         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
00000000000079d3         call       j_memcpy                                    ; memcpy
00000000000079d8         mov        rbx, qword [r14]
00000000000079db         mov        rcx, rax
00000000000079de         mov        r9, qword [rsp+0x88+var_48]
00000000000079e3         mov        r10, qword [rsp+0x88+var_50]
00000000000079e8         mov        r8, qword [rsp+0x88+var_58]
00000000000079ed         jmp        loc_7307

                     loc_79f2:
00000000000079f2         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
00000000000079f5         jmp        loc_73f7

                     loc_79fa:
00000000000079fa         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
00000000000079fd         jne        loc_77ff

0000000000007a03         movzx      ebx, byte [r11]
0000000000007a07         mov        rbp, r11
0000000000007a0a         jmp        loc_717e

                     loc_7a0f:
0000000000007a0f         add        r9, r9                                      ; CODE XREF=printf_parse+1268
0000000000007a12         lea        rax, qword [rbx+1]
0000000000007a16         cmp        r9, rbx
0000000000007a19         cmovbe     r9, rax
0000000000007a1d         movabs     rax, 0x7ffffffffffffff
0000000000007a27         cmp        r9, rax
0000000000007a2a         ja         loc_7c3b

0000000000007a30         mov        rsi, r9
0000000000007a33         mov        qword [rsp+0x88+var_40], r9
0000000000007a38         mov        qword [rsp+0x88+var_48], r10
0000000000007a3d         shl        rsi, 0x5
0000000000007a41         cmp        qword [rsp+0x88+var_80], rcx
0000000000007a46         mov        qword [rsp+0x88+var_50], r8
0000000000007a4b         mov        qword [rsp+0x88+var_58], r11
0000000000007a50         je         loc_7c0e

0000000000007a56         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007a59         call       j_realloc                                   ; realloc
0000000000007a5e         mov        rdx, qword [r15+8]
0000000000007a62         mov        r11, qword [rsp+0x88+var_58]
0000000000007a67         mov        rcx, rax
0000000000007a6a         mov        r8, qword [rsp+0x88+var_50]
0000000000007a6f         mov        r10, qword [rsp+0x88+var_48]
0000000000007a74         mov        r9, qword [rsp+0x88+var_40]

                     loc_7a79:
0000000000007a79         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
0000000000007a7c         je         loc_7c97

0000000000007a82         cmp        qword [rsp+0x88+var_80], rdx
0000000000007a87         mov        rax, qword [r15]
0000000000007a8a         je         loc_7c50

                     loc_7a90:
0000000000007a90         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
0000000000007a94         jmp        loc_74ad

                     loc_7a99:
0000000000007a99         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
0000000000007a9d         cmp        qword [rsp+0x88+var_80], rcx
0000000000007aa2         je         loc_7abc

                     loc_7aa4:
0000000000007aa4         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
0000000000007aa7         call       j_free                                      ; free

                     loc_7aac:
0000000000007aac         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
0000000000007ab0         cmp        qword [rsp+0x88+var_60], rdi
0000000000007ab5         je         loc_7abc

0000000000007ab7         call       j_free                                      ; free

                     loc_7abc:
0000000000007abc         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
0000000000007ac1         mov        dword [rax], 0xc
0000000000007ac7         mov        eax, 0xffffffff
0000000000007acc         jmp        loc_7052

                     loc_7ad1:
0000000000007ad1         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
0000000000007ad4         call       j_malloc                                    ; malloc
0000000000007ad9         mov        rdx, qword [rsp+0x88+var_80]
0000000000007ade         mov        rcx, rax
0000000000007ae1         mov        r9, qword [rsp+0x88+var_48]
0000000000007ae6         mov        r10, qword [rsp+0x88+var_50]
0000000000007aeb         mov        r8, qword [rsp+0x88+var_58]
0000000000007af0         jmp        loc_73dc

                     loc_7af5:
0000000000007af5         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
0000000000007afa         cmp        rsi, 0xffffffffffffffff
0000000000007afe         lea        rax, qword [rsi+1]
0000000000007b02         mov        qword [r12+0x40], rsi
0000000000007b07         je         loc_77fb

0000000000007b0d         mov        rbx, qword [rsp+0x88+var_68]
0000000000007b12         mov        qword [rsp+0x88+var_68], rax
0000000000007b17         jmp        loc_749d

                     loc_7b1c:
0000000000007b1c         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_7b1f:
0000000000007b1f         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
0000000000007b23         movzx      ecx, byte [rdx]
0000000000007b26         lea        esi, dword [rcx-0x30]
0000000000007b29         cmp        sil, 0x9
0000000000007b2d         jbe        loc_7b1f

0000000000007b2f         cmp        cl, 0x24
0000000000007b32         jne        loc_748e

0000000000007b38         xor        ecx, ecx

                     loc_7b3a:
0000000000007b3a         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
0000000000007b44         sub        eax, 0x30
0000000000007b47         mov        rdx, r8
0000000000007b4a         cmp        rcx, rsi
0000000000007b4d         cdqe
0000000000007b4f         ja         loc_7b58

0000000000007b51         lea        rdx, qword [rcx+rcx*4]
0000000000007b55         add        rdx, rdx

                     loc_7b58:
0000000000007b58         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_7b5b:
0000000000007b5b         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
0000000000007b5d         add        rdx, rax
0000000000007b60         movsx      eax, byte [r11+1]
0000000000007b65         setb       bl
0000000000007b68         add        r11, 0x1
0000000000007b6c         mov        rcx, rdx
0000000000007b6f         test       rbx, rbx
0000000000007b72         lea        edi, dword [rax-0x30]
0000000000007b75         je         loc_7be8

0000000000007b77         cmp        dil, 0x9
0000000000007b7b         ja         loc_77fb

0000000000007b81         sub        eax, 0x30
0000000000007b84         mov        rdx, r8
0000000000007b87         mov        rsi, r11
0000000000007b8a         cdqe
0000000000007b8c         jmp        loc_7b5b

                     loc_7b8e:
0000000000007b8e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
0000000000007b92         ja         loc_77fb

0000000000007b98         movsx      eax, cl
0000000000007b9b         mov        rbp, rdx
0000000000007b9e         mov        rcx, r8
0000000000007ba1         sub        eax, 0x30
0000000000007ba4         cdqe
0000000000007ba6         jmp        loc_7669

                     loc_7bab:
0000000000007bab         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
0000000000007bb0         shl        rax, 0x5
0000000000007bb4         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007bb7         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
0000000000007bba         mov        qword [rsp+0x88+var_48], r9
0000000000007bbf         mov        qword [rsp+0x88+var_50], r10
0000000000007bc4         mov        qword [rsp+0x88+var_58], r8
0000000000007bc9         call       j_memcpy                                    ; memcpy
0000000000007bce         mov        r9, qword [rsp+0x88+var_48]
0000000000007bd3         mov        rcx, rax
0000000000007bd6         mov        r10, qword [rsp+0x88+var_50]
0000000000007bdb         mov        rax, qword [r15]
0000000000007bde         mov        r8, qword [rsp+0x88+var_58]
0000000000007be3         jmp        loc_73f3

                     loc_7be8:
0000000000007be8         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
0000000000007bec         jbe        loc_7b3a

0000000000007bf2         lea        rbx, qword [rdx-1]
0000000000007bf6         cmp        rbx, 0xfffffffffffffffd
0000000000007bfa         ja         loc_77fb

0000000000007c00         mov        qword [r12+0x40], rbx
0000000000007c05         lea        r11, qword [rsi+2]
0000000000007c09         jmp        loc_749d

                     loc_7c0e:
0000000000007c0e         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
0000000000007c11         call       j_malloc                                    ; malloc
0000000000007c16         mov        rdx, qword [rsp+0x88+var_80]
0000000000007c1b         mov        rcx, rax
0000000000007c1e         mov        r9, qword [rsp+0x88+var_40]
0000000000007c23         mov        r10, qword [rsp+0x88+var_48]
0000000000007c28         mov        r8, qword [rsp+0x88+var_50]
0000000000007c2d         mov        r11, qword [rsp+0x88+var_58]
0000000000007c32         jmp        loc_7a79

                     loc_7c37:
0000000000007c37         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_7c3b:
0000000000007c3b         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
0000000000007c40         jne        loc_7aa4

0000000000007c46         jmp        loc_7aac
0000000000007c4b         align      16

                     loc_7c50:
0000000000007c50         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
0000000000007c55         shl        rax, 0x5
0000000000007c59         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007c5c         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
0000000000007c5f         mov        qword [rsp+0x88+var_40], r9
0000000000007c64         mov        qword [rsp+0x88+var_48], r10
0000000000007c69         mov        qword [rsp+0x88+var_50], r8
0000000000007c6e         mov        qword [rsp+0x88+var_58], r11
0000000000007c73         call       j_memcpy                                    ; memcpy
0000000000007c78         mov        r9, qword [rsp+0x88+var_40]
0000000000007c7d         mov        rcx, rax
0000000000007c80         mov        r10, qword [rsp+0x88+var_48]
0000000000007c85         mov        rax, qword [r15]
0000000000007c88         mov        r8, qword [rsp+0x88+var_50]
0000000000007c8d         mov        r11, qword [rsp+0x88+var_58]
0000000000007c92         jmp        loc_7a90

                     loc_7c97:
0000000000007c97         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
0000000000007c9a         jmp        loc_7c3b
0000000000007c9c         align      32                                          ; End of unwind block (FDE at 0xa37c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000007ca0         push       r15                                         ; Begin of unwind block (FDE at 0xa3cc), DATA XREF=_start+22
0000000000007ca2         push       r14
0000000000007ca4         mov        r15, rdx
0000000000007ca7         push       r13
0000000000007ca9         push       r12
0000000000007cab         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000007cb2         push       rbp
0000000000007cb3         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
0000000000007cba         push       rbx
0000000000007cbb         mov        r13d, edi
0000000000007cbe         mov        r14, rsi
0000000000007cc1         sub        rbp, r12
0000000000007cc4         sub        rsp, 0x8
0000000000007cc8         sar        rbp, 0x3
0000000000007ccc         call       _init                                       ; _init
0000000000007cd1         test       rbp, rbp
0000000000007cd4         je         loc_7cf6

0000000000007cd6         xor        ebx, ebx
0000000000007cd8         nop        dword [rax+rax]

                     loc_7ce0:
0000000000007ce0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
0000000000007ce3         mov        rsi, r14
0000000000007ce6         mov        edi, r13d
0000000000007ce9         call       qword [r12+rbx*8]
0000000000007ced         add        rbx, 0x1
0000000000007cf1         cmp        rbp, rbx
0000000000007cf4         jne        loc_7ce0

                     loc_7cf6:
0000000000007cf6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
0000000000007cfa         pop        rbx
0000000000007cfb         pop        rbp
0000000000007cfc         pop        r12
0000000000007cfe         pop        r13
0000000000007d00         pop        r14
0000000000007d02         pop        r15
0000000000007d04         ret
                        ; endp
0000000000007d05         align      16                                          ; End of unwind block (FDE at 0xa3cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
0000000000007d10         ret                                                    ; Begin of unwind block (FDE at 0xa414), DATA XREF=_start+15
                        ; endp
0000000000007d12         align      32                                          ; End of unwind block (FDE at 0xa414)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
0000000000007d20         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xa42c), __dso_handle, CODE XREF=main+84
0000000000007d27         xor        esi, esi
0000000000007d29         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
0000000000007d2e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xa42c)
0000000000007d2f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x7d30; 0x7d39[ (9 bytes)
        ; File offset : [32048; 32057[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
0000000000007d30         sub        rsp, 0x8
0000000000007d34         add        rsp, 0x8
0000000000007d38         ret
                        ; endp
0000000000007d39         db  0x00 ; '.'
0000000000007d3a         db  0x00 ; '.'
0000000000007d3b         db  0x00 ; '.'
0000000000007d3c         db  0x00 ; '.'
0000000000007d3d         db  0x00 ; '.'
0000000000007d3e         db  0x00 ; '.'
0000000000007d3f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x7d40; 0x951c[ (6108 bytes)
        ; File offset : [32064; 38172[ (6108 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
0000000000007d40         db  0x01 ; '.'
0000000000007d41         db  0x00 ; '.'
0000000000007d42         db  0x02 ; '.'
0000000000007d43         db  0x00 ; '.'
0000000000007d44         db  0x21 ; '!'                                         ; DATA XREF=binop+39, binary_operator+153
0000000000007d45         db  0x3d ; '='                                         ; DATA XREF=binop+3
0000000000007d46         db  0x00 ; '.'
0000000000007d47         db  0x3d ; '='                                         ; DATA XREF=binop+70
0000000000007d48         db  0x3d ; '='
0000000000007d49         db  0x00 ; '.'
0000000000007d4a         db  0x2d ; '-'                                         ; DATA XREF=binop+101
0000000000007d4b         db  0x6e ; 'n'
0000000000007d4c         db  0x74 ; 't'
0000000000007d4d         db  0x00 ; '.'
0000000000007d4e         db  0x2d ; '-'                                         ; DATA XREF=binop+132
0000000000007d4f         db  0x6f ; 'o'
0000000000007d50         db  0x74 ; 't'
0000000000007d51         db  0x00 ; '.'
0000000000007d52         db  0x2d ; '-'                                         ; DATA XREF=binop+163
0000000000007d53         db  0x65 ; 'e'
0000000000007d54         db  0x66 ; 'f'
0000000000007d55         db  0x00 ; '.'
0000000000007d56         db  0x2d ; '-'                                         ; DATA XREF=binop+194
0000000000007d57         db  0x65 ; 'e'
0000000000007d58         db  0x71 ; 'q'
0000000000007d59         db  0x00 ; '.'
0000000000007d5a         db  0x2d ; '-'                                         ; DATA XREF=binop+225
0000000000007d5b         db  0x6e ; 'n'
0000000000007d5c         db  0x65 ; 'e'
0000000000007d5d         db  0x00 ; '.'
0000000000007d5e         db  0x2d ; '-'                                         ; DATA XREF=binop+252
0000000000007d5f         db  0x6c ; 'l'
0000000000007d60         db  0x74 ; 't'
0000000000007d61         db  0x00 ; '.'
0000000000007d62         db  0x2d ; '-'                                         ; DATA XREF=binop+279
0000000000007d63         db  0x6c ; 'l'
0000000000007d64         db  0x65 ; 'e'
0000000000007d65         db  0x00 ; '.'
0000000000007d66         db  0x2d ; '-'                                         ; DATA XREF=binop+306
0000000000007d67         db  0x67 ; 'g'
0000000000007d68         db  0x74 ; 't'
0000000000007d69         db  0x00 ; '.'
0000000000007d6a         db  0x2d ; '-'                                         ; DATA XREF=binop+333
0000000000007d6b         db  0x67 ; 'g'
0000000000007d6c         db  0x65 ; 'e'
0000000000007d6d         db  0x00 ; '.'
                     aInvalidInteger:
0000000000007d6e         db         "invalid integer %s", 0                     ; DATA XREF=find_int+177
                     aMissingArgumen:
0000000000007d81         db         "missing argument after %s", 0              ; DATA XREF=beyond+25
                     aNtDoesNotAccep:
0000000000007d9b         db         "-nt does not accept -l", 0                 ; DATA XREF=binary_operator+1380
                     aEfDoesNotAccep:
0000000000007db2         db         "-ef does not accept -l", 0                 ; DATA XREF=binary_operator+1366
                     aOtDoesNotAccep:
0000000000007dc9         db         "-ot does not accept -l", 0                 ; DATA XREF=binary_operator+1330
                     aSUnknownBinary:
0000000000007de0         db         "%s: unknown binary operator", 0            ; DATA XREF=binary_operator+1074
                     aSUnaryOperator:
0000000000007dfc         db         "%s: unary operator expected", 0            ; DATA XREF=unary_operator+1419
0000000000007e18         db  0x21 ; '!'                                         ; DATA XREF=two_arguments+14, posixtest+47, three_arguments+55
0000000000007e19         db  0x00 ; '.'
0000000000007e1a         db  0x28 ; '('                                         ; DATA XREF=posixtest+232, three_arguments+120
0000000000007e1b         db  0x00 ; '.'
                     aSExpected:
0000000000007e1c         db         "%s expected", 0                            ; DATA XREF=or+950
                     aSExpectedFound:
0000000000007e28         db         "%s expected, found %s", 0                  ; DATA XREF=or+900
0000000000007e3e         db  0x2d ; '-'                                         ; DATA XREF=or+48, three_arguments+200
0000000000007e3f         db  0x61 ; 'a'
0000000000007e40         db  0x00 ; '.'
0000000000007e41         db  0x2d ; '-'                                         ; DATA XREF=or+702, three_arguments+226
0000000000007e42         db  0x6f ; 'o'
0000000000007e43         db  0x00 ; '.'
                     aSBinaryOperato:
0000000000007e44         db         "%s: binary operator expected", 0           ; DATA XREF=three_arguments+288
0000000000007e61         db  0x74 ; 't'                                         ; DATA XREF=usage+739, usage+1052, usage+1236, usage+1255, usage+1289
0000000000007e62         db  0x65 ; 'e'
0000000000007e63         db  0x73 ; 's'
0000000000007e64         db  0x74 ; 't'
0000000000007e65         db  0x00 ; '.'
                     aTestAndor:
0000000000007e66         db         "test and/or [", 0                          ; DATA XREF=usage+685
                     aTestInvocation:
0000000000007e74         db         "test invocation", 0                        ; DATA XREF=usage+790
                     aMulticallInvoc:
0000000000007e84         db         "Multi-call invocation", 0                  ; DATA XREF=usage+838
                     aSha224sum:
0000000000007e9a         db         "sha224sum", 0                              ; DATA XREF=usage+855
                     aSha2Utilities:
0000000000007ea4         db         "sha2 utilities", 0                         ; DATA XREF=usage+867
                     aSha256sum:
0000000000007eb3         db         "sha256sum", 0                              ; DATA XREF=usage+758
                     aSha384sum:
0000000000007ebd         db         "sha384sum", 0                              ; DATA XREF=usage+802
                     aSha512sum:
0000000000007ec7         db         "sha512sum", 0                              ; DATA XREF=usage+826
                     aNsOnlineHelpSn:
0000000000007ed1         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+938
0000000000007ee8         db  0x47 ; 'G'                                         ; DATA XREF=usage+966, usage+1159
0000000000007ee9         db  0x4e ; 'N'
0000000000007eea         db  0x55 ; 'U'
0000000000007eeb         db  0x20 ; ' '
                     aCoreutils:
0000000000007eec         db         "coreutils", 0                              ; DATA XREF=main+43, main+55, usage+814
0000000000007ef6         db  0x65 ; 'e'                                         ; DATA XREF=usage+1005, usage+1198
0000000000007ef7         db  0x6e ; 'n'
0000000000007ef8         db  0x5f ; '_'
0000000000007ef9         db  0x00 ; '.'
                     aFullDocumentat:
0000000000007efa         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+1033, usage+1222
                     aUsrlocalsharel:
0000000000007f15         db         "/usr/local/share/locale", 0                ; DATA XREF=main+36
                     aExtraArgumentS:
0000000000007f2d         db         "extra argument %s", 0                      ; DATA XREF=main+176
0000000000007f3f         align      64
                     switch_table_7f40:        // switch_table
0000000000007f40         dd         unary_operator.loc_25f0-switch_table_7f40, 4 dup (unary_operator.loc_2666-switch_table_7f40), unary_operator.loc_25a8-switch_table_7f40, unary_operator.loc_2666-switch_table_7f40 ; switch table used at 0x212e containing 52 entries, DATA XREF=unary_operator+61
0000000000007f5c         dd         unary_operator.loc_2550-switch_table_7f40, unary_operator.loc_2520-switch_table_7f40, 3 dup (unary_operator.loc_2666-switch_table_7f40), unary_operator.loc_24e0-switch_table_7f40
0000000000007f74         dd         14 dup (unary_operator.loc_2666-switch_table_7f40), unary_operator.loc_24a0-switch_table_7f40, unary_operator.loc_2460-switch_table_7f40, unary_operator.loc_2420-switch_table_7f40
0000000000007fb8         dd         unary_operator.loc_23f0-switch_table_7f40, unary_operator.loc_23b0-switch_table_7f40, unary_operator.loc_2370-switch_table_7f40, unary_operator.loc_25a8-switch_table_7f40
0000000000007fc8         dd         2 dup (unary_operator.loc_2666-switch_table_7f40), unary_operator.loc_2330-switch_table_7f40, 2 dup (unary_operator.loc_2666-switch_table_7f40), unary_operator.loc_2310-switch_table_7f40
0000000000007fe0         dd         unary_operator.loc_2666-switch_table_7f40, unary_operator.loc_22c8-switch_table_7f40, unary_operator.loc_2666-switch_table_7f40, unary_operator.loc_22a0-switch_table_7f40
0000000000007ff0         dd         unary_operator.loc_2268-switch_table_7f40, unary_operator.loc_21d8-switch_table_7f40, unary_operator.loc_21a0-switch_table_7f40, unary_operator.loc_2666-switch_table_7f40
0000000000008000         dd         unary_operator.loc_2240-switch_table_7f40, unary_operator.loc_2178-switch_table_7f40, unary_operator.loc_2666-switch_table_7f40, unary_operator.loc_2130-switch_table_7f40 ; DATA XREF=unary_operator+771
                     aTrySHelpForMor:
0000000000008010         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+35
0000000000008037         align      8
                     aUsageTestExpre:
0000000000008038         db         "Usage: test EXPRESSION\n  or:  test\n  or:  [ EXPRESSION ]\n  or:  [ ]\n  or:  [ OPTION\n", 0 ; DATA XREF=usage+100
000000000000808d         align      16
                     aExitWithTheSta:
0000000000008090         db         "Exit with the status determined by EXPRESSION.\n\n", 0 ; DATA XREF=usage+137
00000000000080c1         align      8
                     aHelpDisplayThi:
00000000000080c8         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+174
00000000000080f5         align      8
                     aVersionOutputV:
00000000000080f8         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+211
000000000000812e         align      16
                     aNanOmittedExpr:
0000000000008130         db         "\nAn omitted EXPRESSION defaults to false.  Otherwise,\nEXPRESSION is true or false and sets exit status.  It is one of:\n", 0 ; DATA XREF=usage+248
                     aNExpressionExp:
00000000000081a8         db         "\n  ( EXPRESSION )               EXPRESSION is true\n  ! EXPRESSION                 EXPRESSION is false\n  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 are true\n  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 is true\n", 0 ; DATA XREF=usage+285
00000000000082a1         align      8
                     aNNStringTheLen:
00000000000082a8         db         "\n  -n STRING            the length of STRING is nonzero\n  STRING               equivalent to -n STRING\n  -z STRING            the length of STRING is zero\n  STRING1 = STRING2    the strings are equal\n  STRING1 != STRING2   the strings are not equal\n", 0 ; DATA XREF=usage+322
00000000000083a2         align      8
                     aNInteger1EqInt:
00000000000083a8         db         "\n  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2\n  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER2\n  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2\n  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER" ; DATA XREF=usage+359
00000000000084a8         db         "2\n  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2\n  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2\n", 0
                     aNFile1EfFile2F:
0000000000008520         db         "\n  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inode numbers\n  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2\n  FILE1 -ot FILE2   FILE1 is older than FILE2\n", 0 ; DATA XREF=usage+396
00000000000085dd         align      32
                     aNBFileFileExis:
00000000000085e0         db         "\n  -b FILE     FILE exists and is block special\n  -c FILE     FILE exists and is character special\n  -d FILE     FILE exists and is a directory\n  -e FILE     FILE exists\n", 0 ; DATA XREF=usage+433
000000000000868b         align      16
                     aFFileFileExist:
0000000000008690         db         "  -f FILE     FILE exists and is a regular file\n  -g FILE     FILE exists and is set-group-ID\n  -G FILE     FILE exists and is owned by the effective group ID\n  -h FILE     FILE exists and is a symbolic link (same as -L)\n  -k FILE     FILE exists and has i" ; DATA XREF=usage+470
0000000000008790         db         "ts sticky bit set\n", 0
00000000000087a3         align      8
                     aLFileFileExist:
00000000000087a8         db         "  -L FILE     FILE exists and is a symbolic link (same as -h)\n  -N FILE     FILE exists and has been modified since it was last read\n  -O FILE     FILE exists and is owned by the effective user ID\n  -p FILE     FILE exists and is a named pipe\n  -r FILE    " ; DATA XREF=usage+507
00000000000088a8         db         " FILE exists and read permission is granted\n  -s FILE     FILE exists and has a size greater than zero\n", 0
                     aSFileFileExist:
0000000000008910         db         "  -S FILE     FILE exists and is a socket\n  -t FD       file descriptor FD is opened on a terminal\n  -u FILE     FILE exists and its set-user-ID bit is set\n  -w FILE     FILE exists and write permission is granted\n  -x FILE     FILE exists and execute (or " ; DATA XREF=usage+544
0000000000008a10         db         "search) permission is granted\n", 0
0000000000008a2f         align      16
                     aNexceptForHAnd:
0000000000008a30         db         "\nExcept for -h and -L, all FILE-related tests dereference symbolic links.\nBeware that parentheses need to be escaped (e.g., by backslashes) for shells.\nINTEGER may also be -l STRING, which evaluates to the length of STRING.\n", 0 ; DATA XREF=usage+581
0000000000008b11         align      8
                     aNnoteBinaryAAn:
0000000000008b18         db         "\nNOTE: Binary -a and -o are inherently ambiguous.  Use 'test EXPR1 && test\nEXPR2' or 'test EXPR1 || test EXPR2' instead.\n", 0 ; DATA XREF=usage+618
0000000000008b92         align      8
                     aNnoteHonorsThe:
0000000000008b98         db         "\nNOTE: [ honors the --help and --version options, but test does not.\ntest treats each of those as it treats any other nonempty STRING.\n", 0 ; DATA XREF=usage+655
                     aNnoteYourShell:
0000000000008c20         db         "\nNOTE: your shell may have its own version of %s, which usually supersedes\nthe version described here.  Please refer to your shell's documentation\nfor details about the options it supports.\n", 0 ; DATA XREF=usage+704
0000000000008cdf         align      32
                     aHttpswwwgnuorg:
0000000000008ce0         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+959, usage+1059, usage+1152, usage+1262
                     aReportAnyTrans:
0000000000008d08         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1303
0000000000008d4f         align      16
                     aOrAvailableLoc:
0000000000008d50         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+1102
                     aWriteError:
0000000000008d83         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
0000000000008d8f         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
0000000000008d96         align      8
                     aANullArgv0WasP:
0000000000008d98         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000008dd0         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000008dd8         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000008dd9         db  0x74 ; 't'
0000000000008dda         db  0x2d ; '-'
0000000000008ddb         db  0x00 ; '.'
0000000000008ddc         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000008ddd         db  0x80 ; '.'
0000000000008dde         db  0x98 ; '.'
0000000000008ddf         db  0x00 ; '.'
0000000000008de0         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000008de1         db  0x80 ; '.'
0000000000008de2         db  0x99 ; '.'
0000000000008de3         db  0x00 ; '.'
0000000000008de4         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
0000000000008de5         db  0x07 ; '.'
0000000000008de6         db  0x65 ; 'e'
0000000000008de7         db  0x00 ; '.'
0000000000008de8         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
0000000000008de9         db  0xaf ; '.'
0000000000008dea         db  0x00 ; '.'
0000000000008deb         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_3cd0+1451, sub_3cd0+1493, sub_3cd0+2429
0000000000008dec         db  0x00 ; '.'
0000000000008ded         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_3cd0+132, sub_3cd0+1338, sub_3cd0+1670, sub_3cd0+1697, sub_3cd0+2352
0000000000008dee         db  0x00 ; '.'
0000000000008def         db  0x60 ; '`'                                         ; DATA XREF=sub_3cd0+1627, sub_3cd0+1654
0000000000008df0         db  0x00 ; '.'
                     aLiteral:
0000000000008df1         db         "literal", 0
                     aShell:
0000000000008df9         db         "shell", 0
                     aShellalways:
0000000000008dff         db         "shell-always", 0
0000000000008e0c         db  0x73 ; 's'
0000000000008e0d         db  0x68 ; 'h'
0000000000008e0e         db  0x65 ; 'e'
0000000000008e0f         db  0x6c ; 'l'
0000000000008e10         db  0x6c ; 'l'
0000000000008e11         db  0x2d ; '-'
                     aEscape:
0000000000008e12         db         "escape", 0
                     aShellescapealw:
0000000000008e19         db         "shell-escape-always", 0
0000000000008e2d         db  0x63 ; 'c'
0000000000008e2e         db  0x00 ; '.'
                     aCmaybe:
0000000000008e2f         db         "c-maybe", 0
                     aClocale:
0000000000008e37         db         "clocale", 0
0000000000008e3f         align      64
                     switch_table_8e40:        // switch_table
0000000000008e40         dd         quotearg_buffer_restyled.loc_43ca-switch_table_8e40, quotearg_buffer_restyled.loc_3623-switch_table_8e40, quotearg_buffer_restyled.loc_45f8-switch_table_8e40, quotearg_buffer_restyled.loc_4404-switch_table_8e40 ; switch table used at 0x3621 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000008e50         dd         quotearg_buffer_restyled.loc_41f4-switch_table_8e40, quotearg_buffer_restyled.loc_4250-switch_table_8e40, quotearg_buffer_restyled.loc_42a5-switch_table_8e40, quotearg_buffer_restyled.loc_42ea-switch_table_8e40
0000000000008e60         dd         3 dup (quotearg_buffer_restyled.loc_4324-switch_table_8e40)
0000000000008e6c         db  0x34 ; '4'                                         ; DATA XREF=quotearg_buffer_restyled+477
0000000000008e6d         db  0xab ; '.'
0000000000008e6e         db  0xff ; '.'
0000000000008e6f         db  0xff ; '.'
0000000000008e70         db  0x1c ; '.'
0000000000008e71         db  0xac ; '.'
0000000000008e72         db  0xff ; '.'
0000000000008e73         db  0xff ; '.'
0000000000008e74         db  0x1c ; '.'
0000000000008e75         db  0xac ; '.'
0000000000008e76         db  0xff ; '.'
0000000000008e77         db  0xff ; '.'
0000000000008e78         db  0x1c ; '.'
0000000000008e79         db  0xac ; '.'
0000000000008e7a         db  0xff ; '.'
0000000000008e7b         db  0xff ; '.'
0000000000008e7c         db  0x1c ; '.'
0000000000008e7d         db  0xac ; '.'
0000000000008e7e         db  0xff ; '.'
0000000000008e7f         db  0xff ; '.'
0000000000008e80         db  0x1c ; '.'
0000000000008e81         db  0xac ; '.'
0000000000008e82         db  0xff ; '.'
0000000000008e83         db  0xff ; '.'
0000000000008e84         db  0x1c ; '.'
0000000000008e85         db  0xac ; '.'
0000000000008e86         db  0xff ; '.'
0000000000008e87         db  0xff ; '.'
0000000000008e88         db  0x74 ; 't'
0000000000008e89         db  0xab ; '.'
0000000000008e8a         db  0xff ; '.'
0000000000008e8b         db  0xff ; '.'
0000000000008e8c         db  0x7c ; '|'
0000000000008e8d         db  0xaa ; '.'
0000000000008e8e         db  0xff ; '.'
0000000000008e8f         db  0xff ; '.'
0000000000008e90         db  0x3c ; '<'
0000000000008e91         db  0xaa ; '.'
0000000000008e92         db  0xff ; '.'
0000000000008e93         db  0xff ; '.'
0000000000008e94         db  0x04 ; '.'
0000000000008e95         db  0xac ; '.'
0000000000008e96         db  0xff ; '.'
0000000000008e97         db  0xff ; '.'
0000000000008e98         db  0xf4 ; '.'
0000000000008e99         db  0xab ; '.'
0000000000008e9a         db  0xff ; '.'
0000000000008e9b         db  0xff ; '.'
0000000000008e9c         db  0xe4 ; '.'
0000000000008e9d         db  0xab ; '.'
0000000000008e9e         db  0xff ; '.'
0000000000008e9f         db  0xff ; '.'
0000000000008ea0         db  0xd4 ; '.'
0000000000008ea1         db  0xab ; '.'
0000000000008ea2         db  0xff ; '.'
0000000000008ea3         db  0xff ; '.'
0000000000008ea4         db  0x1c ; '.'
0000000000008ea5         db  0xac ; '.'
0000000000008ea6         db  0xff ; '.'
0000000000008ea7         db  0xff ; '.'
0000000000008ea8         db  0x1c ; '.'
0000000000008ea9         db  0xac ; '.'
0000000000008eaa         db  0xff ; '.'
0000000000008eab         db  0xff ; '.'
0000000000008eac         db  0x1c ; '.'
0000000000008ead         db  0xac ; '.'
0000000000008eae         db  0xff ; '.'
0000000000008eaf         db  0xff ; '.'
0000000000008eb0         db  0x1c ; '.'
0000000000008eb1         db  0xac ; '.'
0000000000008eb2         db  0xff ; '.'
0000000000008eb3         db  0xff ; '.'
0000000000008eb4         db  0x1c ; '.'
0000000000008eb5         db  0xac ; '.'
0000000000008eb6         db  0xff ; '.'
0000000000008eb7         db  0xff ; '.'
0000000000008eb8         db  0x1c ; '.'
0000000000008eb9         db  0xac ; '.'
0000000000008eba         db  0xff ; '.'
0000000000008ebb         db  0xff ; '.'
0000000000008ebc         db  0x1c ; '.'
0000000000008ebd         db  0xac ; '.'
0000000000008ebe         db  0xff ; '.'
0000000000008ebf         db  0xff ; '.'
0000000000008ec0         db  0x1c ; '.'
0000000000008ec1         db  0xac ; '.'
0000000000008ec2         db  0xff ; '.'
0000000000008ec3         db  0xff ; '.'
0000000000008ec4         db  0x1c ; '.'
0000000000008ec5         db  0xac ; '.'
0000000000008ec6         db  0xff ; '.'
0000000000008ec7         db  0xff ; '.'
0000000000008ec8         db  0x1c ; '.'
0000000000008ec9         db  0xac ; '.'
0000000000008eca         db  0xff ; '.'
0000000000008ecb         db  0xff ; '.'
0000000000008ecc         db  0x1c ; '.'
0000000000008ecd         db  0xac ; '.'
0000000000008ece         db  0xff ; '.'
0000000000008ecf         db  0xff ; '.'
0000000000008ed0         db  0x1c ; '.'
0000000000008ed1         db  0xac ; '.'
0000000000008ed2         db  0xff ; '.'
0000000000008ed3         db  0xff ; '.'
0000000000008ed4         db  0x1c ; '.'
0000000000008ed5         db  0xac ; '.'
0000000000008ed6         db  0xff ; '.'
0000000000008ed7         db  0xff ; '.'
0000000000008ed8         db  0x1c ; '.'
0000000000008ed9         db  0xac ; '.'
0000000000008eda         db  0xff ; '.'
0000000000008edb         db  0xff ; '.'
0000000000008edc         db  0x1c ; '.'
0000000000008edd         db  0xac ; '.'
0000000000008ede         db  0xff ; '.'
0000000000008edf         db  0xff ; '.'
0000000000008ee0         db  0x1c ; '.'
0000000000008ee1         db  0xac ; '.'
0000000000008ee2         db  0xff ; '.'
0000000000008ee3         db  0xff ; '.'
0000000000008ee4         db  0x1c ; '.'
0000000000008ee5         db  0xac ; '.'
0000000000008ee6         db  0xff ; '.'
0000000000008ee7         db  0xff ; '.'
0000000000008ee8         db  0x1c ; '.'
0000000000008ee9         db  0xac ; '.'
0000000000008eea         db  0xff ; '.'
0000000000008eeb         db  0xff ; '.'
0000000000008eec         db  0xc4 ; '.'
0000000000008eed         db  0xab ; '.'
0000000000008eee         db  0xff ; '.'
0000000000008eef         db  0xff ; '.'
0000000000008ef0         db  0xb4 ; '.'
0000000000008ef1         db  0xab ; '.'
0000000000008ef2         db  0xff ; '.'
0000000000008ef3         db  0xff ; '.'
0000000000008ef4         db  0xb4 ; '.'
0000000000008ef5         db  0xab ; '.'
0000000000008ef6         db  0xff ; '.'
0000000000008ef7         db  0xff ; '.'
0000000000008ef8         db  0x84 ; '.'
0000000000008ef9         db  0xab ; '.'
0000000000008efa         db  0xff ; '.'
0000000000008efb         db  0xff ; '.'
0000000000008efc         db  0xb4 ; '.'
0000000000008efd         db  0xab ; '.'
0000000000008efe         db  0xff ; '.'
0000000000008eff         db  0xff ; '.'
0000000000008f00         db  0x5c ; '\'
0000000000008f01         db  0xab ; '.'
0000000000008f02         db  0xff ; '.'
0000000000008f03         db  0xff ; '.'
0000000000008f04         db  0xb4 ; '.'
0000000000008f05         db  0xab ; '.'
0000000000008f06         db  0xff ; '.'
0000000000008f07         db  0xff ; '.'
0000000000008f08         db  0x17 ; '.'
0000000000008f09         db  0xaa ; '.'
0000000000008f0a         db  0xff ; '.'
0000000000008f0b         db  0xff ; '.'
0000000000008f0c         db  0xb4 ; '.'
0000000000008f0d         db  0xab ; '.'
0000000000008f0e         db  0xff ; '.'
0000000000008f0f         db  0xff ; '.'
0000000000008f10         db  0xb4 ; '.'
0000000000008f11         db  0xab ; '.'
0000000000008f12         db  0xff ; '.'
0000000000008f13         db  0xff ; '.'
0000000000008f14         db  0xb4 ; '.'
0000000000008f15         db  0xab ; '.'
0000000000008f16         db  0xff ; '.'
0000000000008f17         db  0xff ; '.'
0000000000008f18         db  0x5c ; '\'
0000000000008f19         db  0xab ; '.'
0000000000008f1a         db  0xff ; '.'
0000000000008f1b         db  0xff ; '.'
0000000000008f1c         db  0x5c ; '\'
0000000000008f1d         db  0xab ; '.'
0000000000008f1e         db  0xff ; '.'
0000000000008f1f         db  0xff ; '.'
0000000000008f20         db  0x5c ; '\'
0000000000008f21         db  0xab ; '.'
0000000000008f22         db  0xff ; '.'
0000000000008f23         db  0xff ; '.'
0000000000008f24         db  0x5c ; '\'
0000000000008f25         db  0xab ; '.'
0000000000008f26         db  0xff ; '.'
0000000000008f27         db  0xff ; '.'
0000000000008f28         db  0x5c ; '\'
0000000000008f29         db  0xab ; '.'
0000000000008f2a         db  0xff ; '.'
0000000000008f2b         db  0xff ; '.'
0000000000008f2c         db  0x5c ; '\'
0000000000008f2d         db  0xab ; '.'
0000000000008f2e         db  0xff ; '.'
0000000000008f2f         db  0xff ; '.'
0000000000008f30         db  0x5c ; '\'
0000000000008f31         db  0xab ; '.'
0000000000008f32         db  0xff ; '.'
0000000000008f33         db  0xff ; '.'
0000000000008f34         db  0x5c ; '\'
0000000000008f35         db  0xab ; '.'
0000000000008f36         db  0xff ; '.'
0000000000008f37         db  0xff ; '.'
0000000000008f38         db  0x5c ; '\'
0000000000008f39         db  0xab ; '.'
0000000000008f3a         db  0xff ; '.'
0000000000008f3b         db  0xff ; '.'
0000000000008f3c         db  0x5c ; '\'
0000000000008f3d         db  0xab ; '.'
0000000000008f3e         db  0xff ; '.'
0000000000008f3f         db  0xff ; '.'
0000000000008f40         db  0x5c ; '\'
0000000000008f41         db  0xab ; '.'
0000000000008f42         db  0xff ; '.'
0000000000008f43         db  0xff ; '.'
0000000000008f44         db  0x5c ; '\'
0000000000008f45         db  0xab ; '.'
0000000000008f46         db  0xff ; '.'
0000000000008f47         db  0xff ; '.'
0000000000008f48         db  0x5c ; '\'
0000000000008f49         db  0xab ; '.'
0000000000008f4a         db  0xff ; '.'
0000000000008f4b         db  0xff ; '.'
0000000000008f4c         db  0x5c ; '\'
0000000000008f4d         db  0xab ; '.'
0000000000008f4e         db  0xff ; '.'
0000000000008f4f         db  0xff ; '.'
0000000000008f50         db  0x5c ; '\'
0000000000008f51         db  0xab ; '.'
0000000000008f52         db  0xff ; '.'
0000000000008f53         db  0xff ; '.'
0000000000008f54         db  0x5c ; '\'
0000000000008f55         db  0xab ; '.'
0000000000008f56         db  0xff ; '.'
0000000000008f57         db  0xff ; '.'
0000000000008f58         db  0xb4 ; '.'
0000000000008f59         db  0xab ; '.'
0000000000008f5a         db  0xff ; '.'
0000000000008f5b         db  0xff ; '.'
0000000000008f5c         db  0xb4 ; '.'
0000000000008f5d         db  0xab ; '.'
0000000000008f5e         db  0xff ; '.'
0000000000008f5f         db  0xff ; '.'
0000000000008f60         db  0xb4 ; '.'
0000000000008f61         db  0xab ; '.'
0000000000008f62         db  0xff ; '.'
0000000000008f63         db  0xff ; '.'
0000000000008f64         db  0xb4 ; '.'
0000000000008f65         db  0xab ; '.'
0000000000008f66         db  0xff ; '.'
0000000000008f67         db  0xff ; '.'
0000000000008f68         db  0xe7 ; '.'
0000000000008f69         db  0xa9 ; '.'
0000000000008f6a         db  0xff ; '.'
0000000000008f6b         db  0xff ; '.'
0000000000008f6c         db  0x1c ; '.'
0000000000008f6d         db  0xac ; '.'
0000000000008f6e         db  0xff ; '.'
0000000000008f6f         db  0xff ; '.'
0000000000008f70         db  0x5c ; '\'
0000000000008f71         db  0xab ; '.'
0000000000008f72         db  0xff ; '.'
0000000000008f73         db  0xff ; '.'
0000000000008f74         db  0x5c ; '\'
0000000000008f75         db  0xab ; '.'
0000000000008f76         db  0xff ; '.'
0000000000008f77         db  0xff ; '.'
0000000000008f78         db  0x5c ; '\'
0000000000008f79         db  0xab ; '.'
0000000000008f7a         db  0xff ; '.'
0000000000008f7b         db  0xff ; '.'
0000000000008f7c         db  0x5c ; '\'
0000000000008f7d         db  0xab ; '.'
0000000000008f7e         db  0xff ; '.'
0000000000008f7f         db  0xff ; '.'
0000000000008f80         db  0x5c ; '\'
0000000000008f81         db  0xab ; '.'
0000000000008f82         db  0xff ; '.'
0000000000008f83         db  0xff ; '.'
0000000000008f84         db  0x5c ; '\'
0000000000008f85         db  0xab ; '.'
0000000000008f86         db  0xff ; '.'
0000000000008f87         db  0xff ; '.'
0000000000008f88         db  0x5c ; '\'
0000000000008f89         db  0xab ; '.'
0000000000008f8a         db  0xff ; '.'
0000000000008f8b         db  0xff ; '.'
0000000000008f8c         db  0x5c ; '\'
0000000000008f8d         db  0xab ; '.'
0000000000008f8e         db  0xff ; '.'
0000000000008f8f         db  0xff ; '.'
0000000000008f90         db  0x5c ; '\'
0000000000008f91         db  0xab ; '.'
0000000000008f92         db  0xff ; '.'
0000000000008f93         db  0xff ; '.'
0000000000008f94         db  0x5c ; '\'
0000000000008f95         db  0xab ; '.'
0000000000008f96         db  0xff ; '.'
0000000000008f97         db  0xff ; '.'
0000000000008f98         db  0x5c ; '\'
0000000000008f99         db  0xab ; '.'
0000000000008f9a         db  0xff ; '.'
0000000000008f9b         db  0xff ; '.'
0000000000008f9c         db  0x5c ; '\'
0000000000008f9d         db  0xab ; '.'
0000000000008f9e         db  0xff ; '.'
0000000000008f9f         db  0xff ; '.'
0000000000008fa0         db  0x5c ; '\'
0000000000008fa1         db  0xab ; '.'
0000000000008fa2         db  0xff ; '.'
0000000000008fa3         db  0xff ; '.'
0000000000008fa4         db  0x5c ; '\'
0000000000008fa5         db  0xab ; '.'
0000000000008fa6         db  0xff ; '.'
0000000000008fa7         db  0xff ; '.'
0000000000008fa8         db  0x5c ; '\'
0000000000008fa9         db  0xab ; '.'
0000000000008faa         db  0xff ; '.'
0000000000008fab         db  0xff ; '.'
0000000000008fac         db  0x5c ; '\'
0000000000008fad         db  0xab ; '.'
0000000000008fae         db  0xff ; '.'
0000000000008faf         db  0xff ; '.'
0000000000008fb0         db  0x5c ; '\'
0000000000008fb1         db  0xab ; '.'
0000000000008fb2         db  0xff ; '.'
0000000000008fb3         db  0xff ; '.'
0000000000008fb4         db  0x5c ; '\'
0000000000008fb5         db  0xab ; '.'
0000000000008fb6         db  0xff ; '.'
0000000000008fb7         db  0xff ; '.'
0000000000008fb8         db  0x5c ; '\'
0000000000008fb9         db  0xab ; '.'
0000000000008fba         db  0xff ; '.'
0000000000008fbb         db  0xff ; '.'
0000000000008fbc         db  0x5c ; '\'
0000000000008fbd         db  0xab ; '.'
0000000000008fbe         db  0xff ; '.'
0000000000008fbf         db  0xff ; '.'
0000000000008fc0         db  0x5c ; '\'
0000000000008fc1         db  0xab ; '.'
0000000000008fc2         db  0xff ; '.'
0000000000008fc3         db  0xff ; '.'
0000000000008fc4         db  0x5c ; '\'
0000000000008fc5         db  0xab ; '.'
0000000000008fc6         db  0xff ; '.'
0000000000008fc7         db  0xff ; '.'
0000000000008fc8         db  0x5c ; '\'
0000000000008fc9         db  0xab ; '.'
0000000000008fca         db  0xff ; '.'
0000000000008fcb         db  0xff ; '.'
0000000000008fcc         db  0x5c ; '\'
0000000000008fcd         db  0xab ; '.'
0000000000008fce         db  0xff ; '.'
0000000000008fcf         db  0xff ; '.'
0000000000008fd0         db  0x5c ; '\'
0000000000008fd1         db  0xab ; '.'
0000000000008fd2         db  0xff ; '.'
0000000000008fd3         db  0xff ; '.'
0000000000008fd4         db  0x5c ; '\'
0000000000008fd5         db  0xab ; '.'
0000000000008fd6         db  0xff ; '.'
0000000000008fd7         db  0xff ; '.'
0000000000008fd8         db  0xb4 ; '.'
0000000000008fd9         db  0xab ; '.'
0000000000008fda         db  0xff ; '.'
0000000000008fdb         db  0xff ; '.'
0000000000008fdc         db  0x8c ; '.'
0000000000008fdd         db  0xaa ; '.'
0000000000008fde         db  0xff ; '.'
0000000000008fdf         db  0xff ; '.'
0000000000008fe0         db  0x5c ; '\'
0000000000008fe1         db  0xab ; '.'
0000000000008fe2         db  0xff ; '.'
0000000000008fe3         db  0xff ; '.'
0000000000008fe4         db  0xb4 ; '.'
0000000000008fe5         db  0xab ; '.'
0000000000008fe6         db  0xff ; '.'
0000000000008fe7         db  0xff ; '.'
0000000000008fe8         db  0x5c ; '\'
0000000000008fe9         db  0xab ; '.'
0000000000008fea         db  0xff ; '.'
0000000000008feb         db  0xff ; '.'
0000000000008fec         db  0xb4 ; '.'
0000000000008fed         db  0xab ; '.'
0000000000008fee         db  0xff ; '.'
0000000000008fef         db  0xff ; '.'
0000000000008ff0         db  0x5c ; '\'
0000000000008ff1         db  0xab ; '.'
0000000000008ff2         db  0xff ; '.'
0000000000008ff3         db  0xff ; '.'
0000000000008ff4         db  0x5c ; '\'
0000000000008ff5         db  0xab ; '.'
0000000000008ff6         db  0xff ; '.'
0000000000008ff7         db  0xff ; '.'
0000000000008ff8         db  0x5c ; '\'
0000000000008ff9         db  0xab ; '.'
0000000000008ffa         db  0xff ; '.'
0000000000008ffb         db  0xff ; '.'
0000000000008ffc         db  0x5c ; '\'
0000000000008ffd         db  0xab ; '.'
0000000000008ffe         db  0xff ; '.'
0000000000008fff         db  0xff ; '.'
0000000000009000         db  0x5c ; '\'
0000000000009001         db  0xab ; '.'
0000000000009002         db  0xff ; '.'
0000000000009003         db  0xff ; '.'
0000000000009004         db  0x5c ; '\'
0000000000009005         db  0xab ; '.'
0000000000009006         db  0xff ; '.'
0000000000009007         db  0xff ; '.'
0000000000009008         db  0x5c ; '\'
0000000000009009         db  0xab ; '.'
000000000000900a         db  0xff ; '.'
000000000000900b         db  0xff ; '.'
000000000000900c         db  0x5c ; '\'
000000000000900d         db  0xab ; '.'
000000000000900e         db  0xff ; '.'
000000000000900f         db  0xff ; '.'
0000000000009010         db  0x5c ; '\'
0000000000009011         db  0xab ; '.'
0000000000009012         db  0xff ; '.'
0000000000009013         db  0xff ; '.'
0000000000009014         db  0x5c ; '\'
0000000000009015         db  0xab ; '.'
0000000000009016         db  0xff ; '.'
0000000000009017         db  0xff ; '.'
0000000000009018         db  0x5c ; '\'
0000000000009019         db  0xab ; '.'
000000000000901a         db  0xff ; '.'
000000000000901b         db  0xff ; '.'
000000000000901c         db  0x5c ; '\'
000000000000901d         db  0xab ; '.'
000000000000901e         db  0xff ; '.'
000000000000901f         db  0xff ; '.'
0000000000009020         db  0x5c ; '\'
0000000000009021         db  0xab ; '.'
0000000000009022         db  0xff ; '.'
0000000000009023         db  0xff ; '.'
0000000000009024         db  0x5c ; '\'
0000000000009025         db  0xab ; '.'
0000000000009026         db  0xff ; '.'
0000000000009027         db  0xff ; '.'
0000000000009028         db  0x5c ; '\'
0000000000009029         db  0xab ; '.'
000000000000902a         db  0xff ; '.'
000000000000902b         db  0xff ; '.'
000000000000902c         db  0x5c ; '\'
000000000000902d         db  0xab ; '.'
000000000000902e         db  0xff ; '.'
000000000000902f         db  0xff ; '.'
0000000000009030         db  0x5c ; '\'
0000000000009031         db  0xab ; '.'
0000000000009032         db  0xff ; '.'
0000000000009033         db  0xff ; '.'
0000000000009034         db  0x5c ; '\'
0000000000009035         db  0xab ; '.'
0000000000009036         db  0xff ; '.'
0000000000009037         db  0xff ; '.'
0000000000009038         db  0x5c ; '\'
0000000000009039         db  0xab ; '.'
000000000000903a         db  0xff ; '.'
000000000000903b         db  0xff ; '.'
000000000000903c         db  0x5c ; '\'
000000000000903d         db  0xab ; '.'
000000000000903e         db  0xff ; '.'
000000000000903f         db  0xff ; '.'
0000000000009040         db  0x5c ; '\'
0000000000009041         db  0xab ; '.'
0000000000009042         db  0xff ; '.'
0000000000009043         db  0xff ; '.'
0000000000009044         db  0x5c ; '\'
0000000000009045         db  0xab ; '.'
0000000000009046         db  0xff ; '.'
0000000000009047         db  0xff ; '.'
0000000000009048         db  0x5c ; '\'
0000000000009049         db  0xab ; '.'
000000000000904a         db  0xff ; '.'
000000000000904b         db  0xff ; '.'
000000000000904c         db  0x5c ; '\'
000000000000904d         db  0xab ; '.'
000000000000904e         db  0xff ; '.'
000000000000904f         db  0xff ; '.'
0000000000009050         db  0x5c ; '\'
0000000000009051         db  0xab ; '.'
0000000000009052         db  0xff ; '.'
0000000000009053         db  0xff ; '.'
0000000000009054         db  0x5c ; '\'
0000000000009055         db  0xab ; '.'
0000000000009056         db  0xff ; '.'
0000000000009057         db  0xff ; '.'
0000000000009058         db  0x17 ; '.'
0000000000009059         db  0xa9 ; '.'
000000000000905a         db  0xff ; '.'
000000000000905b         db  0xff ; '.'
000000000000905c         db  0xb4 ; '.'
000000000000905d         db  0xab ; '.'
000000000000905e         db  0xff ; '.'
000000000000905f         db  0xff ; '.'
0000000000009060         db  0x17 ; '.'
0000000000009061         db  0xa9 ; '.'
0000000000009062         db  0xff ; '.'
0000000000009063         db  0xff ; '.'
0000000000009064         db  0x84 ; '.'
0000000000009065         db  0xab ; '.'
0000000000009066         db  0xff ; '.'
0000000000009067         db  0xff ; '.'
0000000000009068         db  0x08 ; '.'                                         ; DATA XREF=sub_3a70+137
0000000000009069         db  0xab ; '.'
000000000000906a         db  0xff ; '.'
000000000000906b         db  0xff ; '.'
000000000000906c         db  0x18 ; '.'
000000000000906d         db  0xaa ; '.'
000000000000906e         db  0xff ; '.'
000000000000906f         db  0xff ; '.'
0000000000009070         db  0x18 ; '.'
0000000000009071         db  0xaa ; '.'
0000000000009072         db  0xff ; '.'
0000000000009073         db  0xff ; '.'
0000000000009074         db  0x18 ; '.'
0000000000009075         db  0xaa ; '.'
0000000000009076         db  0xff ; '.'
0000000000009077         db  0xff ; '.'
0000000000009078         db  0x18 ; '.'
0000000000009079         db  0xaa ; '.'
000000000000907a         db  0xff ; '.'
000000000000907b         db  0xff ; '.'
000000000000907c         db  0x18 ; '.'
000000000000907d         db  0xaa ; '.'
000000000000907e         db  0xff ; '.'
000000000000907f         db  0xff ; '.'
0000000000009080         db  0x18 ; '.'
0000000000009081         db  0xaa ; '.'
0000000000009082         db  0xff ; '.'
0000000000009083         db  0xff ; '.'
0000000000009084         db  0xf8 ; '.'
0000000000009085         db  0xaa ; '.'
0000000000009086         db  0xff ; '.'
0000000000009087         db  0xff ; '.'
0000000000009088         db  0x48 ; 'H'
0000000000009089         db  0xac ; '.'
000000000000908a         db  0xff ; '.'
000000000000908b         db  0xff ; '.'
000000000000908c         db  0x30 ; '0'
000000000000908d         db  0xac ; '.'
000000000000908e         db  0xff ; '.'
000000000000908f         db  0xff ; '.'
0000000000009090         db  0xe0 ; '.'
0000000000009091         db  0xaa ; '.'
0000000000009092         db  0xff ; '.'
0000000000009093         db  0xff ; '.'
0000000000009094         db  0x20 ; ' '
0000000000009095         db  0xac ; '.'
0000000000009096         db  0xff ; '.'
0000000000009097         db  0xff ; '.'
0000000000009098         db  0xc8 ; '.'
0000000000009099         db  0xaa ; '.'
000000000000909a         db  0xff ; '.'
000000000000909b         db  0xff ; '.'
000000000000909c         db  0x08 ; '.'
000000000000909d         db  0xac ; '.'
000000000000909e         db  0xff ; '.'
000000000000909f         db  0xff ; '.'
00000000000090a0         db  0x18 ; '.'
00000000000090a1         db  0xaa ; '.'
00000000000090a2         db  0xff ; '.'
00000000000090a3         db  0xff ; '.'
00000000000090a4         db  0x18 ; '.'
00000000000090a5         db  0xaa ; '.'
00000000000090a6         db  0xff ; '.'
00000000000090a7         db  0xff ; '.'
00000000000090a8         db  0x18 ; '.'
00000000000090a9         db  0xaa ; '.'
00000000000090aa         db  0xff ; '.'
00000000000090ab         db  0xff ; '.'
00000000000090ac         db  0x18 ; '.'
00000000000090ad         db  0xaa ; '.'
00000000000090ae         db  0xff ; '.'
00000000000090af         db  0xff ; '.'
00000000000090b0         db  0x18 ; '.'
00000000000090b1         db  0xaa ; '.'
00000000000090b2         db  0xff ; '.'
00000000000090b3         db  0xff ; '.'
00000000000090b4         db  0x18 ; '.'
00000000000090b5         db  0xaa ; '.'
00000000000090b6         db  0xff ; '.'
00000000000090b7         db  0xff ; '.'
00000000000090b8         db  0x18 ; '.'
00000000000090b9         db  0xaa ; '.'
00000000000090ba         db  0xff ; '.'
00000000000090bb         db  0xff ; '.'
00000000000090bc         db  0x18 ; '.'
00000000000090bd         db  0xaa ; '.'
00000000000090be         db  0xff ; '.'
00000000000090bf         db  0xff ; '.'
00000000000090c0         db  0x18 ; '.'
00000000000090c1         db  0xaa ; '.'
00000000000090c2         db  0xff ; '.'
00000000000090c3         db  0xff ; '.'
00000000000090c4         db  0x18 ; '.'
00000000000090c5         db  0xaa ; '.'
00000000000090c6         db  0xff ; '.'
00000000000090c7         db  0xff ; '.'
00000000000090c8         db  0x18 ; '.'
00000000000090c9         db  0xaa ; '.'
00000000000090ca         db  0xff ; '.'
00000000000090cb         db  0xff ; '.'
00000000000090cc         db  0x18 ; '.'
00000000000090cd         db  0xaa ; '.'
00000000000090ce         db  0xff ; '.'
00000000000090cf         db  0xff ; '.'
00000000000090d0         db  0x18 ; '.'
00000000000090d1         db  0xaa ; '.'
00000000000090d2         db  0xff ; '.'
00000000000090d3         db  0xff ; '.'
00000000000090d4         db  0x18 ; '.'
00000000000090d5         db  0xaa ; '.'
00000000000090d6         db  0xff ; '.'
00000000000090d7         db  0xff ; '.'
00000000000090d8         db  0x18 ; '.'
00000000000090d9         db  0xaa ; '.'
00000000000090da         db  0xff ; '.'
00000000000090db         db  0xff ; '.'
00000000000090dc         db  0x18 ; '.'
00000000000090dd         db  0xaa ; '.'
00000000000090de         db  0xff ; '.'
00000000000090df         db  0xff ; '.'
00000000000090e0         db  0x18 ; '.'
00000000000090e1         db  0xaa ; '.'
00000000000090e2         db  0xff ; '.'
00000000000090e3         db  0xff ; '.'
00000000000090e4         db  0x18 ; '.'
00000000000090e5         db  0xaa ; '.'
00000000000090e6         db  0xff ; '.'
00000000000090e7         db  0xff ; '.'
00000000000090e8         db  0xf0 ; '.'
00000000000090e9         db  0xab ; '.'
00000000000090ea         db  0xff ; '.'
00000000000090eb         db  0xff ; '.'
00000000000090ec         db  0xd8 ; '.'
00000000000090ed         db  0xab ; '.'
00000000000090ee         db  0xff ; '.'
00000000000090ef         db  0xff ; '.'
00000000000090f0         db  0xd8 ; '.'
00000000000090f1         db  0xab ; '.'
00000000000090f2         db  0xff ; '.'
00000000000090f3         db  0xff ; '.'
00000000000090f4         db  0xc0 ; '.'
00000000000090f5         db  0xab ; '.'
00000000000090f6         db  0xff ; '.'
00000000000090f7         db  0xff ; '.'
00000000000090f8         db  0xd8 ; '.'
00000000000090f9         db  0xab ; '.'
00000000000090fa         db  0xff ; '.'
00000000000090fb         db  0xff ; '.'
00000000000090fc         db  0xa8 ; '.'
00000000000090fd         db  0xab ; '.'
00000000000090fe         db  0xff ; '.'
00000000000090ff         db  0xff ; '.'
0000000000009100         db  0xd8 ; '.'
0000000000009101         db  0xab ; '.'
0000000000009102         db  0xff ; '.'
0000000000009103         db  0xff ; '.'
0000000000009104         db  0x18 ; '.'
0000000000009105         db  0xa8 ; '.'
0000000000009106         db  0xff ; '.'
0000000000009107         db  0xff ; '.'
0000000000009108         db  0xd8 ; '.'
0000000000009109         db  0xab ; '.'
000000000000910a         db  0xff ; '.'
000000000000910b         db  0xff ; '.'
000000000000910c         db  0xd8 ; '.'
000000000000910d         db  0xab ; '.'
000000000000910e         db  0xff ; '.'
000000000000910f         db  0xff ; '.'
0000000000009110         db  0xd8 ; '.'
0000000000009111         db  0xab ; '.'
0000000000009112         db  0xff ; '.'
0000000000009113         db  0xff ; '.'
0000000000009114         db  0xa8 ; '.'
0000000000009115         db  0xab ; '.'
0000000000009116         db  0xff ; '.'
0000000000009117         db  0xff ; '.'
0000000000009118         db  0xa8 ; '.'
0000000000009119         db  0xab ; '.'
000000000000911a         db  0xff ; '.'
000000000000911b         db  0xff ; '.'
000000000000911c         db  0xa8 ; '.'
000000000000911d         db  0xab ; '.'
000000000000911e         db  0xff ; '.'
000000000000911f         db  0xff ; '.'
0000000000009120         db  0xa8 ; '.'
0000000000009121         db  0xab ; '.'
0000000000009122         db  0xff ; '.'
0000000000009123         db  0xff ; '.'
0000000000009124         db  0xa8 ; '.'
0000000000009125         db  0xab ; '.'
0000000000009126         db  0xff ; '.'
0000000000009127         db  0xff ; '.'
0000000000009128         db  0xa8 ; '.'
0000000000009129         db  0xab ; '.'
000000000000912a         db  0xff ; '.'
000000000000912b         db  0xff ; '.'
000000000000912c         db  0xa8 ; '.'
000000000000912d         db  0xab ; '.'
000000000000912e         db  0xff ; '.'
000000000000912f         db  0xff ; '.'
0000000000009130         db  0xa8 ; '.'
0000000000009131         db  0xab ; '.'
0000000000009132         db  0xff ; '.'
0000000000009133         db  0xff ; '.'
0000000000009134         db  0xa8 ; '.'
0000000000009135         db  0xab ; '.'
0000000000009136         db  0xff ; '.'
0000000000009137         db  0xff ; '.'
0000000000009138         db  0xa8 ; '.'
0000000000009139         db  0xab ; '.'
000000000000913a         db  0xff ; '.'
000000000000913b         db  0xff ; '.'
000000000000913c         db  0xa8 ; '.'
000000000000913d         db  0xab ; '.'
000000000000913e         db  0xff ; '.'
000000000000913f         db  0xff ; '.'
0000000000009140         db  0xa8 ; '.'
0000000000009141         db  0xab ; '.'
0000000000009142         db  0xff ; '.'
0000000000009143         db  0xff ; '.'
0000000000009144         db  0xa8 ; '.'
0000000000009145         db  0xab ; '.'
0000000000009146         db  0xff ; '.'
0000000000009147         db  0xff ; '.'
0000000000009148         db  0xa8 ; '.'
0000000000009149         db  0xab ; '.'
000000000000914a         db  0xff ; '.'
000000000000914b         db  0xff ; '.'
000000000000914c         db  0xa8 ; '.'
000000000000914d         db  0xab ; '.'
000000000000914e         db  0xff ; '.'
000000000000914f         db  0xff ; '.'
0000000000009150         db  0xa8 ; '.'
0000000000009151         db  0xab ; '.'
0000000000009152         db  0xff ; '.'
0000000000009153         db  0xff ; '.'
0000000000009154         db  0xd8 ; '.'
0000000000009155         db  0xab ; '.'
0000000000009156         db  0xff ; '.'
0000000000009157         db  0xff ; '.'
0000000000009158         db  0xd8 ; '.'
0000000000009159         db  0xab ; '.'
000000000000915a         db  0xff ; '.'
000000000000915b         db  0xff ; '.'
000000000000915c         db  0xd8 ; '.'
000000000000915d         db  0xab ; '.'
000000000000915e         db  0xff ; '.'
000000000000915f         db  0xff ; '.'
0000000000009160         db  0xd8 ; '.'
0000000000009161         db  0xab ; '.'
0000000000009162         db  0xff ; '.'
0000000000009163         db  0xff ; '.'
0000000000009164         db  0xe8 ; '.'
0000000000009165         db  0xa7 ; '.'
0000000000009166         db  0xff ; '.'
0000000000009167         db  0xff ; '.'
0000000000009168         db  0x18 ; '.'
0000000000009169         db  0xaa ; '.'
000000000000916a         db  0xff ; '.'
000000000000916b         db  0xff ; '.'
000000000000916c         db  0xa8 ; '.'
000000000000916d         db  0xab ; '.'
000000000000916e         db  0xff ; '.'
000000000000916f         db  0xff ; '.'
0000000000009170         db  0xa8 ; '.'
0000000000009171         db  0xab ; '.'
0000000000009172         db  0xff ; '.'
0000000000009173         db  0xff ; '.'
0000000000009174         db  0xa8 ; '.'
0000000000009175         db  0xab ; '.'
0000000000009176         db  0xff ; '.'
0000000000009177         db  0xff ; '.'
0000000000009178         db  0xa8 ; '.'
0000000000009179         db  0xab ; '.'
000000000000917a         db  0xff ; '.'
000000000000917b         db  0xff ; '.'
000000000000917c         db  0xa8 ; '.'
000000000000917d         db  0xab ; '.'
000000000000917e         db  0xff ; '.'
000000000000917f         db  0xff ; '.'
0000000000009180         db  0xa8 ; '.'
0000000000009181         db  0xab ; '.'
0000000000009182         db  0xff ; '.'
0000000000009183         db  0xff ; '.'
0000000000009184         db  0xa8 ; '.'
0000000000009185         db  0xab ; '.'
0000000000009186         db  0xff ; '.'
0000000000009187         db  0xff ; '.'
0000000000009188         db  0xa8 ; '.'
0000000000009189         db  0xab ; '.'
000000000000918a         db  0xff ; '.'
000000000000918b         db  0xff ; '.'
000000000000918c         db  0xa8 ; '.'
000000000000918d         db  0xab ; '.'
000000000000918e         db  0xff ; '.'
000000000000918f         db  0xff ; '.'
0000000000009190         db  0xa8 ; '.'
0000000000009191         db  0xab ; '.'
0000000000009192         db  0xff ; '.'
0000000000009193         db  0xff ; '.'
0000000000009194         db  0xa8 ; '.'
0000000000009195         db  0xab ; '.'
0000000000009196         db  0xff ; '.'
0000000000009197         db  0xff ; '.'
0000000000009198         db  0xa8 ; '.'
0000000000009199         db  0xab ; '.'
000000000000919a         db  0xff ; '.'
000000000000919b         db  0xff ; '.'
000000000000919c         db  0xa8 ; '.'
000000000000919d         db  0xab ; '.'
000000000000919e         db  0xff ; '.'
000000000000919f         db  0xff ; '.'
00000000000091a0         db  0xa8 ; '.'
00000000000091a1         db  0xab ; '.'
00000000000091a2         db  0xff ; '.'
00000000000091a3         db  0xff ; '.'
00000000000091a4         db  0xa8 ; '.'
00000000000091a5         db  0xab ; '.'
00000000000091a6         db  0xff ; '.'
00000000000091a7         db  0xff ; '.'
00000000000091a8         db  0xa8 ; '.'
00000000000091a9         db  0xab ; '.'
00000000000091aa         db  0xff ; '.'
00000000000091ab         db  0xff ; '.'
00000000000091ac         db  0xa8 ; '.'
00000000000091ad         db  0xab ; '.'
00000000000091ae         db  0xff ; '.'
00000000000091af         db  0xff ; '.'
00000000000091b0         db  0xa8 ; '.'
00000000000091b1         db  0xab ; '.'
00000000000091b2         db  0xff ; '.'
00000000000091b3         db  0xff ; '.'
00000000000091b4         db  0xa8 ; '.'
00000000000091b5         db  0xab ; '.'
00000000000091b6         db  0xff ; '.'
00000000000091b7         db  0xff ; '.'
00000000000091b8         db  0xa8 ; '.'
00000000000091b9         db  0xab ; '.'
00000000000091ba         db  0xff ; '.'
00000000000091bb         db  0xff ; '.'
00000000000091bc         db  0xa8 ; '.'
00000000000091bd         db  0xab ; '.'
00000000000091be         db  0xff ; '.'
00000000000091bf         db  0xff ; '.'
00000000000091c0         db  0xa8 ; '.'
00000000000091c1         db  0xab ; '.'
00000000000091c2         db  0xff ; '.'
00000000000091c3         db  0xff ; '.'
00000000000091c4         db  0xa8 ; '.'
00000000000091c5         db  0xab ; '.'
00000000000091c6         db  0xff ; '.'
00000000000091c7         db  0xff ; '.'
00000000000091c8         db  0xa8 ; '.'
00000000000091c9         db  0xab ; '.'
00000000000091ca         db  0xff ; '.'
00000000000091cb         db  0xff ; '.'
00000000000091cc         db  0xa8 ; '.'
00000000000091cd         db  0xab ; '.'
00000000000091ce         db  0xff ; '.'
00000000000091cf         db  0xff ; '.'
00000000000091d0         db  0xa8 ; '.'
00000000000091d1         db  0xab ; '.'
00000000000091d2         db  0xff ; '.'
00000000000091d3         db  0xff ; '.'
00000000000091d4         db  0xd8 ; '.'
00000000000091d5         db  0xab ; '.'
00000000000091d6         db  0xff ; '.'
00000000000091d7         db  0xff ; '.'
00000000000091d8         db  0xa8 ; '.'
00000000000091d9         db  0xaa ; '.'
00000000000091da         db  0xff ; '.'
00000000000091db         db  0xff ; '.'
00000000000091dc         db  0xa8 ; '.'
00000000000091dd         db  0xab ; '.'
00000000000091de         db  0xff ; '.'
00000000000091df         db  0xff ; '.'
00000000000091e0         db  0xd8 ; '.'
00000000000091e1         db  0xab ; '.'
00000000000091e2         db  0xff ; '.'
00000000000091e3         db  0xff ; '.'
00000000000091e4         db  0xa8 ; '.'
00000000000091e5         db  0xab ; '.'
00000000000091e6         db  0xff ; '.'
00000000000091e7         db  0xff ; '.'
00000000000091e8         db  0xd8 ; '.'
00000000000091e9         db  0xab ; '.'
00000000000091ea         db  0xff ; '.'
00000000000091eb         db  0xff ; '.'
00000000000091ec         db  0xa8 ; '.'
00000000000091ed         db  0xab ; '.'
00000000000091ee         db  0xff ; '.'
00000000000091ef         db  0xff ; '.'
00000000000091f0         db  0xa8 ; '.'
00000000000091f1         db  0xab ; '.'
00000000000091f2         db  0xff ; '.'
00000000000091f3         db  0xff ; '.'
00000000000091f4         db  0xa8 ; '.'
00000000000091f5         db  0xab ; '.'
00000000000091f6         db  0xff ; '.'
00000000000091f7         db  0xff ; '.'
00000000000091f8         db  0xa8 ; '.'
00000000000091f9         db  0xab ; '.'
00000000000091fa         db  0xff ; '.'
00000000000091fb         db  0xff ; '.'
00000000000091fc         db  0xa8 ; '.'
00000000000091fd         db  0xab ; '.'
00000000000091fe         db  0xff ; '.'
00000000000091ff         db  0xff ; '.'
0000000000009200         db  0xa8 ; '.'
0000000000009201         db  0xab ; '.'
0000000000009202         db  0xff ; '.'
0000000000009203         db  0xff ; '.'
0000000000009204         db  0xa8 ; '.'
0000000000009205         db  0xab ; '.'
0000000000009206         db  0xff ; '.'
0000000000009207         db  0xff ; '.'
0000000000009208         db  0xa8 ; '.'
0000000000009209         db  0xab ; '.'
000000000000920a         db  0xff ; '.'
000000000000920b         db  0xff ; '.'
000000000000920c         db  0xa8 ; '.'
000000000000920d         db  0xab ; '.'
000000000000920e         db  0xff ; '.'
000000000000920f         db  0xff ; '.'
0000000000009210         db  0xa8 ; '.'
0000000000009211         db  0xab ; '.'
0000000000009212         db  0xff ; '.'
0000000000009213         db  0xff ; '.'
0000000000009214         db  0xa8 ; '.'
0000000000009215         db  0xab ; '.'
0000000000009216         db  0xff ; '.'
0000000000009217         db  0xff ; '.'
0000000000009218         db  0xa8 ; '.'
0000000000009219         db  0xab ; '.'
000000000000921a         db  0xff ; '.'
000000000000921b         db  0xff ; '.'
000000000000921c         db  0xa8 ; '.'
000000000000921d         db  0xab ; '.'
000000000000921e         db  0xff ; '.'
000000000000921f         db  0xff ; '.'
0000000000009220         db  0xa8 ; '.'
0000000000009221         db  0xab ; '.'
0000000000009222         db  0xff ; '.'
0000000000009223         db  0xff ; '.'
0000000000009224         db  0xa8 ; '.'
0000000000009225         db  0xab ; '.'
0000000000009226         db  0xff ; '.'
0000000000009227         db  0xff ; '.'
0000000000009228         db  0xa8 ; '.'
0000000000009229         db  0xab ; '.'
000000000000922a         db  0xff ; '.'
000000000000922b         db  0xff ; '.'
000000000000922c         db  0xa8 ; '.'
000000000000922d         db  0xab ; '.'
000000000000922e         db  0xff ; '.'
000000000000922f         db  0xff ; '.'
0000000000009230         db  0xa8 ; '.'
0000000000009231         db  0xab ; '.'
0000000000009232         db  0xff ; '.'
0000000000009233         db  0xff ; '.'
0000000000009234         db  0xa8 ; '.'
0000000000009235         db  0xab ; '.'
0000000000009236         db  0xff ; '.'
0000000000009237         db  0xff ; '.'
0000000000009238         db  0xa8 ; '.'
0000000000009239         db  0xab ; '.'
000000000000923a         db  0xff ; '.'
000000000000923b         db  0xff ; '.'
000000000000923c         db  0xa8 ; '.'
000000000000923d         db  0xab ; '.'
000000000000923e         db  0xff ; '.'
000000000000923f         db  0xff ; '.'
0000000000009240         db  0xa8 ; '.'
0000000000009241         db  0xab ; '.'
0000000000009242         db  0xff ; '.'
0000000000009243         db  0xff ; '.'
0000000000009244         db  0xa8 ; '.'
0000000000009245         db  0xab ; '.'
0000000000009246         db  0xff ; '.'
0000000000009247         db  0xff ; '.'
0000000000009248         db  0xa8 ; '.'
0000000000009249         db  0xab ; '.'
000000000000924a         db  0xff ; '.'
000000000000924b         db  0xff ; '.'
000000000000924c         db  0xa8 ; '.'
000000000000924d         db  0xab ; '.'
000000000000924e         db  0xff ; '.'
000000000000924f         db  0xff ; '.'
0000000000009250         db  0xa8 ; '.'
0000000000009251         db  0xab ; '.'
0000000000009252         db  0xff ; '.'
0000000000009253         db  0xff ; '.'
0000000000009254         db  0x18 ; '.'
0000000000009255         db  0xa7 ; '.'
0000000000009256         db  0xff ; '.'
0000000000009257         db  0xff ; '.'
0000000000009258         db  0xd8 ; '.'
0000000000009259         db  0xab ; '.'
000000000000925a         db  0xff ; '.'
000000000000925b         db  0xff ; '.'
000000000000925c         db  0x18 ; '.'
000000000000925d         db  0xa7 ; '.'
000000000000925e         db  0xff ; '.'
000000000000925f         db  0xff ; '.'
0000000000009260         db  0xc0 ; '.'
0000000000009261         db  0xab ; '.'
0000000000009262         db  0xff ; '.'
0000000000009263         db  0xff ; '.'
0000000000009264         db  0x00 ; '.'
0000000000009265         db  0x00 ; '.'
0000000000009266         db  0x00 ; '.'
0000000000009267         db  0x00 ; '.'
0000000000009268         db  0x00 ; '.'
0000000000009269         db  0x00 ; '.'
000000000000926a         db  0x00 ; '.'
000000000000926b         db  0x00 ; '.'
000000000000926c         db  0x00 ; '.'
000000000000926d         db  0x00 ; '.'
000000000000926e         db  0x00 ; '.'
000000000000926f         db  0x00 ; '.'
0000000000009270         db  0x00 ; '.'
0000000000009271         db  0x00 ; '.'
0000000000009272         db  0x00 ; '.'
0000000000009273         db  0x00 ; '.'
0000000000009274         db  0x00 ; '.'
0000000000009275         db  0x00 ; '.'
0000000000009276         db  0x00 ; '.'
0000000000009277         db  0x00 ; '.'
0000000000009278         db  0x00 ; '.'
0000000000009279         db  0x00 ; '.'
000000000000927a         db  0x00 ; '.'
000000000000927b         db  0x00 ; '.'
000000000000927c         db  0x00 ; '.'
000000000000927d         db  0x00 ; '.'
000000000000927e         db  0x00 ; '.'
000000000000927f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000009280         db  0x00 ; '.'
0000000000009281         db  0x00 ; '.'
0000000000009282         db  0x00 ; '.'
0000000000009283         db  0x00 ; '.'
0000000000009284         db  0x01 ; '.'
0000000000009285         db  0x00 ; '.'
0000000000009286         db  0x00 ; '.'
0000000000009287         db  0x00 ; '.'
0000000000009288         db  0x02 ; '.'
0000000000009289         db  0x00 ; '.'
000000000000928a         db  0x00 ; '.'
000000000000928b         db  0x00 ; '.'
000000000000928c         db  0x03 ; '.'
000000000000928d         db  0x00 ; '.'
000000000000928e         db  0x00 ; '.'
000000000000928f         db  0x00 ; '.'
0000000000009290         db  0x04 ; '.'
0000000000009291         db  0x00 ; '.'
0000000000009292         db  0x00 ; '.'
0000000000009293         db  0x00 ; '.'
0000000000009294         db  0x05 ; '.'
0000000000009295         db  0x00 ; '.'
0000000000009296         db  0x00 ; '.'
0000000000009297         db  0x00 ; '.'
0000000000009298         db  0x06 ; '.'
0000000000009299         db  0x00 ; '.'
000000000000929a         db  0x00 ; '.'
000000000000929b         db  0x00 ; '.'
000000000000929c         db  0x07 ; '.'
000000000000929d         db  0x00 ; '.'
000000000000929e         db  0x00 ; '.'
000000000000929f         db  0x00 ; '.'
00000000000092a0         db  0x08 ; '.'
00000000000092a1         db  0x00 ; '.'
00000000000092a2         db  0x00 ; '.'
00000000000092a3         db  0x00 ; '.'
00000000000092a4         db  0x09 ; '.'
00000000000092a5         db  0x00 ; '.'
00000000000092a6         db  0x00 ; '.'
00000000000092a7         db  0x00 ; '.'
                     aUnableToDispla:
00000000000092a8         db         "unable to display error message", 0        ; DATA XREF=verror_at_line+135
                     aMemoryExhauste:
00000000000092c8         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
00000000000092d9         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
00000000000092da         db  0x00 ; '.'
                     aPosix:
00000000000092db         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
00000000000092e1         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
00000000000092e7         align      8
                     switch_table_92e8:        // switch_table
00000000000092e8         dd         vasnprintf.loc_6bb6-switch_table_92e8, vasnprintf.loc_6650-switch_table_92e8, vasnprintf.loc_6620-switch_table_92e8, vasnprintf.loc_6598-switch_table_92e8 ; switch table used at 0x61eb containing 18 entries, DATA XREF=vasnprintf+1357
00000000000092f8         dd         vasnprintf.loc_6558-switch_table_92e8, 2 dup (vasnprintf.loc_6328-switch_table_92e8), 4 dup (vasnprintf.loc_61f0-switch_table_92e8), vasnprintf.loc_64d8-switch_table_92e8
0000000000009318         dd         vasnprintf.loc_6450-switch_table_92e8, 2 dup (vasnprintf.loc_6328-switch_table_92e8), 3 dup (vasnprintf.loc_61f0-switch_table_92e8)
                     switch_table_9330:        // switch_table
0000000000009330         dd         vasnprintf.loc_6a00-switch_table_9330, vasnprintf.loc_6a20-switch_table_9330, vasnprintf.loc_6a10-switch_table_9330, 2 dup (vasnprintf.loc_68d0-switch_table_9330) ; switch table used at 0x6790 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
0000000000009344         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
000000000000934b         db  0x00 ; '.'
000000000000934c         db  0x00 ; '.'
000000000000934d         db  0x00 ; '.'
000000000000934e         db  0x00 ; '.'
000000000000934f         db  0x00 ; '.'
0000000000009350         db  0xd0 ; '.'                                         ; DATA XREF=printf_fetchargs+10
0000000000009351         db  0xda ; '.'
0000000000009352         db  0xff ; '.'
0000000000009353         db  0xff ; '.'
0000000000009354         db  0x1c ; '.'
0000000000009355         db  0xdb ; '.'
0000000000009356         db  0xff ; '.'
0000000000009357         db  0xff ; '.'
0000000000009358         db  0x1c ; '.'
0000000000009359         db  0xdb ; '.'
000000000000935a         db  0xff ; '.'
000000000000935b         db  0xff ; '.'
000000000000935c         db  0x3e ; '>'
000000000000935d         db  0xdb ; '.'
000000000000935e         db  0xff ; '.'
000000000000935f         db  0xff ; '.'
0000000000009360         db  0x3e ; '>'
0000000000009361         db  0xdb ; '.'
0000000000009362         db  0xff ; '.'
0000000000009363         db  0xff ; '.'
0000000000009364         db  0xfa ; '.'
0000000000009365         db  0xda ; '.'
0000000000009366         db  0xff ; '.'
0000000000009367         db  0xff ; '.'
0000000000009368         db  0xfa ; '.'
0000000000009369         db  0xda ; '.'
000000000000936a         db  0xff ; '.'
000000000000936b         db  0xff ; '.'
000000000000936c         db  0xd6 ; '.'
000000000000936d         db  0xda ; '.'
000000000000936e         db  0xff ; '.'
000000000000936f         db  0xff ; '.'
0000000000009370         db  0xd6 ; '.'
0000000000009371         db  0xda ; '.'
0000000000009372         db  0xff ; '.'
0000000000009373         db  0xff ; '.'
0000000000009374         db  0xd6 ; '.'
0000000000009375         db  0xda ; '.'
0000000000009376         db  0xff ; '.'
0000000000009377         db  0xff ; '.'
0000000000009378         db  0xd6 ; '.'
0000000000009379         db  0xda ; '.'
000000000000937a         db  0xff ; '.'
000000000000937b         db  0xff ; '.'
000000000000937c         db  0x92 ; '.'
000000000000937d         db  0xdb ; '.'
000000000000937e         db  0xff ; '.'
000000000000937f         db  0xff ; '.'
0000000000009380         db  0xa0 ; '.'
0000000000009381         db  0xda ; '.'
0000000000009382         db  0xff ; '.'
0000000000009383         db  0xff ; '.'
0000000000009384         db  0xfa ; '.'
0000000000009385         db  0xda ; '.'
0000000000009386         db  0xff ; '.'
0000000000009387         db  0xff ; '.'
0000000000009388         db  0xfa ; '.'
0000000000009389         db  0xda ; '.'
000000000000938a         db  0xff ; '.'
000000000000938b         db  0xff ; '.'
000000000000938c         db  0x64 ; 'd'
000000000000938d         db  0xdb ; '.'
000000000000938e         db  0xff ; '.'
000000000000938f         db  0xff ; '.'
0000000000009390         db  0xc0 ; '.'
0000000000009391         db  0xdb ; '.'
0000000000009392         db  0xff ; '.'
0000000000009393         db  0xff ; '.'
0000000000009394         db  0xd6 ; '.'
0000000000009395         db  0xda ; '.'
0000000000009396         db  0xff ; '.'
0000000000009397         db  0xff ; '.'
0000000000009398         db  0xd6 ; '.'
0000000000009399         db  0xda ; '.'
000000000000939a         db  0xff ; '.'
000000000000939b         db  0xff ; '.'
000000000000939c         db  0xd6 ; '.'
000000000000939d         db  0xda ; '.'
000000000000939e         db  0xff ; '.'
000000000000939f         db  0xff ; '.'
00000000000093a0         db  0xd6 ; '.'
00000000000093a1         db  0xda ; '.'
00000000000093a2         db  0xff ; '.'
00000000000093a3         db  0xff ; '.'
00000000000093a4         db  0xd6 ; '.'
00000000000093a5         db  0xda ; '.'
00000000000093a6         db  0xff ; '.'
00000000000093a7         db  0xff ; '.'
00000000000093a8         db  0xd6 ; '.'
00000000000093a9         db  0xda ; '.'
00000000000093aa         db  0xff ; '.'
00000000000093ab         db  0xff ; '.'
00000000000093ac         db  0x00 ; '.'
00000000000093ad         db  0x00 ; '.'
00000000000093ae         db  0x00 ; '.'
00000000000093af         db  0x00 ; '.'
                     wide_null_string.2696:
00000000000093b0         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
00000000000093b1         db  0x00 ; '.'
00000000000093b2         db  0x00 ; '.'
00000000000093b3         db  0x00 ; '.'
00000000000093b4         db  0x4e ; 'N'
00000000000093b5         db  0x00 ; '.'
00000000000093b6         db  0x00 ; '.'
00000000000093b7         db  0x00 ; '.'
00000000000093b8         db  0x55 ; 'U'
00000000000093b9         db  0x00 ; '.'
00000000000093ba         db  0x00 ; '.'
00000000000093bb         db  0x00 ; '.'
00000000000093bc         db  0x4c ; 'L'
00000000000093bd         db  0x00 ; '.'
00000000000093be         db  0x00 ; '.'
00000000000093bf         db  0x00 ; '.'
00000000000093c0         db  0x4c ; 'L'
00000000000093c1         db  0x00 ; '.'
00000000000093c2         db  0x00 ; '.'
00000000000093c3         db  0x00 ; '.'
00000000000093c4         db  0x29 ; ')'
00000000000093c5         db  0x00 ; '.'
00000000000093c6         db  0x00 ; '.'
00000000000093c7         db  0x00 ; '.'
00000000000093c8         db  0x00 ; '.'
00000000000093c9         db  0x00 ; '.'
00000000000093ca         db  0x00 ; '.'
00000000000093cb         db  0x00 ; '.'
                     switch_table_93cc:        // switch_table
00000000000093cc         dd         printf_parse.loc_726b-switch_table_93cc, 27 dup (printf_parse.loc_77fb-switch_table_93cc), printf_parse.loc_776b-switch_table_93cc, printf_parse.loc_77fb-switch_table_93cc ; switch table used at 0x71f5 containing 84 entries, DATA XREF=printf_parse+564
0000000000009444         dd         printf_parse.loc_778c-switch_table_93cc, printf_parse.loc_77fb-switch_table_93cc, 3 dup (printf_parse.loc_776b-switch_table_93cc), 11 dup (printf_parse.loc_77fb-switch_table_93cc)
0000000000009484         dd         printf_parse.loc_71f7-switch_table_93cc, 4 dup (printf_parse.loc_77fb-switch_table_93cc), printf_parse.loc_779c-switch_table_93cc, 8 dup (printf_parse.loc_77fb-switch_table_93cc)
00000000000094bc         dd         printf_parse.loc_776b-switch_table_93cc, printf_parse.loc_77fb-switch_table_93cc, printf_parse.loc_76f8-switch_table_93cc, printf_parse.loc_770b-switch_table_93cc
00000000000094cc         dd         3 dup (printf_parse.loc_776b-switch_table_93cc), printf_parse.loc_77fb-switch_table_93cc, printf_parse.loc_770b-switch_table_93cc, 4 dup (printf_parse.loc_77fb-switch_table_93cc)
00000000000094f0         dd         printf_parse.loc_76ac-switch_table_93cc, printf_parse.loc_779c-switch_table_93cc, printf_parse.loc_77f0-switch_table_93cc, 2 dup (printf_parse.loc_77fb-switch_table_93cc)
0000000000009504         dd         printf_parse.loc_7758-switch_table_93cc, printf_parse.loc_77fb-switch_table_93cc, printf_parse.loc_779c-switch_table_93cc, 2 dup (printf_parse.loc_77fb-switch_table_93cc)
0000000000009518         dd         printf_parse.loc_779c-switch_table_93cc


        ; Section .eh_frame_hdr
        ; Range: [0x951c; 0x97d8[ (700 bytes)
        ; File offset : [38172; 38872[ (700 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000951c         db  0x01 ; '.'
000000000000951d         db  0x1b ; '.'
000000000000951e         db  0x03 ; '.'
000000000000951f         db  0x3b ; ';'
0000000000009520         db  0xb8 ; '.'
0000000000009521         db  0x02 ; '.'
0000000000009522         db  0x00 ; '.'
0000000000009523         db  0x00 ; '.'
0000000000009524         db  0x56 ; 'V'
0000000000009525         db  0x00 ; '.'
0000000000009526         db  0x00 ; '.'
0000000000009527         db  0x00 ; '.'
0000000000009528         db  0xd4 ; '.'
0000000000009529         db  0x7d ; '}'
000000000000952a         db  0xff ; '.'
000000000000952b         db  0xff ; '.'
000000000000952c         db  0x04 ; '.'
000000000000952d         db  0x03 ; '.'
000000000000952e         db  0x00 ; '.'
000000000000952f         db  0x00 ; '.'
0000000000009530         db  0xe4 ; '.'
0000000000009531         db  0x80 ; '.'
0000000000009532         db  0xff ; '.'
0000000000009533         db  0xff ; '.'
0000000000009534         db  0x2c ; ','
0000000000009535         db  0x03 ; '.'
0000000000009536         db  0x00 ; '.'
0000000000009537         db  0x00 ; '.'
0000000000009538         db  0xf4 ; '.'
0000000000009539         db  0x80 ; '.'
000000000000953a         db  0xff ; '.'
000000000000953b         db  0xff ; '.'
000000000000953c         db  0x28 ; '('
000000000000953d         db  0x05 ; '.'
000000000000953e         db  0x00 ; '.'
000000000000953f         db  0x00 ; '.'
0000000000009540         db  0xd4 ; '.'
0000000000009541         db  0x81 ; '.'
0000000000009542         db  0xff ; '.'
0000000000009543         db  0xff ; '.'
0000000000009544         db  0xd4 ; '.'
0000000000009545         db  0x02 ; '.'
0000000000009546         db  0x00 ; '.'
0000000000009547         db  0x00 ; '.'
0000000000009548         db  0xe4 ; '.'
0000000000009549         db  0x82 ; '.'
000000000000954a         db  0xff ; '.'
000000000000954b         db  0xff ; '.'
000000000000954c         db  0x44 ; 'D'
000000000000954d         db  0x03 ; '.'
000000000000954e         db  0x00 ; '.'
000000000000954f         db  0x00 ; '.'
0000000000009550         db  0x54 ; 'T'
0000000000009551         db  0x84 ; '.'
0000000000009552         db  0xff ; '.'
0000000000009553         db  0xff ; '.'
0000000000009554         db  0x58 ; 'X'
0000000000009555         db  0x03 ; '.'
0000000000009556         db  0x00 ; '.'
0000000000009557         db  0x00 ; '.'
0000000000009558         db  0x04 ; '.'
0000000000009559         db  0x85 ; '.'
000000000000955a         db  0xff ; '.'
000000000000955b         db  0xff ; '.'
000000000000955c         db  0x70 ; 'p'
000000000000955d         db  0x03 ; '.'
000000000000955e         db  0x00 ; '.'
000000000000955f         db  0x00 ; '.'
0000000000009560         db  0xe4 ; '.'
0000000000009561         db  0x85 ; '.'
0000000000009562         db  0xff ; '.'
0000000000009563         db  0xff ; '.'
0000000000009564         db  0x90 ; '.'
0000000000009565         db  0x03 ; '.'
0000000000009566         db  0x00 ; '.'
0000000000009567         db  0x00 ; '.'
0000000000009568         db  0x24 ; '$'
0000000000009569         db  0x86 ; '.'
000000000000956a         db  0xff ; '.'
000000000000956b         db  0xff ; '.'
000000000000956c         db  0xa8 ; '.'
000000000000956d         db  0x03 ; '.'
000000000000956e         db  0x00 ; '.'
000000000000956f         db  0x00 ; '.'
0000000000009570         db  0x54 ; 'T'
0000000000009571         db  0x86 ; '.'
0000000000009572         db  0xff ; '.'
0000000000009573         db  0xff ; '.'
0000000000009574         db  0xbc ; '.'
0000000000009575         db  0x03 ; '.'
0000000000009576         db  0x00 ; '.'
0000000000009577         db  0x00 ; '.'
0000000000009578         db  0xc4 ; '.'
0000000000009579         db  0x8b ; '.'
000000000000957a         db  0xff ; '.'
000000000000957b         db  0xff ; '.'
000000000000957c         db  0x08 ; '.'
000000000000957d         db  0x04 ; '.'
000000000000957e         db  0x00 ; '.'
000000000000957f         db  0x00 ; '.'
0000000000009580         db  0xa4 ; '.'
0000000000009581         db  0x91 ; '.'
0000000000009582         db  0xff ; '.'
0000000000009583         db  0xff ; '.'
0000000000009584         db  0x34 ; '4'
0000000000009585         db  0x04 ; '.'
0000000000009586         db  0x00 ; '.'
0000000000009587         db  0x00 ; '.'
0000000000009588         db  0x14 ; '.'
0000000000009589         db  0x92 ; '.'
000000000000958a         db  0xff ; '.'
000000000000958b         db  0xff ; '.'
000000000000958c         db  0x4c ; 'L'
000000000000958d         db  0x04 ; '.'
000000000000958e         db  0x00 ; '.'
000000000000958f         db  0x00 ; '.'
0000000000009590         db  0x54 ; 'T'
0000000000009591         db  0x93 ; '.'
0000000000009592         db  0xff ; '.'
0000000000009593         db  0xff ; '.'
0000000000009594         db  0x80 ; '.'
0000000000009595         db  0x04 ; '.'
0000000000009596         db  0x00 ; '.'
0000000000009597         db  0x00 ; '.'
0000000000009598         db  0x34 ; '4'
0000000000009599         db  0x97 ; '.'
000000000000959a         db  0xff ; '.'
000000000000959b         db  0xff ; '.'
000000000000959c         db  0xcc ; '.'
000000000000959d         db  0x04 ; '.'
000000000000959e         db  0x00 ; '.'
000000000000959f         db  0x00 ; '.'
00000000000095a0         db  0x84 ; '.'
00000000000095a1         db  0x98 ; '.'
00000000000095a2         db  0xff ; '.'
00000000000095a3         db  0xff ; '.'
00000000000095a4         db  0xfc ; '.'
00000000000095a5         db  0x04 ; '.'
00000000000095a6         db  0x00 ; '.'
00000000000095a7         db  0x00 ; '.'
00000000000095a8         db  0xc4 ; '.'
00000000000095a9         db  0x9d ; '.'
00000000000095aa         db  0xff ; '.'
00000000000095ab         db  0xff ; '.'
00000000000095ac         db  0x54 ; 'T'
00000000000095ad         db  0x05 ; '.'
00000000000095ae         db  0x00 ; '.'
00000000000095af         db  0x00 ; '.'
00000000000095b0         db  0xd4 ; '.'
00000000000095b1         db  0x9d ; '.'
00000000000095b2         db  0xff ; '.'
00000000000095b3         db  0xff ; '.'
00000000000095b4         db  0x68 ; 'h'
00000000000095b5         db  0x05 ; '.'
00000000000095b6         db  0x00 ; '.'
00000000000095b7         db  0x00 ; '.'
00000000000095b8         db  0xe4 ; '.'
00000000000095b9         db  0x9d ; '.'
00000000000095ba         db  0xff ; '.'
00000000000095bb         db  0xff ; '.'
00000000000095bc         db  0x7c ; '|'
00000000000095bd         db  0x05 ; '.'
00000000000095be         db  0x00 ; '.'
00000000000095bf         db  0x00 ; '.'
00000000000095c0         db  0x94 ; '.'
00000000000095c1         db  0x9e ; '.'
00000000000095c2         db  0xff ; '.'
00000000000095c3         db  0xff ; '.'
00000000000095c4         db  0xac ; '.'
00000000000095c5         db  0x05 ; '.'
00000000000095c6         db  0x00 ; '.'
00000000000095c7         db  0x00 ; '.'
00000000000095c8         db  0xe4 ; '.'
00000000000095c9         db  0x9e ; '.'
00000000000095ca         db  0xff ; '.'
00000000000095cb         db  0xff ; '.'
00000000000095cc         db  0xc4 ; '.'
00000000000095cd         db  0x05 ; '.'
00000000000095ce         db  0x00 ; '.'
00000000000095cf         db  0x00 ; '.'
00000000000095d0         db  0x84 ; '.'
00000000000095d1         db  0x9f ; '.'
00000000000095d2         db  0xff ; '.'
00000000000095d3         db  0xff ; '.'
00000000000095d4         db  0xe4 ; '.'
00000000000095d5         db  0x05 ; '.'
00000000000095d6         db  0x00 ; '.'
00000000000095d7         db  0x00 ; '.'
00000000000095d8         db  0x74 ; 't'
00000000000095d9         db  0xa0 ; '.'
00000000000095da         db  0xff ; '.'
00000000000095db         db  0xff ; '.'
00000000000095dc         db  0x28 ; '('
00000000000095dd         db  0x06 ; '.'
00000000000095de         db  0x00 ; '.'
00000000000095df         db  0x00 ; '.'
00000000000095e0         db  0xb4 ; '.'
00000000000095e1         db  0xb2 ; '.'
00000000000095e2         db  0xff ; '.'
00000000000095e3         db  0xff ; '.'
00000000000095e4         db  0xa0 ; '.'
00000000000095e5         db  0x06 ; '.'
00000000000095e6         db  0x00 ; '.'
00000000000095e7         db  0x00 ; '.'
00000000000095e8         db  0x64 ; 'd'
00000000000095e9         db  0xb4 ; '.'
00000000000095ea         db  0xff ; '.'
00000000000095eb         db  0xff ; '.'
00000000000095ec         db  0x0c ; '.'
00000000000095ed         db  0x07 ; '.'
00000000000095ee         db  0x00 ; '.'
00000000000095ef         db  0x00 ; '.'
00000000000095f0         db  0xa4 ; '.'
00000000000095f1         db  0xb4 ; '.'
00000000000095f2         db  0xff ; '.'
00000000000095f3         db  0xff ; '.'
00000000000095f4         db  0x38 ; '8'
00000000000095f5         db  0x07 ; '.'
00000000000095f6         db  0x00 ; '.'
00000000000095f7         db  0x00 ; '.'
00000000000095f8         db  0xc4 ; '.'
00000000000095f9         db  0xb4 ; '.'
00000000000095fa         db  0xff ; '.'
00000000000095fb         db  0xff ; '.'
00000000000095fc         db  0x4c ; 'L'
00000000000095fd         db  0x07 ; '.'
00000000000095fe         db  0x00 ; '.'
00000000000095ff         db  0x00 ; '.'
0000000000009600         db  0xe4 ; '.'
0000000000009601         db  0xb4 ; '.'
0000000000009602         db  0xff ; '.'
0000000000009603         db  0xff ; '.'
0000000000009604         db  0x60 ; '`'
0000000000009605         db  0x07 ; '.'
0000000000009606         db  0x00 ; '.'
0000000000009607         db  0x00 ; '.'
0000000000009608         db  0x24 ; '$'
0000000000009609         db  0xb5 ; '.'
000000000000960a         db  0xff ; '.'
000000000000960b         db  0xff ; '.'
000000000000960c         db  0x74 ; 't'
000000000000960d         db  0x07 ; '.'
000000000000960e         db  0x00 ; '.'
000000000000960f         db  0x00 ; '.'
0000000000009610         db  0x44 ; 'D'
0000000000009611         db  0xb5 ; '.'
0000000000009612         db  0xff ; '.'
0000000000009613         db  0xff ; '.'
0000000000009614         db  0x88 ; '.'
0000000000009615         db  0x07 ; '.'
0000000000009616         db  0x00 ; '.'
0000000000009617         db  0x00 ; '.'
0000000000009618         db  0x74 ; 't'
0000000000009619         db  0xb5 ; '.'
000000000000961a         db  0xff ; '.'
000000000000961b         db  0xff ; '.'
000000000000961c         db  0x9c ; '.'
000000000000961d         db  0x07 ; '.'
000000000000961e         db  0x00 ; '.'
000000000000961f         db  0x00 ; '.'
0000000000009620         db  0xf4 ; '.'
0000000000009621         db  0xb5 ; '.'
0000000000009622         db  0xff ; '.'
0000000000009623         db  0xff ; '.'
0000000000009624         db  0xf0 ; '.'
0000000000009625         db  0x07 ; '.'
0000000000009626         db  0x00 ; '.'
0000000000009627         db  0x00 ; '.'
0000000000009628         db  0xe4 ; '.'
0000000000009629         db  0xb6 ; '.'
000000000000962a         db  0xff ; '.'
000000000000962b         db  0xff ; '.'
000000000000962c         db  0x5c ; '\'
000000000000962d         db  0x08 ; '.'
000000000000962e         db  0x00 ; '.'
000000000000962f         db  0x00 ; '.'
0000000000009630         db  0xf4 ; '.'
0000000000009631         db  0xb6 ; '.'
0000000000009632         db  0xff ; '.'
0000000000009633         db  0xff ; '.'
0000000000009634         db  0x70 ; 'p'
0000000000009635         db  0x08 ; '.'
0000000000009636         db  0x00 ; '.'
0000000000009637         db  0x00 ; '.'
0000000000009638         db  0x94 ; '.'
0000000000009639         db  0xb7 ; '.'
000000000000963a         db  0xff ; '.'
000000000000963b         db  0xff ; '.'
000000000000963c         db  0x9c ; '.'
000000000000963d         db  0x08 ; '.'
000000000000963e         db  0x00 ; '.'
000000000000963f         db  0x00 ; '.'
0000000000009640         db  0xb4 ; '.'
0000000000009641         db  0xb7 ; '.'
0000000000009642         db  0xff ; '.'
0000000000009643         db  0xff ; '.'
0000000000009644         db  0xb0 ; '.'
0000000000009645         db  0x08 ; '.'
0000000000009646         db  0x00 ; '.'
0000000000009647         db  0x00 ; '.'
0000000000009648         db  0xc4 ; '.'
0000000000009649         db  0xb7 ; '.'
000000000000964a         db  0xff ; '.'
000000000000964b         db  0xff ; '.'
000000000000964c         db  0xc4 ; '.'
000000000000964d         db  0x08 ; '.'
000000000000964e         db  0x00 ; '.'
000000000000964f         db  0x00 ; '.'
0000000000009650         db  0xe4 ; '.'
0000000000009651         db  0xb7 ; '.'
0000000000009652         db  0xff ; '.'
0000000000009653         db  0xff ; '.'
0000000000009654         db  0xd8 ; '.'
0000000000009655         db  0x08 ; '.'
0000000000009656         db  0x00 ; '.'
0000000000009657         db  0x00 ; '.'
0000000000009658         db  0x04 ; '.'
0000000000009659         db  0xb8 ; '.'
000000000000965a         db  0xff ; '.'
000000000000965b         db  0xff ; '.'
000000000000965c         db  0xec ; '.'
000000000000965d         db  0x08 ; '.'
000000000000965e         db  0x00 ; '.'
000000000000965f         db  0x00 ; '.'
0000000000009660         db  0x94 ; '.'
0000000000009661         db  0xb8 ; '.'
0000000000009662         db  0xff ; '.'
0000000000009663         db  0xff ; '.'
0000000000009664         db  0x08 ; '.'
0000000000009665         db  0x09 ; '.'
0000000000009666         db  0x00 ; '.'
0000000000009667         db  0x00 ; '.'
0000000000009668         db  0x24 ; '$'
0000000000009669         db  0xb9 ; '.'
000000000000966a         db  0xff ; '.'
000000000000966b         db  0xff ; '.'
000000000000966c         db  0x24 ; '$'
000000000000966d         db  0x09 ; '.'
000000000000966e         db  0x00 ; '.'
000000000000966f         db  0x00 ; '.'
0000000000009670         db  0x34 ; '4'
0000000000009671         db  0xb9 ; '.'
0000000000009672         db  0xff ; '.'
0000000000009673         db  0xff ; '.'
0000000000009674         db  0x38 ; '8'
0000000000009675         db  0x09 ; '.'
0000000000009676         db  0x00 ; '.'
0000000000009677         db  0x00 ; '.'
0000000000009678         db  0x44 ; 'D'
0000000000009679         db  0xb9 ; '.'
000000000000967a         db  0xff ; '.'
000000000000967b         db  0xff ; '.'
000000000000967c         db  0x4c ; 'L'
000000000000967d         db  0x09 ; '.'
000000000000967e         db  0x00 ; '.'
000000000000967f         db  0x00 ; '.'
0000000000009680         db  0xe4 ; '.'
0000000000009681         db  0xb9 ; '.'
0000000000009682         db  0xff ; '.'
0000000000009683         db  0xff ; '.'
0000000000009684         db  0x68 ; 'h'
0000000000009685         db  0x09 ; '.'
0000000000009686         db  0x00 ; '.'
0000000000009687         db  0x00 ; '.'
0000000000009688         db  0xf4 ; '.'
0000000000009689         db  0xb9 ; '.'
000000000000968a         db  0xff ; '.'
000000000000968b         db  0xff ; '.'
000000000000968c         db  0x7c ; '|'
000000000000968d         db  0x09 ; '.'
000000000000968e         db  0x00 ; '.'
000000000000968f         db  0x00 ; '.'
0000000000009690         db  0x14 ; '.'
0000000000009691         db  0xba ; '.'
0000000000009692         db  0xff ; '.'
0000000000009693         db  0xff ; '.'
0000000000009694         db  0x90 ; '.'
0000000000009695         db  0x09 ; '.'
0000000000009696         db  0x00 ; '.'
0000000000009697         db  0x00 ; '.'
0000000000009698         db  0x24 ; '$'
0000000000009699         db  0xba ; '.'
000000000000969a         db  0xff ; '.'
000000000000969b         db  0xff ; '.'
000000000000969c         db  0xa4 ; '.'
000000000000969d         db  0x09 ; '.'
000000000000969e         db  0x00 ; '.'
000000000000969f         db  0x00 ; '.'
00000000000096a0         db  0xb4 ; '.'
00000000000096a1         db  0xba ; '.'
00000000000096a2         db  0xff ; '.'
00000000000096a3         db  0xff ; '.'
00000000000096a4         db  0xc0 ; '.'
00000000000096a5         db  0x09 ; '.'
00000000000096a6         db  0x00 ; '.'
00000000000096a7         db  0x00 ; '.'
00000000000096a8         db  0x54 ; 'T'
00000000000096a9         db  0xbb ; '.'
00000000000096aa         db  0xff ; '.'
00000000000096ab         db  0xff ; '.'
00000000000096ac         db  0xdc ; '.'
00000000000096ad         db  0x09 ; '.'
00000000000096ae         db  0x00 ; '.'
00000000000096af         db  0x00 ; '.'
00000000000096b0         db  0x64 ; 'd'
00000000000096b1         db  0xbb ; '.'
00000000000096b2         db  0xff ; '.'
00000000000096b3         db  0xff ; '.'
00000000000096b4         db  0xf0 ; '.'
00000000000096b5         db  0x09 ; '.'
00000000000096b6         db  0x00 ; '.'
00000000000096b7         db  0x00 ; '.'
00000000000096b8         db  0x84 ; '.'
00000000000096b9         db  0xbb ; '.'
00000000000096ba         db  0xff ; '.'
00000000000096bb         db  0xff ; '.'
00000000000096bc         db  0x04 ; '.'
00000000000096bd         db  0x0a ; '.'
00000000000096be         db  0x00 ; '.'
00000000000096bf         db  0x00 ; '.'
00000000000096c0         db  0xa4 ; '.'
00000000000096c1         db  0xbb ; '.'
00000000000096c2         db  0xff ; '.'
00000000000096c3         db  0xff ; '.'
00000000000096c4         db  0x18 ; '.'
00000000000096c5         db  0x0a ; '.'
00000000000096c6         db  0x00 ; '.'
00000000000096c7         db  0x00 ; '.'
00000000000096c8         db  0xb4 ; '.'
00000000000096c9         db  0xbb ; '.'
00000000000096ca         db  0xff ; '.'
00000000000096cb         db  0xff ; '.'
00000000000096cc         db  0x2c ; ','
00000000000096cd         db  0x0a ; '.'
00000000000096ce         db  0x00 ; '.'
00000000000096cf         db  0x00 ; '.'
00000000000096d0         db  0xd4 ; '.'
00000000000096d1         db  0xbb ; '.'
00000000000096d2         db  0xff ; '.'
00000000000096d3         db  0xff ; '.'
00000000000096d4         db  0x40 ; '@'
00000000000096d5         db  0x0a ; '.'
00000000000096d6         db  0x00 ; '.'
00000000000096d7         db  0x00 ; '.'
00000000000096d8         db  0xf4 ; '.'
00000000000096d9         db  0xbb ; '.'
00000000000096da         db  0xff ; '.'
00000000000096db         db  0xff ; '.'
00000000000096dc         db  0x54 ; 'T'
00000000000096dd         db  0x0a ; '.'
00000000000096de         db  0x00 ; '.'
00000000000096df         db  0x00 ; '.'
00000000000096e0         db  0x14 ; '.'
00000000000096e1         db  0xbc ; '.'
00000000000096e2         db  0xff ; '.'
00000000000096e3         db  0xff ; '.'
00000000000096e4         db  0x6c ; 'l'
00000000000096e5         db  0x0a ; '.'
00000000000096e6         db  0x00 ; '.'
00000000000096e7         db  0x00 ; '.'
00000000000096e8         db  0xc4 ; '.'
00000000000096e9         db  0xbe ; '.'
00000000000096ea         db  0xff ; '.'
00000000000096eb         db  0xff ; '.'
00000000000096ec         db  0x84 ; '.'
00000000000096ed         db  0x0a ; '.'
00000000000096ee         db  0x00 ; '.'
00000000000096ef         db  0x00 ; '.'
00000000000096f0         db  0x84 ; '.'
00000000000096f1         db  0xbf ; '.'
00000000000096f2         db  0xff ; '.'
00000000000096f3         db  0xff ; '.'
00000000000096f4         db  0xd4 ; '.'
00000000000096f5         db  0x0a ; '.'
00000000000096f6         db  0x00 ; '.'
00000000000096f7         db  0x00 ; '.'
00000000000096f8         db  0x94 ; '.'
00000000000096f9         db  0xbf ; '.'
00000000000096fa         db  0xff ; '.'
00000000000096fb         db  0xff ; '.'
00000000000096fc         db  0xec ; '.'
00000000000096fd         db  0x0a ; '.'
00000000000096fe         db  0x00 ; '.'
00000000000096ff         db  0x00 ; '.'
0000000000009700         db  0xb4 ; '.'
0000000000009701         db  0xbf ; '.'
0000000000009702         db  0xff ; '.'
0000000000009703         db  0xff ; '.'
0000000000009704         db  0x08 ; '.'
0000000000009705         db  0x0b ; '.'
0000000000009706         db  0x00 ; '.'
0000000000009707         db  0x00 ; '.'
0000000000009708         db  0xe4 ; '.'
0000000000009709         db  0xbf ; '.'
000000000000970a         db  0xff ; '.'
000000000000970b         db  0xff ; '.'
000000000000970c         db  0x1c ; '.'
000000000000970d         db  0x0b ; '.'
000000000000970e         db  0x00 ; '.'
000000000000970f         db  0x00 ; '.'
0000000000009710         db  0xf4 ; '.'
0000000000009711         db  0xbf ; '.'
0000000000009712         db  0xff ; '.'
0000000000009713         db  0xff ; '.'
0000000000009714         db  0x30 ; '0'
0000000000009715         db  0x0b ; '.'
0000000000009716         db  0x00 ; '.'
0000000000009717         db  0x00 ; '.'
0000000000009718         db  0x34 ; '4'
0000000000009719         db  0xc0 ; '.'
000000000000971a         db  0xff ; '.'
000000000000971b         db  0xff ; '.'
000000000000971c         db  0x54 ; 'T'
000000000000971d         db  0x0b ; '.'
000000000000971e         db  0x00 ; '.'
000000000000971f         db  0x00 ; '.'
0000000000009720         db  0x64 ; 'd'
0000000000009721         db  0xc0 ; '.'
0000000000009722         db  0xff ; '.'
0000000000009723         db  0xff ; '.'
0000000000009724         db  0x68 ; 'h'
0000000000009725         db  0x0b ; '.'
0000000000009726         db  0x00 ; '.'
0000000000009727         db  0x00 ; '.'
0000000000009728         db  0xf4 ; '.'
0000000000009729         db  0xc0 ; '.'
000000000000972a         db  0xff ; '.'
000000000000972b         db  0xff ; '.'
000000000000972c         db  0x80 ; '.'
000000000000972d         db  0x0b ; '.'
000000000000972e         db  0x00 ; '.'
000000000000972f         db  0x00 ; '.'
0000000000009730         db  0x44 ; 'D'
0000000000009731         db  0xc1 ; '.'
0000000000009732         db  0xff ; '.'
0000000000009733         db  0xff ; '.'
0000000000009734         db  0x98 ; '.'
0000000000009735         db  0x0b ; '.'
0000000000009736         db  0x00 ; '.'
0000000000009737         db  0x00 ; '.'
0000000000009738         db  0x64 ; 'd'
0000000000009739         db  0xc1 ; '.'
000000000000973a         db  0xff ; '.'
000000000000973b         db  0xff ; '.'
000000000000973c         db  0xb4 ; '.'
000000000000973d         db  0x0b ; '.'
000000000000973e         db  0x00 ; '.'
000000000000973f         db  0x00 ; '.'
0000000000009740         db  0x94 ; '.'
0000000000009741         db  0xc1 ; '.'
0000000000009742         db  0xff ; '.'
0000000000009743         db  0xff ; '.'
0000000000009744         db  0xd0 ; '.'
0000000000009745         db  0x0b ; '.'
0000000000009746         db  0x00 ; '.'
0000000000009747         db  0x00 ; '.'
0000000000009748         db  0xc4 ; '.'
0000000000009749         db  0xc1 ; '.'
000000000000974a         db  0xff ; '.'
000000000000974b         db  0xff ; '.'
000000000000974c         db  0xf8 ; '.'
000000000000974d         db  0x0b ; '.'
000000000000974e         db  0x00 ; '.'
000000000000974f         db  0x00 ; '.'
0000000000009750         db  0xe4 ; '.'
0000000000009751         db  0xc1 ; '.'
0000000000009752         db  0xff ; '.'
0000000000009753         db  0xff ; '.'
0000000000009754         db  0x14 ; '.'
0000000000009755         db  0x0c ; '.'
0000000000009756         db  0x00 ; '.'
0000000000009757         db  0x00 ; '.'
0000000000009758         db  0x24 ; '$'
0000000000009759         db  0xc2 ; '.'
000000000000975a         db  0xff ; '.'
000000000000975b         db  0xff ; '.'
000000000000975c         db  0x2c ; ','
000000000000975d         db  0x0c ; '.'
000000000000975e         db  0x00 ; '.'
000000000000975f         db  0x00 ; '.'
0000000000009760         db  0x74 ; 't'
0000000000009761         db  0xc3 ; '.'
0000000000009762         db  0xff ; '.'
0000000000009763         db  0xff ; '.'
0000000000009764         db  0x78 ; 'x'
0000000000009765         db  0x0c ; '.'
0000000000009766         db  0x00 ; '.'
0000000000009767         db  0x00 ; '.'
0000000000009768         db  0x24 ; '$'
0000000000009769         db  0xc4 ; '.'
000000000000976a         db  0xff ; '.'
000000000000976b         db  0xff ; '.'
000000000000976c         db  0x94 ; '.'
000000000000976d         db  0x0c ; '.'
000000000000976e         db  0x00 ; '.'
000000000000976f         db  0x00 ; '.'
0000000000009770         db  0xb4 ; '.'
0000000000009771         db  0xc4 ; '.'
0000000000009772         db  0xff ; '.'
0000000000009773         db  0xff ; '.'
0000000000009774         db  0xd4 ; '.'
0000000000009775         db  0x0c ; '.'
0000000000009776         db  0x00 ; '.'
0000000000009777         db  0x00 ; '.'
0000000000009778         db  0x34 ; '4'
0000000000009779         db  0xc5 ; '.'
000000000000977a         db  0xff ; '.'
000000000000977b         db  0xff ; '.'
000000000000977c         db  0xfc ; '.'
000000000000977d         db  0x0c ; '.'
000000000000977e         db  0x00 ; '.'
000000000000977f         db  0x00 ; '.'
0000000000009780         db  0xb4 ; '.'
0000000000009781         db  0xc5 ; '.'
0000000000009782         db  0xff ; '.'
0000000000009783         db  0xff ; '.'
0000000000009784         db  0x4c ; 'L'
0000000000009785         db  0x0d ; '.'
0000000000009786         db  0x00 ; '.'
0000000000009787         db  0x00 ; '.'
0000000000009788         db  0x14 ; '.'
0000000000009789         db  0xc6 ; '.'
000000000000978a         db  0xff ; '.'
000000000000978b         db  0xff ; '.'
000000000000978c         db  0x6c ; 'l'
000000000000978d         db  0x0d ; '.'
000000000000978e         db  0x00 ; '.'
000000000000978f         db  0x00 ; '.'
0000000000009790         db  0x54 ; 'T'
0000000000009791         db  0xc6 ; '.'
0000000000009792         db  0xff ; '.'
0000000000009793         db  0xff ; '.'
0000000000009794         db  0x8c ; '.'
0000000000009795         db  0x0d ; '.'
0000000000009796         db  0x00 ; '.'
0000000000009797         db  0x00 ; '.'
0000000000009798         db  0xd4 ; '.'
0000000000009799         db  0xc6 ; '.'
000000000000979a         db  0xff ; '.'
000000000000979b         db  0xff ; '.'
000000000000979c         db  0xc4 ; '.'
000000000000979d         db  0x0d ; '.'
000000000000979e         db  0x00 ; '.'
000000000000979f         db  0x00 ; '.'
00000000000097a0         db  0x14 ; '.'
00000000000097a1         db  0xc7 ; '.'
00000000000097a2         db  0xff ; '.'
00000000000097a3         db  0xff ; '.'
00000000000097a4         db  0xe4 ; '.'
00000000000097a5         db  0x0d ; '.'
00000000000097a6         db  0x00 ; '.'
00000000000097a7         db  0x00 ; '.'
00000000000097a8         db  0x74 ; 't'
00000000000097a9         db  0xc7 ; '.'
00000000000097aa         db  0xff ; '.'
00000000000097ab         db  0xff ; '.'
00000000000097ac         db  0x14 ; '.'
00000000000097ad         db  0x0e ; '.'
00000000000097ae         db  0x00 ; '.'
00000000000097af         db  0x00 ; '.'
00000000000097b0         db  0x94 ; '.'
00000000000097b1         db  0xd8 ; '.'
00000000000097b2         db  0xff ; '.'
00000000000097b3         db  0xff ; '.'
00000000000097b4         db  0x44 ; 'D'
00000000000097b5         db  0x0e ; '.'
00000000000097b6         db  0x00 ; '.'
00000000000097b7         db  0x00 ; '.'
00000000000097b8         db  0x94 ; '.'
00000000000097b9         db  0xda ; '.'
00000000000097ba         db  0xff ; '.'
00000000000097bb         db  0xff ; '.'
00000000000097bc         db  0x5c ; '\'
00000000000097bd         db  0x0e ; '.'
00000000000097be         db  0x00 ; '.'
00000000000097bf         db  0x00 ; '.'
00000000000097c0         db  0x84 ; '.'
00000000000097c1         db  0xe7 ; '.'
00000000000097c2         db  0xff ; '.'
00000000000097c3         db  0xff ; '.'
00000000000097c4         db  0xac ; '.'
00000000000097c5         db  0x0e ; '.'
00000000000097c6         db  0x00 ; '.'
00000000000097c7         db  0x00 ; '.'
00000000000097c8         db  0xf4 ; '.'
00000000000097c9         db  0xe7 ; '.'
00000000000097ca         db  0xff ; '.'
00000000000097cb         db  0xff ; '.'
00000000000097cc         db  0xf4 ; '.'
00000000000097cd         db  0x0e ; '.'
00000000000097ce         db  0x00 ; '.'
00000000000097cf         db  0x00 ; '.'
00000000000097d0         db  0x04 ; '.'
00000000000097d1         db  0xe8 ; '.'
00000000000097d2         db  0xff ; '.'
00000000000097d3         db  0xff ; '.'
00000000000097d4         db  0x0c ; '.'
00000000000097d5         db  0x0f ; '.'
00000000000097d6         db  0x00 ; '.'
00000000000097d7         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x97d8; 0xa440[ (3176 bytes)
        ; File offset : [38872; 42048[ (3176 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000097d8         dd         0x00000014                                  ; Length of the record
00000000000097dc         dd         0x00000000                                  ; CIE ID
00000000000097e0         db         0x01                                        ; Version
00000000000097e1         db         "zR", 0                                     ; Augmentation String
00000000000097e4         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
00000000000097e5         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
00000000000097e6         db         0x10                                        ; Return address register
00000000000097e7         db         0x01                                        ; Augmentation data length
00000000000097e8         db         0x1b                                        ; FDE encoding
00000000000097e9         db  0x0c ; '.'
00000000000097ea         db  0x07 ; '.'
00000000000097eb         db  0x08 ; '.'
00000000000097ec         db  0x90 ; '.'
00000000000097ed         db  0x01 ; '.'
00000000000097ee         db  0x07 ; '.'
00000000000097ef         db  0x10 ; '.'
00000000000097f0         dd         0x00000014                                  ; Length of the record
00000000000097f4         dd         0x0000001c                                  ; FDE: parent CIE at 0x97d8 (FDE encoding = 0x1B)
00000000000097f8         db         0xf8, 0x7e, 2 dup (0xff)                    ; begin 0x16f0
00000000000097fc         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x171b)
0000000000009800         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009801         align      8
0000000000009808         dd         0x00000014                                  ; Length of the record
000000000000980c         dd         0x00000000                                  ; CIE ID
0000000000009810         db         0x01                                        ; Version
0000000000009811         db         "zR", 0                                     ; Augmentation String
0000000000009814         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000009815         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000009816         db         0x10                                        ; Return address register
0000000000009817         db         0x01                                        ; Augmentation data length
0000000000009818         db         0x1b                                        ; FDE encoding
0000000000009819         db  0x0c ; '.'
000000000000981a         db  0x07 ; '.'
000000000000981b         db  0x08 ; '.'
000000000000981c         db  0x90 ; '.'
000000000000981d         db  0x01 ; '.'
000000000000981e         db  0x00 ; '.'
000000000000981f         db  0x00 ; '.'
0000000000009820         dd         0x00000024                                  ; Length of the record
0000000000009824         dd         0x0000001c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009828         db         0xc8, 0x7a, 2 dup (0xff)                    ; begin 0x12f0
000000000000982c         db         0x10, 0x03, 2 dup (0x00)                    ; length 0x310 (end at 0x1600)
0000000000009830         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009831         db  0x0e ; '.'
0000000000009832         db  0x10 ; '.'
0000000000009833         db  0x46 ; 'F'
0000000000009834         db  0x0e ; '.'
0000000000009835         db  0x18 ; '.'
0000000000009836         db  0x4a ; 'J'
0000000000009837         db  0x0f ; '.'
0000000000009838         db  0x0b ; '.'
0000000000009839         db  0x77 ; 'w'
000000000000983a         db  0x08 ; '.'
000000000000983b         db  0x80 ; '.'
000000000000983c         db  0x00 ; '.'
000000000000983d         db  0x3f ; '?'
000000000000983e         db  0x1a ; '.'
000000000000983f         db  0x3b ; ';'
0000000000009840         db  0x2a ; '*'
0000000000009841         db  0x33 ; '3'
0000000000009842         db  0x24 ; '$'
0000000000009843         db  0x22 ; '"'
0000000000009844         db  0x00 ; '.'
0000000000009845         db  0x00 ; '.'
0000000000009846         db  0x00 ; '.'
0000000000009847         db  0x00 ; '.'
0000000000009848         dd         0x00000014                                  ; Length of the record
000000000000984c         dd         0x00000044                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009850         db         0xb0, 0x7d, 2 dup (0xff)                    ; begin 0x1600
0000000000009854         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1608)
0000000000009858         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009859         align      32
0000000000009860         dd         0x00000010                                  ; Length of the record
0000000000009864         dd         0x0000005c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009868         db         0x98, 0x7f, 2 dup (0xff)                    ; begin 0x1800
000000000000986c         db         0x6a, 0x01, 2 dup (0x00)                    ; length 0x16a (end at 0x196a)
0000000000009870         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009871         align      4
0000000000009874         dd         0x00000014                                  ; Length of the record
0000000000009878         dd         0x00000070                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000987c         db         0xf4, 0x80, 2 dup (0xff)                    ; begin 0x1970
0000000000009880         db         0xaa, 3 dup (0x00)                          ; length 0xaa (end at 0x1a1a)
0000000000009884         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009885         db  0x47 ; 'G'
0000000000009886         db  0x0e ; '.'
0000000000009887         db  0xe0 ; '.'
0000000000009888         db  0x01 ; '.'
0000000000009889         db  0x00 ; '.'
000000000000988a         db  0x00 ; '.'
000000000000988b         db  0x00 ; '.'
000000000000988c         dd         0x0000001c                                  ; Length of the record
0000000000009890         dd         0x00000088                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009894         db         0x8c, 0x81, 2 dup (0xff)                    ; begin 0x1a20
0000000000009898         db         0xd4, 3 dup (0x00)                          ; length 0xd4 (end at 0x1af4)
000000000000989c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000989d         db  0x41 ; 'A'
000000000000989e         db  0x0e ; '.'
000000000000989f         db  0x10 ; '.'
00000000000098a0         db  0x83 ; '.'
00000000000098a1         db  0x02 ; '.'
00000000000098a2         db  0x02 ; '.'
00000000000098a3         db  0x85 ; '.'
00000000000098a4         db  0x0a ; '.'
00000000000098a5         db  0x0e ; '.'
00000000000098a6         db  0x08 ; '.'
00000000000098a7         db  0x4a ; 'J'
00000000000098a8         db  0x0b ; '.'
00000000000098a9         db  0x00 ; '.'
00000000000098aa         db  0x00 ; '.'
00000000000098ab         db  0x00 ; '.'
00000000000098ac         dd         0x00000014                                  ; Length of the record
00000000000098b0         dd         0x000000a8                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
00000000000098b4         db         0x4c, 0x82, 2 dup (0xff)                    ; begin 0x1b00
00000000000098b8         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x1b3c)
00000000000098bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000098bd         db  0x4f ; 'O'
00000000000098be         db  0x0e ; '.'
00000000000098bf         db  0x10 ; '.'
00000000000098c0         db  0x83 ; '.'
00000000000098c1         db  0x02 ; '.'
00000000000098c2         db  0x00 ; '.'
00000000000098c3         db  0x00 ; '.'
00000000000098c4         dd         0x00000010                                  ; Length of the record
00000000000098c8         dd         0x000000c0                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
00000000000098cc         db         0x74, 0x82, 2 dup (0xff)                    ; begin 0x1b40
00000000000098d0         db         0x2a, 3 dup (0x00)                          ; length 0x2a (end at 0x1b6a)
00000000000098d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000098d5         db  0x65 ; 'e'
00000000000098d6         db  0x0e ; '.'
00000000000098d7         db  0x10 ; '.'
00000000000098d8         dd         0x00000048                                  ; Length of the record
00000000000098dc         dd         0x000000d4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
00000000000098e0         db         0x90, 0x82, 2 dup (0xff)                    ; begin 0x1b70
00000000000098e4         db         0x6d, 0x05, 2 dup (0x00)                    ; length 0x56d (end at 0x20dd)
00000000000098e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000098e9         db  0x42 ; 'B'
00000000000098ea         db  0x0e ; '.'
00000000000098eb         db  0x10 ; '.'
00000000000098ec         db  0x8f ; '.'
00000000000098ed         db  0x02 ; '.'
00000000000098ee         db  0x42 ; 'B'
00000000000098ef         db  0x0e ; '.'
00000000000098f0         db  0x18 ; '.'
00000000000098f1         db  0x8e ; '.'
00000000000098f2         db  0x03 ; '.'
00000000000098f3         db  0x44 ; 'D'
00000000000098f4         db  0x0e ; '.'
00000000000098f5         db  0x20 ; ' '
00000000000098f6         db  0x8d ; '.'
00000000000098f7         db  0x04 ; '.'
00000000000098f8         db  0x42 ; 'B'
00000000000098f9         db  0x0e ; '.'
00000000000098fa         db  0x28 ; '('
00000000000098fb         db  0x8c ; '.'
00000000000098fc         db  0x05 ; '.'
00000000000098fd         db  0x41 ; 'A'
00000000000098fe         db  0x0e ; '.'
00000000000098ff         db  0x30 ; '0'
0000000000009900         db  0x86 ; '.'
0000000000009901         db  0x06 ; '.'
0000000000009902         db  0x41 ; 'A'
0000000000009903         db  0x0e ; '.'
0000000000009904         db  0x38 ; '8'
0000000000009905         db  0x83 ; '.'
0000000000009906         db  0x07 ; '.'
0000000000009907         db  0x47 ; 'G'
0000000000009908         db  0x0e ; '.'
0000000000009909         db  0xb0 ; '.'
000000000000990a         db  0x03 ; '.'
000000000000990b         db  0x02 ; '.'
000000000000990c         db  0xed ; '.'
000000000000990d         db  0x0a ; '.'
000000000000990e         db  0x0e ; '.'
000000000000990f         db  0x38 ; '8'
0000000000009910         db  0x41 ; 'A'
0000000000009911         db  0x0e ; '.'
0000000000009912         db  0x30 ; '0'
0000000000009913         db  0x41 ; 'A'
0000000000009914         db  0x0e ; '.'
0000000000009915         db  0x28 ; '('
0000000000009916         db  0x42 ; 'B'
0000000000009917         db  0x0e ; '.'
0000000000009918         db  0x20 ; ' '
0000000000009919         db  0x42 ; 'B'
000000000000991a         db  0x0e ; '.'
000000000000991b         db  0x18 ; '.'
000000000000991c         db  0x42 ; 'B'
000000000000991d         db  0x0e ; '.'
000000000000991e         db  0x10 ; '.'
000000000000991f         db  0x42 ; 'B'
0000000000009920         db  0x0e ; '.'
0000000000009921         db  0x08 ; '.'
0000000000009922         db  0x46 ; 'F'
0000000000009923         db  0x0b ; '.'
0000000000009924         dd         0x00000028                                  ; Length of the record
0000000000009928         dd         0x00000120                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000992c         db         0xb4, 0x87, 2 dup (0xff)                    ; begin 0x20e0
0000000000009930         db         0xd1, 0x05, 2 dup (0x00)                    ; length 0x5d1 (end at 0x26b1)
0000000000009934         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009935         db  0x41 ; 'A'
0000000000009936         db  0x0e ; '.'
0000000000009937         db  0x10 ; '.'
0000000000009938         db  0x86 ; '.'
0000000000009939         db  0x02 ; '.'
000000000000993a         db  0x41 ; 'A'
000000000000993b         db  0x0e ; '.'
000000000000993c         db  0x18 ; '.'
000000000000993d         db  0x83 ; '.'
000000000000993e         db  0x03 ; '.'
000000000000993f         db  0x47 ; 'G'
0000000000009940         db  0x0e ; '.'
0000000000009941         db  0xc0 ; '.'
0000000000009942         db  0x01 ; '.'
0000000000009943         db  0x02 ; '.'
0000000000009944         db  0x85 ; '.'
0000000000009945         db  0x0a ; '.'
0000000000009946         db  0x0e ; '.'
0000000000009947         db  0x18 ; '.'
0000000000009948         db  0x41 ; 'A'
0000000000009949         db  0x0e ; '.'
000000000000994a         db  0x10 ; '.'
000000000000994b         db  0x41 ; 'A'
000000000000994c         db  0x0e ; '.'
000000000000994d         db  0x08 ; '.'
000000000000994e         db  0x48 ; 'H'
000000000000994f         db  0x0b ; '.'
0000000000009950         dd         0x00000014                                  ; Length of the record
0000000000009954         dd         0x0000014c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009958         db         0x68, 0x8d, 2 dup (0xff)                    ; begin 0x26c0
000000000000995c         db         0x70, 3 dup (0x00)                          ; length 0x70 (end at 0x2730)
0000000000009960         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009961         db  0x02 ; '.'
0000000000009962         db  0x6b ; 'k'
0000000000009963         db  0x0e ; '.'
0000000000009964         db  0x10 ; '.'
0000000000009965         db  0x00 ; '.'
0000000000009966         db  0x00 ; '.'
0000000000009967         db  0x00 ; '.'
0000000000009968         dd         0x00000030                                  ; Length of the record
000000000000996c         dd         0x00000164                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009970         db         0xc0, 0x8d, 2 dup (0xff)                    ; begin 0x2730
0000000000009974         db         0x3f, 0x01, 2 dup (0x00)                    ; length 0x13f (end at 0x286f)
0000000000009978         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009979         db  0x44 ; 'D'
000000000000997a         db  0x0e ; '.'
000000000000997b         db  0x10 ; '.'
000000000000997c         db  0x02 ; '.'
000000000000997d         db  0x77 ; 'w'
000000000000997e         db  0x0a ; '.'
000000000000997f         db  0x0e ; '.'
0000000000009980         db  0x08 ; '.'
0000000000009981         db  0x45 ; 'E'
0000000000009982         db  0x0b ; '.'
0000000000009983         db  0x44 ; 'D'
0000000000009984         db  0x0a ; '.'
0000000000009985         db  0x0e ; '.'
0000000000009986         db  0x08 ; '.'
0000000000009987         db  0x4c ; 'L'
0000000000009988         db  0x0b ; '.'
0000000000009989         db  0x6a ; 'j'
000000000000998a         db  0x0a ; '.'
000000000000998b         db  0x0e ; '.'
000000000000998c         db  0x08 ; '.'
000000000000998d         db  0x46 ; 'F'
000000000000998e         db  0x0b ; '.'
000000000000998f         db  0x52 ; 'R'
0000000000009990         db  0x0a ; '.'
0000000000009991         db  0x0e ; '.'
0000000000009992         db  0x08 ; '.'
0000000000009993         db  0x46 ; 'F'
0000000000009994         db  0x0b ; '.'
0000000000009995         db  0x44 ; 'D'
0000000000009996         db  0x0a ; '.'
0000000000009997         db  0x0e ; '.'
0000000000009998         db  0x08 ; '.'
0000000000009999         db  0x4c ; 'L'
000000000000999a         db  0x0b ; '.'
000000000000999b         db  0x00 ; '.'
000000000000999c         dd         0x00000048                                  ; Length of the record
00000000000099a0         dd         0x00000198                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
00000000000099a4         db         0xcc, 0x8e, 2 dup (0xff)                    ; begin 0x2870
00000000000099a8         db         0xd9, 0x03, 2 dup (0x00)                    ; length 0x3d9 (end at 0x2c49)
00000000000099ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000099ad         db  0x42 ; 'B'
00000000000099ae         db  0x0e ; '.'
00000000000099af         db  0x10 ; '.'
00000000000099b0         db  0x8f ; '.'
00000000000099b1         db  0x02 ; '.'
00000000000099b2         db  0x42 ; 'B'
00000000000099b3         db  0x0e ; '.'
00000000000099b4         db  0x18 ; '.'
00000000000099b5         db  0x8e ; '.'
00000000000099b6         db  0x03 ; '.'
00000000000099b7         db  0x42 ; 'B'
00000000000099b8         db  0x0e ; '.'
00000000000099b9         db  0x20 ; ' '
00000000000099ba         db  0x8d ; '.'
00000000000099bb         db  0x04 ; '.'
00000000000099bc         db  0x42 ; 'B'
00000000000099bd         db  0x0e ; '.'
00000000000099be         db  0x28 ; '('
00000000000099bf         db  0x8c ; '.'
00000000000099c0         db  0x05 ; '.'
00000000000099c1         db  0x41 ; 'A'
00000000000099c2         db  0x0e ; '.'
00000000000099c3         db  0x30 ; '0'
00000000000099c4         db  0x86 ; '.'
00000000000099c5         db  0x06 ; '.'
00000000000099c6         db  0x41 ; 'A'
00000000000099c7         db  0x0e ; '.'
00000000000099c8         db  0x38 ; '8'
00000000000099c9         db  0x83 ; '.'
00000000000099ca         db  0x07 ; '.'
00000000000099cb         db  0x44 ; 'D'
00000000000099cc         db  0x0e ; '.'
00000000000099cd         db  0x50 ; 'P'
00000000000099ce         db  0x03 ; '.'
00000000000099cf         db  0x76 ; 'v'
00000000000099d0         db  0x02 ; '.'
00000000000099d1         db  0x0a ; '.'
00000000000099d2         db  0x0e ; '.'
00000000000099d3         db  0x38 ; '8'
00000000000099d4         db  0x41 ; 'A'
00000000000099d5         db  0x0e ; '.'
00000000000099d6         db  0x30 ; '0'
00000000000099d7         db  0x41 ; 'A'
00000000000099d8         db  0x0e ; '.'
00000000000099d9         db  0x28 ; '('
00000000000099da         db  0x42 ; 'B'
00000000000099db         db  0x0e ; '.'
00000000000099dc         db  0x20 ; ' '
00000000000099dd         db  0x42 ; 'B'
00000000000099de         db  0x0e ; '.'
00000000000099df         db  0x18 ; '.'
00000000000099e0         db  0x42 ; 'B'
00000000000099e1         db  0x0e ; '.'
00000000000099e2         db  0x10 ; '.'
00000000000099e3         db  0x42 ; 'B'
00000000000099e4         db  0x0e ; '.'
00000000000099e5         db  0x08 ; '.'
00000000000099e6         db  0x42 ; 'B'
00000000000099e7         db  0x0b ; '.'
00000000000099e8         dd         0x0000002c                                  ; Length of the record
00000000000099ec         dd         0x000001e4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
00000000000099f0         db         0x60, 0x92, 2 dup (0xff)                    ; begin 0x2c50
00000000000099f4         db         0x48, 0x01, 2 dup (0x00)                    ; length 0x148 (end at 0x2d98)
00000000000099f8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000099f9         db  0x4f ; 'O'
00000000000099fa         db  0x0e ; '.'
00000000000099fb         db  0x10 ; '.'
00000000000099fc         db  0x83 ; '.'
00000000000099fd         db  0x02 ; '.'
00000000000099fe         db  0x02 ; '.'
00000000000099ff         db  0x60 ; '`'
0000000000009a00         db  0x0a ; '.'
0000000000009a01         db  0x0e ; '.'
0000000000009a02         db  0x08 ; '.'
0000000000009a03         db  0x49 ; 'I'
0000000000009a04         db  0x0b ; '.'
0000000000009a05         db  0x7b ; '{'
0000000000009a06         db  0x0a ; '.'
0000000000009a07         db  0x0e ; '.'
0000000000009a08         db  0x08 ; '.'
0000000000009a09         db  0x55 ; 'U'
0000000000009a0a         db  0x0b ; '.'
0000000000009a0b         db  0x7e ; '~'
0000000000009a0c         db  0x0a ; '.'
0000000000009a0d         db  0x0e ; '.'
0000000000009a0e         db  0x08 ; '.'
0000000000009a0f         db  0x4a ; 'J'
0000000000009a10         db  0x0b ; '.'
0000000000009a11         db  0x41 ; 'A'
0000000000009a12         db  0x0a ; '.'
0000000000009a13         db  0x0e ; '.'
0000000000009a14         db  0x08 ; '.'
0000000000009a15         db  0x47 ; 'G'
0000000000009a16         db  0x0b ; '.'
0000000000009a17         db  0x00 ; '.'
0000000000009a18         dd         0x00000028                                  ; Length of the record
0000000000009a1c         dd         0x00000214                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009a20         db         0x80, 0x93, 2 dup (0xff)                    ; begin 0x2da0
0000000000009a24         db         0x3a, 0x05, 2 dup (0x00)                    ; length 0x53a (end at 0x32da)
0000000000009a28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a29         db  0x42 ; 'B'
0000000000009a2a         db  0x0e ; '.'
0000000000009a2b         db  0x10 ; '.'
0000000000009a2c         db  0x8d ; '.'
0000000000009a2d         db  0x02 ; '.'
0000000000009a2e         db  0x42 ; 'B'
0000000000009a2f         db  0x0e ; '.'
0000000000009a30         db  0x18 ; '.'
0000000000009a31         db  0x8c ; '.'
0000000000009a32         db  0x03 ; '.'
0000000000009a33         db  0x41 ; 'A'
0000000000009a34         db  0x0e ; '.'
0000000000009a35         db  0x20 ; ' '
0000000000009a36         db  0x86 ; '.'
0000000000009a37         db  0x04 ; '.'
0000000000009a38         db  0x41 ; 'A'
0000000000009a39         db  0x0e ; '.'
0000000000009a3a         db  0x28 ; '('
0000000000009a3b         db  0x83 ; '.'
0000000000009a3c         db  0x05 ; '.'
0000000000009a3d         db  0x49 ; 'I'
0000000000009a3e         db  0x0e ; '.'
0000000000009a3f         db  0xb0 ; '.'
0000000000009a40         db  0x01 ; '.'
0000000000009a41         db  0x00 ; '.'
0000000000009a42         db  0x00 ; '.'
0000000000009a43         db  0x00 ; '.'
0000000000009a44         dd         0x00000028                                  ; Length of the record
0000000000009a48         dd         0x00000240                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009a4c         db         0xc4, 0x7b, 2 dup (0xff)                    ; begin 0x1610
0000000000009a50         db         0xd3, 3 dup (0x00)                          ; length 0xd3 (end at 0x16e3)
0000000000009a54         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a55         db  0x41 ; 'A'
0000000000009a56         db  0x0e ; '.'
0000000000009a57         db  0x10 ; '.'
0000000000009a58         db  0x86 ; '.'
0000000000009a59         db  0x02 ; '.'
0000000000009a5a         db  0x41 ; 'A'
0000000000009a5b         db  0x0e ; '.'
0000000000009a5c         db  0x18 ; '.'
0000000000009a5d         db  0x83 ; '.'
0000000000009a5e         db  0x03 ; '.'
0000000000009a5f         db  0x49 ; 'I'
0000000000009a60         db  0x0e ; '.'
0000000000009a61         db  0x20 ; ' '
0000000000009a62         db  0x02 ; '.'
0000000000009a63         db  0x8b ; '.'
0000000000009a64         db  0x0a ; '.'
0000000000009a65         db  0x0e ; '.'
0000000000009a66         db  0x18 ; '.'
0000000000009a67         db  0x41 ; 'A'
0000000000009a68         db  0x0e ; '.'
0000000000009a69         db  0x10 ; '.'
0000000000009a6a         db  0x41 ; 'A'
0000000000009a6b         db  0x0e ; '.'
0000000000009a6c         db  0x08 ; '.'
0000000000009a6d         db  0x41 ; 'A'
0000000000009a6e         db  0x0b ; '.'
0000000000009a6f         db  0x00 ; '.'
0000000000009a70         dd         0x00000010                                  ; Length of the record
0000000000009a74         dd         0x0000026c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009a78         db         0x68, 0x98, 2 dup (0xff)                    ; begin 0x32e0
0000000000009a7c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x32e8)
0000000000009a80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a81         align      4
0000000000009a84         dd         0x00000010                                  ; Length of the record
0000000000009a88         dd         0x00000280                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009a8c         db         0x64, 0x98, 2 dup (0xff)                    ; begin 0x32f0
0000000000009a90         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x32f8)
0000000000009a94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009a95         align      8
0000000000009a98         dd         0x0000002c                                  ; Length of the record
0000000000009a9c         dd         0x00000294                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009aa0         db         0x60, 0x98, 2 dup (0xff)                    ; begin 0x3300
0000000000009aa4         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x33a4)
0000000000009aa8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009aa9         db  0x41 ; 'A'
0000000000009aaa         db  0x0e ; '.'
0000000000009aab         db  0x10 ; '.'
0000000000009aac         db  0x86 ; '.'
0000000000009aad         db  0x02 ; '.'
0000000000009aae         db  0x41 ; 'A'
0000000000009aaf         db  0x0e ; '.'
0000000000009ab0         db  0x18 ; '.'
0000000000009ab1         db  0x83 ; '.'
0000000000009ab2         db  0x03 ; '.'
0000000000009ab3         db  0x44 ; 'D'
0000000000009ab4         db  0x0e ; '.'
0000000000009ab5         db  0x20 ; ' '
0000000000009ab6         db  0x7a ; 'z'
0000000000009ab7         db  0x0a ; '.'
0000000000009ab8         db  0x0e ; '.'
0000000000009ab9         db  0x18 ; '.'
0000000000009aba         db  0x41 ; 'A'
0000000000009abb         db  0x0e ; '.'
0000000000009abc         db  0x10 ; '.'
0000000000009abd         db  0x41 ; 'A'
0000000000009abe         db  0x0e ; '.'
0000000000009abf         db  0x08 ; '.'
0000000000009ac0         db  0x41 ; 'A'
0000000000009ac1         db  0x0b ; '.'
0000000000009ac2         db  0x00 ; '.'
0000000000009ac3         db  0x00 ; '.'
0000000000009ac4         db  0x00 ; '.'
0000000000009ac5         db  0x00 ; '.'
0000000000009ac6         db  0x00 ; '.'
0000000000009ac7         db  0x00 ; '.'
0000000000009ac8         dd         0x00000014                                  ; Length of the record
0000000000009acc         dd         0x000002c4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009ad0         db         0xe0, 0x98, 2 dup (0xff)                    ; begin 0x33b0
0000000000009ad4         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x33f2)
0000000000009ad8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ad9         align      32
0000000000009ae0         dd         0x0000001c                                  ; Length of the record
0000000000009ae4         dd         0x000002dc                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009ae8         db         0x18, 0x99, 2 dup (0xff)                    ; begin 0x3400
0000000000009aec         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x349f)
0000000000009af0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009af1         db  0x44 ; 'D'
0000000000009af2         db  0x0e ; '.'
0000000000009af3         db  0x10 ; '.'
0000000000009af4         db  0x83 ; '.'
0000000000009af5         db  0x02 ; '.'
0000000000009af6         db  0x02 ; '.'
0000000000009af7         db  0x78 ; 'x'
0000000000009af8         db  0x0a ; '.'
0000000000009af9         db  0x0e ; '.'
0000000000009afa         db  0x08 ; '.'
0000000000009afb         db  0x41 ; 'A'
0000000000009afc         db  0x0b ; '.'
0000000000009afd         db  0x00 ; '.'
0000000000009afe         db  0x00 ; '.'
0000000000009aff         db  0x00 ; '.'
0000000000009b00         dd         0x00000040                                  ; Length of the record
0000000000009b04         dd         0x000002fc                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009b08         db         0x98, 0x99, 2 dup (0xff)                    ; begin 0x34a0
0000000000009b0c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x3587)
0000000000009b10         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b11         db  0x41 ; 'A'
0000000000009b12         db  0x0e ; '.'
0000000000009b13         db  0x10 ; '.'
0000000000009b14         db  0x86 ; '.'
0000000000009b15         db  0x02 ; '.'
0000000000009b16         db  0x41 ; 'A'
0000000000009b17         db  0x0e ; '.'
0000000000009b18         db  0x18 ; '.'
0000000000009b19         db  0x83 ; '.'
0000000000009b1a         db  0x03 ; '.'
0000000000009b1b         db  0x49 ; 'I'
0000000000009b1c         db  0x0e ; '.'
0000000000009b1d         db  0x20 ; ' '
0000000000009b1e         db  0x6e ; 'n'
0000000000009b1f         db  0x0a ; '.'
0000000000009b20         db  0x0e ; '.'
0000000000009b21         db  0x18 ; '.'
0000000000009b22         db  0x41 ; 'A'
0000000000009b23         db  0x0e ; '.'
0000000000009b24         db  0x10 ; '.'
0000000000009b25         db  0x41 ; 'A'
0000000000009b26         db  0x0e ; '.'
0000000000009b27         db  0x08 ; '.'
0000000000009b28         db  0x45 ; 'E'
0000000000009b29         db  0x0b ; '.'
0000000000009b2a         db  0x02 ; '.'
0000000000009b2b         db  0x4a ; 'J'
0000000000009b2c         db  0x0a ; '.'
0000000000009b2d         db  0x0e ; '.'
0000000000009b2e         db  0x18 ; '.'
0000000000009b2f         db  0x41 ; 'A'
0000000000009b30         db  0x0e ; '.'
0000000000009b31         db  0x10 ; '.'
0000000000009b32         db  0x41 ; 'A'
0000000000009b33         db  0x0e ; '.'
0000000000009b34         db  0x08 ; '.'
0000000000009b35         db  0x44 ; 'D'
0000000000009b36         db  0x0b ; '.'
0000000000009b37         db  0x02 ; '.'
0000000000009b38         db  0x54 ; 'T'
0000000000009b39         db  0x0e ; '.'
0000000000009b3a         db  0x18 ; '.'
0000000000009b3b         db  0x41 ; 'A'
0000000000009b3c         db  0x0e ; '.'
0000000000009b3d         db  0x10 ; '.'
0000000000009b3e         db  0x41 ; 'A'
0000000000009b3f         db  0x0e ; '.'
0000000000009b40         db  0x08 ; '.'
0000000000009b41         db  0x00 ; '.'
0000000000009b42         db  0x00 ; '.'
0000000000009b43         db  0x00 ; '.'
0000000000009b44         dd         0x00000074                                  ; Length of the record
0000000000009b48         dd         0x00000340                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009b4c         db         0x44, 0x9a, 2 dup (0xff)                    ; begin 0x3590
0000000000009b50         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x47c4)
0000000000009b54         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009b55         db  0x42 ; 'B'
0000000000009b56         db  0x0e ; '.'
0000000000009b57         db  0x10 ; '.'
0000000000009b58         db  0x8f ; '.'
0000000000009b59         db  0x02 ; '.'
0000000000009b5a         db  0x42 ; 'B'
0000000000009b5b         db  0x0e ; '.'
0000000000009b5c         db  0x18 ; '.'
0000000000009b5d         db  0x8e ; '.'
0000000000009b5e         db  0x03 ; '.'
0000000000009b5f         db  0x45 ; 'E'
0000000000009b60         db  0x0e ; '.'
0000000000009b61         db  0x20 ; ' '
0000000000009b62         db  0x8d ; '.'
0000000000009b63         db  0x04 ; '.'
0000000000009b64         db  0x42 ; 'B'
0000000000009b65         db  0x0e ; '.'
0000000000009b66         db  0x28 ; '('
0000000000009b67         db  0x8c ; '.'
0000000000009b68         db  0x05 ; '.'
0000000000009b69         db  0x44 ; 'D'
0000000000009b6a         db  0x0e ; '.'
0000000000009b6b         db  0x30 ; '0'
0000000000009b6c         db  0x86 ; '.'
0000000000009b6d         db  0x06 ; '.'
0000000000009b6e         db  0x41 ; 'A'
0000000000009b6f         db  0x0e ; '.'
0000000000009b70         db  0x38 ; '8'
0000000000009b71         db  0x83 ; '.'
0000000000009b72         db  0x07 ; '.'
0000000000009b73         db  0x53 ; 'S'
0000000000009b74         db  0x0e ; '.'
0000000000009b75         db  0xf0 ; '.'
0000000000009b76         db  0x01 ; '.'
0000000000009b77         db  0x03 ; '.'
0000000000009b78         db  0x81 ; '.'
0000000000009b79         db  0x0b ; '.'
0000000000009b7a         db  0x0e ; '.'
0000000000009b7b         db  0xf8 ; '.'
0000000000009b7c         db  0x01 ; '.'
0000000000009b7d         db  0x4a ; 'J'
0000000000009b7e         db  0x0e ; '.'
0000000000009b7f         db  0x80 ; '.'
0000000000009b80         db  0x02 ; '.'
0000000000009b81         db  0x44 ; 'D'
0000000000009b82         db  0x0e ; '.'
0000000000009b83         db  0x88 ; '.'
0000000000009b84         db  0x02 ; '.'
0000000000009b85         db  0x45 ; 'E'
0000000000009b86         db  0x0e ; '.'
0000000000009b87         db  0x90 ; '.'
0000000000009b88         db  0x02 ; '.'
0000000000009b89         db  0x5f ; '_'
0000000000009b8a         db  0x0e ; '.'
0000000000009b8b         db  0xf0 ; '.'
0000000000009b8c         db  0x01 ; '.'
0000000000009b8d         db  0x64 ; 'd'
0000000000009b8e         db  0x0a ; '.'
0000000000009b8f         db  0x0e ; '.'
0000000000009b90         db  0x38 ; '8'
0000000000009b91         db  0x41 ; 'A'
0000000000009b92         db  0x0e ; '.'
0000000000009b93         db  0x30 ; '0'
0000000000009b94         db  0x41 ; 'A'
0000000000009b95         db  0x0e ; '.'
0000000000009b96         db  0x28 ; '('
0000000000009b97         db  0x42 ; 'B'
0000000000009b98         db  0x0e ; '.'
0000000000009b99         db  0x20 ; ' '
0000000000009b9a         db  0x42 ; 'B'
0000000000009b9b         db  0x0e ; '.'
0000000000009b9c         db  0x18 ; '.'
0000000000009b9d         db  0x42 ; 'B'
0000000000009b9e         db  0x0e ; '.'
0000000000009b9f         db  0x10 ; '.'
0000000000009ba0         db  0x42 ; 'B'
0000000000009ba1         db  0x0e ; '.'
0000000000009ba2         db  0x08 ; '.'
0000000000009ba3         db  0x44 ; 'D'
0000000000009ba4         db  0x0b ; '.'
0000000000009ba5         db  0x03 ; '.'
0000000000009ba6         db  0x99 ; '.'
0000000000009ba7         db  0x05 ; '.'
0000000000009ba8         db  0x0e ; '.'
0000000000009ba9         db  0xf8 ; '.'
0000000000009baa         db  0x01 ; '.'
0000000000009bab         db  0x4d ; 'M'
0000000000009bac         db  0x0e ; '.'
0000000000009bad         db  0x80 ; '.'
0000000000009bae         db  0x02 ; '.'
0000000000009baf         db  0x44 ; 'D'
0000000000009bb0         db  0x0e ; '.'
0000000000009bb1         db  0x88 ; '.'
0000000000009bb2         db  0x02 ; '.'
0000000000009bb3         db  0x47 ; 'G'
0000000000009bb4         db  0x0e ; '.'
0000000000009bb5         db  0x90 ; '.'
0000000000009bb6         db  0x02 ; '.'
0000000000009bb7         db  0x5b ; '['
0000000000009bb8         db  0x0e ; '.'
0000000000009bb9         db  0xf0 ; '.'
0000000000009bba         db  0x01 ; '.'
0000000000009bbb         db  0x00 ; '.'
0000000000009bbc         dd         0x00000068                                  ; Length of the record
0000000000009bc0         dd         0x000003b8                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009bc4         db         0x0c, 0xac, 2 dup (0xff)                    ; begin 0x47d0
0000000000009bc8         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x497b)
0000000000009bcc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009bcd         db  0x42 ; 'B'
0000000000009bce         db  0x0e ; '.'
0000000000009bcf         db  0x10 ; '.'
0000000000009bd0         db  0x8f ; '.'
0000000000009bd1         db  0x02 ; '.'
0000000000009bd2         db  0x42 ; 'B'
0000000000009bd3         db  0x0e ; '.'
0000000000009bd4         db  0x18 ; '.'
0000000000009bd5         db  0x8e ; '.'
0000000000009bd6         db  0x03 ; '.'
0000000000009bd7         db  0x45 ; 'E'
0000000000009bd8         db  0x0e ; '.'
0000000000009bd9         db  0x20 ; ' '
0000000000009bda         db  0x8d ; '.'
0000000000009bdb         db  0x04 ; '.'
0000000000009bdc         db  0x42 ; 'B'
0000000000009bdd         db  0x0e ; '.'
0000000000009bde         db  0x28 ; '('
0000000000009bdf         db  0x8c ; '.'
0000000000009be0         db  0x05 ; '.'
0000000000009be1         db  0x44 ; 'D'
0000000000009be2         db  0x0e ; '.'
0000000000009be3         db  0x30 ; '0'
0000000000009be4         db  0x86 ; '.'
0000000000009be5         db  0x06 ; '.'
0000000000009be6         db  0x41 ; 'A'
0000000000009be7         db  0x0e ; '.'
0000000000009be8         db  0x38 ; '8'
0000000000009be9         db  0x83 ; '.'
0000000000009bea         db  0x07 ; '.'
0000000000009beb         db  0x47 ; 'G'
0000000000009bec         db  0x0e ; '.'
0000000000009bed         db  0x60 ; '`'
0000000000009bee         db  0x02 ; '.'
0000000000009bef         db  0x99 ; '.'
0000000000009bf0         db  0x0e ; '.'
0000000000009bf1         db  0x68 ; 'h'
0000000000009bf2         db  0x5f ; '_'
0000000000009bf3         db  0x0e ; '.'
0000000000009bf4         db  0x70 ; 'p'
0000000000009bf5         db  0x46 ; 'F'
0000000000009bf6         db  0x0e ; '.'
0000000000009bf7         db  0x78 ; 'x'
0000000000009bf8         db  0x42 ; 'B'
0000000000009bf9         db  0x0e ; '.'
0000000000009bfa         db  0x80 ; '.'
0000000000009bfb         db  0x01 ; '.'
0000000000009bfc         db  0x59 ; 'Y'
0000000000009bfd         db  0x0e ; '.'
0000000000009bfe         db  0x60 ; '`'
0000000000009bff         db  0x02 ; '.'
0000000000009c00         db  0x40 ; '@'
0000000000009c01         db  0x0e ; '.'
0000000000009c02         db  0x68 ; 'h'
0000000000009c03         db  0x4b ; 'K'
0000000000009c04         db  0x0e ; '.'
0000000000009c05         db  0x70 ; 'p'
0000000000009c06         db  0x43 ; 'C'
0000000000009c07         db  0x0e ; '.'
0000000000009c08         db  0x78 ; 'x'
0000000000009c09         db  0x45 ; 'E'
0000000000009c0a         db  0x0e ; '.'
0000000000009c0b         db  0x80 ; '.'
0000000000009c0c         db  0x01 ; '.'
0000000000009c0d         db  0x5e ; '^'
0000000000009c0e         db  0x0e ; '.'
0000000000009c0f         db  0x60 ; '`'
0000000000009c10         db  0x4c ; 'L'
0000000000009c11         db  0x0a ; '.'
0000000000009c12         db  0x0e ; '.'
0000000000009c13         db  0x38 ; '8'
0000000000009c14         db  0x44 ; 'D'
0000000000009c15         db  0x0e ; '.'
0000000000009c16         db  0x30 ; '0'
0000000000009c17         db  0x41 ; 'A'
0000000000009c18         db  0x0e ; '.'
0000000000009c19         db  0x28 ; '('
0000000000009c1a         db  0x42 ; 'B'
0000000000009c1b         db  0x0e ; '.'
0000000000009c1c         db  0x20 ; ' '
0000000000009c1d         db  0x42 ; 'B'
0000000000009c1e         db  0x0e ; '.'
0000000000009c1f         db  0x18 ; '.'
0000000000009c20         db  0x42 ; 'B'
0000000000009c21         db  0x0e ; '.'
0000000000009c22         db  0x10 ; '.'
0000000000009c23         db  0x42 ; 'B'
0000000000009c24         db  0x0e ; '.'
0000000000009c25         db  0x08 ; '.'
0000000000009c26         db  0x46 ; 'F'
0000000000009c27         db  0x0b ; '.'
0000000000009c28         dd         0x00000028                                  ; Length of the record
0000000000009c2c         dd         0x00000424                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009c30         db         0x50, 0xad, 2 dup (0xff)                    ; begin 0x4980
0000000000009c34         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x49b6)
0000000000009c38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c39         db  0x42 ; 'B'
0000000000009c3a         db  0x0e ; '.'
0000000000009c3b         db  0x10 ; '.'
0000000000009c3c         db  0x8c ; '.'
0000000000009c3d         db  0x02 ; '.'
0000000000009c3e         db  0x41 ; 'A'
0000000000009c3f         db  0x0e ; '.'
0000000000009c40         db  0x18 ; '.'
0000000000009c41         db  0x86 ; '.'
0000000000009c42         db  0x03 ; '.'
0000000000009c43         db  0x41 ; 'A'
0000000000009c44         db  0x0e ; '.'
0000000000009c45         db  0x20 ; ' '
0000000000009c46         db  0x83 ; '.'
0000000000009c47         db  0x04 ; '.'
0000000000009c48         db  0x6e ; 'n'
0000000000009c49         db  0x0e ; '.'
0000000000009c4a         db  0x18 ; '.'
0000000000009c4b         db  0x41 ; 'A'
0000000000009c4c         db  0x0e ; '.'
0000000000009c4d         db  0x10 ; '.'
0000000000009c4e         db  0x42 ; 'B'
0000000000009c4f         db  0x0e ; '.'
0000000000009c50         db  0x08 ; '.'
0000000000009c51         db  0x00 ; '.'
0000000000009c52         db  0x00 ; '.'
0000000000009c53         db  0x00 ; '.'
0000000000009c54         dd         0x00000010                                  ; Length of the record
0000000000009c58         dd         0x00000450                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009c5c         db         0x64, 0xad, 2 dup (0xff)                    ; begin 0x49c0
0000000000009c60         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x49d1)
0000000000009c64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c65         align      8
0000000000009c68         dd         0x00000010                                  ; Length of the record
0000000000009c6c         dd         0x00000464                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009c70         db         0x70, 0xad, 2 dup (0xff)                    ; begin 0x49e0
0000000000009c74         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x49f1)
0000000000009c78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c79         align      4
0000000000009c7c         dd         0x00000010                                  ; Length of the record
0000000000009c80         dd         0x00000478                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009c84         db         0x7c, 0xad, 2 dup (0xff)                    ; begin 0x4a00
0000000000009c88         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x4a35)
0000000000009c8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009c8d         align      16
0000000000009c90         dd         0x00000010                                  ; Length of the record
0000000000009c94         dd         0x0000048c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009c98         db         0xa8, 0xad, 2 dup (0xff)                    ; begin 0x4a40
0000000000009c9c         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x4a55)
0000000000009ca0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ca1         align      4
0000000000009ca4         dd         0x00000010                                  ; Length of the record
0000000000009ca8         dd         0x000004a0                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009cac         db         0xb4, 0xad, 2 dup (0xff)                    ; begin 0x4a60
0000000000009cb0         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x4a90)
0000000000009cb4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009cb5         db  0x6b ; 'k'
0000000000009cb6         db  0x0e ; '.'
0000000000009cb7         db  0x10 ; '.'
0000000000009cb8         dd         0x00000050                                  ; Length of the record
0000000000009cbc         dd         0x000004b4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009cc0         db         0xd0, 0xad, 2 dup (0xff)                    ; begin 0x4a90
0000000000009cc4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x4b04)
0000000000009cc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009cc9         db  0x42 ; 'B'
0000000000009cca         db  0x0e ; '.'
0000000000009ccb         db  0x10 ; '.'
0000000000009ccc         db  0x8f ; '.'
0000000000009ccd         db  0x02 ; '.'
0000000000009cce         db  0x42 ; 'B'
0000000000009ccf         db  0x0e ; '.'
0000000000009cd0         db  0x18 ; '.'
0000000000009cd1         db  0x8e ; '.'
0000000000009cd2         db  0x03 ; '.'
0000000000009cd3         db  0x49 ; 'I'
0000000000009cd4         db  0x0e ; '.'
0000000000009cd5         db  0x20 ; ' '
0000000000009cd6         db  0x8d ; '.'
0000000000009cd7         db  0x04 ; '.'
0000000000009cd8         db  0x42 ; 'B'
0000000000009cd9         db  0x0e ; '.'
0000000000009cda         db  0x28 ; '('
0000000000009cdb         db  0x8c ; '.'
0000000000009cdc         db  0x05 ; '.'
0000000000009cdd         db  0x44 ; 'D'
0000000000009cde         db  0x0e ; '.'
0000000000009cdf         db  0x30 ; '0'
0000000000009ce0         db  0x86 ; '.'
0000000000009ce1         db  0x06 ; '.'
0000000000009ce2         db  0x41 ; 'A'
0000000000009ce3         db  0x0e ; '.'
0000000000009ce4         db  0x38 ; '8'
0000000000009ce5         db  0x83 ; '.'
0000000000009ce6         db  0x07 ; '.'
0000000000009ce7         db  0x4d ; 'M'
0000000000009ce8         db  0x0e ; '.'
0000000000009ce9         db  0x50 ; 'P'
0000000000009cea         db  0x5f ; '_'
0000000000009ceb         db  0x0e ; '.'
0000000000009cec         db  0x58 ; 'X'
0000000000009ced         db  0x47 ; 'G'
0000000000009cee         db  0x0e ; '.'
0000000000009cef         db  0x60 ; '`'
0000000000009cf0         db  0x46 ; 'F'
0000000000009cf1         db  0x0e ; '.'
0000000000009cf2         db  0x68 ; 'h'
0000000000009cf3         db  0x44 ; 'D'
0000000000009cf4         db  0x0e ; '.'
0000000000009cf5         db  0x70 ; 'p'
0000000000009cf6         db  0x58 ; 'X'
0000000000009cf7         db  0x0e ; '.'
0000000000009cf8         db  0x38 ; '8'
0000000000009cf9         db  0x41 ; 'A'
0000000000009cfa         db  0x0e ; '.'
0000000000009cfb         db  0x30 ; '0'
0000000000009cfc         db  0x41 ; 'A'
0000000000009cfd         db  0x0e ; '.'
0000000000009cfe         db  0x28 ; '('
0000000000009cff         db  0x42 ; 'B'
0000000000009d00         db  0x0e ; '.'
0000000000009d01         db  0x20 ; ' '
0000000000009d02         db  0x42 ; 'B'
0000000000009d03         db  0x0e ; '.'
0000000000009d04         db  0x18 ; '.'
0000000000009d05         db  0x42 ; 'B'
0000000000009d06         db  0x0e ; '.'
0000000000009d07         db  0x10 ; '.'
0000000000009d08         db  0x42 ; 'B'
0000000000009d09         db  0x0e ; '.'
0000000000009d0a         db  0x08 ; '.'
0000000000009d0b         db  0x00 ; '.'
0000000000009d0c         dd         0x00000068                                  ; Length of the record
0000000000009d10         dd         0x00000508                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009d14         db         0xfc, 0xad, 2 dup (0xff)                    ; begin 0x4b10
0000000000009d18         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x4bf3)
0000000000009d1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009d1d         db  0x42 ; 'B'
0000000000009d1e         db  0x0e ; '.'
0000000000009d1f         db  0x10 ; '.'
0000000000009d20         db  0x8f ; '.'
0000000000009d21         db  0x02 ; '.'
0000000000009d22         db  0x42 ; 'B'
0000000000009d23         db  0x0e ; '.'
0000000000009d24         db  0x18 ; '.'
0000000000009d25         db  0x8e ; '.'
0000000000009d26         db  0x03 ; '.'
0000000000009d27         db  0x49 ; 'I'
0000000000009d28         db  0x0e ; '.'
0000000000009d29         db  0x20 ; ' '
0000000000009d2a         db  0x8d ; '.'
0000000000009d2b         db  0x04 ; '.'
0000000000009d2c         db  0x42 ; 'B'
0000000000009d2d         db  0x0e ; '.'
0000000000009d2e         db  0x28 ; '('
0000000000009d2f         db  0x8c ; '.'
0000000000009d30         db  0x05 ; '.'
0000000000009d31         db  0x44 ; 'D'
0000000000009d32         db  0x0e ; '.'
0000000000009d33         db  0x30 ; '0'
0000000000009d34         db  0x86 ; '.'
0000000000009d35         db  0x06 ; '.'
0000000000009d36         db  0x41 ; 'A'
0000000000009d37         db  0x0e ; '.'
0000000000009d38         db  0x38 ; '8'
0000000000009d39         db  0x83 ; '.'
0000000000009d3a         db  0x07 ; '.'
0000000000009d3b         db  0x4d ; 'M'
0000000000009d3c         db  0x0e ; '.'
0000000000009d3d         db  0x70 ; 'p'
0000000000009d3e         db  0x65 ; 'e'
0000000000009d3f         db  0x0e ; '.'
0000000000009d40         db  0x78 ; 'x'
0000000000009d41         db  0x4d ; 'M'
0000000000009d42         db  0x0e ; '.'
0000000000009d43         db  0x80 ; '.'
0000000000009d44         db  0x01 ; '.'
0000000000009d45         db  0x46 ; 'F'
0000000000009d46         db  0x0e ; '.'
0000000000009d47         db  0x88 ; '.'
0000000000009d48         db  0x01 ; '.'
0000000000009d49         db  0x42 ; 'B'
0000000000009d4a         db  0x0e ; '.'
0000000000009d4b         db  0x90 ; '.'
0000000000009d4c         db  0x01 ; '.'
0000000000009d4d         db  0x5e ; '^'
0000000000009d4e         db  0x0e ; '.'
0000000000009d4f         db  0x70 ; 'p'
0000000000009d50         db  0x56 ; 'V'
0000000000009d51         db  0x0e ; '.'
0000000000009d52         db  0x78 ; 'x'
0000000000009d53         db  0x43 ; 'C'
0000000000009d54         db  0x0e ; '.'
0000000000009d55         db  0x80 ; '.'
0000000000009d56         db  0x01 ; '.'
0000000000009d57         db  0x43 ; 'C'
0000000000009d58         db  0x0e ; '.'
0000000000009d59         db  0x88 ; '.'
0000000000009d5a         db  0x01 ; '.'
0000000000009d5b         db  0x56 ; 'V'
0000000000009d5c         db  0x0e ; '.'
0000000000009d5d         db  0x90 ; '.'
0000000000009d5e         db  0x01 ; '.'
0000000000009d5f         db  0x52 ; 'R'
0000000000009d60         db  0x0e ; '.'
0000000000009d61         db  0x70 ; 'p'
0000000000009d62         db  0x5b ; '['
0000000000009d63         db  0x0e ; '.'
0000000000009d64         db  0x38 ; '8'
0000000000009d65         db  0x41 ; 'A'
0000000000009d66         db  0x0e ; '.'
0000000000009d67         db  0x30 ; '0'
0000000000009d68         db  0x41 ; 'A'
0000000000009d69         db  0x0e ; '.'
0000000000009d6a         db  0x28 ; '('
0000000000009d6b         db  0x42 ; 'B'
0000000000009d6c         db  0x0e ; '.'
0000000000009d6d         db  0x20 ; ' '
0000000000009d6e         db  0x42 ; 'B'
0000000000009d6f         db  0x0e ; '.'
0000000000009d70         db  0x18 ; '.'
0000000000009d71         db  0x42 ; 'B'
0000000000009d72         db  0x0e ; '.'
0000000000009d73         db  0x10 ; '.'
0000000000009d74         db  0x42 ; 'B'
0000000000009d75         db  0x0e ; '.'
0000000000009d76         db  0x08 ; '.'
0000000000009d77         db  0x00 ; '.'
0000000000009d78         dd         0x00000010                                  ; Length of the record
0000000000009d7c         dd         0x00000574                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009d80         db         0x80, 0xae, 2 dup (0xff)                    ; begin 0x4c00
0000000000009d84         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4c0a)
0000000000009d88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009d89         align      4
0000000000009d8c         dd         0x00000028                                  ; Length of the record
0000000000009d90         dd         0x00000588                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009d94         db         0x7c, 0xae, 2 dup (0xff)                    ; begin 0x4c10
0000000000009d98         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x4ca3)
0000000000009d9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009d9d         db  0x48 ; 'H'
0000000000009d9e         db  0x0e ; '.'
0000000000009d9f         db  0x10 ; '.'
0000000000009da0         db  0x8c ; '.'
0000000000009da1         db  0x02 ; '.'
0000000000009da2         db  0x48 ; 'H'
0000000000009da3         db  0x0e ; '.'
0000000000009da4         db  0x18 ; '.'
0000000000009da5         db  0x86 ; '.'
0000000000009da6         db  0x03 ; '.'
0000000000009da7         db  0x41 ; 'A'
0000000000009da8         db  0x0e ; '.'
0000000000009da9         db  0x20 ; ' '
0000000000009daa         db  0x83 ; '.'
0000000000009dab         db  0x04 ; '.'
0000000000009dac         db  0x02 ; '.'
0000000000009dad         db  0x74 ; 't'
0000000000009dae         db  0x0e ; '.'
0000000000009daf         db  0x18 ; '.'
0000000000009db0         db  0x4b ; 'K'
0000000000009db1         db  0x0e ; '.'
0000000000009db2         db  0x10 ; '.'
0000000000009db3         db  0x42 ; 'B'
0000000000009db4         db  0x0e ; '.'
0000000000009db5         db  0x08 ; '.'
0000000000009db6         db  0x00 ; '.'
0000000000009db7         db  0x00 ; '.'
0000000000009db8         dd         0x00000010                                  ; Length of the record
0000000000009dbc         dd         0x000005b4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009dc0         db         0xf0, 0xae, 2 dup (0xff)                    ; begin 0x4cb0
0000000000009dc4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4cc3)
0000000000009dc8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009dc9         align      4
0000000000009dcc         dd         0x00000010                                  ; Length of the record
0000000000009dd0         dd         0x000005c8                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009dd4         db         0xfc, 0xae, 2 dup (0xff)                    ; begin 0x4cd0
0000000000009dd8         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4cdc)
0000000000009ddc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ddd         align      32
0000000000009de0         dd         0x00000010                                  ; Length of the record
0000000000009de4         dd         0x000005dc                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009de8         db         0xf8, 0xae, 2 dup (0xff)                    ; begin 0x4ce0
0000000000009dec         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4cf8)
0000000000009df0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009df1         align      4
0000000000009df4         dd         0x00000010                                  ; Length of the record
0000000000009df8         dd         0x000005f0                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009dfc         db         0x04, 0xaf, 2 dup (0xff)                    ; begin 0x4d00
0000000000009e00         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4d14)
0000000000009e04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e05         align      8
0000000000009e08         dd         0x00000018                                  ; Length of the record
0000000000009e0c         dd         0x00000604                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009e10         db         0x10, 0xaf, 2 dup (0xff)                    ; begin 0x4d20
0000000000009e14         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4dae)
0000000000009e18         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e19         db  0x44 ; 'D'
0000000000009e1a         db  0x0e ; '.'
0000000000009e1b         db  0x50 ; 'P'
0000000000009e1c         db  0x02 ; '.'
0000000000009e1d         db  0x7f ; '.'
0000000000009e1e         db  0x0a ; '.'
0000000000009e1f         db  0x0e ; '.'
0000000000009e20         db  0x08 ; '.'
0000000000009e21         db  0x41 ; 'A'
0000000000009e22         db  0x0b ; '.'
0000000000009e23         db  0x00 ; '.'
0000000000009e24         dd         0x00000018                                  ; Length of the record
0000000000009e28         dd         0x00000620                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009e2c         db         0x84, 0xaf, 2 dup (0xff)                    ; begin 0x4db0
0000000000009e30         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4e3a)
0000000000009e34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e35         db  0x44 ; 'D'
0000000000009e36         db  0x0e ; '.'
0000000000009e37         db  0x50 ; 'P'
0000000000009e38         db  0x02 ; '.'
0000000000009e39         db  0x7b ; '{'
0000000000009e3a         db  0x0a ; '.'
0000000000009e3b         db  0x0e ; '.'
0000000000009e3c         db  0x08 ; '.'
0000000000009e3d         db  0x41 ; 'A'
0000000000009e3e         db  0x0b ; '.'
0000000000009e3f         db  0x00 ; '.'
0000000000009e40         dd         0x00000010                                  ; Length of the record
0000000000009e44         dd         0x0000063c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009e48         db         0xf8, 0xaf, 2 dup (0xff)                    ; begin 0x4e40
0000000000009e4c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4e4c)
0000000000009e50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e51         align      4
0000000000009e54         dd         0x00000010                                  ; Length of the record
0000000000009e58         dd         0x00000650                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009e5c         db         0xf4, 0xaf, 2 dup (0xff)                    ; begin 0x4e50
0000000000009e60         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x4e5f)
0000000000009e64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e65         align      8
0000000000009e68         dd         0x00000018                                  ; Length of the record
0000000000009e6c         dd         0x00000664                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009e70         db         0xf0, 0xaf, 2 dup (0xff)                    ; begin 0x4e60
0000000000009e74         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x4ef8)
0000000000009e78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e79         db  0x44 ; 'D'
0000000000009e7a         db  0x0e ; '.'
0000000000009e7b         db  0x50 ; 'P'
0000000000009e7c         db  0x02 ; '.'
0000000000009e7d         db  0x8e ; '.'
0000000000009e7e         db  0x0a ; '.'
0000000000009e7f         db  0x0e ; '.'
0000000000009e80         db  0x08 ; '.'
0000000000009e81         db  0x41 ; 'A'
0000000000009e82         db  0x0b ; '.'
0000000000009e83         db  0x00 ; '.'
0000000000009e84         dd         0x00000010                                  ; Length of the record
0000000000009e88         dd         0x00000680                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009e8c         db         0x74, 0xb0, 2 dup (0xff)                    ; begin 0x4f00
0000000000009e90         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x4f10)
0000000000009e94         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009e95         align      8
0000000000009e98         dd         0x00000010                                  ; Length of the record
0000000000009e9c         dd         0x00000694                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009ea0         db         0x70, 0xb0, 2 dup (0xff)                    ; begin 0x4f10
0000000000009ea4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4f21)
0000000000009ea8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ea9         align      4
0000000000009eac         dd         0x00000010                                  ; Length of the record
0000000000009eb0         dd         0x000006a8                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009eb4         db         0x7c, 0xb0, 2 dup (0xff)                    ; begin 0x4f30
0000000000009eb8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4f3a)
0000000000009ebc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ebd         align      64
0000000000009ec0         dd         0x00000018                                  ; Length of the record
0000000000009ec4         dd         0x000006bc                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009ec8         db         0x78, 0xb0, 2 dup (0xff)                    ; begin 0x4f40
0000000000009ecc         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4fce)
0000000000009ed0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009ed1         db  0x44 ; 'D'
0000000000009ed2         db  0x0e ; '.'
0000000000009ed3         db  0x50 ; 'P'
0000000000009ed4         db  0x02 ; '.'
0000000000009ed5         db  0x7f ; '.'
0000000000009ed6         db  0x0a ; '.'
0000000000009ed7         db  0x0e ; '.'
0000000000009ed8         db  0x08 ; '.'
0000000000009ed9         db  0x41 ; 'A'
0000000000009eda         db  0x0b ; '.'
0000000000009edb         db  0x00 ; '.'
0000000000009edc         dd         0x00000018                                  ; Length of the record
0000000000009ee0         dd         0x000006d8                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009ee4         db         0xec, 0xb0, 2 dup (0xff)                    ; begin 0x4fd0
0000000000009ee8         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x5061)
0000000000009eec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009eed         db  0x44 ; 'D'
0000000000009eee         db  0x0e ; '.'
0000000000009eef         db  0x50 ; 'P'
0000000000009ef0         db  0x02 ; '.'
0000000000009ef1         db  0x82 ; '.'
0000000000009ef2         db  0x0a ; '.'
0000000000009ef3         db  0x0e ; '.'
0000000000009ef4         db  0x08 ; '.'
0000000000009ef5         db  0x41 ; 'A'
0000000000009ef6         db  0x0b ; '.'
0000000000009ef7         db  0x00 ; '.'
0000000000009ef8         dd         0x00000010                                  ; Length of the record
0000000000009efc         dd         0x000006f4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f00         db         0x70, 0xb1, 2 dup (0xff)                    ; begin 0x5070
0000000000009f04         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x507c)
0000000000009f08         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f09         align      4
0000000000009f0c         dd         0x00000010                                  ; Length of the record
0000000000009f10         dd         0x00000708                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f14         db         0x6c, 0xb1, 2 dup (0xff)                    ; begin 0x5080
0000000000009f18         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5097)
0000000000009f1c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f1d         align      32
0000000000009f20         dd         0x00000010                                  ; Length of the record
0000000000009f24         dd         0x0000071c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f28         db         0x78, 0xb1, 2 dup (0xff)                    ; begin 0x50a0
0000000000009f2c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x50b3)
0000000000009f30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f31         align      4
0000000000009f34         dd         0x00000010                                  ; Length of the record
0000000000009f38         dd         0x00000730                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f3c         db         0x84, 0xb1, 2 dup (0xff)                    ; begin 0x50c0
0000000000009f40         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x50cc)
0000000000009f44         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f45         align      8
0000000000009f48         dd         0x00000010                                  ; Length of the record
0000000000009f4c         dd         0x00000744                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f50         db         0x80, 0xb1, 2 dup (0xff)                    ; begin 0x50d0
0000000000009f54         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x50e4)
0000000000009f58         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f59         align      4
0000000000009f5c         dd         0x00000010                                  ; Length of the record
0000000000009f60         dd         0x00000758                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f64         db         0x8c, 0xb1, 2 dup (0xff)                    ; begin 0x50f0
0000000000009f68         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5103)
0000000000009f6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f6d         align      16
0000000000009f70         dd         0x00000014                                  ; Length of the record
0000000000009f74         dd         0x0000076c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f78         db         0x98, 0xb1, 2 dup (0xff)                    ; begin 0x5110
0000000000009f7c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x5128)
0000000000009f80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f81         align      8
0000000000009f88         dd         0x00000014                                  ; Length of the record
0000000000009f8c         dd         0x00000784                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009f90         db         0xa0, 0xb1, 2 dup (0xff)                    ; begin 0x5130
0000000000009f94         db         0xa4, 0x02, 2 dup (0x00)                    ; length 0x2a4 (end at 0x53d4)
0000000000009f98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009f99         align      32
0000000000009fa0         dd         0x0000004c                                  ; Length of the record
0000000000009fa4         dd         0x0000079c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009fa8         db         0x38, 0xb4, 2 dup (0xff)                    ; begin 0x53e0
0000000000009fac         db         0xb5, 3 dup (0x00)                          ; length 0xb5 (end at 0x5495)
0000000000009fb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000009fb1         db  0x42 ; 'B'
0000000000009fb2         db  0x0e ; '.'
0000000000009fb3         db  0x10 ; '.'
0000000000009fb4         db  0x8e ; '.'
0000000000009fb5         db  0x02 ; '.'
0000000000009fb6         db  0x42 ; 'B'
0000000000009fb7         db  0x0e ; '.'
0000000000009fb8         db  0x18 ; '.'
0000000000009fb9         db  0x8d ; '.'
0000000000009fba         db  0x03 ; '.'
0000000000009fbb         db  0x45 ; 'E'
0000000000009fbc         db  0x0e ; '.'
0000000000009fbd         db  0x20 ; ' '
0000000000009fbe         db  0x8c ; '.'
0000000000009fbf         db  0x04 ; '.'
0000000000009fc0         db  0x41 ; 'A'
0000000000009fc1         db  0x0e ; '.'
0000000000009fc2         db  0x28 ; '('
0000000000009fc3         db  0x86 ; '.'
0000000000009fc4         db  0x05 ; '.'
0000000000009fc5         db  0x44 ; 'D'
0000000000009fc6         db  0x0e ; '.'
0000000000009fc7         db  0x30 ; '0'
0000000000009fc8         db  0x83 ; '.'
0000000000009fc9         db  0x06 ; '.'
0000000000009fca         db  0x7f ; '.'
0000000000009fcb         db  0x0a ; '.'
0000000000009fcc         db  0x0e ; '.'
0000000000009fcd         db  0x28 ; '('
0000000000009fce         db  0x41 ; 'A'
0000000000009fcf         db  0x0e ; '.'
0000000000009fd0         db  0x20 ; ' '
0000000000009fd1         db  0x42 ; 'B'
0000000000009fd2         db  0x0e ; '.'
0000000000009fd3         db  0x18 ; '.'
0000000000009fd4         db  0x42 ; 'B'
0000000000009fd5         db  0x0e ; '.'
0000000000009fd6         db  0x10 ; '.'
0000000000009fd7         db  0x42 ; 'B'
0000000000009fd8         db  0x0e ; '.'
0000000000009fd9         db  0x08 ; '.'
0000000000009fda         db  0x4c ; 'L'
0000000000009fdb         db  0x0b ; '.'
0000000000009fdc         db  0x5b ; '['
0000000000009fdd         db  0x0a ; '.'
0000000000009fde         db  0x0e ; '.'
0000000000009fdf         db  0x28 ; '('
0000000000009fe0         db  0x41 ; 'A'
0000000000009fe1         db  0x0e ; '.'
0000000000009fe2         db  0x20 ; ' '
0000000000009fe3         db  0x42 ; 'B'
0000000000009fe4         db  0x0e ; '.'
0000000000009fe5         db  0x18 ; '.'
0000000000009fe6         db  0x42 ; 'B'
0000000000009fe7         db  0x0e ; '.'
0000000000009fe8         db  0x10 ; '.'
0000000000009fe9         db  0x42 ; 'B'
0000000000009fea         db  0x0e ; '.'
0000000000009feb         db  0x08 ; '.'
0000000000009fec         db  0x45 ; 'E'
0000000000009fed         db  0x0b ; '.'
0000000000009fee         db  0x00 ; '.'
0000000000009fef         db  0x00 ; '.'
0000000000009ff0         dd         0x00000014                                  ; Length of the record
0000000000009ff4         dd         0x000007ec                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
0000000000009ff8         db         0xa8, 0xb4, 2 dup (0xff)                    ; begin 0x54a0
0000000000009ffc         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x54af)
000000000000a000         db         0x00                                        ; Augmentation length (LEB128=0), DATA XREF=unary_operator+1275
000000000000a001         align      8
000000000000a008         dd         0x00000018                                  ; Length of the record
000000000000a00c         dd         0x00000804                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a010         db         0xa0, 0xb4, 2 dup (0xff)                    ; begin 0x54b0
000000000000a014         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x54ca)
000000000000a018         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a019         db  0x41 ; 'A'
000000000000a01a         db  0x0e ; '.'
000000000000a01b         db  0x10 ; '.'
000000000000a01c         db  0x83 ; '.'
000000000000a01d         db  0x02 ; '.'
000000000000a01e         db  0x53 ; 'S'
000000000000a01f         db  0x0a ; '.'
000000000000a020         db  0x0e ; '.'
000000000000a021         db  0x08 ; '.'
000000000000a022         db  0x41 ; 'A'
000000000000a023         db  0x0b ; '.'
000000000000a024         dd         0x00000010                                  ; Length of the record
000000000000a028         dd         0x00000820                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a02c         db         0xa4, 0xb4, 2 dup (0xff)                    ; begin 0x54d0
000000000000a030         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x54f4)
000000000000a034         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a035         db  0x5f ; '_'
000000000000a036         db  0x0e ; '.'
000000000000a037         db  0x10 ; '.'
000000000000a038         dd         0x00000010                                  ; Length of the record
000000000000a03c         dd         0x00000834                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a040         db         0xc0, 0xb4, 2 dup (0xff)                    ; begin 0x5500
000000000000a044         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x5502)
000000000000a048         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a049         align      4
000000000000a04c         dd         0x00000020                                  ; Length of the record
000000000000a050         dd         0x00000848                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a054         db         0xbc, 0xb4, 2 dup (0xff)                    ; begin 0x5510
000000000000a058         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5546)
000000000000a05c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a05d         db  0x44 ; 'D'
000000000000a05e         db  0x0e ; '.'
000000000000a05f         db  0x10 ; '.'
000000000000a060         db  0x83 ; '.'
000000000000a061         db  0x02 ; '.'
000000000000a062         db  0x5d ; ']'
000000000000a063         db  0x0a ; '.'
000000000000a064         db  0x0e ; '.'
000000000000a065         db  0x08 ; '.'
000000000000a066         db  0x47 ; 'G'
000000000000a067         db  0x0b ; '.'
000000000000a068         db  0x48 ; 'H'
000000000000a069         db  0x0a ; '.'
000000000000a06a         db  0x0e ; '.'
000000000000a06b         db  0x08 ; '.'
000000000000a06c         db  0x41 ; 'A'
000000000000a06d         db  0x0b ; '.'
000000000000a06e         db  0x00 ; '.'
000000000000a06f         db  0x00 ; '.'
000000000000a070         dd         0x00000010                                  ; Length of the record
000000000000a074         dd         0x0000086c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a078         db         0xd8, 0xb4, 2 dup (0xff)                    ; begin 0x5550
000000000000a07c         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x5574)
000000000000a080         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a081         db  0x5f ; '_'
000000000000a082         db  0x0e ; '.'
000000000000a083         db  0x10 ; '.'
000000000000a084         dd         0x00000014                                  ; Length of the record
000000000000a088         dd         0x00000880                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a08c         db         0xf4, 0xb4, 2 dup (0xff)                    ; begin 0x5580
000000000000a090         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x5602)
000000000000a094         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a095         db  0x02 ; '.'
000000000000a096         db  0x5f ; '_'
000000000000a097         db  0x0e ; '.'
000000000000a098         db  0x10 ; '.'
000000000000a099         db  0x49 ; 'I'
000000000000a09a         db  0x0e ; '.'
000000000000a09b         db  0x08 ; '.'
000000000000a09c         dd         0x00000014                                  ; Length of the record
000000000000a0a0         dd         0x00000898                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a0a4         db         0x6c, 0xb5, 2 dup (0xff)                    ; begin 0x5610
000000000000a0a8         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x565a)
000000000000a0ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a0ad         db  0x02 ; '.'
000000000000a0ae         db  0x45 ; 'E'
000000000000a0af         db  0x0e ; '.'
000000000000a0b0         db  0x10 ; '.'
000000000000a0b1         db  0x00 ; '.'
000000000000a0b2         db  0x00 ; '.'
000000000000a0b3         db  0x00 ; '.'
000000000000a0b4         dd         0x00000018                                  ; Length of the record
000000000000a0b8         dd         0x000008b0                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a0bc         db         0xa4, 0xb5, 2 dup (0xff)                    ; begin 0x5660
000000000000a0c0         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5677)
000000000000a0c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a0c5         db  0x41 ; 'A'
000000000000a0c6         db  0x0e ; '.'
000000000000a0c7         db  0x10 ; '.'
000000000000a0c8         db  0x83 ; '.'
000000000000a0c9         db  0x02 ; '.'
000000000000a0ca         db  0x51 ; 'Q'
000000000000a0cb         db  0x0e ; '.'
000000000000a0cc         db  0x08 ; '.'
000000000000a0cd         db  0x00 ; '.'
000000000000a0ce         db  0x00 ; '.'
000000000000a0cf         db  0x00 ; '.'
000000000000a0d0         dd         0x00000018                                  ; Length of the record
000000000000a0d4         dd         0x000008cc                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a0d8         db         0xa8, 0xb5, 2 dup (0xff)                    ; begin 0x5680
000000000000a0dc         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x56ae)
000000000000a0e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a0e1         db  0x47 ; 'G'
000000000000a0e2         db  0x0e ; '.'
000000000000a0e3         db  0x10 ; '.'
000000000000a0e4         db  0x61 ; 'a'
000000000000a0e5         db  0x0a ; '.'
000000000000a0e6         db  0x0e ; '.'
000000000000a0e7         db  0x08 ; '.'
000000000000a0e8         db  0x41 ; 'A'
000000000000a0e9         db  0x0b ; '.'
000000000000a0ea         db  0x00 ; '.'
000000000000a0eb         db  0x00 ; '.'
000000000000a0ec         dd         0x00000024                                  ; Length of the record
000000000000a0f0         dd         0x000008e8                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a0f4         db         0xbc, 0xb5, 2 dup (0xff)                    ; begin 0x56b0
000000000000a0f8         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x56d8)
000000000000a0fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a0fd         db  0x41 ; 'A'
000000000000a0fe         db  0x0e ; '.'
000000000000a0ff         db  0x10 ; '.'
000000000000a100         db  0x86 ; '.'
000000000000a101         db  0x02 ; '.'
000000000000a102         db  0x41 ; 'A'
000000000000a103         db  0x0e ; '.'
000000000000a104         db  0x18 ; '.'
000000000000a105         db  0x83 ; '.'
000000000000a106         db  0x03 ; '.'
000000000000a107         db  0x4d ; 'M'
000000000000a108         db  0x0e ; '.'
000000000000a109         db  0x20 ; ' '
000000000000a10a         db  0x49 ; 'I'
000000000000a10b         db  0x0e ; '.'
000000000000a10c         db  0x18 ; '.'
000000000000a10d         db  0x47 ; 'G'
000000000000a10e         db  0x0e ; '.'
000000000000a10f         db  0x10 ; '.'
000000000000a110         db  0x41 ; 'A'
000000000000a111         db  0x0e ; '.'
000000000000a112         db  0x08 ; '.'
000000000000a113         db  0x00 ; '.'
000000000000a114         dd         0x00000018                                  ; Length of the record
000000000000a118         dd         0x00000910                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a11c         db         0xc4, 0xb5, 2 dup (0xff)                    ; begin 0x56e0
000000000000a120         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x56f3)
000000000000a124         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a125         db  0x41 ; 'A'
000000000000a126         db  0x0e ; '.'
000000000000a127         db  0x10 ; '.'
000000000000a128         db  0x83 ; '.'
000000000000a129         db  0x02 ; '.'
000000000000a12a         db  0x50 ; 'P'
000000000000a12b         db  0x0e ; '.'
000000000000a12c         db  0x08 ; '.'
000000000000a12d         db  0x00 ; '.'
000000000000a12e         db  0x00 ; '.'
000000000000a12f         db  0x00 ; '.'
000000000000a130         dd         0x00000014                                  ; Length of the record
000000000000a134         dd         0x0000092c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a138         db         0xc8, 0xb5, 2 dup (0xff)                    ; begin 0x5700
000000000000a13c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5735)
000000000000a140         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a141         db  0x4b ; 'K'
000000000000a142         db  0x0e ; '.'
000000000000a143         db  0x10 ; '.'
000000000000a144         db  0x00 ; '.'
000000000000a145         db  0x00 ; '.'
000000000000a146         db  0x00 ; '.'
000000000000a147         db  0x00 ; '.'
000000000000a148         dd         0x00000048                                  ; Length of the record
000000000000a14c         dd         0x00000944                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a150         db         0xf0, 0xb5, 2 dup (0xff)                    ; begin 0x5740
000000000000a154         db         0x43, 0x01, 2 dup (0x00)                    ; length 0x143 (end at 0x5883)
000000000000a158         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a159         db  0x42 ; 'B'
000000000000a15a         db  0x0e ; '.'
000000000000a15b         db  0x10 ; '.'
000000000000a15c         db  0x8f ; '.'
000000000000a15d         db  0x02 ; '.'
000000000000a15e         db  0x42 ; 'B'
000000000000a15f         db  0x0e ; '.'
000000000000a160         db  0x18 ; '.'
000000000000a161         db  0x8e ; '.'
000000000000a162         db  0x03 ; '.'
000000000000a163         db  0x42 ; 'B'
000000000000a164         db  0x0e ; '.'
000000000000a165         db  0x20 ; ' '
000000000000a166         db  0x8d ; '.'
000000000000a167         db  0x04 ; '.'
000000000000a168         db  0x42 ; 'B'
000000000000a169         db  0x0e ; '.'
000000000000a16a         db  0x28 ; '('
000000000000a16b         db  0x8c ; '.'
000000000000a16c         db  0x05 ; '.'
000000000000a16d         db  0x41 ; 'A'
000000000000a16e         db  0x0e ; '.'
000000000000a16f         db  0x30 ; '0'
000000000000a170         db  0x86 ; '.'
000000000000a171         db  0x06 ; '.'
000000000000a172         db  0x41 ; 'A'
000000000000a173         db  0x0e ; '.'
000000000000a174         db  0x38 ; '8'
000000000000a175         db  0x83 ; '.'
000000000000a176         db  0x07 ; '.'
000000000000a177         db  0x44 ; 'D'
000000000000a178         db  0x0e ; '.'
000000000000a179         db  0x60 ; '`'
000000000000a17a         db  0x02 ; '.'
000000000000a17b         db  0xfc ; '.'
000000000000a17c         db  0x0a ; '.'
000000000000a17d         db  0x0e ; '.'
000000000000a17e         db  0x38 ; '8'
000000000000a17f         db  0x41 ; 'A'
000000000000a180         db  0x0e ; '.'
000000000000a181         db  0x30 ; '0'
000000000000a182         db  0x41 ; 'A'
000000000000a183         db  0x0e ; '.'
000000000000a184         db  0x28 ; '('
000000000000a185         db  0x42 ; 'B'
000000000000a186         db  0x0e ; '.'
000000000000a187         db  0x20 ; ' '
000000000000a188         db  0x42 ; 'B'
000000000000a189         db  0x0e ; '.'
000000000000a18a         db  0x18 ; '.'
000000000000a18b         db  0x42 ; 'B'
000000000000a18c         db  0x0e ; '.'
000000000000a18d         db  0x10 ; '.'
000000000000a18e         db  0x42 ; 'B'
000000000000a18f         db  0x0e ; '.'
000000000000a190         db  0x08 ; '.'
000000000000a191         db  0x41 ; 'A'
000000000000a192         db  0x0b ; '.'
000000000000a193         db  0x00 ; '.'
000000000000a194         dd         0x00000018                                  ; Length of the record
000000000000a198         dd         0x00000990                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a19c         db         0xf4, 0xb6, 2 dup (0xff)                    ; begin 0x5890
000000000000a1a0         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5934)
000000000000a1a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1a5         db  0x44 ; 'D'
000000000000a1a6         db  0x0e ; '.'
000000000000a1a7         db  0x20 ; ' '
000000000000a1a8         db  0x02 ; '.'
000000000000a1a9         db  0x7e ; '~'
000000000000a1aa         db  0x0a ; '.'
000000000000a1ab         db  0x0e ; '.'
000000000000a1ac         db  0x08 ; '.'
000000000000a1ad         db  0x46 ; 'F'
000000000000a1ae         db  0x0b ; '.'
000000000000a1af         db  0x00 ; '.'
000000000000a1b0         dd         0x0000003c                                  ; Length of the record
000000000000a1b4         dd         0x000009ac                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a1b8         db         0x88, 0xb7, 2 dup (0xff)                    ; begin 0x5940
000000000000a1bc         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x59c3)
000000000000a1c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1c1         db  0x42 ; 'B'
000000000000a1c2         db  0x0e ; '.'
000000000000a1c3         db  0x10 ; '.'
000000000000a1c4         db  0x8d ; '.'
000000000000a1c5         db  0x02 ; '.'
000000000000a1c6         db  0x42 ; 'B'
000000000000a1c7         db  0x0e ; '.'
000000000000a1c8         db  0x18 ; '.'
000000000000a1c9         db  0x8c ; '.'
000000000000a1ca         db  0x03 ; '.'
000000000000a1cb         db  0x44 ; 'D'
000000000000a1cc         db  0x0e ; '.'
000000000000a1cd         db  0x20 ; ' '
000000000000a1ce         db  0x86 ; '.'
000000000000a1cf         db  0x04 ; '.'
000000000000a1d0         db  0x41 ; 'A'
000000000000a1d1         db  0x0e ; '.'
000000000000a1d2         db  0x28 ; '('
000000000000a1d3         db  0x83 ; '.'
000000000000a1d4         db  0x05 ; '.'
000000000000a1d5         db  0x4a ; 'J'
000000000000a1d6         db  0x0e ; '.'
000000000000a1d7         db  0x40 ; '@'
000000000000a1d8         db  0x02 ; '.'
000000000000a1d9         db  0x64 ; 'd'
000000000000a1da         db  0x0a ; '.'
000000000000a1db         db  0x0e ; '.'
000000000000a1dc         db  0x28 ; '('
000000000000a1dd         db  0x41 ; 'A'
000000000000a1de         db  0x0e ; '.'
000000000000a1df         db  0x20 ; ' '
000000000000a1e0         db  0x41 ; 'A'
000000000000a1e1         db  0x0e ; '.'
000000000000a1e2         db  0x18 ; '.'
000000000000a1e3         db  0x42 ; 'B'
000000000000a1e4         db  0x0e ; '.'
000000000000a1e5         db  0x10 ; '.'
000000000000a1e6         db  0x42 ; 'B'
000000000000a1e7         db  0x0e ; '.'
000000000000a1e8         db  0x08 ; '.'
000000000000a1e9         db  0x41 ; 'A'
000000000000a1ea         db  0x0b ; '.'
000000000000a1eb         db  0x00 ; '.'
000000000000a1ec         db  0x00 ; '.'
000000000000a1ed         db  0x00 ; '.'
000000000000a1ee         db  0x00 ; '.'
000000000000a1ef         db  0x00 ; '.'
000000000000a1f0         dd         0x00000024                                  ; Length of the record
000000000000a1f4         dd         0x000009ec                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a1f8         db         0xd8, 0xb7, 2 dup (0xff)                    ; begin 0x59d0
000000000000a1fc         db         0x7e, 3 dup (0x00)                          ; length 0x7e (end at 0x5a4e)
000000000000a200         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a201         db  0x41 ; 'A'
000000000000a202         db  0x0e ; '.'
000000000000a203         db  0x10 ; '.'
000000000000a204         db  0x83 ; '.'
000000000000a205         db  0x02 ; '.'
000000000000a206         db  0x4c ; 'L'
000000000000a207         db  0x0e ; '.'
000000000000a208         db  0x20 ; ' '
000000000000a209         db  0x02 ; '.'
000000000000a20a         db  0x49 ; 'I'
000000000000a20b         db  0x0a ; '.'
000000000000a20c         db  0x0e ; '.'
000000000000a20d         db  0x10 ; '.'
000000000000a20e         db  0x41 ; 'A'
000000000000a20f         db  0x0e ; '.'
000000000000a210         db  0x08 ; '.'
000000000000a211         db  0x41 ; 'A'
000000000000a212         db  0x0b ; '.'
000000000000a213         db  0x00 ; '.'
000000000000a214         db  0x00 ; '.'
000000000000a215         db  0x00 ; '.'
000000000000a216         db  0x00 ; '.'
000000000000a217         db  0x00 ; '.'
000000000000a218         dd         0x0000004c                                  ; Length of the record
000000000000a21c         dd         0x00000a14                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a220         db         0x30, 0xb8, 2 dup (0xff)                    ; begin 0x5a50
000000000000a224         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x5acd)
000000000000a228         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a229         db  0x42 ; 'B'
000000000000a22a         db  0x0e ; '.'
000000000000a22b         db  0x10 ; '.'
000000000000a22c         db  0x8c ; '.'
000000000000a22d         db  0x02 ; '.'
000000000000a22e         db  0x41 ; 'A'
000000000000a22f         db  0x0e ; '.'
000000000000a230         db  0x18 ; '.'
000000000000a231         db  0x86 ; '.'
000000000000a232         db  0x03 ; '.'
000000000000a233         db  0x44 ; 'D'
000000000000a234         db  0x0e ; '.'
000000000000a235         db  0x20 ; ' '
000000000000a236         db  0x83 ; '.'
000000000000a237         db  0x04 ; '.'
000000000000a238         db  0x69 ; 'i'
000000000000a239         db  0x0a ; '.'
000000000000a23a         db  0x0e ; '.'
000000000000a23b         db  0x18 ; '.'
000000000000a23c         db  0x41 ; 'A'
000000000000a23d         db  0x0e ; '.'
000000000000a23e         db  0x10 ; '.'
000000000000a23f         db  0x42 ; 'B'
000000000000a240         db  0x0e ; '.'
000000000000a241         db  0x08 ; '.'
000000000000a242         db  0x45 ; 'E'
000000000000a243         db  0x0b ; '.'
000000000000a244         db  0x55 ; 'U'
000000000000a245         db  0x0a ; '.'
000000000000a246         db  0x0e ; '.'
000000000000a247         db  0x18 ; '.'
000000000000a248         db  0x41 ; 'A'
000000000000a249         db  0x0e ; '.'
000000000000a24a         db  0x10 ; '.'
000000000000a24b         db  0x42 ; 'B'
000000000000a24c         db  0x0e ; '.'
000000000000a24d         db  0x08 ; '.'
000000000000a24e         db  0x48 ; 'H'
000000000000a24f         db  0x0b ; '.'
000000000000a250         db  0x41 ; 'A'
000000000000a251         db  0x0a ; '.'
000000000000a252         db  0x0e ; '.'
000000000000a253         db  0x18 ; '.'
000000000000a254         db  0x46 ; 'F'
000000000000a255         db  0x0e ; '.'
000000000000a256         db  0x10 ; '.'
000000000000a257         db  0x42 ; 'B'
000000000000a258         db  0x0e ; '.'
000000000000a259         db  0x08 ; '.'
000000000000a25a         db  0x47 ; 'G'
000000000000a25b         db  0x0b ; '.'
000000000000a25c         db  0x49 ; 'I'
000000000000a25d         db  0x0e ; '.'
000000000000a25e         db  0x18 ; '.'
000000000000a25f         db  0x41 ; 'A'
000000000000a260         db  0x0e ; '.'
000000000000a261         db  0x10 ; '.'
000000000000a262         db  0x42 ; 'B'
000000000000a263         db  0x0e ; '.'
000000000000a264         db  0x08 ; '.'
000000000000a265         db  0x00 ; '.'
000000000000a266         db  0x00 ; '.'
000000000000a267         db  0x00 ; '.'
000000000000a268         dd         0x0000001c                                  ; Length of the record
000000000000a26c         dd         0x00000a64                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a270         db         0x60, 0xb8, 2 dup (0xff)                    ; begin 0x5ad0
000000000000a274         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x5b30)
000000000000a278         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a279         db  0x44 ; 'D'
000000000000a27a         db  0x0e ; '.'
000000000000a27b         db  0x10 ; '.'
000000000000a27c         db  0x75 ; 'u'
000000000000a27d         db  0x0a ; '.'
000000000000a27e         db  0x0e ; '.'
000000000000a27f         db  0x08 ; '.'
000000000000a280         db  0x47 ; 'G'
000000000000a281         db  0x0b ; '.'
000000000000a282         db  0x5f ; '_'
000000000000a283         db  0x0e ; '.'
000000000000a284         db  0x08 ; '.'
000000000000a285         db  0x00 ; '.'
000000000000a286         db  0x00 ; '.'
000000000000a287         db  0x00 ; '.'
000000000000a288         dd         0x0000001c                                  ; Length of the record
000000000000a28c         dd         0x00000a84                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a290         db         0xa0, 0xb8, 2 dup (0xff)                    ; begin 0x5b30
000000000000a294         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x5b6c)
000000000000a298         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a299         db  0x44 ; 'D'
000000000000a29a         db  0x0e ; '.'
000000000000a29b         db  0x10 ; '.'
000000000000a29c         db  0x61 ; 'a'
000000000000a29d         db  0x0a ; '.'
000000000000a29e         db  0x0e ; '.'
000000000000a29f         db  0x08 ; '.'
000000000000a2a0         db  0x4b ; 'K'
000000000000a2a1         db  0x0b ; '.'
000000000000a2a2         db  0x4b ; 'K'
000000000000a2a3         db  0x0e ; '.'
000000000000a2a4         db  0x08 ; '.'
000000000000a2a5         db  0x00 ; '.'
000000000000a2a6         db  0x00 ; '.'
000000000000a2a7         db  0x00 ; '.'
000000000000a2a8         dd         0x00000034                                  ; Length of the record
000000000000a2ac         dd         0x00000aa4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a2b0         db         0xc0, 0xb8, 2 dup (0xff)                    ; begin 0x5b70
000000000000a2b4         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x5beb)
000000000000a2b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2b9         db  0x42 ; 'B'
000000000000a2ba         db  0x0e ; '.'
000000000000a2bb         db  0x10 ; '.'
000000000000a2bc         db  0x8c ; '.'
000000000000a2bd         db  0x02 ; '.'
000000000000a2be         db  0x41 ; 'A'
000000000000a2bf         db  0x0e ; '.'
000000000000a2c0         db  0x18 ; '.'
000000000000a2c1         db  0x86 ; '.'
000000000000a2c2         db  0x03 ; '.'
000000000000a2c3         db  0x41 ; 'A'
000000000000a2c4         db  0x0e ; '.'
000000000000a2c5         db  0x20 ; ' '
000000000000a2c6         db  0x83 ; '.'
000000000000a2c7         db  0x04 ; '.'
000000000000a2c8         db  0x7d ; '}'
000000000000a2c9         db  0x0a ; '.'
000000000000a2ca         db  0x0e ; '.'
000000000000a2cb         db  0x18 ; '.'
000000000000a2cc         db  0x41 ; 'A'
000000000000a2cd         db  0x0e ; '.'
000000000000a2ce         db  0x10 ; '.'
000000000000a2cf         db  0x42 ; 'B'
000000000000a2d0         db  0x0e ; '.'
000000000000a2d1         db  0x08 ; '.'
000000000000a2d2         db  0x44 ; 'D'
000000000000a2d3         db  0x0b ; '.'
000000000000a2d4         db  0x60 ; '`'
000000000000a2d5         db  0x0a ; '.'
000000000000a2d6         db  0x0e ; '.'
000000000000a2d7         db  0x18 ; '.'
000000000000a2d8         db  0x41 ; 'A'
000000000000a2d9         db  0x0e ; '.'
000000000000a2da         db  0x10 ; '.'
000000000000a2db         db  0x42 ; 'B'
000000000000a2dc         db  0x0e ; '.'
000000000000a2dd         db  0x08 ; '.'
000000000000a2de         db  0x45 ; 'E'
000000000000a2df         db  0x0b ; '.'
000000000000a2e0         dd         0x0000001c                                  ; Length of the record
000000000000a2e4         dd         0x00000adc                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a2e8         db         0x08, 0xb9, 2 dup (0xff)                    ; begin 0x5bf0
000000000000a2ec         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x5c30)
000000000000a2f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2f1         db  0x44 ; 'D'
000000000000a2f2         db  0x0e ; '.'
000000000000a2f3         db  0x10 ; '.'
000000000000a2f4         db  0x83 ; '.'
000000000000a2f5         db  0x02 ; '.'
000000000000a2f6         db  0x5a ; 'Z'
000000000000a2f7         db  0x0a ; '.'
000000000000a2f8         db  0x0e ; '.'
000000000000a2f9         db  0x08 ; '.'
000000000000a2fa         db  0x4a ; 'J'
000000000000a2fb         db  0x0b ; '.'
000000000000a2fc         db  0x53 ; 'S'
000000000000a2fd         db  0x0e ; '.'
000000000000a2fe         db  0x08 ; '.'
000000000000a2ff         db  0x00 ; '.'
000000000000a300         dd         0x0000002c                                  ; Length of the record
000000000000a304         dd         0x00000afc                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a308         db         0x28, 0xb9, 2 dup (0xff)                    ; begin 0x5c30
000000000000a30c         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x5c87)
000000000000a310         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a311         db  0x63 ; 'c'
000000000000a312         db  0x0e ; '.'
000000000000a313         db  0x10 ; '.'
000000000000a314         db  0x8c ; '.'
000000000000a315         db  0x02 ; '.'
000000000000a316         db  0x41 ; 'A'
000000000000a317         db  0x0e ; '.'
000000000000a318         db  0x18 ; '.'
000000000000a319         db  0x86 ; '.'
000000000000a31a         db  0x03 ; '.'
000000000000a31b         db  0x44 ; 'D'
000000000000a31c         db  0x0e ; '.'
000000000000a31d         db  0x20 ; ' '
000000000000a31e         db  0x83 ; '.'
000000000000a31f         db  0x04 ; '.'
000000000000a320         db  0x6b ; 'k'
000000000000a321         db  0x0e ; '.'
000000000000a322         db  0x18 ; '.'
000000000000a323         db  0x41 ; 'A'
000000000000a324         db  0x0e ; '.'
000000000000a325         db  0x10 ; '.'
000000000000a326         db  0x42 ; 'B'
000000000000a327         db  0x0e ; '.'
000000000000a328         db  0x08 ; '.'
000000000000a329         db  0x00 ; '.'
000000000000a32a         db  0x00 ; '.'
000000000000a32b         db  0x00 ; '.'
000000000000a32c         db  0x00 ; '.'
000000000000a32d         db  0x00 ; '.'
000000000000a32e         db  0x00 ; '.'
000000000000a32f         db  0x00 ; '.'
000000000000a330         dd         0x0000002c                                  ; Length of the record
000000000000a334         dd         0x00000b2c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a338         db         0x58, 0xb9, 2 dup (0xff)                    ; begin 0x5c90
000000000000a33c         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0x6daf)
000000000000a340         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a341         db  0x41 ; 'A'
000000000000a342         db  0x0e ; '.'
000000000000a343         db  0x10 ; '.'
000000000000a344         db  0x86 ; '.'
000000000000a345         db  0x02 ; '.'
000000000000a346         db  0x43 ; 'C'
000000000000a347         db  0x0d ; '.'
000000000000a348         db  0x06 ; '.'
000000000000a349         db  0x48 ; 'H'
000000000000a34a         db  0x8f ; '.'
000000000000a34b         db  0x03 ; '.'
000000000000a34c         db  0x8e ; '.'
000000000000a34d         db  0x04 ; '.'
000000000000a34e         db  0x8d ; '.'
000000000000a34f         db  0x05 ; '.'
000000000000a350         db  0x8c ; '.'
000000000000a351         db  0x06 ; '.'
000000000000a352         db  0x48 ; 'H'
000000000000a353         db  0x83 ; '.'
000000000000a354         db  0x07 ; '.'
000000000000a355         db  0x03 ; '.'
000000000000a356         db  0xef ; '.'
000000000000a357         db  0x01 ; '.'
000000000000a358         db  0x0a ; '.'
000000000000a359         db  0x0c ; '.'
000000000000a35a         db  0x07 ; '.'
000000000000a35b         db  0x08 ; '.'
000000000000a35c         db  0x45 ; 'E'
000000000000a35d         db  0x0b ; '.'
000000000000a35e         db  0x00 ; '.'
000000000000a35f         db  0x00 ; '.'
000000000000a360         dd         0x00000014                                  ; Length of the record
000000000000a364         dd         0x00000b5c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a368         db         0x48, 0xca, 2 dup (0xff)                    ; begin 0x6db0
000000000000a36c         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0x6fae)
000000000000a370         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a371         align      8
000000000000a378         dd         0x0000004c                                  ; Length of the record
000000000000a37c         dd         0x00000b74                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a380         db         0x30, 0xcc, 2 dup (0xff)                    ; begin 0x6fb0
000000000000a384         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0x7c9c)
000000000000a388         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a389         db  0x42 ; 'B'
000000000000a38a         db  0x0e ; '.'
000000000000a38b         db  0x10 ; '.'
000000000000a38c         db  0x8f ; '.'
000000000000a38d         db  0x02 ; '.'
000000000000a38e         db  0x42 ; 'B'
000000000000a38f         db  0x0e ; '.'
000000000000a390         db  0x18 ; '.'
000000000000a391         db  0x8e ; '.'
000000000000a392         db  0x03 ; '.'
000000000000a393         db  0x46 ; 'F'
000000000000a394         db  0x0e ; '.'
000000000000a395         db  0x20 ; ' '
000000000000a396         db  0x8d ; '.'
000000000000a397         db  0x04 ; '.'
000000000000a398         db  0x42 ; 'B'
000000000000a399         db  0x0e ; '.'
000000000000a39a         db  0x28 ; '('
000000000000a39b         db  0x8c ; '.'
000000000000a39c         db  0x05 ; '.'
000000000000a39d         db  0x45 ; 'E'
000000000000a39e         db  0x0e ; '.'
000000000000a39f         db  0x30 ; '0'
000000000000a3a0         db  0x86 ; '.'
000000000000a3a1         db  0x06 ; '.'
000000000000a3a2         db  0x41 ; 'A'
000000000000a3a3         db  0x0e ; '.'
000000000000a3a4         db  0x38 ; '8'
000000000000a3a5         db  0x83 ; '.'
000000000000a3a6         db  0x07 ; '.'
000000000000a3a7         db  0x52 ; 'R'
000000000000a3a8         db  0x0e ; '.'
000000000000a3a9         db  0x90 ; '.'
000000000000a3aa         db  0x01 ; '.'
000000000000a3ab         db  0x02 ; '.'
000000000000a3ac         db  0x82 ; '.'
000000000000a3ad         db  0x0a ; '.'
000000000000a3ae         db  0x0e ; '.'
000000000000a3af         db  0x38 ; '8'
000000000000a3b0         db  0x41 ; 'A'
000000000000a3b1         db  0x0e ; '.'
000000000000a3b2         db  0x30 ; '0'
000000000000a3b3         db  0x41 ; 'A'
000000000000a3b4         db  0x0e ; '.'
000000000000a3b5         db  0x28 ; '('
000000000000a3b6         db  0x42 ; 'B'
000000000000a3b7         db  0x0e ; '.'
000000000000a3b8         db  0x20 ; ' '
000000000000a3b9         db  0x42 ; 'B'
000000000000a3ba         db  0x0e ; '.'
000000000000a3bb         db  0x18 ; '.'
000000000000a3bc         db  0x42 ; 'B'
000000000000a3bd         db  0x0e ; '.'
000000000000a3be         db  0x10 ; '.'
000000000000a3bf         db  0x42 ; 'B'
000000000000a3c0         db  0x0e ; '.'
000000000000a3c1         db  0x08 ; '.'
000000000000a3c2         db  0x48 ; 'H'
000000000000a3c3         db  0x0b ; '.'
000000000000a3c4         db  0x00 ; '.'
000000000000a3c5         db  0x00 ; '.'
000000000000a3c6         db  0x00 ; '.'
000000000000a3c7         db  0x00 ; '.'
000000000000a3c8         dd         0x00000044                                  ; Length of the record
000000000000a3cc         dd         0x00000bc4                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a3d0         db         0xd0, 0xd8, 2 dup (0xff)                    ; begin 0x7ca0
000000000000a3d4         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x7d05)
000000000000a3d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3d9         db  0x42 ; 'B'
000000000000a3da         db  0x0e ; '.'
000000000000a3db         db  0x10 ; '.'
000000000000a3dc         db  0x8f ; '.'
000000000000a3dd         db  0x02 ; '.'
000000000000a3de         db  0x42 ; 'B'
000000000000a3df         db  0x0e ; '.'
000000000000a3e0         db  0x18 ; '.'
000000000000a3e1         db  0x8e ; '.'
000000000000a3e2         db  0x03 ; '.'
000000000000a3e3         db  0x45 ; 'E'
000000000000a3e4         db  0x0e ; '.'
000000000000a3e5         db  0x20 ; ' '
000000000000a3e6         db  0x8d ; '.'
000000000000a3e7         db  0x04 ; '.'
000000000000a3e8         db  0x42 ; 'B'
000000000000a3e9         db  0x0e ; '.'
000000000000a3ea         db  0x28 ; '('
000000000000a3eb         db  0x8c ; '.'
000000000000a3ec         db  0x05 ; '.'
000000000000a3ed         db  0x48 ; 'H'
000000000000a3ee         db  0x0e ; '.'
000000000000a3ef         db  0x30 ; '0'
000000000000a3f0         db  0x86 ; '.'
000000000000a3f1         db  0x06 ; '.'
000000000000a3f2         db  0x48 ; 'H'
000000000000a3f3         db  0x0e ; '.'
000000000000a3f4         db  0x38 ; '8'
000000000000a3f5         db  0x83 ; '.'
000000000000a3f6         db  0x07 ; '.'
000000000000a3f7         db  0x4d ; 'M'
000000000000a3f8         db  0x0e ; '.'
000000000000a3f9         db  0x40 ; '@'
000000000000a3fa         db  0x72 ; 'r'
000000000000a3fb         db  0x0e ; '.'
000000000000a3fc         db  0x38 ; '8'
000000000000a3fd         db  0x41 ; 'A'
000000000000a3fe         db  0x0e ; '.'
000000000000a3ff         db  0x30 ; '0'
000000000000a400         db  0x41 ; 'A'
000000000000a401         db  0x0e ; '.'
000000000000a402         db  0x28 ; '('
000000000000a403         db  0x42 ; 'B'
000000000000a404         db  0x0e ; '.'
000000000000a405         db  0x20 ; ' '
000000000000a406         db  0x42 ; 'B'
000000000000a407         db  0x0e ; '.'
000000000000a408         db  0x18 ; '.'
000000000000a409         db  0x42 ; 'B'
000000000000a40a         db  0x0e ; '.'
000000000000a40b         db  0x10 ; '.'
000000000000a40c         db  0x42 ; 'B'
000000000000a40d         db  0x0e ; '.'
000000000000a40e         db  0x08 ; '.'
000000000000a40f         db  0x00 ; '.'
000000000000a410         dd         0x00000014                                  ; Length of the record
000000000000a414         dd         0x00000c0c                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a418         db         0xf8, 0xd8, 2 dup (0xff)                    ; begin 0x7d10
000000000000a41c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x7d12)
000000000000a420         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a421         align      8
000000000000a428         dd         0x00000010                                  ; Length of the record
000000000000a42c         dd         0x00000c24                                  ; FDE: parent CIE at 0x9808 (FDE encoding = 0x1B)
000000000000a430         db         0xf0, 0xd8, 2 dup (0xff)                    ; begin 0x7d20
000000000000a434         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x7d2e)
000000000000a438         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a439         align      64


        ; Segment Segment 3
        ; Range: [0x20abd0; 0x20b218[ (1608 bytes)
        ; File offset : [43984; 45184[ (1200 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20abd0; 0x20abd8[ (8 bytes)
        ; File offset : [43984; 43992[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020abd0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20abd8; 0x20abe0[ (8 bytes)
        ; File offset : [43992; 44000[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020abd8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20abe0; 0x20ac38[ (88 bytes)
        ; File offset : [44000; 44088[ (88 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     quoting_style_args:
000000000020abe0         db  0xf1 ; '.'
000000000020abe1         db  0x8d ; '.'
000000000020abe2         db  0x00 ; '.'
000000000020abe3         db  0x00 ; '.'
000000000020abe4         db  0x00 ; '.'
000000000020abe5         db  0x00 ; '.'
000000000020abe6         db  0x00 ; '.'
000000000020abe7         db  0x00 ; '.'
000000000020abe8         db  0xf9 ; '.'
000000000020abe9         db  0x8d ; '.'
000000000020abea         db  0x00 ; '.'
000000000020abeb         db  0x00 ; '.'
000000000020abec         db  0x00 ; '.'
000000000020abed         db  0x00 ; '.'
000000000020abee         db  0x00 ; '.'
000000000020abef         db  0x00 ; '.'
000000000020abf0         db  0xff ; '.'
000000000020abf1         db  0x8d ; '.'
000000000020abf2         db  0x00 ; '.'
000000000020abf3         db  0x00 ; '.'
000000000020abf4         db  0x00 ; '.'
000000000020abf5         db  0x00 ; '.'
000000000020abf6         db  0x00 ; '.'
000000000020abf7         db  0x00 ; '.'
000000000020abf8         db  0x0c ; '.'
000000000020abf9         db  0x8e ; '.'
000000000020abfa         db  0x00 ; '.'
000000000020abfb         db  0x00 ; '.'
000000000020abfc         db  0x00 ; '.'
000000000020abfd         db  0x00 ; '.'
000000000020abfe         db  0x00 ; '.'
000000000020abff         db  0x00 ; '.'
000000000020ac00         db  0x19 ; '.'
000000000020ac01         db  0x8e ; '.'
000000000020ac02         db  0x00 ; '.'
000000000020ac03         db  0x00 ; '.'
000000000020ac04         db  0x00 ; '.'
000000000020ac05         db  0x00 ; '.'
000000000020ac06         db  0x00 ; '.'
000000000020ac07         db  0x00 ; '.'
000000000020ac08         db  0x2d ; '-'
000000000020ac09         db  0x8e ; '.'
000000000020ac0a         db  0x00 ; '.'
000000000020ac0b         db  0x00 ; '.'
000000000020ac0c         db  0x00 ; '.'
000000000020ac0d         db  0x00 ; '.'
000000000020ac0e         db  0x00 ; '.'
000000000020ac0f         db  0x00 ; '.'
000000000020ac10         db  0x2f ; '/'
000000000020ac11         db  0x8e ; '.'
000000000020ac12         db  0x00 ; '.'
000000000020ac13         db  0x00 ; '.'
000000000020ac14         db  0x00 ; '.'
000000000020ac15         db  0x00 ; '.'
000000000020ac16         db  0x00 ; '.'
000000000020ac17         db  0x00 ; '.'
000000000020ac18         db  0x12 ; '.'
000000000020ac19         db  0x8e ; '.'
000000000020ac1a         db  0x00 ; '.'
000000000020ac1b         db  0x00 ; '.'
000000000020ac1c         db  0x00 ; '.'
000000000020ac1d         db  0x00 ; '.'
000000000020ac1e         db  0x00 ; '.'
000000000020ac1f         db  0x00 ; '.'
000000000020ac20         db  0x26 ; '&'
000000000020ac21         db  0x7f ; '.'
000000000020ac22         db  0x00 ; '.'
000000000020ac23         db  0x00 ; '.'
000000000020ac24         db  0x00 ; '.'
000000000020ac25         db  0x00 ; '.'
000000000020ac26         db  0x00 ; '.'
000000000020ac27         db  0x00 ; '.'
000000000020ac28         db  0x37 ; '7'
000000000020ac29         db  0x8e ; '.'
000000000020ac2a         db  0x00 ; '.'
000000000020ac2b         db  0x00 ; '.'
000000000020ac2c         db  0x00 ; '.'
000000000020ac2d         db  0x00 ; '.'
000000000020ac2e         db  0x00 ; '.'
000000000020ac2f         db  0x00 ; '.'
000000000020ac30         db  0x00 ; '.'
000000000020ac31         db  0x00 ; '.'
000000000020ac32         db  0x00 ; '.'
000000000020ac33         db  0x00 ; '.'
000000000020ac34         db  0x00 ; '.'
000000000020ac35         db  0x00 ; '.'
000000000020ac36         db  0x00 ; '.'
000000000020ac37         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20ac38; 0x20ae28[ (496 bytes)
        ; File offset : [44088; 44584[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020ac38         db  0x01 ; '.'
000000000020ac39         db  0x00 ; '.'
000000000020ac3a         db  0x00 ; '.'
000000000020ac3b         db  0x00 ; '.'
000000000020ac3c         db  0x00 ; '.'
000000000020ac3d         db  0x00 ; '.'
000000000020ac3e         db  0x00 ; '.'
000000000020ac3f         db  0x00 ; '.'
000000000020ac40         db  0x01 ; '.'
000000000020ac41         db  0x00 ; '.'
000000000020ac42         db  0x00 ; '.'
000000000020ac43         db  0x00 ; '.'
000000000020ac44         db  0x00 ; '.'
000000000020ac45         db  0x00 ; '.'
000000000020ac46         db  0x00 ; '.'
000000000020ac47         db  0x00 ; '.'
000000000020ac48         db  0x0c ; '.'
000000000020ac49         db  0x00 ; '.'
000000000020ac4a         db  0x00 ; '.'
000000000020ac4b         db  0x00 ; '.'
000000000020ac4c         db  0x00 ; '.'
000000000020ac4d         db  0x00 ; '.'
000000000020ac4e         db  0x00 ; '.'
000000000020ac4f         db  0x00 ; '.'
000000000020ac50         db  0xd8 ; '.'
000000000020ac51         db  0x12 ; '.'
000000000020ac52         db  0x00 ; '.'
000000000020ac53         db  0x00 ; '.'
000000000020ac54         db  0x00 ; '.'
000000000020ac55         db  0x00 ; '.'
000000000020ac56         db  0x00 ; '.'
000000000020ac57         db  0x00 ; '.'
000000000020ac58         db  0x0d ; '.'
000000000020ac59         db  0x00 ; '.'
000000000020ac5a         db  0x00 ; '.'
000000000020ac5b         db  0x00 ; '.'
000000000020ac5c         db  0x00 ; '.'
000000000020ac5d         db  0x00 ; '.'
000000000020ac5e         db  0x00 ; '.'
000000000020ac5f         db  0x00 ; '.'
000000000020ac60         db  0x30 ; '0'
000000000020ac61         db  0x7d ; '}'
000000000020ac62         db  0x00 ; '.'
000000000020ac63         db  0x00 ; '.'
000000000020ac64         db  0x00 ; '.'
000000000020ac65         db  0x00 ; '.'
000000000020ac66         db  0x00 ; '.'
000000000020ac67         db  0x00 ; '.'
000000000020ac68         db  0x19 ; '.'
000000000020ac69         db  0x00 ; '.'
000000000020ac6a         db  0x00 ; '.'
000000000020ac6b         db  0x00 ; '.'
000000000020ac6c         db  0x00 ; '.'
000000000020ac6d         db  0x00 ; '.'
000000000020ac6e         db  0x00 ; '.'
000000000020ac6f         db  0x00 ; '.'
000000000020ac70         db  0xd0 ; '.'
000000000020ac71         db  0xab ; '.'
000000000020ac72         db  0x20 ; ' '
000000000020ac73         db  0x00 ; '.'
000000000020ac74         db  0x00 ; '.'
000000000020ac75         db  0x00 ; '.'
000000000020ac76         db  0x00 ; '.'
000000000020ac77         db  0x00 ; '.'
000000000020ac78         db  0x1b ; '.'
000000000020ac79         db  0x00 ; '.'
000000000020ac7a         db  0x00 ; '.'
000000000020ac7b         db  0x00 ; '.'
000000000020ac7c         db  0x00 ; '.'
000000000020ac7d         db  0x00 ; '.'
000000000020ac7e         db  0x00 ; '.'
000000000020ac7f         db  0x00 ; '.'
000000000020ac80         db  0x08 ; '.'
000000000020ac81         db  0x00 ; '.'
000000000020ac82         db  0x00 ; '.'
000000000020ac83         db  0x00 ; '.'
000000000020ac84         db  0x00 ; '.'
000000000020ac85         db  0x00 ; '.'
000000000020ac86         db  0x00 ; '.'
000000000020ac87         db  0x00 ; '.'
000000000020ac88         db  0x1a ; '.'
000000000020ac89         db  0x00 ; '.'
000000000020ac8a         db  0x00 ; '.'
000000000020ac8b         db  0x00 ; '.'
000000000020ac8c         db  0x00 ; '.'
000000000020ac8d         db  0x00 ; '.'
000000000020ac8e         db  0x00 ; '.'
000000000020ac8f         db  0x00 ; '.'
000000000020ac90         db  0xd8 ; '.'
000000000020ac91         db  0xab ; '.'
000000000020ac92         db  0x20 ; ' '
000000000020ac93         db  0x00 ; '.'
000000000020ac94         db  0x00 ; '.'
000000000020ac95         db  0x00 ; '.'
000000000020ac96         db  0x00 ; '.'
000000000020ac97         db  0x00 ; '.'
000000000020ac98         db  0x1c ; '.'
000000000020ac99         db  0x00 ; '.'
000000000020ac9a         db  0x00 ; '.'
000000000020ac9b         db  0x00 ; '.'
000000000020ac9c         db  0x00 ; '.'
000000000020ac9d         db  0x00 ; '.'
000000000020ac9e         db  0x00 ; '.'
000000000020ac9f         db  0x00 ; '.'
000000000020aca0         db  0x08 ; '.'
000000000020aca1         db  0x00 ; '.'
000000000020aca2         db  0x00 ; '.'
000000000020aca3         db  0x00 ; '.'
000000000020aca4         db  0x00 ; '.'
000000000020aca5         db  0x00 ; '.'
000000000020aca6         db  0x00 ; '.'
000000000020aca7         db  0x00 ; '.'
000000000020aca8         db  0xf5 ; '.'
000000000020aca9         db  0xfe ; '.'
000000000020acaa         db  0xff ; '.'
000000000020acab         db  0x6f ; 'o'
000000000020acac         db  0x00 ; '.'
000000000020acad         db  0x00 ; '.'
000000000020acae         db  0x00 ; '.'
000000000020acaf         db  0x00 ; '.'
000000000020acb0         db  0x98 ; '.'
000000000020acb1         db  0x02 ; '.'
000000000020acb2         db  0x00 ; '.'
000000000020acb3         db  0x00 ; '.'
000000000020acb4         db  0x00 ; '.'
000000000020acb5         db  0x00 ; '.'
000000000020acb6         db  0x00 ; '.'
000000000020acb7         db  0x00 ; '.'
000000000020acb8         db  0x05 ; '.'
000000000020acb9         db  0x00 ; '.'
000000000020acba         db  0x00 ; '.'
000000000020acbb         db  0x00 ; '.'
000000000020acbc         db  0x00 ; '.'
000000000020acbd         db  0x00 ; '.'
000000000020acbe         db  0x00 ; '.'
000000000020acbf         db  0x00 ; '.'
000000000020acc0         db  0x78 ; 'x'
000000000020acc1         db  0x08 ; '.'
000000000020acc2         db  0x00 ; '.'
000000000020acc3         db  0x00 ; '.'
000000000020acc4         db  0x00 ; '.'
000000000020acc5         db  0x00 ; '.'
000000000020acc6         db  0x00 ; '.'
000000000020acc7         db  0x00 ; '.'
000000000020acc8         db  0x06 ; '.'
000000000020acc9         db  0x00 ; '.'
000000000020acca         db  0x00 ; '.'
000000000020accb         db  0x00 ; '.'
000000000020accc         db  0x00 ; '.'
000000000020accd         db  0x00 ; '.'
000000000020acce         db  0x00 ; '.'
000000000020accf         db  0x00 ; '.'
000000000020acd0         db  0xd8 ; '.'
000000000020acd1         db  0x02 ; '.'
000000000020acd2         db  0x00 ; '.'
000000000020acd3         db  0x00 ; '.'
000000000020acd4         db  0x00 ; '.'
000000000020acd5         db  0x00 ; '.'
000000000020acd6         db  0x00 ; '.'
000000000020acd7         db  0x00 ; '.'
000000000020acd8         db  0x0a ; '.'
000000000020acd9         db  0x00 ; '.'
000000000020acda         db  0x00 ; '.'
000000000020acdb         db  0x00 ; '.'
000000000020acdc         db  0x00 ; '.'
000000000020acdd         db  0x00 ; '.'
000000000020acde         db  0x00 ; '.'
000000000020acdf         db  0x00 ; '.'
000000000020ace0         db  0xc3 ; '.'
000000000020ace1         db  0x02 ; '.'
000000000020ace2         db  0x00 ; '.'
000000000020ace3         db  0x00 ; '.'
000000000020ace4         db  0x00 ; '.'
000000000020ace5         db  0x00 ; '.'
000000000020ace6         db  0x00 ; '.'
000000000020ace7         db  0x00 ; '.'
000000000020ace8         db  0x0b ; '.'
000000000020ace9         db  0x00 ; '.'
000000000020acea         db  0x00 ; '.'
000000000020aceb         db  0x00 ; '.'
000000000020acec         db  0x00 ; '.'
000000000020aced         db  0x00 ; '.'
000000000020acee         db  0x00 ; '.'
000000000020acef         db  0x00 ; '.'
000000000020acf0         db  0x18 ; '.'
000000000020acf1         db  0x00 ; '.'
000000000020acf2         db  0x00 ; '.'
000000000020acf3         db  0x00 ; '.'
000000000020acf4         db  0x00 ; '.'
000000000020acf5         db  0x00 ; '.'
000000000020acf6         db  0x00 ; '.'
000000000020acf7         db  0x00 ; '.'
000000000020acf8         db  0x15 ; '.'
000000000020acf9         db  0x00 ; '.'
000000000020acfa         db  0x00 ; '.'
000000000020acfb         db  0x00 ; '.'
000000000020acfc         db  0x00 ; '.'
000000000020acfd         db  0x00 ; '.'
000000000020acfe         db  0x00 ; '.'
000000000020acff         db  0x00 ; '.'
000000000020ad00         db  0x00 ; '.'
000000000020ad01         db  0x00 ; '.'
000000000020ad02         db  0x00 ; '.'
000000000020ad03         db  0x00 ; '.'
000000000020ad04         db  0x00 ; '.'
000000000020ad05         db  0x00 ; '.'
000000000020ad06         db  0x00 ; '.'
000000000020ad07         db  0x00 ; '.'
000000000020ad08         db  0x03 ; '.'
000000000020ad09         db  0x00 ; '.'
000000000020ad0a         db  0x00 ; '.'
000000000020ad0b         db  0x00 ; '.'
000000000020ad0c         db  0x00 ; '.'
000000000020ad0d         db  0x00 ; '.'
000000000020ad0e         db  0x00 ; '.'
000000000020ad0f         db  0x00 ; '.'
000000000020ad10         db  0x28 ; '('
000000000020ad11         db  0xae ; '.'
000000000020ad12         db  0x20 ; ' '
000000000020ad13         db  0x00 ; '.'
000000000020ad14         db  0x00 ; '.'
000000000020ad15         db  0x00 ; '.'
000000000020ad16         db  0x00 ; '.'
000000000020ad17         db  0x00 ; '.'
000000000020ad18         db  0x02 ; '.'
000000000020ad19         db  0x00 ; '.'
000000000020ad1a         db  0x00 ; '.'
000000000020ad1b         db  0x00 ; '.'
000000000020ad1c         db  0x00 ; '.'
000000000020ad1d         db  0x00 ; '.'
000000000020ad1e         db  0x00 ; '.'
000000000020ad1f         db  0x00 ; '.'
000000000020ad20         db  0x80 ; '.'
000000000020ad21         db  0x04 ; '.'
000000000020ad22         db  0x00 ; '.'
000000000020ad23         db  0x00 ; '.'
000000000020ad24         db  0x00 ; '.'
000000000020ad25         db  0x00 ; '.'
000000000020ad26         db  0x00 ; '.'
000000000020ad27         db  0x00 ; '.'
000000000020ad28         db  0x14 ; '.'
000000000020ad29         db  0x00 ; '.'
000000000020ad2a         db  0x00 ; '.'
000000000020ad2b         db  0x00 ; '.'
000000000020ad2c         db  0x00 ; '.'
000000000020ad2d         db  0x00 ; '.'
000000000020ad2e         db  0x00 ; '.'
000000000020ad2f         db  0x00 ; '.'
000000000020ad30         db  0x07 ; '.'
000000000020ad31         db  0x00 ; '.'
000000000020ad32         db  0x00 ; '.'
000000000020ad33         db  0x00 ; '.'
000000000020ad34         db  0x00 ; '.'
000000000020ad35         db  0x00 ; '.'
000000000020ad36         db  0x00 ; '.'
000000000020ad37         db  0x00 ; '.'
000000000020ad38         db  0x17 ; '.'
000000000020ad39         db  0x00 ; '.'
000000000020ad3a         db  0x00 ; '.'
000000000020ad3b         db  0x00 ; '.'
000000000020ad3c         db  0x00 ; '.'
000000000020ad3d         db  0x00 ; '.'
000000000020ad3e         db  0x00 ; '.'
000000000020ad3f         db  0x00 ; '.'
000000000020ad40         db  0x58 ; 'X'
000000000020ad41         db  0x0e ; '.'
000000000020ad42         db  0x00 ; '.'
000000000020ad43         db  0x00 ; '.'
000000000020ad44         db  0x00 ; '.'
000000000020ad45         db  0x00 ; '.'
000000000020ad46         db  0x00 ; '.'
000000000020ad47         db  0x00 ; '.'
000000000020ad48         db  0x07 ; '.'
000000000020ad49         db  0x00 ; '.'
000000000020ad4a         db  0x00 ; '.'
000000000020ad4b         db  0x00 ; '.'
000000000020ad4c         db  0x00 ; '.'
000000000020ad4d         db  0x00 ; '.'
000000000020ad4e         db  0x00 ; '.'
000000000020ad4f         db  0x00 ; '.'
000000000020ad50         db  0x18 ; '.'
000000000020ad51         db  0x0c ; '.'
000000000020ad52         db  0x00 ; '.'
000000000020ad53         db  0x00 ; '.'
000000000020ad54         db  0x00 ; '.'
000000000020ad55         db  0x00 ; '.'
000000000020ad56         db  0x00 ; '.'
000000000020ad57         db  0x00 ; '.'
000000000020ad58         db  0x08 ; '.'
000000000020ad59         db  0x00 ; '.'
000000000020ad5a         db  0x00 ; '.'
000000000020ad5b         db  0x00 ; '.'
000000000020ad5c         db  0x00 ; '.'
000000000020ad5d         db  0x00 ; '.'
000000000020ad5e         db  0x00 ; '.'
000000000020ad5f         db  0x00 ; '.'
000000000020ad60         db  0x40 ; '@'
000000000020ad61         db  0x02 ; '.'
000000000020ad62         db  0x00 ; '.'
000000000020ad63         db  0x00 ; '.'
000000000020ad64         db  0x00 ; '.'
000000000020ad65         db  0x00 ; '.'
000000000020ad66         db  0x00 ; '.'
000000000020ad67         db  0x00 ; '.'
000000000020ad68         db  0x09 ; '.'
000000000020ad69         db  0x00 ; '.'
000000000020ad6a         db  0x00 ; '.'
000000000020ad6b         db  0x00 ; '.'
000000000020ad6c         db  0x00 ; '.'
000000000020ad6d         db  0x00 ; '.'
000000000020ad6e         db  0x00 ; '.'
000000000020ad6f         db  0x00 ; '.'
000000000020ad70         db  0x18 ; '.'
000000000020ad71         db  0x00 ; '.'
000000000020ad72         db  0x00 ; '.'
000000000020ad73         db  0x00 ; '.'
000000000020ad74         db  0x00 ; '.'
000000000020ad75         db  0x00 ; '.'
000000000020ad76         db  0x00 ; '.'
000000000020ad77         db  0x00 ; '.'
000000000020ad78         db  0x1e ; '.'
000000000020ad79         db  0x00 ; '.'
000000000020ad7a         db  0x00 ; '.'
000000000020ad7b         db  0x00 ; '.'
000000000020ad7c         db  0x00 ; '.'
000000000020ad7d         db  0x00 ; '.'
000000000020ad7e         db  0x00 ; '.'
000000000020ad7f         db  0x00 ; '.'
000000000020ad80         db  0x08 ; '.'
000000000020ad81         db  0x00 ; '.'
000000000020ad82         db  0x00 ; '.'
000000000020ad83         db  0x00 ; '.'
000000000020ad84         db  0x00 ; '.'
000000000020ad85         db  0x00 ; '.'
000000000020ad86         db  0x00 ; '.'
000000000020ad87         db  0x00 ; '.'
000000000020ad88         db  0xfb ; '.'
000000000020ad89         db  0xff ; '.'
000000000020ad8a         db  0xff ; '.'
000000000020ad8b         db  0x6f ; 'o'
000000000020ad8c         db  0x00 ; '.'
000000000020ad8d         db  0x00 ; '.'
000000000020ad8e         db  0x00 ; '.'
000000000020ad8f         db  0x00 ; '.'
000000000020ad90         db  0x01 ; '.'
000000000020ad91         db  0x00 ; '.'
000000000020ad92         db  0x00 ; '.'
000000000020ad93         db  0x08 ; '.'
000000000020ad94         db  0x00 ; '.'
000000000020ad95         db  0x00 ; '.'
000000000020ad96         db  0x00 ; '.'
000000000020ad97         db  0x00 ; '.'
000000000020ad98         db  0xfe ; '.'
000000000020ad99         db  0xff ; '.'
000000000020ad9a         db  0xff ; '.'
000000000020ad9b         db  0x6f ; 'o'
000000000020ad9c         db  0x00 ; '.'
000000000020ad9d         db  0x00 ; '.'
000000000020ad9e         db  0x00 ; '.'
000000000020ad9f         db  0x00 ; '.'
000000000020ada0         db  0xb8 ; '.'
000000000020ada1         db  0x0b ; '.'
000000000020ada2         db  0x00 ; '.'
000000000020ada3         db  0x00 ; '.'
000000000020ada4         db  0x00 ; '.'
000000000020ada5         db  0x00 ; '.'
000000000020ada6         db  0x00 ; '.'
000000000020ada7         db  0x00 ; '.'
000000000020ada8         db  0xff ; '.'
000000000020ada9         db  0xff ; '.'
000000000020adaa         db  0xff ; '.'
000000000020adab         db  0x6f ; 'o'
000000000020adac         db  0x00 ; '.'
000000000020adad         db  0x00 ; '.'
000000000020adae         db  0x00 ; '.'
000000000020adaf         db  0x00 ; '.'
000000000020adb0         db  0x01 ; '.'
000000000020adb1         db  0x00 ; '.'
000000000020adb2         db  0x00 ; '.'
000000000020adb3         db  0x00 ; '.'
000000000020adb4         db  0x00 ; '.'
000000000020adb5         db  0x00 ; '.'
000000000020adb6         db  0x00 ; '.'
000000000020adb7         db  0x00 ; '.'
000000000020adb8         db  0xf0 ; '.'
000000000020adb9         db  0xff ; '.'
000000000020adba         db  0xff ; '.'
000000000020adbb         db  0x6f ; 'o'
000000000020adbc         db  0x00 ; '.'
000000000020adbd         db  0x00 ; '.'
000000000020adbe         db  0x00 ; '.'
000000000020adbf         db  0x00 ; '.'
000000000020adc0         db  0x3c ; '<'
000000000020adc1         db  0x0b ; '.'
000000000020adc2         db  0x00 ; '.'
000000000020adc3         db  0x00 ; '.'
000000000020adc4         db  0x00 ; '.'
000000000020adc5         db  0x00 ; '.'
000000000020adc6         db  0x00 ; '.'
000000000020adc7         db  0x00 ; '.'
000000000020adc8         db  0xf9 ; '.'
000000000020adc9         db  0xff ; '.'
000000000020adca         db  0xff ; '.'
000000000020adcb         db  0x6f ; 'o'
000000000020adcc         db  0x00 ; '.'
000000000020adcd         db  0x00 ; '.'
000000000020adce         db  0x00 ; '.'
000000000020adcf         db  0x00 ; '.'
000000000020add0         db  0x0f ; '.'
000000000020add1         db  0x00 ; '.'
000000000020add2         db  0x00 ; '.'
000000000020add3         db  0x00 ; '.'
000000000020add4         db  0x00 ; '.'
000000000020add5         db  0x00 ; '.'
000000000020add6         db  0x00 ; '.'
000000000020add7         db  0x00 ; '.'
000000000020add8         db  0x00 ; '.'
000000000020add9         db  0x00 ; '.'
000000000020adda         db  0x00 ; '.'
000000000020addb         db  0x00 ; '.'
000000000020addc         db  0x00 ; '.'
000000000020addd         db  0x00 ; '.'
000000000020adde         db  0x00 ; '.'
000000000020addf         db  0x00 ; '.'
000000000020ade0         db  0x00 ; '.'
000000000020ade1         db  0x00 ; '.'
000000000020ade2         db  0x00 ; '.'
000000000020ade3         db  0x00 ; '.'
000000000020ade4         db  0x00 ; '.'
000000000020ade5         db  0x00 ; '.'
000000000020ade6         db  0x00 ; '.'
000000000020ade7         db  0x00 ; '.'
000000000020ade8         db  0x00 ; '.'
000000000020ade9         db  0x00 ; '.'
000000000020adea         db  0x00 ; '.'
000000000020adeb         db  0x00 ; '.'
000000000020adec         db  0x00 ; '.'
000000000020aded         db  0x00 ; '.'
000000000020adee         db  0x00 ; '.'
000000000020adef         db  0x00 ; '.'
000000000020adf0         db  0x00 ; '.'
000000000020adf1         db  0x00 ; '.'
000000000020adf2         db  0x00 ; '.'
000000000020adf3         db  0x00 ; '.'
000000000020adf4         db  0x00 ; '.'
000000000020adf5         db  0x00 ; '.'
000000000020adf6         db  0x00 ; '.'
000000000020adf7         db  0x00 ; '.'
000000000020adf8         db  0x00 ; '.'
000000000020adf9         db  0x00 ; '.'
000000000020adfa         db  0x00 ; '.'
000000000020adfb         db  0x00 ; '.'
000000000020adfc         db  0x00 ; '.'
000000000020adfd         db  0x00 ; '.'
000000000020adfe         db  0x00 ; '.'
000000000020adff         db  0x00 ; '.'
000000000020ae00         db  0x00 ; '.'
000000000020ae01         db  0x00 ; '.'
000000000020ae02         db  0x00 ; '.'
000000000020ae03         db  0x00 ; '.'
000000000020ae04         db  0x00 ; '.'
000000000020ae05         db  0x00 ; '.'
000000000020ae06         db  0x00 ; '.'
000000000020ae07         db  0x00 ; '.'
000000000020ae08         db  0x00 ; '.'
000000000020ae09         db  0x00 ; '.'
000000000020ae0a         db  0x00 ; '.'
000000000020ae0b         db  0x00 ; '.'
000000000020ae0c         db  0x00 ; '.'
000000000020ae0d         db  0x00 ; '.'
000000000020ae0e         db  0x00 ; '.'
000000000020ae0f         db  0x00 ; '.'
000000000020ae10         db  0x00 ; '.'
000000000020ae11         db  0x00 ; '.'
000000000020ae12         db  0x00 ; '.'
000000000020ae13         db  0x00 ; '.'
000000000020ae14         db  0x00 ; '.'
000000000020ae15         db  0x00 ; '.'
000000000020ae16         db  0x00 ; '.'
000000000020ae17         db  0x00 ; '.'
000000000020ae18         db  0x00 ; '.'
000000000020ae19         db  0x00 ; '.'
000000000020ae1a         db  0x00 ; '.'
000000000020ae1b         db  0x00 ; '.'
000000000020ae1c         db  0x00 ; '.'
000000000020ae1d         db  0x00 ; '.'
000000000020ae1e         db  0x00 ; '.'
000000000020ae1f         db  0x00 ; '.'
000000000020ae20         db  0x00 ; '.'
000000000020ae21         db  0x00 ; '.'
000000000020ae22         db  0x00 ; '.'
000000000020ae23         db  0x00 ; '.'
000000000020ae24         db  0x00 ; '.'
000000000020ae25         db  0x00 ; '.'
000000000020ae26         db  0x00 ; '.'
000000000020ae27         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20ae28; 0x20afe8[ (448 bytes)
        ; File offset : [44584; 45032[ (448 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020ae28         db  0x38 ; '8'
000000000020ae29         db  0xac ; '.'
000000000020ae2a         db  0x20 ; ' '
000000000020ae2b         db  0x00 ; '.'
000000000020ae2c         db  0x00 ; '.'
000000000020ae2d         db  0x00 ; '.'
000000000020ae2e         db  0x00 ; '.'
000000000020ae2f         db  0x00 ; '.'
                     qword_20ae30:
000000000020ae30         dq         0x0000000000000000                          ; DATA XREF=0x12f0
000000000020ae38         db  0x00 ; '.'                                         ; DATA XREF=0x12f6
000000000020ae39         db  0x00 ; '.'
000000000020ae3a         db  0x00 ; '.'
000000000020ae3b         db  0x00 ; '.'
000000000020ae3c         db  0x00 ; '.'
000000000020ae3d         db  0x00 ; '.'
000000000020ae3e         db  0x00 ; '.'
000000000020ae3f         db  0x00 ; '.'
                     __snprintf_chk@GOT:        // __snprintf_chk
000000000020ae40         dq         0x000000000020b220                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
000000000020ae48         dq         0x000000000020b228                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020ae50         dq         0x000000000020b230                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020ae58         dq         0x000000000020b238                          ; DATA XREF=j___errno_location
                     error_at_line@GOT:        // error_at_line
000000000020ae60         dq         0x000000000020b240                          ; DATA XREF=j_error_at_line
                     strncmp@GOT:        // strncmp
000000000020ae68         dq         0x000000000020b248                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020ae70         dq         0x000000000020b258                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000020ae78         dq         0x000000000020b260                          ; DATA XREF=j___fpending
                     isatty@GOT:        // isatty
000000000020ae80         dq         0x000000000020b268                          ; DATA XREF=j_isatty
                     textdomain@GOT:        // textdomain
000000000020ae88         dq         0x000000000020b270                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020ae90         dq         0x000000000020b278                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020ae98         dq         0x000000000020b280                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020aea0         dq         0x000000000020b288                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020aea8         dq         0x000000000020b290                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020aeb0         dq         0x000000000020b298                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
000000000020aeb8         dq         0x000000000020b2a0                          ; DATA XREF=j___lxstat
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020aec0         dq         0x000000000020b2a8                          ; DATA XREF=j___stack_chk_fail
                     mbrtowc@GOT:        // mbrtowc
000000000020aec8         dq         0x000000000020b2b0                          ; DATA XREF=j_mbrtowc
                     strrchr@GOT:        // strrchr
000000000020aed0         dq         0x000000000020b2b8                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020aed8         dq         0x000000000020b2c0                          ; DATA XREF=j_lseek
                     memset@GOT:        // memset
000000000020aee0         dq         0x000000000020b2c8                          ; DATA XREF=j_memset
                     geteuid@GOT:        // geteuid
000000000020aee8         dq         0x000000000020b2d0                          ; DATA XREF=j_geteuid
                     memcmp@GOT:        // memcmp
000000000020aef0         dq         0x000000000020b2e0                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020aef8         dq         0x000000000020b2e8                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020af00         dq         0x000000000020b2f0                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000020af08         dq         0x000000000020b2f8                          ; DATA XREF=j_strcmp
                     strtol@GOT:        // strtol
000000000020af10         dq         0x000000000020b308                          ; DATA XREF=j_strtol
                     memcpy@GOT:        // memcpy
000000000020af18         dq         0x000000000020b310                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020af20         dq         0x000000000020b318                          ; DATA XREF=j_fileno
                     __xstat@GOT:        // __xstat
000000000020af28         dq         0x000000000020b320                          ; DATA XREF=j___xstat
                     malloc@GOT:        // malloc
000000000020af30         dq         0x000000000020b328                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020af38         dq         0x000000000020b330                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020af40         dq         0x000000000020b338                          ; DATA XREF=j_nl_langinfo
                     getegid@GOT:        // getegid
000000000020af48         dq         0x000000000020b340                          ; DATA XREF=j_getegid
                     __freading@GOT:        // __freading
000000000020af50         dq         0x000000000020b348                          ; DATA XREF=j___freading
                     realloc@GOT:        // realloc
000000000020af58         dq         0x000000000020b350                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020af60         dq         0x000000000020b358                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020af68         dq         0x000000000020b360                          ; DATA XREF=j___printf_chk
                     error@GOT:        // error
000000000020af70         dq         0x000000000020b368                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000020af78         dq         0x000000000020b370                          ; DATA XREF=j_fseeko
                     euidaccess@GOT:        // euidaccess
000000000020af80         dq         0x000000000020b378                          ; DATA XREF=j_euidaccess
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020af88         dq         0x000000000020b380                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020af90         dq         0x000000000020b388                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020af98         dq         0x000000000020b390                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020afa0         dq         0x000000000020b398                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020afa8         dq         0x000000000020b3a8                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020afb0         dq         0x000000000020b3b0                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020afb8         dq         0x000000000020b3c0                          ; DATA XREF=j___ctype_b_loc
                     qword_20afc0:
000000000020afc0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020afc8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020afc9         db  0x00 ; '.'
000000000020afca         db  0x00 ; '.'
000000000020afcb         db  0x00 ; '.'
000000000020afcc         db  0x00 ; '.'
000000000020afcd         db  0x00 ; '.'
000000000020afce         db  0x00 ; '.'
000000000020afcf         db  0x00 ; '.'
                     qword_20afd0:
000000000020afd0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20afd8:
000000000020afd8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20afe0:
000000000020afe0         dq         0x0000000000000000                          ; DATA XREF=j_qword_20afe0, __do_global_dtors_aux+9
000000000020afe8         db  0x00 ; '.'
000000000020afe9         db  0x00 ; '.'
000000000020afea         db  0x00 ; '.'
000000000020afeb         db  0x00 ; '.'
000000000020afec         db  0x00 ; '.'
000000000020afed         db  0x00 ; '.'
000000000020afee         db  0x00 ; '.'
000000000020afef         db  0x00 ; '.'
000000000020aff0         db  0x00 ; '.'
000000000020aff1         db  0x00 ; '.'
000000000020aff2         db  0x00 ; '.'
000000000020aff3         db  0x00 ; '.'
000000000020aff4         db  0x00 ; '.'
000000000020aff5         db  0x00 ; '.'
000000000020aff6         db  0x00 ; '.'
000000000020aff7         db  0x00 ; '.'
000000000020aff8         db  0x00 ; '.'
000000000020aff9         db  0x00 ; '.'
000000000020affa         db  0x00 ; '.'
000000000020affb         db  0x00 ; '.'
000000000020affc         db  0x00 ; '.'
000000000020affd         db  0x00 ; '.'
000000000020affe         db  0x00 ; '.'
000000000020afff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20b000; 0x20b080[ (128 bytes)
        ; File offset : [45056; 45184[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020b000         db  0x00 ; '.'
000000000020b001         db  0x00 ; '.'
000000000020b002         db  0x00 ; '.'
000000000020b003         db  0x00 ; '.'
000000000020b004         db  0x00 ; '.'
000000000020b005         db  0x00 ; '.'
000000000020b006         db  0x00 ; '.'
000000000020b007         db  0x00 ; '.'
                     __dso_handle:
000000000020b008         dq         0x000000000020b008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     exit_failure:
000000000020b010         dd         0x00000001                                  ; DATA XREF=main+74, close_stdout+130, xalloc_die+23
000000000020b014         db  0x00 ; '.'
000000000020b015         db  0x00 ; '.'
000000000020b016         db  0x00 ; '.'
000000000020b017         db  0x00 ; '.'
000000000020b018         db  0x00 ; '.'
000000000020b019         db  0x00 ; '.'
000000000020b01a         db  0x00 ; '.'
000000000020b01b         db  0x00 ; '.'
000000000020b01c         db  0x00 ; '.'
000000000020b01d         db  0x00 ; '.'
000000000020b01e         db  0x00 ; '.'
000000000020b01f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020b020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020b021         db  0x00 ; '.'
000000000020b022         db  0x00 ; '.'
000000000020b023         db  0x00 ; '.'
000000000020b024         db  0x00 ; '.'
000000000020b025         db  0x00 ; '.'
000000000020b026         db  0x00 ; '.'
000000000020b027         db  0x00 ; '.'
000000000020b028         db  0x00 ; '.'
000000000020b029         db  0x00 ; '.'
000000000020b02a         db  0x00 ; '.'
000000000020b02b         db  0x00 ; '.'
000000000020b02c         db  0x00 ; '.'
000000000020b02d         db  0x00 ; '.'
000000000020b02e         db  0x00 ; '.'
000000000020b02f         db  0x00 ; '.'
000000000020b030         db  0x00 ; '.'
000000000020b031         db  0x00 ; '.'
000000000020b032         db  0x00 ; '.'
000000000020b033         db  0x00 ; '.'
000000000020b034         db  0x00 ; '.'
000000000020b035         db  0x00 ; '.'
000000000020b036         db  0x00 ; '.'
000000000020b037         db  0x00 ; '.'
000000000020b038         db  0x00 ; '.'
000000000020b039         db  0x00 ; '.'
000000000020b03a         db  0x00 ; '.'
000000000020b03b         db  0x00 ; '.'
000000000020b03c         db  0x00 ; '.'
000000000020b03d         db  0x00 ; '.'
000000000020b03e         db  0x00 ; '.'
000000000020b03f         db  0x00 ; '.'
000000000020b040         db  0x00 ; '.'
000000000020b041         db  0x00 ; '.'
000000000020b042         db  0x00 ; '.'
000000000020b043         db  0x00 ; '.'
000000000020b044         db  0x00 ; '.'
000000000020b045         db  0x00 ; '.'
000000000020b046         db  0x00 ; '.'
000000000020b047         db  0x00 ; '.'
000000000020b048         db  0x00 ; '.'
000000000020b049         db  0x00 ; '.'
000000000020b04a         db  0x00 ; '.'
000000000020b04b         db  0x00 ; '.'
000000000020b04c         db  0x00 ; '.'
000000000020b04d         db  0x00 ; '.'
000000000020b04e         db  0x00 ; '.'
000000000020b04f         db  0x00 ; '.'
000000000020b050         db  0x00 ; '.'
000000000020b051         db  0x00 ; '.'
000000000020b052         db  0x00 ; '.'
000000000020b053         db  0x00 ; '.'
000000000020b054         db  0x00 ; '.'
000000000020b055         db  0x00 ; '.'
000000000020b056         db  0x00 ; '.'
000000000020b057         db  0x00 ; '.'
                     nslots:
000000000020b058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020b05c         align      32
                     slotvec:
000000000020b060         dq         0x000000000020b070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020b068         db  0x00 ; '.'
000000000020b069         db  0x00 ; '.'
000000000020b06a         db  0x00 ; '.'
000000000020b06b         db  0x00 ; '.'
000000000020b06c         db  0x00 ; '.'
000000000020b06d         db  0x00 ; '.'
000000000020b06e         db  0x00 ; '.'
000000000020b06f         db  0x00 ; '.'
                     slotvec0:
000000000020b070         dq         1.26481e-321, 1.0585e-317                   ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20b080; 0x20b218[ (408 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020b080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020b081         db  0x00 ; '.'
000000000020b082         db  0x00 ; '.'
000000000020b083         db  0x00 ; '.'
000000000020b084         db  0x00 ; '.'
000000000020b085         db  0x00 ; '.'
000000000020b086         db  0x00 ; '.'
000000000020b087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020b088         db  0x00 ; '.'                                         ; DATA XREF=usage+93, usage+130, usage+167, usage+204, usage+241, usage+278, usage+315, usage+352, usage+389, usage+426, usage+463
000000000020b089         db  0x00 ; '.'
000000000020b08a         db  0x00 ; '.'
000000000020b08b         db  0x00 ; '.'
000000000020b08c         db  0x00 ; '.'
000000000020b08d         db  0x00 ; '.'
000000000020b08e         db  0x00 ; '.'
000000000020b08f         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020b090         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020b091         db  0x00 ; '.'
000000000020b092         db  0x00 ; '.'
000000000020b093         db  0x00 ; '.'
000000000020b094         db  0x00 ; '.'
000000000020b095         db  0x00 ; '.'
000000000020b096         db  0x00 ; '.'
000000000020b097         db  0x00 ; '.'
000000000020b098         db  0x00 ; '.'
000000000020b099         db  0x00 ; '.'
000000000020b09a         db  0x00 ; '.'
000000000020b09b         db  0x00 ; '.'
000000000020b09c         db  0x00 ; '.'
000000000020b09d         db  0x00 ; '.'
000000000020b09e         db  0x00 ; '.'
000000000020b09f         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020b0a0         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
000000000020b0a1         db  0x00 ; '.'
000000000020b0a2         db  0x00 ; '.'
000000000020b0a3         db  0x00 ; '.'
000000000020b0a4         db  0x00 ; '.'
000000000020b0a5         db  0x00 ; '.'
000000000020b0a6         db  0x00 ; '.'
000000000020b0a7         db  0x00 ; '.'
                     completed.7697:
000000000020b0a8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020b0a9         db  0x00 ; '.'
000000000020b0aa         db  0x00 ; '.'
000000000020b0ab         db  0x00 ; '.'
000000000020b0ac         db  0x00 ; '.'
000000000020b0ad         db  0x00 ; '.'
000000000020b0ae         db  0x00 ; '.'
000000000020b0af         db  0x00 ; '.'
                     argv:
000000000020b0b0         db  0x00 ; '.'                                         ; DATA XREF=main+92, main+160, beyond+7, binary_operator+70, binary_operator+812, binary_operator+862, unary_operator+9, two_arguments+7, posixtest+40, posixtest+165, or+64
000000000020b0b1         db  0x00 ; '.'
000000000020b0b2         db  0x00 ; '.'
000000000020b0b3         db  0x00 ; '.'
000000000020b0b4         db  0x00 ; '.'
000000000020b0b5         db  0x00 ; '.'
000000000020b0b6         db  0x00 ; '.'
000000000020b0b7         db  0x00 ; '.'
                     argc:
000000000020b0b8         db  0x00 ; '.'                                         ; DATA XREF=main+99, main+132, beyond, unary_advance+9, binary_operator+61, posixtest+96, posixtest+198, or+21, or+401, or+690, or+782
000000000020b0b9         db  0x00 ; '.'
000000000020b0ba         db  0x00 ; '.'
000000000020b0bb         db  0x00 ; '.'
                     pos:
000000000020b0bc         db  0x00 ; '.'                                         ; DATA XREF=main+105, main+125, unary_advance, unary_advance+15, unary_advance+26, binary_operator+19, binary_operator+52, binary_operator+180, binary_operator+217, binary_operator+272, binary_operator+328
000000000020b0bd         db  0x00 ; '.'
000000000020b0be         db  0x00 ; '.'
000000000020b0bf         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020b0c0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020b0c1         db  0x00 ; '.'
000000000020b0c2         db  0x00 ; '.'
000000000020b0c3         db  0x00 ; '.'
000000000020b0c4         db  0x00 ; '.'
000000000020b0c5         db  0x00 ; '.'
000000000020b0c6         db  0x00 ; '.'
000000000020b0c7         db  0x00 ; '.'
                     file_name:
000000000020b0c8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020b0c9         db  0x00 ; '.'
000000000020b0ca         db  0x00 ; '.'
000000000020b0cb         db  0x00 ; '.'
000000000020b0cc         db  0x00 ; '.'
000000000020b0cd         db  0x00 ; '.'
000000000020b0ce         db  0x00 ; '.'
000000000020b0cf         db  0x00 ; '.'
                     program_name:
000000000020b0d0         db  0x00 ; '.'                                         ; DATA XREF=usage+42, set_program_name+109
000000000020b0d1         db  0x00 ; '.'
000000000020b0d2         db  0x00 ; '.'
000000000020b0d3         db  0x00 ; '.'
000000000020b0d4         db  0x00 ; '.'
000000000020b0d5         db  0x00 ; '.'
000000000020b0d6         db  0x00 ; '.'
000000000020b0d7         db  0x00 ; '.'
000000000020b0d8         db  0x00 ; '.'
000000000020b0d9         db  0x00 ; '.'
000000000020b0da         db  0x00 ; '.'
000000000020b0db         db  0x00 ; '.'
000000000020b0dc         db  0x00 ; '.'
000000000020b0dd         db  0x00 ; '.'
000000000020b0de         db  0x00 ; '.'
000000000020b0df         db  0x00 ; '.'
                     slot0:
000000000020b0e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020b0e1         db  0x00 ; '.'
000000000020b0e2         db  0x00 ; '.'
000000000020b0e3         db  0x00 ; '.'
000000000020b0e4         db  0x00 ; '.'
000000000020b0e5         db  0x00 ; '.'
000000000020b0e6         db  0x00 ; '.'
000000000020b0e7         db  0x00 ; '.'
000000000020b0e8         db  0x00 ; '.'
000000000020b0e9         db  0x00 ; '.'
000000000020b0ea         db  0x00 ; '.'
000000000020b0eb         db  0x00 ; '.'
000000000020b0ec         db  0x00 ; '.'
000000000020b0ed         db  0x00 ; '.'
000000000020b0ee         db  0x00 ; '.'
000000000020b0ef         db  0x00 ; '.'
000000000020b0f0         db  0x00 ; '.'
000000000020b0f1         db  0x00 ; '.'
000000000020b0f2         db  0x00 ; '.'
000000000020b0f3         db  0x00 ; '.'
000000000020b0f4         db  0x00 ; '.'
000000000020b0f5         db  0x00 ; '.'
000000000020b0f6         db  0x00 ; '.'
000000000020b0f7         db  0x00 ; '.'
000000000020b0f8         db  0x00 ; '.'
000000000020b0f9         db  0x00 ; '.'
000000000020b0fa         db  0x00 ; '.'
000000000020b0fb         db  0x00 ; '.'
000000000020b0fc         db  0x00 ; '.'
000000000020b0fd         db  0x00 ; '.'
000000000020b0fe         db  0x00 ; '.'
000000000020b0ff         db  0x00 ; '.'
000000000020b100         db  0x00 ; '.'
000000000020b101         db  0x00 ; '.'
000000000020b102         db  0x00 ; '.'
000000000020b103         db  0x00 ; '.'
000000000020b104         db  0x00 ; '.'
000000000020b105         db  0x00 ; '.'
000000000020b106         db  0x00 ; '.'
000000000020b107         db  0x00 ; '.'
000000000020b108         db  0x00 ; '.'
000000000020b109         db  0x00 ; '.'
000000000020b10a         db  0x00 ; '.'
000000000020b10b         db  0x00 ; '.'
000000000020b10c         db  0x00 ; '.'
000000000020b10d         db  0x00 ; '.'
000000000020b10e         db  0x00 ; '.'
000000000020b10f         db  0x00 ; '.'
000000000020b110         db  0x00 ; '.'
000000000020b111         db  0x00 ; '.'
000000000020b112         db  0x00 ; '.'
000000000020b113         db  0x00 ; '.'
000000000020b114         db  0x00 ; '.'
000000000020b115         db  0x00 ; '.'
000000000020b116         db  0x00 ; '.'
000000000020b117         db  0x00 ; '.'
000000000020b118         db  0x00 ; '.'
000000000020b119         db  0x00 ; '.'
000000000020b11a         db  0x00 ; '.'
000000000020b11b         db  0x00 ; '.'
000000000020b11c         db  0x00 ; '.'
000000000020b11d         db  0x00 ; '.'
000000000020b11e         db  0x00 ; '.'
000000000020b11f         db  0x00 ; '.'
000000000020b120         db  0x00 ; '.'
000000000020b121         db  0x00 ; '.'
000000000020b122         db  0x00 ; '.'
000000000020b123         db  0x00 ; '.'
000000000020b124         db  0x00 ; '.'
000000000020b125         db  0x00 ; '.'
000000000020b126         db  0x00 ; '.'
000000000020b127         db  0x00 ; '.'
000000000020b128         db  0x00 ; '.'
000000000020b129         db  0x00 ; '.'
000000000020b12a         db  0x00 ; '.'
000000000020b12b         db  0x00 ; '.'
000000000020b12c         db  0x00 ; '.'
000000000020b12d         db  0x00 ; '.'
000000000020b12e         db  0x00 ; '.'
000000000020b12f         db  0x00 ; '.'
000000000020b130         db  0x00 ; '.'
000000000020b131         db  0x00 ; '.'
000000000020b132         db  0x00 ; '.'
000000000020b133         db  0x00 ; '.'
000000000020b134         db  0x00 ; '.'
000000000020b135         db  0x00 ; '.'
000000000020b136         db  0x00 ; '.'
000000000020b137         db  0x00 ; '.'
000000000020b138         db  0x00 ; '.'
000000000020b139         db  0x00 ; '.'
000000000020b13a         db  0x00 ; '.'
000000000020b13b         db  0x00 ; '.'
000000000020b13c         db  0x00 ; '.'
000000000020b13d         db  0x00 ; '.'
000000000020b13e         db  0x00 ; '.'
000000000020b13f         db  0x00 ; '.'
000000000020b140         db  0x00 ; '.'
000000000020b141         db  0x00 ; '.'
000000000020b142         db  0x00 ; '.'
000000000020b143         db  0x00 ; '.'
000000000020b144         db  0x00 ; '.'
000000000020b145         db  0x00 ; '.'
000000000020b146         db  0x00 ; '.'
000000000020b147         db  0x00 ; '.'
000000000020b148         db  0x00 ; '.'
000000000020b149         db  0x00 ; '.'
000000000020b14a         db  0x00 ; '.'
000000000020b14b         db  0x00 ; '.'
000000000020b14c         db  0x00 ; '.'
000000000020b14d         db  0x00 ; '.'
000000000020b14e         db  0x00 ; '.'
000000000020b14f         db  0x00 ; '.'
000000000020b150         db  0x00 ; '.'
000000000020b151         db  0x00 ; '.'
000000000020b152         db  0x00 ; '.'
000000000020b153         db  0x00 ; '.'
000000000020b154         db  0x00 ; '.'
000000000020b155         db  0x00 ; '.'
000000000020b156         db  0x00 ; '.'
000000000020b157         db  0x00 ; '.'
000000000020b158         db  0x00 ; '.'
000000000020b159         db  0x00 ; '.'
000000000020b15a         db  0x00 ; '.'
000000000020b15b         db  0x00 ; '.'
000000000020b15c         db  0x00 ; '.'
000000000020b15d         db  0x00 ; '.'
000000000020b15e         db  0x00 ; '.'
000000000020b15f         db  0x00 ; '.'
000000000020b160         db  0x00 ; '.'
000000000020b161         db  0x00 ; '.'
000000000020b162         db  0x00 ; '.'
000000000020b163         db  0x00 ; '.'
000000000020b164         db  0x00 ; '.'
000000000020b165         db  0x00 ; '.'
000000000020b166         db  0x00 ; '.'
000000000020b167         db  0x00 ; '.'
000000000020b168         db  0x00 ; '.'
000000000020b169         db  0x00 ; '.'
000000000020b16a         db  0x00 ; '.'
000000000020b16b         db  0x00 ; '.'
000000000020b16c         db  0x00 ; '.'
000000000020b16d         db  0x00 ; '.'
000000000020b16e         db  0x00 ; '.'
000000000020b16f         db  0x00 ; '.'
000000000020b170         db  0x00 ; '.'
000000000020b171         db  0x00 ; '.'
000000000020b172         db  0x00 ; '.'
000000000020b173         db  0x00 ; '.'
000000000020b174         db  0x00 ; '.'
000000000020b175         db  0x00 ; '.'
000000000020b176         db  0x00 ; '.'
000000000020b177         db  0x00 ; '.'
000000000020b178         db  0x00 ; '.'
000000000020b179         db  0x00 ; '.'
000000000020b17a         db  0x00 ; '.'
000000000020b17b         db  0x00 ; '.'
000000000020b17c         db  0x00 ; '.'
000000000020b17d         db  0x00 ; '.'
000000000020b17e         db  0x00 ; '.'
000000000020b17f         db  0x00 ; '.'
000000000020b180         db  0x00 ; '.'
000000000020b181         db  0x00 ; '.'
000000000020b182         db  0x00 ; '.'
000000000020b183         db  0x00 ; '.'
000000000020b184         db  0x00 ; '.'
000000000020b185         db  0x00 ; '.'
000000000020b186         db  0x00 ; '.'
000000000020b187         db  0x00 ; '.'
000000000020b188         db  0x00 ; '.'
000000000020b189         db  0x00 ; '.'
000000000020b18a         db  0x00 ; '.'
000000000020b18b         db  0x00 ; '.'
000000000020b18c         db  0x00 ; '.'
000000000020b18d         db  0x00 ; '.'
000000000020b18e         db  0x00 ; '.'
000000000020b18f         db  0x00 ; '.'
000000000020b190         db  0x00 ; '.'
000000000020b191         db  0x00 ; '.'
000000000020b192         db  0x00 ; '.'
000000000020b193         db  0x00 ; '.'
000000000020b194         db  0x00 ; '.'
000000000020b195         db  0x00 ; '.'
000000000020b196         db  0x00 ; '.'
000000000020b197         db  0x00 ; '.'
000000000020b198         db  0x00 ; '.'
000000000020b199         db  0x00 ; '.'
000000000020b19a         db  0x00 ; '.'
000000000020b19b         db  0x00 ; '.'
000000000020b19c         db  0x00 ; '.'
000000000020b19d         db  0x00 ; '.'
000000000020b19e         db  0x00 ; '.'
000000000020b19f         db  0x00 ; '.'
000000000020b1a0         db  0x00 ; '.'
000000000020b1a1         db  0x00 ; '.'
000000000020b1a2         db  0x00 ; '.'
000000000020b1a3         db  0x00 ; '.'
000000000020b1a4         db  0x00 ; '.'
000000000020b1a5         db  0x00 ; '.'
000000000020b1a6         db  0x00 ; '.'
000000000020b1a7         db  0x00 ; '.'
000000000020b1a8         db  0x00 ; '.'
000000000020b1a9         db  0x00 ; '.'
000000000020b1aa         db  0x00 ; '.'
000000000020b1ab         db  0x00 ; '.'
000000000020b1ac         db  0x00 ; '.'
000000000020b1ad         db  0x00 ; '.'
000000000020b1ae         db  0x00 ; '.'
000000000020b1af         db  0x00 ; '.'
000000000020b1b0         db  0x00 ; '.'
000000000020b1b1         db  0x00 ; '.'
000000000020b1b2         db  0x00 ; '.'
000000000020b1b3         db  0x00 ; '.'
000000000020b1b4         db  0x00 ; '.'
000000000020b1b5         db  0x00 ; '.'
000000000020b1b6         db  0x00 ; '.'
000000000020b1b7         db  0x00 ; '.'
000000000020b1b8         db  0x00 ; '.'
000000000020b1b9         db  0x00 ; '.'
000000000020b1ba         db  0x00 ; '.'
000000000020b1bb         db  0x00 ; '.'
000000000020b1bc         db  0x00 ; '.'
000000000020b1bd         db  0x00 ; '.'
000000000020b1be         db  0x00 ; '.'
000000000020b1bf         db  0x00 ; '.'
000000000020b1c0         db  0x00 ; '.'
000000000020b1c1         db  0x00 ; '.'
000000000020b1c2         db  0x00 ; '.'
000000000020b1c3         db  0x00 ; '.'
000000000020b1c4         db  0x00 ; '.'
000000000020b1c5         db  0x00 ; '.'
000000000020b1c6         db  0x00 ; '.'
000000000020b1c7         db  0x00 ; '.'
000000000020b1c8         db  0x00 ; '.'
000000000020b1c9         db  0x00 ; '.'
000000000020b1ca         db  0x00 ; '.'
000000000020b1cb         db  0x00 ; '.'
000000000020b1cc         db  0x00 ; '.'
000000000020b1cd         db  0x00 ; '.'
000000000020b1ce         db  0x00 ; '.'
000000000020b1cf         db  0x00 ; '.'
000000000020b1d0         db  0x00 ; '.'
000000000020b1d1         db  0x00 ; '.'
000000000020b1d2         db  0x00 ; '.'
000000000020b1d3         db  0x00 ; '.'
000000000020b1d4         db  0x00 ; '.'
000000000020b1d5         db  0x00 ; '.'
000000000020b1d6         db  0x00 ; '.'
000000000020b1d7         db  0x00 ; '.'
000000000020b1d8         db  0x00 ; '.'
000000000020b1d9         db  0x00 ; '.'
000000000020b1da         db  0x00 ; '.'
000000000020b1db         db  0x00 ; '.'
000000000020b1dc         db  0x00 ; '.'
000000000020b1dd         db  0x00 ; '.'
000000000020b1de         db  0x00 ; '.'
000000000020b1df         db  0x00 ; '.'
                     default_quoting_options:
000000000020b1e0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020b1e1         db  0x00 ; '.'
000000000020b1e2         db  0x00 ; '.'
000000000020b1e3         db  0x00 ; '.'
000000000020b1e4         db  0x00 ; '.'
000000000020b1e5         db  0x00 ; '.'
000000000020b1e6         db  0x00 ; '.'
000000000020b1e7         db  0x00 ; '.'
000000000020b1e8         db  0x00 ; '.'
000000000020b1e9         db  0x00 ; '.'
000000000020b1ea         db  0x00 ; '.'
000000000020b1eb         db  0x00 ; '.'
000000000020b1ec         db  0x00 ; '.'
000000000020b1ed         db  0x00 ; '.'
000000000020b1ee         db  0x00 ; '.'
000000000020b1ef         db  0x00 ; '.'
000000000020b1f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020b1f1         db  0x00 ; '.'
000000000020b1f2         db  0x00 ; '.'
000000000020b1f3         db  0x00 ; '.'
000000000020b1f4         db  0x00 ; '.'
000000000020b1f5         db  0x00 ; '.'
000000000020b1f6         db  0x00 ; '.'
000000000020b1f7         db  0x00 ; '.'
000000000020b1f8         db  0x00 ; '.'
000000000020b1f9         db  0x00 ; '.'
000000000020b1fa         db  0x00 ; '.'
000000000020b1fb         db  0x00 ; '.'
000000000020b1fc         db  0x00 ; '.'
000000000020b1fd         db  0x00 ; '.'
000000000020b1fe         db  0x00 ; '.'
000000000020b1ff         db  0x00 ; '.'
000000000020b200         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020b201         db  0x00 ; '.'
000000000020b202         db  0x00 ; '.'
000000000020b203         db  0x00 ; '.'
000000000020b204         db  0x00 ; '.'
000000000020b205         db  0x00 ; '.'
000000000020b206         db  0x00 ; '.'
000000000020b207         db  0x00 ; '.'
000000000020b208         db  0x00 ; '.'
000000000020b209         db  0x00 ; '.'
000000000020b20a         db  0x00 ; '.'
000000000020b20b         db  0x00 ; '.'
000000000020b20c         db  0x00 ; '.'
000000000020b20d         db  0x00 ; '.'
000000000020b20e         db  0x00 ; '.'
000000000020b20f         db  0x00 ; '.'
                     qword_20b210:
000000000020b210         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020b211         db  0x00 ; '.'
000000000020b212         db  0x00 ; '.'
000000000020b213         db  0x00 ; '.'
000000000020b214         db  0x00 ; '.'
000000000020b215         db  0x00 ; '.'
000000000020b216         db  0x00 ; '.'
000000000020b217         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20b220; 0x20b570[ (848 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20b220; 0x416790[ (2143600 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __snprintf_chk:
000000000020b220         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
000000000020b228         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000020b230         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020b238         extern function code                                   ; DATA XREF=__errno_location@GOT
                     error_at_line:
000000000020b240         extern function code                                   ; DATA XREF=error_at_line@GOT
                     strncmp:
000000000020b248         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020b250         extern function code
                     _exit:
000000000020b258         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
000000000020b260         extern function code                                   ; DATA XREF=__fpending@GOT
                     isatty:
000000000020b268         extern function code                                   ; DATA XREF=isatty@GOT
                     textdomain:
000000000020b270         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020b278         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020b280         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000020b288         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020b290         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020b298         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
000000000020b2a0         extern function code                                   ; DATA XREF=__lxstat@GOT
                     __stack_chk_fail:
000000000020b2a8         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     mbrtowc:
000000000020b2b0         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strrchr:
000000000020b2b8         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020b2c0         extern function code                                   ; DATA XREF=lseek@GOT
                     memset:
000000000020b2c8         extern function code                                   ; DATA XREF=memset@GOT
                     geteuid:
000000000020b2d0         extern function code                                   ; DATA XREF=geteuid@GOT
                     __libc_start_main:
000000000020b2d8         extern function code
                     memcmp:
000000000020b2e0         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020b2e8         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020b2f0         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000020b2f8         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000020b300         extern function code
                     strtol:
000000000020b308         extern function code                                   ; DATA XREF=strtol@GOT
                     memcpy:
000000000020b310         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020b318         extern function code                                   ; DATA XREF=fileno@GOT
                     __xstat:
000000000020b320         extern function code                                   ; DATA XREF=__xstat@GOT
                     malloc:
000000000020b328         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020b330         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020b338         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     getegid:
000000000020b340         extern function code                                   ; DATA XREF=getegid@GOT
                     __freading:
000000000020b348         extern function code                                   ; DATA XREF=__freading@GOT
                     realloc:
000000000020b350         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000020b358         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020b360         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     error:
000000000020b368         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
000000000020b370         extern function code                                   ; DATA XREF=fseeko@GOT
                     euidaccess:
000000000020b378         extern function code                                   ; DATA XREF=euidaccess@GOT
                     __cxa_atexit:
000000000020b380         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000020b388         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020b390         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020b398         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020b3a0         extern function code
                     mbsinit:
000000000020b3a8         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020b3b0         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020b3b8         extern function code
                     __ctype_b_loc:
000000000020b3c0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __snprintf_chk@@GLIBC_2.3.4:
000000000020b3c8         extern function code
                     free@@GLIBC_2.2.5:
000000000020b3d0         extern function code
                     abort@@GLIBC_2.2.5:
000000000020b3d8         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020b3e0         extern function code
                     error_at_line@@GLIBC_2.2.5:
000000000020b3e8         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020b3f0         extern function code
                     _ITM_deregisterTMCloneTable_20b3f8:        // _ITM_deregisterTMCloneTable
000000000020b3f8         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020b400         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020b408         extern function code
                     isatty@@GLIBC_2.2.5:
000000000020b410         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020b418         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020b420         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020b428         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020b430         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020b438         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020b440         extern function code
                     __lxstat@@GLIBC_2.2.5:
000000000020b448         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020b450         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020b458         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020b460         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020b468         extern function code
                     memset@@GLIBC_2.2.5:
000000000020b470         extern function code
                     geteuid@@GLIBC_2.2.5:
000000000020b478         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020b480         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020b488         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020b490         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020b498         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020b4a0         extern function code
                     __gmon_start___20b4a8:        // __gmon_start__
000000000020b4a8         extern function code
                     strtol@@GLIBC_2.2.5:
000000000020b4b0         extern function code
                     memcpy@@GLIBC_2.14:
000000000020b4b8         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020b4c0         extern function code
                     __xstat@@GLIBC_2.2.5:
000000000020b4c8         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020b4d0         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020b4d8         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020b4e0         extern function code
                     getegid@@GLIBC_2.2.5:
000000000020b4e8         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020b4f0         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020b4f8         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020b500         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020b508         extern function code
                     error@@GLIBC_2.2.5:
000000000020b510         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020b518         extern function code
                     euidaccess@@GLIBC_2.2.5:
000000000020b520         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020b528         extern function code
                     exit@@GLIBC_2.2.5:
000000000020b530         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020b538         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020b540         extern function code
                     _ITM_registerTMCloneTable_20b548:        // _ITM_registerTMCloneTable
000000000020b548         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020b550         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020b558         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020b560         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020b568         extern function code
