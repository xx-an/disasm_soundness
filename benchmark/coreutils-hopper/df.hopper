
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/df
        UUID: F9A7D035-271A-1248-D246-D7695ADD280C
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x130c8[ (78024 bytes)
        ; File offset : [0; 78024[ (78024 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0xa0 ; '.'
0000000000000019         db  0x3b ; ';'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x58 ; 'X'
0000000000000029         db  0x6e ; 'n'
000000000000002a         db  0x06 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0xc8 ; '.'
00000000000000d1         db  0x30 ; '0'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0xc8 ; '.'
00000000000000d9         db  0x30 ; '0'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x70 ; 'p'
00000000000000f1         db  0x38 ; '8'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x70 ; 'p'
00000000000000f9         db  0x38 ; '8'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x70 ; 'p'                                         ; DATA XREF=main+1498, human_readable+924, quotearg_free+87, same_nameat.part.0+51, same_nameat.part.0+108, rpl_fflush+18, slotvec0
0000000000000101         db  0x38 ; '8'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'                                         ; DATA XREF=get_header+613
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x80 ; '.'
0000000000000109         db  0x0a ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x10 ; '.'
0000000000000111         db  0x0d ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'                                         ; DATA XREF=get_header+418
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x18 ; '.'
0000000000000129         db  0x3b ; ';'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x18 ; '.'
0000000000000131         db  0x3b ; ';'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x18 ; '.'                                         ; DATA XREF=same_nameat.part.0+17, same_nameat.part.0+198
0000000000000139         db  0x3b ; ';'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'                                         ; DATA XREF=main+22, main+1327, find_mount_point+29
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'                                         ; DATA XREF=human_options+440
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'                                         ; DATA XREF=get_fs_usage+10, get_fs_usage+222
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'                                         ; DATA XREF=alloc_field+179
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0xbc ; '.'
0000000000000199         db  0x0e ; '.'
000000000000019a         db  0x01 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0xbc ; '.'
00000000000001a1         db  0x0e ; '.'
00000000000001a2         db  0x01 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0xbc ; '.'
00000000000001a9         db  0x0e ; '.'
00000000000001aa         db  0x01 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0x3c ; '<'
00000000000001b1         db  0x05 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0x3c ; '<'
00000000000001b9         db  0x05 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'                                         ; DATA XREF=decode_output_arg+353
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=main+1674, main+1679, human_options+288, human_options+293, human_options+385, xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x70 ; 'p'
0000000000000209         db  0x38 ; '8'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x70 ; 'p'
0000000000000211         db  0x38 ; '8'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x70 ; 'p'
0000000000000219         db  0x38 ; '8'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x90 ; '.'
0000000000000221         db  0x07 ; '.'
0000000000000222         db  0x00 ; '.'                                         ; DATA XREF=main+5497
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x90 ; '.'
0000000000000229         db  0x07 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0xf9 ; '.'
0000000000000285         db  0xa7 ; '.'
0000000000000286         db  0xd0 ; '.'
0000000000000287         db  0x35 ; '5'                                         ; DATA XREF=human_readable+189
0000000000000288         db  0x27 ; '''
0000000000000289         db  0x1a ; '.'
000000000000028a         db  0x12 ; '.'
000000000000028b         db  0x48 ; 'H'
000000000000028c         db  0xd2 ; '.'
000000000000028d         db  0x46 ; 'F'
000000000000028e         db  0xd7 ; '.'
000000000000028f         db  0x69 ; 'i'
0000000000000290         db  0x5a ; 'Z'
0000000000000291         db  0xdd ; '.'
0000000000000292         db  0x28 ; '('
0000000000000293         db  0x0c ; '.'
0000000000000294         db  0x65 ; 'e'
0000000000000295         db  0xe3 ; '.'
0000000000000296         db  0xe2 ; '.'
0000000000000297         db  0xee ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2dc[ (68 bytes)
        ; File offset : [664; 732[ (68 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x5c ; '\'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x41 ; 'A'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x5c ; '\'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x5d ; ']'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x62 ; 'b'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'                                         ; DATA XREF=get_header+10, get_header+587
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x32 ; '2'
00000000000002d5         db  0xc4 ; '.'
00000000000002d6         db  0xf7 ; '.'
00000000000002d7         db  0x12 ; '.'
00000000000002d8         db  0xb3 ; '.'
00000000000002d9         db  0xa2 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xc40[ (2400 bytes)
        ; File offset : [736; 3136[ (2400 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0xce ; '.'
00000000000002f9         db  0x01 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xfd ; '.'
0000000000000311         db  0x01 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x6f ; 'o'
0000000000000329         db  0x03 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x7b ; '{'
0000000000000341         db  0x02 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x60 ; '`'
0000000000000359         db  0x02 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x99 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x3f ; '?'
0000000000000389         db  0x01 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x37 ; '7'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0xd3 ; '.'
00000000000003b9         db  0x03 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x20 ; ' '
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x9f ; '.'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x55 ; 'U'                                         ; DATA XREF=get_header+464, xstrtoumax+420
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'                                         ; DATA XREF=get_header+452
0000000000000400         db  0x07 ; '.'                                         ; DATA XREF=main+851, human_readable+80, human_options+458, xstrtoumax+437, xstrtoumax+806, xstrtoumax+878, rpl_fcntl+288
0000000000000401         db  0x01 ; '.'                                         ; DATA XREF=areadlink_with_size+4, areadlink_with_size+46, rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x72 ; 'r'                                         ; DATA XREF=get_dev+22, get_dev+115
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x6d ; 'm'
0000000000000431         db  0x01 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x2d ; '-'
0000000000000449         db  0x01 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x65 ; 'e'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'                                         ; DATA XREF=sub_4a7e+710
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x0c ; '.'
0000000000000479         db  0x02 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0xd2 ; '.'
0000000000000491         db  0x02 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x07 ; '.'
00000000000004a9         db  0x03 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x8a ; '.'
00000000000004c1         db  0x01 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'                                         ; DATA XREF=sub_4a7e+679
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'                                         ; DATA XREF=sub_4a7e+600
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x03 ; '.'
00000000000004d9         db  0x03 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x4e ; 'N'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0xf0 ; '.'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x1f ; '.'
0000000000000521         db  0x01 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x7f ; '.'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0xe6 ; '.'
0000000000000551         db  0x02 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x59 ; 'Y'
0000000000000569         db  0x00 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x6e ; 'n'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x15 ; '.'
0000000000000599         db  0x02 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x29 ; ')'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x6b ; 'k'
00000000000005c9         db  0x02 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x12 ; '.'
00000000000005e1         db  0x03 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x42 ; 'B'
00000000000005f9         db  0x03 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x46 ; 'F'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xfd ; '.'
0000000000000629         db  0x02 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x7d ; '}'
0000000000000641         db  0x01 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xda ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x4d ; 'M'
0000000000000671         db  0x03 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x26 ; '&'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x28 ; '('
00000000000006a1         db  0x02 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0xa3 ; '.'
00000000000006b9         db  0x02 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x12 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x8b ; '.'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0xb4 ; '.'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0xa5 ; '.'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x29 ; ')'
0000000000000719         db  0x03 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x50 ; 'P'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x60 ; '`'
0000000000000749         db  0x03 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x18 ; '.'
0000000000000761         db  0x01 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x2f ; '/'
0000000000000779         db  0x02 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x22 ; '"'
0000000000000791         db  0x03 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x48 ; 'H'
00000000000007a9         db  0x02 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0xef ; '.'
00000000000007c1         db  0x03 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x20 ; ' '
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x83 ; '.'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x21 ; '!'
00000000000007f1         db  0x02 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x41 ; 'A'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0xed ; '.'
0000000000000821         db  0x02 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x1d ; '.'
0000000000000839         db  0x03 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0xf5 ; '.'
0000000000000851         db  0x01 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x9b ; '.'
0000000000000869         db  0x01 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x0b ; '.'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x91 ; '.'
0000000000000899         db  0x01 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x0e ; '.'
00000000000008b1         db  0x01 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xaa ; '.'
00000000000008c9         db  0x01 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0xd5 ; '.'
00000000000008e1         db  0x01 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0xe3 ; '.'
00000000000008f9         db  0x01 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0xe8 ; '.'
0000000000000911         db  0x00 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x58 ; 'X'
0000000000000929         db  0x00 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x91 ; '.'
0000000000000941         db  0x00 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x1f ; '.'
0000000000000959         db  0x00 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x12 ; '.'
0000000000000971         db  0x00 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x57 ; 'W'
0000000000000989         db  0x01 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0xf5 ; '.'
00000000000009a1         db  0x02 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0x5f ; '_'
00000000000009b9         db  0x00 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xac ; '.'
00000000000009d1         db  0x00 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x32 ; '2'
00000000000009e9         db  0x00 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x12 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x00 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0x00 ; '.'
00000000000009f1         db  0x00 ; '.'
00000000000009f2         db  0x00 ; '.'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x00 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x3b ; ';'
0000000000000a01         db  0x03 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x12 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x00 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0x00 ; '.'
0000000000000a09         db  0x00 ; '.'
0000000000000a0a         db  0x00 ; '.'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x00 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x31 ; '1'
0000000000000a19         db  0x00 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x12 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0x00 ; '.'
0000000000000a21         db  0x00 ; '.'
0000000000000a22         db  0x00 ; '.'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x00 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x8f ; '.'
0000000000000a31         db  0x03 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x12 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x00 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x00 ; '.'
0000000000000a39         db  0x00 ; '.'
0000000000000a3a         db  0x00 ; '.'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x00 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0xba ; '.'
0000000000000a49         db  0x02 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x12 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x00 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x00 ; '.'
0000000000000a51         db  0x00 ; '.'
0000000000000a52         db  0x00 ; '.'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x00 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0xa0 ; '.'
0000000000000a61         db  0x00 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x12 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x00 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0x00 ; '.'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x00 ; '.'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x00 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0x3a ; ':'
0000000000000a79         db  0x02 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x12 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x00 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x00 ; '.'
0000000000000a81         db  0x00 ; '.'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x00 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x5f ; '_'
0000000000000a91         db  0x01 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x12 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0x00 ; '.'
0000000000000a99         db  0x00 ; '.'
0000000000000a9a         db  0x00 ; '.'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x00 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0xfe ; '.'
0000000000000aa9         db  0x03 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x20 ; ' '
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x00 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0x00 ; '.'
0000000000000ab1         db  0x00 ; '.'
0000000000000ab2         db  0x00 ; '.'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x00 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'
0000000000000ac0         db  0xd3 ; '.'
0000000000000ac1         db  0x00 ; '.'
0000000000000ac2         db  0x00 ; '.'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x12 ; '.'
0000000000000ac5         db  0x00 ; '.'
0000000000000ac6         db  0x00 ; '.'
0000000000000ac7         db  0x00 ; '.'
0000000000000ac8         db  0x00 ; '.'
0000000000000ac9         db  0x00 ; '.'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x00 ; '.'
0000000000000acc         db  0x00 ; '.'
0000000000000acd         db  0x00 ; '.'
0000000000000ace         db  0x00 ; '.'
0000000000000acf         db  0x00 ; '.'
0000000000000ad0         db  0x00 ; '.'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x00 ; '.'
0000000000000ad5         db  0x00 ; '.'
0000000000000ad6         db  0x00 ; '.'
0000000000000ad7         db  0x00 ; '.'
0000000000000ad8         db  0xa2 ; '.'
0000000000000ad9         db  0x01 ; '.'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x00 ; '.'
0000000000000adc         db  0x12 ; '.'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x00 ; '.'
0000000000000adf         db  0x00 ; '.'
0000000000000ae0         db  0x00 ; '.'
0000000000000ae1         db  0x00 ; '.'
0000000000000ae2         db  0x00 ; '.'
0000000000000ae3         db  0x00 ; '.'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x00 ; '.'
0000000000000ae6         db  0x00 ; '.'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x00 ; '.'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x00 ; '.'
0000000000000aeb         db  0x00 ; '.'
0000000000000aec         db  0x00 ; '.'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x00 ; '.'
0000000000000aef         db  0x00 ; '.'
0000000000000af0         db  0x88 ; '.'
0000000000000af1         db  0x00 ; '.'
0000000000000af2         db  0x00 ; '.'
0000000000000af3         db  0x00 ; '.'
0000000000000af4         db  0x12 ; '.'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x00 ; '.'
0000000000000af8         db  0x00 ; '.'
0000000000000af9         db  0x00 ; '.'
0000000000000afa         db  0x00 ; '.'
0000000000000afb         db  0x00 ; '.'
0000000000000afc         db  0x00 ; '.'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x00 ; '.'
0000000000000aff         db  0x00 ; '.'
0000000000000b00         db  0x00 ; '.'
0000000000000b01         db  0x00 ; '.'
0000000000000b02         db  0x00 ; '.'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x00 ; '.'
0000000000000b05         db  0x00 ; '.'
0000000000000b06         db  0x00 ; '.'
0000000000000b07         db  0x00 ; '.'
0000000000000b08         db  0xb6 ; '.'
0000000000000b09         db  0x01 ; '.'
0000000000000b0a         db  0x00 ; '.'
0000000000000b0b         db  0x00 ; '.'
0000000000000b0c         db  0x12 ; '.'
0000000000000b0d         db  0x00 ; '.'
0000000000000b0e         db  0x00 ; '.'
0000000000000b0f         db  0x00 ; '.'
0000000000000b10         db  0x00 ; '.'
0000000000000b11         db  0x00 ; '.'
0000000000000b12         db  0x00 ; '.'
0000000000000b13         db  0x00 ; '.'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x00 ; '.'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x00 ; '.'
0000000000000b18         db  0x00 ; '.'
0000000000000b19         db  0x00 ; '.'
0000000000000b1a         db  0x00 ; '.'
0000000000000b1b         db  0x00 ; '.'
0000000000000b1c         db  0x00 ; '.'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x00 ; '.'
0000000000000b1f         db  0x00 ; '.'
0000000000000b20         db  0xc3 ; '.'
0000000000000b21         db  0x02 ; '.'
0000000000000b22         db  0x00 ; '.'
0000000000000b23         db  0x00 ; '.'
0000000000000b24         db  0x22 ; '"'
0000000000000b25         db  0x00 ; '.'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x00 ; '.'
0000000000000b28         db  0x00 ; '.'
0000000000000b29         db  0x00 ; '.'
0000000000000b2a         db  0x00 ; '.'
0000000000000b2b         db  0x00 ; '.'
0000000000000b2c         db  0x00 ; '.'
0000000000000b2d         db  0x00 ; '.'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x00 ; '.'
0000000000000b30         db  0x00 ; '.'
0000000000000b31         db  0x00 ; '.'
0000000000000b32         db  0x00 ; '.'
0000000000000b33         db  0x00 ; '.'
0000000000000b34         db  0x00 ; '.'
0000000000000b35         db  0x00 ; '.'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x00 ; '.'
0000000000000b38         db  0x38 ; '8'
0000000000000b39         db  0x01 ; '.'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'
0000000000000b3c         db  0x12 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x00 ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0x00 ; '.'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x00 ; '.'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x00 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x00 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x00 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x00 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x00 ; '.'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0xc0 ; '.'
0000000000000b51         db  0x01 ; '.'
0000000000000b52         db  0x00 ; '.'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x12 ; '.'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x00 ; '.'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0x00 ; '.'
0000000000000b59         db  0x00 ; '.'
0000000000000b5a         db  0x00 ; '.'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x00 ; '.'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x00 ; '.'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x00 ; '.'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x00 ; '.'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x00 ; '.'
0000000000000b65         db  0x00 ; '.'
0000000000000b66         db  0x00 ; '.'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0xd8 ; '.'
0000000000000b69         db  0x02 ; '.'
0000000000000b6a         db  0x00 ; '.'
0000000000000b6b         db  0x00 ; '.'
0000000000000b6c         db  0x12 ; '.'
0000000000000b6d         db  0x00 ; '.'
0000000000000b6e         db  0x00 ; '.'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x00 ; '.'
0000000000000b71         db  0x00 ; '.'
0000000000000b72         db  0x00 ; '.'
0000000000000b73         db  0x00 ; '.'
0000000000000b74         db  0x00 ; '.'
0000000000000b75         db  0x00 ; '.'
0000000000000b76         db  0x00 ; '.'
0000000000000b77         db  0x00 ; '.'
0000000000000b78         db  0x00 ; '.'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x00 ; '.'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x00 ; '.'
0000000000000b7d         db  0x00 ; '.'
0000000000000b7e         db  0x00 ; '.'
0000000000000b7f         db  0x00 ; '.'
0000000000000b80         db  0x76 ; 'v'
0000000000000b81         db  0x01 ; '.'
0000000000000b82         db  0x00 ; '.'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x11 ; '.'
0000000000000b85         db  0x00 ; '.'
0000000000000b86         db  0x19 ; '.'
0000000000000b87         db  0x00 ; '.'
0000000000000b88         db  0x08 ; '.'
0000000000000b89         db  0x43 ; 'C'
0000000000000b8a         db  0x21 ; '!'
0000000000000b8b         db  0x00 ; '.'
0000000000000b8c         db  0x00 ; '.'
0000000000000b8d         db  0x00 ; '.'
0000000000000b8e         db  0x00 ; '.'
0000000000000b8f         db  0x00 ; '.'
0000000000000b90         db  0x08 ; '.'
0000000000000b91         db  0x00 ; '.'
0000000000000b92         db  0x00 ; '.'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x00 ; '.'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x00 ; '.'
0000000000000b97         db  0x00 ; '.'
0000000000000b98         db  0x74 ; 't'
0000000000000b99         db  0x03 ; '.'
0000000000000b9a         db  0x00 ; '.'
0000000000000b9b         db  0x00 ; '.'
0000000000000b9c         db  0x11 ; '.'
0000000000000b9d         db  0x00 ; '.'
0000000000000b9e         db  0x19 ; '.'
0000000000000b9f         db  0x00 ; '.'
0000000000000ba0         db  0x00 ; '.'
0000000000000ba1         db  0x43 ; 'C'
0000000000000ba2         db  0x21 ; '!'
0000000000000ba3         db  0x00 ; '.'
0000000000000ba4         db  0x00 ; '.'
0000000000000ba5         db  0x00 ; '.'
0000000000000ba6         db  0x00 ; '.'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x08 ; '.'
0000000000000ba9         db  0x00 ; '.'
0000000000000baa         db  0x00 ; '.'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x00 ; '.'
0000000000000bae         db  0x00 ; '.'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0xbb ; '.'
0000000000000bb1         db  0x00 ; '.'
0000000000000bb2         db  0x00 ; '.'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x21 ; '!'
0000000000000bb5         db  0x00 ; '.'
0000000000000bb6         db  0x19 ; '.'
0000000000000bb7         db  0x00 ; '.'
0000000000000bb8         db  0x20 ; ' '
0000000000000bb9         db  0x43 ; 'C'
0000000000000bba         db  0x21 ; '!'
0000000000000bbb         db  0x00 ; '.'
0000000000000bbc         db  0x00 ; '.'
0000000000000bbd         db  0x00 ; '.'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x00 ; '.'
0000000000000bc0         db  0x08 ; '.'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x00 ; '.'
0000000000000bc3         db  0x00 ; '.'
0000000000000bc4         db  0x00 ; '.'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0x7f ; '.'
0000000000000bc9         db  0x03 ; '.'
0000000000000bca         db  0x00 ; '.'
0000000000000bcb         db  0x00 ; '.'
0000000000000bcc         db  0x11 ; '.'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x19 ; '.'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x20 ; ' '
0000000000000bd1         db  0x43 ; 'C'
0000000000000bd2         db  0x21 ; '!'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x00 ; '.'
0000000000000bd5         db  0x00 ; '.'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x00 ; '.'
0000000000000bd8         db  0x08 ; '.'
0000000000000bd9         db  0x00 ; '.'
0000000000000bda         db  0x00 ; '.'
0000000000000bdb         db  0x00 ; '.'
0000000000000bdc         db  0x00 ; '.'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x00 ; '.'
0000000000000bdf         db  0x00 ; '.'
0000000000000be0         db  0x85 ; '.'
0000000000000be1         db  0x02 ; '.'
0000000000000be2         db  0x00 ; '.'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x21 ; '!'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x19 ; '.'
0000000000000be7         db  0x00 ; '.'
0000000000000be8         db  0x00 ; '.'
0000000000000be9         db  0x43 ; 'C'
0000000000000bea         db  0x21 ; '!'
0000000000000beb         db  0x00 ; '.'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x00 ; '.'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x08 ; '.'
0000000000000bf1         db  0x00 ; '.'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x00 ; '.'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x00 ; '.'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0xee ; '.'
0000000000000bf9         db  0x01 ; '.'
0000000000000bfa         db  0x00 ; '.'
0000000000000bfb         db  0x00 ; '.'
0000000000000bfc         db  0x11 ; '.'
0000000000000bfd         db  0x00 ; '.'
0000000000000bfe         db  0x19 ; '.'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0x40 ; '@'
0000000000000c01         db  0x43 ; 'C'
0000000000000c02         db  0x21 ; '!'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x00 ; '.'
0000000000000c05         db  0x00 ; '.'
0000000000000c06         db  0x00 ; '.'
0000000000000c07         db  0x00 ; '.'
0000000000000c08         db  0x08 ; '.'
0000000000000c09         db  0x00 ; '.'
0000000000000c0a         db  0x00 ; '.'
0000000000000c0b         db  0x00 ; '.'
0000000000000c0c         db  0x00 ; '.'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x00 ; '.'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x3f ; '?'
0000000000000c11         db  0x00 ; '.'
0000000000000c12         db  0x00 ; '.'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x11 ; '.'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x19 ; '.'
0000000000000c17         db  0x00 ; '.'
0000000000000c18         db  0x10 ; '.'
0000000000000c19         db  0x43 ; 'C'
0000000000000c1a         db  0x21 ; '!'
0000000000000c1b         db  0x00 ; '.'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x00 ; '.'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x04 ; '.'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x00 ; '.'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x00 ; '.'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0xdc ; '.'
0000000000000c29         db  0x01 ; '.'
0000000000000c2a         db  0x00 ; '.'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x11 ; '.'
0000000000000c2d         db  0x00 ; '.'
0000000000000c2e         db  0x19 ; '.'
0000000000000c2f         db  0x00 ; '.'
0000000000000c30         db  0x18 ; '.'
0000000000000c31         db  0x43 ; 'C'
0000000000000c32         db  0x21 ; '!'
0000000000000c33         db  0x00 ; '.'
0000000000000c34         db  0x00 ; '.'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x00 ; '.'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x08 ; '.'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x00 ; '.'
0000000000000c3e         db  0x00 ; '.'
0000000000000c3f         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xc40; 0x1058[ (1048 bytes)
        ; File offset : [3136; 4184[ (1048 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000c40         db  0x00 ; '.'
0000000000000c41         db  0x6c ; 'l'
0000000000000c42         db  0x69 ; 'i'
0000000000000c43         db  0x62 ; 'b'
0000000000000c44         db  0x63 ; 'c'
0000000000000c45         db  0x2e ; '.'
0000000000000c46         db  0x73 ; 's'
0000000000000c47         db  0x6f ; 'o'
0000000000000c48         db  0x2e ; '.'
0000000000000c49         db  0x36 ; '6'
0000000000000c4a         db  0x00 ; '.'
0000000000000c4b         db  0x66 ; 'f'
0000000000000c4c         db  0x66 ; 'f'
0000000000000c4d         db  0x6c ; 'l'
0000000000000c4e         db  0x75 ; 'u'
0000000000000c4f         db  0x73 ; 's'
0000000000000c50         db  0x68 ; 'h'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x5f ; '_'
0000000000000c53         db  0x5f ; '_'
0000000000000c54         db  0x70 ; 'p'
0000000000000c55         db  0x72 ; 'r'
0000000000000c56         db  0x69 ; 'i'
0000000000000c57         db  0x6e ; 'n'
0000000000000c58         db  0x74 ; 't'
0000000000000c59         db  0x66 ; 'f'
0000000000000c5a         db  0x5f ; '_'
0000000000000c5b         db  0x63 ; 'c'
0000000000000c5c         db  0x68 ; 'h'
0000000000000c5d         db  0x6b ; 'k'
0000000000000c5e         db  0x00 ; '.'
0000000000000c5f         db  0x73 ; 's'
0000000000000c60         db  0x65 ; 'e'
0000000000000c61         db  0x74 ; 't'
0000000000000c62         db  0x6c ; 'l'
0000000000000c63         db  0x6f ; 'o'
0000000000000c64         db  0x63 ; 'c'
0000000000000c65         db  0x61 ; 'a'
0000000000000c66         db  0x6c ; 'l'
0000000000000c67         db  0x65 ; 'e'
0000000000000c68         db  0x00 ; '.'
0000000000000c69         db  0x6d ; 'm'
0000000000000c6a         db  0x62 ; 'b'
0000000000000c6b         db  0x72 ; 'r'
0000000000000c6c         db  0x74 ; 't'
0000000000000c6d         db  0x6f ; 'o'
0000000000000c6e         db  0x77 ; 'w'
0000000000000c6f         db  0x63 ; 'c'
0000000000000c70         db  0x00 ; '.'
0000000000000c71         db  0x66 ; 'f'
0000000000000c72         db  0x6f ; 'o'
0000000000000c73         db  0x70 ; 'p'
0000000000000c74         db  0x65 ; 'e'
0000000000000c75         db  0x6e ; 'n'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x73 ; 's'
0000000000000c78         db  0x74 ; 't'
0000000000000c79         db  0x72 ; 'r'
0000000000000c7a         db  0x6e ; 'n'
0000000000000c7b         db  0x63 ; 'c'
0000000000000c7c         db  0x6d ; 'm'
0000000000000c7d         db  0x70 ; 'p'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x6f ; 'o'
0000000000000c80         db  0x70 ; 'p'
0000000000000c81         db  0x74 ; 't'
0000000000000c82         db  0x69 ; 'i'
0000000000000c83         db  0x6e ; 'n'
0000000000000c84         db  0x64 ; 'd'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x73 ; 's'
0000000000000c87         db  0x74 ; 't'
0000000000000c88         db  0x72 ; 'r'
0000000000000c89         db  0x72 ; 'r'
0000000000000c8a         db  0x63 ; 'c'
0000000000000c8b         db  0x68 ; 'h'
0000000000000c8c         db  0x72 ; 'r'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x64 ; 'd'
0000000000000c8f         db  0x63 ; 'c'
0000000000000c90         db  0x67 ; 'g'
0000000000000c91         db  0x65 ; 'e'
0000000000000c92         db  0x74 ; 't'
0000000000000c93         db  0x74 ; 't'
0000000000000c94         db  0x65 ; 'e'
0000000000000c95         db  0x78 ; 'x'
0000000000000c96         db  0x74 ; 't'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x66 ; 'f'
0000000000000c99         db  0x63 ; 'c'
0000000000000c9a         db  0x68 ; 'h'
0000000000000c9b         db  0x64 ; 'd'
0000000000000c9c         db  0x69 ; 'i'
0000000000000c9d         db  0x72 ; 'r'
0000000000000c9e         db  0x00 ; '.'
0000000000000c9f         db  0x65 ; 'e'
0000000000000ca0         db  0x72 ; 'r'
0000000000000ca1         db  0x72 ; 'r'
0000000000000ca2         db  0x6f ; 'o'
0000000000000ca3         db  0x72 ; 'r'
0000000000000ca4         db  0x00 ; '.'
0000000000000ca5         db  0x6d ; 'm'
0000000000000ca6         db  0x62 ; 'b'
0000000000000ca7         db  0x73 ; 's'
0000000000000ca8         db  0x74 ; 't'
0000000000000ca9         db  0x6f ; 'o'
0000000000000caa         db  0x77 ; 'w'
0000000000000cab         db  0x63 ; 'c'
0000000000000cac         db  0x73 ; 's'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x5f ; '_'
0000000000000caf         db  0x5f ; '_'
0000000000000cb0         db  0x73 ; 's'
0000000000000cb1         db  0x74 ; 't'
0000000000000cb2         db  0x61 ; 'a'
0000000000000cb3         db  0x63 ; 'c'
0000000000000cb4         db  0x6b ; 'k'
0000000000000cb5         db  0x5f ; '_'
0000000000000cb6         db  0x63 ; 'c'
0000000000000cb7         db  0x68 ; 'h'
0000000000000cb8         db  0x6b ; 'k'
0000000000000cb9         db  0x5f ; '_'
0000000000000cba         db  0x66 ; 'f'
0000000000000cbb         db  0x61 ; 'a'
0000000000000cbc         db  0x69 ; 'i'
0000000000000cbd         db  0x6c ; 'l'
0000000000000cbe         db  0x00 ; '.'
0000000000000cbf         db  0x5f ; '_'
0000000000000cc0         db  0x5f ; '_'
0000000000000cc1         db  0x6c ; 'l'
0000000000000cc2         db  0x78 ; 'x'
0000000000000cc3         db  0x73 ; 's'
0000000000000cc4         db  0x74 ; 't'
0000000000000cc5         db  0x61 ; 'a'
0000000000000cc6         db  0x74 ; 't'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x69 ; 'i'
0000000000000cc9         db  0x73 ; 's'
0000000000000cca         db  0x77 ; 'w'
0000000000000ccb         db  0x70 ; 'p'
0000000000000ccc         db  0x72 ; 'r'
0000000000000ccd         db  0x69 ; 'i'
0000000000000cce         db  0x6e ; 'n'
0000000000000ccf         db  0x74 ; 't'
0000000000000cd0         db  0x00 ; '.'
0000000000000cd1         db  0x72 ; 'r'
0000000000000cd2         db  0x65 ; 'e'
0000000000000cd3         db  0x61 ; 'a'
0000000000000cd4         db  0x6c ; 'l'
0000000000000cd5         db  0x6c ; 'l'
0000000000000cd6         db  0x6f ; 'o'
0000000000000cd7         db  0x63 ; 'c'
0000000000000cd8         db  0x00 ; '.'
0000000000000cd9         db  0x61 ; 'a'
0000000000000cda         db  0x62 ; 'b'
0000000000000cdb         db  0x6f ; 'o'
0000000000000cdc         db  0x72 ; 'r'
0000000000000cdd         db  0x74 ; 't'
0000000000000cde         db  0x00 ; '.'
0000000000000cdf         db  0x5f ; '_'
0000000000000ce0         db  0x65 ; 'e'
0000000000000ce1         db  0x78 ; 'x'
0000000000000ce2         db  0x69 ; 'i'
0000000000000ce3         db  0x74 ; 't'
0000000000000ce4         db  0x00 ; '.'
0000000000000ce5         db  0x6d ; 'm'
0000000000000ce6         db  0x65 ; 'e'
0000000000000ce7         db  0x6d ; 'm'
0000000000000ce8         db  0x63 ; 'c'
0000000000000ce9         db  0x68 ; 'h'
0000000000000cea         db  0x72 ; 'r'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x6d ; 'm'
0000000000000ced         db  0x65 ; 'e'
0000000000000cee         db  0x6d ; 'm'
0000000000000cef         db  0x72 ; 'r'
0000000000000cf0         db  0x63 ; 'c'
0000000000000cf1         db  0x68 ; 'h'
0000000000000cf2         db  0x72 ; 'r'
0000000000000cf3         db  0x00 ; '.'
0000000000000cf4         db  0x73 ; 's'
0000000000000cf5         db  0x74 ; 't'
0000000000000cf6         db  0x72 ; 'r'
0000000000000cf7         db  0x73 ; 's'
0000000000000cf8         db  0x70 ; 'p'
0000000000000cf9         db  0x6e ; 'n'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x70 ; 'p'
0000000000000cfc         db  0x72 ; 'r'
0000000000000cfd         db  0x6f ; 'o'
0000000000000cfe         db  0x67 ; 'g'
0000000000000cff         db  0x72 ; 'r'
                     aAminvocationna:
0000000000000d00         db         "am_invocation_name", 0
0000000000000d13         db  0x73 ; 's'
0000000000000d14         db  0x74 ; 't'
0000000000000d15         db  0x72 ; 'r'
0000000000000d16         db  0x64 ; 'd'
0000000000000d17         db  0x75 ; 'u'
0000000000000d18         db  0x70 ; 'p'
0000000000000d19         db  0x00 ; '.'
0000000000000d1a         db  0x5f ; '_'
0000000000000d1b         db  0x5f ; '_'
0000000000000d1c         db  0x61 ; 'a'
0000000000000d1d         db  0x73 ; 's'
0000000000000d1e         db  0x73 ; 's'
0000000000000d1f         db  0x65 ; 'e'
0000000000000d20         db  0x72 ; 'r'
0000000000000d21         db  0x74 ; 't'
0000000000000d22         db  0x5f ; '_'
0000000000000d23         db  0x66 ; 'f'
0000000000000d24         db  0x61 ; 'a'
0000000000000d25         db  0x69 ; 'i'
0000000000000d26         db  0x6c ; 'l'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x73 ; 's'
0000000000000d29         db  0x74 ; 't'
0000000000000d2a         db  0x61 ; 'a'
0000000000000d2b         db  0x74 ; 't'
0000000000000d2c         db  0x76 ; 'v'
0000000000000d2d         db  0x66 ; 'f'
0000000000000d2e         db  0x73 ; 's'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0x5f ; '_'
0000000000000d31         db  0x5f ; '_'
0000000000000d32         db  0x63 ; 'c'
0000000000000d33         db  0x74 ; 't'
0000000000000d34         db  0x79 ; 'y'
0000000000000d35         db  0x70 ; 'p'
0000000000000d36         db  0x65 ; 'e'
0000000000000d37         db  0x5f ; '_'
0000000000000d38         db  0x67 ; 'g'
0000000000000d39         db  0x65 ; 'e'
0000000000000d3a         db  0x74 ; 't'
0000000000000d3b         db  0x5f ; '_'
0000000000000d3c         db  0x6d ; 'm'
0000000000000d3d         db  0x62 ; 'b'
0000000000000d3e         db  0x5f ; '_'
0000000000000d3f         db  0x63 ; 'c'
0000000000000d40         db  0x75 ; 'u'
0000000000000d41         db  0x72 ; 'r'
0000000000000d42         db  0x5f ; '_'
0000000000000d43         db  0x6d ; 'm'
0000000000000d44         db  0x61 ; 'a'
0000000000000d45         db  0x78 ; 'x'
0000000000000d46         db  0x00 ; '.'
0000000000000d47         db  0x69 ; 'i'
0000000000000d48         db  0x73 ; 's'
0000000000000d49         db  0x61 ; 'a'
0000000000000d4a         db  0x74 ; 't'
0000000000000d4b         db  0x74 ; 't'
0000000000000d4c         db  0x79 ; 'y'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x73 ; 's'
0000000000000d4f         db  0x65 ; 'e'
0000000000000d50         db  0x74 ; 't'
0000000000000d51         db  0x6d ; 'm'
0000000000000d52         db  0x6e ; 'n'
0000000000000d53         db  0x74 ; 't'
0000000000000d54         db  0x65 ; 'e'
0000000000000d55         db  0x6e ; 'n'
0000000000000d56         db  0x74 ; 't'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x63 ; 'c'
0000000000000d59         db  0x61 ; 'a'
0000000000000d5a         db  0x6c ; 'l'
0000000000000d5b         db  0x6c ; 'l'
0000000000000d5c         db  0x6f ; 'o'
0000000000000d5d         db  0x63 ; 'c'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x73 ; 's'
0000000000000d60         db  0x74 ; 't'
0000000000000d61         db  0x72 ; 'r'
0000000000000d62         db  0x6c ; 'l'
0000000000000d63         db  0x65 ; 'e'
0000000000000d64         db  0x6e ; 'n'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x6d ; 'm'
0000000000000d67         db  0x65 ; 'e'
0000000000000d68         db  0x6d ; 'm'
0000000000000d69         db  0x73 ; 's'
0000000000000d6a         db  0x65 ; 'e'
0000000000000d6b         db  0x74 ; 't'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x6c ; 'l'
0000000000000d6e         db  0x6f ; 'o'
0000000000000d6f         db  0x63 ; 'c'
0000000000000d70         db  0x61 ; 'a'
0000000000000d71         db  0x6c ; 'l'
0000000000000d72         db  0x65 ; 'e'
0000000000000d73         db  0x63 ; 'c'
0000000000000d74         db  0x6f ; 'o'
0000000000000d75         db  0x6e ; 'n'
0000000000000d76         db  0x76 ; 'v'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x73 ; 's'
0000000000000d79         db  0x74 ; 't'
0000000000000d7a         db  0x72 ; 'r'
0000000000000d7b         db  0x73 ; 's'
0000000000000d7c         db  0x74 ; 't'
0000000000000d7d         db  0x72 ; 'r'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x5f ; '_'
0000000000000d80         db  0x5f ; '_'
0000000000000d81         db  0x65 ; 'e'
0000000000000d82         db  0x72 ; 'r'
0000000000000d83         db  0x72 ; 'r'
0000000000000d84         db  0x6e ; 'n'
0000000000000d85         db  0x6f ; 'o'
0000000000000d86         db  0x5f ; '_'
0000000000000d87         db  0x6c ; 'l'
0000000000000d88         db  0x6f ; 'o'
0000000000000d89         db  0x63 ; 'c'
0000000000000d8a         db  0x61 ; 'a'
0000000000000d8b         db  0x74 ; 't'
0000000000000d8c         db  0x69 ; 'i'
0000000000000d8d         db  0x6f ; 'o'
0000000000000d8e         db  0x6e ; 'n'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0x6d ; 'm'
0000000000000d91         db  0x65 ; 'e'
0000000000000d92         db  0x6d ; 'm'
0000000000000d93         db  0x63 ; 'c'
0000000000000d94         db  0x6d ; 'm'
0000000000000d95         db  0x70 ; 'p'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x6d ; 'm'
0000000000000d98         db  0x65 ; 'e'
0000000000000d99         db  0x6d ; 'm'
0000000000000d9a         db  0x70 ; 'p'
0000000000000d9b         db  0x63 ; 'c'
0000000000000d9c         db  0x70 ; 'p'
0000000000000d9d         db  0x79 ; 'y'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x5f ; '_'
0000000000000da0         db  0x5f ; '_'
0000000000000da1         db  0x66 ; 'f'
0000000000000da2         db  0x70 ; 'p'
0000000000000da3         db  0x72 ; 'r'
0000000000000da4         db  0x69 ; 'i'
0000000000000da5         db  0x6e ; 'n'
0000000000000da6         db  0x74 ; 't'
0000000000000da7         db  0x66 ; 'f'
0000000000000da8         db  0x5f ; '_'
0000000000000da9         db  0x63 ; 'c'
0000000000000daa         db  0x68 ; 'h'
0000000000000dab         db  0x6b ; 'k'
0000000000000dac         db  0x00 ; '.'
0000000000000dad         db  0x77 ; 'w'
0000000000000dae         db  0x63 ; 'c'
0000000000000daf         db  0x73 ; 's'
0000000000000db0         db  0x77 ; 'w'
0000000000000db1         db  0x69 ; 'i'
0000000000000db2         db  0x64 ; 'd'
0000000000000db3         db  0x74 ; 't'
0000000000000db4         db  0x68 ; 'h'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x73 ; 's'
0000000000000db7         db  0x74 ; 't'
0000000000000db8         db  0x64 ; 'd'
0000000000000db9         db  0x6f ; 'o'
0000000000000dba         db  0x75 ; 'u'
0000000000000dbb         db  0x74 ; 't'
0000000000000dbc         db  0x00 ; '.'
0000000000000dbd         db  0x6c ; 'l'
0000000000000dbe         db  0x73 ; 's'
0000000000000dbf         db  0x65 ; 'e'
0000000000000dc0         db  0x65 ; 'e'
0000000000000dc1         db  0x6b ; 'k'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x6d ; 'm'
0000000000000dc4         db  0x65 ; 'e'
0000000000000dc5         db  0x6d ; 'm'
0000000000000dc6         db  0x63 ; 'c'
0000000000000dc7         db  0x70 ; 'p'
0000000000000dc8         db  0x79 ; 'y'
0000000000000dc9         db  0x00 ; '.'
0000000000000dca         db  0x66 ; 'f'
0000000000000dcb         db  0x63 ; 'c'
0000000000000dcc         db  0x6c ; 'l'
0000000000000dcd         db  0x6f ; 'o'
0000000000000dce         db  0x73 ; 's'
0000000000000dcf         db  0x65 ; 'e'
0000000000000dd0         db  0x00 ; '.'
0000000000000dd1         db  0x67 ; 'g'
0000000000000dd2         db  0x65 ; 'e'
0000000000000dd3         db  0x74 ; 't'
0000000000000dd4         db  0x6d ; 'm'
0000000000000dd5         db  0x6e ; 'n'
0000000000000dd6         db  0x74 ; 't'
0000000000000dd7         db  0x65 ; 'e'
0000000000000dd8         db  0x6e ; 'n'
0000000000000dd9         db  0x74 ; 't'
0000000000000dda         db  0x00 ; '.'
0000000000000ddb         db  0x6d ; 'm'
0000000000000ddc         db  0x61 ; 'a'
0000000000000ddd         db  0x6c ; 'l'
0000000000000dde         db  0x6c ; 'l'
0000000000000ddf         db  0x6f ; 'o'
0000000000000de0         db  0x63 ; 'c'
0000000000000de1         db  0x00 ; '.'
0000000000000de2         db  0x6d ; 'm'
0000000000000de3         db  0x62 ; 'b'
0000000000000de4         db  0x73 ; 's'
0000000000000de5         db  0x69 ; 'i'
0000000000000de6         db  0x6e ; 'n'
0000000000000de7         db  0x69 ; 'i'
0000000000000de8         db  0x74 ; 't'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x6e ; 'n'
0000000000000deb         db  0x6c ; 'l'
0000000000000dec         db  0x5f ; '_'
0000000000000ded         db  0x6c ; 'l'
0000000000000dee         db  0x61 ; 'a'
0000000000000def         db  0x6e ; 'n'
0000000000000df0         db  0x67 ; 'g'
0000000000000df1         db  0x69 ; 'i'
0000000000000df2         db  0x6e ; 'n'
0000000000000df3         db  0x66 ; 'f'
0000000000000df4         db  0x6f ; 'o'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x68 ; 'h'
0000000000000df7         db  0x61 ; 'a'
0000000000000df8         db  0x73 ; 's'
0000000000000df9         db  0x6d ; 'm'
0000000000000dfa         db  0x6e ; 'n'
0000000000000dfb         db  0x74 ; 't'
0000000000000dfc         db  0x6f ; 'o'
0000000000000dfd         db  0x70 ; 'p'
0000000000000dfe         db  0x74 ; 't'
0000000000000dff         db  0x00 ; '.'
                     aCtypebloc:
0000000000000e00         db         "__ctype_b_loc", 0
0000000000000e0e         db  0x67 ; 'g'
0000000000000e0f         db  0x65 ; 'e'
0000000000000e10         db  0x74 ; 't'
0000000000000e11         db  0x65 ; 'e'
0000000000000e12         db  0x6e ; 'n'
0000000000000e13         db  0x76 ; 'v'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x73 ; 's'
0000000000000e16         db  0x73 ; 's'
0000000000000e17         db  0x63 ; 'c'
0000000000000e18         db  0x61 ; 'a'
0000000000000e19         db  0x6e ; 'n'
0000000000000e1a         db  0x66 ; 'f'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x6f ; 'o'
0000000000000e1d         db  0x70 ; 'p'
0000000000000e1e         db  0x74 ; 't'
0000000000000e1f         db  0x61 ; 'a'
0000000000000e20         db  0x72 ; 'r'
0000000000000e21         db  0x67 ; 'g'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x5f ; '_'
0000000000000e24         db  0x5f ; '_'
0000000000000e25         db  0x66 ; 'f'
0000000000000e26         db  0x72 ; 'r'
0000000000000e27         db  0x65 ; 'e'
0000000000000e28         db  0x61 ; 'a'
0000000000000e29         db  0x64 ; 'd'
0000000000000e2a         db  0x69 ; 'i'
0000000000000e2b         db  0x6e ; 'n'
0000000000000e2c         db  0x67 ; 'g'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x73 ; 's'
0000000000000e2f         db  0x74 ; 't'
0000000000000e30         db  0x64 ; 'd'
0000000000000e31         db  0x65 ; 'e'
0000000000000e32         db  0x72 ; 'r'
0000000000000e33         db  0x72 ; 'r'
0000000000000e34         db  0x00 ; '.'
0000000000000e35         db  0x77 ; 'w'
0000000000000e36         db  0x63 ; 'c'
0000000000000e37         db  0x77 ; 'w'
0000000000000e38         db  0x69 ; 'i'
0000000000000e39         db  0x64 ; 'd'
0000000000000e3a         db  0x74 ; 't'
0000000000000e3b         db  0x68 ; 'h'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x5f ; '_'
0000000000000e3e         db  0x5f ; '_'
0000000000000e3f         db  0x73 ; 's'
0000000000000e40         db  0x6e ; 'n'
0000000000000e41         db  0x70 ; 'p'
0000000000000e42         db  0x72 ; 'r'
0000000000000e43         db  0x69 ; 'i'
0000000000000e44         db  0x6e ; 'n'
0000000000000e45         db  0x74 ; 't'
0000000000000e46         db  0x66 ; 'f'
0000000000000e47         db  0x5f ; '_'
0000000000000e48         db  0x63 ; 'c'
0000000000000e49         db  0x68 ; 'h'
0000000000000e4a         db  0x6b ; 'k'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x72 ; 'r'
0000000000000e4d         db  0x65 ; 'e'
0000000000000e4e         db  0x61 ; 'a'
0000000000000e4f         db  0x64 ; 'd'
0000000000000e50         db  0x6c ; 'l'
0000000000000e51         db  0x69 ; 'i'
0000000000000e52         db  0x6e ; 'n'
0000000000000e53         db  0x6b ; 'k'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x67 ; 'g'
0000000000000e56         db  0x65 ; 'e'
0000000000000e57         db  0x74 ; 't'
0000000000000e58         db  0x6f ; 'o'
0000000000000e59         db  0x70 ; 'p'
0000000000000e5a         db  0x74 ; 't'
0000000000000e5b         db  0x5f ; '_'
0000000000000e5c         db  0x6c ; 'l'
0000000000000e5d         db  0x6f ; 'o'
0000000000000e5e         db  0x6e ; 'n'
0000000000000e5f         db  0x67 ; 'g'
0000000000000e60         db  0x00 ; '.'
0000000000000e61         db  0x66 ; 'f'
0000000000000e62         db  0x69 ; 'i'
0000000000000e63         db  0x6c ; 'l'
0000000000000e64         db  0x65 ; 'e'
0000000000000e65         db  0x6e ; 'n'
0000000000000e66         db  0x6f ; 'o'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x67 ; 'g'
0000000000000e69         db  0x65 ; 'e'
0000000000000e6a         db  0x74 ; 't'
0000000000000e6b         db  0x63 ; 'c'
0000000000000e6c         db  0x77 ; 'w'
0000000000000e6d         db  0x64 ; 'd'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x5f ; '_'
0000000000000e70         db  0x5f ; '_'
0000000000000e71         db  0x67 ; 'g'
0000000000000e72         db  0x65 ; 'e'
0000000000000e73         db  0x74 ; 't'
0000000000000e74         db  0x64 ; 'd'
0000000000000e75         db  0x65 ; 'e'
0000000000000e76         db  0x6c ; 'l'
0000000000000e77         db  0x69 ; 'i'
0000000000000e78         db  0x6d ; 'm'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x66 ; 'f'
0000000000000e7b         db  0x77 ; 'w'
0000000000000e7c         db  0x72 ; 'r'
0000000000000e7d         db  0x69 ; 'i'
0000000000000e7e         db  0x74 ; 't'
0000000000000e7f         db  0x65 ; 'e'
0000000000000e80         db  0x00 ; '.'
0000000000000e81         db  0x73 ; 's'
0000000000000e82         db  0x74 ; 't'
0000000000000e83         db  0x61 ; 'a'
0000000000000e84         db  0x74 ; 't'
0000000000000e85         db  0x66 ; 'f'
0000000000000e86         db  0x73 ; 's'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x5f ; '_'
0000000000000e89         db  0x5f ; '_'
0000000000000e8a         db  0x6d ; 'm'
0000000000000e8b         db  0x65 ; 'e'
0000000000000e8c         db  0x6d ; 'm'
0000000000000e8d         db  0x63 ; 'c'
0000000000000e8e         db  0x70 ; 'p'
0000000000000e8f         db  0x79 ; 'y'
0000000000000e90         db  0x5f ; '_'
0000000000000e91         db  0x63 ; 'c'
0000000000000e92         db  0x68 ; 'h'
0000000000000e93         db  0x6b ; 'k'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x5f ; '_'
0000000000000e96         db  0x5f ; '_'
0000000000000e97         db  0x66 ; 'f'
0000000000000e98         db  0x70 ; 'p'
0000000000000e99         db  0x65 ; 'e'
0000000000000e9a         db  0x6e ; 'n'
0000000000000e9b         db  0x64 ; 'd'
0000000000000e9c         db  0x69 ; 'i'
0000000000000e9d         db  0x6e ; 'n'
0000000000000e9e         db  0x67 ; 'g'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x73 ; 's'
0000000000000ea1         db  0x74 ; 't'
0000000000000ea2         db  0x72 ; 'r'
0000000000000ea3         db  0x76 ; 'v'
0000000000000ea4         db  0x65 ; 'e'
0000000000000ea5         db  0x72 ; 'r'
0000000000000ea6         db  0x73 ; 's'
0000000000000ea7         db  0x63 ; 'c'
0000000000000ea8         db  0x6d ; 'm'
0000000000000ea9         db  0x70 ; 'p'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x73 ; 's'
0000000000000eac         db  0x74 ; 't'
0000000000000ead         db  0x72 ; 'r'
0000000000000eae         db  0x63 ; 'c'
0000000000000eaf         db  0x68 ; 'h'
0000000000000eb0         db  0x72 ; 'r'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x69 ; 'i'
0000000000000eb3         db  0x73 ; 's'
0000000000000eb4         db  0x77 ; 'w'
0000000000000eb5         db  0x63 ; 'c'
0000000000000eb6         db  0x6e ; 'n'
0000000000000eb7         db  0x74 ; 't'
0000000000000eb8         db  0x72 ; 'r'
0000000000000eb9         db  0x6c ; 'l'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x65 ; 'e'
0000000000000ebc         db  0x6e ; 'n'
0000000000000ebd         db  0x64 ; 'd'
0000000000000ebe         db  0x6d ; 'm'
0000000000000ebf         db  0x6e ; 'n'
0000000000000ec0         db  0x74 ; 't'
0000000000000ec1         db  0x65 ; 'e'
0000000000000ec2         db  0x6e ; 'n'
0000000000000ec3         db  0x74 ; 't'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x70 ; 'p'
0000000000000ec6         db  0x72 ; 'r'
0000000000000ec7         db  0x6f ; 'o'
0000000000000ec8         db  0x67 ; 'g'
0000000000000ec9         db  0x72 ; 'r'
0000000000000eca         db  0x61 ; 'a'
0000000000000ecb         db  0x6d ; 'm'
0000000000000ecc         db  0x5f ; '_'
0000000000000ecd         db  0x69 ; 'i'
0000000000000ece         db  0x6e ; 'n'
0000000000000ecf         db  0x76 ; 'v'
0000000000000ed0         db  0x6f ; 'o'
0000000000000ed1         db  0x63 ; 'c'
0000000000000ed2         db  0x61 ; 'a'
0000000000000ed3         db  0x74 ; 't'
0000000000000ed4         db  0x69 ; 'i'
0000000000000ed5         db  0x6f ; 'o'
0000000000000ed6         db  0x6e ; 'n'
0000000000000ed7         db  0x5f ; '_'
0000000000000ed8         db  0x73 ; 's'
0000000000000ed9         db  0x68 ; 'h'
0000000000000eda         db  0x6f ; 'o'
0000000000000edb         db  0x72 ; 'r'
0000000000000edc         db  0x74 ; 't'
0000000000000edd         db  0x5f ; '_'
0000000000000ede         db  0x6e ; 'n'
0000000000000edf         db  0x61 ; 'a'
0000000000000ee0         db  0x6d ; 'm'
0000000000000ee1         db  0x65 ; 'e'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x63 ; 'c'
0000000000000ee4         db  0x61 ; 'a'
0000000000000ee5         db  0x6e ; 'n'
0000000000000ee6         db  0x6f ; 'o'
0000000000000ee7         db  0x6e ; 'n'
0000000000000ee8         db  0x69 ; 'i'
0000000000000ee9         db  0x63 ; 'c'
0000000000000eea         db  0x61 ; 'a'
0000000000000eeb         db  0x6c ; 'l'
0000000000000eec         db  0x69 ; 'i'
0000000000000eed         db  0x7a ; 'z'
0000000000000eee         db  0x65 ; 'e'
0000000000000eef         db  0x5f ; '_'
0000000000000ef0         db  0x66 ; 'f'
0000000000000ef1         db  0x69 ; 'i'
0000000000000ef2         db  0x6c ; 'l'
0000000000000ef3         db  0x65 ; 'e'
0000000000000ef4         db  0x5f ; '_'
0000000000000ef5         db  0x6e ; 'n'
0000000000000ef6         db  0x61 ; 'a'
0000000000000ef7         db  0x6d ; 'm'
0000000000000ef8         db  0x65 ; 'e'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x77 ; 'w'
0000000000000efb         db  0x63 ; 'c'
0000000000000efc         db  0x73 ; 's'
0000000000000efd         db  0x74 ; 't'
0000000000000efe         db  0x6f ; 'o'
0000000000000eff         db  0x6d ; 'm'
0000000000000f00         db  0x62 ; 'b'
0000000000000f01         db  0x73 ; 's'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x5f ; '_'
0000000000000f04         db  0x5f ; '_'
0000000000000f05         db  0x63 ; 'c'
0000000000000f06         db  0x78 ; 'x'
0000000000000f07         db  0x61 ; 'a'
0000000000000f08         db  0x5f ; '_'
0000000000000f09         db  0x66 ; 'f'
0000000000000f0a         db  0x69 ; 'i'
0000000000000f0b         db  0x6e ; 'n'
0000000000000f0c         db  0x61 ; 'a'
0000000000000f0d         db  0x6c ; 'l'
0000000000000f0e         db  0x69 ; 'i'
0000000000000f0f         db  0x7a ; 'z'
0000000000000f10         db  0x65 ; 'e'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x66 ; 'f'
0000000000000f13         db  0x63 ; 'c'
0000000000000f14         db  0x6e ; 'n'
0000000000000f15         db  0x74 ; 't'
0000000000000f16         db  0x6c ; 'l'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x5f ; '_'
0000000000000f19         db  0x5f ; '_'
0000000000000f1a         db  0x73 ; 's'
0000000000000f1b         db  0x70 ; 'p'
0000000000000f1c         db  0x72 ; 'r'
0000000000000f1d         db  0x69 ; 'i'
0000000000000f1e         db  0x6e ; 'n'
0000000000000f1f         db  0x74 ; 't'
0000000000000f20         db  0x66 ; 'f'
0000000000000f21         db  0x5f ; '_'
0000000000000f22         db  0x63 ; 'c'
0000000000000f23         db  0x68 ; 'h'
0000000000000f24         db  0x6b ; 'k'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x6f ; 'o'
0000000000000f27         db  0x70 ; 'p'
0000000000000f28         db  0x65 ; 'e'
0000000000000f29         db  0x6e ; 'n'
0000000000000f2a         db  0x61 ; 'a'
0000000000000f2b         db  0x74 ; 't'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x5f ; '_'
0000000000000f2e         db  0x5f ; '_'
0000000000000f2f         db  0x78 ; 'x'
0000000000000f30         db  0x73 ; 's'
0000000000000f31         db  0x74 ; 't'
0000000000000f32         db  0x61 ; 'a'
0000000000000f33         db  0x74 ; 't'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x6d ; 'm'
0000000000000f36         db  0x65 ; 'e'
0000000000000f37         db  0x6d ; 'm'
0000000000000f38         db  0x6d ; 'm'
0000000000000f39         db  0x6f ; 'o'
0000000000000f3a         db  0x76 ; 'v'
0000000000000f3b         db  0x65 ; 'e'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x75 ; 'u'
0000000000000f3e         db  0x6e ; 'n'
0000000000000f3f         db  0x61 ; 'a'
0000000000000f40         db  0x6d ; 'm'
0000000000000f41         db  0x65 ; 'e'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x62 ; 'b'
0000000000000f44         db  0x69 ; 'i'
0000000000000f45         db  0x6e ; 'n'
0000000000000f46         db  0x64 ; 'd'
0000000000000f47         db  0x74 ; 't'
0000000000000f48         db  0x65 ; 'e'
0000000000000f49         db  0x78 ; 'x'
0000000000000f4a         db  0x74 ; 't'
0000000000000f4b         db  0x64 ; 'd'
0000000000000f4c         db  0x6f ; 'o'
0000000000000f4d         db  0x6d ; 'm'
0000000000000f4e         db  0x61 ; 'a'
0000000000000f4f         db  0x69 ; 'i'
0000000000000f50         db  0x6e ; 'n'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x5f ; '_'
0000000000000f53         db  0x5f ; '_'
0000000000000f54         db  0x66 ; 'f'
0000000000000f55         db  0x78 ; 'x'
0000000000000f56         db  0x73 ; 's'
0000000000000f57         db  0x74 ; 't'
0000000000000f58         db  0x61 ; 'a'
0000000000000f59         db  0x74 ; 't'
0000000000000f5a         db  0x61 ; 'a'
0000000000000f5b         db  0x74 ; 't'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x73 ; 's'
0000000000000f5e         db  0x79 ; 'y'
0000000000000f5f         db  0x6e ; 'n'
0000000000000f60         db  0x63 ; 'c'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x73 ; 's'
0000000000000f63         db  0x74 ; 't'
0000000000000f64         db  0x72 ; 'r'
0000000000000f65         db  0x63 ; 'c'
0000000000000f66         db  0x6d ; 'm'
0000000000000f67         db  0x70 ; 'p'
0000000000000f68         db  0x00 ; '.'
0000000000000f69         db  0x5f ; '_'
0000000000000f6a         db  0x5f ; '_'
0000000000000f6b         db  0x6c ; 'l'
0000000000000f6c         db  0x69 ; 'i'
0000000000000f6d         db  0x62 ; 'b'
0000000000000f6e         db  0x63 ; 'c'
0000000000000f6f         db  0x5f ; '_'
0000000000000f70         db  0x73 ; 's'
0000000000000f71         db  0x74 ; 't'
0000000000000f72         db  0x61 ; 'a'
0000000000000f73         db  0x72 ; 'r'
0000000000000f74         db  0x74 ; 't'
0000000000000f75         db  0x5f ; '_'
0000000000000f76         db  0x6d ; 'm'
0000000000000f77         db  0x61 ; 'a'
0000000000000f78         db  0x69 ; 'i'
0000000000000f79         db  0x6e ; 'n'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x66 ; 'f'
0000000000000f7c         db  0x73 ; 's'
0000000000000f7d         db  0x65 ; 'e'
0000000000000f7e         db  0x65 ; 'e'
0000000000000f7f         db  0x6b ; 'k'
0000000000000f80         db  0x6f ; 'o'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x5f ; '_'
0000000000000f83         db  0x5f ; '_'
0000000000000f84         db  0x6f ; 'o'
0000000000000f85         db  0x76 ; 'v'
0000000000000f86         db  0x65 ; 'e'
0000000000000f87         db  0x72 ; 'r'
0000000000000f88         db  0x66 ; 'f'
0000000000000f89         db  0x6c ; 'l'
0000000000000f8a         db  0x6f ; 'o'
0000000000000f8b         db  0x77 ; 'w'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x5f ; '_'
0000000000000f8e         db  0x5f ; '_'
0000000000000f8f         db  0x73 ; 's'
0000000000000f90         db  0x74 ; 't'
0000000000000f91         db  0x72 ; 'r'
0000000000000f92         db  0x74 ; 't'
0000000000000f93         db  0x6f ; 'o'
0000000000000f94         db  0x75 ; 'u'
0000000000000f95         db  0x6c ; 'l'
0000000000000f96         db  0x5f ; '_'
0000000000000f97         db  0x69 ; 'i'
0000000000000f98         db  0x6e ; 'n'
0000000000000f99         db  0x74 ; 't'
0000000000000f9a         db  0x65 ; 'e'
0000000000000f9b         db  0x72 ; 'r'
0000000000000f9c         db  0x6e ; 'n'
0000000000000f9d         db  0x61 ; 'a'
0000000000000f9e         db  0x6c ; 'l'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180
0000000000000fa0         db  0x66 ; 'f'
0000000000000fa1         db  0x70 ; 'p'
0000000000000fa2         db  0x75 ; 'u'
0000000000000fa3         db  0x74 ; 't'
0000000000000fa4         db  0x73 ; 's'
0000000000000fa5         db  0x5f ; '_'
0000000000000fa6         db  0x75 ; 'u'
0000000000000fa7         db  0x6e ; 'n'
0000000000000fa8         db  0x6c ; 'l'
0000000000000fa9         db  0x6f ; 'o'
0000000000000faa         db  0x63 ; 'c'
0000000000000fab         db  0x6b ; 'k'
0000000000000fac         db  0x65 ; 'e'
0000000000000fad         db  0x64 ; 'd'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x66 ; 'f'
0000000000000fb0         db  0x72 ; 'r'
0000000000000fb1         db  0x65 ; 'e'
0000000000000fb2         db  0x65 ; 'e'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x5f ; '_'
0000000000000fb5         db  0x5f ; '_'
0000000000000fb6         db  0x70 ; 'p'
0000000000000fb7         db  0x72 ; 'r'
0000000000000fb8         db  0x6f ; 'o'
0000000000000fb9         db  0x67 ; 'g'
0000000000000fba         db  0x6e ; 'n'
0000000000000fbb         db  0x61 ; 'a'
0000000000000fbc         db  0x6d ; 'm'
0000000000000fbd         db  0x65 ; 'e'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x5f ; '_'
0000000000000fc0         db  0x5f ; '_'
0000000000000fc1         db  0x70 ; 'p'
0000000000000fc2         db  0x72 ; 'r'
0000000000000fc3         db  0x6f ; 'o'
0000000000000fc4         db  0x67 ; 'g'
0000000000000fc5         db  0x6e ; 'n'
0000000000000fc6         db  0x61 ; 'a'
0000000000000fc7         db  0x6d ; 'm'
0000000000000fc8         db  0x65 ; 'e'
0000000000000fc9         db  0x5f ; '_'
0000000000000fca         db  0x66 ; 'f'
0000000000000fcb         db  0x75 ; 'u'
0000000000000fcc         db  0x6c ; 'l'
0000000000000fcd         db  0x6c ; 'l'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x5f ; '_'
0000000000000fd0         db  0x5f ; '_'
0000000000000fd1         db  0x63 ; 'c'
0000000000000fd2         db  0x78 ; 'x'
0000000000000fd3         db  0x61 ; 'a'
0000000000000fd4         db  0x5f ; '_'
0000000000000fd5         db  0x61 ; 'a'
0000000000000fd6         db  0x74 ; 't'
0000000000000fd7         db  0x65 ; 'e'
0000000000000fd8         db  0x78 ; 'x'
0000000000000fd9         db  0x69 ; 'i'
0000000000000fda         db  0x74 ; 't'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x47 ; 'G'
0000000000000fdd         db  0x4c ; 'L'
0000000000000fde         db  0x49 ; 'I'
0000000000000fdf         db  0x42 ; 'B'
0000000000000fe0         db  0x43 ; 'C'
0000000000000fe1         db  0x5f ; '_'
0000000000000fe2         db  0x32 ; '2'
0000000000000fe3         db  0x2e ; '.'
0000000000000fe4         db  0x33 ; '3'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x47 ; 'G'
0000000000000fe7         db  0x4c ; 'L'
0000000000000fe8         db  0x49 ; 'I'
0000000000000fe9         db  0x42 ; 'B'
0000000000000fea         db  0x43 ; 'C'
                     a214:
0000000000000feb         db         "_2.14", 0                                  ; DATA XREF=decode_output_arg+204
0000000000000ff1         db  0x47 ; 'G'
0000000000000ff2         db  0x4c ; 'L'
0000000000000ff3         db  0x49 ; 'I'
0000000000000ff4         db  0x42 ; 'B'
0000000000000ff5         db  0x43 ; 'C'
0000000000000ff6         db  0x5f ; '_'
0000000000000ff7         db  0x32 ; '2'
0000000000000ff8         db  0x2e ; '.'
0000000000000ff9         db  0x34 ; '4'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x47 ; 'G'
0000000000000ffc         db  0x4c ; 'L'
0000000000000ffd         db  0x49 ; 'I'
0000000000000ffe         db  0x42 ; 'B'
                     aC234:
0000000000000fff         db         "C_2.3.4", 0                                ; DATA XREF=canonicalize_filename_mode+124, chdir_long+124, chdir_long+209, chdir_long+238, chdir_long+304
0000000000001007         db  0x47 ; 'G'
0000000000001008         db  0x4c ; 'L'
0000000000001009         db  0x49 ; 'I'
000000000000100a         db  0x42 ; 'B'
000000000000100b         db  0x43 ; 'C'
000000000000100c         db  0x5f ; '_'
000000000000100d         db  0x32 ; '2'
000000000000100e         db  0x2e ; '.'
000000000000100f         db  0x32 ; '2'
0000000000001010         db  0x2e ; '.'
0000000000001011         db  0x35 ; '5'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x5f ; '_'
0000000000001014         db  0x49 ; 'I'
0000000000001015         db  0x54 ; 'T'
0000000000001016         db  0x4d ; 'M'
0000000000001017         db  0x5f ; '_'
0000000000001018         db  0x64 ; 'd'
0000000000001019         db  0x65 ; 'e'
000000000000101a         db  0x72 ; 'r'
000000000000101b         db  0x65 ; 'e'
000000000000101c         db  0x67 ; 'g'
000000000000101d         db  0x69 ; 'i'
000000000000101e         db  0x73 ; 's'
000000000000101f         db  0x74 ; 't'
0000000000001020         db  0x65 ; 'e'
0000000000001021         db  0x72 ; 'r'
0000000000001022         db  0x54 ; 'T'
0000000000001023         db  0x4d ; 'M'
0000000000001024         db  0x43 ; 'C'
0000000000001025         db  0x6c ; 'l'
0000000000001026         db  0x6f ; 'o'
0000000000001027         db  0x6e ; 'n'
0000000000001028         db  0x65 ; 'e'
0000000000001029         db  0x54 ; 'T'
000000000000102a         db  0x61 ; 'a'
000000000000102b         db  0x62 ; 'b'
000000000000102c         db  0x6c ; 'l'
000000000000102d         db  0x65 ; 'e'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x5f ; '_'
0000000000001030         db  0x5f ; '_'
0000000000001031         db  0x67 ; 'g'
0000000000001032         db  0x6d ; 'm'
0000000000001033         db  0x6f ; 'o'
0000000000001034         db  0x6e ; 'n'
0000000000001035         db  0x5f ; '_'
0000000000001036         db  0x73 ; 's'
0000000000001037         db  0x74 ; 't'
0000000000001038         db  0x61 ; 'a'
0000000000001039         db  0x72 ; 'r'
000000000000103a         db  0x74 ; 't'
000000000000103b         db  0x5f ; '_'
000000000000103c         db  0x5f ; '_'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x5f ; '_'
000000000000103f         db  0x49 ; 'I'
0000000000001040         db  0x54 ; 'T'
0000000000001041         db  0x4d ; 'M'
0000000000001042         db  0x5f ; '_'
0000000000001043         db  0x72 ; 'r'
0000000000001044         db  0x65 ; 'e'
0000000000001045         db  0x67 ; 'g'
0000000000001046         db  0x69 ; 'i'
0000000000001047         db  0x73 ; 's'
0000000000001048         db  0x74 ; 't'
0000000000001049         db  0x65 ; 'e'
000000000000104a         db  0x72 ; 'r'
000000000000104b         db  0x54 ; 'T'
000000000000104c         db  0x4d ; 'M'
000000000000104d         db  0x43 ; 'C'
000000000000104e         db  0x6c ; 'l'
000000000000104f         db  0x6f ; 'o'
0000000000001050         db  0x6e ; 'n'
0000000000001051         db  0x65 ; 'e'
0000000000001052         db  0x54 ; 'T'
0000000000001053         db  0x61 ; 'a'
0000000000001054         db  0x62 ; 'b'
0000000000001055         db  0x6c ; 'l'
0000000000001056         db  0x65 ; 'e'
0000000000001057         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0x1058; 0x1120[ (200 bytes)
        ; File offset : [4184; 4384[ (200 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000001058         db  0x00 ; '.'
0000000000001059         db  0x00 ; '.'
000000000000105a         db  0x02 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x03 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x02 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x02 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x02 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x02 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x02 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x02 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x02 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x02 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x02 ; '.'
0000000000001071         db  0x00 ; '.'
0000000000001072         db  0x02 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x02 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x02 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x02 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x02 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x02 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x02 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x02 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x02 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x02 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x02 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x02 ; '.'
0000000000001089         db  0x00 ; '.'
000000000000108a         db  0x02 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x04 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x02 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x04 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x02 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x02 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x02 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x04 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x02 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x02 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x02 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x02 ; '.'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x02 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x02 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x02 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x02 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x02 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x02 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x02 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x02 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x02 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x02 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x02 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x02 ; '.'
00000000000010b9         db  0x00 ; '.'
00000000000010ba         db  0x02 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x02 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x03 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x00 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x05 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x02 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x02 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x02 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x02 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x02 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x02 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x02 ; '.'
00000000000010d1         db  0x00 ; '.'
00000000000010d2         db  0x02 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x02 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x02 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x02 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x02 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x02 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x02 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x02 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x02 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x03 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x02 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x02 ; '.'
00000000000010e9         db  0x00 ; '.'
00000000000010ea         db  0x02 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x02 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x02 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x02 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x02 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x02 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x02 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x02 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x02 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x03 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x02 ; '.'
0000000000001101         db  0x00 ; '.'
0000000000001102         db  0x02 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x02 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x02 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x02 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x02 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x06 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x03 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x02 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x02 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x02 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x02 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x02 ; '.'
0000000000001119         db  0x00 ; '.'
000000000000111a         db  0x02 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x02 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x02 ; '.'
000000000000111f         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0x1120; 0x1180[ (96 bytes)
        ; File offset : [4384; 4480[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000001120         db  0x01 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x05 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x01 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x10 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x13 ; '.'
0000000000001131         db  0x69 ; 'i'
0000000000001132         db  0x69 ; 'i'
0000000000001133         db  0x0d ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x06 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x9c ; '.'
0000000000001139         db  0x03 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x10 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x94 ; '.'
0000000000001141         db  0x91 ; '.'
0000000000001142         db  0x96 ; '.'
0000000000001143         db  0x06 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x05 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xa6 ; '.'
0000000000001149         db  0x03 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x10 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x14 ; '.'
0000000000001151         db  0x69 ; 'i'
0000000000001152         db  0x69 ; 'i'
0000000000001153         db  0x0d ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x04 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0xb1 ; '.'
0000000000001159         db  0x03 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x10 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x74 ; 't'
0000000000001161         db  0x19 ; '.'
0000000000001162         db  0x69 ; 'i'
0000000000001163         db  0x09 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x03 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0xbb ; '.'
0000000000001169         db  0x03 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x10 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x75 ; 'u'
0000000000001171         db  0x1a ; '.'
0000000000001172         db  0x69 ; 'i'
0000000000001173         db  0x09 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x02 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0xc7 ; '.'
0000000000001179         db  0x03 ; '.'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0x1180; 0x1810[ (1680 bytes)
        ; File offset : [4480; 6160[ (1680 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001180         db  0x70 ; 'p'
0000000000001181         db  0x38 ; '8'
0000000000001182         db  0x21 ; '!'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x08 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xa0 ; '.'
0000000000001191         db  0x3c ; '<'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x78 ; 'x'
0000000000001199         db  0x38 ; '8'
000000000000119a         db  0x21 ; '!'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x60 ; '`'
00000000000011a9         db  0x3c ; '<'
00000000000011aa         db  0x00 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x80 ; '.'
00000000000011b1         db  0x38 ; '8'
00000000000011b2         db  0x21 ; '!'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x08 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x08 ; '.'
00000000000011c1         db  0xf2 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0xa0 ; '.'
00000000000011c9         db  0x38 ; '8'
00000000000011ca         db  0x21 ; '!'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x08 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x0c ; '.'
00000000000011d9         db  0xf2 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0xc0 ; '.'
00000000000011e1         db  0x38 ; '8'
00000000000011e2         db  0x21 ; '!'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x08 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x17 ; '.'
00000000000011f1         db  0xf2 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0xe0 ; '.'
00000000000011f9         db  0x38 ; '8'
00000000000011fa         db  0x21 ; '!'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x08 ; '.'
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x1e ; '.'
0000000000001209         db  0xf2 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x00 ; '.'
0000000000001211         db  0x39 ; '9'
0000000000001212         db  0x21 ; '!'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x08 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x2d ; '-'
0000000000001221         db  0xf2 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x20 ; ' '
0000000000001229         db  0x39 ; '9'
000000000000122a         db  0x21 ; '!'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x08 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x30 ; '0'
0000000000001239         db  0xf2 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x40 ; '@'
0000000000001241         db  0x39 ; '9'
0000000000001242         db  0x21 ; '!'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x08 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x5e ; '^'
0000000000001251         db  0xf1 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x60 ; '`'
0000000000001259         db  0x39 ; '9'
000000000000125a         db  0x21 ; '!'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x08 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x36 ; '6'
0000000000001269         db  0xf2 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x80 ; '.'
0000000000001271         db  0x39 ; '9'
0000000000001272         db  0x21 ; '!'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x08 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x42 ; 'B'
0000000000001281         db  0xf2 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0xa0 ; '.'
0000000000001289         db  0x39 ; '9'
000000000000128a         db  0x21 ; '!'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x08 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x50 ; 'P'
0000000000001299         db  0xf2 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0xc0 ; '.'
00000000000012a1         db  0x39 ; '9'
00000000000012a2         db  0x21 ; '!'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x08 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x4d ; 'M'
00000000000012b1         db  0xf2 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0xe0 ; '.'
00000000000012b9         db  0x39 ; '9'
00000000000012ba         db  0x21 ; '!'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x08 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x98 ; '.'
00000000000012c9         db  0xf2 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x00 ; '.'
00000000000012d1         db  0x3a ; ':'
00000000000012d2         db  0x21 ; '!'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x08 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x5d ; ']'
00000000000012e1         db  0xf2 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x20 ; ' '
00000000000012e9         db  0x3a ; ':'
00000000000012ea         db  0x21 ; '!'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x08 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x55 ; 'U'
00000000000012f9         db  0xf2 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0x40 ; '@'
0000000000001301         db  0x3a ; ':'
0000000000001302         db  0x21 ; '!'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x08 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x62 ; 'b'
0000000000001311         db  0xf2 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0x60 ; '`'
0000000000001319         db  0x3a ; ':'
000000000000131a         db  0x21 ; '!'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x08 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x67 ; 'g'
0000000000001329         db  0xf2 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0xa0 ; '.'
0000000000001331         db  0x3a ; ':'
0000000000001332         db  0x21 ; '!'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x08 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x1e ; '.'
0000000000001341         db  0xf2 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0xa8 ; '.'
0000000000001349         db  0x3a ; ':'
000000000000134a         db  0x21 ; '!'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x08 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x2d ; '-'
0000000000001359         db  0xf2 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0xc0 ; '.'
0000000000001361         db  0x3a ; ':'
0000000000001362         db  0x21 ; '!'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x08 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0xe5 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x01 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0xc8 ; '.'
0000000000001379         db  0x3a ; ':'
000000000000137a         db  0x21 ; '!'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x08 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0xed ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x01 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0xd0 ; '.'
0000000000001391         db  0x3a ; ':'
0000000000001392         db  0x21 ; '!'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x08 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0xf3 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x01 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0xd8 ; '.'
00000000000013a9         db  0x3a ; ':'
00000000000013aa         db  0x21 ; '!'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x08 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x00 ; '.'
00000000000013b9         db  0x01 ; '.'
00000000000013ba         db  0x01 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0xe0 ; '.'
00000000000013c1         db  0x3a ; ':'
00000000000013c2         db  0x21 ; '!'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x08 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x0d ; '.'
00000000000013d1         db  0x01 ; '.'
00000000000013d2         db  0x01 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0xe8 ; '.'
00000000000013d9         db  0x3a ; ':'
00000000000013da         db  0x21 ; '!'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x08 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x7f ; '.'
00000000000013e9         db  0x0b ; '.'
00000000000013ea         db  0x01 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0xf0 ; '.'
00000000000013f1         db  0x3a ; ':'
00000000000013f2         db  0x21 ; '!'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x08 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x21 ; '!'
0000000000001401         db  0x01 ; '.'
0000000000001402         db  0x01 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0xf8 ; '.'
0000000000001409         db  0x3a ; ':'
000000000000140a         db  0x21 ; '!'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x08 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x06 ; '.'
0000000000001419         db  0x01 ; '.'
000000000000141a         db  0x01 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x00 ; '.'
0000000000001421         db  0x3b ; ';'
0000000000001422         db  0x21 ; '!'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x08 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x42 ; 'B'
0000000000001431         db  0xf1 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x08 ; '.'
0000000000001439         db  0x3b ; ';'
000000000000143a         db  0x21 ; '!'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x08 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x29 ; ')'
0000000000001449         db  0x01 ; '.'
000000000000144a         db  0x01 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x08 ; '.'
0000000000001451         db  0x40 ; '@'
0000000000001452         db  0x21 ; '!'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x08 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x08 ; '.'
0000000000001461         db  0x40 ; '@'
0000000000001462         db  0x21 ; '!'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x28 ; '('
0000000000001469         db  0x40 ; '@'
000000000000146a         db  0x21 ; '!'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x08 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x6f ; 'o'
0000000000001479         db  0xf2 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x38 ; '8'
0000000000001481         db  0x40 ; '@'
0000000000001482         db  0x21 ; '!'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x08 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x76 ; 'v'
0000000000001491         db  0xf2 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x58 ; 'X'
0000000000001499         db  0x40 ; '@'
000000000000149a         db  0x21 ; '!'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x08 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x81 ; '.'
00000000000014a9         db  0xf2 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x68 ; 'h'
00000000000014b1         db  0x40 ; '@'
00000000000014b2         db  0x21 ; '!'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x08 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x88 ; '.'
00000000000014c1         db  0xf2 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x88 ; '.'
00000000000014c9         db  0x40 ; '@'
00000000000014ca         db  0x21 ; '!'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x08 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x12 ; '.'
00000000000014d9         db  0xf2 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x98 ; '.'
00000000000014e1         db  0x40 ; '@'
00000000000014e2         db  0x21 ; '!'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x08 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0xe4 ; '.'
00000000000014f1         db  0xef ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0xb8 ; '.'
00000000000014f9         db  0x40 ; '@'
00000000000014fa         db  0x21 ; '!'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x08 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0xa6 ; '.'
0000000000001509         db  0xf2 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0xc8 ; '.'
0000000000001511         db  0x40 ; '@'
0000000000001512         db  0x21 ; '!'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x08 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0xac ; '.'
0000000000001521         db  0xf2 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0xe8 ; '.'
0000000000001529         db  0x40 ; '@'
000000000000152a         db  0x21 ; '!'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x08 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0xb2 ; '.'
0000000000001539         db  0xf2 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0xf8 ; '.'
0000000000001541         db  0x40 ; '@'
0000000000001542         db  0x21 ; '!'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x08 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x8d ; '.'
0000000000001551         db  0xf2 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x18 ; '.'
0000000000001559         db  0x41 ; 'A'
000000000000155a         db  0x21 ; '!'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x08 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0xbf ; '.'
0000000000001569         db  0xf2 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x28 ; '('
0000000000001571         db  0x41 ; 'A'
0000000000001572         db  0x21 ; '!'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x08 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0xc6 ; '.'
0000000000001581         db  0xf2 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x48 ; 'H'
0000000000001589         db  0x41 ; 'A'
000000000000158a         db  0x21 ; '!'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x08 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x97 ; '.'
0000000000001599         db  0xf2 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x58 ; 'X'
00000000000015a1         db  0x41 ; 'A'
00000000000015a2         db  0x21 ; '!'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x08 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x9e ; '.'
00000000000015b1         db  0xf2 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x78 ; 'x'
00000000000015b9         db  0x41 ; 'A'
00000000000015ba         db  0x21 ; '!'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x08 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0xa5 ; '.'
00000000000015c9         db  0xf2 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x88 ; '.'
00000000000015d1         db  0x41 ; 'A'
00000000000015d2         db  0x21 ; '!'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x08 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0xab ; '.'
00000000000015e1         db  0xf2 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0xa8 ; '.'
00000000000015e9         db  0x41 ; 'A'
00000000000015ea         db  0x21 ; '!'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x08 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0xb1 ; '.'
00000000000015f9         db  0xf2 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0xb8 ; '.'
0000000000001601         db  0x41 ; 'A'
0000000000001602         db  0x21 ; '!'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x08 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0xb8 ; '.'
0000000000001611         db  0xf2 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0xd8 ; '.'
0000000000001619         db  0x41 ; 'A'
000000000000161a         db  0x21 ; '!'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x08 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0xbe ; '.'
0000000000001629         db  0xf2 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0xe8 ; '.'
0000000000001631         db  0x41 ; 'A'
0000000000001632         db  0x21 ; '!'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x08 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0xc5 ; '.'
0000000000001641         db  0xf2 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x08 ; '.'
0000000000001649         db  0x42 ; 'B'
000000000000164a         db  0x21 ; '!'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x08 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0xcb ; '.'
0000000000001659         db  0xf2 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x18 ; '.'
0000000000001661         db  0x42 ; 'B'
0000000000001662         db  0x21 ; '!'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x08 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0xd2 ; '.'
0000000000001671         db  0xf2 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x38 ; '8'
0000000000001679         db  0x42 ; 'B'
000000000000167a         db  0x21 ; '!'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x08 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0xdd ; '.'
0000000000001689         db  0xf2 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x48 ; 'H'
0000000000001691         db  0x42 ; 'B'
0000000000001692         db  0x21 ; '!'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x08 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0xe2 ; '.'
00000000000016a1         db  0xf2 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x60 ; '`'
00000000000016a9         db  0x42 ; 'B'
00000000000016aa         db  0x21 ; '!'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x08 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x76 ; 'v'
00000000000016b9         db  0xff ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0xc0 ; '.'
00000000000016c1         db  0x42 ; 'B'
00000000000016c2         db  0x21 ; '!'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x08 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0xd0 ; '.'
00000000000016d1         db  0x42 ; 'B'
00000000000016d2         db  0x21 ; '!'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0xd8 ; '.'
00000000000016d9         db  0x42 ; 'B'
00000000000016da         db  0x21 ; '!'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x08 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x40 ; '@'
00000000000016e9         db  0x44 ; 'D'
00000000000016ea         db  0x21 ; '!'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0xe8 ; '.'
00000000000016f1         db  0x42 ; 'B'
00000000000016f2         db  0x21 ; '!'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x08 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0xe0 ; '.'
0000000000001701         db  0xc5 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0xd0 ; '.'
0000000000001709         db  0x3f ; '?'
000000000000170a         db  0x21 ; '!'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x06 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x09 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x00 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0xd8 ; '.'
0000000000001721         db  0x3f ; '?'
0000000000001722         db  0x21 ; '!'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x06 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x2d ; '-'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0xe0 ; '.'
0000000000001739         db  0x3f ; '?'
000000000000173a         db  0x21 ; '!'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x06 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x34 ; '4'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x00 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0xe8 ; '.'
0000000000001751         db  0x3f ; '?'
0000000000001752         db  0x21 ; '!'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x06 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x53 ; 'S'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0xf0 ; '.'
0000000000001769         db  0x3f ; '?'
000000000000176a         db  0x21 ; '!'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x06 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x58 ; 'X'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x00 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x00 ; '.'
0000000000001781         db  0x43 ; 'C'
0000000000001782         db  0x21 ; '!'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x05 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x5d ; ']'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x08 ; '.'
0000000000001799         db  0x43 ; 'C'
000000000000179a         db  0x21 ; '!'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x05 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x5c ; '\'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x10 ; '.'
00000000000017b1         db  0x43 ; 'C'
00000000000017b2         db  0x21 ; '!'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x05 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x62 ; 'b'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x00 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x18 ; '.'
00000000000017c9         db  0x43 ; 'C'
00000000000017ca         db  0x21 ; '!'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x05 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x63 ; 'c'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x00 ; '.'
00000000000017d9         db  0x00 ; '.'
00000000000017da         db  0x00 ; '.'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x20 ; ' '
00000000000017e1         db  0x43 ; 'C'
00000000000017e2         db  0x21 ; '!'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x05 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x5f ; '_'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x00 ; '.'
00000000000017f1         db  0x00 ; '.'
00000000000017f2         db  0x00 ; '.'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x40 ; '@'
00000000000017f9         db  0x43 ; 'C'
00000000000017fa         db  0x21 ; '!'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x05 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x61 ; 'a'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x00 ; '.'
0000000000001809         db  0x00 ; '.'
000000000000180a         db  0x00 ; '.'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1810; 0x2020[ (2064 bytes)
        ; File offset : [6160; 8224[ (2064 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001810         db  0x20 ; ' '
0000000000001811         db  0x3d ; '='
0000000000001812         db  0x21 ; '!'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x07 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x01 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x00 ; '.'
0000000000001821         db  0x00 ; '.'
0000000000001822         db  0x00 ; '.'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x28 ; '('
0000000000001829         db  0x3d ; '='
000000000000182a         db  0x21 ; '!'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x07 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x02 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x00 ; '.'
0000000000001839         db  0x00 ; '.'
000000000000183a         db  0x00 ; '.'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x30 ; '0'
0000000000001841         db  0x3d ; '='
0000000000001842         db  0x21 ; '!'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x07 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x03 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x00 ; '.'
0000000000001851         db  0x00 ; '.'
0000000000001852         db  0x00 ; '.'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x38 ; '8'
0000000000001859         db  0x3d ; '='
000000000000185a         db  0x21 ; '!'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x07 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x04 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x00 ; '.'
0000000000001869         db  0x00 ; '.'
000000000000186a         db  0x00 ; '.'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x40 ; '@'
0000000000001871         db  0x3d ; '='
0000000000001872         db  0x21 ; '!'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x07 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x05 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x00 ; '.'
0000000000001881         db  0x00 ; '.'
0000000000001882         db  0x00 ; '.'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x48 ; 'H'
0000000000001889         db  0x3d ; '='
000000000000188a         db  0x21 ; '!'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x07 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x06 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x00 ; '.'
0000000000001899         db  0x00 ; '.'
000000000000189a         db  0x00 ; '.'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x50 ; 'P'
00000000000018a1         db  0x3d ; '='
00000000000018a2         db  0x21 ; '!'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x07 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x07 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x00 ; '.'
00000000000018b1         db  0x00 ; '.'
00000000000018b2         db  0x00 ; '.'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x58 ; 'X'
00000000000018b9         db  0x3d ; '='
00000000000018ba         db  0x21 ; '!'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x07 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x08 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x00 ; '.'
00000000000018c9         db  0x00 ; '.'
00000000000018ca         db  0x00 ; '.'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x60 ; '`'
00000000000018d1         db  0x3d ; '='
00000000000018d2         db  0x21 ; '!'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x00 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x07 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x0a ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x00 ; '.'
00000000000018e1         db  0x00 ; '.'
00000000000018e2         db  0x00 ; '.'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x68 ; 'h'
00000000000018e9         db  0x3d ; '='
00000000000018ea         db  0x21 ; '!'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x07 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x0b ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x00 ; '.'
00000000000018f9         db  0x00 ; '.'
00000000000018fa         db  0x00 ; '.'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x70 ; 'p'
0000000000001901         db  0x3d ; '='
0000000000001902         db  0x21 ; '!'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x00 ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x07 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x0c ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x00 ; '.'
0000000000001911         db  0x00 ; '.'
0000000000001912         db  0x00 ; '.'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x78 ; 'x'
0000000000001919         db  0x3d ; '='
000000000000191a         db  0x21 ; '!'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x00 ; '.'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x07 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x0d ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x00 ; '.'
0000000000001929         db  0x00 ; '.'
000000000000192a         db  0x00 ; '.'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x80 ; '.'
0000000000001931         db  0x3d ; '='
0000000000001932         db  0x21 ; '!'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x00 ; '.'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x07 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x0e ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x00 ; '.'
0000000000001941         db  0x00 ; '.'
0000000000001942         db  0x00 ; '.'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x88 ; '.'
0000000000001949         db  0x3d ; '='
000000000000194a         db  0x21 ; '!'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x00 ; '.'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x07 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x0f ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x00 ; '.'
0000000000001959         db  0x00 ; '.'
000000000000195a         db  0x00 ; '.'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x90 ; '.'
0000000000001961         db  0x3d ; '='
0000000000001962         db  0x21 ; '!'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x00 ; '.'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x07 ; '.'
0000000000001969         db  0x00 ; '.'
000000000000196a         db  0x00 ; '.'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x10 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0x00 ; '.'
0000000000001971         db  0x00 ; '.'
0000000000001972         db  0x00 ; '.'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x00 ; '.'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x98 ; '.'
0000000000001979         db  0x3d ; '='
000000000000197a         db  0x21 ; '!'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x00 ; '.'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x07 ; '.'
0000000000001981         db  0x00 ; '.'
0000000000001982         db  0x00 ; '.'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x11 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0x00 ; '.'
0000000000001989         db  0x00 ; '.'
000000000000198a         db  0x00 ; '.'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x00 ; '.'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0xa0 ; '.'
0000000000001991         db  0x3d ; '='
0000000000001992         db  0x21 ; '!'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x00 ; '.'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x07 ; '.'
0000000000001999         db  0x00 ; '.'
000000000000199a         db  0x00 ; '.'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x12 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0x00 ; '.'
00000000000019a1         db  0x00 ; '.'
00000000000019a2         db  0x00 ; '.'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x00 ; '.'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0xa8 ; '.'
00000000000019a9         db  0x3d ; '='
00000000000019aa         db  0x21 ; '!'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x00 ; '.'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x07 ; '.'
00000000000019b1         db  0x00 ; '.'
00000000000019b2         db  0x00 ; '.'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x13 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0x00 ; '.'
00000000000019b9         db  0x00 ; '.'
00000000000019ba         db  0x00 ; '.'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x00 ; '.'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0xb0 ; '.'
00000000000019c1         db  0x3d ; '='
00000000000019c2         db  0x21 ; '!'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x00 ; '.'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x07 ; '.'
00000000000019c9         db  0x00 ; '.'
00000000000019ca         db  0x00 ; '.'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x14 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0x00 ; '.'
00000000000019d1         db  0x00 ; '.'
00000000000019d2         db  0x00 ; '.'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x00 ; '.'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0xb8 ; '.'
00000000000019d9         db  0x3d ; '='
00000000000019da         db  0x21 ; '!'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x00 ; '.'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x07 ; '.'
00000000000019e1         db  0x00 ; '.'
00000000000019e2         db  0x00 ; '.'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x15 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0x00 ; '.'
00000000000019e9         db  0x00 ; '.'
00000000000019ea         db  0x00 ; '.'
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x00 ; '.'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0xc0 ; '.'
00000000000019f1         db  0x3d ; '='
00000000000019f2         db  0x21 ; '!'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x00 ; '.'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x07 ; '.'
00000000000019f9         db  0x00 ; '.'
00000000000019fa         db  0x00 ; '.'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x16 ; '.'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0x00 ; '.'
0000000000001a01         db  0x00 ; '.'
0000000000001a02         db  0x00 ; '.'
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x00 ; '.'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0xc8 ; '.'
0000000000001a09         db  0x3d ; '='
0000000000001a0a         db  0x21 ; '!'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x00 ; '.'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x07 ; '.'
0000000000001a11         db  0x00 ; '.'
0000000000001a12         db  0x00 ; '.'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x17 ; '.'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'
0000000000001a18         db  0x00 ; '.'
0000000000001a19         db  0x00 ; '.'
0000000000001a1a         db  0x00 ; '.'
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x00 ; '.'
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0xd0 ; '.'
0000000000001a21         db  0x3d ; '='
0000000000001a22         db  0x21 ; '!'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x00 ; '.'
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x07 ; '.'
0000000000001a29         db  0x00 ; '.'
0000000000001a2a         db  0x00 ; '.'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x18 ; '.'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0x00 ; '.'
0000000000001a31         db  0x00 ; '.'
0000000000001a32         db  0x00 ; '.'
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x00 ; '.'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0xd8 ; '.'
0000000000001a39         db  0x3d ; '='
0000000000001a3a         db  0x21 ; '!'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x00 ; '.'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x07 ; '.'
0000000000001a41         db  0x00 ; '.'
0000000000001a42         db  0x00 ; '.'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x19 ; '.'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0x00 ; '.'
0000000000001a49         db  0x00 ; '.'
0000000000001a4a         db  0x00 ; '.'
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x00 ; '.'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0xe0 ; '.'
0000000000001a51         db  0x3d ; '='
0000000000001a52         db  0x21 ; '!'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x00 ; '.'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x07 ; '.'
0000000000001a59         db  0x00 ; '.'
0000000000001a5a         db  0x00 ; '.'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x1a ; '.'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0x00 ; '.'
0000000000001a61         db  0x00 ; '.'
0000000000001a62         db  0x00 ; '.'
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x00 ; '.'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0xe8 ; '.'
0000000000001a69         db  0x3d ; '='
0000000000001a6a         db  0x21 ; '!'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x00 ; '.'
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x07 ; '.'
0000000000001a71         db  0x00 ; '.'
0000000000001a72         db  0x00 ; '.'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x1b ; '.'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0x00 ; '.'
0000000000001a79         db  0x00 ; '.'
0000000000001a7a         db  0x00 ; '.'
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x00 ; '.'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0xf0 ; '.'
0000000000001a81         db  0x3d ; '='
0000000000001a82         db  0x21 ; '!'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x00 ; '.'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x07 ; '.'
0000000000001a89         db  0x00 ; '.'
0000000000001a8a         db  0x00 ; '.'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x1c ; '.'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0x00 ; '.'
0000000000001a91         db  0x00 ; '.'
0000000000001a92         db  0x00 ; '.'
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x00 ; '.'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'
0000000000001a98         db  0xf8 ; '.'
0000000000001a99         db  0x3d ; '='
0000000000001a9a         db  0x21 ; '!'
0000000000001a9b         db  0x00 ; '.'
0000000000001a9c         db  0x00 ; '.'
0000000000001a9d         db  0x00 ; '.'
0000000000001a9e         db  0x00 ; '.'
0000000000001a9f         db  0x00 ; '.'
0000000000001aa0         db  0x07 ; '.'
0000000000001aa1         db  0x00 ; '.'
0000000000001aa2         db  0x00 ; '.'
0000000000001aa3         db  0x00 ; '.'
0000000000001aa4         db  0x1d ; '.'
0000000000001aa5         db  0x00 ; '.'
0000000000001aa6         db  0x00 ; '.'
0000000000001aa7         db  0x00 ; '.'
0000000000001aa8         db  0x00 ; '.'
0000000000001aa9         db  0x00 ; '.'
0000000000001aaa         db  0x00 ; '.'
0000000000001aab         db  0x00 ; '.'
0000000000001aac         db  0x00 ; '.'
0000000000001aad         db  0x00 ; '.'
0000000000001aae         db  0x00 ; '.'
0000000000001aaf         db  0x00 ; '.'
0000000000001ab0         db  0x00 ; '.'
0000000000001ab1         db  0x3e ; '>'
0000000000001ab2         db  0x21 ; '!'
0000000000001ab3         db  0x00 ; '.'
0000000000001ab4         db  0x00 ; '.'
0000000000001ab5         db  0x00 ; '.'
0000000000001ab6         db  0x00 ; '.'
0000000000001ab7         db  0x00 ; '.'
0000000000001ab8         db  0x07 ; '.'
0000000000001ab9         db  0x00 ; '.'
0000000000001aba         db  0x00 ; '.'
0000000000001abb         db  0x00 ; '.'
0000000000001abc         db  0x1e ; '.'
0000000000001abd         db  0x00 ; '.'
0000000000001abe         db  0x00 ; '.'
0000000000001abf         db  0x00 ; '.'
0000000000001ac0         db  0x00 ; '.'
0000000000001ac1         db  0x00 ; '.'
0000000000001ac2         db  0x00 ; '.'
0000000000001ac3         db  0x00 ; '.'
0000000000001ac4         db  0x00 ; '.'
0000000000001ac5         db  0x00 ; '.'
0000000000001ac6         db  0x00 ; '.'
0000000000001ac7         db  0x00 ; '.'
0000000000001ac8         db  0x08 ; '.'
0000000000001ac9         db  0x3e ; '>'
0000000000001aca         db  0x21 ; '!'
0000000000001acb         db  0x00 ; '.'
0000000000001acc         db  0x00 ; '.'
0000000000001acd         db  0x00 ; '.'
0000000000001ace         db  0x00 ; '.'
0000000000001acf         db  0x00 ; '.'
0000000000001ad0         db  0x07 ; '.'
0000000000001ad1         db  0x00 ; '.'
0000000000001ad2         db  0x00 ; '.'
0000000000001ad3         db  0x00 ; '.'
0000000000001ad4         db  0x1f ; '.'
0000000000001ad5         db  0x00 ; '.'
0000000000001ad6         db  0x00 ; '.'
0000000000001ad7         db  0x00 ; '.'
0000000000001ad8         db  0x00 ; '.'
0000000000001ad9         db  0x00 ; '.'
0000000000001ada         db  0x00 ; '.'
0000000000001adb         db  0x00 ; '.'
0000000000001adc         db  0x00 ; '.'
0000000000001add         db  0x00 ; '.'
0000000000001ade         db  0x00 ; '.'
0000000000001adf         db  0x00 ; '.'
0000000000001ae0         db  0x10 ; '.'
0000000000001ae1         db  0x3e ; '>'
0000000000001ae2         db  0x21 ; '!'
0000000000001ae3         db  0x00 ; '.'
0000000000001ae4         db  0x00 ; '.'
0000000000001ae5         db  0x00 ; '.'
0000000000001ae6         db  0x00 ; '.'
0000000000001ae7         db  0x00 ; '.'
0000000000001ae8         db  0x07 ; '.'
0000000000001ae9         db  0x00 ; '.'
0000000000001aea         db  0x00 ; '.'
0000000000001aeb         db  0x00 ; '.'
0000000000001aec         db  0x20 ; ' '
0000000000001aed         db  0x00 ; '.'
0000000000001aee         db  0x00 ; '.'
0000000000001aef         db  0x00 ; '.'
0000000000001af0         db  0x00 ; '.'
0000000000001af1         db  0x00 ; '.'
0000000000001af2         db  0x00 ; '.'
0000000000001af3         db  0x00 ; '.'
0000000000001af4         db  0x00 ; '.'
0000000000001af5         db  0x00 ; '.'
0000000000001af6         db  0x00 ; '.'
0000000000001af7         db  0x00 ; '.'
0000000000001af8         db  0x18 ; '.'
0000000000001af9         db  0x3e ; '>'
0000000000001afa         db  0x21 ; '!'
0000000000001afb         db  0x00 ; '.'
0000000000001afc         db  0x00 ; '.'
0000000000001afd         db  0x00 ; '.'
0000000000001afe         db  0x00 ; '.'
0000000000001aff         db  0x00 ; '.'
0000000000001b00         db  0x07 ; '.'
0000000000001b01         db  0x00 ; '.'
0000000000001b02         db  0x00 ; '.'
0000000000001b03         db  0x00 ; '.'
0000000000001b04         db  0x21 ; '!'
0000000000001b05         db  0x00 ; '.'
0000000000001b06         db  0x00 ; '.'
0000000000001b07         db  0x00 ; '.'
0000000000001b08         db  0x00 ; '.'
0000000000001b09         db  0x00 ; '.'
0000000000001b0a         db  0x00 ; '.'
0000000000001b0b         db  0x00 ; '.'
0000000000001b0c         db  0x00 ; '.'
0000000000001b0d         db  0x00 ; '.'
0000000000001b0e         db  0x00 ; '.'
0000000000001b0f         db  0x00 ; '.'
0000000000001b10         db  0x20 ; ' '
0000000000001b11         db  0x3e ; '>'
0000000000001b12         db  0x21 ; '!'
0000000000001b13         db  0x00 ; '.'
0000000000001b14         db  0x00 ; '.'
0000000000001b15         db  0x00 ; '.'
0000000000001b16         db  0x00 ; '.'
0000000000001b17         db  0x00 ; '.'
0000000000001b18         db  0x07 ; '.'
0000000000001b19         db  0x00 ; '.'
0000000000001b1a         db  0x00 ; '.'
0000000000001b1b         db  0x00 ; '.'
0000000000001b1c         db  0x22 ; '"'
0000000000001b1d         db  0x00 ; '.'
0000000000001b1e         db  0x00 ; '.'
0000000000001b1f         db  0x00 ; '.'
0000000000001b20         db  0x00 ; '.'
0000000000001b21         db  0x00 ; '.'
0000000000001b22         db  0x00 ; '.'
0000000000001b23         db  0x00 ; '.'
0000000000001b24         db  0x00 ; '.'
0000000000001b25         db  0x00 ; '.'
0000000000001b26         db  0x00 ; '.'
0000000000001b27         db  0x00 ; '.'
0000000000001b28         db  0x28 ; '('
0000000000001b29         db  0x3e ; '>'
0000000000001b2a         db  0x21 ; '!'
0000000000001b2b         db  0x00 ; '.'
0000000000001b2c         db  0x00 ; '.'
0000000000001b2d         db  0x00 ; '.'
0000000000001b2e         db  0x00 ; '.'
0000000000001b2f         db  0x00 ; '.'
0000000000001b30         db  0x07 ; '.'
0000000000001b31         db  0x00 ; '.'
0000000000001b32         db  0x00 ; '.'
0000000000001b33         db  0x00 ; '.'
0000000000001b34         db  0x23 ; '#'
0000000000001b35         db  0x00 ; '.'
0000000000001b36         db  0x00 ; '.'
0000000000001b37         db  0x00 ; '.'
0000000000001b38         db  0x00 ; '.'
0000000000001b39         db  0x00 ; '.'
0000000000001b3a         db  0x00 ; '.'
0000000000001b3b         db  0x00 ; '.'
0000000000001b3c         db  0x00 ; '.'
0000000000001b3d         db  0x00 ; '.'
0000000000001b3e         db  0x00 ; '.'
0000000000001b3f         db  0x00 ; '.'
0000000000001b40         db  0x30 ; '0'
0000000000001b41         db  0x3e ; '>'
0000000000001b42         db  0x21 ; '!'
0000000000001b43         db  0x00 ; '.'
0000000000001b44         db  0x00 ; '.'
0000000000001b45         db  0x00 ; '.'
0000000000001b46         db  0x00 ; '.'
0000000000001b47         db  0x00 ; '.'
0000000000001b48         db  0x07 ; '.'
0000000000001b49         db  0x00 ; '.'
0000000000001b4a         db  0x00 ; '.'
0000000000001b4b         db  0x00 ; '.'
0000000000001b4c         db  0x24 ; '$'
0000000000001b4d         db  0x00 ; '.'
0000000000001b4e         db  0x00 ; '.'
0000000000001b4f         db  0x00 ; '.'
0000000000001b50         db  0x00 ; '.'
0000000000001b51         db  0x00 ; '.'
0000000000001b52         db  0x00 ; '.'
0000000000001b53         db  0x00 ; '.'
0000000000001b54         db  0x00 ; '.'
0000000000001b55         db  0x00 ; '.'
0000000000001b56         db  0x00 ; '.'
0000000000001b57         db  0x00 ; '.'
0000000000001b58         db  0x38 ; '8'
0000000000001b59         db  0x3e ; '>'
0000000000001b5a         db  0x21 ; '!'
0000000000001b5b         db  0x00 ; '.'
0000000000001b5c         db  0x00 ; '.'
0000000000001b5d         db  0x00 ; '.'
0000000000001b5e         db  0x00 ; '.'
0000000000001b5f         db  0x00 ; '.'
0000000000001b60         db  0x07 ; '.'
0000000000001b61         db  0x00 ; '.'
0000000000001b62         db  0x00 ; '.'
0000000000001b63         db  0x00 ; '.'
0000000000001b64         db  0x25 ; '%'
0000000000001b65         db  0x00 ; '.'
0000000000001b66         db  0x00 ; '.'
0000000000001b67         db  0x00 ; '.'
0000000000001b68         db  0x00 ; '.'
0000000000001b69         db  0x00 ; '.'
0000000000001b6a         db  0x00 ; '.'
0000000000001b6b         db  0x00 ; '.'
0000000000001b6c         db  0x00 ; '.'
0000000000001b6d         db  0x00 ; '.'
0000000000001b6e         db  0x00 ; '.'
0000000000001b6f         db  0x00 ; '.'
0000000000001b70         db  0x40 ; '@'
0000000000001b71         db  0x3e ; '>'
0000000000001b72         db  0x21 ; '!'
0000000000001b73         db  0x00 ; '.'
0000000000001b74         db  0x00 ; '.'
0000000000001b75         db  0x00 ; '.'
0000000000001b76         db  0x00 ; '.'
0000000000001b77         db  0x00 ; '.'
0000000000001b78         db  0x07 ; '.'
0000000000001b79         db  0x00 ; '.'
0000000000001b7a         db  0x00 ; '.'
0000000000001b7b         db  0x00 ; '.'
0000000000001b7c         db  0x26 ; '&'
0000000000001b7d         db  0x00 ; '.'
0000000000001b7e         db  0x00 ; '.'
0000000000001b7f         db  0x00 ; '.'
0000000000001b80         db  0x00 ; '.'
0000000000001b81         db  0x00 ; '.'
0000000000001b82         db  0x00 ; '.'
0000000000001b83         db  0x00 ; '.'
0000000000001b84         db  0x00 ; '.'
0000000000001b85         db  0x00 ; '.'
0000000000001b86         db  0x00 ; '.'
0000000000001b87         db  0x00 ; '.'
0000000000001b88         db  0x48 ; 'H'
0000000000001b89         db  0x3e ; '>'
0000000000001b8a         db  0x21 ; '!'
0000000000001b8b         db  0x00 ; '.'
0000000000001b8c         db  0x00 ; '.'
0000000000001b8d         db  0x00 ; '.'
0000000000001b8e         db  0x00 ; '.'
0000000000001b8f         db  0x00 ; '.'
0000000000001b90         db  0x07 ; '.'
0000000000001b91         db  0x00 ; '.'
0000000000001b92         db  0x00 ; '.'
0000000000001b93         db  0x00 ; '.'
0000000000001b94         db  0x27 ; '''
0000000000001b95         db  0x00 ; '.'
0000000000001b96         db  0x00 ; '.'
0000000000001b97         db  0x00 ; '.'
0000000000001b98         db  0x00 ; '.'
0000000000001b99         db  0x00 ; '.'
0000000000001b9a         db  0x00 ; '.'
0000000000001b9b         db  0x00 ; '.'
0000000000001b9c         db  0x00 ; '.'
0000000000001b9d         db  0x00 ; '.'
0000000000001b9e         db  0x00 ; '.'
0000000000001b9f         db  0x00 ; '.'
0000000000001ba0         db  0x50 ; 'P'
0000000000001ba1         db  0x3e ; '>'
0000000000001ba2         db  0x21 ; '!'
0000000000001ba3         db  0x00 ; '.'
0000000000001ba4         db  0x00 ; '.'
0000000000001ba5         db  0x00 ; '.'
0000000000001ba6         db  0x00 ; '.'
0000000000001ba7         db  0x00 ; '.'
0000000000001ba8         db  0x07 ; '.'
0000000000001ba9         db  0x00 ; '.'
0000000000001baa         db  0x00 ; '.'
0000000000001bab         db  0x00 ; '.'
0000000000001bac         db  0x28 ; '('
0000000000001bad         db  0x00 ; '.'
0000000000001bae         db  0x00 ; '.'
0000000000001baf         db  0x00 ; '.'
0000000000001bb0         db  0x00 ; '.'
0000000000001bb1         db  0x00 ; '.'
0000000000001bb2         db  0x00 ; '.'
0000000000001bb3         db  0x00 ; '.'
0000000000001bb4         db  0x00 ; '.'
0000000000001bb5         db  0x00 ; '.'
0000000000001bb6         db  0x00 ; '.'
0000000000001bb7         db  0x00 ; '.'
0000000000001bb8         db  0x58 ; 'X'
0000000000001bb9         db  0x3e ; '>'
0000000000001bba         db  0x21 ; '!'
0000000000001bbb         db  0x00 ; '.'
0000000000001bbc         db  0x00 ; '.'
0000000000001bbd         db  0x00 ; '.'
0000000000001bbe         db  0x00 ; '.'
0000000000001bbf         db  0x00 ; '.'
0000000000001bc0         db  0x07 ; '.'
0000000000001bc1         db  0x00 ; '.'
0000000000001bc2         db  0x00 ; '.'
0000000000001bc3         db  0x00 ; '.'
0000000000001bc4         db  0x29 ; ')'
0000000000001bc5         db  0x00 ; '.'
0000000000001bc6         db  0x00 ; '.'
0000000000001bc7         db  0x00 ; '.'
0000000000001bc8         db  0x00 ; '.'
0000000000001bc9         db  0x00 ; '.'
0000000000001bca         db  0x00 ; '.'
0000000000001bcb         db  0x00 ; '.'
0000000000001bcc         db  0x00 ; '.'
0000000000001bcd         db  0x00 ; '.'
0000000000001bce         db  0x00 ; '.'
0000000000001bcf         db  0x00 ; '.'
0000000000001bd0         db  0x60 ; '`'
0000000000001bd1         db  0x3e ; '>'
0000000000001bd2         db  0x21 ; '!'
0000000000001bd3         db  0x00 ; '.'
0000000000001bd4         db  0x00 ; '.'
0000000000001bd5         db  0x00 ; '.'
0000000000001bd6         db  0x00 ; '.'
0000000000001bd7         db  0x00 ; '.'
0000000000001bd8         db  0x07 ; '.'
0000000000001bd9         db  0x00 ; '.'
0000000000001bda         db  0x00 ; '.'
0000000000001bdb         db  0x00 ; '.'
0000000000001bdc         db  0x2a ; '*'
0000000000001bdd         db  0x00 ; '.'
0000000000001bde         db  0x00 ; '.'
0000000000001bdf         db  0x00 ; '.'
0000000000001be0         db  0x00 ; '.'
0000000000001be1         db  0x00 ; '.'
0000000000001be2         db  0x00 ; '.'
0000000000001be3         db  0x00 ; '.'
0000000000001be4         db  0x00 ; '.'
0000000000001be5         db  0x00 ; '.'
0000000000001be6         db  0x00 ; '.'
0000000000001be7         db  0x00 ; '.'
0000000000001be8         db  0x68 ; 'h'
0000000000001be9         db  0x3e ; '>'
0000000000001bea         db  0x21 ; '!'
0000000000001beb         db  0x00 ; '.'
0000000000001bec         db  0x00 ; '.'
0000000000001bed         db  0x00 ; '.'
0000000000001bee         db  0x00 ; '.'
0000000000001bef         db  0x00 ; '.'
0000000000001bf0         db  0x07 ; '.'
0000000000001bf1         db  0x00 ; '.'
0000000000001bf2         db  0x00 ; '.'
0000000000001bf3         db  0x00 ; '.'
0000000000001bf4         db  0x2b ; '+'
0000000000001bf5         db  0x00 ; '.'
0000000000001bf6         db  0x00 ; '.'
0000000000001bf7         db  0x00 ; '.'
0000000000001bf8         db  0x00 ; '.'
0000000000001bf9         db  0x00 ; '.'
0000000000001bfa         db  0x00 ; '.'
0000000000001bfb         db  0x00 ; '.'
0000000000001bfc         db  0x00 ; '.'
0000000000001bfd         db  0x00 ; '.'
0000000000001bfe         db  0x00 ; '.'
0000000000001bff         db  0x00 ; '.'
0000000000001c00         db  0x70 ; 'p'
0000000000001c01         db  0x3e ; '>'
0000000000001c02         db  0x21 ; '!'
0000000000001c03         db  0x00 ; '.'
0000000000001c04         db  0x00 ; '.'
0000000000001c05         db  0x00 ; '.'
0000000000001c06         db  0x00 ; '.'
0000000000001c07         db  0x00 ; '.'
0000000000001c08         db  0x07 ; '.'
0000000000001c09         db  0x00 ; '.'
0000000000001c0a         db  0x00 ; '.'
0000000000001c0b         db  0x00 ; '.'
0000000000001c0c         db  0x2c ; ','
0000000000001c0d         db  0x00 ; '.'
0000000000001c0e         db  0x00 ; '.'
0000000000001c0f         db  0x00 ; '.'
0000000000001c10         db  0x00 ; '.'
0000000000001c11         db  0x00 ; '.'
0000000000001c12         db  0x00 ; '.'
0000000000001c13         db  0x00 ; '.'
0000000000001c14         db  0x00 ; '.'
0000000000001c15         db  0x00 ; '.'
0000000000001c16         db  0x00 ; '.'
0000000000001c17         db  0x00 ; '.'
0000000000001c18         db  0x78 ; 'x'
0000000000001c19         db  0x3e ; '>'
0000000000001c1a         db  0x21 ; '!'
0000000000001c1b         db  0x00 ; '.'
0000000000001c1c         db  0x00 ; '.'
0000000000001c1d         db  0x00 ; '.'
0000000000001c1e         db  0x00 ; '.'
0000000000001c1f         db  0x00 ; '.'
0000000000001c20         db  0x07 ; '.'
0000000000001c21         db  0x00 ; '.'
0000000000001c22         db  0x00 ; '.'
0000000000001c23         db  0x00 ; '.'
0000000000001c24         db  0x2e ; '.'
0000000000001c25         db  0x00 ; '.'
0000000000001c26         db  0x00 ; '.'
0000000000001c27         db  0x00 ; '.'
0000000000001c28         db  0x00 ; '.'
0000000000001c29         db  0x00 ; '.'
0000000000001c2a         db  0x00 ; '.'
0000000000001c2b         db  0x00 ; '.'
0000000000001c2c         db  0x00 ; '.'
0000000000001c2d         db  0x00 ; '.'
0000000000001c2e         db  0x00 ; '.'
0000000000001c2f         db  0x00 ; '.'
0000000000001c30         db  0x80 ; '.'
0000000000001c31         db  0x3e ; '>'
0000000000001c32         db  0x21 ; '!'
0000000000001c33         db  0x00 ; '.'
0000000000001c34         db  0x00 ; '.'
0000000000001c35         db  0x00 ; '.'
0000000000001c36         db  0x00 ; '.'
0000000000001c37         db  0x00 ; '.'
0000000000001c38         db  0x07 ; '.'
0000000000001c39         db  0x00 ; '.'
0000000000001c3a         db  0x00 ; '.'
0000000000001c3b         db  0x00 ; '.'
0000000000001c3c         db  0x2f ; '/'
0000000000001c3d         db  0x00 ; '.'
0000000000001c3e         db  0x00 ; '.'
0000000000001c3f         db  0x00 ; '.'
0000000000001c40         db  0x00 ; '.'
0000000000001c41         db  0x00 ; '.'
0000000000001c42         db  0x00 ; '.'
0000000000001c43         db  0x00 ; '.'
0000000000001c44         db  0x00 ; '.'
0000000000001c45         db  0x00 ; '.'
0000000000001c46         db  0x00 ; '.'
0000000000001c47         db  0x00 ; '.'
0000000000001c48         db  0x88 ; '.'
0000000000001c49         db  0x3e ; '>'
0000000000001c4a         db  0x21 ; '!'
0000000000001c4b         db  0x00 ; '.'
0000000000001c4c         db  0x00 ; '.'
0000000000001c4d         db  0x00 ; '.'
0000000000001c4e         db  0x00 ; '.'
0000000000001c4f         db  0x00 ; '.'
0000000000001c50         db  0x07 ; '.'
0000000000001c51         db  0x00 ; '.'
0000000000001c52         db  0x00 ; '.'
0000000000001c53         db  0x00 ; '.'
0000000000001c54         db  0x30 ; '0'
0000000000001c55         db  0x00 ; '.'
0000000000001c56         db  0x00 ; '.'
0000000000001c57         db  0x00 ; '.'
0000000000001c58         db  0x00 ; '.'
0000000000001c59         db  0x00 ; '.'
0000000000001c5a         db  0x00 ; '.'
0000000000001c5b         db  0x00 ; '.'
0000000000001c5c         db  0x00 ; '.'
0000000000001c5d         db  0x00 ; '.'
0000000000001c5e         db  0x00 ; '.'
0000000000001c5f         db  0x00 ; '.'
0000000000001c60         db  0x90 ; '.'
0000000000001c61         db  0x3e ; '>'
0000000000001c62         db  0x21 ; '!'
0000000000001c63         db  0x00 ; '.'
0000000000001c64         db  0x00 ; '.'
0000000000001c65         db  0x00 ; '.'
0000000000001c66         db  0x00 ; '.'
0000000000001c67         db  0x00 ; '.'
0000000000001c68         db  0x07 ; '.'
0000000000001c69         db  0x00 ; '.'
0000000000001c6a         db  0x00 ; '.'
0000000000001c6b         db  0x00 ; '.'
0000000000001c6c         db  0x31 ; '1'
0000000000001c6d         db  0x00 ; '.'
0000000000001c6e         db  0x00 ; '.'
0000000000001c6f         db  0x00 ; '.'
0000000000001c70         db  0x00 ; '.'
0000000000001c71         db  0x00 ; '.'
0000000000001c72         db  0x00 ; '.'
0000000000001c73         db  0x00 ; '.'
0000000000001c74         db  0x00 ; '.'
0000000000001c75         db  0x00 ; '.'
0000000000001c76         db  0x00 ; '.'
0000000000001c77         db  0x00 ; '.'
0000000000001c78         db  0x98 ; '.'
0000000000001c79         db  0x3e ; '>'
0000000000001c7a         db  0x21 ; '!'
0000000000001c7b         db  0x00 ; '.'
0000000000001c7c         db  0x00 ; '.'
0000000000001c7d         db  0x00 ; '.'
0000000000001c7e         db  0x00 ; '.'
0000000000001c7f         db  0x00 ; '.'
0000000000001c80         db  0x07 ; '.'
0000000000001c81         db  0x00 ; '.'
0000000000001c82         db  0x00 ; '.'
0000000000001c83         db  0x00 ; '.'
0000000000001c84         db  0x32 ; '2'
0000000000001c85         db  0x00 ; '.'
0000000000001c86         db  0x00 ; '.'
0000000000001c87         db  0x00 ; '.'
0000000000001c88         db  0x00 ; '.'
0000000000001c89         db  0x00 ; '.'
0000000000001c8a         db  0x00 ; '.'
0000000000001c8b         db  0x00 ; '.'
0000000000001c8c         db  0x00 ; '.'
0000000000001c8d         db  0x00 ; '.'
0000000000001c8e         db  0x00 ; '.'
0000000000001c8f         db  0x00 ; '.'
0000000000001c90         db  0xa0 ; '.'
0000000000001c91         db  0x3e ; '>'
0000000000001c92         db  0x21 ; '!'
0000000000001c93         db  0x00 ; '.'
0000000000001c94         db  0x00 ; '.'
0000000000001c95         db  0x00 ; '.'
0000000000001c96         db  0x00 ; '.'
0000000000001c97         db  0x00 ; '.'
0000000000001c98         db  0x07 ; '.'
0000000000001c99         db  0x00 ; '.'
0000000000001c9a         db  0x00 ; '.'
0000000000001c9b         db  0x00 ; '.'
0000000000001c9c         db  0x33 ; '3'
0000000000001c9d         db  0x00 ; '.'
0000000000001c9e         db  0x00 ; '.'
0000000000001c9f         db  0x00 ; '.'
0000000000001ca0         db  0x00 ; '.'
0000000000001ca1         db  0x00 ; '.'
0000000000001ca2         db  0x00 ; '.'
0000000000001ca3         db  0x00 ; '.'
0000000000001ca4         db  0x00 ; '.'
0000000000001ca5         db  0x00 ; '.'
0000000000001ca6         db  0x00 ; '.'
0000000000001ca7         db  0x00 ; '.'
0000000000001ca8         db  0xa8 ; '.'
0000000000001ca9         db  0x3e ; '>'
0000000000001caa         db  0x21 ; '!'
0000000000001cab         db  0x00 ; '.'
0000000000001cac         db  0x00 ; '.'
0000000000001cad         db  0x00 ; '.'
0000000000001cae         db  0x00 ; '.'
0000000000001caf         db  0x00 ; '.'
0000000000001cb0         db  0x07 ; '.'
0000000000001cb1         db  0x00 ; '.'
0000000000001cb2         db  0x00 ; '.'
0000000000001cb3         db  0x00 ; '.'
0000000000001cb4         db  0x35 ; '5'
0000000000001cb5         db  0x00 ; '.'
0000000000001cb6         db  0x00 ; '.'
0000000000001cb7         db  0x00 ; '.'
0000000000001cb8         db  0x00 ; '.'
0000000000001cb9         db  0x00 ; '.'
0000000000001cba         db  0x00 ; '.'
0000000000001cbb         db  0x00 ; '.'
0000000000001cbc         db  0x00 ; '.'
0000000000001cbd         db  0x00 ; '.'
0000000000001cbe         db  0x00 ; '.'
0000000000001cbf         db  0x00 ; '.'
0000000000001cc0         db  0xb0 ; '.'
0000000000001cc1         db  0x3e ; '>'
0000000000001cc2         db  0x21 ; '!'
0000000000001cc3         db  0x00 ; '.'
0000000000001cc4         db  0x00 ; '.'
0000000000001cc5         db  0x00 ; '.'
0000000000001cc6         db  0x00 ; '.'
0000000000001cc7         db  0x00 ; '.'
0000000000001cc8         db  0x07 ; '.'
0000000000001cc9         db  0x00 ; '.'
0000000000001cca         db  0x00 ; '.'
0000000000001ccb         db  0x00 ; '.'
0000000000001ccc         db  0x36 ; '6'
0000000000001ccd         db  0x00 ; '.'
0000000000001cce         db  0x00 ; '.'
0000000000001ccf         db  0x00 ; '.'
0000000000001cd0         db  0x00 ; '.'
0000000000001cd1         db  0x00 ; '.'
0000000000001cd2         db  0x00 ; '.'
0000000000001cd3         db  0x00 ; '.'
0000000000001cd4         db  0x00 ; '.'
0000000000001cd5         db  0x00 ; '.'
0000000000001cd6         db  0x00 ; '.'
0000000000001cd7         db  0x00 ; '.'
0000000000001cd8         db  0xb8 ; '.'
0000000000001cd9         db  0x3e ; '>'
0000000000001cda         db  0x21 ; '!'
0000000000001cdb         db  0x00 ; '.'
0000000000001cdc         db  0x00 ; '.'
0000000000001cdd         db  0x00 ; '.'
0000000000001cde         db  0x00 ; '.'
0000000000001cdf         db  0x00 ; '.'
0000000000001ce0         db  0x07 ; '.'
0000000000001ce1         db  0x00 ; '.'
0000000000001ce2         db  0x00 ; '.'
0000000000001ce3         db  0x00 ; '.'
0000000000001ce4         db  0x37 ; '7'
0000000000001ce5         db  0x00 ; '.'
0000000000001ce6         db  0x00 ; '.'
0000000000001ce7         db  0x00 ; '.'
0000000000001ce8         db  0x00 ; '.'
0000000000001ce9         db  0x00 ; '.'
0000000000001cea         db  0x00 ; '.'
0000000000001ceb         db  0x00 ; '.'
0000000000001cec         db  0x00 ; '.'
0000000000001ced         db  0x00 ; '.'
0000000000001cee         db  0x00 ; '.'
0000000000001cef         db  0x00 ; '.'
0000000000001cf0         db  0xc0 ; '.'
0000000000001cf1         db  0x3e ; '>'
0000000000001cf2         db  0x21 ; '!'
0000000000001cf3         db  0x00 ; '.'
0000000000001cf4         db  0x00 ; '.'
0000000000001cf5         db  0x00 ; '.'
0000000000001cf6         db  0x00 ; '.'
0000000000001cf7         db  0x00 ; '.'
0000000000001cf8         db  0x07 ; '.'
0000000000001cf9         db  0x00 ; '.'
0000000000001cfa         db  0x00 ; '.'
0000000000001cfb         db  0x00 ; '.'
0000000000001cfc         db  0x38 ; '8'
0000000000001cfd         db  0x00 ; '.'
0000000000001cfe         db  0x00 ; '.'
0000000000001cff         db  0x00 ; '.'
0000000000001d00         db  0x00 ; '.'
0000000000001d01         db  0x00 ; '.'
0000000000001d02         db  0x00 ; '.'
0000000000001d03         db  0x00 ; '.'
0000000000001d04         db  0x00 ; '.'
0000000000001d05         db  0x00 ; '.'
0000000000001d06         db  0x00 ; '.'
0000000000001d07         db  0x00 ; '.'
0000000000001d08         db  0xc8 ; '.'
0000000000001d09         db  0x3e ; '>'
0000000000001d0a         db  0x21 ; '!'
0000000000001d0b         db  0x00 ; '.'
0000000000001d0c         db  0x00 ; '.'
0000000000001d0d         db  0x00 ; '.'
0000000000001d0e         db  0x00 ; '.'
0000000000001d0f         db  0x00 ; '.'
0000000000001d10         db  0x07 ; '.'
0000000000001d11         db  0x00 ; '.'
0000000000001d12         db  0x00 ; '.'
0000000000001d13         db  0x00 ; '.'
0000000000001d14         db  0x39 ; '9'
0000000000001d15         db  0x00 ; '.'
0000000000001d16         db  0x00 ; '.'
0000000000001d17         db  0x00 ; '.'
0000000000001d18         db  0x00 ; '.'
0000000000001d19         db  0x00 ; '.'
0000000000001d1a         db  0x00 ; '.'
0000000000001d1b         db  0x00 ; '.'
0000000000001d1c         db  0x00 ; '.'
0000000000001d1d         db  0x00 ; '.'
0000000000001d1e         db  0x00 ; '.'
0000000000001d1f         db  0x00 ; '.'
0000000000001d20         db  0xd0 ; '.'
0000000000001d21         db  0x3e ; '>'
0000000000001d22         db  0x21 ; '!'
0000000000001d23         db  0x00 ; '.'
0000000000001d24         db  0x00 ; '.'
0000000000001d25         db  0x00 ; '.'
0000000000001d26         db  0x00 ; '.'
0000000000001d27         db  0x00 ; '.'
0000000000001d28         db  0x07 ; '.'
0000000000001d29         db  0x00 ; '.'
0000000000001d2a         db  0x00 ; '.'
0000000000001d2b         db  0x00 ; '.'
0000000000001d2c         db  0x3a ; ':'
0000000000001d2d         db  0x00 ; '.'
0000000000001d2e         db  0x00 ; '.'
0000000000001d2f         db  0x00 ; '.'
0000000000001d30         db  0x00 ; '.'
0000000000001d31         db  0x00 ; '.'
0000000000001d32         db  0x00 ; '.'
0000000000001d33         db  0x00 ; '.'
0000000000001d34         db  0x00 ; '.'
0000000000001d35         db  0x00 ; '.'
0000000000001d36         db  0x00 ; '.'
0000000000001d37         db  0x00 ; '.'
0000000000001d38         db  0xd8 ; '.'
0000000000001d39         db  0x3e ; '>'
0000000000001d3a         db  0x21 ; '!'
0000000000001d3b         db  0x00 ; '.'
0000000000001d3c         db  0x00 ; '.'
0000000000001d3d         db  0x00 ; '.'
0000000000001d3e         db  0x00 ; '.'
0000000000001d3f         db  0x00 ; '.'
0000000000001d40         db  0x07 ; '.'
0000000000001d41         db  0x00 ; '.'
0000000000001d42         db  0x00 ; '.'
0000000000001d43         db  0x00 ; '.'
0000000000001d44         db  0x3b ; ';'
0000000000001d45         db  0x00 ; '.'
0000000000001d46         db  0x00 ; '.'
0000000000001d47         db  0x00 ; '.'
0000000000001d48         db  0x00 ; '.'
0000000000001d49         db  0x00 ; '.'
0000000000001d4a         db  0x00 ; '.'
0000000000001d4b         db  0x00 ; '.'
0000000000001d4c         db  0x00 ; '.'
0000000000001d4d         db  0x00 ; '.'
0000000000001d4e         db  0x00 ; '.'
0000000000001d4f         db  0x00 ; '.'
0000000000001d50         db  0xe0 ; '.'
0000000000001d51         db  0x3e ; '>'
0000000000001d52         db  0x21 ; '!'
0000000000001d53         db  0x00 ; '.'
0000000000001d54         db  0x00 ; '.'
0000000000001d55         db  0x00 ; '.'
0000000000001d56         db  0x00 ; '.'
0000000000001d57         db  0x00 ; '.'
0000000000001d58         db  0x07 ; '.'
0000000000001d59         db  0x00 ; '.'
0000000000001d5a         db  0x00 ; '.'
0000000000001d5b         db  0x00 ; '.'
0000000000001d5c         db  0x3c ; '<'
0000000000001d5d         db  0x00 ; '.'
0000000000001d5e         db  0x00 ; '.'
0000000000001d5f         db  0x00 ; '.'
0000000000001d60         db  0x00 ; '.'
0000000000001d61         db  0x00 ; '.'
0000000000001d62         db  0x00 ; '.'
0000000000001d63         db  0x00 ; '.'
0000000000001d64         db  0x00 ; '.'
0000000000001d65         db  0x00 ; '.'
0000000000001d66         db  0x00 ; '.'
0000000000001d67         db  0x00 ; '.'
0000000000001d68         db  0xe8 ; '.'
0000000000001d69         db  0x3e ; '>'
0000000000001d6a         db  0x21 ; '!'
0000000000001d6b         db  0x00 ; '.'
0000000000001d6c         db  0x00 ; '.'
0000000000001d6d         db  0x00 ; '.'
0000000000001d6e         db  0x00 ; '.'
0000000000001d6f         db  0x00 ; '.'
0000000000001d70         db  0x07 ; '.'
0000000000001d71         db  0x00 ; '.'
0000000000001d72         db  0x00 ; '.'
0000000000001d73         db  0x00 ; '.'
0000000000001d74         db  0x3d ; '='
0000000000001d75         db  0x00 ; '.'
0000000000001d76         db  0x00 ; '.'
0000000000001d77         db  0x00 ; '.'
0000000000001d78         db  0x00 ; '.'
0000000000001d79         db  0x00 ; '.'
0000000000001d7a         db  0x00 ; '.'
0000000000001d7b         db  0x00 ; '.'
0000000000001d7c         db  0x00 ; '.'
0000000000001d7d         db  0x00 ; '.'
0000000000001d7e         db  0x00 ; '.'
0000000000001d7f         db  0x00 ; '.'
0000000000001d80         db  0xf0 ; '.'
0000000000001d81         db  0x3e ; '>'
0000000000001d82         db  0x21 ; '!'
0000000000001d83         db  0x00 ; '.'
0000000000001d84         db  0x00 ; '.'
0000000000001d85         db  0x00 ; '.'
0000000000001d86         db  0x00 ; '.'
0000000000001d87         db  0x00 ; '.'
0000000000001d88         db  0x07 ; '.'
0000000000001d89         db  0x00 ; '.'
0000000000001d8a         db  0x00 ; '.'
0000000000001d8b         db  0x00 ; '.'
0000000000001d8c         db  0x3e ; '>'
0000000000001d8d         db  0x00 ; '.'
0000000000001d8e         db  0x00 ; '.'
0000000000001d8f         db  0x00 ; '.'
0000000000001d90         db  0x00 ; '.'
0000000000001d91         db  0x00 ; '.'
0000000000001d92         db  0x00 ; '.'
0000000000001d93         db  0x00 ; '.'
0000000000001d94         db  0x00 ; '.'
0000000000001d95         db  0x00 ; '.'
0000000000001d96         db  0x00 ; '.'
0000000000001d97         db  0x00 ; '.'
0000000000001d98         db  0xf8 ; '.'
0000000000001d99         db  0x3e ; '>'
0000000000001d9a         db  0x21 ; '!'
0000000000001d9b         db  0x00 ; '.'
0000000000001d9c         db  0x00 ; '.'
0000000000001d9d         db  0x00 ; '.'
0000000000001d9e         db  0x00 ; '.'
0000000000001d9f         db  0x00 ; '.'
0000000000001da0         db  0x07 ; '.'
0000000000001da1         db  0x00 ; '.'
0000000000001da2         db  0x00 ; '.'
0000000000001da3         db  0x00 ; '.'
0000000000001da4         db  0x3f ; '?'
0000000000001da5         db  0x00 ; '.'
0000000000001da6         db  0x00 ; '.'
0000000000001da7         db  0x00 ; '.'
0000000000001da8         db  0x00 ; '.'
0000000000001da9         db  0x00 ; '.'
0000000000001daa         db  0x00 ; '.'
0000000000001dab         db  0x00 ; '.'
0000000000001dac         db  0x00 ; '.'
0000000000001dad         db  0x00 ; '.'
0000000000001dae         db  0x00 ; '.'
0000000000001daf         db  0x00 ; '.'
0000000000001db0         db  0x00 ; '.'
0000000000001db1         db  0x3f ; '?'
0000000000001db2         db  0x21 ; '!'
0000000000001db3         db  0x00 ; '.'
0000000000001db4         db  0x00 ; '.'
0000000000001db5         db  0x00 ; '.'
0000000000001db6         db  0x00 ; '.'
0000000000001db7         db  0x00 ; '.'
0000000000001db8         db  0x07 ; '.'
0000000000001db9         db  0x00 ; '.'
0000000000001dba         db  0x00 ; '.'
0000000000001dbb         db  0x00 ; '.'
0000000000001dbc         db  0x40 ; '@'
0000000000001dbd         db  0x00 ; '.'
0000000000001dbe         db  0x00 ; '.'
0000000000001dbf         db  0x00 ; '.'
0000000000001dc0         db  0x00 ; '.'
0000000000001dc1         db  0x00 ; '.'
0000000000001dc2         db  0x00 ; '.'
0000000000001dc3         db  0x00 ; '.'
0000000000001dc4         db  0x00 ; '.'
0000000000001dc5         db  0x00 ; '.'
0000000000001dc6         db  0x00 ; '.'
0000000000001dc7         db  0x00 ; '.'
0000000000001dc8         db  0x08 ; '.'
0000000000001dc9         db  0x3f ; '?'
0000000000001dca         db  0x21 ; '!'
0000000000001dcb         db  0x00 ; '.'
0000000000001dcc         db  0x00 ; '.'
0000000000001dcd         db  0x00 ; '.'
0000000000001dce         db  0x00 ; '.'
0000000000001dcf         db  0x00 ; '.'
0000000000001dd0         db  0x07 ; '.'
0000000000001dd1         db  0x00 ; '.'
0000000000001dd2         db  0x00 ; '.'
0000000000001dd3         db  0x00 ; '.'
0000000000001dd4         db  0x41 ; 'A'
0000000000001dd5         db  0x00 ; '.'
0000000000001dd6         db  0x00 ; '.'
0000000000001dd7         db  0x00 ; '.'
0000000000001dd8         db  0x00 ; '.'
0000000000001dd9         db  0x00 ; '.'
0000000000001dda         db  0x00 ; '.'
0000000000001ddb         db  0x00 ; '.'
0000000000001ddc         db  0x00 ; '.'
0000000000001ddd         db  0x00 ; '.'
0000000000001dde         db  0x00 ; '.'
0000000000001ddf         db  0x00 ; '.'
0000000000001de0         db  0x10 ; '.'
0000000000001de1         db  0x3f ; '?'
0000000000001de2         db  0x21 ; '!'
0000000000001de3         db  0x00 ; '.'
0000000000001de4         db  0x00 ; '.'
0000000000001de5         db  0x00 ; '.'
0000000000001de6         db  0x00 ; '.'
0000000000001de7         db  0x00 ; '.'
0000000000001de8         db  0x07 ; '.'
0000000000001de9         db  0x00 ; '.'
0000000000001dea         db  0x00 ; '.'
0000000000001deb         db  0x00 ; '.'
0000000000001dec         db  0x42 ; 'B'
0000000000001ded         db  0x00 ; '.'
0000000000001dee         db  0x00 ; '.'
0000000000001def         db  0x00 ; '.'
0000000000001df0         db  0x00 ; '.'
0000000000001df1         db  0x00 ; '.'
0000000000001df2         db  0x00 ; '.'
0000000000001df3         db  0x00 ; '.'
0000000000001df4         db  0x00 ; '.'
0000000000001df5         db  0x00 ; '.'
0000000000001df6         db  0x00 ; '.'
0000000000001df7         db  0x00 ; '.'
0000000000001df8         db  0x18 ; '.'
0000000000001df9         db  0x3f ; '?'
0000000000001dfa         db  0x21 ; '!'
0000000000001dfb         db  0x00 ; '.'
0000000000001dfc         db  0x00 ; '.'
0000000000001dfd         db  0x00 ; '.'
0000000000001dfe         db  0x00 ; '.'
0000000000001dff         db  0x00 ; '.'
0000000000001e00         db  0x07 ; '.'
0000000000001e01         db  0x00 ; '.'
0000000000001e02         db  0x00 ; '.'
0000000000001e03         db  0x00 ; '.'
0000000000001e04         db  0x43 ; 'C'
0000000000001e05         db  0x00 ; '.'
0000000000001e06         db  0x00 ; '.'
0000000000001e07         db  0x00 ; '.'
0000000000001e08         db  0x00 ; '.'
0000000000001e09         db  0x00 ; '.'
0000000000001e0a         db  0x00 ; '.'
0000000000001e0b         db  0x00 ; '.'
0000000000001e0c         db  0x00 ; '.'
0000000000001e0d         db  0x00 ; '.'
0000000000001e0e         db  0x00 ; '.'
0000000000001e0f         db  0x00 ; '.'
0000000000001e10         db  0x20 ; ' '
0000000000001e11         db  0x3f ; '?'
0000000000001e12         db  0x21 ; '!'
0000000000001e13         db  0x00 ; '.'
0000000000001e14         db  0x00 ; '.'
0000000000001e15         db  0x00 ; '.'
0000000000001e16         db  0x00 ; '.'
0000000000001e17         db  0x00 ; '.'
0000000000001e18         db  0x07 ; '.'
0000000000001e19         db  0x00 ; '.'
0000000000001e1a         db  0x00 ; '.'
0000000000001e1b         db  0x00 ; '.'
0000000000001e1c         db  0x44 ; 'D'
0000000000001e1d         db  0x00 ; '.'
0000000000001e1e         db  0x00 ; '.'
0000000000001e1f         db  0x00 ; '.'
0000000000001e20         db  0x00 ; '.'
0000000000001e21         db  0x00 ; '.'
0000000000001e22         db  0x00 ; '.'
0000000000001e23         db  0x00 ; '.'
0000000000001e24         db  0x00 ; '.'
0000000000001e25         db  0x00 ; '.'
0000000000001e26         db  0x00 ; '.'
0000000000001e27         db  0x00 ; '.'
0000000000001e28         db  0x28 ; '('
0000000000001e29         db  0x3f ; '?'
0000000000001e2a         db  0x21 ; '!'
0000000000001e2b         db  0x00 ; '.'
0000000000001e2c         db  0x00 ; '.'
0000000000001e2d         db  0x00 ; '.'
0000000000001e2e         db  0x00 ; '.'
0000000000001e2f         db  0x00 ; '.'
0000000000001e30         db  0x07 ; '.'
0000000000001e31         db  0x00 ; '.'
0000000000001e32         db  0x00 ; '.'
0000000000001e33         db  0x00 ; '.'
0000000000001e34         db  0x45 ; 'E'
0000000000001e35         db  0x00 ; '.'
0000000000001e36         db  0x00 ; '.'
0000000000001e37         db  0x00 ; '.'
0000000000001e38         db  0x00 ; '.'
0000000000001e39         db  0x00 ; '.'
0000000000001e3a         db  0x00 ; '.'
0000000000001e3b         db  0x00 ; '.'
0000000000001e3c         db  0x00 ; '.'
0000000000001e3d         db  0x00 ; '.'
0000000000001e3e         db  0x00 ; '.'
0000000000001e3f         db  0x00 ; '.'
0000000000001e40         db  0x30 ; '0'
0000000000001e41         db  0x3f ; '?'
0000000000001e42         db  0x21 ; '!'
0000000000001e43         db  0x00 ; '.'
0000000000001e44         db  0x00 ; '.'
0000000000001e45         db  0x00 ; '.'
0000000000001e46         db  0x00 ; '.'
0000000000001e47         db  0x00 ; '.'
0000000000001e48         db  0x07 ; '.'
0000000000001e49         db  0x00 ; '.'
0000000000001e4a         db  0x00 ; '.'
0000000000001e4b         db  0x00 ; '.'
0000000000001e4c         db  0x46 ; 'F'
0000000000001e4d         db  0x00 ; '.'
0000000000001e4e         db  0x00 ; '.'
0000000000001e4f         db  0x00 ; '.'
0000000000001e50         db  0x00 ; '.'
0000000000001e51         db  0x00 ; '.'
0000000000001e52         db  0x00 ; '.'
0000000000001e53         db  0x00 ; '.'
0000000000001e54         db  0x00 ; '.'
0000000000001e55         db  0x00 ; '.'
0000000000001e56         db  0x00 ; '.'
0000000000001e57         db  0x00 ; '.'
0000000000001e58         db  0x38 ; '8'
0000000000001e59         db  0x3f ; '?'
0000000000001e5a         db  0x21 ; '!'
0000000000001e5b         db  0x00 ; '.'
0000000000001e5c         db  0x00 ; '.'
0000000000001e5d         db  0x00 ; '.'
0000000000001e5e         db  0x00 ; '.'
0000000000001e5f         db  0x00 ; '.'
0000000000001e60         db  0x07 ; '.'
0000000000001e61         db  0x00 ; '.'
0000000000001e62         db  0x00 ; '.'
0000000000001e63         db  0x00 ; '.'
0000000000001e64         db  0x47 ; 'G'
0000000000001e65         db  0x00 ; '.'
0000000000001e66         db  0x00 ; '.'
0000000000001e67         db  0x00 ; '.'
0000000000001e68         db  0x00 ; '.'
0000000000001e69         db  0x00 ; '.'
0000000000001e6a         db  0x00 ; '.'
0000000000001e6b         db  0x00 ; '.'
0000000000001e6c         db  0x00 ; '.'
0000000000001e6d         db  0x00 ; '.'
0000000000001e6e         db  0x00 ; '.'
0000000000001e6f         db  0x00 ; '.'
0000000000001e70         db  0x40 ; '@'
0000000000001e71         db  0x3f ; '?'
0000000000001e72         db  0x21 ; '!'
0000000000001e73         db  0x00 ; '.'
0000000000001e74         db  0x00 ; '.'
0000000000001e75         db  0x00 ; '.'
0000000000001e76         db  0x00 ; '.'
0000000000001e77         db  0x00 ; '.'
0000000000001e78         db  0x07 ; '.'
0000000000001e79         db  0x00 ; '.'
0000000000001e7a         db  0x00 ; '.'
0000000000001e7b         db  0x00 ; '.'
0000000000001e7c         db  0x48 ; 'H'
0000000000001e7d         db  0x00 ; '.'
0000000000001e7e         db  0x00 ; '.'
0000000000001e7f         db  0x00 ; '.'
0000000000001e80         db  0x00 ; '.'
0000000000001e81         db  0x00 ; '.'
0000000000001e82         db  0x00 ; '.'
0000000000001e83         db  0x00 ; '.'
0000000000001e84         db  0x00 ; '.'
0000000000001e85         db  0x00 ; '.'
0000000000001e86         db  0x00 ; '.'
0000000000001e87         db  0x00 ; '.'
0000000000001e88         db  0x48 ; 'H'
0000000000001e89         db  0x3f ; '?'
0000000000001e8a         db  0x21 ; '!'
0000000000001e8b         db  0x00 ; '.'
0000000000001e8c         db  0x00 ; '.'
0000000000001e8d         db  0x00 ; '.'
0000000000001e8e         db  0x00 ; '.'
0000000000001e8f         db  0x00 ; '.'
0000000000001e90         db  0x07 ; '.'
0000000000001e91         db  0x00 ; '.'
0000000000001e92         db  0x00 ; '.'
0000000000001e93         db  0x00 ; '.'
0000000000001e94         db  0x49 ; 'I'
0000000000001e95         db  0x00 ; '.'
0000000000001e96         db  0x00 ; '.'
0000000000001e97         db  0x00 ; '.'
0000000000001e98         db  0x00 ; '.'
0000000000001e99         db  0x00 ; '.'
0000000000001e9a         db  0x00 ; '.'
0000000000001e9b         db  0x00 ; '.'
0000000000001e9c         db  0x00 ; '.'
0000000000001e9d         db  0x00 ; '.'
0000000000001e9e         db  0x00 ; '.'
0000000000001e9f         db  0x00 ; '.'
0000000000001ea0         db  0x50 ; 'P'
0000000000001ea1         db  0x3f ; '?'
0000000000001ea2         db  0x21 ; '!'
0000000000001ea3         db  0x00 ; '.'
0000000000001ea4         db  0x00 ; '.'
0000000000001ea5         db  0x00 ; '.'
0000000000001ea6         db  0x00 ; '.'
0000000000001ea7         db  0x00 ; '.'
0000000000001ea8         db  0x07 ; '.'
0000000000001ea9         db  0x00 ; '.'
0000000000001eaa         db  0x00 ; '.'
0000000000001eab         db  0x00 ; '.'
0000000000001eac         db  0x4a ; 'J'
0000000000001ead         db  0x00 ; '.'
0000000000001eae         db  0x00 ; '.'
0000000000001eaf         db  0x00 ; '.'
0000000000001eb0         db  0x00 ; '.'
0000000000001eb1         db  0x00 ; '.'
0000000000001eb2         db  0x00 ; '.'
0000000000001eb3         db  0x00 ; '.'
0000000000001eb4         db  0x00 ; '.'
0000000000001eb5         db  0x00 ; '.'
0000000000001eb6         db  0x00 ; '.'
0000000000001eb7         db  0x00 ; '.'
0000000000001eb8         db  0x58 ; 'X'
0000000000001eb9         db  0x3f ; '?'
0000000000001eba         db  0x21 ; '!'
0000000000001ebb         db  0x00 ; '.'
0000000000001ebc         db  0x00 ; '.'
0000000000001ebd         db  0x00 ; '.'
0000000000001ebe         db  0x00 ; '.'
0000000000001ebf         db  0x00 ; '.'
0000000000001ec0         db  0x07 ; '.'
0000000000001ec1         db  0x00 ; '.'
0000000000001ec2         db  0x00 ; '.'
0000000000001ec3         db  0x00 ; '.'
0000000000001ec4         db  0x4b ; 'K'
0000000000001ec5         db  0x00 ; '.'
0000000000001ec6         db  0x00 ; '.'
0000000000001ec7         db  0x00 ; '.'
0000000000001ec8         db  0x00 ; '.'
0000000000001ec9         db  0x00 ; '.'
0000000000001eca         db  0x00 ; '.'
0000000000001ecb         db  0x00 ; '.'
0000000000001ecc         db  0x00 ; '.'
0000000000001ecd         db  0x00 ; '.'
0000000000001ece         db  0x00 ; '.'
0000000000001ecf         db  0x00 ; '.'
0000000000001ed0         db  0x60 ; '`'
0000000000001ed1         db  0x3f ; '?'
0000000000001ed2         db  0x21 ; '!'
0000000000001ed3         db  0x00 ; '.'
0000000000001ed4         db  0x00 ; '.'
0000000000001ed5         db  0x00 ; '.'
0000000000001ed6         db  0x00 ; '.'
0000000000001ed7         db  0x00 ; '.'
0000000000001ed8         db  0x07 ; '.'
0000000000001ed9         db  0x00 ; '.'
0000000000001eda         db  0x00 ; '.'
0000000000001edb         db  0x00 ; '.'
0000000000001edc         db  0x4c ; 'L'
0000000000001edd         db  0x00 ; '.'
0000000000001ede         db  0x00 ; '.'
0000000000001edf         db  0x00 ; '.'
0000000000001ee0         db  0x00 ; '.'
0000000000001ee1         db  0x00 ; '.'
0000000000001ee2         db  0x00 ; '.'
0000000000001ee3         db  0x00 ; '.'
0000000000001ee4         db  0x00 ; '.'
0000000000001ee5         db  0x00 ; '.'
0000000000001ee6         db  0x00 ; '.'
0000000000001ee7         db  0x00 ; '.'
0000000000001ee8         db  0x68 ; 'h'
0000000000001ee9         db  0x3f ; '?'
0000000000001eea         db  0x21 ; '!'
0000000000001eeb         db  0x00 ; '.'
0000000000001eec         db  0x00 ; '.'
0000000000001eed         db  0x00 ; '.'
0000000000001eee         db  0x00 ; '.'
0000000000001eef         db  0x00 ; '.'
0000000000001ef0         db  0x07 ; '.'
0000000000001ef1         db  0x00 ; '.'
0000000000001ef2         db  0x00 ; '.'
0000000000001ef3         db  0x00 ; '.'
0000000000001ef4         db  0x4d ; 'M'
0000000000001ef5         db  0x00 ; '.'
0000000000001ef6         db  0x00 ; '.'
0000000000001ef7         db  0x00 ; '.'
0000000000001ef8         db  0x00 ; '.'
0000000000001ef9         db  0x00 ; '.'
0000000000001efa         db  0x00 ; '.'
0000000000001efb         db  0x00 ; '.'
0000000000001efc         db  0x00 ; '.'
0000000000001efd         db  0x00 ; '.'
0000000000001efe         db  0x00 ; '.'
0000000000001eff         db  0x00 ; '.'
0000000000001f00         db  0x70 ; 'p'
0000000000001f01         db  0x3f ; '?'
0000000000001f02         db  0x21 ; '!'
0000000000001f03         db  0x00 ; '.'
0000000000001f04         db  0x00 ; '.'
0000000000001f05         db  0x00 ; '.'
0000000000001f06         db  0x00 ; '.'
0000000000001f07         db  0x00 ; '.'
0000000000001f08         db  0x07 ; '.'
0000000000001f09         db  0x00 ; '.'
0000000000001f0a         db  0x00 ; '.'
0000000000001f0b         db  0x00 ; '.'
0000000000001f0c         db  0x4e ; 'N'
0000000000001f0d         db  0x00 ; '.'
0000000000001f0e         db  0x00 ; '.'
0000000000001f0f         db  0x00 ; '.'
0000000000001f10         db  0x00 ; '.'
0000000000001f11         db  0x00 ; '.'
0000000000001f12         db  0x00 ; '.'
0000000000001f13         db  0x00 ; '.'
0000000000001f14         db  0x00 ; '.'
0000000000001f15         db  0x00 ; '.'
0000000000001f16         db  0x00 ; '.'
0000000000001f17         db  0x00 ; '.'
0000000000001f18         db  0x78 ; 'x'
0000000000001f19         db  0x3f ; '?'
0000000000001f1a         db  0x21 ; '!'
0000000000001f1b         db  0x00 ; '.'
0000000000001f1c         db  0x00 ; '.'
0000000000001f1d         db  0x00 ; '.'
0000000000001f1e         db  0x00 ; '.'
0000000000001f1f         db  0x00 ; '.'
0000000000001f20         db  0x07 ; '.'
0000000000001f21         db  0x00 ; '.'
0000000000001f22         db  0x00 ; '.'
0000000000001f23         db  0x00 ; '.'
0000000000001f24         db  0x4f ; 'O'
0000000000001f25         db  0x00 ; '.'
0000000000001f26         db  0x00 ; '.'
0000000000001f27         db  0x00 ; '.'
0000000000001f28         db  0x00 ; '.'
0000000000001f29         db  0x00 ; '.'
0000000000001f2a         db  0x00 ; '.'
0000000000001f2b         db  0x00 ; '.'
0000000000001f2c         db  0x00 ; '.'
0000000000001f2d         db  0x00 ; '.'
0000000000001f2e         db  0x00 ; '.'
0000000000001f2f         db  0x00 ; '.'
0000000000001f30         db  0x80 ; '.'
0000000000001f31         db  0x3f ; '?'
0000000000001f32         db  0x21 ; '!'
0000000000001f33         db  0x00 ; '.'
0000000000001f34         db  0x00 ; '.'
0000000000001f35         db  0x00 ; '.'
0000000000001f36         db  0x00 ; '.'
0000000000001f37         db  0x00 ; '.'
0000000000001f38         db  0x07 ; '.'
0000000000001f39         db  0x00 ; '.'
0000000000001f3a         db  0x00 ; '.'
0000000000001f3b         db  0x00 ; '.'
0000000000001f3c         db  0x50 ; 'P'
0000000000001f3d         db  0x00 ; '.'
0000000000001f3e         db  0x00 ; '.'
0000000000001f3f         db  0x00 ; '.'
0000000000001f40         db  0x00 ; '.'
0000000000001f41         db  0x00 ; '.'
0000000000001f42         db  0x00 ; '.'
0000000000001f43         db  0x00 ; '.'
0000000000001f44         db  0x00 ; '.'
0000000000001f45         db  0x00 ; '.'
0000000000001f46         db  0x00 ; '.'
0000000000001f47         db  0x00 ; '.'
0000000000001f48         db  0x88 ; '.'
0000000000001f49         db  0x3f ; '?'
0000000000001f4a         db  0x21 ; '!'
0000000000001f4b         db  0x00 ; '.'
0000000000001f4c         db  0x00 ; '.'
0000000000001f4d         db  0x00 ; '.'
0000000000001f4e         db  0x00 ; '.'
0000000000001f4f         db  0x00 ; '.'
0000000000001f50         db  0x07 ; '.'
0000000000001f51         db  0x00 ; '.'
0000000000001f52         db  0x00 ; '.'
0000000000001f53         db  0x00 ; '.'
0000000000001f54         db  0x51 ; 'Q'
0000000000001f55         db  0x00 ; '.'
0000000000001f56         db  0x00 ; '.'
0000000000001f57         db  0x00 ; '.'
0000000000001f58         db  0x00 ; '.'
0000000000001f59         db  0x00 ; '.'
0000000000001f5a         db  0x00 ; '.'
0000000000001f5b         db  0x00 ; '.'
0000000000001f5c         db  0x00 ; '.'
0000000000001f5d         db  0x00 ; '.'
0000000000001f5e         db  0x00 ; '.'
0000000000001f5f         db  0x00 ; '.'
0000000000001f60         db  0x90 ; '.'
0000000000001f61         db  0x3f ; '?'
0000000000001f62         db  0x21 ; '!'
0000000000001f63         db  0x00 ; '.'
0000000000001f64         db  0x00 ; '.'
0000000000001f65         db  0x00 ; '.'
0000000000001f66         db  0x00 ; '.'
0000000000001f67         db  0x00 ; '.'
0000000000001f68         db  0x07 ; '.'
0000000000001f69         db  0x00 ; '.'
0000000000001f6a         db  0x00 ; '.'
0000000000001f6b         db  0x00 ; '.'
0000000000001f6c         db  0x52 ; 'R'
0000000000001f6d         db  0x00 ; '.'
0000000000001f6e         db  0x00 ; '.'
0000000000001f6f         db  0x00 ; '.'
0000000000001f70         db  0x00 ; '.'
0000000000001f71         db  0x00 ; '.'
0000000000001f72         db  0x00 ; '.'
0000000000001f73         db  0x00 ; '.'
0000000000001f74         db  0x00 ; '.'
0000000000001f75         db  0x00 ; '.'
0000000000001f76         db  0x00 ; '.'
0000000000001f77         db  0x00 ; '.'
0000000000001f78         db  0x98 ; '.'
0000000000001f79         db  0x3f ; '?'
0000000000001f7a         db  0x21 ; '!'
0000000000001f7b         db  0x00 ; '.'
0000000000001f7c         db  0x00 ; '.'
0000000000001f7d         db  0x00 ; '.'
0000000000001f7e         db  0x00 ; '.'
0000000000001f7f         db  0x00 ; '.'
0000000000001f80         db  0x07 ; '.'
0000000000001f81         db  0x00 ; '.'
0000000000001f82         db  0x00 ; '.'
0000000000001f83         db  0x00 ; '.'
0000000000001f84         db  0x54 ; 'T'
0000000000001f85         db  0x00 ; '.'
0000000000001f86         db  0x00 ; '.'
0000000000001f87         db  0x00 ; '.'
0000000000001f88         db  0x00 ; '.'
0000000000001f89         db  0x00 ; '.'
0000000000001f8a         db  0x00 ; '.'
0000000000001f8b         db  0x00 ; '.'
0000000000001f8c         db  0x00 ; '.'
0000000000001f8d         db  0x00 ; '.'
0000000000001f8e         db  0x00 ; '.'
0000000000001f8f         db  0x00 ; '.'
0000000000001f90         db  0xa0 ; '.'
0000000000001f91         db  0x3f ; '?'
0000000000001f92         db  0x21 ; '!'
0000000000001f93         db  0x00 ; '.'
0000000000001f94         db  0x00 ; '.'
0000000000001f95         db  0x00 ; '.'
0000000000001f96         db  0x00 ; '.'
0000000000001f97         db  0x00 ; '.'
0000000000001f98         db  0x07 ; '.'
0000000000001f99         db  0x00 ; '.'
0000000000001f9a         db  0x00 ; '.'
0000000000001f9b         db  0x00 ; '.'
0000000000001f9c         db  0x55 ; 'U'
0000000000001f9d         db  0x00 ; '.'
0000000000001f9e         db  0x00 ; '.'
0000000000001f9f         db  0x00 ; '.'
0000000000001fa0         db  0x00 ; '.'
0000000000001fa1         db  0x00 ; '.'
0000000000001fa2         db  0x00 ; '.'
0000000000001fa3         db  0x00 ; '.'
0000000000001fa4         db  0x00 ; '.'
0000000000001fa5         db  0x00 ; '.'
0000000000001fa6         db  0x00 ; '.'
0000000000001fa7         db  0x00 ; '.'
0000000000001fa8         db  0xa8 ; '.'
0000000000001fa9         db  0x3f ; '?'
0000000000001faa         db  0x21 ; '!'
0000000000001fab         db  0x00 ; '.'
0000000000001fac         db  0x00 ; '.'
0000000000001fad         db  0x00 ; '.'
0000000000001fae         db  0x00 ; '.'
0000000000001faf         db  0x00 ; '.'
0000000000001fb0         db  0x07 ; '.'
0000000000001fb1         db  0x00 ; '.'
0000000000001fb2         db  0x00 ; '.'
0000000000001fb3         db  0x00 ; '.'
0000000000001fb4         db  0x56 ; 'V'
0000000000001fb5         db  0x00 ; '.'
0000000000001fb6         db  0x00 ; '.'
0000000000001fb7         db  0x00 ; '.'
0000000000001fb8         db  0x00 ; '.'
0000000000001fb9         db  0x00 ; '.'
0000000000001fba         db  0x00 ; '.'
0000000000001fbb         db  0x00 ; '.'
0000000000001fbc         db  0x00 ; '.'
0000000000001fbd         db  0x00 ; '.'
0000000000001fbe         db  0x00 ; '.'
0000000000001fbf         db  0x00 ; '.'
0000000000001fc0         db  0xb0 ; '.'
0000000000001fc1         db  0x3f ; '?'
0000000000001fc2         db  0x21 ; '!'
0000000000001fc3         db  0x00 ; '.'
0000000000001fc4         db  0x00 ; '.'
0000000000001fc5         db  0x00 ; '.'
0000000000001fc6         db  0x00 ; '.'
0000000000001fc7         db  0x00 ; '.'
0000000000001fc8         db  0x07 ; '.'
0000000000001fc9         db  0x00 ; '.'
0000000000001fca         db  0x00 ; '.'
0000000000001fcb         db  0x00 ; '.'
0000000000001fcc         db  0x57 ; 'W'
0000000000001fcd         db  0x00 ; '.'
0000000000001fce         db  0x00 ; '.'
0000000000001fcf         db  0x00 ; '.'
0000000000001fd0         db  0x00 ; '.'
0000000000001fd1         db  0x00 ; '.'
0000000000001fd2         db  0x00 ; '.'
0000000000001fd3         db  0x00 ; '.'
0000000000001fd4         db  0x00 ; '.'
0000000000001fd5         db  0x00 ; '.'
0000000000001fd6         db  0x00 ; '.'
0000000000001fd7         db  0x00 ; '.'
0000000000001fd8         db  0xb8 ; '.'
0000000000001fd9         db  0x3f ; '?'
0000000000001fda         db  0x21 ; '!'
0000000000001fdb         db  0x00 ; '.'
0000000000001fdc         db  0x00 ; '.'
0000000000001fdd         db  0x00 ; '.'
0000000000001fde         db  0x00 ; '.'
0000000000001fdf         db  0x00 ; '.'
0000000000001fe0         db  0x07 ; '.'
0000000000001fe1         db  0x00 ; '.'
0000000000001fe2         db  0x00 ; '.'
0000000000001fe3         db  0x00 ; '.'
0000000000001fe4         db  0x59 ; 'Y'
0000000000001fe5         db  0x00 ; '.'
0000000000001fe6         db  0x00 ; '.'
0000000000001fe7         db  0x00 ; '.'
0000000000001fe8         db  0x00 ; '.'
0000000000001fe9         db  0x00 ; '.'
0000000000001fea         db  0x00 ; '.'
0000000000001feb         db  0x00 ; '.'
0000000000001fec         db  0x00 ; '.'
0000000000001fed         db  0x00 ; '.'
0000000000001fee         db  0x00 ; '.'
0000000000001fef         db  0x00 ; '.'
0000000000001ff0         db  0xc0 ; '.'
0000000000001ff1         db  0x3f ; '?'
0000000000001ff2         db  0x21 ; '!'
0000000000001ff3         db  0x00 ; '.'
0000000000001ff4         db  0x00 ; '.'
0000000000001ff5         db  0x00 ; '.'
0000000000001ff6         db  0x00 ; '.'
0000000000001ff7         db  0x00 ; '.'
0000000000001ff8         db  0x07 ; '.'
0000000000001ff9         db  0x00 ; '.'
0000000000001ffa         db  0x00 ; '.'
0000000000001ffb         db  0x00 ; '.'
0000000000001ffc         db  0x5a ; 'Z'
0000000000001ffd         db  0x00 ; '.'
0000000000001ffe         db  0x00 ; '.'
0000000000001fff         db  0x00 ; '.'
0000000000002000         db  0x00 ; '.'                                         ; DATA XREF=main+2077
0000000000002001         db  0x00 ; '.'
0000000000002002         db  0x00 ; '.'
0000000000002003         db  0x00 ; '.'
0000000000002004         db  0x00 ; '.'
0000000000002005         db  0x00 ; '.'
0000000000002006         db  0x00 ; '.'
0000000000002007         db  0x00 ; '.'
0000000000002008         db  0xc8 ; '.'
0000000000002009         db  0x3f ; '?'
000000000000200a         db  0x21 ; '!'
000000000000200b         db  0x00 ; '.'
000000000000200c         db  0x00 ; '.'
000000000000200d         db  0x00 ; '.'
000000000000200e         db  0x00 ; '.'
000000000000200f         db  0x00 ; '.'
0000000000002010         db  0x07 ; '.'
0000000000002011         db  0x00 ; '.'
0000000000002012         db  0x00 ; '.'
0000000000002013         db  0x00 ; '.'
0000000000002014         db  0x5b ; '['
0000000000002015         db  0x00 ; '.'
0000000000002016         db  0x00 ; '.'
0000000000002017         db  0x00 ; '.'
0000000000002018         db  0x00 ; '.'
0000000000002019         db  0x00 ; '.'
000000000000201a         db  0x00 ; '.'
000000000000201b         db  0x00 ; '.'
000000000000201c         db  0x00 ; '.'
000000000000201d         db  0x00 ; '.'
000000000000201e         db  0x00 ; '.'
000000000000201f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x2020; 0x2037[ (23 bytes)
        ; File offset : [8224; 8247[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000002020         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000002024         mov        rax, qword [qword_213fe0]                   ; qword_213fe0
000000000000202b         test       rax, rax
000000000000202e         je         loc_2032

0000000000002030         call       rax

                     loc_2032:
0000000000002032         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000002036         ret
                        ; endp
0000000000002037         db  0x00 ; '.'
0000000000002038         db  0x00 ; '.'
0000000000002039         db  0x00 ; '.'
000000000000203a         db  0x00 ; '.'
000000000000203b         db  0x00 ; '.'
000000000000203c         db  0x00 ; '.'
000000000000203d         db  0x00 ; '.'
000000000000203e         db  0x00 ; '.'
000000000000203f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x2040; 0x25b0[ (1392 bytes)
        ; File offset : [8256; 9648[ (1392 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_2040:
0000000000002040         push       qword [qword_213d10]                        ; Begin of unwind block (FDE at 0x11444), qword_213d10, CODE XREF=sub_2056+5
0000000000002046         jmp        qword [qword_213d10+8]                      ; 0x213d18
                        ; endp
000000000000204c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000002050         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=main+1662, main+1825, human_options+276, human_options+327, human_options+351, human_options+375
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2056:
0000000000002056         push       0x0
000000000000205b         jmp        loc_2040


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000002060         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2066:
0000000000002066         push       0x1
000000000000206b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000002070         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+2300, main+2413, main+2421, main+2444, main+2507, main+3005, main+3274, main+3760, main+3768, main+3778, main+4020
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2076:
0000000000002076         push       0x2
000000000000207b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_endmntent:        // endmntent
0000000000002080         jmp        qword [endmntent@GOT]                       ; endmntent, endmntent@GOT, CODE XREF=read_file_system_list+1793
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2086:
0000000000002086         push       0x3
000000000000208b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strverscmp:        // strverscmp
0000000000002090         jmp        qword [strverscmp@GOT]                      ; strverscmp, strverscmp@GOT, CODE XREF=get_fs_usage+254
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2096:
0000000000002096         push       0x4
000000000000209b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
00000000000020a0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=safe_hasher+29, hash_get_first+60, hash_rehash+569, hash_insert_if_absent+477, set_program_name+154, sub_90d0+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20a6:
00000000000020a6         push       0x5
00000000000020ab         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000020b0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1594, main+3681, main+4992, get_dev+265, find_mount_point+59, canonicalize_filename_mode+635, canonicalize_filename_mode+867, sub_5c5a+118, sub_5c5a+136, sub_5c5a+182, sub_5c5a+253
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20b6:
00000000000020b6         push       0x6
00000000000020bb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000020c0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=main+5193, usage+852, usage+1045, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20c6:
00000000000020c6         push       0x7
00000000000020cb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000020d0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20d6:
00000000000020d6         push       0x8
00000000000020db         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
00000000000020e0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20e6:
00000000000020e6         push       0x9
00000000000020eb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_isatty:        // isatty
00000000000020f0         jmp        qword [isatty@GOT]                          ; isatty, isatty@GOT, CODE XREF=replace_problematic_chars+53
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_20f6:
00000000000020f6         push       0xa
00000000000020fb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswcntrl:        // iswcntrl
0000000000002100         jmp        qword [iswcntrl@GOT]                        ; iswcntrl, iswcntrl@GOT, CODE XREF=replace_invalid_chars+84, mbsnwidth+247
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2106:
0000000000002106         push       0xb
000000000000210b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcswidth:        // wcswidth
0000000000002110         jmp        qword [wcswidth@GOT]                        ; wcswidth, wcswidth@GOT, CODE XREF=mbsalign+647, mbsalign+844
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2116:
0000000000002116         push       0xc
000000000000211b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localeconv:        // localeconv
0000000000002120         jmp        qword [localeconv@GOT]                      ; localeconv, localeconv@GOT, CODE XREF=human_readable+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2126:
0000000000002126         push       0xd
000000000000212b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbstowcs:        // mbstowcs
0000000000002130         jmp        qword [mbstowcs@GOT]                        ; mbstowcs, mbstowcs@GOT, CODE XREF=mbsalign+438, mbsalign+544
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2136:
0000000000002136         push       0xe
000000000000213b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_readlink:        // readlink
0000000000002140         jmp        qword [readlink@GOT]                        ; readlink, readlink@GOT, CODE XREF=areadlink_with_size+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2146:
0000000000002146         push       0xf
000000000000214b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000002150         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2156:
0000000000002156         push       0x10
000000000000215b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000002160         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+111
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2166:
0000000000002166         push       0x11
000000000000216b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000002170         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2176:
0000000000002176         push       0x12
000000000000217b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000002180         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+99
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2186:
0000000000002186         push       0x13
000000000000218b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000002190         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+230, main+1263, main+3735, main+4984, main+5142, main+5410, get_header+244, get_header+332, get_header+550, usage+56, usage+102
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2196:
0000000000002196         push       0x14
000000000000219b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
00000000000021a0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=mbsalign+416, mbsnwidth+41, quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21a6:
00000000000021a6         push       0x15
00000000000021ab         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
00000000000021b0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=replace_invalid_chars+33, get_dev+476, find_mount_point+109, canonicalize_filename_mode+119, canonicalize_filename_mode+1088, canonicalize_filename_mode+1104, base_len+4, human_readable+103, human_readable+155, human_readable+457, human_readable+831
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21b6:
00000000000021b6         push       0x16
00000000000021bb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
00000000000021c0         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=canonicalize_filename_mode+800
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21c6:
00000000000021c6         push       0x17
00000000000021cb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_openat:        // openat
00000000000021d0         jmp        qword [openat@GOT]                          ; openat, openat@GOT, CODE XREF=cdb_advance_fd+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21d6:
00000000000021d6         push       0x18
00000000000021db         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_chdir:        // chdir
00000000000021e0         jmp        qword [chdir@GOT]                           ; chdir, chdir@GOT, CODE XREF=find_mount_point+160, find_mount_point+267, find_mount_point+689, chdir_long+33
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21e6:
00000000000021e6         push       0x19
00000000000021eb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
00000000000021f0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+5582, get_header+650, replace_invalid_chars+216, sub_4a7e+744, find_mount_point+947, sub_5c5a+279, seen_file+81, hash_rehash+554, hash_insert_if_absent+639, hash_insert+84, hash_delete+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_21f6:
00000000000021f6         push       0x1a
00000000000021fb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000002200         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+271
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2206:
0000000000002206         push       0x1b
000000000000220b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000002210         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2216:
0000000000002216         push       0x1c
000000000000221b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000002220         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=main+4642, main+4661, decode_output_arg+51, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380, read_file_system_list+630, read_file_system_list+1716
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2226:
0000000000002226         push       0x1d
000000000000222b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstatat:        // __fxstatat
0000000000002230         jmp        qword [__fxstatat@GOT]                      ; __fxstatat, __fxstatat@GOT, CODE XREF=same_nameat.part.0+71, same_nameat.part.0+127
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2236:
0000000000002236         push       0x1e
000000000000223b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000002240         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=main+3664, main+5083, argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2246:
0000000000002246         push       0x1f
000000000000224b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000002250         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2256:
0000000000002256         push       0x20
000000000000225b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_uname:        // uname
0000000000002260         jmp        qword [uname@GOT]                           ; uname, uname@GOT, CODE XREF=get_fs_usage+99
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2266:
0000000000002266         push       0x21
000000000000226b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000002270         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2276:
0000000000002276         push       0x22
000000000000227b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000002280         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=main+5502, alloc_field+184, sub_4a7e+605, sub_4a7e+684, sub_4a7e+715, decode_output_arg+358, xstrtoumax+927, cdb_free+60, chdir_long+588, chdir_long+624, chdir_long+655
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2286:
0000000000002286         push       0x23
000000000000228b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000002290         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2296:
0000000000002296         push       0x24
000000000000229b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
00000000000022a0         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_22a6:
00000000000022a6         push       0x25
00000000000022ab         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getcwd:        // getcwd
00000000000022b0         jmp        qword [getcwd@GOT]                          ; getcwd, getcwd@GOT, CODE XREF=save_cwd+52, xgetcwd+5
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_22b6:
00000000000022b6         push       0x26
00000000000022bb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_canonicalize_file_name:        // canonicalize_file_name
00000000000022c0         jmp        qword [canonicalize_file_name@GOT]          ; canonicalize_file_name, canonicalize_file_name@GOT, CODE XREF=main+2091, main+2174, main+2279, main+2475
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_22c6:
00000000000022c6         push       0x27
00000000000022cb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
00000000000022d0         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=main+1514, free_cwd+10, cdb_free+10, fd_safer+38, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_22d6:
00000000000022d6         push       0x28
00000000000022db         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strspn:        // strspn
00000000000022e0         jmp        qword [strspn@GOT]                          ; strspn, strspn@GOT, CODE XREF=get_dev+499, canonicalize_filename_mode+676, chdir_long+146, chdir_long+289, chdir_long+435
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_22e6:
00000000000022e6         push       0x29
00000000000022eb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memchr:        // memchr
00000000000022f0         jmp        qword [memchr@GOT]                          ; memchr, memchr@GOT, CODE XREF=chdir_long+382
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_22f6:
00000000000022f6         push       0x2a
00000000000022fb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000002300         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410, same_nameat+105, argmatch+111, argmatch_valid+150, argmatch_to_argument+56
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2306:
0000000000002306         push       0x2b
000000000000230b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000002310         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=main+3262, usage+157, usage+194, usage+231, usage+268, usage+305, usage+342, usage+379, usage+416, usage+453, usage+531
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2316:
0000000000002316         push       0x2c
000000000000231b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000002320         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=hash_initialize+177, hash_rehash+198, xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2326:
0000000000002326         push       0x2d
000000000000232b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___getdelim:        // __getdelim
0000000000002330         jmp        qword [__getdelim@GOT]                      ; __getdelim, __getdelim@GOT, CODE XREF=read_file_system_list+110
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2336:
0000000000002336         push       0x2e
000000000000233b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000002340         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+1223, main+2202, main+2247, main+2336, main+2593, main+3912, main+4621, main+5333, main+5352, selected_fstype+38, excluded_fstype+38
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2346:
0000000000002346         push       0x2f
000000000000234b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___memcpy_chk:        // __memcpy_chk
0000000000002350         jmp        qword [__memcpy_chk@GOT]                    ; __memcpy_chk, __memcpy_chk@GOT, CODE XREF=human_readable+1180
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2356:
0000000000002356         push       0x30
000000000000235b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000002360         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=find_mount_point+141, canonicalize_filename_mode+387, canonicalize_filename_mode+1208, mdir_name+53, human_readable+1245, human_readable+1274, human_readable+1338, xmemdup+35, vasnprintf+686, vasnprintf+912, vasnprintf+973
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2366:
0000000000002366         push       0x31
000000000000236b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000002370         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2376:
0000000000002376         push       0x32
000000000000237b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_statfs:        // statfs
0000000000002380         jmp        qword [statfs@GOT]                          ; statfs, statfs@GOT, CODE XREF=get_fs_usage+128
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2386:
0000000000002386         push       0x33
000000000000238b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
0000000000002390         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=main+1566, main+2636, main+3460, main+3553, main+4048, main+4368, sub_4a7e+379, find_mount_point+192, find_mount_point+414, canonicalize_filename_mode+617
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2396:
0000000000002396         push       0x34
000000000000239b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sync:        // sync
00000000000023a0         jmp        qword [sync@GOT]                            ; sync, sync@GOT, CODE XREF=main+1754
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23a6:
00000000000023a6         push       0x35
00000000000023ab         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcwidth:        // wcwidth
00000000000023b0         jmp        qword [wcwidth@GOT]                         ; wcwidth, wcwidth@GOT, CODE XREF=mbsalign+750, mbsnwidth+227
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23b6:
00000000000023b6         push       0x36
00000000000023bb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
00000000000023c0         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=mdir_name+31, transfer_entries+293, hash_initialize+62, hash_insert_if_absent+517, mbsalign+516, mbsalign+693, xmalloc+4, areadlink_with_size+67, areadlink_with_size+126, vasnprintf+210, vasnprintf+2547
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23c6:
00000000000023c6         push       0x37
00000000000023cb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
00000000000023d0         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23d6:
00000000000023d6         push       0x38
00000000000023db         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getmntent:        // getmntent
00000000000023e0         jmp        qword [getmntent@GOT]                       ; getmntent, getmntent@GOT, CODE XREF=read_file_system_list+1198, read_file_system_list+1773
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23e6:
00000000000023e6         push       0x39
00000000000023eb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setmntent:        // setmntent
00000000000023f0         jmp        qword [setmntent@GOT]                       ; setmntent, setmntent@GOT, CODE XREF=read_file_system_list+1166
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_23f6:
00000000000023f6         push       0x3a
00000000000023fb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000002400         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2406:
0000000000002406         push       0x3b
000000000000240b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_sscanf:        // sscanf
0000000000002410         jmp        qword [sscanf@GOT]                          ; sscanf, sscanf@GOT, CODE XREF=read_file_system_list+181, read_file_system_list+269
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2416:
0000000000002416         push       0x3c
000000000000241b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000002420         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2426:
0000000000002426         push       0x3d
000000000000242b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_statvfs:        // statvfs
0000000000002430         jmp        qword [statvfs@GOT]                         ; statvfs, statvfs@GOT, CODE XREF=get_fs_usage+57
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2436:
0000000000002436         push       0x3e
000000000000243b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchdir:        // fchdir
0000000000002440         jmp        qword [fchdir@GOT]                          ; fchdir, fchdir@GOT, CODE XREF=restore_cwd+8, chdir_long+504
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2446:
0000000000002446         push       0x3f
000000000000244b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000002450         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=ambsalign+50, xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2456:
0000000000002456         push       0x40
000000000000245b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000002460         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+80, usage+827, usage+1020, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2466:
0000000000002466         push       0x41
000000000000246b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000002470         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+120, usage+494, usage+815, usage+908, usage+969, usage+1008, usage+1111, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2476:
0000000000002476         push       0x42
000000000000247b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000002480         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=mbsalign+247
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2486:
0000000000002486         push       0x43
000000000000248b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000002490         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=replace_invalid_chars+108, canonicalize_filename_mode+1192, human_readable+885
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2496:
0000000000002496         push       0x44
000000000000249b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
00000000000024a0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+1280, main+1611, main+3752, main+5016, main+5159, main+5284, main+5444, main+5540, get_dev+332, decode_output_arg+152, find_mount_point+481
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24a6:
00000000000024a6         push       0x45
00000000000024ab         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memrchr:        // memrchr
00000000000024b0         jmp        qword [memrchr@GOT]                         ; memrchr, memrchr@GOT, CODE XREF=chdir_long+329
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24b6:
00000000000024b6         push       0x46
00000000000024bb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
00000000000024c0         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=main+1503, open_safer+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24c6:
00000000000024c6         push       0x47
00000000000024cb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
00000000000024d0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24d6:
00000000000024d6         push       0x48
00000000000024db         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
00000000000024e0         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=read_file_system_list+44
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24e6:
00000000000024e6         push       0x49
00000000000024eb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
00000000000024f0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_24f6:
00000000000024f6         push       0x4a
00000000000024fb         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcstombs:        // wcstombs
0000000000002500         jmp        qword [wcstombs@GOT]                        ; wcstombs, wcstombs@GOT, CODE XREF=mbsalign+674, mbsalign+807
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2506:
0000000000002506         push       0x4b
000000000000250b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000002510         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+1036, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2516:
0000000000002516         push       0x4c
000000000000251b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000002520         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2526:
0000000000002526         push       0x4d
000000000000252b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000002530         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, hash_print_statistics+118, hash_print_statistics+143, hash_print_statistics+211, hash_print_statistics+246, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2536:
0000000000002536         push       0x4e
000000000000253b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strdup:        // strdup
0000000000002540         jmp        qword [strdup@GOT]                          ; strdup, strdup@GOT, CODE XREF=get_header+99, sub_47b0+21
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2546:
0000000000002546         push       0x4f
000000000000254b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000002550         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=mbsnwidth+167, sub_90d0+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2556:
0000000000002556         push       0x50
000000000000255b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000002560         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=mbsalign+605, sub_90d0+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2566:
0000000000002566         push       0x51
000000000000256b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_hasmntopt:        // hasmntopt
0000000000002570         jmp        qword [hasmntopt@GOT]                       ; hasmntopt, hasmntopt@GOT, CODE XREF=read_file_system_list+1226
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2576:
0000000000002576         push       0x52
000000000000257b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strstr:        // strstr
0000000000002580         jmp        qword [strstr@GOT]                          ; strstr, strstr@GOT, CODE XREF=read_file_system_list+215
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2586:
0000000000002586         push       0x53
000000000000258b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000002590         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=mbsnwidth+367, sub_8e70+51, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_2596:
0000000000002596         push       0x54
000000000000259b         jmp        0x2040
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
00000000000025a0         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=human_readable+449, human_readable+818, human_readable+1818, human_readable+1899
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_25a6:
00000000000025a6         push       0x55
00000000000025ab         jmp        0x2040
                        ; endp


        ; Section .plt.got
        ; Range: [0x25b0; 0x25b8[ (8 bytes)
        ; File offset : [9648; 9656[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_213ff0:        // qword_213ff0
00000000000025b0         jmp        qword [qword_213ff0]                        ; qword, End of unwind block (FDE at 0x11444), Begin of unwind block (FDE at 0x1146c), qword_213ff0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
00000000000025b6         align      8
00000000000025b8         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x1146c)
00000000000025b9         db  0x00 ; '.'
00000000000025ba         db  0x00 ; '.'
00000000000025bb         db  0x00 ; '.'
00000000000025bc         db  0x00 ; '.'
00000000000025bd         db  0x00 ; '.'
00000000000025be         db  0x00 ; '.'
00000000000025bf         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x25c0; 0xefce[ (51726 bytes)
        ; File offset : [9664; 61390[ (51726 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D8: int64_t, -216
        ;    var_F8: int64_t, -248
        ;    var_100: int64_t, -256
        ;    var_101: int8_t, -257
        ;    var_102: int8_t, -258
        ;    var_110: int64_t, -272
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_128: int64_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312
        ;    var_140: int64_t, -320
        ;    var_148: int64_t, -328
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352
        ;    var_168: int64_t, -360
        ;    var_170: int64_t, -368


                     main:
00000000000025c0         push       r15                                         ; Begin of unwind block (FDE at 0x11730), DATA XREF=_start+29
00000000000025c2         push       r14
00000000000025c4         mov        r14, rsi
00000000000025c7         push       r13
00000000000025c9         push       r12
00000000000025cb         push       rbp
00000000000025cc         push       rbx
00000000000025cd         lea        rbx, qword [long_options]                   ; long_options
00000000000025d4         xor        ebp, ebp
00000000000025d6         sub        rsp, 0x148
00000000000025dd         mov        dword [rsp+0x178+var_170], edi
00000000000025e1         mov        rdi, qword [rsi]
00000000000025e4         lea        r15, qword [rsp+0x178+var_F8]
00000000000025ec         mov        rax, qword [fs:0x28]
00000000000025f5         mov        qword [rsp+0x178+var_40], rax
00000000000025fd         xor        eax, eax
00000000000025ff         call       set_program_name                            ; set_program_name
0000000000002604         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x10601
000000000000260b         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000002610         call       j_setlocale                                 ; setlocale
0000000000002615         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
000000000000261c         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000002623         call       j_bindtextdomain                            ; bindtextdomain
0000000000002628         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
000000000000262f         call       j_textdomain                                ; textdomain
0000000000002634         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
000000000000263b         call       atexit                                      ; atexit
0000000000002640         lea        rsi, qword [aOptionsSAndSAr]                ; argument "msgid" for method j_dcgettext, "options %s and %s are mutually exclusive"
0000000000002647         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000264c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000264e         mov        qword [fs_select_list], 0x0                 ; fs_select_list
0000000000002659         mov        qword [fs_exclude_list], 0x0                ; fs_exclude_list
0000000000002664         mov        byte [show_all_fs], 0x0                     ; show_all_fs
000000000000266b         mov        byte [show_listed_fs], 0x0                  ; show_listed_fs
0000000000002672         mov        dword [human_output_opts], 0xffffffff       ; human_output_opts
000000000000267c         mov        byte [print_type], 0x0                      ; print_type
0000000000002683         mov        byte [file_systems_processed], 0x0          ; file_systems_processed
000000000000268a         mov        dword [exit_status], 0x0                    ; exit_status
0000000000002694         mov        byte [print_grand_total], 0x0               ; print_grand_total
000000000000269b         mov        qword [grand_fsu], 0x1                      ; grand_fsu
00000000000026a6         call       j_dcgettext                                 ; dcgettext
00000000000026ab         mov        r12, rax
00000000000026ae         nop

                     loc_26b0:
00000000000026b0         mov        edi, dword [rsp+0x178+var_170]              ; argument "___argc" for method j_getopt_long, CODE XREF=main+299, main+349, main+417, main+477, main+542, main+663, main+674, main+695, main+727, main+757, main+795
00000000000026b4         lea        rdx, qword [aAbifhhklmpttvx]                ; argument "__shortopts" for method j_getopt_long, "aB:iF:hHklmPTt:vx:"
00000000000026bb         mov        r8, r15                                     ; argument "__longind" for method j_getopt_long
00000000000026be         mov        rcx, rbx                                    ; argument "__longopts" for method j_getopt_long
00000000000026c1         mov        rsi, r14                                    ; argument "___argv" for method j_getopt_long
00000000000026c4         mov        dword [rsp+0x178+var_F8], 0xffffffff
00000000000026cf         call       j_getopt_long                               ; getopt_long
00000000000026d4         cmp        eax, 0xffffffff
00000000000026d7         je         loc_2a10

00000000000026dd         cmp        eax, 0x69
00000000000026e0         je         loc_2880

00000000000026e6         jle        loc_2720

00000000000026e8         cmp        eax, 0x76
00000000000026eb         je         loc_26b0

00000000000026ed         jle        loc_2770

00000000000026f3         cmp        eax, 0x81
00000000000026f8         je         loc_2938

00000000000026fe         jg         loc_2808

0000000000002704         cmp        eax, 0x78
0000000000002707         je         loc_2958

000000000000270d         add        eax, 0xffffff80
0000000000002710         jne        loc_2a06

0000000000002716         mov        byte [require_sync], 0x0                    ; require_sync
000000000000271d         jmp        loc_26b0
000000000000271f         align      32

                     loc_2720:
0000000000002720         cmp        eax, 0x48                                   ; CODE XREF=main+294
0000000000002723         je         loc_28a0

0000000000002729         jle        loc_27a8

000000000000272b         cmp        eax, 0x54
000000000000272e         je         loc_28e0

0000000000002734         jle        loc_28c0

000000000000273a         cmp        eax, 0x61
000000000000273d         je         loc_2948

0000000000002743         cmp        eax, 0x68
0000000000002746         jne        loc_2a06

000000000000274c         mov        dword [human_output_opts], 0xb0             ; human_output_opts
0000000000002756         mov        qword [output_block_size], 0x1              ; output_block_size
0000000000002761         jmp        loc_26b0
0000000000002766         align      16

                     loc_2770:
0000000000002770         cmp        eax, 0x6c                                   ; CODE XREF=main+301
0000000000002773         je         loc_2928

0000000000002779         jle        loc_2900

000000000000277f         cmp        eax, 0x6d
0000000000002782         jne        loc_2a01

0000000000002788         mov        dword [human_output_opts], 0x0              ; human_output_opts
0000000000002792         mov        qword [output_block_size], 0x100000         ; output_block_size
000000000000279d         jmp        loc_26b0
00000000000027a2         align      8

                     loc_27a8:
00000000000027a8         cmp        eax, 0xffffff7e                             ; CODE XREF=main+361
00000000000027ad         je         loc_3abd

00000000000027b3         jle        loc_2988

00000000000027b9         cmp        eax, 0x42
00000000000027bc         jne        loc_29d1

00000000000027c2         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000027c9         lea        rdx, qword [output_block_size]              ; output_block_size
00000000000027d0         lea        rsi, qword [human_output_opts]              ; human_output_opts
00000000000027d7         call       human_options                               ; human_options
00000000000027dc         test       eax, eax
00000000000027de         je         loc_26b0

00000000000027e4         mov        r8, qword [optarg@@GLIBC_2.2.5]             ; optarg@@GLIBC_2.2.5
00000000000027eb         mov        esi, dword [rsp+0x178+var_F8]
00000000000027f2         lea        rcx, qword [long_options]                   ; long_options
00000000000027f9         mov        edx, 0x42
00000000000027fe         mov        edi, eax
0000000000002800         call       xstrtol_fatal                               ; xstrtol_fatal
0000000000002805         nop        dword [rax]

                     loc_2808:
0000000000002808         cmp        eax, 0x82                                   ; CODE XREF=main+318
000000000000280d         je         loc_2870

000000000000280f         cmp        eax, 0x83
0000000000002814         jne        loc_2a06

000000000000281a         mov        eax, dword [header_mode]                    ; header_mode
0000000000002820         cmp        eax, 0x1
0000000000002823         je         loc_3b7e

0000000000002829         test       eax, eax
000000000000282b         jne        loc_2836

000000000000282d         test       bpl, bpl
0000000000002830         jne        loc_3aef

                     loc_2836:
0000000000002836         cmp        byte [print_type], 0x0                      ; print_type, CODE XREF=main+619
000000000000283d         jne        loc_3b6e

0000000000002843         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
000000000000284a         mov        dword [header_mode], 0x4                    ; header_mode
0000000000002854         test       rdi, rdi
0000000000002857         je         loc_26b0

000000000000285d         call       decode_output_arg                           ; decode_output_arg
0000000000002862         jmp        loc_26b0
0000000000002867         align      16

                     loc_2870:
0000000000002870         mov        byte [print_grand_total], 0x1               ; print_grand_total, CODE XREF=main+589
0000000000002877         jmp        loc_26b0
000000000000287c         align      128

                     loc_2880:
0000000000002880         cmp        dword [header_mode], 0x4                    ; header_mode, CODE XREF=main+288
0000000000002887         je         loc_3b7e

000000000000288d         mov        dword [header_mode], 0x1                    ; header_mode
0000000000002897         jmp        loc_26b0
000000000000289c         align      32

                     loc_28a0:
00000000000028a0         mov        dword [human_output_opts], 0x90             ; human_output_opts, CODE XREF=main+355
00000000000028aa         mov        qword [output_block_size], 0x1              ; output_block_size
00000000000028b5         jmp        loc_26b0
00000000000028ba         align      64

                     loc_28c0:
00000000000028c0         cmp        eax, 0x50                                   ; CODE XREF=main+372
00000000000028c3         jne        loc_2a06

00000000000028c9         cmp        dword [header_mode], 0x4                    ; header_mode
00000000000028d0         je         loc_3b4d

00000000000028d6         mov        ebp, 0x1
00000000000028db         jmp        loc_26b0

                     loc_28e0:
00000000000028e0         cmp        dword [header_mode], 0x4                    ; header_mode, CODE XREF=main+366
00000000000028e7         je         loc_3b6e

00000000000028ed         mov        byte [print_type], 0x1                      ; print_type
00000000000028f4         jmp        loc_26b0
00000000000028f9         align      256

                     loc_2900:
0000000000002900         cmp        eax, 0x6b                                   ; CODE XREF=main+441
0000000000002903         jne        loc_2a06

0000000000002909         mov        dword [human_output_opts], 0x0              ; human_output_opts
0000000000002913         mov        qword [output_block_size], 0x400            ; output_block_size
000000000000291e         jmp        loc_26b0
0000000000002923         align      8

                     loc_2928:
0000000000002928         mov        byte [show_local_fs], 0x1                   ; show_local_fs, CODE XREF=main+435
000000000000292f         jmp        loc_26b0
0000000000002934         align      8

                     loc_2938:
0000000000002938         mov        byte [require_sync], 0x1                    ; require_sync, CODE XREF=main+312
000000000000293f         jmp        loc_26b0
0000000000002944         align      8

                     loc_2948:
0000000000002948         mov        byte [show_all_fs], 0x1                     ; show_all_fs, CODE XREF=main+381
000000000000294f         jmp        loc_26b0
0000000000002954         align      8

                     loc_2958:
0000000000002958         mov        edi, 0x10                                   ; argument #1 for method xmalloc, CODE XREF=main+327
000000000000295d         mov        r13, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002964         call       xmalloc                                     ; xmalloc
0000000000002969         mov        rdx, qword [fs_exclude_list]                ; fs_exclude_list
0000000000002970         mov        qword [fs_exclude_list], rax                ; fs_exclude_list
0000000000002977         mov        qword [rax], r13
000000000000297a         mov        qword [rax+8], rdx
000000000000297e         jmp        loc_26b0
0000000000002983         align      8

                     loc_2988:
0000000000002988         cmp        eax, 0xffffff7d                             ; CODE XREF=main+499
000000000000298d         jne        loc_2a06

000000000000298f         lea        rax, qword [aPaulEggert]                    ; "Paul Eggert"
0000000000002996         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000299d         mov        rcx, qword [Version]                        ; Version
00000000000029a4         push       0x0
00000000000029a6         lea        r9, qword [aDavidMackenzie]                 ; "David MacKenzie"
00000000000029ad         lea        r8, qword [aTorbjornGranlu]                 ; "Torbjorn Granlund"
00000000000029b4         push       rax
00000000000029b5         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xf0e8
00000000000029bc         lea        rsi, qword [aEmptyCell+14]                  ; 0xf06c
00000000000029c3         xor        eax, eax
00000000000029c5         call       version_etc                                 ; version_etc
00000000000029ca         xor        edi, edi                                    ; argument "__status" for method j_exit
00000000000029cc         call       j_exit                                      ; exit
                        ; endp

                     loc_29d1:
00000000000029d1         cmp        eax, 0x46                                   ; CODE XREF=main+508
00000000000029d4         jne        loc_2a06

                     loc_29d6:
00000000000029d6         mov        edi, 0x10                                   ; argument #1 for method xmalloc, CODE XREF=main+1092
00000000000029db         mov        r13, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000029e2         call       xmalloc                                     ; xmalloc
00000000000029e7         mov        rdx, qword [fs_select_list]                 ; fs_select_list
00000000000029ee         mov        qword [fs_select_list], rax                 ; fs_select_list
00000000000029f5         mov        qword [rax], r13
00000000000029f8         mov        qword [rax+8], rdx
00000000000029fc         jmp        loc_26b0

                     loc_2a01:
0000000000002a01         cmp        eax, 0x74                                   ; CODE XREF=main+450
0000000000002a04         je         loc_29d6

                     loc_2a06:
0000000000002a06         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+336, main+390, main+596, main+771, main+835, main+973, main+1044, main+5545
0000000000002a0b         call       usage                                       ; usage

                     loc_2a10:
0000000000002a10         cmp        dword [human_output_opts], 0xffffffff       ; human_output_opts, CODE XREF=main+279
0000000000002a17         je         loc_2c24

                     loc_2a1d:
0000000000002a1d         mov        eax, dword [header_mode]                    ; header_mode, CODE XREF=main+1692, main+1852
0000000000002a23         cmp        eax, 0x1
0000000000002a26         je         loc_2a44

0000000000002a28         cmp        eax, 0x4
0000000000002a2b         je         loc_2a44

0000000000002a2d         test       byte [human_output_opts], 0x10              ; human_output_opts
0000000000002a34         je         loc_2cc2

0000000000002a3a         mov        dword [header_mode], 0x2                    ; header_mode

                     loc_2a44:
0000000000002a44         mov        rbp, qword [fs_select_list]                 ; fs_select_list, CODE XREF=main+1126, main+1131, main+1797, main+1813
0000000000002a4b         xor        r12d, r12d
0000000000002a4e         test       rbp, rbp
0000000000002a51         je         loc_2b01

0000000000002a57         nop        word [rax+rax]

                     loc_2a60:
0000000000002a60         mov        rbx, qword [fs_exclude_list]                ; fs_exclude_list, CODE XREF=main+1292
0000000000002a67         test       rbx, rbx
0000000000002a6a         je         loc_2ac5

0000000000002a6c         mov        r13, qword [rbp]
0000000000002a70         jmp        loc_2a81
0000000000002a72         align      8

                     loc_2a78:
0000000000002a78         mov        rbx, qword [rbx+8]                          ; CODE XREF=main+1230
0000000000002a7c         test       rbx, rbx
0000000000002a7f         je         loc_2ac5

                     loc_2a81:
0000000000002a81         mov        rsi, qword [rbx]                            ; argument "__s2" for method j_strcmp, CODE XREF=main+1200
0000000000002a84         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
0000000000002a87         call       j_strcmp                                    ; strcmp
0000000000002a8c         test       eax, eax
0000000000002a8e         jne        loc_2a78

0000000000002a90         mov        rdi, r13                                    ; argument #1 for method quote
0000000000002a93         mov        r12d, 0x1
0000000000002a99         call       quote                                       ; quote
0000000000002a9e         lea        rsi, qword [aFileSystemType]                ; argument "msgid" for method j_dcgettext, "file system type %s both selected and excluded"
0000000000002aa5         mov        rbx, rax
0000000000002aa8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002aad         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002aaf         call       j_dcgettext                                 ; dcgettext
0000000000002ab4         mov        rcx, rbx
0000000000002ab7         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002aba         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002abc         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002abe         xor        eax, eax
0000000000002ac0         call       j_error                                     ; error

                     loc_2ac5:
0000000000002ac5         mov        rbp, qword [rbp+8]                          ; CODE XREF=main+1194, main+1215
0000000000002ac9         test       rbp, rbp
0000000000002acc         jne        loc_2a60

0000000000002ace         test       r12b, r12b
0000000000002ad1         mov        eax, 0x1
0000000000002ad6         je         loc_2b01

                     loc_2ad8:
0000000000002ad8         mov        rcx, qword [rsp+0x178+var_40]               ; CODE XREF=main+3586
0000000000002ae0         xor        rcx, qword [fs:0x28]
0000000000002ae9         jne        loc_3b8e

0000000000002aef         add        rsp, 0x148
0000000000002af6         pop        rbx
0000000000002af7         pop        rbp
0000000000002af8         pop        r12
0000000000002afa         pop        r13
0000000000002afc         pop        r14
0000000000002afe         pop        r15
0000000000002b00         ret
                        ; endp

                     loc_2b01:
0000000000002b01         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+1169, main+1302
0000000000002b07         cmp        eax, dword [rsp+0x178+var_170]
0000000000002b0b         jge        loc_2c69

0000000000002b11         mov        ecx, dword [rsp+0x178+var_170]
0000000000002b15         mov        edx, 0x90
0000000000002b1a         xor        esi, esi
0000000000002b1c         sub        ecx, eax
0000000000002b1e         mov        rax, rdx
0000000000002b21         movsxd     rcx, ecx
0000000000002b24         mul        rcx
0000000000002b27         jo         loc_3b43

                     loc_2b2d:
0000000000002b2d         test       rax, rax                                    ; CODE XREF=main+5512
0000000000002b30         js         loc_3b13

0000000000002b36         test       rsi, rsi
0000000000002b39         jne        loc_3b13

0000000000002b3f         imul       rdi, rcx, 0x90                              ; argument #1 for method xmalloc
0000000000002b46         lea        rbp, qword [aNS+10]                         ; 0x10c77
0000000000002b4d         call       xmalloc                                     ; xmalloc
0000000000002b52         movsxd     r12, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002b59         mov        qword [rsp+0x178+var_168], r15
0000000000002b5e         mov        r13, rax
0000000000002b61         mov        r15, r14
0000000000002b64         mov        qword [rsp+0x178+var_118], rax
0000000000002b69         mov        r14, r12
0000000000002b6c         mov        r12d, dword [rsp+0x178+var_170]
0000000000002b71         jmp        loc_2bb3

                     loc_2b73:
0000000000002b73         sub        ebx, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+1573
0000000000002b79         movsxd     rax, ebx
0000000000002b7c         imul       rax, rax, 0x90
0000000000002b83         mov        eax, dword [r13+rax+0x18]
0000000000002b88         and        eax, 0xf000
0000000000002b8d         cmp        eax, 0x1000
0000000000002b92         je         loc_2baf

0000000000002b94         mov        rdi, qword [r15+r14*8]                      ; argument "__file" for method j_open
0000000000002b98         xor        eax, eax
0000000000002b9a         mov        esi, 0x100                                  ; argument "__oflag" for method j_open
0000000000002b9f         call       j_open                                      ; open
0000000000002ba4         test       eax, eax
0000000000002ba6         js         loc_2baf

0000000000002ba8         mov        edi, eax                                    ; argument "__fd" for method j_close
0000000000002baa         call       j_close                                     ; close

                     loc_2baf:
0000000000002baf         add        r14, 0x1                                    ; CODE XREF=main+1490, main+1510, main+1634

                     loc_2bb3:
0000000000002bb3         cmp        r14d, r12d                                  ; CODE XREF=main+1457
0000000000002bb6         mov        ebx, r14d
0000000000002bb9         jge        loc_2c61

0000000000002bbf         mov        edx, r14d
0000000000002bc2         sub        edx, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002bc8         mov        rsi, qword [r15+r14*8]                      ; argument "__filename" for method j___xstat
0000000000002bcc         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002bd1         movsxd     rdx, edx
0000000000002bd4         imul       rdx, rdx, 0x90
0000000000002bdb         add        rdx, r13                                    ; argument "__stat_buf" for method j___xstat
0000000000002bde         call       j___xstat                                   ; __xstat
0000000000002be3         test       eax, eax
0000000000002be5         je         loc_2b73

0000000000002be7         mov        rdx, qword [r15+r14*8]                      ; argument #3 for method quotearg_n_style_colon
0000000000002beb         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000002bf0         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
0000000000002bf2         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000002bf7         mov        rbx, rax
0000000000002bfa         call       j___errno_location                          ; __errno_location
0000000000002bff         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000002c01         mov        rcx, rbx
0000000000002c04         mov        rdx, rbp                                    ; argument "__format" for method j_error
0000000000002c07         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002c09         xor        eax, eax
0000000000002c0b         call       j_error                                     ; error
0000000000002c10         mov        dword [exit_status], 0x1                    ; exit_status
0000000000002c1a         mov        qword [r15+r14*8], 0x0
0000000000002c22         jmp        loc_2baf

                     loc_2c24:
0000000000002c24         test       bpl, bpl                                    ; CODE XREF=main+1111
0000000000002c27         je         loc_2cda

0000000000002c2d         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
0000000000002c34         mov        dword [human_output_opts], 0x0              ; human_output_opts
0000000000002c3e         call       j_getenv                                    ; getenv
0000000000002c43         cmp        rax, 0x1
0000000000002c47         sbb        rax, rax
0000000000002c4a         and        eax, 0x200
0000000000002c4f         add        rax, 0x200
0000000000002c55         mov        qword [output_block_size], rax              ; output_block_size
0000000000002c5c         jmp        loc_2a1d

                     loc_2c61:
0000000000002c61         mov        r14, r15                                    ; CODE XREF=main+1529
0000000000002c64         mov        r15, qword [rsp+0x178+var_168]

                     loc_2c69:
0000000000002c69         cmp        qword [fs_select_list], 0x0                 ; fs_select_list, CODE XREF=main+1355
0000000000002c71         mov        edi, 0x1
0000000000002c76         je         loc_3962

                     loc_2c7c:
0000000000002c7c         call       read_file_system_list                       ; read_file_system_list, CODE XREF=main+5034, main+5047, main+5060, main+5073
0000000000002c81         test       rax, rax
0000000000002c84         mov        qword [mount_list], rax                     ; mount_list
0000000000002c8b         je         loc_38e6

                     loc_2c91:
0000000000002c91         cmp        byte [require_sync], 0x0                    ; require_sync, CODE XREF=main+5021
0000000000002c98         je         loc_2c9f

0000000000002c9a         call       j_sync                                      ; sync

                     loc_2c9f:
0000000000002c9f         cmp        dword [header_mode], 0x4                    ; header_mode, CODE XREF=main+1752
0000000000002ca6         ja         loc_3b24

0000000000002cac         mov        eax, dword [header_mode]                    ; header_mode
0000000000002cb2         lea        rdx, qword [switch_table_f320]              ; switch_table_f320
0000000000002cb9         movsxd     rax, dword [rdx+rax*4]
0000000000002cbd         add        rax, rdx
0000000000002cc0         jmp        rax                                         ; switch statement using table at 0xf320, with 5 cases, 0x2d01,0x302f,0x3082,0x30e1,0x311e

                     loc_2cc2:
0000000000002cc2         test       bpl, bpl                                    ; CODE XREF=main+1140
0000000000002cc5         je         loc_2a44

0000000000002ccb         mov        dword [header_mode], 0x3                    ; header_mode
0000000000002cd5         jmp        loc_2a44

                     loc_2cda:
0000000000002cda         lea        rdi, qword [aDfblocksize]                   ; argument "__name" for method j_getenv, "DF_BLOCK_SIZE", CODE XREF=main+1639
0000000000002ce1         call       j_getenv                                    ; getenv
0000000000002ce6         lea        rdx, qword [output_block_size]              ; output_block_size
0000000000002ced         lea        rsi, qword [human_output_opts]              ; human_output_opts
0000000000002cf4         mov        rdi, rax
0000000000002cf7         call       human_options                               ; human_options
0000000000002cfc         jmp        loc_2a1d

                     loc_2d01:
0000000000002d01         xor        esi, esi                                    ; case 3, argument #2 for method alloc_field, CODE XREF=main+1792
0000000000002d03         xor        edi, edi                                    ; argument #1 for method alloc_field
0000000000002d05         call       alloc_field                                 ; alloc_field
0000000000002d0a         cmp        byte [print_type], 0x0                      ; print_type
0000000000002d11         je         loc_2d1f

0000000000002d13         xor        esi, esi                                    ; argument #2 for method alloc_field
0000000000002d15         mov        edi, 0x1                                    ; argument #1 for method alloc_field
0000000000002d1a         call       alloc_field                                 ; alloc_field

                     loc_2d1f:
0000000000002d1f         xor        esi, esi                                    ; argument #2 for method alloc_field, CODE XREF=main+1873
0000000000002d21         mov        edi, 0x2                                    ; argument #1 for method alloc_field
0000000000002d26         call       alloc_field                                 ; alloc_field
0000000000002d2b         xor        esi, esi                                    ; argument #2 for method alloc_field
0000000000002d2d         mov        edi, 0x3                                    ; argument #1 for method alloc_field
0000000000002d32         call       alloc_field                                 ; alloc_field
0000000000002d37         xor        esi, esi                                    ; argument #2 for method alloc_field
0000000000002d39         mov        edi, 0x4                                    ; argument #1 for method alloc_field
0000000000002d3e         call       alloc_field                                 ; alloc_field
0000000000002d43         lea        rsi, qword [aCapacity]                      ; "Capacity"

                     loc_2d4a:
0000000000002d4a         mov        edi, 0x5                                    ; argument #1 for method alloc_field, CODE XREF=main+2749
0000000000002d4f         call       alloc_field                                 ; alloc_field
0000000000002d54         xor        esi, esi                                    ; argument #2 for method alloc_field
0000000000002d56         mov        edi, 0xa                                    ; argument #1 for method alloc_field
0000000000002d5b         call       alloc_field                                 ; alloc_field

                     loc_2d60:
0000000000002d60         call       get_header                                  ; get_header, CODE XREF=main+2844, main+2918, main+2936
0000000000002d65         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002d6c         cmp        eax, dword [rsp+0x178+var_170]
0000000000002d70         jge        loc_35b8

0000000000002d76         mov        qword [rsp+0x178+var_168], rax
0000000000002d7b         lea        rax, qword [rsp+0x178+var_D8]
0000000000002d83         mov        byte [show_listed_fs], 0x1                  ; show_listed_fs
0000000000002d8a         mov        qword [rsp+0x178+var_138], r14
0000000000002d8f         mov        qword [rsp+0x178+var_100], r15
0000000000002d94         mov        qword [rsp+0x178+var_130], rax

                     loc_2d99:
0000000000002d99         mov        rcx, qword [rsp+0x178+var_138]              ; CODE XREF=main+3025
0000000000002d9e         mov        rax, qword [rsp+0x178+var_168]
0000000000002da3         mov        rcx, qword [rcx+rax*8]
0000000000002da7         test       rcx, rcx
0000000000002daa         mov        rbx, rcx
0000000000002dad         mov        qword [rsp+0x178+var_148], rcx
0000000000002db2         je         loc_3182

0000000000002db8         sub        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5
0000000000002dbe         cdqe
0000000000002dc0         imul       rax, rax, 0x90
0000000000002dc7         add        rax, qword [rsp+0x178+var_118]
0000000000002dcc         mov        qword [rsp+0x178+var_128], rax
0000000000002dd1         mov        eax, dword [rax+0x18]
0000000000002dd4         mov        dword [rsp+0x178+var_160], eax
0000000000002dd8         and        eax, xstrdup
0000000000002ddd         cmp        eax, 0x2000
0000000000002de2         jne        loc_2f66

0000000000002de8         mov        rdi, rcx                                    ; argument "__name" for method j_canonicalize_file_name
0000000000002deb         call       j_canonicalize_file_name                    ; canonicalize_file_name
0000000000002df0         test       rax, rax
0000000000002df3         mov        qword [rsp+0x178+var_110], rax
0000000000002df8         je         loc_38d7

0000000000002dfe         cmp        byte [rax], 0x2f
0000000000002e01         cmove      rbx, rax
0000000000002e05         mov        qword [rsp+0x178+var_160], rbx

                     loc_2e0a:
0000000000002e0a         mov        rbx, qword [mount_list]                     ; mount_list, CODE XREF=main+4897
0000000000002e11         test       rbx, rbx
0000000000002e14         je         loc_3a78

0000000000002e1a         xor        r14d, r14d
0000000000002e1d         mov        qword [rsp+0x178+var_120], 0x0
0000000000002e26         mov        qword [rsp+0x178+var_140], 0xffffffffffffffff
0000000000002e2f         mov        byte [rsp+0x178+var_158], 0x0
0000000000002e34         nop        dword [rax]

                     loc_2e38:
0000000000002e38         mov        rbp, qword [rbx]                            ; CODE XREF=main+2433
0000000000002e3b         mov        rdi, rbp                                    ; argument "__name" for method j_canonicalize_file_name
0000000000002e3e         call       j_canonicalize_file_name                    ; canonicalize_file_name
0000000000002e43         test       rax, rax
0000000000002e46         mov        r12, rax
0000000000002e49         je         loc_2e52

0000000000002e4b         cmp        byte [rax], 0x2f
0000000000002e4e         cmove      rbp, rax

                     loc_2e52:
0000000000002e52         mov        rdi, qword [rsp+0x178+var_160]              ; argument "__s1" for method j_strcmp, CODE XREF=main+2185
0000000000002e57         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp
0000000000002e5a         call       j_strcmp                                    ; strcmp
0000000000002e5f         test       eax, eax
0000000000002e61         jne        loc_2f32

0000000000002e67         mov        r14, qword [mount_list]                     ; mount_list
0000000000002e6e         xor        r15d, r15d
0000000000002e71         mov        r13, qword [rbx+8]
0000000000002e75         test       r14, r14
0000000000002e78         je         loc_3316

0000000000002e7e         nop

                     loc_2e80:
0000000000002e80         mov        rdi, qword [r14+8]                          ; argument "__s1" for method j_strcmp, CODE XREF=main+2265
0000000000002e84         mov        rsi, r13                                    ; argument "__s2" for method j_strcmp
0000000000002e87         call       j_strcmp                                    ; strcmp
0000000000002e8c         test       eax, eax
0000000000002e8e         cmove      r15, r14
0000000000002e92         mov        r14, qword [r14+0x30]
0000000000002e96         test       r14, r14
0000000000002e99         jne        loc_2e80

0000000000002e9b         test       r15, r15
0000000000002e9e         je         loc_3316

0000000000002ea4         mov        rdi, qword [r15]                            ; argument "__name" for method j_canonicalize_file_name
0000000000002ea7         call       j_canonicalize_file_name                    ; canonicalize_file_name
0000000000002eac         test       rax, rax
0000000000002eaf         mov        r8, rax
0000000000002eb2         je         loc_2eb9

0000000000002eb4         cmp        byte [rax], 0x2f
0000000000002eb7         je         loc_2ed5

                     loc_2eb9:
0000000000002eb9         mov        rdi, r8                                     ; argument "__ptr" for method j_free, CODE XREF=main+2290
0000000000002ebc         call       j_free                                      ; free
0000000000002ec1         mov        rdi, qword [r15]                            ; argument #1 for method xstrdup
0000000000002ec4         call       xstrdup                                     ; xstrdup
0000000000002ec9         test       rax, rax
0000000000002ecc         mov        r8, rax
0000000000002ecf         je         loc_3312

                     loc_2ed5:
0000000000002ed5         mov        rdi, r8                                     ; argument "__s1" for method j_strcmp, CODE XREF=main+2295
0000000000002ed8         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp
0000000000002edb         mov        qword [rsp+0x178+var_150], r8
0000000000002ee0         call       j_strcmp                                    ; strcmp
0000000000002ee5         test       eax, eax
0000000000002ee7         mov        r8, qword [rsp+0x178+var_150]
0000000000002eec         jne        loc_331e

0000000000002ef2         mov        r13, qword [rbx+8]

                     loc_2ef6:
0000000000002ef6         or         rcx, 0xffffffffffffffff                     ; CODE XREF=main+3417
0000000000002efa         xor        eax, eax
0000000000002efc         mov        rdi, r13
0000000000002eff         repne scasb al, byte [rdi]
0000000000002f01         not        rcx
0000000000002f04         lea        rbp, qword [rcx-1]
0000000000002f08         movzx      ecx, byte [rsp+0x178+var_158]
0000000000002f0d         xor        ecx, 0x1
0000000000002f10         cmp        rbp, qword [rsp+0x178+var_140]
0000000000002f15         mov        r14d, ecx
0000000000002f18         setb       r9b
0000000000002f1c         or         r14b, r9b
0000000000002f1f         jne        loc_3329

0000000000002f25         mov        byte [rsp+0x178+var_158], 0x1

                     loc_2f2a:
0000000000002f2a         mov        rdi, r8                                     ; argument "__ptr" for method j_free, CODE XREF=main+3428, main+3533
0000000000002f2d         call       j_free                                      ; free

                     loc_2f32:
0000000000002f32         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=main+2209
0000000000002f35         call       j_free                                      ; free
0000000000002f3a         mov        rbx, qword [rbx+0x30]
0000000000002f3e         test       rbx, rbx
0000000000002f41         jne        loc_2e38

0000000000002f47         mov        rdi, qword [rsp+0x178+var_110]              ; argument "__ptr" for method j_free
0000000000002f4c         call       j_free                                      ; free
0000000000002f51         cmp        qword [rsp+0x178+var_120], 0x0
0000000000002f57         jne        loc_348c

0000000000002f5d         test       r14b, r14b
0000000000002f60         jne        loc_39b6

                     loc_2f66:
0000000000002f66         mov        rdi, qword [rsp+0x178+var_148]              ; argument "__name" for method j_canonicalize_file_name, CODE XREF=main+2082, main+5314
0000000000002f6b         call       j_canonicalize_file_name                    ; canonicalize_file_name
0000000000002f70         test       rax, rax
0000000000002f73         mov        r15, rax
0000000000002f76         mov        r12, qword [mount_list]                     ; mount_list
0000000000002f7d         je         loc_2f88

0000000000002f7f         cmp        byte [rax], 0x2f
0000000000002f82         je         loc_34ce

                     loc_2f88:
0000000000002f88         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=main+2493
0000000000002f8b         call       j_free                                      ; free

                     loc_2f90:
0000000000002f90         test       r12, r12                                    ; CODE XREF=main+4028, main+4055, main+4077
0000000000002f93         je         loc_313d

0000000000002f99         xor        ebx, ebx
0000000000002f9b         mov        rbp, 0xfffffffffffffffe
0000000000002fa2         mov        r13, qword [rsp+0x178+var_128]
0000000000002fa7         jmp        loc_2fbe
0000000000002fa9         align      16

                     loc_2fb0:
0000000000002fb0         mov        r12, qword [r12+0x30]                       ; CODE XREF=main+2579, main+2600, main+2619, main+2669, main+5245
0000000000002fb5         test       r12, r12
0000000000002fb8         je         loc_33c7

                     loc_2fbe:
0000000000002fbe         cmp        qword [r12+0x20], 0xffffffffffffffff        ; CODE XREF=main+2535
0000000000002fc4         je         loc_3392

                     loc_2fca:
0000000000002fca         mov        rax, qword [r12+0x20]                       ; CODE XREF=main+3575, main+3703
0000000000002fcf         cmp        qword [r13], rax
0000000000002fd3         jne        loc_2fb0

0000000000002fd5         mov        rdi, qword [r12+0x18]                       ; argument "__s1" for method j_strcmp
0000000000002fda         lea        rsi, qword [aInvalidHeaderm+23]             ; argument "__s2" for method j_strcmp, 0xf1e9
0000000000002fe1         call       j_strcmp                                    ; strcmp
0000000000002fe6         test       eax, eax
0000000000002fe8         je         loc_2fb0

0000000000002fea         test       rbx, rbx
0000000000002fed         je         loc_2ffd

0000000000002fef         test       byte [rbx+0x28], 0x1
0000000000002ff3         jne        loc_2ffd

0000000000002ff5         test       byte [r12+0x28], 0x1
0000000000002ffb         jne        loc_2fb0

                     loc_2ffd:
0000000000002ffd         mov        rsi, qword [r12+8]                          ; argument "__filename" for method j___xstat, CODE XREF=main+2605, main+2611
0000000000003002         mov        rdx, qword [rsp+0x178+var_130]              ; argument "__stat_buf" for method j___xstat
0000000000003007         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
000000000000300c         call       j___xstat                                   ; __xstat
0000000000003011         test       eax, eax
0000000000003013         jne        loc_3028

0000000000003015         mov        rax, qword [r12+0x20]
000000000000301a         cmp        qword [rsp+0x178+var_D8], rax
0000000000003022         je         loc_3a3a

                     loc_3028:
0000000000003028         mov        qword [r12+0x20], rbp                       ; CODE XREF=main+2643
000000000000302d         jmp        loc_2fb0

                     loc_302f:
000000000000302f         xor        esi, esi                                    ; case 2, argument #2 for method alloc_field, CODE XREF=main+1792
0000000000003031         xor        edi, edi                                    ; argument #1 for method alloc_field
0000000000003033         call       alloc_field                                 ; alloc_field
0000000000003038         cmp        byte [print_type], 0x0                      ; print_type
000000000000303f         je         loc_304d

0000000000003041         xor        esi, esi                                    ; argument #2 for method alloc_field
0000000000003043         mov        edi, 0x1                                    ; argument #1 for method alloc_field
0000000000003048         call       alloc_field                                 ; alloc_field

                     loc_304d:
000000000000304d         lea        rsi, qword [aFullDocumentat+27]             ; argument #2 for method alloc_field, 0xf115, CODE XREF=main+2687
0000000000003054         mov        edi, 0x2                                    ; argument #1 for method alloc_field
0000000000003059         call       alloc_field                                 ; alloc_field
000000000000305e         xor        esi, esi                                    ; argument #2 for method alloc_field
0000000000003060         mov        edi, 0x3                                    ; argument #1 for method alloc_field
0000000000003065         call       alloc_field                                 ; alloc_field
000000000000306a         lea        rsi, qword [aAvail]                         ; "Avail"

                     loc_3071:
0000000000003071         mov        edi, 0x4                                    ; argument #1 for method alloc_field, CODE XREF=main+2905
0000000000003076         call       alloc_field                                 ; alloc_field
000000000000307b         xor        esi, esi
000000000000307d         jmp        loc_2d4a

                     loc_3082:
0000000000003082         xor        esi, esi                                    ; case 1, argument #2 for method alloc_field, CODE XREF=main+1792
0000000000003084         xor        edi, edi                                    ; argument #1 for method alloc_field
0000000000003086         call       alloc_field                                 ; alloc_field
000000000000308b         cmp        byte [print_type], 0x0                      ; print_type
0000000000003092         je         loc_30a0

0000000000003094         xor        esi, esi                                    ; argument #2 for method alloc_field
0000000000003096         mov        edi, 0x1                                    ; argument #1 for method alloc_field
000000000000309b         call       alloc_field                                 ; alloc_field

                     loc_30a0:
00000000000030a0         xor        esi, esi                                    ; argument #2 for method alloc_field, CODE XREF=main+2770
00000000000030a2         mov        edi, 0x6                                    ; argument #1 for method alloc_field
00000000000030a7         call       alloc_field                                 ; alloc_field
00000000000030ac         xor        esi, esi                                    ; argument #2 for method alloc_field
00000000000030ae         mov        edi, 0x7                                    ; argument #1 for method alloc_field
00000000000030b3         call       alloc_field                                 ; alloc_field
00000000000030b8         xor        esi, esi                                    ; argument #2 for method alloc_field
00000000000030ba         mov        edi, 0x8                                    ; argument #1 for method alloc_field
00000000000030bf         call       alloc_field                                 ; alloc_field
00000000000030c4         xor        esi, esi                                    ; argument #2 for method alloc_field
00000000000030c6         mov        edi, 0x9                                    ; argument #1 for method alloc_field
00000000000030cb         call       alloc_field                                 ; alloc_field
00000000000030d0         xor        esi, esi                                    ; argument #2 for method alloc_field
00000000000030d2         mov        edi, 0xa                                    ; argument #1 for method alloc_field
00000000000030d7         call       alloc_field                                 ; alloc_field
00000000000030dc         jmp        loc_2d60

                     loc_30e1:
00000000000030e1         xor        esi, esi                                    ; case 0, argument #2 for method alloc_field, CODE XREF=main+1792
00000000000030e3         xor        edi, edi                                    ; argument #1 for method alloc_field
00000000000030e5         call       alloc_field                                 ; alloc_field
00000000000030ea         cmp        byte [print_type], 0x0                      ; print_type
00000000000030f1         je         loc_30ff

00000000000030f3         xor        esi, esi                                    ; argument #2 for method alloc_field
00000000000030f5         mov        edi, 0x1                                    ; argument #1 for method alloc_field
00000000000030fa         call       alloc_field                                 ; alloc_field

                     loc_30ff:
00000000000030ff         xor        esi, esi                                    ; argument #2 for method alloc_field, CODE XREF=main+2865
0000000000003101         mov        edi, 0x2                                    ; argument #1 for method alloc_field
0000000000003106         call       alloc_field                                 ; alloc_field
000000000000310b         xor        esi, esi                                    ; argument #2 for method alloc_field
000000000000310d         mov        edi, 0x3                                    ; argument #1 for method alloc_field
0000000000003112         call       alloc_field                                 ; alloc_field
0000000000003117         xor        esi, esi
0000000000003119         jmp        loc_3071

                     loc_311e:
000000000000311e         cmp        qword [ncolumns], 0x0                       ; case 4, ncolumns, CODE XREF=main+1792
0000000000003126         jne        loc_2d60

000000000000312c         lea        rdi, qword [aSourcefstypeit]                ; argument #1 for method decode_output_arg, "source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target"
0000000000003133         call       decode_output_arg                           ; decode_output_arg
0000000000003138         jmp        loc_2d60

                     loc_313d:
000000000000313d         mov        r15, qword [rsp+0x178+var_148]              ; CODE XREF=main+2515, main+3594
0000000000003142         mov        rsi, qword [rsp+0x178+var_128]
0000000000003147         mov        rdi, r15
000000000000314a         call       find_mount_point                            ; find_mount_point
000000000000314f         test       rax, rax
0000000000003152         mov        rbx, rax
0000000000003155         je         loc_3182

0000000000003157         sub        rsp, 0x8
000000000000315b         xor        edi, edi                                    ; argument #1 for method get_dev
000000000000315d         xor        r9d, r9d                                    ; argument #6 for method get_dev
0000000000003160         push       0x0                                         ; argument #9 for method get_dev
0000000000003162         push       0x0                                         ; argument #8 for method get_dev
0000000000003164         xor        r8d, r8d                                    ; argument #5 for method get_dev
0000000000003167         push       0x0                                         ; argument #7 for method get_dev
0000000000003169         xor        ecx, ecx                                    ; argument #4 for method get_dev
000000000000316b         mov        rdx, r15                                    ; argument #3 for method get_dev
000000000000316e         mov        rsi, rax                                    ; argument #2 for method get_dev
0000000000003171         call       get_dev                                     ; get_dev
0000000000003176         add        rsp, 0x20
000000000000317a         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000317d         call       j_free                                      ; free

                     loc_3182:
0000000000003182         add        qword [rsp+0x178+var_168], 0x1              ; CODE XREF=main+2034, main+2965, main+3654, main+3849, main+5174
0000000000003188         mov        rax, qword [rsp+0x178+var_168]
000000000000318d         cmp        dword [rsp+0x178+var_170], eax
0000000000003191         jg         loc_2d99

0000000000003197         mov        r15, qword [rsp+0x178+var_100]

                     loc_319c:
000000000000319c         cmp        byte [file_systems_processed], 0x0          ; file_systems_processed, CODE XREF=main+4871
00000000000031a3         je         loc_343c

00000000000031a9         cmp        byte [print_grand_total], 0x0               ; print_grand_total
00000000000031b0         je         loc_31ee

00000000000031b2         cmp        byte [byte_21404c], 0x0                     ; byte_21404c
00000000000031b9         lea        rdi, qword [aTotal]                         ; argument #1 for method get_dev, "total"
00000000000031c0         lea        rsi, qword [aSsArgumentSToo+30]             ; 0x10959
00000000000031c7         lea        rax, qword [grand_fsu]                      ; grand_fsu
00000000000031ce         cmove      rsi, rdi                                    ; argument #2 for method get_dev
00000000000031d2         sub        rsp, 0x8
00000000000031d6         xor        r9d, r9d                                    ; argument #6 for method get_dev
00000000000031d9         push       0x0                                         ; argument #9 for method get_dev
00000000000031db         push       rax                                         ; argument #8 for method get_dev
00000000000031dc         xor        r8d, r8d                                    ; argument #5 for method get_dev
00000000000031df         push       0x0                                         ; argument #7 for method get_dev
00000000000031e1         xor        ecx, ecx                                    ; argument #4 for method get_dev
00000000000031e3         xor        edx, edx                                    ; argument #3 for method get_dev
00000000000031e5         call       get_dev                                     ; get_dev
00000000000031ea         add        rsp, 0x20

                     loc_31ee:
00000000000031ee         xor        r13d, r13d                                  ; CODE XREF=main+3056

                     loc_31f1:
00000000000031f1         cmp        r13, qword [nrows]                          ; nrows, CODE XREF=main+3405
00000000000031f8         jae        loc_33bc

00000000000031fe         mov        rax, qword [ncolumns]                       ; ncolumns
0000000000003205         test       rax, rax
0000000000003208         je         loc_32e9

000000000000320e         mov        rdx, qword [table]                          ; table
0000000000003215         lea        r12, qword [r13*8]
000000000000321d         xor        ebx, ebx
000000000000321f         mov        rdx, qword [rdx+r13*8]
0000000000003223         mov        r14, qword [rdx]
0000000000003226         nop        word [cs:rax+rax]

                     loc_3230:
0000000000003230         sub        rax, 0x1                                    ; CODE XREF=main+3310, main+3344, main+3676
0000000000003234         xor        ecx, ecx
0000000000003236         mov        rdi, r14
0000000000003239         cmp        rax, rbx
000000000000323c         mov        rax, qword [columns]                        ; columns
0000000000003243         mov        rsi, r15
0000000000003246         sete       cl
0000000000003249         lea        rbp, qword [rbx*8]
0000000000003251         shl        ecx, 0x3
0000000000003254         mov        rax, qword [rax+rbx*8]
0000000000003258         mov        rdx, qword [rax+0x20]
000000000000325c         mov        qword [rsp+0x178+var_F8], rdx
0000000000003264         mov        edx, dword [rax+0x28]
0000000000003267         call       ambsalign                                   ; ambsalign
000000000000326c         test       rax, rax
000000000000326f         mov        r14, rax
0000000000003272         mov        rsi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003279         mov        rdi, rax
000000000000327c         je         loc_32d8

                     loc_327e:
000000000000327e         call       j_fputs_unlocked                            ; fputs_unlocked, CODE XREF=main+3367
0000000000003283         mov        rdi, r14                                    ; argument "__ptr" for method j_free
0000000000003286         add        rbx, 0x1
000000000000328a         call       j_free                                      ; free
000000000000328f         mov        rax, qword [ncolumns]                       ; ncolumns
0000000000003296         cmp        rbx, rax
0000000000003299         jae        loc_32e9

000000000000329b         mov        rdx, qword [table]                          ; table
00000000000032a2         test       rbx, rbx
00000000000032a5         mov        rdx, qword [rdx+r12]
00000000000032a9         mov        r14, qword [rdx+rbp+8]
00000000000032ae         je         loc_3230

00000000000032b0         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000032b7         mov        rdx, qword [rdi+0x28]
00000000000032bb         cmp        rdx, qword [rdi+0x30]
00000000000032bf         jae        loc_340b

00000000000032c5         lea        rcx, qword [rdx+1]
00000000000032c9         mov        qword [rdi+0x28], rcx
00000000000032cd         mov        byte [rdx], 0x20
00000000000032d0         jmp        loc_3230
00000000000032d5         align      8

                     loc_32d8:
00000000000032d8         mov        rax, qword [table]                          ; table, CODE XREF=main+3260
00000000000032df         mov        rax, qword [rax+r12]
00000000000032e3         mov        rdi, qword [rax+rbx*8]
00000000000032e7         jmp        loc_327e

                     loc_32e9:
00000000000032e9         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=main+3144, main+3289
00000000000032f0         mov        rax, qword [rdi+0x28]
00000000000032f4         cmp        rax, qword [rdi+0x30]
00000000000032f8         jae        loc_3996

00000000000032fe         lea        rdx, qword [rax+1]
0000000000003302         mov        qword [rdi+0x28], rdx
0000000000003306         mov        byte [rax], 0xa

                     loc_3309:
0000000000003309         add        r13, 0x1                                    ; CODE XREF=main+5088
000000000000330d         jmp        loc_31f1

                     loc_3312:
0000000000003312         mov        r13, qword [rbx+8]                          ; CODE XREF=main+2319

                     loc_3316:
0000000000003316         xor        r8d, r8d                                    ; CODE XREF=main+2232, main+2270
0000000000003319         jmp        loc_2ef6

                     loc_331e:
000000000000331e         mov        r14d, 0x1                                   ; CODE XREF=main+2348
0000000000003324         jmp        loc_2f2a

                     loc_3329:
0000000000003329         mov        rdx, qword [rsp+0x178+var_130]              ; argument "__stat_buf" for method j___xstat, CODE XREF=main+2399
000000000000332e         mov        rsi, r13                                    ; argument "__filename" for method j___xstat
0000000000003331         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000003336         mov        qword [rsp+0x178+var_150], r8
000000000000333b         mov        byte [rsp+0x178+var_101], r9b
0000000000003340         mov        byte [rsp+0x178+var_102], cl
0000000000003344         call       j___xstat                                   ; __xstat
0000000000003349         test       eax, eax
000000000000334b         mov        r8, qword [rsp+0x178+var_150]
0000000000003350         je         loc_3371

0000000000003352         movzx      ecx, byte [rsp+0x178+var_102]
0000000000003357         test       cl, cl
0000000000003359         je         loc_38cc

000000000000335f         movzx      r9d, byte [rsp+0x178+var_101]
0000000000003365         test       r9b, r9b
0000000000003368         je         loc_38cc

000000000000336e         xor        r14d, r14d

                     loc_3371:
0000000000003371         cmp        rbp, 0x1                                    ; CODE XREF=main+3472
0000000000003375         je         loc_346d

000000000000337b         mov        qword [rsp+0x178+var_140], rbp
0000000000003380         mov        qword [rsp+0x178+var_120], rbx

                     loc_3385:
0000000000003385         mov        byte [rsp+0x178+var_158], r14b              ; CODE XREF=main+4882
000000000000338a         xor        r14d, r14d
000000000000338d         jmp        loc_2f2a

                     loc_3392:
0000000000003392         mov        rsi, qword [r12+8]                          ; argument "__filename" for method j___xstat, CODE XREF=main+2564
0000000000003397         mov        rdx, qword [rsp+0x178+var_130]              ; argument "__stat_buf" for method j___xstat
000000000000339c         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000033a1         call       j___xstat                                   ; __xstat
00000000000033a6         test       eax, eax
00000000000033a8         jne        loc_3421

00000000000033aa         mov        rax, qword [rsp+0x178+var_D8]
00000000000033b2         mov        qword [r12+0x20], rax
00000000000033b7         jmp        loc_2fca

                     loc_33bc:
00000000000033bc         mov        eax, dword [exit_status]                    ; exit_status, CODE XREF=main+3128, main+3715
00000000000033c2         jmp        loc_2ad8

                     loc_33c7:
00000000000033c7         test       rbx, rbx                                    ; CODE XREF=main+2552
00000000000033ca         je         loc_313d

                     loc_33d0:
00000000000033d0         movzx      r9d, byte [rbx+0x28]                        ; CODE XREF=main+4083
00000000000033d5         sub        rsp, 0x8
00000000000033d9         mov        rsi, qword [rbx+8]                          ; argument #2 for method get_dev
00000000000033dd         push       0x0                                         ; argument #9 for method get_dev
00000000000033df         push       0x0                                         ; argument #8 for method get_dev
00000000000033e1         mov        r8, qword [rbx+0x18]                        ; argument #5 for method get_dev
00000000000033e5         mov        rdi, qword [rbx]                            ; argument #1 for method get_dev
00000000000033e8         mov        eax, r9d
00000000000033eb         and        r9d, 0x1                                    ; argument #6 for method get_dev
00000000000033ef         shr        al, 0x1
00000000000033f1         and        eax, 0x1
00000000000033f4         push       rax                                         ; argument #7 for method get_dev
00000000000033f5         mov        rdx, qword [rsp+0x198+var_148]              ; argument #3 for method get_dev
00000000000033fa         mov        rcx, rdx                                    ; argument #4 for method get_dev
00000000000033fd         call       get_dev                                     ; get_dev
0000000000003402         add        rsp, 0x20
0000000000003406         jmp        loc_3182

                     loc_340b:
000000000000340b         mov        esi, 0x20                                   ; argument #2 for method j___overflow, CODE XREF=main+3327
0000000000003410         call       j___overflow                                ; __overflow
0000000000003415         mov        rax, qword [ncolumns]                       ; ncolumns
000000000000341c         jmp        loc_3230

                     loc_3421:
0000000000003421         call       j___errno_location                          ; __errno_location, CODE XREF=main+3560
0000000000003426         cmp        dword [rax], 0x5
0000000000003429         mov        r14, rax
000000000000342c         je         loc_3a42

                     loc_3432:
0000000000003432         mov        qword [r12+0x20], rbp                       ; CODE XREF=main+5299
0000000000003437         jmp        loc_2fca

                     loc_343c:
000000000000343c         cmp        dword [exit_status], 0x0                    ; exit_status, CODE XREF=main+3043
0000000000003443         jne        loc_33bc

0000000000003449         lea        rsi, qword [aNoFileSystemsP]                ; argument "msgid" for method j_dcgettext, "no file systems processed"
0000000000003450         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003455         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003457         call       j_dcgettext                                 ; dcgettext
000000000000345c         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000345e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003461         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003466         xor        eax, eax
0000000000003468         call       j_error                                     ; error

                     loc_346d:
000000000000346d         mov        rdi, r8                                     ; argument "__ptr" for method j_free, CODE XREF=main+3509
0000000000003470         call       j_free                                      ; free
0000000000003475         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000003478         call       j_free                                      ; free
000000000000347d         mov        rdi, qword [rsp+0x178+var_110]              ; argument "__ptr" for method j_free
0000000000003482         call       j_free                                      ; free
0000000000003487         mov        qword [rsp+0x178+var_120], rbx

                     loc_348c:
000000000000348c         mov        rcx, qword [rsp+0x178+var_120]              ; CODE XREF=main+2455
0000000000003491         sub        rsp, 0x8
0000000000003495         movzx      r9d, byte [rcx+0x28]
000000000000349a         mov        rsi, qword [rcx+8]                          ; argument #2 for method get_dev
000000000000349e         push       0x0                                         ; argument #9 for method get_dev
00000000000034a0         push       0x0                                         ; argument #8 for method get_dev
00000000000034a2         mov        r8, qword [rcx+0x18]                        ; argument #5 for method get_dev
00000000000034a6         mov        eax, r9d
00000000000034a9         and        r9d, 0x1                                    ; argument #6 for method get_dev
00000000000034ad         shr        al, 0x1
00000000000034af         and        eax, 0x1
00000000000034b2         push       rax                                         ; argument #7 for method get_dev
00000000000034b3         mov        rax, rcx
00000000000034b6         mov        rdx, qword [rsp+0x198+var_148]              ; argument #3 for method get_dev
00000000000034bb         mov        rdi, qword [rax]                            ; argument #1 for method get_dev
00000000000034be         xor        ecx, ecx                                    ; argument #4 for method get_dev
00000000000034c0         call       get_dev                                     ; get_dev
00000000000034c5         add        rsp, 0x20
00000000000034c9         jmp        loc_3182

                     loc_34ce:
00000000000034ce         or         r13, 0xffffffffffffffff                     ; CODE XREF=main+2498
00000000000034d2         xor        eax, eax
00000000000034d4         mov        rdi, r15
00000000000034d7         mov        rcx, r13
00000000000034da         mov        rbp, r12
00000000000034dd         xor        ebx, ebx
00000000000034df         repne scasb al, byte [rdi]
00000000000034e1         xor        r14d, r14d
00000000000034e4         mov        qword [rsp+0x178+var_160], 0x0
00000000000034ed         mov        rax, rcx
00000000000034f0         not        rax
00000000000034f3         add        rax, r13
00000000000034f6         mov        qword [rsp+0x178+var_158], rax
00000000000034fb         jmp        loc_356c

                     loc_34fd:
00000000000034fd         mov        rdi, qword [rbp+0x18]                       ; argument "__s1" for method j_strcmp, CODE XREF=main+4015
0000000000003501         lea        rsi, qword [aInvalidHeaderm+23]             ; argument "__s2" for method j_strcmp, 0xf1e9
0000000000003508         call       j_strcmp                                    ; strcmp
000000000000350d         test       eax, eax
000000000000350f         je         loc_3568

0000000000003511         test       rbx, rbx
0000000000003514         je         loc_3522

0000000000003516         test       byte [rbx+0x28], 0x1
000000000000351a         jne        loc_3522

000000000000351c         test       byte [rbp+0x28], 0x1
0000000000003520         jne        loc_3568

                     loc_3522:
0000000000003522         mov        r9, qword [rbp+8]                           ; CODE XREF=main+3924, main+3930
0000000000003526         mov        rcx, r13
0000000000003529         mov        eax, r14d
000000000000352c         mov        rdi, r9
000000000000352f         repne scasb al, byte [rdi]
0000000000003531         not        rcx
0000000000003534         lea        r10, qword [rcx-1]
0000000000003538         cmp        r10, qword [rsp+0x178+var_160]
000000000000353d         jb         loc_3568

000000000000353f         mov        rax, qword [rsp+0x178+var_158]
0000000000003544         cmp        rax, r10
0000000000003547         jb         loc_3568

0000000000003549         cmp        r10, 0x1
000000000000354d         je         loc_3a29

0000000000003553         cmp        rax, r10
0000000000003556         je         loc_39fb

000000000000355c         cmp        byte [r15+rcx-1], 0x2f
0000000000003562         je         loc_39fb

                     loc_3568:
0000000000003568         mov        rbp, qword [rbp+0x30]                       ; CODE XREF=main+3919, main+3936, main+3965, main+3975, main+5220, main+5237

                     loc_356c:
000000000000356c         test       rbp, rbp                                    ; CODE XREF=main+3899
000000000000356f         jne        loc_34fd

0000000000003571         mov        rdi, r15                                    ; argument "__ptr" for method j_free
0000000000003574         call       j_free                                      ; free
0000000000003579         test       rbx, rbx
000000000000357c         je         loc_2f90

0000000000003582         mov        rsi, qword [rbx+8]                          ; argument "__filename" for method j___xstat
0000000000003586         mov        rdx, qword [rsp+0x178+var_130]              ; argument "__stat_buf" for method j___xstat
000000000000358b         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000003590         call       j___xstat                                   ; __xstat
0000000000003595         test       eax, eax
0000000000003597         jne        loc_2f90

000000000000359d         mov        rax, qword [rsp+0x178+var_128]
00000000000035a2         mov        rax, qword [rax]
00000000000035a5         cmp        qword [rsp+0x178+var_D8], rax
00000000000035ad         jne        loc_2f90

00000000000035b3         jmp        loc_33d0

                     loc_35b8:
00000000000035b8         movzx      ebp, byte [show_all_fs]                     ; show_all_fs, CODE XREF=main+1968
00000000000035bf         mov        rax, qword [mount_list]                     ; mount_list
00000000000035c6         xor        edx, edx
00000000000035c8         jmp        loc_35d1

                     loc_35ca:
00000000000035ca         mov        rax, qword [rax+0x30]                       ; CODE XREF=main+4116
00000000000035ce         add        edx, 0x1

                     loc_35d1:
00000000000035d1         test       rax, rax                                    ; CODE XREF=main+4104
00000000000035d4         jne        loc_35ca

00000000000035d6         movsxd     rdi, edx                                    ; argument #1 for method hash_initialize
00000000000035d9         lea        r8, qword [devlist_free]                    ; argument #5 for method hash_initialize, devlist_free
00000000000035e0         lea        rcx, qword [devlist_compare]                ; argument #4 for method hash_initialize, devlist_compare
00000000000035e7         lea        rdx, qword [devlist_hash]                   ; argument #3 for method hash_initialize, devlist_hash
00000000000035ee         xor        esi, esi                                    ; argument #2 for method hash_initialize
00000000000035f0         call       hash_initialize                             ; hash_initialize
00000000000035f5         test       rax, rax
00000000000035f8         mov        qword [devlist_table], rax                  ; devlist_table
00000000000035ff         je         loc_3b13

0000000000003605         lea        rax, qword [rsp+0x178+var_D8]
000000000000360d         mov        r13, qword [mount_list]                     ; mount_list
0000000000003614         xor        ebx, ebx
0000000000003616         mov        qword [rsp+0x178+var_170], rax
000000000000361b         jmp        loc_366a

                     loc_361d:
000000000000361d         mov        rax, qword [r13+0x20]                       ; CODE XREF=main+4291, main+4313, main+4329, main+4348, main+4376
0000000000003621         mov        qword [rsp+0x178+var_D8], rax

                     loc_3629:
0000000000003629         mov        edi, 0x18                                   ; argument #1 for method xmalloc, CODE XREF=main+4392, main+4430, main+4628
000000000000362e         call       xmalloc                                     ; xmalloc
0000000000003633         mov        r12, rax
0000000000003636         mov        qword [rax+8], r13
000000000000363a         mov        rax, qword [rsp+0x178+var_D8]
0000000000003642         mov        rdi, qword [devlist_table]                  ; argument #1 for method hash_insert, devlist_table
0000000000003649         mov        qword [r12+0x10], rbx
000000000000364e         mov        rsi, r12                                    ; argument #2 for method hash_insert
0000000000003651         mov        qword [r12], rax
0000000000003655         call       hash_insert                                 ; hash_insert
000000000000365a         test       rax, rax
000000000000365d         je         loc_3b13

0000000000003663         mov        r13, qword [r13+0x30]
0000000000003667         mov        rbx, r12

                     loc_366a:
000000000000366a         test       r13, r13                                    ; CODE XREF=main+4187, main+4709, main+4723
000000000000366d         je         loc_3838

0000000000003673         movzx      eax, byte [r13+0x28]
0000000000003678         test       al, 0x2
000000000000367a         je         loc_3685

000000000000367c         cmp        byte [show_local_fs], 0x0                   ; show_local_fs
0000000000003683         jne        loc_361d

                     loc_3685:
0000000000003685         test       al, 0x1                                     ; CODE XREF=main+4282
0000000000003687         je         loc_369b

0000000000003689         cmp        byte [show_all_fs], 0x0                     ; show_all_fs
0000000000003690         jne        loc_369b

0000000000003692         cmp        byte [show_listed_fs], 0x0                  ; show_listed_fs
0000000000003699         je         loc_361d

                     loc_369b:
000000000000369b         mov        r12, qword [r13+0x18]                       ; CODE XREF=main+4295, main+4304
000000000000369f         mov        rdi, r12                                    ; argument #1 for method selected_fstype
00000000000036a2         call       selected_fstype                             ; selected_fstype
00000000000036a7         test       al, al
00000000000036a9         je         loc_361d

00000000000036af         mov        rdi, r12                                    ; argument #1 for method excluded_fstype
00000000000036b2         call       excluded_fstype                             ; excluded_fstype
00000000000036b7         test       al, al
00000000000036b9         mov        r14d, eax
00000000000036bc         jne        loc_361d

00000000000036c2         mov        rsi, qword [r13+8]                          ; argument "__filename" for method j___xstat
00000000000036c6         mov        rdx, qword [rsp+0x178+var_170]              ; argument "__stat_buf" for method j___xstat
00000000000036cb         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000036d0         call       j___xstat                                   ; __xstat
00000000000036d5         add        eax, 0x1
00000000000036d8         je         loc_361d

00000000000036de         mov        rdi, qword [devlist_table]                  ; devlist_table
00000000000036e5         test       rdi, rdi
00000000000036e8         je         loc_3629

00000000000036ee         mov        rax, qword [rsp+0x178+var_D8]
00000000000036f6         mov        rsi, r15                                    ; argument #2 for method hash_lookup
00000000000036f9         mov        qword [rsp+0x178+var_F8], rax
0000000000003701         call       hash_lookup                                 ; hash_lookup
0000000000003706         test       rax, rax
0000000000003709         mov        qword [rsp+0x178+var_168], rax
000000000000370e         je         loc_3629

0000000000003714         mov        r12, qword [rax+8]
0000000000003718         or         rcx, 0xffffffffffffffff
000000000000371c         mov        eax, r14d
000000000000371f         mov        rdi, qword [r12+8]
0000000000003724         mov        qword [rsp+0x178+var_160], rdi
0000000000003729         repne scasb al, byte [rdi]
000000000000372b         mov        rdi, qword [r13+8]
000000000000372f         not        rcx
0000000000003732         mov        rdx, rcx
0000000000003735         or         rcx, 0xffffffffffffffff
0000000000003739         mov        qword [rsp+0x178+var_158], rdi
000000000000373e         sub        rdx, 0x1
0000000000003742         repne scasb al, byte [rdi]
0000000000003744         mov        rdi, qword [r12+0x10]
0000000000003749         mov        rax, rcx
000000000000374c         not        rax
000000000000374f         sub        rax, 0x1
0000000000003753         cmp        rdx, rax
0000000000003756         seta       byte [rsp+0x178+var_150]
000000000000375b         test       rdi, rdi
000000000000375e         je         loc_3a87

0000000000003764         mov        rsi, qword [r13+0x10]
0000000000003768         test       rsi, rsi
000000000000376b         je         loc_3a87

0000000000003771         mov        eax, r14d
0000000000003774         or         rcx, 0xffffffffffffffff
0000000000003778         repne scasb al, byte [rdi]
000000000000377a         mov        rdi, rsi
000000000000377d         not        rcx
0000000000003780         mov        rdx, rcx
0000000000003783         or         rcx, 0xffffffffffffffff
0000000000003787         repne scasb al, byte [rdi]
0000000000003789         sub        rdx, 0x1
000000000000378d         mov        rax, rcx
0000000000003790         not        rax
0000000000003793         sub        rax, 0x1
0000000000003797         cmp        rdx, rax
000000000000379a         setb       al
000000000000379d         movzx      eax, al

                     loc_37a0:
00000000000037a0         and        eax, 0x1                                    ; CODE XREF=main+5321
00000000000037a3         cmp        byte [print_grand_total], 0x0               ; print_grand_total
00000000000037aa         mov        byte [rsp+0x178+var_148], al
00000000000037ae         mov        rax, qword [r13]
00000000000037b2         mov        r14, rax
00000000000037b5         jne        loc_37da

00000000000037b7         test       byte [r13+0x28], 0x2
00000000000037bc         je         loc_37da

00000000000037be         test       byte [r12+0x28], 0x2
00000000000037c4         je         loc_37da

00000000000037c6         mov        rdi, qword [r12]                            ; argument "__s1" for method j_strcmp
00000000000037ca         mov        rsi, rax                                    ; argument "__s2" for method j_strcmp
00000000000037cd         call       j_strcmp                                    ; strcmp
00000000000037d2         test       eax, eax
00000000000037d4         jne        loc_3629

                     loc_37da:
00000000000037da         mov        esi, 0x2f                                   ; argument "__c" for method j_strchr, CODE XREF=main+4597, main+4604, main+4612
00000000000037df         mov        rdi, r14                                    ; argument "__s" for method j_strchr
00000000000037e2         call       j_strchr                                    ; strchr
00000000000037e7         test       rax, rax
00000000000037ea         je         loc_37ff

00000000000037ec         mov        rdi, qword [r12]                            ; argument "__s" for method j_strchr
00000000000037f0         mov        esi, 0x2f                                   ; argument "__c" for method j_strchr
00000000000037f5         call       j_strchr                                    ; strchr
00000000000037fa         test       rax, rax
00000000000037fd         je         loc_3815

                     loc_37ff:
00000000000037ff         cmp        byte [rsp+0x178+var_148], 0x0               ; CODE XREF=main+4650
0000000000003804         jne        loc_3a8e

000000000000380a         cmp        byte [rsp+0x178+var_150], 0x0
000000000000380f         je         loc_3a8e

                     loc_3815:
0000000000003815         mov        rax, qword [rsp+0x178+var_168]              ; CODE XREF=main+4669, main+5359
000000000000381a         mov        qword [rax+8], r13

                     loc_381e:
000000000000381e         test       bpl, bpl                                    ; CODE XREF=main+5368
0000000000003821         mov        r13, qword [r13+0x30]
0000000000003825         jne        loc_366a

000000000000382b         mov        rdi, r12
000000000000382e         call       free_mount_entry                            ; free_mount_entry
0000000000003833         jmp        loc_366a

                     loc_3838:
0000000000003838         test       bpl, bpl                                    ; CODE XREF=main+4269
000000000000383b         jne        loc_3883

000000000000383d         mov        qword [mount_list], 0x0                     ; mount_list
0000000000003848         jmp        loc_385e

                     loc_384a:
000000000000384a         mov        rax, qword [rbx+8]                          ; CODE XREF=main+4769
000000000000384e         mov        rbx, qword [rbx+0x10]
0000000000003852         mov        ebp, 0x1
0000000000003857         mov        qword [rax+0x30], r13
000000000000385b         mov        r13, rax

                     loc_385e:
000000000000385e         test       rbx, rbx                                    ; CODE XREF=main+4744
0000000000003861         jne        loc_384a

0000000000003863         test       bpl, bpl
0000000000003866         jne        loc_3b18

                     loc_386c:
000000000000386c         mov        rdi, qword [devlist_table]                  ; argument #1 for method hash_free, devlist_table, CODE XREF=main+5471
0000000000003873         call       hash_free                                   ; hash_free
0000000000003878         mov        qword [devlist_table], 0x0                  ; devlist_table

                     loc_3883:
0000000000003883         mov        rbx, qword [mount_list]                     ; mount_list, CODE XREF=main+4731
000000000000388a         jmp        loc_38c2

                     loc_388c:
000000000000388c         movzx      r9d, byte [rbx+0x28]                        ; CODE XREF=main+4869
0000000000003891         mov        rsi, qword [rbx+8]                          ; argument #2 for method get_dev
0000000000003895         sub        rsp, 0x8
0000000000003899         mov        r8, qword [rbx+0x18]                        ; argument #5 for method get_dev
000000000000389d         mov        rdi, qword [rbx]                            ; argument #1 for method get_dev
00000000000038a0         xor        ecx, ecx                                    ; argument #4 for method get_dev
00000000000038a2         push       0x1                                         ; argument #9 for method get_dev
00000000000038a4         push       0x0                                         ; argument #8 for method get_dev
00000000000038a6         xor        edx, edx                                    ; argument #3 for method get_dev
00000000000038a8         mov        eax, r9d
00000000000038ab         and        r9d, 0x1                                    ; argument #6 for method get_dev
00000000000038af         shr        al, 0x1
00000000000038b1         and        eax, 0x1
00000000000038b4         push       rax                                         ; argument #7 for method get_dev
00000000000038b5         call       get_dev                                     ; get_dev
00000000000038ba         mov        rbx, qword [rbx+0x30]
00000000000038be         add        rsp, 0x20

                     loc_38c2:
00000000000038c2         test       rbx, rbx                                    ; CODE XREF=main+4810
00000000000038c5         jne        loc_388c

00000000000038c7         jmp        loc_319c

                     loc_38cc:
00000000000038cc         movzx      r14d, byte [rsp+0x178+var_158]              ; CODE XREF=main+3481, main+3496
00000000000038d2         jmp        loc_3385

                     loc_38d7:
00000000000038d7         mov        rax, qword [rsp+0x178+var_148]              ; CODE XREF=main+2104
00000000000038dc         mov        qword [rsp+0x178+var_160], rax
00000000000038e1         jmp        loc_2e0a

                     loc_38e6:
00000000000038e6         mov        eax, dword [rsp+0x178+var_170]              ; CODE XREF=main+1739
00000000000038ea         cmp        dword [optind@@GLIBC_2.2.5], eax            ; optind@@GLIBC_2.2.5
00000000000038f0         jge        loc_39a5

00000000000038f6         cmp        byte [show_all_fs], 0x0                     ; show_all_fs
00000000000038fd         jne        loc_39a5

0000000000003903         cmp        byte [show_local_fs], 0x0                   ; show_local_fs
000000000000390a         jne        loc_39a5

0000000000003910         cmp        qword [fs_select_list], 0x0                 ; fs_select_list
0000000000003918         mov        ebx, 0x1
000000000000391d         lea        rbp, qword [aWrittenBySSAnd+27]             ; 0x10601
0000000000003924         je         loc_3ac4

                     loc_392a:
000000000000392a         lea        rsi, qword [aCannotReadTabl]                ; argument "msgid" for method j_dcgettext, "cannot read table of mounted file systems", CODE XREF=main+5105, main+5388, main+5418
0000000000003931         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003933         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003938         call       j_dcgettext                                 ; dcgettext
000000000000393d         mov        r12, rax
0000000000003940         call       j___errno_location                          ; __errno_location
0000000000003945         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003947         lea        rdx, qword [aWarning+10]                    ; argument "__format" for method j_error, 0xf1c4
000000000000394e         mov        r8, r12
0000000000003951         mov        rcx, rbp
0000000000003954         mov        edi, ebx                                    ; argument "__status" for method j_error
0000000000003956         xor        eax, eax
0000000000003958         call       j_error                                     ; error
000000000000395d         jmp        loc_2c91

                     loc_3962:
0000000000003962         cmp        qword [fs_exclude_list], 0x0                ; fs_exclude_list, CODE XREF=main+1718
000000000000396a         jne        loc_2c7c

0000000000003970         cmp        byte [print_type], 0x0                      ; print_type
0000000000003977         jne        loc_2c7c

000000000000397d         cmp        byte [byte_21407c], 0x0                     ; byte_21407c
0000000000003984         jne        loc_2c7c

000000000000398a         movzx      edi, byte [show_local_fs]                   ; show_local_fs
0000000000003991         jmp        loc_2c7c

                     loc_3996:
0000000000003996         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=main+3384
000000000000399b         call       j___overflow                                ; __overflow
00000000000039a0         jmp        loc_3309

                     loc_39a5:
00000000000039a5         mov        ebx, 0x1                                    ; CODE XREF=main+4912, main+4925, main+4938
00000000000039aa         lea        rbp, qword [aWrittenBySSAnd+27]             ; 0x10601
00000000000039b1         jmp        loc_392a

                     loc_39b6:
00000000000039b6         mov        rsi, qword [rsp+0x178+var_148]              ; CODE XREF=main+2464
00000000000039bb         mov        edi, 0x4
00000000000039c0         call       quotearg_style                              ; quotearg_style
00000000000039c5         lea        rsi, qword [aCannotAccessSO]                ; argument "msgid" for method j_dcgettext, "cannot access %s: over-mounted by another device"
00000000000039cc         mov        rbx, rax
00000000000039cf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000039d4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000039d6         call       j_dcgettext                                 ; dcgettext
00000000000039db         mov        rcx, rbx
00000000000039de         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000039e1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000039e3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000039e5         xor        eax, eax
00000000000039e7         call       j_error                                     ; error
00000000000039ec         mov        dword [exit_status], 0x1                    ; exit_status
00000000000039f6         jmp        loc_3182

                     loc_39fb:
00000000000039fb         mov        rdx, r10                                    ; argument "__n" for method j_strncmp, CODE XREF=main+3990, main+4002
00000000000039fe         mov        rsi, r15                                    ; argument "__s2" for method j_strncmp
0000000000003a01         mov        rdi, r9                                     ; argument "__s1" for method j_strncmp
0000000000003a04         mov        qword [rsp+0x178+var_150], r10
0000000000003a09         call       j_strncmp                                   ; strncmp
0000000000003a0e         mov        r10, qword [rsp+0x178+var_150]
0000000000003a13         test       eax, eax
0000000000003a15         cmovne     r10, qword [rsp+0x178+var_160]
0000000000003a1b         cmove      rbx, rbp
0000000000003a1f         mov        qword [rsp+0x178+var_160], r10
0000000000003a24         jmp        loc_3568

                     loc_3a29:
0000000000003a29         mov        qword [rsp+0x178+var_160], 0x1              ; CODE XREF=main+3981
0000000000003a32         mov        rbx, rbp
0000000000003a35         jmp        loc_3568

                     loc_3a3a:
0000000000003a3a         mov        rbx, r12                                    ; CODE XREF=main+2658
0000000000003a3d         jmp        loc_2fb0

                     loc_3a42:
0000000000003a42         mov        rdx, qword [r12+8]                          ; argument #3 for method quotearg_n_style_colon, CODE XREF=main+3692
0000000000003a47         mov        esi, 0x3                                    ; argument #2 for method quotearg_n_style_colon
0000000000003a4c         xor        edi, edi                                    ; argument #1 for method quotearg_n_style_colon
0000000000003a4e         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003a53         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000003a56         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x10c77
0000000000003a5d         mov        rcx, rax
0000000000003a60         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003a62         xor        eax, eax
0000000000003a64         call       j_error                                     ; error
0000000000003a69         mov        dword [exit_status], 0x1                    ; exit_status
0000000000003a73         jmp        loc_3432

                     loc_3a78:
0000000000003a78         mov        rdi, qword [rsp+0x178+var_110]              ; argument "__ptr" for method j_free, CODE XREF=main+2132
0000000000003a7d         call       j_free                                      ; free
0000000000003a82         jmp        loc_2f66

                     loc_3a87:
0000000000003a87         xor        eax, eax                                    ; CODE XREF=main+4510, main+4523
0000000000003a89         jmp        loc_37a0

                     loc_3a8e:
0000000000003a8e         mov        rdi, qword [r12]                            ; argument "__s1" for method j_strcmp, CODE XREF=main+4676, main+4687
0000000000003a92         mov        rsi, r14                                    ; argument "__s2" for method j_strcmp
0000000000003a95         call       j_strcmp                                    ; strcmp
0000000000003a9a         test       eax, eax
0000000000003a9c         je         loc_3ab5

0000000000003a9e         mov        rsi, qword [rsp+0x178+var_160]              ; argument "__s2" for method j_strcmp
0000000000003aa3         mov        rdi, qword [rsp+0x178+var_158]              ; argument "__s1" for method j_strcmp
0000000000003aa8         call       j_strcmp                                    ; strcmp
0000000000003aad         test       eax, eax
0000000000003aaf         je         loc_3815

                     loc_3ab5:
0000000000003ab5         mov        r12, r13                                    ; CODE XREF=main+5340
0000000000003ab8         jmp        loc_381e

                     loc_3abd:
0000000000003abd         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+493
0000000000003abf         call       usage                                       ; usage

                     loc_3ac4:
0000000000003ac4         cmp        qword [fs_exclude_list], 0x0                ; fs_exclude_list, CODE XREF=main+4964
0000000000003acc         jne        loc_392a

0000000000003ad2         lea        rsi, qword [aWarning]                       ; argument "msgid" for method j_dcgettext, "Warning: "
0000000000003ad9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ade         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ae0         xor        ebx, ebx
0000000000003ae2         call       j_dcgettext                                 ; dcgettext
0000000000003ae7         mov        rbp, rax
0000000000003aea         jmp        loc_392a

                     loc_3aef:
0000000000003aef         lea        r8, qword [aOutput]                         ; "--output", CODE XREF=main+624
0000000000003af6         lea        rcx, qword [aOutput+15]                     ; 0xf16b
0000000000003afd         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003aff         mov        rdx, r12                                    ; argument "__format" for method j_error
0000000000003b02         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003b04         call       j_error                                     ; error
0000000000003b09         mov        edi, 0x1                                    ; argument #1 for method usage
0000000000003b0e         call       usage                                       ; usage

                     loc_3b13:
0000000000003b13         call       xalloc_die                                  ; xalloc_die, CODE XREF=main+1392, main+1401, main+4159, main+4253
                        ; endp

                     loc_3b18:
0000000000003b18         mov        qword [mount_list], r13                     ; mount_list, CODE XREF=main+4774
0000000000003b1f         jmp        loc_386c

                     loc_3b24:
0000000000003b24         lea        rcx, qword [__PRETTY_FUNCTION__.8870]       ; argument "__function" for method j___assert_fail, "get_field_list", CODE XREF=main+1766
0000000000003b2b         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/df.c"
0000000000003b32         lea        rdi, qword [aInvalidHeaderm]                ; argument "__assertion" for method j___assert_fail, "!\\\"invalid header_mode\\\""
0000000000003b39         mov        edx, 0x222                                  ; argument "__line" for method j___assert_fail
0000000000003b3e         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_3b43:
0000000000003b43         mov        esi, 0x1                                    ; CODE XREF=main+1383
0000000000003b48         jmp        loc_2b2d

                     loc_3b4d:
0000000000003b4d         lea        r8, qword [aOutput]                         ; "--output", CODE XREF=main+784
0000000000003b54         lea        rcx, qword [aOutput+15]                     ; 0xf16b

                     loc_3b5b:
0000000000003b5b         mov        rdx, r12                                    ; argument "__format" for method j_error, CODE XREF=main+5564, main+5580
0000000000003b5e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003b60         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003b62         xor        eax, eax
0000000000003b64         call       j_error                                     ; error
0000000000003b69         jmp        loc_2a06

                     loc_3b6e:
0000000000003b6e         lea        r8, qword [aOutput]                         ; "--output", CODE XREF=main+637, main+807
0000000000003b75         lea        rcx, qword [aOutput+12]                     ; 0xf168
0000000000003b7c         jmp        loc_3b5b

                     loc_3b7e:
0000000000003b7e         lea        r8, qword [aOutput]                         ; "--output", CODE XREF=main+611, main+711
0000000000003b85         lea        rcx, qword [aOutput+9]                      ; 0xf165
0000000000003b8c         jmp        loc_3b5b

                     loc_3b8e:
0000000000003b8e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+1321
                        ; endp
0000000000003b93         align      32                                          ; End of unwind block (FDE at 0x11730)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000003ba0         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0x11414)
0000000000003ba2         mov        r9, rdx
0000000000003ba5         pop        rsi
0000000000003ba6         mov        rdx, rsp
0000000000003ba9         and        rsp, 0xfffffffffffffff0
0000000000003bad         push       rax
0000000000003bae         push       rsp
0000000000003baf         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000003bb6         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
0000000000003bbd         lea        rdi, qword [main]                           ; main
0000000000003bc4         call       qword [qword_213fd0+8]                      ; 0x213fd8
0000000000003bca         hlt
                        ; endp
0000000000003bcb         align      16                                          ; End of unwind block (FDE at 0x11414)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000003bd0         lea        rdi, qword [__TMC_END__]                    ; __TMC_END__, CODE XREF=__do_global_dtors_aux+35
0000000000003bd7         push       rbp
0000000000003bd8         lea        rax, qword [__TMC_END__]                    ; __TMC_END__
0000000000003bdf         cmp        rax, rdi
0000000000003be2         mov        rbp, rsp
0000000000003be5         je         loc_3c00

0000000000003be7         mov        rax, qword [qword_213fd0]                   ; qword_213fd0
0000000000003bee         test       rax, rax
0000000000003bf1         je         loc_3c00

0000000000003bf3         pop        rbp
0000000000003bf4         jmp        rax
                        ; endp
0000000000003bf6         align      1024

                     loc_3c00:
0000000000003c00         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000003c01         ret
                        ; endp
0000000000003c02         align      16

                     register_tm_clones:
0000000000003c10         lea        rdi, qword [__TMC_END__]                    ; __TMC_END__, CODE XREF=frame_dummy+5
0000000000003c17         lea        rsi, qword [__TMC_END__]                    ; __TMC_END__
0000000000003c1e         push       rbp
0000000000003c1f         sub        rsi, rdi
0000000000003c22         mov        rbp, rsp
0000000000003c25         sar        rsi, 0x3
0000000000003c29         mov        rax, rsi
0000000000003c2c         shr        rax, 0x3f
0000000000003c30         add        rsi, rax
0000000000003c33         sar        rsi, 0x1
0000000000003c36         je         loc_3c50

0000000000003c38         mov        rax, qword [qword_213fe8]                   ; qword_213fe8
0000000000003c3f         test       rax, rax
0000000000003c42         je         loc_3c50

0000000000003c44         pop        rbp
0000000000003c45         jmp        rax
                        ; endp
0000000000003c47         align      16

                     loc_3c50:
0000000000003c50         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000003c51         ret
                        ; endp
0000000000003c52         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000003c60         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000003c67         jne        loc_3c98

0000000000003c69         cmp        qword [qword_213ff0], 0x0                   ; qword_213ff0
0000000000003c71         push       rbp
0000000000003c72         mov        rbp, rsp
0000000000003c75         je         loc_3c83

0000000000003c77         mov        rdi, qword [__dso_handle]                   ; __dso_handle
0000000000003c7e         call       j_qword_213ff0                              ; qword_213ff0

                     loc_3c83:
0000000000003c83         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000003c88         mov        byte [completed.7697], 0x1                  ; completed.7697
0000000000003c8f         pop        rbp
0000000000003c90         ret
                        ; endp
0000000000003c91         align      8

                     loc_3c98:
0000000000003c98         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
0000000000003c9a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000003ca0         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000003ca1         mov        rbp, rsp
0000000000003ca4         pop        rbp
0000000000003ca5         jmp        register_tm_clones                          ; register_tm_clones
0000000000003caa         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     replace_control_chars:
0000000000003cb0         jmp        loc_3ccb                                    ; Begin of unwind block (FDE at 0x11484), DATA XREF=replace_problematic_chars+23
0000000000003cb2         align      8

                     loc_3cb8:
0000000000003cb8         cmp        al, 0x1                                     ; CODE XREF=replace_control_chars+32
0000000000003cba         jl         loc_3cc7

0000000000003cbc         cmp        al, 0x1f
0000000000003cbe         jle        loc_3cc4

0000000000003cc0         cmp        al, 0x7f
0000000000003cc2         jne        loc_3cc7

                     loc_3cc4:
0000000000003cc4         mov        byte [rdi], 0x3f                            ; CODE XREF=replace_control_chars+14

                     loc_3cc7:
0000000000003cc7         add        rdi, 0x1                                    ; CODE XREF=replace_control_chars+10, replace_control_chars+18

                     loc_3ccb:
0000000000003ccb         movzx      eax, byte [rdi]                             ; CODE XREF=replace_control_chars
0000000000003cce         test       al, al
0000000000003cd0         jne        loc_3cb8

0000000000003cd2         ret
                        ; endp
0000000000003cd4         align      32                                          ; End of unwind block (FDE at 0x11484)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     devlist_hash:
0000000000003ce0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0x11498), DATA XREF=main+4135
0000000000003ce3         xor        edx, edx
0000000000003ce5         div        rsi
0000000000003ce8         mov        rax, rdx
0000000000003ceb         ret
                        ; endp
0000000000003cec         align      16                                          ; End of unwind block (FDE at 0x11498)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     devlist_compare:
0000000000003cf0         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0x114ac), DATA XREF=main+4128
0000000000003cf3         cmp        qword [rdi], rax
0000000000003cf6         sete       al
0000000000003cf9         ret
                        ; endp
0000000000003cfa         align      256                                         ; End of unwind block (FDE at 0x114ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     selected_fstype:
0000000000003d00         push       r12                                         ; Begin of unwind block (FDE at 0x114c0), CODE XREF=main+4322, get_dev+163
0000000000003d02         push       rbp
0000000000003d03         push       rbx
0000000000003d04         mov        rbx, qword [fs_select_list]                 ; fs_select_list
0000000000003d0b         test       rbx, rbx
0000000000003d0e         sete       al
0000000000003d11         test       rdi, rdi
0000000000003d14         sete       r12b
0000000000003d18         or         r12b, al
0000000000003d1b         jne        loc_3d38

0000000000003d1d         mov        rbp, rdi

                     loc_3d20:
0000000000003d20         mov        rsi, qword [rbx]                            ; argument "__s2" for method j_strcmp, CODE XREF=selected_fstype+54
0000000000003d23         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
0000000000003d26         call       j_strcmp                                    ; strcmp
0000000000003d2b         test       eax, eax
0000000000003d2d         je         loc_3d40

0000000000003d2f         mov        rbx, qword [rbx+8]
0000000000003d33         test       rbx, rbx
0000000000003d36         jne        loc_3d20

                     loc_3d38:
0000000000003d38         mov        eax, r12d                                   ; CODE XREF=selected_fstype+27
0000000000003d3b         pop        rbx
0000000000003d3c         pop        rbp
0000000000003d3d         pop        r12
0000000000003d3f         ret
                        ; endp

                     loc_3d40:
0000000000003d40         mov        r12d, 0x1                                   ; CODE XREF=selected_fstype+45
0000000000003d46         mov        eax, r12d
0000000000003d49         pop        rbx
0000000000003d4a         pop        rbp
0000000000003d4b         pop        r12
0000000000003d4d         ret
                        ; endp
0000000000003d4e         align      16                                          ; End of unwind block (FDE at 0x114c0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     excluded_fstype:
0000000000003d50         push       r12                                         ; Begin of unwind block (FDE at 0x114f8), CODE XREF=main+4338, get_dev+175
0000000000003d52         push       rbp
0000000000003d53         push       rbx
0000000000003d54         mov        rbx, qword [fs_exclude_list]                ; fs_exclude_list
0000000000003d5b         test       rbx, rbx
0000000000003d5e         sete       al
0000000000003d61         test       rdi, rdi
0000000000003d64         sete       bpl
0000000000003d68         or         bpl, al
0000000000003d6b         jne        loc_3d90

0000000000003d6d         mov        r12, rdi

                     loc_3d70:
0000000000003d70         mov        rsi, qword [rbx]                            ; argument "__s2" for method j_strcmp, CODE XREF=excluded_fstype+54
0000000000003d73         mov        rdi, r12                                    ; argument "__s1" for method j_strcmp
0000000000003d76         call       j_strcmp                                    ; strcmp
0000000000003d7b         test       eax, eax
0000000000003d7d         je         loc_3da0

0000000000003d7f         mov        rbx, qword [rbx+8]
0000000000003d83         test       rbx, rbx
0000000000003d86         jne        loc_3d70

0000000000003d88         mov        eax, ebp
0000000000003d8a         pop        rbx
0000000000003d8b         pop        rbp
0000000000003d8c         pop        r12
0000000000003d8e         ret
                        ; endp
0000000000003d8f         align      16

                     loc_3d90:
0000000000003d90         xor        ebp, ebp                                    ; CODE XREF=excluded_fstype+27
0000000000003d92         mov        eax, ebp
0000000000003d94         pop        rbx
0000000000003d95         pop        rbp
0000000000003d96         pop        r12
0000000000003d98         ret
                        ; endp
0000000000003d99         align      32

                     loc_3da0:
0000000000003da0         mov        ebp, 0x1                                    ; CODE XREF=excluded_fstype+45
0000000000003da5         mov        eax, ebp
0000000000003da7         pop        rbx
0000000000003da8         pop        rbp
0000000000003da9         pop        r12
0000000000003dab         ret
                        ; endp
0000000000003dac         align      16                                          ; End of unwind block (FDE at 0x114f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     devlist_free:
0000000000003db0         jmp        j_free                                      ; free, Begin of unwind block (FDE at 0x1153c), DATA XREF=main+4121
                        ; endp
0000000000003db5         align      64                                          ; End of unwind block (FDE at 0x1153c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     alloc_table_row:
0000000000003dc0         mov        rax, qword [nrows]                          ; Begin of unwind block (FDE at 0x11550), nrows, CODE XREF=get_header+36, get_dev+425
0000000000003dc7         mov        edx, 0x8
0000000000003dcc         push       rbx
0000000000003dcd         mov        rdi, qword [table]                          ; table
0000000000003dd4         lea        rsi, qword [rax+1]
0000000000003dd8         mov        rax, rdx
0000000000003ddb         mul        rsi
0000000000003dde         mov        qword [nrows], rsi                          ; nrows
0000000000003de5         jo         loc_3e42

0000000000003de7         xor        ecx, ecx

                     loc_3de9:
0000000000003de9         test       rax, rax                                    ; CODE XREF=alloc_table_row+135
0000000000003dec         js         loc_3e3d

0000000000003dee         test       rcx, rcx
0000000000003df1         jne        loc_3e3d

0000000000003df3         shl        rsi, 0x3                                    ; argument #2 for method xrealloc
0000000000003df7         call       xrealloc                                    ; xrealloc
0000000000003dfc         mov        rdx, qword [nrows]                          ; nrows
0000000000003e03         mov        rdi, qword [ncolumns]                       ; ncolumns
0000000000003e0a         xor        ecx, ecx
0000000000003e0c         mov        qword [table], rax                          ; table
0000000000003e13         lea        rbx, qword [rax+rdx*8-8]
0000000000003e18         mov        edx, 0x8
0000000000003e1d         mov        rax, rdx
0000000000003e20         mul        rdi
0000000000003e23         jo         loc_3e49

                     loc_3e25:
0000000000003e25         test       rax, rax                                    ; CODE XREF=alloc_table_row+142
0000000000003e28         js         loc_3e3d

0000000000003e2a         test       rcx, rcx
0000000000003e2d         jne        loc_3e3d

0000000000003e2f         shl        rdi, 0x3                                    ; argument #1 for method xmalloc
0000000000003e33         call       xmalloc                                     ; xmalloc
0000000000003e38         mov        qword [rbx], rax
0000000000003e3b         pop        rbx
0000000000003e3c         ret
                        ; endp

                     loc_3e3d:
0000000000003e3d         call       xalloc_die                                  ; xalloc_die, CODE XREF=alloc_table_row+44, alloc_table_row+49, alloc_table_row+104, alloc_table_row+109
                        ; endp

                     loc_3e42:
0000000000003e42         mov        ecx, 0x1                                    ; CODE XREF=alloc_table_row+37
0000000000003e47         jmp        loc_3de9

                     loc_3e49:
0000000000003e49         mov        ecx, 0x1                                    ; CODE XREF=alloc_table_row+99
0000000000003e4e         jmp        loc_3e25


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_78: int8_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_94: int32_t, -148
        ;    var_98: int32_t, -152
        ;    var_A8: int32_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D8: -216


                     df_readable:
0000000000003e50         mov        rax, rsi                                    ; End of unwind block (FDE at 0x11550), Begin of unwind block (FDE at 0x11570), CODE XREF=sub_47e0+23
0000000000003e53         mov        rsi, rdx
0000000000003e56         cmp        rax, 0xfffffffffffffffd
0000000000003e5a         jbe        loc_3e90

0000000000003e5c         test       dil, dil
0000000000003e5f         je         loc_3eb0

0000000000003e61         mov        edx, dword [human_output_opts]              ; human_output_opts
0000000000003e67         add        rsi, 0x1

                     loc_3e6b:
0000000000003e6b         mov        rdi, rax                                    ; CODE XREF=df_readable+80
0000000000003e6e         sub        rsp, 0x8
0000000000003e72         neg        rdi
0000000000003e75         call       human_readable                              ; human_readable
0000000000003e7a         lea        rdx, qword [rax-1]
0000000000003e7e         mov        byte [rax-1], 0x2d
0000000000003e82         add        rsp, 0x8
0000000000003e86         mov        rax, rdx
0000000000003e89         ret
                        ; endp
0000000000003e8a         align      16

                     loc_3e90:
0000000000003e90         movzx      r9d, dil                                    ; CODE XREF=df_readable+10
0000000000003e94         mov        edx, dword [human_output_opts]              ; human_output_opts
0000000000003e9a         add        rsi, r9
0000000000003e9d         test       dil, dil
0000000000003ea0         jne        loc_3e6b

0000000000003ea2         mov        rdi, rax
0000000000003ea5         jmp        human_readable                              ; human_readable
0000000000003eaa         align      16

                     loc_3eb0:
0000000000003eb0         lea        rdx, qword [aSsArgumentSToo+30]             ; 0x10959, CODE XREF=df_readable+15
0000000000003eb7         mov        rax, rdx
0000000000003eba         ret
                        ; endp
0000000000003ebb         align      64                                          ; End of unwind block (FDE at 0x11570)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     replace_problematic_chars:
0000000000003ec0         mov        eax, dword [tty_out.8809]                   ; Begin of unwind block (FDE at 0x11588), tty_out.8809, CODE XREF=get_header+121, sub_4730+25
0000000000003ec6         push       rbx
0000000000003ec7         mov        rbx, rdi
0000000000003eca         test       eax, eax
0000000000003ecc         js         loc_3ef0

                     loc_3ece:
0000000000003ece         test       eax, eax                                    ; CODE XREF=replace_problematic_chars+64
0000000000003ed0         lea        rdx, qword [replace_invalid_chars]          ; replace_invalid_chars
0000000000003ed7         lea        rax, qword [replace_control_chars]          ; replace_control_chars
0000000000003ede         mov        rdi, rbx
0000000000003ee1         pop        rbx
0000000000003ee2         cmovne     rax, rdx
0000000000003ee6         jmp        rax
                        ; endp
0000000000003ee8         align      16

                     loc_3ef0:
0000000000003ef0         mov        edi, 0x1                                    ; argument "__fd" for method j_isatty, CODE XREF=replace_problematic_chars+12
0000000000003ef5         call       j_isatty                                    ; isatty
0000000000003efa         mov        dword [tty_out.8809], eax                   ; tty_out.8809
0000000000003f00         jmp        loc_3ece
0000000000003f02         align      16                                          ; End of unwind block (FDE at 0x11588)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_2D8: int8_t, -728
        ;    var_2E0: int64_t, -736
        ;    var_2F0: int64_t, -752


                     get_header:
0000000000003f10         push       r15                                         ; Begin of unwind block (FDE at 0x115a4), CODE XREF=main+1952
0000000000003f12         push       r14
0000000000003f14         push       r13
0000000000003f16         push       r12
0000000000003f18         push       rbp
0000000000003f19         push       rbx
0000000000003f1a         sub        rsp, 0x2c8
0000000000003f21         mov        rax, qword [fs:0x28]
0000000000003f2a         mov        qword [rsp+0x2f8+var_40], rax
0000000000003f32         xor        eax, eax
0000000000003f34         call       alloc_table_row                             ; alloc_table_row
0000000000003f39         cmp        qword [ncolumns], 0x0                       ; ncolumns
0000000000003f41         je         loc_4148

0000000000003f47         mov        rdx, qword [columns]                        ; columns
0000000000003f4e         xor        ebx, ebx
0000000000003f50         movabs     r12, 0x20c49ba5e353f7cf
0000000000003f5a         lea        r14, qword [rsp+0x2f8+var_2D8]
0000000000003f5f         lea        r13, qword [rsp+0x2f8+var_2E0]
0000000000003f64         jmp        loc_3fe1
0000000000003f66         align      16

                     loc_3f70:
0000000000003f70         mov        rdi, rcx                                    ; argument "__s" for method j_strdup, CODE XREF=get_header+258, get_header+289, get_header+395
0000000000003f73         call       j_strdup                                    ; strdup
0000000000003f78         mov        rdi, rax
0000000000003f7b         mov        qword [rsp+0x2f8+var_2E0], rax

                     loc_3f80:
0000000000003f80         test       rdi, rdi                                    ; CODE XREF=get_header+377
0000000000003f83         je         loc_4183

0000000000003f89         call       replace_problematic_chars                   ; replace_problematic_chars
0000000000003f8e         mov        rdx, qword [nrows]                          ; nrows
0000000000003f95         mov        rax, qword [table]                          ; table
0000000000003f9c         xor        esi, esi                                    ; argument #2 for method gnu_mbswidth
0000000000003f9e         mov        rax, qword [rax+rdx*8-8]
0000000000003fa3         mov        rdx, qword [rsp+0x2f8+var_2E0]
0000000000003fa8         mov        qword [rax+rbp], rdx
0000000000003fac         mov        rdi, qword [rsp+0x2f8+var_2E0]              ; argument #1 for method gnu_mbswidth
0000000000003fb1         call       gnu_mbswidth                                ; gnu_mbswidth
0000000000003fb6         mov        rdx, qword [columns]                        ; columns
0000000000003fbd         cdqe
0000000000003fbf         mov        rcx, qword [rdx+rbp]
0000000000003fc3         cmp        qword [rcx+0x20], rax
0000000000003fc7         cmovae     rax, qword [rcx+0x20]
0000000000003fcc         add        rbx, 0x1
0000000000003fd0         cmp        qword [ncolumns], rbx                       ; ncolumns
0000000000003fd7         mov        qword [rcx+0x20], rax
0000000000003fdb         jbe        loc_4148

                     loc_3fe1:
0000000000003fe1         lea        rbp, qword [rbx*8]                          ; CODE XREF=get_header+84
0000000000003fe9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003feb         mov        qword [rsp+0x2f8+var_2E0], 0x0
0000000000003ff4         lea        r15, qword [rdx+rbp]
0000000000003ff8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ffd         mov        rax, qword [r15]
0000000000004000         mov        rsi, qword [rax+0x18]                       ; argument "msgid" for method j_dcgettext, DATA XREF=find_mount_point+84, canonicalize_filename_mode+784, sub_8e70+88
0000000000004004         call       j_dcgettext                                 ; dcgettext
0000000000004009         mov        rcx, rax
000000000000400c         mov        rax, qword [r15]
000000000000400f         cmp        dword [rax], 0x2
0000000000004012         jne        loc_3f70

0000000000004018         mov        eax, dword [header_mode]                    ; header_mode
000000000000401e         mov        r10d, dword [human_output_opts]             ; human_output_opts
0000000000004025         test       eax, eax
0000000000004027         je         loc_40a8

0000000000004029         cmp        eax, 0x4
000000000000402c         je         loc_4090

000000000000402e         cmp        eax, 0x3
0000000000004031         jne        loc_3f70

0000000000004037         mov        rdi, qword [output_block_size]              ; argument #1 for method umaxtostr, output_block_size
000000000000403e         mov        rsi, r14                                    ; argument #2 for method umaxtostr
0000000000004041         mov        qword [rsp+0x2f8+var_2F0], rcx
0000000000004046         call       umaxtostr                                   ; umaxtostr
000000000000404b         mov        r15, rax

                     loc_404e:
000000000000404e         lea        rsi, qword [aSs]                            ; argument "msgid" for method j_dcgettext, "%s-%s", CODE XREF=get_header+560
0000000000004055         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004057         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000405c         call       j_dcgettext                                 ; dcgettext
0000000000004061         mov        rcx, qword [rsp+0x2f8+var_2F0]
0000000000004066         mov        rsi, rax
0000000000004069         mov        rdx, r15
000000000000406c         xor        eax, eax
000000000000406e         mov        rdi, r13
0000000000004071         call       rpl_asprintf                                ; rpl_asprintf
0000000000004076         cmp        eax, 0xffffffff
0000000000004079         jne        loc_4084

000000000000407b         mov        qword [rsp+0x2f8+var_2E0], 0x0

                     loc_4084:
0000000000004084         mov        rdi, qword [rsp+0x2f8+var_2E0]              ; CODE XREF=get_header+361
0000000000004089         jmp        loc_3f80
000000000000408e         align      16

                     loc_4090:
0000000000004090         mov        r10d, dword [human_output_opts]             ; human_output_opts, CODE XREF=get_header+284
0000000000004097         test       r10b, 0x10
000000000000409b         jne        loc_3f70

00000000000040a1         nop        dword [rax]

                     loc_40a8:
00000000000040a8         mov        rdi, qword [output_block_size]              ; output_block_size, CODE XREF=get_header+279
00000000000040af         mov        r9d, r10d
00000000000040b2         and        r9d, 0x124
00000000000040b9         mov        r8, rdi
00000000000040bc         mov        rsi, rdi
00000000000040bf         nop

                     loc_40c0:
00000000000040c0         mov        rdx, rsi                                    ; CODE XREF=get_header+490
00000000000040c3         shr        rdx, 0x3
00000000000040c7         mov        rax, rdx
00000000000040ca         mul        r12
00000000000040cd         mov        rax, r8
00000000000040d0         shr        r8, 0xa
00000000000040d4         and        eax, 0x3ff
00000000000040d9         mov        rcx, rdx
00000000000040dc         shr        rcx, 0x4
00000000000040e0         imul       rcx, rcx, 0x3e8
00000000000040e7         sub        rsi, rcx
00000000000040ea         mov        rcx, rsi
00000000000040ed         mov        rsi, rdx
00000000000040f0         mov        rdx, rcx
00000000000040f3         shr        rsi, 0x4
00000000000040f7         or         rdx, rax
00000000000040fa         je         loc_40c0

00000000000040fc         test       rcx, rcx
00000000000040ff         sete       dl
0000000000004102         test       rax, rax
0000000000004105         sete       al
0000000000004108         cmp        dl, al
000000000000410a         jae        loc_4170

000000000000410c         mov        edx, r9d
000000000000410f         or         dl, 0xb8

                     loc_4112:
0000000000004112         mov        r8d, 0x1                                    ; argument #5 for method human_readable, CODE XREF=get_header+625, get_header+642
0000000000004118         mov        ecx, 0x1                                    ; argument #4 for method human_readable
000000000000411d         mov        rsi, r14                                    ; argument #2 for method human_readable
0000000000004120         call       human_readable                              ; human_readable
0000000000004125         lea        rsi, qword [aBlocks]                        ; argument "msgid" for method j_dcgettext, "blocks"
000000000000412c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004131         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004133         mov        r15, rax
0000000000004136         call       j_dcgettext                                 ; dcgettext
000000000000413b         mov        qword [rsp+0x2f8+var_2F0], rax
0000000000004140         jmp        loc_404e
0000000000004145         align      8

                     loc_4148:
0000000000004148         mov        rax, qword [rsp+0x2f8+var_40]               ; CODE XREF=get_header+49, get_header+203
0000000000004150         xor        rax, qword [fs:0x28]
0000000000004159         jne        loc_419a

000000000000415b         add        rsp, 0x2c8
0000000000004162         pop        rbx
0000000000004163         pop        rbp
0000000000004164         pop        r12
0000000000004166         pop        r13
0000000000004168         pop        r14
000000000000416a         pop        r15
000000000000416c         ret
                        ; endp
000000000000416d         align      16

                     loc_4170:
0000000000004170         jbe        loc_4188                                    ; CODE XREF=get_header+506

0000000000004172         mov        edx, r10d
0000000000004175         and        edx, 0x104
000000000000417b         or         dl, 0x98

                     loc_417e:
000000000000417e         or         dh, 0x1                                     ; CODE XREF=get_header+648
0000000000004181         jmp        loc_4112

                     loc_4183:
0000000000004183         call       xalloc_die                                  ; xalloc_die, CODE XREF=get_header+115
                        ; endp

                     loc_4188:
0000000000004188         mov        edx, r9d                                    ; CODE XREF=loc_4170
000000000000418b         or         dl, 0x98
000000000000418e         and        r10b, 0x20
0000000000004192         jne        loc_4112

0000000000004198         jmp        loc_417e

                     loc_419a:
000000000000419a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=get_header+585
                        ; endp
000000000000419f         align      32                                          ; End of unwind block (FDE at 0x115a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     alloc_field:
00000000000041a0         push       rbp                                         ; Begin of unwind block (FDE at 0x115f4), CODE XREF=main+1861, main+1882, main+1894, main+1906, main+1918, main+1935, main+1947, main+2675, main+2696, main+2713, main+2725
00000000000041a1         push       rbx
00000000000041a2         mov        edx, 0x8
00000000000041a7         mov        rbp, rsi
00000000000041aa         mov        ebx, edi
00000000000041ac         sub        rsp, 0x8
00000000000041b0         mov        rax, qword [ncolumns]                       ; ncolumns
00000000000041b7         mov        rdi, qword [columns]                        ; columns
00000000000041be         lea        rsi, qword [rax+1]
00000000000041c2         mov        rax, rdx
00000000000041c5         mul        rsi
00000000000041c8         mov        qword [ncolumns], rsi                       ; ncolumns
00000000000041cf         jo         loc_4237

00000000000041d1         xor        ecx, ecx

                     loc_41d3:
00000000000041d3         test       rax, rax                                    ; CODE XREF=alloc_field+156
00000000000041d6         js         loc_425d

00000000000041dc         test       rcx, rcx
00000000000041df         jne        loc_425d

00000000000041e1         shl        rsi, 0x3                                    ; argument #2 for method xrealloc
00000000000041e5         call       xrealloc                                    ; xrealloc
00000000000041ea         movsxd     rdi, ebx
00000000000041ed         lea        rcx, qword [field_data]                     ; field_data
00000000000041f4         mov        rsi, qword [ncolumns]                       ; ncolumns
00000000000041fb         lea        rdx, qword [rdi+rdi*2]
00000000000041ff         mov        qword [columns], rax                        ; columns
0000000000004206         shl        rdx, 0x4
000000000000420a         add        rdx, rcx
000000000000420d         test       rbp, rbp
0000000000004210         mov        qword [rax+rsi*8-8], rdx
0000000000004215         je         loc_421b

0000000000004217         mov        qword [rdx+0x18], rbp

                     loc_421b:
000000000000421b         lea        rax, qword [rdi+rdi*2]                      ; CODE XREF=alloc_field+117
000000000000421f         shl        rax, 0x4
0000000000004223         add        rax, rcx
0000000000004226         cmp        byte [rax+0x2c], 0x0
000000000000422a         jne        loc_423e

000000000000422c         mov        byte [rax+0x2c], 0x1
0000000000004230         add        rsp, 0x8
0000000000004234         pop        rbx
0000000000004235         pop        rbp
0000000000004236         ret
                        ; endp

                     loc_4237:
0000000000004237         mov        ecx, 0x1                                    ; CODE XREF=alloc_field+47
000000000000423c         jmp        loc_41d3

                     loc_423e:
000000000000423e         lea        rcx, qword [__PRETTY_FUNCTION__.8831]       ; argument "__function" for method j___assert_fail, "alloc_field", CODE XREF=alloc_field+138
0000000000004245         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/df.c"
000000000000424c         lea        rdi, qword [aFieldUsed]                     ; argument "__assertion" for method j___assert_fail, "!\\\"field used\\\""
0000000000004253         mov        edx, 0x196                                  ; argument "__line" for method j___assert_fail
0000000000004258         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_425d:
000000000000425d         call       xalloc_die                                  ; xalloc_die, CODE XREF=alloc_field+54, alloc_field+63
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4262:
0000000000004262         nop        dword [rax]                                 ; End of unwind block (FDE at 0x115f4)
0000000000004266         nop        word [cs:rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96


                     replace_invalid_chars:
0000000000004270         push       r15                                         ; Begin of unwind block (FDE at 0x11620), DATA XREF=replace_problematic_chars+16
0000000000004272         push       r14
0000000000004274         push       r13
0000000000004276         push       r12
0000000000004278         mov        r12, rdi
000000000000427b         push       rbp
000000000000427c         push       rbx
000000000000427d         sub        rsp, 0x38
0000000000004281         mov        rax, qword [fs:0x28]
000000000000428a         mov        qword [rsp+0x68+var_40], rax
000000000000428f         xor        eax, eax
0000000000004291         call       j_strlen                                    ; strlen
0000000000004296         lea        r13, qword [r12+rax]
000000000000429a         mov        qword [rsp+0x68+var_48], 0x0
00000000000042a3         cmp        r12, r13
00000000000042a6         je         loc_4324

00000000000042a8         lea        rax, qword [rsp+0x68+var_4C]
00000000000042ad         mov        rbx, r12
00000000000042b0         lea        r14, qword [rsp+0x68+var_48]
00000000000042b5         mov        qword [rsp+0x68+var_60], rax
00000000000042ba         jmp        loc_42e6
00000000000042bc         align      64

                     loc_42c0:
00000000000042c0         mov        edi, dword [rsp+0x68+var_4C]                ; argument "__wc" for method j_iswcntrl, CODE XREF=replace_invalid_chars+149
00000000000042c4         call       j_iswcntrl                                  ; iswcntrl
00000000000042c9         test       eax, eax
00000000000042cb         jne        loc_430c

00000000000042cd         mov        rsi, rbx                                    ; argument "__src" for method j_memmove
00000000000042d0         mov        rdi, r12                                    ; argument "__dest" for method j_memmove
00000000000042d3         mov        rdx, rbp                                    ; argument "__n" for method j_memmove
00000000000042d6         add        rbx, rbp
00000000000042d9         add        r12, rbp
00000000000042dc         call       j_memmove                                   ; memmove
00000000000042e1         cmp        r13, rbx
00000000000042e4         je         loc_4324

                     loc_42e6:
00000000000042e6         mov        r15, r13                                    ; CODE XREF=replace_invalid_chars+74, replace_invalid_chars+178
00000000000042e9         mov        rdi, qword [rsp+0x68+var_60]
00000000000042ee         mov        rcx, r14
00000000000042f1         sub        r15, rbx
00000000000042f4         mov        rsi, rbx
00000000000042f7         mov        rdx, r15
00000000000042fa         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000042ff         cmp        r15, rax
0000000000004302         mov        rbp, rax
0000000000004305         jae        loc_42c0

0000000000004307         mov        ebp, 0x1

                     loc_430c:
000000000000430c         add        rbx, rbp                                    ; CODE XREF=replace_invalid_chars+91
000000000000430f         mov        byte [r12], 0x3f
0000000000004314         add        r12, 0x1
0000000000004318         cmp        r13, rbx
000000000000431b         mov        qword [r14], 0x0
0000000000004322         jne        loc_42e6

                     loc_4324:
0000000000004324         mov        rax, qword [rsp+0x68+var_40]                ; CODE XREF=replace_invalid_chars+54, replace_invalid_chars+116
0000000000004329         xor        rax, qword [fs:0x28]
0000000000004332         mov        byte [r12], 0x0
0000000000004337         jne        loc_4348

0000000000004339         add        rsp, 0x38
000000000000433d         pop        rbx
000000000000433e         pop        rbp
000000000000433f         pop        r12
0000000000004341         pop        r13
0000000000004343         pop        r14
0000000000004345         pop        r15
0000000000004347         ret
                        ; endp

                     loc_4348:
0000000000004348         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=replace_invalid_chars+199
                        ; endp
000000000000434d         align      16                                          ; End of unwind block (FDE at 0x11620)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_368: int64_t, -872
        ;    var_370: int8_t, -880
        ;    var_378: int64_t, -888
        ;    var_380: int64_t, -896
        ;    var_388: int8_t, -904
        ;    var_390: int64_t, -912
        ;    var_398: int64_t, -920
        ;    var_3A0: int64_t, -928
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B8: int64_t, -952
        ;    var_3C0: int64_t, -960
        ;    var_3C8: int8_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int8_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_428: int64_t, -1064
        ;    var_439: int8_t, -1081
        ;    var_440: int32_t, -1088
        ;    var_448: int64_t, -1096


                     get_dev:
0000000000004350         push       r15                                         ; Begin of unwind block (FDE at 0x1166c), CODE XREF=main+2993, main+3109, main+3645, main+3840, main+4853
0000000000004352         push       r14
0000000000004354         mov        r14, rdi
0000000000004357         push       r13
0000000000004359         push       r12
000000000000435b         mov        r13, rdx
000000000000435e         push       rbp
000000000000435f         push       rbx
0000000000004360         mov        r12, rsi
0000000000004363         mov        rbx, r8
0000000000004366         sub        rsp, 0x418
000000000000436d         mov        eax, dword [rsp+0x448+arg_10]
0000000000004374         mov        ebp, dword [rsp+0x448+arg_0]
000000000000437b         mov        qword [rsp+0x448+var_448], rcx
000000000000437f         mov        r15, qword [rsp+0x448+arg_8]
0000000000004387         mov        dword [rsp+0x448+var_440], eax
000000000000438b         mov        rax, qword [fs:0x28]
0000000000004394         mov        qword [rsp+0x448+var_40], rax
000000000000439c         xor        eax, eax
000000000000439e         test       bpl, bpl
00000000000043a1         je         loc_43d8

00000000000043a3         cmp        byte [show_local_fs], 0x0                   ; show_local_fs
00000000000043aa         je         loc_43d8

                     loc_43ac:
00000000000043ac         mov        rax, qword [rsp+0x448+var_40]               ; CODE XREF=get_dev+157, get_dev+170, get_dev+182, get_dev+219, get_dev+347, sub_4730+122, sub_48a0+362, sub_4a7e+204, sub_4a7e+302
00000000000043b4         xor        rax, qword [fs:0x28]
00000000000043bd         jne        loc_4d66

00000000000043c3         add        rsp, 0x418
00000000000043ca         pop        rbx
00000000000043cb         pop        rbp
00000000000043cc         pop        r12
00000000000043ce         pop        r13
00000000000043d0         pop        r14
00000000000043d2         pop        r15
00000000000043d4         ret
                        ; endp
00000000000043d5         align      8

                     loc_43d8:
00000000000043d8         test       r9b, r9b                                    ; CODE XREF=get_dev+81, get_dev+90
00000000000043db         je         loc_43f0

00000000000043dd         cmp        byte [show_all_fs], 0x0                     ; show_all_fs
00000000000043e4         jne        loc_43f0

00000000000043e6         cmp        byte [show_listed_fs], 0x0                  ; show_listed_fs
00000000000043ed         je         loc_43ac

00000000000043ef         nop

                     loc_43f0:
00000000000043f0         mov        rdi, rbx                                    ; CODE XREF=get_dev+139, get_dev+148
00000000000043f3         call       selected_fstype                             ; selected_fstype
00000000000043f8         test       al, al
00000000000043fa         je         loc_43ac

00000000000043fc         mov        rdi, rbx
00000000000043ff         call       excluded_fstype                             ; excluded_fstype
0000000000004404         test       al, al
0000000000004406         jne        loc_43ac

0000000000004408         test       r15, r15
000000000000440b         sete       byte [rsp+0x448+var_439]
0000000000004410         test       r12, r12
0000000000004413         movzx      eax, byte [rsp+0x448+var_439]
0000000000004418         je         loc_44b0

000000000000441e         test       al, al
0000000000004420         je         loc_44b0

0000000000004426         cmp        byte [r12], 0x2f
000000000000442b         jne        loc_43ac

0000000000004431         mov        rax, qword [rsp+0x448+var_448]
0000000000004435         test       rax, rax
0000000000004438         cmove      rax, r12
000000000000443c         mov        qword [rsp+0x448+var_448], rax

                     loc_4440:
0000000000004440         mov        rdi, qword [rsp+0x448+var_448]              ; CODE XREF=get_dev+366
0000000000004444         lea        rdx, qword [rsp+0x448+var_428]
0000000000004449         mov        rsi, r14
000000000000444c         call       get_fs_usage                                ; get_fs_usage
0000000000004451         test       eax, eax
0000000000004453         je         loc_4b1e

0000000000004459         call       j___errno_location                          ; __errno_location
000000000000445e         cmp        byte [rsp+0x448+var_440], 0x0
0000000000004463         mov        rbx, rax
0000000000004466         je         loc_447c

0000000000004468         mov        eax, dword [rax]
000000000000446a         cmp        eax, 0xd
000000000000446d         je         loc_4ba5

0000000000004473         cmp        eax, 0x2
0000000000004476         je         loc_4ba5

                     loc_447c:
000000000000447c         mov        rdx, qword [rsp+0x448+var_448]              ; CODE XREF=get_dev+278
0000000000004480         mov        esi, 0x3
0000000000004485         xor        edi, edi
0000000000004487         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
000000000000448c         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000448e         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x10c77
0000000000004495         mov        rcx, rax
0000000000004498         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000449a         xor        eax, eax
000000000000449c         call       j_error                                     ; error
00000000000044a1         mov        dword [exit_status], 0x1                    ; exit_status
00000000000044ab         jmp        loc_43ac

                     loc_44b0:
00000000000044b0         cmp        qword [rsp+0x448+var_448], 0x0              ; CODE XREF=get_dev+200, get_dev+208
00000000000044b5         je         loc_4a93

                     loc_44bb:
00000000000044bb         test       r15, r15                                    ; CODE XREF=sub_4a7e+35
00000000000044be         je         loc_4440

00000000000044c4         movdqa     xmm0, xmmword [r15]
00000000000044c9         mov        rax, qword [r15+0x30]
00000000000044cd         movaps     xmmword [rsp+0x448+var_428], xmm0
00000000000044d2         cmp        qword [rsp+0x448+var_420], 0x0
00000000000044d8         movdqa     xmm0, xmmword [r15+0x10]
00000000000044de         mov        qword [rsp+0x448+var_3F8], rax
00000000000044e3         movaps     xmmword [rsp+0x448+var_418], xmm0
00000000000044e8         movdqa     xmm0, xmmword [r15+0x20]
00000000000044ee         movaps     xmmword [rsp+0x448+var_408], xmm0
00000000000044f3         je         loc_49f0

                     loc_44f9:
00000000000044f9         call       alloc_table_row                             ; alloc_table_row, CODE XREF=sub_48a0+343, sub_48a0+356, sub_4a7e+217
00000000000044fe         lea        rax, qword [aSsArgumentSToo+30]             ; 0x10959
0000000000004505         test       r14, r14
0000000000004508         cmove      r14, rax
000000000000450c         test       r13, r13
000000000000450f         mov        rdi, r14
0000000000004512         cmove      r13, rax
0000000000004516         call       xstrdup                                     ; xstrdup
000000000000451b         cmp        byte [rsp+0x448+var_440], 0x0
0000000000004520         mov        r15, rax
0000000000004523         mov        qword [rsp+0x448+var_448], rax
0000000000004527         je         loc_4570

0000000000004529         mov        rdi, rax                                    ; argument "__s" for method j_strlen
000000000000452c         call       j_strlen                                    ; strlen
0000000000004531         cmp        rax, 0x24
0000000000004535         jbe        loc_4570

0000000000004537         lea        rdi, qword [r15+rax-0x24]                   ; argument "__s" for method j_strspn
000000000000453c         lea        rsi, qword [a0123456789abcd]                ; argument "__accept" for method j_strspn, "-0123456789abcdefABCDEF"
0000000000004543         call       j_strspn                                    ; strspn
0000000000004548         cmp        rax, 0x24
000000000000454c         jne        loc_4570

000000000000454e         mov        rdi, qword [rsp+0x448+var_448]
0000000000004552         xor        esi, esi
0000000000004554         call       canonicalize_filename_mode                  ; canonicalize_filename_mode
0000000000004559         test       rax, rax
000000000000455c         mov        r14, rax
000000000000455f         je         loc_4570

0000000000004561         mov        rdi, qword [rsp+0x448+var_448]              ; argument "__ptr" for method j_free
0000000000004565         call       j_free                                      ; free
000000000000456a         mov        qword [rsp+0x448+var_448], r14
000000000000456e         nop

                     loc_4570:
0000000000004570         lea        rax, qword [aSsArgumentSToo+30]             ; 0x10959, CODE XREF=get_dev+471, get_dev+485, get_dev+508, get_dev+527
0000000000004577         test       rbx, rbx
000000000000457a         mov        rsi, qword [rsp+0x448+var_400]
000000000000457f         mov        qword [rsp+0x448+var_3A0], 0x1
000000000000458b         mov        qword [rsp+0x448+var_3A8], 0x1
0000000000004597         cmove      rbx, rax
000000000000459b         mov        rax, qword [rsp+0x448+var_3F8]
00000000000045a0         mov        byte [rsp+0x448+var_388], 0x0
00000000000045a8         cmp        rsi, 0xfffffffffffffffd
00000000000045ac         mov        qword [rsp+0x448+var_398], rsi
00000000000045b4         mov        qword [rsp+0x448+var_378], 0xffffffffffffffff
00000000000045c0         mov        byte [rsp+0x448+var_370], 0x0
00000000000045c8         mov        qword [rsp+0x448+var_380], rax
00000000000045d0         mov        qword [rsp+0x448+var_390], rax
00000000000045d8         ja         loc_45e4

00000000000045da         cmp        rax, 0xfffffffffffffffd
00000000000045de         jbe        loc_4a50

                     loc_45e4:
00000000000045e4         mov        r8, qword [rsp+0x448+var_410]               ; CODE XREF=get_dev+648, sub_48a0+457
00000000000045e9         mov        rdx, qword [output_block_size]              ; output_block_size
00000000000045f0         mov        rcx, qword [rsp+0x448+var_418]
00000000000045f5         mov        r9, qword [rsp+0x448+var_428]
00000000000045fa         mov        rdi, qword [rsp+0x448+var_420]
00000000000045ff         mov        qword [rsp+0x448+var_3B8], 0xffffffffffffffff
000000000000460b         cmp        r8, 0xfffffffffffffffd
000000000000460f         mov        qword [rsp+0x448+var_3E0], rdx
0000000000004614         mov        qword [rsp+0x448+var_3D0], r8
0000000000004619         setbe      dl
000000000000461c         and        dl, byte [rsp+0x448+var_408]
0000000000004620         cmp        rcx, 0xfffffffffffffffd
0000000000004624         mov        qword [rsp+0x448+var_3E8], r9
0000000000004629         mov        qword [rsp+0x448+var_3D8], rdi
000000000000462e         mov        qword [rsp+0x448+var_3C0], rcx
0000000000004636         mov        byte [rsp+0x448+var_3B0], 0x0
000000000000463e         mov        byte [rsp+0x448+var_3C8], dl
0000000000004645         ja         loc_4651

0000000000004647         cmp        rdi, 0xfffffffffffffffd
000000000000464b         jbe        loc_4a32

                     loc_4651:
0000000000004651         cmp        byte [print_grand_total], 0x0               ; print_grand_total, CODE XREF=get_dev+757, sub_48a0+427
0000000000004658         je         loc_46d0

000000000000465a         cmp        byte [rsp+0x448+var_439], 0x0
000000000000465f         je         loc_46d0

0000000000004661         cmp        rsi, 0xfffffffffffffffd
0000000000004665         ja         loc_466e

0000000000004667         add        qword [qword_2143c8], rsi                   ; qword_2143c8

                     loc_466e:
000000000000466e         cmp        rax, 0xfffffffffffffffd                     ; CODE XREF=get_dev+789
0000000000004672         ja         loc_467b

0000000000004674         add        qword [qword_2143d0], rax                   ; qword_2143d0

                     loc_467b:
000000000000467b         cmp        rdi, 0xfffffffffffffffd                     ; CODE XREF=get_dev+802
000000000000467f         ja         loc_468c

0000000000004681         imul       rdi, r9
0000000000004685         add        qword [qword_2143a8], rdi                   ; qword_2143a8

                     loc_468c:
000000000000468c         cmp        rcx, 0xfffffffffffffffd                     ; CODE XREF=get_dev+815
0000000000004690         ja         loc_469d

0000000000004692         imul       rcx, r9
0000000000004696         add        qword [qword_2143b0], rcx                   ; qword_2143b0

                     loc_469d:
000000000000469d         cmp        r8, 0xfffffffffffffffd                      ; CODE XREF=get_dev+832
00000000000046a1         ja         loc_46d0

00000000000046a3         movzx      edi, byte [byte_2143c0]                     ; byte_2143c0
00000000000046aa         mov        rax, r9
00000000000046ad         imul       rax, r8
00000000000046b1         mov        rcx, qword [qword_2143b8]                   ; qword_2143b8
00000000000046b8         mov        esi, edi
00000000000046ba         xor        esi, 0x1
00000000000046bd         cmp        sil, dl
00000000000046c0         je         loc_4ce0

00000000000046c6         add        rax, rcx
00000000000046c9         mov        qword [qword_2143b8], rax                   ; qword_2143b8

                     loc_46d0:
00000000000046d0         xor        ebp, ebp                                    ; CODE XREF=get_dev+776, get_dev+783, get_dev+849, sub_4a7e+640, sub_4a7e+653
00000000000046d2         cmp        qword [ncolumns], 0x0                       ; ncolumns
00000000000046da         mov        rcx, qword [columns]                        ; columns
00000000000046e1         je         loc_47a1

00000000000046e7         lea        r15, qword [aFile+14]                       ; 0xf2f0
00000000000046ee         nop
00000000000046f0         mov        rax, qword [rcx+rbp*8]
00000000000046f4         lea        r14, qword [rbp*8]
00000000000046fc         mov        edx, dword [rax+0x10]
00000000000046ff         cmp        edx, 0x1
0000000000004702         je         loc_48c0

0000000000004708         jb         loc_48b0

000000000000470e         cmp        edx, 0x2
0000000000004711         jne        loc_4d2f

0000000000004717         xor        ecx, ecx

                     loc_4719:
0000000000004719         cmp        dword [rax], 0xb                            ; CODE XREF=sub_48a0+21, sub_48a0+40
000000000000471c         ja         loc_4d10

0000000000004722         mov        eax, dword [rax]
0000000000004724         movsxd     rax, dword [r15+rax*4]
0000000000004728         add        rax, r15
000000000000472b         jmp        rax
                        ; endp
000000000000472d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_4730:
0000000000004730         mov        rdi, r12
0000000000004733         call       xstrdup                                     ; xstrdup
0000000000004738         mov        rdi, rax
000000000000473b         mov        qword [rsp+arg_10], rax
0000000000004740         test       rdi, rdi
0000000000004743         je         loc_4cc1

0000000000004749         call       replace_problematic_chars                   ; replace_problematic_chars
000000000000474e         mov        rdi, qword [rsp+arg_10]
0000000000004753         xor        esi, esi
0000000000004755         call       gnu_mbswidth                                ; gnu_mbswidth
000000000000475a         mov        rcx, qword [columns]                        ; columns
0000000000004761         cdqe
0000000000004763         mov        rdx, qword [rcx+r14]
0000000000004767         cmp        qword [rdx+0x20], rax
000000000000476b         cmovae     rax, qword [rdx+0x20]
0000000000004770         add        rbp, 0x1
0000000000004774         cmp        qword [ncolumns], rbp                       ; ncolumns
000000000000477b         mov        qword [rdx+0x20], rax
000000000000477f         mov        rdx, qword [nrows]                          ; nrows
0000000000004786         mov        rax, qword [table]                          ; table
000000000000478d         mov        rax, qword [rax+rdx*8-8]
0000000000004792         mov        rdx, qword [rsp+arg_10]
0000000000004797         mov        qword [rax+r14], rdx
000000000000479b         ja         get_dev+928
                        ; endp

                     loc_47a1:
00000000000047a1         mov        rdi, qword [rsp+0x448+var_448]              ; argument "__ptr" for method j_free, CODE XREF=get_dev+913
00000000000047a5         call       j_free                                      ; free
00000000000047aa         jmp        loc_43ac
00000000000047af         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_47b0:
00000000000047b0         mov        rax, qword [rcx+0x30]
00000000000047b4         cmp        rax, 0xfffffffffffffffd
00000000000047b8         jbe        loc_48d0

                     loc_47be:
00000000000047be         lea        rdi, qword [aSsArgumentSToo+30]             ; argument "__s" for method j_strdup, 0x10959, CODE XREF=sub_48a0+194, sub_48a0+284
00000000000047c5         call       j_strdup                                    ; strdup
00000000000047ca         mov        rdi, rax
00000000000047cd         mov        qword [rsp+arg_10], rax

                     loc_47d2:
00000000000047d2         test       rdi, rdi                                    ; CODE XREF=sub_48a0+326
00000000000047d5         jne        sub_4730+25

00000000000047db         jmp        loc_4a79


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_168: int8_t, 368
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_47e0:
00000000000047e0         movzx      edi, byte [rcx+0x20]
00000000000047e4         mov        rsi, qword [rcx+0x18]
00000000000047e8         lea        rdx, qword [rsp+arg_168]
00000000000047f0         mov        r8, qword [rcx+8]                           ; CODE XREF=sub_47e0+72
00000000000047f4         mov        rcx, qword [rcx]
00000000000047f7         call       df_readable                                 ; df_readable
00000000000047fc         mov        rdi, rax
00000000000047ff         call       xstrdup                                     ; xstrdup
0000000000004804         mov        rdi, rax
0000000000004807         mov        qword [rsp+arg_10], rax
000000000000480c         jmp        sub_4730+16
                        ; endp
0000000000004811         nop        dword [rax]
0000000000004818         lea        rdx, qword [rsp+0x170]
0000000000004820         mov        rsi, qword [rcx+0x30]
0000000000004824         movzx      edi, byte [rcx+0x38]
0000000000004828         jmp        sub_47e0+16
000000000000482a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4830:
0000000000004830         mov        rax, qword [rcx+0x10]
0000000000004834         lea        rdi, qword [aSsArgumentSToo+30]             ; 0x10959
000000000000483b         cmp        rax, 0xfffffffffffffffd
000000000000483f         ja         sub_47e0+31

0000000000004841         mov        r8, qword [rcx+8]                           ; argument #5 for method human_readable
0000000000004845         mov        edx, dword [human_output_opts]              ; argument #3 for method human_readable, human_output_opts
000000000000484b         lea        rsi, qword [rsp+368]                        ; argument #2 for method human_readable
0000000000004853         mov        rcx, qword [rcx]                            ; argument #4 for method human_readable
0000000000004856         mov        rdi, rax                                    ; argument #1 for method human_readable
0000000000004859         call       human_readable                              ; human_readable
000000000000485e         mov        rdi, rax
0000000000004861         jmp        sub_47e0+31
                        ; endp
0000000000004863         nop        dword [rax+rax]
0000000000004868         mov        rdi, rbx
000000000000486b         call       xstrdup                                     ; xstrdup


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4870:
0000000000004870         mov        rdi, rax
0000000000004873         mov        qword [rsp+24], rax
0000000000004878         jmp        sub_4730+16
                        ; endp
000000000000487d         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4880:
0000000000004880         mov        rdi, qword [rsp+0]                          ; argument #1 for method xstrdup
0000000000004884         call       xstrdup                                     ; xstrdup
0000000000004889         mov        rdi, rax
000000000000488c         mov        qword [rsp+24], rax
0000000000004891         jmp        sub_4730+16
                        ; endp
0000000000004896         nop        word [cs:rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_48a0:
00000000000048a0         mov        rdi, r13
00000000000048a3         jmp        sub_47e0+31
                        ; endp
00000000000048a8         nop        dword [rax+rax]

                     loc_48b0:
00000000000048b0         lea        rcx, qword [rsp+0x448+var_3E8]              ; CODE XREF=get_dev+952
00000000000048b5         jmp        loc_4719
00000000000048ba         align      64

                     loc_48c0:
00000000000048c0         lea        rcx, qword [rsp+0x448+var_3A8]              ; CODE XREF=get_dev+946
00000000000048c8         jmp        loc_4719
00000000000048cd         align      16

                     loc_48d0:
00000000000048d0         mov        rsi, qword [rcx+0x18]                       ; CODE XREF=sub_47b0+8
00000000000048d4         cmp        rsi, 0xfffffffffffffffd
00000000000048d8         ja         sub_47b0+14

00000000000048de         cmp        byte [rcx+0x38], 0x0
00000000000048e2         movzx      edi, byte [rcx+0x20]
00000000000048e6         jne        loc_4a10

00000000000048ec         movabs     rdx, 0x28f5c28f5c28f5c
00000000000048f6         cmp        rax, rdx
00000000000048f9         ja         loc_4918

00000000000048fb         mov        rcx, rax
00000000000048fe         xor        edx, edx
0000000000004900         add        rcx, rsi
0000000000004903         setb       dl
0000000000004906         test       rcx, rcx
0000000000004909         je         loc_4918

000000000000490b         cmp        dil, dl
000000000000490e         je         loc_4b70

0000000000004914         nop        dword [rax]

                     loc_4918:
0000000000004918         test       rax, rax                                    ; CODE XREF=sub_48a0+89, sub_48a0+105
000000000000491b         js         loc_4ae2

0000000000004921         pxor       xmm0, xmm0
0000000000004925         cvtsi2sd   xmm0, rax

                     loc_492a:
000000000000492a         test       dil, dil                                    ; CODE XREF=sub_48a0+397, sub_4a7e+125
000000000000492d         je         sub_4a7e+2

0000000000004933         neg        rsi
0000000000004936         test       rsi, rsi
0000000000004939         js         loc_4ac4

000000000000493f         pxor       xmm1, xmm1
0000000000004943         cvtsi2sd   xmm1, rsi

                     loc_4948:
0000000000004948         xorpd      xmm1, xmmword [aCannotAccessSO+56]          ; 0xfeb0, CODE XREF=sub_4a7e+95
                        ; endp

                     loc_4950:
0000000000004950         addsd      xmm1, xmm0                                  ; CODE XREF=sub_4a7e+16, sub_4a7e+155
0000000000004954         pxor       xmm5, xmm5
0000000000004958         pxor       xmm3, xmm3
000000000000495c         ucomisd    xmm1, xmm5
0000000000004960         jp         loc_4968

0000000000004962         je         loc_47be

                     loc_4968:
0000000000004968         mulsd      xmm0, qword [double_fec0]                   ; double_fec0, CODE XREF=sub_48a0+192
0000000000004970         movsd      xmm2, qword [double_fec8]                   ; double_fec8
0000000000004978         divsd      xmm0, xmm1
000000000000497c         pxor       xmm1, xmm1
0000000000004980         cvttsd2si  rax, xmm0
0000000000004985         cvtsi2sd   xmm1, rax
000000000000498a         movapd     xmm4, xmm1
000000000000498e         subsd      xmm4, xmm2
0000000000004992         ucomisd    xmm0, xmm4
0000000000004996         jbe        loc_49b8

0000000000004998         addsd      xmm2, xmm1
000000000000499c         ucomisd    xmm2, xmm0
00000000000049a0         jb         loc_49b8

00000000000049a2         ucomisd    xmm0, xmm1
00000000000049a6         ja         loc_4b5c

00000000000049ac         pxor       xmm0, xmm0
00000000000049b0         addsd      xmm0, xmm1
00000000000049b4         nop        dword [rax]

                     loc_49b8:
00000000000049b8         ucomisd    xmm0, xmm3                                  ; CODE XREF=sub_48a0+246, sub_48a0+256, sub_4a7e+226
00000000000049bc         jb         loc_47be

00000000000049c2         lea        rdi, qword [rsp+arg_10]
00000000000049c7         lea        rsi, qword [a0f]                            ; "%.0f%%"
00000000000049ce         mov        eax, 0x1
00000000000049d3         call       rpl_asprintf                                ; rpl_asprintf
00000000000049d8         cmp        eax, 0xffffffff
00000000000049db         je         loc_4a70

00000000000049e1         mov        rdi, qword [rsp+arg_10]
00000000000049e6         jmp        loc_47d2
00000000000049eb         align      16

                     loc_49f0:
00000000000049f0         cmp        byte [show_all_fs], 0x0                     ; show_all_fs, CODE XREF=get_dev+419
00000000000049f7         jne        loc_44f9

00000000000049fd         cmp        byte [show_listed_fs], 0x0                  ; show_listed_fs
0000000000004a04         jne        loc_44f9

0000000000004a0a         jmp        loc_43ac
0000000000004a0f         align      16

                     loc_4a10:
0000000000004a10         neg        rax                                         ; CODE XREF=sub_48a0+70
0000000000004a13         test       rax, rax
0000000000004a16         js         loc_4aa6

0000000000004a1c         pxor       xmm0, xmm0
0000000000004a20         cvtsi2sd   xmm0, rax

                     loc_4a25:
0000000000004a25         xorpd      xmm0, xmmword [aCannotAccessSO+56]          ; 0xfeb0, CODE XREF=sub_4a7e+65
0000000000004a2d         jmp        loc_492a

                     loc_4a32:
0000000000004a32         mov        r10, rdi                                    ; CODE XREF=get_dev+763
0000000000004a35         sub        r10, rcx
0000000000004a38         cmp        rdi, rcx
0000000000004a3b         mov        qword [rsp+0x448+var_3B8], r10
0000000000004a43         setb       byte [rsp+0x448+var_3B0]
0000000000004a4b         jmp        loc_4651

                     loc_4a50:
0000000000004a50         mov        rdx, rsi                                    ; CODE XREF=get_dev+654
0000000000004a53         sub        rdx, rax
0000000000004a56         cmp        rsi, rax
0000000000004a59         mov        qword [rsp+0x448+var_378], rdx
0000000000004a61         setb       byte [rsp+0x448+var_370]
0000000000004a69         jmp        loc_45e4
0000000000004a6e         align      16

                     loc_4a70:
0000000000004a70         mov        qword [rsp+arg_10], 0x0                     ; CODE XREF=sub_48a0+315

                     loc_4a79:
0000000000004a79         call       xalloc_die                                  ; xalloc_die, CODE XREF=sub_47b0+43
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_4a7e:
0000000000004a7e         nop
0000000000004a80         test       rsi, rsi
0000000000004a83         js         loc_4b00

0000000000004a85         pxor       xmm1, xmm1
0000000000004a89         cvtsi2sd   xmm1, rsi
0000000000004a8e         jmp        loc_4950

                     loc_4a93:
0000000000004a93         test       r12, r12                                    ; CODE XREF=get_dev+357
0000000000004a96         mov        rax, r12
0000000000004a99         cmove      rax, r14
0000000000004a9d         mov        qword [rsp+0x448+var_448], rax
0000000000004aa1         jmp        loc_44bb

                     loc_4aa6:
0000000000004aa6         mov        rdx, rax                                    ; CODE XREF=sub_48a0+374
0000000000004aa9         pxor       xmm0, xmm0
0000000000004aad         shr        rdx, 0x1
0000000000004ab0         and        eax, 0x1
0000000000004ab3         or         rdx, rax
0000000000004ab6         cvtsi2sd   xmm0, rdx
0000000000004abb         addsd      xmm0, xmm0
0000000000004abf         jmp        loc_4a25

                     loc_4ac4:
0000000000004ac4         mov        rax, rsi                                    ; CODE XREF=sub_48a0+153
0000000000004ac7         pxor       xmm1, xmm1
0000000000004acb         shr        rax, 0x1
0000000000004ace         and        esi, 0x1
0000000000004ad1         or         rax, rsi
0000000000004ad4         cvtsi2sd   xmm1, rax
0000000000004ad9         addsd      xmm1, xmm1
0000000000004add         jmp        loc_4948

                     loc_4ae2:
0000000000004ae2         mov        rdx, rax                                    ; CODE XREF=sub_48a0+123
0000000000004ae5         pxor       xmm0, xmm0
0000000000004ae9         shr        rdx, 0x1
0000000000004aec         and        eax, 0x1
0000000000004aef         or         rdx, rax
0000000000004af2         cvtsi2sd   xmm0, rdx
0000000000004af7         addsd      xmm0, xmm0
0000000000004afb         jmp        loc_492a

                     loc_4b00:
0000000000004b00         mov        rax, rsi                                    ; CODE XREF=sub_4a7e+5
0000000000004b03         pxor       xmm1, xmm1
0000000000004b07         shr        rax, 0x1
0000000000004b0a         and        esi, 0x1
0000000000004b0d         or         rax, rsi
0000000000004b10         cvtsi2sd   xmm1, rax
0000000000004b15         addsd      xmm1, xmm1
0000000000004b19         jmp        loc_4950

                     loc_4b1e:
0000000000004b1e         cmp        byte [rsp+0x448+var_440], 0x0               ; CODE XREF=get_dev+259
0000000000004b23         je         loc_4b65

0000000000004b25         cmp        byte [show_all_fs], 0x0                     ; show_all_fs
0000000000004b2c         jne        loc_4be8

                     loc_4b32:
0000000000004b32         cmp        qword [rsp+0x448+var_420], 0x0              ; CODE XREF=sub_4a7e+386, sub_4a7e+402, sub_4a7e+440, sub_4a7e+453, sub_4a7e+472, sub_4a7e+488, sub_4a7e+540
0000000000004b38         jne        loc_4b50

                     loc_4b3a:
0000000000004b3a         cmp        byte [show_all_fs], 0x0                     ; show_all_fs, CODE XREF=sub_4a7e+239
0000000000004b41         jne        loc_4b50

0000000000004b43         cmp        byte [show_listed_fs], 0x0                  ; show_listed_fs
0000000000004b4a         je         loc_43ac

                     loc_4b50:
0000000000004b50         mov        byte [file_systems_processed], 0x1          ; file_systems_processed, CODE XREF=sub_4a7e+186, sub_4a7e+195, sub_4a7e+237, sub_4a7e+357
0000000000004b57         jmp        loc_44f9

                     loc_4b5c:
0000000000004b5c         movapd     xmm0, xmm2                                  ; CODE XREF=sub_48a0+262
0000000000004b60         jmp        loc_49b8

                     loc_4b65:
0000000000004b65         cmp        qword [rsp+0x448+var_420], 0x0              ; CODE XREF=sub_4a7e+165
0000000000004b6b         jne        loc_4b50

0000000000004b6d         jmp        loc_4b3a
0000000000004b6f         align      16

                     loc_4b70:
0000000000004b70         lea        rax, qword [rax+rax*4]                      ; CODE XREF=sub_48a0+110
0000000000004b74         xor        edx, edx
0000000000004b76         lea        rax, qword [rax+rax*4]
0000000000004b7a         shl        rax, 0x2
0000000000004b7e         div        rcx
0000000000004b81         test       rdx, rdx
0000000000004b84         setne      dl
0000000000004b87         movzx      edx, dl
0000000000004b8a         add        rdx, rax
0000000000004b8d         js         loc_4c9f

0000000000004b93         pxor       xmm0, xmm0
0000000000004b97         pxor       xmm3, xmm3
0000000000004b9b         cvtsi2sd   xmm0, rdx
0000000000004ba0         jmp        sub_48a0+280
                        ; endp

                     loc_4ba5:
0000000000004ba5         cmp        byte [show_all_fs], 0x0                     ; show_all_fs, CODE XREF=get_dev+285, get_dev+294
0000000000004bac         je         loc_43ac

0000000000004bb2         mov        rax, 0xffffffffffffffff
0000000000004bb9         mov        byte [rsp+0x448+var_408], 0x0
0000000000004bbe         lea        rbx, qword [aSsArgumentSToo+30]             ; 0x10959
0000000000004bc5         mov        qword [rsp+0x448+var_3F8], rax
0000000000004bca         mov        qword [rsp+0x448+var_400], rax
0000000000004bcf         mov        qword [rsp+0x448+var_410], rax
0000000000004bd4         mov        qword [rsp+0x448+var_418], rax
0000000000004bd9         mov        qword [rsp+0x448+var_420], rax
0000000000004bde         mov        qword [rsp+0x448+var_428], rax
0000000000004be3         jmp        loc_4b50

                     loc_4be8:
0000000000004be8         mov        rsi, qword [rsp+0x448+var_448]              ; argument "__filename" for method j___xstat, CODE XREF=sub_4a7e+174
0000000000004bec         lea        rdx, qword [rsp+0x448+var_368]              ; argument "__stat_buf" for method j___xstat
0000000000004bf4         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000004bf9         call       j___xstat                                   ; __xstat
0000000000004bfe         test       eax, eax
0000000000004c00         jne        loc_4b32

0000000000004c06         mov        rdi, qword [devlist_table]                  ; devlist_table
0000000000004c0d         test       rdi, rdi
0000000000004c10         je         loc_4b32

0000000000004c16         mov        rax, qword [rsp+0x448+var_368]
0000000000004c1e         lea        rsi, qword [rsp+0x448+var_3A8]
0000000000004c26         mov        qword [rsp+0x448+var_3A8], rax
0000000000004c2e         call       hash_lookup                                 ; hash_lookup
0000000000004c33         test       rax, rax
0000000000004c36         je         loc_4b32

0000000000004c3c         mov        r15, qword [rax+8]
0000000000004c40         test       r15, r15
0000000000004c43         je         loc_4b32

0000000000004c49         mov        rdi, qword [r15]                            ; argument "__s1" for method j_strcmp
0000000000004c4c         mov        rsi, r14                                    ; argument "__s2" for method j_strcmp
0000000000004c4f         call       j_strcmp                                    ; strcmp
0000000000004c54         test       eax, eax
0000000000004c56         je         loc_4b32

0000000000004c5c         test       byte [r15+0x28], 0x2
0000000000004c61         je         loc_4c6c

0000000000004c63         test       bpl, bpl
0000000000004c66         jne        loc_4b32

                     loc_4c6c:
0000000000004c6c         or         rax, 0xffffffffffffffff                     ; CODE XREF=sub_4a7e+483
0000000000004c70         mov        byte [rsp+0x448+var_408], 0x0
0000000000004c75         lea        rbx, qword [aSsArgumentSToo+30]             ; 0x10959
0000000000004c7c         mov        qword [rsp+0x448+var_3F8], rax
0000000000004c81         mov        qword [rsp+0x448+var_400], rax
0000000000004c86         mov        qword [rsp+0x448+var_410], rax
0000000000004c8b         mov        qword [rsp+0x448+var_418], rax
0000000000004c90         mov        qword [rsp+0x448+var_420], rax
0000000000004c95         mov        qword [rsp+0x448+var_428], rax
0000000000004c9a         jmp        loc_4b32

                     loc_4c9f:
0000000000004c9f         mov        rax, rdx                                    ; CODE XREF=sub_4a7e+271
0000000000004ca2         pxor       xmm0, xmm0
0000000000004ca6         shr        rax, 0x1
0000000000004ca9         and        edx, 0x1
0000000000004cac         or         rax, rdx
0000000000004caf         pxor       xmm3, xmm3
0000000000004cb3         cvtsi2sd   xmm0, rax
0000000000004cb8         addsd      xmm0, xmm0
0000000000004cbc         jmp        sub_48a0+280
                        ; endp

                     loc_4cc1:
0000000000004cc1         lea        rcx, qword [__PRETTY_FUNCTION__.9006]       ; argument "__function" for method j___assert_fail, "get_dev", CODE XREF=sub_4730+19
0000000000004cc8         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/df.c"
0000000000004ccf         lea        rdi, qword [aEmptyCell]                     ; argument "__assertion" for method j___assert_fail, "!\\\"empty cell\\\""
0000000000004cd6         mov        edx, 0x4d2                                  ; argument "__line" for method j___assert_fail
0000000000004cdb         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4ce0:
0000000000004ce0         test       dil, dil                                    ; CODE XREF=get_dev+880
0000000000004ce3         je         loc_4d61

0000000000004ce5         neg        rcx

                     loc_4ce8:
0000000000004ce8         cmp        rcx, rax                                    ; CODE XREF=sub_4a7e+742
0000000000004ceb         jbe        loc_4d4e

0000000000004ced         sub        rcx, rax
0000000000004cf0         mov        qword [qword_2143b8], rcx                   ; qword_2143b8

                     loc_4cf7:
0000000000004cf7         cmp        byte [byte_2143c0], 0x0                     ; byte_2143c0, CODE XREF=sub_4a7e+737
0000000000004cfe         je         loc_46d0

0000000000004d04         neg        qword [qword_2143b8]                        ; qword_2143b8
0000000000004d0b         jmp        loc_46d0

                     loc_4d10:
0000000000004d10         lea        rcx, qword [__PRETTY_FUNCTION__.9006]       ; argument "__function" for method j___assert_fail, "get_dev", CODE XREF=get_dev+972
0000000000004d17         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/df.c"
0000000000004d1e         lea        rdi, qword [aUnhandledField]                ; argument "__assertion" for method j___assert_fail, "!\\\"unhandled field\\\""
0000000000004d25         mov        edx, 0x4ce                                  ; argument "__line" for method j___assert_fail
0000000000004d2a         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4d2f:
0000000000004d2f         lea        rcx, qword [__PRETTY_FUNCTION__.9006]       ; argument "__function" for method j___assert_fail, "get_dev", CODE XREF=get_dev+961
0000000000004d36         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/df.c"
0000000000004d3d         lea        rdi, qword [aBadFieldtype]                  ; argument "__assertion" for method j___assert_fail, "!\\\"bad field_type\\\""
0000000000004d44         mov        edx, 0x468                                  ; argument "__line" for method j___assert_fail
0000000000004d49         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_4d4e:
0000000000004d4e         sub        rax, rcx                                    ; CODE XREF=sub_4a7e+621
0000000000004d51         mov        byte [byte_2143c0], sil                     ; byte_2143c0
0000000000004d58         mov        qword [qword_2143b8], rax                   ; qword_2143b8
0000000000004d5f         jmp        loc_4cf7

                     loc_4d61:
0000000000004d61         neg        rax                                         ; CODE XREF=sub_4a7e+613
0000000000004d64         jmp        loc_4ce8

                     loc_4d66:
0000000000004d66         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=get_dev+109
                        ; endp
0000000000004d6b         align      16                                          ; End of unwind block (FDE at 0x1166c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
0000000000004d70         push       r13                                         ; Begin of unwind block (FDE at 0x116b8), CODE XREF=main+1099, main+5375, main+5454, decode_output_arg+162, __argmatch_die+5
0000000000004d72         push       r12
0000000000004d74         mov        edx, 0x5
0000000000004d79         push       rbp
0000000000004d7a         push       rbx
0000000000004d7b         mov        ebp, edi
0000000000004d7d         sub        rsp, 0x88
0000000000004d84         mov        rbx, qword [program_name]                   ; program_name
0000000000004d8b         mov        rax, qword [fs:0x28]
0000000000004d94         mov        qword [rsp+0xa8+var_30], rax
0000000000004d99         xor        eax, eax
0000000000004d9b         test       edi, edi
0000000000004d9d         je         loc_4dcd

0000000000004d9f         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000004da6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004da8         call       j_dcgettext                                 ; dcgettext
0000000000004dad         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000004db4         mov        rdx, rax
0000000000004db7         mov        rcx, rbx
0000000000004dba         mov        esi, 0x1
0000000000004dbf         xor        eax, eax
0000000000004dc1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_4dc6:
0000000000004dc6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+974
0000000000004dc8         call       j_exit                                      ; exit
                        ; endp

                     loc_4dcd:
0000000000004dcd         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n", CODE XREF=usage+45
0000000000004dd4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004dd6         call       j_dcgettext                                 ; dcgettext
0000000000004ddb         mov        rdx, rbx
0000000000004dde         mov        rsi, rax
0000000000004de1         mov        edi, 0x1
0000000000004de6         xor        eax, eax
0000000000004de8         call       j___printf_chk                              ; __printf_chk
0000000000004ded         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004df4         lea        rsi, qword [aShowInformatio]                ; argument "msgid" for method j_dcgettext, "Show information about the file system on which each FILE resides,\\nor all file systems by default.\\n"
0000000000004dfb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e00         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e02         call       j_dcgettext                                 ; dcgettext
0000000000004e07         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e0a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e0d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e12         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e19         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000004e20         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e25         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e27         call       j_dcgettext                                 ; dcgettext
0000000000004e2c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e2f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e32         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e37         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e3e         lea        rsi, qword [aAAllIncludePse]                ; argument "msgid" for method j_dcgettext, "  -a, --all             include pseudo, duplicate, inaccessible file systems\\n  -B, --block-size=SIZE  scale sizes by SIZE before printing them; e.g.,\\n                           '-BM' prints sizes in units of 1,048,576 bytes;\\n                           see …"
0000000000004e45         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e4a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e4c         call       j_dcgettext                                 ; dcgettext
0000000000004e51         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e54         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e57         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e5c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e63         lea        rsi, qword [aIInodesListIno]                ; argument "msgid" for method j_dcgettext, "  -i, --inodes          list inode information instead of block usage\\n  -k                    like --block-size=1K\\n  -l, --local           limit listing to local file systems\\n      --no-sync         do not invoke sync before getting usage info (default)\\n"
0000000000004e6a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e6f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e71         call       j_dcgettext                                 ; dcgettext
0000000000004e76         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e79         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004e7c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004e81         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004e88         lea        rsi, qword [aOutputfieldlis]                ; argument "msgid" for method j_dcgettext, "      --output[=FIELD_LIST]  use the output format defined by FIELD_LIST,\\n                               or print all fields if FIELD_LIST is omitted.\\n  -P, --portability     use the POSIX output format\\n      --sync            invoke sync before getting us…"
0000000000004e8f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004e94         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004e96         call       j_dcgettext                                 ; dcgettext
0000000000004e9b         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004e9e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ea1         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ea6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ead         lea        rsi, qword [aTotalElideAllE]                ; argument "msgid" for method j_dcgettext, "      --total           elide all entries insignificant to available space,\\n                          and produce a grand total\\n"
0000000000004eb4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004eb9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ebb         call       j_dcgettext                                 ; dcgettext
0000000000004ec0         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ec3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004ec6         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ecb         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ed2         lea        rsi, qword [aTTypetypeLimit]                ; argument "msgid" for method j_dcgettext, "  -t, --type=TYPE       limit listing to file systems of type TYPE\\n  -T, --print-type      print file system type\\n  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE\\n  -v                    (ignored)\\n"
0000000000004ed9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004ede         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004ee0         call       j_dcgettext                                 ; dcgettext
0000000000004ee5         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004ee8         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004eeb         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004ef0         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ef7         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000004efe         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f03         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f05         call       j_dcgettext                                 ; dcgettext
0000000000004f0a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004f0d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004f10         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004f15         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004f1c         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000004f23         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f28         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f2a         call       j_dcgettext                                 ; dcgettext
0000000000004f2f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004f32         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004f35         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004f3a         lea        rsi, qword [aNdisplayValues]                ; argument "msgid" for method j_dcgettext, "\\nDisplay values are in units of the first available SIZE from --block-size,\\nand the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\\nOtherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\\n"
0000000000004f41         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f46         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f48         call       j_dcgettext                                 ; dcgettext
0000000000004f4d         lea        rdx, qword [aEmptyCell+17]                  ; 0xf06f
0000000000004f54         mov        rsi, rax
0000000000004f57         mov        edi, 0x1
0000000000004f5c         xor        eax, eax
0000000000004f5e         call       j___printf_chk                              ; __printf_chk
0000000000004f63         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004f6a         lea        rsi, qword [aNtheSizeArgume]                ; argument "msgid" for method j_dcgettext, "\\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\\n"
0000000000004f71         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f76         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f78         call       j_dcgettext                                 ; dcgettext
0000000000004f7d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004f80         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004f83         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004f88         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004f8f         lea        rsi, qword [aNfieldlistIsAC]                ; argument "msgid" for method j_dcgettext, "\\nFIELD_LIST is a comma-separated list of columns to be included.  Valid\\nfield names are: 'source', 'fstype', 'itotal', 'iused', 'iavail', 'ipcent',\\n'size', 'used', 'avail', 'pcent', 'file' and 'target' (see info page).\\n"
0000000000004f96         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004f9b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004f9d         call       j_dcgettext                                 ; dcgettext
0000000000004fa2         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000004fa5         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000004fa8         lea        rbx, qword [aEmptyCell+14]                  ; 0xf06c
0000000000004faf         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000004fb4         lea        rax, qword [aEmptyCell+20]                  ; 0xf072
0000000000004fbb         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
0000000000004fc2         mov        qword [rsp+0xa8+var_48], 0x0
0000000000004fcb         mov        qword [rsp+0xa8+var_40], 0x0
0000000000004fd4         mov        rdx, rsp
0000000000004fd7         mov        qword [rsp+0xa8+var_A8], rax
0000000000004fdb         lea        rax, qword [aTestInvocation]                ; "test invocation"
0000000000004fe2         mov        qword [rsp+0xa8+var_78], rcx
0000000000004fe7         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
0000000000004fee         mov        qword [rsp+0xa8+var_A0], rax
0000000000004ff3         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000004ffa         mov        qword [rsp+0xa8+var_68], rcx
0000000000004fff         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000005006         mov        qword [rsp+0xa8+var_98], rax
000000000000500b         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
0000000000005012         mov        qword [rsp+0xa8+var_58], rcx
0000000000005017         mov        qword [rsp+0xa8+var_90], rax
000000000000501c         lea        rax, qword [aSha224sum]                     ; "sha224sum"
0000000000005023         mov        qword [rsp+0xa8+var_88], rax
0000000000005028         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
000000000000502f         mov        qword [rsp+0xa8+var_80], rax
0000000000005034         mov        qword [rsp+0xa8+var_70], rax
0000000000005039         mov        qword [rsp+0xa8+var_60], rax
000000000000503e         mov        qword [rsp+0xa8+var_50], rax
0000000000005043         nop        dword [rax+rax]

                     loc_5048:
0000000000005048         add        rdx, 0x10                                   ; CODE XREF=usage+757
000000000000504c         mov        rdi, qword [rdx]
000000000000504f         test       rdi, rdi
0000000000005052         je         loc_5067

0000000000005054         mov        ecx, 0x3
0000000000005059         mov        rsi, rbx
000000000000505c         rep  cmpsb byte [rsi], byte [rdi]
000000000000505e         seta       al
0000000000005061         sbb        al, 0x0
0000000000005063         test       al, al
0000000000005065         jne        loc_5048

                     loc_5067:
0000000000005067         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+738
000000000000506b         xor        edi, edi
000000000000506d         mov        edx, 0x5
0000000000005072         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000005079         test       r12, r12
000000000000507c         je         loc_5143

0000000000005082         call       j_dcgettext                                 ; dcgettext
0000000000005087         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000508e         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xf0e8
0000000000005095         mov        rsi, rax
0000000000005098         mov        edi, 0x1
000000000000509d         xor        eax, eax
000000000000509f         call       j___printf_chk                              ; __printf_chk
00000000000050a4         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000050a6         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000050ab         call       j_setlocale                                 ; setlocale
00000000000050b0         test       rax, rax
00000000000050b3         je         loc_50d1

00000000000050b5         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xf0f6
00000000000050bc         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000050c1         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000050c4         call       j_strncmp                                   ; strncmp
00000000000050c9         test       eax, eax
00000000000050cb         jne        loc_51d8

                     loc_50d1:
00000000000050d1         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+835, usage+1165
00000000000050d8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000050da         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000050df         call       j_dcgettext                                 ; dcgettext
00000000000050e4         lea        rcx, qword [aEmptyCell+14]                  ; 0xf06c
00000000000050eb         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000050f2         mov        rsi, rax
00000000000050f5         mov        edi, 0x1
00000000000050fa         xor        eax, eax
00000000000050fc         call       j___printf_chk                              ; __printf_chk
0000000000005101         cmp        r12, rbx
0000000000005104         lea        rcx, qword [aMulticallInvoc+10]             ; 0xf08e
000000000000510b         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0x10601
0000000000005112         cmove      rbx, rcx

                     loc_5116:
0000000000005116         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1116
000000000000511d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000511f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005124         call       j_dcgettext                                 ; dcgettext
0000000000005129         mov        rcx, rbx
000000000000512c         mov        rsi, rax
000000000000512f         mov        rdx, r12
0000000000005132         mov        edi, 0x1
0000000000005137         xor        eax, eax
0000000000005139         call       j___printf_chk                              ; __printf_chk
000000000000513e         jmp        loc_4dc6

                     loc_5143:
0000000000005143         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+780
0000000000005148         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000514f         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xf0e8
0000000000005156         mov        rsi, rax
0000000000005159         mov        edi, 0x1
000000000000515e         xor        eax, eax
0000000000005160         call       j___printf_chk                              ; __printf_chk
0000000000005165         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000005167         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
000000000000516c         call       j_setlocale                                 ; setlocale
0000000000005171         test       rax, rax
0000000000005174         je         loc_518e

0000000000005176         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xf0f6
000000000000517d         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
0000000000005182         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
0000000000005185         call       j_strncmp                                   ; strncmp
000000000000518a         test       eax, eax
000000000000518c         jne        loc_51d1

                     loc_518e:
000000000000518e         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1028
0000000000005195         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000519a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000519c         lea        r12, qword [aEmptyCell+14]                  ; 0xf06c
00000000000051a3         lea        rbx, qword [aMulticallInvoc+10]             ; 0xf08e
00000000000051aa         call       j_dcgettext                                 ; dcgettext
00000000000051af         lea        rcx, qword [aEmptyCell+14]                  ; 0xf06c
00000000000051b6         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000051bd         mov        rsi, rax
00000000000051c0         mov        edi, 0x1
00000000000051c5         xor        eax, eax
00000000000051c7         call       j___printf_chk                              ; __printf_chk
00000000000051cc         jmp        loc_5116

                     loc_51d1:
00000000000051d1         lea        r12, qword [aEmptyCell+14]                  ; 0xf06c, CODE XREF=usage+1052

                     loc_51d8:
00000000000051d8         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+859
00000000000051df         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000051e6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000051e8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000051ed         call       j_dcgettext                                 ; dcgettext
00000000000051f2         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000051f5         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000051f8         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000051fd         jmp        loc_50d1
0000000000005202         align      16                                          ; End of unwind block (FDE at 0x116b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     decode_output_arg:
0000000000005210         push       r15                                         ; Begin of unwind block (FDE at 0x116e4), CODE XREF=main+669, main+2931
0000000000005212         push       r14
0000000000005214         lea        r14, qword [field_data]                     ; field_data
000000000000521b         push       r13
000000000000521d         push       r12
000000000000521f         push       rbp
0000000000005220         push       rbx
0000000000005221         sub        rsp, 0x18
0000000000005225         call       xstrdup                                     ; xstrdup
000000000000522a         mov        qword [rsp+0x48+var_40], rax
000000000000522f         mov        r12, rax
0000000000005232         nop        word [rax+rax]

                     loc_5238:
0000000000005238         mov        esi, 0x2c                                   ; argument "__c" for method j_strchr, CODE XREF=decode_output_arg+239
000000000000523d         mov        rdi, r12                                    ; argument "__s" for method j_strchr
0000000000005240         xor        r13d, r13d
0000000000005243         call       j_strchr                                    ; strchr
0000000000005248         test       rax, rax
000000000000524b         je         loc_5254

000000000000524d         lea        r13, qword [rax+1]
0000000000005251         mov        byte [rax], 0x0

                     loc_5254:
0000000000005254         lea        r15, qword [field_data+8]                   ; 0x214028, CODE XREF=decode_output_arg+59
000000000000525b         xor        ebx, ebx
000000000000525d         nop        dword [rax]

                     loc_5260:
0000000000005260         mov        rbp, qword [r15]                            ; CODE XREF=decode_output_arg+108
0000000000005263         mov        rsi, r12                                    ; argument "__s2" for method j_strcmp
0000000000005266         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
0000000000005269         call       j_strcmp                                    ; strcmp
000000000000526e         test       eax, eax
0000000000005270         je         loc_52c0

0000000000005272         add        ebx, 0x1
0000000000005275         add        r15, 0x30
0000000000005279         cmp        ebx, 0xc
000000000000527c         jne        loc_5260

000000000000527e         mov        rdi, r12
0000000000005281         call       quote                                       ; quote
0000000000005286         lea        rsi, qword [aOptionOutputFi]                ; "option --output: field %s unknown"
000000000000528d         mov        rbx, rax
0000000000005290         mov        edx, 0x5

                     loc_5295:
0000000000005295         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=decode_output_arg+327
0000000000005297         call       j_dcgettext                                 ; dcgettext
000000000000529c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000529e         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000052a1         mov        rcx, rbx
00000000000052a4         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000052a6         xor        eax, eax
00000000000052a8         call       j_error                                     ; error
00000000000052ad         mov        edi, 0x1                                    ; argument #1 for method usage
00000000000052b2         call       usage                                       ; usage
00000000000052b7         nop        word [rax+rax]

                     loc_52c0:
00000000000052c0         mov        eax, ebx                                    ; CODE XREF=decode_output_arg+96
00000000000052c2         lea        rax, qword [rax+rax*2]
00000000000052c6         shl        rax, 0x4
00000000000052ca         cmp        byte [r14+rax+0x2c], 0x0
00000000000052d0         jne        loc_5340

00000000000052d2         mov        eax, 0x1
00000000000052d7         mov        ecx, ebx
00000000000052d9         shl        rax, cl
00000000000052dc         test       eax, a214                                   ; "_2.14"
00000000000052e1         jne        loc_5320

00000000000052e3         test       al, 0x10
00000000000052e5         jne        loc_5330

00000000000052e7         test       al, 0x4
00000000000052e9         je         loc_535c

00000000000052eb         lea        rsi, qword [aFullDocumentat+27]             ; 0xf115
00000000000052f2         mov        edi, ebx
00000000000052f4         call       alloc_field                                 ; alloc_field

                     loc_52f9:
00000000000052f9         test       r13, r13                                    ; CODE XREF=decode_output_arg+281, decode_output_arg+302
00000000000052fc         mov        r12, r13
00000000000052ff         jne        loc_5238

0000000000005305         mov        rdi, qword [rsp+0x48+var_40]                ; argument "__ptr" for method j_free
000000000000530a         add        rsp, 0x18
000000000000530e         pop        rbx
000000000000530f         pop        rbp
0000000000005310         pop        r12
0000000000005312         pop        r13
0000000000005314         pop        r14
0000000000005316         pop        r15
0000000000005318         jmp        j_free                                      ; free
                        ; endp
000000000000531d         align      32

                     loc_5320:
0000000000005320         xor        esi, esi                                    ; CODE XREF=decode_output_arg+209
0000000000005322         mov        edi, ebx
0000000000005324         call       alloc_field                                 ; alloc_field
0000000000005329         jmp        loc_52f9
000000000000532b         align      16

                     loc_5330:
0000000000005330         lea        rsi, qword [aAvail]                         ; "Avail", CODE XREF=decode_output_arg+213
0000000000005337         mov        edi, ebx
0000000000005339         call       alloc_field                                 ; alloc_field
000000000000533e         jmp        loc_52f9

                     loc_5340:
0000000000005340         mov        rdi, rbp                                    ; CODE XREF=decode_output_arg+192
0000000000005343         call       quote                                       ; quote
0000000000005348         mov        edx, 0x5
000000000000534d         mov        rbx, rax
0000000000005350         lea        rsi, qword [aOptionOutputFi_fd40]           ; "option --output: field %s used more than once"
0000000000005357         jmp        loc_5295

                     loc_535c:
000000000000535c         lea        rcx, qword [__PRETTY_FUNCTION__.8857]       ; argument "__function" for method j___assert_fail, "decode_output_arg", CODE XREF=decode_output_arg+217
0000000000005363         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/df.c"
000000000000536a         lea        rdi, qword [aInvalidField]                  ; argument "__assertion" for method j___assert_fail, "!\\\"invalid field\\\""
0000000000005371         mov        edx, 0x1dd                                  ; argument "__line" for method j___assert_fail
0000000000005376         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000537b         align      128                                         ; End of unwind block (FDE at 0x116e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_50: -80
        ;    var_60: -96
        ;    var_70: -112
        ;    var_80: -128
        ;    var_90: -144
        ;    var_A0: -160
        ;    var_B0: -176
        ;    var_C0: -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_E0: -224
        ;    var_F0: -240
        ;    var_100: -256
        ;    var_110: -272
        ;    var_120: -288
        ;    var_130: -304
        ;    var_140: -320
        ;    var_150: -336
        ;    var_158: int64_t, -344
        ;    var_160: int64_t, -352
        ;    var_161: int8_t, -353
        ;    var_170: int8_t, -368


                     find_mount_point:
0000000000005380         push       rbp                                         ; Begin of unwind block (FDE at 0x117fc), CODE XREF=main+2954
0000000000005381         mov        rbp, rsp
0000000000005384         push       r15
0000000000005386         push       r14
0000000000005388         push       r13
000000000000538a         lea        r13, qword [rbp+var_170]
0000000000005391         push       r12
0000000000005393         push       rbx
0000000000005394         mov        r12, rdi
0000000000005397         mov        rbx, rsi
000000000000539a         mov        rdi, r13
000000000000539d         sub        rsp, 0x148
00000000000053a4         mov        rax, qword [fs:0x28]
00000000000053ad         mov        qword [rbp+var_38], rax
00000000000053b1         xor        eax, eax
00000000000053b3         call       save_cwd                                    ; save_cwd
00000000000053b8         mov        r15d, eax
00000000000053bb         call       j___errno_location                          ; __errno_location
00000000000053c0         test       r15d, r15d
00000000000053c3         mov        r14, rax
00000000000053c6         jne        loc_56e5

00000000000053cc         mov        eax, dword [rbx+0x18]
00000000000053cf         and        eax, 0xf000
00000000000053d4         cmp        eax, 0x4000
00000000000053d9         je         loc_55c0

00000000000053df         mov        rdi, r12
00000000000053e2         call       dir_name                                    ; dir_name
00000000000053e7         mov        rdi, rax                                    ; argument "__s" for method j_strlen
00000000000053ea         mov        rbx, rax
00000000000053ed         call       j_strlen                                    ; strlen
00000000000053f2         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memcpy
00000000000053f6         add        rax, 0x1f
00000000000053fa         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
00000000000053fd         and        rax, 0xfffffffffffffff0
0000000000005401         sub        rsp, rax
0000000000005404         lea        rdi, qword [rsp+0x170+var_161]
0000000000005409         and        rdi, 0xfffffffffffffff0                     ; argument "__dest" for method j_memcpy
000000000000540d         call       j_memcpy                                    ; memcpy
0000000000005412         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
0000000000005415         mov        r12, rax
0000000000005418         call       j_free                                      ; free
000000000000541d         mov        rdi, r12                                    ; argument "__path" for method j_chdir
0000000000005420         call       j_chdir                                     ; chdir
0000000000005425         test       eax, eax
0000000000005427         js         loc_563e

000000000000542d         lea        rdx, qword [rbp+var_160]                    ; argument "__stat_buf" for method j___xstat
0000000000005434         lea        rsi, qword [aCannotChangeTo+31]             ; argument "__filename" for method j___xstat, 0xff0c
000000000000543b         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000005440         call       j___xstat                                   ; __xstat
0000000000005445         test       eax, eax
0000000000005447         js         loc_5680

                     loc_544d:
000000000000544d         lea        r12, qword [rbp+var_D0]                     ; CODE XREF=find_mount_point+696
0000000000005454         lea        rbx, qword [aCannotChangeTo+30]             ; 0xff0b
000000000000545b         jmp        loc_5513

                     loc_5460:
0000000000005460         mov        rax, qword [rbp+var_160]                    ; CODE XREF=find_mount_point+421
0000000000005467         cmp        qword [rbp+var_D0], rax
000000000000546e         jne        loc_55b0

0000000000005474         mov        rax, qword [rbp+var_158]
000000000000547b         cmp        qword [rbp+var_C8], rax
0000000000005482         je         loc_55b0

0000000000005488         mov        rdi, rbx                                    ; argument "__path" for method j_chdir
000000000000548b         call       j_chdir                                     ; chdir
0000000000005490         test       eax, eax
0000000000005492         js         loc_56c0

0000000000005498         movdqa     xmm0, xmmword [rbp+var_D0]
00000000000054a0         movaps     xmmword [rbp+var_160], xmm0
00000000000054a7         movdqa     xmm0, xmmword [rbp+var_C0]
00000000000054af         movaps     xmmword [rbp+var_150], xmm0
00000000000054b6         movdqa     xmm0, xmmword [rbp+var_B0]
00000000000054be         movaps     xmmword [rbp+var_140], xmm0
00000000000054c5         movdqa     xmm0, xmmword [rbp+var_A0]
00000000000054cd         movaps     xmmword [rbp+var_130], xmm0
00000000000054d4         movdqa     xmm0, xmmword [rbp+var_90]
00000000000054dc         movaps     xmmword [rbp+var_120], xmm0
00000000000054e3         movdqa     xmm0, xmmword [rbp+var_80]
00000000000054e8         movaps     xmmword [rbp+var_110], xmm0
00000000000054ef         movdqa     xmm0, xmmword [rbp+var_70]
00000000000054f4         movaps     xmmword [rbp+var_100], xmm0
00000000000054fb         movdqa     xmm0, xmmword [rbp+var_60]
0000000000005500         movaps     xmmword [rbp+var_F0], xmm0
0000000000005507         movdqa     xmm0, xmmword [rbp+var_50]
000000000000550c         movaps     xmmword [rbp+var_E0], xmm0

                     loc_5513:
0000000000005513         mov        rdx, r12                                    ; argument "__stat_buf" for method j___xstat, CODE XREF=find_mount_point+219
0000000000005516         mov        rsi, rbx                                    ; argument "__filename" for method j___xstat
0000000000005519         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
000000000000551e         call       j___xstat                                   ; __xstat
0000000000005523         test       eax, eax
0000000000005525         jns        loc_5460

000000000000552b         lea        rsi, qword [aCannotChangeTo+30]             ; 0xff0b
0000000000005532         mov        edi, 0x4
0000000000005537         call       quotearg_style                              ; quotearg_style
000000000000553c         lea        rsi, qword [aCannotStatS]                   ; "cannot stat %s"
0000000000005543         mov        rbx, rax
0000000000005546         mov        edx, 0x5

                     loc_554b:
000000000000554b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=find_mount_point+864
000000000000554d         call       j_dcgettext                                 ; dcgettext
0000000000005552         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000005555         mov        rcx, rbx
0000000000005558         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000555b         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000555d         xor        eax, eax
000000000000555f         xor        ebx, ebx
0000000000005561         call       j_error                                     ; error

                     loc_5566:
0000000000005566         mov        rdi, r13                                    ; CODE XREF=find_mount_point+568, find_mount_point+823
0000000000005569         mov        r12d, dword [r14]
000000000000556c         call       restore_cwd                                 ; restore_cwd
0000000000005571         test       eax, eax
0000000000005573         jne        loc_570e

0000000000005579         mov        rdi, r13
000000000000557c         call       free_cwd                                    ; free_cwd
0000000000005581         mov        dword [r14], r12d

                     loc_5584:
0000000000005584         mov        rcx, qword [rbp+var_38]                     ; CODE XREF=find_mount_point+757, find_mount_point+905
0000000000005588         xor        rcx, qword [fs:0x28]
0000000000005591         mov        rax, rbx
0000000000005594         jne        loc_5733

000000000000559a         lea        rsp, qword [rbp+var_28]
000000000000559e         pop        rbx
000000000000559f         pop        r12
00000000000055a1         pop        r13
00000000000055a3         pop        r14
00000000000055a5         pop        r15
00000000000055a7         pop        rbp
00000000000055a8         ret
                        ; endp
00000000000055a9         align      16

                     loc_55b0:
00000000000055b0         call       xgetcwd                                     ; xgetcwd, CODE XREF=find_mount_point+238, find_mount_point+258
00000000000055b5         mov        rbx, rax
00000000000055b8         jmp        loc_5566
00000000000055ba         align      64

                     loc_55c0:
00000000000055c0         movdqu     xmm0, xmmword [rbx]                         ; CODE XREF=find_mount_point+89
00000000000055c4         mov        rdi, r12                                    ; argument "__path" for method j_chdir
00000000000055c7         movaps     xmmword [rbp+var_160], xmm0
00000000000055ce         movdqu     xmm0, xmmword [rbx+0x10]
00000000000055d3         movaps     xmmword [rbp+var_150], xmm0
00000000000055da         movdqu     xmm0, xmmword [rbx+0x20]
00000000000055df         movaps     xmmword [rbp+var_140], xmm0
00000000000055e6         movdqu     xmm0, xmmword [rbx+0x30]
00000000000055eb         movaps     xmmword [rbp+var_130], xmm0
00000000000055f2         movdqu     xmm0, xmmword [rbx+0x40]
00000000000055f7         movaps     xmmword [rbp+var_120], xmm0
00000000000055fe         movdqu     xmm0, xmmword [rbx+0x50]
0000000000005603         movaps     xmmword [rbp+var_110], xmm0
000000000000560a         movdqu     xmm0, xmmword [rbx+0x60]
000000000000560f         movaps     xmmword [rbp+var_100], xmm0
0000000000005616         movdqu     xmm0, xmmword [rbx+0x70]
000000000000561b         movaps     xmmword [rbp+var_F0], xmm0
0000000000005622         movdqu     xmm0, xmmword [rbx+0x80]
000000000000562a         movaps     xmmword [rbp+var_E0], xmm0
0000000000005631         call       j_chdir                                     ; chdir
0000000000005636         test       eax, eax
0000000000005638         jns        loc_544d

                     loc_563e:
000000000000563e         mov        rsi, r12                                    ; CODE XREF=find_mount_point+167
0000000000005641         mov        edi, 0x4
0000000000005646         call       quotearg_style                              ; quotearg_style
000000000000564b         lea        rsi, qword [aCannotChangeTo]                ; argument "msgid" for method j_dcgettext, "cannot change to directory %s"
0000000000005652         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005657         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005659         mov        rbx, rax
000000000000565c         call       j_dcgettext                                 ; dcgettext
0000000000005661         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000005664         mov        rcx, rbx
0000000000005667         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000566a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000566c         xor        eax, eax
000000000000566e         xor        ebx, ebx
0000000000005670         call       j_error                                     ; error
0000000000005675         jmp        loc_5584
000000000000567a         align      128

                     loc_5680:
0000000000005680         mov        rsi, r12                                    ; CODE XREF=find_mount_point+199
0000000000005683         mov        edi, 0x4
0000000000005688         call       quotearg_style                              ; quotearg_style
000000000000568d         lea        rsi, qword [aCannotStatCurr]                ; argument "msgid" for method j_dcgettext, "cannot stat current directory (now %s)"
0000000000005694         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005699         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000569b         mov        rbx, rax
000000000000569e         call       j_dcgettext                                 ; dcgettext
00000000000056a3         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
00000000000056a6         mov        rcx, rbx
00000000000056a9         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000056ac         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000056ae         xor        eax, eax
00000000000056b0         xor        ebx, ebx
00000000000056b2         call       j_error                                     ; error
00000000000056b7         jmp        loc_5566
00000000000056bc         align      64

                     loc_56c0:
00000000000056c0         lea        rsi, qword [aCannotChangeTo+30]             ; 0xff0b, CODE XREF=find_mount_point+274
00000000000056c7         mov        edi, 0x4
00000000000056cc         call       quotearg_style                              ; quotearg_style
00000000000056d1         mov        edx, 0x5
00000000000056d6         mov        rbx, rax
00000000000056d9         lea        rsi, qword [aCannotChangeTo]                ; "cannot change to directory %s"
00000000000056e0         jmp        loc_554b

                     loc_56e5:
00000000000056e5         lea        rsi, qword [aCannotGetCurre]                ; argument "msgid" for method j_dcgettext, "cannot get current directory", CODE XREF=find_mount_point+70
00000000000056ec         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056f1         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056f3         xor        ebx, ebx
00000000000056f5         call       j_dcgettext                                 ; dcgettext
00000000000056fa         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
00000000000056fd         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005700         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005702         xor        eax, eax
0000000000005704         call       j_error                                     ; error
0000000000005709         jmp        loc_5584

                     loc_570e:
000000000000570e         lea        rsi, qword [aFailedToReturn]                ; argument "msgid" for method j_dcgettext, "failed to return to initial working directory", CODE XREF=find_mount_point+499
0000000000005715         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000571a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000571c         call       j_dcgettext                                 ; dcgettext
0000000000005721         mov        esi, dword [r14]                            ; argument "__errnum" for method j_error
0000000000005724         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005727         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000572c         xor        eax, eax
000000000000572e         call       j_error                                     ; error

                     loc_5733:
0000000000005733         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=find_mount_point+532
                        ; endp
0000000000005738         align      64                                          ; End of unwind block (FDE at 0x117fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E8: int64_t, -232
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248
        ;    var_FC: int32_t, -252
        ;    var_FD: int8_t, -253
        ;    var_108: int64_t, -264
        ;    var_110: int64_t, -272
        ;    var_114: int32_t, -276


                     canonicalize_filename_mode:
0000000000005740         push       r15                                         ; Begin of unwind block (FDE at 0x1182c), CODE XREF=get_dev+516
0000000000005742         push       r14
0000000000005744         push       r13
0000000000005746         push       r12
0000000000005748         push       rbp
0000000000005749         push       rbx
000000000000574a         sub        rsp, 0xe8
0000000000005751         mov        rax, qword [fs:0x28]
000000000000575a         mov        qword [rsp+0x118+var_40], rax
0000000000005762         xor        eax, eax
0000000000005764         mov        eax, esi
0000000000005766         and        eax, 0x4
0000000000005769         setne      byte [rsp+0x118+var_FD]
000000000000576e         and        esi, 0x3
0000000000005771         mov        dword [rsp+0x118+var_FC], eax
0000000000005775         lea        eax, dword [rsi-1]
0000000000005778         mov        dword [rsp+0x118+var_114], esi
000000000000577c         test       esi, eax
000000000000577e         jne        loc_5cd0

0000000000005784         test       rdi, rdi
0000000000005787         mov        r14, rdi
000000000000578a         je         loc_5cd0

0000000000005790         movzx      eax, byte [rdi]
0000000000005793         test       al, al
0000000000005795         je         loc_5d10

000000000000579b         cmp        al, 0x2f
000000000000579d         je         loc_5c60

00000000000057a3         call       xgetcwd                                     ; xgetcwd
00000000000057a8         test       rax, rax
00000000000057ab         mov        rbp, rax
00000000000057ae         je         loc_5960

00000000000057b4         mov        rdi, rax                                    ; argument "__s" for method j_strlen
00000000000057b7         call       j_strlen                                    ; strlen
00000000000057bc         cmp        rax, aC234                                  ; "C_2.3.4"
00000000000057c2         mov        r15, rax
00000000000057c5         jbe        loc_5c80

00000000000057cb         add        r15, rbp
00000000000057ce         mov        rbx, r15

                     loc_57d1:
00000000000057d1         lea        rax, qword [rsp+0x118+var_D8]               ; CODE XREF=sub_5c5a+33, sub_5c5a+64
00000000000057d6         mov        qword [rsp+0x118+var_F8], r14
00000000000057db         mov        qword [rsp+0x118+var_108], 0x0
00000000000057e4         mov        qword [rsp+0x118+var_E8], 0x0
00000000000057ed         mov        qword [rsp+0x118+var_F0], 0x0
00000000000057f6         mov        qword [rsp+0x118+var_110], rax

                     loc_57fb:
00000000000057fb         movzx      eax, byte [r14]                             ; CODE XREF=canonicalize_filename_mode+981, canonicalize_filename_mode+1008, sub_5c5a+274
00000000000057ff         test       al, al
0000000000005801         je         loc_590f

0000000000005807         nop        word [rax+rax]

                     loc_5810:
0000000000005810         cmp        al, 0x2f                                    ; CODE XREF=canonicalize_filename_mode+457
0000000000005812         jne        loc_582c

0000000000005814         nop        dword [rax]

                     loc_5818:
0000000000005818         add        r14, 0x1                                    ; CODE XREF=canonicalize_filename_mode+226
000000000000581c         movzx      eax, byte [r14]
0000000000005820         cmp        al, 0x2f
0000000000005822         je         loc_5818

0000000000005824         test       al, al
0000000000005826         je         loc_5af0

                     loc_582c:
000000000000582c         mov        r13, r14                                    ; CODE XREF=canonicalize_filename_mode+210
000000000000582f         jmp        loc_583d
0000000000005831         align      8

                     loc_5838:
0000000000005838         cmp        dl, 0x2f                                    ; CODE XREF=canonicalize_filename_mode+264
000000000000583b         je         loc_584a

                     loc_583d:
000000000000583d         add        r13, 0x1                                    ; CODE XREF=canonicalize_filename_mode+239
0000000000005841         movzx      edx, byte [r13]
0000000000005846         test       dl, dl
0000000000005848         jne        loc_5838

                     loc_584a:
000000000000584a         cmp        r13, r14                                    ; CODE XREF=canonicalize_filename_mode+251, canonicalize_filename_mode+947
000000000000584d         je         loc_590f

0000000000005853         mov        r12, r13
0000000000005856         sub        r12, r14
0000000000005859         cmp        r12, 0x1
000000000000585d         je         loc_5a30

0000000000005863         cmp        r12, 0x2
0000000000005867         jne        loc_5871

0000000000005869         cmp        al, 0x2e
000000000000586b         je         loc_5b00

                     loc_5871:
0000000000005871         cmp        byte [r15-1], 0x2f                          ; CODE XREF=canonicalize_filename_mode+295, canonicalize_filename_mode+754, canonicalize_filename_mode+965
0000000000005876         je         loc_5880

0000000000005878         mov        byte [r15], 0x2f
000000000000587c         add        r15, 0x1

                     loc_5880:
0000000000005880         lea        rax, qword [r15+r12]                        ; CODE XREF=canonicalize_filename_mode+310
0000000000005884         cmp        rbx, rax
0000000000005887         ja         loc_58ba

0000000000005889         sub        rbx, rbp
000000000000588c         sub        r15, rbp
000000000000588f         mov        rdi, rbp                                    ; argument #1 for method xrealloc
0000000000005892         lea        rax, qword [r12+rbx+1]
0000000000005897         add        rbx, 0x1000
000000000000589e         cmp        r12, 0x1000
00000000000058a5         cmovge     rbx, rax
00000000000058a9         mov        rsi, rbx                                    ; argument #2 for method xrealloc
00000000000058ac         call       xrealloc                                    ; xrealloc
00000000000058b1         mov        rbp, rax
00000000000058b4         add        rbx, rax
00000000000058b7         add        r15, rax

                     loc_58ba:
00000000000058ba         mov        rdi, r15                                    ; argument "__dest" for method j_memcpy, CODE XREF=canonicalize_filename_mode+327
00000000000058bd         mov        rdx, r12                                    ; argument "__n" for method j_memcpy
00000000000058c0         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
00000000000058c3         call       j_memcpy                                    ; memcpy
00000000000058c8         cmp        dword [rsp+0x118+var_114], 0x2
00000000000058cd         lea        r15, qword [r15+r12]
00000000000058d1         mov        byte [r15], 0x0
00000000000058d5         jne        loc_5990

00000000000058db         cmp        byte [rsp+0x118+var_FD], 0x0
00000000000058e0         je         loc_5990

                     loc_58e6:
00000000000058e6         mov        dword [rsp+0x118+var_C0], 0x0               ; CODE XREF=canonicalize_filename_mode+656

                     loc_58ee:
00000000000058ee         cmp        byte [r13], 0x0                             ; CODE XREF=canonicalize_filename_mode+795
00000000000058f3         je         loc_5900

00000000000058f5         cmp        dword [rsp+0x118+var_114], 0x2
00000000000058fa         jne        loc_5d57

                     loc_5900:
0000000000005900         mov        r14, r13                                    ; CODE XREF=canonicalize_filename_mode+435, canonicalize_filename_mode+696, canonicalize_filename_mode+760, canonicalize_filename_mode+789, canonicalize_filename_mode+861, canonicalize_filename_mode+1021, canonicalize_filename_mode+1032, canonicalize_filename_mode+1249, sub_5c5a+156
0000000000005903         movzx      eax, byte [r14]
0000000000005907         test       al, al
0000000000005909         jne        loc_5810

                     loc_590f:
000000000000590f         lea        rax, qword [rbp+1]                          ; CODE XREF=canonicalize_filename_mode+193, canonicalize_filename_mode+269
0000000000005913         cmp        r15, rax
0000000000005916         jbe        loc_5923

0000000000005918         cmp        byte [r15-1], 0x2f
000000000000591d         jne        loc_5923

000000000000591f         sub        r15, 0x1

                     loc_5923:
0000000000005923         lea        rax, qword [r15+1]                          ; CODE XREF=canonicalize_filename_mode+470, canonicalize_filename_mode+477
0000000000005927         mov        byte [r15], 0x0
000000000000592b         cmp        rbx, rax
000000000000592e         je         loc_5942

0000000000005930         sub        r15, rbp
0000000000005933         mov        rdi, rbp                                    ; argument #1 for method xrealloc
0000000000005936         lea        rsi, qword [r15+1]                          ; argument #2 for method xrealloc
000000000000593a         call       xrealloc                                    ; xrealloc
000000000000593f         mov        rbp, rax

                     loc_5942:
0000000000005942         mov        rdi, qword [rsp+0x118+var_F0]               ; argument "__ptr" for method j_free, CODE XREF=canonicalize_filename_mode+494
0000000000005947         call       j_free                                      ; free
000000000000594c         mov        rax, qword [rsp+0x118+var_108]
0000000000005951         test       rax, rax
0000000000005954         je         loc_5960

0000000000005956         mov        rdi, rax                                    ; argument #1 for method hash_free
0000000000005959         call       hash_free                                   ; hash_free
000000000000595e         nop

                     loc_5960:
0000000000005960         mov        rcx, qword [rsp+0x118+var_40]               ; CODE XREF=canonicalize_filename_mode+110, canonicalize_filename_mode+532, canonicalize_filename_mode+930, sub_5c5a+131, sub_5c5a+195
0000000000005968         xor        rcx, qword [fs:0x28]
0000000000005971         mov        rax, rbp
0000000000005974         jne        loc_5d71

000000000000597a         add        rsp, 0xe8
0000000000005981         pop        rbx
0000000000005982         pop        rbp
0000000000005983         pop        r12
0000000000005985         pop        r13
0000000000005987         pop        r14
0000000000005989         pop        r15
000000000000598b         ret
                        ; endp
000000000000598c         align      16

                     loc_5990:
0000000000005990         mov        eax, dword [rsp+0x118+var_FC]               ; CODE XREF=canonicalize_filename_mode+405, canonicalize_filename_mode+416
0000000000005994         mov        rdx, qword [rsp+0x118+var_110]
0000000000005999         mov        rsi, rbp
000000000000599c         mov        edi, 0x1
00000000000059a1         test       eax, eax
00000000000059a3         je         loc_5a60

00000000000059a9         call       j___xstat                                   ; __xstat
00000000000059ae         test       eax, eax
00000000000059b0         setne      al

                     loc_59b3:
00000000000059b3         test       al, al                                      ; CODE XREF=canonicalize_filename_mode+810
00000000000059b5         je         loc_5a40

00000000000059bb         call       j___errno_location                          ; __errno_location
00000000000059c0         mov        r14, rax
00000000000059c3         mov        edx, dword [rax]
00000000000059c5         mov        eax, dword [rsp+0x118+var_114]
00000000000059c9         test       eax, eax
00000000000059cb         je         loc_59fe

00000000000059cd         cmp        eax, 0x1
00000000000059d0         jne        loc_58e6

00000000000059d6         lea        rsi, qword [aLibs+6]                        ; argument "__accept" for method j_strspn, 0x100ce
00000000000059dd         mov        rdi, r13                                    ; argument "__s" for method j_strspn
00000000000059e0         mov        dword [rsp+0x118+var_E0], edx
00000000000059e4         call       j_strspn                                    ; strspn
00000000000059e9         cmp        byte [r13+rax], 0x0
00000000000059ef         mov        edx, dword [rsp+0x118+var_E0]
00000000000059f3         jne        loc_59fe

00000000000059f5         cmp        edx, 0x2
00000000000059f8         je         loc_5900

                     loc_59fe:
00000000000059fe         mov        r12, r14                                    ; CODE XREF=canonicalize_filename_mode+651, canonicalize_filename_mode+691

                     loc_5a01:
0000000000005a01         mov        rdi, qword [rsp+0x118+var_F0]               ; argument "__ptr" for method j_free, CODE XREF=sub_5c5a+266
0000000000005a06         mov        dword [rsp+0x118+var_114], edx
0000000000005a0a         call       j_free                                      ; free
0000000000005a0f         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000005a12         call       j_free                                      ; free
0000000000005a17         cmp        qword [rsp+0x118+var_108], 0x0
0000000000005a1d         mov        edx, dword [rsp+0x118+var_114]
0000000000005a21         je         loc_5adc

0000000000005a27         jmp        loc_5aca
0000000000005a2c         align      16

                     loc_5a30:
0000000000005a30         cmp        al, 0x2e                                    ; CODE XREF=canonicalize_filename_mode+285
0000000000005a32         jne        loc_5871

0000000000005a38         jmp        loc_5900
0000000000005a3d         align      64

                     loc_5a40:
0000000000005a40         mov        eax, dword [rsp+0x118+var_C0]               ; CODE XREF=canonicalize_filename_mode+629
0000000000005a44         and        eax, 0xf000
0000000000005a49         cmp        eax, quotearg_alloc
0000000000005a4e         je         loc_5a70

0000000000005a50         cmp        eax, 0x4000
0000000000005a55         je         loc_5900

0000000000005a5b         jmp        loc_58ee

                     loc_5a60:
0000000000005a60         call       j___lxstat                                  ; __lxstat, CODE XREF=canonicalize_filename_mode+611
0000000000005a65         test       eax, eax
0000000000005a67         setne      al
0000000000005a6a         jmp        loc_59b3
0000000000005a6f         align      16

                     loc_5a70:
0000000000005a70         cmp        qword [rsp+0x118+var_108], 0x0              ; CODE XREF=canonicalize_filename_mode+782
0000000000005a76         je         loc_5c26

                     loc_5a7c:
0000000000005a7c         mov        rdx, qword [rsp+0x118+var_110]              ; argument #3 for method seen_file, CODE XREF=canonicalize_filename_mode+1295
0000000000005a81         mov        rsi, qword [rsp+0x118+var_F8]               ; argument #2 for method seen_file
0000000000005a86         mov        rdi, qword [rsp+0x118+var_108]              ; argument #1 for method seen_file
0000000000005a8b         call       seen_file                                   ; seen_file
0000000000005a90         test       al, al
0000000000005a92         je         loc_5b50

0000000000005a98         cmp        dword [rsp+0x118+var_114], 0x2
0000000000005a9d         je         loc_5900

0000000000005aa3         call       j___errno_location                          ; __errno_location
0000000000005aa8         mov        edx, 0x28
0000000000005aad         mov        r12, rax

                     loc_5ab0:
0000000000005ab0         mov        rdi, qword [rsp+0x118+var_F0]               ; argument "__ptr" for method j_free, CODE XREF=sub_5c5a+165
0000000000005ab5         mov        dword [rsp+0x118+var_114], edx
0000000000005ab9         call       j_free                                      ; free
0000000000005abe         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
0000000000005ac1         call       j_free                                      ; free
0000000000005ac6         mov        edx, dword [rsp+0x118+var_114]

                     loc_5aca:
0000000000005aca         mov        rdi, qword [rsp+0x118+var_108]              ; argument #1 for method hash_free, CODE XREF=canonicalize_filename_mode+743
0000000000005acf         mov        dword [rsp+0x118+var_114], edx
0000000000005ad3         call       hash_free                                   ; hash_free
0000000000005ad8         mov        edx, dword [rsp+0x118+var_114]

                     loc_5adc:
0000000000005adc         mov        dword [r12], edx                            ; CODE XREF=canonicalize_filename_mode+737
0000000000005ae0         xor        ebp, ebp
0000000000005ae2         jmp        loc_5960
0000000000005ae7         align      16

                     loc_5af0:
0000000000005af0         mov        r13, r14                                    ; CODE XREF=canonicalize_filename_mode+230
0000000000005af3         jmp        loc_584a
0000000000005af8         align      256

                     loc_5b00:
0000000000005b00         cmp        byte [r14+1], 0x2e                          ; CODE XREF=canonicalize_filename_mode+299
0000000000005b05         jne        loc_5871

0000000000005b0b         lea        rax, qword [rbp+1]
0000000000005b0f         mov        r14, r13
0000000000005b12         cmp        r15, rax
0000000000005b15         jbe        loc_57fb

0000000000005b1b         lea        rax, qword [r15-1]
0000000000005b1f         cmp        rbp, rax
0000000000005b22         jae        loc_5d69

0000000000005b28         cmp        byte [r15-2], 0x2f
0000000000005b2d         mov        r15, rax
0000000000005b30         je         loc_57fb

                     loc_5b36:
0000000000005b36         sub        r15, 0x1                                    ; CODE XREF=canonicalize_filename_mode+1038
0000000000005b3a         cmp        rbp, r15
0000000000005b3d         je         loc_5900

0000000000005b43         cmp        byte [r15-1], 0x2f
0000000000005b48         je         loc_5900

0000000000005b4e         jmp        loc_5b36

                     loc_5b50:
0000000000005b50         mov        rdx, qword [rsp+0x118+var_110]              ; argument #3 for method record_file, CODE XREF=canonicalize_filename_mode+850
0000000000005b55         mov        rsi, qword [rsp+0x118+var_F8]               ; argument #2 for method record_file
0000000000005b5a         mov        rdi, qword [rsp+0x118+var_108]              ; argument #1 for method record_file
0000000000005b5f         call       record_file                                 ; record_file
0000000000005b64         mov        rsi, qword [rsp+0x118+var_A8]
0000000000005b69         mov        rdi, rbp
0000000000005b6c         call       areadlink_with_size                         ; areadlink_with_size
0000000000005b71         test       rax, rax
0000000000005b74         mov        r14, rax
0000000000005b77         je         loc_5ce2

0000000000005b7d         mov        rdi, rax                                    ; argument "__s" for method j_strlen
0000000000005b80         call       j_strlen                                    ; strlen
0000000000005b85         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000005b88         mov        r12, rax
0000000000005b8b         mov        qword [rsp+0x118+var_F8], rax
0000000000005b90         call       j_strlen                                    ; strlen
0000000000005b95         cmp        qword [rsp+0x118+var_E8], 0x0
0000000000005b9b         mov        rdx, rax
0000000000005b9e         lea        rcx, qword [r12+rdx+1]
0000000000005ba3         je         loc_5c9f

0000000000005ba9         cmp        qword [rsp+0x118+var_E8], rcx
0000000000005bae         jae        loc_5bd1

0000000000005bb0         mov        rdi, qword [rsp+0x118+var_F0]               ; argument #1 for method xrealloc
0000000000005bb5         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000005bb8         mov        qword [rsp+0x118+var_E0], rdx
0000000000005bbd         mov        qword [rsp+0x118+var_E8], rcx
0000000000005bc2         call       xrealloc                                    ; xrealloc
0000000000005bc7         mov        rdx, qword [rsp+0x118+var_E0]
0000000000005bcc         mov        qword [rsp+0x118+var_F0], rax

                     loc_5bd1:
0000000000005bd1         mov        r12, qword [rsp+0x118+var_F0]               ; CODE XREF=canonicalize_filename_mode+1134, sub_5c5a+113
0000000000005bd6         mov        rdi, qword [rsp+0x118+var_F8]
0000000000005bdb         add        rdx, 0x1                                    ; argument "__n" for method j_memmove
0000000000005bdf         mov        rsi, r13                                    ; argument "__src" for method j_memmove
0000000000005be2         add        rdi, r12                                    ; argument "__dest" for method j_memmove
0000000000005be5         mov        r13, r12
0000000000005be8         call       j_memmove                                   ; memmove
0000000000005bed         mov        rdx, qword [rsp+0x118+var_F8]               ; argument "__n" for method j_memcpy
0000000000005bf2         mov        rsi, r14                                    ; argument "__src" for method j_memcpy
0000000000005bf5         mov        rdi, r12                                    ; argument "__dest" for method j_memcpy
0000000000005bf8         call       j_memcpy                                    ; memcpy
0000000000005bfd         cmp        byte [r14], 0x2f
0000000000005c01         mov        qword [rsp+0x118+var_F8], r12
0000000000005c06         lea        rax, qword [rbp+1]
0000000000005c0a         je         loc_5d04

0000000000005c10         cmp        r15, rax
0000000000005c13         ja         loc_5d22

                     loc_5c19:
0000000000005c19         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=sub_5c5a+177, sub_5c5a+219, sub_5c5a+234, sub_5c5a+245
0000000000005c1c         call       j_free                                      ; free
0000000000005c21         jmp        loc_5900

                     loc_5c26:
0000000000005c26         lea        r8, qword [triple_free]                     ; argument #5 for method hash_initialize, triple_free, CODE XREF=canonicalize_filename_mode+822
0000000000005c2d         lea        rcx, qword [triple_compare_ino_str]         ; argument #4 for method hash_initialize, triple_compare_ino_str
0000000000005c34         xor        esi, esi                                    ; argument #2 for method hash_initialize
0000000000005c36         lea        rdx, qword [triple_hash]                    ; argument #3 for method hash_initialize, triple_hash
0000000000005c3d         mov        edi, 0x7                                    ; argument #1 for method hash_initialize
0000000000005c42         call       hash_initialize                             ; hash_initialize
0000000000005c47         test       rax, rax
0000000000005c4a         mov        qword [rsp+0x118+var_108], rax
0000000000005c4f         jne        loc_5a7c

0000000000005c55         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5c5a:
0000000000005c5a         nop        word [rax+rax]
                        ; endp

                     loc_5c60:
0000000000005c60         mov        edi, 0x1000                                 ; argument #1 for method xmalloc, CODE XREF=canonicalize_filename_mode+93
0000000000005c65         call       xmalloc                                     ; xmalloc
0000000000005c6a         mov        rbp, rax
0000000000005c6d         lea        rbx, qword [rax+0x1000]
0000000000005c74         lea        r15, qword [rax+1]
0000000000005c78         mov        byte [rax], 0x2f
0000000000005c7b         jmp        loc_57d1

                     loc_5c80:
0000000000005c80         mov        rdi, rbp                                    ; argument #1 for method xrealloc, CODE XREF=canonicalize_filename_mode+133
0000000000005c83         mov        esi, 0x1000                                 ; argument #2 for method xrealloc
0000000000005c88         call       xrealloc                                    ; xrealloc
0000000000005c8d         mov        rbp, rax
0000000000005c90         add        r15, rax
0000000000005c93         lea        rbx, qword [rax+0x1000]
0000000000005c9a         jmp        loc_57d1

                     loc_5c9f:
0000000000005c9f         cmp        rcx, 0x1000                                 ; CODE XREF=canonicalize_filename_mode+1123
0000000000005ca6         mov        eax, 0x1000
0000000000005cab         mov        qword [rsp+0x118+var_E0], rdx
0000000000005cb0         cmovae     rax, rcx
0000000000005cb4         mov        rdi, rax                                    ; argument #1 for method xmalloc
0000000000005cb7         mov        qword [rsp+0x118+var_E8], rax
0000000000005cbc         call       xmalloc                                     ; xmalloc
0000000000005cc1         mov        rdx, qword [rsp+0x118+var_E0]
0000000000005cc6         mov        qword [rsp+0x118+var_F0], rax
0000000000005ccb         jmp        loc_5bd1

                     loc_5cd0:
0000000000005cd0         call       j___errno_location                          ; __errno_location, CODE XREF=canonicalize_filename_mode+62, canonicalize_filename_mode+74
0000000000005cd5         xor        ebp, ebp
0000000000005cd7         mov        dword [rax], 0x16
0000000000005cdd         jmp        loc_5960

                     loc_5ce2:
0000000000005ce2         call       j___errno_location                          ; __errno_location, CODE XREF=canonicalize_filename_mode+1079
0000000000005ce7         cmp        dword [rsp+0x118+var_114], 0x2
0000000000005cec         mov        r14, rax
0000000000005cef         mov        edx, dword [rax]
0000000000005cf1         jne        loc_5cfc

0000000000005cf3         cmp        edx, 0xc
0000000000005cf6         jne        loc_5900

                     loc_5cfc:
0000000000005cfc         mov        r12, r14                                    ; CODE XREF=sub_5c5a+151
0000000000005cff         jmp        loc_5ab0

                     loc_5d04:
0000000000005d04         mov        byte [rbp], 0x2f                            ; CODE XREF=canonicalize_filename_mode+1226
0000000000005d08         mov        r15, rax
0000000000005d0b         jmp        loc_5c19

                     loc_5d10:
0000000000005d10         call       j___errno_location                          ; __errno_location, CODE XREF=canonicalize_filename_mode+85
0000000000005d15         xor        ebp, ebp
0000000000005d17         mov        dword [rax], 0x2
0000000000005d1d         jmp        loc_5960

                     loc_5d22:
0000000000005d22         lea        rax, qword [r15-1]                          ; CODE XREF=canonicalize_filename_mode+1235
0000000000005d26         cmp        rbp, rax
0000000000005d29         jae        loc_5d32

0000000000005d2b         cmp        byte [r15-2], 0x2f
0000000000005d30         jne        loc_5d3d

                     loc_5d32:
0000000000005d32         mov        r15, rax                                    ; CODE XREF=sub_5c5a+207
0000000000005d35         jmp        loc_5c19

                     loc_5d3a:
0000000000005d3a         mov        rax, r15                                    ; CODE XREF=sub_5c5a+251

                     loc_5d3d:
0000000000005d3d         lea        r15, qword [rax-1]                          ; CODE XREF=sub_5c5a+214
0000000000005d41         cmp        rbp, r15
0000000000005d44         je         loc_5c19

0000000000005d4a         cmp        byte [r15-1], 0x2f
0000000000005d4f         je         loc_5c19

0000000000005d55         jmp        loc_5d3a

                     loc_5d57:
0000000000005d57         call       j___errno_location                          ; __errno_location, CODE XREF=canonicalize_filename_mode+442
0000000000005d5c         mov        edx, 0x14
0000000000005d61         mov        r12, rax
0000000000005d64         jmp        loc_5a01

                     loc_5d69:
0000000000005d69         mov        r15, rax                                    ; CODE XREF=canonicalize_filename_mode+994
0000000000005d6c         jmp        loc_57fb

                     loc_5d71:
0000000000005d71         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=canonicalize_filename_mode+564
                        ; endp
0000000000005d76         align      128                                         ; End of unwind block (FDE at 0x1182c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005d80         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0x1187c), file_name
0000000000005d87         ret
                        ; endp
0000000000005d88         align      16                                          ; End of unwind block (FDE at 0x1187c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005d90         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0x11890), ignore_EPIPE
0000000000005d97         ret
                        ; endp
0000000000005d98         align      32                                          ; End of unwind block (FDE at 0x11890)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000005da0         push       rbp                                         ; Begin of unwind block (FDE at 0x118a4), DATA XREF=main+116
0000000000005da1         push       rbx
0000000000005da2         sub        rsp, 0x8
0000000000005da6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005dad         call       close_stream                                ; close_stream
0000000000005db2         test       eax, eax
0000000000005db4         je         loc_5dcc

0000000000005db6         call       j___errno_location                          ; __errno_location
0000000000005dbb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000005dc2         mov        rbx, rax
0000000000005dc5         je         loc_5de3

0000000000005dc7         cmp        dword [rax], 0x20
0000000000005dca         jne        loc_5de3

                     loc_5dcc:
0000000000005dcc         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000005dd3         call       close_stream                                ; close_stream
0000000000005dd8         test       eax, eax
0000000000005dda         jne        loc_5e22

0000000000005ddc         add        rsp, 0x8
0000000000005de0         pop        rbx
0000000000005de1         pop        rbp
0000000000005de2         ret
                        ; endp

                     loc_5de3:
0000000000005de3         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000005dea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005dec         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005df1         call       j_dcgettext                                 ; dcgettext
0000000000005df6         mov        rdi, qword [file_name]                      ; file_name
0000000000005dfd         mov        rbp, rax
0000000000005e00         test       rdi, rdi
0000000000005e03         je         loc_5e2d

0000000000005e05         call       quotearg_colon                              ; quotearg_colon
0000000000005e0a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000005e0c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005e13         mov        rcx, rax
0000000000005e16         mov        r8, rbp
0000000000005e19         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005e1b         xor        eax, eax
0000000000005e1d         call       j_error                                     ; error

                     loc_5e22:
0000000000005e22         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000005e28         call       j__exit                                     ; _exit
                        ; endp

                     loc_5e2d:
0000000000005e2d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000005e2f         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x10c77
0000000000005e36         mov        rcx, rax
0000000000005e39         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005e3b         xor        eax, eax
0000000000005e3d         call       j_error                                     ; error
0000000000005e42         jmp        loc_5e22
0000000000005e44         align      16                                          ; End of unwind block (FDE at 0x118a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dir_name:
0000000000005e50         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x118d4), CODE XREF=find_mount_point+98, same_nameat.part.0+43, same_nameat.part.0+95
0000000000005e54         call       mdir_name                                   ; mdir_name
0000000000005e59         test       rax, rax
0000000000005e5c         je         loc_5e63

0000000000005e5e         add        rsp, 0x8
0000000000005e62         ret
                        ; endp

                     loc_5e63:
0000000000005e63         call       xalloc_die                                  ; xalloc_die, CODE XREF=dir_name+12
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5e68:
0000000000005e68         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x118d4)
                     dir_len:
0000000000005e70         push       rbp                                         ; Begin of unwind block (FDE at 0x118f4), CODE XREF=mdir_name+9
0000000000005e71         push       rbx
0000000000005e72         xor        ebp, ebp
0000000000005e74         mov        rbx, rdi
0000000000005e77         sub        rsp, 0x8
0000000000005e7b         cmp        byte [rdi], 0x2f                            ; argument #1 for method last_component
0000000000005e7e         sete       bpl
0000000000005e82         call       last_component                              ; last_component
0000000000005e87         mov        rcx, rax
0000000000005e8a         sub        rcx, rbx
0000000000005e8d         cmp        rcx, rbp
0000000000005e90         jbe        loc_5ec0

0000000000005e92         cmp        byte [rax-1], 0x2f
0000000000005e96         lea        rdx, qword [rcx-1]
0000000000005e9a         je         loc_5eae

0000000000005e9c         jmp        loc_5ec0
0000000000005e9e         align      32

                     loc_5ea0:
0000000000005ea0         cmp        byte [rbx+rdx-1], 0x2f                      ; CODE XREF=dir_len+65
0000000000005ea5         lea        rax, qword [rdx-1]
0000000000005ea9         jne        loc_5eb3

0000000000005eab         mov        rdx, rax

                     loc_5eae:
0000000000005eae         cmp        rbp, rdx                                    ; CODE XREF=dir_len+42
0000000000005eb1         jne        loc_5ea0

                     loc_5eb3:
0000000000005eb3         add        rsp, 0x8                                    ; CODE XREF=dir_len+57
0000000000005eb7         mov        rax, rdx
0000000000005eba         pop        rbx
0000000000005ebb         pop        rbp
0000000000005ebc         ret
                        ; endp
0000000000005ebd         align      64

                     loc_5ec0:
0000000000005ec0         add        rsp, 0x8                                    ; CODE XREF=dir_len+32, dir_len+44
0000000000005ec4         mov        rdx, rcx
0000000000005ec7         mov        rax, rdx
0000000000005eca         pop        rbx
0000000000005ecb         pop        rbp
0000000000005ecc         ret
                        ; endp
0000000000005ecd         align      16                                          ; End of unwind block (FDE at 0x118f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     mdir_name:
0000000000005ed0         push       rbp                                         ; Begin of unwind block (FDE at 0x11928), CODE XREF=dir_name+4
0000000000005ed1         push       rbx
0000000000005ed2         mov        rbp, rdi
0000000000005ed5         sub        rsp, 0x8
0000000000005ed9         call       dir_len                                     ; dir_len
0000000000005ede         test       rax, rax
0000000000005ee1         mov        rbx, rax
0000000000005ee4         sete       al
0000000000005ee7         movzx      eax, al
0000000000005eea         lea        rdi, qword [rbx+rax+1]                      ; argument "__size" for method j_malloc
0000000000005eef         call       j_malloc                                    ; malloc
0000000000005ef4         test       rax, rax
0000000000005ef7         mov        rcx, rax
0000000000005efa         je         loc_5f16

0000000000005efc         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000005eff         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000005f02         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000005f05         call       j_memcpy                                    ; memcpy
0000000000005f0a         test       rbx, rbx
0000000000005f0d         mov        rcx, rax
0000000000005f10         je         loc_5f20

                     loc_5f12:
0000000000005f12         mov        byte [rcx+rbx], 0x0                         ; CODE XREF=mdir_name+88

                     loc_5f16:
0000000000005f16         add        rsp, 0x8                                    ; CODE XREF=mdir_name+42
0000000000005f1a         mov        rax, rcx
0000000000005f1d         pop        rbx
0000000000005f1e         pop        rbp
0000000000005f1f         ret
                        ; endp

                     loc_5f20:
0000000000005f20         mov        byte [rax], 0x2e                            ; CODE XREF=mdir_name+64
0000000000005f23         mov        ebx, 0x1
0000000000005f28         jmp        loc_5f12
0000000000005f2a         align      16                                          ; End of unwind block (FDE at 0x11928)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     last_component:
0000000000005f30         movzx      edx, byte [rdi]                             ; Begin of unwind block (FDE at 0x11954), CODE XREF=dir_len+18, same_nameat+30, same_nameat+41
0000000000005f33         mov        rax, rdi
0000000000005f36         cmp        dl, 0x2f
0000000000005f39         jne        loc_5f4c

0000000000005f3b         nop        dword [rax+rax]

                     loc_5f40:
0000000000005f40         add        rax, 0x1                                    ; CODE XREF=last_component+26
0000000000005f44         movzx      edx, byte [rax]
0000000000005f47         cmp        dl, 0x2f
0000000000005f4a         je         loc_5f40

                     loc_5f4c:
0000000000005f4c         test       dl, dl                                      ; CODE XREF=last_component+9
0000000000005f4e         je         loc_5f8a

0000000000005f50         mov        rcx, rax
0000000000005f53         xor        esi, esi
0000000000005f55         jmp        loc_5f75
0000000000005f57         align      32

                     loc_5f60:
0000000000005f60         test       sil, sil                                    ; CODE XREF=last_component+72
0000000000005f63         je         loc_5f6a

0000000000005f65         mov        rax, rcx
0000000000005f68         xor        esi, esi

                     loc_5f6a:
0000000000005f6a         add        rcx, 0x1                                    ; CODE XREF=last_component+51
0000000000005f6e         movzx      edx, byte [rcx]
0000000000005f71         test       dl, dl
0000000000005f73         je         loc_5f8a

                     loc_5f75:
0000000000005f75         cmp        dl, 0x2f                                    ; CODE XREF=last_component+37, last_component+88
0000000000005f78         jne        loc_5f60

0000000000005f7a         add        rcx, 0x1
0000000000005f7e         movzx      edx, byte [rcx]
0000000000005f81         mov        esi, 0x1
0000000000005f86         test       dl, dl
0000000000005f88         jne        loc_5f75

                     loc_5f8a:
0000000000005f8a         ret                                                    ; CODE XREF=last_component+30, last_component+67
                        ; endp
0000000000005f8c         align      16                                          ; End of unwind block (FDE at 0x11954)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     base_len:
0000000000005f90         push       rbx                                         ; Begin of unwind block (FDE at 0x11968), CODE XREF=same_nameat+52, same_nameat+63
0000000000005f91         mov        rbx, rdi
0000000000005f94         call       j_strlen                                    ; strlen
0000000000005f99         cmp        rax, 0x1
0000000000005f9d         jbe        loc_5faa

0000000000005f9f         cmp        byte [rbx+rax-1], 0x2f
0000000000005fa4         lea        rdx, qword [rax-1]
0000000000005fa8         je         loc_5fb8

                     loc_5faa:
0000000000005faa         pop        rbx                                         ; CODE XREF=base_len+13
0000000000005fab         ret
                        ; endp
0000000000005fac         align      16

                     loc_5fb0:
0000000000005fb0         mov        rdx, rax                                    ; CODE XREF=base_len+55
0000000000005fb3         nop        dword [rax+rax]

                     loc_5fb8:
0000000000005fb8         cmp        rdx, 0x1                                    ; CODE XREF=base_len+24
0000000000005fbc         je         loc_5fd0

0000000000005fbe         cmp        byte [rbx+rdx-1], 0x2f
0000000000005fc3         lea        rax, qword [rdx-1]
0000000000005fc7         je         loc_5fb0

0000000000005fc9         mov        rax, rdx
0000000000005fcc         pop        rbx
0000000000005fcd         ret
                        ; endp
0000000000005fce         align      16

                     loc_5fd0:
0000000000005fd0         mov        eax, 0x1                                    ; CODE XREF=base_len+44
0000000000005fd5         pop        rbx
0000000000005fd6         ret
                        ; endp
0000000000005fd7         align      32                                          ; End of unwind block (FDE at 0x11968)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     record_file:
0000000000005fe0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x11994), CODE XREF=canonicalize_filename_mode+1055
0000000000005fe3         je         loc_6060

0000000000005fe5         push       r13
0000000000005fe7         push       r12
0000000000005fe9         mov        r13, rdi
0000000000005fec         push       rbp
0000000000005fed         push       rbx
0000000000005fee         mov        r12, rsi
0000000000005ff1         mov        edi, 0x18                                   ; argument #1 for method xmalloc
0000000000005ff6         mov        rbp, rdx
0000000000005ff9         sub        rsp, 0x8
0000000000005ffd         call       xmalloc                                     ; xmalloc
0000000000006002         mov        rdi, r12                                    ; argument #1 for method xstrdup
0000000000006005         mov        rbx, rax
0000000000006008         call       xstrdup                                     ; xstrdup
000000000000600d         mov        qword [rbx], rax
0000000000006010         mov        rax, qword [rbp+8]
0000000000006014         mov        rsi, rbx                                    ; argument #2 for method hash_insert
0000000000006017         mov        rdi, r13                                    ; argument #1 for method hash_insert
000000000000601a         mov        qword [rbx+8], rax
000000000000601e         mov        rax, qword [rbp]
0000000000006022         mov        qword [rbx+0x10], rax
0000000000006026         call       hash_insert                                 ; hash_insert
000000000000602b         test       rax, rax
000000000000602e         je         loc_6062

0000000000006030         cmp        rbx, rax
0000000000006033         je         loc_6050

0000000000006035         add        rsp, 0x8
0000000000006039         mov        rdi, rbx
000000000000603c         pop        rbx
000000000000603d         pop        rbp
000000000000603e         pop        r12
0000000000006040         pop        r13
0000000000006042         jmp        triple_free                                 ; triple_free
                        ; endp
0000000000006047         align      16

                     loc_6050:
0000000000006050         add        rsp, 0x8                                    ; CODE XREF=record_file+83
0000000000006054         pop        rbx
0000000000006055         pop        rbp
0000000000006056         pop        r12
0000000000006058         pop        r13
000000000000605a         ret
                        ; endp
000000000000605b         align      32

                     loc_6060:
0000000000006060         ret                                                    ; CODE XREF=record_file+3
                        ; endp

                     loc_6062:
0000000000006062         call       xalloc_die                                  ; xalloc_die, CODE XREF=record_file+78
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     sub_6067:
0000000000006067         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x11994)
                     seen_file:
0000000000006070         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0x119f4), CODE XREF=canonicalize_filename_mode+843
0000000000006074         mov        rax, qword [fs:0x28]
000000000000607d         mov        qword [rsp+0x28+var_10], rax
0000000000006082         xor        eax, eax
0000000000006084         test       rdi, rdi
0000000000006087         je         loc_60ac

0000000000006089         mov        rax, qword [rdx+8]
000000000000608d         mov        qword [rsp+0x28+var_28], rsi
0000000000006091         mov        rsi, rsp                                    ; argument #2 for method hash_lookup
0000000000006094         mov        qword [rsp+0x28+var_20], rax
0000000000006099         mov        rax, qword [rdx]
000000000000609c         mov        qword [rsp+0x28+var_18], rax
00000000000060a1         call       hash_lookup                                 ; hash_lookup
00000000000060a6         test       rax, rax
00000000000060a9         setne      al

                     loc_60ac:
00000000000060ac         mov        rcx, qword [rsp+0x28+var_10]                ; CODE XREF=seen_file+23
00000000000060b1         xor        rcx, qword [fs:0x28]
00000000000060ba         jne        loc_60c1

00000000000060bc         add        rsp, 0x28
00000000000060c0         ret
                        ; endp

                     loc_60c1:
00000000000060c1         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=seen_file+74
                        ; endp
00000000000060c6         align      16                                          ; End of unwind block (FDE at 0x119f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     next_prime:
00000000000060d0         cmp        rdi, 0xa                                    ; Begin of unwind block (FDE at 0x11a14), CODE XREF=hash_initialize+123, hash_rehash+123
00000000000060d4         mov        eax, 0xa
00000000000060d9         movabs     r9, 0xaaaaaaaaaaaaaaab
00000000000060e3         cmovb      rdi, rax
00000000000060e7         or         rdi, 0x1
00000000000060eb         cmp        rdi, 0xffffffffffffffff
00000000000060ef         je         loc_615f

00000000000060f1         nop        dword [rax]

                     loc_60f8:
00000000000060f8         mov        rax, rdi                                    ; CODE XREF=next_prime+141
00000000000060fb         mov        rcx, rdi
00000000000060fe         mul        r9
0000000000006101         mov        rax, rdx
0000000000006104         shr        rax, 0x1
0000000000006107         lea        rax, qword [rax+rax*2]
000000000000610b         sub        rcx, rax
000000000000610e         cmp        rdi, 0x9
0000000000006112         mov        rax, rcx
0000000000006115         jbe        loc_6150

0000000000006117         test       rcx, rcx
000000000000611a         je         loc_6155

000000000000611c         mov        r8d, 0x10
0000000000006122         mov        esi, 0x9
0000000000006127         mov        ecx, 0x3
000000000000612c         jmp        loc_6139
000000000000612e         align      16

                     loc_6130:
0000000000006130         add        r8, 0x8                                     ; CODE XREF=next_prime+126
0000000000006134         test       rdx, rdx
0000000000006137         je         loc_6155

                     loc_6139:
0000000000006139         add        rcx, 0x2                                    ; CODE XREF=next_prime+92
000000000000613d         xor        edx, edx
000000000000613f         mov        rax, rdi
0000000000006142         div        rcx
0000000000006145         add        rsi, r8
0000000000006148         cmp        rsi, rdi
000000000000614b         mov        rax, rdx
000000000000614e         jb         loc_6130

                     loc_6150:
0000000000006150         test       rax, rax                                    ; CODE XREF=next_prime+69
0000000000006153         jne        loc_615f

                     loc_6155:
0000000000006155         add        rdi, 0x2                                    ; CODE XREF=next_prime+74, next_prime+103
0000000000006159         cmp        rdi, 0xffffffffffffffff
000000000000615d         jne        loc_60f8

                     loc_615f:
000000000000615f         mov        rax, rdi                                    ; CODE XREF=next_prime+31, next_prime+131
0000000000006162         ret
                        ; endp
0000000000006163         align      16                                          ; End of unwind block (FDE at 0x11a14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_hasher:
0000000000006170         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x11a28), DATA XREF=hash_initialize+4
0000000000006173         xor        edx, edx
0000000000006175         ror        rax, 0x3
0000000000006179         div        rsi
000000000000617c         mov        rax, rdx
000000000000617f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_comparator:
0000000000006180         cmp        rdi, rsi                                    ; End of unwind block (FDE at 0x11a28), Begin of unwind block (FDE at 0x11a3c), DATA XREF=hash_initialize+48
0000000000006183         sete       al
0000000000006186         ret
                        ; endp
0000000000006187         align      16                                          ; End of unwind block (FDE at 0x11a3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_hasher:
0000000000006190         push       rbx                                         ; Begin of unwind block (FDE at 0x11a50), CODE XREF=hash_find_entry+20, transfer_entries+101, transfer_entries+175, hash_lookup+10, hash_get_next+12
0000000000006191         mov        rbx, rdi
0000000000006194         mov        rdi, rsi
0000000000006197         mov        rsi, qword [rbx+0x10]
000000000000619b         call       qword [rbx+0x30]
000000000000619e         cmp        qword [rbx+0x10], rax
00000000000061a2         jbe        loc_61ad

00000000000061a4         shl        rax, 0x4
00000000000061a8         add        rax, qword [rbx]
00000000000061ab         pop        rbx
00000000000061ac         ret
                        ; endp

                     loc_61ad:
00000000000061ad         call       j_abort                                     ; abort, CODE XREF=safe_hasher+18
                        ; endp
00000000000061b2         align      64                                          ; End of unwind block (FDE at 0x11a50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_find_entry:
00000000000061c0         push       r14                                         ; Begin of unwind block (FDE at 0x11a6c), CODE XREF=hash_insert_if_absent+52, hash_insert_if_absent+463, hash_delete+35
00000000000061c2         push       r13
00000000000061c4         mov        r14, rdx
00000000000061c7         push       r12
00000000000061c9         push       rbp
00000000000061ca         mov        r12, rdi
00000000000061cd         push       rbx
00000000000061ce         mov        rbp, rsi
00000000000061d1         mov        r13d, ecx
00000000000061d4         call       safe_hasher                                 ; safe_hasher
00000000000061d9         mov        qword [r14], rax
00000000000061dc         mov        rsi, qword [rax]
00000000000061df         test       rsi, rsi
00000000000061e2         je         loc_62d0

00000000000061e8         cmp        rsi, rbp
00000000000061eb         mov        rbx, rax
00000000000061ee         je         loc_6283

00000000000061f4         mov        rdi, rbp
00000000000061f7         call       qword [r12+0x38]
00000000000061fc         test       al, al
00000000000061fe         jne        loc_6280

0000000000006204         mov        rax, qword [rbx+8]
0000000000006208         test       rax, rax
000000000000620b         je         loc_62d0

0000000000006211         mov        rsi, qword [rax]
0000000000006214         cmp        rbp, rsi
0000000000006217         jne        loc_6239

0000000000006219         jmp        loc_624c
000000000000621b         align      32

                     loc_6220:
0000000000006220         mov        rbx, qword [rbx+8]                          ; CODE XREF=hash_find_entry+131
0000000000006224         mov        rax, qword [rbx+8]
0000000000006228         test       rax, rax
000000000000622b         je         loc_62d0

0000000000006231         mov        rsi, qword [rax]
0000000000006234         cmp        rsi, rbp
0000000000006237         je         loc_624c

                     loc_6239:
0000000000006239         mov        rdi, rbp                                    ; CODE XREF=hash_find_entry+87
000000000000623c         call       qword [r12+0x38]
0000000000006241         test       al, al
0000000000006243         je         loc_6220

0000000000006245         mov        rax, qword [rbx+8]
0000000000006249         mov        rsi, qword [rax]

                     loc_624c:
000000000000624c         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+89, hash_find_entry+119
000000000000624f         je         loc_626e

0000000000006251         mov        rdx, qword [rax+8]
0000000000006255         mov        qword [rbx+8], rdx
0000000000006259         mov        qword [rax], 0x0
0000000000006260         mov        rdx, qword [r12+0x48]
0000000000006265         mov        qword [rax+8], rdx
0000000000006269         mov        qword [r12+0x48], rax

                     loc_626e:
000000000000626e         pop        rbx                                         ; CODE XREF=hash_find_entry+143, hash_find_entry+198, hash_find_entry+263
000000000000626f         mov        rax, rsi
0000000000006272         pop        rbp
0000000000006273         pop        r12
0000000000006275         pop        r13
0000000000006277         pop        r14
0000000000006279         ret
                        ; endp
000000000000627a         align      128

                     loc_6280:
0000000000006280         mov        rsi, qword [rbx]                            ; CODE XREF=hash_find_entry+62

                     loc_6283:
0000000000006283         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+46
0000000000006286         je         loc_626e

0000000000006288         mov        rax, qword [rbx+8]
000000000000628c         test       rax, rax
000000000000628f         je         loc_62c0

0000000000006291         movdqu     xmm0, xmmword [rax]
0000000000006295         movups     xmmword [rbx], xmm0
0000000000006298         mov        qword [rax], 0x0
000000000000629f         mov        rdx, qword [r12+0x48]
00000000000062a4         mov        qword [rax+8], rdx
00000000000062a8         mov        qword [r12+0x48], rax
00000000000062ad         mov        rax, rsi
00000000000062b0         pop        rbx
00000000000062b1         pop        rbp
00000000000062b2         pop        r12
00000000000062b4         pop        r13
00000000000062b6         pop        r14
00000000000062b8         ret
                        ; endp
00000000000062b9         align      64

                     loc_62c0:
00000000000062c0         mov        qword [rbx], 0x0                            ; CODE XREF=hash_find_entry+207
00000000000062c7         jmp        loc_626e
00000000000062c9         align      16

                     loc_62d0:
00000000000062d0         xor        esi, esi                                    ; CODE XREF=hash_find_entry+34, hash_find_entry+75, hash_find_entry+107
00000000000062d2         pop        rbx
00000000000062d3         mov        rax, rsi
00000000000062d6         pop        rbp
00000000000062d7         pop        r12
00000000000062d9         pop        r13
00000000000062db         pop        r14
00000000000062dd         ret
                        ; endp
00000000000062de         align      32                                          ; End of unwind block (FDE at 0x11a6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_tuning.isra.0:
00000000000062e0         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0x11acc), CODE XREF=hash_initialize+96, hash_initialize+283, hash_insert_if_absent+324, hash_delete+165
00000000000062e3         lea        rcx, qword [default_tuning]                 ; default_tuning
00000000000062ea         mov        eax, 0x1
00000000000062ef         cmp        rdx, rcx
00000000000062f2         je         loc_6355

00000000000062f4         movss      xmm0, dword [rdx+8]
00000000000062f9         ucomiss    xmm0, dword [float_10014]                   ; float_10014
0000000000006300         jbe        loc_6350

0000000000006302         movss      xmm1, dword [float_10018]                   ; float_10018
000000000000630a         ucomiss    xmm1, xmm0
000000000000630d         jbe        loc_6350

000000000000630f         movss      xmm1, dword [rdx+0xc]
0000000000006314         ucomiss    xmm1, dword [float_1001c]                   ; float_1001c
000000000000631b         jbe        loc_6350

000000000000631d         movss      xmm1, dword [rdx]
0000000000006321         ucomiss    xmm1, dword [float_10020]                   ; float_10020
0000000000006328         jb         loc_6350

000000000000632a         addss      xmm1, dword [float_10014]                   ; float_10014
0000000000006332         movss      xmm2, dword [rdx+4]
0000000000006337         ucomiss    xmm2, xmm1
000000000000633a         jbe        loc_6350

000000000000633c         movss      xmm3, dword [float_10024]                   ; float_10024
0000000000006344         ucomiss    xmm3, xmm2
0000000000006347         jb         loc_6350

0000000000006349         ucomiss    xmm0, xmm1
000000000000634c         ja         loc_6355

000000000000634e         nop

                     loc_6350:
0000000000006350         mov        qword [rdi], rcx                            ; CODE XREF=check_tuning.isra.0+32, check_tuning.isra.0+45, check_tuning.isra.0+59, check_tuning.isra.0+72, check_tuning.isra.0+90, check_tuning.isra.0+103
0000000000006353         xor        eax, eax

                     loc_6355:
0000000000006355         ret                                                    ; CODE XREF=check_tuning.isra.0+18, check_tuning.isra.0+108
                        ; endp
0000000000006357         align      32                                          ; End of unwind block (FDE at 0x11acc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     transfer_entries:
0000000000006360         push       r15                                         ; Begin of unwind block (FDE at 0x11ae0), CODE XREF=hash_rehash+303, hash_rehash+338, hash_rehash+359
0000000000006362         push       r14
0000000000006364         push       r13
0000000000006366         push       r12
0000000000006368         push       rbp
0000000000006369         push       rbx
000000000000636a         sub        rsp, 0x8
000000000000636e         mov        r12, qword [rsi]
0000000000006371         cmp        r12, qword [rsi+8]
0000000000006375         jae        loc_6458

000000000000637b         mov        rbp, rdi
000000000000637e         mov        r13, rsi
0000000000006381         mov        r14d, edx
0000000000006384         nop        dword [rax]

                     loc_6388:
0000000000006388         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+242
000000000000638c         test       r15, r15
000000000000638f         je         loc_644a

0000000000006395         mov        rbx, qword [r12+8]
000000000000639a         test       rbx, rbx
000000000000639d         jne        loc_63bc

000000000000639f         jmp        loc_63fb
00000000000063a1         align      8

                     loc_63a8:
00000000000063a8         mov        rcx, qword [rax+8]                          ; CODE XREF=transfer_entries+114
00000000000063ac         test       rdx, rdx
00000000000063af         mov        qword [rbx+8], rcx
00000000000063b3         mov        qword [rax+8], rbx
00000000000063b7         mov        rbx, rdx
00000000000063ba         je         loc_63f7

                     loc_63bc:
00000000000063bc         mov        r15, qword [rbx]                            ; CODE XREF=transfer_entries+61, transfer_entries+149
00000000000063bf         mov        rdi, rbp
00000000000063c2         mov        rsi, r15
00000000000063c5         call       safe_hasher                                 ; safe_hasher
00000000000063ca         cmp        qword [rax], 0x0
00000000000063ce         mov        rdx, qword [rbx+8]
00000000000063d2         jne        loc_63a8

00000000000063d4         mov        qword [rax], r15
00000000000063d7         add        qword [rbp+0x18], 0x1
00000000000063dc         test       rdx, rdx
00000000000063df         mov        qword [rbx], 0x0
00000000000063e6         mov        rax, qword [rbp+0x48]
00000000000063ea         mov        qword [rbx+8], rax
00000000000063ee         mov        qword [rbp+0x48], rbx
00000000000063f2         mov        rbx, rdx
00000000000063f5         jne        loc_63bc

                     loc_63f7:
00000000000063f7         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+90

                     loc_63fb:
00000000000063fb         test       r14b, r14b                                  ; CODE XREF=transfer_entries+63
00000000000063fe         mov        qword [r12+8], 0x0
0000000000006407         jne        loc_644a

0000000000006409         mov        rsi, r15
000000000000640c         mov        rdi, rbp
000000000000640f         call       safe_hasher                                 ; safe_hasher
0000000000006414         cmp        qword [rax], 0x0
0000000000006418         mov        rbx, rax
000000000000641b         je         loc_6470

000000000000641d         mov        rax, qword [rbp+0x48]
0000000000006421         test       rax, rax
0000000000006424         je         loc_6480

0000000000006426         mov        rdx, qword [rax+8]
000000000000642a         mov        qword [rbp+0x48], rdx

                     loc_642e:
000000000000642e         mov        rdx, qword [rbx+8]                          ; CODE XREF=transfer_entries+301
0000000000006432         mov        qword [rax], r15
0000000000006435         mov        qword [rax+8], rdx
0000000000006439         mov        qword [rbx+8], rax

                     loc_643d:
000000000000643d         mov        qword [r12], 0x0                            ; CODE XREF=transfer_entries+280
0000000000006445         sub        qword [r13+0x18], 0x1

                     loc_644a:
000000000000644a         add        r12, 0x10                                   ; CODE XREF=transfer_entries+47, transfer_entries+167
000000000000644e         cmp        qword [r13+8], r12
0000000000006452         ja         loc_6388

                     loc_6458:
0000000000006458         add        rsp, 0x8                                    ; CODE XREF=transfer_entries+21
000000000000645c         mov        eax, 0x1
0000000000006461         pop        rbx
0000000000006462         pop        rbp
0000000000006463         pop        r12
0000000000006465         pop        r13
0000000000006467         pop        r14
0000000000006469         pop        r15
000000000000646b         ret
                        ; endp
000000000000646c         align      16

                     loc_6470:
0000000000006470         mov        qword [rax], r15                            ; CODE XREF=transfer_entries+187
0000000000006473         add        qword [rbp+0x18], 0x1
0000000000006478         jmp        loc_643d
000000000000647a         align      128

                     loc_6480:
0000000000006480         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=transfer_entries+196
0000000000006485         call       j_malloc                                    ; malloc
000000000000648a         test       rax, rax
000000000000648d         jne        loc_642e

000000000000648f         add        rsp, 0x8
0000000000006493         xor        eax, eax
0000000000006495         pop        rbx
0000000000006496         pop        rbp
0000000000006497         pop        r12
0000000000006499         pop        r13
000000000000649b         pop        r14
000000000000649d         pop        r15
000000000000649f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets:
00000000000064a0         mov        rax, qword [rdi+0x10]                       ; End of unwind block (FDE at 0x11ae0), Begin of unwind block (FDE at 0x11b40)
00000000000064a4         ret
                        ; endp
00000000000064a5         align      16                                          ; End of unwind block (FDE at 0x11b40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets_used:
00000000000064b0         mov        rax, qword [rdi+0x18]                       ; Begin of unwind block (FDE at 0x11b54)
00000000000064b4         ret
                        ; endp
00000000000064b5         align      64                                          ; End of unwind block (FDE at 0x11b54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_entries:
00000000000064c0         mov        rax, qword [rdi+0x20]                       ; Begin of unwind block (FDE at 0x11b68)
00000000000064c4         ret
                        ; endp
00000000000064c5         align      16                                          ; End of unwind block (FDE at 0x11b68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_max_bucket_length:
00000000000064d0         mov        rsi, qword [rdi]                            ; Begin of unwind block (FDE at 0x11b7c)
00000000000064d3         mov        rdi, qword [rdi+8]
00000000000064d7         xor        eax, eax
00000000000064d9         cmp        rsi, rdi
00000000000064dc         jae        loc_6517

00000000000064de         nop

                     loc_64e0:
00000000000064e0         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_get_max_bucket_length+67
00000000000064e4         je         loc_650c

00000000000064e6         mov        rdx, qword [rsi+8]
00000000000064ea         mov        ecx, 0x1
00000000000064ef         test       rdx, rdx
00000000000064f2         je         loc_6505

00000000000064f4         nop        dword [rax]

                     loc_64f8:
00000000000064f8         mov        rdx, qword [rdx+8]                          ; CODE XREF=hash_get_max_bucket_length+51
00000000000064fc         add        rcx, 0x1
0000000000006500         test       rdx, rdx
0000000000006503         jne        loc_64f8

                     loc_6505:
0000000000006505         cmp        rax, rcx                                    ; CODE XREF=hash_get_max_bucket_length+34
0000000000006508         cmovb      rax, rcx

                     loc_650c:
000000000000650c         add        rsi, 0x10                                   ; CODE XREF=hash_get_max_bucket_length+20
0000000000006510         cmp        rsi, rdi
0000000000006513         jb         loc_64e0

0000000000006515         ret
                        ; endp

                     loc_6517:
0000000000006517         ret                                                    ; CODE XREF=hash_get_max_bucket_length+12
                        ; endp
0000000000006519         align      32                                          ; End of unwind block (FDE at 0x11b7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_table_ok:
0000000000006520         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0x11b90)
0000000000006523         mov        r8, qword [rdi+8]
0000000000006527         xor        edx, edx
0000000000006529         xor        esi, esi
000000000000652b         cmp        rcx, r8
000000000000652e         jae        loc_6566

                     loc_6530:
0000000000006530         cmp        qword [rcx], 0x0                            ; CODE XREF=hash_table_ok+68
0000000000006534         je         loc_655d

0000000000006536         mov        rax, qword [rcx+8]
000000000000653a         add        rsi, 0x1
000000000000653e         add        rdx, 0x1
0000000000006542         test       rax, rax
0000000000006545         je         loc_655d

0000000000006547         nop        word [rax+rax]

                     loc_6550:
0000000000006550         mov        rax, qword [rax+8]                          ; CODE XREF=hash_table_ok+59
0000000000006554         add        rdx, 0x1
0000000000006558         test       rax, rax
000000000000655b         jne        loc_6550

                     loc_655d:
000000000000655d         add        rcx, 0x10                                   ; CODE XREF=hash_table_ok+20, hash_table_ok+37
0000000000006561         cmp        rcx, r8
0000000000006564         jb         loc_6530

                     loc_6566:
0000000000006566         xor        eax, eax                                    ; CODE XREF=hash_table_ok+14
0000000000006568         cmp        qword [rdi+0x18], rsi
000000000000656c         je         loc_6570

000000000000656e         ret
                        ; endp

                     loc_6570:
0000000000006570         cmp        qword [rdi+0x20], rdx                       ; CODE XREF=hash_table_ok+76
0000000000006574         sete       al
0000000000006577         ret
                        ; endp
0000000000006578         align      128                                         ; End of unwind block (FDE at 0x11b90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_print_statistics:
0000000000006580         push       r13                                         ; Begin of unwind block (FDE at 0x11ba4)
0000000000006582         push       r12
0000000000006584         mov        r12, rsi
0000000000006587         push       rbp
0000000000006588         push       rbx
0000000000006589         xor        ebx, ebx
000000000000658b         sub        rsp, 0x8
000000000000658f         mov        rsi, qword [rdi]
0000000000006592         mov        rcx, qword [rdi+0x20]
0000000000006596         mov        rbp, qword [rdi+0x10]
000000000000659a         mov        r13, qword [rdi+0x18]
000000000000659e         mov        rdi, qword [rdi+8]
00000000000065a2         cmp        rsi, rdi
00000000000065a5         jae        loc_65e5

00000000000065a7         nop        word [rax+rax]

                     loc_65b0:
00000000000065b0         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_print_statistics+99
00000000000065b4         je         loc_65dc

00000000000065b6         mov        rax, qword [rsi+8]
00000000000065ba         mov        edx, 0x1
00000000000065bf         test       rax, rax
00000000000065c2         je         loc_65d5

00000000000065c4         nop        dword [rax]

                     loc_65c8:
00000000000065c8         mov        rax, qword [rax+8]                          ; CODE XREF=hash_print_statistics+83
00000000000065cc         add        rdx, 0x1
00000000000065d0         test       rax, rax
00000000000065d3         jne        loc_65c8

                     loc_65d5:
00000000000065d5         cmp        rbx, rdx                                    ; CODE XREF=hash_print_statistics+66
00000000000065d8         cmovb      rbx, rdx

                     loc_65dc:
00000000000065dc         add        rsi, 0x10                                   ; CODE XREF=hash_print_statistics+52
00000000000065e0         cmp        rsi, rdi
00000000000065e3         jb         loc_65b0

                     loc_65e5:
00000000000065e5         lea        rdx, qword [aEntriesLun]                    ; "# entries:         %lu\\n", CODE XREF=hash_print_statistics+37
00000000000065ec         mov        esi, 0x1
00000000000065f1         mov        rdi, r12
00000000000065f4         xor        eax, eax
00000000000065f6         call       j___fprintf_chk                             ; __fprintf_chk
00000000000065fb         lea        rdx, qword [aBucketsLun]                    ; "# buckets:         %lu\\n"
0000000000006602         xor        eax, eax
0000000000006604         mov        rcx, rbp
0000000000006607         mov        esi, 0x1
000000000000660c         mov        rdi, r12
000000000000660f         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006614         test       r13, r13
0000000000006617         js         loc_6680

0000000000006619         pxor       xmm0, xmm0
000000000000661d         test       rbp, rbp
0000000000006620         cvtsi2sd   xmm0, r13
0000000000006625         mulsd      xmm0, qword [double_fec0]                   ; double_fec0
000000000000662d         js         loc_66a9

                     loc_662f:
000000000000662f         pxor       xmm1, xmm1                                  ; CODE XREF=hash_print_statistics+295
0000000000006633         cvtsi2sd   xmm1, rbp

                     loc_6638:
0000000000006638         divsd      xmm0, xmm1                                  ; CODE XREF=hash_print_statistics+322
000000000000663c         lea        rdx, qword [aBucketsUsedLu2]                ; "# buckets used:    %lu (%.2f%%)\\n"
0000000000006643         mov        rcx, r13
0000000000006646         mov        rdi, r12
0000000000006649         mov        esi, 0x1
000000000000664e         mov        eax, 0x1
0000000000006653         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006658         add        rsp, 0x8
000000000000665c         mov        rcx, rbx
000000000000665f         mov        rdi, r12
0000000000006662         pop        rbx
0000000000006663         pop        rbp
0000000000006664         pop        r12
0000000000006666         pop        r13
0000000000006668         lea        rdx, qword [aMaxBucketLengt]                ; "max bucket length: %lu\\n"
000000000000666f         mov        esi, 0x1
0000000000006674         xor        eax, eax
0000000000006676         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000667b         align      128

                     loc_6680:
0000000000006680         mov        rax, r13                                    ; CODE XREF=hash_print_statistics+151
0000000000006683         mov        rdx, r13
0000000000006686         pxor       xmm0, xmm0
000000000000668a         shr        rax, 0x1
000000000000668d         and        edx, 0x1
0000000000006690         or         rax, rdx
0000000000006693         test       rbp, rbp
0000000000006696         cvtsi2sd   xmm0, rax
000000000000669b         addsd      xmm0, xmm0
000000000000669f         mulsd      xmm0, qword [double_fec0]                   ; double_fec0
00000000000066a7         jns        loc_662f

                     loc_66a9:
00000000000066a9         mov        rax, rbp                                    ; CODE XREF=hash_print_statistics+173
00000000000066ac         pxor       xmm1, xmm1
00000000000066b0         shr        rax, 0x1
00000000000066b3         and        ebp, 0x1
00000000000066b6         or         rax, rbp
00000000000066b9         cvtsi2sd   xmm1, rax
00000000000066be         addsd      xmm1, xmm1
00000000000066c2         jmp        loc_6638
00000000000066c7         align      16                                          ; End of unwind block (FDE at 0x11ba4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_lookup:
00000000000066d0         push       r12                                         ; Begin of unwind block (FDE at 0x11be0), CODE XREF=main+4417, sub_4a7e+432, seen_file+49
00000000000066d2         push       rbp
00000000000066d3         mov        r12, rdi
00000000000066d6         push       rbx
00000000000066d7         mov        rbp, rsi
00000000000066da         call       safe_hasher                                 ; safe_hasher
00000000000066df         mov        rsi, qword [rax]
00000000000066e2         test       rsi, rsi
00000000000066e5         je         loc_670d

00000000000066e7         mov        rbx, rax
00000000000066ea         jmp        loc_66f3
00000000000066ec         align      16

                     loc_66f0:
00000000000066f0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+59

                     loc_66f3:
00000000000066f3         cmp        rsi, rbp                                    ; CODE XREF=hash_lookup+26
00000000000066f6         je         loc_670f

00000000000066f8         mov        rdi, rbp
00000000000066fb         call       qword [r12+0x38]
0000000000006700         test       al, al
0000000000006702         jne        loc_6720

0000000000006704         mov        rbx, qword [rbx+8]
0000000000006708         test       rbx, rbx
000000000000670b         jne        loc_66f0

                     loc_670d:
000000000000670d         xor        esi, esi                                    ; CODE XREF=hash_lookup+21

                     loc_670f:
000000000000670f         pop        rbx                                         ; CODE XREF=hash_lookup+38
0000000000006710         mov        rax, rsi
0000000000006713         pop        rbp
0000000000006714         pop        r12
0000000000006716         ret
                        ; endp
0000000000006717         align      32

                     loc_6720:
0000000000006720         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+50
0000000000006723         pop        rbx
0000000000006724         pop        rbp
0000000000006725         mov        rax, rsi
0000000000006728         pop        r12
000000000000672a         ret
                        ; endp
000000000000672b         align      16                                          ; End of unwind block (FDE at 0x11be0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_first:
0000000000006730         cmp        qword [rdi+0x20], 0x0                       ; Begin of unwind block (FDE at 0x11c18)
0000000000006735         je         loc_6763

0000000000006737         mov        rdx, qword [rdi]
000000000000673a         mov        rcx, qword [rdi+8]
000000000000673e         cmp        rdx, rcx
0000000000006741         jae        loc_6768

0000000000006743         mov        rax, qword [rdx]
0000000000006746         test       rax, rax
0000000000006749         jne        loc_6766

000000000000674b         nop        dword [rax+rax]

                     loc_6750:
0000000000006750         add        rdx, 0x10                                   ; CODE XREF=hash_get_first+47
0000000000006754         cmp        rdx, rcx
0000000000006757         jae        loc_6768

0000000000006759         mov        rax, qword [rdx]
000000000000675c         test       rax, rax
000000000000675f         je         loc_6750

0000000000006761         ret
                        ; endp

                     loc_6763:
0000000000006763         xor        eax, eax                                    ; CODE XREF=hash_get_first+5
0000000000006765         ret
                        ; endp

                     loc_6766:
0000000000006766         ret                                                    ; CODE XREF=hash_get_first+25
                        ; endp

                     loc_6768:
0000000000006768         sub        rsp, 0x8                                    ; CODE XREF=hash_get_first+17, hash_get_first+39
000000000000676c         call       j_abort                                     ; abort
                        ; endp
0000000000006771         align      128                                         ; End of unwind block (FDE at 0x11c18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_next:
0000000000006780         push       rbp                                         ; Begin of unwind block (FDE at 0x11c2c)
0000000000006781         push       rbx
0000000000006782         mov        rbp, rdi
0000000000006785         mov        rbx, rsi
0000000000006788         sub        rsp, 0x8
000000000000678c         call       safe_hasher                                 ; safe_hasher
0000000000006791         mov        rdx, rax
0000000000006794         mov        rcx, rax
0000000000006797         mov        rax, qword [rdx]
000000000000679a         mov        rdx, qword [rdx+8]
000000000000679e         cmp        rax, rbx
00000000000067a1         je         loc_67b9

00000000000067a3         nop        dword [rax+rax]

                     loc_67a8:
00000000000067a8         test       rdx, rdx                                    ; CODE XREF=hash_get_next+55
00000000000067ab         je         loc_67be

00000000000067ad         mov        rax, qword [rdx]
00000000000067b0         mov        rdx, qword [rdx+8]
00000000000067b4         cmp        rax, rbx
00000000000067b7         jne        loc_67a8

                     loc_67b9:
00000000000067b9         test       rdx, rdx                                    ; CODE XREF=hash_get_next+33
00000000000067bc         jne        loc_67e8

                     loc_67be:
00000000000067be         mov        rdx, qword [rbp+8]                          ; CODE XREF=hash_get_next+43
00000000000067c2         jmp        loc_67d0
00000000000067c4         align      8

                     loc_67c8:
00000000000067c8         mov        rax, qword [rcx]                            ; CODE XREF=hash_get_next+87
00000000000067cb         test       rax, rax
00000000000067ce         jne        loc_67db

                     loc_67d0:
00000000000067d0         add        rcx, 0x10                                   ; CODE XREF=hash_get_next+66
00000000000067d4         cmp        rdx, rcx
00000000000067d7         ja         loc_67c8

00000000000067d9         xor        eax, eax

                     loc_67db:
00000000000067db         add        rsp, 0x8                                    ; CODE XREF=hash_get_next+78
00000000000067df         pop        rbx
00000000000067e0         pop        rbp
00000000000067e1         ret
                        ; endp
00000000000067e2         align      8

                     loc_67e8:
00000000000067e8         mov        rax, qword [rdx]                            ; CODE XREF=hash_get_next+60
00000000000067eb         add        rsp, 0x8
00000000000067ef         pop        rbx
00000000000067f0         pop        rbp
00000000000067f1         ret
                        ; endp
00000000000067f2         align      2048                                        ; End of unwind block (FDE at 0x11c2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_entries:
0000000000006800         mov        r9, qword [rdi]                             ; Begin of unwind block (FDE at 0x11c60)
0000000000006803         cmp        qword [rdi+8], r9
0000000000006807         jbe        loc_6862

0000000000006809         xor        r8d, r8d

                     loc_680c:
000000000000680c         mov        rcx, qword [r9]                             ; CODE XREF=hash_get_entries+85
000000000000680f         test       rcx, rcx
0000000000006812         je         loc_684d

0000000000006814         cmp        rdx, r8
0000000000006817         jbe        loc_6857

0000000000006819         mov        qword [rsi+r8*8], rcx
000000000000681d         mov        rcx, qword [r9+8]
0000000000006821         lea        rax, qword [r8+1]
0000000000006825         test       rcx, rcx
0000000000006828         je         loc_684a

000000000000682a         nop        word [rax+rax]

                     loc_6830:
0000000000006830         cmp        rdx, rax                                    ; CODE XREF=hash_get_entries+72
0000000000006833         je         loc_6860

0000000000006835         mov        r8, qword [rcx]
0000000000006838         add        rax, 0x1
000000000000683c         mov        qword [rsi+rax*8-8], r8
0000000000006841         mov        rcx, qword [rcx+8]
0000000000006845         test       rcx, rcx
0000000000006848         jne        loc_6830

                     loc_684a:
000000000000684a         mov        r8, rax                                     ; CODE XREF=hash_get_entries+40

                     loc_684d:
000000000000684d         add        r9, 0x10                                    ; CODE XREF=hash_get_entries+18
0000000000006851         cmp        qword [rdi+8], r9
0000000000006855         ja         loc_680c

                     loc_6857:
0000000000006857         mov        rax, r8                                     ; CODE XREF=hash_get_entries+23
000000000000685a         ret
                        ; endp
000000000000685b         align      32

                     loc_6860:
0000000000006860         ret                                                    ; CODE XREF=hash_get_entries+51
                        ; endp

                     loc_6862:
0000000000006862         xor        eax, eax                                    ; CODE XREF=hash_get_entries+7
0000000000006864         ret
                        ; endp
0000000000006865         align      16                                          ; End of unwind block (FDE at 0x11c60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_do_for_each:
0000000000006870         push       r15                                         ; Begin of unwind block (FDE at 0x11c74)
0000000000006872         push       r14
0000000000006874         push       r13
0000000000006876         push       r12
0000000000006878         push       rbp
0000000000006879         push       rbx
000000000000687a         sub        rsp, 0x8
000000000000687e         mov        r14, qword [rdi]
0000000000006881         cmp        qword [rdi+8], r14
0000000000006885         jbe        loc_68d6

0000000000006887         mov        r13, rdx
000000000000688a         mov        r12, rsi
000000000000688d         mov        r15, rdi
0000000000006890         xor        ebp, ebp

                     loc_6892:
0000000000006892         mov        rdi, qword [r14]                            ; CODE XREF=hash_do_for_each+82
0000000000006895         test       rdi, rdi
0000000000006898         je         loc_68ba

000000000000689a         mov        rbx, r14
000000000000689d         jmp        loc_68a3
000000000000689f         align      32

                     loc_68a0:
00000000000068a0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_do_for_each+72

                     loc_68a3:
00000000000068a3         mov        rsi, r13                                    ; CODE XREF=hash_do_for_each+45
00000000000068a6         call       r12
00000000000068a9         test       al, al
00000000000068ab         je         loc_68c4

00000000000068ad         mov        rbx, qword [rbx+8]
00000000000068b1         add        rbp, 0x1
00000000000068b5         test       rbx, rbx
00000000000068b8         jne        loc_68a0

                     loc_68ba:
00000000000068ba         add        r14, 0x10                                   ; CODE XREF=hash_do_for_each+40
00000000000068be         cmp        qword [r15+8], r14
00000000000068c2         ja         loc_6892

                     loc_68c4:
00000000000068c4         add        rsp, 0x8                                    ; CODE XREF=hash_do_for_each+59, hash_do_for_each+104
00000000000068c8         mov        rax, rbp
00000000000068cb         pop        rbx
00000000000068cc         pop        rbp
00000000000068cd         pop        r12
00000000000068cf         pop        r13
00000000000068d1         pop        r14
00000000000068d3         pop        r15
00000000000068d5         ret
                        ; endp

                     loc_68d6:
00000000000068d6         xor        ebp, ebp                                    ; CODE XREF=hash_do_for_each+21
00000000000068d8         jmp        loc_68c4
00000000000068da         align      32                                          ; End of unwind block (FDE at 0x11c74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_string:
00000000000068e0         movzx      ecx, byte [rdi]                             ; Begin of unwind block (FDE at 0x11cc0)
00000000000068e3         xor        edx, edx
00000000000068e5         test       cl, cl
00000000000068e7         je         loc_690d

00000000000068e9         nop        dword [rax]

                     loc_68f0:
00000000000068f0         mov        rax, rdx                                    ; CODE XREF=hash_string+43
00000000000068f3         add        rdi, 0x1
00000000000068f7         shl        rax, 0x5
00000000000068fb         sub        rax, rdx
00000000000068fe         xor        edx, edx
0000000000006900         add        rax, rcx
0000000000006903         movzx      ecx, byte [rdi]
0000000000006906         div        rsi
0000000000006909         test       cl, cl
000000000000690b         jne        loc_68f0

                     loc_690d:
000000000000690d         mov        rax, rdx                                    ; CODE XREF=hash_string+7
0000000000006910         ret
                        ; endp
0000000000006911         align      32                                          ; End of unwind block (FDE at 0x11cc0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_reset_tuning:
0000000000006920         movabs     rax, 0x3f80000000000000                     ; Begin of unwind block (FDE at 0x11cd4)
000000000000692a         mov        byte [rdi+0x10], 0x0
000000000000692e         mov        qword [rdi], rax
0000000000006931         movabs     rax, 0x3fb4fdf43f4ccccd
000000000000693b         mov        qword [rdi+8], rax
000000000000693f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_initialize:
0000000000006940         push       r15                                         ; End of unwind block (FDE at 0x11cd4), Begin of unwind block (FDE at 0x11ce8), CODE XREF=main+4144, canonicalize_filename_mode+1282
0000000000006942         push       r14
0000000000006944         lea        rax, qword [raw_hasher]                     ; raw_hasher
000000000000694b         push       r13
000000000000694d         push       r12
000000000000694f         mov        r12, rdx
0000000000006952         push       rbp
0000000000006953         push       rbx
0000000000006954         mov        r13, rcx
0000000000006957         mov        rbp, rdi
000000000000695a         mov        edi, 0x50                                   ; argument "__size" for method j_malloc
000000000000695f         mov        r15, rsi
0000000000006962         sub        rsp, 0x8
0000000000006966         test       rdx, rdx
0000000000006969         mov        r14, r8
000000000000696c         cmove      r12, rax
0000000000006970         lea        rax, qword [raw_comparator]                 ; raw_comparator
0000000000006977         test       rcx, rcx
000000000000697a         cmove      r13, rax
000000000000697e         call       j_malloc                                    ; malloc
0000000000006983         test       rax, rax
0000000000006986         mov        rbx, rax
0000000000006989         je         loc_6a3a

000000000000698f         test       r15, r15
0000000000006992         lea        rdi, qword [rax+0x28]
0000000000006996         je         loc_6a50

000000000000699c         mov        qword [rax+0x28], r15
00000000000069a0         call       check_tuning.isra.0                         ; check_tuning.isra.0
00000000000069a5         test       al, al
00000000000069a7         je         loc_6a30

00000000000069ad         cmp        byte [r15+0x10], 0x0
00000000000069b2         je         loc_6ab0

                     loc_69b8:
00000000000069b8         mov        rdi, rbp                                    ; CODE XREF=hash_initialize+362, hash_initialize+421
00000000000069bb         call       next_prime                                  ; next_prime
00000000000069c0         mov        edx, 0x8
00000000000069c5         mov        rbp, rax
00000000000069c8         xor        ecx, ecx
00000000000069ca         mov        rax, rdx
00000000000069cd         mul        rbp
00000000000069d0         jo         loc_6aea

                     loc_69d6:
00000000000069d6         test       rax, rax                                    ; CODE XREF=hash_initialize+431
00000000000069d9         js         loc_6a30

00000000000069db         test       rcx, rcx
00000000000069de         jne        loc_6a30

00000000000069e0         test       rbp, rbp
00000000000069e3         mov        qword [rbx+0x10], rbp
00000000000069e7         je         loc_6a30

00000000000069e9         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
00000000000069ee         mov        rdi, rbp                                    ; argument "__nmemb" for method j_calloc
00000000000069f1         call       j_calloc                                    ; calloc
00000000000069f6         test       rax, rax
00000000000069f9         mov        qword [rbx], rax
00000000000069fc         je         loc_6a30

00000000000069fe         shl        rbp, 0x4
0000000000006a02         mov        qword [rbx+0x18], 0x0
0000000000006a0a         mov        qword [rbx+0x20], 0x0
0000000000006a12         add        rbp, rax
0000000000006a15         mov        qword [rbx+0x30], r12
0000000000006a19         mov        qword [rbx+0x38], r13
0000000000006a1d         mov        qword [rbx+8], rbp
0000000000006a21         mov        qword [rbx+0x40], r14
0000000000006a25         mov        qword [rbx+0x48], 0x0
0000000000006a2d         jmp        loc_6a3a
0000000000006a2f         align      16

                     loc_6a30:
0000000000006a30         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=hash_initialize+103, hash_initialize+153, hash_initialize+158, hash_initialize+167, hash_initialize+188, hash_initialize+298, hash_initialize+325
0000000000006a33         xor        ebx, ebx
0000000000006a35         call       j_free                                      ; free

                     loc_6a3a:
0000000000006a3a         add        rsp, 0x8                                    ; CODE XREF=hash_initialize+73, hash_initialize+237
0000000000006a3e         mov        rax, rbx
0000000000006a41         pop        rbx
0000000000006a42         pop        rbp
0000000000006a43         pop        r12
0000000000006a45         pop        r13
0000000000006a47         pop        r14
0000000000006a49         pop        r15
0000000000006a4b         ret
                        ; endp
0000000000006a4c         align      16

                     loc_6a50:
0000000000006a50         lea        rax, qword [default_tuning]                 ; default_tuning, CODE XREF=hash_initialize+86
0000000000006a57         mov        qword [rbx+0x28], rax
0000000000006a5b         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000006a60         test       al, al
0000000000006a62         movss      xmm1, dword [float_10028]                   ; float_10028
0000000000006a6a         je         loc_6a30

0000000000006a6c         test       rbp, rbp
0000000000006a6f         js         loc_6abb

                     loc_6a71:
0000000000006a71         pxor       xmm0, xmm0                                  ; CODE XREF=hash_initialize+377
0000000000006a75         cvtsi2ss   xmm0, rbp

                     loc_6a7a:
0000000000006a7a         divss      xmm0, xmm1                                  ; CODE XREF=hash_initialize+404
0000000000006a7e         ucomiss    xmm0, dword [dword_1002c]                   ; dword_1002c
0000000000006a85         jae        loc_6a30

0000000000006a87         ucomiss    xmm0, dword [float_10030]                   ; float_10030
0000000000006a8e         jb         loc_6ae0

0000000000006a90         subss      xmm0, dword [float_10030]                   ; float_10030
0000000000006a98         movabs     rax, 0x8000000000000000
0000000000006aa2         cvttss2si  rbp, xmm0
0000000000006aa7         xor        rbp, rax
0000000000006aaa         jmp        loc_69b8
0000000000006aaf         align      16

                     loc_6ab0:
0000000000006ab0         test       rbp, rbp                                    ; CODE XREF=hash_initialize+114
0000000000006ab3         movss      xmm1, dword [r15+8]
0000000000006ab9         jns        loc_6a71

                     loc_6abb:
0000000000006abb         mov        rax, rbp                                    ; CODE XREF=hash_initialize+303
0000000000006abe         pxor       xmm0, xmm0
0000000000006ac2         shr        rax, 0x1
0000000000006ac5         and        ebp, 0x1
0000000000006ac8         or         rax, rbp
0000000000006acb         cvtsi2ss   xmm0, rax
0000000000006ad0         addss      xmm0, xmm0
0000000000006ad4         jmp        loc_6a7a
0000000000006ad6         align      32

                     loc_6ae0:
0000000000006ae0         cvttss2si  rbp, xmm0                                   ; CODE XREF=hash_initialize+334
0000000000006ae5         jmp        loc_69b8

                     loc_6aea:
0000000000006aea         mov        ecx, 0x1                                    ; CODE XREF=hash_initialize+144
0000000000006aef         jmp        loc_69d6
0000000000006af4         align      256                                         ; End of unwind block (FDE at 0x11ce8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_clear:
0000000000006b00         push       r12                                         ; Begin of unwind block (FDE at 0x11d34)
0000000000006b02         push       rbp
0000000000006b03         mov        rbp, rdi
0000000000006b06         push       rbx
0000000000006b07         mov        r12, qword [rdi]
0000000000006b0a         cmp        r12, qword [rdi+8]
0000000000006b0e         jae        loc_6b7b

                     loc_6b10:
0000000000006b10         cmp        qword [r12], 0x0                            ; CODE XREF=hash_clear+121
0000000000006b15         je         loc_6b71

0000000000006b17         mov        rbx, qword [r12+8]
0000000000006b1c         mov        rax, qword [rbp+0x40]
0000000000006b20         test       rbx, rbx
0000000000006b23         je         loc_6b55

0000000000006b25         nop        dword [rax]

                     loc_6b28:
0000000000006b28         test       rax, rax                                    ; CODE XREF=hash_clear+83
0000000000006b2b         je         loc_6b36

0000000000006b2d         mov        rdi, qword [rbx]
0000000000006b30         call       rax
0000000000006b32         mov        rax, qword [rbp+0x40]

                     loc_6b36:
0000000000006b36         mov        rdx, qword [rbx+8]                          ; CODE XREF=hash_clear+43
0000000000006b3a         mov        rcx, qword [rbp+0x48]
0000000000006b3e         mov        qword [rbx], 0x0
0000000000006b45         test       rdx, rdx
0000000000006b48         mov        qword [rbx+8], rcx
0000000000006b4c         mov        qword [rbp+0x48], rbx
0000000000006b50         mov        rbx, rdx
0000000000006b53         jne        loc_6b28

                     loc_6b55:
0000000000006b55         test       rax, rax                                    ; CODE XREF=hash_clear+35
0000000000006b58         je         loc_6b60

0000000000006b5a         mov        rdi, qword [r12]
0000000000006b5e         call       rax

                     loc_6b60:
0000000000006b60         mov        qword [r12], 0x0                            ; CODE XREF=hash_clear+88
0000000000006b68         mov        qword [r12+8], 0x0

                     loc_6b71:
0000000000006b71         add        r12, 0x10                                   ; CODE XREF=hash_clear+21
0000000000006b75         cmp        qword [rbp+8], r12
0000000000006b79         ja         loc_6b10

                     loc_6b7b:
0000000000006b7b         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=hash_clear+14
0000000000006b83         mov        qword [rbp+0x20], 0x0
0000000000006b8b         pop        rbx
0000000000006b8c         pop        rbp
0000000000006b8d         pop        r12
0000000000006b8f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_free:
0000000000006b90         push       r12                                         ; End of unwind block (FDE at 0x11d34), Begin of unwind block (FDE at 0x11d60), CODE XREF=main+4787, canonicalize_filename_mode+537, canonicalize_filename_mode+915
0000000000006b92         push       rbp
0000000000006b93         mov        r12, rdi
0000000000006b96         push       rbx
0000000000006b97         cmp        qword [rdi+0x40], 0x0
0000000000006b9c         mov        rbp, qword [rdi]
0000000000006b9f         mov        rax, qword [rdi+8]
0000000000006ba3         je         loc_6bf3

0000000000006ba5         cmp        qword [rdi+0x20], 0x0
0000000000006baa         je         loc_6bf3

0000000000006bac         cmp        rbp, rax
0000000000006baf         jae        loc_6c2c

0000000000006bb1         nop        dword [rax]

                     loc_6bb8:
0000000000006bb8         mov        rdi, qword [rbp]                            ; CODE XREF=hash_free+93
0000000000006bbc         test       rdi, rdi
0000000000006bbf         je         loc_6be6

0000000000006bc1         mov        rbx, rbp
0000000000006bc4         jmp        loc_6bd3
0000000000006bc6         align      16

                     loc_6bd0:
0000000000006bd0         mov        rdi, qword [rbx]                            ; CODE XREF=hash_free+79

                     loc_6bd3:
0000000000006bd3         call       qword [r12+0x40]                            ; CODE XREF=hash_free+52
0000000000006bd8         mov        rbx, qword [rbx+8]
0000000000006bdc         test       rbx, rbx
0000000000006bdf         jne        loc_6bd0

0000000000006be1         mov        rax, qword [r12+8]

                     loc_6be6:
0000000000006be6         add        rbp, 0x10                                   ; CODE XREF=hash_free+47
0000000000006bea         cmp        rax, rbp
0000000000006bed         ja         loc_6bb8

0000000000006bef         mov        rbp, qword [r12]

                     loc_6bf3:
0000000000006bf3         cmp        rbp, rax                                    ; CODE XREF=hash_free+19, hash_free+26
0000000000006bf6         jae        loc_6c2c

0000000000006bf8         nop        dword [rax+rax]

                     loc_6c00:
0000000000006c00         mov        rdi, qword [rbp+8]                          ; CODE XREF=hash_free+154
0000000000006c04         test       rdi, rdi
0000000000006c07         je         loc_6c21

0000000000006c09         nop        dword [rax]

                     loc_6c10:
0000000000006c10         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+143
0000000000006c14         call       j_free                                      ; free
0000000000006c19         test       rbx, rbx
0000000000006c1c         mov        rdi, rbx
0000000000006c1f         jne        loc_6c10

                     loc_6c21:
0000000000006c21         add        rbp, 0x10                                   ; CODE XREF=hash_free+119
0000000000006c25         cmp        qword [r12+8], rbp
0000000000006c2a         ja         loc_6c00

                     loc_6c2c:
0000000000006c2c         mov        rdi, qword [r12+0x48]                       ; CODE XREF=hash_free+31, hash_free+102
0000000000006c31         test       rdi, rdi
0000000000006c34         je         loc_6c51

0000000000006c36         nop        word [cs:rax+rax]

                     loc_6c40:
0000000000006c40         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+191
0000000000006c44         call       j_free                                      ; free
0000000000006c49         test       rbx, rbx
0000000000006c4c         mov        rdi, rbx
0000000000006c4f         jne        loc_6c40

                     loc_6c51:
0000000000006c51         mov        rdi, qword [r12]                            ; argument "__ptr" for method j_free, CODE XREF=hash_free+164
0000000000006c55         call       j_free                                      ; free
0000000000006c5a         pop        rbx
0000000000006c5b         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000006c5e         pop        rbp
0000000000006c5f         pop        r12
0000000000006c61         jmp        j_free                                      ; free
                        ; endp
0000000000006c66         align      16                                          ; End of unwind block (FDE at 0x11d60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     hash_rehash:
0000000000006c70         push       r12                                         ; Begin of unwind block (FDE at 0x11d8c), CODE XREF=hash_insert_if_absent+443, hash_delete+271
0000000000006c72         push       rbp
0000000000006c73         mov        rbp, rdi
0000000000006c76         push       rbx
0000000000006c77         sub        rsp, 0x60
0000000000006c7b         mov        r12, qword [rdi+0x28]
0000000000006c7f         mov        rax, qword [fs:0x28]
0000000000006c88         mov        qword [rsp+0x78+var_20], rax
0000000000006c8d         xor        eax, eax
0000000000006c8f         cmp        byte [r12+0x10], 0x0
0000000000006c95         jne        loc_6ce8

0000000000006c97         test       rsi, rsi
0000000000006c9a         js         loc_6e18

0000000000006ca0         pxor       xmm0, xmm0
0000000000006ca4         cvtsi2ss   xmm0, rsi

                     loc_6ca9:
0000000000006ca9         divss      xmm0, dword [r12+8]                         ; CODE XREF=hash_rehash+449
0000000000006cb0         ucomiss    xmm0, dword [dword_1002c]                   ; dword_1002c
0000000000006cb7         jae        loc_6df0

0000000000006cbd         ucomiss    xmm0, dword [float_10030]                   ; float_10030
0000000000006cc4         jb         loc_6e40

0000000000006cca         subss      xmm0, dword [float_10030]                   ; float_10030
0000000000006cd2         movabs     rax, 0x8000000000000000
0000000000006cdc         cvttss2si  rsi, xmm0
0000000000006ce1         xor        rsi, rax
0000000000006ce4         nop        dword [rax]

                     loc_6ce8:
0000000000006ce8         mov        rdi, rsi                                    ; CODE XREF=hash_rehash+37, hash_rehash+469
0000000000006ceb         call       next_prime                                  ; next_prime
0000000000006cf0         mov        edx, 0x8
0000000000006cf5         mov        rbx, rax
0000000000006cf8         xor        ecx, ecx
0000000000006cfa         mov        rax, rdx
0000000000006cfd         mul        rbx
0000000000006d00         jo         loc_6e9f

                     loc_6d06:
0000000000006d06         test       rax, rax                                    ; CODE XREF=hash_rehash+564
0000000000006d09         mov        eax, 0x1
0000000000006d0e         cmovs      rcx, rax
0000000000006d12         test       rbx, rbx
0000000000006d15         je         loc_6df0

0000000000006d1b         and        ecx, 0x1
0000000000006d1e         jne        loc_6df0

0000000000006d24         cmp        qword [rbp+0x10], rbx
0000000000006d28         je         loc_6e50

0000000000006d2e         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
0000000000006d33         mov        rdi, rbx                                    ; argument "__nmemb" for method j_calloc
0000000000006d36         call       j_calloc                                    ; calloc
0000000000006d3b         test       rax, rax
0000000000006d3e         mov        qword [rsp+0x78+var_78], rax
0000000000006d42         je         loc_6df0

0000000000006d48         mov        qword [rsp+0x78+var_68], rbx
0000000000006d4d         shl        rbx, 0x4
0000000000006d51         mov        qword [rsp+0x78+var_50], r12
0000000000006d56         add        rbx, rax
0000000000006d59         mov        rax, qword [rbp+0x30]
0000000000006d5d         mov        r12, rsp
0000000000006d60         xor        edx, edx
0000000000006d62         mov        rsi, rbp
0000000000006d65         mov        rdi, r12
0000000000006d68         mov        qword [rsp+0x78+var_70], rbx
0000000000006d6d         mov        qword [rsp+0x78+var_60], 0x0
0000000000006d76         mov        qword [rsp+0x78+var_48], rax
0000000000006d7b         mov        rax, qword [rbp+0x38]
0000000000006d7f         mov        qword [rsp+0x78+var_58], 0x0
0000000000006d88         mov        qword [rsp+0x78+var_40], rax
0000000000006d8d         mov        rax, qword [rbp+0x40]
0000000000006d91         mov        qword [rsp+0x78+var_38], rax
0000000000006d96         mov        rax, qword [rbp+0x48]
0000000000006d9a         mov        qword [rsp+0x78+var_30], rax
0000000000006d9f         call       transfer_entries                            ; transfer_entries
0000000000006da4         test       al, al
0000000000006da6         mov        ebx, eax
0000000000006da8         jne        loc_6e60

0000000000006dae         mov        rax, qword [rsp+0x78+var_30]
0000000000006db3         mov        edx, 0x1
0000000000006db8         mov        rsi, r12
0000000000006dbb         mov        rdi, rbp
0000000000006dbe         mov        qword [rbp+0x48], rax
0000000000006dc2         call       transfer_entries                            ; transfer_entries
0000000000006dc7         test       al, al
0000000000006dc9         je         loc_6ea9

0000000000006dcf         xor        edx, edx
0000000000006dd1         mov        rsi, r12
0000000000006dd4         mov        rdi, rbp
0000000000006dd7         call       transfer_entries                            ; transfer_entries
0000000000006ddc         test       al, al
0000000000006dde         je         loc_6ea9

0000000000006de4         mov        rdi, qword [rsp+0x78+var_78]                ; argument "__ptr" for method j_free
0000000000006de8         call       j_free                                      ; free
0000000000006ded         jmp        loc_6df2
0000000000006def         align      16

                     loc_6df0:
0000000000006df0         xor        ebx, ebx                                    ; CODE XREF=hash_rehash+71, hash_rehash+165, hash_rehash+174, hash_rehash+210

                     loc_6df2:
0000000000006df2         mov        rcx, qword [rsp+0x78+var_20]                ; CODE XREF=hash_rehash+381, hash_rehash+485, hash_rehash+549
0000000000006df7         xor        rcx, qword [fs:0x28]
0000000000006e00         mov        eax, ebx
0000000000006e02         jne        loc_6e9a

0000000000006e08         add        rsp, 0x60
0000000000006e0c         pop        rbx
0000000000006e0d         pop        rbp
0000000000006e0e         pop        r12
0000000000006e10         ret
                        ; endp
0000000000006e11         align      8

                     loc_6e18:
0000000000006e18         mov        rax, rsi                                    ; CODE XREF=hash_rehash+42
0000000000006e1b         pxor       xmm0, xmm0
0000000000006e1f         shr        rax, 0x1
0000000000006e22         and        esi, 0x1
0000000000006e25         or         rax, rsi
0000000000006e28         cvtsi2ss   xmm0, rax
0000000000006e2d         addss      xmm0, xmm0
0000000000006e31         jmp        loc_6ca9
0000000000006e36         align      64

                     loc_6e40:
0000000000006e40         cvttss2si  rsi, xmm0                                   ; CODE XREF=hash_rehash+84
0000000000006e45         jmp        loc_6ce8
0000000000006e4a         align      16

                     loc_6e50:
0000000000006e50         mov        ebx, 0x1                                    ; CODE XREF=hash_rehash+184
0000000000006e55         jmp        loc_6df2
0000000000006e57         align      32

                     loc_6e60:
0000000000006e60         mov        rdi, qword [rbp]                            ; argument "__ptr" for method j_free, CODE XREF=hash_rehash+312
0000000000006e64         call       j_free                                      ; free
0000000000006e69         mov        rax, qword [rsp+0x78+var_78]
0000000000006e6d         mov        qword [rbp], rax
0000000000006e71         mov        rax, qword [rsp+0x78+var_70]
0000000000006e76         mov        qword [rbp+8], rax
0000000000006e7a         mov        rax, qword [rsp+0x78+var_68]
0000000000006e7f         mov        qword [rbp+0x10], rax
0000000000006e83         mov        rax, qword [rsp+0x78+var_60]
0000000000006e88         mov        qword [rbp+0x18], rax
0000000000006e8c         mov        rax, qword [rsp+0x78+var_30]
0000000000006e91         mov        qword [rbp+0x48], rax
0000000000006e95         jmp        loc_6df2

                     loc_6e9a:
0000000000006e9a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_rehash+402
                        ; endp

                     loc_6e9f:
0000000000006e9f         mov        ecx, 0x1                                    ; CODE XREF=hash_rehash+144
0000000000006ea4         jmp        loc_6d06

                     loc_6ea9:
0000000000006ea9         call       j_abort                                     ; abort, CODE XREF=hash_rehash+345, hash_rehash+366
                        ; endp
0000000000006eae         align      16                                          ; End of unwind block (FDE at 0x11d8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     hash_insert_if_absent:
0000000000006eb0         push       r13                                         ; Begin of unwind block (FDE at 0x11dc4), CODE XREF=hash_insert+27
0000000000006eb2         push       r12
0000000000006eb4         push       rbp
0000000000006eb5         push       rbx
0000000000006eb6         sub        rsp, 0x18
0000000000006eba         mov        rax, qword [fs:0x28]
0000000000006ec3         mov        qword [rsp+0x38+var_30], rax
0000000000006ec8         xor        eax, eax
0000000000006eca         test       rsi, rsi
0000000000006ecd         je         loc_708d

0000000000006ed3         mov        r12, rsp
0000000000006ed6         xor        ecx, ecx
0000000000006ed8         mov        r13, rdx
0000000000006edb         mov        rdx, r12
0000000000006ede         mov        rbx, rdi
0000000000006ee1         mov        rbp, rsi
0000000000006ee4         call       hash_find_entry                             ; hash_find_entry
0000000000006ee9         test       rax, rax
0000000000006eec         mov        rdx, rax
0000000000006eef         je         loc_6f20

0000000000006ef1         xor        eax, eax
0000000000006ef3         test       r13, r13
0000000000006ef6         je         loc_6efc

0000000000006ef8         mov        qword [r13], rdx

                     loc_6efc:
0000000000006efc         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=hash_insert_if_absent+70, hash_insert_if_absent+233, hash_insert_if_absent+507, hash_insert_if_absent+536
0000000000006f01         xor        rcx, qword [fs:0x28]
0000000000006f0a         jne        loc_712f

0000000000006f10         add        rsp, 0x18
0000000000006f14         pop        rbx
0000000000006f15         pop        rbp
0000000000006f16         pop        r12
0000000000006f18         pop        r13
0000000000006f1a         ret
                        ; endp
0000000000006f1b         align      32

                     loc_6f20:
0000000000006f20         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+63
0000000000006f24         test       rax, rax
0000000000006f27         js         loc_6fa0

0000000000006f29         pxor       xmm1, xmm1
0000000000006f2d         mov        rdx, qword [rbx+0x28]
0000000000006f31         cvtsi2ss   xmm1, rax
0000000000006f36         mov        rax, qword [rbx+0x10]
0000000000006f3a         test       rax, rax
0000000000006f3d         js         loc_6fca

                     loc_6f43:
0000000000006f43         pxor       xmm0, xmm0                                  ; CODE XREF=hash_insert_if_absent+276
0000000000006f47         cvtsi2ss   xmm0, rax

                     loc_6f4c:
0000000000006f4c         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_insert_if_absent+307
0000000000006f51         ucomiss    xmm1, xmm0
0000000000006f54         ja         loc_6ff0

                     loc_6f5a:
0000000000006f5a         mov        r12, qword [rsp+0x38+var_38]                ; CODE XREF=hash_insert_if_absent+392, hash_insert_if_absent+471
0000000000006f5e         cmp        qword [r12], 0x0
0000000000006f63         je         loc_7098

0000000000006f69         mov        rax, qword [rbx+0x48]
0000000000006f6d         test       rax, rax
0000000000006f70         je         loc_70b0

0000000000006f76         mov        rdx, qword [rax+8]
0000000000006f7a         mov        qword [rbx+0x48], rdx

                     loc_6f7e:
0000000000006f7e         mov        rdx, qword [r12+8]                          ; CODE XREF=hash_insert_if_absent+525
0000000000006f83         mov        qword [rax], rbp
0000000000006f86         mov        qword [rax+8], rdx
0000000000006f8a         mov        qword [r12+8], rax
0000000000006f8f         mov        eax, 0x1
0000000000006f94         add        qword [rbx+0x20], 0x1
0000000000006f99         jmp        loc_6efc
0000000000006f9e         align      32

                     loc_6fa0:
0000000000006fa0         mov        rdx, rax                                    ; CODE XREF=hash_insert_if_absent+119
0000000000006fa3         pxor       xmm1, xmm1
0000000000006fa7         and        eax, 0x1
0000000000006faa         shr        rdx, 0x1
0000000000006fad         or         rdx, rax
0000000000006fb0         mov        rax, qword [rbx+0x10]
0000000000006fb4         cvtsi2ss   xmm1, rdx
0000000000006fb9         mov        rdx, qword [rbx+0x28]
0000000000006fbd         test       rax, rax
0000000000006fc0         addss      xmm1, xmm1
0000000000006fc4         jns        loc_6f43

                     loc_6fca:
0000000000006fca         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+141
0000000000006fcd         pxor       xmm0, xmm0
0000000000006fd1         shr        rcx, 0x1
0000000000006fd4         and        eax, 0x1
0000000000006fd7         or         rcx, rax
0000000000006fda         cvtsi2ss   xmm0, rcx
0000000000006fdf         addss      xmm0, xmm0
0000000000006fe3         jmp        loc_6f4c
0000000000006fe8         align      16

                     loc_6ff0:
0000000000006ff0         lea        rdi, qword [rbx+0x28]                       ; CODE XREF=hash_insert_if_absent+164
0000000000006ff4         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000006ff9         mov        rax, qword [rbx+0x10]
0000000000006ffd         mov        rdx, qword [rbx+0x28]
0000000000007001         test       rax, rax
0000000000007004         movss      xmm2, dword [rdx+8]
0000000000007009         js         loc_70d0

000000000000700f         pxor       xmm0, xmm0
0000000000007013         cvtsi2ss   xmm0, rax

                     loc_7018:
0000000000007018         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+569
000000000000701c         test       rax, rax
000000000000701f         js         loc_70f0

0000000000007025         pxor       xmm1, xmm1
0000000000007029         cvtsi2ss   xmm1, rax

                     loc_702e:
000000000000702e         movaps     xmm3, xmm2                                  ; CODE XREF=hash_insert_if_absent+601
0000000000007031         mulss      xmm3, xmm0
0000000000007035         ucomiss    xmm1, xmm3
0000000000007038         jbe        loc_6f5a

000000000000703e         cmp        byte [rdx+0x10], 0x0
0000000000007042         mulss      xmm0, dword [rdx+0xc]
0000000000007047         jne        loc_704d

0000000000007049         mulss      xmm0, xmm2

                     loc_704d:
000000000000704d         ucomiss    xmm0, dword [dword_1002c]                   ; dword_1002c, CODE XREF=hash_insert_if_absent+407
0000000000007054         jae        loc_70c3

0000000000007056         ucomiss    xmm0, dword [float_10030]                   ; float_10030
000000000000705d         jae        loc_7110

0000000000007063         cvttss2si  rsi, xmm0

                     loc_7068:
0000000000007068         mov        rdi, rbx                                    ; CODE XREF=hash_insert_if_absent+634
000000000000706b         call       hash_rehash                                 ; hash_rehash
0000000000007070         test       al, al
0000000000007072         je         loc_70c3

0000000000007074         xor        ecx, ecx
0000000000007076         mov        rdx, r12
0000000000007079         mov        rsi, rbp
000000000000707c         mov        rdi, rbx
000000000000707f         call       hash_find_entry                             ; hash_find_entry
0000000000007084         test       rax, rax
0000000000007087         je         loc_6f5a

                     loc_708d:
000000000000708d         call       j_abort                                     ; abort, CODE XREF=hash_insert_if_absent+29
                        ; endp
0000000000007092         align      8

                     loc_7098:
0000000000007098         mov        qword [r12], rbp                            ; CODE XREF=hash_insert_if_absent+179
000000000000709c         mov        eax, 0x1
00000000000070a1         add        qword [rbx+0x20], 0x1
00000000000070a6         add        qword [rbx+0x18], 0x1
00000000000070ab         jmp        loc_6efc

                     loc_70b0:
00000000000070b0         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=hash_insert_if_absent+192
00000000000070b5         call       j_malloc                                    ; malloc
00000000000070ba         test       rax, rax
00000000000070bd         jne        loc_6f7e

                     loc_70c3:
00000000000070c3         mov        eax, 0xffffffff                             ; CODE XREF=hash_insert_if_absent+420, hash_insert_if_absent+450
00000000000070c8         jmp        loc_6efc
00000000000070cd         align      16

                     loc_70d0:
00000000000070d0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+345
00000000000070d3         pxor       xmm0, xmm0
00000000000070d7         shr        rcx, 0x1
00000000000070da         and        eax, 0x1
00000000000070dd         or         rcx, rax
00000000000070e0         cvtsi2ss   xmm0, rcx
00000000000070e5         addss      xmm0, xmm0
00000000000070e9         jmp        loc_7018
00000000000070ee         align      16

                     loc_70f0:
00000000000070f0         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+367
00000000000070f3         pxor       xmm1, xmm1
00000000000070f7         shr        rcx, 0x1
00000000000070fa         and        eax, 0x1
00000000000070fd         or         rcx, rax
0000000000007100         cvtsi2ss   xmm1, rcx
0000000000007105         addss      xmm1, xmm1
0000000000007109         jmp        loc_702e
000000000000710e         align      16

                     loc_7110:
0000000000007110         subss      xmm0, dword [float_10030]                   ; float_10030, CODE XREF=hash_insert_if_absent+429
0000000000007118         movabs     rax, 0x8000000000000000
0000000000007122         cvttss2si  rsi, xmm0
0000000000007127         xor        rsi, rax
000000000000712a         jmp        loc_7068

                     loc_712f:
000000000000712f         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert_if_absent+90
                        ; endp
0000000000007134         align      64                                          ; End of unwind block (FDE at 0x11dc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     hash_insert:
0000000000007140         push       rbx                                         ; Begin of unwind block (FDE at 0x11e00), CODE XREF=main+4245, record_file+70
0000000000007141         mov        rbx, rsi
0000000000007144         sub        rsp, 0x10
0000000000007148         mov        rdx, rsp
000000000000714b         mov        rax, qword [fs:0x28]
0000000000007154         mov        qword [rsp+0x18+var_10], rax
0000000000007159         xor        eax, eax
000000000000715b         call       hash_insert_if_absent                       ; hash_insert_if_absent
0000000000007160         cmp        eax, 0xffffffff
0000000000007163         je         loc_7190

0000000000007165         test       eax, eax
0000000000007167         jne        loc_716d

0000000000007169         mov        rbx, qword [rsp+0x18+var_18]

                     loc_716d:
000000000000716d         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=hash_insert+39, hash_insert+82
0000000000007172         xor        rcx, qword [fs:0x28]
000000000000717b         mov        rax, rbx
000000000000717e         jne        loc_7194

0000000000007180         add        rsp, 0x10
0000000000007184         pop        rbx
0000000000007185         ret
                        ; endp
0000000000007186         align      16

                     loc_7190:
0000000000007190         xor        ebx, ebx                                    ; CODE XREF=hash_insert+35
0000000000007192         jmp        loc_716d

                     loc_7194:
0000000000007194         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert+62
                        ; endp
0000000000007199         align      32                                          ; End of unwind block (FDE at 0x11e00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     hash_delete:
00000000000071a0         push       r12                                         ; Begin of unwind block (FDE at 0x11e24)
00000000000071a2         push       rbp
00000000000071a3         mov        ecx, 0x1
00000000000071a8         push       rbx
00000000000071a9         mov        rbx, rdi
00000000000071ac         sub        rsp, 0x10
00000000000071b0         mov        rdx, rsp
00000000000071b3         mov        rax, qword [fs:0x28]
00000000000071bc         mov        qword [rsp+0x28+var_20], rax
00000000000071c1         xor        eax, eax
00000000000071c3         call       hash_find_entry                             ; hash_find_entry
00000000000071c8         test       rax, rax
00000000000071cb         mov        rbp, rax
00000000000071ce         je         loc_71df

00000000000071d0         mov        rax, qword [rsp+0x28+var_28]
00000000000071d4         sub        qword [rbx+0x20], 0x1
00000000000071d9         cmp        qword [rax], 0x0
00000000000071dd         je         loc_7200

                     loc_71df:
00000000000071df         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=hash_delete+46, hash_delete+159, hash_delete+229, hash_delete+278, hash_delete+321
00000000000071e4         xor        rcx, qword [fs:0x28]
00000000000071ed         mov        rax, rbp
00000000000071f0         jne        loc_739e

00000000000071f6         add        rsp, 0x10
00000000000071fa         pop        rbx
00000000000071fb         pop        rbp
00000000000071fc         pop        r12
00000000000071fe         ret
                        ; endp
00000000000071ff         align      512

                     loc_7200:
0000000000007200         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+61
0000000000007204         sub        rax, 0x1
0000000000007208         test       rax, rax
000000000000720b         mov        qword [rbx+0x18], rax
000000000000720f         js         loc_7310

0000000000007215         pxor       xmm0, xmm0
0000000000007219         cvtsi2ss   xmm0, rax

                     loc_721e:
000000000000721e         mov        rax, qword [rbx+0x10]                       ; CODE XREF=hash_delete+393
0000000000007222         mov        rdx, qword [rbx+0x28]
0000000000007226         test       rax, rax
0000000000007229         js         loc_72f0

000000000000722f         pxor       xmm1, xmm1
0000000000007233         cvtsi2ss   xmm1, rax

                     loc_7238:
0000000000007238         mulss      xmm1, dword [rdx]                           ; CODE XREF=hash_delete+361
000000000000723c         ucomiss    xmm1, xmm0
000000000000723f         jbe        loc_71df

0000000000007241         lea        rdi, qword [rbx+0x28]
0000000000007245         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000724a         mov        rax, qword [rbx+0x10]
000000000000724e         mov        rdx, qword [rbx+0x28]
0000000000007252         test       rax, rax
0000000000007255         js         loc_7380

000000000000725b         pxor       xmm0, xmm0
000000000000725f         cvtsi2ss   xmm0, rax

                     loc_7264:
0000000000007264         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+505
0000000000007268         test       rax, rax
000000000000726b         js         loc_7360

0000000000007271         pxor       xmm1, xmm1
0000000000007275         cvtsi2ss   xmm1, rax

                     loc_727a:
000000000000727a         movss      xmm2, dword [rdx]                           ; CODE XREF=hash_delete+473
000000000000727e         mulss      xmm2, xmm0
0000000000007282         ucomiss    xmm2, xmm1
0000000000007285         jbe        loc_71df

000000000000728b         cmp        byte [rdx+0x10], 0x0
000000000000728f         mulss      xmm0, dword [rdx+4]
0000000000007294         je         loc_7350

                     loc_729a:
000000000000729a         ucomiss    xmm0, dword [float_10030]                   ; float_10030, CODE XREF=hash_delete+437
00000000000072a1         jae        loc_7330

00000000000072a7         cvttss2si  rsi, xmm0

                     loc_72ac:
00000000000072ac         mov        rdi, rbx                                    ; CODE XREF=hash_delete+426
00000000000072af         call       hash_rehash                                 ; hash_rehash
00000000000072b4         test       al, al
00000000000072b6         jne        loc_71df

00000000000072bc         mov        rdi, qword [rbx+0x48]
00000000000072c0         test       rdi, rdi
00000000000072c3         je         loc_72d9

00000000000072c5         nop        dword [rax]

                     loc_72c8:
00000000000072c8         mov        r12, qword [rdi+8]                          ; CODE XREF=hash_delete+311
00000000000072cc         call       j_free                                      ; free
00000000000072d1         test       r12, r12
00000000000072d4         mov        rdi, r12
00000000000072d7         jne        loc_72c8

                     loc_72d9:
00000000000072d9         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=hash_delete+291
00000000000072e1         jmp        loc_71df
00000000000072e6         align      16

                     loc_72f0:
00000000000072f0         mov        rcx, rax                                    ; CODE XREF=hash_delete+137
00000000000072f3         pxor       xmm1, xmm1
00000000000072f7         shr        rcx, 0x1
00000000000072fa         and        eax, 0x1
00000000000072fd         or         rcx, rax
0000000000007300         cvtsi2ss   xmm1, rcx
0000000000007305         addss      xmm1, xmm1
0000000000007309         jmp        loc_7238
000000000000730e         align      16

                     loc_7310:
0000000000007310         mov        rdx, rax                                    ; CODE XREF=hash_delete+111
0000000000007313         pxor       xmm0, xmm0
0000000000007317         shr        rdx, 0x1
000000000000731a         and        eax, 0x1
000000000000731d         or         rdx, rax
0000000000007320         cvtsi2ss   xmm0, rdx
0000000000007325         addss      xmm0, xmm0
0000000000007329         jmp        loc_721e
000000000000732e         align      16

                     loc_7330:
0000000000007330         subss      xmm0, dword [float_10030]                   ; float_10030, CODE XREF=hash_delete+257
0000000000007338         movabs     rax, 0x8000000000000000
0000000000007342         cvttss2si  rsi, xmm0
0000000000007347         xor        rsi, rax
000000000000734a         jmp        loc_72ac
000000000000734f         align      16

                     loc_7350:
0000000000007350         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_delete+244
0000000000007355         jmp        loc_729a
000000000000735a         align      32

                     loc_7360:
0000000000007360         mov        rcx, rax                                    ; CODE XREF=hash_delete+203
0000000000007363         pxor       xmm1, xmm1
0000000000007367         shr        rcx, 0x1
000000000000736a         and        eax, 0x1
000000000000736d         or         rcx, rax
0000000000007370         cvtsi2ss   xmm1, rcx
0000000000007375         addss      xmm1, xmm1
0000000000007379         jmp        loc_727a
000000000000737e         align      128

                     loc_7380:
0000000000007380         mov        rcx, rax                                    ; CODE XREF=hash_delete+181
0000000000007383         pxor       xmm0, xmm0
0000000000007387         shr        rcx, 0x1
000000000000738a         and        eax, 0x1
000000000000738d         or         rcx, rax
0000000000007390         cvtsi2ss   xmm0, rcx
0000000000007395         addss      xmm0, xmm0
0000000000007399         jmp        loc_7264

                     loc_739e:
000000000000739e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_delete+80
                        ; endp
00000000000073a3         align      16                                          ; End of unwind block (FDE at 0x11e24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_hash:
00000000000073b0         push       rbp                                         ; Begin of unwind block (FDE at 0x11e5c), DATA XREF=canonicalize_filename_mode+1270
00000000000073b1         push       rbx
00000000000073b2         mov        rbp, rdi
00000000000073b5         mov        rbx, rsi
00000000000073b8         sub        rsp, 0x8
00000000000073bc         mov        rdi, qword [rdi]
00000000000073bf         call       hash_pjw                                    ; hash_pjw
00000000000073c4         xor        rax, qword [rbp+8]
00000000000073c8         xor        edx, edx
00000000000073ca         add        rsp, 0x8
00000000000073ce         div        rbx
00000000000073d1         pop        rbx
00000000000073d2         pop        rbp
00000000000073d3         mov        rax, rdx
00000000000073d6         ret
                        ; endp
00000000000073d7         align      32                                          ; End of unwind block (FDE at 0x11e5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_hash_no_name:
00000000000073e0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0x11e84)
00000000000073e4         xor        edx, edx
00000000000073e6         div        rsi
00000000000073e9         mov        rax, rdx
00000000000073ec         ret
                        ; endp
00000000000073ed         align      16                                          ; End of unwind block (FDE at 0x11e84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_compare:
00000000000073f0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x11e98)
00000000000073f2         mov        rdx, qword [rsi+8]
00000000000073f6         cmp        qword [rdi+8], rdx
00000000000073fa         je         loc_7400

                     loc_73fc:
00000000000073fc         ret                                                    ; CODE XREF=triple_compare+24
                        ; endp
00000000000073fe         align      1024

                     loc_7400:
0000000000007400         mov        rcx, qword [rsi+0x10]                       ; CODE XREF=triple_compare+10
0000000000007404         cmp        qword [rdi+0x10], rcx
0000000000007408         jne        loc_73fc

000000000000740a         sub        rsp, 0x8
000000000000740e         mov        rsi, qword [rsi]
0000000000007411         mov        rdi, qword [rdi]
0000000000007414         call       same_name                                   ; same_name
0000000000007419         add        rsp, 0x8
000000000000741d         ret
                        ; endp
000000000000741e         align      32                                          ; End of unwind block (FDE at 0x11e98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_compare_ino_str:
0000000000007420         xor        eax, eax                                    ; Begin of unwind block (FDE at 0x11eb0), DATA XREF=canonicalize_filename_mode+1261
0000000000007422         mov        rdx, qword [rsi+8]
0000000000007426         cmp        qword [rdi+8], rdx
000000000000742a         je         loc_7430

                     loc_742c:
000000000000742c         ret                                                    ; CODE XREF=triple_compare_ino_str+24
                        ; endp
000000000000742e         align      16

                     loc_7430:
0000000000007430         mov        rcx, qword [rsi+0x10]                       ; CODE XREF=triple_compare_ino_str+10
0000000000007434         cmp        qword [rdi+0x10], rcx
0000000000007438         jne        loc_742c

000000000000743a         sub        rsp, 0x8
000000000000743e         mov        rsi, qword [rsi]                            ; argument "__s2" for method j_strcmp
0000000000007441         mov        rdi, qword [rdi]                            ; argument "__s1" for method j_strcmp
0000000000007444         call       j_strcmp                                    ; strcmp
0000000000007449         test       eax, eax
000000000000744b         sete       al
000000000000744e         add        rsp, 0x8
0000000000007452         ret
                        ; endp
0000000000007453         align      32                                          ; End of unwind block (FDE at 0x11eb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     triple_free:
0000000000007460         push       rbx                                         ; Begin of unwind block (FDE at 0x11ec8), CODE XREF=record_file+98, DATA XREF=canonicalize_filename_mode+1254
0000000000007461         mov        rbx, rdi
0000000000007464         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
0000000000007467         call       j_free                                      ; free
000000000000746c         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
000000000000746f         pop        rbx
0000000000007470         jmp        j_free                                      ; free
                        ; endp
0000000000007475         align      128                                         ; End of unwind block (FDE at 0x11ec8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_A: int16_t, -10
        ;    var_C: int16_t, -12
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32


                     adjust_value.part.0:
0000000000007480         fld        dword [float_10030]                         ; Begin of unwind block (FDE at 0x11ee4), float_10030, CODE XREF=human_readable+1400, human_readable+1434, human_readable+1960
0000000000007486         fld        tword [rsp+arg_0]
000000000000748a         fucomi     st1
000000000000748c         jae        loc_7500

000000000000748e         fstp       st1
0000000000007490         fnstcw     word [rsp+var_A]
0000000000007494         movzx      eax, word [rsp+var_A]
0000000000007499         or         ah, 0xc
000000000000749c         mov        word [rsp+var_C], ax
00000000000074a1         fld        st0
00000000000074a3         fldcw      word [rsp+var_C]
00000000000074a7         fistp      qword [rsp+var_18]
00000000000074ab         fldcw      word [rsp+var_A]
00000000000074af         mov        rax, qword [rsp+var_18]

                     loc_74b4:
00000000000074b4         mov        qword [rsp+var_20], rax                     ; CODE XREF=adjust_value.part.0+179
00000000000074b9         test       rax, rax
00000000000074bc         fild       qword [rsp+var_20]
00000000000074c0         jns        loc_74c8

00000000000074c2         fadd       dword [dword_1002c]                         ; dword_1002c

                     loc_74c8:
00000000000074c8         test       edi, edi                                    ; CODE XREF=adjust_value.part.0+64
00000000000074ca         jne        loc_74f8

00000000000074cc         fxch       st1
00000000000074ce         fucomip    st1
00000000000074d0         jp         loc_74d8

00000000000074d2         je         loc_74fa

00000000000074d4         fstp       st0
00000000000074d6         jmp        loc_74e0

                     loc_74d8:
00000000000074d8         fstp       st0                                         ; CODE XREF=adjust_value.part.0+80
00000000000074da         nop        word [rax+rax]

                     loc_74e0:
00000000000074e0         add        rax, 0x1                                    ; CODE XREF=adjust_value.part.0+86
00000000000074e4         mov        qword [rsp+var_20], rax
00000000000074e9         test       rax, rax
00000000000074ec         fild       qword [rsp+var_20]
00000000000074f0         js         loc_7540

00000000000074f2         jmp        loc_74fa
00000000000074f4         align      8

                     loc_74f8:
00000000000074f8         fstp       st1                                         ; CODE XREF=adjust_value.part.0+74

                     loc_74fa:
00000000000074fa         ret                                                    ; CODE XREF=adjust_value.part.0+82, adjust_value.part.0+114
                        ; endp
00000000000074fc         align      256

                     loc_7500:
0000000000007500         fnstcw     word [rsp+var_A]                            ; CODE XREF=adjust_value.part.0+12
0000000000007504         movzx      eax, word [rsp+var_A]
0000000000007509         fsubr      st1, st0
000000000000750b         fxch       st1
000000000000750d         movabs     rdx, 0x8000000000000000
0000000000007517         or         ah, 0xc
000000000000751a         mov        word [rsp+var_C], ax
000000000000751f         fldcw      word [rsp+var_C]
0000000000007523         fistp      qword [rsp+var_18]
0000000000007527         fldcw      word [rsp+var_A]
000000000000752b         mov        rax, qword [rsp+var_18]
0000000000007530         xor        rax, rdx
0000000000007533         jmp        loc_74b4
0000000000007538         align      64

                     loc_7540:
0000000000007540         fadd       dword [dword_1002c]                         ; dword_1002c, CODE XREF=adjust_value.part.0+112
0000000000007546         ret
                        ; endp
0000000000007547         align      16                                          ; End of unwind block (FDE at 0x11ee4)

                     human_readable:
0000000000007550         push       r15                                         ; Begin of unwind block (FDE at 0x11ef8), CODE XREF=df_readable+37, df_readable+85, get_header+528, sub_4830+41
0000000000007552         push       r14
0000000000007554         mov        eax, edx
0000000000007556         push       r13
0000000000007558         push       r12
000000000000755a         mov        r15d, edx
000000000000755d         push       rbp
000000000000755e         push       rbx
000000000000755f         and        eax, 0x20
0000000000007562         and        r15d, 0x3
0000000000007566         mov        r12d, edx
0000000000007569         mov        rbx, rdi
000000000000756c         sub        rsp, 0x98
0000000000007573         mov        qword [rsp+0xc8+var_B0], rcx
0000000000007578         mov        dword [rsp+0xc8+var_98], eax
000000000000757c         mov        rcx, qword [fs:0x28]
0000000000007585         mov        qword [rsp+0xc8+var_40], rcx
000000000000758d         xor        ecx, ecx
000000000000758f         cmp        eax, 0x1
0000000000007592         mov        qword [rsp+0xc8+var_C8], rsi
0000000000007596         mov        qword [rsp+0xc8+var_B8], r8
000000000000759b         sbb        eax, eax
000000000000759d         and        eax, 0xffffffe8
00000000000075a0         add        eax, 0x400
00000000000075a5         mov        dword [rsp+0xc8+var_94], eax
00000000000075a9         call       j_localeconv                                ; localeconv
00000000000075ae         mov        r14, qword [rax]
00000000000075b1         mov        r13, rax
00000000000075b4         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000075b7         call       j_strlen                                    ; strlen
00000000000075bc         mov        rcx, qword [r13+0x10]
00000000000075c0         mov        r13, qword [r13+8]
00000000000075c4         mov        rbp, rax
00000000000075c7         sub        rax, 0x1
00000000000075cb         mov        edx, 0x1
00000000000075d0         cmp        rax, 0x10
00000000000075d4         lea        rax, qword [aCannotChangeTo+31]             ; 0xff0c
00000000000075db         mov        rdi, r13                                    ; argument "__s" for method j_strlen
00000000000075de         cmovae     rbp, rdx
00000000000075e2         mov        qword [rsp+0xc8+var_90], rcx
00000000000075e7         cmovae     r14, rax
00000000000075eb         call       j_strlen                                    ; strlen
00000000000075f0         cmp        rax, 0x11
00000000000075f4         lea        rax, qword [aWrittenBySSAnd+27]             ; 0x10601
00000000000075fb         mov        rdi, qword [rsp+0xc8+var_B8]
0000000000007600         mov        rcx, qword [rsp+0xc8+var_B0]
0000000000007605         cmovae     r13, rax
0000000000007609         mov        rax, qword [rsp+0xc8+var_C8]
000000000000760d         add        rax, 0x287
0000000000007613         cmp        rdi, rcx
0000000000007616         mov        qword [rsp+0xc8+var_C0], rax
000000000000761b         ja         loc_7768

0000000000007621         xor        edx, edx
0000000000007623         mov        rax, rcx
0000000000007626         div        rdi
0000000000007629         test       rdx, rdx
000000000000762c         mov        rdi, rax
000000000000762f         je         loc_7990

                     loc_7635:
0000000000007635         mov        qword [rsp+0xc8+var_B0], rcx                ; CODE XREF=human_readable+539, human_readable+561, human_readable+1106
000000000000763a         test       rcx, rcx
000000000000763d         fild       qword [rsp+0xc8+var_B0]
0000000000007641         jns        loc_7649

0000000000007643         fadd       dword [dword_1002c]                         ; dword_1002c

                     loc_7649:
0000000000007649         mov        rax, qword [rsp+0xc8+var_B8]                ; CODE XREF=human_readable+241
000000000000764e         mov        qword [rsp+0xc8+var_B0], rax
0000000000007653         test       rax, rax
0000000000007656         fild       qword [rsp+0xc8+var_B0]
000000000000765a         jns        loc_7662

000000000000765c         fadd       dword [dword_1002c]                         ; dword_1002c

                     loc_7662:
0000000000007662         fdivp      st1                                         ; CODE XREF=human_readable+266
0000000000007664         mov        qword [rsp+0xc8+var_B0], rbx
0000000000007669         test       rbx, rbx
000000000000766c         fild       qword [rsp+0xc8+var_B0]
0000000000007670         jns        loc_7678

0000000000007672         fadd       dword [dword_1002c]                         ; dword_1002c

                     loc_7678:
0000000000007678         test       r12b, 0x10                                  ; CODE XREF=human_readable+288
000000000000767c         fmulp      st1
000000000000767e         je         loc_7848

0000000000007684         fild       dword [rsp+0xc8+var_94]
0000000000007688         xor        ebx, ebx
000000000000768a         fld        st0
000000000000768c         jmp        loc_7694
000000000000768e         align      16

                     loc_7690:
0000000000007690         fstp       st1                                         ; CODE XREF=human_readable+340
0000000000007692         fxch       st2

                     loc_7694:
0000000000007694         fld        st0                                         ; CODE XREF=human_readable+316
0000000000007696         add        ebx, 0x1
0000000000007699         fmul       st2
000000000000769b         fxch       st3
000000000000769d         fucomi     st3
000000000000769f         jb         loc_76b0

00000000000076a1         cmp        ebx, 0x8
00000000000076a4         jne        loc_7690

00000000000076a6         fstp       st2
00000000000076a8         fstp       st2
00000000000076aa         jmp        loc_76b4
00000000000076ac         align      16

                     loc_76b0:
00000000000076b0         fstp       st2                                         ; CODE XREF=human_readable+335
00000000000076b2         fstp       st2

                     loc_76b4:
00000000000076b4         mov        ecx, dword [rsp+0xc8+var_98]                ; CODE XREF=human_readable+346
00000000000076b8         add        rbp, 0x1
00000000000076bc         xor        eax, eax
00000000000076be         fdivrp     st1
00000000000076c0         test       ecx, ecx
00000000000076c2         sete       al
00000000000076c5         cmp        r15d, 0x1
00000000000076c9         lea        rax, qword [rbp+rax+1]
00000000000076ce         mov        qword [rsp+0xc8+var_B0], rax
00000000000076d3         je         loc_7c40

00000000000076d9         fld        tword [dword_10074+12]                      ; 0x10080
00000000000076df         fucomip    st1
00000000000076e1         ja         loc_7ab8

00000000000076e7         fld        st0

                     loc_76e9:
00000000000076e9         fstp       tword [rsp+0xc8+var_A8]                     ; CODE XREF=human_readable+1411
00000000000076ed         sub        rsp, 0x10
00000000000076f1         lea        rcx, qword [a1lf]                           ; "%.1Lf"
00000000000076f8         mov        esi, 0x1
00000000000076fd         mov        rdx, 0xffffffffffffffff
0000000000007704         xor        eax, eax
0000000000007706         mov        r14, qword [rsp+0xd8+var_C8]
000000000000770b         mov        rdi, r14
000000000000770e         fstp       tword [rsp+0xd8+var_D8]
0000000000007711         call       j___sprintf_chk                             ; __sprintf_chk
0000000000007716         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000007719         call       j_strlen                                    ; strlen
000000000000771e         pop        rcx
000000000000771f         pop        rsi
0000000000007720         cmp        rax, qword [rsp+0xc8+var_B0]
0000000000007725         mov        r14, rax
0000000000007728         fld        tword [rsp+0xc8+var_A8]
000000000000772c         ja         loc_7cd8

                     loc_7732:
0000000000007732         test       r12b, 0x8                                   ; CODE XREF=human_readable+1845
0000000000007736         je         loc_78a0

000000000000773c         mov        rax, qword [rsp+0xc8+var_C8]
0000000000007740         cmp        byte [rax+r14-1], 0x30
0000000000007746         jne        loc_78a8

000000000000774c         fld        dword [dword_10074]                         ; dword_10074
0000000000007752         cmp        r15d, 0x1
0000000000007756         fmul       st1, st0
0000000000007758         jne        loc_7ce0

000000000000775e         jmp        loc_7c93
0000000000007763         align      8

                     loc_7768:
0000000000007768         test       rcx, rcx                                    ; CODE XREF=human_readable+203
000000000000776b         je         loc_7635

0000000000007771         mov        rax, qword [rsp+0xc8+var_B8]
0000000000007776         xor        edx, edx
0000000000007778         div        rcx
000000000000777b         test       rdx, rdx
000000000000777e         mov        r8, rax
0000000000007781         jne        loc_7635

0000000000007787         mov        rax, rbx
000000000000778a         xor        edx, edx
000000000000778c         div        r8
000000000000778f         mov        rbx, rax
0000000000007792         lea        rax, qword [rdx+rdx*4]
0000000000007796         xor        edx, edx
0000000000007798         mov        rsi, rbx
000000000000779b         add        rax, rax
000000000000779e         div        r8
00000000000077a1         add        rdx, rdx
00000000000077a4         mov        r9d, eax
00000000000077a7         cmp        r8, rdx
00000000000077aa         jbe        loc_7d38

00000000000077b0         xor        edi, edi
00000000000077b2         test       rdx, rdx
00000000000077b5         setne      dil

                     loc_77b9:
00000000000077b9         mov        ecx, r12d                                   ; CODE XREF=human_readable+1117, human_readable+2035
00000000000077bc         mov        r8, qword [rsp+0xc8+var_C0]
00000000000077c1         mov        ebx, 0xffffffff
00000000000077c6         and        ecx, 0x10
00000000000077c9         je         loc_7b90

00000000000077cf         mov        r8d, dword [rsp+0xc8+var_94]
00000000000077d4         cmp        r8, rsi
00000000000077d7         mov        r11, r8
00000000000077da         ja         loc_7d50

00000000000077e0         xor        ebx, ebx
00000000000077e2         jmp        loc_7807
00000000000077e4         align      8

                     loc_77e8:
00000000000077e8         test       edi, edi                                    ; CODE XREF=human_readable+736
00000000000077ea         setne      dil
00000000000077ee         movzx      edi, dil

                     loc_77f2:
00000000000077f2         add        ebx, 0x1                                    ; CODE XREF=human_readable+752
00000000000077f5         cmp        r8, r10
00000000000077f8         ja         loc_7b0d

00000000000077fe         cmp        ebx, 0x8
0000000000007801         je         loc_7da8

                     loc_7807:
0000000000007807         mov        rax, rsi                                    ; CODE XREF=human_readable+658
000000000000780a         xor        edx, edx
000000000000780c         mov        esi, edi
000000000000780e         div        r8
0000000000007811         sar        esi, 0x1
0000000000007813         mov        r10, rax
0000000000007816         lea        eax, dword [rdx+rdx*4]
0000000000007819         xor        edx, edx
000000000000781b         lea        eax, dword [r9+rax*2]
000000000000781f         div        r11d
0000000000007822         lea        edx, dword [rsi+rdx*2]
0000000000007825         mov        r9d, eax
0000000000007828         mov        rsi, r10
000000000000782b         add        edi, edx
000000000000782d         cmp        r11d, edx
0000000000007830         ja         loc_77e8

0000000000007832         cmp        r11d, edi
0000000000007835         setb       dil
0000000000007839         movzx      edi, dil
000000000000783d         add        edi, 0x2
0000000000007840         jmp        loc_77f2
0000000000007842         align      8

                     loc_7848:
0000000000007848         cmp        r15d, 0x1                                   ; CODE XREF=human_readable+302
000000000000784c         je         loc_785c

000000000000784e         fld        tword [dword_10074+12]                      ; 0x10080
0000000000007854         fucomip    st1
0000000000007856         ja         loc_7ae0

                     loc_785c:
000000000000785c         sub        rsp, 0x10                                   ; CODE XREF=human_readable+764, human_readable+1443
0000000000007860         lea        rcx, qword [a0lf]                           ; "%.0Lf"
0000000000007867         mov        esi, 0x1
000000000000786c         mov        rbx, qword [rsp+0xd8+var_C8]
0000000000007871         mov        rdx, 0xffffffffffffffff
0000000000007878         xor        eax, eax
000000000000787a         fstp       tword [rsp+0xd8+var_D8]
000000000000787d         xor        ebp, ebp
000000000000787f         mov        rdi, rbx
0000000000007882         call       j___sprintf_chk                             ; __sprintf_chk
0000000000007887         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000788a         mov        ebx, 0xffffffff
000000000000788f         call       j_strlen                                    ; strlen
0000000000007894         pop        rsi
0000000000007895         pop        rdi
0000000000007896         mov        r14, rax
0000000000007899         jmp        loc_78b0
000000000000789b         align      32

                     loc_78a0:
00000000000078a0         fstp       st0                                         ; CODE XREF=human_readable+486
00000000000078a2         jmp        loc_78b0
00000000000078a4         align      8

                     loc_78a8:
00000000000078a8         fstp       st0                                         ; CODE XREF=human_readable+502
00000000000078aa         nop        word [rax+rax]

                     loc_78b0:
00000000000078b0         mov        r15, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+841, human_readable+850, human_readable+1919
00000000000078b5         mov        rsi, qword [rsp+0xc8+var_C8]                ; argument "__src" for method j_memmove
00000000000078b9         mov        rdx, r14                                    ; argument "__n" for method j_memmove
00000000000078bc         sub        r15, r14
00000000000078bf         sub        r14, rbp
00000000000078c2         mov        rdi, r15                                    ; argument "__dest" for method j_memmove
00000000000078c5         call       j_memmove                                   ; memmove
00000000000078ca         mov        r8, r14
00000000000078cd         add        r8, r15

                     loc_78d0:
00000000000078d0         test       r12b, 0x4                                   ; CODE XREF=human_readable+1702, human_readable+2127
00000000000078d4         jne        loc_79b8

                     loc_78da:
00000000000078da         test       r12b, 0x80                                  ; CODE XREF=human_readable+1343, human_readable+2562
00000000000078de         je         loc_7957

00000000000078e0         cmp        ebx, 0xffffffff
00000000000078e3         je         loc_7c00

                     loc_78e9:
00000000000078e9         mov        eax, r12d                                   ; CODE XREF=human_readable+1748, human_readable+1762, human_readable+2148
00000000000078ec         and        eax, 0x100
00000000000078f1         mov        ecx, eax
00000000000078f3         or         ecx, ebx
00000000000078f5         je         loc_7957

00000000000078f7         and        r12d, 0x40
00000000000078fb         jne        loc_7a98

                     loc_7901:
0000000000007901         test       ebx, ebx                                    ; CODE XREF=human_readable+1375
0000000000007903         je         loc_7f36

0000000000007909         cmp        ebx, 0x1
000000000000790c         jne        loc_791c

000000000000790e         mov        r9d, dword [rsp+0xc8+var_98]
0000000000007913         test       r9d, r9d
0000000000007916         je         loc_7d60

                     loc_791c:
000000000000791c         lea        rcx, qword [power_letter]                   ; power_letter, CODE XREF=human_readable+956
0000000000007923         movsxd     rbx, ebx
0000000000007926         mov        rdi, qword [rsp+0xc8+var_C0]
000000000000792b         test       eax, eax
000000000000792d         movzx      ecx, byte [rcx+rbx]
0000000000007931         lea        rdx, qword [rdi+1]
0000000000007935         mov        byte [rdi], cl
0000000000007937         je         loc_7d74

000000000000793d         mov        r8d, dword [rsp+0xc8+var_98]
0000000000007942         test       r8d, r8d
0000000000007945         jne        loc_7b00

                     loc_794b:
000000000000794b         lea        rax, qword [rdx+1]                          ; CODE XREF=human_readable+1464, human_readable+2078, human_readable+2541
000000000000794f         mov        byte [rdx], 0x42
0000000000007952         mov        qword [rsp+0xc8+var_C0], rax

                     loc_7957:
0000000000007957         mov        rax, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+910, human_readable+933, human_readable+2089, human_readable+2547
000000000000795c         mov        rcx, qword [rsp+0xc8+var_40]
0000000000007964         xor        rcx, qword [fs:0x28]
000000000000796d         mov        byte [rax], 0x0
0000000000007970         mov        rax, r15
0000000000007973         jne        loc_7f0b

0000000000007979         add        rsp, 0x98
0000000000007980         pop        rbx
0000000000007981         pop        rbp
0000000000007982         pop        r12
0000000000007984         pop        r13
0000000000007986         pop        r14
0000000000007988         pop        r15
000000000000798a         ret
                        ; endp
000000000000798b         align      16

                     loc_7990:
0000000000007990         mov        rsi, rbx                                    ; CODE XREF=human_readable+223
0000000000007993         xor        edx, edx
0000000000007995         imul       rsi, rax
0000000000007999         mov        rax, rsi
000000000000799c         div        rdi
000000000000799f         cmp        rax, rbx
00000000000079a2         jne        loc_7635

00000000000079a8         xor        edi, edi
00000000000079aa         xor        r9d, r9d
00000000000079ad         jmp        loc_77b9
00000000000079b2         align      8

                     loc_79b8:
00000000000079b8         mov        r14, r8                                     ; CODE XREF=human_readable+900
00000000000079bb         mov        rdi, r13                                    ; argument "__s" for method j_strlen
00000000000079be         mov        qword [rsp+0xc8+var_80], r8
00000000000079c3         sub        r14, r15
00000000000079c6         mov        rbp, 0xffffffffffffffff
00000000000079cd         call       j_strlen                                    ; strlen
00000000000079d2         lea        rdi, qword [rsp+0xc8+var_78]
00000000000079d7         mov        ecx, 0x29
00000000000079dc         mov        rdx, r14
00000000000079df         mov        rsi, r15
00000000000079e2         mov        qword [rsp+0xc8+var_88], rax
00000000000079e7         mov        qword [rsp+0xc8+var_B0], rdi
00000000000079ec         call       j___memcpy_chk                              ; __memcpy_chk
00000000000079f1         mov        ecx, r12d
00000000000079f4         mov        dword [rsp+0xc8+var_A8], ebx
00000000000079f8         mov        r12, r14
00000000000079fb         mov        rbx, r13
00000000000079fe         mov        r8, qword [rsp+0xc8+var_80]
0000000000007a03         mov        r15, qword [rsp+0xc8+var_90]
0000000000007a08         mov        r13, qword [rsp+0xc8+var_88]
0000000000007a0d         mov        r14d, ecx
0000000000007a10         jmp        loc_7a52
0000000000007a12         align      8

                     loc_7a18:
0000000000007a18         mov        rax, qword [rsp+0xc8+var_B0]                ; CODE XREF=human_readable+1306
0000000000007a1d         sub        r12, rbp
0000000000007a20         sub        r8, rbp
0000000000007a23         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
0000000000007a26         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000007a29         lea        rsi, qword [rax+r12]                        ; argument "__src" for method j_memcpy
0000000000007a2d         call       j_memcpy                                    ; memcpy
0000000000007a32         test       r12, r12
0000000000007a35         mov        r8, rax
0000000000007a38         je         loc_7f48

0000000000007a3e         sub        r8, r13
0000000000007a41         mov        rdx, r13                                    ; argument "__n" for method j_memcpy
0000000000007a44         mov        rsi, rbx                                    ; argument "__src" for method j_memcpy
0000000000007a47         mov        rdi, r8                                     ; argument "__dest" for method j_memcpy
0000000000007a4a         call       j_memcpy                                    ; memcpy
0000000000007a4f         mov        r8, rax

                     loc_7a52:
0000000000007a52         movzx      eax, byte [r15]                             ; CODE XREF=human_readable+1216
0000000000007a56         test       al, al
0000000000007a58         je         loc_7a67

0000000000007a5a         cmp        al, 0x7f
0000000000007a5c         movzx      ebp, al
0000000000007a5f         cmovae     rbp, r12
0000000000007a63         add        r15, 0x1

                     loc_7a67:
0000000000007a67         cmp        rbp, r12                                    ; CODE XREF=human_readable+1288
0000000000007a6a         jbe        loc_7a18

0000000000007a6c         mov        eax, r14d
0000000000007a6f         mov        r15, r8
0000000000007a72         mov        r14, r12
0000000000007a75         mov        rsi, qword [rsp+0xc8+var_B0]                ; argument "__src" for method j_memcpy
0000000000007a7a         sub        r15, r14
0000000000007a7d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000007a80         mov        rdi, r15                                    ; argument "__dest" for method j_memcpy
0000000000007a83         mov        ebx, dword [rsp+0xc8+var_A8]
0000000000007a87         mov        r12d, eax
0000000000007a8a         call       j_memcpy                                    ; memcpy
0000000000007a8f         jmp        loc_78da
0000000000007a94         align      8

                     loc_7a98:
0000000000007a98         mov        rcx, qword [rsp+0xc8+var_C8]                ; CODE XREF=human_readable+939
0000000000007a9c         lea        rdi, qword [rcx+0x288]
0000000000007aa3         mov        byte [rcx+0x287], 0x20
0000000000007aaa         mov        qword [rsp+0xc8+var_C0], rdi
0000000000007aaf         jmp        loc_7901
0000000000007ab4         align      8

                     loc_7ab8:
0000000000007ab8         sub        rsp, 0x10                                   ; CODE XREF=human_readable+401
0000000000007abc         mov        edi, r15d
0000000000007abf         fld        st0
0000000000007ac1         fstp       tword [rsp+0xd8+var_D8]
0000000000007ac4         fstp       tword [rsp+0xd8+var_A8]
0000000000007ac8         call       adjust_value.part.0                         ; adjust_value.part.0
0000000000007acd         pop        rax
0000000000007ace         pop        rdx
0000000000007acf         fld        tword [rsp+0xc8+var_A8]
0000000000007ad3         jmp        loc_76e9
0000000000007ad8         align      32

                     loc_7ae0:
0000000000007ae0         sub        rsp, 0x10                                   ; CODE XREF=human_readable+774
0000000000007ae4         mov        edi, r15d
0000000000007ae7         fstp       tword [rsp+0xd8+var_D8]
0000000000007aea         call       adjust_value.part.0                         ; adjust_value.part.0
0000000000007aef         pop        r8
0000000000007af1         pop        r9
0000000000007af3         jmp        loc_785c
0000000000007af8         align      256

                     loc_7b00:
0000000000007b00         lea        rdx, qword [rdi+2]                          ; CODE XREF=human_readable+1013
0000000000007b04         mov        byte [rdi+1], 0x69
0000000000007b08         jmp        loc_794b

                     loc_7b0d:
0000000000007b0d         cmp        r10, 0x9                                    ; CODE XREF=human_readable+680
0000000000007b11         ja         loc_7da8

0000000000007b17         cmp        r15d, 0x1
0000000000007b1b         je         loc_7dd2

0000000000007b21         test       r15d, r15d
0000000000007b24         sete       dl
0000000000007b27         test       edi, edi
0000000000007b29         setg       r8b
0000000000007b2d         and        edx, r8d

                     loc_7b30:
0000000000007b30         test       dl, dl                                      ; CODE XREF=human_readable+2191
0000000000007b32         je         loc_7db9

0000000000007b38         lea        r9d, dword [rax+1]
0000000000007b3c         cmp        r9d, 0xa
0000000000007b40         je         loc_7e41

                     loc_7b46:
0000000000007b46         add        r9d, 0x30                                   ; CODE XREF=human_readable+2155

                     loc_7b4a:
0000000000007b4a         mov        rax, qword [rsp+0xc8+var_C8]                ; CODE XREF=human_readable+2173
0000000000007b4e         lea        r8, qword [rax+0x286]
0000000000007b55         mov        byte [rax+0x286], r9b
0000000000007b5c         mov        eax, ebp
0000000000007b5e         sub        r8, rbp
0000000000007b61         cmp        ebp, 0x8
0000000000007b64         jae        loc_7df1

0000000000007b6a         test       bpl, 0x4
0000000000007b6e         jne        loc_7ef6

0000000000007b74         test       eax, eax
0000000000007b76         je         loc_7b87

0000000000007b78         movzx      edx, byte [r14]
0000000000007b7c         test       al, 0x2
0000000000007b7e         mov        byte [r8], dl
0000000000007b81         jne        loc_7f10

                     loc_7b87:
0000000000007b87         xor        edi, edi                                    ; CODE XREF=human_readable+1574, human_readable+2255, human_readable+2284, human_readable+2389, human_readable+2486, human_readable+2508
0000000000007b89         xor        r9d, r9d
0000000000007b8c         nop        dword [rax]

                     loc_7b90:
0000000000007b90         cmp        r15d, 0x1                                   ; CODE XREF=human_readable+633, human_readable+2055, human_readable+2141, human_readable+2204
0000000000007b94         je         loc_7d10

0000000000007b9a         test       r15d, r15d
0000000000007b9d         jne        loc_7bc0

0000000000007b9f         add        edi, r9d
0000000000007ba2         test       edi, edi
0000000000007ba4         jle        loc_7bc0

                     loc_7ba6:
0000000000007ba6         add        rsi, 0x1                                    ; CODE XREF=human_readable+2009
0000000000007baa         test       ecx, ecx
0000000000007bac         je         loc_7bc0

0000000000007bae         mov        eax, dword [rsp+0xc8+var_94]
0000000000007bb2         cmp        rax, rsi
0000000000007bb5         je         loc_7d80

0000000000007bbb         nop        dword [rax+rax]

                     loc_7bc0:
0000000000007bc0         mov        r15, r8                                     ; CODE XREF=human_readable+1613, human_readable+1620, human_readable+1628, human_readable+2015, human_readable+2099
0000000000007bc3         movabs     rcx, 0xcccccccccccccccd
0000000000007bcd         nop        dword [rax]

                     loc_7bd0:
0000000000007bd0         mov        rax, rsi                                    ; CODE XREF=human_readable+1700
0000000000007bd3         sub        r15, 0x1
0000000000007bd7         mul        rcx
0000000000007bda         shr        rdx, 0x3
0000000000007bde         lea        rax, qword [rdx+rdx*4]
0000000000007be2         add        rax, rax
0000000000007be5         sub        rsi, rax
0000000000007be8         add        esi, 0x30
0000000000007beb         test       rdx, rdx
0000000000007bee         mov        byte [r15], sil
0000000000007bf1         mov        rsi, rdx
0000000000007bf4         jne        loc_7bd0

0000000000007bf6         jmp        loc_78d0
0000000000007bfb         align      1024

                     loc_7c00:
0000000000007c00         mov        rcx, qword [rsp+0xc8+var_B8]                ; CODE XREF=human_readable+915
0000000000007c05         cmp        rcx, 0x1
0000000000007c09         jbe        loc_7db2

0000000000007c0f         mov        edx, dword [rsp+0xc8+var_94]
0000000000007c13         mov        ebx, 0x1
0000000000007c18         mov        eax, 0x1

                     loc_7c1d:
0000000000007c1d         imul       rax, rdx                                    ; CODE XREF=human_readable+1760
0000000000007c21         cmp        rcx, rax
0000000000007c24         jbe        loc_78e9

0000000000007c2a         add        ebx, 0x1
0000000000007c2d         cmp        ebx, 0x8
0000000000007c30         jne        loc_7c1d

0000000000007c32         jmp        loc_78e9
0000000000007c37         align      64

                     loc_7c40:
0000000000007c40         sub        rsp, 0x10                                   ; CODE XREF=human_readable+387
0000000000007c44         lea        rcx, qword [a1lf]                           ; "%.1Lf"
0000000000007c4b         mov        rdx, 0xffffffffffffffff
0000000000007c52         fld        st0
0000000000007c54         fstp       tword [rsp+0xd8+var_D8]
0000000000007c57         mov        r14, qword [rsp+0xd8+var_C8]
0000000000007c5c         mov        esi, 0x1
0000000000007c61         xor        eax, eax
0000000000007c63         mov        rdi, r14
0000000000007c66         fstp       tword [rsp+0xd8+var_A8]
0000000000007c6a         call       j___sprintf_chk                             ; __sprintf_chk
0000000000007c6f         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000007c72         call       j_strlen                                    ; strlen
0000000000007c77         mov        r14, rax
0000000000007c7a         pop        rax
0000000000007c7b         pop        rdx
0000000000007c7c         cmp        r14, qword [rsp+0xc8+var_B0]
0000000000007c81         fld        tword [rsp+0xc8+var_A8]
0000000000007c85         jbe        loc_7732

0000000000007c8b         fld        dword [dword_10074]                         ; dword_10074
0000000000007c91         fmul       st1, st0

                     loc_7c93:
0000000000007c93         fdivp      st1                                         ; CODE XREF=human_readable+526, human_readable+1944, human_readable+1972
0000000000007c95         sub        rsp, 0x10
0000000000007c99         lea        rcx, qword [a0lf]                           ; "%.0Lf"
0000000000007ca0         mov        r14, qword [rsp+0xd8+var_C8]
0000000000007ca5         mov        rdx, 0xffffffffffffffff
0000000000007cac         mov        esi, 0x1
0000000000007cb1         xor        eax, eax
0000000000007cb3         xor        ebp, ebp
0000000000007cb5         mov        rdi, r14
0000000000007cb8         fstp       tword [rsp+0xd8+var_D8]
0000000000007cbb         call       j___sprintf_chk                             ; __sprintf_chk
0000000000007cc0         mov        rdi, r14                                    ; argument "__s" for method j_strlen
0000000000007cc3         call       j_strlen                                    ; strlen
0000000000007cc8         pop        r10
0000000000007cca         mov        r14, rax
0000000000007ccd         pop        r11
0000000000007ccf         jmp        loc_78b0
0000000000007cd4         align      8

                     loc_7cd8:
0000000000007cd8         fld        dword [dword_10074]                         ; dword_10074, CODE XREF=human_readable+476
0000000000007cde         fmul       st1, st0

                     loc_7ce0:
0000000000007ce0         fld        tword [dword_10074+12]                      ; 0x10080, CODE XREF=human_readable+520
0000000000007ce6         fucomip    st2
0000000000007ce8         jbe        loc_7c93

0000000000007cea         fstp       dword [rsp+0xc8+var_B0]
0000000000007cee         sub        rsp, 0x10
0000000000007cf2         mov        edi, r15d
0000000000007cf5         fstp       tword [rsp+0xd8+var_D8]
0000000000007cf8         call       adjust_value.part.0                         ; adjust_value.part.0
0000000000007cfd         pop        rbp
0000000000007cfe         pop        r14
0000000000007d00         fld        dword [rsp+0xc8+var_B0]
0000000000007d04         jmp        loc_7c93
0000000000007d06         align      16

                     loc_7d10:
0000000000007d10         mov        rax, rsi                                    ; CODE XREF=human_readable+1604
0000000000007d13         movsxd     rdi, edi
0000000000007d16         and        eax, 0x1
0000000000007d19         add        rax, rdi
0000000000007d1c         setne      al
0000000000007d1f         movzx      eax, al
0000000000007d22         add        r9d, eax
0000000000007d25         cmp        r9d, 0x5
0000000000007d29         jg         loc_7ba6

0000000000007d2f         jmp        loc_7bc0
0000000000007d34         align      8

                     loc_7d38:
0000000000007d38         setb       dil                                         ; CODE XREF=human_readable+602
0000000000007d3c         movzx      edi, dil
0000000000007d40         add        edi, 0x2
0000000000007d43         jmp        loc_77b9
0000000000007d48         align      16

                     loc_7d50:
0000000000007d50         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+650
0000000000007d55         xor        ebx, ebx
0000000000007d57         jmp        loc_7b90
0000000000007d5c         align      32

                     loc_7d60:
0000000000007d60         mov        rbx, qword [rsp+0xc8+var_C0]                ; CODE XREF=human_readable+966
0000000000007d65         test       eax, eax
0000000000007d67         lea        rdx, qword [rbx+1]
0000000000007d6b         mov        byte [rbx], 0x6b
0000000000007d6e         jne        loc_794b

                     loc_7d74:
0000000000007d74         mov        qword [rsp+0xc8+var_C0], rdx                ; CODE XREF=human_readable+999
0000000000007d79         jmp        loc_7957
0000000000007d7e         align      128

                     loc_7d80:
0000000000007d80         cmp        ebx, 0x8                                    ; CODE XREF=human_readable+1637
0000000000007d83         je         loc_7bc0

0000000000007d89         add        ebx, 0x1
0000000000007d8c         test       r12b, 0x8
0000000000007d90         je         loc_7e52

                     loc_7d96:
0000000000007d96         lea        r15, qword [r8-1]                           ; CODE XREF=human_readable+2338, human_readable+2353, human_readable+2371, human_readable+2437, human_readable+2465, human_readable+2529
0000000000007d9a         mov        byte [r8-1], 0x31
0000000000007d9f         jmp        loc_78d0
0000000000007da4         align      8

                     loc_7da8:
0000000000007da8         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+689, human_readable+1473
0000000000007dad         jmp        loc_7b90

                     loc_7db2:
0000000000007db2         xor        ebx, ebx                                    ; CODE XREF=human_readable+1721
0000000000007db4         jmp        loc_78e9

                     loc_7db9:
0000000000007db9         test       eax, eax                                    ; CODE XREF=human_readable+1506
0000000000007dbb         jne        loc_7b46

                     loc_7dc1:
0000000000007dc1         test       r12b, 0x8                                   ; CODE XREF=human_readable+2301
0000000000007dc5         jne        loc_7de4

0000000000007dc7         mov        r9d, 0x30
0000000000007dcd         jmp        loc_7b4a

                     loc_7dd2:
0000000000007dd2         mov        edx, eax                                    ; CODE XREF=human_readable+1483
0000000000007dd4         and        edx, 0x1
0000000000007dd7         add        edx, edi
0000000000007dd9         cmp        edx, 0x2
0000000000007ddc         setg       dl
0000000000007ddf         jmp        loc_7b30

                     loc_7de4:
0000000000007de4         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+2165
0000000000007de9         xor        r9d, r9d
0000000000007dec         jmp        loc_7b90

                     loc_7df1:
0000000000007df1         mov        rax, qword [r14]                            ; CODE XREF=human_readable+1556
0000000000007df4         mov        r9, r14
0000000000007df7         mov        qword [r8], rax
0000000000007dfa         mov        eax, ebp
0000000000007dfc         mov        rdx, qword [r14+rax-8]
0000000000007e01         mov        qword [r8+rax-8], rdx
0000000000007e06         lea        rdx, qword [r8+8]
0000000000007e0a         mov        rax, r8
0000000000007e0d         and        rdx, 0xfffffffffffffff8
0000000000007e11         sub        rax, rdx
0000000000007e14         sub        r9, rax
0000000000007e17         add        eax, ebp
0000000000007e19         and        eax, 0xfffffff8
0000000000007e1c         cmp        eax, 0x8
0000000000007e1f         jb         loc_7b87

0000000000007e25         and        eax, 0xfffffff8
0000000000007e28         xor        edi, edi

                     loc_7e2a:
0000000000007e2a         mov        r10d, edi                                   ; CODE XREF=human_readable+2282
0000000000007e2d         add        edi, 0x8
0000000000007e30         mov        r11, qword [r9+r10]
0000000000007e34         cmp        edi, eax
0000000000007e36         mov        qword [rdx+r10], r11
0000000000007e3a         jb         loc_7e2a

0000000000007e3c         jmp        loc_7b87

                     loc_7e41:
0000000000007e41         lea        rsi, qword [r10+1]                          ; CODE XREF=human_readable+1520
0000000000007e45         cmp        rsi, 0xa
0000000000007e49         je         loc_7ea0

0000000000007e4b         xor        edi, edi
0000000000007e4d         jmp        loc_7dc1

                     loc_7e52:
0000000000007e52         mov        rax, rbp                                    ; CODE XREF=human_readable+2112
0000000000007e55         mov        byte [r8-1], 0x30
0000000000007e5a         not        rax
0000000000007e5d         add        r8, rax
0000000000007e60         cmp        ebp, 0x8
0000000000007e63         mov        eax, ebp
0000000000007e65         jae        loc_7eaa

0000000000007e67         and        ebp, 0x4
0000000000007e6a         jne        loc_7f21

0000000000007e70         test       eax, eax
0000000000007e72         je         loc_7d96

0000000000007e78         movzx      edx, byte [r14]
0000000000007e7c         test       al, 0x2
0000000000007e7e         mov        byte [r8], dl
0000000000007e81         je         loc_7d96

0000000000007e87         movzx      edx, word [r14+rax-2]
0000000000007e8d         mov        word [r8+rax-2], dx
0000000000007e93         jmp        loc_7d96
0000000000007e98         align      32

                     loc_7ea0:
0000000000007ea0         mov        r8, qword [rsp+0xc8+var_C0]                 ; CODE XREF=human_readable+2297
0000000000007ea5         jmp        loc_7b87

                     loc_7eaa:
0000000000007eaa         mov        rax, qword [r14]                            ; CODE XREF=human_readable+2325
0000000000007ead         lea        rcx, qword [r8+8]
0000000000007eb1         and        rcx, 0xfffffffffffffff8
0000000000007eb5         mov        qword [r8], rax
0000000000007eb8         mov        eax, ebp
0000000000007eba         mov        rdx, qword [r14+rax-8]
0000000000007ebf         mov        qword [r8+rax-8], rdx
0000000000007ec4         mov        rax, r8
0000000000007ec7         sub        rax, rcx
0000000000007eca         sub        r14, rax
0000000000007ecd         add        eax, ebp
0000000000007ecf         and        eax, 0xfffffff8
0000000000007ed2         cmp        eax, 0x8
0000000000007ed5         jb         loc_7d96

0000000000007edb         and        eax, 0xfffffff8
0000000000007ede         xor        edx, edx

                     loc_7ee0:
0000000000007ee0         mov        esi, edx                                    ; CODE XREF=human_readable+2463
0000000000007ee2         add        edx, 0x8
0000000000007ee5         mov        rdi, qword [r14+rsi]
0000000000007ee9         cmp        edx, eax
0000000000007eeb         mov        qword [rcx+rsi], rdi
0000000000007eef         jb         loc_7ee0

0000000000007ef1         jmp        loc_7d96

                     loc_7ef6:
0000000000007ef6         mov        edx, dword [r14]                            ; CODE XREF=human_readable+1566
0000000000007ef9         mov        dword [r8], edx
0000000000007efc         mov        edx, dword [r14+rax-4]
0000000000007f01         mov        dword [r8+rax-4], edx
0000000000007f06         jmp        loc_7b87

                     loc_7f0b:
0000000000007f0b         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=human_readable+1059
                        ; endp

                     loc_7f10:
0000000000007f10         movzx      edx, word [r14+rax-2]                       ; CODE XREF=human_readable+1585
0000000000007f16         mov        word [r8+rax-2], dx
0000000000007f1c         jmp        loc_7b87

                     loc_7f21:
0000000000007f21         mov        edx, dword [r14]                            ; CODE XREF=human_readable+2330
0000000000007f24         mov        dword [r8], edx
0000000000007f27         mov        edx, dword [r14+rax-4]
0000000000007f2c         mov        dword [r8+rax-4], edx
0000000000007f31         jmp        loc_7d96

                     loc_7f36:
0000000000007f36         test       eax, eax                                    ; CODE XREF=human_readable+947
0000000000007f38         mov        rdx, qword [rsp+0xc8+var_C0]
0000000000007f3d         jne        loc_794b

0000000000007f43         jmp        loc_7957

                     loc_7f48:
0000000000007f48         mov        ebx, dword [rsp+0xc8+var_A8]                ; CODE XREF=human_readable+1256
0000000000007f4c         mov        r15, rax
0000000000007f4f         mov        r12d, r14d
0000000000007f52         jmp        loc_78da
0000000000007f57         align      32                                          ; End of unwind block (FDE at 0x11ef8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     human_options:
0000000000007f60         push       r13                                         ; Begin of unwind block (FDE at 0x11fa0), CODE XREF=main+535, main+1847
0000000000007f62         push       r12
0000000000007f64         mov        r13, rsi
0000000000007f67         push       rbp
0000000000007f68         push       rbx
0000000000007f69         mov        r12, rdx
0000000000007f6c         mov        rbx, rdi
0000000000007f6f         sub        rsp, 0x18
0000000000007f73         mov        rax, qword [fs:0x28]
0000000000007f7c         mov        qword [rsp+0x38+var_30], rax
0000000000007f81         xor        eax, eax
0000000000007f83         test       rdi, rdi
0000000000007f86         je         loc_80a0

                     loc_7f8c:
0000000000007f8c         xor        ebp, ebp                                    ; CODE XREF=human_options+338, human_options+362
0000000000007f8e         cmp        byte [rbx], 0x27
0000000000007f91         jne        loc_7f9c

0000000000007f93         add        rbx, 0x1
0000000000007f97         mov        ebp, 0x4

                     loc_7f9c:
0000000000007f9c         lea        rdx, qword [block_size_opts]                ; block_size_opts, CODE XREF=human_options+49
0000000000007fa3         lea        rsi, qword [block_size_args]                ; block_size_args
0000000000007faa         mov        ecx, 0x4
0000000000007faf         mov        rdi, rbx
0000000000007fb2         call       argmatch                                    ; argmatch
0000000000007fb7         test       eax, eax
0000000000007fb9         js         loc_7ff8

0000000000007fbb         lea        rdx, qword [block_size_opts]                ; block_size_opts
0000000000007fc2         cdqe
0000000000007fc4         mov        qword [r12], 0x1
0000000000007fcc         or         ebp, dword [rdx+rax*4]
0000000000007fcf         xor        eax, eax
0000000000007fd1         mov        dword [r13], ebp

                     loc_7fd5:
0000000000007fd5         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=human_options+263, human_options+308, human_options+403, human_options+476
0000000000007fda         xor        rcx, qword [fs:0x28]
0000000000007fe3         jne        loc_8141

0000000000007fe9         add        rsp, 0x18
0000000000007fed         pop        rbx
0000000000007fee         pop        rbp
0000000000007fef         pop        r12
0000000000007ff1         pop        r13
0000000000007ff3         ret
                        ; endp
0000000000007ff4         align      8

                     loc_7ff8:
0000000000007ff8         lea        r8, qword [aEeggkkmmppttyy]                 ; "eEgGkKmMpPtTyYzZ0", CODE XREF=human_options+89
0000000000007fff         xor        edx, edx
0000000000008001         mov        rsi, rsp
0000000000008004         mov        rcx, r12
0000000000008007         mov        rdi, rbx
000000000000800a         call       xstrtoumax                                  ; xstrtoumax
000000000000800f         test       eax, eax
0000000000008011         jne        loc_8058

0000000000008013         movzx      esi, byte [rbx]
0000000000008016         lea        edx, dword [rsi-0x30]
0000000000008019         cmp        dl, 0x9
000000000000801c         jbe        loc_8048

000000000000801e         mov        rcx, qword [rsp+0x38+var_38]
0000000000008022         cmp        rbx, rcx
0000000000008025         jne        loc_8039

0000000000008027         jmp        loc_8100
000000000000802c         align      16

                     loc_8030:
0000000000008030         cmp        rbx, rcx                                    ; CODE XREF=human_options+230
0000000000008033         je         loc_8100

                     loc_8039:
0000000000008039         add        rbx, 0x1                                    ; CODE XREF=human_options+197
000000000000803d         movzx      edi, byte [rbx]
0000000000008040         lea        edx, dword [rdi-0x30]
0000000000008043         cmp        dl, 0x9
0000000000008046         ja         loc_8030

                     loc_8048:
0000000000008048         mov        rdx, qword [r12]                            ; CODE XREF=human_options+188, human_options+429, human_options+450
000000000000804c         mov        dword [r13], ebp
0000000000008050         jmp        loc_8064
0000000000008052         align      8

                     loc_8058:
0000000000008058         mov        rdx, qword [r12]                            ; CODE XREF=human_options+177
000000000000805c         mov        dword [r13], 0x0

                     loc_8064:
0000000000008064         test       rdx, rdx                                    ; CODE XREF=human_options+240
0000000000008067         jne        loc_7fd5

000000000000806d         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
0000000000008074         call       j_getenv                                    ; getenv
0000000000008079         cmp        rax, 0x1
000000000000807d         sbb        rax, rax
0000000000008080         and        eax, 0x200
0000000000008085         add        rax, 0x200
000000000000808b         mov        qword [r12], rax
000000000000808f         mov        eax, 0x4
0000000000008094         jmp        loc_7fd5
0000000000008099         align      32

                     loc_80a0:
00000000000080a0         lea        rdi, qword [aDfblocksize+3]                 ; argument "__name" for method j_getenv, 0xf1af, CODE XREF=human_options+38
00000000000080a7         call       j_getenv                                    ; getenv
00000000000080ac         test       rax, rax
00000000000080af         mov        rbx, rax
00000000000080b2         jne        loc_7f8c

00000000000080b8         lea        rdi, qword [aBlocksize]                     ; argument "__name" for method j_getenv, "BLOCKSIZE"
00000000000080bf         call       j_getenv                                    ; getenv
00000000000080c4         test       rax, rax
00000000000080c7         mov        rbx, rax
00000000000080ca         jne        loc_7f8c

00000000000080d0         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT"
00000000000080d7         call       j_getenv                                    ; getenv
00000000000080dc         test       rax, rax
00000000000080df         je         loc_812a

00000000000080e1         mov        qword [r12], 0x200
00000000000080e9         xor        eax, eax
00000000000080eb         mov        dword [r13], 0x0
00000000000080f3         jmp        loc_7fd5
00000000000080f8         align      256

                     loc_8100:
0000000000008100         cmp        byte [rcx-1], 0x42                          ; CODE XREF=human_options+199, human_options+211
0000000000008104         je         loc_8118

0000000000008106         or         bpl, 0x80

                     loc_810a:
000000000000810a         or         ebp, 0x20                                   ; CODE XREF=human_options+456
000000000000810d         jmp        loc_8048
0000000000008112         align      8

                     loc_8118:
0000000000008118         or         ebp, 0x180                                  ; CODE XREF=human_options+420
000000000000811e         cmp        byte [rcx-2], 0x69
0000000000008122         jne        loc_8048

0000000000008128         jmp        loc_810a

                     loc_812a:
000000000000812a         mov        qword [r12], 0x400                          ; CODE XREF=human_options+383
0000000000008132         xor        eax, eax
0000000000008134         mov        dword [r13], 0x0
000000000000813c         jmp        loc_7fd5

                     loc_8141:
0000000000008141         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=human_options+131
                        ; endp
0000000000008146         align      16                                          ; End of unwind block (FDE at 0x11fa0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     umaxtostr:
0000000000008150         lea        rcx, qword [rsi+0x14]                       ; Begin of unwind block (FDE at 0x11fdc), CODE XREF=get_header+310
0000000000008154         mov        byte [rsi+0x14], 0x0
0000000000008158         movabs     rsi, 0xcccccccccccccccd
0000000000008162         nop        word [rax+rax]

                     loc_8168:
0000000000008168         mov        rax, rdi                                    ; CODE XREF=umaxtostr+60
000000000000816b         sub        rcx, 0x1
000000000000816f         mul        rsi
0000000000008172         shr        rdx, 0x3
0000000000008176         lea        rax, qword [rdx+rdx*4]
000000000000817a         add        rax, rax
000000000000817d         sub        rdi, rax
0000000000008180         add        edi, 0x30
0000000000008183         test       rdx, rdx
0000000000008186         mov        byte [rcx], dil
0000000000008189         mov        rdi, rdx
000000000000818c         jne        loc_8168

000000000000818e         mov        rax, rcx
0000000000008191         ret
                        ; endp
0000000000008192         align      32                                          ; End of unwind block (FDE at 0x11fdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104


                     mbsalign:
00000000000081a0         push       r15                                         ; Begin of unwind block (FDE at 0x11ff4), CODE XREF=ambsalign+89
00000000000081a2         push       r14
00000000000081a4         mov        r14, rdi
00000000000081a7         push       r13
00000000000081a9         push       r12
00000000000081ab         mov        r13, rsi
00000000000081ae         push       rbp
00000000000081af         push       rbx
00000000000081b0         mov        ebx, r9d
00000000000081b3         mov        r12, rcx
00000000000081b6         sub        rsp, 0x38
00000000000081ba         mov        qword [rsp+0x68+var_58], rdx
00000000000081bf         mov        dword [rsp+0x68+var_4C], r8d
00000000000081c4         call       j_strlen                                    ; strlen
00000000000081c9         test       bl, 0x2
00000000000081cc         mov        r15, rax
00000000000081cf         mov        qword [rsp+0x68+var_60], rax
00000000000081d4         je         loc_8340

                     loc_81da:
00000000000081da         mov        rbp, r15                                    ; CODE XREF=mbsalign+425, mbsalign+452
00000000000081dd         mov        qword [rsp+0x68+var_68], 0x0
00000000000081e5         mov        qword [rsp+0x68+var_60], 0x0

                     loc_81ee:
00000000000081ee         mov        rax, qword [r12]                            ; CODE XREF=mbsalign+815, mbsalign+832, mbsalign+899, mbsalign+932
00000000000081f2         cmp        rax, rbp
00000000000081f5         jae        loc_8309

00000000000081fb         mov        r15, rax
00000000000081fe         xor        edx, edx

                     loc_8200:
0000000000008200         mov        qword [r12], rax                            ; CODE XREF=mbsalign+959
0000000000008204         mov        eax, dword [rsp+0x68+var_4C]
0000000000008208         test       eax, eax
000000000000820a         je         loc_832b

                     loc_8210:
0000000000008210         xor        ebp, ebp                                    ; CODE XREF=mbsalign+389
0000000000008212         cmp        eax, 0x1
0000000000008215         je         loc_8223

0000000000008217         mov        rbp, rdx
000000000000821a         and        edx, 0x1
000000000000821d         shr        rbp, 0x1
0000000000008220         add        rdx, rbp

                     loc_8223:
0000000000008223         test       bl, 0x4                                     ; CODE XREF=mbsalign+117, mbsalign+400
0000000000008226         lea        r12, qword [rdx+r15]
000000000000822a         je         loc_8231

000000000000822c         mov        r12, r15
000000000000822f         xor        edx, edx

                     loc_8231:
0000000000008231         and        ebx, 0x8                                    ; CODE XREF=mbsalign+138
0000000000008234         jne        loc_8338

000000000000823a         add        r12, rbp

                     loc_823d:
000000000000823d         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=mbsalign+410
0000000000008242         test       rax, rax
0000000000008245         je         loc_82d1

000000000000824b         lea        rbx, qword [r13+rax-1]
0000000000008250         lea        rax, qword [rdx-1]
0000000000008254         cmp        r13, rbx
0000000000008257         jae        loc_827f

0000000000008259         test       rdx, rdx
000000000000825c         je         loc_827f

000000000000825e         nop

                     loc_8260:
0000000000008260         add        r13, 0x1                                    ; CODE XREF=mbsalign+221
0000000000008264         mov        byte [r13-1], 0x20
0000000000008269         cmp        rbx, r13
000000000000826c         seta       sil
0000000000008270         test       rax, rax
0000000000008273         setne      dl
0000000000008276         sub        rax, 0x1
000000000000827a         test       sil, dl
000000000000827d         jne        loc_8260

                     loc_827f:
000000000000827f         mov        rdx, rbx                                    ; CODE XREF=mbsalign+183, mbsalign+188
0000000000008282         mov        byte [r13], 0x0
0000000000008287         mov        rsi, r14                                    ; argument "__src" for method j_mempcpy
000000000000828a         sub        rdx, r13
000000000000828d         mov        rdi, r13                                    ; argument "__dest" for method j_mempcpy
0000000000008290         cmp        rdx, r15
0000000000008293         cmova      rdx, r15                                    ; argument "__n" for method j_mempcpy
0000000000008297         call       j_mempcpy                                   ; mempcpy
000000000000829c         cmp        rbx, rax
000000000000829f         lea        rdx, qword [rbp-1]
00000000000082a3         jbe        loc_82ce

00000000000082a5         test       rbp, rbp
00000000000082a8         je         loc_82ce

00000000000082aa         nop        word [rax+rax]

                     loc_82b0:
00000000000082b0         add        rax, 0x1                                    ; CODE XREF=mbsalign+300
00000000000082b4         test       rdx, rdx
00000000000082b7         mov        byte [rax-1], 0x20
00000000000082bb         setne      sil
00000000000082bf         cmp        rbx, rax
00000000000082c2         seta       cl
00000000000082c5         sub        rdx, 0x1
00000000000082c9         test       sil, cl
00000000000082cc         jne        loc_82b0

                     loc_82ce:
00000000000082ce         mov        byte [rax], 0x0                             ; CODE XREF=mbsalign+259, mbsalign+264

                     loc_82d1:
00000000000082d1         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__ptr" for method j_free, CODE XREF=mbsalign+165, mbsalign+482, mbsalign+912
00000000000082d5         call       j_free                                      ; free
00000000000082da         mov        rdi, qword [rsp+0x68+var_60]                ; argument "__ptr" for method j_free
00000000000082df         call       j_free                                      ; free
00000000000082e4         add        rsp, 0x38
00000000000082e8         mov        rax, r12
00000000000082eb         pop        rbx
00000000000082ec         pop        rbp
00000000000082ed         pop        r12
00000000000082ef         pop        r13
00000000000082f1         pop        r14
00000000000082f3         pop        r15
00000000000082f5         ret
                        ; endp
00000000000082f6         align      256

                     loc_8300:
0000000000008300         mov        qword [rsp+0x68+var_60], 0x0                ; CODE XREF=mbsalign+863

                     loc_8309:
0000000000008309         cmp        rbp, rax                                    ; CODE XREF=mbsalign+85
000000000000830c         jae        loc_855a

0000000000008312         sub        rax, rbp
0000000000008315         mov        rdx, rax
0000000000008318         mov        rax, rbp
000000000000831b         mov        qword [r12], rax
000000000000831f         mov        eax, dword [rsp+0x68+var_4C]
0000000000008323         test       eax, eax
0000000000008325         jne        loc_8210

                     loc_832b:
000000000000832b         mov        rbp, rdx                                    ; CODE XREF=mbsalign+106
000000000000832e         xor        edx, edx
0000000000008330         jmp        loc_8223
0000000000008335         align      8

                     loc_8338:
0000000000008338         xor        ebp, ebp                                    ; CODE XREF=mbsalign+148
000000000000833a         jmp        loc_823d
000000000000833f         align      64

                     loc_8340:
0000000000008340         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max, CODE XREF=mbsalign+52
0000000000008345         cmp        rax, 0x1
0000000000008349         jbe        loc_81da

000000000000834f         xor        edx, edx                                    ; argument "__n" for method j_mbstowcs
0000000000008351         xor        edi, edi                                    ; argument "__pwcs" for method j_mbstowcs
0000000000008353         mov        rsi, r14                                    ; argument "__s" for method j_mbstowcs
0000000000008356         call       j_mbstowcs                                  ; mbstowcs
000000000000835b         cmp        rax, 0xffffffffffffffff
000000000000835f         jne        loc_8390

0000000000008361         test       bl, 0x1
0000000000008364         jne        loc_81da

                     loc_836a:
000000000000836a         mov        qword [rsp+0x68+var_68], 0x0                ; CODE XREF=mbsalign+938
0000000000008372         mov        qword [rsp+0x68+var_60], 0x0
000000000000837b         mov        r12, 0xffffffffffffffff
0000000000008382         jmp        loc_82d1
0000000000008387         align      16

                     loc_8390:
0000000000008390         lea        rbp, qword [rax+1]                          ; CODE XREF=mbsalign+447
0000000000008394         lea        rax, qword [rbp*4]
000000000000839c         mov        rdi, rax                                    ; argument "__size" for method j_malloc
000000000000839f         mov        qword [rsp+0x68+var_48], rax
00000000000083a4         call       j_malloc                                    ; malloc
00000000000083a9         test       rax, rax
00000000000083ac         mov        qword [rsp+0x68+var_68], rax
00000000000083b0         je         loc_8535

00000000000083b6         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__pwcs" for method j_mbstowcs
00000000000083ba         mov        rdx, rbp                                    ; argument "__n" for method j_mbstowcs
00000000000083bd         mov        rsi, r14                                    ; argument "__s" for method j_mbstowcs
00000000000083c0         call       j_mbstowcs                                  ; mbstowcs
00000000000083c5         test       rax, rax
00000000000083c8         je         loc_84d4

00000000000083ce         mov        rax, qword [rsp+0x68+var_68]
00000000000083d2         mov        rcx, qword [rsp+0x68+var_48]
00000000000083d7         mov        dword [rax+rcx-4], 0x0
00000000000083df         mov        edi, dword [rax]
00000000000083e1         mov        rdx, rax
00000000000083e4         test       edi, edi
00000000000083e6         je         loc_84e5

00000000000083ec         mov        byte [rsp+0x68+var_48], 0x0
00000000000083f1         nop        dword [rax]

                     loc_83f8:
00000000000083f8         mov        qword [rsp+0x68+var_40], rdx                ; CODE XREF=mbsalign+638
00000000000083fd         call       j_iswprint                                  ; iswprint
0000000000008402         test       eax, eax
0000000000008404         mov        rdx, qword [rsp+0x68+var_40]
0000000000008409         jne        loc_8416

000000000000840b         mov        dword [rdx], 0xfffd
0000000000008411         mov        byte [rsp+0x68+var_48], 0x1

                     loc_8416:
0000000000008416         add        rdx, 0x4                                    ; CODE XREF=mbsalign+617
000000000000841a         mov        edi, dword [rdx]
000000000000841c         test       edi, edi
000000000000841e         jne        loc_83f8

0000000000008420         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__s" for method j_wcswidth
0000000000008424         mov        rsi, rbp                                    ; argument "__n" for method j_wcswidth
0000000000008427         call       j_wcswidth                                  ; wcswidth
000000000000842c         cmp        byte [rsp+0x68+var_48], 0x0
0000000000008431         movsxd     rbp, eax
0000000000008434         je         loc_84f8

000000000000843a         mov        rsi, qword [rsp+0x68+var_68]                ; argument "__pwcs" for method j_wcstombs
000000000000843e         xor        edx, edx                                    ; argument "__n" for method j_wcstombs
0000000000008440         xor        edi, edi                                    ; argument "__s" for method j_wcstombs
0000000000008442         call       j_wcstombs                                  ; wcstombs
0000000000008447         add        rax, 0x1
000000000000844b         mov        qword [rsp+0x68+var_48], rax

                     loc_8450:
0000000000008450         mov        rdi, qword [rsp+0x68+var_48]                ; argument "__size" for method j_malloc, CODE XREF=mbsalign+883
0000000000008455         call       j_malloc                                    ; malloc
000000000000845a         test       rax, rax
000000000000845d         mov        qword [rsp+0x68+var_60], rax
0000000000008462         je         loc_8520

0000000000008468         mov        r15, qword [rsp+0x68+var_68]
000000000000846c         mov        r14, qword [r12]
0000000000008470         mov        edi, dword [r15]
0000000000008473         test       edi, edi
0000000000008475         je         loc_854f

000000000000847b         xor        ebp, ebp
000000000000847d         jmp        loc_848e
000000000000847f         align      128

                     loc_8480:
0000000000008480         add        r15, 0x4                                    ; CODE XREF=mbsalign+781
0000000000008484         mov        edi, dword [r15]
0000000000008487         mov        rbp, rdx
000000000000848a         test       edi, edi
000000000000848c         je         loc_84af

                     loc_848e:
000000000000848e         call       j_wcwidth                                   ; wcwidth, CODE XREF=mbsalign+733
0000000000008493         cmp        eax, 0xffffffff
0000000000008496         movsxd     rdx, eax
0000000000008499         jne        loc_84a7

000000000000849b         mov        dword [r15], 0xfffd
00000000000084a2         mov        edx, 0x1

                     loc_84a7:
00000000000084a7         add        rdx, rbp                                    ; CODE XREF=mbsalign+761
00000000000084aa         cmp        r14, rdx
00000000000084ad         jae        loc_8480

                     loc_84af:
00000000000084af         mov        r14, qword [rsp+0x68+var_60]                ; CODE XREF=mbsalign+748, mbsalign+949
00000000000084b4         mov        rdx, qword [rsp+0x68+var_48]                ; argument "__n" for method j_wcstombs
00000000000084b9         mov        rsi, qword [rsp+0x68+var_68]                ; argument "__pwcs" for method j_wcstombs
00000000000084bd         mov        dword [r15], 0x0
00000000000084c4         mov        rdi, r14                                    ; argument "__s" for method j_wcstombs
00000000000084c7         call       j_wcstombs                                  ; wcstombs
00000000000084cc         mov        r15, rax
00000000000084cf         jmp        loc_81ee

                     loc_84d4:
00000000000084d4         mov        rbp, r15                                    ; CODE XREF=mbsalign+552
00000000000084d7         mov        qword [rsp+0x68+var_60], 0x0
00000000000084e0         jmp        loc_81ee

                     loc_84e5:
00000000000084e5         mov        rdi, qword [rsp+0x68+var_68]                ; argument "__s" for method j_wcswidth, CODE XREF=mbsalign+582
00000000000084e9         mov        rsi, rbp                                    ; argument "__n" for method j_wcswidth
00000000000084ec         call       j_wcswidth                                  ; wcswidth
00000000000084f1         movsxd     rbp, eax
00000000000084f4         nop        dword [rax]

                     loc_84f8:
00000000000084f8         mov        rax, qword [r12]                            ; CODE XREF=mbsalign+660
00000000000084fc         cmp        rax, rbp
00000000000084ff         jae        loc_8300

0000000000008505         mov        rax, qword [rsp+0x68+var_60]
000000000000850a         add        rax, 0x1
000000000000850e         mov        qword [rsp+0x68+var_48], rax
0000000000008513         jmp        loc_8450
0000000000008518         align      32

                     loc_8520:
0000000000008520         test       bl, 0x1                                     ; CODE XREF=mbsalign+706
0000000000008523         jne        loc_81ee

0000000000008529         mov        r12, 0xffffffffffffffff
0000000000008530         jmp        loc_82d1

                     loc_8535:
0000000000008535         test       bl, 0x1                                     ; CODE XREF=mbsalign+528
0000000000008538         mov        rbp, r15
000000000000853b         mov        qword [rsp+0x68+var_60], 0x0
0000000000008544         jne        loc_81ee

000000000000854a         jmp        loc_836a

                     loc_854f:
000000000000854f         mov        r15, qword [rsp+0x68+var_68]                ; CODE XREF=mbsalign+725
0000000000008553         xor        ebp, ebp
0000000000008555         jmp        loc_84af

                     loc_855a:
000000000000855a         mov        rax, rbp                                    ; CODE XREF=mbsalign+364
000000000000855d         xor        edx, edx
000000000000855f         jmp        loc_8200
0000000000008564         align      16                                          ; End of unwind block (FDE at 0x11ff4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64


                     ambsalign:
0000000000008570         push       r15                                         ; Begin of unwind block (FDE at 0x12040), CODE XREF=main+3239
0000000000008572         push       r14
0000000000008574         mov        r15, rdi
0000000000008577         push       r13
0000000000008579         push       r12
000000000000857b         xor        r12d, r12d
000000000000857e         push       rbp
000000000000857f         push       rbx
0000000000008580         mov        rbp, rsi
0000000000008583         sub        rsp, 0x18
0000000000008587         mov        r13, qword [rsi]
000000000000858a         mov        dword [rsp+0x48+var_40], edx
000000000000858e         mov        dword [rsp+0x48+var_3C], ecx
0000000000008592         mov        rax, r13
0000000000008595         nop        dword [rax]

                     loc_8598:
0000000000008598         lea        rbx, qword [rax+1]                          ; CODE XREF=ambsalign+106
000000000000859c         mov        rdi, r12                                    ; argument "__ptr" for method j_realloc
000000000000859f         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
00000000000085a2         call       j_realloc                                   ; realloc
00000000000085a7         test       rax, rax
00000000000085aa         mov        r14, rax
00000000000085ad         je         loc_85f0

00000000000085af         mov        r9d, dword [rsp+0x48+var_3C]
00000000000085b4         mov        r8d, dword [rsp+0x48+var_40]
00000000000085b9         mov        rcx, rbp
00000000000085bc         mov        qword [rbp], r13
00000000000085c0         mov        rdx, rbx
00000000000085c3         mov        rsi, rax
00000000000085c6         mov        rdi, r15
00000000000085c9         call       mbsalign                                    ; mbsalign
00000000000085ce         cmp        rax, 0xffffffffffffffff
00000000000085d2         je         loc_8600

00000000000085d4         cmp        rbx, rax
00000000000085d7         mov        r12, r14
00000000000085da         jbe        loc_8598

                     loc_85dc:
00000000000085dc         add        rsp, 0x18                                   ; CODE XREF=ambsalign+136, ambsalign+155
00000000000085e0         mov        rax, r14
00000000000085e3         pop        rbx
00000000000085e4         pop        rbp
00000000000085e5         pop        r12
00000000000085e7         pop        r13
00000000000085e9         pop        r14
00000000000085eb         pop        r15
00000000000085ed         ret
                        ; endp
00000000000085ee         align      16

                     loc_85f0:
00000000000085f0         mov        rdi, r12                                    ; argument "__ptr" for method j_free, CODE XREF=ambsalign+61
00000000000085f3         call       j_free                                      ; free
00000000000085f8         jmp        loc_85dc
00000000000085fa         align      512

                     loc_8600:
0000000000008600         mov        rdi, r14                                    ; argument "__ptr" for method j_free, CODE XREF=ambsalign+98
0000000000008603         xor        r14d, r14d
0000000000008606         call       j_free                                      ; free
000000000000860b         jmp        loc_85dc
000000000000860d         align      16                                          ; End of unwind block (FDE at 0x12040)

                     mbsnwidth:
0000000000008610         push       r15                                         ; Begin of unwind block (FDE at 0x1208c), CODE XREF=gnu_mbswidth+30
0000000000008612         push       r14
0000000000008614         push       r13
0000000000008616         push       r12
0000000000008618         lea        r13, qword [rdi+rsi]
000000000000861c         push       rbp
000000000000861d         push       rbx
000000000000861e         mov        rbx, rdi
0000000000008621         sub        rsp, 0x38
0000000000008625         mov        rax, qword [fs:0x28]
000000000000862e         mov        qword [rsp+0x68+var_40], rax
0000000000008633         xor        eax, eax
0000000000008635         mov        dword [rsp+0x68+var_5C], edx
0000000000008639         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
000000000000863e         cmp        rax, 0x1
0000000000008642         jbe        loc_8778

0000000000008648         xor        ebp, ebp
000000000000864a         cmp        rbx, r13
000000000000864d         jae        loc_873d

0000000000008653         lea        r12, qword [rsp+0x68+var_48]
0000000000008658         lea        r14, qword [rsp+0x68+var_4C]
000000000000865d         jmp        loc_867b
000000000000865f         align      32

                     loc_8660:
0000000000008660         cmp        al, 0x25                                    ; CODE XREF=mbsnwidth+112
0000000000008662         jge        loc_866b

0000000000008664         sub        eax, 0x20
0000000000008667         cmp        al, 0x3
0000000000008669         ja         loc_8691

                     loc_866b:
000000000000866b         add        rbx, 0x1                                    ; CODE XREF=mbsnwidth+82, mbsnwidth+120, mbsnwidth+127, mbsnwidth+285
000000000000866f         add        ebp, 0x1

                     loc_8672:
0000000000008672         cmp        rbx, r13                                    ; CODE XREF=mbsnwidth+174, mbsnwidth+349
0000000000008675         jae        loc_873d

                     loc_867b:
000000000000867b         movzx      eax, byte [rbx]                             ; CODE XREF=mbsnwidth+77
000000000000867e         cmp        al, 0x3f
0000000000008680         jle        loc_8660

0000000000008682         cmp        al, 0x41
0000000000008684         jl         loc_8691

0000000000008686         cmp        al, 0x5f
0000000000008688         jle        loc_866b

000000000000868a         sub        eax, 0x61
000000000000868d         cmp        al, 0x1d
000000000000868f         jbe        loc_866b

                     loc_8691:
0000000000008691         mov        qword [r12], 0x0                            ; CODE XREF=mbsnwidth+89, mbsnwidth+116
0000000000008699         jmp        loc_86c0
000000000000869b         align      32

                     loc_86a0:
00000000000086a0         mov        ecx, 0x7fffffff                             ; CODE XREF=mbsnwidth+234
00000000000086a5         sub        ecx, ebp
00000000000086a7         cmp        ecx, eax
00000000000086a9         jl         loc_87c0

00000000000086af         add        ebp, eax

                     loc_86b1:
00000000000086b1         mov        rdi, r12                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbsnwidth+254, mbsnwidth+271
00000000000086b4         add        rbx, r15
00000000000086b7         call       j_mbsinit                                   ; mbsinit
00000000000086bc         test       eax, eax
00000000000086be         jne        loc_8672

                     loc_86c0:
00000000000086c0         mov        rdx, r13                                    ; CODE XREF=mbsnwidth+137
00000000000086c3         mov        rcx, r12
00000000000086c6         mov        rsi, rbx
00000000000086c9         sub        rdx, rbx
00000000000086cc         mov        rdi, r14
00000000000086cf         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000086d4         cmp        rax, 0xffffffffffffffff
00000000000086d8         mov        r15, rax
00000000000086db         je         loc_8728

00000000000086dd         cmp        rax, 0xfffffffffffffffe
00000000000086e1         je         loc_8760

00000000000086e3         mov        edi, dword [rsp+0x68+var_4C]                ; argument "__c" for method j_wcwidth
00000000000086e7         test       rax, rax
00000000000086ea         mov        eax, 0x1
00000000000086ef         cmove      r15, rax
00000000000086f3         call       j_wcwidth                                   ; wcwidth
00000000000086f8         test       eax, eax
00000000000086fa         jns        loc_86a0

00000000000086fc         test       byte [rsp+0x68+var_5C], 0x2
0000000000008701         jne        loc_8738

0000000000008703         mov        edi, dword [rsp+0x68+var_4C]                ; argument "__wc" for method j_iswcntrl
0000000000008707         call       j_iswcntrl                                  ; iswcntrl
000000000000870c         test       eax, eax
000000000000870e         jne        loc_86b1

0000000000008710         cmp        ebp, 0x7fffffff
0000000000008716         je         loc_87c0

000000000000871c         add        ebp, 0x1
000000000000871f         jmp        loc_86b1
0000000000008721         align      8

                     loc_8728:
0000000000008728         test       byte [rsp+0x68+var_5C], 0x1                 ; CODE XREF=mbsnwidth+203
000000000000872d         je         loc_866b

0000000000008733         nop        dword [rax+rax]

                     loc_8738:
0000000000008738         mov        ebp, 0xffffffff                             ; CODE XREF=mbsnwidth+241, mbsnwidth+341, mbsnwidth+403

                     loc_873d:
000000000000873d         mov        rsi, qword [rsp+0x68+var_40]                ; CODE XREF=mbsnwidth+61, mbsnwidth+101, mbsnwidth+365, mbsnwidth+415, mbsnwidth+425, mbsnwidth+437
0000000000008742         xor        rsi, qword [fs:0x28]
000000000000874b         mov        eax, ebp
000000000000874d         jne        loc_87ca

000000000000874f         add        rsp, 0x38
0000000000008753         pop        rbx
0000000000008754         pop        rbp
0000000000008755         pop        r12
0000000000008757         pop        r13
0000000000008759         pop        r14
000000000000875b         pop        r15
000000000000875d         ret
                        ; endp
000000000000875e         align      32

                     loc_8760:
0000000000008760         test       byte [rsp+0x68+var_5C], 0x1                 ; CODE XREF=mbsnwidth+209
0000000000008765         jne        loc_8738

0000000000008767         add        ebp, 0x1
000000000000876a         mov        rbx, r13
000000000000876d         jmp        loc_8672
0000000000008772         align      8

                     loc_8778:
0000000000008778         xor        ebp, ebp                                    ; CODE XREF=mbsnwidth+50
000000000000877a         cmp        rbx, r13
000000000000877d         jae        loc_873d

000000000000877f         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000008784         mov        edx, dword [rsp+0x68+var_5C]
0000000000008788         mov        rcx, qword [rax]
000000000000878b         xor        ebp, ebp
000000000000878d         and        edx, 0x2

                     loc_8790:
0000000000008790         add        rbx, 0x1                                    ; CODE XREF=mbsnwidth+423
0000000000008794         movzx      eax, byte [rbx-1]
0000000000008798         movzx      eax, word [rcx+rax*2]
000000000000879c         test       ah, 0x40
000000000000879f         jne        loc_87a9

00000000000087a1         test       edx, edx
00000000000087a3         jne        loc_8738

00000000000087a5         test       al, 0x2
00000000000087a7         jne        loc_87b4

                     loc_87a9:
00000000000087a9         cmp        ebp, 0x7fffffff                             ; CODE XREF=mbsnwidth+399
00000000000087af         je         loc_873d

00000000000087b1         add        ebp, 0x1

                     loc_87b4:
00000000000087b4         cmp        r13, rbx                                    ; CODE XREF=mbsnwidth+407
00000000000087b7         jne        loc_8790

00000000000087b9         jmp        loc_873d
00000000000087bb         align      64

                     loc_87c0:
00000000000087c0         mov        ebp, 0x7fffffff                             ; CODE XREF=mbsnwidth+153, mbsnwidth+262
00000000000087c5         jmp        loc_873d

                     loc_87ca:
00000000000087ca         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbsnwidth+317
                        ; endp
00000000000087cf         align      16                                          ; End of unwind block (FDE at 0x1208c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_4C: int32_t, -76
        ;    var_5C: int32_t, -92


                     gnu_mbswidth:
00000000000087d0         push       rbp                                         ; Begin of unwind block (FDE at 0x120d8), CODE XREF=get_header+161, sub_4730+37
00000000000087d1         push       rbx
00000000000087d2         mov        ebp, esi
00000000000087d4         mov        rbx, rdi
00000000000087d7         sub        rsp, 0x8
00000000000087db         call       j_strlen                                    ; strlen
00000000000087e0         add        rsp, 0x8
00000000000087e4         mov        edx, ebp
00000000000087e6         mov        rdi, rbx
00000000000087e9         pop        rbx
00000000000087ea         pop        rbp
00000000000087eb         mov        rsi, rax
00000000000087ee         jmp        mbsnwidth                                   ; mbsnwidth
00000000000087f3         align      2048                                        ; End of unwind block (FDE at 0x120d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000008800         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x12104), CODE XREF=main+63
0000000000008803         push       rbx
0000000000008804         je         loc_887d

0000000000008806         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000880b         mov        rbx, rdi
000000000000880e         call       j_strrchr                                   ; strrchr
0000000000008813         test       rax, rax
0000000000008816         je         loc_886d

0000000000008818         lea        r8, qword [rax+1]
000000000000881c         mov        rdx, r8
000000000000881f         sub        rdx, rbx
0000000000008822         cmp        rdx, 0x6
0000000000008826         jle        loc_886d

0000000000008828         lea        rsi, qword [rax-6]
000000000000882c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000008833         mov        ecx, 0x7
0000000000008838         rep  cmpsb byte [rsi], byte [rdi]
000000000000883a         seta       dl
000000000000883d         sbb        dl, 0x0
0000000000008840         test       dl, dl
0000000000008842         jne        loc_886d

0000000000008844         lea        rdi, qword [aLibs+8]                        ; 0x100d0
000000000000884b         mov        ecx, 0x3
0000000000008850         mov        rsi, r8
0000000000008853         mov        rbx, r8
0000000000008856         rep  cmpsb byte [rsi], byte [rdi]
0000000000008858         seta       dl
000000000000885b         sbb        dl, 0x0
000000000000885e         test       dl, dl
0000000000008860         jne        loc_886d

0000000000008862         lea        rbx, qword [rax+4]
0000000000008866         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_886d:
000000000000886d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000008874         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000887b         pop        rbx
000000000000887c         ret
                        ; endp

                     loc_887d:
000000000000887d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000008884         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000888b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000008890         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000008895         call       j_fwrite                                    ; fwrite
000000000000889a         call       j_abort                                     ; abort
                        ; endp
000000000000889f         align      32                                          ; End of unwind block (FDE at 0x12104)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
00000000000088a0         push       rbp                                         ; Begin of unwind block (FDE at 0x12124), CODE XREF=sub_90d0+2597, sub_90d0+2619
00000000000088a1         push       rbx
00000000000088a2         mov        rbp, rdi
00000000000088a5         mov        ebx, esi
00000000000088a7         sub        rsp, 0x8
00000000000088ab         call       locale_charset                              ; locale_charset
00000000000088b0         movzx      edx, byte [rax]
00000000000088b3         and        edx, 0xffffffdf
00000000000088b6         cmp        dl, 0x55
00000000000088b9         je         loc_8930

00000000000088bb         cmp        dl, 0x47
00000000000088be         je         loc_88e0

                     loc_88c0:
00000000000088c0         lea        rax, qword [aFieldUsed+12]                  ; 0xf018, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
00000000000088c7         lea        rdx, qword [a4096Len+22]                    ; 0x10b06
00000000000088ce         cmp        ebx, 0x9
00000000000088d1         cmovne     rax, rdx
00000000000088d5         add        rsp, 0x8
00000000000088d9         pop        rbx
00000000000088da         pop        rbp
00000000000088db         ret
                        ; endp
00000000000088dc         align      32

                     loc_88e0:
00000000000088e0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
00000000000088e4         and        edx, 0xffffffdf
00000000000088e7         cmp        dl, 0x42
00000000000088ea         jne        loc_88c0

00000000000088ec         cmp        byte [rax+2], 0x31
00000000000088f0         jne        loc_88c0

00000000000088f2         cmp        byte [rax+3], 0x38
00000000000088f6         jne        loc_88c0

00000000000088f8         cmp        byte [rax+4], 0x30
00000000000088fc         jne        loc_88c0

00000000000088fe         cmp        byte [rax+5], 0x33
0000000000008902         jne        loc_88c0

0000000000008904         cmp        byte [rax+6], 0x30
0000000000008908         jne        loc_88c0

000000000000890a         cmp        byte [rax+7], 0x0
000000000000890e         jne        loc_88c0

0000000000008910         cmp        byte [rbp], 0x60
0000000000008914         lea        rax, qword [aLibs+20]                       ; 0x100dc
000000000000891b         lea        rdx, qword [aLibs+24]                       ; 0x100e0
0000000000008922         cmovne     rax, rdx
0000000000008926         add        rsp, 0x8
000000000000892a         pop        rbx
000000000000892b         pop        rbp
000000000000892c         ret
                        ; endp
000000000000892d         align      16

                     loc_8930:
0000000000008930         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000008934         and        edx, 0xffffffdf
0000000000008937         cmp        dl, 0x54
000000000000893a         jne        loc_88c0

000000000000893c         movzx      edx, byte [rax+2]
0000000000008940         and        edx, 0xffffffdf
0000000000008943         cmp        dl, 0x46
0000000000008946         jne        loc_88c0

000000000000894c         cmp        byte [rax+3], 0x2d
0000000000008950         jne        loc_88c0

0000000000008956         cmp        byte [rax+4], 0x38
000000000000895a         jne        loc_88c0

0000000000008960         cmp        byte [rax+5], 0x0
0000000000008964         jne        loc_88c0

000000000000896a         cmp        byte [rbp], 0x60
000000000000896e         lea        rax, qword [aLibs+12]                       ; 0x100d4
0000000000008975         lea        rdx, qword [aLibs+16]                       ; 0x100d8
000000000000897c         cmovne     rax, rdx
0000000000008980         add        rsp, 0x8
0000000000008984         pop        rbx
0000000000008985         pop        rbp
0000000000008986         ret
                        ; endp
0000000000008987         align      16                                          ; End of unwind block (FDE at 0x12124)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000008990         push       r15                                         ; Begin of unwind block (FDE at 0x12168), CODE XREF=sub_90d0+1165, sub_90d0+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000008992         push       r14
0000000000008994         mov        r15d, r8d
0000000000008997         push       r13
0000000000008999         push       r12
000000000000899b         mov        r14, rdi
000000000000899e         push       rbp
000000000000899f         push       rbx
00000000000089a0         mov        ebx, r9d
00000000000089a3         mov        r13, rsi
00000000000089a6         mov        rbp, rcx
00000000000089a9         and        ebx, 0x2
00000000000089ac         sub        rsp, 0xb8
00000000000089b3         mov        rax, qword [rsp+0xe8+arg_0]
00000000000089bb         mov        qword [rsp+0xe8+var_D8], rdx
00000000000089c0         mov        dword [rsp+0xe8+var_E0], r8d
00000000000089c5         mov        dword [rsp+0xe8+var_70], r9d
00000000000089ca         mov        qword [rsp+0xe8+var_C8], rax
00000000000089cf         mov        rax, qword [rsp+0xe8+arg_8]
00000000000089d7         mov        qword [rsp+0xe8+var_80], rax
00000000000089dc         mov        rax, qword [rsp+0xe8+arg_10]
00000000000089e4         mov        qword [rsp+0xe8+var_88], rax
00000000000089e9         mov        rax, qword [fs:0x28]
00000000000089f2         mov        qword [rsp+0xe8+var_40], rax
00000000000089fa         xor        eax, eax
00000000000089fc         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000008a01         cmp        r15d, 0xa
0000000000008a05         mov        qword [rsp+0xe8+var_90], rax
0000000000008a0a         ja         loc_9bbf

0000000000008a10         lea        rcx, qword [switch_table_10140]             ; switch_table_10140
0000000000008a17         mov        edx, r15d
0000000000008a1a         movsxd     rax, dword [rcx+rdx*4]
0000000000008a1e         add        rax, rcx
0000000000008a21         jmp        rax                                         ; switch statement using table at 0x10140, with 11 cases, 0x8a23,0x95f4,0x9650,0x96a5,0x96ea,0x9724,0x97ca,0x9804,0x99f8

                     loc_8a23:
0000000000008a23         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_90d0+1318
0000000000008a28         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008a2d         xor        r12d, r12d
0000000000008a30         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008a39         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000008a3e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_8a43:
0000000000008a43         lea        rax, qword [a4096Len+22]                    ; 0x10b06, CODE XREF=sub_90d0+1876
0000000000008a4a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008a53         xor        r15d, r15d
0000000000008a56         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000008a5e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_8a63:
0000000000008a63         xor        r11d, r11d                                  ; CODE XREF=sub_90d0+180, sub_90d0+1400, sub_90d0+1488, sub_90d0+1557, sub_90d0+1615, sub_90d0+1781, sub_90d0+1839, sub_90d0+2408, sub_90d0+2485
0000000000008a66         mov        rax, rbp
0000000000008a69         mov        r8d, r12d
0000000000008a6c         mov        rbp, r11
0000000000008a6f         mov        r11, rax
0000000000008a72         nop        word [rax+rax]

                     loc_8a78:
0000000000008a78         cmp        r11, rbp                                    ; CODE XREF=sub_8b80+194
0000000000008a7b         setne      r12b
0000000000008a7f         cmp        r11, 0xffffffffffffffff
0000000000008a83         jne        loc_8a92

0000000000008a85         mov        rax, qword [rsp+0xe8+var_D8]
0000000000008a8a         cmp        byte [rax+rbp], 0x0
0000000000008a8e         setne      r12b

                     loc_8a92:
0000000000008a92         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000008a95         je         loc_90f0

0000000000008a9b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000008aa0         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000008aa5         lea        r9, qword [rdi+rbp]
0000000000008aa9         setne      al
0000000000008aac         and        al, byte [rsp+0xe8+var_DB]
0000000000008ab0         mov        r10d, eax
0000000000008ab3         je         loc_8b60

0000000000008ab9         mov        rax, qword [rsp+0xe8+var_D0]
0000000000008abe         test       rax, rax
0000000000008ac1         je         loc_8ef0

0000000000008ac7         cmp        r11, 0xffffffffffffffff
0000000000008acb         lea        rbx, qword [rbp+rax]
0000000000008ad0         jne        loc_8b00

0000000000008ad2         cmp        rax, 0x1
0000000000008ad6         jbe        loc_8b00

0000000000008ad8         mov        byte [rsp+0xe8+var_B0], r8b
0000000000008add         mov        byte [rsp+0xe8+var_B8], r10b
0000000000008ae2         mov        qword [rsp+0xe8+var_C0], r9
0000000000008ae7         call       j_strlen                                    ; strlen
0000000000008aec         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000008af2         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000008af8         mov        r11, rax
0000000000008afb         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_8b00:
0000000000008b00         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000008b03         mov        byte [rsp+0xe8+var_C0], r10b
0000000000008b08         ja         loc_90c0

0000000000008b0e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000008b13         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000008b18         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000008b1b         mov        qword [rsp+0xe8+var_A8], r11
0000000000008b20         mov        byte [rsp+0xe8+var_B0], r8b
0000000000008b25         mov        qword [rsp+0xe8+var_B8], r9
0000000000008b2a         call       j_memcmp                                    ; memcmp
0000000000008b2f         test       eax, eax
0000000000008b31         mov        r9, qword [rsp+0xe8+var_B8]
0000000000008b36         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000008b3c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000008b41         jne        loc_90c0

0000000000008b47         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000008b4c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000008b52         jne        loc_9ad5

0000000000008b58         nop        dword [rax+rax]

                     loc_8b60:
0000000000008b60         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_90b0+19
0000000000008b64         cmp        bl, 0x7e
0000000000008b67         ja         loc_8e88

0000000000008b6d         lea        rcx, qword [switch_table_10140+44]          ; 0x1016c
0000000000008b74         movzx      edx, bl
0000000000008b77         movsxd     rax, dword [rcx+rdx*4]
0000000000008b7b         add        rax, rcx
0000000000008b7e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_8b80:
0000000000008b80         xor        r10d, r10d
0000000000008b83         cmp        r11, 0x1
0000000000008b87         setne      al
0000000000008b8a         cmp        r11, 0xffffffffffffffff
0000000000008b8e         jne        loc_8b9c

0000000000008b90         mov        rax, qword [rsp+arg_8]
0000000000008b95         cmp        byte [rax+1], 0x0
0000000000008b99         setne      al

                     loc_8b9c:
0000000000008b9c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8b80+14
0000000000008ba1         sete       dl
0000000000008ba4         test       al, al
0000000000008ba6         je         loc_8df8

                     loc_8bac:
0000000000008bac         xor        r12d, r12d                                  ; CODE XREF=sub_8df0+11
0000000000008baf         xor        eax, eax
0000000000008bb1         nop        dword [rax]
                        ; endp

                     loc_8bb8:
0000000000008bb8         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_8da0+50, sub_8e70+119
0000000000008bbd         jne        loc_8cd2

0000000000008bc3         test       dl, dl
0000000000008bc5         jne        loc_8cd2

                     loc_8bcb:
0000000000008bcb         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_8c80+87
0000000000008bd0         test       rsi, rsi
0000000000008bd3         je         loc_8be9

0000000000008bd5         mov        edx, ebx
0000000000008bd7         shr        dl, 0x5
0000000000008bda         movzx      edx, dl
0000000000008bdd         mov        edx, dword [rsi+rdx*4]
0000000000008be0         bt         edx, ebx
0000000000008be3         jb         loc_8d33

                     loc_8be9:
0000000000008be9         test       r10b, r10b                                  ; CODE XREF=sub_8b80+83, sub_8c80+93
0000000000008bec         jne        loc_8d33

0000000000008bf2         xor        eax, 0x1
0000000000008bf5         add        rbp, 0x1
0000000000008bf9         and        eax, r8d

                     loc_8bfc:
0000000000008bfc         test       al, al                                      ; CODE XREF=sub_90d0+936
0000000000008bfe         je         loc_8c20

0000000000008c00         cmp        r13, r15
0000000000008c03         jbe        loc_8c0a

0000000000008c05         mov        byte [r14+r15], 0x27

                     loc_8c0a:
0000000000008c0a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8b80+131
0000000000008c0e         cmp        r13, rax
0000000000008c11         jbe        loc_8c19

0000000000008c13         mov        byte [r14+r15+1], 0x27

                     loc_8c19:
0000000000008c19         add        r15, 0x2                                    ; CODE XREF=sub_8b80+145
0000000000008c1d         xor        r8d, r8d

                     loc_8c20:
0000000000008c20         cmp        r15, r13                                    ; CODE XREF=sub_8b80+126, sub_8c80+275, sub_90d0+869
0000000000008c23         jae        loc_8c29

0000000000008c25         mov        byte [r14+r15], bl

                     loc_8c29:
0000000000008c29         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_8b80+163
0000000000008c2e         add        r15, 0x1
0000000000008c32         mov        eax, 0x0
0000000000008c37         test       r12b, r12b
0000000000008c3a         cmove      edi, eax
0000000000008c3d         mov        byte [rsp+0xe8+var_DA], dil
0000000000008c42         jmp        loc_8a78
0000000000008c47         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_8c50:
0000000000008c50         xor        r10d, r10d
0000000000008c53         mov        eax, dword [rsp+arg_0]
0000000000008c57         cmp        eax, 0x2
0000000000008c5a         je         loc_9218

0000000000008c60         cmp        eax, 0x5
0000000000008c63         je         loc_91d8

0000000000008c69         cmp        eax, 0x2
0000000000008c6c         mov        ebx, 0x3f
0000000000008c71         sete       dl
0000000000008c74         xor        r12d, r12d
0000000000008c77         xor        eax, eax
0000000000008c79         jmp        sub_8b80+56
                        ; endp
0000000000008c7e         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_8c80:
0000000000008c80         xor        r10d, r10d
0000000000008c83         cmp        dword [rsp+arg_0], 0x2
0000000000008c88         je         loc_9190

0000000000008c8e         mov        byte [rsp+arg_74], r12b
0000000000008c93         xor        edx, edx
0000000000008c95         xor        eax, eax
0000000000008c97         mov        ebx, 0x27
0000000000008c9c         jmp        sub_8b80+56
                        ; endp
0000000000008ca1         nop        dword [rax]
0000000000008ca8         mov        edx, 0x9
0000000000008cad         mov        ebx, 0x74

                     loc_8cb2:
0000000000008cb2         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8e40+10, sub_8f30+37, sub_9070+53
0000000000008cb7         sete       al
0000000000008cba         and        al, byte [rsp+arg_7]
0000000000008cbe         jne        sub_8df0+30

0000000000008cc4         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_8c80+114
0000000000008cc9         jne        loc_8d30

                     loc_8ccb:
0000000000008ccb         mov        ebx, edx                                    ; CODE XREF=sub_8da0+18
0000000000008ccd         xor        r12d, r12d
0000000000008cd0         xor        eax, eax
                        ; endp

                     loc_8cd2:
0000000000008cd2         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_8b80+61, sub_8b80+69
0000000000008cd7         jne        loc_8bcb

0000000000008cdd         jmp        loc_8be9
0000000000008ce2         nop        word [rax+rax]
0000000000008ce8         mov        edx, 0x8
0000000000008ced         mov        ebx, 0x62
0000000000008cf2         jmp        sub_8c80+68
0000000000008cf4         nop        dword [rax]
0000000000008cf8         cmp        dword [rsp+8], 0x2
0000000000008cfd         je         sub_90d0                                    ; sub_90d0
0000000000008d03         cmp        byte [rsp+0xd], 0x0
0000000000008d08         je         sub_8f10+16

                     loc_8d0e:
0000000000008d0e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_8f10+8
0000000000008d13         je         loc_8f20

0000000000008d19         cmp        qword [rsp+arg_10], 0x0
0000000000008d1f         jne        loc_90db

0000000000008d25         mov        ebx, 0x5c
0000000000008d2a         nop        word [rax+rax]
                        ; endp

                     loc_8d30:
0000000000008d30         xor        r12d, r12d                                  ; CODE XREF=sub_8c80+73, sub_9070+29
                        ; endp

                     loc_8d33:
0000000000008d33         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_8b80+99, sub_8b80+108
0000000000008d38         sete       dl
0000000000008d3b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000008d40         mov        eax, edx
0000000000008d42         jne        loc_9598

0000000000008d48         mov        eax, r8d
0000000000008d4b         xor        eax, 0x1
0000000000008d4e         and        al, dl
0000000000008d50         je         loc_8d81

0000000000008d52         cmp        r13, r15
0000000000008d55         jbe        loc_8d5c

0000000000008d57         mov        byte [r14+r15], 0x27

                     loc_8d5c:
0000000000008d5c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_8c80+213
0000000000008d60         cmp        r13, rdx
0000000000008d63         jbe        loc_8d6b

0000000000008d65         mov        byte [r14+r15+1], 0x24

                     loc_8d6b:
0000000000008d6b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_8c80+227
0000000000008d6f         cmp        r13, rdx
0000000000008d72         jbe        loc_8d7a

0000000000008d74         mov        byte [r14+r15+2], 0x27

                     loc_8d7a:
0000000000008d7a         add        r15, 0x3                                    ; CODE XREF=sub_8c80+242
0000000000008d7e         mov        r8d, eax

                     loc_8d81:
0000000000008d81         cmp        r13, r15                                    ; CODE XREF=sub_8c80+208
0000000000008d84         jbe        loc_8d8b

0000000000008d86         mov        byte [r14+r15], 0x5c

                     loc_8d8b:
0000000000008d8b         add        r15, 0x1                                    ; CODE XREF=sub_8c80+260
0000000000008d8f         add        rbp, 0x1
0000000000008d93         jmp        loc_8c20
0000000000008d98         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_8da0:
0000000000008da0         cmp        byte [rsp+arg_5], 0x0
0000000000008da5         jne        loc_8f73

0000000000008dab         xor        edx, edx
0000000000008dad         test       byte [rsp+arg_70], 0x1
0000000000008db2         je         loc_8ccb

0000000000008db8         add        rbp, 0x1
0000000000008dbc         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000008dc1         nop        dword [rax]
0000000000008dc8         cmp        dword [rsp+8], 0x2
0000000000008dcd         sete       dl
0000000000008dd0         xor        eax, eax
0000000000008dd2         jmp        sub_8b80+56
0000000000008dd7         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8de0:
0000000000008de0         mov        edx, 0x7
0000000000008de5         mov        ebx, 0x61
0000000000008dea         jmp        sub_8c80+68
                        ; endp
0000000000008def         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8df0:
0000000000008df0         cmp        dword [rsp+8], 0x2
0000000000008df5         sete       dl
                        ; endp

                     loc_8df8:
0000000000008df8         test       rbp, rbp                                    ; CODE XREF=sub_8b80+38, sub_9010+35
0000000000008dfb         jne        loc_8bac

0000000000008e01         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_9040+43
0000000000008e06         and        al, dl
0000000000008e08         je         sub_8b80+56

0000000000008e0e         mov        rbp, r11
0000000000008e11         mov        dword [rsp+arg_0], 0x2
0000000000008e19         jmp        sub_90d0+1097
                        ; endp
0000000000008e1e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_8e20:
0000000000008e20         cmp        dword [rsp+arg_0], 0x2
0000000000008e25         sete       dl
0000000000008e28         xor        r12d, r12d
0000000000008e2b         jmp        sub_8df0+17
                        ; endp
0000000000008e2d         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_8e30:
0000000000008e30         cmp        dword [rsp+arg_0], 0x2
0000000000008e35         mov        ebx, 0x20
0000000000008e3a         sete       dl
0000000000008e3d         jmp        sub_8df0+17
                        ; endp
0000000000008e3f         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_8e40:
0000000000008e40         mov        edx, 0xd
0000000000008e45         mov        ebx, 0x72
0000000000008e4a         jmp        loc_8cb2
0000000000008e4f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8e50:
0000000000008e50         mov        edx, 0xc
0000000000008e55         mov        ebx, 0x66
0000000000008e5a         jmp        sub_8c80+68
                        ; endp
0000000000008e5f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8e60:
0000000000008e60         mov        edx, 0xb
0000000000008e65         mov        ebx, 0x76
0000000000008e6a         jmp        sub_8c80+68
                        ; endp
0000000000008e6f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8e70:
0000000000008e70         mov        edx, 0xa
0000000000008e75         mov        ebx, 0x6e
0000000000008e7a         jmp        sub_8c80+50
                        ; endp
0000000000008e7f         align      128

                     loc_8e80:
0000000000008e80         xor        r10d, r10d                                  ; CODE XREF=sub_8e70+135
0000000000008e83         nop        dword [rax+rax]

                     loc_8e88:
0000000000008e88         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
0000000000008e8e         jne        loc_9238

0000000000008e94         mov        qword [rsp+0xe8+var_B0], r11
0000000000008e99         mov        byte [rsp+0xe8+var_B8], r8b
0000000000008e9e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000008ea3         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000008ea8         mov        rcx, qword [rax]
0000000000008eab         movzx      edx, bl
0000000000008eae         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000008eb4         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000008eba         mov        r11, qword [rsp+0xe8+var_B0]
0000000000008ebf         mov        edi, 0x1
0000000000008ec4         movzx      eax, word [rcx+rdx*2]
0000000000008ec8         and        ax, 0x4000
0000000000008ecc         setne      r12b
0000000000008ed0         sete       al
0000000000008ed3         and        al, byte [rsp+0xe8+var_DB]

                     loc_8ed7:
0000000000008ed7         test       al, al                                      ; CODE XREF=sub_90d0+2221
0000000000008ed9         jne        loc_9871

0000000000008edf         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000008ee4         sete       dl
0000000000008ee7         jmp        loc_8bb8
0000000000008eec         align      16

                     loc_8ef0:
0000000000008ef0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000008ef4         cmp        bl, 0x7e
0000000000008ef7         ja         loc_8e80

0000000000008ef9         lea        rcx, qword [switch_table_10140+552]         ; 0x10368
0000000000008f00         movzx      edx, bl
0000000000008f03         movsxd     rax, dword [rcx+rdx*4]
0000000000008f07         add        rax, rcx
0000000000008f0a         jmp        rax
                        ; endp
0000000000008f0c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_8f10:
0000000000008f10         xor        r10d, r10d
0000000000008f13         cmp        byte [rsp+arg_5], 0x0
0000000000008f18         jne        loc_8d0e

0000000000008f1e         nop

                     loc_8f20:
0000000000008f20         mov        edx, 0x5c                                   ; CODE XREF=sub_8c80+136, sub_8c80+147
0000000000008f25         mov        ebx, 0x5c
0000000000008f2a         jmp        sub_8c80+68
                        ; endp
0000000000008f2f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8f30:
0000000000008f30         mov        edx, 0xc
0000000000008f35         xor        r10d, r10d
0000000000008f38         mov        ebx, 0x66
0000000000008f3d         jmp        sub_8c80+68
                        ; endp
0000000000008f42         nop        word [rax+rax]
0000000000008f48         mov        edx, 0xa
0000000000008f4d         xor        r10d, r10d
0000000000008f50         mov        ebx, 0x6e
0000000000008f55         jmp        sub_8c80+50
0000000000008f5a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8f60:
0000000000008f60         mov        ebx, 0x61
0000000000008f65         jmp        sub_8c80+176
                        ; endp
0000000000008f6a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8f70:
0000000000008f70         xor        r10d, r10d
                        ; endp

                     loc_8f73:
0000000000008f73         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8da0+5
0000000000008f78         sete       dl
0000000000008f7b         cmp        byte [rsp+arg_7], 0x0
0000000000008f80         jne        loc_9b1a

0000000000008f86         mov        eax, r8d
0000000000008f89         mov        rcx, r15
0000000000008f8c         xor        eax, 0x1
0000000000008f8f         and        al, dl
0000000000008f91         je         loc_8fc0

0000000000008f93         cmp        r13, r15
0000000000008f96         jbe        loc_8f9d

0000000000008f98         mov        byte [r14+r15], 0x27

                     loc_8f9d:
0000000000008f9d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_8f70+38
0000000000008fa1         cmp        r13, rcx
0000000000008fa4         jbe        loc_8fac

0000000000008fa6         mov        byte [r14+r15+1], 0x24

                     loc_8fac:
0000000000008fac         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_8f70+52
0000000000008fb0         cmp        r13, rcx
0000000000008fb3         ja         loc_95e9

                     loc_8fb9:
0000000000008fb9         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_90d0+1311
0000000000008fbd         mov        r8d, eax

                     loc_8fc0:
0000000000008fc0         cmp        r13, rcx                                    ; CODE XREF=sub_8f70+33
0000000000008fc3         jbe        loc_8fca

0000000000008fc5         mov        byte [r14+rcx], 0x5c

                     loc_8fca:
0000000000008fca         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8f70+83
0000000000008fcf         lea        r15, qword [rcx+1]
0000000000008fd3         je         loc_95d9

0000000000008fd9         lea        rax, qword [rbp+1]
0000000000008fdd         cmp        rax, r11
0000000000008fe0         jae        loc_8ffb

0000000000008fe2         mov        rax, qword [rsp+arg_8]
0000000000008fe7         movzx      eax, byte [rax+rbp+1]
0000000000008fec         mov        byte [rsp+arg_20], al
0000000000008ff0         sub        eax, 0x30
0000000000008ff3         cmp        al, 0x9
0000000000008ff5         jbe        loc_9829

                     loc_8ffb:
0000000000008ffb         mov        eax, r12d                                   ; CODE XREF=sub_8f70+112
0000000000008ffe         mov        ebx, 0x30
0000000000009003         xor        r12d, r12d
0000000000009006         jmp        sub_8b80+56
                        ; endp
000000000000900b         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_9010:
0000000000009010         cmp        dword [rsp+arg_0], 0x2
0000000000009015         mov        r12d, r10d
0000000000009018         sete       dl
000000000000901b         xor        r10d, r10d
000000000000901e         xor        eax, eax
0000000000009020         jmp        sub_8b80+56
                        ; endp
0000000000009025         nop        dword [rax]
0000000000009028         cmp        dword [rsp+8], 0x2
000000000000902d         sete       dl
0000000000009030         xor        r10d, r10d
0000000000009033         jmp        sub_8df0+8
0000000000009038         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9040:
0000000000009040         cmp        dword [rsp+8], 0x2
0000000000009045         sete       dl
0000000000009048         xor        r10d, r10d
000000000000904b         xor        r12d, r12d
000000000000904e         jmp        sub_8df0+17
                        ; endp
0000000000009053         nop        dword [rax+rax]
0000000000009058         cmp        dword [rsp+8], 0x2
000000000000905d         mov        r12d, r10d
0000000000009060         mov        ebx, 0x20
0000000000009065         sete       dl
0000000000009068         xor        r10d, r10d
000000000000906b         jmp        sub_8df0+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9070:
0000000000009070         mov        edx, 0xd
0000000000009075         xor        r10d, r10d
0000000000009078         mov        ebx, 0x72
000000000000907d         jmp        sub_8c80+50
                        ; endp
0000000000009082         nop        word [rax+rax]
0000000000009088         mov        ebx, 0x76
000000000000908d         jmp        sub_8c80+176
0000000000009092         nop        word [rax+rax]
0000000000009098         mov        edx, 0x9
000000000000909d         xor        r10d, r10d
00000000000090a0         mov        ebx, 0x74
00000000000090a5         jmp        sub_8c80+50
00000000000090aa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_90b0:
00000000000090b0         mov        ebx, 0x62
00000000000090b5         jmp        sub_8c80+176
                        ; endp
00000000000090ba         nop        word [rax+rax]

                     loc_90c0:
00000000000090c0         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
00000000000090c3         jmp        loc_8b60
00000000000090c8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_90d0:
00000000000090d0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_8c80+125
00000000000090d5         jne        sub_90d0+2416
                        ; endp

                     loc_90db:
00000000000090db         add        rbp, 0x1                                    ; CODE XREF=sub_8c80+159
00000000000090df         mov        eax, r8d
00000000000090e2         xor        r12d, r12d
00000000000090e5         mov        ebx, 0x5c
00000000000090ea         jmp        sub_8b80+124
                        ; endp
00000000000090ef         align      16

                     loc_90f0:
00000000000090f0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
00000000000090f5         movzx      ebx, byte [rsp+0xe8+var_D9]
00000000000090fa         mov        r12d, r8d
00000000000090fd         mov        rbp, r11
0000000000009100         sete       dl
0000000000009103         mov        eax, ebx
0000000000009105         test       r15, r15
0000000000009108         sete       cl
000000000000910b         and        eax, edx
000000000000910d         and        al, cl
000000000000910f         jne        loc_9b76

0000000000009115         mov        eax, ebx
0000000000009117         xor        eax, 0x1
000000000000911a         and        dl, al
000000000000911c         je         loc_9a8c

0000000000009122         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000009127         je         loc_9a8a

000000000000912d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000009132         jne        loc_9b2d

0000000000009138         test       r13, r13
000000000000913b         sete       al
000000000000913e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000009144         setne      dl
0000000000009147         and        al, dl
0000000000009149         je         loc_9b6c

000000000000914f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_9154:
0000000000009154         lea        rbx, qword [a4096Len+22]                    ; 0x10b06, CODE XREF=sub_90d0+2781
000000000000915b         mov        byte [r14], 0x27
000000000000915f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000009167         mov        r15d, 0x1
000000000000916d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000009176         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000917b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000009180         mov        byte [rsp+0xe8+var_6C], al
0000000000009184         jmp        loc_8a63
0000000000009189         align      16

                     loc_9190:
0000000000009190         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_8c80+8
0000000000009195         jne        sub_90d0+2416

000000000000919b         test       r13, r13
000000000000919e         je         loc_95a0

00000000000091a4         xor        edx, edx
00000000000091a6         cmp        qword [rsp+arg_48], 0x0
00000000000091ac         jne        loc_95a0

                     loc_91b2:
00000000000091b2         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_90d0+1284, sub_90d0+2794
00000000000091b7         add        r15, 0x3
00000000000091bb         xor        eax, eax
00000000000091bd         mov        byte [rsp+arg_74], r12b
00000000000091c2         xor        r8d, r8d
00000000000091c5         mov        r13, rdx
00000000000091c8         mov        ebx, 0x27
00000000000091cd         jmp        sub_8b80+105
                        ; endp
00000000000091d2         align      8

                     loc_91d8:
00000000000091d8         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_8c50+19
00000000000091dd         je         loc_9200

00000000000091df         lea        rcx, qword [rbp+2]
00000000000091e3         cmp        rcx, r11
00000000000091e6         jae        loc_9200

00000000000091e8         mov        rax, qword [rsp+arg_8]
00000000000091ed         cmp        byte [rax+rbp+1], 0x3f
00000000000091f2         je         loc_9982

00000000000091f8         nop        dword [rax+rax]

                     loc_9200:
0000000000009200         xor        edx, edx                                    ; CODE XREF=sub_90d0+269, sub_90d0+278, sub_90d0+2233, sub_90d0+2253
0000000000009202         xor        r12d, r12d
0000000000009205         xor        eax, eax
0000000000009207         mov        ebx, 0x3f
000000000000920c         jmp        sub_8b80+56
                        ; endp
0000000000009211         align      8

                     loc_9218:
0000000000009218         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_8c50+10
000000000000921d         jne        loc_9a40

0000000000009223         xor        r12d, r12d
0000000000009226         xor        eax, eax
0000000000009228         mov        ebx, 0x3f
000000000000922d         jmp        sub_8b80+105
                        ; endp
0000000000009232         align      8

                     loc_9238:
0000000000009238         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_8e70+30
0000000000009240         cmp        r11, 0xffffffffffffffff
0000000000009244         mov        qword [rsp+0xe8+var_48], 0x0
0000000000009250         mov        qword [rsp+0xe8+var_C0], rax
0000000000009255         jne        loc_9284

0000000000009257         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
000000000000925c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000009261         mov        byte [rsp+0xe8+var_B0], r10b
0000000000009266         mov        qword [rsp+0xe8+var_B8], r9
000000000000926b         call       j_strlen                                    ; strlen
0000000000009270         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000009276         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000927c         mov        r11, rax
000000000000927f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_9284:
0000000000009284         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_90d0+389
000000000000928c         xor        ecx, ecx
000000000000928e         mov        byte [rsp+0xe8+var_6A], bl
0000000000009292         mov        byte [rsp+0xe8+var_6B], r8b
0000000000009297         mov        rbx, rcx
000000000000929a         mov        qword [rsp+0xe8+var_60], r9
00000000000092a2         mov        qword [rsp+0xe8+var_B0], rax
00000000000092a7         mov        byte [rsp+0xe8+var_69], r10b
00000000000092ac         mov        qword [rsp+0xe8+var_68], r15
00000000000092b4         mov        qword [rsp+0xe8+var_A8], r14
00000000000092b9         mov        qword [rsp+0xe8+var_78], r13
00000000000092be         mov        qword [rsp+0xe8+var_B8], r11

                     loc_92c3:
00000000000092c3         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_90d0+623
00000000000092c8         lea        r14, qword [rbp+rbx]
00000000000092cd         mov        rdx, qword [rsp+0xe8+var_B8]
00000000000092d2         mov        rcx, qword [rsp+0xe8+var_C0]
00000000000092d7         mov        rdi, qword [rsp+0xe8+var_B0]
00000000000092dc         lea        r13, qword [rax+r14]
00000000000092e0         sub        rdx, r14
00000000000092e3         mov        rsi, r13
00000000000092e6         call       rpl_mbrtowc                                 ; rpl_mbrtowc
00000000000092eb         test       rax, rax
00000000000092ee         mov        r15, rax
00000000000092f1         je         loc_9341

00000000000092f3         cmp        rax, 0xffffffffffffffff
00000000000092f7         je         loc_9915

00000000000092fd         cmp        rax, 0xfffffffffffffffe
0000000000009301         je         loc_98a1

0000000000009307         cmp        dword [rsp+0xe8+var_E0], 0x2
000000000000930c         sete       al
000000000000930f         and        al, byte [rsp+0xe8+var_D9]
0000000000009313         jne        loc_94b0

                     loc_9319:
0000000000009319         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_90d0+996, sub_90d0+1031
0000000000009320         call       j_iswprint                                  ; iswprint
0000000000009325         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
000000000000932a         test       eax, eax
000000000000932c         mov        eax, 0x0
0000000000009331         cmove      r12d, eax
0000000000009335         add        rbx, r15
0000000000009338         call       j_mbsinit                                   ; mbsinit
000000000000933d         test       eax, eax
000000000000933f         je         loc_92c3

                     loc_9341:
0000000000009341         mov        edx, r12d                                   ; CODE XREF=sub_90d0+545
0000000000009344         mov        rdi, rbx
0000000000009347         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000934d         xor        edx, 0x1
0000000000009350         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000009355         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000935b         and        dl, byte [rsp+0xe8+var_DB]
000000000000935f         mov        r15, qword [rsp+0xe8+var_68]
0000000000009367         mov        r14, qword [rsp+0xe8+var_A8]
000000000000936c         mov        r13, qword [rsp+0xe8+var_78]
0000000000009371         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_9376:
0000000000009376         cmp        rdi, 0x1                                    ; CODE XREF=sub_90d0+2112, sub_90d0+2168
000000000000937a         jbe        loc_997b

                     loc_9380:
0000000000009380         mov        rcx, rdi                                    ; CODE XREF=sub_90d0+1961
0000000000009383         xor        esi, esi
0000000000009385         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000938b         add        rcx, rbp
000000000000938e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000009393         jmp        loc_944e
0000000000009398         align      32

                     loc_93a0:
00000000000093a0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_90d0+896
00000000000093a5         sete       al
00000000000093a8         test       r9b, r9b
00000000000093ab         jne        loc_9860

00000000000093b1         mov        esi, r8d
00000000000093b4         xor        esi, 0x1
00000000000093b7         and        al, sil
00000000000093ba         je         loc_93eb

00000000000093bc         cmp        r13, r15
00000000000093bf         jbe        loc_93c6

00000000000093c1         mov        byte [r14+r15], 0x27

                     loc_93c6:
00000000000093c6         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_90d0+751
00000000000093ca         cmp        r13, rsi
00000000000093cd         jbe        loc_93d5

00000000000093cf         mov        byte [r14+r15+1], 0x24

                     loc_93d5:
00000000000093d5         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_90d0+765
00000000000093d9         cmp        r13, rsi
00000000000093dc         jbe        loc_93e4

00000000000093de         mov        byte [r14+r15+2], 0x27

                     loc_93e4:
00000000000093e4         add        r15, 0x3                                    ; CODE XREF=sub_90d0+780
00000000000093e8         mov        r8d, eax

                     loc_93eb:
00000000000093eb         cmp        r13, r15                                    ; CODE XREF=sub_90d0+746
00000000000093ee         jbe        loc_93f5

00000000000093f0         mov        byte [r14+r15], 0x5c

                     loc_93f5:
00000000000093f5         lea        rax, qword [r15+1]                          ; CODE XREF=sub_90d0+798
00000000000093f9         cmp        r13, rax
00000000000093fc         jbe        loc_940b

00000000000093fe         mov        eax, ebx
0000000000009400         shr        al, 0x6
0000000000009403         add        eax, 0x30
0000000000009406         mov        byte [r14+r15+1], al

                     loc_940b:
000000000000940b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_90d0+812
000000000000940f         cmp        r13, rax
0000000000009412         jbe        loc_9424

0000000000009414         mov        eax, ebx
0000000000009416         shr        al, 0x3
0000000000009419         and        eax, 0x7
000000000000941c         add        eax, 0x30
000000000000941f         mov        byte [r14+r15+2], al

                     loc_9424:
0000000000009424         and        ebx, 0x7                                    ; CODE XREF=sub_90d0+834
0000000000009427         add        rbp, 0x1
000000000000942b         add        r15, 0x3
000000000000942f         add        ebx, 0x30
0000000000009432         cmp        rbp, rcx
0000000000009435         jae        loc_8c20

000000000000943b         mov        esi, edx

                     loc_943d:
000000000000943d         cmp        r13, r15                                    ; CODE XREF=sub_90d0+985, sub_90d0+1969
0000000000009440         jbe        loc_9446

0000000000009442         mov        byte [r14+r15], bl

                     loc_9446:
0000000000009446         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_90d0+880
000000000000944a         add        r15, 0x1

                     loc_944e:
000000000000944e         test       dl, dl                                      ; CODE XREF=sub_90d0+707
0000000000009450         jne        loc_93a0

0000000000009456         mov        eax, esi
0000000000009458         xor        eax, 0x1
000000000000945b         and        eax, r8d
000000000000945e         test       r10b, r10b
0000000000009461         je         loc_9471

0000000000009463         cmp        r13, r15
0000000000009466         jbe        loc_946d

0000000000009468         mov        byte [r14+r15], 0x5c

                     loc_946d:
000000000000946d         add        r15, 0x1                                    ; CODE XREF=sub_90d0+918

                     loc_9471:
0000000000009471         add        rbp, 0x1                                    ; CODE XREF=sub_90d0+913
0000000000009475         cmp        rbp, rcx
0000000000009478         jae        loc_8bfc

000000000000947e         test       al, al
0000000000009480         je         loc_987e

0000000000009486         cmp        r13, r15
0000000000009489         jbe        loc_9490

000000000000948b         mov        byte [r14+r15], 0x27

                     loc_9490:
0000000000009490         lea        rax, qword [r15+1]                          ; CODE XREF=sub_90d0+953
0000000000009494         cmp        r13, rax
0000000000009497         jbe        loc_949f

0000000000009499         mov        byte [r14+r15+1], 0x27

                     loc_949f:
000000000000949f         add        r15, 0x2                                    ; CODE XREF=sub_90d0+967
00000000000094a3         xor        r10d, r10d
00000000000094a6         xor        r8d, r8d
00000000000094a9         jmp        loc_943d
00000000000094ab         align      16

                     loc_94b0:
00000000000094b0         cmp        r15, 0x1                                    ; CODE XREF=sub_90d0+579
00000000000094b4         je         loc_9319

00000000000094ba         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000094bf         lea        rcx, qword [rdi+r15]
00000000000094c3         lea        rdx, qword [rdi+r14+1]
00000000000094c8         lea        r8, qword [rcx+r14]
00000000000094cc         jmp        loc_94dd
00000000000094ce         align      16

                     loc_94d0:
00000000000094d0         add        rdx, 0x1                                    ; CODE XREF=sub_90d0+1046, sub_90d0+1072
00000000000094d4         cmp        r8, rdx
00000000000094d7         je         loc_9319

                     loc_94dd:
00000000000094dd         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_90d0+1020
00000000000094e0         sub        ecx, 0x5b
00000000000094e3         cmp        cl, 0x21
00000000000094e6         ja         loc_94d0

00000000000094e8         mov        esi, 0x1
00000000000094ed         shl        rsi, cl
00000000000094f0         mov        rcx, rsi
00000000000094f3         movabs     rsi, 0x20000002b
00000000000094fd         test       rcx, rsi
0000000000009500         je         loc_94d0

0000000000009502         mov        r14, qword [rsp+0xe8+var_A8]
0000000000009507         mov        r13, qword [rsp+0xe8+var_78]
000000000000950c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000009511         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_9519:
0000000000009519         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_90d0+1227, sub_90d0+1948, sub_90d0+2585, sub_90d0+2734
000000000000951e         je         loc_9530

0000000000009520         test       al, al
0000000000009522         mov        eax, 0x4
0000000000009527         cmove      eax, dword [rsp+0xe8+var_E0]
000000000000952c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_9530:
0000000000009530         sub        rsp, 0x8                                    ; CODE XREF=sub_90d0+1102
0000000000009534         mov        rcx, rbp
0000000000009537         mov        rsi, r13
000000000000953a         push       qword [rsp+0xf0+var_88]
000000000000953e         push       qword [rsp+0xf8+var_80]
0000000000009542         mov        rdi, r14
0000000000009545         push       0x0
0000000000009547         mov        r9d, dword [rsp+0x108+var_70]
000000000000954f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000009554         mov        rdx, qword [rsp+0x108+var_D8]
0000000000009559         and        r9d, 0xfffffffd
000000000000955d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009562         add        rsp, 0x20
0000000000009566         mov        r15, rax

                     loc_9569:
0000000000009569         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_90d0+2549, sub_90d0+2560, sub_90d0+2711
0000000000009571         xor        rbx, qword [fs:0x28]
000000000000957a         mov        rax, r15
000000000000957d         jne        loc_9b83

0000000000009583         add        rsp, 0xb8
000000000000958a         pop        rbx
000000000000958b         pop        rbp
000000000000958c         pop        r12
000000000000958e         pop        r13
0000000000009590         pop        r14
0000000000009592         pop        r15
0000000000009594         ret
                        ; endp
0000000000009595         align      8

                     loc_9598:
0000000000009598         mov        rbp, r11                                    ; CODE XREF=sub_8c80+194
000000000000959b         jmp        loc_9519

                     loc_95a0:
00000000000095a0         cmp        r13, r15                                    ; CODE XREF=sub_90d0+206, sub_90d0+220
00000000000095a3         jbe        loc_95aa

00000000000095a5         mov        byte [r14+r15], 0x27

                     loc_95aa:
00000000000095aa         lea        rax, qword [r15+1]                          ; CODE XREF=sub_90d0+1235
00000000000095ae         cmp        r13, rax
00000000000095b1         jbe        loc_95b9

00000000000095b3         mov        byte [r14+r15+1], 0x5c

                     loc_95b9:
00000000000095b9         lea        rax, qword [r15+2]                          ; CODE XREF=sub_90d0+1249
00000000000095bd         cmp        r13, rax
00000000000095c0         jbe        loc_9bb2

00000000000095c6         mov        rdx, r13
00000000000095c9         mov        byte [r14+r15+2], 0x27
00000000000095cf         mov        r13, qword [rsp+arg_48]
00000000000095d4         jmp        loc_91b2

                     loc_95d9:
00000000000095d9         mov        eax, r12d                                   ; CODE XREF=sub_8f70+99
00000000000095dc         mov        ebx, 0x30
00000000000095e1         xor        r12d, r12d
00000000000095e4         jmp        sub_8b80+105
                        ; endp

                     loc_95e9:
00000000000095e9         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_8f70+67
00000000000095ef         jmp        loc_8fb9

                     loc_95f4:
00000000000095f4         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
00000000000095f6         jne        loc_8a23

00000000000095fc         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_9601:
0000000000009601         test       r13, r13                                    ; CODE XREF=sub_90d0+2749
0000000000009604         jne        loc_9b9a

000000000000960a         lea        rax, qword [a4096Len+22]                    ; 0x10b06
0000000000009611         mov        qword [rsp+0xe8+var_98], 0x0
000000000000961a         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000961f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000009624         xor        r12d, r12d
0000000000009627         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000962c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000009635         mov        qword [rsp+0xe8+var_A0], rax
000000000000963a         mov        r15d, 0x1
0000000000009640         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000009648         jmp        loc_8a63
000000000000964d         align      16

                     loc_9650:
0000000000009650         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000009652         jne        loc_9a4d

0000000000009658         test       r13, r13
000000000000965b         je         loc_9886

0000000000009661         mov        byte [r14], 0x22
0000000000009665         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000966a         xor        r12d, r12d
000000000000966d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000009672         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_967b:
000000000000967b         lea        rax, qword [aFieldUsed+12]                  ; 0xf018, CODE XREF=sub_90d0+1996
0000000000009682         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000009687         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000968c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000009695         mov        r15d, 0x1
000000000000969b         mov        qword [rsp+0xe8+var_A0], rax
00000000000096a0         jmp        loc_8a63

                     loc_96a5:
00000000000096a5         lea        rax, qword [aFieldUsed+12]                  ; case 6, 0xf018, CODE XREF=quotearg_buffer_restyled+145
00000000000096ac         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000096b1         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000096b6         xor        r12d, r12d
00000000000096b9         mov        qword [rsp+0xe8+var_98], 0x0
00000000000096c2         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000096c7         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000096cc         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000096d5         xor        r15d, r15d
00000000000096d8         mov        qword [rsp+0xe8+var_A0], rax
00000000000096dd         mov        dword [rsp+0xe8+var_E0], 0x5
00000000000096e5         jmp        loc_8a63

                     loc_96ea:
00000000000096ea         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
00000000000096ef         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000096f4         xor        r12d, r12d
00000000000096f7         mov        qword [rsp+0xe8+var_98], 0x0
0000000000009700         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000009705         xor        r15d, r15d
0000000000009708         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000970d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000009716         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000971f         jmp        loc_8a63

                     loc_9724:
0000000000009724         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000009729         je         loc_9781

000000000000972b         lea        rsi, qword [aLibs+27]                       ; argument "msgid" for method j_dcgettext, 0x100e3
0000000000009732         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009734         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009739         call       j_dcgettext                                 ; dcgettext
000000000000973e         mov        rcx, rax
0000000000009741         mov        qword [rsp+0xe8+var_80], rax
0000000000009746         lea        rax, qword [aLibs+27]                       ; 0x100e3
000000000000974d         cmp        rcx, rax
0000000000009750         je         loc_9aee

                     loc_9756:
0000000000009756         lea        rsi, qword [a4096Len+22]                    ; argument "msgid" for method j_dcgettext, 0x10b06, CODE XREF=sub_90d0+2607
000000000000975d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000975f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009764         call       j_dcgettext                                 ; dcgettext
0000000000009769         mov        rcx, rax
000000000000976c         mov        qword [rsp+0xe8+var_88], rax
0000000000009771         lea        rax, qword [a4096Len+22]                    ; 0x10b06
0000000000009778         cmp        rcx, rax
000000000000977b         je         loc_9b04

                     loc_9781:
0000000000009781         xor        r15d, r15d                                  ; CODE XREF=sub_90d0+1625, sub_90d0+2629
0000000000009784         test       ebx, ebx
0000000000009786         je         loc_994d

                     loc_978c:
000000000000978c         test       ebx, ebx                                    ; CODE XREF=sub_90d0+2183, sub_90d0+2214
000000000000978e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000009793         setne      byte [rsp+0xe8+var_D9]
0000000000009798         xor        r12d, r12d
000000000000979b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000979e         call       j_strlen                                    ; strlen
00000000000097a3         mov        qword [rsp+0xe8+var_A0], rbx
00000000000097a8         mov        qword [rsp+0xe8+var_D0], rax
00000000000097ad         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000097b2         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000097b7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000097c0         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000097c5         jmp        loc_8a63

                     loc_97ca:
00000000000097ca         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
00000000000097cf         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000097d4         xor        r12d, r12d
00000000000097d7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000097e0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000097e5         xor        r15d, r15d
00000000000097e8         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000097ed         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000097f6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000097ff         jmp        loc_8a63

                     loc_9804:
0000000000009804         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000009809         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000980e         xor        r12d, r12d
0000000000009811         mov        qword [rsp+0xe8+var_98], 0x0
000000000000981a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000981f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000009824         jmp        loc_8a43

                     loc_9829:
0000000000009829         cmp        r13, r15                                    ; CODE XREF=sub_8f70+133
000000000000982c         jbe        loc_9833

000000000000982e         mov        byte [r14+r15], 0x30

                     loc_9833:
0000000000009833         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_90d0+1884
0000000000009837         cmp        r13, rax
000000000000983a         jbe        loc_9842

000000000000983c         mov        byte [r14+rcx+2], 0x30

                     loc_9842:
0000000000009842         mov        eax, r12d                                   ; CODE XREF=sub_90d0+1898
0000000000009845         lea        r15, qword [rcx+3]
0000000000009849         xor        r12d, r12d
000000000000984c         mov        ebx, 0x30
0000000000009851         jmp        sub_8b80+56
                        ; endp
0000000000009856         align      32

                     loc_9860:
0000000000009860         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_90d0+731
0000000000009865         mov        rbp, r11
0000000000009868         mov        byte [rsp+0xe8+var_DB], bl
000000000000986c         jmp        loc_9519

                     loc_9871:
0000000000009871         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_8e70+105
0000000000009876         xor        r12d, r12d
0000000000009879         jmp        loc_9380

                     loc_987e:
000000000000987e         xor        r10d, r10d                                  ; CODE XREF=sub_90d0+944
0000000000009881         jmp        loc_943d

                     loc_9886:
0000000000009886         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_90d0+1419
000000000000988f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000009894         xor        r12d, r12d
0000000000009897         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000989c         jmp        loc_967b

                     loc_98a1:
00000000000098a1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_90d0+561
00000000000098a6         mov        rsi, r14
00000000000098a9         mov        rcx, r13
00000000000098ac         mov        rax, rbx
00000000000098af         mov        rdi, rbx
00000000000098b2         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000098b8         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000098bd         mov        r9, qword [rsp+0xe8+var_60]
00000000000098c5         cmp        rsi, r11
00000000000098c8         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000098ce         mov        r15, qword [rsp+0xe8+var_68]
00000000000098d6         mov        r14, qword [rsp+0xe8+var_A8]
00000000000098db         mov        r13, qword [rsp+0xe8+var_78]
00000000000098e0         jae        loc_9908

00000000000098e2         cmp        byte [rcx], 0x0
00000000000098e5         jne        loc_98f7

00000000000098e7         jmp        loc_9908
00000000000098e9         align      16

                     loc_98f0:
00000000000098f0         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_90d0+2099
00000000000098f5         je         loc_9905

                     loc_98f7:
00000000000098f7         add        rax, 0x1                                    ; CODE XREF=sub_90d0+2069
00000000000098fb         lea        rdx, qword [rbp+rax]
0000000000009900         cmp        r11, rdx
0000000000009903         ja         loc_98f0

                     loc_9905:
0000000000009905         mov        rdi, rax                                    ; CODE XREF=sub_90d0+2085

                     loc_9908:
0000000000009908         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_90d0+2064, sub_90d0+2071
000000000000990d         xor        r12d, r12d
0000000000009910         jmp        loc_9376

                     loc_9915:
0000000000009915         mov        rdi, rbx                                    ; CODE XREF=sub_90d0+551
0000000000009918         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000991e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000009923         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000009929         mov        r15, qword [rsp+0xe8+var_68]
0000000000009931         xor        r12d, r12d
0000000000009934         mov        r14, qword [rsp+0xe8+var_A8]
0000000000009939         mov        r13, qword [rsp+0xe8+var_78]
000000000000993e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000009943         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000009948         jmp        loc_9376

                     loc_994d:
000000000000994d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_90d0+1718
0000000000009952         movzx      eax, byte [rdx]
0000000000009955         test       al, al
0000000000009957         je         loc_978c

000000000000995d         nop        dword [rax]

                     loc_9960:
0000000000009960         cmp        r13, r15                                    ; CODE XREF=sub_90d0+2212
0000000000009963         jbe        loc_9969

0000000000009965         mov        byte [r14+r15], al

                     loc_9969:
0000000000009969         add        r15, 0x1                                    ; CODE XREF=sub_90d0+2195
000000000000996d         movzx      eax, byte [rdx+r15]
0000000000009972         test       al, al
0000000000009974         jne        loc_9960

0000000000009976         jmp        loc_978c

                     loc_997b:
000000000000997b         mov        eax, edx                                    ; CODE XREF=sub_90d0+682
000000000000997d         jmp        loc_8ed7

                     loc_9982:
0000000000009982         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_90d0+290
0000000000009986         cmp        bl, 0x3e
0000000000009989         ja         loc_9200

000000000000998f         movabs     rax, 0x7000a38200000000
0000000000009999         bt         rax, rbx
000000000000999d         jae        loc_9200

00000000000099a3         cmp        byte [rsp+arg_7], 0x0
00000000000099a8         jne        loc_9b92

00000000000099ae         cmp        r13, r15
00000000000099b1         jbe        loc_99b8

00000000000099b3         mov        byte [r14+r15], 0x3f

                     loc_99b8:
00000000000099b8         lea        rax, qword [r15+1]                          ; CODE XREF=sub_90d0+2273
00000000000099bc         cmp        r13, rax
00000000000099bf         jbe        loc_99c7

00000000000099c1         mov        byte [r14+r15+1], 0x22

                     loc_99c7:
00000000000099c7         lea        rax, qword [r15+2]                          ; CODE XREF=sub_90d0+2287
00000000000099cb         cmp        r13, rax
00000000000099ce         jbe        loc_99d6

00000000000099d0         mov        byte [r14+r15+2], 0x22

                     loc_99d6:
00000000000099d6         lea        rax, qword [r15+3]                          ; CODE XREF=sub_90d0+2302
00000000000099da         cmp        r13, rax
00000000000099dd         jbe        loc_99e5

00000000000099df         mov        byte [r14+r15+3], 0x3f

                     loc_99e5:
00000000000099e5         add        r15, 0x4                                    ; CODE XREF=sub_90d0+2317
00000000000099e9         xor        edx, edx
00000000000099eb         xor        r12d, r12d
00000000000099ee         xor        eax, eax
00000000000099f0         mov        rbp, rcx
00000000000099f3         jmp        sub_8b80+56
                        ; endp

                     loc_99f8:
00000000000099f8         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
00000000000099fa         je         loc_9b88

0000000000009a00         lea        rax, qword [a4096Len+22]                    ; 0x10b06
0000000000009a07         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000009a0c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000009a11         xor        r12d, r12d
0000000000009a14         mov        qword [rsp+0xe8+var_98], 0x0
0000000000009a1d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000009a22         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000009a27         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000009a30         xor        r15d, r15d
0000000000009a33         mov        qword [rsp+0xe8+var_A0], rax
0000000000009a38         jmp        loc_8a63
0000000000009a3d         align      64

                     loc_9a40:
0000000000009a40         mov        rbp, r11                                    ; CODE XREF=sub_90d0+333
0000000000009a43         movzx      eax, byte [rsp+arg_7]
0000000000009a48         jmp        sub_90d0+1097
                        ; endp

                     loc_9a4d:
0000000000009a4d         lea        rax, qword [aFieldUsed+12]                  ; 0xf018, CODE XREF=sub_90d0+1410
0000000000009a54         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000009a59         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000009a5e         xor        r12d, r12d
0000000000009a61         mov        qword [rsp+0xe8+var_98], 0x0
0000000000009a6a         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000009a6f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000009a74         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000009a7d         xor        r15d, r15d
0000000000009a80         mov        qword [rsp+0xe8+var_A0], rax
0000000000009a85         jmp        loc_8a63

                     loc_9a8a:
0000000000009a8a         mov        eax, edx                                    ; CODE XREF=sub_90d0+87

                     loc_9a8c:
0000000000009a8c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_90d0+76, sub_90d0+2721
0000000000009a91         test       rbx, rbx
0000000000009a94         je         loc_9ac2

0000000000009a96         test       al, al
0000000000009a98         je         loc_9ac2

0000000000009a9a         movzx      ecx, byte [rbx]
0000000000009a9d         mov        rax, rbx
0000000000009aa0         test       cl, cl
0000000000009aa2         je         loc_9ac2

0000000000009aa4         mov        rdx, r15
0000000000009aa7         sub        rax, r15

                     loc_9aaa:
0000000000009aaa         cmp        r13, rdx                                    ; CODE XREF=sub_90d0+2541
0000000000009aad         jbe        loc_9ab3

0000000000009aaf         mov        byte [r14+rdx], cl

                     loc_9ab3:
0000000000009ab3         add        rdx, 0x1                                    ; CODE XREF=sub_90d0+2525
0000000000009ab7         movzx      ecx, byte [rax+rdx]
0000000000009abb         test       cl, cl
0000000000009abd         jne        loc_9aaa

0000000000009abf         mov        r15, rdx

                     loc_9ac2:
0000000000009ac2         cmp        r13, r15                                    ; CODE XREF=sub_90d0+2500, sub_90d0+2504, sub_90d0+2514
0000000000009ac5         jbe        loc_9569

0000000000009acb         mov        byte [r14+r15], 0x0
0000000000009ad0         jmp        loc_9569

                     loc_9ad5:
0000000000009ad5         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000009ada         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000009adf         mov        rbp, r11
0000000000009ae2         sete       al
0000000000009ae5         mov        byte [rsp+0xe8+var_DB], bl
0000000000009ae9         jmp        loc_9519

                     loc_9aee:
0000000000009aee         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_90d0+1664
0000000000009af2         mov        rdi, rcx
0000000000009af5         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000009afa         mov        qword [rsp+0xe8+var_80], rax
0000000000009aff         jmp        loc_9756

                     loc_9b04:
0000000000009b04         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_90d0+1707
0000000000009b08         mov        rdi, rcx
0000000000009b0b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000009b10         mov        qword [rsp+0xe8+var_88], rax
0000000000009b15         jmp        loc_9781

                     loc_9b1a:
0000000000009b1a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_8f70+16
0000000000009b1f         mov        rbp, r11
0000000000009b22         mov        eax, edx
0000000000009b24         mov        byte [rsp+arg_5], bl
0000000000009b28         jmp        sub_90d0+1097
                        ; endp

                     loc_9b2d:
0000000000009b2d         sub        rsp, 0x8                                    ; CODE XREF=sub_90d0+98
0000000000009b31         mov        r8d, 0x5
0000000000009b37         mov        rcx, r11
0000000000009b3a         push       qword [rsp+0xf0+var_88]
0000000000009b3e         push       qword [rsp+0xf8+var_80]
0000000000009b42         mov        rdi, r14
0000000000009b45         push       qword [rsp+0x100+var_C8]
0000000000009b49         mov        r9d, dword [rsp+0x108+var_70]
0000000000009b51         mov        rdx, qword [rsp+0x108+var_D8]
0000000000009b56         mov        rsi, qword [rsp+0x108+var_98]
0000000000009b5b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009b60         add        rsp, 0x20
0000000000009b64         mov        r15, rax
0000000000009b67         jmp        loc_9569

                     loc_9b6c:
0000000000009b6c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_90d0+121
0000000000009b71         jmp        loc_9a8c

                     loc_9b76:
0000000000009b76         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_90d0+63
0000000000009b7e         jmp        loc_9519

                     loc_9b83:
0000000000009b83         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_90d0+1197
                        ; endp

                     loc_9b88:
0000000000009b88         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_90d0+2346
0000000000009b8d         jmp        loc_9601

                     loc_9b92:
0000000000009b92         mov        rbp, r11                                    ; CODE XREF=sub_90d0+2264
0000000000009b95         jmp        sub_90d0+1120
                        ; endp

                     loc_9b9a:
0000000000009b9a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_90d0+1332
0000000000009b9f         xor        eax, eax
0000000000009ba1         xor        r12d, r12d
0000000000009ba4         mov        qword [rsp+0xe8+var_98], 0x0
0000000000009bad         jmp        loc_9154

                     loc_9bb2:
0000000000009bb2         mov        rdx, r13                                    ; CODE XREF=sub_90d0+1264
0000000000009bb5         mov        r13, qword [rsp+arg_48]
0000000000009bba         jmp        loc_91b2

                     loc_9bbf:
0000000000009bbf         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000009bc4         align      16                                          ; End of unwind block (FDE at 0x12168)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000009bd0         push       r15                                         ; Begin of unwind block (FDE at 0x121e0), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000009bd2         push       r14
0000000000009bd4         movsxd     r15, edi
0000000000009bd7         push       r13
0000000000009bd9         push       r12
0000000000009bdb         mov        r14, rdx
0000000000009bde         push       rbp
0000000000009bdf         push       rbx
0000000000009be0         mov        rbp, rcx
0000000000009be3         sub        rsp, 0x28
0000000000009be7         mov        qword [rsp+0x58+var_50], rsi
0000000000009bec         call       j___errno_location                          ; __errno_location
0000000000009bf1         mov        r13, rax
0000000000009bf4         mov        eax, dword [rax]
0000000000009bf6         test       r15d, r15d
0000000000009bf9         mov        rbx, qword [slotvec]                        ; slotvec
0000000000009c00         mov        dword [rsp+0x58+var_40], eax
0000000000009c04         js         loc_9d71

0000000000009c0a         cmp        dword [nslots], r15d                        ; nslots
0000000000009c11         jg         loc_9c75

0000000000009c13         cmp        r15d, 0x7fffffff
0000000000009c1a         je         loc_9d76

0000000000009c20         lea        r12d, dword [r15+1]
0000000000009c24         lea        rax, qword [slotvec0]                       ; slotvec0
0000000000009c2b         movsxd     rsi, r12d
0000000000009c2e         shl        rsi, 0x4
0000000000009c32         cmp        rbx, rax
0000000000009c35         je         loc_9d50

0000000000009c3b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
0000000000009c3e         call       xrealloc                                    ; xrealloc
0000000000009c43         mov        rbx, rax
0000000000009c46         mov        qword [slotvec], rax                        ; slotvec

                     loc_9c4d:
0000000000009c4d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000009c54         mov        edx, r12d
0000000000009c57         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000009c59         sub        edx, edi
0000000000009c5b         shl        rdi, 0x4
0000000000009c5f         movsxd     rdx, edx
0000000000009c62         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000009c65         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000009c69         call       j_memset                                    ; memset
0000000000009c6e         mov        dword [nslots], r12d                        ; nslots

                     loc_9c75:
0000000000009c75         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000009c78         shl        r15, 0x4
0000000000009c7c         sub        rsp, 0x8
0000000000009c80         add        rbx, r15
0000000000009c83         lea        r15, qword [rbp+8]
0000000000009c87         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000009c8b         mov        r11, qword [rbx]
0000000000009c8e         mov        r12, qword [rbx+8]
0000000000009c92         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000009c95         or         eax, 0x1
0000000000009c98         mov        dword [rsp+0x60+var_3C], eax
0000000000009c9c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000009c9f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000009ca2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000009ca5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000009ca7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
0000000000009caa         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000009caf         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000009cb2         mov        qword [rsp+0x78+var_48], r11
0000000000009cb7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009cbc         add        rsp, 0x20
0000000000009cc0         mov        r11, qword [rsp+0x58+var_48]
0000000000009cc5         cmp        r11, rax
0000000000009cc8         ja         loc_9d31

0000000000009cca         lea        rsi, qword [rax+1]
0000000000009cce         lea        rax, qword [slot0]                          ; slot0
0000000000009cd5         cmp        r12, rax
0000000000009cd8         mov        qword [rbx], rsi
0000000000009cdb         je         loc_9cef

0000000000009cdd         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000009ce0         mov        qword [rsp+0x58+var_48], rsi
0000000000009ce5         call       j_free                                      ; free
0000000000009cea         mov        rsi, qword [rsp+0x58+var_48]

                     loc_9cef:
0000000000009cef         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000009cf2         mov        qword [rsp+0x58+var_48], rsi
0000000000009cf7         call       xmalloc                                     ; xmalloc
0000000000009cfc         sub        rsp, 0x8
0000000000009d00         mov        qword [rbx+8], rax
0000000000009d04         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000009d08         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000009d0b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000009d0e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000009d11         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000009d13         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000009d18         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
0000000000009d1b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000009d20         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000009d25         mov        r12, rax
0000000000009d28         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009d2d         add        rsp, 0x20

                     loc_9d31:
0000000000009d31         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000009d35         mov        dword [r13], eax
0000000000009d39         add        rsp, 0x28
0000000000009d3d         mov        rax, r12
0000000000009d40         pop        rbx
0000000000009d41         pop        rbp
0000000000009d42         pop        r12
0000000000009d44         pop        r13
0000000000009d46         pop        r14
0000000000009d48         pop        r15
0000000000009d4a         ret
                        ; endp
0000000000009d4b         align      16

                     loc_9d50:
0000000000009d50         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000009d52         call       xrealloc                                    ; xrealloc
0000000000009d57         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
0000000000009d5f         mov        rbx, rax
0000000000009d62         mov        qword [slotvec], rax                        ; slotvec
0000000000009d69         movups     xmmword [rax], xmm0
0000000000009d6c         jmp        loc_9c4d

                     loc_9d71:
0000000000009d71         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_9d76:
0000000000009d76         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d7b:
0000000000009d7b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0x121e0)
                     clone_quoting_options:
0000000000009d80         push       r12                                         ; Begin of unwind block (FDE at 0x1224c)
0000000000009d82         push       rbp
0000000000009d83         push       rbx
0000000000009d84         mov        rbx, rdi
0000000000009d87         call       j___errno_location                          ; __errno_location
0000000000009d8c         mov        r12d, dword [rax]
0000000000009d8f         mov        rbp, rax
0000000000009d92         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000009d99         test       rbx, rbx
0000000000009d9c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000009da1         cmove      rbx, rax
0000000000009da5         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000009da8         call       xmemdup                                     ; xmemdup
0000000000009dad         mov        dword [rbp], r12d
0000000000009db1         pop        rbx
0000000000009db2         pop        rbp
0000000000009db3         pop        r12
0000000000009db5         ret
                        ; endp
0000000000009db6         align      64                                          ; End of unwind block (FDE at 0x1224c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000009dc0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x12278), default_quoting_options
0000000000009dc7         test       rdi, rdi
0000000000009dca         cmove      rdi, rax
0000000000009dce         mov        eax, dword [rdi]
0000000000009dd0         ret
                        ; endp
0000000000009dd1         align      32                                          ; End of unwind block (FDE at 0x12278)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000009de0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x1228c), default_quoting_options
0000000000009de7         test       rdi, rdi
0000000000009dea         cmove      rdi, rax
0000000000009dee         mov        dword [rdi], esi
0000000000009df0         ret
                        ; endp
0000000000009df1         align      512                                         ; End of unwind block (FDE at 0x1228c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000009e00         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x122a0), default_quoting_options
0000000000009e07         test       rdi, rdi
0000000000009e0a         mov        ecx, esi
0000000000009e0c         cmove      rdi, rax
0000000000009e10         mov        eax, esi
0000000000009e12         and        ecx, 0x1f
0000000000009e15         shr        al, 0x5
0000000000009e18         movzx      eax, al
0000000000009e1b         lea        rdi, qword [rdi+rax*4+8]
0000000000009e20         mov        esi, dword [rdi]
0000000000009e22         mov        eax, esi
0000000000009e24         shr        eax, cl
0000000000009e26         xor        edx, eax
0000000000009e28         and        eax, 0x1
0000000000009e2b         and        edx, 0x1
0000000000009e2e         shl        edx, cl
0000000000009e30         xor        edx, esi
0000000000009e32         mov        dword [rdi], edx
0000000000009e34         ret
                        ; endp
0000000000009e35         align      64                                          ; End of unwind block (FDE at 0x122a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000009e40         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x122b4), default_quoting_options
0000000000009e47         test       rdi, rdi
0000000000009e4a         cmove      rdi, rax
0000000000009e4e         mov        eax, dword [rdi+4]
0000000000009e51         mov        dword [rdi+4], esi
0000000000009e54         ret
                        ; endp
0000000000009e55         align      32                                          ; End of unwind block (FDE at 0x122b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000009e60         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x122c8), default_quoting_options
0000000000009e67         test       rdi, rdi
0000000000009e6a         cmove      rdi, rax
0000000000009e6e         test       rsi, rsi
0000000000009e71         mov        dword [rdi], 0xa
0000000000009e77         je         loc_9e87

0000000000009e79         test       rdx, rdx
0000000000009e7c         je         loc_9e87

0000000000009e7e         mov        qword [rdi+0x28], rsi
0000000000009e82         mov        qword [rdi+0x30], rdx
0000000000009e86         ret
                        ; endp

                     loc_9e87:
0000000000009e87         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
0000000000009e8b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000009e90         push       r15                                         ; End of unwind block (FDE at 0x122c8), Begin of unwind block (FDE at 0x122dc)
0000000000009e92         push       r14
0000000000009e94         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000009e9b         push       r13
0000000000009e9d         push       r12
0000000000009e9f         mov        r13, rdi
0000000000009ea2         push       rbp
0000000000009ea3         push       rbx
0000000000009ea4         mov        rbx, r8
0000000000009ea7         mov        r14, rsi
0000000000009eaa         mov        r15, rdx
0000000000009ead         sub        rsp, 0x18
0000000000009eb1         test       r8, r8
0000000000009eb4         cmove      rbx, rax
0000000000009eb8         mov        qword [rsp+0x48+var_40], rcx
0000000000009ebd         call       j___errno_location                          ; __errno_location
0000000000009ec2         mov        r12d, dword [rax]
0000000000009ec5         mov        rbp, rax
0000000000009ec8         lea        rax, qword [rbx+8]
0000000000009ecc         sub        rsp, 0x8
0000000000009ed0         mov        r9d, dword [rbx+4]
0000000000009ed4         push       qword [rbx+0x30]
0000000000009ed7         mov        r8d, dword [rbx]
0000000000009eda         push       qword [rbx+0x28]
0000000000009edd         mov        rdx, r15
0000000000009ee0         push       rax
0000000000009ee1         mov        rcx, qword [rsp+0x68+var_40]
0000000000009ee6         mov        rsi, r14
0000000000009ee9         mov        rdi, r13
0000000000009eec         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009ef1         mov        dword [rbp], r12d
0000000000009ef5         add        rsp, 0x38
0000000000009ef9         pop        rbx
0000000000009efa         pop        rbp
0000000000009efb         pop        r12
0000000000009efd         pop        r13
0000000000009eff         pop        r14
0000000000009f01         pop        r15
0000000000009f03         ret
                        ; endp
0000000000009f04         align      16                                          ; End of unwind block (FDE at 0x122dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000009f10         push       r15                                         ; Begin of unwind block (FDE at 0x12330), CODE XREF=quotearg_alloc+5
0000000000009f12         push       r14
0000000000009f14         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000009f1b         push       r13
0000000000009f1d         push       r12
0000000000009f1f         mov        r12, rdx
0000000000009f22         push       rbp
0000000000009f23         push       rbx
0000000000009f24         mov        rbx, rcx
0000000000009f27         mov        r14, rdi
0000000000009f2a         mov        r15, rsi
0000000000009f2d         sub        rsp, 0x38
0000000000009f31         test       rcx, rcx
0000000000009f34         cmove      rbx, rax
0000000000009f38         xor        ebp, ebp
0000000000009f3a         call       j___errno_location                          ; __errno_location
0000000000009f3f         test       r12, r12
0000000000009f42         mov        r13, rax
0000000000009f45         mov        eax, dword [rax]
0000000000009f47         sete       bpl
0000000000009f4b         or         ebp, dword [rbx+4]
0000000000009f4e         lea        r10, qword [rbx+8]
0000000000009f52         sub        rsp, 0x8
0000000000009f56         mov        r8d, dword [rbx]
0000000000009f59         mov        rcx, r15
0000000000009f5c         mov        dword [rsp+0x70+var_5C], eax
0000000000009f60         push       qword [rbx+0x30]
0000000000009f63         mov        rdx, r14
0000000000009f66         push       qword [rbx+0x28]
0000000000009f69         push       r10
0000000000009f6b         xor        esi, esi
0000000000009f6d         mov        r9d, ebp
0000000000009f70         xor        edi, edi
0000000000009f72         mov        qword [rsp+0x88+var_48], r10
0000000000009f77         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009f7c         lea        rsi, qword [rax+1]
0000000000009f80         mov        qword [rsp+0x88+var_40], rax
0000000000009f85         add        rsp, 0x20
0000000000009f89         mov        rdi, rsi
0000000000009f8c         mov        qword [rsp+0x68+var_50], rsi
0000000000009f91         call       xmalloc                                     ; xmalloc
0000000000009f96         mov        qword [rsp+0x68+var_58], rax
0000000000009f9b         sub        rsp, 0x8
0000000000009f9f         push       qword [rbx+0x30]
0000000000009fa2         push       qword [rbx+0x28]
0000000000009fa5         mov        r10, qword [rsp+0x80+var_48]
0000000000009faa         mov        r9d, ebp
0000000000009fad         mov        r8d, dword [rbx]
0000000000009fb0         mov        rcx, r15
0000000000009fb3         mov        rdx, r14
0000000000009fb6         mov        rdi, rax
0000000000009fb9         push       r10
0000000000009fbb         mov        rsi, qword [rsp+0x88+var_50]
0000000000009fc0         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009fc5         mov        eax, dword [rsp+0x88+var_5C]
0000000000009fc9         add        rsp, 0x20
0000000000009fcd         test       r12, r12
0000000000009fd0         mov        dword [r13], eax
0000000000009fd4         je         loc_9fdf

0000000000009fd6         mov        r11, qword [rsp+0x68+var_40]
0000000000009fdb         mov        qword [r12], r11

                     loc_9fdf:
0000000000009fdf         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000009fe4         add        rsp, 0x38
0000000000009fe8         pop        rbx
0000000000009fe9         pop        rbp
0000000000009fea         pop        r12
0000000000009fec         pop        r13
0000000000009fee         pop        r14
0000000000009ff0         pop        r15
0000000000009ff2         ret
                        ; endp
0000000000009ff3         align      8192                                        ; End of unwind block (FDE at 0x12330)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
000000000000a000         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x1239c), DATA XREF=canonicalize_filename_mode+777
000000000000a003         xor        edx, edx
000000000000a005         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000a00a         align      16                                          ; End of unwind block (FDE at 0x1239c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
000000000000a010         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0x123b0), nslots
000000000000a016         push       r12
000000000000a018         mov        r12, qword [slotvec]                        ; slotvec
000000000000a01f         push       rbp
000000000000a020         push       rbx
000000000000a021         cmp        eax, 0x1
000000000000a024         jle        loc_a051

000000000000a026         sub        eax, 0x2
000000000000a029         lea        rbx, qword [r12+0x18]
000000000000a02e         shl        rax, 0x4
000000000000a032         lea        rbp, qword [r12+rax+0x28]
000000000000a037         nop        word [rax+rax]

                     loc_a040:
000000000000a040         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
000000000000a043         add        rbx, 0x10
000000000000a047         call       j_free                                      ; free
000000000000a04c         cmp        rbx, rbp
000000000000a04f         jne        loc_a040

                     loc_a051:
000000000000a051         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
000000000000a056         lea        rbx, qword [slot0]                          ; slot0
000000000000a05d         cmp        rdi, rbx
000000000000a060         je         loc_a079

000000000000a062         call       j_free                                      ; free
000000000000a067         mov        qword [slotvec0], 0x100                     ; slotvec0
000000000000a072         mov        qword [slotvec0+8], rbx                     ; 0x2142d8

                     loc_a079:
000000000000a079         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
000000000000a080         cmp        r12, rbx
000000000000a083         je         loc_a094

000000000000a085         mov        rdi, r12                                    ; argument "__ptr" for method j_free
000000000000a088         call       j_free                                      ; free
000000000000a08d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_a094:
000000000000a094         pop        rbx                                         ; CODE XREF=quotearg_free+115
000000000000a095         mov        dword [nslots], 0x1                         ; nslots
000000000000a09f         pop        rbp
000000000000a0a0         pop        r12
000000000000a0a2         ret
                        ; endp
000000000000a0a3         align      16                                          ; End of unwind block (FDE at 0x123b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
000000000000a0b0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x123dc), default_quoting_options
000000000000a0b7         mov        rdx, 0xffffffffffffffff
000000000000a0be         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a0c3         align      16                                          ; End of unwind block (FDE at 0x123dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
000000000000a0d0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x123f0), default_quoting_options
000000000000a0d7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a0dc         align      32                                          ; End of unwind block (FDE at 0x123f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
000000000000a0e0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x12404), default_quoting_options
000000000000a0e7         mov        rsi, rdi
000000000000a0ea         mov        rdx, 0xffffffffffffffff
000000000000a0f1         xor        edi, edi
000000000000a0f3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a0f8         align      256                                         ; End of unwind block (FDE at 0x12404)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
000000000000a100         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0x12418), default_quoting_options
000000000000a107         mov        rdx, rsi
000000000000a10a         mov        rsi, rdi
000000000000a10d         xor        edi, edi
000000000000a10f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a114         align      32                                          ; End of unwind block (FDE at 0x12418)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
000000000000a120         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1242c), CODE XREF=argmatch_invalid+64
000000000000a124         mov        rax, rdx
000000000000a127         mov        rdx, qword [fs:0x28]
000000000000a130         mov        qword [rsp+0x48+var_10], rdx
000000000000a135         xor        edx, edx
000000000000a137         cmp        esi, 0xa
000000000000a13a         je         loc_a1a4

000000000000a13c         mov        dword [rsp+0x48+var_48], esi
000000000000a13f         mov        rcx, rsp
000000000000a142         mov        rdx, 0xffffffffffffffff
000000000000a149         mov        rsi, rax
000000000000a14c         mov        qword [rsp+0x48+var_44], 0x0
000000000000a155         mov        qword [rsp+0x48+var_3C], 0x0
000000000000a15e         mov        qword [rsp+0x48+var_34], 0x0
000000000000a167         mov        qword [rsp+0x48+var_2C], 0x0
000000000000a170         mov        qword [rsp+0x48+var_24], 0x0
000000000000a179         mov        qword [rsp+0x48+var_1C], 0x0
000000000000a182         mov        dword [rsp+0x48+var_14], 0x0
000000000000a18a         call       quotearg_n_options                          ; quotearg_n_options
000000000000a18f         mov        rcx, qword [rsp+0x48+var_10]
000000000000a194         xor        rcx, qword [fs:0x28]
000000000000a19d         jne        loc_a1a9

000000000000a19f         add        rsp, 0x48
000000000000a1a3         ret
                        ; endp

                     loc_a1a4:
000000000000a1a4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_a1a9:
000000000000a1a9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000a1ae         align      16                                          ; End of unwind block (FDE at 0x1242c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
000000000000a1b0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x12448), CODE XREF=quotearg_style_mem+10
000000000000a1b4         mov        rax, rdx
000000000000a1b7         mov        rdx, rcx
000000000000a1ba         mov        rcx, qword [fs:0x28]
000000000000a1c3         mov        qword [rsp+0x48+var_10], rcx
000000000000a1c8         xor        ecx, ecx
000000000000a1ca         cmp        esi, 0xa
000000000000a1cd         je         loc_a230

000000000000a1cf         mov        dword [rsp+0x48+var_48], esi
000000000000a1d2         mov        rcx, rsp
000000000000a1d5         mov        rsi, rax
000000000000a1d8         mov        qword [rsp+0x48+var_44], 0x0
000000000000a1e1         mov        qword [rsp+0x48+var_3C], 0x0
000000000000a1ea         mov        qword [rsp+0x48+var_34], 0x0
000000000000a1f3         mov        qword [rsp+0x48+var_2C], 0x0
000000000000a1fc         mov        qword [rsp+0x48+var_24], 0x0
000000000000a205         mov        qword [rsp+0x48+var_1C], 0x0
000000000000a20e         mov        dword [rsp+0x48+var_14], 0x0
000000000000a216         call       quotearg_n_options                          ; quotearg_n_options
000000000000a21b         mov        rdx, qword [rsp+0x48+var_10]
000000000000a220         xor        rdx, qword [fs:0x28]
000000000000a229         jne        loc_a235

000000000000a22b         add        rsp, 0x48
000000000000a22f         ret
                        ; endp

                     loc_a230:
000000000000a230         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_a235:
000000000000a235         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
000000000000a23a         align      64                                          ; End of unwind block (FDE at 0x12448)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
000000000000a240         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0x12464), CODE XREF=main+5120, find_mount_point+439, find_mount_point+710, find_mount_point+776, find_mount_point+844
000000000000a243         mov        esi, edi
000000000000a245         xor        edi, edi
000000000000a247         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
000000000000a24c         align      16                                          ; End of unwind block (FDE at 0x12464)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
000000000000a250         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x12478)
000000000000a253         mov        rdx, rsi
000000000000a256         mov        esi, edi
000000000000a258         xor        edi, edi
000000000000a25a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
000000000000a25f         align      32                                          ; End of unwind block (FDE at 0x12478)

                     quotearg_char_mem:
000000000000a260         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x1248c), CODE XREF=quotearg_char+11
000000000000a264         mov        ecx, edx
000000000000a266         mov        rax, qword [fs:0x28]
000000000000a26f         mov        qword [rsp+0x48+var_10], rax
000000000000a274         xor        eax, eax
000000000000a276         mov        rax, qword [qword_214570]                   ; qword_214570
000000000000a27d         mov        r8, rsp
000000000000a280         and        ecx, 0x1f
000000000000a283         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000a28b         mov        qword [rsp+0x48+var_18], rax
000000000000a290         mov        eax, edx
000000000000a292         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000a296         shr        al, 0x5
000000000000a299         movzx      eax, al
000000000000a29c         lea        r9, qword [r8+rax*4+8]
000000000000a2a1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x214550
000000000000a2a9         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000a2ae         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x214560
000000000000a2b6         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000a2bb         mov        edx, dword [r9]
000000000000a2be         mov        eax, edx
000000000000a2c0         shr        eax, cl
000000000000a2c2         not        eax
000000000000a2c4         and        eax, 0x1
000000000000a2c7         shl        eax, cl
000000000000a2c9         mov        rcx, r8
000000000000a2cc         xor        eax, edx
000000000000a2ce         mov        rdx, rsi
000000000000a2d1         mov        rsi, rdi
000000000000a2d4         mov        dword [r9], eax
000000000000a2d7         xor        edi, edi
000000000000a2d9         call       quotearg_n_options                          ; quotearg_n_options
000000000000a2de         mov        rsi, qword [rsp+0x48+var_10]
000000000000a2e3         xor        rsi, qword [fs:0x28]
000000000000a2ec         jne        loc_a2f3

000000000000a2ee         add        rsp, 0x48
000000000000a2f2         ret
                        ; endp

                     loc_a2f3:
000000000000a2f3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
000000000000a2f8         align      256                                         ; End of unwind block (FDE at 0x1248c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
000000000000a300         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0x124a8)
000000000000a304         mov        rsi, 0xffffffffffffffff
000000000000a30b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
000000000000a310         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0x124a8), Begin of unwind block (FDE at 0x124bc), CODE XREF=close_stdout+101
000000000000a315         mov        rsi, 0xffffffffffffffff
000000000000a31c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000a321         align      16                                          ; End of unwind block (FDE at 0x124bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
000000000000a330         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0x124d0)
000000000000a335         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
000000000000a33a         align      64                                          ; End of unwind block (FDE at 0x124d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
000000000000a340         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x124e4), CODE XREF=main+1586, main+5262, get_dev+311
000000000000a344         mov        rax, rdx
000000000000a347         mov        rdx, qword [fs:0x28]
000000000000a350         mov        qword [rsp+0x48+var_10], rdx
000000000000a355         xor        edx, edx
000000000000a357         cmp        esi, 0xa
000000000000a35a         je         loc_a3c4

000000000000a35c         mov        dword [rsp+0x48+var_48], esi
000000000000a35f         mov        rcx, rsp
000000000000a362         mov        rdx, 0xffffffffffffffff
000000000000a369         mov        rsi, rax
000000000000a36c         mov        qword [rsp+0x48+var_44], 0x0
000000000000a375         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000a37e         mov        qword [rsp+0x48+var_34], 0x0
000000000000a387         mov        qword [rsp+0x48+var_2C], 0x0
000000000000a390         mov        qword [rsp+0x48+var_24], 0x0
000000000000a399         mov        qword [rsp+0x48+var_1C], 0x0
000000000000a3a2         mov        dword [rsp+0x48+var_14], 0x0
000000000000a3aa         call       quotearg_n_options                          ; quotearg_n_options
000000000000a3af         mov        rcx, qword [rsp+0x48+var_10]
000000000000a3b4         xor        rcx, qword [fs:0x28]
000000000000a3bd         jne        loc_a3c9

000000000000a3bf         add        rsp, 0x48
000000000000a3c3         ret
                        ; endp

                     loc_a3c4:
000000000000a3c4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_a3c9:
000000000000a3c9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000a3ce         align      16                                          ; End of unwind block (FDE at 0x124e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
000000000000a3d0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0x12500), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
000000000000a3d4         mov        r9, rcx
000000000000a3d7         mov        rcx, qword [qword_214570]                   ; qword_214570
000000000000a3de         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000a3e6         mov        rax, qword [fs:0x28]
000000000000a3ef         mov        qword [rsp+0x48+var_10], rax
000000000000a3f4         xor        eax, eax
000000000000a3f6         movaps     xmmword [rsp+0x48+var_48], xmm0
000000000000a3fa         test       rsi, rsi
000000000000a3fd         mov        qword [rsp+0x48+var_18], rcx
000000000000a402         mov        dword [rsp+0x48+var_48], 0xa
000000000000a409         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x214550
000000000000a411         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000a416         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x214560
000000000000a41e         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000a423         je         loc_a457

000000000000a425         test       rdx, rdx
000000000000a428         je         loc_a457

000000000000a42a         mov        qword [rsp+0x48+var_20], rsi
000000000000a42f         mov        qword [rsp+0x48+var_18], rdx
000000000000a434         mov        rcx, rsp
000000000000a437         mov        rdx, r8
000000000000a43a         mov        rsi, r9
000000000000a43d         call       quotearg_n_options                          ; quotearg_n_options
000000000000a442         mov        rdi, qword [rsp+0x48+var_10]
000000000000a447         xor        rdi, qword [fs:0x28]
000000000000a450         jne        loc_a45c

000000000000a452         add        rsp, 0x48
000000000000a456         ret
                        ; endp

                     loc_a457:
000000000000a457         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_a45c:
000000000000a45c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
000000000000a461         align      16                                          ; End of unwind block (FDE at 0x12500)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
000000000000a470         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0x1251c)
000000000000a477         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000a47c         align      128                                         ; End of unwind block (FDE at 0x1251c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
000000000000a480         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0x12530)
000000000000a483         mov        r8, 0xffffffffffffffff
000000000000a48a         mov        rdx, rsi
000000000000a48d         mov        rsi, rdi
000000000000a490         xor        edi, edi
000000000000a492         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000a497         align      32                                          ; End of unwind block (FDE at 0x12530)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
000000000000a4a0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0x12544)
000000000000a4a3         mov        rcx, rdx
000000000000a4a6         mov        rdx, rsi
000000000000a4a9         mov        rsi, rdi
000000000000a4ac         xor        edi, edi
000000000000a4ae         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000a4b3         align      64                                          ; End of unwind block (FDE at 0x12544)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
000000000000a4c0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x12558), quote_quoting_options
000000000000a4c7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a4cc         align      16                                          ; End of unwind block (FDE at 0x12558)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
000000000000a4d0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x1256c), quote_quoting_options
000000000000a4d7         mov        rdx, rsi
000000000000a4da         mov        rsi, rdi
000000000000a4dd         xor        edi, edi
000000000000a4df         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a4e4         align      16                                          ; End of unwind block (FDE at 0x1256c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
000000000000a4f0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x12580), quote_quoting_options, CODE XREF=argmatch_invalid+46
000000000000a4f7         mov        rdx, 0xffffffffffffffff
000000000000a4fe         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a503         align      16                                          ; End of unwind block (FDE at 0x12580)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
000000000000a510         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0x12594), quote_quoting_options, CODE XREF=main+1241, decode_output_arg+113, decode_output_arg+307, argmatch_valid+90, argmatch_valid+169
000000000000a517         mov        rsi, rdi
000000000000a51a         mov        rdx, 0xffffffffffffffff
000000000000a521         xor        edi, edi
000000000000a523         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000a528         align      16                                          ; End of unwind block (FDE at 0x12594)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_150: int64_t, -336
        ;    var_158: int64_t, -344


                     same_nameat.part.0:
000000000000a530         push       r13                                         ; Begin of unwind block (FDE at 0x125ac), CODE XREF=same_nameat+141
000000000000a532         push       r12
000000000000a534         mov        r13d, edi
000000000000a537         push       rbp
000000000000a538         push       rbx
000000000000a539         mov        rdi, rsi
000000000000a53c         mov        ebp, edx
000000000000a53e         mov        r12, rcx
000000000000a541         sub        rsp, 0x138
000000000000a548         mov        rax, qword [fs:0x28]
000000000000a551         mov        qword [rsp+0x158+var_30], rax
000000000000a559         xor        eax, eax
000000000000a55b         call       dir_name                                    ; dir_name
000000000000a560         mov        rcx, rsp                                    ; argument "__stat_buf" for method j___fxstatat
000000000000a563         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000a569         mov        rdx, rax                                    ; argument "__filename" for method j___fxstatat
000000000000a56c         mov        esi, r13d                                   ; argument "__fildes" for method j___fxstatat
000000000000a56f         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000a574         mov        rbx, rax
000000000000a577         call       j___fxstatat                                ; __fxstatat
000000000000a57c         test       eax, eax
000000000000a57e         jne        loc_a630

                     loc_a584:
000000000000a584         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=same_nameat.part.0+285
000000000000a587         call       j_free                                      ; free
000000000000a58c         mov        rdi, r12
000000000000a58f         call       dir_name                                    ; dir_name
000000000000a594         lea        rcx, qword [rsp+0x158+var_C8]               ; argument "__stat_buf" for method j___fxstatat
000000000000a59c         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
000000000000a5a2         mov        rdx, rax                                    ; argument "__filename" for method j___fxstatat
000000000000a5a5         mov        esi, ebp                                    ; argument "__fildes" for method j___fxstatat
000000000000a5a7         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
000000000000a5ac         mov        rbx, rax
000000000000a5af         call       j___fxstatat                                ; __fxstatat
000000000000a5b4         test       eax, eax
000000000000a5b6         jne        loc_a608

                     loc_a5b8:
000000000000a5b8         xor        ebp, ebp                                    ; CODE XREF=same_nameat.part.0+245
000000000000a5ba         mov        rax, qword [rsp+0x158+var_C0]
000000000000a5c2         cmp        qword [rsp+0x158+var_150], rax
000000000000a5c7         jne        loc_a5d9

000000000000a5c9         mov        rax, qword [rsp+0x158+var_C8]
000000000000a5d1         cmp        qword [rsp+0x158+var_158], rax
000000000000a5d5         sete       bpl

                     loc_a5d9:
000000000000a5d9         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=same_nameat.part.0+151
000000000000a5dc         call       j_free                                      ; free
000000000000a5e1         mov        rdx, qword [rsp+0x158+var_30]
000000000000a5e9         xor        rdx, qword [fs:0x28]
000000000000a5f2         mov        eax, ebp
000000000000a5f4         jne        loc_a652

000000000000a5f6         add        rsp, 0x138
000000000000a5fd         pop        rbx
000000000000a5fe         pop        rbp
000000000000a5ff         pop        r12
000000000000a601         pop        r13
000000000000a603         ret
                        ; endp
000000000000a604         align      8

                     loc_a608:
000000000000a608         call       j___errno_location                          ; __errno_location, CODE XREF=same_nameat.part.0+134
000000000000a60d         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000a60f         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x10c77
000000000000a616         mov        rcx, rbx
000000000000a619         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000a61e         xor        eax, eax
000000000000a620         call       j_error                                     ; error
000000000000a625         jmp        loc_a5b8
000000000000a627         align      16

                     loc_a630:
000000000000a630         call       j___errno_location                          ; __errno_location, CODE XREF=same_nameat.part.0+78
000000000000a635         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000a637         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x10c77
000000000000a63e         mov        rcx, rbx
000000000000a641         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000a646         xor        eax, eax
000000000000a648         call       j_error                                     ; error
000000000000a64d         jmp        loc_a584

                     loc_a652:
000000000000a652         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=same_nameat.part.0+196
                        ; endp
000000000000a657         align      32                                          ; End of unwind block (FDE at 0x125ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60


                     same_nameat:
000000000000a660         push       r15                                         ; Begin of unwind block (FDE at 0x125e8), CODE XREF=same_name+13
000000000000a662         push       r14
000000000000a664         mov        r15d, edx
000000000000a667         push       r13
000000000000a669         push       r12
000000000000a66b         push       rbp
000000000000a66c         push       rbx
000000000000a66d         mov        rbp, rcx
000000000000a670         mov        rbx, rsi
000000000000a673         sub        rsp, 0x18
000000000000a677         mov        dword [rsp+0x48+var_3C], edi
000000000000a67b         mov        rdi, rsi
000000000000a67e         call       last_component                              ; last_component
000000000000a683         mov        rdi, rbp
000000000000a686         mov        r12, rax
000000000000a689         call       last_component                              ; last_component
000000000000a68e         mov        rdi, r12
000000000000a691         mov        r13, rax
000000000000a694         call       base_len                                    ; base_len
000000000000a699         mov        rdi, r13
000000000000a69c         mov        r14, rax
000000000000a69f         call       base_len                                    ; base_len
000000000000a6a4         cmp        r14, rax
000000000000a6a7         je         loc_a6c0

                     loc_a6a9:
000000000000a6a9         add        rsp, 0x18                                   ; CODE XREF=same_nameat+112
000000000000a6ad         xor        eax, eax
000000000000a6af         pop        rbx
000000000000a6b0         pop        rbp
000000000000a6b1         pop        r12
000000000000a6b3         pop        r13
000000000000a6b5         pop        r14
000000000000a6b7         pop        r15
000000000000a6b9         ret
                        ; endp
000000000000a6ba         align      64

                     loc_a6c0:
000000000000a6c0         mov        rdx, r14                                    ; argument "__n" for method j_memcmp, CODE XREF=same_nameat+71
000000000000a6c3         mov        rsi, r13                                    ; argument "__s2" for method j_memcmp
000000000000a6c6         mov        rdi, r12                                    ; argument "__s1" for method j_memcmp
000000000000a6c9         call       j_memcmp                                    ; memcmp
000000000000a6ce         test       eax, eax
000000000000a6d0         jne        loc_a6a9

000000000000a6d2         mov        edi, dword [rsp+0x48+var_3C]
000000000000a6d6         add        rsp, 0x18
000000000000a6da         mov        rcx, rbp
000000000000a6dd         mov        edx, r15d
000000000000a6e0         mov        rsi, rbx
000000000000a6e3         pop        rbx
000000000000a6e4         pop        rbp
000000000000a6e5         pop        r12
000000000000a6e7         pop        r13
000000000000a6e9         pop        r14
000000000000a6eb         pop        r15
000000000000a6ed         jmp        same_nameat.part.0                          ; same_nameat.part.0
                        ; endp
000000000000a6f2         align      256                                         ; End of unwind block (FDE at 0x125e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     same_name:
000000000000a700         mov        edx, 0xffffff9c                             ; Begin of unwind block (FDE at 0x12648), CODE XREF=triple_compare+36
000000000000a705         mov        rcx, rsi
000000000000a708         mov        rsi, rdi
000000000000a70b         mov        edi, edx
000000000000a70d         jmp        same_nameat                                 ; same_nameat
                        ; endp
000000000000a712         align      32                                          ; End of unwind block (FDE at 0x12648)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     save_cwd:
000000000000a720         push       rbx                                         ; Begin of unwind block (FDE at 0x1265c), CODE XREF=find_mount_point+51
000000000000a721         mov        rbx, rdi
000000000000a724         mov        qword [rdi+8], 0x0
000000000000a72c         lea        rdi, qword [aCannotChangeTo+31]             ; 0xff0c
000000000000a733         xor        eax, eax
000000000000a735         mov        esi, 0x80000
000000000000a73a         call       open_safer                                  ; open_safer
000000000000a73f         mov        edx, eax
000000000000a741         mov        dword [rbx], eax
000000000000a743         xor        eax, eax
000000000000a745         test       edx, edx
000000000000a747         js         loc_a750

000000000000a749         pop        rbx
000000000000a74a         ret
                        ; endp
000000000000a74b         align      16

                     loc_a750:
000000000000a750         xor        esi, esi                                    ; argument "__size" for method j_getcwd, CODE XREF=save_cwd+39
000000000000a752         xor        edi, edi                                    ; argument "__buf" for method j_getcwd
000000000000a754         call       j_getcwd                                    ; getcwd
000000000000a759         test       rax, rax
000000000000a75c         mov        qword [rbx+8], rax
000000000000a760         sete       al
000000000000a763         movzx      eax, al
000000000000a766         neg        eax
000000000000a768         pop        rbx
000000000000a769         ret
                        ; endp
000000000000a76a         align      16                                          ; End of unwind block (FDE at 0x1265c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     restore_cwd:
000000000000a770         mov        eax, dword [rdi]                            ; Begin of unwind block (FDE at 0x1267c), CODE XREF=find_mount_point+492
000000000000a772         test       eax, eax
000000000000a774         js         loc_a780

000000000000a776         mov        edi, eax                                    ; argument "__fd" for method j_fchdir
000000000000a778         jmp        j_fchdir                                    ; fchdir
                        ; endp
000000000000a77d         align      128

                     loc_a780:
000000000000a780         mov        rdi, qword [rdi+8]                          ; CODE XREF=restore_cwd+4
000000000000a784         jmp        chdir_long                                  ; chdir_long
                        ; endp
000000000000a789         align      16                                          ; End of unwind block (FDE at 0x1267c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_cwd:
000000000000a790         push       rbx                                         ; Begin of unwind block (FDE at 0x12690), CODE XREF=find_mount_point+508
000000000000a791         mov        rbx, rdi
000000000000a794         mov        edi, dword [rdi]
000000000000a796         test       edi, edi
000000000000a798         js         loc_a79f

000000000000a79a         call       j_close                                     ; close

                     loc_a79f:
000000000000a79f         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free, CODE XREF=free_cwd+8
000000000000a7a3         pop        rbx
000000000000a7a4         jmp        j_free                                      ; free
                        ; endp
000000000000a7a9         align      16                                          ; End of unwind block (FDE at 0x12690)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
000000000000a7b0         push       r15                                         ; Begin of unwind block (FDE at 0x126ac), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
000000000000a7b2         push       r14
000000000000a7b4         push       r13
000000000000a7b6         push       r12
000000000000a7b8         mov        r12, r9
000000000000a7bb         push       rbp
000000000000a7bc         push       rbx
000000000000a7bd         mov        rbp, rdi
000000000000a7c0         mov        rbx, r8
000000000000a7c3         sub        rsp, 0x28
000000000000a7c7         test       rsi, rsi
000000000000a7ca         je         loc_a8e8

000000000000a7d0         mov        r8, rdx
000000000000a7d3         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000a7da         mov        r9, rcx
000000000000a7dd         xor        eax, eax
000000000000a7df         mov        rcx, rsi
000000000000a7e2         mov        esi, 0x1
000000000000a7e7         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_a7ec:
000000000000a7ec         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x105bb, CODE XREF=version_etc_arn+337
000000000000a7f3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a7f5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a7fa         call       j_dcgettext                                 ; dcgettext
000000000000a7ff         lea        rdx, qword [version_etc_copyright]          ; version_etc_copyright
000000000000a806         mov        rcx, rax
000000000000a809         mov        r8d, 0x7e3
000000000000a80f         mov        esi, 0x1
000000000000a814         mov        rdi, rbp
000000000000a817         xor        eax, eax
000000000000a819         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a81e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
000000000000a825         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a827         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a82c         call       j_dcgettext                                 ; dcgettext
000000000000a831         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
000000000000a834         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000a837         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000a83c         cmp        r12, 0x9
000000000000a840         ja         loc_ab80

000000000000a846         lea        rdx, qword [switch_table_108a4]             ; switch_table_108a4
000000000000a84d         movsxd     rax, dword [rdx+r12*4]
000000000000a851         add        rax, rdx
000000000000a854         jmp        rax                                         ; switch statement using table at 0x108a4, with 10 cases, 0xa860,0xa8d6,0xa910,0xa968,0xa9a8,0xa9f0,0xaa40,0xaa98,0xaac8,0xab30
000000000000a856         align      32

                     loc_a860:
000000000000a860         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
000000000000a864         mov        rax, qword [rbx+0x10]
000000000000a868         lea        rsi, qword [aWrittenBySSSns_107b8]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000a86f         mov        r8, qword [rbx+8]
000000000000a873         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a878         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a87a         mov        r13, qword [rbx+0x30]
000000000000a87e         mov        r12, qword [rbx+0x28]
000000000000a882         mov        qword [rsp+0x58+var_48], r9
000000000000a887         mov        r15, qword [rbx+0x20]
000000000000a88b         mov        r14, qword [rbx+0x18]
000000000000a88f         mov        qword [rsp+0x58+var_58], rax
000000000000a893         mov        qword [rsp+0x58+var_50], r8
000000000000a898         mov        rbx, qword [rbx]
000000000000a89b         call       j_dcgettext                                 ; dcgettext
000000000000a8a0         sub        rsp, 0x8

                     loc_a8a4:
000000000000a8a4         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
000000000000a8a9         mov        rdx, rax
000000000000a8ac         mov        rcx, rbx
000000000000a8af         mov        esi, 0x1
000000000000a8b4         mov        rdi, rbp
000000000000a8b7         xor        eax, eax
000000000000a8b9         push       r9
000000000000a8bb         push       r13
000000000000a8bd         push       r12
000000000000a8bf         push       r15
000000000000a8c1         push       r14
000000000000a8c3         mov        r9, qword [rsp+0x88+var_58]
000000000000a8c8         mov        r8, qword [rsp+0x88+var_50]
000000000000a8cd         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a8d2         add        rsp, 0x30

                     loc_a8d6:
000000000000a8d6         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000a8da         pop        rbx
000000000000a8db         pop        rbp
000000000000a8dc         pop        r12
000000000000a8de         pop        r13
000000000000a8e0         pop        r14
000000000000a8e2         pop        r15
000000000000a8e4         ret
                        ; endp
000000000000a8e5         align      8

                     loc_a8e8:
000000000000a8e8         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000a8eb         mov        rcx, rdx
000000000000a8ee         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
000000000000a8f5         mov        esi, 0x1
000000000000a8fa         xor        eax, eax
000000000000a8fc         call       j___fprintf_chk                             ; __fprintf_chk
000000000000a901         jmp        loc_a7ec
000000000000a906         align      16

                     loc_a910:
000000000000a910         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
000000000000a914         mov        r9, qword [rbx+0x38]
000000000000a918         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000a91f         mov        rax, qword [rbx+0x10]
000000000000a923         mov        r8, qword [rbx+8]
000000000000a927         mov        edx, 0x5
000000000000a92c         mov        r13, qword [rbx+0x30]
000000000000a930         mov        r12, qword [rbx+0x28]
000000000000a934         mov        r15, qword [rbx+0x20]
000000000000a938         mov        r14, qword [rbx+0x18]
000000000000a93c         mov        rbx, qword [rbx]
000000000000a93f         mov        qword [rsp+0x58+var_40], r10
000000000000a944         mov        qword [rsp+0x58+var_48], r9
000000000000a949         mov        qword [rsp+0x58+var_58], rax
000000000000a94d         mov        qword [rsp+0x58+var_50], r8

                     loc_a952:
000000000000a952         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
000000000000a954         call       j_dcgettext                                 ; dcgettext
000000000000a959         mov        r10, qword [rsp+0x58+var_40]
000000000000a95e         push       r10
000000000000a960         jmp        loc_a8a4
000000000000a965         align      8

                     loc_a968:
000000000000a968         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000a96b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
000000000000a972         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a977         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a979         call       j_dcgettext                                 ; dcgettext
000000000000a97e         add        rsp, 0x28
000000000000a982         mov        rcx, rbx
000000000000a985         mov        rdi, rbp
000000000000a988         pop        rbx
000000000000a989         pop        rbp
000000000000a98a         pop        r12
000000000000a98c         pop        r13
000000000000a98e         pop        r14
000000000000a990         pop        r15
000000000000a992         mov        rdx, rax
000000000000a995         mov        esi, 0x1
000000000000a99a         xor        eax, eax
000000000000a99c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000a9a1         align      8

                     loc_a9a8:
000000000000a9a8         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000a9ac         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
000000000000a9b3         mov        rbx, qword [rbx]
000000000000a9b6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000a9bb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000a9bd         call       j_dcgettext                                 ; dcgettext
000000000000a9c2         add        rsp, 0x28
000000000000a9c6         mov        r8, r12
000000000000a9c9         mov        rcx, rbx
000000000000a9cc         mov        rdi, rbp
000000000000a9cf         mov        rdx, rax
000000000000a9d2         mov        esi, 0x1
000000000000a9d7         pop        rbx
000000000000a9d8         pop        rbp
000000000000a9d9         pop        r12
000000000000a9db         pop        r13
000000000000a9dd         pop        r14
000000000000a9df         pop        r15
000000000000a9e1         xor        eax, eax
000000000000a9e3         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000a9e8         align      16

                     loc_a9f0:
000000000000a9f0         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
000000000000a9f4         mov        r12, qword [rbx+8]
000000000000a9f8         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000a9ff         mov        rbx, qword [rbx]
000000000000aa02         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000aa07         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000aa09         call       j_dcgettext                                 ; dcgettext
000000000000aa0e         add        rsp, 0x28
000000000000aa12         mov        r9, r13
000000000000aa15         mov        r8, r12
000000000000aa18         mov        rcx, rbx
000000000000aa1b         mov        rdi, rbp
000000000000aa1e         mov        rdx, rax
000000000000aa21         pop        rbx
000000000000aa22         pop        rbp
000000000000aa23         pop        r12
000000000000aa25         pop        r13
000000000000aa27         pop        r14
000000000000aa29         pop        r15
000000000000aa2b         mov        esi, 0x1
000000000000aa30         xor        eax, eax
000000000000aa32         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000aa37         align      64

                     loc_aa40:
000000000000aa40         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
000000000000aa47         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000aa4c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000aa4e         mov        r14, qword [rbx+0x18]
000000000000aa52         mov        r13, qword [rbx+0x10]
000000000000aa56         mov        r12, qword [rbx+8]
000000000000aa5a         mov        rbx, qword [rbx]
000000000000aa5d         call       j_dcgettext                                 ; dcgettext
000000000000aa62         sub        rsp, 0x8

                     loc_aa66:
000000000000aa66         push       r14                                         ; CODE XREF=version_etc_arn+784
000000000000aa68         mov        rdx, rax
000000000000aa6b         mov        r9, r13
000000000000aa6e         mov        r8, r12
000000000000aa71         mov        rcx, rbx
000000000000aa74         mov        rdi, rbp
000000000000aa77         mov        esi, 0x1
000000000000aa7c         xor        eax, eax
000000000000aa7e         call       j___fprintf_chk                             ; __fprintf_chk
000000000000aa83         pop        rax
000000000000aa84         pop        rdx
000000000000aa85         add        rsp, 0x28
000000000000aa89         pop        rbx
000000000000aa8a         pop        rbp
000000000000aa8b         pop        r12
000000000000aa8d         pop        r13
000000000000aa8f         pop        r14
000000000000aa91         pop        r15
000000000000aa93         ret
                        ; endp
000000000000aa94         align      8

                     loc_aa98:
000000000000aa98         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000aa9c         lea        rsi, qword [aWrittenBySSSns_10738]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
000000000000aaa3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000aaa8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000aaaa         mov        r14, qword [rbx+0x18]
000000000000aaae         mov        r13, qword [rbx+0x10]
000000000000aab2         mov        r12, qword [rbx+8]
000000000000aab6         mov        rbx, qword [rbx]
000000000000aab9         call       j_dcgettext                                 ; dcgettext
000000000000aabe         push       r15
000000000000aac0         jmp        loc_aa66
000000000000aac2         align      8

                     loc_aac8:
000000000000aac8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000aacc         mov        r12, qword [rbx+0x28]
000000000000aad0         lea        rsi, qword [aWrittenBySSSns_10760]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
000000000000aad7         mov        r15, qword [rbx+0x20]
000000000000aadb         mov        r14, qword [rbx+0x18]
000000000000aadf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000aae4         mov        r13, qword [rbx+0x10]
000000000000aae8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000aaea         mov        rbx, qword [rbx]
000000000000aaed         mov        qword [rsp+0x58+var_58], r8
000000000000aaf1         call       j_dcgettext                                 ; dcgettext
000000000000aaf6         sub        rsp, 0x8
000000000000aafa         mov        r9, r13
000000000000aafd         push       r12
000000000000aaff         push       r15
000000000000ab01         push       r14

                     loc_ab03:
000000000000ab03         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
000000000000ab08         mov        rcx, rbx
000000000000ab0b         mov        rdx, rax
000000000000ab0e         mov        rdi, rbp
000000000000ab11         mov        esi, 0x1
000000000000ab16         xor        eax, eax
000000000000ab18         call       j___fprintf_chk                             ; __fprintf_chk
000000000000ab1d         add        rsp, 0x20
000000000000ab21         add        rsp, 0x28
000000000000ab25         pop        rbx
000000000000ab26         pop        rbp
000000000000ab27         pop        r12
000000000000ab29         pop        r13
000000000000ab2b         pop        r14
000000000000ab2d         pop        r15
000000000000ab2f         ret
                        ; endp

                     loc_ab30:
000000000000ab30         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
000000000000ab34         mov        r13, qword [rbx+0x30]
000000000000ab38         lea        rsi, qword [aWrittenBySSSns_10788]          ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000ab3f         mov        r12, qword [rbx+0x28]
000000000000ab43         mov        r15, qword [rbx+0x20]
000000000000ab47         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000ab4c         mov        r14, qword [rbx+0x18]
000000000000ab50         mov        r8, qword [rbx+8]
000000000000ab54         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000ab56         mov        qword [rsp+0x58+var_50], r9
000000000000ab5b         mov        rbx, qword [rbx]
000000000000ab5e         mov        qword [rsp+0x58+var_58], r8
000000000000ab62         call       j_dcgettext                                 ; dcgettext
000000000000ab67         push       r13
000000000000ab69         push       r12
000000000000ab6b         push       r15
000000000000ab6d         push       r14
000000000000ab6f         mov        r9, qword [rsp+0x78+var_50]
000000000000ab74         jmp        loc_ab03
000000000000ab76         align      128

                     loc_ab80:
000000000000ab80         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
000000000000ab84         mov        r9, qword [rbx+0x38]
000000000000ab88         mov        edx, 0x5
000000000000ab8d         mov        rax, qword [rbx+0x10]
000000000000ab91         mov        r8, qword [rbx+8]
000000000000ab95         lea        rsi, qword [aWrittenBySSSns_10820]          ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000ab9c         mov        r13, qword [rbx+0x30]
000000000000aba0         mov        r12, qword [rbx+0x28]
000000000000aba4         mov        r15, qword [rbx+0x20]
000000000000aba8         mov        r14, qword [rbx+0x18]
000000000000abac         mov        qword [rsp+0x58+var_40], r10
000000000000abb1         mov        qword [rsp+0x58+var_48], r9
000000000000abb6         mov        qword [rsp+0x58+var_58], rax
000000000000abba         mov        qword [rsp+0x58+var_50], r8
000000000000abbf         mov        rbx, qword [rbx]
000000000000abc2         jmp        loc_a952
000000000000abc7         align      16                                          ; End of unwind block (FDE at 0x126ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
000000000000abd0         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0x127c0)
000000000000abd3         cmp        qword [r8], 0x0
000000000000abd7         je         j_version_etc_arn                           ; version_etc_arn

000000000000abd9         nop        dword [rax]

                     loc_abe0:
000000000000abe0         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
000000000000abe4         cmp        qword [r8+r9*8], 0x0
000000000000abe9         jne        loc_abe0

                     j_version_etc_arn:        // version_etc_arn
000000000000abeb         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
000000000000abf0         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0x127c0), Begin of unwind block (FDE at 0x127d4)
000000000000abf4         mov        r10, r8
000000000000abf7         xor        r9d, r9d
000000000000abfa         mov        rax, qword [fs:0x28]
000000000000ac03         mov        qword [rsp+0x68+var_10], rax
000000000000ac08         xor        eax, eax
000000000000ac0a         mov        r8, rsp
000000000000ac0d         nop        dword [rax]

                     loc_ac10:
000000000000ac10         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
000000000000ac13         cmp        eax, 0x2f
000000000000ac16         ja         loc_ac5a

000000000000ac18         mov        r11d, eax
000000000000ac1b         add        r11, qword [r10+0x10]
000000000000ac1f         add        eax, 0x8
000000000000ac22         mov        dword [r10], eax

                     loc_ac25:
000000000000ac25         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
000000000000ac28         test       rax, rax
000000000000ac2b         mov        qword [r8+r9*8], rax
000000000000ac2f         je         loc_ac3b

000000000000ac31         add        r9, 0x1
000000000000ac35         cmp        r9, 0xa
000000000000ac39         jne        loc_ac10

                     loc_ac3b:
000000000000ac3b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
000000000000ac40         mov        rax, qword [rsp+0x68+var_10]
000000000000ac45         xor        rax, qword [fs:0x28]
000000000000ac4e         jne        loc_ac55

000000000000ac50         add        rsp, 0x68
000000000000ac54         ret
                        ; endp

                     loc_ac55:
000000000000ac55         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_ac5a:
000000000000ac5a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000ac5e         lea        rax, qword [r11+8]
000000000000ac62         mov        qword [r10+8], rax
000000000000ac66         jmp        loc_ac25
000000000000ac68         align      16                                          ; End of unwind block (FDE at 0x127d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
000000000000ac70         push       rbp                                         ; Begin of unwind block (FDE at 0x127f0), CODE XREF=main+1029
000000000000ac71         push       rbx
000000000000ac72         mov        r10d, 0x20
000000000000ac78         xor        r11d, r11d
000000000000ac7b         sub        rsp, 0xb8
000000000000ac82         mov        rax, qword [fs:0x28]
000000000000ac8b         mov        qword [rsp+0xc8+var_50], rax
000000000000ac90         xor        eax, eax
000000000000ac92         lea        rax, qword [rsp+0xc8+arg_0]
000000000000ac9a         mov        qword [rsp+0xc8+var_28], r8
000000000000aca2         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000acaa         lea        r8, qword [rsp+0xc8+var_A8]
000000000000acaf         mov        qword [rsp+0xc8+var_20], r9
000000000000acb7         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000acbf         mov        qword [rsp+0xc8+var_B8], rax
000000000000acc4         lea        rax, qword [rsp+0xc8+var_48]
000000000000accc         xor        r9d, r9d
000000000000accf         mov        qword [rsp+0xc8+var_B0], rax
000000000000acd4         mov        rbp, rax
000000000000acd7         nop        word [rax+rax]

                     loc_ace0:
000000000000ace0         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
000000000000ace4         ja         loc_ad3c

000000000000ace6         mov        eax, r10d
000000000000ace9         mov        r11d, 0x1
000000000000acef         add        r10d, 0x8
000000000000acf3         add        rax, rbp

                     loc_acf6:
000000000000acf6         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
000000000000acf9         test       rax, rax
000000000000acfc         mov        qword [r8+r9*8], rax
000000000000ad00         je         loc_ad0c

000000000000ad02         add        r9, 0x1
000000000000ad06         cmp        r9, 0xa
000000000000ad0a         jne        loc_ace0

                     loc_ad0c:
000000000000ad0c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
000000000000ad0f         jne        loc_ad35

                     loc_ad11:
000000000000ad11         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
000000000000ad16         mov        rax, qword [rsp+0xc8+var_50]
000000000000ad1b         xor        rax, qword [fs:0x28]
000000000000ad24         jne        loc_ad30

000000000000ad26         add        rsp, 0xb8
000000000000ad2d         pop        rbx
000000000000ad2e         pop        rbp
000000000000ad2f         ret
                        ; endp

                     loc_ad30:
000000000000ad30         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_ad35:
000000000000ad35         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000ad3a         jmp        loc_ad11

                     loc_ad3c:
000000000000ad3c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000ad3f         add        rbx, 0x8
000000000000ad43         jmp        loc_acf6
000000000000ad45         align      16                                          ; End of unwind block (FDE at 0x127f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
000000000000ad50         push       rbx                                         ; Begin of unwind block (FDE at 0x1281c)
000000000000ad51         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
000000000000ad58         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000ad5d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000ad5f         call       j_dcgettext                                 ; dcgettext
000000000000ad64         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000ad6b         mov        rsi, rax
000000000000ad6e         mov        edi, 0x1
000000000000ad73         xor        eax, eax
000000000000ad75         call       j___printf_chk                              ; __printf_chk
000000000000ad7a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
000000000000ad81         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000ad86         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000ad88         call       j_dcgettext                                 ; dcgettext
000000000000ad8d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
000000000000ad94         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xf0e8
000000000000ad9b         mov        rsi, rax
000000000000ad9e         mov        edi, 0x1
000000000000ada3         xor        eax, eax
000000000000ada5         call       j___printf_chk                              ; __printf_chk
000000000000adaa         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000adb1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
000000000000adb8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000adba         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000adbf         call       j_dcgettext                                 ; dcgettext
000000000000adc4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000adc7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000adca         pop        rbx
000000000000adcb         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
000000000000add0         push       rbx                                         ; End of unwind block (FDE at 0x1281c), Begin of unwind block (FDE at 0x1283c), CODE XREF=main+932, main+1058, main+1421, main+4206, alloc_table_row+115, sub_5c5a+11, sub_5c5a+98, record_file+29, quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25
000000000000add1         mov        rbx, rdi
000000000000add4         call       j_malloc                                    ; malloc
000000000000add9         test       rax, rax
000000000000addc         jne        loc_ade3

000000000000adde         test       rbx, rbx
000000000000ade1         jne        loc_ade5

                     loc_ade3:
000000000000ade3         pop        rbx                                         ; CODE XREF=xmalloc+12
000000000000ade4         ret
                        ; endp

                     loc_ade5:
000000000000ade5         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_adea:
000000000000adea         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x1283c)
                     xnmalloc:
000000000000adf0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x12858)
000000000000adf3         mul        rsi
000000000000adf6         mov        rdi, rax
000000000000adf9         seto       al
000000000000adfc         test       rdi, rdi
000000000000adff         js         loc_ae0b

000000000000ae01         movzx      eax, al
000000000000ae04         test       rax, rax
000000000000ae07         jne        loc_ae0b

000000000000ae09         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_ae0b:
000000000000ae0b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
000000000000ae0f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ae14:
000000000000ae14         nop                                                    ; End of unwind block (FDE at 0x12858)
000000000000ae16         nop        word [cs:rax+rax]
                     xcharalloc:
000000000000ae20         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0x1286c)
                        ; endp
000000000000ae22         align      16                                          ; End of unwind block (FDE at 0x1286c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
000000000000ae30         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0x12880), CODE XREF=alloc_table_row+55, alloc_field+69, canonicalize_filename_mode+364, canonicalize_filename_mode+506, canonicalize_filename_mode+1154, sub_5c5a+46, quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
000000000000ae33         push       rbx
000000000000ae34         mov        rbx, rsi
000000000000ae37         jne        loc_ae3e

000000000000ae39         test       rdi, rdi
000000000000ae3c         jne        loc_ae58

                     loc_ae3e:
000000000000ae3e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
000000000000ae41         call       j_realloc                                   ; realloc
000000000000ae46         test       rax, rax
000000000000ae49         jne        loc_ae50

000000000000ae4b         test       rbx, rbx
000000000000ae4e         jne        loc_ae61

                     loc_ae50:
000000000000ae50         pop        rbx                                         ; CODE XREF=xrealloc+25
000000000000ae51         ret
                        ; endp
000000000000ae52         align      8

                     loc_ae58:
000000000000ae58         call       j_free                                      ; free, CODE XREF=xrealloc+12
000000000000ae5d         xor        eax, eax
000000000000ae5f         pop        rbx
000000000000ae60         ret
                        ; endp

                     loc_ae61:
000000000000ae61         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ae66:
000000000000ae66         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0x12880)
                     xnrealloc:
000000000000ae70         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0x128a4)
000000000000ae73         mul        rdx
000000000000ae76         mov        rsi, rax
000000000000ae79         seto       al
000000000000ae7c         test       rsi, rsi
000000000000ae7f         js         loc_ae8b

000000000000ae81         movzx      eax, al
000000000000ae84         test       rax, rax
000000000000ae87         jne        loc_ae8b

000000000000ae89         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_ae8b:
000000000000ae8b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
000000000000ae8f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_ae94:
000000000000ae94         nop                                                    ; End of unwind block (FDE at 0x128a4)
000000000000ae96         nop        word [cs:rax+rax]
                     x2nrealloc:
000000000000aea0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x128b8)
000000000000aea3         mov        r9, rdx
000000000000aea6         mov        rcx, qword [rsi]
000000000000aea9         je         loc_aee0

000000000000aeab         xor        edx, edx
000000000000aead         movabs     rax, 0x5555555555555554
000000000000aeb7         div        r9
000000000000aeba         cmp        rax, rcx
000000000000aebd         jbe        loc_aefb

000000000000aebf         mov        rax, rcx
000000000000aec2         shr        rax, 0x1
000000000000aec5         lea        rcx, qword [rax+rcx+1]

                     loc_aeca:
000000000000aeca         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000aecd         imul       rcx, r9                                     ; argument #4 for method xrealloc
000000000000aed1         mov        rsi, rcx                                    ; argument #2 for method xrealloc
000000000000aed4         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000aed9         align      32

                     loc_aee0:
000000000000aee0         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
000000000000aee3         je         loc_af08

                     loc_aee5:
000000000000aee5         mov        rax, rcx                                    ; CODE XREF=sub_af04+28
000000000000aee8         mul        r9
000000000000aeeb         seto       dl
000000000000aeee         test       rax, rax
000000000000aef1         movzx      edx, dl
000000000000aef4         js         loc_aefb

000000000000aef6         test       rdx, rdx
000000000000aef9         je         loc_aeca

                     loc_aefb:
000000000000aefb         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
000000000000aeff         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_af04:
000000000000af04         nop        dword [rax]
                        ; endp

                     loc_af08:
000000000000af08         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
000000000000af0a         mov        eax, 0x80
000000000000af0f         xor        r8d, r8d
000000000000af12         div        r9
000000000000af15         test       rax, rax
000000000000af18         sete       r8b
000000000000af1c         lea        rcx, qword [r8+rax]
000000000000af20         jmp        loc_aee5
000000000000af22         align      16                                          ; End of unwind block (FDE at 0x128b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
000000000000af30         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x128d0)
000000000000af33         mov        rax, qword [rsi]
000000000000af36         je         loc_af60

000000000000af38         movabs     rdx, 0x5555555555555553
000000000000af42         cmp        rax, rdx
000000000000af45         ja         loc_af71

000000000000af47         mov        rdx, rax
000000000000af4a         shr        rdx, 0x1
000000000000af4d         lea        rax, qword [rdx+rax+1]

                     loc_af52:
000000000000af52         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
000000000000af55         mov        rsi, rax                                    ; argument #2 for method xrealloc
000000000000af58         jmp        xrealloc                                    ; xrealloc
                        ; endp
000000000000af5d         align      32

                     loc_af60:
000000000000af60         test       rax, rax                                    ; CODE XREF=x2realloc+6
000000000000af63         mov        edx, 0x80
000000000000af68         cmove      rax, rdx
000000000000af6c         test       rax, rax
000000000000af6f         jns        loc_af52

                     loc_af71:
000000000000af71         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
000000000000af75         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_af7a:
000000000000af7a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0x128d0)
                     xzalloc:
000000000000af80         push       rbx                                         ; Begin of unwind block (FDE at 0x128e8)
000000000000af81         mov        rbx, rdi
000000000000af84         call       xmalloc                                     ; xmalloc
000000000000af89         mov        rdx, rbx                                    ; argument "__n" for method j_memset
000000000000af8c         xor        esi, esi                                    ; argument "__c" for method j_memset
000000000000af8e         mov        rdi, rax                                    ; argument "__s" for method j_memset
000000000000af91         pop        rbx
000000000000af92         jmp        j_memset                                    ; memset
                        ; endp
000000000000af97         align      32                                          ; End of unwind block (FDE at 0x128e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
000000000000afa0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0x12904)
000000000000afa3         sub        rsp, 0x8
000000000000afa7         mul        rsi
000000000000afaa         seto       dl
000000000000afad         test       rax, rax
000000000000afb0         js         loc_afc9

000000000000afb2         movzx      edx, dl
000000000000afb5         test       rdx, rdx
000000000000afb8         jne        loc_afc9

000000000000afba         call       j_calloc                                    ; calloc
000000000000afbf         test       rax, rax
000000000000afc2         je         loc_afc9

000000000000afc4         add        rsp, 0x8
000000000000afc8         ret
                        ; endp

                     loc_afc9:
000000000000afc9         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_afce:
000000000000afce         nop                                                    ; End of unwind block (FDE at 0x12904)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
000000000000afd0         push       rbp                                         ; Begin of unwind block (FDE at 0x12920), CODE XREF=clone_quoting_options+40
000000000000afd1         push       rbx
000000000000afd2         mov        rbp, rdi
000000000000afd5         mov        rdi, rsi
000000000000afd8         mov        rbx, rsi
000000000000afdb         sub        rsp, 0x8
000000000000afdf         call       xmalloc                                     ; xmalloc
000000000000afe4         add        rsp, 0x8
000000000000afe8         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000afeb         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000afee         pop        rbx
000000000000afef         pop        rbp
000000000000aff0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000aff3         jmp        j_memcpy                                    ; memcpy
                        ; endp
000000000000aff8         align      4096                                        ; End of unwind block (FDE at 0x12920)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
000000000000b000         push       rbx                                         ; Begin of unwind block (FDE at 0x12948), CODE XREF=main+2308, get_dev+454, sub_4730+3, sub_47e0+31, sub_4830+59, sub_4880+4, decode_output_arg+21, record_file+40, read_file_system_list+400, read_file_system_list+418, DATA XREF=main+2072
000000000000b001         mov        rbx, rdi
000000000000b004         call       j_strlen                                    ; strlen
000000000000b009         mov        rdi, rbx
000000000000b00c         lea        rsi, qword [rax+1]
000000000000b010         pop        rbx
000000000000b011         jmp        xmemdup                                     ; xmemdup
                        ; endp
000000000000b013         align      32                                          ; End of unwind block (FDE at 0x12948)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
000000000000b020         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0x12964), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=main+5459, alloc_table_row+125, get_header+627, alloc_field+189, sub_48a0+473, canonicalize_filename_mode+1301, dir_name+19, record_file+130, quotearg_n_options+422, xmalloc+21, xnmalloc+31
000000000000b027         sub        rsp, 0x8
000000000000b02b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000b030         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b032         call       j_dcgettext                                 ; dcgettext
000000000000b037         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
000000000000b03d         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0x10c77
000000000000b044         mov        rcx, rax
000000000000b047         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000b049         xor        eax, eax
000000000000b04b         call       j_error                                     ; error
000000000000b050         call       j_abort                                     ; abort
                        ; endp
000000000000b055         align      32                                          ; End of unwind block (FDE at 0x12964)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xgetcwd:
000000000000b060         push       rbx                                         ; Begin of unwind block (FDE at 0x1297c), CODE XREF=find_mount_point+560, canonicalize_filename_mode+99
000000000000b061         xor        esi, esi                                    ; argument "__size" for method j_getcwd
000000000000b063         xor        edi, edi                                    ; argument "__buf" for method j_getcwd
000000000000b065         call       j_getcwd                                    ; getcwd
000000000000b06a         test       rax, rax
000000000000b06d         mov        rbx, rax
000000000000b070         je         loc_b080

                     loc_b072:
000000000000b072         mov        rax, rbx                                    ; CODE XREF=xgetcwd+40
000000000000b075         pop        rbx
000000000000b076         ret
                        ; endp
000000000000b077         align      128

                     loc_b080:
000000000000b080         call       j___errno_location                          ; __errno_location, CODE XREF=xgetcwd+16
000000000000b085         cmp        dword [rax], 0xc
000000000000b088         jne        loc_b072

000000000000b08a         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_b08f:
000000000000b08f         nop                                                    ; End of unwind block (FDE at 0x1297c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_31: int8_t, -49
        ;    var_32: int8_t, -50


                     xstrtol_fatal:
000000000000b090         push       r13                                         ; Begin of unwind block (FDE at 0x1299c), CODE XREF=main+576
000000000000b092         push       r12
000000000000b094         mov        r10d, esi
000000000000b097         push       rbp
000000000000b098         push       rbx
000000000000b099         mov        r12, r8
000000000000b09c         sub        rsp, 0x18
000000000000b0a0         mov        rax, qword [fs:0x28]
000000000000b0a9         mov        qword [rsp+0x38+var_30], rax
000000000000b0ae         xor        eax, eax
000000000000b0b0         cmp        edi, 0x3
000000000000b0b3         mov        ebp, dword [exit_failure]                   ; exit_failure
000000000000b0b9         ja         loc_b114

000000000000b0bb         cmp        edi, 0x2
000000000000b0be         jae        loc_b10b

000000000000b0c0         sub        edi, 0x1
000000000000b0c3         lea        rsi, qword [aSsArgumentSToo]                ; "%s%s argument '%s' too large"
000000000000b0ca         jne        loc_b106

                     loc_b0cc:
000000000000b0cc         test       r10d, r10d                                  ; CODE XREF=xstrtol_fatal+130, xstrtol_fatal+142
000000000000b0cf         movsxd     rax, r10d
000000000000b0d2         js         loc_b122

000000000000b0d4         shl        rax, 0x5
000000000000b0d8         lea        rbx, qword [aSsArgumentSToo+29]             ; 0x10958
000000000000b0df         mov        r13, qword [rcx+rax]

                     loc_b0e3:
000000000000b0e3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext, CODE XREF=xstrtol_fatal+170
000000000000b0e8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000b0ea         call       j_dcgettext                                 ; dcgettext
000000000000b0ef         mov        r9, r12
000000000000b0f2         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000b0f5         mov        r8, r13
000000000000b0f8         mov        rcx, rbx
000000000000b0fb         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000b0fd         mov        edi, ebp                                    ; argument "__status" for method j_error
000000000000b0ff         xor        eax, eax
000000000000b101         call       j_error                                     ; error

                     loc_b106:
000000000000b106         call       j_abort                                     ; abort, CODE XREF=xstrtol_fatal+58, xstrtol_fatal+144
                        ; endp

                     loc_b10b:
000000000000b10b         lea        rsi, qword [aInvalidSuffixI]                ; "invalid suffix in %s%s argument '%s'", CODE XREF=xstrtol_fatal+46
000000000000b112         jmp        loc_b0cc

                     loc_b114:
000000000000b114         cmp        edi, 0x4                                    ; CODE XREF=xstrtol_fatal+41
000000000000b117         lea        rsi, qword [aInvalidSsArgum]                ; "invalid %s%s argument '%s'"
000000000000b11e         je         loc_b0cc

000000000000b120         jmp        loc_b106

                     loc_b122:
000000000000b122         lea        rbx, qword [aSsArgumentSToo+29]             ; 0x10958, CODE XREF=xstrtol_fatal+66
000000000000b129         mov        byte [rsp+0x38+var_32], dl
000000000000b12d         mov        byte [rsp+0x38+var_31], 0x0
000000000000b132         lea        r13, qword [rsp+0x38+var_32]
000000000000b137         sub        rbx, rax
000000000000b13a         jmp        loc_b0e3
000000000000b13c         align      64                                          ; End of unwind block (FDE at 0x1299c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
000000000000b140         push       r15                                         ; Begin of unwind block (FDE at 0x129c4), CODE XREF=human_options+170
000000000000b142         push       r14
000000000000b144         push       r13
000000000000b146         push       r12
000000000000b148         push       rbp
000000000000b149         push       rbx
000000000000b14a         sub        rsp, 0x28
000000000000b14e         mov        rax, qword [fs:0x28]
000000000000b157         mov        qword [rsp+0x58+var_40], rax
000000000000b15c         xor        eax, eax
000000000000b15e         cmp        edx, 0x24
000000000000b161         ja         loc_b4c5

000000000000b167         lea        rax, qword [rsp+0x58+var_48]
000000000000b16c         mov        r15, rsi
000000000000b16f         test       rsi, rsi
000000000000b172         mov        rbp, rdi
000000000000b175         mov        dword [rsp+0x58+var_50], edx
000000000000b179         mov        r14, rcx
000000000000b17c         mov        r13, r8
000000000000b17f         cmove      r15, rax
000000000000b183         call       j___errno_location                          ; __errno_location
000000000000b188         mov        dword [rax], 0x0
000000000000b18e         mov        r12, rax
000000000000b191         movzx      ebx, byte [rbp]
000000000000b195         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000b19a         mov        edx, dword [rsp+0x58+var_50]
000000000000b19e         mov        rsi, qword [rax]
000000000000b1a1         mov        rax, rbp
000000000000b1a4         jmp        loc_b1b7
000000000000b1a6         align      16

                     loc_b1b0:
000000000000b1b0         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
000000000000b1b4         movzx      ebx, byte [rax]

                     loc_b1b7:
000000000000b1b7         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
000000000000b1ba         test       byte [rsi+rcx*2+1], 0x20
000000000000b1bf         jne        loc_b1b0

000000000000b1c1         cmp        bl, 0x2d
000000000000b1c4         je         loc_b218

000000000000b1c6         xor        ecx, ecx
000000000000b1c8         mov        rsi, r15
000000000000b1cb         mov        rdi, rbp
000000000000b1ce         call       j___strtoul_internal                        ; __strtoul_internal
000000000000b1d3         mov        rcx, qword [r15]
000000000000b1d6         mov        rbx, rax
000000000000b1d9         cmp        rcx, rbp
000000000000b1dc         je         loc_b208

000000000000b1de         mov        eax, dword [r12]
000000000000b1e2         test       eax, eax
000000000000b1e4         je         loc_b248

000000000000b1e6         cmp        eax, 0x22
000000000000b1e9         mov        ebp, 0x1
000000000000b1ee         jne        loc_b218

                     loc_b1f0:
000000000000b1f0         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
000000000000b1f3         je         loc_b1fe

000000000000b1f5         movzx      r12d, byte [rcx]
000000000000b1f9         test       r12b, r12b
000000000000b1fc         jne        loc_b277

                     loc_b1fe:
000000000000b1fe         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
000000000000b201         jmp        loc_b21d
000000000000b203         align      8

                     loc_b208:
000000000000b208         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000b20b         mov        qword [rsp+0x58+var_50], rcx
000000000000b210         jne        loc_b250

000000000000b212         nop        word [rax+rax]

                     loc_b218:
000000000000b218         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_b21d:
000000000000b21d         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
000000000000b222         xor        rdi, qword [fs:0x28]
000000000000b22b         mov        eax, ebp
000000000000b22d         jne        loc_b4c0

000000000000b233         add        rsp, 0x28
000000000000b237         pop        rbx
000000000000b238         pop        rbp
000000000000b239         pop        r12
000000000000b23b         pop        r13
000000000000b23d         pop        r14
000000000000b23f         pop        r15
000000000000b241         ret
                        ; endp
000000000000b242         align      8

                     loc_b248:
000000000000b248         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
000000000000b24a         jmp        loc_b1f0
000000000000b24c         align      16

                     loc_b250:
000000000000b250         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
000000000000b255         test       r12b, r12b
000000000000b258         je         loc_b218

000000000000b25a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000b25e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000b261         xor        ebp, ebp
000000000000b263         call       j_strchr                                    ; strchr
000000000000b268         test       rax, rax
000000000000b26b         mov        ebx, 0x1
000000000000b270         mov        rcx, qword [rsp+0x58+var_50]
000000000000b275         je         loc_b218

                     loc_b277:
000000000000b277         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000b27b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000b27e         mov        qword [rsp+0x58+var_50], rcx
000000000000b283         call       j_strchr                                    ; strchr
000000000000b288         test       rax, rax
000000000000b28b         mov        rcx, qword [rsp+0x58+var_50]
000000000000b290         je         loc_b35c

000000000000b296         lea        eax, dword [r12-0x45]
000000000000b29b         cmp        al, 0x2f
000000000000b29d         ja         loc_b2f0

000000000000b29f         movabs     rdx, 0x814400308945
000000000000b2a9         bt         rdx, rax
000000000000b2ad         jae        loc_b2f0

000000000000b2af         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000b2b4         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000b2b7         mov        qword [rsp+0x58+var_50], rcx
000000000000b2bc         call       j_strchr                                    ; strchr
000000000000b2c1         test       rax, rax
000000000000b2c4         mov        rcx, qword [rsp+0x58+var_50]
000000000000b2c9         je         loc_b2f0

000000000000b2cb         movzx      eax, byte [rcx+1]
000000000000b2cf         cmp        al, 0x44
000000000000b2d1         je         loc_b2df

000000000000b2d3         cmp        al, 0x69
000000000000b2d5         je         loc_b4a8

000000000000b2db         cmp        al, 0x42
000000000000b2dd         jne        loc_b2f0

                     loc_b2df:
000000000000b2df         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
000000000000b2e4         mov        esi, 0x3e8
000000000000b2e9         jmp        loc_b2fa
000000000000b2eb         align      16

                     loc_b2f0:
000000000000b2f0         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
000000000000b2f5         mov        esi, 0x400

                     loc_b2fa:
000000000000b2fa         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000b2fe         cmp        r12b, 0x35
000000000000b302         ja         loc_b35c

000000000000b304         lea        rdx, qword [switch_table_109d0]             ; switch_table_109d0
000000000000b30b         movzx      r12d, r12b
000000000000b30f         movsxd     rax, dword [rdx+r12*4]
000000000000b313         add        rax, rdx
000000000000b316         jmp        rax                                         ; switch statement using table at 0x109d0, with 54 cases, 0xb318,0xb340,0xb35c,0xb367,0xb37d,0xb394,0xb3ba,0xb3df,0xb3ff,0xb420,0xb443,0xb466,0xb47c

                     loc_b318:
000000000000b318         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
000000000000b31b         mul        rsi
000000000000b31e         jo         loc_b511

000000000000b324         xor        r8d, r8d

                     loc_b327:
000000000000b327         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
000000000000b32a         jo         loc_b502

000000000000b330         mov        rbx, rax

                     loc_b333:
000000000000b333         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
000000000000b336         nop        word [cs:rax+rax]

                     loc_b340:
000000000000b340         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
000000000000b343         mov        eax, ebp
000000000000b345         add        rcx, rdi
000000000000b348         or         eax, 0x2
000000000000b34b         mov        qword [r15], rcx
000000000000b34e         cmp        byte [rcx], 0x0
000000000000b351         mov        qword [r14], rbx
000000000000b354         cmovne     ebp, eax
000000000000b357         jmp        loc_b21d

                     loc_b35c:
000000000000b35c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
000000000000b35f         or         ebp, 0x2
000000000000b362         jmp        loc_b21d

                     loc_b367:
000000000000b367         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000b36c         mov        rax, rdx
000000000000b36f         mul        rbx
000000000000b372         jo         loc_b40e

000000000000b378         add        rbx, rbx
000000000000b37b         jmp        loc_b340

                     loc_b37d:
000000000000b37d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
000000000000b382         mov        rax, rdx
000000000000b385         mul        rbx
000000000000b388         jo         loc_b40e

000000000000b38e         shl        rbx, 0x9
000000000000b392         jmp        loc_b340

                     loc_b394:
000000000000b394         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
000000000000b39a         xor        r9d, r9d
000000000000b39d         nop        dword [rax]

                     loc_b3a0:
000000000000b3a0         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
000000000000b3a3         mul        rsi
000000000000b3a6         mov        rbx, rax
000000000000b3a9         jo         loc_b53e

                     loc_b3af:
000000000000b3af         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
000000000000b3b3         jne        loc_b3a0

                     loc_b3b5:
000000000000b3b5         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
000000000000b3b8         jmp        loc_b340

                     loc_b3ba:
000000000000b3ba         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
000000000000b3c0         xor        r9d, r9d
000000000000b3c3         nop        dword [rax+rax]

                     loc_b3c8:
000000000000b3c8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
000000000000b3cb         mul        rsi
000000000000b3ce         mov        rbx, rax
000000000000b3d1         jo         loc_b520

                     loc_b3d7:
000000000000b3d7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
000000000000b3db         jne        loc_b3c8

000000000000b3dd         jmp        loc_b3b5

                     loc_b3df:
000000000000b3df         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
000000000000b3e5         xor        r9d, r9d

                     loc_b3e8:
000000000000b3e8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
000000000000b3eb         mul        rsi
000000000000b3ee         mov        rbx, rax
000000000000b3f1         jo         loc_b4f3

                     loc_b3f7:
000000000000b3f7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000b3fb         jne        loc_b3e8

000000000000b3fd         jmp        loc_b3b5

                     loc_b3ff:
000000000000b3ff         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
000000000000b402         mul        rsi
000000000000b405         mov        rbx, rax
000000000000b408         jno        loc_b340

                     loc_b40e:
000000000000b40e         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
000000000000b413         or         rbx, 0xffffffffffffffff
000000000000b417         jmp        loc_b340
000000000000b41c         align      32

                     loc_b420:
000000000000b420         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
000000000000b426         xor        r9d, r9d

                     loc_b429:
000000000000b429         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
000000000000b42c         mul        rsi
000000000000b42f         mov        rbx, rax
000000000000b432         jo         loc_b52f

                     loc_b438:
000000000000b438         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
000000000000b43c         jne        loc_b429

000000000000b43e         jmp        loc_b3b5

                     loc_b443:
000000000000b443         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
000000000000b449         xor        r9d, r9d

                     loc_b44c:
000000000000b44c         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000b44f         mul        rsi
000000000000b452         mov        rbx, rax
000000000000b455         jo         loc_b4e4

                     loc_b45b:
000000000000b45b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000b45f         jne        loc_b44c

000000000000b461         jmp        loc_b3b5

                     loc_b466:
000000000000b466         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000b46b         mov        rax, rdx
000000000000b46e         mul        rbx
000000000000b471         jo         loc_b40e

000000000000b473         shl        rbx, 0xa
000000000000b477         jmp        loc_b340

                     loc_b47c:
000000000000b47c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000b47f         mul        rsi
000000000000b482         jo         loc_b54d

000000000000b488         xor        r8d, r8d

                     loc_b48b:
000000000000b48b         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
000000000000b48e         jno        loc_b327

000000000000b494         mov        r8d, 0x1
000000000000b49a         or         rax, 0xffffffffffffffff
000000000000b49e         jmp        loc_b327
000000000000b4a3         align      8

                     loc_b4a8:
000000000000b4a8         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
000000000000b4aa         cmp        byte [rcx+2], 0x42
000000000000b4ae         mov        esi, 0x400
000000000000b4b3         sete       dil
000000000000b4b7         lea        edi, dword [rdi+rdi+1]
000000000000b4bb         jmp        loc_b2fa

                     loc_b4c0:
000000000000b4c0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_b4c5:
000000000000b4c5         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
000000000000b4cc         lea        rsi, qword [aCoreutils831li_10988]          ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000b4d3         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000b4da         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000b4df         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_b4e4:
000000000000b4e4         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
000000000000b4ea         or         rbx, 0xffffffffffffffff
000000000000b4ee         jmp        loc_b45b

                     loc_b4f3:
000000000000b4f3         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
000000000000b4f9         or         rbx, 0xffffffffffffffff
000000000000b4fd         jmp        loc_b3f7

                     loc_b502:
000000000000b502         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
000000000000b508         or         rbx, 0xffffffffffffffff
000000000000b50c         jmp        loc_b333

                     loc_b511:
000000000000b511         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
000000000000b515         mov        r8d, 0x1
000000000000b51b         jmp        loc_b327

                     loc_b520:
000000000000b520         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
000000000000b526         or         rbx, 0xffffffffffffffff
000000000000b52a         jmp        loc_b3d7

                     loc_b52f:
000000000000b52f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
000000000000b535         or         rbx, 0xffffffffffffffff
000000000000b539         jmp        loc_b438

                     loc_b53e:
000000000000b53e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
000000000000b544         or         rbx, 0xffffffffffffffff
000000000000b548         jmp        loc_b3af

                     loc_b54d:
000000000000b54d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
000000000000b553         or         rax, 0xffffffffffffffff
000000000000b557         jmp        loc_b48b
000000000000b55c         align      32                                          ; End of unwind block (FDE at 0x129c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     rpl_asprintf:
000000000000b560         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0x12a14), CODE XREF=get_header+353, sub_48a0+307
000000000000b567         test       al, al
000000000000b569         mov        qword [rsp+0xd8+var_A8], rdx
000000000000b56e         mov        qword [rsp+0xd8+var_A0], rcx
000000000000b573         mov        qword [rsp+0xd8+var_98], r8
000000000000b578         mov        qword [rsp+0xd8+var_90], r9
000000000000b57d         je         loc_b5b6

000000000000b57f         movaps     xmmword [rsp+0xd8+var_88], xmm0
000000000000b584         movaps     xmmword [rsp+0xd8+var_78], xmm1
000000000000b589         movaps     xmmword [rsp+0xd8+var_68], xmm2
000000000000b58e         movaps     xmmword [rsp+0xd8+var_58], xmm3
000000000000b596         movaps     xmmword [rsp+0xd8+var_48], xmm4
000000000000b59e         movaps     xmmword [rsp+0xd8+var_38], xmm5
000000000000b5a6         movaps     xmmword [rsp+0xd8+var_28], xmm6
000000000000b5ae         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_b5b6:
000000000000b5b6         mov        rax, qword [fs:0x28]                        ; CODE XREF=rpl_asprintf+29
000000000000b5bf         mov        qword [rsp+0xd8+var_C0], rax
000000000000b5c4         xor        eax, eax
000000000000b5c6         lea        rax, qword [rsp+0xd8+arg_0]
000000000000b5ce         mov        rdx, rsp
000000000000b5d1         mov        qword [rsp+0xd8+var_D0], rax
000000000000b5d6         lea        rax, qword [rsp+0xd8+var_B8]
000000000000b5db         mov        dword [rsp+0xd8+var_D8], 0x10
000000000000b5e2         mov        dword [rsp+0xd8+var_D4], 0x30
000000000000b5ea         mov        qword [rsp+0xd8+var_C8], rax
000000000000b5ef         call       rpl_vasprintf                               ; rpl_vasprintf
000000000000b5f4         mov        rcx, qword [rsp+0xd8+var_C0]
000000000000b5f9         xor        rcx, qword [fs:0x28]
000000000000b602         jne        loc_b60c

000000000000b604         add        rsp, 0xd8
000000000000b60b         ret
                        ; endp

                     loc_b60c:
000000000000b60c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_asprintf+162
                        ; endp
000000000000b611         align      32                                          ; End of unwind block (FDE at 0x12a14)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cdb_free:
000000000000b620         mov        edi, dword [rdi]                            ; Begin of unwind block (FDE at 0x12a34), CODE XREF=cdb_advance_fd+32, chdir_long+462, chdir_long+518
000000000000b622         test       edi, edi
000000000000b624         js         loc_b640

000000000000b626         sub        rsp, 0x8
000000000000b62a         call       j_close                                     ; close
000000000000b62f         test       eax, eax
000000000000b631         jne        loc_b642

000000000000b633         add        rsp, 0x8
000000000000b637         ret
                        ; endp
000000000000b638         align      64

                     loc_b640:
000000000000b640         ret                                                    ; CODE XREF=cdb_free+4
                        ; endp

                     loc_b642:
000000000000b642         lea        rcx, qword [__PRETTY_FUNCTION__.5081]       ; argument "__function" for method j___assert_fail, "cdb_free", CODE XREF=cdb_free+17
000000000000b649         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000b650         lea        rdi, qword [aClosefail]                     ; argument "__assertion" for method j___assert_fail, "! close_fail"
000000000000b657         mov        edx, 0x40                                   ; argument "__line" for method j___assert_fail
000000000000b65c         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000b661         align      16                                          ; End of unwind block (FDE at 0x12a34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cdb_advance_fd:
000000000000b670         push       rbp                                         ; Begin of unwind block (FDE at 0x12a50), CODE XREF=chdir_long+259, chdir_long+409, chdir_long+491, chdir_long+543
000000000000b671         push       rbx
000000000000b672         mov        rbx, rdi
000000000000b675         xor        eax, eax
000000000000b677         mov        edx, aUndationInc                           ; argument "__oflag" for method j_openat, "undation, Inc."
000000000000b67c         sub        rsp, 0x8
000000000000b680         mov        edi, dword [rdi]                            ; argument "__fd" for method j_openat
000000000000b682         call       j_openat                                    ; openat
000000000000b687         test       eax, eax
000000000000b689         js         loc_b6a0

000000000000b68b         mov        ebp, eax
000000000000b68d         mov        rdi, rbx                                    ; argument #1 for method cdb_free
000000000000b690         call       cdb_free                                    ; cdb_free
000000000000b695         mov        dword [rbx], ebp
000000000000b697         xor        eax, eax

                     loc_b699:
000000000000b699         add        rsp, 0x8                                    ; CODE XREF=cdb_advance_fd+53
000000000000b69d         pop        rbx
000000000000b69e         pop        rbp
000000000000b69f         ret
                        ; endp

                     loc_b6a0:
000000000000b6a0         mov        eax, 0xffffffff                             ; CODE XREF=cdb_advance_fd+25
000000000000b6a5         jmp        loc_b699
000000000000b6a7         align      16                                          ; End of unwind block (FDE at 0x12a50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int32_t, -68


                     chdir_long:
000000000000b6b0         push       r15                                         ; Begin of unwind block (FDE at 0x12a7c), CODE XREF=restore_cwd+20
000000000000b6b2         push       r14
000000000000b6b4         push       r13
000000000000b6b6         push       r12
000000000000b6b8         push       rbp
000000000000b6b9         push       rbx
000000000000b6ba         mov        rbp, rdi
000000000000b6bd         sub        rsp, 0x18
000000000000b6c1         mov        rax, qword [fs:0x28]
000000000000b6ca         mov        qword [rsp+0x48+var_40], rax
000000000000b6cf         xor        eax, eax
000000000000b6d1         call       j_chdir                                     ; chdir
000000000000b6d6         test       eax, eax
000000000000b6d8         mov        ebx, eax
000000000000b6da         je         loc_b6e9

000000000000b6dc         call       j___errno_location                          ; __errno_location
000000000000b6e1         cmp        dword [rax], 0x24
000000000000b6e4         mov        r14, rax
000000000000b6e7         je         loc_b710

                     loc_b6e9:
000000000000b6e9         mov        rcx, qword [rsp+0x48+var_40]                ; CODE XREF=chdir_long+42, chdir_long+354, chdir_long+475, chdir_long+523
000000000000b6ee         xor        rcx, qword [fs:0x28]
000000000000b6f7         mov        eax, ebx
000000000000b6f9         jne        loc_b901

000000000000b6ff         add        rsp, 0x18
000000000000b703         pop        rbx
000000000000b704         pop        rbp
000000000000b705         pop        r12
000000000000b707         pop        r13
000000000000b709         pop        r14
000000000000b70b         pop        r15
000000000000b70d         ret
                        ; endp
000000000000b70e         align      16

                     loc_b710:
000000000000b710         mov        rdi, rbp                                    ; argument "__s" for method j_strlen, CODE XREF=chdir_long+55
000000000000b713         call       j_strlen                                    ; strlen
000000000000b718         test       rax, rax
000000000000b71b         mov        r12, rax
000000000000b71e         mov        dword [rsp+0x48+var_44], 0xffffff9c
000000000000b726         je         loc_b906

000000000000b72c         cmp        rax, aC234                                  ; "C_2.3.4"
000000000000b732         jbe        loc_b925

000000000000b738         lea        rsi, qword [aLibs+6]                        ; argument "__accept" for method j_strspn, 0x100ce
000000000000b73f         mov        rdi, rbp                                    ; argument "__s" for method j_strspn
000000000000b742         call       j_strspn                                    ; strspn
000000000000b747         cmp        rax, 0x2
000000000000b74b         mov        rbx, rax
000000000000b74e         je         loc_b820

000000000000b754         test       rax, rax
000000000000b757         mov        r15, rbp
000000000000b75a         jne        loc_b8c0

                     loc_b760:
000000000000b760         cmp        byte [r15], 0x2f                            ; CODE XREF=chdir_long+444, chdir_long+557
000000000000b764         je         loc_b963

000000000000b76a         add        rbp, r12
000000000000b76d         cmp        r15, rbp
000000000000b770         ja         loc_b944

000000000000b776         mov        rax, rbp
000000000000b779         lea        r12, qword [rsp+0x48+var_44]
000000000000b77e         sub        rax, r15
000000000000b781         cmp        rax, aC234                                  ; "C_2.3.4"
000000000000b787         mov        r13, r12
000000000000b78a         jg         loc_b7ec

000000000000b78c         jmp        loc_b890
000000000000b791         align      8

                     loc_b798:
000000000000b798         mov        byte [rax], 0x0                             ; CODE XREF=chdir_long+340
000000000000b79b         sub        rax, r15
000000000000b79e         cmp        rax, aC234                                  ; "C_2.3.4"
000000000000b7a4         jg         loc_b8e2

000000000000b7aa         mov        rsi, r15
000000000000b7ad         mov        rdi, r12
000000000000b7b0         mov        r13, r12
000000000000b7b3         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000b7b8         test       eax, eax
000000000000b7ba         mov        byte [rbx], 0x2f
000000000000b7bd         jne        loc_b878

000000000000b7c3         add        rbx, 0x1
000000000000b7c7         lea        rsi, qword [aLibs+6]                        ; argument "__accept" for method j_strspn, 0x100ce
000000000000b7ce         mov        rdi, rbx                                    ; argument "__s" for method j_strspn
000000000000b7d1         call       j_strspn                                    ; strspn
000000000000b7d6         lea        r15, qword [rbx+rax]
000000000000b7da         mov        rax, rbp
000000000000b7dd         sub        rax, r15
000000000000b7e0         cmp        rax, aC234                                  ; "C_2.3.4"
000000000000b7e6         jle        loc_b890

                     loc_b7ec:
000000000000b7ec         mov        edx, 0x1000                                 ; argument "__n" for method j_memrchr, CODE XREF=chdir_long+218
000000000000b7f1         mov        esi, 0x2f                                   ; argument "__c" for method j_memrchr
000000000000b7f6         mov        rdi, r15                                    ; argument "__s" for method j_memrchr
000000000000b7f9         call       j_memrchr                                   ; memrchr
000000000000b7fe         test       rax, rax
000000000000b801         mov        rbx, rax
000000000000b804         jne        loc_b798

000000000000b806         mov        dword [r14], 0x24
000000000000b80d         mov        ebx, 0xffffffff
000000000000b812         jmp        loc_b6e9
000000000000b817         align      32

                     loc_b820:
000000000000b820         lea        rdx, qword [r12-3]                          ; argument "__n" for method j_memchr, CODE XREF=chdir_long+158
000000000000b825         lea        rdi, qword [rbp+3]                          ; argument "__s" for method j_memchr
000000000000b829         mov        esi, 0x2f                                   ; argument "__c" for method j_memchr
000000000000b82e         call       j_memchr                                    ; memchr
000000000000b833         test       rax, rax
000000000000b836         mov        rbx, rax
000000000000b839         je         loc_b886

000000000000b83b         lea        r13, qword [rsp+0x48+var_44]
000000000000b840         mov        byte [rax], 0x0
000000000000b843         mov        rsi, rbp
000000000000b846         mov        rdi, r13
000000000000b849         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000b84e         test       eax, eax
000000000000b850         mov        byte [rbx], 0x2f
000000000000b853         jne        loc_b878

000000000000b855         add        rbx, 0x1
000000000000b859         lea        rsi, qword [aLibs+6]                        ; argument "__accept" for method j_strspn, 0x100ce
000000000000b860         mov        rdi, rbx                                    ; argument "__s" for method j_strspn
000000000000b863         call       j_strspn                                    ; strspn
000000000000b868         lea        r15, qword [rbx+rax]
000000000000b86c         jmp        loc_b760
000000000000b871         align      8

                     loc_b878:
000000000000b878         mov        ebx, dword [r14]                            ; CODE XREF=chdir_long+269, chdir_long+419, chdir_long+498, chdir_long+513, chdir_long+550
000000000000b87b         mov        rdi, r13                                    ; argument #1 for method cdb_free
000000000000b87e         call       cdb_free                                    ; cdb_free
000000000000b883         mov        dword [r14], ebx

                     loc_b886:
000000000000b886         mov        ebx, 0xffffffff                             ; CODE XREF=chdir_long+393
000000000000b88b         jmp        loc_b6e9

                     loc_b890:
000000000000b890         cmp        rbp, r15                                    ; CODE XREF=chdir_long+220, chdir_long+310
000000000000b893         jbe        loc_b8a4

000000000000b895         mov        rsi, r15
000000000000b898         mov        rdi, r13
000000000000b89b         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000b8a0         test       eax, eax
000000000000b8a2         jne        loc_b878

                     loc_b8a4:
000000000000b8a4         mov        edi, dword [rsp+0x48+var_44]                ; argument "__fd" for method j_fchdir, CODE XREF=chdir_long+483
000000000000b8a8         call       j_fchdir                                    ; fchdir
000000000000b8ad         test       eax, eax
000000000000b8af         mov        ebx, eax
000000000000b8b1         jne        loc_b878

000000000000b8b3         mov        rdi, r13                                    ; argument #1 for method cdb_free
000000000000b8b6         call       cdb_free                                    ; cdb_free
000000000000b8bb         jmp        loc_b6e9

                     loc_b8c0:
000000000000b8c0         lea        r13, qword [rsp+0x48+var_44]                ; CODE XREF=chdir_long+170
000000000000b8c5         lea        rsi, qword [aLibs+6]                        ; 0x100ce
000000000000b8cc         mov        rdi, r13
000000000000b8cf         call       cdb_advance_fd                              ; cdb_advance_fd
000000000000b8d4         test       eax, eax
000000000000b8d6         jne        loc_b878

000000000000b8d8         lea        r15, qword [rbp+rbx]
000000000000b8dd         jmp        loc_b760

                     loc_b8e2:
000000000000b8e2         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+244
000000000000b8e9         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000b8f0         lea        rdi, qword [aSlashDir4096]                  ; argument "__assertion" for method j___assert_fail, "slash - dir < 4096"
000000000000b8f7         mov        edx, 0xb3                                   ; argument "__line" for method j___assert_fail
000000000000b8fc         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_b901:
000000000000b901         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=chdir_long+73
                        ; endp

                     loc_b906:
000000000000b906         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+118
000000000000b90d         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000b914         lea        rdi, qword [a0Len]                          ; argument "__assertion" for method j___assert_fail, "0 < len"
000000000000b91b         mov        edx, 0x7e                                   ; argument "__line" for method j___assert_fail
000000000000b920         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_b925:
000000000000b925         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+130
000000000000b92c         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000b933         lea        rdi, qword [a4096Len]                       ; argument "__assertion" for method j___assert_fail, "4096 <= len"
000000000000b93a         mov        edx, 0x7f                                   ; argument "__line" for method j___assert_fail
000000000000b93f         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_b944:
000000000000b944         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+192
000000000000b94b         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000b952         lea        rdi, qword [aDirDirend]                     ; argument "__assertion" for method j___assert_fail, "dir <= dir_end"
000000000000b959         mov        edx, 0xa3                                   ; argument "__line" for method j___assert_fail
000000000000b95e         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_b963:
000000000000b963         lea        rcx, qword [__PRETTY_FUNCTION__.5099]       ; argument "__function" for method j___assert_fail, "chdir_long", CODE XREF=chdir_long+180
000000000000b96a         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/chdir-long.c"
000000000000b971         lea        rdi, qword [a4096Len+12]                    ; argument "__assertion" for method j___assert_fail, 0x10afc
000000000000b978         mov        edx, 0xa2                                   ; argument "__line" for method j___assert_fail
000000000000b97d         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000b982         align      16                                          ; End of unwind block (FDE at 0x12a7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_160: int64_t, -352
        ;    var_178: int64_t, -376
        ;    var_180: int64_t, -384
        ;    var_188: int64_t, -392
        ;    var_190: int64_t, -400
        ;    var_198: int64_t, -408
        ;    var_1A0: int64_t, -416
        ;    var_1A8: int64_t, -424


                     get_fs_usage:
000000000000b990         push       r12                                         ; Begin of unwind block (FDE at 0x12acc), CODE XREF=get_dev+252
000000000000b992         push       rbp
000000000000b993         mov        r12, rdi
000000000000b996         push       rbx
000000000000b997         mov        rbx, rdx
000000000000b99a         sub        rsp, 0x190
000000000000b9a1         mov        rax, qword [fs:0x28]
000000000000b9aa         mov        qword [rsp+0x1a8+var_20], rax
000000000000b9b2         xor        eax, eax
000000000000b9b4         mov        eax, dword [statvfs_works_cache.2531]       ; statvfs_works_cache.2531
000000000000b9ba         mov        rbp, rsp
000000000000b9bd         test       eax, eax
000000000000b9bf         js         loc_b9f0

000000000000b9c1         je         loc_ba0a

                     loc_b9c3:
000000000000b9c3         mov        rsi, rbp                                    ; argument "__buf" for method j_statvfs, CODE XREF=get_fs_usage+277
000000000000b9c6         mov        rdi, r12                                    ; argument "__file" for method j_statvfs
000000000000b9c9         call       j_statvfs                                   ; statvfs
000000000000b9ce         mov        edx, eax
000000000000b9d0         mov        eax, 0xffffffff
000000000000b9d5         test       edx, edx
000000000000b9d7         js         loc_ba5b

000000000000b9dd         mov        rax, qword [rsp+0x1a8+var_1A0]
000000000000b9e2         test       rax, rax
000000000000b9e5         jne        loc_ba22

000000000000b9e7         mov        rax, qword [rsp+0x1a8+var_1A8]
000000000000b9eb         jmp        loc_ba22
000000000000b9ed         align      16

                     loc_b9f0:
000000000000b9f0         mov        rdi, rbp                                    ; argument "__name" for method j_uname, CODE XREF=get_fs_usage+47
000000000000b9f3         call       j_uname                                     ; uname
000000000000b9f8         test       eax, eax
000000000000b9fa         je         loc_ba80

                     loc_ba00:
000000000000ba00         mov        dword [statvfs_works_cache.2531], 0x0       ; statvfs_works_cache.2531, CODE XREF=get_fs_usage+261

                     loc_ba0a:
000000000000ba0a         mov        rsi, rbp                                    ; argument "__buf" for method j_statfs, CODE XREF=get_fs_usage+49
000000000000ba0d         mov        rdi, r12                                    ; argument "__file" for method j_statfs
000000000000ba10         call       j_statfs                                    ; statfs
000000000000ba15         test       eax, eax
000000000000ba17         js         loc_baaa

000000000000ba1d         mov        rax, qword [rsp+0x1a8+var_160]

                     loc_ba22:
000000000000ba22         mov        qword [rbx], rax                            ; CODE XREF=get_fs_usage+85, get_fs_usage+91
000000000000ba25         mov        rax, qword [rsp+0x1a8+var_198]
000000000000ba2a         mov        qword [rbx+8], rax
000000000000ba2e         mov        rax, qword [rsp+0x1a8+var_190]
000000000000ba33         mov        qword [rbx+0x10], rax
000000000000ba37         mov        rax, qword [rsp+0x1a8+var_188]
000000000000ba3c         mov        qword [rbx+0x18], rax
000000000000ba40         shr        rax, 0x3f
000000000000ba44         mov        byte [rbx+0x20], al
000000000000ba47         mov        rax, qword [rsp+0x1a8+var_180]
000000000000ba4c         mov        qword [rbx+0x28], rax
000000000000ba50         mov        rax, qword [rsp+0x1a8+var_178]
000000000000ba55         mov        qword [rbx+0x30], rax
000000000000ba59         xor        eax, eax

                     loc_ba5b:
000000000000ba5b         mov        rcx, qword [rsp+0x1a8+var_20]               ; CODE XREF=get_fs_usage+71, get_fs_usage+287
000000000000ba63         xor        rcx, qword [fs:0x28]
000000000000ba6c         jne        loc_bab1

000000000000ba6e         add        rsp, 0x190
000000000000ba75         pop        rbx
000000000000ba76         pop        rbp
000000000000ba77         pop        r12
000000000000ba79         ret
                        ; endp
000000000000ba7a         align      128

                     loc_ba80:
000000000000ba80         lea        rdi, qword [rbp+0x82]                       ; argument "__s1" for method j_strverscmp, CODE XREF=get_fs_usage+106
000000000000ba87         lea        rsi, qword [a2636]                          ; argument "__s2" for method j_strverscmp, "2.6.36"
000000000000ba8e         call       j_strverscmp                                ; strverscmp
000000000000ba93         test       eax, eax
000000000000ba95         js         loc_ba00

000000000000ba9b         mov        dword [statvfs_works_cache.2531], 0x1       ; statvfs_works_cache.2531
000000000000baa5         jmp        loc_b9c3

                     loc_baaa:
000000000000baaa         mov        eax, 0xffffffff                             ; CODE XREF=get_fs_usage+135
000000000000baaf         jmp        loc_ba5b

                     loc_bab1:
000000000000bab1         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=get_fs_usage+220
                        ; endp
000000000000bab6         align      64                                          ; End of unwind block (FDE at 0x12acc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
000000000000bac0         push       r13                                         ; Begin of unwind block (FDE at 0x12b04), CODE XREF=replace_invalid_chars+138, mbsnwidth+191, sub_90d0+534
000000000000bac2         push       r12
000000000000bac4         mov        r13, rsi
000000000000bac7         push       rbp
000000000000bac8         push       rbx
000000000000bac9         mov        rbx, rdi
000000000000bacc         mov        r12, rdx
000000000000bacf         sub        rsp, 0x18
000000000000bad3         mov        rax, qword [fs:0x28]
000000000000badc         mov        qword [rsp+0x38+var_30], rax
000000000000bae1         xor        eax, eax
000000000000bae3         lea        rax, qword [rsp+0x38+var_34]
000000000000bae8         test       rdi, rdi
000000000000baeb         cmove      rbx, rax
000000000000baef         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
000000000000baf2         call       j_mbrtowc                                   ; mbrtowc
000000000000baf7         cmp        rax, 0xfffffffffffffffd
000000000000bafb         mov        rbp, rax
000000000000bafe         jbe        loc_bb20

000000000000bb00         test       r12, r12
000000000000bb03         je         loc_bb20

000000000000bb05         xor        edi, edi
000000000000bb07         call       hard_locale                                 ; hard_locale
000000000000bb0c         test       al, al
000000000000bb0e         jne        loc_bb20

000000000000bb10         movzx      eax, byte [r13]
000000000000bb15         mov        ebp, 0x1
000000000000bb1a         mov        dword [rbx], eax
000000000000bb1c         nop        dword [rax]

                     loc_bb20:
000000000000bb20         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
000000000000bb25         xor        rdx, qword [fs:0x28]
000000000000bb2e         mov        rax, rbp
000000000000bb31         jne        loc_bb3e

000000000000bb33         add        rsp, 0x18
000000000000bb37         pop        rbx
000000000000bb38         pop        rbp
000000000000bb39         pop        r12
000000000000bb3b         pop        r13
000000000000bb3d         ret
                        ; endp

                     loc_bb3e:
000000000000bb3e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
000000000000bb43         align      16                                          ; End of unwind block (FDE at 0x12b04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     unescape_tab:
000000000000bb50         push       rbx                                         ; Begin of unwind block (FDE at 0x12b44), CODE XREF=read_file_system_list+344, read_file_system_list+359, read_file_system_list+374
000000000000bb51         mov        rbx, rdi
000000000000bb54         call       j_strlen                                    ; strlen
000000000000bb59         mov        rcx, rbx
000000000000bb5c         add        rax, 0x1
000000000000bb60         xor        edx, edx
000000000000bb62         jmp        loc_bb77
000000000000bb64         align      8

                     loc_bb68:
000000000000bb68         mov        byte [rcx], sil                             ; CODE XREF=unescape_tab+51, unescape_tab+60, unescape_tab+75, unescape_tab+91, unescape_tab+106
000000000000bb6b         mov        rdx, rdi

                     loc_bb6e:
000000000000bb6e         add        rcx, 0x1                                    ; CODE XREF=unescape_tab+122
000000000000bb72         cmp        rax, rdx
000000000000bb75         jbe        loc_bbd0

                     loc_bb77:
000000000000bb77         movzx      esi, byte [rbx+rdx]                         ; CODE XREF=unescape_tab+18
000000000000bb7b         lea        rdi, qword [rdx+1]
000000000000bb7f         cmp        sil, 0x5c
000000000000bb83         jne        loc_bb68

000000000000bb85         lea        r8, qword [rdx+4]
000000000000bb89         cmp        r8, rax
000000000000bb8c         jae        loc_bb68

000000000000bb8e         movzx      r9d, byte [rbx+rdi]
000000000000bb93         lea        r10d, dword [r9-0x30]
000000000000bb97         cmp        r10b, 0x3
000000000000bb9b         ja         loc_bb68

000000000000bb9d         movzx      r10d, byte [rbx+rdx+2]
000000000000bba3         lea        r11d, dword [r10-0x30]
000000000000bba7         cmp        r11b, 0x7
000000000000bbab         ja         loc_bb68

000000000000bbad         movzx      edx, byte [rbx+rdx+3]
000000000000bbb2         lea        r11d, dword [rdx-0x30]
000000000000bbb6         cmp        r11b, 0x7
000000000000bbba         ja         loc_bb68

000000000000bbbc         lea        edx, dword [r10+r9*8]
000000000000bbc0         lea        edx, dword [r11+rdx*8-0x80]
000000000000bbc5         mov        byte [rcx], dl
000000000000bbc7         mov        rdx, r8
000000000000bbca         jmp        loc_bb6e
000000000000bbcc         align      16

                     loc_bbd0:
000000000000bbd0         pop        rbx                                         ; CODE XREF=unescape_tab+37
000000000000bbd1         ret
                        ; endp
000000000000bbd2         align      32                                          ; End of unwind block (FDE at 0x12b44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     free_mount_entry:
000000000000bbe0         push       rbx                                         ; Begin of unwind block (FDE at 0x12b60), CODE XREF=main+4718, read_file_system_list+1844
000000000000bbe1         mov        rbx, rdi
000000000000bbe4         mov        rdi, qword [rdi]                            ; argument "__ptr" for method j_free
000000000000bbe7         call       j_free                                      ; free
000000000000bbec         mov        rdi, qword [rbx+8]                          ; argument "__ptr" for method j_free
000000000000bbf0         call       j_free                                      ; free
000000000000bbf5         mov        rdi, qword [rbx+0x10]                       ; argument "__ptr" for method j_free
000000000000bbf9         call       j_free                                      ; free
000000000000bbfe         test       byte [rbx+0x28], 0x4
000000000000bc02         je         loc_bc0d

000000000000bc04         mov        rdi, qword [rbx+0x18]                       ; argument "__ptr" for method j_free
000000000000bc08         call       j_free                                      ; free

                     loc_bc0d:
000000000000bc0d         mov        rdi, rbx                                    ; argument "__ptr" for method j_free, CODE XREF=free_mount_entry+34
000000000000bc10         pop        rbx
000000000000bc11         jmp        j_free                                      ; free
                        ; endp
000000000000bc16         align      32                                          ; End of unwind block (FDE at 0x12b60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92
        ;    var_60: int32_t, -96
        ;    var_64: int32_t, -100
        ;    var_68: int32_t, -104
        ;    var_6C: int32_t, -108
        ;    var_70: int32_t, -112
        ;    var_74: int32_t, -116
        ;    var_78: int32_t, -120
        ;    var_7C: int32_t, -124
        ;    var_80: int32_t, -128
        ;    var_81: int8_t, -129
        ;    var_90: int64_t, -144


                     read_file_system_list:
000000000000bc20         push       r15                                         ; Begin of unwind block (FDE at 0x12b7c), CODE XREF=main+1724
000000000000bc22         push       r14
000000000000bc24         lea        rsi, qword [aWriteError+10]                 ; argument "__modes" for method j_fopen, 0xff85
000000000000bc2b         push       r13
000000000000bc2d         push       r12
000000000000bc2f         lea        rdi, qword [aProcselfmounti]                ; argument "__filename" for method j_fopen, "/proc/self/mountinfo"
000000000000bc36         push       rbp
000000000000bc37         push       rbx
000000000000bc38         sub        rsp, 0x68
000000000000bc3c         mov        rax, qword [fs:0x28]
000000000000bc45         mov        qword [rsp+0x98+var_40], rax
000000000000bc4a         xor        eax, eax
000000000000bc4c         call       j_fopen                                     ; fopen
000000000000bc51         test       rax, rax
000000000000bc54         je         loc_c0a0

000000000000bc5a         lea        r14, qword [rsp+0x98+var_58]
000000000000bc5f         lea        r13, qword [rsp+0x98+var_48]
000000000000bc64         lea        r12, qword [rsp+0x98+var_50]
000000000000bc69         mov        rbp, rax
000000000000bc6c         mov        qword [rsp+0x98+var_50], 0x0
000000000000bc75         mov        qword [rsp+0x98+var_48], 0x0
000000000000bc7e         nop

                     loc_bc80:
000000000000bc80         mov        rcx, rbp                                    ; argument "__stream" for method j___getdelim, CODE XREF=read_file_system_list+196, read_file_system_list+226, read_file_system_list+282, read_file_system_list+675
000000000000bc83         mov        edx, 0xa                                    ; argument "__delimiter" for method j___getdelim
000000000000bc88         mov        rsi, r13                                    ; argument "__n" for method j___getdelim
000000000000bc8b         mov        rdi, r12                                    ; argument "__lineptr" for method j___getdelim
000000000000bc8e         call       j___getdelim                                ; __getdelim
000000000000bc93         cmp        rax, 0xffffffffffffffff
000000000000bc97         je         loc_bed0

000000000000bc9d         lea        rcx, qword [rsp+0x98+var_7C]
000000000000bca2         lea        rdx, qword [rsp+0x98+var_80]
000000000000bca7         sub        rsp, 0x8
000000000000bcab         lea        rbx, qword [rsp+0xa0+var_81]
000000000000bcb0         lea        rsi, qword [aUUUuNsnNsnc]                   ; argument "__format" for method j_sscanf, "%*u %*u %u:%u %n%*s%n %n%*s%n%c"
000000000000bcb7         push       rbx
000000000000bcb8         lea        rax, qword [rsp+0xa8+var_74]
000000000000bcbd         push       rax
000000000000bcbe         lea        rax, qword [rsp+0xb0+var_78]
000000000000bcc3         push       rax
000000000000bcc4         mov        rdi, qword [rsp+0xb8+var_50]                ; argument "__s" for method j_sscanf
000000000000bcc9         xor        eax, eax
000000000000bccb         lea        r9, qword [rsp+0xb8+var_5C]
000000000000bcd0         lea        r8, qword [rsp+0xb8+var_60]
000000000000bcd5         call       j_sscanf                                    ; sscanf
000000000000bcda         and        eax, 0xfffffffb
000000000000bcdd         add        rsp, 0x20
000000000000bce1         cmp        eax, 0x3
000000000000bce4         jne        loc_bc80

000000000000bce6         movsxd     rdi, dword [rsp+0x98+var_74]
000000000000bceb         lea        rsi, qword [aProcselfmounti+21]             ; argument "__needle" for method j_strstr, 0x10b67
000000000000bcf2         add        rdi, qword [rsp+0x98+var_50]                ; argument "__haystack" for method j_strstr
000000000000bcf7         call       j_strstr                                    ; strstr
000000000000bcfc         test       rax, rax
000000000000bcff         mov        r15, rax
000000000000bd02         je         loc_bc80

000000000000bd08         lea        rcx, qword [rsp+0x98+var_6C]
000000000000bd0d         lea        rdx, qword [rsp+0x98+var_70]
000000000000bd12         sub        rsp, 0x8
000000000000bd16         push       rbx
000000000000bd17         lea        rsi, qword [aNsnNsnC]                       ; argument "__format" for method j_sscanf, " - %n%*s%n %n%*s%n %c"
000000000000bd1e         mov        rdi, rax                                    ; argument "__s" for method j_sscanf
000000000000bd21         xor        eax, eax
000000000000bd23         lea        r9, qword [rsp+0xa8+var_64]
000000000000bd28         lea        r8, qword [rsp+0xa8+var_68]
000000000000bd2d         call       j_sscanf                                    ; sscanf
000000000000bd32         and        eax, 0xfffffffb
000000000000bd35         cmp        eax, 0x1
000000000000bd38         pop        rdx
000000000000bd39         pop        rcx
000000000000bd3a         jne        loc_bc80

000000000000bd40         movsxd     rax, dword [rsp+0x98+var_5C]
000000000000bd45         mov        rdx, qword [rsp+0x98+var_50]
000000000000bd4a         mov        byte [rdx+rax], 0x0
000000000000bd4e         movsxd     rax, dword [rsp+0x98+var_74]
000000000000bd53         mov        rdx, qword [rsp+0x98+var_50]
000000000000bd58         mov        byte [rdx+rax], 0x0
000000000000bd5c         movsxd     rax, dword [rsp+0x98+var_6C]
000000000000bd61         mov        byte [r15+rax], 0x0
000000000000bd66         movsxd     rax, dword [rsp+0x98+var_64]
000000000000bd6b         mov        byte [r15+rax], 0x0
000000000000bd70         movsxd     rdi, dword [rsp+0x98+var_68]
000000000000bd75         add        rdi, r15
000000000000bd78         call       unescape_tab                                ; unescape_tab
000000000000bd7d         movsxd     rdi, dword [rsp+0x98+var_78]
000000000000bd82         add        rdi, qword [rsp+0x98+var_50]
000000000000bd87         call       unescape_tab                                ; unescape_tab
000000000000bd8c         movsxd     rdi, dword [rsp+0x98+var_60]
000000000000bd91         add        rdi, qword [rsp+0x98+var_50]
000000000000bd96         call       unescape_tab                                ; unescape_tab
000000000000bd9b         mov        edi, 0x38
000000000000bda0         call       xmalloc                                     ; xmalloc
000000000000bda5         movsxd     rdi, dword [rsp+0x98+var_68]
000000000000bdaa         mov        rbx, rax
000000000000bdad         add        rdi, r15
000000000000bdb0         call       xstrdup                                     ; xstrdup
000000000000bdb5         movsxd     rdi, dword [rsp+0x98+var_78]
000000000000bdba         mov        qword [rbx], rax
000000000000bdbd         add        rdi, qword [rsp+0x98+var_50]
000000000000bdc2         call       xstrdup                                     ; xstrdup
000000000000bdc7         movsxd     rdi, dword [rsp+0x98+var_60]
000000000000bdcc         mov        qword [rbx+8], rax
000000000000bdd0         add        rdi, qword [rsp+0x98+var_50]
000000000000bdd5         call       xstrdup                                     ; xstrdup
000000000000bdda         movsxd     rdi, dword [rsp+0x98+var_70]
000000000000bddf         mov        qword [rbx+0x10], rax
000000000000bde3         add        rdi, r15
000000000000bde6         call       xstrdup                                     ; xstrdup
000000000000bdeb         mov        edx, dword [rsp+0x98+var_80]
000000000000bdef         mov        r15, rax
000000000000bdf2         mov        qword [rbx+0x18], rax
000000000000bdf6         mov        eax, dword [rsp+0x98+var_7C]
000000000000bdfa         movabs     rsi, 0xfffff00000000000
000000000000be04         lea        rdi, qword [aAutofs]                        ; "autofs"
000000000000be0b         or         byte [rbx+0x28], 0x4
000000000000be0f         mov        rcx, rdx
000000000000be12         shl        rdx, 0x20
000000000000be16         shl        rcx, 0x8
000000000000be1a         and        rdx, rsi
000000000000be1d         movabs     rsi, 0xffffff00000
000000000000be27         and        ecx, 0xfff00
000000000000be2d         or         rdx, rcx
000000000000be30         movzx      ecx, al
000000000000be33         shl        rax, 0xc
000000000000be37         or         rdx, rcx
000000000000be3a         and        rax, rsi
000000000000be3d         mov        ecx, 0x7
000000000000be42         mov        rsi, r15
000000000000be45         or         rax, rdx
000000000000be48         mov        edx, 0x1
000000000000be4d         rep  cmpsb byte [rsi], byte [rdi]
000000000000be4f         mov        qword [rbx+0x20], rax
000000000000be53         seta       al
000000000000be56         sbb        al, 0x0
000000000000be58         test       al, al
000000000000be5a         je         loc_be7a

000000000000be5c         lea        rdi, qword [aAutofs+7]                      ; 0x10b88
000000000000be63         mov        ecx, 0x5
000000000000be68         mov        rsi, r15
000000000000be6b         rep  cmpsb byte [rsi], byte [rdi]
000000000000be6d         seta       al
000000000000be70         sbb        al, 0x0
000000000000be72         test       al, al
000000000000be74         jne        loc_bf28

                     loc_be7a:
000000000000be7a         movzx      eax, byte [rbx+0x28]                        ; CODE XREF=read_file_system_list+570, read_file_system_list+800, read_file_system_list+830, read_file_system_list+860, read_file_system_list+890, read_file_system_list+920, read_file_system_list+950, read_file_system_list+980, read_file_system_list+1010, read_file_system_list+1040, read_file_system_list+1072
000000000000be7e         mov        r8, qword [rbx]
000000000000be81         mov        esi, 0x3a                                   ; argument "__c" for method j_strchr
000000000000be86         mov        rdi, r8                                     ; argument "__s" for method j_strchr
000000000000be89         mov        qword [rsp+0x98+var_90], r8
000000000000be8e         and        eax, 0xfffffffe
000000000000be91         or         eax, edx
000000000000be93         mov        byte [rbx+0x28], al
000000000000be96         call       j_strchr                                    ; strchr
000000000000be9b         test       rax, rax
000000000000be9e         mov        edx, 0x1
000000000000bea3         mov        r8, qword [rsp+0x98+var_90]
000000000000bea8         je         loc_c070

                     loc_beae:
000000000000beae         movzx      eax, byte [rbx+0x28]                        ; CODE XREF=read_file_system_list+1141, read_file_system_list+1955, read_file_system_list+1985
000000000000beb2         add        edx, edx
000000000000beb4         and        eax, 0xfffffffd
000000000000beb7         or         eax, edx
000000000000beb9         mov        byte [rbx+0x28], al
000000000000bebc         mov        qword [r14], rbx
000000000000bebf         lea        r14, qword [rbx+0x30]
000000000000bec3         jmp        loc_bc80
000000000000bec8         align      16

                     loc_bed0:
000000000000bed0         mov        rdi, qword [rsp+0x98+var_50]                ; argument "__ptr" for method j_free, CODE XREF=read_file_system_list+119
000000000000bed5         call       j_free                                      ; free
000000000000beda         test       byte [rbp], 0x20
000000000000bede         jne        loc_c440

000000000000bee4         mov        rdi, rbp
000000000000bee7         call       rpl_fclose                                  ; rpl_fclose
000000000000beec         cmp        eax, 0xffffffff
000000000000beef         je         loc_c32e

                     loc_bef5:
000000000000bef5         mov        qword [r14], 0x0                            ; CODE XREF=read_file_system_list+1800
000000000000befc         mov        rax, qword [rsp+0x98+var_58]

                     loc_bf01:
000000000000bf01         mov        rbx, qword [rsp+0x98+var_40]                ; CODE XREF=read_file_system_list+1868, read_file_system_list+2110
000000000000bf06         xor        rbx, qword [fs:0x28]
000000000000bf0f         jne        loc_c463

000000000000bf15         add        rsp, 0x68
000000000000bf19         pop        rbx
000000000000bf1a         pop        rbp
000000000000bf1b         pop        r12
000000000000bf1d         pop        r13
000000000000bf1f         pop        r14
000000000000bf21         pop        r15
000000000000bf23         ret
                        ; endp
000000000000bf24         align      8

                     loc_bf28:
000000000000bf28         lea        rdi, qword [aSubfs]                         ; "subfs", CODE XREF=read_file_system_list+596
000000000000bf2f         mov        ecx, 0x6
000000000000bf34         mov        rsi, r15
000000000000bf37         rep  cmpsb byte [rsi], byte [rdi]
000000000000bf39         seta       al
000000000000bf3c         sbb        al, 0x0
000000000000bf3e         test       al, al
000000000000bf40         je         loc_be7a

000000000000bf46         lea        rdi, qword [aDebugfs]                       ; "debugfs"
000000000000bf4d         mov        ecx, 0x8
000000000000bf52         mov        rsi, r15
000000000000bf55         rep  cmpsb byte [rsi], byte [rdi]
000000000000bf57         seta       al
000000000000bf5a         sbb        al, 0x0
000000000000bf5c         test       al, al
000000000000bf5e         je         loc_be7a

000000000000bf64         lea        rdi, qword [aDevpts]                        ; "devpts"
000000000000bf6b         mov        ecx, 0x7
000000000000bf70         mov        rsi, r15
000000000000bf73         rep  cmpsb byte [rsi], byte [rdi]
000000000000bf75         seta       al
000000000000bf78         sbb        al, 0x0
000000000000bf7a         test       al, al
000000000000bf7c         je         loc_be7a

000000000000bf82         lea        rdi, qword [aFusectl]                       ; "fusectl"
000000000000bf89         mov        ecx, 0x8
000000000000bf8e         mov        rsi, r15
000000000000bf91         rep  cmpsb byte [rsi], byte [rdi]
000000000000bf93         seta       al
000000000000bf96         sbb        al, 0x0
000000000000bf98         test       al, al
000000000000bf9a         je         loc_be7a

000000000000bfa0         lea        rdi, qword [aMqueue]                        ; "mqueue"
000000000000bfa7         mov        ecx, 0x7
000000000000bfac         mov        rsi, r15
000000000000bfaf         rep  cmpsb byte [rsi], byte [rdi]
000000000000bfb1         seta       al
000000000000bfb4         sbb        al, 0x0
000000000000bfb6         test       al, al
000000000000bfb8         je         loc_be7a

000000000000bfbe         lea        rdi, qword [aRpcpipefs]                     ; "rpc_pipefs"
000000000000bfc5         mov        ecx, 0xb
000000000000bfca         mov        rsi, r15
000000000000bfcd         rep  cmpsb byte [rsi], byte [rdi]
000000000000bfcf         seta       al
000000000000bfd2         sbb        al, 0x0
000000000000bfd4         test       al, al
000000000000bfd6         je         loc_be7a

000000000000bfdc         lea        rdi, qword [aSysfs]                         ; "sysfs"
000000000000bfe3         mov        ecx, 0x6
000000000000bfe8         mov        rsi, r15
000000000000bfeb         rep  cmpsb byte [rsi], byte [rdi]
000000000000bfed         seta       al
000000000000bff0         sbb        al, 0x0
000000000000bff2         test       al, al
000000000000bff4         je         loc_be7a

000000000000bffa         lea        rdi, qword [aDevfs]                         ; "devfs"
000000000000c001         mov        ecx, 0x6
000000000000c006         mov        rsi, r15
000000000000c009         rep  cmpsb byte [rsi], byte [rdi]
000000000000c00b         seta       al
000000000000c00e         sbb        al, 0x0
000000000000c010         test       al, al
000000000000c012         je         loc_be7a

000000000000c018         lea        rdi, qword [aKernfs]                        ; "kernfs"
000000000000c01f         mov        ecx, 0x7
000000000000c024         mov        rsi, r15
000000000000c027         rep  cmpsb byte [rsi], byte [rdi]
000000000000c029         seta       al
000000000000c02c         sbb        al, 0x0
000000000000c02e         test       al, al
000000000000c030         je         loc_be7a

000000000000c036         lea        rsi, qword [aIgnore]                        ; argument "__s2" for method j_strcmp, "ignore"
000000000000c03d         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
000000000000c040         mov        byte [rsp+0x98+var_90], dl
000000000000c044         call       j_strcmp                                    ; strcmp
000000000000c049         test       eax, eax
000000000000c04b         movzx      edx, byte [rsp+0x98+var_90]
000000000000c050         je         loc_be7a

000000000000c056         lea        rsi, qword [aIgnore+7]                      ; argument "__s2" for method j_strcmp, 0x10bd6
000000000000c05d         mov        rdi, r15                                    ; argument "__s1" for method j_strcmp
000000000000c060         call       j_strcmp                                    ; strcmp
000000000000c065         test       eax, eax
000000000000c067         sete       dl
000000000000c06a         jmp        loc_be7a
000000000000c06f         align      16

                     loc_c070:
000000000000c070         cmp        byte [r8], 0x2f                             ; CODE XREF=read_file_system_list+648
000000000000c074         je         loc_c3a0

                     loc_c07a:
000000000000c07a         lea        rsi, qword [aHosts]                         ; "-hosts", CODE XREF=read_file_system_list+1925, read_file_system_list+1991
000000000000c081         mov        ecx, 0x7
000000000000c086         mov        rdi, r8
000000000000c089         rep  cmpsb byte [rsi], byte [rdi]
000000000000c08b         seta       al
000000000000c08e         sbb        al, 0x0
000000000000c090         test       al, al
000000000000c092         sete       dl
000000000000c095         jmp        loc_beae
000000000000c09a         align      32

                     loc_c0a0:
000000000000c0a0         lea        rsi, qword [aWriteError+10]                 ; argument "__mode" for method j_setmntent, 0xff85, CODE XREF=read_file_system_list+52
000000000000c0a7         lea        rdi, qword [aEtcmtab]                       ; argument "__file" for method j_setmntent, "/etc/mtab"
000000000000c0ae         call       j_setmntent                                 ; setmntent
000000000000c0b3         test       rax, rax
000000000000c0b6         mov        rbx, rax
000000000000c0b9         je         loc_c45c

000000000000c0bf         mov        rdi, rbx                                    ; argument "__stream" for method j_getmntent
000000000000c0c2         lea        r14, qword [rsp+0x98+var_58]
000000000000c0c7         lea        rbp, qword [aAutofs]                        ; "autofs"
000000000000c0ce         call       j_getmntent                                 ; getmntent
000000000000c0d3         test       rax, rax
000000000000c0d6         mov        r13, rax
000000000000c0d9         je         loc_c31e

000000000000c0df         nop

                     loc_c0e0:
000000000000c0e0         lea        rsi, qword [aEtcmtab+10]                    ; argument "__opt" for method j_hasmntopt, 0x10bf7, CODE XREF=read_file_system_list+1784
000000000000c0e7         mov        rdi, r13                                    ; argument "__mnt" for method j_hasmntopt
000000000000c0ea         call       j_hasmntopt                                 ; hasmntopt
000000000000c0ef         mov        edi, 0x38
000000000000c0f4         mov        r15, rax
000000000000c0f7         call       xmalloc                                     ; xmalloc
000000000000c0fc         mov        rdi, qword [r13]
000000000000c100         mov        r12, rax
000000000000c103         call       xstrdup                                     ; xstrdup
000000000000c108         mov        rdi, qword [r13+8]
000000000000c10c         mov        qword [r12], rax
000000000000c110         call       xstrdup                                     ; xstrdup
000000000000c115         mov        rdi, qword [r13+0x10]
000000000000c119         mov        qword [r12+8], rax
000000000000c11e         mov        qword [r12+0x10], 0x0
000000000000c127         call       xstrdup                                     ; xstrdup
000000000000c12c         mov        ecx, 0x7
000000000000c131         mov        rsi, rax
000000000000c134         mov        rdi, rbp
000000000000c137         or         byte [r12+0x28], 0x4
000000000000c13d         mov        r13, rax
000000000000c140         mov        qword [r12+0x18], rax
000000000000c145         rep  cmpsb byte [rsi], byte [rdi]
000000000000c147         mov        edx, 0x1
000000000000c14c         seta       al
000000000000c14f         sbb        al, 0x0
000000000000c151         test       al, al
000000000000c153         je         loc_c2b8

000000000000c159         lea        rdi, qword [aAutofs+7]                      ; 0x10b88
000000000000c160         mov        ecx, 0x5
000000000000c165         mov        rsi, r13
000000000000c168         rep  cmpsb byte [rsi], byte [rdi]
000000000000c16a         seta       al
000000000000c16d         sbb        al, 0x0
000000000000c16f         test       al, al
000000000000c171         je         loc_c2b8

000000000000c177         lea        rdi, qword [aSubfs]                         ; "subfs"
000000000000c17e         mov        ecx, 0x6
000000000000c183         mov        rsi, r13
000000000000c186         rep  cmpsb byte [rsi], byte [rdi]
000000000000c188         seta       al
000000000000c18b         sbb        al, 0x0
000000000000c18d         test       al, al
000000000000c18f         je         loc_c2b8

000000000000c195         lea        rdi, qword [aDebugfs]                       ; "debugfs"
000000000000c19c         mov        ecx, 0x8
000000000000c1a1         mov        rsi, r13
000000000000c1a4         rep  cmpsb byte [rsi], byte [rdi]
000000000000c1a6         seta       al
000000000000c1a9         sbb        al, 0x0
000000000000c1ab         test       al, al
000000000000c1ad         je         loc_c2b8

000000000000c1b3         lea        rdi, qword [aDevpts]                        ; "devpts"
000000000000c1ba         mov        ecx, 0x7
000000000000c1bf         mov        rsi, r13
000000000000c1c2         rep  cmpsb byte [rsi], byte [rdi]
000000000000c1c4         seta       al
000000000000c1c7         sbb        al, 0x0
000000000000c1c9         test       al, al
000000000000c1cb         je         loc_c2b8

000000000000c1d1         lea        rdi, qword [aFusectl]                       ; "fusectl"
000000000000c1d8         mov        ecx, 0x8
000000000000c1dd         mov        rsi, r13
000000000000c1e0         rep  cmpsb byte [rsi], byte [rdi]
000000000000c1e2         seta       al
000000000000c1e5         sbb        al, 0x0
000000000000c1e7         test       al, al
000000000000c1e9         je         loc_c2b8

000000000000c1ef         lea        rdi, qword [aMqueue]                        ; "mqueue"
000000000000c1f6         mov        ecx, 0x7
000000000000c1fb         mov        rsi, r13
000000000000c1fe         rep  cmpsb byte [rsi], byte [rdi]
000000000000c200         seta       al
000000000000c203         sbb        al, 0x0
000000000000c205         test       al, al
000000000000c207         je         loc_c2b8

000000000000c20d         lea        rdi, qword [aRpcpipefs]                     ; "rpc_pipefs"
000000000000c214         mov        ecx, 0xb
000000000000c219         mov        rsi, r13
000000000000c21c         rep  cmpsb byte [rsi], byte [rdi]
000000000000c21e         seta       al
000000000000c221         sbb        al, 0x0
000000000000c223         test       al, al
000000000000c225         je         loc_c2b8

000000000000c22b         lea        rdi, qword [aSysfs]                         ; "sysfs"
000000000000c232         mov        ecx, 0x6
000000000000c237         mov        rsi, r13
000000000000c23a         rep  cmpsb byte [rsi], byte [rdi]
000000000000c23c         seta       al
000000000000c23f         sbb        al, 0x0
000000000000c241         test       al, al
000000000000c243         je         loc_c2b8

000000000000c245         lea        rdi, qword [aDevfs]                         ; "devfs"
000000000000c24c         mov        ecx, 0x6
000000000000c251         mov        rsi, r13
000000000000c254         rep  cmpsb byte [rsi], byte [rdi]
000000000000c256         seta       al
000000000000c259         sbb        al, 0x0
000000000000c25b         test       al, al
000000000000c25d         je         loc_c2b8

000000000000c25f         lea        rdi, qword [aKernfs]                        ; "kernfs"
000000000000c266         mov        ecx, 0x7
000000000000c26b         mov        rsi, r13
000000000000c26e         rep  cmpsb byte [rsi], byte [rdi]
000000000000c270         seta       al
000000000000c273         sbb        al, 0x0
000000000000c275         test       al, al
000000000000c277         je         loc_c2b8

000000000000c279         lea        rsi, qword [aIgnore]                        ; argument "__s2" for method j_strcmp, "ignore"
000000000000c280         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
000000000000c283         mov        byte [rsp+0x98+var_90], dl
000000000000c287         call       j_strcmp                                    ; strcmp
000000000000c28c         test       eax, eax
000000000000c28e         movzx      edx, byte [rsp+0x98+var_90]
000000000000c293         je         loc_c2b8

000000000000c295         lea        rsi, qword [aIgnore+7]                      ; argument "__s2" for method j_strcmp, 0x10bd6
000000000000c29c         mov        rdi, r13                                    ; argument "__s1" for method j_strcmp
000000000000c29f         call       j_strcmp                                    ; strcmp
000000000000c2a4         test       r15, r15
000000000000c2a7         sete       dl
000000000000c2aa         test       eax, eax
000000000000c2ac         sete       al
000000000000c2af         and        edx, eax
000000000000c2b1         nop        dword [rax]

                     loc_c2b8:
000000000000c2b8         movzx      eax, byte [r12+0x28]                        ; CODE XREF=read_file_system_list+1331, read_file_system_list+1361, read_file_system_list+1391, read_file_system_list+1421, read_file_system_list+1451, read_file_system_list+1481, read_file_system_list+1511, read_file_system_list+1541, read_file_system_list+1571, read_file_system_list+1597, read_file_system_list+1623
000000000000c2be         mov        r15, qword [r12]
000000000000c2c2         mov        esi, 0x3a                                   ; argument "__c" for method j_strchr
000000000000c2c7         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000c2ca         and        eax, 0xfffffffe
000000000000c2cd         or         eax, edx
000000000000c2cf         mov        byte [r12+0x28], al
000000000000c2d4         call       j_strchr                                    ; strchr
000000000000c2d9         test       rax, rax
000000000000c2dc         mov        edx, 0x1
000000000000c2e1         je         loc_c378

                     loc_c2e7:
000000000000c2e7         movzx      eax, byte [r12+0x28]                        ; CODE XREF=read_file_system_list+1913, read_file_system_list+2031, read_file_system_list+2061
000000000000c2ed         add        edx, edx
000000000000c2ef         mov        qword [r12+0x20], 0xffffffffffffffff
000000000000c2f8         mov        rdi, rbx                                    ; argument "__stream" for method j_getmntent
000000000000c2fb         and        eax, 0xfffffffd
000000000000c2fe         or         eax, edx
000000000000c300         mov        byte [r12+0x28], al
000000000000c305         mov        qword [r14], r12
000000000000c308         lea        r14, qword [r12+0x30]
000000000000c30d         call       j_getmntent                                 ; getmntent
000000000000c312         test       rax, rax
000000000000c315         mov        r13, rax
000000000000c318         jne        loc_c0e0

                     loc_c31e:
000000000000c31e         mov        rdi, rbx                                    ; argument "__stream" for method j_endmntent, CODE XREF=read_file_system_list+1209
000000000000c321         call       j_endmntent                                 ; endmntent
000000000000c326         test       eax, eax
000000000000c328         jne        loc_bef5

                     loc_c32e:
000000000000c32e         call       j___errno_location                          ; __errno_location, CODE XREF=read_file_system_list+719
000000000000c333         mov        r13d, dword [rax]
000000000000c336         mov        r12, rax

                     loc_c339:
000000000000c339         mov        qword [r14], 0x0                            ; CODE XREF=read_file_system_list+2103
000000000000c340         mov        rdi, qword [rsp+0x98+var_58]
000000000000c345         test       rdi, rdi
000000000000c348         je         loc_c366

000000000000c34a         nop        word [rax+rax]

                     loc_c350:
000000000000c350         mov        rbx, qword [rdi+0x30]                       ; CODE XREF=read_file_system_list+1860
000000000000c354         call       free_mount_entry                            ; free_mount_entry
000000000000c359         test       rbx, rbx
000000000000c35c         mov        qword [rsp+0x98+var_58], rbx
000000000000c361         mov        rdi, rbx
000000000000c364         jne        loc_c350

                     loc_c366:
000000000000c366         mov        dword [r12], r13d                           ; CODE XREF=read_file_system_list+1832
000000000000c36a         xor        eax, eax
000000000000c36c         jmp        loc_bf01
000000000000c371         align      8

                     loc_c378:
000000000000c378         cmp        byte [r15], 0x2f                            ; CODE XREF=read_file_system_list+1729
000000000000c37c         je         loc_c3f0

                     loc_c37e:
000000000000c37e         lea        rsi, qword [aHosts]                         ; "-hosts", CODE XREF=read_file_system_list+2005, read_file_system_list+2067
000000000000c385         mov        ecx, 0x7
000000000000c38a         mov        rdi, r15
000000000000c38d         rep  cmpsb byte [rsi], byte [rdi]
000000000000c38f         seta       al
000000000000c392         sbb        al, 0x0
000000000000c394         test       al, al
000000000000c396         sete       dl
000000000000c399         jmp        loc_c2e7
000000000000c39e         align      32

                     loc_c3a0:
000000000000c3a0         cmp        byte [r8+1], 0x2f                           ; CODE XREF=read_file_system_list+1108
000000000000c3a5         jne        loc_c07a

000000000000c3ab         lea        rdi, qword [aSmbfs]                         ; "smbfs"
000000000000c3b2         mov        ecx, 0x6
000000000000c3b7         mov        rsi, r15
000000000000c3ba         rep  cmpsb byte [rsi], byte [rdi]
000000000000c3bc         seta       al
000000000000c3bf         sbb        al, 0x0
000000000000c3c1         test       al, al
000000000000c3c3         je         loc_beae

000000000000c3c9         lea        rdi, qword [aSmbfs+6]                       ; 0x10be1
000000000000c3d0         mov        ecx, 0x5
000000000000c3d5         mov        rsi, r15
000000000000c3d8         rep  cmpsb byte [rsi], byte [rdi]
000000000000c3da         seta       al
000000000000c3dd         sbb        al, 0x0
000000000000c3df         test       al, al
000000000000c3e1         je         loc_beae

000000000000c3e7         jmp        loc_c07a
000000000000c3ec         align      16

                     loc_c3f0:
000000000000c3f0         cmp        byte [r15+1], 0x2f                          ; CODE XREF=read_file_system_list+1884
000000000000c3f5         jne        loc_c37e

000000000000c3f7         lea        rdi, qword [aSmbfs]                         ; "smbfs"
000000000000c3fe         mov        ecx, 0x6
000000000000c403         mov        rsi, r13
000000000000c406         rep  cmpsb byte [rsi], byte [rdi]
000000000000c408         seta       al
000000000000c40b         sbb        al, 0x0
000000000000c40d         test       al, al
000000000000c40f         je         loc_c2e7

000000000000c415         lea        rdi, qword [aSmbfs+6]                       ; 0x10be1
000000000000c41c         mov        ecx, 0x5
000000000000c421         mov        rsi, r13
000000000000c424         rep  cmpsb byte [rsi], byte [rdi]
000000000000c426         seta       al
000000000000c429         sbb        al, 0x0
000000000000c42b         test       al, al
000000000000c42d         je         loc_c2e7

000000000000c433         jmp        loc_c37e
000000000000c438         align      64

                     loc_c440:
000000000000c440         call       j___errno_location                          ; __errno_location, CODE XREF=read_file_system_list+702
000000000000c445         mov        r13d, dword [rax]
000000000000c448         mov        r12, rax
000000000000c44b         mov        rdi, rbp
000000000000c44e         call       rpl_fclose                                  ; rpl_fclose
000000000000c453         mov        dword [r12], r13d
000000000000c457         jmp        loc_c339

                     loc_c45c:
000000000000c45c         xor        eax, eax                                    ; CODE XREF=read_file_system_list+1177
000000000000c45e         jmp        loc_bf01

                     loc_c463:
000000000000c463         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=read_file_system_list+751
                        ; endp
000000000000c468         align      16                                          ; End of unwind block (FDE at 0x12b7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     rpl_vasprintf:
000000000000c470         push       rbx                                         ; Begin of unwind block (FDE at 0x12bf4), CODE XREF=rpl_asprintf+143
000000000000c471         mov        rax, rsi
000000000000c474         mov        rbx, rdi
000000000000c477         xor        edi, edi
000000000000c479         sub        rsp, 0x10
000000000000c47d         mov        rcx, qword [fs:0x28]
000000000000c486         mov        qword [rsp+0x18+var_10], rcx
000000000000c48b         xor        ecx, ecx
000000000000c48d         mov        rsi, rsp
000000000000c490         mov        rcx, rdx
000000000000c493         mov        rdx, rax
000000000000c496         call       vasnprintf                                  ; vasnprintf
000000000000c49b         test       rax, rax
000000000000c49e         je         loc_c4e2

000000000000c4a0         mov        rdx, qword [rsp+0x18+var_18]
000000000000c4a4         cmp        rdx, 0x7fffffff
000000000000c4ab         ja         loc_c4c8

000000000000c4ad         mov        qword [rbx], rax
000000000000c4b0         mov        eax, edx

                     loc_c4b2:
000000000000c4b2         mov        rbx, qword [rsp+0x18+var_10]                ; CODE XREF=rpl_vasprintf+112, rpl_vasprintf+119
000000000000c4b7         xor        rbx, qword [fs:0x28]
000000000000c4c0         jne        loc_c4e9

000000000000c4c2         add        rsp, 0x10
000000000000c4c6         pop        rbx
000000000000c4c7         ret
                        ; endp

                     loc_c4c8:
000000000000c4c8         mov        rdi, rax                                    ; argument "__ptr" for method j_free, CODE XREF=rpl_vasprintf+59
000000000000c4cb         call       j_free                                      ; free
000000000000c4d0         call       j___errno_location                          ; __errno_location
000000000000c4d5         mov        dword [rax], 0x4b
000000000000c4db         mov        eax, 0xffffffff
000000000000c4e0         jmp        loc_c4b2

                     loc_c4e2:
000000000000c4e2         mov        eax, 0xffffffff                             ; CODE XREF=rpl_vasprintf+46
000000000000c4e7         jmp        loc_c4b2

                     loc_c4e9:
000000000000c4e9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vasprintf+80
                        ; endp
000000000000c4ee         align      16                                          ; End of unwind block (FDE at 0x12bf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     areadlink_with_size:
000000000000c4f0         push       r15                                         ; Begin of unwind block (FDE at 0x12c1c), CODE XREF=canonicalize_filename_mode+1068
000000000000c4f2         push       r14
000000000000c4f4         mov        eax, 0x401
000000000000c4f9         push       r13
000000000000c4fb         push       r12
000000000000c4fd         mov        r13, rdi
000000000000c500         push       rbp
000000000000c501         push       rbx
000000000000c502         lea        rbx, qword [rsi+1]
000000000000c506         movabs     r14, 0x3fffffffffffffff
000000000000c510         movabs     r15, 0x7ffffffffffffffe
000000000000c51a         sub        rsp, 0x8
000000000000c51e         cmp        rsi, 0x401
000000000000c525         cmovae     rbx, rax
000000000000c529         nop        dword [rax]

                     loc_c530:
000000000000c530         mov        rdi, rbx                                    ; argument "__size" for method j_malloc, CODE XREF=areadlink_with_size+175
000000000000c533         call       j_malloc                                    ; malloc
000000000000c538         test       rax, rax
000000000000c53b         mov        rbp, rax
000000000000c53e         je         loc_c57b

                     loc_c540:
000000000000c540         mov        rdx, rbx                                    ; argument "__len" for method j_readlink, CODE XREF=areadlink_with_size+137
000000000000c543         mov        rsi, rax                                    ; argument "__buf" for method j_readlink
000000000000c546         mov        rdi, r13                                    ; argument "__path" for method j_readlink
000000000000c549         call       j_readlink                                  ; readlink
000000000000c54e         test       rax, rax
000000000000c551         mov        r12, rax
000000000000c554         js         loc_c5a8

                     loc_c556:
000000000000c556         cmp        rbx, r12                                    ; CODE XREF=areadlink_with_size+192
000000000000c559         ja         loc_c5c0

000000000000c55b         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000c55e         call       j_free                                      ; free
000000000000c563         cmp        rbx, r14
000000000000c566         ja         loc_c590

000000000000c568         add        rbx, rbx
000000000000c56b         mov        rdi, rbx                                    ; argument "__size" for method j_malloc
000000000000c56e         call       j_malloc                                    ; malloc
000000000000c573         test       rax, rax
000000000000c576         mov        rbp, rax
000000000000c579         jne        loc_c540

                     loc_c57b:
000000000000c57b         add        rsp, 0x8                                    ; CODE XREF=areadlink_with_size+78, areadlink_with_size+204, areadlink_with_size+214, areadlink_with_size+237
000000000000c57f         mov        rax, rbp
000000000000c582         pop        rbx
000000000000c583         pop        rbp
000000000000c584         pop        r12
000000000000c586         pop        r13
000000000000c588         pop        r14
000000000000c58a         pop        r15
000000000000c58c         ret
                        ; endp
000000000000c58d         align      16

                     loc_c590:
000000000000c590         cmp        rbx, r15                                    ; CODE XREF=areadlink_with_size+118
000000000000c593         ja         loc_c5d0

000000000000c595         movabs     rbx, 0x7fffffffffffffff
000000000000c59f         jmp        loc_c530
000000000000c5a1         align      8

                     loc_c5a8:
000000000000c5a8         call       j___errno_location                          ; __errno_location, CODE XREF=areadlink_with_size+100
000000000000c5ad         cmp        dword [rax], 0x22
000000000000c5b0         je         loc_c556

000000000000c5b2         mov        rdi, rbp                                    ; argument "__ptr" for method j_free
000000000000c5b5         xor        ebp, ebp
000000000000c5b7         call       j_free                                      ; free
000000000000c5bc         jmp        loc_c57b
000000000000c5be         align      64

                     loc_c5c0:
000000000000c5c0         mov        byte [rbp+r12], 0x0                         ; CODE XREF=areadlink_with_size+105
000000000000c5c6         jmp        loc_c57b
000000000000c5c8         align      16

                     loc_c5d0:
000000000000c5d0         call       j___errno_location                          ; __errno_location, CODE XREF=areadlink_with_size+163
000000000000c5d5         xor        ebp, ebp
000000000000c5d7         mov        dword [rax], 0xc
000000000000c5dd         jmp        loc_c57b
000000000000c5df         align      32                                          ; End of unwind block (FDE at 0x12c1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
000000000000c5e0         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0x12c6c), argument #1 for method usage
000000000000c5e5         jmp        usage                                       ; usage
                        ; endp
000000000000c5ea         align      16                                          ; End of unwind block (FDE at 0x12c6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
000000000000c5f0         push       r15                                         ; Begin of unwind block (FDE at 0x12c80), CODE XREF=human_options+82, __xargmatch_internal+44
000000000000c5f2         push       r14
000000000000c5f4         mov        r15, rsi
000000000000c5f7         push       r13
000000000000c5f9         push       r12
000000000000c5fb         mov        r13, rcx
000000000000c5fe         push       rbp
000000000000c5ff         push       rbx
000000000000c600         mov        rbp, rdx
000000000000c603         sub        rsp, 0x28
000000000000c607         mov        qword [rsp+0x58+var_50], rdi
000000000000c60c         mov        qword [rsp+0x58+var_40], rdx
000000000000c611         call       j_strlen                                    ; strlen
000000000000c616         mov        r14, qword [r15]
000000000000c619         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000c621         test       r14, r14
000000000000c624         je         loc_c6dd

000000000000c62a         mov        r12, rax
000000000000c62d         mov        byte [rsp+0x58+var_41], 0x0
000000000000c632         xor        ebx, ebx
000000000000c634         jmp        loc_c687
000000000000c636         align      64

                     loc_c640:
000000000000c640         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
000000000000c645         test       rax, rax
000000000000c648         je         loc_c6f0

000000000000c64e         mov        rdi, qword [rsp+0x58+var_58]
000000000000c652         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
000000000000c655         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
000000000000c658         imul       rdi, r13
000000000000c65c         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000c65f         call       j_memcmp                                    ; memcmp
000000000000c664         test       eax, eax
000000000000c666         movzx      eax, byte [rsp+0x58+var_41]
000000000000c66b         mov        ecx, 0x1
000000000000c670         cmovne     eax, ecx
000000000000c673         mov        byte [rsp+0x58+var_41], al

                     loc_c677:
000000000000c677         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000c67b         add        rbp, r13
000000000000c67e         mov        r14, qword [r15+rbx*8]
000000000000c682         test       r14, r14
000000000000c685         je         loc_c6c8

                     loc_c687:
000000000000c687         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000000c68c         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000000c68f         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
000000000000c692         call       j_strncmp                                   ; strncmp
000000000000c697         test       eax, eax
000000000000c699         jne        loc_c677

000000000000c69b         mov        rdi, r14                                    ; argument "__s" for method j_strlen
000000000000c69e         call       j_strlen                                    ; strlen
000000000000c6a3         cmp        rax, r12
000000000000c6a6         je         loc_c700

000000000000c6a8         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
000000000000c6ad         jne        loc_c640

000000000000c6af         mov        qword [rsp+0x58+var_58], rbx
000000000000c6b3         add        rbx, 0x1
000000000000c6b7         add        rbp, r13
000000000000c6ba         mov        r14, qword [r15+rbx*8]
000000000000c6be         test       r14, r14
000000000000c6c1         jne        loc_c687

000000000000c6c3         nop        dword [rax+rax]

                     loc_c6c8:
000000000000c6c8         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
000000000000c6cd         mov        rax, 0xfffffffffffffffe
000000000000c6d4         cmove      rax, qword [rsp+0x58+var_58]
000000000000c6d9         mov        qword [rsp+0x58+var_58], rax

                     loc_c6dd:
000000000000c6dd         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
000000000000c6e1         add        rsp, 0x28
000000000000c6e5         pop        rbx
000000000000c6e6         pop        rbp
000000000000c6e7         pop        r12
000000000000c6e9         pop        r13
000000000000c6eb         pop        r14
000000000000c6ed         pop        r15
000000000000c6ef         ret
                        ; endp

                     loc_c6f0:
000000000000c6f0         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
000000000000c6f5         jmp        loc_c677
000000000000c6f7         align      256

                     loc_c700:
000000000000c700         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
000000000000c704         jmp        loc_c6dd
000000000000c706         align      16                                          ; End of unwind block (FDE at 0x12c80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
000000000000c710         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0x12ccc), CODE XREF=__xargmatch_internal+78
000000000000c714         push       r12
000000000000c716         mov        edx, 0x5
000000000000c71b         push       rbp
000000000000c71c         mov        r12, rsi
000000000000c71f         push       rbx
000000000000c720         mov        rbp, rdi
000000000000c723         je         loc_c770

000000000000c725         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
000000000000c72c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c72e         call       j_dcgettext                                 ; dcgettext
000000000000c733         mov        rbx, rax

                     loc_c736:
000000000000c736         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
000000000000c739         mov        edi, 0x1
000000000000c73e         call       quote_n                                     ; quote_n
000000000000c743         mov        rdx, r12
000000000000c746         mov        rbp, rax
000000000000c749         mov        esi, 0x8
000000000000c74e         xor        edi, edi
000000000000c750         call       quotearg_n_style                            ; quotearg_n_style
000000000000c755         mov        r8, rbp
000000000000c758         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000c75b         mov        rcx, rax
000000000000c75e         pop        rbx
000000000000c75f         pop        rbp
000000000000c760         pop        r12
000000000000c762         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000c764         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000c766         xor        eax, eax
000000000000c768         jmp        j_error                                     ; error
                        ; endp
000000000000c76d         align      16

                     loc_c770:
000000000000c770         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
000000000000c777         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c779         call       j_dcgettext                                 ; dcgettext
000000000000c77e         mov        rbx, rax
000000000000c781         jmp        loc_c736
000000000000c783         align      16                                          ; End of unwind block (FDE at 0x12ccc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
000000000000c790         push       r15                                         ; Begin of unwind block (FDE at 0x12cf8), CODE XREF=__xargmatch_internal+92
000000000000c792         push       r14
000000000000c794         mov        r14, rdi
000000000000c797         push       r13
000000000000c799         push       r12
000000000000c79b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000c79d         push       rbp
000000000000c79e         push       rbx
000000000000c79f         mov        rbp, rsi
000000000000c7a2         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
000000000000c7a9         mov        r12, rdx
000000000000c7ac         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000c7b1         sub        rsp, 0x8
000000000000c7b5         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000c7bc         call       j_dcgettext                                 ; dcgettext
000000000000c7c1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000c7c4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000c7c7         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000c7cc         mov        r15, qword [r14]
000000000000c7cf         test       r15, r15
000000000000c7d2         je         loc_c868

000000000000c7d8         xor        r13d, r13d
000000000000c7db         xor        ebx, ebx
000000000000c7dd         jmp        loc_c818
000000000000c7df         align      32

                     loc_c7e0:
000000000000c7e0         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
000000000000c7e3         add        rbx, 0x1
000000000000c7e7         mov        r13, rbp
000000000000c7ea         call       quote                                       ; quote
000000000000c7ef         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000c7f6         lea        rdx, qword [aNS]                            ; "\\n  - %s"
000000000000c7fd         mov        rcx, rax
000000000000c800         mov        esi, 0x1
000000000000c805         xor        eax, eax
000000000000c807         add        rbp, r12
000000000000c80a         call       j___fprintf_chk                             ; __fprintf_chk
000000000000c80f         mov        r15, qword [r14+rbx*8]
000000000000c813         test       r15, r15
000000000000c816         je         loc_c868

                     loc_c818:
000000000000c818         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
000000000000c81b         je         loc_c7e0

000000000000c81d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
000000000000c820         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
000000000000c823         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
000000000000c826         call       j_memcmp                                    ; memcmp
000000000000c82b         test       eax, eax
000000000000c82d         jne        loc_c7e0

000000000000c82f         mov        rdi, r15
000000000000c832         add        rbx, 0x1
000000000000c836         add        rbp, r12
000000000000c839         call       quote                                       ; quote
000000000000c83e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
000000000000c845         lea        rdx, qword [aNS+8]                          ; 0x10c75
000000000000c84c         mov        rcx, rax
000000000000c84f         mov        esi, 0x1
000000000000c854         xor        eax, eax
000000000000c856         call       j___fprintf_chk                             ; __fprintf_chk
000000000000c85b         mov        r15, qword [r14+rbx*8]
000000000000c85f         test       r15, r15
000000000000c862         jne        loc_c818

000000000000c864         nop        dword [rax]

                     loc_c868:
000000000000c868         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
000000000000c86f         mov        rax, qword [rdi+0x28]
000000000000c873         cmp        rax, qword [rdi+0x30]
000000000000c877         jae        loc_c898

000000000000c879         lea        rdx, qword [rax+1]
000000000000c87d         mov        qword [rdi+0x28], rdx
000000000000c881         mov        byte [rax], 0xa
000000000000c884         add        rsp, 0x8
000000000000c888         pop        rbx
000000000000c889         pop        rbp
000000000000c88a         pop        r12
000000000000c88c         pop        r13
000000000000c88e         pop        r14
000000000000c890         pop        r15
000000000000c892         ret
                        ; endp
000000000000c893         align      8

                     loc_c898:
000000000000c898         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
000000000000c89c         mov        esi, 0xa                                    ; argument #2 for method j___overflow
000000000000c8a1         pop        rbx
000000000000c8a2         pop        rbp
000000000000c8a3         pop        r12
000000000000c8a5         pop        r13
000000000000c8a7         pop        r14
000000000000c8a9         pop        r15
000000000000c8ab         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
000000000000c8b0         push       r15                                         ; End of unwind block (FDE at 0x12cf8), Begin of unwind block (FDE at 0x12d58)
000000000000c8b2         push       r14
000000000000c8b4         mov        r14, rdi
000000000000c8b7         push       r13
000000000000c8b9         push       r12
000000000000c8bb         mov        r12, rsi
000000000000c8be         push       rbp
000000000000c8bf         push       rbx
000000000000c8c0         mov        rbp, rcx
000000000000c8c3         mov        rbx, rdx
000000000000c8c6         mov        rcx, r8
000000000000c8c9         mov        rdx, rbp
000000000000c8cc         sub        rsp, 0x8
000000000000c8d0         mov        rsi, rbx
000000000000c8d3         mov        rdi, r12
000000000000c8d6         mov        r15, r8
000000000000c8d9         mov        r13, r9
000000000000c8dc         call       argmatch                                    ; argmatch
000000000000c8e1         test       rax, rax
000000000000c8e4         js         loc_c8f5

                     loc_c8e6:
000000000000c8e6         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
000000000000c8ea         pop        rbx
000000000000c8eb         pop        rbp
000000000000c8ec         pop        r12
000000000000c8ee         pop        r13
000000000000c8f0         pop        r14
000000000000c8f2         pop        r15
000000000000c8f4         ret
                        ; endp

                     loc_c8f5:
000000000000c8f5         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
000000000000c8f8         mov        rsi, r12
000000000000c8fb         mov        rdi, r14
000000000000c8fe         call       argmatch_invalid                            ; argmatch_invalid
000000000000c903         mov        rdx, r15
000000000000c906         mov        rsi, rbp
000000000000c909         mov        rdi, rbx
000000000000c90c         call       argmatch_valid                              ; argmatch_valid
000000000000c911         call       r13
000000000000c914         mov        rax, 0xffffffffffffffff
000000000000c91b         jmp        loc_c8e6
000000000000c91d         align      32                                          ; End of unwind block (FDE at 0x12d58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
000000000000c920         push       r14                                         ; Begin of unwind block (FDE at 0x12da4)
000000000000c922         push       r13
000000000000c924         push       r12
000000000000c926         push       rbp
000000000000c927         push       rbx
000000000000c928         mov        r14, qword [rsi]
000000000000c92b         test       r14, r14
000000000000c92e         je         loc_c961

000000000000c930         mov        r12, rcx
000000000000c933         mov        r13, rdi
000000000000c936         mov        rbp, rdx
000000000000c939         lea        rbx, qword [rsi+8]
000000000000c93d         jmp        loc_c94f
000000000000c93f         align      64

                     loc_c940:
000000000000c940         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
000000000000c943         add        rbp, r12
000000000000c946         add        rbx, 0x8
000000000000c94a         test       r14, r14
000000000000c94d         je         loc_c961

                     loc_c94f:
000000000000c94f         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
000000000000c952         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
000000000000c955         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
000000000000c958         call       j_memcmp                                    ; memcmp
000000000000c95d         test       eax, eax
000000000000c95f         jne        loc_c940

                     loc_c961:
000000000000c961         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
000000000000c962         mov        rax, r14
000000000000c965         pop        rbp
000000000000c966         pop        r12
000000000000c968         pop        r13
000000000000c96a         pop        r14
000000000000c96c         ret
                        ; endp
000000000000c96d         align      16                                          ; End of unwind block (FDE at 0x12da4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
000000000000c970         push       r12                                         ; Begin of unwind block (FDE at 0x12de4), CODE XREF=close_stdout+13, close_stdout+51
000000000000c972         push       rbp
000000000000c973         mov        rbp, rdi
000000000000c976         push       rbx
000000000000c977         call       j___fpending                                ; __fpending
000000000000c97c         mov        ebx, dword [rbp]
000000000000c97f         mov        rdi, rbp
000000000000c982         mov        r12, rax
000000000000c985         call       rpl_fclose                                  ; rpl_fclose
000000000000c98a         and        ebx, 0x20
000000000000c98d         test       ebx, ebx
000000000000c98f         jne        loc_c9a8

000000000000c991         test       eax, eax
000000000000c993         je         loc_c99f

000000000000c995         test       r12, r12
000000000000c998         mov        eax, 0xffffffff
000000000000c99d         je         loc_c9d8

                     loc_c99f:
000000000000c99f         pop        rbx                                         ; CODE XREF=close_stream+35
000000000000c9a0         pop        rbp
000000000000c9a1         pop        r12
000000000000c9a3         ret
                        ; endp
000000000000c9a4         align      8

                     loc_c9a8:
000000000000c9a8         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000000c9aa         jne        loc_c9c8

000000000000c9ac         call       j___errno_location                          ; __errno_location
000000000000c9b1         mov        dword [rax], 0x0
000000000000c9b7         mov        eax, 0xffffffff
000000000000c9bc         pop        rbx
000000000000c9bd         pop        rbp
000000000000c9be         pop        r12
000000000000c9c0         ret
                        ; endp
000000000000c9c1         align      8

                     loc_c9c8:
000000000000c9c8         pop        rbx                                         ; CODE XREF=close_stream+58
000000000000c9c9         mov        eax, 0xffffffff
000000000000c9ce         pop        rbp
000000000000c9cf         pop        r12
000000000000c9d1         ret
                        ; endp
000000000000c9d2         align      8

                     loc_c9d8:
000000000000c9d8         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000c9dd         cmp        dword [rax], 0x9
000000000000c9e0         pop        rbx
000000000000c9e1         pop        rbp
000000000000c9e2         pop        r12
000000000000c9e4         setne      al
000000000000c9e7         movzx      eax, al
000000000000c9ea         neg        eax
000000000000c9ec         ret
                        ; endp
000000000000c9ed         align      16                                          ; End of unwind block (FDE at 0x12de4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_28: int64_t, -40
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     open_safer:
000000000000c9f0         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0x12e34), CODE XREF=save_cwd+26
000000000000c9f4         mov        qword [rsp+0x58+var_28], rdx
000000000000c9f9         xor        edx, edx
000000000000c9fb         mov        rax, qword [fs:0x28]
000000000000ca04         mov        qword [rsp+0x58+var_40], rax
000000000000ca09         xor        eax, eax
000000000000ca0b         test       sil, 0x40
000000000000ca0f         jne        loc_ca38

                     loc_ca11:
000000000000ca11         xor        eax, eax                                    ; CODE XREF=open_safer+103
000000000000ca13         call       j_open                                      ; open
000000000000ca18         mov        edi, eax
000000000000ca1a         call       fd_safer                                    ; fd_safer
000000000000ca1f         mov        rcx, qword [rsp+0x58+var_40]
000000000000ca24         xor        rcx, qword [fs:0x28]
000000000000ca2d         jne        loc_ca59

000000000000ca2f         add        rsp, 0x58
000000000000ca33         ret
                        ; endp
000000000000ca34         align      8

                     loc_ca38:
000000000000ca38         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=open_safer+31
000000000000ca3d         mov        dword [rsp+0x58+var_58], 0x10
000000000000ca44         mov        edx, dword [rsp+0x58+var_28]
000000000000ca48         mov        qword [rsp+0x58+var_50], rax
000000000000ca4d         lea        rax, qword [rsp+0x58+var_38]
000000000000ca52         mov        qword [rsp+0x58+var_48], rax
000000000000ca57         jmp        loc_ca11

                     loc_ca59:
000000000000ca59         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=open_safer+61
                        ; endp
000000000000ca5e         align      32                                          ; End of unwind block (FDE at 0x12e34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
000000000000ca60         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x12e54), CODE XREF=rpl_mbrtowc+71
000000000000ca64         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000ca66         call       j_setlocale                                 ; setlocale
000000000000ca6b         mov        rdx, rax
000000000000ca6e         mov        eax, 0x1
000000000000ca73         test       rdx, rdx
000000000000ca76         je         loc_ca95

000000000000ca78         lea        rdi, qword [aNS+13]                         ; 0x10c7a
000000000000ca7f         mov        ecx, 0x2
000000000000ca84         mov        rsi, rdx
000000000000ca87         rep  cmpsb byte [rsi], byte [rdi]
000000000000ca89         seta       cl
000000000000ca8c         sbb        cl, 0x0
000000000000ca8f         xor        eax, eax
000000000000ca91         test       cl, cl
000000000000ca93         jne        loc_caa0

                     loc_ca95:
000000000000ca95         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
000000000000ca99         ret
                        ; endp
000000000000ca9a         align      32

                     loc_caa0:
000000000000caa0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
000000000000caa7         mov        ecx, 0x6
000000000000caac         mov        rsi, rdx
000000000000caaf         rep  cmpsb byte [rsi], byte [rdi]
000000000000cab1         seta       al
000000000000cab4         sbb        al, 0x0
000000000000cab6         test       al, al
000000000000cab8         setne      al
000000000000cabb         add        rsp, 0x8
000000000000cabf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_pjw:
000000000000cac0         movsx      rcx, byte [rdi]                             ; End of unwind block (FDE at 0x12e54), Begin of unwind block (FDE at 0x12e74), CODE XREF=triple_hash+15
000000000000cac4         test       cl, cl
000000000000cac6         je         loc_caf0

000000000000cac8         xor        eax, eax
000000000000caca         nop        word [rax+rax]

                     loc_cad0:
000000000000cad0         rol        rax, 0x9                                    ; CODE XREF=hash_pjw+33
000000000000cad4         add        rdi, 0x1
000000000000cad8         add        rax, rcx
000000000000cadb         movsx      rcx, byte [rdi]
000000000000cadf         test       cl, cl
000000000000cae1         jne        loc_cad0

000000000000cae3         xor        edx, edx
000000000000cae5         div        rsi
000000000000cae8         mov        rax, rdx
000000000000caeb         ret
                        ; endp
000000000000caec         align      16

                     loc_caf0:
000000000000caf0         xor        edx, edx                                    ; CODE XREF=hash_pjw+6
000000000000caf2         mov        rax, rdx
000000000000caf5         ret
                        ; endp
000000000000caf6         align      256                                         ; End of unwind block (FDE at 0x12e74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000000cb00         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0x12e8c), CODE XREF=gettext_quote.part.1+11
000000000000cb04         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000000cb09         call       j_nl_langinfo                               ; nl_langinfo
000000000000cb0e         test       rax, rax
000000000000cb11         je         loc_cb30

000000000000cb13         cmp        byte [rax], 0x0
000000000000cb16         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000cb1d         cmove      rax, rdx
000000000000cb21         add        rsp, 0x8
000000000000cb25         ret
                        ; endp
000000000000cb26         align      16

                     loc_cb30:
000000000000cb30         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000000cb37         add        rsp, 0x8
000000000000cb3b         ret
                        ; endp
000000000000cb3c         align      64                                          ; End of unwind block (FDE at 0x12e8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer:
000000000000cb40         push       r13                                         ; Begin of unwind block (FDE at 0x12eac), CODE XREF=open_safer+42
000000000000cb42         push       r12
000000000000cb44         push       rbp
000000000000cb45         push       rbx
000000000000cb46         mov        ebx, edi
000000000000cb48         sub        rsp, 0x8
000000000000cb4c         cmp        edi, 0x2
000000000000cb4f         ja         loc_cb72

000000000000cb51         call       dup_safer                                   ; dup_safer
000000000000cb56         mov        r12d, eax
000000000000cb59         call       j___errno_location                          ; __errno_location
000000000000cb5e         mov        r13d, dword [rax]
000000000000cb61         mov        rbp, rax
000000000000cb64         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000cb66         call       j_close                                     ; close
000000000000cb6b         mov        ebx, r12d
000000000000cb6e         mov        dword [rbp], r13d

                     loc_cb72:
000000000000cb72         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
000000000000cb76         mov        eax, ebx
000000000000cb78         pop        rbx
000000000000cb79         pop        rbp
000000000000cb7a         pop        r12
000000000000cb7c         pop        r13
000000000000cb7e         ret
                        ; endp
000000000000cb7f         align      128                                         ; End of unwind block (FDE at 0x12eac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000cb80         push       r12                                         ; Begin of unwind block (FDE at 0x12ee4), CODE XREF=read_file_system_list+711, read_file_system_list+2094, close_stream+21
000000000000cb82         push       rbp
000000000000cb83         push       rbx
000000000000cb84         mov        rbx, rdi
000000000000cb87         call       j_fileno                                    ; fileno
000000000000cb8c         test       eax, eax
000000000000cb8e         mov        rdi, rbx
000000000000cb91         js         loc_cbe7

000000000000cb93         call       j___freading                                ; __freading
000000000000cb98         test       eax, eax
000000000000cb9a         jne        loc_cbc8

                     loc_cb9c:
000000000000cb9c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000cb9f         call       rpl_fflush                                  ; rpl_fflush
000000000000cba4         test       eax, eax
000000000000cba6         je         loc_cbe4

000000000000cba8         call       j___errno_location                          ; __errno_location
000000000000cbad         mov        r12d, dword [rax]
000000000000cbb0         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000cbb3         mov        rbp, rax
000000000000cbb6         call       j_fclose                                    ; fclose
000000000000cbbb         test       r12d, r12d
000000000000cbbe         jne        loc_cbf0

                     loc_cbc0:
000000000000cbc0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000cbc1         pop        rbp
000000000000cbc2         pop        r12
000000000000cbc4         ret
                        ; endp
000000000000cbc5         align      8

                     loc_cbc8:
000000000000cbc8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000cbcb         call       j_fileno                                    ; fileno
000000000000cbd0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000cbd2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000cbd7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000cbd9         call       j_lseek                                     ; lseek
000000000000cbde         cmp        rax, 0xffffffffffffffff
000000000000cbe2         jne        loc_cb9c

                     loc_cbe4:
000000000000cbe4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_cbe7:
000000000000cbe7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000cbe8         pop        rbp
000000000000cbe9         pop        r12
000000000000cbeb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_cbf0:
000000000000cbf0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000cbf4         mov        eax, 0xffffffff
000000000000cbf9         jmp        loc_cbc0
000000000000cbfb         align      1024                                        ; End of unwind block (FDE at 0x12ee4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
000000000000cc00         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0x12f1c), CODE XREF=rpl_fclose+31
000000000000cc03         push       rbx
000000000000cc04         mov        rbx, rdi
000000000000cc07         je         loc_cc1a

000000000000cc09         call       j___freading                                ; __freading
000000000000cc0e         test       eax, eax
000000000000cc10         je         loc_cc1a

000000000000cc12         test       dword [rbx], 0x100
000000000000cc18         jne        loc_cc28

                     loc_cc1a:
000000000000cc1a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000cc1d         pop        rbx
000000000000cc1e         jmp        j_fflush                                    ; fflush
                        ; endp
000000000000cc23         align      8

                     loc_cc28:
000000000000cc28         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000cc2b         mov        edx, 0x1
000000000000cc30         xor        esi, esi
000000000000cc32         call       rpl_fseeko                                  ; rpl_fseeko
000000000000cc37         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000cc3a         pop        rbx
000000000000cc3b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
000000000000cc40         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0x12f1c), Begin of unwind block (FDE at 0x12f3c), CODE XREF=rpl_fflush+50
000000000000cc44         cmp        qword [rdi+0x10], rax
000000000000cc48         je         loc_cc50

                     j_j_fseeko:        // fseeko
000000000000cc4a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000cc4f         align      16

                     loc_cc50:
000000000000cc50         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
000000000000cc54         cmp        qword [rdi+0x28], rax
000000000000cc58         jne        j_j_fseeko                                  ; fseeko

000000000000cc5a         cmp        qword [rdi+0x48], 0x0
000000000000cc5f         jne        j_j_fseeko                                  ; fseeko

000000000000cc61         push       r12
000000000000cc63         push       rbp
000000000000cc64         mov        r12d, edx
000000000000cc67         push       rbx
000000000000cc68         mov        rbp, rsi
000000000000cc6b         mov        rbx, rdi
000000000000cc6e         call       j_fileno                                    ; fileno
000000000000cc73         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
000000000000cc76         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
000000000000cc79         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000cc7b         call       j_lseek                                     ; lseek
000000000000cc80         cmp        rax, 0xffffffffffffffff
000000000000cc84         je         loc_cc92

000000000000cc86         and        dword [rbx], 0xffffffef
000000000000cc89         mov        qword [rbx+0x90], rax
000000000000cc90         xor        eax, eax

                     loc_cc92:
000000000000cc92         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000cc93         pop        rbp
000000000000cc94         pop        r12
000000000000cc96         ret
                        ; endp
000000000000cc97         align      32                                          ; End of unwind block (FDE at 0x12f3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
000000000000cca0         push       rbp                                         ; Begin of unwind block (FDE at 0x12f6c), CODE XREF=rpl_vasprintf+38
000000000000cca1         mov        rbp, rsp
000000000000cca4         push       r15
000000000000cca6         push       r14
000000000000cca8         push       r13
000000000000ccaa         push       r12
000000000000ccac         lea        r14, qword [rbp+var_3B0]
000000000000ccb3         push       rbx
000000000000ccb4         mov        rbx, rdx
000000000000ccb7         mov        r12, rcx
000000000000ccba         mov        rdx, r14
000000000000ccbd         sub        rsp, 0x408
000000000000ccc4         mov        qword [rbp+var_418], rsi
000000000000cccb         lea        rsi, qword [rbp+var_2C0]
000000000000ccd2         mov        qword [rbp+var_3E8], rdi
000000000000ccd9         mov        rdi, rbx
000000000000ccdc         mov        qword [rbp+var_410], r14
000000000000cce3         mov        rax, qword [fs:0x28]
000000000000ccec         mov        qword [rbp+var_38], rax
000000000000ccf0         xor        eax, eax
000000000000ccf2         mov        qword [rbp+var_408], rsi
000000000000ccf9         call       printf_parse                                ; printf_parse
000000000000ccfe         test       eax, eax
000000000000cd00         js         loc_db68

000000000000cd06         mov        rsi, r14
000000000000cd09         mov        rdi, r12
000000000000cd0c         call       printf_fetchargs                            ; printf_fetchargs
000000000000cd11         test       eax, eax
000000000000cd13         js         loc_dbd0

000000000000cd19         mov        rax, qword [rbp+var_2B0]
000000000000cd20         mov        rdx, 0xffffffffffffffff
000000000000cd27         add        rax, 0x7
000000000000cd2b         cmp        rax, 0x6
000000000000cd2f         cmovbe     rax, rdx
000000000000cd33         add        rax, qword [rbp+var_2A8]
000000000000cd3a         jb         loc_d768

000000000000cd40         mov        rdi, rax
000000000000cd43         xor        r8d, r8d
000000000000cd46         add        rdi, 0x6
000000000000cd4a         setb       r8b
000000000000cd4e         jb         loc_d768

000000000000cd54         cmp        rdi, 0xf9f
000000000000cd5b         jbe        loc_cea8

000000000000cd61         cmp        rdi, 0xffffffffffffffff
000000000000cd65         mov        qword [rbp+var_3C8], r8
000000000000cd6c         je         loc_d768

000000000000cd72         call       j_malloc                                    ; malloc
000000000000cd77         test       rax, rax
000000000000cd7a         mov        qword [rbp+var_3D8], rax
000000000000cd81         je         loc_d768

000000000000cd87         mov        r8, qword [rbp+var_3C8]
000000000000cd8e         mov        qword [rbp+var_420], rax

                     loc_cd95:
000000000000cd95         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
000000000000cd98         cmp        qword [rbp+var_3E8], 0x0
000000000000cda0         je         loc_cdac

000000000000cda2         mov        rax, qword [rbp+var_418]
000000000000cda9         mov        r12, qword [rax]

                     loc_cdac:
000000000000cdac         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
000000000000cdb3         lea        rax, qword [rbp+var_3BC]
000000000000cdba         mov        r15, qword [rbp+var_3E8]
000000000000cdc1         mov        qword [rbp+var_400], 0x0
000000000000cdcc         mov        qword [rbp+var_3F0], rax
000000000000cdd3         mov        rax, rbx
000000000000cdd6         mov        rbx, r8
000000000000cdd9         mov        rcx, qword [r13]
000000000000cddd         mov        r8, rax
000000000000cde0         cmp        rcx, r8
000000000000cde3         je         loc_d751

                     loc_cde9:
000000000000cde9         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
000000000000cdec         mov        rax, rbx
000000000000cdef         add        rax, rcx
000000000000cdf2         mov        r14, rax
000000000000cdf5         jae        loc_ced8

000000000000cdfb         cmp        r12, 0xffffffffffffffff
000000000000cdff         je         loc_d8d0

                     loc_ce05:
000000000000ce05         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_d810, vasnprintf+2950, vasnprintf+3039, loc_d968, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_db80
000000000000ce0a         mov        qword [rbp+var_3C8], rax

                     loc_ce11:
000000000000ce11         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
000000000000ce18         je         loc_ce23

000000000000ce1a         test       r15, r15
000000000000ce1d         jne        loc_d900

                     loc_ce23:
000000000000ce23         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
000000000000ce2a         test       rax, rax
000000000000ce2d         je         loc_ce37

000000000000ce2f         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000ce32         call       j_free                                      ; free

                     loc_ce37:
000000000000ce37         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
000000000000ce3e         mov        rdi, qword [rbp+var_2B8]
000000000000ce45         add        rax, 0x20
000000000000ce49         cmp        rdi, rax
000000000000ce4c         je         loc_ce53

000000000000ce4e         call       j_free                                      ; free

                     loc_ce53:
000000000000ce53         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
000000000000ce5a         mov        rdi, qword [rbp+var_3A8]
000000000000ce61         add        rax, 0x10
000000000000ce65         cmp        rdi, rax
000000000000ce68         je         loc_ce6f

000000000000ce6a         call       j_free                                      ; free

                     loc_ce6f:
000000000000ce6f         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
000000000000ce76         xor        r15d, r15d
000000000000ce79         mov        dword [rax], 0xc

                     loc_ce7f:
000000000000ce7f         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
000000000000ce83         xor        rdi, qword [fs:0x28]
000000000000ce8c         mov        rax, r15
000000000000ce8f         jne        loc_dd97

000000000000ce95         lea        rsp, qword [rbp+var_28]
000000000000ce99         pop        rbx
000000000000ce9a         pop        r12
000000000000ce9c         pop        r13
000000000000ce9e         pop        r14
000000000000cea0         pop        r15
000000000000cea2         pop        rbp
000000000000cea3         ret
                        ; endp
000000000000cea4         align      8

                     loc_cea8:
000000000000cea8         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
000000000000ceac         mov        qword [rbp+var_420], 0x0
000000000000ceb7         and        rax, 0xfffffffffffffff0
000000000000cebb         sub        rsp, rax
000000000000cebe         lea        rax, qword [rsp+0x430+var_421]
000000000000cec3         and        rax, 0xfffffffffffffff0
000000000000cec7         mov        qword [rbp+var_3D8], rax
000000000000cece         jmp        loc_cd95
000000000000ced3         align      8

                     loc_ced8:
000000000000ced8         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
000000000000cedb         jae        loc_cf44

000000000000cedd         test       r12, r12
000000000000cee0         jne        loc_d810

000000000000cee6         cmp        rax, 0xc
000000000000ceea         ja         loc_d822

000000000000cef0         mov        r12d, 0xc

                     loc_cef6:
000000000000cef6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
000000000000cefd         sete       dl
000000000000cf00         test       r15, r15
000000000000cf03         je         loc_d848

                     loc_cf09:
000000000000cf09         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
000000000000cf0b         jne        loc_d848

000000000000cf11         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000cf14         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000cf17         mov        qword [rbp+var_3D0], r8
000000000000cf1e         mov        qword [rbp+var_3C8], rcx
000000000000cf25         call       j_realloc                                   ; realloc
000000000000cf2a         test       rax, rax
000000000000cf2d         mov        rcx, qword [rbp+var_3C8]
000000000000cf34         mov        r8, qword [rbp+var_3D0]
000000000000cf3b         je         loc_d8eb

000000000000cf41         mov        r15, rax

                     loc_cf44:
000000000000cf44         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
000000000000cf48         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000cf4b         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
000000000000cf4e         call       j_memcpy                                    ; memcpy

                     loc_cf53:
000000000000cf53         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
000000000000cf5a         cmp        qword [rbp+var_2C0], rax
000000000000cf61         je         loc_dc1b

000000000000cf67         movzx      edx, byte [r13+0x48]
000000000000cf6c         mov        rax, qword [r13+0x50]
000000000000cf70         cmp        dl, 0x25
000000000000cf73         je         loc_d708

000000000000cf79         cmp        rax, 0xffffffffffffffff
000000000000cf7d         je         loc_dbc6

000000000000cf83         mov        r8, qword [rbp+var_3A8]
000000000000cf8a         shl        rax, 0x5
000000000000cf8e         add        rax, r8
000000000000cf91         cmp        dl, 0x6e
000000000000cf94         mov        edi, dword [rax]
000000000000cf96         mov        dword [rbp+var_3D0], edi
000000000000cf9c         je         loc_d780

000000000000cfa2         mov        eax, dword [r13+0x10]
000000000000cfa6         mov        rdi, qword [rbp+var_3D8]
000000000000cfad         test       al, 0x1
000000000000cfaf         mov        byte [rdi], 0x25
000000000000cfb2         lea        rbx, qword [rdi+1]
000000000000cfb6         je         loc_cfc7

000000000000cfb8         mov        rdi, qword [rbp+var_3D8]
000000000000cfbf         lea        rbx, qword [rdi+2]
000000000000cfc3         mov        byte [rdi+1], 0x27

                     loc_cfc7:
000000000000cfc7         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
000000000000cfc9         je         loc_cfd2

000000000000cfcb         mov        byte [rbx], 0x2d
000000000000cfce         add        rbx, 0x1

                     loc_cfd2:
000000000000cfd2         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
000000000000cfd4         je         loc_cfdd

000000000000cfd6         mov        byte [rbx], 0x2b
000000000000cfd9         add        rbx, 0x1

                     loc_cfdd:
000000000000cfdd         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
000000000000cfdf         je         loc_cfe8

000000000000cfe1         mov        byte [rbx], 0x20
000000000000cfe4         add        rbx, 0x1

                     loc_cfe8:
000000000000cfe8         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
000000000000cfea         je         loc_cff3

000000000000cfec         mov        byte [rbx], 0x23
000000000000cfef         add        rbx, 0x1

                     loc_cff3:
000000000000cff3         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
000000000000cff5         je         loc_cffe

000000000000cff7         mov        byte [rbx], 0x49
000000000000cffa         add        rbx, 0x1

                     loc_cffe:
000000000000cffe         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
000000000000d000         je         loc_d009

000000000000d002         mov        byte [rbx], 0x30
000000000000d005         add        rbx, 0x1

                     loc_d009:
000000000000d009         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
000000000000d00d         mov        rdx, qword [r13+0x20]
000000000000d011         cmp        rsi, rdx
000000000000d014         je         loc_d046

000000000000d016         mov        rcx, rdx
000000000000d019         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000d01c         mov        qword [rbp+var_3E0], r8
000000000000d023         sub        rcx, rsi
000000000000d026         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000d029         mov        qword [rbp+var_3C8], rcx
000000000000d030         call       j_memcpy                                    ; memcpy
000000000000d035         mov        rcx, qword [rbp+var_3C8]
000000000000d03c         mov        r8, qword [rbp+var_3E0]
000000000000d043         add        rbx, rcx

                     loc_d046:
000000000000d046         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
000000000000d04a         mov        rdx, qword [r13+0x38]
000000000000d04e         cmp        rsi, rdx
000000000000d051         je         loc_d083

000000000000d053         mov        rcx, rdx
000000000000d056         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000d059         mov        qword [rbp+var_3E0], r8
000000000000d060         sub        rcx, rsi
000000000000d063         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
000000000000d066         mov        qword [rbp+var_3C8], rcx
000000000000d06d         call       j_memcpy                                    ; memcpy
000000000000d072         mov        rcx, qword [rbp+var_3C8]
000000000000d079         mov        r8, qword [rbp+var_3E0]
000000000000d080         add        rbx, rcx

                     loc_d083:
000000000000d083         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
000000000000d089         cmp        edi, 0x10
000000000000d08c         ja         loc_d0bb

000000000000d08e         mov        eax, 0x1
000000000000d093         mov        ecx, edi
000000000000d095         shl        rax, cl
000000000000d098         test       eax, 0x14180
000000000000d09d         jne        loc_d0b4

000000000000d09f         test       ah, 0x10
000000000000d0a2         jne        loc_da00

000000000000d0a8         test       ah, 0x6
000000000000d0ab         je         loc_d0bb

000000000000d0ad         mov        byte [rbx], 0x6c
000000000000d0b0         add        rbx, 0x1

                     loc_d0b4:
000000000000d0b4         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
000000000000d0b7         add        rbx, 0x1

                     loc_d0bb:
000000000000d0bb         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
000000000000d0c0         mov        byte [rbx+1], 0x0
000000000000d0c4         mov        byte [rbx], al
000000000000d0c6         mov        rax, qword [r13+0x28]
000000000000d0ca         cmp        rax, 0xffffffffffffffff
000000000000d0ce         je         loc_d800

000000000000d0d4         shl        rax, 0x5
000000000000d0d8         add        rax, r8
000000000000d0db         cmp        dword [rax], 0x5
000000000000d0de         jne        loc_dbc6

000000000000d0e4         mov        eax, dword [rax+0x10]
000000000000d0e7         mov        dword [rbp+var_3E0], 0x1
000000000000d0f1         mov        dword [rbp+var_3B8], eax

                     loc_d0f7:
000000000000d0f7         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
000000000000d0fb         cmp        rax, 0xffffffffffffffff
000000000000d0ff         je         loc_d12c

000000000000d101         shl        rax, 0x5
000000000000d105         add        r8, rax
000000000000d108         cmp        dword [r8], 0x5
000000000000d10c         jne        loc_dbc6

000000000000d112         mov        eax, dword [rbp+var_3E0]
000000000000d118         mov        edx, dword [r8+0x10]
000000000000d11c         mov        dword [rbp+rax*4+var_3B8], edx
000000000000d123         lea        eax, dword [rax+1]
000000000000d126         mov        dword [rbp+var_3E0], eax

                     loc_d12c:
000000000000d12c         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
000000000000d12f         xor        edx, edx
000000000000d131         add        rax, 0x2
000000000000d135         jb         loc_dd9c

000000000000d13b         cmp        r12, rax
000000000000d13e         jae        loc_d18b

000000000000d140         test       r12, r12
000000000000d143         jne        loc_d968

000000000000d149         cmp        rax, 0xc
000000000000d14d         ja         loc_d980

000000000000d153         mov        r12d, 0xc

                     loc_d159:
000000000000d159         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
000000000000d160         sete       dl
000000000000d163         test       r15, r15
000000000000d166         je         loc_d9b0

                     loc_d16c:
000000000000d16c         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
000000000000d16e         jne        loc_d9b0

000000000000d174         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000d177         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000d17a         call       j_realloc                                   ; realloc
000000000000d17f         test       rax, rax
000000000000d182         je         loc_ce05

000000000000d188         mov        r15, rax

                     loc_d18b:
000000000000d18b         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
000000000000d190         call       j___errno_location                          ; __errno_location
000000000000d195         mov        qword [rbp+var_3C8], rax
000000000000d19c         mov        eax, dword [rax]
000000000000d19e         mov        qword [rbp+var_3F8], rbx
000000000000d1a5         mov        dword [rbp+var_424], eax
000000000000d1ab         nop        dword [rax+rax]

                     loc_d1b0:
000000000000d1b0         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
000000000000d1b7         mov        rbx, r12
000000000000d1ba         mov        r10d, 0x7fffffff
000000000000d1c0         sub        rbx, r14
000000000000d1c3         mov        dword [rbp+var_3BC], 0xffffffff
000000000000d1cd         cmp        rbx, 0x7fffffff
000000000000d1d4         mov        dword [rax], 0x0
000000000000d1da         mov        eax, dword [rbp+var_3D0]
000000000000d1e0         cmovbe     r10, rbx
000000000000d1e4         cmp        eax, 0x11
000000000000d1e7         ja         loc_dbc6

000000000000d1ed         lea        rsi, qword [switch_table_10c88]             ; switch_table_10c88
000000000000d1f4         movsxd     rax, dword [rsi+rax*4]
000000000000d1f8         add        rax, rsi
000000000000d1fb         jmp        rax                                         ; switch statement using table at 0x10c88, with 18 cases, 0xd200,0xd338,0xd460,0xd4e8,0xd568,0xd5a8,0xd630,0xd660,0xdbc6
000000000000d1fd         align      512

                     loc_d200:
000000000000d200         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
000000000000d204         lea        rdi, qword [r15+r14]
000000000000d208         shl        rax, 0x5
000000000000d20c         add        rax, qword [rbp+var_3A8]
000000000000d213         mov        r9, qword [rax+0x10]
000000000000d217         mov        eax, dword [rbp+var_3E0]
000000000000d21d         cmp        eax, 0x1
000000000000d220         je         loc_d6e8

000000000000d226         cmp        eax, 0x2
000000000000d229         je         loc_d6d0

000000000000d22f         sub        rsp, 0x8
000000000000d233         push       qword [rbp+var_3F0]

                     loc_d239:
000000000000d239         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
000000000000d240         mov        rsi, r10
000000000000d243         mov        rcx, 0xffffffffffffffff
000000000000d24a         mov        edx, 0x1
000000000000d24f         xor        eax, eax
000000000000d251         mov        qword [rbp+var_430], r10
000000000000d258         call       j___snprintf_chk                            ; __snprintf_chk
000000000000d25d         pop        rsi
000000000000d25e         pop        rdi
000000000000d25f         mov        r10, qword [rbp+var_430]

                     loc_d266:
000000000000d266         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
000000000000d26c         test       ecx, ecx
000000000000d26e         js         loc_d3ac

                     loc_d274:
000000000000d274         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
000000000000d277         cmp        rdx, r10
000000000000d27a         jae        loc_d28a

000000000000d27c         add        rdx, r15
000000000000d27f         cmp        byte [rdx+r14], 0x0
000000000000d284         jne        loc_dbc6

                     loc_d28a:
000000000000d28a         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
000000000000d28c         jge        loc_d296

                     loc_d28e:
000000000000d28e         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
000000000000d294         mov        ecx, eax

                     loc_d296:
000000000000d296         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
000000000000d299         cmp        rax, r10
000000000000d29c         jb         loc_dad0

000000000000d2a2         cmp        rbx, 0x7ffffffe
000000000000d2a9         ja         loc_daf0

000000000000d2af         lea        rsi, qword [r12+r12]
000000000000d2b3         lea        edx, dword [rcx+2]
000000000000d2b6         test       r12, r12
000000000000d2b9         mov        rax, 0xffffffffffffffff
000000000000d2c0         cmovns     rax, rsi
000000000000d2c4         add        rdx, r14
000000000000d2c7         jb         loc_dd88

000000000000d2cd         cmp        rax, rdx
000000000000d2d0         cmovb      rax, rdx
000000000000d2d4         cmp        r12, rax
000000000000d2d7         jae        loc_d1b0

000000000000d2dd         test       r12, r12
000000000000d2e0         js         loc_ce11

000000000000d2e6         cmp        rsi, rax
000000000000d2e9         mov        r12, rsi
000000000000d2ec         jae        loc_d2fb

000000000000d2ee         cmp        rax, 0xffffffffffffffff
000000000000d2f2         je         loc_ce11

000000000000d2f8         mov        r12, rax

                     loc_d2fb:
000000000000d2fb         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
000000000000d302         sete       bl
000000000000d305         test       r15, r15
000000000000d308         je         loc_d690

000000000000d30e         test       bl, bl
000000000000d310         jne        loc_d690

000000000000d316         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000d319         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000d31c         call       j_realloc                                   ; realloc
000000000000d321         test       rax, rax
000000000000d324         je         loc_ce11

000000000000d32a         mov        r15, rax
000000000000d32d         jmp        loc_d1b0
000000000000d332         align      8

                     loc_d338:
000000000000d338         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
000000000000d33c         lea        rdi, qword [r15+r14]
000000000000d340         shl        rax, 0x5
000000000000d344         add        rax, qword [rbp+var_3A8]
000000000000d34b         mov        r9d, dword [rax+0x10]
000000000000d34f         mov        eax, dword [rbp+var_3E0]
000000000000d355         cmp        eax, 0x1
000000000000d358         je         loc_d590

                     loc_d35e:
000000000000d35e         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
000000000000d361         je         loc_d5d8

                     loc_d367:
000000000000d367         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
000000000000d36b         push       qword [rbp+var_3F0]

                     loc_d371:
000000000000d371         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
000000000000d378         mov        rcx, 0xffffffffffffffff
000000000000d37f         mov        edx, 0x1
000000000000d384         mov        rsi, r10
000000000000d387         xor        eax, eax
000000000000d389         mov        qword [rbp+var_430], r10
000000000000d390         call       j___snprintf_chk                            ; __snprintf_chk
000000000000d395         pop        rdx
000000000000d396         pop        rcx
000000000000d397         mov        ecx, dword [rbp+var_3BC]
000000000000d39d         mov        r10, qword [rbp+var_430]
000000000000d3a4         test       ecx, ecx
000000000000d3a6         jns        loc_d274

                     loc_d3ac:
000000000000d3ac         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
000000000000d3b3         cmp        byte [rdi+1], 0x0
000000000000d3b7         jne        loc_d6f8

000000000000d3bd         test       eax, eax
000000000000d3bf         jns        loc_d28e

000000000000d3c5         mov        rax, qword [rbp+var_3C8]
000000000000d3cc         mov        ebx, dword [rax]
000000000000d3ce         test       ebx, ebx
000000000000d3d0         jne        loc_d3f0

000000000000d3d2         movzx      eax, byte [r13+0x48]
000000000000d3d7         mov        ebx, 0x16
000000000000d3dc         and        eax, 0xffffffef
000000000000d3df         cmp        al, 0x63
000000000000d3e1         mov        eax, 0x54
000000000000d3e6         cmove      ebx, eax
000000000000d3e9         nop        dword [rax]

                     loc_d3f0:
000000000000d3f0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
000000000000d3f7         je         loc_d402

000000000000d3f9         test       r15, r15
000000000000d3fc         jne        loc_dbac

                     loc_d402:
000000000000d402         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
000000000000d409         test       rax, rax
000000000000d40c         je         loc_d416

000000000000d40e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000d411         call       j_free                                      ; free

                     loc_d416:
000000000000d416         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
000000000000d41d         mov        rdi, qword [rbp+var_2B8]
000000000000d424         add        rax, 0x20
000000000000d428         cmp        rdi, rax
000000000000d42b         je         loc_d432

000000000000d42d         call       j_free                                      ; free

                     loc_d432:
000000000000d432         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
000000000000d439         mov        rdi, qword [rbp+var_3A8]
000000000000d440         add        rax, 0x10
000000000000d444         cmp        rdi, rax
000000000000d447         je         loc_d44e

000000000000d449         call       j_free                                      ; free

                     loc_d44e:
000000000000d44e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
000000000000d455         xor        r15d, r15d
000000000000d458         mov        dword [rax], ebx
000000000000d45a         jmp        loc_ce7f
000000000000d45f         align      32

                     loc_d460:
000000000000d460         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
000000000000d464         lea        rdi, qword [r15+r14]
000000000000d468         shl        rax, 0x5
000000000000d46c         add        rax, qword [rbp+var_3A8]
000000000000d473         fld        tword [rax+0x10]
000000000000d476         mov        eax, dword [rbp+var_3E0]
000000000000d47c         cmp        eax, 0x1
000000000000d47f         je         loc_dab0

000000000000d485         cmp        eax, 0x2
000000000000d488         jne        loc_d950

000000000000d48e         mov        eax, dword [rbp+var_3B4]
000000000000d494         sub        rsp, 0x8
000000000000d498         push       qword [rbp+var_3F0]
000000000000d49e         mov        r9d, dword [rbp+var_3B8]
000000000000d4a5         mov        r8, qword [rbp+var_3D8]
000000000000d4ac         mov        rsi, r10
000000000000d4af         sub        rsp, 0x18
000000000000d4b3         mov        rcx, 0xffffffffffffffff
000000000000d4ba         mov        edx, 0x1
000000000000d4bf         fstp       tword [rsp+0x458+var_450]
000000000000d4c3         push       rax
000000000000d4c4         xor        eax, eax
000000000000d4c6         mov        qword [rbp+var_430], r10
000000000000d4cd         call       j___snprintf_chk                            ; __snprintf_chk
000000000000d4d2         add        rsp, 0x30
000000000000d4d6         mov        r10, qword [rbp+var_430]
000000000000d4dd         jmp        loc_d266
000000000000d4e2         align      8

                     loc_d4e8:
000000000000d4e8         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
000000000000d4ec         lea        rdi, qword [r15+r14]
000000000000d4f0         shl        rax, 0x5
000000000000d4f4         add        rax, qword [rbp+var_3A8]
000000000000d4fb         movsd      xmm0, qword [rax+0x10]
000000000000d500         mov        eax, dword [rbp+var_3E0]
000000000000d506         cmp        eax, 0x1
000000000000d509         je         loc_daa0

000000000000d50f         cmp        eax, 0x2
000000000000d512         jne        loc_d910

000000000000d518         mov        eax, dword [rbp+var_3B4]
000000000000d51e         push       qword [rbp+var_3F0]
000000000000d524         push       rax

                     loc_d525:
000000000000d525         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
000000000000d52c         mov        r8, qword [rbp+var_3D8]
000000000000d533         mov        rsi, r10
000000000000d536         mov        rcx, 0xffffffffffffffff
000000000000d53d         mov        edx, 0x1
000000000000d542         mov        eax, 0x1
000000000000d547         mov        qword [rbp+var_430], r10
000000000000d54e         call       j___snprintf_chk                            ; __snprintf_chk
000000000000d553         pop        r8
000000000000d555         mov        r10, qword [rbp+var_430]
000000000000d55c         pop        r9
000000000000d55e         jmp        loc_d266
000000000000d563         align      8

                     loc_d568:
000000000000d568         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
000000000000d56c         lea        rdi, qword [r15+r14]
000000000000d570         shl        rax, 0x5
000000000000d574         add        rax, qword [rbp+var_3A8]
000000000000d57b         movzx      r9d, word [rax+0x10]
000000000000d580         mov        eax, dword [rbp+var_3E0]
000000000000d586         cmp        eax, 0x1
000000000000d589         jne        loc_d35e

000000000000d58f         nop

                     loc_d590:
000000000000d590         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
000000000000d596         push       r9

                     loc_d598:
000000000000d598         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
000000000000d59f         jmp        loc_d371
000000000000d5a4         align      8

                     loc_d5a8:
000000000000d5a8         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
000000000000d5ac         lea        rdi, qword [r15+r14]
000000000000d5b0         shl        rax, 0x5
000000000000d5b4         add        rax, qword [rbp+var_3A8]
000000000000d5bb         movsx      r9d, word [rax+0x10]
000000000000d5c0         mov        eax, dword [rbp+var_3E0]
000000000000d5c6         cmp        eax, 0x1
000000000000d5c9         je         loc_d590

000000000000d5cb         cmp        eax, 0x2
000000000000d5ce         jne        loc_d367

000000000000d5d4         nop        dword [rax]

                     loc_d5d8:
000000000000d5d8         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
000000000000d5dc         push       qword [rbp+var_3F0]
000000000000d5e2         push       r9

                     loc_d5e4:
000000000000d5e4         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
000000000000d5ea         push       rax

                     loc_d5eb:
000000000000d5eb         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
000000000000d5f2         mov        r8, qword [rbp+var_3D8]
000000000000d5f9         mov        rsi, r10
000000000000d5fc         mov        rcx, 0xffffffffffffffff
000000000000d603         mov        edx, 0x1
000000000000d608         xor        eax, eax
000000000000d60a         mov        qword [rbp+var_430], r10
000000000000d611         call       j___snprintf_chk                            ; __snprintf_chk
000000000000d616         add        rsp, 0x20
000000000000d61a         mov        r10, qword [rbp+var_430]
000000000000d621         jmp        loc_d266
000000000000d626         align      16

                     loc_d630:
000000000000d630         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
000000000000d634         lea        rdi, qword [r15+r14]
000000000000d638         shl        rax, 0x5
000000000000d63c         add        rax, qword [rbp+var_3A8]
000000000000d643         movzx      r9d, byte [rax+0x10]
000000000000d648         mov        eax, dword [rbp+var_3E0]
000000000000d64e         cmp        eax, 0x1
000000000000d651         jne        loc_d35e

000000000000d657         jmp        loc_d590
000000000000d65c         align      32

                     loc_d660:
000000000000d660         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
000000000000d664         lea        rdi, qword [r15+r14]
000000000000d668         shl        rax, 0x5
000000000000d66c         add        rax, qword [rbp+var_3A8]
000000000000d673         movsx      r9d, byte [rax+0x10]
000000000000d678         mov        eax, dword [rbp+var_3E0]
000000000000d67e         cmp        eax, 0x1
000000000000d681         jne        loc_d35e

000000000000d687         jmp        loc_d590
000000000000d68c         align      16

                     loc_d690:
000000000000d690         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
000000000000d693         call       j_malloc                                    ; malloc
000000000000d698         test       rax, rax
000000000000d69b         mov        rcx, rax
000000000000d69e         je         loc_ce11

000000000000d6a4         test       r14, r14
000000000000d6a7         je         loc_d760

000000000000d6ad         test       bl, bl
000000000000d6af         je         loc_d760

000000000000d6b5         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000d6b8         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000d6bb         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000d6be         call       j_memcpy                                    ; memcpy
000000000000d6c3         mov        r15, rax
000000000000d6c6         jmp        loc_d1b0
000000000000d6cb         align      16

                     loc_d6d0:
000000000000d6d0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
000000000000d6d4         push       qword [rbp+var_3F0]
000000000000d6da         push       r9
000000000000d6dc         jmp        loc_d5e4
000000000000d6e1         align      8

                     loc_d6e8:
000000000000d6e8         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
000000000000d6ee         push       r9
000000000000d6f0         jmp        loc_d598
000000000000d6f5         align      8

                     loc_d6f8:
000000000000d6f8         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
000000000000d6fc         jmp        loc_d1b0
000000000000d701         align      8

                     loc_d708:
000000000000d708         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
000000000000d70c         jne        loc_dbc6

000000000000d712         mov        rax, r14
000000000000d715         add        rax, 0x1
000000000000d719         mov        rbx, rax
000000000000d71c         jae        loc_d7a8

000000000000d722         cmp        r12, 0xffffffffffffffff
000000000000d726         jne        loc_ce05

000000000000d72c         mov        rbx, r12

                     loc_d72f:
000000000000d72f         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_d734:
000000000000d734         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
000000000000d738         add        r13, 0x58
000000000000d73c         mov        rcx, qword [r13]
000000000000d740         add        qword [rbp+var_400], 0x1
000000000000d748         cmp        rcx, r8
000000000000d74b         jne        loc_cde9

                     loc_d751:
000000000000d751         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
000000000000d754         jmp        loc_cf53
000000000000d759         align      32

                     loc_d760:
000000000000d760         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
000000000000d763         jmp        loc_d1b0

                     loc_d768:
000000000000d768         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
000000000000d76d         mov        qword [rbp+var_3C8], rax
000000000000d774         jmp        loc_ce37
000000000000d779         align      128

                     loc_d780:
000000000000d780         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
000000000000d782         sub        edx, 0x12
000000000000d785         cmp        edx, 0x4
000000000000d788         ja         loc_dbc6

000000000000d78e         lea        rdi, qword [switch_table_10cd0]             ; switch_table_10cd0
000000000000d795         mov        rax, qword [rax+0x10]
000000000000d799         movsxd     rdx, dword [rdi+rdx*4]
000000000000d79d         add        rdx, rdi
000000000000d7a0         jmp        rdx                                         ; switch statement using table at 0x10cd0, with 5 cases, 0xd8e0,0xda10,0xda20,0xda30
000000000000d7a2         align      8

                     loc_d7a8:
000000000000d7a8         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
000000000000d7ab         jae        loc_d72f

000000000000d7ad         test       r12, r12
000000000000d7b0         jne        loc_db80

000000000000d7b6         cmp        rax, 0xc
000000000000d7ba         ja         loc_db92

000000000000d7c0         mov        r12d, 0xc

                     loc_d7c6:
000000000000d7c6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
000000000000d7cd         sete       dl
000000000000d7d0         test       r15, r15
000000000000d7d3         je         loc_da40

000000000000d7d9         test       dl, dl
000000000000d7db         jne        loc_da40

000000000000d7e1         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000d7e4         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000d7e7         call       j_realloc                                   ; realloc
000000000000d7ec         test       rax, rax
000000000000d7ef         je         loc_d8eb

000000000000d7f5         mov        r15, rax
000000000000d7f8         jmp        loc_d72f
000000000000d7fd         align      2048

                     loc_d800:
000000000000d800         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
000000000000d80a         jmp        loc_d0f7
000000000000d80f         align      16

                     loc_d810:
000000000000d810         js         loc_ce05                                    ; CODE XREF=vasnprintf+576

000000000000d816         add        r12, r12
000000000000d819         cmp        r12, rax
000000000000d81c         jae        loc_cef6

                     loc_d822:
000000000000d822         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
000000000000d826         je         loc_ce05

000000000000d82c         cmp        r15, qword [rbp+var_3E8]
000000000000d833         mov        r12, rax
000000000000d836         sete       dl
000000000000d839         test       r15, r15
000000000000d83c         jne        loc_cf09

000000000000d842         nop        word [rax+rax]

                     loc_d848:
000000000000d848         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
000000000000d84b         mov        qword [rbp+var_3E0], r8
000000000000d852         mov        byte [rbp+var_3D0], dl
000000000000d858         mov        qword [rbp+var_3C8], rcx
000000000000d85f         call       j_malloc                                    ; malloc
000000000000d864         test       rax, rax
000000000000d867         mov        r9, rax
000000000000d86a         mov        rcx, qword [rbp+var_3C8]
000000000000d871         movzx      edx, byte [rbp+var_3D0]
000000000000d878         mov        r8, qword [rbp+var_3E0]
000000000000d87f         je         loc_ce05

000000000000d885         test       rbx, rbx
000000000000d888         je         loc_da90

000000000000d88e         test       dl, dl
000000000000d890         je         loc_da90

000000000000d896         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000d899         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000d89c         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000d89f         mov        qword [rbp+var_3D0], r8
000000000000d8a6         mov        qword [rbp+var_3C8], rcx
000000000000d8ad         call       j_memcpy                                    ; memcpy
000000000000d8b2         mov        rcx, qword [rbp+var_3C8]
000000000000d8b9         mov        r15, rax
000000000000d8bc         mov        r8, qword [rbp+var_3D0]
000000000000d8c3         jmp        loc_cf44
000000000000d8c8         align      16

                     loc_d8d0:
000000000000d8d0         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
000000000000d8d3         jmp        loc_cf44
000000000000d8d8         align      32

                     loc_d8e0:
000000000000d8e0         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
000000000000d8e3         mov        rbx, r14
000000000000d8e6         jmp        loc_d734

                     loc_d8eb:
000000000000d8eb         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
000000000000d8f0         mov        qword [rbp+var_3C8], rax
000000000000d8f7         nop        word [rax+rax]

                     loc_d900:
000000000000d900         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
000000000000d903         call       j_free                                      ; free
000000000000d908         jmp        loc_ce23
000000000000d90d         align      16

                     loc_d910:
000000000000d910         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
000000000000d917         mov        r8, qword [rbp+var_3D8]
000000000000d91e         mov        rsi, r10
000000000000d921         mov        rcx, 0xffffffffffffffff
000000000000d928         mov        edx, 0x1
000000000000d92d         mov        eax, 0x1
000000000000d932         mov        qword [rbp+var_430], r10
000000000000d939         call       j___snprintf_chk                            ; __snprintf_chk
000000000000d93e         mov        r10, qword [rbp+var_430]
000000000000d945         jmp        loc_d266
000000000000d94a         align      16

                     loc_d950:
000000000000d950         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
000000000000d954         mov        r9, qword [rbp+var_3F0]
000000000000d95b         fstp       tword [rsp+0x440+var_440]
000000000000d95e         jmp        loc_d239
000000000000d963         align      8

                     loc_d968:
000000000000d968         js         loc_ce05                                    ; CODE XREF=vasnprintf+1187

000000000000d96e         add        r12, r12
000000000000d971         cmp        r12, rax
000000000000d974         jae        loc_d159

000000000000d97a         nop        word [rax+rax]

                     loc_d980:
000000000000d980         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
000000000000d983         jne        loc_ce05

000000000000d989         cmp        rax, 0xffffffffffffffff
000000000000d98d         je         loc_ce05

000000000000d993         cmp        r15, qword [rbp+var_3E8]
000000000000d99a         mov        r12, rax
000000000000d99d         sete       dl
000000000000d9a0         test       r15, r15
000000000000d9a3         jne        loc_d16c

000000000000d9a9         nop        dword [rax]

                     loc_d9b0:
000000000000d9b0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
000000000000d9b3         mov        byte [rbp+var_3C8], dl
000000000000d9b9         call       j_malloc                                    ; malloc
000000000000d9be         test       rax, rax
000000000000d9c1         mov        rcx, rax
000000000000d9c4         movzx      edx, byte [rbp+var_3C8]
000000000000d9cb         je         loc_ce05

000000000000d9d1         test       r14, r14
000000000000d9d4         je         loc_db70

000000000000d9da         test       dl, dl
000000000000d9dc         je         loc_db70

000000000000d9e2         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000d9e5         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000d9e8         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000d9eb         call       j_memcpy                                    ; memcpy
000000000000d9f0         mov        r15, rax
000000000000d9f3         jmp        loc_d18b
000000000000d9f8         align      512

                     loc_da00:
000000000000da00         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
000000000000da03         add        rbx, 0x1
000000000000da07         jmp        loc_d0bb
000000000000da0c         align      16

                     loc_da10:
000000000000da10         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
000000000000da13         mov        rbx, r14
000000000000da16         jmp        loc_d734
000000000000da1b         align      32

                     loc_da20:
000000000000da20         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
000000000000da23         mov        rbx, r14
000000000000da26         jmp        loc_d734
000000000000da2b         align      16

                     loc_da30:
000000000000da30         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
000000000000da34         mov        rbx, r14
000000000000da37         jmp        loc_d734
000000000000da3c         align      64

                     loc_da40:
000000000000da40         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
000000000000da43         mov        byte [rbp+var_3C8], dl
000000000000da49         call       j_malloc                                    ; malloc
000000000000da4e         test       rax, rax
000000000000da51         mov        rcx, rax
000000000000da54         movzx      edx, byte [rbp+var_3C8]
000000000000da5b         je         loc_ce05

000000000000da61         test       r14, r14
000000000000da64         je         loc_dba4

000000000000da6a         test       dl, dl
000000000000da6c         je         loc_dba4

000000000000da72         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000da75         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000da78         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000da7b         call       j_memcpy                                    ; memcpy
000000000000da80         mov        r15, rax
000000000000da83         jmp        loc_d72f
000000000000da88         align      16

                     loc_da90:
000000000000da90         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
000000000000da93         jmp        loc_cf44
000000000000da98         align      32

                     loc_daa0:
000000000000daa0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
000000000000daa4         push       qword [rbp+var_3F0]
000000000000daaa         jmp        loc_d525
000000000000daaf         align      16

                     loc_dab0:
000000000000dab0         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
000000000000dab4         push       qword [rbp+var_3F0]
000000000000daba         sub        rsp, 0x10
000000000000dabe         fstp       tword [rsp+0x450+var_450]
000000000000dac1         jmp        loc_d5eb
000000000000dac6         align      16

                     loc_dad0:
000000000000dad0         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
000000000000dad7         mov        edi, dword [rbp+var_424]
000000000000dadd         movsxd     rbx, ecx
000000000000dae0         add        rbx, r14
000000000000dae3         mov        dword [rax], edi
000000000000dae5         jmp        loc_d734
000000000000daea         align      16

                     loc_daf0:
000000000000daf0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
000000000000daf7         je         loc_db02

000000000000daf9         test       r15, r15
000000000000dafc         jne        loc_dbb9

                     loc_db02:
000000000000db02         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
000000000000db09         test       rax, rax
000000000000db0c         je         loc_db16

000000000000db0e         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000db11         call       j_free                                      ; free

                     loc_db16:
000000000000db16         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
000000000000db1d         mov        rdi, qword [rbp+var_2B8]
000000000000db24         add        rax, 0x20
000000000000db28         cmp        rdi, rax
000000000000db2b         je         loc_db32

000000000000db2d         call       j_free                                      ; free

                     loc_db32:
000000000000db32         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
000000000000db39         mov        rdi, qword [rbp+var_3A8]
000000000000db40         add        rax, 0x10
000000000000db44         cmp        rdi, rax
000000000000db47         je         loc_db4e

000000000000db49         call       j_free                                      ; free

                     loc_db4e:
000000000000db4e         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
000000000000db55         xor        r15d, r15d
000000000000db58         mov        dword [rax], 0x4b
000000000000db5e         jmp        loc_ce7f
000000000000db63         align      8

                     loc_db68:
000000000000db68         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
000000000000db6b         jmp        loc_ce7f

                     loc_db70:
000000000000db70         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
000000000000db73         jmp        loc_d18b
000000000000db78         align      128

                     loc_db80:
000000000000db80         js         loc_ce05                                    ; CODE XREF=vasnprintf+2832

000000000000db86         add        r12, r12
000000000000db89         cmp        r12, rax
000000000000db8c         jae        loc_d7c6

                     loc_db92:
000000000000db92         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
000000000000db96         je         loc_ce05

000000000000db9c         mov        r12, rax
000000000000db9f         jmp        loc_d7c6

                     loc_dba4:
000000000000dba4         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
000000000000dba7         jmp        loc_d72f

                     loc_dbac:
000000000000dbac         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
000000000000dbaf         call       j_free                                      ; free
000000000000dbb4         jmp        loc_d402

                     loc_dbb9:
000000000000dbb9         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
000000000000dbbc         call       j_free                                      ; free
000000000000dbc1         jmp        loc_db02

                     loc_dbc6:
000000000000dbc6         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
000000000000dbcb         align      16

                     loc_dbd0:
000000000000dbd0         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
000000000000dbd7         mov        rdi, qword [rbp+var_2B8]
000000000000dbde         add        rax, 0x20
000000000000dbe2         cmp        rdi, rax
000000000000dbe5         je         loc_dbec

000000000000dbe7         call       j_free                                      ; free

                     loc_dbec:
000000000000dbec         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
000000000000dbf3         mov        rdi, qword [rbp+var_3A8]
000000000000dbfa         add        rax, 0x10
000000000000dbfe         cmp        rdi, rax
000000000000dc01         je         loc_dc08

000000000000dc03         call       j_free                                      ; free

                     loc_dc08:
000000000000dc08         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
000000000000dc0d         xor        r15d, r15d
000000000000dc10         mov        dword [rax], 0x16
000000000000dc16         jmp        loc_ce7f

                     loc_dc1b:
000000000000dc1b         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
000000000000dc1e         xor        eax, eax
000000000000dc20         add        rbx, 0x1
000000000000dc24         jb         loc_dd30

000000000000dc2a         cmp        r12, rbx
000000000000dc2d         jae        loc_dc7c

000000000000dc2f         test       r12, r12
000000000000dc32         jne        loc_dd69

000000000000dc38         cmp        rbx, 0xc
000000000000dc3c         ja         loc_dd4e

000000000000dc42         mov        r12d, 0xc

                     loc_dc48:
000000000000dc48         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
000000000000dc4f         sete       r13b
000000000000dc53         test       r15, r15
000000000000dc56         je         loc_dcfc

000000000000dc5c         test       r13b, r13b
000000000000dc5f         jne        loc_dcfc

000000000000dc65         mov        rsi, r12                                    ; argument "__size" for method j_realloc
000000000000dc68         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000dc6b         call       j_realloc                                   ; realloc
000000000000dc70         test       rax, rax
000000000000dc73         je         loc_d8eb

000000000000dc79         mov        r15, rax

                     loc_dc7c:
000000000000dc7c         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
000000000000dc83         mov        byte [r15+r14], 0x0
000000000000dc88         je         loc_dca1

000000000000dc8a         cmp        r12, rbx
000000000000dc8d         jbe        loc_dca1

000000000000dc8f         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000dc92         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
000000000000dc95         call       j_realloc                                   ; realloc
000000000000dc9a         test       rax, rax
000000000000dc9d         cmovne     r15, rax

                     loc_dca1:
000000000000dca1         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
000000000000dca8         test       rax, rax
000000000000dcab         je         loc_dcb5

000000000000dcad         mov        rdi, rax                                    ; argument "__ptr" for method j_free
000000000000dcb0         call       j_free                                      ; free

                     loc_dcb5:
000000000000dcb5         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
000000000000dcbc         mov        rdi, qword [rbp+var_2B8]
000000000000dcc3         add        rax, 0x20
000000000000dcc7         cmp        rdi, rax
000000000000dcca         je         loc_dcd1

000000000000dccc         call       j_free                                      ; free

                     loc_dcd1:
000000000000dcd1         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
000000000000dcd8         mov        rdi, qword [rbp+var_3A8]
000000000000dcdf         add        rax, 0x10
000000000000dce3         cmp        rdi, rax
000000000000dce6         je         loc_dced

000000000000dce8         call       j_free                                      ; free

                     loc_dced:
000000000000dced         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
000000000000dcf4         mov        qword [rax], r14
000000000000dcf7         jmp        loc_ce7f

                     loc_dcfc:
000000000000dcfc         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
000000000000dcff         call       j_malloc                                    ; malloc
000000000000dd04         test       rax, rax
000000000000dd07         mov        rcx, rax
000000000000dd0a         je         loc_ce05

000000000000dd10         test       r14, r14
000000000000dd13         je         loc_dd80

000000000000dd15         test       r13b, r13b
000000000000dd18         je         loc_dd80

000000000000dd1a         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
000000000000dd1d         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
000000000000dd20         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000dd23         call       j_memcpy                                    ; memcpy
000000000000dd28         mov        r15, rax
000000000000dd2b         jmp        loc_dc7c

                     loc_dd30:
000000000000dd30         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
000000000000dd34         mov        eax, 0x1
000000000000dd39         je         loc_dc7c

000000000000dd3f         test       r12, r12
000000000000dd42         je         loc_ce05

000000000000dd48         js         loc_ce05

                     loc_dd4e:
000000000000dd4e         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
000000000000dd51         jne        loc_ce05

000000000000dd57         cmp        rbx, 0xffffffffffffffff
000000000000dd5b         je         loc_ce05

000000000000dd61         mov        r12, rbx
000000000000dd64         jmp        loc_dc48

                     loc_dd69:
000000000000dd69         js         loc_ce05                                    ; CODE XREF=vasnprintf+3986

000000000000dd6f         add        r12, r12
000000000000dd72         cmp        r12, rbx
000000000000dd75         jae        loc_dc48

000000000000dd7b         jmp        loc_dd4e
000000000000dd7d         align      128

                     loc_dd80:
000000000000dd80         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
000000000000dd83         jmp        loc_dc7c

                     loc_dd88:
000000000000dd88         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
000000000000dd8c         je         loc_d1b0

000000000000dd92         jmp        loc_ce11

                     loc_dd97:
000000000000dd97         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_dd9c:
000000000000dd9c         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
000000000000dda0         mov        edx, 0x1
000000000000dda5         je         loc_d18b

000000000000ddab         test       r12, r12
000000000000ddae         je         loc_ce05

000000000000ddb4         jns        loc_d980

000000000000ddba         jmp        loc_ce05
000000000000ddbf         align      64                                          ; End of unwind block (FDE at 0x12f6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dup_safer:
000000000000ddc0         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0x12f9c), CODE XREF=fd_safer+17
000000000000ddc5         xor        esi, esi
000000000000ddc7         xor        eax, eax
000000000000ddc9         jmp        rpl_fcntl                                   ; rpl_fcntl
                        ; endp
000000000000ddce         align      16                                          ; End of unwind block (FDE at 0x12f9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     rpl_fcntl:
000000000000ddd0         push       r12                                         ; Begin of unwind block (FDE at 0x12fb4), CODE XREF=dup_safer+9
000000000000ddd2         push       rbp
000000000000ddd3         mov        ebp, edi
000000000000ddd5         push       rbx
000000000000ddd6         sub        rsp, 0x50
000000000000ddda         mov        rax, qword [fs:0x28]
000000000000dde3         mov        qword [rsp+0x68+var_50], rax
000000000000dde8         xor        eax, eax
000000000000ddea         lea        rax, qword [rsp+0x68+arg_0]
000000000000ddef         test       esi, esi
000000000000ddf1         mov        qword [rsp+0x68+var_38], rdx
000000000000ddf6         mov        qword [rsp+0x68+var_30], rcx
000000000000ddfb         mov        qword [rsp+0x68+var_28], r8
000000000000de00         mov        qword [rsp+0x68+var_60], rax
000000000000de05         lea        rax, qword [rsp+0x68+var_48]
000000000000de0a         mov        qword [rsp+0x68+var_20], r9
000000000000de0f         mov        dword [rsp+0x68+var_68], 0x10
000000000000de16         mov        qword [rsp+0x68+var_58], rax
000000000000de1b         je         loc_e022

000000000000de21         cmp        esi, 0x406
000000000000de27         jne        loc_de70

000000000000de29         mov        rax, qword [rsp+0x68+var_58]
000000000000de2e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
000000000000de35         mov        dword [rsp+0x68+var_68], 0x18
000000000000de3c         mov        r12d, dword [rax+0x10]
000000000000de40         mov        edx, r12d
000000000000de43         js         loc_df73

000000000000de49         xor        eax, eax
000000000000de4b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
000000000000de50         call       j_fcntl                                     ; fcntl
000000000000de55         test       eax, eax
000000000000de57         mov        ebx, eax
000000000000de59         js         loc_dfe8

                     loc_de5f:
000000000000de5f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
000000000000de69         jmp        loc_deb0
000000000000de6b         align      16

                     loc_de70:
000000000000de70         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
000000000000de73         je         loc_dea0

000000000000de75         jg         loc_ded0

000000000000de77         cmp        esi, 0x4
000000000000de7a         je         loc_df50

000000000000de80         jg         loc_df40

000000000000de86         cmp        esi, 0x2
000000000000de89         je         loc_df50

000000000000de8f         jg         loc_dea0

000000000000de91         cmp        esi, 0x1
000000000000de94         jne        loc_def8

000000000000de96         nop        word [cs:rax+rax]

                     loc_dea0:
000000000000dea0         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
000000000000dea2         xor        eax, eax
000000000000dea4         call       j_fcntl                                     ; fcntl
000000000000dea9         mov        ebx, eax
000000000000deab         nop        dword [rax+rax]

                     loc_deb0:
000000000000deb0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
000000000000deb5         xor        rcx, qword [fs:0x28]
000000000000debe         mov        eax, ebx
000000000000dec0         jne        loc_e01d

000000000000dec6         add        rsp, 0x50
000000000000deca         pop        rbx
000000000000decb         pop        rbp
000000000000decc         pop        r12
000000000000dece         ret
                        ; endp
000000000000decf         align      16

                     loc_ded0:
000000000000ded0         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
000000000000ded6         jg         loc_df20

000000000000ded8         cmp        esi, 0x406
000000000000dede         jge        loc_df50

000000000000dee0         cmp        esi, 0x401
000000000000dee6         je         loc_dea0

000000000000dee8         cmp        esi, 0x402
000000000000deee         je         loc_df50

000000000000def0         cmp        esi, 0x400
000000000000def6         je         loc_df50

                     loc_def8:
000000000000def8         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000000defb         cmp        eax, 0x2f
000000000000defe         ja         loc_e03a

000000000000df04         add        rax, qword [rsp+0x68+var_58]

                     loc_df09:
000000000000df09         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000000df0c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000df0e         xor        eax, eax
000000000000df10         call       j_fcntl                                     ; fcntl
000000000000df15         mov        ebx, eax
000000000000df17         jmp        loc_deb0
000000000000df19         align      32

                     loc_df20:
000000000000df20         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
000000000000df26         je         loc_df50

000000000000df28         jl         loc_dea0

000000000000df2e         cmp        esi, 0x40a
000000000000df34         jne        loc_def8

000000000000df36         jmp        loc_dea0
000000000000df3b         align      64

                     loc_df40:
000000000000df40         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
000000000000df43         je         loc_dea0

000000000000df49         jg         loc_df50

000000000000df4b         cmp        esi, 0x8
000000000000df4e         jne        loc_def8

                     loc_df50:
000000000000df50         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
000000000000df53         cmp        eax, 0x2f
000000000000df56         ja         loc_e044

000000000000df5c         add        rax, qword [rsp+0x68+var_58]

                     loc_df61:
000000000000df61         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
000000000000df63         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000df65         xor        eax, eax
000000000000df67         call       j_fcntl                                     ; fcntl
000000000000df6c         mov        ebx, eax
000000000000df6e         jmp        loc_deb0

                     loc_df73:
000000000000df73         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
000000000000df75         xor        eax, eax
000000000000df77         call       j_fcntl                                     ; fcntl
000000000000df7c         test       eax, eax
000000000000df7e         mov        ebx, eax
000000000000df80         js         loc_deb0

000000000000df86         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000df8d         jne        loc_deb0

                     loc_df93:
000000000000df93         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
000000000000df95         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
000000000000df9a         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000df9c         call       j_fcntl                                     ; fcntl
000000000000dfa1         test       eax, eax
000000000000dfa3         js         loc_dfc1

000000000000dfa5         or         eax, 0x1
000000000000dfa8         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
000000000000dfad         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000dfaf         mov        edx, eax
000000000000dfb1         xor        eax, eax
000000000000dfb3         call       j_fcntl                                     ; fcntl
000000000000dfb8         cmp        eax, 0xffffffff
000000000000dfbb         jne        loc_deb0

                     loc_dfc1:
000000000000dfc1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
000000000000dfc6         mov        r12d, dword [rax]
000000000000dfc9         mov        rbp, rax
000000000000dfcc         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000dfce         call       j_close                                     ; close
000000000000dfd3         mov        ebx, 0xffffffff
000000000000dfd8         mov        dword [rbp], r12d
000000000000dfdc         jmp        loc_deb0
000000000000dfe1         align      8

                     loc_dfe8:
000000000000dfe8         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
000000000000dfed         cmp        dword [rax], 0x16
000000000000dff0         jne        loc_de5f

000000000000dff6         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000dff8         xor        eax, eax
000000000000dffa         mov        edx, r12d
000000000000dffd         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000dfff         call       j_fcntl                                     ; fcntl
000000000000e004         test       eax, eax
000000000000e006         mov        ebx, eax
000000000000e008         js         loc_deb0

000000000000e00e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000e018         jmp        loc_df93

                     loc_e01d:
000000000000e01d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_e022:
000000000000e022         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
000000000000e027         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000e029         mov        edx, dword [rax+0x10]
000000000000e02c         xor        eax, eax
000000000000e02e         call       j_fcntl                                     ; fcntl
000000000000e033         mov        ebx, eax
000000000000e035         jmp        loc_deb0

                     loc_e03a:
000000000000e03a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000000e03f         jmp        loc_df09

                     loc_e044:
000000000000e044         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
000000000000e049         jmp        loc_df61
000000000000e04e         align      16                                          ; End of unwind block (FDE at 0x12fb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
000000000000e050         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0x12fec), CODE XREF=vasnprintf+108
000000000000e054         mov        rax, qword [rsi+8]
000000000000e058         je         loc_e0bd

000000000000e05a         lea        r8, qword [aNull+12]                        ; 0x10cf0
000000000000e061         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
000000000000e068         lea        r9, qword [aNull]                           ; "(NULL)"
000000000000e06f         xor        ecx, ecx
000000000000e071         nop        dword [rax]
000000000000e078         cmp        dword [rax], 0x16
000000000000e07b         ja         loc_e0c0

000000000000e07d         mov        edx, dword [rax]
000000000000e07f         movsxd     rdx, dword [r8+rdx*4]
000000000000e083         add        rdx, r8
000000000000e086         jmp        rdx
                        ; endp
000000000000e088         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e090:
000000000000e090         mov        rdx, qword [rdi+8]
000000000000e094         add        rdx, 0xf
000000000000e098         and        rdx, 0xfffffffffffffff0
000000000000e09c         lea        r11, qword [rdx+0x10]
000000000000e0a0         mov        qword [rdi+8], r11
000000000000e0a4         fld        tword [rdx]
000000000000e0a6         fstp       tword [rax+0x10]
000000000000e0a9         nop        dword [rax]
000000000000e0b0         add        rcx, 0x1                                    ; CODE XREF=sub_e0c6+137, sub_e0c6+183
000000000000e0b4         add        rax, 0x20
000000000000e0b8         cmp        qword [rsi], rcx
000000000000e0bb         ja         printf_fetchargs+40
                        ; endp

                     loc_e0bd:
000000000000e0bd         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
000000000000e0bf         ret
                        ; endp

                     loc_e0c0:
000000000000e0c0         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
000000000000e0c5         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e0c6:
000000000000e0c6         mov        r11d, dword [rdi]
000000000000e0c9         cmp        r11d, 0x2f
000000000000e0cd         ja         loc_e20a

000000000000e0d3         mov        edx, r11d
000000000000e0d6         add        rdx, qword [rdi+0x10]
000000000000e0da         add        r11d, 0x8
000000000000e0de         mov        dword [rdi], r11d

                     loc_e0e1:
000000000000e0e1         mov        rdx, qword [rdx]                            ; CODE XREF=sub_e1b0+102
000000000000e0e4         mov        qword [rax+0x10], rdx
000000000000e0e8         jmp        sub_e090+32
                        ; endp
000000000000e0ea         mov        r11d, dword [rdi]
000000000000e0ed         cmp        r11d, 0x2f
000000000000e0f1         ja         sub_e22c                                    ; sub_e22c
000000000000e0f7         mov        edx, r11d
000000000000e0fa         add        rdx, qword [rdi+0x10]
000000000000e0fe         add        r11d, 0x8
000000000000e102         mov        dword [rdi], r11d

                     loc_e105:
000000000000e105         mov        edx, dword [rdx]                            ; CODE XREF=sub_e22c+12
000000000000e107         mov        dword [rax+0x10], edx
000000000000e10a         jmp        sub_e090+32
                        ; endp
000000000000e10c         mov        r11d, dword [rdi]
000000000000e10f         cmp        r11d, 0x2f
000000000000e113         ja         sub_e21b                                    ; sub_e21b
000000000000e119         mov        edx, r11d
000000000000e11c         add        rdx, qword [rdi+0x10]
000000000000e120         add        r11d, 0x8
000000000000e124         mov        dword [rdi], r11d

                     loc_e127:
000000000000e127         mov        edx, dword [rdx]                            ; CODE XREF=sub_e21b+12
000000000000e129         mov        byte [rax+0x10], dl
000000000000e12c         jmp        sub_e090+32
                        ; endp
000000000000e12e         mov        r11d, dword [rdi]
000000000000e131         cmp        r11d, 0x2f
000000000000e135         ja         sub_e1b0+42
000000000000e13b         mov        edx, r11d
000000000000e13e         add        rdx, qword [rdi+0x10]
000000000000e142         add        r11d, 0x8
000000000000e146         mov        dword [rdi], r11d
000000000000e149         mov        edx, dword [rdx]                            ; CODE XREF=sub_e1b0+54
000000000000e14b         mov        word [rax+0x10], dx
000000000000e14f         jmp        sub_e090+32
000000000000e154         mov        r11d, dword [rdi]
000000000000e157         cmp        r11d, 0x2f
000000000000e15b         ja         sub_e1b0+59
000000000000e161         mov        edx, r11d
000000000000e164         add        rdx, qword [rdi+0x10]
000000000000e168         add        r11d, 0x8
000000000000e16c         mov        dword [rdi], r11d
000000000000e16f         mov        rdx, qword [rdx]                            ; CODE XREF=sub_e1b0+71
000000000000e172         test       rdx, rdx
000000000000e175         cmove      rdx, r9
000000000000e179         mov        qword [rax+0x10], rdx
000000000000e17d         jmp        sub_e090+32
000000000000e182         mov        r11d, dword [rdi+4]
000000000000e186         cmp        r11d, 0xaf
000000000000e18d         ja         sub_e23d                                    ; sub_e23d
000000000000e193         mov        edx, r11d
000000000000e196         add        rdx, qword [rdi+0x10]
000000000000e19a         add        r11d, 0x10
000000000000e19e         mov        dword [rdi+4], r11d

                     loc_e1a2:
000000000000e1a2         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_e23d+12
000000000000e1a6         movsd      qword [rax+0x10], xmm0
000000000000e1ab         jmp        sub_e090+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e1b0:
000000000000e1b0         mov        r11d, dword [rdi]
000000000000e1b3         cmp        r11d, 0x2f
000000000000e1b7         ja         loc_e1fc

000000000000e1b9         mov        edx, r11d
000000000000e1bc         add        rdx, qword [rdi+0x10]
000000000000e1c0         add        r11d, 0x8
000000000000e1c4         mov        dword [rdi], r11d

                     loc_e1c7:
000000000000e1c7         mov        rdx, qword [rdx]                            ; CODE XREF=sub_e1b0+88
000000000000e1ca         test       rdx, rdx
000000000000e1cd         cmove      rdx, r10
000000000000e1d1         mov        qword [rax+0x10], rdx
000000000000e1d5         jmp        sub_e090+32
                        ; endp
000000000000e1da         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_e0c6+111
000000000000e1de         lea        r11, qword [rdx+8]
000000000000e1e2         mov        qword [rdi+8], r11
000000000000e1e6         jmp        sub_e0c6+131
000000000000e1eb         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_e0c6+149
000000000000e1ef         lea        r11, qword [rdx+8]
000000000000e1f3         mov        qword [rdi+8], r11
000000000000e1f7         jmp        sub_e0c6+169

                     loc_e1fc:
000000000000e1fc         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_e1b0+7
000000000000e200         lea        r11, qword [rdx+8]
000000000000e204         mov        qword [rdi+8], r11
000000000000e208         jmp        loc_e1c7

                     loc_e20a:
000000000000e20a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_e0c6+7
000000000000e20e         lea        r11, qword [rdx+8]
000000000000e212         mov        qword [rdi+8], r11
000000000000e216         jmp        loc_e0e1


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e21b:
000000000000e21b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_e0c6+77
000000000000e21f         lea        r11, qword [rdx+8]
000000000000e223         mov        qword [rdi+8], r11
000000000000e227         jmp        loc_e127


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e22c:
000000000000e22c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_e0c6+43
000000000000e230         lea        r11, qword [rdx+8]
000000000000e234         mov        qword [rdi+8], r11
000000000000e238         jmp        loc_e105


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e23d:
000000000000e23d         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_e0c6+199
000000000000e241         lea        r11, qword [rdx+8]
000000000000e245         mov        qword [rdi+8], r11
000000000000e249         jmp        loc_e1a2


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_e24e:
000000000000e24e         nop                                                    ; End of unwind block (FDE at 0x12fec)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
000000000000e250         push       r15                                         ; Begin of unwind block (FDE at 0x13004), CODE XREF=vasnprintf+89
000000000000e252         push       r14
000000000000e254         lea        rcx, qword [rsi+0x20]
000000000000e258         push       r13
000000000000e25a         push       r12
000000000000e25c         lea        rax, qword [rdx+0x10]
000000000000e260         push       rbp
000000000000e261         push       rbx
000000000000e262         mov        r14, rsi
000000000000e265         mov        r15, rdx
000000000000e268         xor        ebx, ebx
000000000000e26a         mov        r9d, 0x7
000000000000e270         sub        rsp, 0x58
000000000000e274         mov        r10d, 0x7
000000000000e27a         mov        qword [rsi], 0x0
000000000000e281         mov        qword [rsi+8], rcx
000000000000e285         mov        qword [rsp+0x88+var_60], rcx
000000000000e28a         mov        r8, 0xffffffffffffffff
000000000000e291         mov        qword [rdx], 0x0
000000000000e298         mov        qword [rsp+0x88+var_80], rax
000000000000e29d         mov        qword [rdx+8], rax
000000000000e2a1         mov        qword [rsp+0x88+var_70], 0x0
000000000000e2aa         mov        qword [rsp+0x88+var_78], 0x0
000000000000e2b3         mov        qword [rsp+0x88+var_68], 0x0
000000000000e2bc         jmp        loc_e2cb
000000000000e2be         align      64

                     loc_e2c0:
000000000000e2c0         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
000000000000e2c2         lea        rbp, qword [rdi+1]
000000000000e2c6         je         loc_e308

                     loc_e2c8:
000000000000e2c8         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_e2cb:
000000000000e2cb         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
000000000000e2ce         test       al, al
000000000000e2d0         jne        loc_e2c0

000000000000e2d2         lea        rax, qword [rbx+rbx*4]
000000000000e2d6         lea        rax, qword [rbx+rax*2]
000000000000e2da         mov        qword [rcx+rax*8], rdi
000000000000e2de         mov        rax, qword [rsp+0x88+var_78]
000000000000e2e3         mov        qword [r14+0x10], rax
000000000000e2e7         mov        rax, qword [rsp+0x88+var_70]
000000000000e2ec         mov        qword [r14+0x18], rax
000000000000e2f0         xor        eax, eax

                     loc_e2f2:
000000000000e2f2         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
000000000000e2f6         pop        rbx
000000000000e2f7         pop        rbp
000000000000e2f8         pop        r12
000000000000e2fa         pop        r13
000000000000e2fc         pop        r14
000000000000e2fe         pop        r15
000000000000e300         ret
                        ; endp
000000000000e301         align      8

                     loc_e308:
000000000000e308         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
000000000000e30c         mov        r13, r8
000000000000e30f         lea        rax, qword [rbx+rax*2]
000000000000e313         lea        r12, qword [rcx+rax*8]
000000000000e317         mov        qword [r12], rdi
000000000000e31b         mov        dword [r12+0x10], 0x0
000000000000e324         mov        qword [r12+0x18], 0x0
000000000000e32d         mov        qword [r12+0x20], 0x0
000000000000e336         mov        qword [r12+0x28], r8
000000000000e33b         mov        qword [r12+0x30], 0x0
000000000000e344         mov        qword [r12+0x38], 0x0
000000000000e34d         mov        qword [r12+0x40], r8
000000000000e352         mov        qword [r12+0x50], r8
000000000000e357         movzx      ebx, byte [rdi+1]
000000000000e35b         lea        eax, dword [rbx-0x30]
000000000000e35e         cmp        al, 0x9
000000000000e360         ja         loc_e39e

000000000000e362         jmp        loc_e79a
000000000000e367         align      16

                     loc_e370:
000000000000e370         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
000000000000e373         je         loc_e3b8

000000000000e375         cmp        bl, 0x2b
000000000000e378         je         loc_e3c0

000000000000e37a         cmp        bl, 0x20
000000000000e37d         je         loc_e3d0

000000000000e37f         cmp        bl, 0x23
000000000000e382         je         loc_e3e0

000000000000e384         cmp        bl, 0x30
000000000000e387         je         loc_e3f0

000000000000e389         cmp        bl, 0x49
000000000000e38c         jne        loc_e400

000000000000e38e         or         dword [r12+0x10], 0x40
000000000000e394         nop        dword [rax]

                     loc_e398:
000000000000e398         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
000000000000e39b         mov        rbp, rax

                     loc_e39e:
000000000000e39e         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
000000000000e3a2         cmp        bl, 0x27
000000000000e3a5         mov        rdx, rax
000000000000e3a8         jne        loc_e370

000000000000e3aa         or         dword [r12+0x10], 0x1
000000000000e3b0         jmp        loc_e398
000000000000e3b2         align      8

                     loc_e3b8:
000000000000e3b8         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
000000000000e3be         jmp        loc_e398

                     loc_e3c0:
000000000000e3c0         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
000000000000e3c6         jmp        loc_e398
000000000000e3c8         align      16

                     loc_e3d0:
000000000000e3d0         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
000000000000e3d6         jmp        loc_e398
000000000000e3d8         align      32

                     loc_e3e0:
000000000000e3e0         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
000000000000e3e6         jmp        loc_e398
000000000000e3e8         align      16

                     loc_e3f0:
000000000000e3f0         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
000000000000e3f6         jmp        loc_e398
000000000000e3f8         align      1024

                     loc_e400:
000000000000e400         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
000000000000e403         je         loc_e5b9

000000000000e409         lea        ecx, dword [rbx-0x30]
000000000000e40c         cmp        cl, 0x9
000000000000e40f         jbe        loc_e827

                     loc_e415:
000000000000e415         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
000000000000e418         je         loc_e6ef

                     loc_e41e:
000000000000e41e         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
000000000000e420         mov        esi, 0x1
000000000000e425         jmp        loc_e457
000000000000e427         align      16

                     loc_e430:
000000000000e430         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
000000000000e433         je         loc_e470

000000000000e435         cmp        bl, 0x6c
000000000000e438         je         loc_e450

000000000000e43a         cmp        bl, 0x6a
000000000000e43d         je         loc_e450

000000000000e43f         mov        edx, ebx
000000000000e441         and        edx, 0xffffffdf
000000000000e444         cmp        dl, 0x5a
000000000000e447         je         loc_e450

000000000000e449         cmp        bl, 0x74
000000000000e44c         jne        loc_e478

000000000000e44e         nop

                     loc_e450:
000000000000e450         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_e453:
000000000000e453         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_e457:
000000000000e457         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
000000000000e45b         cmp        bl, 0x68
000000000000e45e         jne        loc_e430

000000000000e460         mov        ecx, eax
000000000000e462         mov        edx, esi
000000000000e464         and        ecx, 0x1
000000000000e467         shl        edx, cl
000000000000e469         or         eax, edx
000000000000e46b         jmp        loc_e453
000000000000e46d         align      16

                     loc_e470:
000000000000e470         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
000000000000e473         jmp        loc_e453
000000000000e475         align      8

                     loc_e478:
000000000000e478         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
000000000000e47b         cmp        dl, 0x53
000000000000e47e         ja         loc_ea9b

000000000000e484         lea        rcx, qword [switch_table_10d6c]             ; switch_table_10d6c
000000000000e48b         movzx      edx, dl
000000000000e48e         movsxd     rdx, dword [rcx+rdx*4]
000000000000e492         add        rdx, rcx
000000000000e495         jmp        rdx                                         ; switch statement using table at 0x10d6c, with 84 cases, 0xe497,0xe50b,0xe94c,0xe998,0xe9ab,0xe9f8,0xea0b,0xea2c,0xea3c,0xea90,0xea9b

                     loc_e497:
000000000000e497         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
000000000000e49d         mov        ebx, 0x73
000000000000e4a2         nop        word [rax+rax]

                     loc_e4a8:
000000000000e4a8         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
000000000000e4ac         je         loc_eb67

000000000000e4b2         mov        qword [r12+0x50], r13

                     loc_e4b7:
000000000000e4b7         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
000000000000e4ba         mov        rcx, qword [r15+8]
000000000000e4be         jbe        loc_eae0

                     loc_e4c4:
000000000000e4c4         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
000000000000e4c7         mov        rdx, rax
000000000000e4ca         shl        rdx, 0x5
000000000000e4ce         add        rdx, rcx
000000000000e4d1         cmp        rax, r13
000000000000e4d4         ja         loc_e4f6

000000000000e4d6         nop        word [cs:rax+rax]

                     loc_e4e0:
000000000000e4e0         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
000000000000e4e4         mov        dword [rdx], 0x0
000000000000e4ea         add        rdx, 0x20
000000000000e4ee         cmp        rax, r13
000000000000e4f1         jbe        loc_e4e0

000000000000e4f3         mov        qword [r15], rax

                     loc_e4f6:
000000000000e4f6         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
000000000000e4fa         lea        rax, qword [rcx+r13]
000000000000e4fe         mov        edx, dword [rax]
000000000000e500         test       edx, edx
000000000000e502         jne        loc_ead3

000000000000e508         mov        dword [rax], r11d

                     loc_e50b:
000000000000e50b         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
000000000000e510         mov        rax, qword [r14]
000000000000e513         mov        qword [r12+8], rbp
000000000000e518         lea        rbx, qword [rax+1]
000000000000e51c         cmp        r10, rbx
000000000000e51f         mov        qword [r14], rbx
000000000000e522         ja         loc_e5b0

000000000000e528         test       r10, r10
000000000000e52b         js         loc_eed7

000000000000e531         add        r10, r10
000000000000e534         movabs     rax, 0x2e8ba2e8ba2e8ba
000000000000e53e         cmp        r10, rax
000000000000e541         ja         loc_eed7

000000000000e547         lea        rax, qword [r10+r10*4]
000000000000e54b         mov        rdi, qword [r14+8]
000000000000e54f         cmp        qword [rsp+0x88+var_60], rdi
000000000000e554         mov        qword [rsp+0x88+var_48], r9
000000000000e559         mov        qword [rsp+0x88+var_50], r10
000000000000e55e         lea        rax, qword [r10+rax*2]
000000000000e562         mov        qword [rsp+0x88+var_58], r8
000000000000e567         lea        rsi, qword [rax*8]
000000000000e56f         je         loc_ec2d

000000000000e575         call       j_realloc                                   ; realloc
000000000000e57a         test       rax, rax
000000000000e57d         mov        rcx, rax
000000000000e580         mov        r8, qword [rsp+0x88+var_58]
000000000000e585         mov        r10, qword [rsp+0x88+var_50]
000000000000e58a         mov        r9, qword [rsp+0x88+var_48]
000000000000e58f         je         loc_eed7

000000000000e595         mov        rax, qword [rsp+0x88+var_60]
000000000000e59a         cmp        rax, qword [r14+8]
000000000000e59e         mov        rbx, qword [r14]
000000000000e5a1         je         loc_ec50

                     loc_e5a7:
000000000000e5a7         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
000000000000e5ab         jmp        loc_e2c8

                     loc_e5b0:
000000000000e5b0         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
000000000000e5b4         jmp        loc_e2c8

                     loc_e5b9:
000000000000e5b9         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
000000000000e5be         mov        ecx, 0x1
000000000000e5c3         mov        qword [r12+0x18], rbp
000000000000e5c8         mov        qword [r12+0x20], rax
000000000000e5cd         test       rsi, rsi
000000000000e5d0         cmovne     rcx, rsi
000000000000e5d4         mov        qword [rsp+0x88+var_78], rcx
000000000000e5d9         movzx      ecx, byte [rbp+1]
000000000000e5dd         lea        esi, dword [rcx-0x30]
000000000000e5e0         cmp        sil, 0x9
000000000000e5e4         jbe        loc_e8c5

                     loc_e5ea:
000000000000e5ea         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
000000000000e5ef         cmp        rsi, 0xffffffffffffffff
000000000000e5f3         lea        rdx, qword [rsi+1]
000000000000e5f7         mov        qword [r12+0x28], rsi
000000000000e5fc         je         loc_ea9b

000000000000e602         mov        rbx, qword [rsp+0x88+var_68]
000000000000e607         mov        rbp, rax
000000000000e60a         mov        qword [rsp+0x88+var_68], rdx

                     loc_e60f:
000000000000e60f         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
000000000000e612         mov        rcx, qword [r15+8]
000000000000e616         ja         loc_ec92

000000000000e61c         add        r9, r9
000000000000e61f         lea        rax, qword [rbx+1]
000000000000e623         cmp        r9, rbx
000000000000e626         cmovbe     r9, rax
000000000000e62a         movabs     rax, 0x7ffffffffffffff
000000000000e634         cmp        r9, rax
000000000000e637         ja         loc_eedb

000000000000e63d         mov        rsi, r9
000000000000e640         mov        qword [rsp+0x88+var_48], r9
000000000000e645         mov        qword [rsp+0x88+var_50], r10
000000000000e64a         shl        rsi, 0x5
000000000000e64e         cmp        qword [rsp+0x88+var_80], rcx
000000000000e653         mov        qword [rsp+0x88+var_58], r8
000000000000e658         je         loc_ed71

000000000000e65e         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000e661         call       j_realloc                                   ; realloc
000000000000e666         mov        rdx, qword [r15+8]
000000000000e66a         mov        r8, qword [rsp+0x88+var_58]
000000000000e66f         mov        rcx, rax
000000000000e672         mov        r10, qword [rsp+0x88+var_50]
000000000000e677         mov        r9, qword [rsp+0x88+var_48]

                     loc_e67c:
000000000000e67c         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
000000000000e67f         je         loc_ef37

000000000000e685         cmp        qword [rsp+0x88+var_80], rdx
000000000000e68a         mov        rax, qword [r15]
000000000000e68d         je         loc_ee4b

                     loc_e693:
000000000000e693         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_e697:
000000000000e697         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
000000000000e69a         shl        rdx, 0x5
000000000000e69e         add        rdx, rcx
000000000000e6a1         cmp        rax, rbx
000000000000e6a4         ja         loc_e6c6

000000000000e6a6         nop        word [cs:rax+rax]

                     loc_e6b0:
000000000000e6b0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
000000000000e6b4         mov        dword [rdx], 0x0
000000000000e6ba         add        rdx, 0x20
000000000000e6be         cmp        rax, rbx
000000000000e6c1         jbe        loc_e6b0

000000000000e6c3         mov        qword [r15], rax

                     loc_e6c6:
000000000000e6c6         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
000000000000e6ca         lea        rax, qword [rcx+rbx]
000000000000e6ce         mov        edx, dword [rax]
000000000000e6d0         test       edx, edx
000000000000e6d2         jne        loc_ebab

000000000000e6d8         mov        dword [rax], 0x5
000000000000e6de         movzx      ebx, byte [rbp]
000000000000e6e2         lea        rdx, qword [rbp+1]
000000000000e6e6         cmp        bl, 0x2e
000000000000e6e9         jne        loc_e41e

                     loc_e6ef:
000000000000e6ef         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
000000000000e6f3         mov        qword [r12+0x30], rbp
000000000000e6f8         jne        loc_e87e

000000000000e6fe         mov        rsi, qword [rsp+0x88+var_70]
000000000000e703         lea        r11, qword [rbp+2]
000000000000e707         mov        eax, 0x2
000000000000e70c         mov        qword [r12+0x38], r11
000000000000e711         cmp        rsi, 0x2
000000000000e715         cmovae     rax, rsi
000000000000e719         mov        qword [rsp+0x88+var_70], rax
000000000000e71e         movsx      eax, byte [rbp+2]
000000000000e722         lea        edx, dword [rax-0x30]
000000000000e725         cmp        dl, 0x9
000000000000e728         jbe        loc_edbc

                     loc_e72e:
000000000000e72e         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
000000000000e733         cmp        rbx, 0xffffffffffffffff
000000000000e737         je         loc_ed95

                     loc_e73d:
000000000000e73d         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
000000000000e740         mov        rcx, qword [r15+8]
000000000000e744         jbe        loc_ecaf

000000000000e74a         mov        rax, qword [r15]

                     loc_e74d:
000000000000e74d         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
000000000000e750         shl        rdx, 0x5
000000000000e754         add        rdx, rcx
000000000000e757         cmp        rax, rbx
000000000000e75a         ja         loc_e776

000000000000e75c         nop        dword [rax]

                     loc_e760:
000000000000e760         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
000000000000e764         mov        dword [rdx], 0x0
000000000000e76a         add        rdx, 0x20
000000000000e76e         cmp        rax, rbx
000000000000e771         jbe        loc_e760

000000000000e773         mov        qword [r15], rax

                     loc_e776:
000000000000e776         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
000000000000e77a         lea        rax, qword [rcx+rbx]
000000000000e77e         mov        edx, dword [rax]
000000000000e780         test       edx, edx
000000000000e782         jne        loc_ec9a

000000000000e788         mov        dword [rax], 0x5
000000000000e78e         mov        rbp, r11
000000000000e791         movzx      ebx, byte [r11]
000000000000e795         jmp        loc_e41e

                     loc_e79a:
000000000000e79a         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
000000000000e79d         nop        dword [rax]

                     loc_e7a0:
000000000000e7a0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
000000000000e7a4         movzx      edx, byte [rax]
000000000000e7a7         lea        ecx, dword [rdx-0x30]
000000000000e7aa         cmp        cl, 0x9
000000000000e7ad         jbe        loc_e7a0

000000000000e7af         cmp        dl, 0x24
000000000000e7b2         mov        r13, r8
000000000000e7b5         jne        loc_e39e

000000000000e7bb         xor        edx, edx

                     loc_e7bd:
000000000000e7bd         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
000000000000e7c0         movabs     rdi, 0x1999999999999999
000000000000e7ca         mov        rsi, r8
000000000000e7cd         sub        eax, 0x30
000000000000e7d0         cmp        rdx, rdi
000000000000e7d3         cdqe
000000000000e7d5         ja         loc_e7de

000000000000e7d7         lea        rsi, qword [rdx+rdx*4]
000000000000e7db         add        rsi, rsi

                     loc_e7de:
000000000000e7de         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_e7e1:
000000000000e7e1         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
000000000000e7e4         movzx      ebx, byte [rbp+1]
000000000000e7e8         setb       sil
000000000000e7ec         add        rbp, 0x1
000000000000e7f0         mov        rdx, rax
000000000000e7f3         movzx      esi, sil
000000000000e7f7         test       rsi, rsi
000000000000e7fa         lea        edi, dword [rbx-0x30]
000000000000e7fd         jne        loc_eb8e

000000000000e803         cmp        dil, 0x9
000000000000e807         jbe        loc_e7bd

000000000000e809         mov        r13, rax
000000000000e80c         sub        r13, 0x1
000000000000e810         cmp        r13, 0xfffffffffffffffd
000000000000e814         ja         loc_ea9b

000000000000e81a         lea        rbp, qword [rcx+2]
000000000000e81e         movzx      ebx, byte [rcx+2]
000000000000e822         jmp        loc_e39e

                     loc_e827:
000000000000e827         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
000000000000e82c         movzx      edi, byte [rbp]
000000000000e830         mov        rsi, rbp
000000000000e833         lea        ecx, dword [rdi-0x30]
000000000000e836         cmp        cl, 0x9
000000000000e839         jbe        loc_e847

000000000000e83b         jmp        loc_e870
000000000000e83d         align      64

                     loc_e840:
000000000000e840         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
000000000000e843         add        rax, 0x1

                     loc_e847:
000000000000e847         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
000000000000e84a         lea        edx, dword [rdi-0x30]
000000000000e84d         cmp        dl, 0x9
000000000000e850         jbe        loc_e840

000000000000e852         mov        rcx, rax
000000000000e855         lea        rdx, qword [rbp+2]
000000000000e859         mov        rbp, rax
000000000000e85c         sub        rcx, rsi
000000000000e85f         mov        rsi, qword [rsp+0x88+var_78]
000000000000e864         cmp        rsi, rcx
000000000000e867         cmovae     rcx, rsi
000000000000e86b         mov        qword [rsp+0x88+var_78], rcx

                     loc_e870:
000000000000e870         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
000000000000e875         movzx      ebx, byte [rbp]
000000000000e879         jmp        loc_e415

                     loc_e87e:
000000000000e87e         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
000000000000e882         sub        eax, 0x30
000000000000e885         cmp        al, 0x9
000000000000e887         ja         loc_e89e

000000000000e889         nop        dword [rax]

                     loc_e890:
000000000000e890         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
000000000000e894         movzx      eax, byte [rdx]
000000000000e897         sub        eax, 0x30
000000000000e89a         cmp        al, 0x9
000000000000e89c         jbe        loc_e890

                     loc_e89e:
000000000000e89e         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
000000000000e8a3         mov        rax, rdx
000000000000e8a6         mov        qword [r12+0x38], rdx
000000000000e8ab         sub        rax, rbp
000000000000e8ae         movzx      ebx, byte [rdx]
000000000000e8b1         mov        rbp, rdx
000000000000e8b4         cmp        rsi, rax
000000000000e8b7         cmovae     rax, rsi
000000000000e8bb         mov        qword [rsp+0x88+var_70], rax
000000000000e8c0         jmp        loc_e41e

                     loc_e8c5:
000000000000e8c5         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_e8c8:
000000000000e8c8         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
000000000000e8cc         movzx      edi, byte [rsi]
000000000000e8cf         lea        r11d, dword [rdi-0x30]
000000000000e8d3         cmp        r11b, 0x9
000000000000e8d7         jbe        loc_e8c8

000000000000e8d9         cmp        dil, 0x24
000000000000e8dd         jne        loc_e5ea

000000000000e8e3         xor        esi, esi

                     loc_e8e5:
000000000000e8e5         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
000000000000e8e8         movabs     rdi, 0x1999999999999999
000000000000e8f2         mov        rcx, r8
000000000000e8f5         sub        eax, 0x30
000000000000e8f8         cmp        rsi, rdi
000000000000e8fb         cdqe
000000000000e8fd         ja         loc_e906

000000000000e8ff         lea        rcx, qword [rsi+rsi*4]
000000000000e903         add        rcx, rcx

                     loc_e906:
000000000000e906         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_e909:
000000000000e909         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
000000000000e90c         add        rax, rcx
000000000000e90f         movzx      ecx, byte [rdx+1]
000000000000e913         setb       r11b
000000000000e917         add        rdx, 0x1
000000000000e91b         mov        rsi, rax
000000000000e91e         test       r11, r11
000000000000e921         lea        edi, dword [rcx-0x30]
000000000000e924         jne        loc_ee2e

000000000000e92a         cmp        dil, 0x9
000000000000e92e         jbe        loc_e8e5

000000000000e930         lea        rbx, qword [rax-1]
000000000000e934         cmp        rbx, 0xfffffffffffffffd
000000000000e938         ja         loc_ea9b

000000000000e93e         mov        qword [r12+0x28], rbx
000000000000e943         add        rbp, 0x2
000000000000e947         jmp        loc_e60f

                     loc_e94c:
000000000000e94c         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
000000000000e94f         mov        r11d, 0x16
000000000000e955         jg         loc_e4a8

000000000000e95b         test       al, 0x4
000000000000e95d         jne        loc_e4a8

000000000000e963         cmp        eax, 0x7
000000000000e966         mov        r11d, 0x15
000000000000e96c         jg         loc_e4a8

000000000000e972         test       al, 0x2
000000000000e974         mov        r11d, 0x12
000000000000e97a         jne        loc_e4a8

000000000000e980         xor        r11d, r11d
000000000000e983         test       al, 0x1
000000000000e985         sete       r11b
000000000000e989         add        r11d, 0x13
000000000000e98d         jmp        loc_e4a8
000000000000e992         align      8

                     loc_e998:
000000000000e998         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
000000000000e99b         cmp        eax, 0x7
000000000000e99e         setg       r11b
000000000000e9a2         add        r11d, 0xd
000000000000e9a6         jmp        loc_e4a8

                     loc_e9ab:
000000000000e9ab         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
000000000000e9ae         mov        r11d, 0x9
000000000000e9b4         jg         loc_e4a8

000000000000e9ba         test       al, 0x4
000000000000e9bc         jne        loc_e4a8

000000000000e9c2         cmp        eax, 0x7
000000000000e9c5         mov        r11d, 0x7
000000000000e9cb         jg         loc_e4a8

000000000000e9d1         test       al, 0x2
000000000000e9d3         mov        r11d, 0x1
000000000000e9d9         jne        loc_e4a8

000000000000e9df         and        eax, 0x1
000000000000e9e2         cmp        eax, 0x1
000000000000e9e5         sbb        r11d, r11d
000000000000e9e8         and        r11d, 0x2
000000000000e9ec         add        r11d, 0x3
000000000000e9f0         jmp        loc_e4a8
000000000000e9f5         align      8

                     loc_e9f8:
000000000000e9f8         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
000000000000e9fb         cmp        eax, 0x7
000000000000e9fe         setg       r11b
000000000000ea02         add        r11d, 0xf
000000000000ea06         jmp        loc_e4a8

                     loc_ea0b:
000000000000ea0b         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
000000000000ea0e         mov        r11d, 0xc
000000000000ea14         jg         loc_e4a8

000000000000ea1a         xor        r11d, r11d
000000000000ea1d         test       al, 0x4
000000000000ea1f         setne      r11b
000000000000ea23         add        r11d, 0xb
000000000000ea27         jmp        loc_e4a8

                     loc_ea2c:
000000000000ea2c         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
000000000000ea32         mov        ebx, 0x63
000000000000ea37         jmp        loc_e4a8

                     loc_ea3c:
000000000000ea3c         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
000000000000ea3f         mov        r11d, 0xa
000000000000ea45         jg         loc_e4a8

000000000000ea4b         test       al, 0x4
000000000000ea4d         jne        loc_e4a8

000000000000ea53         cmp        eax, 0x7
000000000000ea56         mov        r11d, 0x8
000000000000ea5c         jg         loc_e4a8

000000000000ea62         test       al, 0x2
000000000000ea64         mov        r11d, 0x2
000000000000ea6a         jne        loc_e4a8

000000000000ea70         and        eax, 0x1
000000000000ea73         cmp        eax, 0x1
000000000000ea76         sbb        r11d, r11d
000000000000ea79         and        r11d, 0x2
000000000000ea7d         add        r11d, 0x4
000000000000ea81         jmp        loc_e4a8
000000000000ea86         align      16

                     loc_ea90:
000000000000ea90         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
000000000000ea96         jmp        loc_e4a8

                     loc_ea9b:
000000000000ea9b         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_ea9f:
000000000000ea9f         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
000000000000eaa4         je         loc_eaae

000000000000eaa6         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
000000000000eaa9         call       j_free                                      ; free

                     loc_eaae:
000000000000eaae         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
000000000000eab2         cmp        qword [rsp+0x88+var_60], rdi
000000000000eab7         je         loc_eabe

000000000000eab9         call       j_free                                      ; free

                     loc_eabe:
000000000000eabe         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
000000000000eac3         mov        dword [rax], 0x16
000000000000eac9         mov        eax, 0xffffffff
000000000000eace         jmp        loc_e2f2

                     loc_ead3:
000000000000ead3         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
000000000000ead6         je         loc_e50b

000000000000eadc         jmp        loc_ea9f
000000000000eade         align      32

                     loc_eae0:
000000000000eae0         add        r9, r9                                      ; CODE XREF=printf_parse+622
000000000000eae3         lea        rax, qword [r13+1]
000000000000eae7         cmp        r9, r13
000000000000eaea         cmovbe     r9, rax
000000000000eaee         movabs     rax, 0x7ffffffffffffff
000000000000eaf8         cmp        r9, rax
000000000000eafb         ja         loc_eedb

000000000000eb01         mov        rsi, r9
000000000000eb04         mov        qword [rsp+0x88+var_40], r9
000000000000eb09         mov        qword [rsp+0x88+var_48], r10
000000000000eb0e         shl        rsi, 0x5
000000000000eb12         cmp        qword [rsp+0x88+var_80], rcx
000000000000eb17         mov        qword [rsp+0x88+var_50], r8
000000000000eb1c         mov        dword [rsp+0x88+var_58], r11d
000000000000eb21         je         loc_ebc1

000000000000eb27         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000eb2a         call       j_realloc                                   ; realloc
000000000000eb2f         test       rax, rax
000000000000eb32         mov        rcx, rax
000000000000eb35         mov        r11d, dword [rsp+0x88+var_58]
000000000000eb3a         mov        r8, qword [rsp+0x88+var_50]
000000000000eb3f         mov        r10, qword [rsp+0x88+var_48]
000000000000eb44         mov        r9, qword [rsp+0x88+var_40]
000000000000eb49         je         loc_eed7

000000000000eb4f         mov        rax, qword [rsp+0x88+var_80]
000000000000eb54         cmp        rax, qword [r15+8]
000000000000eb58         je         loc_ebe9

                     loc_eb5e:
000000000000eb5e         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
000000000000eb62         jmp        loc_e4c4

                     loc_eb67:
000000000000eb67         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
000000000000eb6c         cmp        rsi, 0xffffffffffffffff
000000000000eb70         lea        rax, qword [rsi+1]
000000000000eb74         mov        qword [r12+0x50], rsi
000000000000eb79         je         loc_ea9b

000000000000eb7f         mov        r13, qword [rsp+0x88+var_68]
000000000000eb84         mov        qword [rsp+0x88+var_68], rax
000000000000eb89         jmp        loc_e4b7

                     loc_eb8e:
000000000000eb8e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
000000000000eb92         ja         loc_ea9b

000000000000eb98         movsx      eax, bl
000000000000eb9b         mov        rsi, r8
000000000000eb9e         mov        rcx, rbp
000000000000eba1         sub        eax, 0x30
000000000000eba4         cdqe
000000000000eba6         jmp        loc_e7e1

                     loc_ebab:
000000000000ebab         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
000000000000ebae         jne        loc_ea9f

000000000000ebb4         movzx      ebx, byte [rbp]
000000000000ebb8         lea        rdx, qword [rbp+1]
000000000000ebbc         jmp        loc_e415

                     loc_ebc1:
000000000000ebc1         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
000000000000ebc4         call       j_malloc                                    ; malloc
000000000000ebc9         test       rax, rax
000000000000ebcc         mov        rcx, rax
000000000000ebcf         mov        r11d, dword [rsp+0x88+var_58]
000000000000ebd4         mov        r8, qword [rsp+0x88+var_50]
000000000000ebd9         mov        r10, qword [rsp+0x88+var_48]
000000000000ebde         mov        r9, qword [rsp+0x88+var_40]
000000000000ebe3         je         loc_ed4c

                     loc_ebe9:
000000000000ebe9         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
000000000000ebec         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
000000000000ebf1         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000ebf4         mov        qword [rsp+0x88+var_40], r9
000000000000ebf9         mov        qword [rsp+0x88+var_48], r10
000000000000ebfe         mov        qword [rsp+0x88+var_50], r8
000000000000ec03         mov        dword [rsp+0x88+var_58], r11d
000000000000ec08         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
000000000000ec0c         call       j_memcpy                                    ; memcpy
000000000000ec11         mov        r9, qword [rsp+0x88+var_40]
000000000000ec16         mov        r10, qword [rsp+0x88+var_48]
000000000000ec1b         mov        rcx, rax
000000000000ec1e         mov        r8, qword [rsp+0x88+var_50]
000000000000ec23         mov        r11d, dword [rsp+0x88+var_58]
000000000000ec28         jmp        loc_eb5e

                     loc_ec2d:
000000000000ec2d         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
000000000000ec30         call       j_malloc                                    ; malloc
000000000000ec35         test       rax, rax
000000000000ec38         mov        rcx, rax
000000000000ec3b         mov        r8, qword [rsp+0x88+var_58]
000000000000ec40         mov        r10, qword [rsp+0x88+var_50]
000000000000ec45         mov        r9, qword [rsp+0x88+var_48]
000000000000ec4a         je         loc_ed39

                     loc_ec50:
000000000000ec50         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
000000000000ec54         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
000000000000ec59         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000ec5c         mov        qword [rsp+0x88+var_48], r9
000000000000ec61         mov        qword [rsp+0x88+var_50], r10
000000000000ec66         lea        rdx, qword [rbx+rax*2]
000000000000ec6a         mov        qword [rsp+0x88+var_58], r8
000000000000ec6f         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
000000000000ec73         call       j_memcpy                                    ; memcpy
000000000000ec78         mov        rbx, qword [r14]
000000000000ec7b         mov        rcx, rax
000000000000ec7e         mov        r9, qword [rsp+0x88+var_48]
000000000000ec83         mov        r10, qword [rsp+0x88+var_50]
000000000000ec88         mov        r8, qword [rsp+0x88+var_58]
000000000000ec8d         jmp        loc_e5a7

                     loc_ec92:
000000000000ec92         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
000000000000ec95         jmp        loc_e697

                     loc_ec9a:
000000000000ec9a         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
000000000000ec9d         jne        loc_ea9f

000000000000eca3         movzx      ebx, byte [r11]
000000000000eca7         mov        rbp, r11
000000000000ecaa         jmp        loc_e41e

                     loc_ecaf:
000000000000ecaf         add        r9, r9                                      ; CODE XREF=printf_parse+1268
000000000000ecb2         lea        rax, qword [rbx+1]
000000000000ecb6         cmp        r9, rbx
000000000000ecb9         cmovbe     r9, rax
000000000000ecbd         movabs     rax, 0x7ffffffffffffff
000000000000ecc7         cmp        r9, rax
000000000000ecca         ja         loc_eedb

000000000000ecd0         mov        rsi, r9
000000000000ecd3         mov        qword [rsp+0x88+var_40], r9
000000000000ecd8         mov        qword [rsp+0x88+var_48], r10
000000000000ecdd         shl        rsi, 0x5
000000000000ece1         cmp        qword [rsp+0x88+var_80], rcx
000000000000ece6         mov        qword [rsp+0x88+var_50], r8
000000000000eceb         mov        qword [rsp+0x88+var_58], r11
000000000000ecf0         je         loc_eeae

000000000000ecf6         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
000000000000ecf9         call       j_realloc                                   ; realloc
000000000000ecfe         mov        rdx, qword [r15+8]
000000000000ed02         mov        r11, qword [rsp+0x88+var_58]
000000000000ed07         mov        rcx, rax
000000000000ed0a         mov        r8, qword [rsp+0x88+var_50]
000000000000ed0f         mov        r10, qword [rsp+0x88+var_48]
000000000000ed14         mov        r9, qword [rsp+0x88+var_40]

                     loc_ed19:
000000000000ed19         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
000000000000ed1c         je         loc_ef37

000000000000ed22         cmp        qword [rsp+0x88+var_80], rdx
000000000000ed27         mov        rax, qword [r15]
000000000000ed2a         je         loc_eef0

                     loc_ed30:
000000000000ed30         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
000000000000ed34         jmp        loc_e74d

                     loc_ed39:
000000000000ed39         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
000000000000ed3d         cmp        qword [rsp+0x88+var_80], rcx
000000000000ed42         je         loc_ed5c

                     loc_ed44:
000000000000ed44         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
000000000000ed47         call       j_free                                      ; free

                     loc_ed4c:
000000000000ed4c         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
000000000000ed50         cmp        qword [rsp+0x88+var_60], rdi
000000000000ed55         je         loc_ed5c

000000000000ed57         call       j_free                                      ; free

                     loc_ed5c:
000000000000ed5c         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
000000000000ed61         mov        dword [rax], 0xc
000000000000ed67         mov        eax, 0xffffffff
000000000000ed6c         jmp        loc_e2f2

                     loc_ed71:
000000000000ed71         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
000000000000ed74         call       j_malloc                                    ; malloc
000000000000ed79         mov        rdx, qword [rsp+0x88+var_80]
000000000000ed7e         mov        rcx, rax
000000000000ed81         mov        r9, qword [rsp+0x88+var_48]
000000000000ed86         mov        r10, qword [rsp+0x88+var_50]
000000000000ed8b         mov        r8, qword [rsp+0x88+var_58]
000000000000ed90         jmp        loc_e67c

                     loc_ed95:
000000000000ed95         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
000000000000ed9a         cmp        rsi, 0xffffffffffffffff
000000000000ed9e         lea        rax, qword [rsi+1]
000000000000eda2         mov        qword [r12+0x40], rsi
000000000000eda7         je         loc_ea9b

000000000000edad         mov        rbx, qword [rsp+0x88+var_68]
000000000000edb2         mov        qword [rsp+0x88+var_68], rax
000000000000edb7         jmp        loc_e73d

                     loc_edbc:
000000000000edbc         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_edbf:
000000000000edbf         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
000000000000edc3         movzx      ecx, byte [rdx]
000000000000edc6         lea        esi, dword [rcx-0x30]
000000000000edc9         cmp        sil, 0x9
000000000000edcd         jbe        loc_edbf

000000000000edcf         cmp        cl, 0x24
000000000000edd2         jne        loc_e72e

000000000000edd8         xor        ecx, ecx

                     loc_edda:
000000000000edda         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
000000000000ede4         sub        eax, 0x30
000000000000ede7         mov        rdx, r8
000000000000edea         cmp        rcx, rsi
000000000000eded         cdqe
000000000000edef         ja         loc_edf8

000000000000edf1         lea        rdx, qword [rcx+rcx*4]
000000000000edf5         add        rdx, rdx

                     loc_edf8:
000000000000edf8         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_edfb:
000000000000edfb         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
000000000000edfd         add        rdx, rax
000000000000ee00         movsx      eax, byte [r11+1]
000000000000ee05         setb       bl
000000000000ee08         add        r11, 0x1
000000000000ee0c         mov        rcx, rdx
000000000000ee0f         test       rbx, rbx
000000000000ee12         lea        edi, dword [rax-0x30]
000000000000ee15         je         loc_ee88

000000000000ee17         cmp        dil, 0x9
000000000000ee1b         ja         loc_ea9b

000000000000ee21         sub        eax, 0x30
000000000000ee24         mov        rdx, r8
000000000000ee27         mov        rsi, r11
000000000000ee2a         cdqe
000000000000ee2c         jmp        loc_edfb

                     loc_ee2e:
000000000000ee2e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
000000000000ee32         ja         loc_ea9b

000000000000ee38         movsx      eax, cl
000000000000ee3b         mov        rbp, rdx
000000000000ee3e         mov        rcx, r8
000000000000ee41         sub        eax, 0x30
000000000000ee44         cdqe
000000000000ee46         jmp        loc_e909

                     loc_ee4b:
000000000000ee4b         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
000000000000ee50         shl        rax, 0x5
000000000000ee54         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000ee57         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000ee5a         mov        qword [rsp+0x88+var_48], r9
000000000000ee5f         mov        qword [rsp+0x88+var_50], r10
000000000000ee64         mov        qword [rsp+0x88+var_58], r8
000000000000ee69         call       j_memcpy                                    ; memcpy
000000000000ee6e         mov        r9, qword [rsp+0x88+var_48]
000000000000ee73         mov        rcx, rax
000000000000ee76         mov        r10, qword [rsp+0x88+var_50]
000000000000ee7b         mov        rax, qword [r15]
000000000000ee7e         mov        r8, qword [rsp+0x88+var_58]
000000000000ee83         jmp        loc_e693

                     loc_ee88:
000000000000ee88         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
000000000000ee8c         jbe        loc_edda

000000000000ee92         lea        rbx, qword [rdx-1]
000000000000ee96         cmp        rbx, 0xfffffffffffffffd
000000000000ee9a         ja         loc_ea9b

000000000000eea0         mov        qword [r12+0x40], rbx
000000000000eea5         lea        r11, qword [rsi+2]
000000000000eea9         jmp        loc_e73d

                     loc_eeae:
000000000000eeae         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
000000000000eeb1         call       j_malloc                                    ; malloc
000000000000eeb6         mov        rdx, qword [rsp+0x88+var_80]
000000000000eebb         mov        rcx, rax
000000000000eebe         mov        r9, qword [rsp+0x88+var_40]
000000000000eec3         mov        r10, qword [rsp+0x88+var_48]
000000000000eec8         mov        r8, qword [rsp+0x88+var_50]
000000000000eecd         mov        r11, qword [rsp+0x88+var_58]
000000000000eed2         jmp        loc_ed19

                     loc_eed7:
000000000000eed7         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_eedb:
000000000000eedb         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
000000000000eee0         jne        loc_ed44

000000000000eee6         jmp        loc_ed4c
000000000000eeeb         align      16

                     loc_eef0:
000000000000eef0         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
000000000000eef5         shl        rax, 0x5
000000000000eef9         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000eefc         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000eeff         mov        qword [rsp+0x88+var_40], r9
000000000000ef04         mov        qword [rsp+0x88+var_48], r10
000000000000ef09         mov        qword [rsp+0x88+var_50], r8
000000000000ef0e         mov        qword [rsp+0x88+var_58], r11
000000000000ef13         call       j_memcpy                                    ; memcpy
000000000000ef18         mov        r9, qword [rsp+0x88+var_40]
000000000000ef1d         mov        rcx, rax
000000000000ef20         mov        r10, qword [rsp+0x88+var_48]
000000000000ef25         mov        rax, qword [r15]
000000000000ef28         mov        r8, qword [rsp+0x88+var_50]
000000000000ef2d         mov        r11, qword [rsp+0x88+var_58]
000000000000ef32         jmp        loc_ed30

                     loc_ef37:
000000000000ef37         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
000000000000ef3a         jmp        loc_eedb
000000000000ef3c         align      64                                          ; End of unwind block (FDE at 0x13004)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000ef40         push       r15                                         ; Begin of unwind block (FDE at 0x13054), DATA XREF=_start+22
000000000000ef42         push       r14
000000000000ef44         mov        r15, rdx
000000000000ef47         push       r13
000000000000ef49         push       r12
000000000000ef4b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000ef52         push       rbp
000000000000ef53         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000ef5a         push       rbx
000000000000ef5b         mov        r13d, edi
000000000000ef5e         mov        r14, rsi
000000000000ef61         sub        rbp, r12
000000000000ef64         sub        rsp, 0x8
000000000000ef68         sar        rbp, 0x3
000000000000ef6c         call       _init                                       ; _init
000000000000ef71         test       rbp, rbp
000000000000ef74         je         loc_ef96

000000000000ef76         xor        ebx, ebx
000000000000ef78         nop        dword [rax+rax]

                     loc_ef80:
000000000000ef80         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000ef83         mov        rsi, r14
000000000000ef86         mov        edi, r13d
000000000000ef89         call       qword [r12+rbx*8]
000000000000ef8d         add        rbx, 0x1
000000000000ef91         cmp        rbp, rbx
000000000000ef94         jne        loc_ef80

                     loc_ef96:
000000000000ef96         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000ef9a         pop        rbx
000000000000ef9b         pop        rbp
000000000000ef9c         pop        r12
000000000000ef9e         pop        r13
000000000000efa0         pop        r14
000000000000efa2         pop        r15
000000000000efa4         ret
                        ; endp
000000000000efa5         align      16                                          ; End of unwind block (FDE at 0x13054)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000efb0         ret                                                    ; Begin of unwind block (FDE at 0x1309c), DATA XREF=_start+15
                        ; endp
000000000000efb2         align      64                                          ; End of unwind block (FDE at 0x1309c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000efc0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x130b4), __dso_handle, CODE XREF=main+123
000000000000efc7         xor        esi, esi
000000000000efc9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000efce         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x130b4)
000000000000efcf         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xefd0; 0xefd9[ (9 bytes)
        ; File offset : [61392; 61401[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000efd0         sub        rsp, 0x8
000000000000efd4         add        rsp, 0x8
000000000000efd8         ret
                        ; endp
000000000000efd9         db  0x00 ; '.'
000000000000efda         db  0x00 ; '.'
000000000000efdb         db  0x00 ; '.'
000000000000efdc         db  0x00 ; '.'
000000000000efdd         db  0x00 ; '.'
000000000000efde         db  0x00 ; '.'
000000000000efdf         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xefe0; 0x10ebc[ (7900 bytes)
        ; File offset : [61408; 69308[ (7900 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000efe0         db  0x01 ; '.'
000000000000efe1         db  0x00 ; '.'
000000000000efe2         db  0x02 ; '.'
000000000000efe3         db  0x00 ; '.'
                     aBlocks:
000000000000efe4         db         "blocks", 0                                 ; DATA XREF=get_header+533
                     aSs:
000000000000efeb         db         "%s-%s", 0                                  ; DATA XREF=get_header+318
                     aCoreutils831sr:
000000000000eff1         db         "../coreutils-8.31/src/df.c", 0             ; DATA XREF=main+5483, alloc_field+165, sub_4a7e+586, sub_4a7e+665, sub_4a7e+696, decode_output_arg+339
                     aFieldUsed:
000000000000f00c         db         "!\"field used\"", 0                        ; DATA XREF=alloc_field+172
                     a0123456789abcd:
000000000000f01a         db         "-0123456789abcdefABCDEF", 0                ; DATA XREF=get_dev+492
                     aBadFieldtype:
000000000000f032         db         "!\"bad field_type\"", 0                    ; DATA XREF=sub_4a7e+703
                     a0f:
000000000000f044         db         "%.0f%%", 0                                 ; DATA XREF=sub_48a0+295
                     aUnhandledField:
000000000000f04b         db         "!\"unhandled field\"", 0                   ; DATA XREF=sub_4a7e+672
                     aEmptyCell:
000000000000f05e         db         "!\"empty cell\"", 0                        ; DATA XREF=sub_4a7e+593
000000000000f06c         db  0x64 ; 'd'                                         ; DATA XREF=main+1020, usage+568, usage+884, usage+1068, usage+1087, usage+1121
000000000000f06d         db  0x66 ; 'f'
000000000000f06e         db  0x00 ; '.'
000000000000f06f         db  0x44 ; 'D'                                         ; DATA XREF=usage+477
000000000000f070         db  0x46 ; 'F'
000000000000f071         db  0x00 ; '.'
000000000000f072         db  0x5b ; '['                                         ; DATA XREF=usage+580
000000000000f073         db  0x00 ; '.'
                     aTestInvocation:
000000000000f074         db         "test invocation", 0                        ; DATA XREF=usage+619
                     aMulticallInvoc:
000000000000f084         db         "Multi-call invocation", 0                  ; DATA XREF=usage+667
                     aSha224sum:
000000000000f09a         db         "sha224sum", 0                              ; DATA XREF=usage+684
                     aSha2Utilities:
000000000000f0a4         db         "sha2 utilities", 0                         ; DATA XREF=usage+696
                     aSha256sum:
000000000000f0b3         db         "sha256sum", 0                              ; DATA XREF=usage+587
                     aSha384sum:
000000000000f0bd         db         "sha384sum", 0                              ; DATA XREF=usage+631
                     aSha512sum:
000000000000f0c7         db         "sha512sum", 0                              ; DATA XREF=usage+655
                     aNsOnlineHelpSn:
000000000000f0d1         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+770
000000000000f0e8         db  0x47 ; 'G'                                         ; DATA XREF=main+1013, usage+798, usage+991, emit_bug_reporting_address+68
000000000000f0e9         db  0x4e ; 'N'
000000000000f0ea         db  0x55 ; 'U'
000000000000f0eb         db  0x20 ; ' '
                     aCoreutils:
000000000000f0ec         db         "coreutils", 0                              ; DATA XREF=main+92, main+104, usage+643
000000000000f0f6         db  0x65 ; 'e'                                         ; DATA XREF=usage+837, usage+1030
000000000000f0f7         db  0x6e ; 'n'
000000000000f0f8         db  0x5f ; '_'
000000000000f0f9         db  0x00 ; '.'
                     aFullDocumentat:
000000000000f0fa         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+865, usage+1054
000000000000f115         db  0x53 ; 'S'                                         ; DATA XREF=main+2701, decode_output_arg+219
000000000000f116         db  0x69 ; 'i'
000000000000f117         db  0x7a ; 'z'
000000000000f118         db  0x65 ; 'e'
000000000000f119         db  0x00 ; '.'
                     aAvail:
000000000000f11a         db         "Avail", 0                                  ; DATA XREF=main+2730, decode_output_arg+288
                     aInvalidField:
000000000000f120         db         "!\"invalid field\"", 0                     ; DATA XREF=decode_output_arg+346
                     aUsrlocalsharel:
000000000000f131         db         "/usr/local/share/locale", 0                ; DATA XREF=main+85
                     aAbifhhklmpttvx:
000000000000f149         db         "aB:iF:hHklmPTt:vx:", 0                     ; DATA XREF=main+244
                     aOutput:
000000000000f15c         db         "--output", 0                               ; DATA XREF=main+5423, main+5517, main+5550, main+5566
000000000000f165         db  0x2d ; '-'                                         ; DATA XREF=main+5573
000000000000f166         db  0x69 ; 'i'
000000000000f167         db  0x00 ; '.'
000000000000f168         db  0x2d ; '-'                                         ; DATA XREF=main+5557
000000000000f169         db  0x54 ; 'T'
000000000000f16a         db  0x00 ; '.'
000000000000f16b         db  0x2d ; '-'                                         ; DATA XREF=main+5430, main+5524
000000000000f16c         db  0x50 ; 'P'
000000000000f16d         db  0x00 ; '.'
                     aDavidMackenzie:
000000000000f16e         db         "David MacKenzie", 0                        ; DATA XREF=main+998
                     aTorbjornGranlu:
000000000000f17e         db         "Torbjorn Granlund", 0                      ; DATA XREF=main+1005
                     aPaulEggert:
000000000000f190         db         "Paul Eggert", 0                            ; DATA XREF=main+975
                     aPosixlycorrect:
000000000000f19c         db         "POSIXLY_CORRECT", 0                        ; DATA XREF=main+1645, human_options+269, human_options+368
                     aDfblocksize:
000000000000f1ac         db         "DF_BLOCK_SIZE", 0                          ; DATA XREF=main+1818
                     aWarning:
000000000000f1ba         db         "Warning: ", 0                              ; DATA XREF=main+5394
000000000000f1c4         db  0x25 ; '%'                                         ; DATA XREF=main+4999
000000000000f1c5         db  0x73 ; 's'
000000000000f1c6         db  0x25 ; '%'
000000000000f1c7         db  0x73 ; 's'
000000000000f1c8         db  0x00 ; '.'
                     aCapacity:
000000000000f1c9         db         "Capacity", 0                               ; DATA XREF=main+1923
                     aInvalidHeaderm:
000000000000f1d2         db         "!\"invalid header_mode\"", 0               ; DATA XREF=main+5490
000000000000f1e9         db  0x6c ; 'l'                                         ; DATA XREF=main+2586, main+3905
000000000000f1ea         db  0x6f ; 'o'
000000000000f1eb         db  0x66 ; 'f'
000000000000f1ec         db  0x73 ; 's'
000000000000f1ed         db  0x00 ; '.'
                     aNoFileSystemsP:
000000000000f1ee         db         "no file systems processed", 0              ; DATA XREF=main+3721
000000000000f208         db  0x61 ; 'a'
000000000000f209         db  0x6c ; 'l'
000000000000f20a         db  0x6c ; 'l'
000000000000f20b         db  0x00 ; '.'
000000000000f20c         db  0x62 ; 'b'
000000000000f20d         db  0x6c ; 'l'
000000000000f20e         db  0x6f ; 'o'
000000000000f20f         db  0x63 ; 'c'
000000000000f210         db  0x6b ; 'k'
000000000000f211         db  0x2d ; '-'
                     aSize:
000000000000f212         db         "size", 0
                     aInodes_f217:        // aInodes
000000000000f217         db         "inodes", 0
                     aHumanreadable:
000000000000f21e         db         "human-readable", 0
000000000000f22d         db  0x73 ; 's'
000000000000f22e         db  0x69 ; 'i'
000000000000f22f         db  0x00 ; '.'
                     aLocal:
000000000000f230         db         "local", 0
                     aPortability:
000000000000f236         db         "portability", 0
                     aPrinttype:
000000000000f242         db         "print-type", 0
000000000000f24d         db  0x6e ; 'n'
000000000000f24e         db  0x6f ; 'o'
000000000000f24f         db  0x2d ; '-'
                     aSync:
000000000000f250         db         "sync", 0
000000000000f255         db  0x65 ; 'e'
000000000000f256         db  0x78 ; 'x'
000000000000f257         db  0x63 ; 'c'
000000000000f258         db  0x6c ; 'l'
000000000000f259         db  0x75 ; 'u'
000000000000f25a         db  0x64 ; 'd'
000000000000f25b         db  0x65 ; 'e'
000000000000f25c         db  0x2d ; '-'
                     aType_f25d:        // aType
000000000000f25d         db         "type", 0
                     aHelp:
000000000000f262         db         "help", 0
                     aVersion:
000000000000f267         db         "version", 0
                     aSource:
000000000000f26f         db         "source", 0
                     aFilesystem:
000000000000f276         db         "Filesystem", 0
                     aFstype:
000000000000f281         db         "fstype", 0
                     aType:
000000000000f288         db         "Type", 0
                     aAvailable:
000000000000f28d         db         "Available", 0
000000000000f297         db  0x69 ; 'i'
                     aTotal:
000000000000f298         db         "total", 0                                  ; DATA XREF=main+3065
                     aInodes:
000000000000f29e         db         "Inodes", 0
000000000000f2a5         db  0x69 ; 'i'
                     aUsed_f2a6:        // aUsed
000000000000f2a6         db         "used", 0
000000000000f2ab         db  0x49 ; 'I'
                     aUsed:
000000000000f2ac         db         "Used", 0
000000000000f2b1         db  0x69 ; 'i'
                     aAvail_f2b2:        // aAvail
000000000000f2b2         db         "avail", 0
                     aIfree:
000000000000f2b8         db         "IFree", 0
000000000000f2be         db  0x69 ; 'i'
                     aPcent:
000000000000f2bf         db         "pcent", 0
000000000000f2c5         db  0x49 ; 'I'
                     aUse:
000000000000f2c6         db         "Use%", 0
                     aTarget:
000000000000f2cb         db         "target", 0
                     aMountedOn:
000000000000f2d2         db         "Mounted on", 0
                     aFile_f2dd:        // aFile
000000000000f2dd         db         "file", 0
                     aFile:
000000000000f2e2         db         "File", 0
000000000000f2e7         db  0x00 ; '.'
000000000000f2e8         db  0x00 ; '.'
000000000000f2e9         db  0x00 ; '.'
000000000000f2ea         db  0x00 ; '.'
000000000000f2eb         db  0x00 ; '.'
000000000000f2ec         db  0x00 ; '.'
000000000000f2ed         db  0x00 ; '.'
000000000000f2ee         db  0x00 ; '.'
000000000000f2ef         db  0x00 ; '.'
000000000000f2f0         db  0x90 ; '.'                                         ; DATA XREF=get_dev+919
000000000000f2f1         db  0x55 ; 'U'
000000000000f2f2         db  0xff ; '.'
000000000000f2f3         db  0xff ; '.'
000000000000f2f4         db  0x78 ; 'x'
000000000000f2f5         db  0x55 ; 'U'
000000000000f2f6         db  0xff ; '.'
000000000000f2f7         db  0xff ; '.'
000000000000f2f8         db  0x40 ; '@'
000000000000f2f9         db  0x55 ; 'U'
000000000000f2fa         db  0xff ; '.'
000000000000f2fb         db  0xff ; '.'
000000000000f2fc         db  0x28 ; '('
000000000000f2fd         db  0x55 ; 'U'
000000000000f2fe         db  0xff ; '.'
000000000000f2ff         db  0xff ; '.'
000000000000f300         db  0xf0 ; '.'
000000000000f301         db  0x54 ; 'T'
000000000000f302         db  0xff ; '.'
000000000000f303         db  0xff ; '.'
000000000000f304         db  0xc0 ; '.'
000000000000f305         db  0x54 ; 'T'
000000000000f306         db  0xff ; '.'
000000000000f307         db  0xff ; '.'
000000000000f308         db  0x40 ; '@'
000000000000f309         db  0x55 ; 'U'
000000000000f30a         db  0xff ; '.'
000000000000f30b         db  0xff ; '.'
000000000000f30c         db  0x28 ; '('
000000000000f30d         db  0x55 ; 'U'
000000000000f30e         db  0xff ; '.'
000000000000f30f         db  0xff ; '.'
000000000000f310         db  0xf0 ; '.'
000000000000f311         db  0x54 ; 'T'
000000000000f312         db  0xff ; '.'
000000000000f313         db  0xff ; '.'
000000000000f314         db  0xc0 ; '.'
000000000000f315         db  0x54 ; 'T'
000000000000f316         db  0xff ; '.'
000000000000f317         db  0xff ; '.'
000000000000f318         db  0x40 ; '@'
000000000000f319         db  0x54 ; 'T'
000000000000f31a         db  0xff ; '.'
000000000000f31b         db  0xff ; '.'
000000000000f31c         db  0xb0 ; '.'
000000000000f31d         db  0x55 ; 'U'
000000000000f31e         db  0xff ; '.'
000000000000f31f         db  0xff ; '.'
                     switch_table_f320:        // switch_table
000000000000f320         dd         main.loc_30e1-switch_table_f320, main.loc_3082-switch_table_f320, main.loc_302f-switch_table_f320, main.loc_2d01-switch_table_f320 ; switch table used at 0x2cc0 containing 5 entries, DATA XREF=main+1778
000000000000f330         dd         main.loc_311e-switch_table_f320
000000000000f334         align      8
                     __PRETTY_FUNCTION__.9006:
000000000000f338         db         "get_dev", 0                                ; DATA XREF=sub_4a7e+579, sub_4a7e+658, sub_4a7e+689
                     __PRETTY_FUNCTION__.8870:
000000000000f340         db         "get_field_list", 0                         ; DATA XREF=main+5476
000000000000f34f         align      16
                     __PRETTY_FUNCTION__.8831:
000000000000f350         db         "alloc_field", 0                            ; DATA XREF=alloc_field+158
000000000000f35c         align      32
                     __PRETTY_FUNCTION__.8857:
000000000000f360         db         "decode_output_arg", 0                      ; DATA XREF=decode_output_arg+332
000000000000f372         align      8
                     aTrySHelpForMor:
000000000000f378         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000f39f         align      32
                     aUsageSOptionFi:
000000000000f3a0         db         "Usage: %s [OPTION]... [FILE]...\n", 0      ; DATA XREF=usage+93
000000000000f3c1         align      8
                     aShowInformatio:
000000000000f3c8         db         "Show information about the file system on which each FILE resides,\nor all file systems by default.\n", 0 ; DATA XREF=usage+132
000000000000f42c         align      16
                     aNmandatoryArgu:
000000000000f430         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+169
000000000000f47b         align      128
                     aAAllIncludePse:
000000000000f480         db         "  -a, --all             include pseudo, duplicate, inaccessible file systems\n  -B, --block-size=SIZE  scale sizes by SIZE before printing them; e.g.,\n                           '-BM' prints sizes in units of 1,048,576 bytes;\n                           see " ; DATA XREF=usage+206
000000000000f580         db         "SIZE format below\n  -h, --human-readable  print sizes in powers of 1024 (e.g., 1023M)\n  -H, --si              print sizes in powers of 1000 (e.g., 1.1G)\n", 0
000000000000f61a         align      32
                     aIInodesListIno:
000000000000f620         db         "  -i, --inodes          list inode information instead of block usage\n  -k                    like --block-size=1K\n  -l, --local           limit listing to local file systems\n      --no-sync         do not invoke sync before getting usage info (default)\n", 0 ; DATA XREF=usage+243
000000000000f71f         align      32
                     aOutputfieldlis:
000000000000f720         db         "      --output[=FIELD_LIST]  use the output format defined by FIELD_LIST,\n                               or print all fields if FIELD_LIST is omitted.\n  -P, --portability     use the POSIX output format\n      --sync            invoke sync before getting us" ; DATA XREF=usage+280
000000000000f820         db         "age info\n", 0
000000000000f82a         align      16
                     aTotalElideAllE:
000000000000f830         db         "      --total           elide all entries insignificant to available space,\n                          and produce a grand total\n", 0 ; DATA XREF=usage+317
000000000000f8b1         align      8
                     aTTypetypeLimit:
000000000000f8b8         db         "  -t, --type=TYPE       limit listing to file systems of type TYPE\n  -T, --print-type      print file system type\n  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE\n  -v                    (ignored)\n", 0 ; DATA XREF=usage+354
                     aHelpDisplayThi:
000000000000f998         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+391
000000000000f9c5         align      8
                     aVersionOutputV:
000000000000f9c8         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+428
000000000000f9fe         align      512
                     aNdisplayValues:
000000000000fa00         db         "\nDisplay values are in units of the first available SIZE from --block-size,\nand the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\nOtherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\n", 0 ; DATA XREF=usage+458
000000000000fadf         align      32
                     aNtheSizeArgume:
000000000000fae0         db         "\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\n", 0 ; DATA XREF=usage+506
000000000000fbb4         align      8
                     aNfieldlistIsAC:
000000000000fbb8         db         "\nFIELD_LIST is a comma-separated list of columns to be included.  Valid\nfield names are: 'source', 'fstype', 'itotal', 'iused', 'iavail', 'ipcent',\n'size', 'used', 'avail', 'pcent', 'file' and 'target' (see info page).\n", 0 ; DATA XREF=usage+543
000000000000fc94         align      8
                     aHttpswwwgnuorg:
000000000000fc98         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+791, usage+891, usage+984, usage+1094, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000fcc0         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1135
000000000000fd07         align      8
                     aOrAvailableLoc:
000000000000fd08         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+934
000000000000fd3b         align      64
                     aOptionOutputFi_fd40:        // aOptionOutputFi
000000000000fd40         db         "option --output: field %s used more than once", 0 ; DATA XREF=decode_output_arg+320
000000000000fd6e         align      16
                     aOptionOutputFi:
000000000000fd70         db         "option --output: field %s unknown", 0      ; DATA XREF=decode_output_arg+118
000000000000fd92         align      8
                     aOptionsSAndSAr:
000000000000fd98         db         "options %s and %s are mutually exclusive", 0 ; DATA XREF=main+128
000000000000fdc1         align      8
                     aFileSystemType:
000000000000fdc8         db         "file system type %s both selected and excluded", 0 ; DATA XREF=main+1246
000000000000fdf7         align      8
                     aCannotReadTabl:
000000000000fdf8         db         "cannot read table of mounted file systems", 0 ; DATA XREF=main+4970
000000000000fe22         align      8
                     aSourcefstypeit:
000000000000fe28         db         "source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target", 0 ; DATA XREF=main+2924
000000000000fe73         align      8
                     aCannotAccessSO:
000000000000fe78         db         "cannot access %s: over-mounted by another device", 0 ; DATA XREF=main+5125
000000000000fea9         db  0x00 ; '.'
000000000000feaa         db  0x00 ; '.'
000000000000feab         db  0x00 ; '.'
000000000000feac         db  0x00 ; '.'
000000000000fead         db  0x00 ; '.'
000000000000feae         db  0x00 ; '.'
000000000000feaf         db  0x00 ; '.'
000000000000feb0         dq         -0.0, 0.0                                   ; DATA XREF=sub_48a0+168, sub_48a0+389
                     double_fec0:        // double
000000000000fec0         dq         100.0                                       ; DATA XREF=sub_48a0+200, hash_print_statistics+165, hash_print_statistics+287
                     double_fec8:        // double
000000000000fec8         dq         1.0                                         ; DATA XREF=sub_48a0+208
                     aCannotGetCurre:
000000000000fed0         db         "cannot get current directory", 0           ; DATA XREF=find_mount_point+869
                     aCannotChangeTo:
000000000000feed         db         "cannot change to directory %s", 0          ; DATA XREF=find_mount_point+715, find_mount_point+857
000000000000ff0b         db  0x2e ; '.'                                         ; DATA XREF=find_mount_point+212, find_mount_point+427, find_mount_point+832
000000000000ff0c         db  0x2e ; '.'                                         ; DATA XREF=find_mount_point+180, human_readable+132, save_cwd+12
000000000000ff0d         db  0x00 ; '.'
                     aCannotStatS:
000000000000ff0e         db         "cannot stat %s", 0                         ; DATA XREF=find_mount_point+444
000000000000ff1d         align      32
                     aCannotStatCurr:
000000000000ff20         db         "cannot stat current directory (now %s)", 0 ; DATA XREF=find_mount_point+781
000000000000ff47         align      8
                     aFailedToReturn:
000000000000ff48         db         "failed to return to initial working directory", 0 ; DATA XREF=find_mount_point+910
                     a831:
000000000000ff76         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
000000000000ff7b         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
000000000000ff87         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
                     aEntriesLun:
000000000000ff8e         db         "# entries:         %lu\n", 0               ; DATA XREF=hash_print_statistics+101
                     aBucketsLun:
000000000000ffa6         db         "# buckets:         %lu\n", 0               ; DATA XREF=hash_print_statistics+123
                     aMaxBucketLengt:
000000000000ffbe         db         "max bucket length: %lu\n", 0               ; DATA XREF=hash_print_statistics+232
000000000000ffd6         align      8
                     aBucketsUsedLu2:
000000000000ffd8         db         "# buckets used:    %lu (%.2f%%)\n", 0      ; DATA XREF=hash_print_statistics+188
000000000000fff9         db  0x00 ; '.'
000000000000fffa         db  0x00 ; '.'
000000000000fffb         db  0x00 ; '.'
000000000000fffc         db  0x00 ; '.'
000000000000fffd         db  0x00 ; '.'                                         ; DATA XREF=mbsalign+619, mbsalign+763
000000000000fffe         db  0x00 ; '.'
000000000000ffff         db  0x00 ; '.'
                     default_tuning:
0000000000010000         db  0x00 ; '.'                                         ; DATA XREF=check_tuning.isra.0+3, hash_initialize+272
0000000000010001         db  0x00 ; '.'
0000000000010002         db  0x00 ; '.'
0000000000010003         db  0x00 ; '.'
0000000000010004         db  0x00 ; '.'
0000000000010005         db  0x00 ; '.'
0000000000010006         db  0x80 ; '.'
0000000000010007         db  0x3f ; '?'
0000000000010008         db  0xcd ; '.'
0000000000010009         db  0xcc ; '.'
000000000001000a         db  0x4c ; 'L'
000000000001000b         db  0x3f ; '?'
000000000001000c         db  0xf4 ; '.'
000000000001000d         db  0xfd ; '.'
000000000001000e         db  0xb4 ; '.'
000000000001000f         db  0x3f ; '?'
0000000000010010         db  0x00 ; '.'
0000000000010011         db  0x00 ; '.'
0000000000010012         db  0x00 ; '.'
0000000000010013         db  0x00 ; '.'
                     float_10014:        // float
0000000000010014         dd         0.1f                                        ; DATA XREF=check_tuning.isra.0+25, check_tuning.isra.0+74
                     float_10018:        // float
0000000000010018         dd         0.9f                                        ; DATA XREF=check_tuning.isra.0+34
                     float_1001c:        // float
000000000001001c         dd         1.1f                                        ; DATA XREF=check_tuning.isra.0+52
                     float_10020:        // float
0000000000010020         dd         0.0f                                        ; DATA XREF=check_tuning.isra.0+65
                     float_10024:        // float
0000000000010024         dd         1.0f                                        ; DATA XREF=check_tuning.isra.0+92
                     float_10028:        // float
0000000000010028         dd         0.8f                                        ; DATA XREF=hash_initialize+290
                     dword_1002c:
000000000001002c         dd         0x5f800000                                  ; DATA XREF=hash_initialize+318, hash_rehash+64, hash_insert_if_absent+413, adjust_value.part.0+66, adjust_value.part.0+192, human_readable+243, human_readable+268, human_readable+290
                     float_10030:        // float
0000000000010030         dd         9.22337e+18f                                ; DATA XREF=hash_initialize+327, hash_initialize+336, hash_rehash+77, hash_rehash+90, hash_insert_if_absent+422, hash_insert_if_absent+608, hash_delete+250, hash_delete+400, adjust_value.part.0
                     a0lf:
0000000000010034         db         "%.0Lf", 0                                  ; DATA XREF=human_readable+784, human_readable+1865
                     a1lf:
000000000001003a         db         "%.1Lf", 0                                  ; DATA XREF=human_readable+417, human_readable+1780
                     aBlocksize:
0000000000010040         db         "BLOCKSIZE", 0                              ; DATA XREF=human_options+344
                     aEeggkkmmppttyy:
000000000001004a         db         "eEgGkKmMpPtTyYzZ0", 0                      ; DATA XREF=human_options+152
000000000001005c         db  0x00 ; '.'
000000000001005d         db  0x00 ; '.'
000000000001005e         db  0x00 ; '.'
000000000001005f         db  0x00 ; '.'
                     block_size_opts:
0000000000010060         db  0xb0 ; '.'                                         ; DATA XREF=human_options+60, human_options+91
0000000000010061         db  0x00 ; '.'
0000000000010062         db  0x00 ; '.'
0000000000010063         db  0x00 ; '.'
0000000000010064         db  0x90 ; '.'
0000000000010065         db  0x00 ; '.'
0000000000010066         db  0x00 ; '.'
0000000000010067         db  0x00 ; '.'
                     power_letter:
0000000000010068         db  0x00 ; '.'                                         ; DATA XREF=human_readable+972
0000000000010069         db  0x4b ; 'K'
000000000001006a         db  0x4d ; 'M'
000000000001006b         db  0x47 ; 'G'
000000000001006c         db  0x54 ; 'T'
000000000001006d         db  0x50 ; 'P'
000000000001006e         db  0x45 ; 'E'
000000000001006f         db  0x5a ; 'Z'
0000000000010070         db  0x59 ; 'Y'
0000000000010071         db  0x00 ; '.'
0000000000010072         db  0x00 ; '.'
0000000000010073         db  0x00 ; '.'
                     dword_10074:
0000000000010074         dd         0x41200000                                  ; DATA XREF=human_readable+508, human_readable+1851, human_readable+1928
0000000000010078         db  0x00 ; '.'
0000000000010079         db  0x00 ; '.'
000000000001007a         db  0x00 ; '.'
000000000001007b         db  0x00 ; '.'
000000000001007c         db  0x00 ; '.'
000000000001007d         db  0x00 ; '.'
000000000001007e         db  0x00 ; '.'
000000000001007f         db  0x00 ; '.'
0000000000010080         db  0xff ; '.'                                         ; DATA XREF=human_readable+393, human_readable+766, human_readable+1936
0000000000010081         db  0xff ; '.'
0000000000010082         db  0xff ; '.'
0000000000010083         db  0xff ; '.'
0000000000010084         db  0xff ; '.'
0000000000010085         db  0xff ; '.'
0000000000010086         db  0xff ; '.'
0000000000010087         db  0xff ; '.'
0000000000010088         db  0x3e ; '>'
0000000000010089         db  0x40 ; '@'
000000000001008a         db  0x00 ; '.'
000000000001008b         db  0x00 ; '.'
000000000001008c         db  0x00 ; '.'
000000000001008d         db  0x00 ; '.'
000000000001008e         db  0x00 ; '.'
000000000001008f         db  0x00 ; '.'
                     aANullArgv0WasP:
0000000000010090         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
00000000000100c8         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
00000000000100d0         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
00000000000100d1         db  0x74 ; 't'
00000000000100d2         db  0x2d ; '-'
00000000000100d3         db  0x00 ; '.'
00000000000100d4         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
00000000000100d5         db  0x80 ; '.'
00000000000100d6         db  0x98 ; '.'
00000000000100d7         db  0x00 ; '.'
00000000000100d8         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
00000000000100d9         db  0x80 ; '.'
00000000000100da         db  0x99 ; '.'
00000000000100db         db  0x00 ; '.'
00000000000100dc         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
00000000000100dd         db  0x07 ; '.'
00000000000100de         db  0x65 ; 'e'
00000000000100df         db  0x00 ; '.'
00000000000100e0         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
00000000000100e1         db  0xaf ; '.'
00000000000100e2         db  0x00 ; '.'
00000000000100e3         db  0x60 ; '`'                                         ; DATA XREF=sub_90d0+1627, sub_90d0+1654
00000000000100e4         db  0x00 ; '.'
                     aLiteral:
00000000000100e5         db         "literal", 0
                     aShell:
00000000000100ed         db         "shell", 0
                     aShellalways:
00000000000100f3         db         "shell-always", 0
0000000000010100         db  0x73 ; 's'
0000000000010101         db  0x68 ; 'h'
0000000000010102         db  0x65 ; 'e'
0000000000010103         db  0x6c ; 'l'
0000000000010104         db  0x6c ; 'l'
0000000000010105         db  0x2d ; '-'
                     aEscape:
0000000000010106         db         "escape", 0
                     aShellescapealw:
000000000001010d         db         "shell-escape-always", 0
                     aCmaybe:
0000000000010121         db         "c-maybe", 0
                     aClocale:
0000000000010129         db         "clocale", 0
0000000000010131         align      64
                     switch_table_10140:        // switch_table
0000000000010140         dd         quotearg_buffer_restyled.loc_97ca-switch_table_10140, quotearg_buffer_restyled.loc_8a23-switch_table_10140, quotearg_buffer_restyled.loc_99f8-switch_table_10140, quotearg_buffer_restyled.loc_9804-switch_table_10140 ; switch table used at 0x8a21 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000010150         dd         quotearg_buffer_restyled.loc_95f4-switch_table_10140, quotearg_buffer_restyled.loc_9650-switch_table_10140, quotearg_buffer_restyled.loc_96a5-switch_table_10140, quotearg_buffer_restyled.loc_96ea-switch_table_10140
0000000000010160         dd         3 dup (quotearg_buffer_restyled.loc_9724-switch_table_10140)
000000000001016c         db  0x34 ; '4'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000001016d         db  0x8c ; '.'
000000000001016e         db  0xff ; '.'
000000000001016f         db  0xff ; '.'
0000000000010170         db  0x1c ; '.'
0000000000010171         db  0x8d ; '.'
0000000000010172         db  0xff ; '.'
0000000000010173         db  0xff ; '.'
0000000000010174         db  0x1c ; '.'
0000000000010175         db  0x8d ; '.'
0000000000010176         db  0xff ; '.'
0000000000010177         db  0xff ; '.'
0000000000010178         db  0x1c ; '.'
0000000000010179         db  0x8d ; '.'
000000000001017a         db  0xff ; '.'
000000000001017b         db  0xff ; '.'
000000000001017c         db  0x1c ; '.'
000000000001017d         db  0x8d ; '.'
000000000001017e         db  0xff ; '.'
000000000001017f         db  0xff ; '.'
0000000000010180         db  0x1c ; '.'
0000000000010181         db  0x8d ; '.'
0000000000010182         db  0xff ; '.'
0000000000010183         db  0xff ; '.'
0000000000010184         db  0x1c ; '.'
0000000000010185         db  0x8d ; '.'
0000000000010186         db  0xff ; '.'
0000000000010187         db  0xff ; '.'
0000000000010188         db  0x74 ; 't'
0000000000010189         db  0x8c ; '.'
000000000001018a         db  0xff ; '.'
000000000001018b         db  0xff ; '.'
000000000001018c         db  0x7c ; '|'
000000000001018d         db  0x8b ; '.'
000000000001018e         db  0xff ; '.'
000000000001018f         db  0xff ; '.'
0000000000010190         db  0x3c ; '<'
0000000000010191         db  0x8b ; '.'
0000000000010192         db  0xff ; '.'
0000000000010193         db  0xff ; '.'
0000000000010194         db  0x04 ; '.'
0000000000010195         db  0x8d ; '.'
0000000000010196         db  0xff ; '.'
0000000000010197         db  0xff ; '.'
0000000000010198         db  0xf4 ; '.'
0000000000010199         db  0x8c ; '.'
000000000001019a         db  0xff ; '.'
000000000001019b         db  0xff ; '.'
000000000001019c         db  0xe4 ; '.'
000000000001019d         db  0x8c ; '.'
000000000001019e         db  0xff ; '.'
000000000001019f         db  0xff ; '.'
00000000000101a0         db  0xd4 ; '.'
00000000000101a1         db  0x8c ; '.'
00000000000101a2         db  0xff ; '.'
00000000000101a3         db  0xff ; '.'
00000000000101a4         db  0x1c ; '.'
00000000000101a5         db  0x8d ; '.'
00000000000101a6         db  0xff ; '.'
00000000000101a7         db  0xff ; '.'
00000000000101a8         db  0x1c ; '.'
00000000000101a9         db  0x8d ; '.'
00000000000101aa         db  0xff ; '.'
00000000000101ab         db  0xff ; '.'
00000000000101ac         db  0x1c ; '.'
00000000000101ad         db  0x8d ; '.'
00000000000101ae         db  0xff ; '.'
00000000000101af         db  0xff ; '.'
00000000000101b0         db  0x1c ; '.'
00000000000101b1         db  0x8d ; '.'
00000000000101b2         db  0xff ; '.'
00000000000101b3         db  0xff ; '.'
00000000000101b4         db  0x1c ; '.'
00000000000101b5         db  0x8d ; '.'
00000000000101b6         db  0xff ; '.'
00000000000101b7         db  0xff ; '.'
00000000000101b8         db  0x1c ; '.'
00000000000101b9         db  0x8d ; '.'
00000000000101ba         db  0xff ; '.'
00000000000101bb         db  0xff ; '.'
00000000000101bc         db  0x1c ; '.'
00000000000101bd         db  0x8d ; '.'
00000000000101be         db  0xff ; '.'
00000000000101bf         db  0xff ; '.'
00000000000101c0         db  0x1c ; '.'
00000000000101c1         db  0x8d ; '.'
00000000000101c2         db  0xff ; '.'
00000000000101c3         db  0xff ; '.'
00000000000101c4         db  0x1c ; '.'
00000000000101c5         db  0x8d ; '.'
00000000000101c6         db  0xff ; '.'
00000000000101c7         db  0xff ; '.'
00000000000101c8         db  0x1c ; '.'
00000000000101c9         db  0x8d ; '.'
00000000000101ca         db  0xff ; '.'
00000000000101cb         db  0xff ; '.'
00000000000101cc         db  0x1c ; '.'
00000000000101cd         db  0x8d ; '.'
00000000000101ce         db  0xff ; '.'
00000000000101cf         db  0xff ; '.'
00000000000101d0         db  0x1c ; '.'
00000000000101d1         db  0x8d ; '.'
00000000000101d2         db  0xff ; '.'
00000000000101d3         db  0xff ; '.'
00000000000101d4         db  0x1c ; '.'
00000000000101d5         db  0x8d ; '.'
00000000000101d6         db  0xff ; '.'
00000000000101d7         db  0xff ; '.'
00000000000101d8         db  0x1c ; '.'
00000000000101d9         db  0x8d ; '.'
00000000000101da         db  0xff ; '.'
00000000000101db         db  0xff ; '.'
00000000000101dc         db  0x1c ; '.'
00000000000101dd         db  0x8d ; '.'
00000000000101de         db  0xff ; '.'
00000000000101df         db  0xff ; '.'
00000000000101e0         db  0x1c ; '.'
00000000000101e1         db  0x8d ; '.'
00000000000101e2         db  0xff ; '.'
00000000000101e3         db  0xff ; '.'
00000000000101e4         db  0x1c ; '.'
00000000000101e5         db  0x8d ; '.'
00000000000101e6         db  0xff ; '.'
00000000000101e7         db  0xff ; '.'
00000000000101e8         db  0x1c ; '.'
00000000000101e9         db  0x8d ; '.'
00000000000101ea         db  0xff ; '.'
00000000000101eb         db  0xff ; '.'
00000000000101ec         db  0xc4 ; '.'
00000000000101ed         db  0x8c ; '.'
00000000000101ee         db  0xff ; '.'
00000000000101ef         db  0xff ; '.'
00000000000101f0         db  0xb4 ; '.'
00000000000101f1         db  0x8c ; '.'
00000000000101f2         db  0xff ; '.'
00000000000101f3         db  0xff ; '.'
00000000000101f4         db  0xb4 ; '.'
00000000000101f5         db  0x8c ; '.'
00000000000101f6         db  0xff ; '.'
00000000000101f7         db  0xff ; '.'
00000000000101f8         db  0x84 ; '.'
00000000000101f9         db  0x8c ; '.'
00000000000101fa         db  0xff ; '.'
00000000000101fb         db  0xff ; '.'
00000000000101fc         db  0xb4 ; '.'
00000000000101fd         db  0x8c ; '.'
00000000000101fe         db  0xff ; '.'
00000000000101ff         db  0xff ; '.'
0000000000010200         db  0x5c ; '\'
0000000000010201         db  0x8c ; '.'
0000000000010202         db  0xff ; '.'
0000000000010203         db  0xff ; '.'
0000000000010204         db  0xb4 ; '.'
0000000000010205         db  0x8c ; '.'
0000000000010206         db  0xff ; '.'
0000000000010207         db  0xff ; '.'
0000000000010208         db  0x17 ; '.'
0000000000010209         db  0x8b ; '.'
000000000001020a         db  0xff ; '.'
000000000001020b         db  0xff ; '.'
000000000001020c         db  0xb4 ; '.'
000000000001020d         db  0x8c ; '.'
000000000001020e         db  0xff ; '.'
000000000001020f         db  0xff ; '.'
0000000000010210         db  0xb4 ; '.'
0000000000010211         db  0x8c ; '.'
0000000000010212         db  0xff ; '.'
0000000000010213         db  0xff ; '.'
0000000000010214         db  0xb4 ; '.'
0000000000010215         db  0x8c ; '.'
0000000000010216         db  0xff ; '.'
0000000000010217         db  0xff ; '.'
0000000000010218         db  0x5c ; '\'
0000000000010219         db  0x8c ; '.'
000000000001021a         db  0xff ; '.'
000000000001021b         db  0xff ; '.'
000000000001021c         db  0x5c ; '\'
000000000001021d         db  0x8c ; '.'
000000000001021e         db  0xff ; '.'
000000000001021f         db  0xff ; '.'
0000000000010220         db  0x5c ; '\'
0000000000010221         db  0x8c ; '.'
0000000000010222         db  0xff ; '.'
0000000000010223         db  0xff ; '.'
0000000000010224         db  0x5c ; '\'
0000000000010225         db  0x8c ; '.'
0000000000010226         db  0xff ; '.'
0000000000010227         db  0xff ; '.'
0000000000010228         db  0x5c ; '\'
0000000000010229         db  0x8c ; '.'
000000000001022a         db  0xff ; '.'
000000000001022b         db  0xff ; '.'
000000000001022c         db  0x5c ; '\'
000000000001022d         db  0x8c ; '.'
000000000001022e         db  0xff ; '.'
000000000001022f         db  0xff ; '.'
0000000000010230         db  0x5c ; '\'
0000000000010231         db  0x8c ; '.'
0000000000010232         db  0xff ; '.'
0000000000010233         db  0xff ; '.'
0000000000010234         db  0x5c ; '\'
0000000000010235         db  0x8c ; '.'
0000000000010236         db  0xff ; '.'
0000000000010237         db  0xff ; '.'
0000000000010238         db  0x5c ; '\'
0000000000010239         db  0x8c ; '.'
000000000001023a         db  0xff ; '.'
000000000001023b         db  0xff ; '.'
000000000001023c         db  0x5c ; '\'
000000000001023d         db  0x8c ; '.'
000000000001023e         db  0xff ; '.'
000000000001023f         db  0xff ; '.'
0000000000010240         db  0x5c ; '\'
0000000000010241         db  0x8c ; '.'
0000000000010242         db  0xff ; '.'
0000000000010243         db  0xff ; '.'
0000000000010244         db  0x5c ; '\'
0000000000010245         db  0x8c ; '.'
0000000000010246         db  0xff ; '.'
0000000000010247         db  0xff ; '.'
0000000000010248         db  0x5c ; '\'
0000000000010249         db  0x8c ; '.'
000000000001024a         db  0xff ; '.'
000000000001024b         db  0xff ; '.'
000000000001024c         db  0x5c ; '\'
000000000001024d         db  0x8c ; '.'
000000000001024e         db  0xff ; '.'
000000000001024f         db  0xff ; '.'
0000000000010250         db  0x5c ; '\'
0000000000010251         db  0x8c ; '.'
0000000000010252         db  0xff ; '.'
0000000000010253         db  0xff ; '.'
0000000000010254         db  0x5c ; '\'
0000000000010255         db  0x8c ; '.'
0000000000010256         db  0xff ; '.'
0000000000010257         db  0xff ; '.'
0000000000010258         db  0xb4 ; '.'
0000000000010259         db  0x8c ; '.'
000000000001025a         db  0xff ; '.'
000000000001025b         db  0xff ; '.'
000000000001025c         db  0xb4 ; '.'
000000000001025d         db  0x8c ; '.'
000000000001025e         db  0xff ; '.'
000000000001025f         db  0xff ; '.'
0000000000010260         db  0xb4 ; '.'
0000000000010261         db  0x8c ; '.'
0000000000010262         db  0xff ; '.'
0000000000010263         db  0xff ; '.'
0000000000010264         db  0xb4 ; '.'
0000000000010265         db  0x8c ; '.'
0000000000010266         db  0xff ; '.'
0000000000010267         db  0xff ; '.'
0000000000010268         db  0xe7 ; '.'
0000000000010269         db  0x8a ; '.'
000000000001026a         db  0xff ; '.'
000000000001026b         db  0xff ; '.'
000000000001026c         db  0x1c ; '.'
000000000001026d         db  0x8d ; '.'
000000000001026e         db  0xff ; '.'
000000000001026f         db  0xff ; '.'
0000000000010270         db  0x5c ; '\'
0000000000010271         db  0x8c ; '.'
0000000000010272         db  0xff ; '.'
0000000000010273         db  0xff ; '.'
0000000000010274         db  0x5c ; '\'
0000000000010275         db  0x8c ; '.'
0000000000010276         db  0xff ; '.'
0000000000010277         db  0xff ; '.'
0000000000010278         db  0x5c ; '\'
0000000000010279         db  0x8c ; '.'
000000000001027a         db  0xff ; '.'
000000000001027b         db  0xff ; '.'
000000000001027c         db  0x5c ; '\'
000000000001027d         db  0x8c ; '.'
000000000001027e         db  0xff ; '.'
000000000001027f         db  0xff ; '.'
0000000000010280         db  0x5c ; '\'
0000000000010281         db  0x8c ; '.'
0000000000010282         db  0xff ; '.'
0000000000010283         db  0xff ; '.'
0000000000010284         db  0x5c ; '\'
0000000000010285         db  0x8c ; '.'
0000000000010286         db  0xff ; '.'
0000000000010287         db  0xff ; '.'
0000000000010288         db  0x5c ; '\'
0000000000010289         db  0x8c ; '.'
000000000001028a         db  0xff ; '.'
000000000001028b         db  0xff ; '.'
000000000001028c         db  0x5c ; '\'
000000000001028d         db  0x8c ; '.'
000000000001028e         db  0xff ; '.'
000000000001028f         db  0xff ; '.'
0000000000010290         db  0x5c ; '\'
0000000000010291         db  0x8c ; '.'
0000000000010292         db  0xff ; '.'
0000000000010293         db  0xff ; '.'
0000000000010294         db  0x5c ; '\'
0000000000010295         db  0x8c ; '.'
0000000000010296         db  0xff ; '.'
0000000000010297         db  0xff ; '.'
0000000000010298         db  0x5c ; '\'
0000000000010299         db  0x8c ; '.'
000000000001029a         db  0xff ; '.'
000000000001029b         db  0xff ; '.'
000000000001029c         db  0x5c ; '\'
000000000001029d         db  0x8c ; '.'
000000000001029e         db  0xff ; '.'
000000000001029f         db  0xff ; '.'
00000000000102a0         db  0x5c ; '\'
00000000000102a1         db  0x8c ; '.'
00000000000102a2         db  0xff ; '.'
00000000000102a3         db  0xff ; '.'
00000000000102a4         db  0x5c ; '\'
00000000000102a5         db  0x8c ; '.'
00000000000102a6         db  0xff ; '.'
00000000000102a7         db  0xff ; '.'
00000000000102a8         db  0x5c ; '\'
00000000000102a9         db  0x8c ; '.'
00000000000102aa         db  0xff ; '.'
00000000000102ab         db  0xff ; '.'
00000000000102ac         db  0x5c ; '\'
00000000000102ad         db  0x8c ; '.'
00000000000102ae         db  0xff ; '.'
00000000000102af         db  0xff ; '.'
00000000000102b0         db  0x5c ; '\'
00000000000102b1         db  0x8c ; '.'
00000000000102b2         db  0xff ; '.'
00000000000102b3         db  0xff ; '.'
00000000000102b4         db  0x5c ; '\'
00000000000102b5         db  0x8c ; '.'
00000000000102b6         db  0xff ; '.'
00000000000102b7         db  0xff ; '.'
00000000000102b8         db  0x5c ; '\'
00000000000102b9         db  0x8c ; '.'
00000000000102ba         db  0xff ; '.'
00000000000102bb         db  0xff ; '.'
00000000000102bc         db  0x5c ; '\'
00000000000102bd         db  0x8c ; '.'
00000000000102be         db  0xff ; '.'
00000000000102bf         db  0xff ; '.'
00000000000102c0         db  0x5c ; '\'
00000000000102c1         db  0x8c ; '.'
00000000000102c2         db  0xff ; '.'
00000000000102c3         db  0xff ; '.'
00000000000102c4         db  0x5c ; '\'
00000000000102c5         db  0x8c ; '.'
00000000000102c6         db  0xff ; '.'
00000000000102c7         db  0xff ; '.'
00000000000102c8         db  0x5c ; '\'
00000000000102c9         db  0x8c ; '.'
00000000000102ca         db  0xff ; '.'
00000000000102cb         db  0xff ; '.'
00000000000102cc         db  0x5c ; '\'
00000000000102cd         db  0x8c ; '.'
00000000000102ce         db  0xff ; '.'
00000000000102cf         db  0xff ; '.'
00000000000102d0         db  0x5c ; '\'
00000000000102d1         db  0x8c ; '.'
00000000000102d2         db  0xff ; '.'
00000000000102d3         db  0xff ; '.'
00000000000102d4         db  0x5c ; '\'
00000000000102d5         db  0x8c ; '.'
00000000000102d6         db  0xff ; '.'
00000000000102d7         db  0xff ; '.'
00000000000102d8         db  0xb4 ; '.'
00000000000102d9         db  0x8c ; '.'
00000000000102da         db  0xff ; '.'
00000000000102db         db  0xff ; '.'
00000000000102dc         db  0x8c ; '.'
00000000000102dd         db  0x8b ; '.'
00000000000102de         db  0xff ; '.'
00000000000102df         db  0xff ; '.'
00000000000102e0         db  0x5c ; '\'
00000000000102e1         db  0x8c ; '.'
00000000000102e2         db  0xff ; '.'
00000000000102e3         db  0xff ; '.'
00000000000102e4         db  0xb4 ; '.'
00000000000102e5         db  0x8c ; '.'
00000000000102e6         db  0xff ; '.'
00000000000102e7         db  0xff ; '.'
00000000000102e8         db  0x5c ; '\'
00000000000102e9         db  0x8c ; '.'
00000000000102ea         db  0xff ; '.'
00000000000102eb         db  0xff ; '.'
00000000000102ec         db  0xb4 ; '.'
00000000000102ed         db  0x8c ; '.'
00000000000102ee         db  0xff ; '.'
00000000000102ef         db  0xff ; '.'
00000000000102f0         db  0x5c ; '\'
00000000000102f1         db  0x8c ; '.'
00000000000102f2         db  0xff ; '.'
00000000000102f3         db  0xff ; '.'
00000000000102f4         db  0x5c ; '\'
00000000000102f5         db  0x8c ; '.'
00000000000102f6         db  0xff ; '.'
00000000000102f7         db  0xff ; '.'
00000000000102f8         db  0x5c ; '\'
00000000000102f9         db  0x8c ; '.'
00000000000102fa         db  0xff ; '.'
00000000000102fb         db  0xff ; '.'
00000000000102fc         db  0x5c ; '\'
00000000000102fd         db  0x8c ; '.'
00000000000102fe         db  0xff ; '.'
00000000000102ff         db  0xff ; '.'
0000000000010300         db  0x5c ; '\'
0000000000010301         db  0x8c ; '.'
0000000000010302         db  0xff ; '.'
0000000000010303         db  0xff ; '.'
0000000000010304         db  0x5c ; '\'
0000000000010305         db  0x8c ; '.'
0000000000010306         db  0xff ; '.'
0000000000010307         db  0xff ; '.'
0000000000010308         db  0x5c ; '\'
0000000000010309         db  0x8c ; '.'
000000000001030a         db  0xff ; '.'
000000000001030b         db  0xff ; '.'
000000000001030c         db  0x5c ; '\'
000000000001030d         db  0x8c ; '.'
000000000001030e         db  0xff ; '.'
000000000001030f         db  0xff ; '.'
0000000000010310         db  0x5c ; '\'
0000000000010311         db  0x8c ; '.'
0000000000010312         db  0xff ; '.'
0000000000010313         db  0xff ; '.'
0000000000010314         db  0x5c ; '\'
0000000000010315         db  0x8c ; '.'
0000000000010316         db  0xff ; '.'
0000000000010317         db  0xff ; '.'
0000000000010318         db  0x5c ; '\'
0000000000010319         db  0x8c ; '.'
000000000001031a         db  0xff ; '.'
000000000001031b         db  0xff ; '.'
000000000001031c         db  0x5c ; '\'
000000000001031d         db  0x8c ; '.'
000000000001031e         db  0xff ; '.'
000000000001031f         db  0xff ; '.'
0000000000010320         db  0x5c ; '\'
0000000000010321         db  0x8c ; '.'
0000000000010322         db  0xff ; '.'
0000000000010323         db  0xff ; '.'
0000000000010324         db  0x5c ; '\'
0000000000010325         db  0x8c ; '.'
0000000000010326         db  0xff ; '.'
0000000000010327         db  0xff ; '.'
0000000000010328         db  0x5c ; '\'
0000000000010329         db  0x8c ; '.'
000000000001032a         db  0xff ; '.'
000000000001032b         db  0xff ; '.'
000000000001032c         db  0x5c ; '\'
000000000001032d         db  0x8c ; '.'
000000000001032e         db  0xff ; '.'
000000000001032f         db  0xff ; '.'
0000000000010330         db  0x5c ; '\'
0000000000010331         db  0x8c ; '.'
0000000000010332         db  0xff ; '.'
0000000000010333         db  0xff ; '.'
0000000000010334         db  0x5c ; '\'
0000000000010335         db  0x8c ; '.'
0000000000010336         db  0xff ; '.'
0000000000010337         db  0xff ; '.'
0000000000010338         db  0x5c ; '\'
0000000000010339         db  0x8c ; '.'
000000000001033a         db  0xff ; '.'
000000000001033b         db  0xff ; '.'
000000000001033c         db  0x5c ; '\'
000000000001033d         db  0x8c ; '.'
000000000001033e         db  0xff ; '.'
000000000001033f         db  0xff ; '.'
0000000000010340         db  0x5c ; '\'
0000000000010341         db  0x8c ; '.'
0000000000010342         db  0xff ; '.'
0000000000010343         db  0xff ; '.'
0000000000010344         db  0x5c ; '\'
0000000000010345         db  0x8c ; '.'
0000000000010346         db  0xff ; '.'
0000000000010347         db  0xff ; '.'
0000000000010348         db  0x5c ; '\'
0000000000010349         db  0x8c ; '.'
000000000001034a         db  0xff ; '.'
000000000001034b         db  0xff ; '.'
000000000001034c         db  0x5c ; '\'
000000000001034d         db  0x8c ; '.'
000000000001034e         db  0xff ; '.'
000000000001034f         db  0xff ; '.'
0000000000010350         db  0x5c ; '\'
0000000000010351         db  0x8c ; '.'
0000000000010352         db  0xff ; '.'
0000000000010353         db  0xff ; '.'
0000000000010354         db  0x5c ; '\'
0000000000010355         db  0x8c ; '.'
0000000000010356         db  0xff ; '.'
0000000000010357         db  0xff ; '.'
0000000000010358         db  0x17 ; '.'
0000000000010359         db  0x8a ; '.'
000000000001035a         db  0xff ; '.'
000000000001035b         db  0xff ; '.'
000000000001035c         db  0xb4 ; '.'
000000000001035d         db  0x8c ; '.'
000000000001035e         db  0xff ; '.'
000000000001035f         db  0xff ; '.'
0000000000010360         db  0x17 ; '.'
0000000000010361         db  0x8a ; '.'
0000000000010362         db  0xff ; '.'
0000000000010363         db  0xff ; '.'
0000000000010364         db  0x84 ; '.'
0000000000010365         db  0x8c ; '.'
0000000000010366         db  0xff ; '.'
0000000000010367         db  0xff ; '.'
0000000000010368         db  0x08 ; '.'                                         ; DATA XREF=sub_8e70+137
0000000000010369         db  0x8c ; '.'
000000000001036a         db  0xff ; '.'
000000000001036b         db  0xff ; '.'
000000000001036c         db  0x18 ; '.'
000000000001036d         db  0x8b ; '.'
000000000001036e         db  0xff ; '.'
000000000001036f         db  0xff ; '.'
0000000000010370         db  0x18 ; '.'
0000000000010371         db  0x8b ; '.'
0000000000010372         db  0xff ; '.'
0000000000010373         db  0xff ; '.'
0000000000010374         db  0x18 ; '.'
0000000000010375         db  0x8b ; '.'
0000000000010376         db  0xff ; '.'
0000000000010377         db  0xff ; '.'
0000000000010378         db  0x18 ; '.'
0000000000010379         db  0x8b ; '.'
000000000001037a         db  0xff ; '.'
000000000001037b         db  0xff ; '.'
000000000001037c         db  0x18 ; '.'
000000000001037d         db  0x8b ; '.'
000000000001037e         db  0xff ; '.'
000000000001037f         db  0xff ; '.'
0000000000010380         db  0x18 ; '.'
0000000000010381         db  0x8b ; '.'
0000000000010382         db  0xff ; '.'
0000000000010383         db  0xff ; '.'
0000000000010384         db  0xf8 ; '.'
0000000000010385         db  0x8b ; '.'
0000000000010386         db  0xff ; '.'
0000000000010387         db  0xff ; '.'
0000000000010388         db  0x48 ; 'H'
0000000000010389         db  0x8d ; '.'
000000000001038a         db  0xff ; '.'
000000000001038b         db  0xff ; '.'
000000000001038c         db  0x30 ; '0'
000000000001038d         db  0x8d ; '.'
000000000001038e         db  0xff ; '.'
000000000001038f         db  0xff ; '.'
0000000000010390         db  0xe0 ; '.'
0000000000010391         db  0x8b ; '.'
0000000000010392         db  0xff ; '.'
0000000000010393         db  0xff ; '.'
0000000000010394         db  0x20 ; ' '
0000000000010395         db  0x8d ; '.'
0000000000010396         db  0xff ; '.'
0000000000010397         db  0xff ; '.'
0000000000010398         db  0xc8 ; '.'
0000000000010399         db  0x8b ; '.'
000000000001039a         db  0xff ; '.'
000000000001039b         db  0xff ; '.'
000000000001039c         db  0x08 ; '.'
000000000001039d         db  0x8d ; '.'
000000000001039e         db  0xff ; '.'
000000000001039f         db  0xff ; '.'
00000000000103a0         db  0x18 ; '.'
00000000000103a1         db  0x8b ; '.'
00000000000103a2         db  0xff ; '.'
00000000000103a3         db  0xff ; '.'
00000000000103a4         db  0x18 ; '.'
00000000000103a5         db  0x8b ; '.'
00000000000103a6         db  0xff ; '.'
00000000000103a7         db  0xff ; '.'
00000000000103a8         db  0x18 ; '.'
00000000000103a9         db  0x8b ; '.'
00000000000103aa         db  0xff ; '.'
00000000000103ab         db  0xff ; '.'
00000000000103ac         db  0x18 ; '.'
00000000000103ad         db  0x8b ; '.'
00000000000103ae         db  0xff ; '.'
00000000000103af         db  0xff ; '.'
00000000000103b0         db  0x18 ; '.'
00000000000103b1         db  0x8b ; '.'
00000000000103b2         db  0xff ; '.'
00000000000103b3         db  0xff ; '.'
00000000000103b4         db  0x18 ; '.'
00000000000103b5         db  0x8b ; '.'
00000000000103b6         db  0xff ; '.'
00000000000103b7         db  0xff ; '.'
00000000000103b8         db  0x18 ; '.'
00000000000103b9         db  0x8b ; '.'
00000000000103ba         db  0xff ; '.'
00000000000103bb         db  0xff ; '.'
00000000000103bc         db  0x18 ; '.'
00000000000103bd         db  0x8b ; '.'
00000000000103be         db  0xff ; '.'
00000000000103bf         db  0xff ; '.'
00000000000103c0         db  0x18 ; '.'
00000000000103c1         db  0x8b ; '.'
00000000000103c2         db  0xff ; '.'
00000000000103c3         db  0xff ; '.'
00000000000103c4         db  0x18 ; '.'
00000000000103c5         db  0x8b ; '.'
00000000000103c6         db  0xff ; '.'
00000000000103c7         db  0xff ; '.'
00000000000103c8         db  0x18 ; '.'
00000000000103c9         db  0x8b ; '.'
00000000000103ca         db  0xff ; '.'
00000000000103cb         db  0xff ; '.'
00000000000103cc         db  0x18 ; '.'
00000000000103cd         db  0x8b ; '.'
00000000000103ce         db  0xff ; '.'
00000000000103cf         db  0xff ; '.'
00000000000103d0         db  0x18 ; '.'
00000000000103d1         db  0x8b ; '.'
00000000000103d2         db  0xff ; '.'
00000000000103d3         db  0xff ; '.'
00000000000103d4         db  0x18 ; '.'
00000000000103d5         db  0x8b ; '.'
00000000000103d6         db  0xff ; '.'
00000000000103d7         db  0xff ; '.'
00000000000103d8         db  0x18 ; '.'
00000000000103d9         db  0x8b ; '.'
00000000000103da         db  0xff ; '.'
00000000000103db         db  0xff ; '.'
00000000000103dc         db  0x18 ; '.'
00000000000103dd         db  0x8b ; '.'
00000000000103de         db  0xff ; '.'
00000000000103df         db  0xff ; '.'
00000000000103e0         db  0x18 ; '.'
00000000000103e1         db  0x8b ; '.'
00000000000103e2         db  0xff ; '.'
00000000000103e3         db  0xff ; '.'
00000000000103e4         db  0x18 ; '.'
00000000000103e5         db  0x8b ; '.'
00000000000103e6         db  0xff ; '.'
00000000000103e7         db  0xff ; '.'
00000000000103e8         db  0xf0 ; '.'
00000000000103e9         db  0x8c ; '.'
00000000000103ea         db  0xff ; '.'
00000000000103eb         db  0xff ; '.'
00000000000103ec         db  0xd8 ; '.'
00000000000103ed         db  0x8c ; '.'
00000000000103ee         db  0xff ; '.'
00000000000103ef         db  0xff ; '.'
00000000000103f0         db  0xd8 ; '.'
00000000000103f1         db  0x8c ; '.'
00000000000103f2         db  0xff ; '.'
00000000000103f3         db  0xff ; '.'
00000000000103f4         db  0xc0 ; '.'
00000000000103f5         db  0x8c ; '.'
00000000000103f6         db  0xff ; '.'
00000000000103f7         db  0xff ; '.'
00000000000103f8         db  0xd8 ; '.'
00000000000103f9         db  0x8c ; '.'
00000000000103fa         db  0xff ; '.'
00000000000103fb         db  0xff ; '.'
00000000000103fc         db  0xa8 ; '.'
00000000000103fd         db  0x8c ; '.'
00000000000103fe         db  0xff ; '.'
00000000000103ff         db  0xff ; '.'
0000000000010400         db  0xd8 ; '.'
0000000000010401         db  0x8c ; '.'
0000000000010402         db  0xff ; '.'
0000000000010403         db  0xff ; '.'
0000000000010404         db  0x18 ; '.'
0000000000010405         db  0x89 ; '.'
0000000000010406         db  0xff ; '.'
0000000000010407         db  0xff ; '.'
0000000000010408         db  0xd8 ; '.'
0000000000010409         db  0x8c ; '.'
000000000001040a         db  0xff ; '.'
000000000001040b         db  0xff ; '.'
000000000001040c         db  0xd8 ; '.'
000000000001040d         db  0x8c ; '.'
000000000001040e         db  0xff ; '.'
000000000001040f         db  0xff ; '.'
0000000000010410         db  0xd8 ; '.'
0000000000010411         db  0x8c ; '.'
0000000000010412         db  0xff ; '.'
0000000000010413         db  0xff ; '.'
0000000000010414         db  0xa8 ; '.'
0000000000010415         db  0x8c ; '.'
0000000000010416         db  0xff ; '.'
0000000000010417         db  0xff ; '.'
0000000000010418         db  0xa8 ; '.'
0000000000010419         db  0x8c ; '.'
000000000001041a         db  0xff ; '.'
000000000001041b         db  0xff ; '.'
000000000001041c         db  0xa8 ; '.'
000000000001041d         db  0x8c ; '.'
000000000001041e         db  0xff ; '.'
000000000001041f         db  0xff ; '.'
0000000000010420         db  0xa8 ; '.'
0000000000010421         db  0x8c ; '.'
0000000000010422         db  0xff ; '.'
0000000000010423         db  0xff ; '.'
0000000000010424         db  0xa8 ; '.'
0000000000010425         db  0x8c ; '.'
0000000000010426         db  0xff ; '.'
0000000000010427         db  0xff ; '.'
0000000000010428         db  0xa8 ; '.'
0000000000010429         db  0x8c ; '.'
000000000001042a         db  0xff ; '.'
000000000001042b         db  0xff ; '.'
000000000001042c         db  0xa8 ; '.'
000000000001042d         db  0x8c ; '.'
000000000001042e         db  0xff ; '.'
000000000001042f         db  0xff ; '.'
0000000000010430         db  0xa8 ; '.'
0000000000010431         db  0x8c ; '.'
0000000000010432         db  0xff ; '.'
0000000000010433         db  0xff ; '.'
0000000000010434         db  0xa8 ; '.'
0000000000010435         db  0x8c ; '.'
0000000000010436         db  0xff ; '.'
0000000000010437         db  0xff ; '.'
0000000000010438         db  0xa8 ; '.'
0000000000010439         db  0x8c ; '.'
000000000001043a         db  0xff ; '.'
000000000001043b         db  0xff ; '.'
000000000001043c         db  0xa8 ; '.'
000000000001043d         db  0x8c ; '.'
000000000001043e         db  0xff ; '.'
000000000001043f         db  0xff ; '.'
0000000000010440         db  0xa8 ; '.'
0000000000010441         db  0x8c ; '.'
0000000000010442         db  0xff ; '.'
0000000000010443         db  0xff ; '.'
0000000000010444         db  0xa8 ; '.'
0000000000010445         db  0x8c ; '.'
0000000000010446         db  0xff ; '.'
0000000000010447         db  0xff ; '.'
0000000000010448         db  0xa8 ; '.'
0000000000010449         db  0x8c ; '.'
000000000001044a         db  0xff ; '.'
000000000001044b         db  0xff ; '.'
000000000001044c         db  0xa8 ; '.'
000000000001044d         db  0x8c ; '.'
000000000001044e         db  0xff ; '.'
000000000001044f         db  0xff ; '.'
0000000000010450         db  0xa8 ; '.'
0000000000010451         db  0x8c ; '.'
0000000000010452         db  0xff ; '.'
0000000000010453         db  0xff ; '.'
0000000000010454         db  0xd8 ; '.'
0000000000010455         db  0x8c ; '.'
0000000000010456         db  0xff ; '.'
0000000000010457         db  0xff ; '.'
0000000000010458         db  0xd8 ; '.'
0000000000010459         db  0x8c ; '.'
000000000001045a         db  0xff ; '.'
000000000001045b         db  0xff ; '.'
000000000001045c         db  0xd8 ; '.'
000000000001045d         db  0x8c ; '.'
000000000001045e         db  0xff ; '.'
000000000001045f         db  0xff ; '.'
0000000000010460         db  0xd8 ; '.'
0000000000010461         db  0x8c ; '.'
0000000000010462         db  0xff ; '.'
0000000000010463         db  0xff ; '.'
0000000000010464         db  0xe8 ; '.'
0000000000010465         db  0x88 ; '.'
0000000000010466         db  0xff ; '.'
0000000000010467         db  0xff ; '.'
0000000000010468         db  0x18 ; '.'
0000000000010469         db  0x8b ; '.'
000000000001046a         db  0xff ; '.'
000000000001046b         db  0xff ; '.'
000000000001046c         db  0xa8 ; '.'
000000000001046d         db  0x8c ; '.'
000000000001046e         db  0xff ; '.'
000000000001046f         db  0xff ; '.'
0000000000010470         db  0xa8 ; '.'
0000000000010471         db  0x8c ; '.'
0000000000010472         db  0xff ; '.'
0000000000010473         db  0xff ; '.'
0000000000010474         db  0xa8 ; '.'
0000000000010475         db  0x8c ; '.'
0000000000010476         db  0xff ; '.'
0000000000010477         db  0xff ; '.'
0000000000010478         db  0xa8 ; '.'
0000000000010479         db  0x8c ; '.'
000000000001047a         db  0xff ; '.'
000000000001047b         db  0xff ; '.'
000000000001047c         db  0xa8 ; '.'
000000000001047d         db  0x8c ; '.'
000000000001047e         db  0xff ; '.'
000000000001047f         db  0xff ; '.'
0000000000010480         db  0xa8 ; '.'
0000000000010481         db  0x8c ; '.'
0000000000010482         db  0xff ; '.'
0000000000010483         db  0xff ; '.'
0000000000010484         db  0xa8 ; '.'
0000000000010485         db  0x8c ; '.'
0000000000010486         db  0xff ; '.'
0000000000010487         db  0xff ; '.'
0000000000010488         db  0xa8 ; '.'
0000000000010489         db  0x8c ; '.'
000000000001048a         db  0xff ; '.'
000000000001048b         db  0xff ; '.'
000000000001048c         db  0xa8 ; '.'
000000000001048d         db  0x8c ; '.'
000000000001048e         db  0xff ; '.'
000000000001048f         db  0xff ; '.'
0000000000010490         db  0xa8 ; '.'
0000000000010491         db  0x8c ; '.'
0000000000010492         db  0xff ; '.'
0000000000010493         db  0xff ; '.'
0000000000010494         db  0xa8 ; '.'
0000000000010495         db  0x8c ; '.'
0000000000010496         db  0xff ; '.'
0000000000010497         db  0xff ; '.'
0000000000010498         db  0xa8 ; '.'
0000000000010499         db  0x8c ; '.'
000000000001049a         db  0xff ; '.'
000000000001049b         db  0xff ; '.'
000000000001049c         db  0xa8 ; '.'
000000000001049d         db  0x8c ; '.'
000000000001049e         db  0xff ; '.'
000000000001049f         db  0xff ; '.'
00000000000104a0         db  0xa8 ; '.'
00000000000104a1         db  0x8c ; '.'
00000000000104a2         db  0xff ; '.'
00000000000104a3         db  0xff ; '.'
00000000000104a4         db  0xa8 ; '.'
00000000000104a5         db  0x8c ; '.'
00000000000104a6         db  0xff ; '.'
00000000000104a7         db  0xff ; '.'
00000000000104a8         db  0xa8 ; '.'
00000000000104a9         db  0x8c ; '.'
00000000000104aa         db  0xff ; '.'
00000000000104ab         db  0xff ; '.'
00000000000104ac         db  0xa8 ; '.'
00000000000104ad         db  0x8c ; '.'
00000000000104ae         db  0xff ; '.'
00000000000104af         db  0xff ; '.'
00000000000104b0         db  0xa8 ; '.'
00000000000104b1         db  0x8c ; '.'
00000000000104b2         db  0xff ; '.'
00000000000104b3         db  0xff ; '.'
00000000000104b4         db  0xa8 ; '.'
00000000000104b5         db  0x8c ; '.'
00000000000104b6         db  0xff ; '.'
00000000000104b7         db  0xff ; '.'
00000000000104b8         db  0xa8 ; '.'
00000000000104b9         db  0x8c ; '.'
00000000000104ba         db  0xff ; '.'
00000000000104bb         db  0xff ; '.'
00000000000104bc         db  0xa8 ; '.'
00000000000104bd         db  0x8c ; '.'
00000000000104be         db  0xff ; '.'
00000000000104bf         db  0xff ; '.'
00000000000104c0         db  0xa8 ; '.'
00000000000104c1         db  0x8c ; '.'
00000000000104c2         db  0xff ; '.'
00000000000104c3         db  0xff ; '.'
00000000000104c4         db  0xa8 ; '.'
00000000000104c5         db  0x8c ; '.'
00000000000104c6         db  0xff ; '.'
00000000000104c7         db  0xff ; '.'
00000000000104c8         db  0xa8 ; '.'
00000000000104c9         db  0x8c ; '.'
00000000000104ca         db  0xff ; '.'
00000000000104cb         db  0xff ; '.'
00000000000104cc         db  0xa8 ; '.'
00000000000104cd         db  0x8c ; '.'
00000000000104ce         db  0xff ; '.'
00000000000104cf         db  0xff ; '.'
00000000000104d0         db  0xa8 ; '.'
00000000000104d1         db  0x8c ; '.'
00000000000104d2         db  0xff ; '.'
00000000000104d3         db  0xff ; '.'
00000000000104d4         db  0xd8 ; '.'
00000000000104d5         db  0x8c ; '.'
00000000000104d6         db  0xff ; '.'
00000000000104d7         db  0xff ; '.'
00000000000104d8         db  0xa8 ; '.'
00000000000104d9         db  0x8b ; '.'
00000000000104da         db  0xff ; '.'
00000000000104db         db  0xff ; '.'
00000000000104dc         db  0xa8 ; '.'
00000000000104dd         db  0x8c ; '.'
00000000000104de         db  0xff ; '.'
00000000000104df         db  0xff ; '.'
00000000000104e0         db  0xd8 ; '.'
00000000000104e1         db  0x8c ; '.'
00000000000104e2         db  0xff ; '.'
00000000000104e3         db  0xff ; '.'
00000000000104e4         db  0xa8 ; '.'
00000000000104e5         db  0x8c ; '.'
00000000000104e6         db  0xff ; '.'
00000000000104e7         db  0xff ; '.'
00000000000104e8         db  0xd8 ; '.'
00000000000104e9         db  0x8c ; '.'
00000000000104ea         db  0xff ; '.'
00000000000104eb         db  0xff ; '.'
00000000000104ec         db  0xa8 ; '.'
00000000000104ed         db  0x8c ; '.'
00000000000104ee         db  0xff ; '.'
00000000000104ef         db  0xff ; '.'
00000000000104f0         db  0xa8 ; '.'
00000000000104f1         db  0x8c ; '.'
00000000000104f2         db  0xff ; '.'
00000000000104f3         db  0xff ; '.'
00000000000104f4         db  0xa8 ; '.'
00000000000104f5         db  0x8c ; '.'
00000000000104f6         db  0xff ; '.'
00000000000104f7         db  0xff ; '.'
00000000000104f8         db  0xa8 ; '.'
00000000000104f9         db  0x8c ; '.'
00000000000104fa         db  0xff ; '.'
00000000000104fb         db  0xff ; '.'
00000000000104fc         db  0xa8 ; '.'
00000000000104fd         db  0x8c ; '.'
00000000000104fe         db  0xff ; '.'
00000000000104ff         db  0xff ; '.'
0000000000010500         db  0xa8 ; '.'
0000000000010501         db  0x8c ; '.'
0000000000010502         db  0xff ; '.'
0000000000010503         db  0xff ; '.'
0000000000010504         db  0xa8 ; '.'
0000000000010505         db  0x8c ; '.'
0000000000010506         db  0xff ; '.'
0000000000010507         db  0xff ; '.'
0000000000010508         db  0xa8 ; '.'
0000000000010509         db  0x8c ; '.'
000000000001050a         db  0xff ; '.'
000000000001050b         db  0xff ; '.'
000000000001050c         db  0xa8 ; '.'
000000000001050d         db  0x8c ; '.'
000000000001050e         db  0xff ; '.'
000000000001050f         db  0xff ; '.'
0000000000010510         db  0xa8 ; '.'
0000000000010511         db  0x8c ; '.'
0000000000010512         db  0xff ; '.'
0000000000010513         db  0xff ; '.'
0000000000010514         db  0xa8 ; '.'
0000000000010515         db  0x8c ; '.'
0000000000010516         db  0xff ; '.'
0000000000010517         db  0xff ; '.'
0000000000010518         db  0xa8 ; '.'
0000000000010519         db  0x8c ; '.'
000000000001051a         db  0xff ; '.'
000000000001051b         db  0xff ; '.'
000000000001051c         db  0xa8 ; '.'
000000000001051d         db  0x8c ; '.'
000000000001051e         db  0xff ; '.'
000000000001051f         db  0xff ; '.'
0000000000010520         db  0xa8 ; '.'
0000000000010521         db  0x8c ; '.'
0000000000010522         db  0xff ; '.'
0000000000010523         db  0xff ; '.'
0000000000010524         db  0xa8 ; '.'
0000000000010525         db  0x8c ; '.'
0000000000010526         db  0xff ; '.'
0000000000010527         db  0xff ; '.'
0000000000010528         db  0xa8 ; '.'
0000000000010529         db  0x8c ; '.'
000000000001052a         db  0xff ; '.'
000000000001052b         db  0xff ; '.'
000000000001052c         db  0xa8 ; '.'
000000000001052d         db  0x8c ; '.'
000000000001052e         db  0xff ; '.'
000000000001052f         db  0xff ; '.'
0000000000010530         db  0xa8 ; '.'
0000000000010531         db  0x8c ; '.'
0000000000010532         db  0xff ; '.'
0000000000010533         db  0xff ; '.'
0000000000010534         db  0xa8 ; '.'
0000000000010535         db  0x8c ; '.'
0000000000010536         db  0xff ; '.'
0000000000010537         db  0xff ; '.'
0000000000010538         db  0xa8 ; '.'
0000000000010539         db  0x8c ; '.'
000000000001053a         db  0xff ; '.'
000000000001053b         db  0xff ; '.'
000000000001053c         db  0xa8 ; '.'
000000000001053d         db  0x8c ; '.'
000000000001053e         db  0xff ; '.'
000000000001053f         db  0xff ; '.'
0000000000010540         db  0xa8 ; '.'
0000000000010541         db  0x8c ; '.'
0000000000010542         db  0xff ; '.'
0000000000010543         db  0xff ; '.'
0000000000010544         db  0xa8 ; '.'
0000000000010545         db  0x8c ; '.'
0000000000010546         db  0xff ; '.'
0000000000010547         db  0xff ; '.'
0000000000010548         db  0xa8 ; '.'
0000000000010549         db  0x8c ; '.'
000000000001054a         db  0xff ; '.'
000000000001054b         db  0xff ; '.'
000000000001054c         db  0xa8 ; '.'
000000000001054d         db  0x8c ; '.'
000000000001054e         db  0xff ; '.'
000000000001054f         db  0xff ; '.'
0000000000010550         db  0xa8 ; '.'
0000000000010551         db  0x8c ; '.'
0000000000010552         db  0xff ; '.'
0000000000010553         db  0xff ; '.'
0000000000010554         db  0x18 ; '.'
0000000000010555         db  0x88 ; '.'
0000000000010556         db  0xff ; '.'
0000000000010557         db  0xff ; '.'
0000000000010558         db  0xd8 ; '.'
0000000000010559         db  0x8c ; '.'
000000000001055a         db  0xff ; '.'
000000000001055b         db  0xff ; '.'
000000000001055c         db  0x18 ; '.'
000000000001055d         db  0x88 ; '.'
000000000001055e         db  0xff ; '.'
000000000001055f         db  0xff ; '.'
0000000000010560         db  0xc0 ; '.'
0000000000010561         db  0x8c ; '.'
0000000000010562         db  0xff ; '.'
0000000000010563         db  0xff ; '.'
0000000000010564         db  0x00 ; '.'
0000000000010565         db  0x00 ; '.'
0000000000010566         db  0x00 ; '.'
0000000000010567         db  0x00 ; '.'
0000000000010568         db  0x00 ; '.'
0000000000010569         db  0x00 ; '.'
000000000001056a         db  0x00 ; '.'
000000000001056b         db  0x00 ; '.'
000000000001056c         db  0x00 ; '.'
000000000001056d         db  0x00 ; '.'
000000000001056e         db  0x00 ; '.'
000000000001056f         db  0x00 ; '.'
0000000000010570         db  0x00 ; '.'
0000000000010571         db  0x00 ; '.'
0000000000010572         db  0x00 ; '.'
0000000000010573         db  0x00 ; '.'
0000000000010574         db  0x00 ; '.'
0000000000010575         db  0x00 ; '.'
0000000000010576         db  0x00 ; '.'
0000000000010577         db  0x00 ; '.'
0000000000010578         db  0x00 ; '.'
0000000000010579         db  0x00 ; '.'
000000000001057a         db  0x00 ; '.'
000000000001057b         db  0x00 ; '.'
000000000001057c         db  0x00 ; '.'
000000000001057d         db  0x00 ; '.'
000000000001057e         db  0x00 ; '.'
000000000001057f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000010580         db  0x00 ; '.'
0000000000010581         db  0x00 ; '.'
0000000000010582         db  0x00 ; '.'
0000000000010583         db  0x00 ; '.'
0000000000010584         db  0x01 ; '.'
0000000000010585         db  0x00 ; '.'
0000000000010586         db  0x00 ; '.'
0000000000010587         db  0x00 ; '.'
0000000000010588         db  0x02 ; '.'
0000000000010589         db  0x00 ; '.'
000000000001058a         db  0x00 ; '.'
000000000001058b         db  0x00 ; '.'
000000000001058c         db  0x03 ; '.'
000000000001058d         db  0x00 ; '.'
000000000001058e         db  0x00 ; '.'
000000000001058f         db  0x00 ; '.'
0000000000010590         db  0x04 ; '.'
0000000000010591         db  0x00 ; '.'
0000000000010592         db  0x00 ; '.'
0000000000010593         db  0x00 ; '.'
0000000000010594         db  0x05 ; '.'
0000000000010595         db  0x00 ; '.'
0000000000010596         db  0x00 ; '.'
0000000000010597         db  0x00 ; '.'
0000000000010598         db  0x06 ; '.'
0000000000010599         db  0x00 ; '.'
000000000001059a         db  0x00 ; '.'
000000000001059b         db  0x00 ; '.'
000000000001059c         db  0x07 ; '.'
000000000001059d         db  0x00 ; '.'
000000000001059e         db  0x00 ; '.'
000000000001059f         db  0x00 ; '.'
00000000000105a0         db  0x08 ; '.'
00000000000105a1         db  0x00 ; '.'
00000000000105a2         db  0x00 ; '.'
00000000000105a3         db  0x00 ; '.'
00000000000105a4         db  0x09 ; '.'
00000000000105a5         db  0x00 ; '.'
00000000000105a6         db  0x00 ; '.'
00000000000105a7         db  0x00 ; '.'
                     aSSSn:
00000000000105a8         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
00000000000105b4         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
00000000000105bb         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
00000000000105bc         db  0x43 ; 'C'
00000000000105bd         db  0x29 ; ')'
00000000000105be         db  0x00 ; '.'
                     aWrittenBySn:
00000000000105bf         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
00000000000105cf         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
00000000000105e6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
0000000000010602         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
0000000000010617         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000001062d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000010641         align      8
                     aNlicenseGplv3G:
0000000000010648         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
0000000000010714         align      8
                     aWrittenBySSSna:
0000000000010718         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_10738:        // aWrittenBySSSns
0000000000010738         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000001075c         align      32
                     aWrittenBySSSns_10760:        // aWrittenBySSSns
0000000000010760         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_10788:        // aWrittenBySSSns
0000000000010788         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
00000000000107b4         align      8
                     aWrittenBySSSns_107b8:        // aWrittenBySSSns
00000000000107b8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
00000000000107e8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000001081c         align      32
                     aWrittenBySSSns_10820:        // aWrittenBySSSns
0000000000010820         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000001085c         align      32
                     aGeneralHelpUsi:
0000000000010860         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
00000000000108a1         align      4
                     switch_table_108a4:        // switch_table
00000000000108a4         dd         version_etc_arn.loc_a8d6-switch_table_108a4, version_etc_arn.loc_a968-switch_table_108a4, version_etc_arn.loc_a9a8-switch_table_108a4, version_etc_arn.loc_a9f0-switch_table_108a4 ; switch table used at 0xa854 containing 10 entries, DATA XREF=version_etc_arn+150
00000000000108b4         dd         version_etc_arn.loc_aa40-switch_table_108a4, version_etc_arn.loc_aa98-switch_table_108a4, version_etc_arn.loc_aac8-switch_table_108a4, version_etc_arn.loc_ab30-switch_table_108a4
00000000000108c4         dd         version_etc_arn.loc_a860-switch_table_108a4, version_etc_arn.loc_a910-switch_table_108a4
00000000000108cc         db  0x00 ; '.'
00000000000108cd         db  0x00 ; '.'
00000000000108ce         db  0x00 ; '.'
00000000000108cf         db  0x00 ; '.'
00000000000108d0         db  0x00 ; '.'
00000000000108d1         db  0x00 ; '.'
00000000000108d2         db  0x00 ; '.'
00000000000108d3         db  0x00 ; '.'
00000000000108d4         db  0x00 ; '.'
00000000000108d5         db  0x00 ; '.'
00000000000108d6         db  0x00 ; '.'
00000000000108d7         db  0x00 ; '.'
00000000000108d8         db  0x00 ; '.'
00000000000108d9         db  0x00 ; '.'
00000000000108da         db  0x00 ; '.'
00000000000108db         db  0x00 ; '.'
00000000000108dc         db  0x00 ; '.'
00000000000108dd         db  0x00 ; '.'
00000000000108de         db  0x00 ; '.'
00000000000108df         db  0x00 ; '.'
                     version_etc_copyright:
00000000000108e0         db  0x43 ; 'C'                                         ; DATA XREF=version_etc_arn+79
00000000000108e1         db  0x6f ; 'o'
00000000000108e2         db  0x70 ; 'p'
00000000000108e3         db  0x79 ; 'y'
00000000000108e4         db  0x72 ; 'r'
00000000000108e5         db  0x69 ; 'i'
00000000000108e6         db  0x67 ; 'g'
00000000000108e7         db  0x68 ; 'h'
00000000000108e8         db  0x74 ; 't'
00000000000108e9         db  0x20 ; ' '
00000000000108ea         db  0x25 ; '%'
00000000000108eb         db  0x73 ; 's'
00000000000108ec         db  0x20 ; ' '
00000000000108ed         db  0x25 ; '%'
00000000000108ee         db  0x64 ; 'd'
00000000000108ef         db  0x20 ; ' '
00000000000108f0         db  0x46 ; 'F'
00000000000108f1         db  0x72 ; 'r'
00000000000108f2         db  0x65 ; 'e'
00000000000108f3         db  0x65 ; 'e'
00000000000108f4         db  0x20 ; ' '
00000000000108f5         db  0x53 ; 'S'
00000000000108f6         db  0x6f ; 'o'
00000000000108f7         db  0x66 ; 'f'
00000000000108f8         db  0x74 ; 't'
00000000000108f9         db  0x77 ; 'w'
00000000000108fa         db  0x61 ; 'a'
00000000000108fb         db  0x72 ; 'r'
00000000000108fc         db  0x65 ; 'e'
00000000000108fd         db  0x20 ; ' '
00000000000108fe         db  0x46 ; 'F'
00000000000108ff         db  0x6f ; 'o'
                     aUndationInc:
0000000000010900         db         "undation, Inc.", 0                         ; DATA XREF=cdb_advance_fd+7
                     aMemoryExhauste:
000000000001090f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aInvalidSsArgum:
0000000000010920         db         "invalid %s%s argument '%s'", 0             ; DATA XREF=xstrtol_fatal+135
                     aSsArgumentSToo:
000000000001093b         db         "%s%s argument '%s' too large", 0           ; DATA XREF=xstrtol_fatal+51
0000000000010958         db  0x2d ; '-'                                         ; DATA XREF=xstrtol_fatal+72, xstrtol_fatal+146
0000000000010959         db  0x2d ; '-'                                         ; DATA XREF=main+3072, df_readable+96, get_dev+430, get_dev+544, sub_47b0+14, sub_4830+4, sub_4a7e+320, sub_4a7e+503
000000000001095a         db  0x00 ; '.'
000000000001095b         db  0x00 ; '.'
000000000001095c         db  0x00 ; '.'
000000000001095d         db  0x00 ; '.'
000000000001095e         db  0x00 ; '.'
000000000001095f         db  0x00 ; '.'
                     aInvalidSuffixI:
0000000000010960         db         "invalid suffix in %s%s argument '%s'", 0   ; DATA XREF=xstrtol_fatal+123
0000000000010985         align      8
                     aCoreutils831li_10988:        // aCoreutils831li
0000000000010988         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoumax+908
                     a0StrtolbaseStr:
00000000000109a8         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoumax+915
00000000000109ce         align      16
                     switch_table_109d0:        // switch_table
00000000000109d0         dd         xstrtoumax.loc_b466-switch_table_109d0, 2 dup (xstrtoumax.loc_b35c-switch_table_109d0), xstrtoumax.loc_b443-switch_table_109d0, xstrtoumax.loc_b35c-switch_table_109d0 ; switch table used at 0xb316 containing 54 entries, DATA XREF=xstrtoumax+452
00000000000109e4         dd         xstrtoumax.loc_b47c-switch_table_109d0, 3 dup (xstrtoumax.loc_b35c-switch_table_109d0), xstrtoumax.loc_b3ff-switch_table_109d0, xstrtoumax.loc_b35c-switch_table_109d0
00000000000109fc         dd         xstrtoumax.loc_b318-switch_table_109d0, 2 dup (xstrtoumax.loc_b35c-switch_table_109d0), xstrtoumax.loc_b420-switch_table_109d0, 3 dup (xstrtoumax.loc_b35c-switch_table_109d0)
0000000000010a18         dd         xstrtoumax.loc_b3df-switch_table_109d0, 4 dup (xstrtoumax.loc_b35c-switch_table_109d0), xstrtoumax.loc_b3ba-switch_table_109d0, xstrtoumax.loc_b394-switch_table_109d0
0000000000010a34         dd         7 dup (xstrtoumax.loc_b35c-switch_table_109d0), xstrtoumax.loc_b37d-switch_table_109d0, xstrtoumax.loc_b340-switch_table_109d0, 3 dup (xstrtoumax.loc_b35c-switch_table_109d0)
0000000000010a64         dd         xstrtoumax.loc_b47c-switch_table_109d0, 3 dup (xstrtoumax.loc_b35c-switch_table_109d0), xstrtoumax.loc_b3ff-switch_table_109d0, xstrtoumax.loc_b35c-switch_table_109d0
0000000000010a7c         dd         xstrtoumax.loc_b318-switch_table_109d0, 6 dup (xstrtoumax.loc_b35c-switch_table_109d0), xstrtoumax.loc_b3df-switch_table_109d0, 2 dup (xstrtoumax.loc_b35c-switch_table_109d0)
0000000000010aa4         dd         xstrtoumax.loc_b367-switch_table_109d0
                     __PRETTY_FUNCTION__.4162:
0000000000010aa8         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
0000000000010ab3         align      8
                     aCoreutils831li:
0000000000010ab8         db         "../coreutils-8.31/lib/chdir-long.c", 0     ; DATA XREF=cdb_free+41, chdir_long+569, chdir_long+605, chdir_long+636, chdir_long+667, chdir_long+698
                     aClosefail:
0000000000010adb         db         "! close_fail", 0                           ; DATA XREF=cdb_free+48
                     a0Len:
0000000000010ae8         db         "0 < len", 0                                ; DATA XREF=chdir_long+612
                     a4096Len:
0000000000010af0         db         "4096 <= len", 0                            ; DATA XREF=chdir_long+643
0000000000010afc         db  0x2a ; '*'                                         ; DATA XREF=chdir_long+705
0000000000010afd         db  0x64 ; 'd'
0000000000010afe         db  0x69 ; 'i'
0000000000010aff         db  0x72 ; 'r'
0000000000010b00         db  0x20 ; ' '
0000000000010b01         db  0x21 ; '!'
0000000000010b02         db  0x3d ; '='
0000000000010b03         db  0x20 ; ' '
0000000000010b04         db  0x27 ; '''
0000000000010b05         db  0x2f ; '/'
0000000000010b06         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_90d0+132, sub_90d0+1338, sub_90d0+1670, sub_90d0+1697, sub_90d0+2352
0000000000010b07         db  0x00 ; '.'
                     aDirDirend:
0000000000010b08         db         "dir <= dir_end", 0                         ; DATA XREF=chdir_long+674
                     aSlashDir4096:
0000000000010b17         db         "slash - dir < 4096", 0                     ; DATA XREF=chdir_long+576
0000000000010b2a         align      16
                     __PRETTY_FUNCTION__.5081:
0000000000010b30         db         "cdb_free", 0                               ; DATA XREF=cdb_free+34
0000000000010b39         align      64
                     __PRETTY_FUNCTION__.5099:
0000000000010b40         db         "chdir_long", 0                             ; DATA XREF=chdir_long+562, chdir_long+598, chdir_long+629, chdir_long+660, chdir_long+691
                     a2636:
0000000000010b4b         db         "2.6.36", 0                                 ; DATA XREF=get_fs_usage+247
                     aProcselfmounti:
0000000000010b52         db         "/proc/self/mountinfo", 0                   ; DATA XREF=read_file_system_list+15
0000000000010b67         db  0x20 ; ' '                                         ; DATA XREF=read_file_system_list+203
0000000000010b68         db  0x2d ; '-'
0000000000010b69         db  0x20 ; ' '
0000000000010b6a         db  0x00 ; '.'
                     aNsnNsnC:
0000000000010b6b         db         " - %n%*s%n %n%*s%n %c", 0                  ; DATA XREF=read_file_system_list+247
                     aAutofs:
0000000000010b81         db         "autofs", 0                                 ; DATA XREF=read_file_system_list+484, read_file_system_list+1191
0000000000010b88         db  0x70 ; 'p'                                         ; DATA XREF=read_file_system_list+572, read_file_system_list+1337
0000000000010b89         db  0x72 ; 'r'
0000000000010b8a         db  0x6f ; 'o'
0000000000010b8b         db  0x63 ; 'c'
0000000000010b8c         db  0x00 ; '.'
                     aSubfs:
0000000000010b8d         db         "subfs", 0                                  ; DATA XREF=read_file_system_list+776, read_file_system_list+1367
                     aDebugfs:
0000000000010b93         db         "debugfs", 0                                ; DATA XREF=read_file_system_list+806, read_file_system_list+1397
                     aDevpts:
0000000000010b9b         db         "devpts", 0                                 ; DATA XREF=read_file_system_list+836, read_file_system_list+1427
                     aFusectl:
0000000000010ba2         db         "fusectl", 0                                ; DATA XREF=read_file_system_list+866, read_file_system_list+1457
                     aMqueue:
0000000000010baa         db         "mqueue", 0                                 ; DATA XREF=read_file_system_list+896, read_file_system_list+1487
                     aRpcpipefs:
0000000000010bb1         db         "rpc_pipefs", 0                             ; DATA XREF=read_file_system_list+926, read_file_system_list+1517
                     aSysfs:
0000000000010bbc         db         "sysfs", 0                                  ; DATA XREF=read_file_system_list+956, read_file_system_list+1547
                     aDevfs:
0000000000010bc2         db         "devfs", 0                                  ; DATA XREF=read_file_system_list+986, read_file_system_list+1573
                     aKernfs:
0000000000010bc8         db         "kernfs", 0                                 ; DATA XREF=read_file_system_list+1016, read_file_system_list+1599
                     aIgnore:
0000000000010bcf         db         "ignore", 0                                 ; DATA XREF=read_file_system_list+1046, read_file_system_list+1625
0000000000010bd6         db  0x6e ; 'n'                                         ; DATA XREF=read_file_system_list+1078, read_file_system_list+1653
0000000000010bd7         db  0x6f ; 'o'
0000000000010bd8         db  0x6e ; 'n'
0000000000010bd9         db  0x65 ; 'e'
0000000000010bda         db  0x00 ; '.'
                     aSmbfs:
0000000000010bdb         db         "smbfs", 0                                  ; DATA XREF=read_file_system_list+1931, read_file_system_list+2007
0000000000010be1         db  0x63 ; 'c'                                         ; DATA XREF=read_file_system_list+1961, read_file_system_list+2037
0000000000010be2         db  0x69 ; 'i'
0000000000010be3         db  0x66 ; 'f'
0000000000010be4         db  0x73 ; 's'
0000000000010be5         db  0x00 ; '.'
                     aHosts:
0000000000010be6         db         "-hosts", 0                                 ; DATA XREF=read_file_system_list+1114, read_file_system_list+1886
                     aEtcmtab:
0000000000010bed         db         "/etc/mtab", 0                              ; DATA XREF=read_file_system_list+1159
0000000000010bf7         db  0x62 ; 'b'                                         ; DATA XREF=read_file_system_list+1216
0000000000010bf8         db  0x69 ; 'i'
0000000000010bf9         db  0x6e ; 'n'
0000000000010bfa         db  0x64 ; 'd'
0000000000010bfb         db  0x00 ; '.'
0000000000010bfc         db  0x00 ; '.'
0000000000010bfd         db  0x00 ; '.'
0000000000010bfe         db  0x00 ; '.'
0000000000010bff         db  0x00 ; '.'
                     aUUUuNsnNsnc:
0000000000010c00         db         "%*u %*u %u:%u %n%*s%n %n%*s%n%c", 0        ; DATA XREF=read_file_system_list+144
                     aInvalidArgumen:
0000000000010c20         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
0000000000010c3b         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
0000000000010c58         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
0000000000010c6d         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
0000000000010c75         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
0000000000010c76         db  0x20 ; ' '
0000000000010c77         db  0x25 ; '%'                                         ; DATA XREF=main+1414, main+5270, get_dev+318, close_stdout+143, same_nameat.part.0+223, same_nameat.part.0+263, xalloc_die+29
0000000000010c78         db  0x73 ; 's'
0000000000010c79         db  0x00 ; '.'
0000000000010c7a         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
0000000000010c7b         db  0x00 ; '.'
                     aPosix:
0000000000010c7c         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
0000000000010c82         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
                     switch_table_10c88:        // switch_table
0000000000010c88         dd         vasnprintf.loc_dbc6-switch_table_10c88, vasnprintf.loc_d660-switch_table_10c88, vasnprintf.loc_d630-switch_table_10c88, vasnprintf.loc_d5a8-switch_table_10c88 ; switch table used at 0xd1fb containing 18 entries, DATA XREF=vasnprintf+1357
0000000000010c98         dd         vasnprintf.loc_d568-switch_table_10c88, 2 dup (vasnprintf.loc_d338-switch_table_10c88), 4 dup (vasnprintf.loc_d200-switch_table_10c88), vasnprintf.loc_d4e8-switch_table_10c88
0000000000010cb8         dd         vasnprintf.loc_d460-switch_table_10c88, 2 dup (vasnprintf.loc_d338-switch_table_10c88), 3 dup (vasnprintf.loc_d200-switch_table_10c88)
                     switch_table_10cd0:        // switch_table
0000000000010cd0         dd         vasnprintf.loc_da10-switch_table_10cd0, vasnprintf.loc_da30-switch_table_10cd0, vasnprintf.loc_da20-switch_table_10cd0, 2 dup (vasnprintf.loc_d8e0-switch_table_10cd0) ; switch table used at 0xd7a0 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
0000000000010ce4         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
0000000000010ceb         db  0x00 ; '.'
0000000000010cec         db  0x00 ; '.'
0000000000010ced         db  0x00 ; '.'
0000000000010cee         db  0x00 ; '.'
0000000000010cef         db  0x00 ; '.'
0000000000010cf0         db  0xd0 ; '.'                                         ; DATA XREF=printf_fetchargs+10
0000000000010cf1         db  0xd3 ; '.'
0000000000010cf2         db  0xff ; '.'
0000000000010cf3         db  0xff ; '.'
0000000000010cf4         db  0x1c ; '.'
0000000000010cf5         db  0xd4 ; '.'
0000000000010cf6         db  0xff ; '.'
0000000000010cf7         db  0xff ; '.'
0000000000010cf8         db  0x1c ; '.'
0000000000010cf9         db  0xd4 ; '.'
0000000000010cfa         db  0xff ; '.'
0000000000010cfb         db  0xff ; '.'
0000000000010cfc         db  0x3e ; '>'
0000000000010cfd         db  0xd4 ; '.'
0000000000010cfe         db  0xff ; '.'
0000000000010cff         db  0xff ; '.'
0000000000010d00         db  0x3e ; '>'
0000000000010d01         db  0xd4 ; '.'
0000000000010d02         db  0xff ; '.'
0000000000010d03         db  0xff ; '.'
0000000000010d04         db  0xfa ; '.'
0000000000010d05         db  0xd3 ; '.'
0000000000010d06         db  0xff ; '.'
0000000000010d07         db  0xff ; '.'
0000000000010d08         db  0xfa ; '.'
0000000000010d09         db  0xd3 ; '.'
0000000000010d0a         db  0xff ; '.'
0000000000010d0b         db  0xff ; '.'
0000000000010d0c         db  0xd6 ; '.'
0000000000010d0d         db  0xd3 ; '.'
0000000000010d0e         db  0xff ; '.'
0000000000010d0f         db  0xff ; '.'
0000000000010d10         db  0xd6 ; '.'
0000000000010d11         db  0xd3 ; '.'
0000000000010d12         db  0xff ; '.'
0000000000010d13         db  0xff ; '.'
0000000000010d14         db  0xd6 ; '.'
0000000000010d15         db  0xd3 ; '.'
0000000000010d16         db  0xff ; '.'
0000000000010d17         db  0xff ; '.'
0000000000010d18         db  0xd6 ; '.'
0000000000010d19         db  0xd3 ; '.'
0000000000010d1a         db  0xff ; '.'
0000000000010d1b         db  0xff ; '.'
0000000000010d1c         db  0x92 ; '.'
0000000000010d1d         db  0xd4 ; '.'
0000000000010d1e         db  0xff ; '.'
0000000000010d1f         db  0xff ; '.'
0000000000010d20         db  0xa0 ; '.'
0000000000010d21         db  0xd3 ; '.'
0000000000010d22         db  0xff ; '.'
0000000000010d23         db  0xff ; '.'
0000000000010d24         db  0xfa ; '.'
0000000000010d25         db  0xd3 ; '.'
0000000000010d26         db  0xff ; '.'
0000000000010d27         db  0xff ; '.'
0000000000010d28         db  0xfa ; '.'
0000000000010d29         db  0xd3 ; '.'
0000000000010d2a         db  0xff ; '.'
0000000000010d2b         db  0xff ; '.'
0000000000010d2c         db  0x64 ; 'd'
0000000000010d2d         db  0xd4 ; '.'
0000000000010d2e         db  0xff ; '.'
0000000000010d2f         db  0xff ; '.'
0000000000010d30         db  0xc0 ; '.'
0000000000010d31         db  0xd4 ; '.'
0000000000010d32         db  0xff ; '.'
0000000000010d33         db  0xff ; '.'
0000000000010d34         db  0xd6 ; '.'
0000000000010d35         db  0xd3 ; '.'
0000000000010d36         db  0xff ; '.'
0000000000010d37         db  0xff ; '.'
0000000000010d38         db  0xd6 ; '.'
0000000000010d39         db  0xd3 ; '.'
0000000000010d3a         db  0xff ; '.'
0000000000010d3b         db  0xff ; '.'
0000000000010d3c         db  0xd6 ; '.'
0000000000010d3d         db  0xd3 ; '.'
0000000000010d3e         db  0xff ; '.'
0000000000010d3f         db  0xff ; '.'
0000000000010d40         db  0xd6 ; '.'
0000000000010d41         db  0xd3 ; '.'
0000000000010d42         db  0xff ; '.'
0000000000010d43         db  0xff ; '.'
0000000000010d44         db  0xd6 ; '.'
0000000000010d45         db  0xd3 ; '.'
0000000000010d46         db  0xff ; '.'
0000000000010d47         db  0xff ; '.'
0000000000010d48         db  0xd6 ; '.'
0000000000010d49         db  0xd3 ; '.'
0000000000010d4a         db  0xff ; '.'
0000000000010d4b         db  0xff ; '.'
0000000000010d4c         db  0x00 ; '.'
0000000000010d4d         db  0x00 ; '.'
0000000000010d4e         db  0x00 ; '.'
0000000000010d4f         db  0x00 ; '.'
                     wide_null_string.2696:
0000000000010d50         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
0000000000010d51         db  0x00 ; '.'
0000000000010d52         db  0x00 ; '.'
0000000000010d53         db  0x00 ; '.'
0000000000010d54         db  0x4e ; 'N'
0000000000010d55         db  0x00 ; '.'
0000000000010d56         db  0x00 ; '.'
0000000000010d57         db  0x00 ; '.'
0000000000010d58         db  0x55 ; 'U'
0000000000010d59         db  0x00 ; '.'
0000000000010d5a         db  0x00 ; '.'
0000000000010d5b         db  0x00 ; '.'
0000000000010d5c         db  0x4c ; 'L'
0000000000010d5d         db  0x00 ; '.'
0000000000010d5e         db  0x00 ; '.'
0000000000010d5f         db  0x00 ; '.'
0000000000010d60         db  0x4c ; 'L'
0000000000010d61         db  0x00 ; '.'
0000000000010d62         db  0x00 ; '.'
0000000000010d63         db  0x00 ; '.'
0000000000010d64         db  0x29 ; ')'
0000000000010d65         db  0x00 ; '.'
0000000000010d66         db  0x00 ; '.'
0000000000010d67         db  0x00 ; '.'
0000000000010d68         db  0x00 ; '.'
0000000000010d69         db  0x00 ; '.'
0000000000010d6a         db  0x00 ; '.'
0000000000010d6b         db  0x00 ; '.'
                     switch_table_10d6c:        // switch_table
0000000000010d6c         dd         printf_parse.loc_e50b-switch_table_10d6c, 27 dup (printf_parse.loc_ea9b-switch_table_10d6c), printf_parse.loc_ea0b-switch_table_10d6c, printf_parse.loc_ea9b-switch_table_10d6c ; switch table used at 0xe495 containing 84 entries, DATA XREF=printf_parse+564
0000000000010de4         dd         printf_parse.loc_ea2c-switch_table_10d6c, printf_parse.loc_ea9b-switch_table_10d6c, 3 dup (printf_parse.loc_ea0b-switch_table_10d6c), 11 dup (printf_parse.loc_ea9b-switch_table_10d6c)
0000000000010e24         dd         printf_parse.loc_e497-switch_table_10d6c, 4 dup (printf_parse.loc_ea9b-switch_table_10d6c), printf_parse.loc_ea3c-switch_table_10d6c, 8 dup (printf_parse.loc_ea9b-switch_table_10d6c)
0000000000010e5c         dd         printf_parse.loc_ea0b-switch_table_10d6c, printf_parse.loc_ea9b-switch_table_10d6c, printf_parse.loc_e998-switch_table_10d6c, printf_parse.loc_e9ab-switch_table_10d6c
0000000000010e6c         dd         3 dup (printf_parse.loc_ea0b-switch_table_10d6c), printf_parse.loc_ea9b-switch_table_10d6c, printf_parse.loc_e9ab-switch_table_10d6c, 4 dup (printf_parse.loc_ea9b-switch_table_10d6c)
0000000000010e90         dd         printf_parse.loc_e94c-switch_table_10d6c, printf_parse.loc_ea3c-switch_table_10d6c, printf_parse.loc_ea90-switch_table_10d6c, 2 dup (printf_parse.loc_ea9b-switch_table_10d6c)
0000000000010ea4         dd         printf_parse.loc_e9f8-switch_table_10d6c, printf_parse.loc_ea9b-switch_table_10d6c, printf_parse.loc_ea3c-switch_table_10d6c, 2 dup (printf_parse.loc_ea9b-switch_table_10d6c)
0000000000010eb8         dd         printf_parse.loc_ea3c-switch_table_10d6c


        ; Section .eh_frame_hdr
        ; Range: [0x10ebc; 0x113f8[ (1340 bytes)
        ; File offset : [69308; 70648[ (1340 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000010ebc         db  0x01 ; '.'
0000000000010ebd         db  0x1b ; '.'
0000000000010ebe         db  0x03 ; '.'
0000000000010ebf         db  0x3b ; ';'
0000000000010ec0         db  0x38 ; '8'
0000000000010ec1         db  0x05 ; '.'
0000000000010ec2         db  0x00 ; '.'
0000000000010ec3         db  0x00 ; '.'
0000000000010ec4         db  0xa6 ; '.'
0000000000010ec5         db  0x00 ; '.'
0000000000010ec6         db  0x00 ; '.'
0000000000010ec7         db  0x00 ; '.'
0000000000010ec8         db  0x84 ; '.'
0000000000010ec9         db  0x11 ; '.'
0000000000010eca         db  0xff ; '.'
0000000000010ecb         db  0xff ; '.'
0000000000010ecc         db  0x84 ; '.'
0000000000010ecd         db  0x05 ; '.'
0000000000010ece         db  0x00 ; '.'
0000000000010ecf         db  0x00 ; '.'
0000000000010ed0         db  0xf4 ; '.'
0000000000010ed1         db  0x16 ; '.'
0000000000010ed2         db  0xff ; '.'
0000000000010ed3         db  0xff ; '.'
0000000000010ed4         db  0xac ; '.'
0000000000010ed5         db  0x05 ; '.'
0000000000010ed6         db  0x00 ; '.'
0000000000010ed7         db  0x00 ; '.'
0000000000010ed8         db  0x04 ; '.'
0000000000010ed9         db  0x17 ; '.'
0000000000010eda         db  0xff ; '.'
0000000000010edb         db  0xff ; '.'
0000000000010edc         db  0x70 ; 'p'
0000000000010edd         db  0x08 ; '.'
0000000000010ede         db  0x00 ; '.'
0000000000010edf         db  0x00 ; '.'
0000000000010ee0         db  0xe4 ; '.'
0000000000010ee1         db  0x2c ; ','
0000000000010ee2         db  0xff ; '.'
0000000000010ee3         db  0xff ; '.'
0000000000010ee4         db  0x54 ; 'T'
0000000000010ee5         db  0x05 ; '.'
0000000000010ee6         db  0x00 ; '.'
0000000000010ee7         db  0x00 ; '.'
0000000000010ee8         db  0xf4 ; '.'
0000000000010ee9         db  0x2d ; '-'
0000000000010eea         db  0xff ; '.'
0000000000010eeb         db  0xff ; '.'
0000000000010eec         db  0xc4 ; '.'
0000000000010eed         db  0x05 ; '.'
0000000000010eee         db  0x00 ; '.'
0000000000010eef         db  0x00 ; '.'
0000000000010ef0         db  0x24 ; '$'
0000000000010ef1         db  0x2e ; '.'
0000000000010ef2         db  0xff ; '.'
0000000000010ef3         db  0xff ; '.'
0000000000010ef4         db  0xd8 ; '.'
0000000000010ef5         db  0x05 ; '.'
0000000000010ef6         db  0x00 ; '.'
0000000000010ef7         db  0x00 ; '.'
0000000000010ef8         db  0x34 ; '4'
0000000000010ef9         db  0x2e ; '.'
0000000000010efa         db  0xff ; '.'
0000000000010efb         db  0xff ; '.'
0000000000010efc         db  0xec ; '.'
0000000000010efd         db  0x05 ; '.'
0000000000010efe         db  0x00 ; '.'
0000000000010eff         db  0x00 ; '.'
0000000000010f00         db  0x44 ; 'D'
0000000000010f01         db  0x2e ; '.'
0000000000010f02         db  0xff ; '.'
0000000000010f03         db  0xff ; '.'
0000000000010f04         db  0x00 ; '.'
0000000000010f05         db  0x06 ; '.'
0000000000010f06         db  0x00 ; '.'
0000000000010f07         db  0x00 ; '.'
0000000000010f08         db  0x94 ; '.'
0000000000010f09         db  0x2e ; '.'
0000000000010f0a         db  0xff ; '.'
0000000000010f0b         db  0xff ; '.'
0000000000010f0c         db  0x38 ; '8'
0000000000010f0d         db  0x06 ; '.'
0000000000010f0e         db  0x00 ; '.'
0000000000010f0f         db  0x00 ; '.'
0000000000010f10         db  0xf4 ; '.'
0000000000010f11         db  0x2e ; '.'
0000000000010f12         db  0xff ; '.'
0000000000010f13         db  0xff ; '.'
0000000000010f14         db  0x7c ; '|'
0000000000010f15         db  0x06 ; '.'
0000000000010f16         db  0x00 ; '.'
0000000000010f17         db  0x00 ; '.'
0000000000010f18         db  0x04 ; '.'
0000000000010f19         db  0x2f ; '/'
0000000000010f1a         db  0xff ; '.'
0000000000010f1b         db  0xff ; '.'
0000000000010f1c         db  0x90 ; '.'
0000000000010f1d         db  0x06 ; '.'
0000000000010f1e         db  0x00 ; '.'
0000000000010f1f         db  0x00 ; '.'
0000000000010f20         db  0x94 ; '.'
0000000000010f21         db  0x2f ; '/'
0000000000010f22         db  0xff ; '.'
0000000000010f23         db  0xff ; '.'
0000000000010f24         db  0xb0 ; '.'
0000000000010f25         db  0x06 ; '.'
0000000000010f26         db  0x00 ; '.'
0000000000010f27         db  0x00 ; '.'
0000000000010f28         db  0x04 ; '.'
0000000000010f29         db  0x30 ; '0'
0000000000010f2a         db  0xff ; '.'
0000000000010f2b         db  0xff ; '.'
0000000000010f2c         db  0xc8 ; '.'
0000000000010f2d         db  0x06 ; '.'
0000000000010f2e         db  0x00 ; '.'
0000000000010f2f         db  0x00 ; '.'
0000000000010f30         db  0x54 ; 'T'
0000000000010f31         db  0x30 ; '0'
0000000000010f32         db  0xff ; '.'
0000000000010f33         db  0xff ; '.'
0000000000010f34         db  0xe4 ; '.'
0000000000010f35         db  0x06 ; '.'
0000000000010f36         db  0x00 ; '.'
0000000000010f37         db  0x00 ; '.'
0000000000010f38         db  0xe4 ; '.'
0000000000010f39         db  0x32 ; '2'
0000000000010f3a         db  0xff ; '.'
0000000000010f3b         db  0xff ; '.'
0000000000010f3c         db  0x34 ; '4'
0000000000010f3d         db  0x07 ; '.'
0000000000010f3e         db  0x00 ; '.'
0000000000010f3f         db  0x00 ; '.'
0000000000010f40         db  0xb4 ; '.'
0000000000010f41         db  0x33 ; '3'
0000000000010f42         db  0xff ; '.'
0000000000010f43         db  0xff ; '.'
0000000000010f44         db  0x60 ; '`'
0000000000010f45         db  0x07 ; '.'
0000000000010f46         db  0x00 ; '.'
0000000000010f47         db  0x00 ; '.'
0000000000010f48         db  0x94 ; '.'
0000000000010f49         db  0x34 ; '4'
0000000000010f4a         db  0xff ; '.'
0000000000010f4b         db  0xff ; '.'
0000000000010f4c         db  0xac ; '.'
0000000000010f4d         db  0x07 ; '.'
0000000000010f4e         db  0x00 ; '.'
0000000000010f4f         db  0x00 ; '.'
0000000000010f50         db  0xb4 ; '.'
0000000000010f51         db  0x3e ; '>'
0000000000010f52         db  0xff ; '.'
0000000000010f53         db  0xff ; '.'
0000000000010f54         db  0xf8 ; '.'
0000000000010f55         db  0x07 ; '.'
0000000000010f56         db  0x00 ; '.'
0000000000010f57         db  0x00 ; '.'
0000000000010f58         db  0x54 ; 'T'
0000000000010f59         db  0x43 ; 'C'
0000000000010f5a         db  0xff ; '.'
0000000000010f5b         db  0xff ; '.'
0000000000010f5c         db  0x24 ; '$'
0000000000010f5d         db  0x08 ; '.'
0000000000010f5e         db  0x00 ; '.'
0000000000010f5f         db  0x00 ; '.'
0000000000010f60         db  0xc4 ; '.'
0000000000010f61         db  0x44 ; 'D'
0000000000010f62         db  0xff ; '.'
0000000000010f63         db  0xff ; '.'
0000000000010f64         db  0x3c ; '<'
0000000000010f65         db  0x09 ; '.'
0000000000010f66         db  0x00 ; '.'
0000000000010f67         db  0x00 ; '.'
0000000000010f68         db  0x84 ; '.'
0000000000010f69         db  0x48 ; 'H'
0000000000010f6a         db  0xff ; '.'
0000000000010f6b         db  0xff ; '.'
0000000000010f6c         db  0x6c ; 'l'
0000000000010f6d         db  0x09 ; '.'
0000000000010f6e         db  0x00 ; '.'
0000000000010f6f         db  0x00 ; '.'
0000000000010f70         db  0xc4 ; '.'
0000000000010f71         db  0x4e ; 'N'
0000000000010f72         db  0xff ; '.'
0000000000010f73         db  0xff ; '.'
0000000000010f74         db  0xbc ; '.'
0000000000010f75         db  0x09 ; '.'
0000000000010f76         db  0x00 ; '.'
0000000000010f77         db  0x00 ; '.'
0000000000010f78         db  0xd4 ; '.'
0000000000010f79         db  0x4e ; 'N'
0000000000010f7a         db  0xff ; '.'
0000000000010f7b         db  0xff ; '.'
0000000000010f7c         db  0xd0 ; '.'
0000000000010f7d         db  0x09 ; '.'
0000000000010f7e         db  0x00 ; '.'
0000000000010f7f         db  0x00 ; '.'
0000000000010f80         db  0xe4 ; '.'
0000000000010f81         db  0x4e ; 'N'
0000000000010f82         db  0xff ; '.'
0000000000010f83         db  0xff ; '.'
0000000000010f84         db  0xe4 ; '.'
0000000000010f85         db  0x09 ; '.'
0000000000010f86         db  0x00 ; '.'
0000000000010f87         db  0x00 ; '.'
0000000000010f88         db  0x94 ; '.'
0000000000010f89         db  0x4f ; 'O'
0000000000010f8a         db  0xff ; '.'
0000000000010f8b         db  0xff ; '.'
0000000000010f8c         db  0x14 ; '.'
0000000000010f8d         db  0x0a ; '.'
0000000000010f8e         db  0x00 ; '.'
0000000000010f8f         db  0x00 ; '.'
0000000000010f90         db  0xb4 ; '.'
0000000000010f91         db  0x4f ; 'O'
0000000000010f92         db  0xff ; '.'
0000000000010f93         db  0xff ; '.'
0000000000010f94         db  0x34 ; '4'
0000000000010f95         db  0x0a ; '.'
0000000000010f96         db  0x00 ; '.'
0000000000010f97         db  0x00 ; '.'
0000000000010f98         db  0x14 ; '.'
0000000000010f99         db  0x50 ; 'P'
0000000000010f9a         db  0xff ; '.'
0000000000010f9b         db  0xff ; '.'
0000000000010f9c         db  0x68 ; 'h'
0000000000010f9d         db  0x0a ; '.'
0000000000010f9e         db  0x00 ; '.'
0000000000010f9f         db  0x00 ; '.'
0000000000010fa0         db  0x74 ; 't'
0000000000010fa1         db  0x50 ; 'P'
0000000000010fa2         db  0xff ; '.'
0000000000010fa3         db  0xff ; '.'
0000000000010fa4         db  0x94 ; '.'
0000000000010fa5         db  0x0a ; '.'
0000000000010fa6         db  0x00 ; '.'
0000000000010fa7         db  0x00 ; '.'
0000000000010fa8         db  0xd4 ; '.'
0000000000010fa9         db  0x50 ; 'P'
0000000000010faa         db  0xff ; '.'
0000000000010fab         db  0xff ; '.'
0000000000010fac         db  0xa8 ; '.'
0000000000010fad         db  0x0a ; '.'
0000000000010fae         db  0x00 ; '.'
0000000000010faf         db  0x00 ; '.'
0000000000010fb0         db  0x24 ; '$'
0000000000010fb1         db  0x51 ; 'Q'
0000000000010fb2         db  0xff ; '.'
0000000000010fb3         db  0xff ; '.'
0000000000010fb4         db  0xd4 ; '.'
0000000000010fb5         db  0x0a ; '.'
0000000000010fb6         db  0x00 ; '.'
0000000000010fb7         db  0x00 ; '.'
0000000000010fb8         db  0xb4 ; '.'
0000000000010fb9         db  0x51 ; 'Q'
0000000000010fba         db  0xff ; '.'
0000000000010fbb         db  0xff ; '.'
0000000000010fbc         db  0x34 ; '4'
0000000000010fbd         db  0x0b ; '.'
0000000000010fbe         db  0x00 ; '.'
0000000000010fbf         db  0x00 ; '.'
0000000000010fc0         db  0x14 ; '.'
0000000000010fc1         db  0x52 ; 'R'
0000000000010fc2         db  0xff ; '.'
0000000000010fc3         db  0xff ; '.'
0000000000010fc4         db  0x54 ; 'T'
0000000000010fc5         db  0x0b ; '.'
0000000000010fc6         db  0x00 ; '.'
0000000000010fc7         db  0x00 ; '.'
0000000000010fc8         db  0xb4 ; '.'
0000000000010fc9         db  0x52 ; 'R'
0000000000010fca         db  0xff ; '.'
0000000000010fcb         db  0xff ; '.'
0000000000010fcc         db  0x68 ; 'h'
0000000000010fcd         db  0x0b ; '.'
0000000000010fce         db  0x00 ; '.'
0000000000010fcf         db  0x00 ; '.'
0000000000010fd0         db  0xc4 ; '.'
0000000000010fd1         db  0x52 ; 'R'
0000000000010fd2         db  0xff ; '.'
0000000000010fd3         db  0xff ; '.'
0000000000010fd4         db  0x7c ; '|'
0000000000010fd5         db  0x0b ; '.'
0000000000010fd6         db  0x00 ; '.'
0000000000010fd7         db  0x00 ; '.'
0000000000010fd8         db  0xd4 ; '.'
0000000000010fd9         db  0x52 ; 'R'
0000000000010fda         db  0xff ; '.'
0000000000010fdb         db  0xff ; '.'
0000000000010fdc         db  0x90 ; '.'
0000000000010fdd         db  0x0b ; '.'
0000000000010fde         db  0x00 ; '.'
0000000000010fdf         db  0x00 ; '.'
0000000000010fe0         db  0x04 ; '.'
0000000000010fe1         db  0x53 ; 'S'
0000000000010fe2         db  0xff ; '.'
0000000000010fe3         db  0xff ; '.'
0000000000010fe4         db  0xac ; '.'
0000000000010fe5         db  0x0b ; '.'
0000000000010fe6         db  0x00 ; '.'
0000000000010fe7         db  0x00 ; '.'
0000000000010fe8         db  0x24 ; '$'
0000000000010fe9         db  0x54 ; 'T'
0000000000010fea         db  0xff ; '.'
0000000000010feb         db  0xff ; '.'
0000000000010fec         db  0x0c ; '.'
0000000000010fed         db  0x0c ; '.'
0000000000010fee         db  0x00 ; '.'
0000000000010fef         db  0x00 ; '.'
0000000000010ff0         db  0xa4 ; '.'
0000000000010ff1         db  0x54 ; 'T'
0000000000010ff2         db  0xff ; '.'
0000000000010ff3         db  0xff ; '.'
0000000000010ff4         db  0x20 ; ' '
0000000000010ff5         db  0x0c ; '.'
0000000000010ff6         db  0x00 ; '.'
0000000000010ff7         db  0x00 ; '.'
0000000000010ff8         db  0xe4 ; '.'
0000000000010ff9         db  0x55 ; 'U'
0000000000010ffa         db  0xff ; '.'
0000000000010ffb         db  0xff ; '.'
0000000000010ffc         db  0x80 ; '.'
0000000000010ffd         db  0x0c ; '.'
0000000000010ffe         db  0x00 ; '.'
0000000000010fff         db  0x00 ; '.'
0000000000011000         db  0xf4 ; '.'
0000000000011001         db  0x55 ; 'U'
0000000000011002         db  0xff ; '.'
0000000000011003         db  0xff ; '.'
0000000000011004         db  0x94 ; '.'
0000000000011005         db  0x0c ; '.'
0000000000011006         db  0x00 ; '.'
0000000000011007         db  0x00 ; '.'
0000000000011008         db  0x04 ; '.'
0000000000011009         db  0x56 ; 'V'
000000000001100a         db  0xff ; '.'
000000000001100b         db  0xff ; '.'
000000000001100c         db  0xa8 ; '.'
000000000001100d         db  0x0c ; '.'
000000000001100e         db  0x00 ; '.'
000000000001100f         db  0x00 ; '.'
0000000000011010         db  0x14 ; '.'
0000000000011011         db  0x56 ; 'V'
0000000000011012         db  0xff ; '.'
0000000000011013         db  0xff ; '.'
0000000000011014         db  0xbc ; '.'
0000000000011015         db  0x0c ; '.'
0000000000011016         db  0x00 ; '.'
0000000000011017         db  0x00 ; '.'
0000000000011018         db  0x64 ; 'd'
0000000000011019         db  0x56 ; 'V'
000000000001101a         db  0xff ; '.'
000000000001101b         db  0xff ; '.'
000000000001101c         db  0xd0 ; '.'
000000000001101d         db  0x0c ; '.'
000000000001101e         db  0x00 ; '.'
000000000001101f         db  0x00 ; '.'
0000000000011020         db  0xc4 ; '.'
0000000000011021         db  0x56 ; 'V'
0000000000011022         db  0xff ; '.'
0000000000011023         db  0xff ; '.'
0000000000011024         db  0xe4 ; '.'
0000000000011025         db  0x0c ; '.'
0000000000011026         db  0x00 ; '.'
0000000000011027         db  0x00 ; '.'
0000000000011028         db  0x14 ; '.'
0000000000011029         db  0x58 ; 'X'
000000000001102a         db  0xff ; '.'
000000000001102b         db  0xff ; '.'
000000000001102c         db  0x20 ; ' '
000000000001102d         db  0x0d ; '.'
000000000001102e         db  0x00 ; '.'
000000000001102f         db  0x00 ; '.'
0000000000011030         db  0x74 ; 't'
0000000000011031         db  0x58 ; 'X'
0000000000011032         db  0xff ; '.'
0000000000011033         db  0xff ; '.'
0000000000011034         db  0x58 ; 'X'
0000000000011035         db  0x0d ; '.'
0000000000011036         db  0x00 ; '.'
0000000000011037         db  0x00 ; '.'
0000000000011038         db  0xc4 ; '.'
0000000000011039         db  0x58 ; 'X'
000000000001103a         db  0xff ; '.'
000000000001103b         db  0xff ; '.'
000000000001103c         db  0x6c ; 'l'
000000000001103d         db  0x0d ; '.'
000000000001103e         db  0x00 ; '.'
000000000001103f         db  0x00 ; '.'
0000000000011040         db  0x44 ; 'D'
0000000000011041         db  0x59 ; 'Y'
0000000000011042         db  0xff ; '.'
0000000000011043         db  0xff ; '.'
0000000000011044         db  0xa0 ; '.'
0000000000011045         db  0x0d ; '.'
0000000000011046         db  0x00 ; '.'
0000000000011047         db  0x00 ; '.'
0000000000011048         db  0xb4 ; '.'
0000000000011049         db  0x59 ; 'Y'
000000000001104a         db  0xff ; '.'
000000000001104b         db  0xff ; '.'
000000000001104c         db  0xb4 ; '.'
000000000001104d         db  0x0d ; '.'
000000000001104e         db  0x00 ; '.'
000000000001104f         db  0x00 ; '.'
0000000000011050         db  0x24 ; '$'
0000000000011051         db  0x5a ; 'Z'
0000000000011052         db  0xff ; '.'
0000000000011053         db  0xff ; '.'
0000000000011054         db  0x00 ; '.'
0000000000011055         db  0x0e ; '.'
0000000000011056         db  0x00 ; '.'
0000000000011057         db  0x00 ; '.'
0000000000011058         db  0x64 ; 'd'
0000000000011059         db  0x5a ; 'Z'
000000000001105a         db  0xff ; '.'
000000000001105b         db  0xff ; '.'
000000000001105c         db  0x14 ; '.'
000000000001105d         db  0x0e ; '.'
000000000001105e         db  0x00 ; '.'
000000000001105f         db  0x00 ; '.'
0000000000011060         db  0x84 ; '.'
0000000000011061         db  0x5a ; 'Z'
0000000000011062         db  0xff ; '.'
0000000000011063         db  0xff ; '.'
0000000000011064         db  0x28 ; '('
0000000000011065         db  0x0e ; '.'
0000000000011066         db  0x00 ; '.'
0000000000011067         db  0x00 ; '.'
0000000000011068         db  0x44 ; 'D'
0000000000011069         db  0x5c ; '\'
000000000001106a         db  0xff ; '.'
000000000001106b         db  0xff ; '.'
000000000001106c         db  0x74 ; 't'
000000000001106d         db  0x0e ; '.'
000000000001106e         db  0x00 ; '.'
000000000001106f         db  0x00 ; '.'
0000000000011070         db  0xd4 ; '.'
0000000000011071         db  0x5c ; '\'
0000000000011072         db  0xff ; '.'
0000000000011073         db  0xff ; '.'
0000000000011074         db  0xa0 ; '.'
0000000000011075         db  0x0e ; '.'
0000000000011076         db  0x00 ; '.'
0000000000011077         db  0x00 ; '.'
0000000000011078         db  0xb4 ; '.'
0000000000011079         db  0x5d ; ']'
000000000001107a         db  0xff ; '.'
000000000001107b         db  0xff ; '.'
000000000001107c         db  0xcc ; '.'
000000000001107d         db  0x0e ; '.'
000000000001107e         db  0x00 ; '.'
000000000001107f         db  0x00 ; '.'
0000000000011080         db  0xf4 ; '.'
0000000000011081         db  0x5f ; '_'
0000000000011082         db  0xff ; '.'
0000000000011083         db  0xff ; '.'
0000000000011084         db  0x04 ; '.'
0000000000011085         db  0x0f ; '.'
0000000000011086         db  0x00 ; '.'
0000000000011087         db  0x00 ; '.'
0000000000011088         db  0x84 ; '.'
0000000000011089         db  0x62 ; 'b'
000000000001108a         db  0xff ; '.'
000000000001108b         db  0xff ; '.'
000000000001108c         db  0x40 ; '@'
000000000001108d         db  0x0f ; '.'
000000000001108e         db  0x00 ; '.'
000000000001108f         db  0x00 ; '.'
0000000000011090         db  0xe4 ; '.'
0000000000011091         db  0x62 ; 'b'
0000000000011092         db  0xff ; '.'
0000000000011093         db  0xff ; '.'
0000000000011094         db  0x64 ; 'd'
0000000000011095         db  0x0f ; '.'
0000000000011096         db  0x00 ; '.'
0000000000011097         db  0x00 ; '.'
0000000000011098         db  0xf4 ; '.'
0000000000011099         db  0x64 ; 'd'
000000000001109a         db  0xff ; '.'
000000000001109b         db  0xff ; '.'
000000000001109c         db  0x9c ; '.'
000000000001109d         db  0x0f ; '.'
000000000001109e         db  0x00 ; '.'
000000000001109f         db  0x00 ; '.'
00000000000110a0         db  0x24 ; '$'
00000000000110a1         db  0x65 ; 'e'
00000000000110a2         db  0xff ; '.'
00000000000110a3         db  0xff ; '.'
00000000000110a4         db  0xc4 ; '.'
00000000000110a5         db  0x0f ; '.'
00000000000110a6         db  0x00 ; '.'
00000000000110a7         db  0x00 ; '.'
00000000000110a8         db  0x34 ; '4'
00000000000110a9         db  0x65 ; 'e'
00000000000110aa         db  0xff ; '.'
00000000000110ab         db  0xff ; '.'
00000000000110ac         db  0xd8 ; '.'
00000000000110ad         db  0x0f ; '.'
00000000000110ae         db  0x00 ; '.'
00000000000110af         db  0x00 ; '.'
00000000000110b0         db  0x64 ; 'd'
00000000000110b1         db  0x65 ; 'e'
00000000000110b2         db  0xff ; '.'
00000000000110b3         db  0xff ; '.'
00000000000110b4         db  0xf0 ; '.'
00000000000110b5         db  0x0f ; '.'
00000000000110b6         db  0x00 ; '.'
00000000000110b7         db  0x00 ; '.'
00000000000110b8         db  0xa4 ; '.'
00000000000110b9         db  0x65 ; 'e'
00000000000110ba         db  0xff ; '.'
00000000000110bb         db  0xff ; '.'
00000000000110bc         db  0x08 ; '.'
00000000000110bd         db  0x10 ; '.'
00000000000110be         db  0x00 ; '.'
00000000000110bf         db  0x00 ; '.'
00000000000110c0         db  0xc4 ; '.'
00000000000110c1         db  0x65 ; 'e'
00000000000110c2         db  0xff ; '.'
00000000000110c3         db  0xff ; '.'
00000000000110c4         db  0x24 ; '$'
00000000000110c5         db  0x10 ; '.'
00000000000110c6         db  0x00 ; '.'
00000000000110c7         db  0x00 ; '.'
00000000000110c8         db  0x94 ; '.'
00000000000110c9         db  0x66 ; 'f'
00000000000110ca         db  0xff ; '.'
00000000000110cb         db  0xff ; '.'
00000000000110cc         db  0x38 ; '8'
00000000000110cd         db  0x10 ; '.'
00000000000110ce         db  0x00 ; '.'
00000000000110cf         db  0x00 ; '.'
00000000000110d0         db  0xa4 ; '.'
00000000000110d1         db  0x70 ; 'p'
00000000000110d2         db  0xff ; '.'
00000000000110d3         db  0xff ; '.'
00000000000110d4         db  0xe0 ; '.'
00000000000110d5         db  0x10 ; '.'
00000000000110d6         db  0x00 ; '.'
00000000000110d7         db  0x00 ; '.'
00000000000110d8         db  0x94 ; '.'
00000000000110d9         db  0x72 ; 'r'
00000000000110da         db  0xff ; '.'
00000000000110db         db  0xff ; '.'
00000000000110dc         db  0x1c ; '.'
00000000000110dd         db  0x11 ; '.'
00000000000110de         db  0x00 ; '.'
00000000000110df         db  0x00 ; '.'
00000000000110e0         db  0xe4 ; '.'
00000000000110e1         db  0x72 ; 'r'
00000000000110e2         db  0xff ; '.'
00000000000110e3         db  0xff ; '.'
00000000000110e4         db  0x34 ; '4'
00000000000110e5         db  0x11 ; '.'
00000000000110e6         db  0x00 ; '.'
00000000000110e7         db  0x00 ; '.'
00000000000110e8         db  0xb4 ; '.'
00000000000110e9         db  0x76 ; 'v'
00000000000110ea         db  0xff ; '.'
00000000000110eb         db  0xff ; '.'
00000000000110ec         db  0x80 ; '.'
00000000000110ed         db  0x11 ; '.'
00000000000110ee         db  0x00 ; '.'
00000000000110ef         db  0x00 ; '.'
00000000000110f0         db  0x54 ; 'T'
00000000000110f1         db  0x77 ; 'w'
00000000000110f2         db  0xff ; '.'
00000000000110f3         db  0xff ; '.'
00000000000110f4         db  0xcc ; '.'
00000000000110f5         db  0x11 ; '.'
00000000000110f6         db  0x00 ; '.'
00000000000110f7         db  0x00 ; '.'
00000000000110f8         db  0x14 ; '.'
00000000000110f9         db  0x79 ; 'y'
00000000000110fa         db  0xff ; '.'
00000000000110fb         db  0xff ; '.'
00000000000110fc         db  0x18 ; '.'
00000000000110fd         db  0x12 ; '.'
00000000000110fe         db  0x00 ; '.'
00000000000110ff         db  0x00 ; '.'
0000000000011100         db  0x44 ; 'D'
0000000000011101         db  0x79 ; 'y'
0000000000011102         db  0xff ; '.'
0000000000011103         db  0xff ; '.'
0000000000011104         db  0x44 ; 'D'
0000000000011105         db  0x12 ; '.'
0000000000011106         db  0x00 ; '.'
0000000000011107         db  0x00 ; '.'
0000000000011108         db  0xe4 ; '.'
0000000000011109         db  0x79 ; 'y'
000000000001110a         db  0xff ; '.'
000000000001110b         db  0xff ; '.'
000000000001110c         db  0x64 ; 'd'
000000000001110d         db  0x12 ; '.'
000000000001110e         db  0x00 ; '.'
000000000001110f         db  0x00 ; '.'
0000000000011110         db  0xd4 ; '.'
0000000000011111         db  0x7a ; 'z'
0000000000011112         db  0xff ; '.'
0000000000011113         db  0xff ; '.'
0000000000011114         db  0xa8 ; '.'
0000000000011115         db  0x12 ; '.'
0000000000011116         db  0x00 ; '.'
0000000000011117         db  0x00 ; '.'
0000000000011118         db  0x14 ; '.'
0000000000011119         db  0x8d ; '.'
000000000001111a         db  0xff ; '.'
000000000001111b         db  0xff ; '.'
000000000001111c         db  0x20 ; ' '
000000000001111d         db  0x13 ; '.'
000000000001111e         db  0x00 ; '.'
000000000001111f         db  0x00 ; '.'
0000000000011120         db  0xc4 ; '.'
0000000000011121         db  0x8e ; '.'
0000000000011122         db  0xff ; '.'
0000000000011123         db  0xff ; '.'
0000000000011124         db  0x8c ; '.'
0000000000011125         db  0x13 ; '.'
0000000000011126         db  0x00 ; '.'
0000000000011127         db  0x00 ; '.'
0000000000011128         db  0x04 ; '.'
0000000000011129         db  0x8f ; '.'
000000000001112a         db  0xff ; '.'
000000000001112b         db  0xff ; '.'
000000000001112c         db  0xb8 ; '.'
000000000001112d         db  0x13 ; '.'
000000000001112e         db  0x00 ; '.'
000000000001112f         db  0x00 ; '.'
0000000000011130         db  0x24 ; '$'
0000000000011131         db  0x8f ; '.'
0000000000011132         db  0xff ; '.'
0000000000011133         db  0xff ; '.'
0000000000011134         db  0xcc ; '.'
0000000000011135         db  0x13 ; '.'
0000000000011136         db  0x00 ; '.'
0000000000011137         db  0x00 ; '.'
0000000000011138         db  0x44 ; 'D'
0000000000011139         db  0x8f ; '.'
000000000001113a         db  0xff ; '.'
000000000001113b         db  0xff ; '.'
000000000001113c         db  0xe0 ; '.'
000000000001113d         db  0x13 ; '.'
000000000001113e         db  0x00 ; '.'
000000000001113f         db  0x00 ; '.'
0000000000011140         db  0x84 ; '.'
0000000000011141         db  0x8f ; '.'
0000000000011142         db  0xff ; '.'
0000000000011143         db  0xff ; '.'
0000000000011144         db  0xf4 ; '.'
0000000000011145         db  0x13 ; '.'
0000000000011146         db  0x00 ; '.'
0000000000011147         db  0x00 ; '.'
0000000000011148         db  0xa4 ; '.'
0000000000011149         db  0x8f ; '.'
000000000001114a         db  0xff ; '.'
000000000001114b         db  0xff ; '.'
000000000001114c         db  0x08 ; '.'
000000000001114d         db  0x14 ; '.'
000000000001114e         db  0x00 ; '.'
000000000001114f         db  0x00 ; '.'
0000000000011150         db  0xd4 ; '.'
0000000000011151         db  0x8f ; '.'
0000000000011152         db  0xff ; '.'
0000000000011153         db  0xff ; '.'
0000000000011154         db  0x1c ; '.'
0000000000011155         db  0x14 ; '.'
0000000000011156         db  0x00 ; '.'
0000000000011157         db  0x00 ; '.'
0000000000011158         db  0x54 ; 'T'
0000000000011159         db  0x90 ; '.'
000000000001115a         db  0xff ; '.'
000000000001115b         db  0xff ; '.'
000000000001115c         db  0x70 ; 'p'
000000000001115d         db  0x14 ; '.'
000000000001115e         db  0x00 ; '.'
000000000001115f         db  0x00 ; '.'
0000000000011160         db  0x44 ; 'D'
0000000000011161         db  0x91 ; '.'
0000000000011162         db  0xff ; '.'
0000000000011163         db  0xff ; '.'
0000000000011164         db  0xdc ; '.'
0000000000011165         db  0x14 ; '.'
0000000000011166         db  0x00 ; '.'
0000000000011167         db  0x00 ; '.'
0000000000011168         db  0x54 ; 'T'
0000000000011169         db  0x91 ; '.'
000000000001116a         db  0xff ; '.'
000000000001116b         db  0xff ; '.'
000000000001116c         db  0xf0 ; '.'
000000000001116d         db  0x14 ; '.'
000000000001116e         db  0x00 ; '.'
000000000001116f         db  0x00 ; '.'
0000000000011170         db  0xf4 ; '.'
0000000000011171         db  0x91 ; '.'
0000000000011172         db  0xff ; '.'
0000000000011173         db  0xff ; '.'
0000000000011174         db  0x1c ; '.'
0000000000011175         db  0x15 ; '.'
0000000000011176         db  0x00 ; '.'
0000000000011177         db  0x00 ; '.'
0000000000011178         db  0x14 ; '.'
0000000000011179         db  0x92 ; '.'
000000000001117a         db  0xff ; '.'
000000000001117b         db  0xff ; '.'
000000000001117c         db  0x30 ; '0'
000000000001117d         db  0x15 ; '.'
000000000001117e         db  0x00 ; '.'
000000000001117f         db  0x00 ; '.'
0000000000011180         db  0x24 ; '$'
0000000000011181         db  0x92 ; '.'
0000000000011182         db  0xff ; '.'
0000000000011183         db  0xff ; '.'
0000000000011184         db  0x44 ; 'D'
0000000000011185         db  0x15 ; '.'
0000000000011186         db  0x00 ; '.'
0000000000011187         db  0x00 ; '.'
0000000000011188         db  0x44 ; 'D'
0000000000011189         db  0x92 ; '.'
000000000001118a         db  0xff ; '.'
000000000001118b         db  0xff ; '.'
000000000001118c         db  0x58 ; 'X'
000000000001118d         db  0x15 ; '.'
000000000001118e         db  0x00 ; '.'
000000000001118f         db  0x00 ; '.'
0000000000011190         db  0x64 ; 'd'
0000000000011191         db  0x92 ; '.'
0000000000011192         db  0xff ; '.'
0000000000011193         db  0xff ; '.'
0000000000011194         db  0x6c ; 'l'
0000000000011195         db  0x15 ; '.'
0000000000011196         db  0x00 ; '.'
0000000000011197         db  0x00 ; '.'
0000000000011198         db  0xf4 ; '.'
0000000000011199         db  0x92 ; '.'
000000000001119a         db  0xff ; '.'
000000000001119b         db  0xff ; '.'
000000000001119c         db  0x88 ; '.'
000000000001119d         db  0x15 ; '.'
000000000001119e         db  0x00 ; '.'
000000000001119f         db  0x00 ; '.'
00000000000111a0         db  0x84 ; '.'
00000000000111a1         db  0x93 ; '.'
00000000000111a2         db  0xff ; '.'
00000000000111a3         db  0xff ; '.'
00000000000111a4         db  0xa4 ; '.'
00000000000111a5         db  0x15 ; '.'
00000000000111a6         db  0x00 ; '.'
00000000000111a7         db  0x00 ; '.'
00000000000111a8         db  0x94 ; '.'
00000000000111a9         db  0x93 ; '.'
00000000000111aa         db  0xff ; '.'
00000000000111ab         db  0xff ; '.'
00000000000111ac         db  0xb8 ; '.'
00000000000111ad         db  0x15 ; '.'
00000000000111ae         db  0x00 ; '.'
00000000000111af         db  0x00 ; '.'
00000000000111b0         db  0xa4 ; '.'
00000000000111b1         db  0x93 ; '.'
00000000000111b2         db  0xff ; '.'
00000000000111b3         db  0xff ; '.'
00000000000111b4         db  0xcc ; '.'
00000000000111b5         db  0x15 ; '.'
00000000000111b6         db  0x00 ; '.'
00000000000111b7         db  0x00 ; '.'
00000000000111b8         db  0x44 ; 'D'
00000000000111b9         db  0x94 ; '.'
00000000000111ba         db  0xff ; '.'
00000000000111bb         db  0xff ; '.'
00000000000111bc         db  0xe8 ; '.'
00000000000111bd         db  0x15 ; '.'
00000000000111be         db  0x00 ; '.'
00000000000111bf         db  0x00 ; '.'
00000000000111c0         db  0x54 ; 'T'
00000000000111c1         db  0x94 ; '.'
00000000000111c2         db  0xff ; '.'
00000000000111c3         db  0xff ; '.'
00000000000111c4         db  0xfc ; '.'
00000000000111c5         db  0x15 ; '.'
00000000000111c6         db  0x00 ; '.'
00000000000111c7         db  0x00 ; '.'
00000000000111c8         db  0x74 ; 't'
00000000000111c9         db  0x94 ; '.'
00000000000111ca         db  0xff ; '.'
00000000000111cb         db  0xff ; '.'
00000000000111cc         db  0x10 ; '.'
00000000000111cd         db  0x16 ; '.'
00000000000111ce         db  0x00 ; '.'
00000000000111cf         db  0x00 ; '.'
00000000000111d0         db  0x84 ; '.'
00000000000111d1         db  0x94 ; '.'
00000000000111d2         db  0xff ; '.'
00000000000111d3         db  0xff ; '.'
00000000000111d4         db  0x24 ; '$'
00000000000111d5         db  0x16 ; '.'
00000000000111d6         db  0x00 ; '.'
00000000000111d7         db  0x00 ; '.'
00000000000111d8         db  0x14 ; '.'
00000000000111d9         db  0x95 ; '.'
00000000000111da         db  0xff ; '.'
00000000000111db         db  0xff ; '.'
00000000000111dc         db  0x40 ; '@'
00000000000111dd         db  0x16 ; '.'
00000000000111de         db  0x00 ; '.'
00000000000111df         db  0x00 ; '.'
00000000000111e0         db  0xb4 ; '.'
00000000000111e1         db  0x95 ; '.'
00000000000111e2         db  0xff ; '.'
00000000000111e3         db  0xff ; '.'
00000000000111e4         db  0x5c ; '\'
00000000000111e5         db  0x16 ; '.'
00000000000111e6         db  0x00 ; '.'
00000000000111e7         db  0x00 ; '.'
00000000000111e8         db  0xc4 ; '.'
00000000000111e9         db  0x95 ; '.'
00000000000111ea         db  0xff ; '.'
00000000000111eb         db  0xff ; '.'
00000000000111ec         db  0x70 ; 'p'
00000000000111ed         db  0x16 ; '.'
00000000000111ee         db  0x00 ; '.'
00000000000111ef         db  0x00 ; '.'
00000000000111f0         db  0xe4 ; '.'
00000000000111f1         db  0x95 ; '.'
00000000000111f2         db  0xff ; '.'
00000000000111f3         db  0xff ; '.'
00000000000111f4         db  0x84 ; '.'
00000000000111f5         db  0x16 ; '.'
00000000000111f6         db  0x00 ; '.'
00000000000111f7         db  0x00 ; '.'
00000000000111f8         db  0x04 ; '.'
00000000000111f9         db  0x96 ; '.'
00000000000111fa         db  0xff ; '.'
00000000000111fb         db  0xff ; '.'
00000000000111fc         db  0x98 ; '.'
00000000000111fd         db  0x16 ; '.'
00000000000111fe         db  0x00 ; '.'
00000000000111ff         db  0x00 ; '.'
0000000000011200         db  0x14 ; '.'
0000000000011201         db  0x96 ; '.'
0000000000011202         db  0xff ; '.'
0000000000011203         db  0xff ; '.'
0000000000011204         db  0xac ; '.'
0000000000011205         db  0x16 ; '.'
0000000000011206         db  0x00 ; '.'
0000000000011207         db  0x00 ; '.'
0000000000011208         db  0x34 ; '4'
0000000000011209         db  0x96 ; '.'
000000000001120a         db  0xff ; '.'
000000000001120b         db  0xff ; '.'
000000000001120c         db  0xc0 ; '.'
000000000001120d         db  0x16 ; '.'
000000000001120e         db  0x00 ; '.'
000000000001120f         db  0x00 ; '.'
0000000000011210         db  0x54 ; 'T'
0000000000011211         db  0x96 ; '.'
0000000000011212         db  0xff ; '.'
0000000000011213         db  0xff ; '.'
0000000000011214         db  0xd4 ; '.'
0000000000011215         db  0x16 ; '.'
0000000000011216         db  0x00 ; '.'
0000000000011217         db  0x00 ; '.'
0000000000011218         db  0x74 ; 't'
0000000000011219         db  0x96 ; '.'
000000000001121a         db  0xff ; '.'
000000000001121b         db  0xff ; '.'
000000000001121c         db  0xec ; '.'
000000000001121d         db  0x16 ; '.'
000000000001121e         db  0x00 ; '.'
000000000001121f         db  0x00 ; '.'
0000000000011220         db  0xa4 ; '.'
0000000000011221         db  0x97 ; '.'
0000000000011222         db  0xff ; '.'
0000000000011223         db  0xff ; '.'
0000000000011224         db  0x28 ; '('
0000000000011225         db  0x17 ; '.'
0000000000011226         db  0x00 ; '.'
0000000000011227         db  0x00 ; '.'
0000000000011228         db  0x44 ; 'D'
0000000000011229         db  0x98 ; '.'
000000000001122a         db  0xff ; '.'
000000000001122b         db  0xff ; '.'
000000000001122c         db  0x88 ; '.'
000000000001122d         db  0x17 ; '.'
000000000001122e         db  0x00 ; '.'
000000000001122f         db  0x00 ; '.'
0000000000011230         db  0x64 ; 'd'
0000000000011231         db  0x98 ; '.'
0000000000011232         db  0xff ; '.'
0000000000011233         db  0xff ; '.'
0000000000011234         db  0x9c ; '.'
0000000000011235         db  0x17 ; '.'
0000000000011236         db  0x00 ; '.'
0000000000011237         db  0x00 ; '.'
0000000000011238         db  0xb4 ; '.'
0000000000011239         db  0x98 ; '.'
000000000001123a         db  0xff ; '.'
000000000001123b         db  0xff ; '.'
000000000001123c         db  0xbc ; '.'
000000000001123d         db  0x17 ; '.'
000000000001123e         db  0x00 ; '.'
000000000001123f         db  0x00 ; '.'
0000000000011240         db  0xd4 ; '.'
0000000000011241         db  0x98 ; '.'
0000000000011242         db  0xff ; '.'
0000000000011243         db  0xff ; '.'
0000000000011244         db  0xd0 ; '.'
0000000000011245         db  0x17 ; '.'
0000000000011246         db  0x00 ; '.'
0000000000011247         db  0x00 ; '.'
0000000000011248         db  0xf4 ; '.'
0000000000011249         db  0x98 ; '.'
000000000001124a         db  0xff ; '.'
000000000001124b         db  0xff ; '.'
000000000001124c         db  0xec ; '.'
000000000001124d         db  0x17 ; '.'
000000000001124e         db  0x00 ; '.'
000000000001124f         db  0x00 ; '.'
0000000000011250         db  0x14 ; '.'
0000000000011251         db  0x9d ; '.'
0000000000011252         db  0xff ; '.'
0000000000011253         db  0xff ; '.'
0000000000011254         db  0x00 ; '.'
0000000000011255         db  0x19 ; '.'
0000000000011256         db  0x00 ; '.'
0000000000011257         db  0x00 ; '.'
0000000000011258         db  0x34 ; '4'
0000000000011259         db  0x9d ; '.'
000000000001125a         db  0xff ; '.'
000000000001125b         db  0xff ; '.'
000000000001125c         db  0x14 ; '.'
000000000001125d         db  0x19 ; '.'
000000000001125e         db  0x00 ; '.'
000000000001125f         db  0x00 ; '.'
0000000000011260         db  0xb4 ; '.'
0000000000011261         db  0x9d ; '.'
0000000000011262         db  0xff ; '.'
0000000000011263         db  0xff ; '.'
0000000000011264         db  0x30 ; '0'
0000000000011265         db  0x19 ; '.'
0000000000011266         db  0x00 ; '.'
0000000000011267         db  0x00 ; '.'
0000000000011268         db  0x94 ; '.'
0000000000011269         db  0x9e ; '.'
000000000001126a         db  0xff ; '.'
000000000001126b         db  0xff ; '.'
000000000001126c         db  0x5c ; '\'
000000000001126d         db  0x19 ; '.'
000000000001126e         db  0x00 ; '.'
000000000001126f         db  0x00 ; '.'
0000000000011270         db  0x14 ; '.'
0000000000011271         db  0x9f ; '.'
0000000000011272         db  0xff ; '.'
0000000000011273         db  0xff ; '.'
0000000000011274         db  0x7c ; '|'
0000000000011275         db  0x19 ; '.'
0000000000011276         db  0x00 ; '.'
0000000000011277         db  0x00 ; '.'
0000000000011278         db  0x34 ; '4'
0000000000011279         db  0x9f ; '.'
000000000001127a         db  0xff ; '.'
000000000001127b         db  0xff ; '.'
000000000001127c         db  0x98 ; '.'
000000000001127d         db  0x19 ; '.'
000000000001127e         db  0x00 ; '.'
000000000001127f         db  0x00 ; '.'
0000000000011280         db  0x64 ; 'd'
0000000000011281         db  0x9f ; '.'
0000000000011282         db  0xff ; '.'
0000000000011283         db  0xff ; '.'
0000000000011284         db  0xac ; '.'
0000000000011285         db  0x19 ; '.'
0000000000011286         db  0x00 ; '.'
0000000000011287         db  0x00 ; '.'
0000000000011288         db  0x74 ; 't'
0000000000011289         db  0x9f ; '.'
000000000001128a         db  0xff ; '.'
000000000001128b         db  0xff ; '.'
000000000001128c         db  0xc0 ; '.'
000000000001128d         db  0x19 ; '.'
000000000001128e         db  0x00 ; '.'
000000000001128f         db  0x00 ; '.'
0000000000011290         db  0xb4 ; '.'
0000000000011291         db  0x9f ; '.'
0000000000011292         db  0xff ; '.'
0000000000011293         db  0xff ; '.'
0000000000011294         db  0xe4 ; '.'
0000000000011295         db  0x19 ; '.'
0000000000011296         db  0x00 ; '.'
0000000000011297         db  0x00 ; '.'
0000000000011298         db  0xe4 ; '.'
0000000000011299         db  0x9f ; '.'
000000000001129a         db  0xff ; '.'
000000000001129b         db  0xff ; '.'
000000000001129c         db  0xf8 ; '.'
000000000001129d         db  0x19 ; '.'
000000000001129e         db  0x00 ; '.'
000000000001129f         db  0x00 ; '.'
00000000000112a0         db  0x74 ; 't'
00000000000112a1         db  0xa0 ; '.'
00000000000112a2         db  0xff ; '.'
00000000000112a3         db  0xff ; '.'
00000000000112a4         db  0x10 ; '.'
00000000000112a5         db  0x1a ; '.'
00000000000112a6         db  0x00 ; '.'
00000000000112a7         db  0x00 ; '.'
00000000000112a8         db  0xc4 ; '.'
00000000000112a9         db  0xa0 ; '.'
00000000000112aa         db  0xff ; '.'
00000000000112ab         db  0xff ; '.'
00000000000112ac         db  0x28 ; '('
00000000000112ad         db  0x1a ; '.'
00000000000112ae         db  0x00 ; '.'
00000000000112af         db  0x00 ; '.'
00000000000112b0         db  0xe4 ; '.'
00000000000112b1         db  0xa0 ; '.'
00000000000112b2         db  0xff ; '.'
00000000000112b3         db  0xff ; '.'
00000000000112b4         db  0x44 ; 'D'
00000000000112b5         db  0x1a ; '.'
00000000000112b6         db  0x00 ; '.'
00000000000112b7         db  0x00 ; '.'
00000000000112b8         db  0x14 ; '.'
00000000000112b9         db  0xa1 ; '.'
00000000000112ba         db  0xff ; '.'
00000000000112bb         db  0xff ; '.'
00000000000112bc         db  0x60 ; '`'
00000000000112bd         db  0x1a ; '.'
00000000000112be         db  0x00 ; '.'
00000000000112bf         db  0x00 ; '.'
00000000000112c0         db  0x44 ; 'D'
00000000000112c1         db  0xa1 ; '.'
00000000000112c2         db  0xff ; '.'
00000000000112c3         db  0xff ; '.'
00000000000112c4         db  0x88 ; '.'
00000000000112c5         db  0x1a ; '.'
00000000000112c6         db  0x00 ; '.'
00000000000112c7         db  0x00 ; '.'
00000000000112c8         db  0x64 ; 'd'
00000000000112c9         db  0xa1 ; '.'
00000000000112ca         db  0xff ; '.'
00000000000112cb         db  0xff ; '.'
00000000000112cc         db  0xa4 ; '.'
00000000000112cd         db  0x1a ; '.'
00000000000112ce         db  0x00 ; '.'
00000000000112cf         db  0x00 ; '.'
00000000000112d0         db  0xa4 ; '.'
00000000000112d1         db  0xa1 ; '.'
00000000000112d2         db  0xff ; '.'
00000000000112d3         db  0xff ; '.'
00000000000112d4         db  0xbc ; '.'
00000000000112d5         db  0x1a ; '.'
00000000000112d6         db  0x00 ; '.'
00000000000112d7         db  0x00 ; '.'
00000000000112d8         db  0xd4 ; '.'
00000000000112d9         db  0xa1 ; '.'
00000000000112da         db  0xff ; '.'
00000000000112db         db  0xff ; '.'
00000000000112dc         db  0xdc ; '.'
00000000000112dd         db  0x1a ; '.'
00000000000112de         db  0x00 ; '.'
00000000000112df         db  0x00 ; '.'
00000000000112e0         db  0x84 ; '.'
00000000000112e1         db  0xa2 ; '.'
00000000000112e2         db  0xff ; '.'
00000000000112e3         db  0xff ; '.'
00000000000112e4         db  0x04 ; '.'
00000000000112e5         db  0x1b ; '.'
00000000000112e6         db  0x00 ; '.'
00000000000112e7         db  0x00 ; '.'
00000000000112e8         db  0xa4 ; '.'
00000000000112e9         db  0xa6 ; '.'
00000000000112ea         db  0xff ; '.'
00000000000112eb         db  0xff ; '.'
00000000000112ec         db  0x54 ; 'T'
00000000000112ed         db  0x1b ; '.'
00000000000112ee         db  0x00 ; '.'
00000000000112ef         db  0x00 ; '.'
00000000000112f0         db  0x64 ; 'd'
00000000000112f1         db  0xa7 ; '.'
00000000000112f2         db  0xff ; '.'
00000000000112f3         db  0xff ; '.'
00000000000112f4         db  0x74 ; 't'
00000000000112f5         db  0x1b ; '.'
00000000000112f6         db  0x00 ; '.'
00000000000112f7         db  0x00 ; '.'
00000000000112f8         db  0xb4 ; '.'
00000000000112f9         db  0xa7 ; '.'
00000000000112fa         db  0xff ; '.'
00000000000112fb         db  0xff ; '.'
00000000000112fc         db  0x90 ; '.'
00000000000112fd         db  0x1b ; '.'
00000000000112fe         db  0x00 ; '.'
00000000000112ff         db  0x00 ; '.'
0000000000011300         db  0xf4 ; '.'
0000000000011301         db  0xa7 ; '.'
0000000000011302         db  0xff ; '.'
0000000000011303         db  0xff ; '.'
0000000000011304         db  0xbc ; '.'
0000000000011305         db  0x1b ; '.'
0000000000011306         db  0x00 ; '.'
0000000000011307         db  0x00 ; '.'
0000000000011308         db  0xd4 ; '.'
0000000000011309         db  0xaa ; '.'
000000000001130a         db  0xff ; '.'
000000000001130b         db  0xff ; '.'
000000000001130c         db  0x0c ; '.'
000000000001130d         db  0x1c ; '.'
000000000001130e         db  0x00 ; '.'
000000000001130f         db  0x00 ; '.'
0000000000011310         db  0x04 ; '.'
0000000000011311         db  0xac ; '.'
0000000000011312         db  0xff ; '.'
0000000000011313         db  0xff ; '.'
0000000000011314         db  0x44 ; 'D'
0000000000011315         db  0x1c ; '.'
0000000000011316         db  0x00 ; '.'
0000000000011317         db  0x00 ; '.'
0000000000011318         db  0x94 ; '.'
0000000000011319         db  0xac ; '.'
000000000001131a         db  0xff ; '.'
000000000001131b         db  0xff ; '.'
000000000001131c         db  0x84 ; '.'
000000000001131d         db  0x1c ; '.'
000000000001131e         db  0x00 ; '.'
000000000001131f         db  0x00 ; '.'
0000000000011320         db  0x24 ; '$'
0000000000011321         db  0xad ; '.'
0000000000011322         db  0xff ; '.'
0000000000011323         db  0xff ; '.'
0000000000011324         db  0xa0 ; '.'
0000000000011325         db  0x1c ; '.'
0000000000011326         db  0x00 ; '.'
0000000000011327         db  0x00 ; '.'
0000000000011328         db  0x64 ; 'd'
0000000000011329         db  0xad ; '.'
000000000001132a         db  0xff ; '.'
000000000001132b         db  0xff ; '.'
000000000001132c         db  0xbc ; '.'
000000000001132d         db  0x1c ; '.'
000000000001132e         db  0x00 ; '.'
000000000001132f         db  0x00 ; '.'
0000000000011330         db  0xb4 ; '.'
0000000000011331         db  0xb5 ; '.'
0000000000011332         db  0xff ; '.'
0000000000011333         db  0xff ; '.'
0000000000011334         db  0x34 ; '4'
0000000000011335         db  0x1d ; '.'
0000000000011336         db  0x00 ; '.'
0000000000011337         db  0x00 ; '.'
0000000000011338         db  0x34 ; '4'
0000000000011339         db  0xb6 ; '.'
000000000001133a         db  0xff ; '.'
000000000001133b         db  0xff ; '.'
000000000001133c         db  0x5c ; '\'
000000000001133d         db  0x1d ; '.'
000000000001133e         db  0x00 ; '.'
000000000001133f         db  0x00 ; '.'
0000000000011340         db  0x24 ; '$'
0000000000011341         db  0xb7 ; '.'
0000000000011342         db  0xff ; '.'
0000000000011343         db  0xff ; '.'
0000000000011344         db  0xac ; '.'
0000000000011345         db  0x1d ; '.'
0000000000011346         db  0x00 ; '.'
0000000000011347         db  0x00 ; '.'
0000000000011348         db  0x34 ; '4'
0000000000011349         db  0xb7 ; '.'
000000000001134a         db  0xff ; '.'
000000000001134b         db  0xff ; '.'
000000000001134c         db  0xc0 ; '.'
000000000001134d         db  0x1d ; '.'
000000000001134e         db  0x00 ; '.'
000000000001134f         db  0x00 ; '.'
0000000000011350         db  0x54 ; 'T'
0000000000011351         db  0xb8 ; '.'
0000000000011352         db  0xff ; '.'
0000000000011353         db  0xff ; '.'
0000000000011354         db  0x0c ; '.'
0000000000011355         db  0x1e ; '.'
0000000000011356         db  0x00 ; '.'
0000000000011357         db  0x00 ; '.'
0000000000011358         db  0xd4 ; '.'
0000000000011359         db  0xb8 ; '.'
000000000001135a         db  0xff ; '.'
000000000001135b         db  0xff ; '.'
000000000001135c         db  0x38 ; '8'
000000000001135d         db  0x1e ; '.'
000000000001135e         db  0x00 ; '.'
000000000001135f         db  0x00 ; '.'
0000000000011360         db  0xf4 ; '.'
0000000000011361         db  0xb9 ; '.'
0000000000011362         db  0xff ; '.'
0000000000011363         db  0xff ; '.'
0000000000011364         db  0x98 ; '.'
0000000000011365         db  0x1e ; '.'
0000000000011366         db  0x00 ; '.'
0000000000011367         db  0x00 ; '.'
0000000000011368         db  0x64 ; 'd'
0000000000011369         db  0xba ; '.'
000000000001136a         db  0xff ; '.'
000000000001136b         db  0xff ; '.'
000000000001136c         db  0xe4 ; '.'
000000000001136d         db  0x1e ; '.'
000000000001136e         db  0x00 ; '.'
000000000001136f         db  0x00 ; '.'
0000000000011370         db  0xb4 ; '.'
0000000000011371         db  0xba ; '.'
0000000000011372         db  0xff ; '.'
0000000000011373         db  0xff ; '.'
0000000000011374         db  0x24 ; '$'
0000000000011375         db  0x1f ; '.'
0000000000011376         db  0x00 ; '.'
0000000000011377         db  0x00 ; '.'
0000000000011378         db  0x34 ; '4'
0000000000011379         db  0xbb ; '.'
000000000001137a         db  0xff ; '.'
000000000001137b         db  0xff ; '.'
000000000001137c         db  0x74 ; 't'
000000000001137d         db  0x1f ; '.'
000000000001137e         db  0x00 ; '.'
000000000001137f         db  0x00 ; '.'
0000000000011380         db  0xa4 ; '.'
0000000000011381         db  0xbb ; '.'
0000000000011382         db  0xff ; '.'
0000000000011383         db  0xff ; '.'
0000000000011384         db  0x94 ; '.'
0000000000011385         db  0x1f ; '.'
0000000000011386         db  0x00 ; '.'
0000000000011387         db  0x00 ; '.'
0000000000011388         db  0x04 ; '.'
0000000000011389         db  0xbc ; '.'
000000000001138a         db  0xff ; '.'
000000000001138b         db  0xff ; '.'
000000000001138c         db  0xb4 ; '.'
000000000001138d         db  0x1f ; '.'
000000000001138e         db  0x00 ; '.'
000000000001138f         db  0x00 ; '.'
0000000000011390         db  0x44 ; 'D'
0000000000011391         db  0xbc ; '.'
0000000000011392         db  0xff ; '.'
0000000000011393         db  0xff ; '.'
0000000000011394         db  0xcc ; '.'
0000000000011395         db  0x1f ; '.'
0000000000011396         db  0x00 ; '.'
0000000000011397         db  0x00 ; '.'
0000000000011398         db  0x84 ; '.'
0000000000011399         db  0xbc ; '.'
000000000001139a         db  0xff ; '.'
000000000001139b         db  0xff ; '.'
000000000001139c         db  0xec ; '.'
000000000001139d         db  0x1f ; '.'
000000000001139e         db  0x00 ; '.'
000000000001139f         db  0x00 ; '.'
00000000000113a0         db  0xc4 ; '.'
00000000000113a1         db  0xbc ; '.'
00000000000113a2         db  0xff ; '.'
00000000000113a3         db  0xff ; '.'
00000000000113a4         db  0x24 ; '$'
00000000000113a5         db  0x20 ; ' '
00000000000113a6         db  0x00 ; '.'
00000000000113a7         db  0x00 ; '.'
00000000000113a8         db  0x44 ; 'D'
00000000000113a9         db  0xbd ; '.'
00000000000113aa         db  0xff ; '.'
00000000000113ab         db  0xff ; '.'
00000000000113ac         db  0x5c ; '\'
00000000000113ad         db  0x20 ; ' '
00000000000113ae         db  0x00 ; '.'
00000000000113af         db  0x00 ; '.'
00000000000113b0         db  0x84 ; '.'
00000000000113b1         db  0xbd ; '.'
00000000000113b2         db  0xff ; '.'
00000000000113b3         db  0xff ; '.'
00000000000113b4         db  0x7c ; '|'
00000000000113b5         db  0x20 ; ' '
00000000000113b6         db  0x00 ; '.'
00000000000113b7         db  0x00 ; '.'
00000000000113b8         db  0xe4 ; '.'
00000000000113b9         db  0xbd ; '.'
00000000000113ba         db  0xff ; '.'
00000000000113bb         db  0xff ; '.'
00000000000113bc         db  0xac ; '.'
00000000000113bd         db  0x20 ; ' '
00000000000113be         db  0x00 ; '.'
00000000000113bf         db  0x00 ; '.'
00000000000113c0         db  0x04 ; '.'
00000000000113c1         db  0xcf ; '.'
00000000000113c2         db  0xff ; '.'
00000000000113c3         db  0xff ; '.'
00000000000113c4         db  0xdc ; '.'
00000000000113c5         db  0x20 ; ' '
00000000000113c6         db  0x00 ; '.'
00000000000113c7         db  0x00 ; '.'
00000000000113c8         db  0x14 ; '.'
00000000000113c9         db  0xcf ; '.'
00000000000113ca         db  0xff ; '.'
00000000000113cb         db  0xff ; '.'
00000000000113cc         db  0xf4 ; '.'
00000000000113cd         db  0x20 ; ' '
00000000000113ce         db  0x00 ; '.'
00000000000113cf         db  0x00 ; '.'
00000000000113d0         db  0x94 ; '.'
00000000000113d1         db  0xd1 ; '.'
00000000000113d2         db  0xff ; '.'
00000000000113d3         db  0xff ; '.'
00000000000113d4         db  0x2c ; ','
00000000000113d5         db  0x21 ; '!'
00000000000113d6         db  0x00 ; '.'
00000000000113d7         db  0x00 ; '.'
00000000000113d8         db  0x94 ; '.'
00000000000113d9         db  0xd3 ; '.'
00000000000113da         db  0xff ; '.'
00000000000113db         db  0xff ; '.'
00000000000113dc         db  0x44 ; 'D'
00000000000113dd         db  0x21 ; '!'
00000000000113de         db  0x00 ; '.'
00000000000113df         db  0x00 ; '.'
00000000000113e0         db  0x84 ; '.'
00000000000113e1         db  0xe0 ; '.'
00000000000113e2         db  0xff ; '.'
00000000000113e3         db  0xff ; '.'
00000000000113e4         db  0x94 ; '.'
00000000000113e5         db  0x21 ; '!'
00000000000113e6         db  0x00 ; '.'
00000000000113e7         db  0x00 ; '.'
00000000000113e8         db  0xf4 ; '.'
00000000000113e9         db  0xe0 ; '.'
00000000000113ea         db  0xff ; '.'
00000000000113eb         db  0xff ; '.'
00000000000113ec         db  0xdc ; '.'
00000000000113ed         db  0x21 ; '!'
00000000000113ee         db  0x00 ; '.'
00000000000113ef         db  0x00 ; '.'
00000000000113f0         db  0x04 ; '.'
00000000000113f1         db  0xe1 ; '.'
00000000000113f2         db  0xff ; '.'
00000000000113f3         db  0xff ; '.'
00000000000113f4         db  0xf4 ; '.'
00000000000113f5         db  0x21 ; '!'
00000000000113f6         db  0x00 ; '.'
00000000000113f7         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0x113f8; 0x130c8[ (7376 bytes)
        ; File offset : [70648; 78024[ (7376 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

00000000000113f8         dd         0x00000014                                  ; Length of the record
00000000000113fc         dd         0x00000000                                  ; CIE ID
0000000000011400         db         0x01                                        ; Version
0000000000011401         db         "zR", 0                                     ; Augmentation String
0000000000011404         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000011405         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000011406         db         0x10                                        ; Return address register
0000000000011407         db         0x01                                        ; Augmentation data length
0000000000011408         db         0x1b                                        ; FDE encoding
0000000000011409         db  0x0c ; '.'
000000000001140a         db  0x07 ; '.'
000000000001140b         db  0x08 ; '.'
000000000001140c         db  0x90 ; '.'
000000000001140d         db  0x01 ; '.'
000000000001140e         db  0x07 ; '.'
000000000001140f         db  0x10 ; '.'
0000000000011410         dd         0x00000014                                  ; Length of the record
0000000000011414         dd         0x0000001c                                  ; FDE: parent CIE at 0x113f8 (FDE encoding = 0x1B)
0000000000011418         db         0x88, 0x27, 2 dup (0xff)                    ; begin 0x3ba0
000000000001141c         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x3bcb)
0000000000011420         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011421         align      8
0000000000011428         dd         0x00000014                                  ; Length of the record
000000000001142c         dd         0x00000000                                  ; CIE ID
0000000000011430         db         0x01                                        ; Version
0000000000011431         db         "zR", 0                                     ; Augmentation String
0000000000011434         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
0000000000011435         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
0000000000011436         db         0x10                                        ; Return address register
0000000000011437         db         0x01                                        ; Augmentation data length
0000000000011438         db         0x1b                                        ; FDE encoding
0000000000011439         db  0x0c ; '.'
000000000001143a         db  0x07 ; '.'
000000000001143b         db  0x08 ; '.'
000000000001143c         db  0x90 ; '.'
000000000001143d         db  0x01 ; '.'
000000000001143e         db  0x00 ; '.'
000000000001143f         db  0x00 ; '.'
0000000000011440         dd         0x00000024                                  ; Length of the record
0000000000011444         dd         0x0000001c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011448         db         0xf8, 0x0b, 2 dup (0xff)                    ; begin 0x2040
000000000001144c         db         0x70, 0x05, 2 dup (0x00)                    ; length 0x570 (end at 0x25b0)
0000000000011450         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011451         db  0x0e ; '.'
0000000000011452         db  0x10 ; '.'
0000000000011453         db  0x46 ; 'F'
0000000000011454         db  0x0e ; '.'
0000000000011455         db  0x18 ; '.'
0000000000011456         db  0x4a ; 'J'
0000000000011457         db  0x0f ; '.'
0000000000011458         db  0x0b ; '.'
0000000000011459         db  0x77 ; 'w'
000000000001145a         db  0x08 ; '.'
000000000001145b         db  0x80 ; '.'
000000000001145c         db  0x00 ; '.'
000000000001145d         db  0x3f ; '?'
000000000001145e         db  0x1a ; '.'
000000000001145f         db  0x3b ; ';'
0000000000011460         db  0x2a ; '*'
0000000000011461         db  0x33 ; '3'
0000000000011462         db  0x24 ; '$'
0000000000011463         db  0x22 ; '"'
0000000000011464         db  0x00 ; '.'
0000000000011465         db  0x00 ; '.'
0000000000011466         db  0x00 ; '.'
0000000000011467         db  0x00 ; '.'
0000000000011468         dd         0x00000014                                  ; Length of the record
000000000001146c         dd         0x00000044                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011470         db         0x40, 0x11, 2 dup (0xff)                    ; begin 0x25b0
0000000000011474         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x25b8)
0000000000011478         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011479         align      128
0000000000011480         dd         0x00000010                                  ; Length of the record
0000000000011484         dd         0x0000005c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011488         db         2 dup (0x28), 2 dup (0xff)                  ; begin 0x3cb0
000000000001148c         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x3cd4)
0000000000011490         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011491         align      4
0000000000011494         dd         0x00000010                                  ; Length of the record
0000000000011498         dd         0x00000070                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001149c         db         0x44, 0x28, 2 dup (0xff)                    ; begin 0x3ce0
00000000000114a0         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x3cec)
00000000000114a4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000114a5         align      8
00000000000114a8         dd         0x00000010                                  ; Length of the record
00000000000114ac         dd         0x00000084                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000114b0         db         0x40, 0x28, 2 dup (0xff)                    ; begin 0x3cf0
00000000000114b4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x3cfa)
00000000000114b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000114b9         align      4
00000000000114bc         dd         0x00000034                                  ; Length of the record
00000000000114c0         dd         0x00000098                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000114c4         db         0x3c, 0x28, 2 dup (0xff)                    ; begin 0x3d00
00000000000114c8         db         0x4e, 3 dup (0x00)                          ; length 0x4e (end at 0x3d4e)
00000000000114cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000114cd         db  0x42 ; 'B'
00000000000114ce         db  0x0e ; '.'
00000000000114cf         db  0x10 ; '.'
00000000000114d0         db  0x8c ; '.'
00000000000114d1         db  0x02 ; '.'
00000000000114d2         db  0x41 ; 'A'
00000000000114d3         db  0x0e ; '.'
00000000000114d4         db  0x18 ; '.'
00000000000114d5         db  0x86 ; '.'
00000000000114d6         db  0x03 ; '.'
00000000000114d7         db  0x41 ; 'A'
00000000000114d8         db  0x0e ; '.'
00000000000114d9         db  0x20 ; ' '
00000000000114da         db  0x83 ; '.'
00000000000114db         db  0x04 ; '.'
00000000000114dc         db  0x78 ; 'x'
00000000000114dd         db  0x0a ; '.'
00000000000114de         db  0x0e ; '.'
00000000000114df         db  0x18 ; '.'
00000000000114e0         db  0x41 ; 'A'
00000000000114e1         db  0x0e ; '.'
00000000000114e2         db  0x10 ; '.'
00000000000114e3         db  0x42 ; 'B'
00000000000114e4         db  0x0e ; '.'
00000000000114e5         db  0x08 ; '.'
00000000000114e6         db  0x41 ; 'A'
00000000000114e7         db  0x0b ; '.'
00000000000114e8         db  0x4a ; 'J'
00000000000114e9         db  0x0e ; '.'
00000000000114ea         db  0x18 ; '.'
00000000000114eb         db  0x41 ; 'A'
00000000000114ec         db  0x0e ; '.'
00000000000114ed         db  0x10 ; '.'
00000000000114ee         db  0x42 ; 'B'
00000000000114ef         db  0x0e ; '.'
00000000000114f0         db  0x08 ; '.'
00000000000114f1         db  0x00 ; '.'
00000000000114f2         db  0x00 ; '.'
00000000000114f3         db  0x00 ; '.'
00000000000114f4         dd         0x00000040                                  ; Length of the record
00000000000114f8         dd         0x000000d0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000114fc         db         0x54, 0x28, 2 dup (0xff)                    ; begin 0x3d50
0000000000011500         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x3dac)
0000000000011504         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011505         db  0x42 ; 'B'
0000000000011506         db  0x0e ; '.'
0000000000011507         db  0x10 ; '.'
0000000000011508         db  0x8c ; '.'
0000000000011509         db  0x02 ; '.'
000000000001150a         db  0x41 ; 'A'
000000000001150b         db  0x0e ; '.'
000000000001150c         db  0x18 ; '.'
000000000001150d         db  0x86 ; '.'
000000000001150e         db  0x03 ; '.'
000000000001150f         db  0x41 ; 'A'
0000000000011510         db  0x0e ; '.'
0000000000011511         db  0x20 ; ' '
0000000000011512         db  0x83 ; '.'
0000000000011513         db  0x04 ; '.'
0000000000011514         db  0x77 ; 'w'
0000000000011515         db  0x0a ; '.'
0000000000011516         db  0x0e ; '.'
0000000000011517         db  0x18 ; '.'
0000000000011518         db  0x41 ; 'A'
0000000000011519         db  0x0e ; '.'
000000000001151a         db  0x10 ; '.'
000000000001151b         db  0x42 ; 'B'
000000000001151c         db  0x0e ; '.'
000000000001151d         db  0x08 ; '.'
000000000001151e         db  0x42 ; 'B'
000000000001151f         db  0x0b ; '.'
0000000000011520         db  0x45 ; 'E'
0000000000011521         db  0x0a ; '.'
0000000000011522         db  0x0e ; '.'
0000000000011523         db  0x18 ; '.'
0000000000011524         db  0x41 ; 'A'
0000000000011525         db  0x0e ; '.'
0000000000011526         db  0x10 ; '.'
0000000000011527         db  0x42 ; 'B'
0000000000011528         db  0x0e ; '.'
0000000000011529         db  0x08 ; '.'
000000000001152a         db  0x48 ; 'H'
000000000001152b         db  0x0b ; '.'
000000000001152c         db  0x48 ; 'H'
000000000001152d         db  0x0e ; '.'
000000000001152e         db  0x18 ; '.'
000000000001152f         db  0x41 ; 'A'
0000000000011530         db  0x0e ; '.'
0000000000011531         db  0x10 ; '.'
0000000000011532         db  0x42 ; 'B'
0000000000011533         db  0x0e ; '.'
0000000000011534         db  0x08 ; '.'
0000000000011535         db  0x00 ; '.'
0000000000011536         db  0x00 ; '.'
0000000000011537         db  0x00 ; '.'
0000000000011538         dd         0x00000010                                  ; Length of the record
000000000001153c         dd         0x00000114                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011540         db         0x70, 0x28, 2 dup (0xff)                    ; begin 0x3db0
0000000000011544         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x3db5)
0000000000011548         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011549         align      4
000000000001154c         dd         0x0000001c                                  ; Length of the record
0000000000011550         dd         0x00000128                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011554         db         0x6c, 0x28, 2 dup (0xff)                    ; begin 0x3dc0
0000000000011558         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x3e50)
000000000001155c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001155d         db  0x4d ; 'M'
000000000001155e         db  0x0e ; '.'
000000000001155f         db  0x10 ; '.'
0000000000011560         db  0x83 ; '.'
0000000000011561         db  0x02 ; '.'
0000000000011562         db  0x02 ; '.'
0000000000011563         db  0x6f ; 'o'
0000000000011564         db  0x0a ; '.'
0000000000011565         db  0x0e ; '.'
0000000000011566         db  0x08 ; '.'
0000000000011567         db  0x41 ; 'A'
0000000000011568         db  0x0b ; '.'
0000000000011569         db  0x00 ; '.'
000000000001156a         db  0x00 ; '.'
000000000001156b         db  0x00 ; '.'
000000000001156c         dd         0x00000014                                  ; Length of the record
0000000000011570         dd         0x00000148                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011574         db         0xdc, 0x28, 2 dup (0xff)                    ; begin 0x3e50
0000000000011578         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x3ebb)
000000000001157c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001157d         db  0x62 ; 'b'
000000000001157e         db  0x0e ; '.'
000000000001157f         db  0x10 ; '.'
0000000000011580         db  0x54 ; 'T'
0000000000011581         db  0x0e ; '.'
0000000000011582         db  0x08 ; '.'
0000000000011583         db  0x00 ; '.'
0000000000011584         dd         0x00000018                                  ; Length of the record
0000000000011588         dd         0x00000160                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001158c         db         0x34, 0x29, 2 dup (0xff)                    ; begin 0x3ec0
0000000000011590         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x3f02)
0000000000011594         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011595         db  0x47 ; 'G'
0000000000011596         db  0x0e ; '.'
0000000000011597         db  0x10 ; '.'
0000000000011598         db  0x83 ; '.'
0000000000011599         db  0x02 ; '.'
000000000001159a         db  0x5b ; '['
000000000001159b         db  0x0a ; '.'
000000000001159c         db  0x0e ; '.'
000000000001159d         db  0x08 ; '.'
000000000001159e         db  0x4e ; 'N'
000000000001159f         db  0x0b ; '.'
00000000000115a0         dd         0x0000004c                                  ; Length of the record
00000000000115a4         dd         0x0000017c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000115a8         db         0x68, 0x29, 2 dup (0xff)                    ; begin 0x3f10
00000000000115ac         db         0x8f, 0x02, 2 dup (0x00)                    ; length 0x28f (end at 0x419f)
00000000000115b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000115b1         db  0x42 ; 'B'
00000000000115b2         db  0x0e ; '.'
00000000000115b3         db  0x10 ; '.'
00000000000115b4         db  0x8f ; '.'
00000000000115b5         db  0x02 ; '.'
00000000000115b6         db  0x42 ; 'B'
00000000000115b7         db  0x0e ; '.'
00000000000115b8         db  0x18 ; '.'
00000000000115b9         db  0x8e ; '.'
00000000000115ba         db  0x03 ; '.'
00000000000115bb         db  0x42 ; 'B'
00000000000115bc         db  0x0e ; '.'
00000000000115bd         db  0x20 ; ' '
00000000000115be         db  0x8d ; '.'
00000000000115bf         db  0x04 ; '.'
00000000000115c0         db  0x42 ; 'B'
00000000000115c1         db  0x0e ; '.'
00000000000115c2         db  0x28 ; '('
00000000000115c3         db  0x8c ; '.'
00000000000115c4         db  0x05 ; '.'
00000000000115c5         db  0x41 ; 'A'
00000000000115c6         db  0x0e ; '.'
00000000000115c7         db  0x30 ; '0'
00000000000115c8         db  0x86 ; '.'
00000000000115c9         db  0x06 ; '.'
00000000000115ca         db  0x41 ; 'A'
00000000000115cb         db  0x0e ; '.'
00000000000115cc         db  0x38 ; '8'
00000000000115cd         db  0x83 ; '.'
00000000000115ce         db  0x07 ; '.'
00000000000115cf         db  0x47 ; 'G'
00000000000115d0         db  0x0e ; '.'
00000000000115d1         db  0x80 ; '.'
00000000000115d2         db  0x06 ; '.'
00000000000115d3         db  0x03 ; '.'
00000000000115d4         db  0x41 ; 'A'
00000000000115d5         db  0x02 ; '.'
00000000000115d6         db  0x0a ; '.'
00000000000115d7         db  0x0e ; '.'
00000000000115d8         db  0x38 ; '8'
00000000000115d9         db  0x41 ; 'A'
00000000000115da         db  0x0e ; '.'
00000000000115db         db  0x30 ; '0'
00000000000115dc         db  0x41 ; 'A'
00000000000115dd         db  0x0e ; '.'
00000000000115de         db  0x28 ; '('
00000000000115df         db  0x42 ; 'B'
00000000000115e0         db  0x0e ; '.'
00000000000115e1         db  0x20 ; ' '
00000000000115e2         db  0x42 ; 'B'
00000000000115e3         db  0x0e ; '.'
00000000000115e4         db  0x18 ; '.'
00000000000115e5         db  0x42 ; 'B'
00000000000115e6         db  0x0e ; '.'
00000000000115e7         db  0x10 ; '.'
00000000000115e8         db  0x42 ; 'B'
00000000000115e9         db  0x0e ; '.'
00000000000115ea         db  0x08 ; '.'
00000000000115eb         db  0x44 ; 'D'
00000000000115ec         db  0x0b ; '.'
00000000000115ed         db  0x00 ; '.'
00000000000115ee         db  0x00 ; '.'
00000000000115ef         db  0x00 ; '.'
00000000000115f0         dd         0x00000028                                  ; Length of the record
00000000000115f4         dd         0x000001cc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000115f8         db         0xa8, 0x2b, 2 dup (0xff)                    ; begin 0x41a0
00000000000115fc         db         0xc2, 3 dup (0x00)                          ; length 0xc2 (end at 0x4262)
0000000000011600         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011601         db  0x41 ; 'A'
0000000000011602         db  0x0e ; '.'
0000000000011603         db  0x10 ; '.'
0000000000011604         db  0x86 ; '.'
0000000000011605         db  0x02 ; '.'
0000000000011606         db  0x41 ; 'A'
0000000000011607         db  0x0e ; '.'
0000000000011608         db  0x18 ; '.'
0000000000011609         db  0x83 ; '.'
000000000001160a         db  0x03 ; '.'
000000000001160b         db  0x4e ; 'N'
000000000001160c         db  0x0e ; '.'
000000000001160d         db  0x20 ; ' '
000000000001160e         db  0x02 ; '.'
000000000001160f         db  0x84 ; '.'
0000000000011610         db  0x0a ; '.'
0000000000011611         db  0x0e ; '.'
0000000000011612         db  0x18 ; '.'
0000000000011613         db  0x41 ; 'A'
0000000000011614         db  0x0e ; '.'
0000000000011615         db  0x10 ; '.'
0000000000011616         db  0x41 ; 'A'
0000000000011617         db  0x0e ; '.'
0000000000011618         db  0x08 ; '.'
0000000000011619         db  0x41 ; 'A'
000000000001161a         db  0x0b ; '.'
000000000001161b         db  0x00 ; '.'
000000000001161c         dd         0x00000048                                  ; Length of the record
0000000000011620         dd         0x000001f8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011624         db         0x4c, 0x2c, 2 dup (0xff)                    ; begin 0x4270
0000000000011628         db         0xdd, 3 dup (0x00)                          ; length 0xdd (end at 0x434d)
000000000001162c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001162d         db  0x42 ; 'B'
000000000001162e         db  0x0e ; '.'
000000000001162f         db  0x10 ; '.'
0000000000011630         db  0x8f ; '.'
0000000000011631         db  0x02 ; '.'
0000000000011632         db  0x42 ; 'B'
0000000000011633         db  0x0e ; '.'
0000000000011634         db  0x18 ; '.'
0000000000011635         db  0x8e ; '.'
0000000000011636         db  0x03 ; '.'
0000000000011637         db  0x42 ; 'B'
0000000000011638         db  0x0e ; '.'
0000000000011639         db  0x20 ; ' '
000000000001163a         db  0x8d ; '.'
000000000001163b         db  0x04 ; '.'
000000000001163c         db  0x42 ; 'B'
000000000001163d         db  0x0e ; '.'
000000000001163e         db  0x28 ; '('
000000000001163f         db  0x8c ; '.'
0000000000011640         db  0x05 ; '.'
0000000000011641         db  0x44 ; 'D'
0000000000011642         db  0x0e ; '.'
0000000000011643         db  0x30 ; '0'
0000000000011644         db  0x86 ; '.'
0000000000011645         db  0x06 ; '.'
0000000000011646         db  0x41 ; 'A'
0000000000011647         db  0x0e ; '.'
0000000000011648         db  0x38 ; '8'
0000000000011649         db  0x83 ; '.'
000000000001164a         db  0x07 ; '.'
000000000001164b         db  0x44 ; 'D'
000000000001164c         db  0x0e ; '.'
000000000001164d         db  0x70 ; 'p'
000000000001164e         db  0x02 ; '.'
000000000001164f         db  0xbc ; '.'
0000000000011650         db  0x0a ; '.'
0000000000011651         db  0x0e ; '.'
0000000000011652         db  0x38 ; '8'
0000000000011653         db  0x41 ; 'A'
0000000000011654         db  0x0e ; '.'
0000000000011655         db  0x30 ; '0'
0000000000011656         db  0x41 ; 'A'
0000000000011657         db  0x0e ; '.'
0000000000011658         db  0x28 ; '('
0000000000011659         db  0x42 ; 'B'
000000000001165a         db  0x0e ; '.'
000000000001165b         db  0x20 ; ' '
000000000001165c         db  0x42 ; 'B'
000000000001165d         db  0x0e ; '.'
000000000001165e         db  0x18 ; '.'
000000000001165f         db  0x42 ; 'B'
0000000000011660         db  0x0e ; '.'
0000000000011661         db  0x10 ; '.'
0000000000011662         db  0x42 ; 'B'
0000000000011663         db  0x0e ; '.'
0000000000011664         db  0x08 ; '.'
0000000000011665         db  0x41 ; 'A'
0000000000011666         db  0x0b ; '.'
0000000000011667         db  0x00 ; '.'
0000000000011668         dd         0x00000048                                  ; Length of the record
000000000001166c         dd         0x00000244                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011670         db         0xe0, 0x2c, 2 dup (0xff)                    ; begin 0x4350
0000000000011674         db         0x1b, 0x0a, 2 dup (0x00)                    ; length 0xa1b (end at 0x4d6b)
0000000000011678         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011679         db  0x42 ; 'B'
000000000001167a         db  0x0e ; '.'
000000000001167b         db  0x10 ; '.'
000000000001167c         db  0x8f ; '.'
000000000001167d         db  0x02 ; '.'
000000000001167e         db  0x42 ; 'B'
000000000001167f         db  0x0e ; '.'
0000000000011680         db  0x18 ; '.'
0000000000011681         db  0x8e ; '.'
0000000000011682         db  0x03 ; '.'
0000000000011683         db  0x45 ; 'E'
0000000000011684         db  0x0e ; '.'
0000000000011685         db  0x20 ; ' '
0000000000011686         db  0x8d ; '.'
0000000000011687         db  0x04 ; '.'
0000000000011688         db  0x42 ; 'B'
0000000000011689         db  0x0e ; '.'
000000000001168a         db  0x28 ; '('
000000000001168b         db  0x8c ; '.'
000000000001168c         db  0x05 ; '.'
000000000001168d         db  0x44 ; 'D'
000000000001168e         db  0x0e ; '.'
000000000001168f         db  0x30 ; '0'
0000000000011690         db  0x86 ; '.'
0000000000011691         db  0x06 ; '.'
0000000000011692         db  0x41 ; 'A'
0000000000011693         db  0x0e ; '.'
0000000000011694         db  0x38 ; '8'
0000000000011695         db  0x83 ; '.'
0000000000011696         db  0x07 ; '.'
0000000000011697         db  0x4d ; 'M'
0000000000011698         db  0x0e ; '.'
0000000000011699         db  0xd0 ; '.'
000000000001169a         db  0x08 ; '.'
000000000001169b         db  0x02 ; '.'
000000000001169c         db  0x5d ; ']'
000000000001169d         db  0x0a ; '.'
000000000001169e         db  0x0e ; '.'
000000000001169f         db  0x38 ; '8'
00000000000116a0         db  0x41 ; 'A'
00000000000116a1         db  0x0e ; '.'
00000000000116a2         db  0x30 ; '0'
00000000000116a3         db  0x41 ; 'A'
00000000000116a4         db  0x0e ; '.'
00000000000116a5         db  0x28 ; '('
00000000000116a6         db  0x42 ; 'B'
00000000000116a7         db  0x0e ; '.'
00000000000116a8         db  0x20 ; ' '
00000000000116a9         db  0x42 ; 'B'
00000000000116aa         db  0x0e ; '.'
00000000000116ab         db  0x18 ; '.'
00000000000116ac         db  0x42 ; 'B'
00000000000116ad         db  0x0e ; '.'
00000000000116ae         db  0x10 ; '.'
00000000000116af         db  0x42 ; 'B'
00000000000116b0         db  0x0e ; '.'
00000000000116b1         db  0x08 ; '.'
00000000000116b2         db  0x44 ; 'D'
00000000000116b3         db  0x0b ; '.'
00000000000116b4         dd         0x00000028                                  ; Length of the record
00000000000116b8         dd         0x00000290                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000116bc         db         0xb4, 0x36, 2 dup (0xff)                    ; begin 0x4d70
00000000000116c0         db         0x92, 0x04, 2 dup (0x00)                    ; length 0x492 (end at 0x5202)
00000000000116c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000116c5         db  0x42 ; 'B'
00000000000116c6         db  0x0e ; '.'
00000000000116c7         db  0x10 ; '.'
00000000000116c8         db  0x8d ; '.'
00000000000116c9         db  0x02 ; '.'
00000000000116ca         db  0x42 ; 'B'
00000000000116cb         db  0x0e ; '.'
00000000000116cc         db  0x18 ; '.'
00000000000116cd         db  0x8c ; '.'
00000000000116ce         db  0x03 ; '.'
00000000000116cf         db  0x46 ; 'F'
00000000000116d0         db  0x0e ; '.'
00000000000116d1         db  0x20 ; ' '
00000000000116d2         db  0x86 ; '.'
00000000000116d3         db  0x04 ; '.'
00000000000116d4         db  0x41 ; 'A'
00000000000116d5         db  0x0e ; '.'
00000000000116d6         db  0x28 ; '('
00000000000116d7         db  0x83 ; '.'
00000000000116d8         db  0x05 ; '.'
00000000000116d9         db  0x49 ; 'I'
00000000000116da         db  0x0e ; '.'
00000000000116db         db  0xb0 ; '.'
00000000000116dc         db  0x01 ; '.'
00000000000116dd         db  0x00 ; '.'
00000000000116de         db  0x00 ; '.'
00000000000116df         db  0x00 ; '.'
00000000000116e0         dd         0x00000048                                  ; Length of the record
00000000000116e4         dd         0x000002bc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000116e8         db         0x28, 0x3b, 2 dup (0xff)                    ; begin 0x5210
00000000000116ec         db         0x6b, 0x01, 2 dup (0x00)                    ; length 0x16b (end at 0x537b)
00000000000116f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000116f1         db  0x42 ; 'B'
00000000000116f2         db  0x0e ; '.'
00000000000116f3         db  0x10 ; '.'
00000000000116f4         db  0x8f ; '.'
00000000000116f5         db  0x02 ; '.'
00000000000116f6         db  0x42 ; 'B'
00000000000116f7         db  0x0e ; '.'
00000000000116f8         db  0x18 ; '.'
00000000000116f9         db  0x8e ; '.'
00000000000116fa         db  0x03 ; '.'
00000000000116fb         db  0x49 ; 'I'
00000000000116fc         db  0x0e ; '.'
00000000000116fd         db  0x20 ; ' '
00000000000116fe         db  0x8d ; '.'
00000000000116ff         db  0x04 ; '.'
0000000000011700         db  0x42 ; 'B'
0000000000011701         db  0x0e ; '.'
0000000000011702         db  0x28 ; '('
0000000000011703         db  0x8c ; '.'
0000000000011704         db  0x05 ; '.'
0000000000011705         db  0x41 ; 'A'
0000000000011706         db  0x0e ; '.'
0000000000011707         db  0x30 ; '0'
0000000000011708         db  0x86 ; '.'
0000000000011709         db  0x06 ; '.'
000000000001170a         db  0x41 ; 'A'
000000000001170b         db  0x0e ; '.'
000000000001170c         db  0x38 ; '8'
000000000001170d         db  0x83 ; '.'
000000000001170e         db  0x07 ; '.'
000000000001170f         db  0x44 ; 'D'
0000000000011710         db  0x0e ; '.'
0000000000011711         db  0x50 ; 'P'
0000000000011712         db  0x02 ; '.'
0000000000011713         db  0xe9 ; '.'
0000000000011714         db  0x0a ; '.'
0000000000011715         db  0x0e ; '.'
0000000000011716         db  0x38 ; '8'
0000000000011717         db  0x41 ; 'A'
0000000000011718         db  0x0e ; '.'
0000000000011719         db  0x30 ; '0'
000000000001171a         db  0x41 ; 'A'
000000000001171b         db  0x0e ; '.'
000000000001171c         db  0x28 ; '('
000000000001171d         db  0x42 ; 'B'
000000000001171e         db  0x0e ; '.'
000000000001171f         db  0x20 ; ' '
0000000000011720         db  0x42 ; 'B'
0000000000011721         db  0x0e ; '.'
0000000000011722         db  0x18 ; '.'
0000000000011723         db  0x42 ; 'B'
0000000000011724         db  0x0e ; '.'
0000000000011725         db  0x10 ; '.'
0000000000011726         db  0x42 ; 'B'
0000000000011727         db  0x0e ; '.'
0000000000011728         db  0x08 ; '.'
0000000000011729         db  0x48 ; 'H'
000000000001172a         db  0x0b ; '.'
000000000001172b         db  0x00 ; '.'
000000000001172c         dd         0x000000c8                                  ; Length of the record
0000000000011730         dd         0x00000308                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011734         db         0x8c, 0x0e, 2 dup (0xff)                    ; begin 0x25c0
0000000000011738         db         0xd3, 0x15, 2 dup (0x00)                    ; length 0x15d3 (end at 0x3b93)
000000000001173c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001173d         db  0x42 ; 'B'
000000000001173e         db  0x0e ; '.'
000000000001173f         db  0x10 ; '.'
0000000000011740         db  0x8f ; '.'
0000000000011741         db  0x02 ; '.'
0000000000011742         db  0x42 ; 'B'
0000000000011743         db  0x0e ; '.'
0000000000011744         db  0x18 ; '.'
0000000000011745         db  0x8e ; '.'
0000000000011746         db  0x03 ; '.'
0000000000011747         db  0x45 ; 'E'
0000000000011748         db  0x0e ; '.'
0000000000011749         db  0x20 ; ' '
000000000001174a         db  0x8d ; '.'
000000000001174b         db  0x04 ; '.'
000000000001174c         db  0x42 ; 'B'
000000000001174d         db  0x0e ; '.'
000000000001174e         db  0x28 ; '('
000000000001174f         db  0x8c ; '.'
0000000000011750         db  0x05 ; '.'
0000000000011751         db  0x41 ; 'A'
0000000000011752         db  0x0e ; '.'
0000000000011753         db  0x30 ; '0'
0000000000011754         db  0x86 ; '.'
0000000000011755         db  0x06 ; '.'
0000000000011756         db  0x41 ; 'A'
0000000000011757         db  0x0e ; '.'
0000000000011758         db  0x38 ; '8'
0000000000011759         db  0x83 ; '.'
000000000001175a         db  0x07 ; '.'
000000000001175b         db  0x50 ; 'P'
000000000001175c         db  0x0e ; '.'
000000000001175d         db  0x80 ; '.'
000000000001175e         db  0x03 ; '.'
000000000001175f         db  0x03 ; '.'
0000000000011760         db  0xc9 ; '.'
0000000000011761         db  0x03 ; '.'
0000000000011762         db  0x0a ; '.'
0000000000011763         db  0x0e ; '.'
0000000000011764         db  0x88 ; '.'
0000000000011765         db  0x03 ; '.'
0000000000011766         db  0x4f ; 'O'
0000000000011767         db  0x0e ; '.'
0000000000011768         db  0x90 ; '.'
0000000000011769         db  0x03 ; '.'
000000000001176a         db  0x5c ; '\'
000000000001176b         db  0x0b ; '.'
000000000001176c         db  0x03 ; '.'
000000000001176d         db  0x25 ; '%'
000000000001176e         db  0x01 ; '.'
000000000001176f         db  0x0a ; '.'
0000000000011770         db  0x0e ; '.'
0000000000011771         db  0x38 ; '8'
0000000000011772         db  0x41 ; 'A'
0000000000011773         db  0x0e ; '.'
0000000000011774         db  0x30 ; '0'
0000000000011775         db  0x41 ; 'A'
0000000000011776         db  0x0e ; '.'
0000000000011777         db  0x28 ; '('
0000000000011778         db  0x42 ; 'B'
0000000000011779         db  0x0e ; '.'
000000000001177a         db  0x20 ; ' '
000000000001177b         db  0x42 ; 'B'
000000000001177c         db  0x0e ; '.'
000000000001177d         db  0x18 ; '.'
000000000001177e         db  0x42 ; 'B'
000000000001177f         db  0x0e ; '.'
0000000000011780         db  0x10 ; '.'
0000000000011781         db  0x42 ; 'B'
0000000000011782         db  0x0e ; '.'
0000000000011783         db  0x08 ; '.'
0000000000011784         db  0x41 ; 'A'
0000000000011785         db  0x0b ; '.'
0000000000011786         db  0x03 ; '.'
0000000000011787         db  0x5a ; 'Z'
0000000000011788         db  0x06 ; '.'
0000000000011789         db  0x0e ; '.'
000000000001178a         db  0x88 ; '.'
000000000001178b         db  0x03 ; '.'
000000000001178c         db  0x47 ; 'G'
000000000001178d         db  0x0e ; '.'
000000000001178e         db  0x90 ; '.'
000000000001178f         db  0x03 ; '.'
0000000000011790         db  0x42 ; 'B'
0000000000011791         db  0x0e ; '.'
0000000000011792         db  0x98 ; '.'
0000000000011793         db  0x03 ; '.'
0000000000011794         db  0x45 ; 'E'
0000000000011795         db  0x0e ; '.'
0000000000011796         db  0xa0 ; '.'
0000000000011797         db  0x03 ; '.'
0000000000011798         db  0x51 ; 'Q'
0000000000011799         db  0x0e ; '.'
000000000001179a         db  0x80 ; '.'
000000000001179b         db  0x03 ; '.'
000000000001179c         db  0x02 ; '.'
000000000001179d         db  0x5c ; '\'
000000000001179e         db  0x0e ; '.'
000000000001179f         db  0x88 ; '.'
00000000000117a0         db  0x03 ; '.'
00000000000117a1         db  0x45 ; 'E'
00000000000117a2         db  0x0e ; '.'
00000000000117a3         db  0x90 ; '.'
00000000000117a4         db  0x03 ; '.'
00000000000117a5         db  0x41 ; 'A'
00000000000117a6         db  0x0e ; '.'
00000000000117a7         db  0x98 ; '.'
00000000000117a8         db  0x03 ; '.'
00000000000117a9         db  0x45 ; 'E'
00000000000117aa         db  0x0e ; '.'
00000000000117ab         db  0xa0 ; '.'
00000000000117ac         db  0x03 ; '.'
00000000000117ad         db  0x4d ; 'M'
00000000000117ae         db  0x0e ; '.'
00000000000117af         db  0x80 ; '.'
00000000000117b0         db  0x03 ; '.'
00000000000117b1         db  0x03 ; '.'
00000000000117b2         db  0xeb ; '.'
00000000000117b3         db  0x01 ; '.'
00000000000117b4         db  0x0e ; '.'
00000000000117b5         db  0x88 ; '.'
00000000000117b6         db  0x03 ; '.'
00000000000117b7         db  0x46 ; 'F'
00000000000117b8         db  0x0e ; '.'
00000000000117b9         db  0x90 ; '.'
00000000000117ba         db  0x03 ; '.'
00000000000117bb         db  0x42 ; 'B'
00000000000117bc         db  0x0e ; '.'
00000000000117bd         db  0x98 ; '.'
00000000000117be         db  0x03 ; '.'
00000000000117bf         db  0x54 ; 'T'
00000000000117c0         db  0x0e ; '.'
00000000000117c1         db  0xa0 ; '.'
00000000000117c2         db  0x03 ; '.'
00000000000117c3         db  0x51 ; 'Q'
00000000000117c4         db  0x0e ; '.'
00000000000117c5         db  0x80 ; '.'
00000000000117c6         db  0x03 ; '.'
00000000000117c7         db  0x02 ; '.'
00000000000117c8         db  0x8f ; '.'
00000000000117c9         db  0x0e ; '.'
00000000000117ca         db  0x88 ; '.'
00000000000117cb         db  0x03 ; '.'
00000000000117cc         db  0x4b ; 'K'
00000000000117cd         db  0x0e ; '.'
00000000000117ce         db  0x90 ; '.'
00000000000117cf         db  0x03 ; '.'
00000000000117d0         db  0x42 ; 'B'
00000000000117d1         db  0x0e ; '.'
00000000000117d2         db  0x98 ; '.'
00000000000117d3         db  0x03 ; '.'
00000000000117d4         db  0x51 ; 'Q'
00000000000117d5         db  0x0e ; '.'
00000000000117d6         db  0xa0 ; '.'
00000000000117d7         db  0x03 ; '.'
00000000000117d8         db  0x56 ; 'V'
00000000000117d9         db  0x0e ; '.'
00000000000117da         db  0x80 ; '.'
00000000000117db         db  0x03 ; '.'
00000000000117dc         db  0x03 ; '.'
00000000000117dd         db  0xd0 ; '.'
00000000000117de         db  0x03 ; '.'
00000000000117df         db  0x0e ; '.'
00000000000117e0         db  0x88 ; '.'
00000000000117e1         db  0x03 ; '.'
00000000000117e2         db  0x4b ; 'K'
00000000000117e3         db  0x0e ; '.'
00000000000117e4         db  0x90 ; '.'
00000000000117e5         db  0x03 ; '.'
00000000000117e6         db  0x42 ; 'B'
00000000000117e7         db  0x0e ; '.'
00000000000117e8         db  0x98 ; '.'
00000000000117e9         db  0x03 ; '.'
00000000000117ea         db  0x4f ; 'O'
00000000000117eb         db  0x0e ; '.'
00000000000117ec         db  0xa0 ; '.'
00000000000117ed         db  0x03 ; '.'
00000000000117ee         db  0x4d ; 'M'
00000000000117ef         db  0x0e ; '.'
00000000000117f0         db  0x80 ; '.'
00000000000117f1         db  0x03 ; '.'
00000000000117f2         db  0x00 ; '.'
00000000000117f3         db  0x00 ; '.'
00000000000117f4         db  0x00 ; '.'
00000000000117f5         db  0x00 ; '.'
00000000000117f6         db  0x00 ; '.'
00000000000117f7         db  0x00 ; '.'
00000000000117f8         dd         0x0000002c                                  ; Length of the record
00000000000117fc         dd         0x000003d4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011800         db         0x80, 0x3b, 2 dup (0xff)                    ; begin 0x5380
0000000000011804         db         0xb8, 0x03, 2 dup (0x00)                    ; length 0x3b8 (end at 0x5738)
0000000000011808         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011809         db  0x41 ; 'A'
000000000001180a         db  0x0e ; '.'
000000000001180b         db  0x10 ; '.'
000000000001180c         db  0x86 ; '.'
000000000001180d         db  0x02 ; '.'
000000000001180e         db  0x43 ; 'C'
000000000001180f         db  0x0d ; '.'
0000000000011810         db  0x06 ; '.'
0000000000011811         db  0x46 ; 'F'
0000000000011812         db  0x8f ; '.'
0000000000011813         db  0x03 ; '.'
0000000000011814         db  0x8e ; '.'
0000000000011815         db  0x04 ; '.'
0000000000011816         db  0x8d ; '.'
0000000000011817         db  0x05 ; '.'
0000000000011818         db  0x4a ; 'J'
0000000000011819         db  0x8c ; '.'
000000000001181a         db  0x06 ; '.'
000000000001181b         db  0x83 ; '.'
000000000001181c         db  0x07 ; '.'
000000000001181d         db  0x03 ; '.'
000000000001181e         db  0x14 ; '.'
000000000001181f         db  0x02 ; '.'
0000000000011820         db  0x0a ; '.'
0000000000011821         db  0x0c ; '.'
0000000000011822         db  0x07 ; '.'
0000000000011823         db  0x08 ; '.'
0000000000011824         db  0x48 ; 'H'
0000000000011825         db  0x0b ; '.'
0000000000011826         db  0x00 ; '.'
0000000000011827         db  0x00 ; '.'
0000000000011828         dd         0x0000004c                                  ; Length of the record
000000000001182c         dd         0x00000404                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011830         db         0x10, 0x3f, 2 dup (0xff)                    ; begin 0x5740
0000000000011834         db         0x36, 0x06, 2 dup (0x00)                    ; length 0x636 (end at 0x5d76)
0000000000011838         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011839         db  0x42 ; 'B'
000000000001183a         db  0x0e ; '.'
000000000001183b         db  0x10 ; '.'
000000000001183c         db  0x8f ; '.'
000000000001183d         db  0x02 ; '.'
000000000001183e         db  0x42 ; 'B'
000000000001183f         db  0x0e ; '.'
0000000000011840         db  0x18 ; '.'
0000000000011841         db  0x8e ; '.'
0000000000011842         db  0x03 ; '.'
0000000000011843         db  0x42 ; 'B'
0000000000011844         db  0x0e ; '.'
0000000000011845         db  0x20 ; ' '
0000000000011846         db  0x8d ; '.'
0000000000011847         db  0x04 ; '.'
0000000000011848         db  0x42 ; 'B'
0000000000011849         db  0x0e ; '.'
000000000001184a         db  0x28 ; '('
000000000001184b         db  0x8c ; '.'
000000000001184c         db  0x05 ; '.'
000000000001184d         db  0x41 ; 'A'
000000000001184e         db  0x0e ; '.'
000000000001184f         db  0x30 ; '0'
0000000000011850         db  0x86 ; '.'
0000000000011851         db  0x06 ; '.'
0000000000011852         db  0x41 ; 'A'
0000000000011853         db  0x0e ; '.'
0000000000011854         db  0x38 ; '8'
0000000000011855         db  0x83 ; '.'
0000000000011856         db  0x07 ; '.'
0000000000011857         db  0x47 ; 'G'
0000000000011858         db  0x0e ; '.'
0000000000011859         db  0xa0 ; '.'
000000000001185a         db  0x02 ; '.'
000000000001185b         db  0x03 ; '.'
000000000001185c         db  0x30 ; '0'
000000000001185d         db  0x02 ; '.'
000000000001185e         db  0x0a ; '.'
000000000001185f         db  0x0e ; '.'
0000000000011860         db  0x38 ; '8'
0000000000011861         db  0x41 ; 'A'
0000000000011862         db  0x0e ; '.'
0000000000011863         db  0x30 ; '0'
0000000000011864         db  0x41 ; 'A'
0000000000011865         db  0x0e ; '.'
0000000000011866         db  0x28 ; '('
0000000000011867         db  0x42 ; 'B'
0000000000011868         db  0x0e ; '.'
0000000000011869         db  0x20 ; ' '
000000000001186a         db  0x42 ; 'B'
000000000001186b         db  0x0e ; '.'
000000000001186c         db  0x18 ; '.'
000000000001186d         db  0x42 ; 'B'
000000000001186e         db  0x0e ; '.'
000000000001186f         db  0x10 ; '.'
0000000000011870         db  0x42 ; 'B'
0000000000011871         db  0x0e ; '.'
0000000000011872         db  0x08 ; '.'
0000000000011873         db  0x45 ; 'E'
0000000000011874         db  0x0b ; '.'
0000000000011875         db  0x00 ; '.'
0000000000011876         db  0x00 ; '.'
0000000000011877         db  0x00 ; '.'
0000000000011878         dd         0x00000010                                  ; Length of the record
000000000001187c         dd         0x00000454                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011880         db         0x00, 0x45, 2 dup (0xff)                    ; begin 0x5d80
0000000000011884         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5d88)
0000000000011888         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011889         align      4
000000000001188c         dd         0x00000010                                  ; Length of the record
0000000000011890         dd         0x00000468                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011894         db         0xfc, 0x44, 2 dup (0xff)                    ; begin 0x5d90
0000000000011898         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5d98)
000000000001189c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001189d         align      32
00000000000118a0         dd         0x0000002c                                  ; Length of the record
00000000000118a4         dd         0x0000047c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000118a8         db         0xf8, 0x44, 2 dup (0xff)                    ; begin 0x5da0
00000000000118ac         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5e44)
00000000000118b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000118b1         db  0x41 ; 'A'
00000000000118b2         db  0x0e ; '.'
00000000000118b3         db  0x10 ; '.'
00000000000118b4         db  0x86 ; '.'
00000000000118b5         db  0x02 ; '.'
00000000000118b6         db  0x41 ; 'A'
00000000000118b7         db  0x0e ; '.'
00000000000118b8         db  0x18 ; '.'
00000000000118b9         db  0x83 ; '.'
00000000000118ba         db  0x03 ; '.'
00000000000118bb         db  0x44 ; 'D'
00000000000118bc         db  0x0e ; '.'
00000000000118bd         db  0x20 ; ' '
00000000000118be         db  0x7a ; 'z'
00000000000118bf         db  0x0a ; '.'
00000000000118c0         db  0x0e ; '.'
00000000000118c1         db  0x18 ; '.'
00000000000118c2         db  0x41 ; 'A'
00000000000118c3         db  0x0e ; '.'
00000000000118c4         db  0x10 ; '.'
00000000000118c5         db  0x41 ; 'A'
00000000000118c6         db  0x0e ; '.'
00000000000118c7         db  0x08 ; '.'
00000000000118c8         db  0x41 ; 'A'
00000000000118c9         db  0x0b ; '.'
00000000000118ca         db  0x00 ; '.'
00000000000118cb         db  0x00 ; '.'
00000000000118cc         db  0x00 ; '.'
00000000000118cd         db  0x00 ; '.'
00000000000118ce         db  0x00 ; '.'
00000000000118cf         db  0x00 ; '.'
00000000000118d0         dd         0x0000001c                                  ; Length of the record
00000000000118d4         dd         0x000004ac                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000118d8         db         0x78, 0x45, 2 dup (0xff)                    ; begin 0x5e50
00000000000118dc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x5e68)
00000000000118e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000118e1         db  0x44 ; 'D'
00000000000118e2         db  0x0e ; '.'
00000000000118e3         db  0x10 ; '.'
00000000000118e4         db  0x4e ; 'N'
00000000000118e5         db  0x0a ; '.'
00000000000118e6         db  0x0e ; '.'
00000000000118e7         db  0x08 ; '.'
00000000000118e8         db  0x41 ; 'A'
00000000000118e9         db  0x0b ; '.'
00000000000118ea         db  0x00 ; '.'
00000000000118eb         db  0x00 ; '.'
00000000000118ec         db  0x00 ; '.'
00000000000118ed         db  0x00 ; '.'
00000000000118ee         db  0x00 ; '.'
00000000000118ef         db  0x00 ; '.'
00000000000118f0         dd         0x00000030                                  ; Length of the record
00000000000118f4         dd         0x000004cc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000118f8         db         0x78, 0x45, 2 dup (0xff)                    ; begin 0x5e70
00000000000118fc         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0x5ecd)
0000000000011900         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011901         db  0x41 ; 'A'
0000000000011902         db  0x0e ; '.'
0000000000011903         db  0x10 ; '.'
0000000000011904         db  0x86 ; '.'
0000000000011905         db  0x02 ; '.'
0000000000011906         db  0x41 ; 'A'
0000000000011907         db  0x0e ; '.'
0000000000011908         db  0x18 ; '.'
0000000000011909         db  0x83 ; '.'
000000000001190a         db  0x03 ; '.'
000000000001190b         db  0x49 ; 'I'
000000000001190c         db  0x0e ; '.'
000000000001190d         db  0x20 ; ' '
000000000001190e         db  0x7c ; '|'
000000000001190f         db  0x0a ; '.'
0000000000011910         db  0x0e ; '.'
0000000000011911         db  0x18 ; '.'
0000000000011912         db  0x44 ; 'D'
0000000000011913         db  0x0e ; '.'
0000000000011914         db  0x10 ; '.'
0000000000011915         db  0x41 ; 'A'
0000000000011916         db  0x0e ; '.'
0000000000011917         db  0x08 ; '.'
0000000000011918         db  0x44 ; 'D'
0000000000011919         db  0x0b ; '.'
000000000001191a         db  0x44 ; 'D'
000000000001191b         db  0x0e ; '.'
000000000001191c         db  0x18 ; '.'
000000000001191d         db  0x47 ; 'G'
000000000001191e         db  0x0e ; '.'
000000000001191f         db  0x10 ; '.'
0000000000011920         db  0x41 ; 'A'
0000000000011921         db  0x0e ; '.'
0000000000011922         db  0x08 ; '.'
0000000000011923         db  0x00 ; '.'
0000000000011924         dd         0x00000028                                  ; Length of the record
0000000000011928         dd         0x00000500                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001192c         db         0xa4, 0x45, 2 dup (0xff)                    ; begin 0x5ed0
0000000000011930         db         0x5a, 3 dup (0x00)                          ; length 0x5a (end at 0x5f2a)
0000000000011934         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011935         db  0x41 ; 'A'
0000000000011936         db  0x0e ; '.'
0000000000011937         db  0x10 ; '.'
0000000000011938         db  0x86 ; '.'
0000000000011939         db  0x02 ; '.'
000000000001193a         db  0x41 ; 'A'
000000000001193b         db  0x0e ; '.'
000000000001193c         db  0x18 ; '.'
000000000001193d         db  0x83 ; '.'
000000000001193e         db  0x03 ; '.'
000000000001193f         db  0x47 ; 'G'
0000000000011940         db  0x0e ; '.'
0000000000011941         db  0x20 ; ' '
0000000000011942         db  0x02 ; '.'
0000000000011943         db  0x41 ; 'A'
0000000000011944         db  0x0a ; '.'
0000000000011945         db  0x0e ; '.'
0000000000011946         db  0x18 ; '.'
0000000000011947         db  0x44 ; 'D'
0000000000011948         db  0x0e ; '.'
0000000000011949         db  0x10 ; '.'
000000000001194a         db  0x41 ; 'A'
000000000001194b         db  0x0e ; '.'
000000000001194c         db  0x08 ; '.'
000000000001194d         db  0x41 ; 'A'
000000000001194e         db  0x0b ; '.'
000000000001194f         db  0x00 ; '.'
0000000000011950         dd         0x00000010                                  ; Length of the record
0000000000011954         dd         0x0000052c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011958         db         0xd8, 0x45, 2 dup (0xff)                    ; begin 0x5f30
000000000001195c         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x5f8c)
0000000000011960         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011961         align      4
0000000000011964         dd         0x00000028                                  ; Length of the record
0000000000011968         dd         0x00000540                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001196c         db         0x24, 0x46, 2 dup (0xff)                    ; begin 0x5f90
0000000000011970         db         0x47, 3 dup (0x00)                          ; length 0x47 (end at 0x5fd7)
0000000000011974         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011975         db  0x41 ; 'A'
0000000000011976         db  0x0e ; '.'
0000000000011977         db  0x10 ; '.'
0000000000011978         db  0x83 ; '.'
0000000000011979         db  0x02 ; '.'
000000000001197a         db  0x5a ; 'Z'
000000000001197b         db  0x0a ; '.'
000000000001197c         db  0x0e ; '.'
000000000001197d         db  0x08 ; '.'
000000000001197e         db  0x45 ; 'E'
000000000001197f         db  0x0b ; '.'
0000000000011980         db  0x5d ; ']'
0000000000011981         db  0x0a ; '.'
0000000000011982         db  0x0e ; '.'
0000000000011983         db  0x08 ; '.'
0000000000011984         db  0x43 ; 'C'
0000000000011985         db  0x0b ; '.'
0000000000011986         db  0x46 ; 'F'
0000000000011987         db  0x0e ; '.'
0000000000011988         db  0x08 ; '.'
0000000000011989         db  0x00 ; '.'
000000000001198a         db  0x00 ; '.'
000000000001198b         db  0x00 ; '.'
000000000001198c         db  0x00 ; '.'
000000000001198d         db  0x00 ; '.'
000000000001198e         db  0x00 ; '.'
000000000001198f         db  0x00 ; '.'
0000000000011990         dd         0x0000005c                                  ; Length of the record
0000000000011994         dd         0x0000056c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011998         db         0x48, 0x46, 2 dup (0xff)                    ; begin 0x5fe0
000000000001199c         db         0x87, 3 dup (0x00)                          ; length 0x87 (end at 0x6067)
00000000000119a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000119a1         db  0x47 ; 'G'
00000000000119a2         db  0x0e ; '.'
00000000000119a3         db  0x10 ; '.'
00000000000119a4         db  0x8d ; '.'
00000000000119a5         db  0x02 ; '.'
00000000000119a6         db  0x42 ; 'B'
00000000000119a7         db  0x0e ; '.'
00000000000119a8         db  0x18 ; '.'
00000000000119a9         db  0x8c ; '.'
00000000000119aa         db  0x03 ; '.'
00000000000119ab         db  0x44 ; 'D'
00000000000119ac         db  0x0e ; '.'
00000000000119ad         db  0x20 ; ' '
00000000000119ae         db  0x86 ; '.'
00000000000119af         db  0x04 ; '.'
00000000000119b0         db  0x41 ; 'A'
00000000000119b1         db  0x0e ; '.'
00000000000119b2         db  0x28 ; '('
00000000000119b3         db  0x83 ; '.'
00000000000119b4         db  0x05 ; '.'
00000000000119b5         db  0x4f ; 'O'
00000000000119b6         db  0x0e ; '.'
00000000000119b7         db  0x30 ; '0'
00000000000119b8         db  0x7c ; '|'
00000000000119b9         db  0x0a ; '.'
00000000000119ba         db  0x0e ; '.'
00000000000119bb         db  0x28 ; '('
00000000000119bc         db  0x44 ; 'D'
00000000000119bd         db  0xc3 ; '.'
00000000000119be         db  0x0e ; '.'
00000000000119bf         db  0x20 ; ' '
00000000000119c0         db  0x41 ; 'A'
00000000000119c1         db  0xc6 ; '.'
00000000000119c2         db  0x0e ; '.'
00000000000119c3         db  0x18 ; '.'
00000000000119c4         db  0x42 ; 'B'
00000000000119c5         db  0xcc ; '.'
00000000000119c6         db  0x0e ; '.'
00000000000119c7         db  0x10 ; '.'
00000000000119c8         db  0x42 ; 'B'
00000000000119c9         db  0xcd ; '.'
00000000000119ca         db  0x0e ; '.'
00000000000119cb         db  0x08 ; '.'
00000000000119cc         db  0x4e ; 'N'
00000000000119cd         db  0x0b ; '.'
00000000000119ce         db  0x44 ; 'D'
00000000000119cf         db  0x0e ; '.'
00000000000119d0         db  0x28 ; '('
00000000000119d1         db  0x41 ; 'A'
00000000000119d2         db  0x0e ; '.'
00000000000119d3         db  0x20 ; ' '
00000000000119d4         db  0x41 ; 'A'
00000000000119d5         db  0x0e ; '.'
00000000000119d6         db  0x18 ; '.'
00000000000119d7         db  0x42 ; 'B'
00000000000119d8         db  0x0e ; '.'
00000000000119d9         db  0x10 ; '.'
00000000000119da         db  0x42 ; 'B'
00000000000119db         db  0x0e ; '.'
00000000000119dc         db  0x08 ; '.'
00000000000119dd         db  0x46 ; 'F'
00000000000119de         db  0xc3 ; '.'
00000000000119df         db  0xc6 ; '.'
00000000000119e0         db  0xcc ; '.'
00000000000119e1         db  0xcd ; '.'
00000000000119e2         db  0x42 ; 'B'
00000000000119e3         db  0x0e ; '.'
00000000000119e4         db  0x30 ; '0'
00000000000119e5         db  0x83 ; '.'
00000000000119e6         db  0x05 ; '.'
00000000000119e7         db  0x86 ; '.'
00000000000119e8         db  0x04 ; '.'
00000000000119e9         db  0x8c ; '.'
00000000000119ea         db  0x03 ; '.'
00000000000119eb         db  0x8d ; '.'
00000000000119ec         db  0x02 ; '.'
00000000000119ed         db  0x00 ; '.'
00000000000119ee         db  0x00 ; '.'
00000000000119ef         db  0x00 ; '.'
00000000000119f0         dd         0x0000001c                                  ; Length of the record
00000000000119f4         dd         0x000005cc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000119f8         db         0x78, 0x46, 2 dup (0xff)                    ; begin 0x6070
00000000000119fc         db         0x56, 3 dup (0x00)                          ; length 0x56 (end at 0x60c6)
0000000000011a00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a01         db  0x44 ; 'D'
0000000000011a02         db  0x0e ; '.'
0000000000011a03         db  0x30 ; '0'
0000000000011a04         db  0x02 ; '.'
0000000000011a05         db  0x4c ; 'L'
0000000000011a06         db  0x0a ; '.'
0000000000011a07         db  0x0e ; '.'
0000000000011a08         db  0x08 ; '.'
0000000000011a09         db  0x41 ; 'A'
0000000000011a0a         db  0x0b ; '.'
0000000000011a0b         db  0x00 ; '.'
0000000000011a0c         db  0x00 ; '.'
0000000000011a0d         db  0x00 ; '.'
0000000000011a0e         db  0x00 ; '.'
0000000000011a0f         db  0x00 ; '.'
0000000000011a10         dd         0x00000010                                  ; Length of the record
0000000000011a14         dd         0x000005ec                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011a18         db         0xb8, 0x46, 2 dup (0xff)                    ; begin 0x60d0
0000000000011a1c         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x6163)
0000000000011a20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a21         align      4
0000000000011a24         dd         0x00000010                                  ; Length of the record
0000000000011a28         dd         0x00000600                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011a2c         db         0x44, 0x47, 2 dup (0xff)                    ; begin 0x6170
0000000000011a30         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x6180)
0000000000011a34         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a35         align      8
0000000000011a38         dd         0x00000010                                  ; Length of the record
0000000000011a3c         dd         0x00000614                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011a40         db         0x40, 0x47, 2 dup (0xff)                    ; begin 0x6180
0000000000011a44         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0x6187)
0000000000011a48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a49         align      4
0000000000011a4c         dd         0x00000018                                  ; Length of the record
0000000000011a50         dd         0x00000628                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011a54         db         0x3c, 0x47, 2 dup (0xff)                    ; begin 0x6190
0000000000011a58         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x61b2)
0000000000011a5c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a5d         db  0x41 ; 'A'
0000000000011a5e         db  0x0e ; '.'
0000000000011a5f         db  0x10 ; '.'
0000000000011a60         db  0x83 ; '.'
0000000000011a61         db  0x02 ; '.'
0000000000011a62         db  0x5b ; '['
0000000000011a63         db  0x0a ; '.'
0000000000011a64         db  0x0e ; '.'
0000000000011a65         db  0x08 ; '.'
0000000000011a66         db  0x41 ; 'A'
0000000000011a67         db  0x0b ; '.'
0000000000011a68         dd         0x0000005c                                  ; Length of the record
0000000000011a6c         dd         0x00000644                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011a70         db         0x50, 0x47, 2 dup (0xff)                    ; begin 0x61c0
0000000000011a74         db         0x1e, 0x01, 2 dup (0x00)                    ; length 0x11e (end at 0x62de)
0000000000011a78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011a79         db  0x42 ; 'B'
0000000000011a7a         db  0x0e ; '.'
0000000000011a7b         db  0x10 ; '.'
0000000000011a7c         db  0x8e ; '.'
0000000000011a7d         db  0x02 ; '.'
0000000000011a7e         db  0x42 ; 'B'
0000000000011a7f         db  0x0e ; '.'
0000000000011a80         db  0x18 ; '.'
0000000000011a81         db  0x8d ; '.'
0000000000011a82         db  0x03 ; '.'
0000000000011a83         db  0x45 ; 'E'
0000000000011a84         db  0x0e ; '.'
0000000000011a85         db  0x20 ; ' '
0000000000011a86         db  0x8c ; '.'
0000000000011a87         db  0x04 ; '.'
0000000000011a88         db  0x41 ; 'A'
0000000000011a89         db  0x0e ; '.'
0000000000011a8a         db  0x28 ; '('
0000000000011a8b         db  0x86 ; '.'
0000000000011a8c         db  0x05 ; '.'
0000000000011a8d         db  0x44 ; 'D'
0000000000011a8e         db  0x0e ; '.'
0000000000011a8f         db  0x30 ; '0'
0000000000011a90         db  0x83 ; '.'
0000000000011a91         db  0x06 ; '.'
0000000000011a92         db  0x02 ; '.'
0000000000011a93         db  0xa1 ; '.'
0000000000011a94         db  0x0a ; '.'
0000000000011a95         db  0x0e ; '.'
0000000000011a96         db  0x28 ; '('
0000000000011a97         db  0x44 ; 'D'
0000000000011a98         db  0x0e ; '.'
0000000000011a99         db  0x20 ; ' '
0000000000011a9a         db  0x42 ; 'B'
0000000000011a9b         db  0x0e ; '.'
0000000000011a9c         db  0x18 ; '.'
0000000000011a9d         db  0x42 ; 'B'
0000000000011a9e         db  0x0e ; '.'
0000000000011a9f         db  0x10 ; '.'
0000000000011aa0         db  0x42 ; 'B'
0000000000011aa1         db  0x0e ; '.'
0000000000011aa2         db  0x08 ; '.'
0000000000011aa3         db  0x47 ; 'G'
0000000000011aa4         db  0x0b ; '.'
0000000000011aa5         db  0x71 ; 'q'
0000000000011aa6         db  0x0a ; '.'
0000000000011aa7         db  0x0e ; '.'
0000000000011aa8         db  0x28 ; '('
0000000000011aa9         db  0x41 ; 'A'
0000000000011aaa         db  0x0e ; '.'
0000000000011aab         db  0x20 ; ' '
0000000000011aac         db  0x42 ; 'B'
0000000000011aad         db  0x0e ; '.'
0000000000011aae         db  0x18 ; '.'
0000000000011aaf         db  0x42 ; 'B'
0000000000011ab0         db  0x0e ; '.'
0000000000011ab1         db  0x10 ; '.'
0000000000011ab2         db  0x42 ; 'B'
0000000000011ab3         db  0x0e ; '.'
0000000000011ab4         db  0x08 ; '.'
0000000000011ab5         db  0x48 ; 'H'
0000000000011ab6         db  0x0b ; '.'
0000000000011ab7         db  0x53 ; 'S'
0000000000011ab8         db  0x0e ; '.'
0000000000011ab9         db  0x28 ; '('
0000000000011aba         db  0x44 ; 'D'
0000000000011abb         db  0x0e ; '.'
0000000000011abc         db  0x20 ; ' '
0000000000011abd         db  0x42 ; 'B'
0000000000011abe         db  0x0e ; '.'
0000000000011abf         db  0x18 ; '.'
0000000000011ac0         db  0x42 ; 'B'
0000000000011ac1         db  0x0e ; '.'
0000000000011ac2         db  0x10 ; '.'
0000000000011ac3         db  0x42 ; 'B'
0000000000011ac4         db  0x0e ; '.'
0000000000011ac5         db  0x08 ; '.'
0000000000011ac6         db  0x00 ; '.'
0000000000011ac7         db  0x00 ; '.'
0000000000011ac8         dd         0x00000010                                  ; Length of the record
0000000000011acc         dd         0x000006a4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011ad0         db         0x10, 0x48, 2 dup (0xff)                    ; begin 0x62e0
0000000000011ad4         db         0x77, 3 dup (0x00)                          ; length 0x77 (end at 0x6357)
0000000000011ad8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ad9         align      4
0000000000011adc         dd         0x0000005c                                  ; Length of the record
0000000000011ae0         dd         0x000006b8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011ae4         db         0x7c, 0x48, 2 dup (0xff)                    ; begin 0x6360
0000000000011ae8         db         0x40, 0x01, 2 dup (0x00)                    ; length 0x140 (end at 0x64a0)
0000000000011aec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011aed         db  0x42 ; 'B'
0000000000011aee         db  0x0e ; '.'
0000000000011aef         db  0x10 ; '.'
0000000000011af0         db  0x8f ; '.'
0000000000011af1         db  0x02 ; '.'
0000000000011af2         db  0x42 ; 'B'
0000000000011af3         db  0x0e ; '.'
0000000000011af4         db  0x18 ; '.'
0000000000011af5         db  0x8e ; '.'
0000000000011af6         db  0x03 ; '.'
0000000000011af7         db  0x42 ; 'B'
0000000000011af8         db  0x0e ; '.'
0000000000011af9         db  0x20 ; ' '
0000000000011afa         db  0x8d ; '.'
0000000000011afb         db  0x04 ; '.'
0000000000011afc         db  0x42 ; 'B'
0000000000011afd         db  0x0e ; '.'
0000000000011afe         db  0x28 ; '('
0000000000011aff         db  0x8c ; '.'
0000000000011b00         db  0x05 ; '.'
0000000000011b01         db  0x41 ; 'A'
0000000000011b02         db  0x0e ; '.'
0000000000011b03         db  0x30 ; '0'
0000000000011b04         db  0x86 ; '.'
0000000000011b05         db  0x06 ; '.'
0000000000011b06         db  0x41 ; 'A'
0000000000011b07         db  0x0e ; '.'
0000000000011b08         db  0x38 ; '8'
0000000000011b09         db  0x83 ; '.'
0000000000011b0a         db  0x07 ; '.'
0000000000011b0b         db  0x44 ; 'D'
0000000000011b0c         db  0x0e ; '.'
0000000000011b0d         db  0x40 ; '@'
0000000000011b0e         db  0x02 ; '.'
0000000000011b0f         db  0xee ; '.'
0000000000011b10         db  0x0a ; '.'
0000000000011b11         db  0x0e ; '.'
0000000000011b12         db  0x38 ; '8'
0000000000011b13         db  0x46 ; 'F'
0000000000011b14         db  0x0e ; '.'
0000000000011b15         db  0x30 ; '0'
0000000000011b16         db  0x41 ; 'A'
0000000000011b17         db  0x0e ; '.'
0000000000011b18         db  0x28 ; '('
0000000000011b19         db  0x42 ; 'B'
0000000000011b1a         db  0x0e ; '.'
0000000000011b1b         db  0x20 ; ' '
0000000000011b1c         db  0x42 ; 'B'
0000000000011b1d         db  0x0e ; '.'
0000000000011b1e         db  0x18 ; '.'
0000000000011b1f         db  0x42 ; 'B'
0000000000011b20         db  0x0e ; '.'
0000000000011b21         db  0x10 ; '.'
0000000000011b22         db  0x42 ; 'B'
0000000000011b23         db  0x0e ; '.'
0000000000011b24         db  0x08 ; '.'
0000000000011b25         db  0x45 ; 'E'
0000000000011b26         db  0x0b ; '.'
0000000000011b27         db  0x63 ; 'c'
0000000000011b28         db  0x0e ; '.'
0000000000011b29         db  0x38 ; '8'
0000000000011b2a         db  0x43 ; 'C'
0000000000011b2b         db  0x0e ; '.'
0000000000011b2c         db  0x30 ; '0'
0000000000011b2d         db  0x41 ; 'A'
0000000000011b2e         db  0x0e ; '.'
0000000000011b2f         db  0x28 ; '('
0000000000011b30         db  0x42 ; 'B'
0000000000011b31         db  0x0e ; '.'
0000000000011b32         db  0x20 ; ' '
0000000000011b33         db  0x42 ; 'B'
0000000000011b34         db  0x0e ; '.'
0000000000011b35         db  0x18 ; '.'
0000000000011b36         db  0x42 ; 'B'
0000000000011b37         db  0x0e ; '.'
0000000000011b38         db  0x10 ; '.'
0000000000011b39         db  0x42 ; 'B'
0000000000011b3a         db  0x0e ; '.'
0000000000011b3b         db  0x08 ; '.'
0000000000011b3c         dd         0x00000010                                  ; Length of the record
0000000000011b40         dd         0x00000718                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011b44         db         0x5c, 0x49, 2 dup (0xff)                    ; begin 0x64a0
0000000000011b48         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x64a5)
0000000000011b4c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b4d         align      16
0000000000011b50         dd         0x00000010                                  ; Length of the record
0000000000011b54         dd         0x0000072c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011b58         db         0x58, 0x49, 2 dup (0xff)                    ; begin 0x64b0
0000000000011b5c         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x64b5)
0000000000011b60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b61         align      4
0000000000011b64         dd         0x00000010                                  ; Length of the record
0000000000011b68         dd         0x00000740                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011b6c         db         0x54, 0x49, 2 dup (0xff)                    ; begin 0x64c0
0000000000011b70         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x64c5)
0000000000011b74         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b75         align      8
0000000000011b78         dd         0x00000010                                  ; Length of the record
0000000000011b7c         dd         0x00000754                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011b80         db         0x50, 0x49, 2 dup (0xff)                    ; begin 0x64d0
0000000000011b84         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x6519)
0000000000011b88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b89         align      4
0000000000011b8c         dd         0x00000010                                  ; Length of the record
0000000000011b90         dd         0x00000768                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011b94         db         0x8c, 0x49, 2 dup (0xff)                    ; begin 0x6520
0000000000011b98         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x6578)
0000000000011b9c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011b9d         align      32
0000000000011ba0         dd         0x00000038                                  ; Length of the record
0000000000011ba4         dd         0x0000077c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011ba8         db         0xd8, 0x49, 2 dup (0xff)                    ; begin 0x6580
0000000000011bac         db         0x47, 0x01, 2 dup (0x00)                    ; length 0x147 (end at 0x66c7)
0000000000011bb0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011bb1         db  0x42 ; 'B'
0000000000011bb2         db  0x0e ; '.'
0000000000011bb3         db  0x10 ; '.'
0000000000011bb4         db  0x8d ; '.'
0000000000011bb5         db  0x02 ; '.'
0000000000011bb6         db  0x42 ; 'B'
0000000000011bb7         db  0x0e ; '.'
0000000000011bb8         db  0x18 ; '.'
0000000000011bb9         db  0x8c ; '.'
0000000000011bba         db  0x03 ; '.'
0000000000011bbb         db  0x44 ; 'D'
0000000000011bbc         db  0x0e ; '.'
0000000000011bbd         db  0x20 ; ' '
0000000000011bbe         db  0x86 ; '.'
0000000000011bbf         db  0x04 ; '.'
0000000000011bc0         db  0x41 ; 'A'
0000000000011bc1         db  0x0e ; '.'
0000000000011bc2         db  0x28 ; '('
0000000000011bc3         db  0x83 ; '.'
0000000000011bc4         db  0x05 ; '.'
0000000000011bc5         db  0x46 ; 'F'
0000000000011bc6         db  0x0e ; '.'
0000000000011bc7         db  0x30 ; '0'
0000000000011bc8         db  0x02 ; '.'
0000000000011bc9         db  0xcd ; '.'
0000000000011bca         db  0x0a ; '.'
0000000000011bcb         db  0x0e ; '.'
0000000000011bcc         db  0x28 ; '('
0000000000011bcd         db  0x47 ; 'G'
0000000000011bce         db  0x0e ; '.'
0000000000011bcf         db  0x20 ; ' '
0000000000011bd0         db  0x41 ; 'A'
0000000000011bd1         db  0x0e ; '.'
0000000000011bd2         db  0x18 ; '.'
0000000000011bd3         db  0x42 ; 'B'
0000000000011bd4         db  0x0e ; '.'
0000000000011bd5         db  0x10 ; '.'
0000000000011bd6         db  0x42 ; 'B'
0000000000011bd7         db  0x0e ; '.'
0000000000011bd8         db  0x08 ; '.'
0000000000011bd9         db  0x58 ; 'X'
0000000000011bda         db  0x0b ; '.'
0000000000011bdb         db  0x00 ; '.'
0000000000011bdc         dd         0x00000034                                  ; Length of the record
0000000000011be0         dd         0x000007b8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011be4         db         0xec, 0x4a, 2 dup (0xff)                    ; begin 0x66d0
0000000000011be8         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x672b)
0000000000011bec         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011bed         db  0x42 ; 'B'
0000000000011bee         db  0x0e ; '.'
0000000000011bef         db  0x10 ; '.'
0000000000011bf0         db  0x8c ; '.'
0000000000011bf1         db  0x02 ; '.'
0000000000011bf2         db  0x41 ; 'A'
0000000000011bf3         db  0x0e ; '.'
0000000000011bf4         db  0x18 ; '.'
0000000000011bf5         db  0x86 ; '.'
0000000000011bf6         db  0x03 ; '.'
0000000000011bf7         db  0x44 ; 'D'
0000000000011bf8         db  0x0e ; '.'
0000000000011bf9         db  0x20 ; ' '
0000000000011bfa         db  0x83 ; '.'
0000000000011bfb         db  0x04 ; '.'
0000000000011bfc         db  0x79 ; 'y'
0000000000011bfd         db  0x0a ; '.'
0000000000011bfe         db  0x0e ; '.'
0000000000011bff         db  0x18 ; '.'
0000000000011c00         db  0x44 ; 'D'
0000000000011c01         db  0x0e ; '.'
0000000000011c02         db  0x10 ; '.'
0000000000011c03         db  0x42 ; 'B'
0000000000011c04         db  0x0e ; '.'
0000000000011c05         db  0x08 ; '.'
0000000000011c06         db  0x4a ; 'J'
0000000000011c07         db  0x0b ; '.'
0000000000011c08         db  0x44 ; 'D'
0000000000011c09         db  0x0e ; '.'
0000000000011c0a         db  0x18 ; '.'
0000000000011c0b         db  0x41 ; 'A'
0000000000011c0c         db  0x0e ; '.'
0000000000011c0d         db  0x10 ; '.'
0000000000011c0e         db  0x45 ; 'E'
0000000000011c0f         db  0x0e ; '.'
0000000000011c10         db  0x08 ; '.'
0000000000011c11         db  0x00 ; '.'
0000000000011c12         db  0x00 ; '.'
0000000000011c13         db  0x00 ; '.'
0000000000011c14         dd         0x00000010                                  ; Length of the record
0000000000011c18         dd         0x000007f0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011c1c         db         0x14, 0x4b, 2 dup (0xff)                    ; begin 0x6730
0000000000011c20         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x6771)
0000000000011c24         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011c25         db  0x7c ; '|'
0000000000011c26         db  0x0e ; '.'
0000000000011c27         db  0x10 ; '.'
0000000000011c28         dd         0x00000030                                  ; Length of the record
0000000000011c2c         dd         0x00000804                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011c30         db         0x50, 0x4b, 2 dup (0xff)                    ; begin 0x6780
0000000000011c34         db         0x72, 3 dup (0x00)                          ; length 0x72 (end at 0x67f2)
0000000000011c38         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011c39         db  0x41 ; 'A'
0000000000011c3a         db  0x0e ; '.'
0000000000011c3b         db  0x10 ; '.'
0000000000011c3c         db  0x86 ; '.'
0000000000011c3d         db  0x02 ; '.'
0000000000011c3e         db  0x41 ; 'A'
0000000000011c3f         db  0x0e ; '.'
0000000000011c40         db  0x18 ; '.'
0000000000011c41         db  0x83 ; '.'
0000000000011c42         db  0x03 ; '.'
0000000000011c43         db  0x4a ; 'J'
0000000000011c44         db  0x0e ; '.'
0000000000011c45         db  0x20 ; ' '
0000000000011c46         db  0x02 ; '.'
0000000000011c47         db  0x53 ; 'S'
0000000000011c48         db  0x0a ; '.'
0000000000011c49         db  0x0e ; '.'
0000000000011c4a         db  0x18 ; '.'
0000000000011c4b         db  0x41 ; 'A'
0000000000011c4c         db  0x0e ; '.'
0000000000011c4d         db  0x10 ; '.'
0000000000011c4e         db  0x41 ; 'A'
0000000000011c4f         db  0x0e ; '.'
0000000000011c50         db  0x08 ; '.'
0000000000011c51         db  0x47 ; 'G'
0000000000011c52         db  0x0b ; '.'
0000000000011c53         db  0x47 ; 'G'
0000000000011c54         db  0x0e ; '.'
0000000000011c55         db  0x18 ; '.'
0000000000011c56         db  0x41 ; 'A'
0000000000011c57         db  0x0e ; '.'
0000000000011c58         db  0x10 ; '.'
0000000000011c59         db  0x41 ; 'A'
0000000000011c5a         db  0x0e ; '.'
0000000000011c5b         db  0x08 ; '.'
0000000000011c5c         dd         0x00000010                                  ; Length of the record
0000000000011c60         dd         0x00000838                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011c64         db         0x9c, 0x4b, 2 dup (0xff)                    ; begin 0x6800
0000000000011c68         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x6865)
0000000000011c6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011c6d         align      16
0000000000011c70         dd         0x00000048                                  ; Length of the record
0000000000011c74         dd         0x0000084c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011c78         db         0xf8, 0x4b, 2 dup (0xff)                    ; begin 0x6870
0000000000011c7c         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x68da)
0000000000011c80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011c81         db  0x42 ; 'B'
0000000000011c82         db  0x0e ; '.'
0000000000011c83         db  0x10 ; '.'
0000000000011c84         db  0x8f ; '.'
0000000000011c85         db  0x02 ; '.'
0000000000011c86         db  0x42 ; 'B'
0000000000011c87         db  0x0e ; '.'
0000000000011c88         db  0x18 ; '.'
0000000000011c89         db  0x8e ; '.'
0000000000011c8a         db  0x03 ; '.'
0000000000011c8b         db  0x42 ; 'B'
0000000000011c8c         db  0x0e ; '.'
0000000000011c8d         db  0x20 ; ' '
0000000000011c8e         db  0x8d ; '.'
0000000000011c8f         db  0x04 ; '.'
0000000000011c90         db  0x42 ; 'B'
0000000000011c91         db  0x0e ; '.'
0000000000011c92         db  0x28 ; '('
0000000000011c93         db  0x8c ; '.'
0000000000011c94         db  0x05 ; '.'
0000000000011c95         db  0x41 ; 'A'
0000000000011c96         db  0x0e ; '.'
0000000000011c97         db  0x30 ; '0'
0000000000011c98         db  0x86 ; '.'
0000000000011c99         db  0x06 ; '.'
0000000000011c9a         db  0x41 ; 'A'
0000000000011c9b         db  0x0e ; '.'
0000000000011c9c         db  0x38 ; '8'
0000000000011c9d         db  0x83 ; '.'
0000000000011c9e         db  0x07 ; '.'
0000000000011c9f         db  0x44 ; 'D'
0000000000011ca0         db  0x0e ; '.'
0000000000011ca1         db  0x40 ; '@'
0000000000011ca2         db  0x02 ; '.'
0000000000011ca3         db  0x4a ; 'J'
0000000000011ca4         db  0x0a ; '.'
0000000000011ca5         db  0x0e ; '.'
0000000000011ca6         db  0x38 ; '8'
0000000000011ca7         db  0x44 ; 'D'
0000000000011ca8         db  0x0e ; '.'
0000000000011ca9         db  0x30 ; '0'
0000000000011caa         db  0x41 ; 'A'
0000000000011cab         db  0x0e ; '.'
0000000000011cac         db  0x28 ; '('
0000000000011cad         db  0x42 ; 'B'
0000000000011cae         db  0x0e ; '.'
0000000000011caf         db  0x20 ; ' '
0000000000011cb0         db  0x42 ; 'B'
0000000000011cb1         db  0x0e ; '.'
0000000000011cb2         db  0x18 ; '.'
0000000000011cb3         db  0x42 ; 'B'
0000000000011cb4         db  0x0e ; '.'
0000000000011cb5         db  0x10 ; '.'
0000000000011cb6         db  0x42 ; 'B'
0000000000011cb7         db  0x0e ; '.'
0000000000011cb8         db  0x08 ; '.'
0000000000011cb9         db  0x41 ; 'A'
0000000000011cba         db  0x0b ; '.'
0000000000011cbb         db  0x00 ; '.'
0000000000011cbc         dd         0x00000010                                  ; Length of the record
0000000000011cc0         dd         0x00000898                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011cc4         db         0x1c, 0x4c, 2 dup (0xff)                    ; begin 0x68e0
0000000000011cc8         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x6911)
0000000000011ccc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ccd         align      16
0000000000011cd0         dd         0x00000010                                  ; Length of the record
0000000000011cd4         dd         0x000008ac                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011cd8         db         0x48, 0x4c, 2 dup (0xff)                    ; begin 0x6920
0000000000011cdc         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x6940)
0000000000011ce0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ce1         align      4
0000000000011ce4         dd         0x00000048                                  ; Length of the record
0000000000011ce8         dd         0x000008c0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011cec         db         0x54, 0x4c, 2 dup (0xff)                    ; begin 0x6940
0000000000011cf0         db         0xb4, 0x01, 2 dup (0x00)                    ; length 0x1b4 (end at 0x6af4)
0000000000011cf4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011cf5         db  0x42 ; 'B'
0000000000011cf6         db  0x0e ; '.'
0000000000011cf7         db  0x10 ; '.'
0000000000011cf8         db  0x8f ; '.'
0000000000011cf9         db  0x02 ; '.'
0000000000011cfa         db  0x42 ; 'B'
0000000000011cfb         db  0x0e ; '.'
0000000000011cfc         db  0x18 ; '.'
0000000000011cfd         db  0x8e ; '.'
0000000000011cfe         db  0x03 ; '.'
0000000000011cff         db  0x49 ; 'I'
0000000000011d00         db  0x0e ; '.'
0000000000011d01         db  0x20 ; ' '
0000000000011d02         db  0x8d ; '.'
0000000000011d03         db  0x04 ; '.'
0000000000011d04         db  0x42 ; 'B'
0000000000011d05         db  0x0e ; '.'
0000000000011d06         db  0x28 ; '('
0000000000011d07         db  0x8c ; '.'
0000000000011d08         db  0x05 ; '.'
0000000000011d09         db  0x44 ; 'D'
0000000000011d0a         db  0x0e ; '.'
0000000000011d0b         db  0x30 ; '0'
0000000000011d0c         db  0x86 ; '.'
0000000000011d0d         db  0x06 ; '.'
0000000000011d0e         db  0x41 ; 'A'
0000000000011d0f         db  0x0e ; '.'
0000000000011d10         db  0x38 ; '8'
0000000000011d11         db  0x83 ; '.'
0000000000011d12         db  0x07 ; '.'
0000000000011d13         db  0x52 ; 'R'
0000000000011d14         db  0x0e ; '.'
0000000000011d15         db  0x40 ; '@'
0000000000011d16         db  0x02 ; '.'
0000000000011d17         db  0xd8 ; '.'
0000000000011d18         db  0x0a ; '.'
0000000000011d19         db  0x0e ; '.'
0000000000011d1a         db  0x38 ; '8'
0000000000011d1b         db  0x44 ; 'D'
0000000000011d1c         db  0x0e ; '.'
0000000000011d1d         db  0x30 ; '0'
0000000000011d1e         db  0x41 ; 'A'
0000000000011d1f         db  0x0e ; '.'
0000000000011d20         db  0x28 ; '('
0000000000011d21         db  0x42 ; 'B'
0000000000011d22         db  0x0e ; '.'
0000000000011d23         db  0x20 ; ' '
0000000000011d24         db  0x42 ; 'B'
0000000000011d25         db  0x0e ; '.'
0000000000011d26         db  0x18 ; '.'
0000000000011d27         db  0x42 ; 'B'
0000000000011d28         db  0x0e ; '.'
0000000000011d29         db  0x10 ; '.'
0000000000011d2a         db  0x42 ; 'B'
0000000000011d2b         db  0x0e ; '.'
0000000000011d2c         db  0x08 ; '.'
0000000000011d2d         db  0x45 ; 'E'
0000000000011d2e         db  0x0b ; '.'
0000000000011d2f         db  0x00 ; '.'
0000000000011d30         dd         0x00000028                                  ; Length of the record
0000000000011d34         dd         0x0000090c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011d38         db         0xc8, 0x4d, 2 dup (0xff)                    ; begin 0x6b00
0000000000011d3c         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x6b90)
0000000000011d40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011d41         db  0x42 ; 'B'
0000000000011d42         db  0x0e ; '.'
0000000000011d43         db  0x10 ; '.'
0000000000011d44         db  0x8c ; '.'
0000000000011d45         db  0x02 ; '.'
0000000000011d46         db  0x41 ; 'A'
0000000000011d47         db  0x0e ; '.'
0000000000011d48         db  0x18 ; '.'
0000000000011d49         db  0x86 ; '.'
0000000000011d4a         db  0x03 ; '.'
0000000000011d4b         db  0x44 ; 'D'
0000000000011d4c         db  0x0e ; '.'
0000000000011d4d         db  0x20 ; ' '
0000000000011d4e         db  0x83 ; '.'
0000000000011d4f         db  0x04 ; '.'
0000000000011d50         db  0x02 ; '.'
0000000000011d51         db  0x85 ; '.'
0000000000011d52         db  0x0e ; '.'
0000000000011d53         db  0x18 ; '.'
0000000000011d54         db  0x41 ; 'A'
0000000000011d55         db  0x0e ; '.'
0000000000011d56         db  0x10 ; '.'
0000000000011d57         db  0x42 ; 'B'
0000000000011d58         db  0x0e ; '.'
0000000000011d59         db  0x08 ; '.'
0000000000011d5a         db  0x00 ; '.'
0000000000011d5b         db  0x00 ; '.'
0000000000011d5c         dd         0x00000028                                  ; Length of the record
0000000000011d60         dd         0x00000938                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011d64         db         0x2c, 0x4e, 2 dup (0xff)                    ; begin 0x6b90
0000000000011d68         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0x6c66)
0000000000011d6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011d6d         db  0x42 ; 'B'
0000000000011d6e         db  0x0e ; '.'
0000000000011d6f         db  0x10 ; '.'
0000000000011d70         db  0x8c ; '.'
0000000000011d71         db  0x02 ; '.'
0000000000011d72         db  0x41 ; 'A'
0000000000011d73         db  0x0e ; '.'
0000000000011d74         db  0x18 ; '.'
0000000000011d75         db  0x86 ; '.'
0000000000011d76         db  0x03 ; '.'
0000000000011d77         db  0x44 ; 'D'
0000000000011d78         db  0x0e ; '.'
0000000000011d79         db  0x20 ; ' '
0000000000011d7a         db  0x83 ; '.'
0000000000011d7b         db  0x04 ; '.'
0000000000011d7c         db  0x02 ; '.'
0000000000011d7d         db  0xc4 ; '.'
0000000000011d7e         db  0x0e ; '.'
0000000000011d7f         db  0x18 ; '.'
0000000000011d80         db  0x44 ; 'D'
0000000000011d81         db  0x0e ; '.'
0000000000011d82         db  0x10 ; '.'
0000000000011d83         db  0x42 ; 'B'
0000000000011d84         db  0x0e ; '.'
0000000000011d85         db  0x08 ; '.'
0000000000011d86         db  0x00 ; '.'
0000000000011d87         db  0x00 ; '.'
0000000000011d88         dd         0x00000034                                  ; Length of the record
0000000000011d8c         dd         0x00000964                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011d90         db         0xe0, 0x4e, 2 dup (0xff)                    ; begin 0x6c70
0000000000011d94         db         0x3e, 0x02, 2 dup (0x00)                    ; length 0x23e (end at 0x6eae)
0000000000011d98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011d99         db  0x42 ; 'B'
0000000000011d9a         db  0x0e ; '.'
0000000000011d9b         db  0x10 ; '.'
0000000000011d9c         db  0x8c ; '.'
0000000000011d9d         db  0x02 ; '.'
0000000000011d9e         db  0x41 ; 'A'
0000000000011d9f         db  0x0e ; '.'
0000000000011da0         db  0x18 ; '.'
0000000000011da1         db  0x86 ; '.'
0000000000011da2         db  0x03 ; '.'
0000000000011da3         db  0x44 ; 'D'
0000000000011da4         db  0x0e ; '.'
0000000000011da5         db  0x20 ; ' '
0000000000011da6         db  0x83 ; '.'
0000000000011da7         db  0x04 ; '.'
0000000000011da8         db  0x44 ; 'D'
0000000000011da9         db  0x0e ; '.'
0000000000011daa         db  0x80 ; '.'
0000000000011dab         db  0x01 ; '.'
0000000000011dac         db  0x03 ; '.'
0000000000011dad         db  0x91 ; '.'
0000000000011dae         db  0x01 ; '.'
0000000000011daf         db  0x0a ; '.'
0000000000011db0         db  0x0e ; '.'
0000000000011db1         db  0x20 ; ' '
0000000000011db2         db  0x41 ; 'A'
0000000000011db3         db  0x0e ; '.'
0000000000011db4         db  0x18 ; '.'
0000000000011db5         db  0x41 ; 'A'
0000000000011db6         db  0x0e ; '.'
0000000000011db7         db  0x10 ; '.'
0000000000011db8         db  0x42 ; 'B'
0000000000011db9         db  0x0e ; '.'
0000000000011dba         db  0x08 ; '.'
0000000000011dbb         db  0x48 ; 'H'
0000000000011dbc         db  0x0b ; '.'
0000000000011dbd         db  0x00 ; '.'
0000000000011dbe         db  0x00 ; '.'
0000000000011dbf         db  0x00 ; '.'
0000000000011dc0         dd         0x00000038                                  ; Length of the record
0000000000011dc4         dd         0x0000099c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011dc8         db         0xe8, 0x50, 2 dup (0xff)                    ; begin 0x6eb0
0000000000011dcc         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0x7134)
0000000000011dd0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011dd1         db  0x42 ; 'B'
0000000000011dd2         db  0x0e ; '.'
0000000000011dd3         db  0x10 ; '.'
0000000000011dd4         db  0x8d ; '.'
0000000000011dd5         db  0x02 ; '.'
0000000000011dd6         db  0x42 ; 'B'
0000000000011dd7         db  0x0e ; '.'
0000000000011dd8         db  0x18 ; '.'
0000000000011dd9         db  0x8c ; '.'
0000000000011dda         db  0x03 ; '.'
0000000000011ddb         db  0x41 ; 'A'
0000000000011ddc         db  0x0e ; '.'
0000000000011ddd         db  0x20 ; ' '
0000000000011dde         db  0x86 ; '.'
0000000000011ddf         db  0x04 ; '.'
0000000000011de0         db  0x41 ; 'A'
0000000000011de1         db  0x0e ; '.'
0000000000011de2         db  0x28 ; '('
0000000000011de3         db  0x83 ; '.'
0000000000011de4         db  0x05 ; '.'
0000000000011de5         db  0x44 ; 'D'
0000000000011de6         db  0x0e ; '.'
0000000000011de7         db  0x40 ; '@'
0000000000011de8         db  0x02 ; '.'
0000000000011de9         db  0x5a ; 'Z'
0000000000011dea         db  0x0a ; '.'
0000000000011deb         db  0x0e ; '.'
0000000000011dec         db  0x28 ; '('
0000000000011ded         db  0x41 ; 'A'
0000000000011dee         db  0x0e ; '.'
0000000000011def         db  0x20 ; ' '
0000000000011df0         db  0x41 ; 'A'
0000000000011df1         db  0x0e ; '.'
0000000000011df2         db  0x18 ; '.'
0000000000011df3         db  0x42 ; 'B'
0000000000011df4         db  0x0e ; '.'
0000000000011df5         db  0x10 ; '.'
0000000000011df6         db  0x42 ; 'B'
0000000000011df7         db  0x0e ; '.'
0000000000011df8         db  0x08 ; '.'
0000000000011df9         db  0x46 ; 'F'
0000000000011dfa         db  0x0b ; '.'
0000000000011dfb         db  0x00 ; '.'
0000000000011dfc         dd         0x00000020                                  ; Length of the record
0000000000011e00         dd         0x000009d8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011e04         db         0x3c, 0x53, 2 dup (0xff)                    ; begin 0x7140
0000000000011e08         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0x7199)
0000000000011e0c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011e0d         db  0x41 ; 'A'
0000000000011e0e         db  0x0e ; '.'
0000000000011e0f         db  0x10 ; '.'
0000000000011e10         db  0x83 ; '.'
0000000000011e11         db  0x02 ; '.'
0000000000011e12         db  0x47 ; 'G'
0000000000011e13         db  0x0e ; '.'
0000000000011e14         db  0x20 ; ' '
0000000000011e15         db  0x7c ; '|'
0000000000011e16         db  0x0a ; '.'
0000000000011e17         db  0x0e ; '.'
0000000000011e18         db  0x10 ; '.'
0000000000011e19         db  0x41 ; 'A'
0000000000011e1a         db  0x0e ; '.'
0000000000011e1b         db  0x08 ; '.'
0000000000011e1c         db  0x4b ; 'K'
0000000000011e1d         db  0x0b ; '.'
0000000000011e1e         db  0x00 ; '.'
0000000000011e1f         db  0x00 ; '.'
0000000000011e20         dd         0x00000034                                  ; Length of the record
0000000000011e24         dd         0x000009fc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011e28         db         0x78, 0x53, 2 dup (0xff)                    ; begin 0x71a0
0000000000011e2c         db         0x03, 0x02, 2 dup (0x00)                    ; length 0x203 (end at 0x73a3)
0000000000011e30         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011e31         db  0x42 ; 'B'
0000000000011e32         db  0x0e ; '.'
0000000000011e33         db  0x10 ; '.'
0000000000011e34         db  0x8c ; '.'
0000000000011e35         db  0x02 ; '.'
0000000000011e36         db  0x41 ; 'A'
0000000000011e37         db  0x0e ; '.'
0000000000011e38         db  0x18 ; '.'
0000000000011e39         db  0x86 ; '.'
0000000000011e3a         db  0x03 ; '.'
0000000000011e3b         db  0x46 ; 'F'
0000000000011e3c         db  0x0e ; '.'
0000000000011e3d         db  0x20 ; ' '
0000000000011e3e         db  0x83 ; '.'
0000000000011e3f         db  0x04 ; '.'
0000000000011e40         db  0x47 ; 'G'
0000000000011e41         db  0x0e ; '.'
0000000000011e42         db  0x30 ; '0'
0000000000011e43         db  0x02 ; '.'
0000000000011e44         db  0x4a ; 'J'
0000000000011e45         db  0x0a ; '.'
0000000000011e46         db  0x0e ; '.'
0000000000011e47         db  0x20 ; ' '
0000000000011e48         db  0x41 ; 'A'
0000000000011e49         db  0x0e ; '.'
0000000000011e4a         db  0x18 ; '.'
0000000000011e4b         db  0x41 ; 'A'
0000000000011e4c         db  0x0e ; '.'
0000000000011e4d         db  0x10 ; '.'
0000000000011e4e         db  0x42 ; 'B'
0000000000011e4f         db  0x0e ; '.'
0000000000011e50         db  0x08 ; '.'
0000000000011e51         db  0x42 ; 'B'
0000000000011e52         db  0x0b ; '.'
0000000000011e53         db  0x00 ; '.'
0000000000011e54         db  0x00 ; '.'
0000000000011e55         db  0x00 ; '.'
0000000000011e56         db  0x00 ; '.'
0000000000011e57         db  0x00 ; '.'
0000000000011e58         dd         0x00000024                                  ; Length of the record
0000000000011e5c         dd         0x00000a34                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011e60         db         0x50, 0x55, 2 dup (0xff)                    ; begin 0x73b0
0000000000011e64         db         0x27, 3 dup (0x00)                          ; length 0x27 (end at 0x73d7)
0000000000011e68         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011e69         db  0x41 ; 'A'
0000000000011e6a         db  0x0e ; '.'
0000000000011e6b         db  0x10 ; '.'
0000000000011e6c         db  0x86 ; '.'
0000000000011e6d         db  0x02 ; '.'
0000000000011e6e         db  0x41 ; 'A'
0000000000011e6f         db  0x0e ; '.'
0000000000011e70         db  0x18 ; '.'
0000000000011e71         db  0x83 ; '.'
0000000000011e72         db  0x03 ; '.'
0000000000011e73         db  0x4a ; 'J'
0000000000011e74         db  0x0e ; '.'
0000000000011e75         db  0x20 ; ' '
0000000000011e76         db  0x52 ; 'R'
0000000000011e77         db  0x0e ; '.'
0000000000011e78         db  0x18 ; '.'
0000000000011e79         db  0x44 ; 'D'
0000000000011e7a         db  0x0e ; '.'
0000000000011e7b         db  0x10 ; '.'
0000000000011e7c         db  0x41 ; 'A'
0000000000011e7d         db  0x0e ; '.'
0000000000011e7e         db  0x08 ; '.'
0000000000011e7f         db  0x00 ; '.'
0000000000011e80         dd         0x00000010                                  ; Length of the record
0000000000011e84         dd         0x00000a5c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011e88         db         0x58, 0x55, 2 dup (0xff)                    ; begin 0x73e0
0000000000011e8c         db         0x0d, 3 dup (0x00)                          ; length 0xd (end at 0x73ed)
0000000000011e90         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011e91         align      4
0000000000011e94         dd         0x00000014                                  ; Length of the record
0000000000011e98         dd         0x00000a70                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011e9c         db         0x54, 0x55, 2 dup (0xff)                    ; begin 0x73f0
0000000000011ea0         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x741e)
0000000000011ea4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ea5         db  0x5e ; '^'
0000000000011ea6         db  0x0e ; '.'
0000000000011ea7         db  0x10 ; '.'
0000000000011ea8         db  0x4f ; 'O'
0000000000011ea9         db  0x0e ; '.'
0000000000011eaa         db  0x08 ; '.'
0000000000011eab         db  0x00 ; '.'
0000000000011eac         dd         0x00000014                                  ; Length of the record
0000000000011eb0         dd         0x00000a88                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011eb4         db         0x6c, 0x55, 2 dup (0xff)                    ; begin 0x7420
0000000000011eb8         db         0x33, 3 dup (0x00)                          ; length 0x33 (end at 0x7453)
0000000000011ebc         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ebd         db  0x5e ; '^'
0000000000011ebe         db  0x0e ; '.'
0000000000011ebf         db  0x10 ; '.'
0000000000011ec0         db  0x54 ; 'T'
0000000000011ec1         db  0x0e ; '.'
0000000000011ec2         db  0x08 ; '.'
0000000000011ec3         db  0x00 ; '.'
0000000000011ec4         dd         0x00000018                                  ; Length of the record
0000000000011ec8         dd         0x00000aa0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011ecc         db         0x94, 0x55, 2 dup (0xff)                    ; begin 0x7460
0000000000011ed0         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x7475)
0000000000011ed4         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ed5         db  0x41 ; 'A'
0000000000011ed6         db  0x0e ; '.'
0000000000011ed7         db  0x10 ; '.'
0000000000011ed8         db  0x83 ; '.'
0000000000011ed9         db  0x02 ; '.'
0000000000011eda         db  0x4f ; 'O'
0000000000011edb         db  0x0e ; '.'
0000000000011edc         db  0x08 ; '.'
0000000000011edd         db  0x00 ; '.'
0000000000011ede         db  0x00 ; '.'
0000000000011edf         db  0x00 ; '.'
0000000000011ee0         dd         0x00000010                                  ; Length of the record
0000000000011ee4         dd         0x00000abc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011ee8         db         0x98, 0x55, 2 dup (0xff)                    ; begin 0x7480
0000000000011eec         db         0xc7, 3 dup (0x00)                          ; length 0xc7 (end at 0x7547)
0000000000011ef0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011ef1         align      4
0000000000011ef4         dd         0x000000a4                                  ; Length of the record
0000000000011ef8         dd         0x00000ad0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011efc         db         0x54, 0x56, 2 dup (0xff)                    ; begin 0x7550
0000000000011f00         db         0x07, 0x0a, 2 dup (0x00)                    ; length 0xa07 (end at 0x7f57)
0000000000011f04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011f05         db  0x42 ; 'B'
0000000000011f06         db  0x0e ; '.'
0000000000011f07         db  0x10 ; '.'
0000000000011f08         db  0x8f ; '.'
0000000000011f09         db  0x02 ; '.'
0000000000011f0a         db  0x42 ; 'B'
0000000000011f0b         db  0x0e ; '.'
0000000000011f0c         db  0x18 ; '.'
0000000000011f0d         db  0x8e ; '.'
0000000000011f0e         db  0x03 ; '.'
0000000000011f0f         db  0x44 ; 'D'
0000000000011f10         db  0x0e ; '.'
0000000000011f11         db  0x20 ; ' '
0000000000011f12         db  0x8d ; '.'
0000000000011f13         db  0x04 ; '.'
0000000000011f14         db  0x42 ; 'B'
0000000000011f15         db  0x0e ; '.'
0000000000011f16         db  0x28 ; '('
0000000000011f17         db  0x8c ; '.'
0000000000011f18         db  0x05 ; '.'
0000000000011f19         db  0x44 ; 'D'
0000000000011f1a         db  0x0e ; '.'
0000000000011f1b         db  0x30 ; '0'
0000000000011f1c         db  0x86 ; '.'
0000000000011f1d         db  0x06 ; '.'
0000000000011f1e         db  0x41 ; 'A'
0000000000011f1f         db  0x0e ; '.'
0000000000011f20         db  0x38 ; '8'
0000000000011f21         db  0x83 ; '.'
0000000000011f22         db  0x07 ; '.'
0000000000011f23         db  0x54 ; 'T'
0000000000011f24         db  0x0e ; '.'
0000000000011f25         db  0xd0 ; '.'
0000000000011f26         db  0x01 ; '.'
0000000000011f27         db  0x03 ; '.'
0000000000011f28         db  0x7e ; '~'
0000000000011f29         db  0x01 ; '.'
0000000000011f2a         db  0x0e ; '.'
0000000000011f2b         db  0xe0 ; '.'
0000000000011f2c         db  0x01 ; '.'
0000000000011f2d         db  0x6e ; 'n'
0000000000011f2e         db  0x0e ; '.'
0000000000011f2f         db  0xd8 ; '.'
0000000000011f30         db  0x01 ; '.'
0000000000011f31         db  0x41 ; 'A'
0000000000011f32         db  0x0e ; '.'
0000000000011f33         db  0xd0 ; '.'
0000000000011f34         db  0x01 ; '.'
0000000000011f35         db  0x03 ; '.'
0000000000011f36         db  0x40 ; '@'
0000000000011f37         db  0x01 ; '.'
0000000000011f38         db  0x0e ; '.'
0000000000011f39         db  0xe0 ; '.'
0000000000011f3a         db  0x01 ; '.'
0000000000011f3b         db  0x75 ; 'u'
0000000000011f3c         db  0x0e ; '.'
0000000000011f3d         db  0xd8 ; '.'
0000000000011f3e         db  0x01 ; '.'
0000000000011f3f         db  0x41 ; 'A'
0000000000011f40         db  0x0e ; '.'
0000000000011f41         db  0xd0 ; '.'
0000000000011f42         db  0x01 ; '.'
0000000000011f43         db  0x02 ; '.'
0000000000011f44         db  0xea ; '.'
0000000000011f45         db  0x0a ; '.'
0000000000011f46         db  0x0e ; '.'
0000000000011f47         db  0x38 ; '8'
0000000000011f48         db  0x41 ; 'A'
0000000000011f49         db  0x0e ; '.'
0000000000011f4a         db  0x30 ; '0'
0000000000011f4b         db  0x41 ; 'A'
0000000000011f4c         db  0x0e ; '.'
0000000000011f4d         db  0x28 ; '('
0000000000011f4e         db  0x42 ; 'B'
0000000000011f4f         db  0x0e ; '.'
0000000000011f50         db  0x20 ; ' '
0000000000011f51         db  0x42 ; 'B'
0000000000011f52         db  0x0e ; '.'
0000000000011f53         db  0x18 ; '.'
0000000000011f54         db  0x42 ; 'B'
0000000000011f55         db  0x0e ; '.'
0000000000011f56         db  0x10 ; '.'
0000000000011f57         db  0x42 ; 'B'
0000000000011f58         db  0x0e ; '.'
0000000000011f59         db  0x08 ; '.'
0000000000011f5a         db  0x46 ; 'F'
0000000000011f5b         db  0x0b ; '.'
0000000000011f5c         db  0x03 ; '.'
0000000000011f5d         db  0x2c ; ','
0000000000011f5e         db  0x01 ; '.'
0000000000011f5f         db  0x0e ; '.'
0000000000011f60         db  0xe0 ; '.'
0000000000011f61         db  0x01 ; '.'
0000000000011f62         db  0x52 ; 'R'
0000000000011f63         db  0x0e ; '.'
0000000000011f64         db  0xd8 ; '.'
0000000000011f65         db  0x01 ; '.'
0000000000011f66         db  0x41 ; 'A'
0000000000011f67         db  0x0e ; '.'
0000000000011f68         db  0xd0 ; '.'
0000000000011f69         db  0x01 ; '.'
0000000000011f6a         db  0x55 ; 'U'
0000000000011f6b         db  0x0e ; '.'
0000000000011f6c         db  0xe0 ; '.'
0000000000011f6d         db  0x01 ; '.'
0000000000011f6e         db  0x4d ; 'M'
0000000000011f6f         db  0x0e ; '.'
0000000000011f70         db  0xd8 ; '.'
0000000000011f71         db  0x01 ; '.'
0000000000011f72         db  0x42 ; 'B'
0000000000011f73         db  0x0e ; '.'
0000000000011f74         db  0xd0 ; '.'
0000000000011f75         db  0x01 ; '.'
0000000000011f76         db  0x03 ; '.'
0000000000011f77         db  0x51 ; 'Q'
0000000000011f78         db  0x01 ; '.'
0000000000011f79         db  0x0e ; '.'
0000000000011f7a         db  0xe0 ; '.'
0000000000011f7b         db  0x01 ; '.'
0000000000011f7c         db  0x77 ; 'w'
0000000000011f7d         db  0x0e ; '.'
0000000000011f7e         db  0xd8 ; '.'
0000000000011f7f         db  0x01 ; '.'
0000000000011f80         db  0x41 ; 'A'
0000000000011f81         db  0x0e ; '.'
0000000000011f82         db  0xd0 ; '.'
0000000000011f83         db  0x01 ; '.'
0000000000011f84         db  0x5d ; ']'
0000000000011f85         db  0x0e ; '.'
0000000000011f86         db  0xe0 ; '.'
0000000000011f87         db  0x01 ; '.'
0000000000011f88         db  0x71 ; 'q'
0000000000011f89         db  0x0e ; '.'
0000000000011f8a         db  0xd8 ; '.'
0000000000011f8b         db  0x01 ; '.'
0000000000011f8c         db  0x45 ; 'E'
0000000000011f8d         db  0x0e ; '.'
0000000000011f8e         db  0xd0 ; '.'
0000000000011f8f         db  0x01 ; '.'
0000000000011f90         db  0x63 ; 'c'
0000000000011f91         db  0x0e ; '.'
0000000000011f92         db  0xe0 ; '.'
0000000000011f93         db  0x01 ; '.'
0000000000011f94         db  0x4c ; 'L'
0000000000011f95         db  0x0e ; '.'
0000000000011f96         db  0xd8 ; '.'
0000000000011f97         db  0x01 ; '.'
0000000000011f98         db  0x42 ; 'B'
0000000000011f99         db  0x0e ; '.'
0000000000011f9a         db  0xd0 ; '.'
0000000000011f9b         db  0x01 ; '.'
0000000000011f9c         dd         0x00000038                                  ; Length of the record
0000000000011fa0         dd         0x00000b78                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011fa4         db         0xbc, 0x5f, 2 dup (0xff)                    ; begin 0x7f60
0000000000011fa8         db         0xe6, 0x01, 2 dup (0x00)                    ; length 0x1e6 (end at 0x8146)
0000000000011fac         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011fad         db  0x42 ; 'B'
0000000000011fae         db  0x0e ; '.'
0000000000011faf         db  0x10 ; '.'
0000000000011fb0         db  0x8d ; '.'
0000000000011fb1         db  0x02 ; '.'
0000000000011fb2         db  0x42 ; 'B'
0000000000011fb3         db  0x0e ; '.'
0000000000011fb4         db  0x18 ; '.'
0000000000011fb5         db  0x8c ; '.'
0000000000011fb6         db  0x03 ; '.'
0000000000011fb7         db  0x44 ; 'D'
0000000000011fb8         db  0x0e ; '.'
0000000000011fb9         db  0x20 ; ' '
0000000000011fba         db  0x86 ; '.'
0000000000011fbb         db  0x04 ; '.'
0000000000011fbc         db  0x41 ; 'A'
0000000000011fbd         db  0x0e ; '.'
0000000000011fbe         db  0x28 ; '('
0000000000011fbf         db  0x83 ; '.'
0000000000011fc0         db  0x05 ; '.'
0000000000011fc1         db  0x4a ; 'J'
0000000000011fc2         db  0x0e ; '.'
0000000000011fc3         db  0x40 ; '@'
0000000000011fc4         db  0x02 ; '.'
0000000000011fc5         db  0x7a ; 'z'
0000000000011fc6         db  0x0a ; '.'
0000000000011fc7         db  0x0e ; '.'
0000000000011fc8         db  0x28 ; '('
0000000000011fc9         db  0x41 ; 'A'
0000000000011fca         db  0x0e ; '.'
0000000000011fcb         db  0x20 ; ' '
0000000000011fcc         db  0x41 ; 'A'
0000000000011fcd         db  0x0e ; '.'
0000000000011fce         db  0x18 ; '.'
0000000000011fcf         db  0x42 ; 'B'
0000000000011fd0         db  0x0e ; '.'
0000000000011fd1         db  0x10 ; '.'
0000000000011fd2         db  0x42 ; 'B'
0000000000011fd3         db  0x0e ; '.'
0000000000011fd4         db  0x08 ; '.'
0000000000011fd5         db  0x45 ; 'E'
0000000000011fd6         db  0x0b ; '.'
0000000000011fd7         db  0x00 ; '.'
0000000000011fd8         dd         0x00000014                                  ; Length of the record
0000000000011fdc         dd         0x00000bb4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011fe0         db         0x70, 0x61, 2 dup (0xff)                    ; begin 0x8150
0000000000011fe4         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x8192)
0000000000011fe8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000011fe9         align      16
0000000000011ff0         dd         0x00000048                                  ; Length of the record
0000000000011ff4         dd         0x00000bcc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000011ff8         db         0xa8, 0x61, 2 dup (0xff)                    ; begin 0x81a0
0000000000011ffc         db         0xc4, 0x03, 2 dup (0x00)                    ; length 0x3c4 (end at 0x8564)
0000000000012000         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012001         db  0x42 ; 'B'
0000000000012002         db  0x0e ; '.'
0000000000012003         db  0x10 ; '.'
0000000000012004         db  0x8f ; '.'
0000000000012005         db  0x02 ; '.'
0000000000012006         db  0x42 ; 'B'
0000000000012007         db  0x0e ; '.'
0000000000012008         db  0x18 ; '.'
0000000000012009         db  0x8e ; '.'
000000000001200a         db  0x03 ; '.'
000000000001200b         db  0x45 ; 'E'
000000000001200c         db  0x0e ; '.'
000000000001200d         db  0x20 ; ' '
000000000001200e         db  0x8d ; '.'
000000000001200f         db  0x04 ; '.'
0000000000012010         db  0x42 ; 'B'
0000000000012011         db  0x0e ; '.'
0000000000012012         db  0x28 ; '('
0000000000012013         db  0x8c ; '.'
0000000000012014         db  0x05 ; '.'
0000000000012015         db  0x44 ; 'D'
0000000000012016         db  0x0e ; '.'
0000000000012017         db  0x30 ; '0'
0000000000012018         db  0x86 ; '.'
0000000000012019         db  0x06 ; '.'
000000000001201a         db  0x41 ; 'A'
000000000001201b         db  0x0e ; '.'
000000000001201c         db  0x38 ; '8'
000000000001201d         db  0x83 ; '.'
000000000001201e         db  0x07 ; '.'
000000000001201f         db  0x4a ; 'J'
0000000000012020         db  0x0e ; '.'
0000000000012021         db  0x70 ; 'p'
0000000000012022         db  0x03 ; '.'
0000000000012023         db  0x2e ; '.'
0000000000012024         db  0x01 ; '.'
0000000000012025         db  0x0a ; '.'
0000000000012026         db  0x0e ; '.'
0000000000012027         db  0x38 ; '8'
0000000000012028         db  0x44 ; 'D'
0000000000012029         db  0x0e ; '.'
000000000001202a         db  0x30 ; '0'
000000000001202b         db  0x41 ; 'A'
000000000001202c         db  0x0e ; '.'
000000000001202d         db  0x28 ; '('
000000000001202e         db  0x42 ; 'B'
000000000001202f         db  0x0e ; '.'
0000000000012030         db  0x20 ; ' '
0000000000012031         db  0x42 ; 'B'
0000000000012032         db  0x0e ; '.'
0000000000012033         db  0x18 ; '.'
0000000000012034         db  0x42 ; 'B'
0000000000012035         db  0x0e ; '.'
0000000000012036         db  0x10 ; '.'
0000000000012037         db  0x42 ; 'B'
0000000000012038         db  0x0e ; '.'
0000000000012039         db  0x08 ; '.'
000000000001203a         db  0x4b ; 'K'
000000000001203b         db  0x0b ; '.'
000000000001203c         dd         0x00000048                                  ; Length of the record
0000000000012040         dd         0x00000c18                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012044         db         0x2c, 0x65, 2 dup (0xff)                    ; begin 0x8570
0000000000012048         db         0x9d, 3 dup (0x00)                          ; length 0x9d (end at 0x860d)
000000000001204c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001204d         db  0x42 ; 'B'
000000000001204e         db  0x0e ; '.'
000000000001204f         db  0x10 ; '.'
0000000000012050         db  0x8f ; '.'
0000000000012051         db  0x02 ; '.'
0000000000012052         db  0x42 ; 'B'
0000000000012053         db  0x0e ; '.'
0000000000012054         db  0x18 ; '.'
0000000000012055         db  0x8e ; '.'
0000000000012056         db  0x03 ; '.'
0000000000012057         db  0x45 ; 'E'
0000000000012058         db  0x0e ; '.'
0000000000012059         db  0x20 ; ' '
000000000001205a         db  0x8d ; '.'
000000000001205b         db  0x04 ; '.'
000000000001205c         db  0x42 ; 'B'
000000000001205d         db  0x0e ; '.'
000000000001205e         db  0x28 ; '('
000000000001205f         db  0x8c ; '.'
0000000000012060         db  0x05 ; '.'
0000000000012061         db  0x44 ; 'D'
0000000000012062         db  0x0e ; '.'
0000000000012063         db  0x30 ; '0'
0000000000012064         db  0x86 ; '.'
0000000000012065         db  0x06 ; '.'
0000000000012066         db  0x41 ; 'A'
0000000000012067         db  0x0e ; '.'
0000000000012068         db  0x38 ; '8'
0000000000012069         db  0x83 ; '.'
000000000001206a         db  0x07 ; '.'
000000000001206b         db  0x47 ; 'G'
000000000001206c         db  0x0e ; '.'
000000000001206d         db  0x50 ; 'P'
000000000001206e         db  0x02 ; '.'
000000000001206f         db  0x59 ; 'Y'
0000000000012070         db  0x0a ; '.'
0000000000012071         db  0x0e ; '.'
0000000000012072         db  0x38 ; '8'
0000000000012073         db  0x44 ; 'D'
0000000000012074         db  0x0e ; '.'
0000000000012075         db  0x30 ; '0'
0000000000012076         db  0x41 ; 'A'
0000000000012077         db  0x0e ; '.'
0000000000012078         db  0x28 ; '('
0000000000012079         db  0x42 ; 'B'
000000000001207a         db  0x0e ; '.'
000000000001207b         db  0x20 ; ' '
000000000001207c         db  0x42 ; 'B'
000000000001207d         db  0x0e ; '.'
000000000001207e         db  0x18 ; '.'
000000000001207f         db  0x42 ; 'B'
0000000000012080         db  0x0e ; '.'
0000000000012081         db  0x10 ; '.'
0000000000012082         db  0x42 ; 'B'
0000000000012083         db  0x0e ; '.'
0000000000012084         db  0x08 ; '.'
0000000000012085         db  0x43 ; 'C'
0000000000012086         db  0x0b ; '.'
0000000000012087         db  0x00 ; '.'
0000000000012088         dd         0x00000048                                  ; Length of the record
000000000001208c         dd         0x00000c64                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012090         db         0x80, 0x65, 2 dup (0xff)                    ; begin 0x8610
0000000000012094         db         0xbf, 0x01, 2 dup (0x00)                    ; length 0x1bf (end at 0x87cf)
0000000000012098         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012099         db  0x42 ; 'B'
000000000001209a         db  0x0e ; '.'
000000000001209b         db  0x10 ; '.'
000000000001209c         db  0x8f ; '.'
000000000001209d         db  0x02 ; '.'
000000000001209e         db  0x42 ; 'B'
000000000001209f         db  0x0e ; '.'
00000000000120a0         db  0x18 ; '.'
00000000000120a1         db  0x8e ; '.'
00000000000120a2         db  0x03 ; '.'
00000000000120a3         db  0x42 ; 'B'
00000000000120a4         db  0x0e ; '.'
00000000000120a5         db  0x20 ; ' '
00000000000120a6         db  0x8d ; '.'
00000000000120a7         db  0x04 ; '.'
00000000000120a8         db  0x42 ; 'B'
00000000000120a9         db  0x0e ; '.'
00000000000120aa         db  0x28 ; '('
00000000000120ab         db  0x8c ; '.'
00000000000120ac         db  0x05 ; '.'
00000000000120ad         db  0x45 ; 'E'
00000000000120ae         db  0x0e ; '.'
00000000000120af         db  0x30 ; '0'
00000000000120b0         db  0x86 ; '.'
00000000000120b1         db  0x06 ; '.'
00000000000120b2         db  0x41 ; 'A'
00000000000120b3         db  0x0e ; '.'
00000000000120b4         db  0x38 ; '8'
00000000000120b5         db  0x83 ; '.'
00000000000120b6         db  0x07 ; '.'
00000000000120b7         db  0x47 ; 'G'
00000000000120b8         db  0x0e ; '.'
00000000000120b9         db  0x70 ; 'p'
00000000000120ba         db  0x03 ; '.'
00000000000120bb         db  0x2e ; '.'
00000000000120bc         db  0x01 ; '.'
00000000000120bd         db  0x0a ; '.'
00000000000120be         db  0x0e ; '.'
00000000000120bf         db  0x38 ; '8'
00000000000120c0         db  0x41 ; 'A'
00000000000120c1         db  0x0e ; '.'
00000000000120c2         db  0x30 ; '0'
00000000000120c3         db  0x41 ; 'A'
00000000000120c4         db  0x0e ; '.'
00000000000120c5         db  0x28 ; '('
00000000000120c6         db  0x42 ; 'B'
00000000000120c7         db  0x0e ; '.'
00000000000120c8         db  0x20 ; ' '
00000000000120c9         db  0x42 ; 'B'
00000000000120ca         db  0x0e ; '.'
00000000000120cb         db  0x18 ; '.'
00000000000120cc         db  0x42 ; 'B'
00000000000120cd         db  0x0e ; '.'
00000000000120ce         db  0x10 ; '.'
00000000000120cf         db  0x42 ; 'B'
00000000000120d0         db  0x0e ; '.'
00000000000120d1         db  0x08 ; '.'
00000000000120d2         db  0x43 ; 'C'
00000000000120d3         db  0x0b ; '.'
00000000000120d4         dd         0x00000028                                  ; Length of the record
00000000000120d8         dd         0x00000cb0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000120dc         db         0xf4, 0x66, 2 dup (0xff)                    ; begin 0x87d0
00000000000120e0         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x87f3)
00000000000120e4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000120e5         db  0x41 ; 'A'
00000000000120e6         db  0x0e ; '.'
00000000000120e7         db  0x10 ; '.'
00000000000120e8         db  0x86 ; '.'
00000000000120e9         db  0x02 ; '.'
00000000000120ea         db  0x41 ; 'A'
00000000000120eb         db  0x0e ; '.'
00000000000120ec         db  0x18 ; '.'
00000000000120ed         db  0x83 ; '.'
00000000000120ee         db  0x03 ; '.'
00000000000120ef         db  0x49 ; 'I'
00000000000120f0         db  0x0e ; '.'
00000000000120f1         db  0x20 ; ' '
00000000000120f2         db  0x49 ; 'I'
00000000000120f3         db  0x0e ; '.'
00000000000120f4         db  0x18 ; '.'
00000000000120f5         db  0x46 ; 'F'
00000000000120f6         db  0x0e ; '.'
00000000000120f7         db  0x10 ; '.'
00000000000120f8         db  0x41 ; 'A'
00000000000120f9         db  0x0e ; '.'
00000000000120fa         db  0x08 ; '.'
00000000000120fb         db  0x00 ; '.'
00000000000120fc         db  0x00 ; '.'
00000000000120fd         db  0x00 ; '.'
00000000000120fe         db  0x00 ; '.'
00000000000120ff         db  0x00 ; '.'
0000000000012100         dd         0x0000001c                                  ; Length of the record
0000000000012104         dd         0x00000cdc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012108         db         0xf8, 0x66, 2 dup (0xff)                    ; begin 0x8800
000000000001210c         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x889f)
0000000000012110         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012111         db  0x44 ; 'D'
0000000000012112         db  0x0e ; '.'
0000000000012113         db  0x10 ; '.'
0000000000012114         db  0x83 ; '.'
0000000000012115         db  0x02 ; '.'
0000000000012116         db  0x02 ; '.'
0000000000012117         db  0x78 ; 'x'
0000000000012118         db  0x0a ; '.'
0000000000012119         db  0x0e ; '.'
000000000001211a         db  0x08 ; '.'
000000000001211b         db  0x41 ; 'A'
000000000001211c         db  0x0b ; '.'
000000000001211d         db  0x00 ; '.'
000000000001211e         db  0x00 ; '.'
000000000001211f         db  0x00 ; '.'
0000000000012120         dd         0x00000040                                  ; Length of the record
0000000000012124         dd         0x00000cfc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012128         db         0x78, 0x67, 2 dup (0xff)                    ; begin 0x88a0
000000000001212c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x8987)
0000000000012130         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012131         db  0x41 ; 'A'
0000000000012132         db  0x0e ; '.'
0000000000012133         db  0x10 ; '.'
0000000000012134         db  0x86 ; '.'
0000000000012135         db  0x02 ; '.'
0000000000012136         db  0x41 ; 'A'
0000000000012137         db  0x0e ; '.'
0000000000012138         db  0x18 ; '.'
0000000000012139         db  0x83 ; '.'
000000000001213a         db  0x03 ; '.'
000000000001213b         db  0x49 ; 'I'
000000000001213c         db  0x0e ; '.'
000000000001213d         db  0x20 ; ' '
000000000001213e         db  0x6e ; 'n'
000000000001213f         db  0x0a ; '.'
0000000000012140         db  0x0e ; '.'
0000000000012141         db  0x18 ; '.'
0000000000012142         db  0x41 ; 'A'
0000000000012143         db  0x0e ; '.'
0000000000012144         db  0x10 ; '.'
0000000000012145         db  0x41 ; 'A'
0000000000012146         db  0x0e ; '.'
0000000000012147         db  0x08 ; '.'
0000000000012148         db  0x45 ; 'E'
0000000000012149         db  0x0b ; '.'
000000000001214a         db  0x02 ; '.'
000000000001214b         db  0x4a ; 'J'
000000000001214c         db  0x0a ; '.'
000000000001214d         db  0x0e ; '.'
000000000001214e         db  0x18 ; '.'
000000000001214f         db  0x41 ; 'A'
0000000000012150         db  0x0e ; '.'
0000000000012151         db  0x10 ; '.'
0000000000012152         db  0x41 ; 'A'
0000000000012153         db  0x0e ; '.'
0000000000012154         db  0x08 ; '.'
0000000000012155         db  0x44 ; 'D'
0000000000012156         db  0x0b ; '.'
0000000000012157         db  0x02 ; '.'
0000000000012158         db  0x54 ; 'T'
0000000000012159         db  0x0e ; '.'
000000000001215a         db  0x18 ; '.'
000000000001215b         db  0x41 ; 'A'
000000000001215c         db  0x0e ; '.'
000000000001215d         db  0x10 ; '.'
000000000001215e         db  0x41 ; 'A'
000000000001215f         db  0x0e ; '.'
0000000000012160         db  0x08 ; '.'
0000000000012161         db  0x00 ; '.'
0000000000012162         db  0x00 ; '.'
0000000000012163         db  0x00 ; '.'
0000000000012164         dd         0x00000074                                  ; Length of the record
0000000000012168         dd         0x00000d40                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001216c         db         0x24, 0x68, 2 dup (0xff)                    ; begin 0x8990
0000000000012170         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x9bc4)
0000000000012174         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012175         db  0x42 ; 'B'
0000000000012176         db  0x0e ; '.'
0000000000012177         db  0x10 ; '.'
0000000000012178         db  0x8f ; '.'
0000000000012179         db  0x02 ; '.'
000000000001217a         db  0x42 ; 'B'
000000000001217b         db  0x0e ; '.'
000000000001217c         db  0x18 ; '.'
000000000001217d         db  0x8e ; '.'
000000000001217e         db  0x03 ; '.'
000000000001217f         db  0x45 ; 'E'
0000000000012180         db  0x0e ; '.'
0000000000012181         db  0x20 ; ' '
0000000000012182         db  0x8d ; '.'
0000000000012183         db  0x04 ; '.'
0000000000012184         db  0x42 ; 'B'
0000000000012185         db  0x0e ; '.'
0000000000012186         db  0x28 ; '('
0000000000012187         db  0x8c ; '.'
0000000000012188         db  0x05 ; '.'
0000000000012189         db  0x44 ; 'D'
000000000001218a         db  0x0e ; '.'
000000000001218b         db  0x30 ; '0'
000000000001218c         db  0x86 ; '.'
000000000001218d         db  0x06 ; '.'
000000000001218e         db  0x41 ; 'A'
000000000001218f         db  0x0e ; '.'
0000000000012190         db  0x38 ; '8'
0000000000012191         db  0x83 ; '.'
0000000000012192         db  0x07 ; '.'
0000000000012193         db  0x53 ; 'S'
0000000000012194         db  0x0e ; '.'
0000000000012195         db  0xf0 ; '.'
0000000000012196         db  0x01 ; '.'
0000000000012197         db  0x03 ; '.'
0000000000012198         db  0x81 ; '.'
0000000000012199         db  0x0b ; '.'
000000000001219a         db  0x0e ; '.'
000000000001219b         db  0xf8 ; '.'
000000000001219c         db  0x01 ; '.'
000000000001219d         db  0x4a ; 'J'
000000000001219e         db  0x0e ; '.'
000000000001219f         db  0x80 ; '.'
00000000000121a0         db  0x02 ; '.'
00000000000121a1         db  0x44 ; 'D'
00000000000121a2         db  0x0e ; '.'
00000000000121a3         db  0x88 ; '.'
00000000000121a4         db  0x02 ; '.'
00000000000121a5         db  0x45 ; 'E'
00000000000121a6         db  0x0e ; '.'
00000000000121a7         db  0x90 ; '.'
00000000000121a8         db  0x02 ; '.'
00000000000121a9         db  0x5f ; '_'
00000000000121aa         db  0x0e ; '.'
00000000000121ab         db  0xf0 ; '.'
00000000000121ac         db  0x01 ; '.'
00000000000121ad         db  0x64 ; 'd'
00000000000121ae         db  0x0a ; '.'
00000000000121af         db  0x0e ; '.'
00000000000121b0         db  0x38 ; '8'
00000000000121b1         db  0x41 ; 'A'
00000000000121b2         db  0x0e ; '.'
00000000000121b3         db  0x30 ; '0'
00000000000121b4         db  0x41 ; 'A'
00000000000121b5         db  0x0e ; '.'
00000000000121b6         db  0x28 ; '('
00000000000121b7         db  0x42 ; 'B'
00000000000121b8         db  0x0e ; '.'
00000000000121b9         db  0x20 ; ' '
00000000000121ba         db  0x42 ; 'B'
00000000000121bb         db  0x0e ; '.'
00000000000121bc         db  0x18 ; '.'
00000000000121bd         db  0x42 ; 'B'
00000000000121be         db  0x0e ; '.'
00000000000121bf         db  0x10 ; '.'
00000000000121c0         db  0x42 ; 'B'
00000000000121c1         db  0x0e ; '.'
00000000000121c2         db  0x08 ; '.'
00000000000121c3         db  0x44 ; 'D'
00000000000121c4         db  0x0b ; '.'
00000000000121c5         db  0x03 ; '.'
00000000000121c6         db  0x99 ; '.'
00000000000121c7         db  0x05 ; '.'
00000000000121c8         db  0x0e ; '.'
00000000000121c9         db  0xf8 ; '.'
00000000000121ca         db  0x01 ; '.'
00000000000121cb         db  0x4d ; 'M'
00000000000121cc         db  0x0e ; '.'
00000000000121cd         db  0x80 ; '.'
00000000000121ce         db  0x02 ; '.'
00000000000121cf         db  0x44 ; 'D'
00000000000121d0         db  0x0e ; '.'
00000000000121d1         db  0x88 ; '.'
00000000000121d2         db  0x02 ; '.'
00000000000121d3         db  0x47 ; 'G'
00000000000121d4         db  0x0e ; '.'
00000000000121d5         db  0x90 ; '.'
00000000000121d6         db  0x02 ; '.'
00000000000121d7         db  0x5b ; '['
00000000000121d8         db  0x0e ; '.'
00000000000121d9         db  0xf0 ; '.'
00000000000121da         db  0x01 ; '.'
00000000000121db         db  0x00 ; '.'
00000000000121dc         dd         0x00000068                                  ; Length of the record
00000000000121e0         dd         0x00000db8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000121e4         db         0xec, 0x79, 2 dup (0xff)                    ; begin 0x9bd0
00000000000121e8         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x9d7b)
00000000000121ec         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000121ed         db  0x42 ; 'B'
00000000000121ee         db  0x0e ; '.'
00000000000121ef         db  0x10 ; '.'
00000000000121f0         db  0x8f ; '.'
00000000000121f1         db  0x02 ; '.'
00000000000121f2         db  0x42 ; 'B'
00000000000121f3         db  0x0e ; '.'
00000000000121f4         db  0x18 ; '.'
00000000000121f5         db  0x8e ; '.'
00000000000121f6         db  0x03 ; '.'
00000000000121f7         db  0x45 ; 'E'
00000000000121f8         db  0x0e ; '.'
00000000000121f9         db  0x20 ; ' '
00000000000121fa         db  0x8d ; '.'
00000000000121fb         db  0x04 ; '.'
00000000000121fc         db  0x42 ; 'B'
00000000000121fd         db  0x0e ; '.'
00000000000121fe         db  0x28 ; '('
00000000000121ff         db  0x8c ; '.'
0000000000012200         db  0x05 ; '.'
0000000000012201         db  0x44 ; 'D'
0000000000012202         db  0x0e ; '.'
0000000000012203         db  0x30 ; '0'
0000000000012204         db  0x86 ; '.'
0000000000012205         db  0x06 ; '.'
0000000000012206         db  0x41 ; 'A'
0000000000012207         db  0x0e ; '.'
0000000000012208         db  0x38 ; '8'
0000000000012209         db  0x83 ; '.'
000000000001220a         db  0x07 ; '.'
000000000001220b         db  0x47 ; 'G'
000000000001220c         db  0x0e ; '.'
000000000001220d         db  0x60 ; '`'
000000000001220e         db  0x02 ; '.'
000000000001220f         db  0x99 ; '.'
0000000000012210         db  0x0e ; '.'
0000000000012211         db  0x68 ; 'h'
0000000000012212         db  0x5f ; '_'
0000000000012213         db  0x0e ; '.'
0000000000012214         db  0x70 ; 'p'
0000000000012215         db  0x46 ; 'F'
0000000000012216         db  0x0e ; '.'
0000000000012217         db  0x78 ; 'x'
0000000000012218         db  0x42 ; 'B'
0000000000012219         db  0x0e ; '.'
000000000001221a         db  0x80 ; '.'
000000000001221b         db  0x01 ; '.'
000000000001221c         db  0x59 ; 'Y'
000000000001221d         db  0x0e ; '.'
000000000001221e         db  0x60 ; '`'
000000000001221f         db  0x02 ; '.'
0000000000012220         db  0x40 ; '@'
0000000000012221         db  0x0e ; '.'
0000000000012222         db  0x68 ; 'h'
0000000000012223         db  0x4b ; 'K'
0000000000012224         db  0x0e ; '.'
0000000000012225         db  0x70 ; 'p'
0000000000012226         db  0x43 ; 'C'
0000000000012227         db  0x0e ; '.'
0000000000012228         db  0x78 ; 'x'
0000000000012229         db  0x45 ; 'E'
000000000001222a         db  0x0e ; '.'
000000000001222b         db  0x80 ; '.'
000000000001222c         db  0x01 ; '.'
000000000001222d         db  0x5e ; '^'
000000000001222e         db  0x0e ; '.'
000000000001222f         db  0x60 ; '`'
0000000000012230         db  0x4c ; 'L'
0000000000012231         db  0x0a ; '.'
0000000000012232         db  0x0e ; '.'
0000000000012233         db  0x38 ; '8'
0000000000012234         db  0x44 ; 'D'
0000000000012235         db  0x0e ; '.'
0000000000012236         db  0x30 ; '0'
0000000000012237         db  0x41 ; 'A'
0000000000012238         db  0x0e ; '.'
0000000000012239         db  0x28 ; '('
000000000001223a         db  0x42 ; 'B'
000000000001223b         db  0x0e ; '.'
000000000001223c         db  0x20 ; ' '
000000000001223d         db  0x42 ; 'B'
000000000001223e         db  0x0e ; '.'
000000000001223f         db  0x18 ; '.'
0000000000012240         db  0x42 ; 'B'
0000000000012241         db  0x0e ; '.'
0000000000012242         db  0x10 ; '.'
0000000000012243         db  0x42 ; 'B'
0000000000012244         db  0x0e ; '.'
0000000000012245         db  0x08 ; '.'
0000000000012246         db  0x46 ; 'F'
0000000000012247         db  0x0b ; '.'
0000000000012248         dd         0x00000028                                  ; Length of the record
000000000001224c         dd         0x00000e24                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012250         db         0x30, 0x7b, 2 dup (0xff)                    ; begin 0x9d80
0000000000012254         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x9db6)
0000000000012258         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012259         db  0x42 ; 'B'
000000000001225a         db  0x0e ; '.'
000000000001225b         db  0x10 ; '.'
000000000001225c         db  0x8c ; '.'
000000000001225d         db  0x02 ; '.'
000000000001225e         db  0x41 ; 'A'
000000000001225f         db  0x0e ; '.'
0000000000012260         db  0x18 ; '.'
0000000000012261         db  0x86 ; '.'
0000000000012262         db  0x03 ; '.'
0000000000012263         db  0x41 ; 'A'
0000000000012264         db  0x0e ; '.'
0000000000012265         db  0x20 ; ' '
0000000000012266         db  0x83 ; '.'
0000000000012267         db  0x04 ; '.'
0000000000012268         db  0x6e ; 'n'
0000000000012269         db  0x0e ; '.'
000000000001226a         db  0x18 ; '.'
000000000001226b         db  0x41 ; 'A'
000000000001226c         db  0x0e ; '.'
000000000001226d         db  0x10 ; '.'
000000000001226e         db  0x42 ; 'B'
000000000001226f         db  0x0e ; '.'
0000000000012270         db  0x08 ; '.'
0000000000012271         db  0x00 ; '.'
0000000000012272         db  0x00 ; '.'
0000000000012273         db  0x00 ; '.'
0000000000012274         dd         0x00000010                                  ; Length of the record
0000000000012278         dd         0x00000e50                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001227c         db         0x44, 0x7b, 2 dup (0xff)                    ; begin 0x9dc0
0000000000012280         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x9dd1)
0000000000012284         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012285         align      8
0000000000012288         dd         0x00000010                                  ; Length of the record
000000000001228c         dd         0x00000e64                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012290         db         0x50, 0x7b, 2 dup (0xff)                    ; begin 0x9de0
0000000000012294         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x9df1)
0000000000012298         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012299         align      4
000000000001229c         dd         0x00000010                                  ; Length of the record
00000000000122a0         dd         0x00000e78                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000122a4         db         0x5c, 0x7b, 2 dup (0xff)                    ; begin 0x9e00
00000000000122a8         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x9e35)
00000000000122ac         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000122ad         align      16
00000000000122b0         dd         0x00000010                                  ; Length of the record
00000000000122b4         dd         0x00000e8c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000122b8         db         0x88, 0x7b, 2 dup (0xff)                    ; begin 0x9e40
00000000000122bc         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x9e55)
00000000000122c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000122c1         align      4
00000000000122c4         dd         0x00000010                                  ; Length of the record
00000000000122c8         dd         0x00000ea0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000122cc         db         0x94, 0x7b, 2 dup (0xff)                    ; begin 0x9e60
00000000000122d0         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x9e90)
00000000000122d4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000122d5         db  0x6b ; 'k'
00000000000122d6         db  0x0e ; '.'
00000000000122d7         db  0x10 ; '.'
00000000000122d8         dd         0x00000050                                  ; Length of the record
00000000000122dc         dd         0x00000eb4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000122e0         db         0xb0, 0x7b, 2 dup (0xff)                    ; begin 0x9e90
00000000000122e4         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x9f04)
00000000000122e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000122e9         db  0x42 ; 'B'
00000000000122ea         db  0x0e ; '.'
00000000000122eb         db  0x10 ; '.'
00000000000122ec         db  0x8f ; '.'
00000000000122ed         db  0x02 ; '.'
00000000000122ee         db  0x42 ; 'B'
00000000000122ef         db  0x0e ; '.'
00000000000122f0         db  0x18 ; '.'
00000000000122f1         db  0x8e ; '.'
00000000000122f2         db  0x03 ; '.'
00000000000122f3         db  0x49 ; 'I'
00000000000122f4         db  0x0e ; '.'
00000000000122f5         db  0x20 ; ' '
00000000000122f6         db  0x8d ; '.'
00000000000122f7         db  0x04 ; '.'
00000000000122f8         db  0x42 ; 'B'
00000000000122f9         db  0x0e ; '.'
00000000000122fa         db  0x28 ; '('
00000000000122fb         db  0x8c ; '.'
00000000000122fc         db  0x05 ; '.'
00000000000122fd         db  0x44 ; 'D'
00000000000122fe         db  0x0e ; '.'
00000000000122ff         db  0x30 ; '0'
0000000000012300         db  0x86 ; '.'
0000000000012301         db  0x06 ; '.'
0000000000012302         db  0x41 ; 'A'
0000000000012303         db  0x0e ; '.'
0000000000012304         db  0x38 ; '8'
0000000000012305         db  0x83 ; '.'
0000000000012306         db  0x07 ; '.'
0000000000012307         db  0x4d ; 'M'
0000000000012308         db  0x0e ; '.'
0000000000012309         db  0x50 ; 'P'
000000000001230a         db  0x5f ; '_'
000000000001230b         db  0x0e ; '.'
000000000001230c         db  0x58 ; 'X'
000000000001230d         db  0x47 ; 'G'
000000000001230e         db  0x0e ; '.'
000000000001230f         db  0x60 ; '`'
0000000000012310         db  0x46 ; 'F'
0000000000012311         db  0x0e ; '.'
0000000000012312         db  0x68 ; 'h'
0000000000012313         db  0x44 ; 'D'
0000000000012314         db  0x0e ; '.'
0000000000012315         db  0x70 ; 'p'
0000000000012316         db  0x58 ; 'X'
0000000000012317         db  0x0e ; '.'
0000000000012318         db  0x38 ; '8'
0000000000012319         db  0x41 ; 'A'
000000000001231a         db  0x0e ; '.'
000000000001231b         db  0x30 ; '0'
000000000001231c         db  0x41 ; 'A'
000000000001231d         db  0x0e ; '.'
000000000001231e         db  0x28 ; '('
000000000001231f         db  0x42 ; 'B'
0000000000012320         db  0x0e ; '.'
0000000000012321         db  0x20 ; ' '
0000000000012322         db  0x42 ; 'B'
0000000000012323         db  0x0e ; '.'
0000000000012324         db  0x18 ; '.'
0000000000012325         db  0x42 ; 'B'
0000000000012326         db  0x0e ; '.'
0000000000012327         db  0x10 ; '.'
0000000000012328         db  0x42 ; 'B'
0000000000012329         db  0x0e ; '.'
000000000001232a         db  0x08 ; '.'
000000000001232b         db  0x00 ; '.'
000000000001232c         dd         0x00000068                                  ; Length of the record
0000000000012330         dd         0x00000f08                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012334         db         0xdc, 0x7b, 2 dup (0xff)                    ; begin 0x9f10
0000000000012338         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x9ff3)
000000000001233c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001233d         db  0x42 ; 'B'
000000000001233e         db  0x0e ; '.'
000000000001233f         db  0x10 ; '.'
0000000000012340         db  0x8f ; '.'
0000000000012341         db  0x02 ; '.'
0000000000012342         db  0x42 ; 'B'
0000000000012343         db  0x0e ; '.'
0000000000012344         db  0x18 ; '.'
0000000000012345         db  0x8e ; '.'
0000000000012346         db  0x03 ; '.'
0000000000012347         db  0x49 ; 'I'
0000000000012348         db  0x0e ; '.'
0000000000012349         db  0x20 ; ' '
000000000001234a         db  0x8d ; '.'
000000000001234b         db  0x04 ; '.'
000000000001234c         db  0x42 ; 'B'
000000000001234d         db  0x0e ; '.'
000000000001234e         db  0x28 ; '('
000000000001234f         db  0x8c ; '.'
0000000000012350         db  0x05 ; '.'
0000000000012351         db  0x44 ; 'D'
0000000000012352         db  0x0e ; '.'
0000000000012353         db  0x30 ; '0'
0000000000012354         db  0x86 ; '.'
0000000000012355         db  0x06 ; '.'
0000000000012356         db  0x41 ; 'A'
0000000000012357         db  0x0e ; '.'
0000000000012358         db  0x38 ; '8'
0000000000012359         db  0x83 ; '.'
000000000001235a         db  0x07 ; '.'
000000000001235b         db  0x4d ; 'M'
000000000001235c         db  0x0e ; '.'
000000000001235d         db  0x70 ; 'p'
000000000001235e         db  0x65 ; 'e'
000000000001235f         db  0x0e ; '.'
0000000000012360         db  0x78 ; 'x'
0000000000012361         db  0x4d ; 'M'
0000000000012362         db  0x0e ; '.'
0000000000012363         db  0x80 ; '.'
0000000000012364         db  0x01 ; '.'
0000000000012365         db  0x46 ; 'F'
0000000000012366         db  0x0e ; '.'
0000000000012367         db  0x88 ; '.'
0000000000012368         db  0x01 ; '.'
0000000000012369         db  0x42 ; 'B'
000000000001236a         db  0x0e ; '.'
000000000001236b         db  0x90 ; '.'
000000000001236c         db  0x01 ; '.'
000000000001236d         db  0x5e ; '^'
000000000001236e         db  0x0e ; '.'
000000000001236f         db  0x70 ; 'p'
0000000000012370         db  0x56 ; 'V'
0000000000012371         db  0x0e ; '.'
0000000000012372         db  0x78 ; 'x'
0000000000012373         db  0x43 ; 'C'
0000000000012374         db  0x0e ; '.'
0000000000012375         db  0x80 ; '.'
0000000000012376         db  0x01 ; '.'
0000000000012377         db  0x43 ; 'C'
0000000000012378         db  0x0e ; '.'
0000000000012379         db  0x88 ; '.'
000000000001237a         db  0x01 ; '.'
000000000001237b         db  0x56 ; 'V'
000000000001237c         db  0x0e ; '.'
000000000001237d         db  0x90 ; '.'
000000000001237e         db  0x01 ; '.'
000000000001237f         db  0x52 ; 'R'
0000000000012380         db  0x0e ; '.'
0000000000012381         db  0x70 ; 'p'
0000000000012382         db  0x5b ; '['
0000000000012383         db  0x0e ; '.'
0000000000012384         db  0x38 ; '8'
0000000000012385         db  0x41 ; 'A'
0000000000012386         db  0x0e ; '.'
0000000000012387         db  0x30 ; '0'
0000000000012388         db  0x41 ; 'A'
0000000000012389         db  0x0e ; '.'
000000000001238a         db  0x28 ; '('
000000000001238b         db  0x42 ; 'B'
000000000001238c         db  0x0e ; '.'
000000000001238d         db  0x20 ; ' '
000000000001238e         db  0x42 ; 'B'
000000000001238f         db  0x0e ; '.'
0000000000012390         db  0x18 ; '.'
0000000000012391         db  0x42 ; 'B'
0000000000012392         db  0x0e ; '.'
0000000000012393         db  0x10 ; '.'
0000000000012394         db  0x42 ; 'B'
0000000000012395         db  0x0e ; '.'
0000000000012396         db  0x08 ; '.'
0000000000012397         db  0x00 ; '.'
0000000000012398         dd         0x00000010                                  ; Length of the record
000000000001239c         dd         0x00000f74                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000123a0         db         0x60, 0x7c, 2 dup (0xff)                    ; begin 0xa000
00000000000123a4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xa00a)
00000000000123a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000123a9         align      4
00000000000123ac         dd         0x00000028                                  ; Length of the record
00000000000123b0         dd         0x00000f88                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000123b4         db         0x5c, 0x7c, 2 dup (0xff)                    ; begin 0xa010
00000000000123b8         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0xa0a3)
00000000000123bc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000123bd         db  0x48 ; 'H'
00000000000123be         db  0x0e ; '.'
00000000000123bf         db  0x10 ; '.'
00000000000123c0         db  0x8c ; '.'
00000000000123c1         db  0x02 ; '.'
00000000000123c2         db  0x48 ; 'H'
00000000000123c3         db  0x0e ; '.'
00000000000123c4         db  0x18 ; '.'
00000000000123c5         db  0x86 ; '.'
00000000000123c6         db  0x03 ; '.'
00000000000123c7         db  0x41 ; 'A'
00000000000123c8         db  0x0e ; '.'
00000000000123c9         db  0x20 ; ' '
00000000000123ca         db  0x83 ; '.'
00000000000123cb         db  0x04 ; '.'
00000000000123cc         db  0x02 ; '.'
00000000000123cd         db  0x74 ; 't'
00000000000123ce         db  0x0e ; '.'
00000000000123cf         db  0x18 ; '.'
00000000000123d0         db  0x4b ; 'K'
00000000000123d1         db  0x0e ; '.'
00000000000123d2         db  0x10 ; '.'
00000000000123d3         db  0x42 ; 'B'
00000000000123d4         db  0x0e ; '.'
00000000000123d5         db  0x08 ; '.'
00000000000123d6         db  0x00 ; '.'
00000000000123d7         db  0x00 ; '.'
00000000000123d8         dd         0x00000010                                  ; Length of the record
00000000000123dc         dd         0x00000fb4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000123e0         db         0xd0, 0x7c, 2 dup (0xff)                    ; begin 0xa0b0
00000000000123e4         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xa0c3)
00000000000123e8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000123e9         align      4
00000000000123ec         dd         0x00000010                                  ; Length of the record
00000000000123f0         dd         0x00000fc8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000123f4         db         0xdc, 0x7c, 2 dup (0xff)                    ; begin 0xa0d0
00000000000123f8         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xa0dc)
00000000000123fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000123fd         align      1024
0000000000012400         dd         0x00000010                                  ; Length of the record
0000000000012404         dd         0x00000fdc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012408         db         0xd8, 0x7c, 2 dup (0xff)                    ; begin 0xa0e0
000000000001240c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xa0f8)
0000000000012410         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012411         align      4
0000000000012414         dd         0x00000010                                  ; Length of the record
0000000000012418         dd         0x00000ff0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001241c         db         0xe4, 0x7c, 2 dup (0xff)                    ; begin 0xa100
0000000000012420         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0xa114)
0000000000012424         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012425         align      8
0000000000012428         dd         0x00000018                                  ; Length of the record
000000000001242c         dd         0x00001004                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012430         db         0xf0, 0x7c, 2 dup (0xff)                    ; begin 0xa120
0000000000012434         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0xa1ae)
0000000000012438         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012439         db  0x44 ; 'D'
000000000001243a         db  0x0e ; '.'
000000000001243b         db  0x50 ; 'P'
000000000001243c         db  0x02 ; '.'
000000000001243d         db  0x7f ; '.'
000000000001243e         db  0x0a ; '.'
000000000001243f         db  0x0e ; '.'
0000000000012440         db  0x08 ; '.'
0000000000012441         db  0x41 ; 'A'
0000000000012442         db  0x0b ; '.'
0000000000012443         db  0x00 ; '.'
0000000000012444         dd         0x00000018                                  ; Length of the record
0000000000012448         dd         0x00001020                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001244c         db         0x64, 0x7d, 2 dup (0xff)                    ; begin 0xa1b0
0000000000012450         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0xa23a)
0000000000012454         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012455         db  0x44 ; 'D'
0000000000012456         db  0x0e ; '.'
0000000000012457         db  0x50 ; 'P'
0000000000012458         db  0x02 ; '.'
0000000000012459         db  0x7b ; '{'
000000000001245a         db  0x0a ; '.'
000000000001245b         db  0x0e ; '.'
000000000001245c         db  0x08 ; '.'
000000000001245d         db  0x41 ; 'A'
000000000001245e         db  0x0b ; '.'
000000000001245f         db  0x00 ; '.'
0000000000012460         dd         0x00000010                                  ; Length of the record
0000000000012464         dd         0x0000103c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012468         db         0xd8, 0x7d, 2 dup (0xff)                    ; begin 0xa240
000000000001246c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xa24c)
0000000000012470         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012471         align      4
0000000000012474         dd         0x00000010                                  ; Length of the record
0000000000012478         dd         0x00001050                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001247c         db         0xd4, 0x7d, 2 dup (0xff)                    ; begin 0xa250
0000000000012480         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0xa25f)
0000000000012484         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012485         align      8
0000000000012488         dd         0x00000018                                  ; Length of the record
000000000001248c         dd         0x00001064                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012490         db         0xd0, 0x7d, 2 dup (0xff)                    ; begin 0xa260
0000000000012494         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0xa2f8)
0000000000012498         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012499         db  0x44 ; 'D'
000000000001249a         db  0x0e ; '.'
000000000001249b         db  0x50 ; 'P'
000000000001249c         db  0x02 ; '.'
000000000001249d         db  0x8e ; '.'
000000000001249e         db  0x0a ; '.'
000000000001249f         db  0x0e ; '.'
00000000000124a0         db  0x08 ; '.'
00000000000124a1         db  0x41 ; 'A'
00000000000124a2         db  0x0b ; '.'
00000000000124a3         db  0x00 ; '.'
00000000000124a4         dd         0x00000010                                  ; Length of the record
00000000000124a8         dd         0x00001080                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000124ac         db         0x54, 0x7e, 2 dup (0xff)                    ; begin 0xa300
00000000000124b0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0xa310)
00000000000124b4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000124b5         align      8
00000000000124b8         dd         0x00000010                                  ; Length of the record
00000000000124bc         dd         0x00001094                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000124c0         db         0x50, 0x7e, 2 dup (0xff)                    ; begin 0xa310
00000000000124c4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0xa321)
00000000000124c8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000124c9         align      4
00000000000124cc         dd         0x00000010                                  ; Length of the record
00000000000124d0         dd         0x000010a8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000124d4         db         0x5c, 0x7e, 2 dup (0xff)                    ; begin 0xa330
00000000000124d8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xa33a)
00000000000124dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000124dd         align      32
00000000000124e0         dd         0x00000018                                  ; Length of the record
00000000000124e4         dd         0x000010bc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000124e8         db         0x58, 0x7e, 2 dup (0xff)                    ; begin 0xa340
00000000000124ec         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0xa3ce)
00000000000124f0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000124f1         db  0x44 ; 'D'
00000000000124f2         db  0x0e ; '.'
00000000000124f3         db  0x50 ; 'P'
00000000000124f4         db  0x02 ; '.'
00000000000124f5         db  0x7f ; '.'
00000000000124f6         db  0x0a ; '.'
00000000000124f7         db  0x0e ; '.'
00000000000124f8         db  0x08 ; '.'
00000000000124f9         db  0x41 ; 'A'
00000000000124fa         db  0x0b ; '.'
00000000000124fb         db  0x00 ; '.'
00000000000124fc         dd         0x00000018                                  ; Length of the record
0000000000012500         dd         0x000010d8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012504         db         0xcc, 0x7e, 2 dup (0xff)                    ; begin 0xa3d0
0000000000012508         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0xa461)
000000000001250c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001250d         db  0x44 ; 'D'
000000000001250e         db  0x0e ; '.'
000000000001250f         db  0x50 ; 'P'
0000000000012510         db  0x02 ; '.'
0000000000012511         db  0x82 ; '.'
0000000000012512         db  0x0a ; '.'
0000000000012513         db  0x0e ; '.'
0000000000012514         db  0x08 ; '.'
0000000000012515         db  0x41 ; 'A'
0000000000012516         db  0x0b ; '.'
0000000000012517         db  0x00 ; '.'
0000000000012518         dd         0x00000010                                  ; Length of the record
000000000001251c         dd         0x000010f4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012520         db         0x50, 0x7f, 2 dup (0xff)                    ; begin 0xa470
0000000000012524         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xa47c)
0000000000012528         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012529         align      4
000000000001252c         dd         0x00000010                                  ; Length of the record
0000000000012530         dd         0x00001108                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012534         db         0x4c, 0x7f, 2 dup (0xff)                    ; begin 0xa480
0000000000012538         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0xa497)
000000000001253c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001253d         align      64
0000000000012540         dd         0x00000010                                  ; Length of the record
0000000000012544         dd         0x0000111c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012548         db         0x58, 0x7f, 2 dup (0xff)                    ; begin 0xa4a0
000000000001254c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xa4b3)
0000000000012550         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012551         align      4
0000000000012554         dd         0x00000010                                  ; Length of the record
0000000000012558         dd         0x00001130                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001255c         db         0x64, 0x7f, 2 dup (0xff)                    ; begin 0xa4c0
0000000000012560         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xa4cc)
0000000000012564         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012565         align      8
0000000000012568         dd         0x00000010                                  ; Length of the record
000000000001256c         dd         0x00001144                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012570         db         0x60, 0x7f, 2 dup (0xff)                    ; begin 0xa4d0
0000000000012574         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0xa4e4)
0000000000012578         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012579         align      4
000000000001257c         dd         0x00000010                                  ; Length of the record
0000000000012580         dd         0x00001158                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012584         db         0x6c, 0x7f, 2 dup (0xff)                    ; begin 0xa4f0
0000000000012588         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xa503)
000000000001258c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001258d         align      16
0000000000012590         dd         0x00000014                                  ; Length of the record
0000000000012594         dd         0x0000116c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012598         db         0x78, 0x7f, 2 dup (0xff)                    ; begin 0xa510
000000000001259c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0xa528)
00000000000125a0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000125a1         align      8
00000000000125a8         dd         0x00000038                                  ; Length of the record
00000000000125ac         dd         0x00001184                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000125b0         db         0x80, 0x7f, 2 dup (0xff)                    ; begin 0xa530
00000000000125b4         db         0x27, 0x01, 2 dup (0x00)                    ; length 0x127 (end at 0xa657)
00000000000125b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000125b9         db  0x42 ; 'B'
00000000000125ba         db  0x0e ; '.'
00000000000125bb         db  0x10 ; '.'
00000000000125bc         db  0x8d ; '.'
00000000000125bd         db  0x02 ; '.'
00000000000125be         db  0x42 ; 'B'
00000000000125bf         db  0x0e ; '.'
00000000000125c0         db  0x18 ; '.'
00000000000125c1         db  0x8c ; '.'
00000000000125c2         db  0x03 ; '.'
00000000000125c3         db  0x44 ; 'D'
00000000000125c4         db  0x0e ; '.'
00000000000125c5         db  0x20 ; ' '
00000000000125c6         db  0x86 ; '.'
00000000000125c7         db  0x04 ; '.'
00000000000125c8         db  0x41 ; 'A'
00000000000125c9         db  0x0e ; '.'
00000000000125ca         db  0x28 ; '('
00000000000125cb         db  0x83 ; '.'
00000000000125cc         db  0x05 ; '.'
00000000000125cd         db  0x4f ; 'O'
00000000000125ce         db  0x0e ; '.'
00000000000125cf         db  0xe0 ; '.'
00000000000125d0         db  0x02 ; '.'
00000000000125d1         db  0x02 ; '.'
00000000000125d2         db  0xb5 ; '.'
00000000000125d3         db  0x0a ; '.'
00000000000125d4         db  0x0e ; '.'
00000000000125d5         db  0x28 ; '('
00000000000125d6         db  0x41 ; 'A'
00000000000125d7         db  0x0e ; '.'
00000000000125d8         db  0x20 ; ' '
00000000000125d9         db  0x41 ; 'A'
00000000000125da         db  0x0e ; '.'
00000000000125db         db  0x18 ; '.'
00000000000125dc         db  0x42 ; 'B'
00000000000125dd         db  0x0e ; '.'
00000000000125de         db  0x10 ; '.'
00000000000125df         db  0x42 ; 'B'
00000000000125e0         db  0x0e ; '.'
00000000000125e1         db  0x08 ; '.'
00000000000125e2         db  0x45 ; 'E'
00000000000125e3         db  0x0b ; '.'
00000000000125e4         dd         0x0000005c                                  ; Length of the record
00000000000125e8         dd         0x000011c0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000125ec         db         0x74, 0x80, 2 dup (0xff)                    ; begin 0xa660
00000000000125f0         db         0x92, 3 dup (0x00)                          ; length 0x92 (end at 0xa6f2)
00000000000125f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000125f5         db  0x42 ; 'B'
00000000000125f6         db  0x0e ; '.'
00000000000125f7         db  0x10 ; '.'
00000000000125f8         db  0x8f ; '.'
00000000000125f9         db  0x02 ; '.'
00000000000125fa         db  0x42 ; 'B'
00000000000125fb         db  0x0e ; '.'
00000000000125fc         db  0x18 ; '.'
00000000000125fd         db  0x8e ; '.'
00000000000125fe         db  0x03 ; '.'
00000000000125ff         db  0x45 ; 'E'
0000000000012600         db  0x0e ; '.'
0000000000012601         db  0x20 ; ' '
0000000000012602         db  0x8d ; '.'
0000000000012603         db  0x04 ; '.'
0000000000012604         db  0x42 ; 'B'
0000000000012605         db  0x0e ; '.'
0000000000012606         db  0x28 ; '('
0000000000012607         db  0x8c ; '.'
0000000000012608         db  0x05 ; '.'
0000000000012609         db  0x41 ; 'A'
000000000001260a         db  0x0e ; '.'
000000000001260b         db  0x30 ; '0'
000000000001260c         db  0x86 ; '.'
000000000001260d         db  0x06 ; '.'
000000000001260e         db  0x41 ; 'A'
000000000001260f         db  0x0e ; '.'
0000000000012610         db  0x38 ; '8'
0000000000012611         db  0x83 ; '.'
0000000000012612         db  0x07 ; '.'
0000000000012613         db  0x4a ; 'J'
0000000000012614         db  0x0e ; '.'
0000000000012615         db  0x50 ; 'P'
0000000000012616         db  0x76 ; 'v'
0000000000012617         db  0x0a ; '.'
0000000000012618         db  0x0e ; '.'
0000000000012619         db  0x38 ; '8'
000000000001261a         db  0x43 ; 'C'
000000000001261b         db  0x0e ; '.'
000000000001261c         db  0x30 ; '0'
000000000001261d         db  0x41 ; 'A'
000000000001261e         db  0x0e ; '.'
000000000001261f         db  0x28 ; '('
0000000000012620         db  0x42 ; 'B'
0000000000012621         db  0x0e ; '.'
0000000000012622         db  0x20 ; ' '
0000000000012623         db  0x42 ; 'B'
0000000000012624         db  0x0e ; '.'
0000000000012625         db  0x18 ; '.'
0000000000012626         db  0x42 ; 'B'
0000000000012627         db  0x0e ; '.'
0000000000012628         db  0x10 ; '.'
0000000000012629         db  0x42 ; 'B'
000000000001262a         db  0x0e ; '.'
000000000001262b         db  0x08 ; '.'
000000000001262c         db  0x47 ; 'G'
000000000001262d         db  0x0b ; '.'
000000000001262e         db  0x5a ; 'Z'
000000000001262f         db  0x0e ; '.'
0000000000012630         db  0x38 ; '8'
0000000000012631         db  0x4a ; 'J'
0000000000012632         db  0x0e ; '.'
0000000000012633         db  0x30 ; '0'
0000000000012634         db  0x41 ; 'A'
0000000000012635         db  0x0e ; '.'
0000000000012636         db  0x28 ; '('
0000000000012637         db  0x42 ; 'B'
0000000000012638         db  0x0e ; '.'
0000000000012639         db  0x20 ; ' '
000000000001263a         db  0x42 ; 'B'
000000000001263b         db  0x0e ; '.'
000000000001263c         db  0x18 ; '.'
000000000001263d         db  0x42 ; 'B'
000000000001263e         db  0x0e ; '.'
000000000001263f         db  0x10 ; '.'
0000000000012640         db  0x42 ; 'B'
0000000000012641         db  0x0e ; '.'
0000000000012642         db  0x08 ; '.'
0000000000012643         db  0x00 ; '.'
0000000000012644         dd         0x00000010                                  ; Length of the record
0000000000012648         dd         0x00001220                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001264c         db         0xb4, 0x80, 2 dup (0xff)                    ; begin 0xa700
0000000000012650         db         0x12, 3 dup (0x00)                          ; length 0x12 (end at 0xa712)
0000000000012654         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012655         align      8
0000000000012658         dd         0x0000001c                                  ; Length of the record
000000000001265c         dd         0x00001234                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012660         db         0xc0, 0x80, 2 dup (0xff)                    ; begin 0xa720
0000000000012664         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0xa76a)
0000000000012668         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012669         db  0x41 ; 'A'
000000000001266a         db  0x0e ; '.'
000000000001266b         db  0x10 ; '.'
000000000001266c         db  0x83 ; '.'
000000000001266d         db  0x02 ; '.'
000000000001266e         db  0x69 ; 'i'
000000000001266f         db  0x0a ; '.'
0000000000012670         db  0x0e ; '.'
0000000000012671         db  0x08 ; '.'
0000000000012672         db  0x46 ; 'F'
0000000000012673         db  0x0b ; '.'
0000000000012674         db  0x59 ; 'Y'
0000000000012675         db  0x0e ; '.'
0000000000012676         db  0x08 ; '.'
0000000000012677         db  0x00 ; '.'
0000000000012678         dd         0x00000010                                  ; Length of the record
000000000001267c         dd         0x00001254                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012680         db         0xf0, 0x80, 2 dup (0xff)                    ; begin 0xa770
0000000000012684         db         0x19, 3 dup (0x00)                          ; length 0x19 (end at 0xa789)
0000000000012688         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012689         align      4
000000000001268c         dd         0x00000018                                  ; Length of the record
0000000000012690         dd         0x00001268                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012694         db         0xfc, 0x80, 2 dup (0xff)                    ; begin 0xa790
0000000000012698         db         0x19, 3 dup (0x00)                          ; length 0x19 (end at 0xa7a9)
000000000001269c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001269d         db  0x41 ; 'A'
000000000001269e         db  0x0e ; '.'
000000000001269f         db  0x10 ; '.'
00000000000126a0         db  0x83 ; '.'
00000000000126a1         db  0x02 ; '.'
00000000000126a2         db  0x53 ; 'S'
00000000000126a3         db  0x0e ; '.'
00000000000126a4         db  0x08 ; '.'
00000000000126a5         db  0x00 ; '.'
00000000000126a6         db  0x00 ; '.'
00000000000126a7         db  0x00 ; '.'
00000000000126a8         dd         0x00000110                                  ; Length of the record
00000000000126ac         dd         0x00001284                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000126b0         db         0x00, 0x81, 2 dup (0xff)                    ; begin 0xa7b0
00000000000126b4         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0xabc7)
00000000000126b8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000126b9         db  0x42 ; 'B'
00000000000126ba         db  0x0e ; '.'
00000000000126bb         db  0x10 ; '.'
00000000000126bc         db  0x8f ; '.'
00000000000126bd         db  0x02 ; '.'
00000000000126be         db  0x42 ; 'B'
00000000000126bf         db  0x0e ; '.'
00000000000126c0         db  0x18 ; '.'
00000000000126c1         db  0x8e ; '.'
00000000000126c2         db  0x03 ; '.'
00000000000126c3         db  0x42 ; 'B'
00000000000126c4         db  0x0e ; '.'
00000000000126c5         db  0x20 ; ' '
00000000000126c6         db  0x8d ; '.'
00000000000126c7         db  0x04 ; '.'
00000000000126c8         db  0x42 ; 'B'
00000000000126c9         db  0x0e ; '.'
00000000000126ca         db  0x28 ; '('
00000000000126cb         db  0x8c ; '.'
00000000000126cc         db  0x05 ; '.'
00000000000126cd         db  0x44 ; 'D'
00000000000126ce         db  0x0e ; '.'
00000000000126cf         db  0x30 ; '0'
00000000000126d0         db  0x86 ; '.'
00000000000126d1         db  0x06 ; '.'
00000000000126d2         db  0x41 ; 'A'
00000000000126d3         db  0x0e ; '.'
00000000000126d4         db  0x38 ; '8'
00000000000126d5         db  0x83 ; '.'
00000000000126d6         db  0x07 ; '.'
00000000000126d7         db  0x4a ; 'J'
00000000000126d8         db  0x0e ; '.'
00000000000126d9         db  0x60 ; '`'
00000000000126da         db  0x02 ; '.'
00000000000126db         db  0xdd ; '.'
00000000000126dc         db  0x0e ; '.'
00000000000126dd         db  0x68 ; 'h'
00000000000126de         db  0x57 ; 'W'
00000000000126df         db  0x0e ; '.'
00000000000126e0         db  0x70 ; 'p'
00000000000126e1         db  0x42 ; 'B'
00000000000126e2         db  0x0e ; '.'
00000000000126e3         db  0x78 ; 'x'
00000000000126e4         db  0x42 ; 'B'
00000000000126e5         db  0x0e ; '.'
00000000000126e6         db  0x80 ; '.'
00000000000126e7         db  0x01 ; '.'
00000000000126e8         db  0x42 ; 'B'
00000000000126e9         db  0x0e ; '.'
00000000000126ea         db  0x88 ; '.'
00000000000126eb         db  0x01 ; '.'
00000000000126ec         db  0x42 ; 'B'
00000000000126ed         db  0x0e ; '.'
00000000000126ee         db  0x90 ; '.'
00000000000126ef         db  0x01 ; '.'
00000000000126f0         db  0x53 ; 'S'
00000000000126f1         db  0x0e ; '.'
00000000000126f2         db  0x60 ; '`'
00000000000126f3         db  0x44 ; 'D'
00000000000126f4         db  0x0a ; '.'
00000000000126f5         db  0x0e ; '.'
00000000000126f6         db  0x38 ; '8'
00000000000126f7         db  0x41 ; 'A'
00000000000126f8         db  0x0e ; '.'
00000000000126f9         db  0x30 ; '0'
00000000000126fa         db  0x41 ; 'A'
00000000000126fb         db  0x0e ; '.'
00000000000126fc         db  0x28 ; '('
00000000000126fd         db  0x42 ; 'B'
00000000000126fe         db  0x0e ; '.'
00000000000126ff         db  0x20 ; ' '
0000000000012700         db  0x42 ; 'B'
0000000000012701         db  0x0e ; '.'
0000000000012702         db  0x18 ; '.'
0000000000012703         db  0x42 ; 'B'
0000000000012704         db  0x0e ; '.'
0000000000012705         db  0x10 ; '.'
0000000000012706         db  0x42 ; 'B'
0000000000012707         db  0x0e ; '.'
0000000000012708         db  0x08 ; '.'
0000000000012709         db  0x44 ; 'D'
000000000001270a         db  0x0b ; '.'
000000000001270b         db  0x02 ; '.'
000000000001270c         db  0x78 ; 'x'
000000000001270d         db  0x0a ; '.'
000000000001270e         db  0x0e ; '.'
000000000001270f         db  0x68 ; 'h'
0000000000012710         db  0x48 ; 'H'
0000000000012711         db  0x0b ; '.'
0000000000012712         db  0x5a ; 'Z'
0000000000012713         db  0x0a ; '.'
0000000000012714         db  0x0e ; '.'
0000000000012715         db  0x38 ; '8'
0000000000012716         db  0x47 ; 'G'
0000000000012717         db  0x0e ; '.'
0000000000012718         db  0x30 ; '0'
0000000000012719         db  0x41 ; 'A'
000000000001271a         db  0x0e ; '.'
000000000001271b         db  0x28 ; '('
000000000001271c         db  0x42 ; 'B'
000000000001271d         db  0x0e ; '.'
000000000001271e         db  0x20 ; ' '
000000000001271f         db  0x42 ; 'B'
0000000000012720         db  0x0e ; '.'
0000000000012721         db  0x18 ; '.'
0000000000012722         db  0x42 ; 'B'
0000000000012723         db  0x0e ; '.'
0000000000012724         db  0x10 ; '.'
0000000000012725         db  0x42 ; 'B'
0000000000012726         db  0x0e ; '.'
0000000000012727         db  0x08 ; '.'
0000000000012728         db  0x56 ; 'V'
0000000000012729         db  0x0b ; '.'
000000000001272a         db  0x5e ; '^'
000000000001272b         db  0x0a ; '.'
000000000001272c         db  0x0e ; '.'
000000000001272d         db  0x38 ; '8'
000000000001272e         db  0x52 ; 'R'
000000000001272f         db  0x0e ; '.'
0000000000012730         db  0x30 ; '0'
0000000000012731         db  0x41 ; 'A'
0000000000012732         db  0x0e ; '.'
0000000000012733         db  0x28 ; '('
0000000000012734         db  0x42 ; 'B'
0000000000012735         db  0x0e ; '.'
0000000000012736         db  0x20 ; ' '
0000000000012737         db  0x42 ; 'B'
0000000000012738         db  0x0e ; '.'
0000000000012739         db  0x18 ; '.'
000000000001273a         db  0x42 ; 'B'
000000000001273b         db  0x0e ; '.'
000000000001273c         db  0x10 ; '.'
000000000001273d         db  0x42 ; 'B'
000000000001273e         db  0x0e ; '.'
000000000001273f         db  0x08 ; '.'
0000000000012740         db  0x4f ; 'O'
0000000000012741         db  0x0b ; '.'
0000000000012742         db  0x62 ; 'b'
0000000000012743         db  0x0a ; '.'
0000000000012744         db  0x0e ; '.'
0000000000012745         db  0x38 ; '8'
0000000000012746         db  0x50 ; 'P'
0000000000012747         db  0x0e ; '.'
0000000000012748         db  0x30 ; '0'
0000000000012749         db  0x41 ; 'A'
000000000001274a         db  0x0e ; '.'
000000000001274b         db  0x28 ; '('
000000000001274c         db  0x42 ; 'B'
000000000001274d         db  0x0e ; '.'
000000000001274e         db  0x20 ; ' '
000000000001274f         db  0x42 ; 'B'
0000000000012750         db  0x0e ; '.'
0000000000012751         db  0x18 ; '.'
0000000000012752         db  0x42 ; 'B'
0000000000012753         db  0x0e ; '.'
0000000000012754         db  0x10 ; '.'
0000000000012755         db  0x42 ; 'B'
0000000000012756         db  0x0e ; '.'
0000000000012757         db  0x08 ; '.'
0000000000012758         db  0x55 ; 'U'
0000000000012759         db  0x0b ; '.'
000000000001275a         db  0x66 ; 'f'
000000000001275b         db  0x0e ; '.'
000000000001275c         db  0x68 ; 'h'
000000000001275d         db  0x42 ; 'B'
000000000001275e         db  0x0e ; '.'
000000000001275f         db  0x70 ; 'p'
0000000000012760         db  0x5c ; '\'
0000000000012761         db  0x0e ; '.'
0000000000012762         db  0x68 ; 'h'
0000000000012763         db  0x41 ; 'A'
0000000000012764         db  0x0e ; '.'
0000000000012765         db  0x60 ; '`'
0000000000012766         db  0x44 ; 'D'
0000000000012767         db  0x0a ; '.'
0000000000012768         db  0x0e ; '.'
0000000000012769         db  0x38 ; '8'
000000000001276a         db  0x41 ; 'A'
000000000001276b         db  0x0e ; '.'
000000000001276c         db  0x30 ; '0'
000000000001276d         db  0x41 ; 'A'
000000000001276e         db  0x0e ; '.'
000000000001276f         db  0x28 ; '('
0000000000012770         db  0x42 ; 'B'
0000000000012771         db  0x0e ; '.'
0000000000012772         db  0x20 ; ' '
0000000000012773         db  0x42 ; 'B'
0000000000012774         db  0x0e ; '.'
0000000000012775         db  0x18 ; '.'
0000000000012776         db  0x42 ; 'B'
0000000000012777         db  0x0e ; '.'
0000000000012778         db  0x10 ; '.'
0000000000012779         db  0x42 ; 'B'
000000000001277a         db  0x0e ; '.'
000000000001277b         db  0x08 ; '.'
000000000001277c         db  0x45 ; 'E'
000000000001277d         db  0x0b ; '.'
000000000001277e         db  0x68 ; 'h'
000000000001277f         db  0x0a ; '.'
0000000000012780         db  0x0e ; '.'
0000000000012781         db  0x68 ; 'h'
0000000000012782         db  0x48 ; 'H'
0000000000012783         db  0x0b ; '.'
0000000000012784         db  0x72 ; 'r'
0000000000012785         db  0x0e ; '.'
0000000000012786         db  0x68 ; 'h'
0000000000012787         db  0x45 ; 'E'
0000000000012788         db  0x0e ; '.'
0000000000012789         db  0x70 ; 'p'
000000000001278a         db  0x42 ; 'B'
000000000001278b         db  0x0e ; '.'
000000000001278c         db  0x78 ; 'x'
000000000001278d         db  0x42 ; 'B'
000000000001278e         db  0x0e ; '.'
000000000001278f         db  0x80 ; '.'
0000000000012790         db  0x01 ; '.'
0000000000012791         db  0x5e ; '^'
0000000000012792         db  0x0e ; '.'
0000000000012793         db  0x60 ; '`'
0000000000012794         db  0x44 ; 'D'
0000000000012795         db  0x0a ; '.'
0000000000012796         db  0x0e ; '.'
0000000000012797         db  0x38 ; '8'
0000000000012798         db  0x41 ; 'A'
0000000000012799         db  0x0e ; '.'
000000000001279a         db  0x30 ; '0'
000000000001279b         db  0x41 ; 'A'
000000000001279c         db  0x0e ; '.'
000000000001279d         db  0x28 ; '('
000000000001279e         db  0x42 ; 'B'
000000000001279f         db  0x0e ; '.'
00000000000127a0         db  0x20 ; ' '
00000000000127a1         db  0x42 ; 'B'
00000000000127a2         db  0x0e ; '.'
00000000000127a3         db  0x18 ; '.'
00000000000127a4         db  0x42 ; 'B'
00000000000127a5         db  0x0e ; '.'
00000000000127a6         db  0x10 ; '.'
00000000000127a7         db  0x42 ; 'B'
00000000000127a8         db  0x0e ; '.'
00000000000127a9         db  0x08 ; '.'
00000000000127aa         db  0x41 ; 'A'
00000000000127ab         db  0x0b ; '.'
00000000000127ac         db  0x79 ; 'y'
00000000000127ad         db  0x0a ; '.'
00000000000127ae         db  0x0e ; '.'
00000000000127af         db  0x68 ; 'h'
00000000000127b0         db  0x42 ; 'B'
00000000000127b1         db  0x0e ; '.'
00000000000127b2         db  0x70 ; 'p'
00000000000127b3         db  0x42 ; 'B'
00000000000127b4         db  0x0e ; '.'
00000000000127b5         db  0x78 ; 'x'
00000000000127b6         db  0x42 ; 'B'
00000000000127b7         db  0x0e ; '.'
00000000000127b8         db  0x80 ; '.'
00000000000127b9         db  0x01 ; '.'
00000000000127ba         db  0x51 ; 'Q'
00000000000127bb         db  0x0b ; '.'
00000000000127bc         dd         0x00000010                                  ; Length of the record
00000000000127c0         dd         0x00001398                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000127c4         db         0x0c, 0x84, 2 dup (0xff)                    ; begin 0xabd0
00000000000127c8         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0xabf0)
00000000000127cc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000127cd         align      16
00000000000127d0         dd         0x00000018                                  ; Length of the record
00000000000127d4         dd         0x000013ac                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000127d8         db         0x18, 0x84, 2 dup (0xff)                    ; begin 0xabf0
00000000000127dc         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0xac68)
00000000000127e0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000127e1         db  0x44 ; 'D'
00000000000127e2         db  0x0e ; '.'
00000000000127e3         db  0x70 ; 'p'
00000000000127e4         db  0x02 ; '.'
00000000000127e5         db  0x60 ; '`'
00000000000127e6         db  0x0a ; '.'
00000000000127e7         db  0x0e ; '.'
00000000000127e8         db  0x08 ; '.'
00000000000127e9         db  0x41 ; 'A'
00000000000127ea         db  0x0b ; '.'
00000000000127eb         db  0x00 ; '.'
00000000000127ec         dd         0x00000028                                  ; Length of the record
00000000000127f0         dd         0x000013c8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000127f4         db         0x7c, 0x84, 2 dup (0xff)                    ; begin 0xac70
00000000000127f8         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0xad45)
00000000000127fc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000127fd         db  0x41 ; 'A'
00000000000127fe         db  0x0e ; '.'
00000000000127ff         db  0x10 ; '.'
0000000000012800         db  0x86 ; '.'
0000000000012801         db  0x02 ; '.'
0000000000012802         db  0x41 ; 'A'
0000000000012803         db  0x0e ; '.'
0000000000012804         db  0x18 ; '.'
0000000000012805         db  0x83 ; '.'
0000000000012806         db  0x03 ; '.'
0000000000012807         db  0x50 ; 'P'
0000000000012808         db  0x0e ; '.'
0000000000012809         db  0xd0 ; '.'
000000000001280a         db  0x01 ; '.'
000000000001280b         db  0x02 ; '.'
000000000001280c         db  0xab ; '.'
000000000001280d         db  0x0a ; '.'
000000000001280e         db  0x0e ; '.'
000000000001280f         db  0x18 ; '.'
0000000000012810         db  0x41 ; 'A'
0000000000012811         db  0x0e ; '.'
0000000000012812         db  0x10 ; '.'
0000000000012813         db  0x41 ; 'A'
0000000000012814         db  0x0e ; '.'
0000000000012815         db  0x08 ; '.'
0000000000012816         db  0x41 ; 'A'
0000000000012817         db  0x0b ; '.'
0000000000012818         dd         0x0000001c                                  ; Length of the record
000000000001281c         dd         0x000013f4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012820         db         0x30, 0x85, 2 dup (0xff)                    ; begin 0xad50
0000000000012824         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0xadd0)
0000000000012828         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012829         db  0x41 ; 'A'
000000000001282a         db  0x0e ; '.'
000000000001282b         db  0x10 ; '.'
000000000001282c         db  0x83 ; '.'
000000000001282d         db  0x02 ; '.'
000000000001282e         db  0x02 ; '.'
000000000001282f         db  0x7a ; 'z'
0000000000012830         db  0x0e ; '.'
0000000000012831         db  0x08 ; '.'
0000000000012832         db  0x00 ; '.'
0000000000012833         db  0x00 ; '.'
0000000000012834         db  0x00 ; '.'
0000000000012835         db  0x00 ; '.'
0000000000012836         db  0x00 ; '.'
0000000000012837         db  0x00 ; '.'
0000000000012838         dd         0x00000018                                  ; Length of the record
000000000001283c         dd         0x00001414                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012840         db         0x90, 0x85, 2 dup (0xff)                    ; begin 0xadd0
0000000000012844         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0xadea)
0000000000012848         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012849         db  0x41 ; 'A'
000000000001284a         db  0x0e ; '.'
000000000001284b         db  0x10 ; '.'
000000000001284c         db  0x83 ; '.'
000000000001284d         db  0x02 ; '.'
000000000001284e         db  0x53 ; 'S'
000000000001284f         db  0x0a ; '.'
0000000000012850         db  0x0e ; '.'
0000000000012851         db  0x08 ; '.'
0000000000012852         db  0x41 ; 'A'
0000000000012853         db  0x0b ; '.'
0000000000012854         dd         0x00000010                                  ; Length of the record
0000000000012858         dd         0x00001430                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001285c         db         0x94, 0x85, 2 dup (0xff)                    ; begin 0xadf0
0000000000012860         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0xae14)
0000000000012864         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012865         db  0x5f ; '_'
0000000000012866         db  0x0e ; '.'
0000000000012867         db  0x10 ; '.'
0000000000012868         dd         0x00000010                                  ; Length of the record
000000000001286c         dd         0x00001444                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012870         db         0xb0, 0x85, 2 dup (0xff)                    ; begin 0xae20
0000000000012874         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xae22)
0000000000012878         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012879         align      4
000000000001287c         dd         0x00000020                                  ; Length of the record
0000000000012880         dd         0x00001458                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012884         db         0xac, 0x85, 2 dup (0xff)                    ; begin 0xae30
0000000000012888         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xae66)
000000000001288c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001288d         db  0x44 ; 'D'
000000000001288e         db  0x0e ; '.'
000000000001288f         db  0x10 ; '.'
0000000000012890         db  0x83 ; '.'
0000000000012891         db  0x02 ; '.'
0000000000012892         db  0x5d ; ']'
0000000000012893         db  0x0a ; '.'
0000000000012894         db  0x0e ; '.'
0000000000012895         db  0x08 ; '.'
0000000000012896         db  0x47 ; 'G'
0000000000012897         db  0x0b ; '.'
0000000000012898         db  0x48 ; 'H'
0000000000012899         db  0x0a ; '.'
000000000001289a         db  0x0e ; '.'
000000000001289b         db  0x08 ; '.'
000000000001289c         db  0x41 ; 'A'
000000000001289d         db  0x0b ; '.'
000000000001289e         db  0x00 ; '.'
000000000001289f         db  0x00 ; '.'
00000000000128a0         dd         0x00000010                                  ; Length of the record
00000000000128a4         dd         0x0000147c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000128a8         db         0xc8, 0x85, 2 dup (0xff)                    ; begin 0xae70
00000000000128ac         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0xae94)
00000000000128b0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000128b1         db  0x5f ; '_'
00000000000128b2         db  0x0e ; '.'
00000000000128b3         db  0x10 ; '.'
00000000000128b4         dd         0x00000014                                  ; Length of the record
00000000000128b8         dd         0x00001490                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000128bc         db         0xe4, 0x85, 2 dup (0xff)                    ; begin 0xaea0
00000000000128c0         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0xaf22)
00000000000128c4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000128c5         db  0x02 ; '.'
00000000000128c6         db  0x5f ; '_'
00000000000128c7         db  0x0e ; '.'
00000000000128c8         db  0x10 ; '.'
00000000000128c9         db  0x49 ; 'I'
00000000000128ca         db  0x0e ; '.'
00000000000128cb         db  0x08 ; '.'
00000000000128cc         dd         0x00000014                                  ; Length of the record
00000000000128d0         dd         0x000014a8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000128d4         db         0x5c, 0x86, 2 dup (0xff)                    ; begin 0xaf30
00000000000128d8         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0xaf7a)
00000000000128dc         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000128dd         db  0x02 ; '.'
00000000000128de         db  0x45 ; 'E'
00000000000128df         db  0x0e ; '.'
00000000000128e0         db  0x10 ; '.'
00000000000128e1         db  0x00 ; '.'
00000000000128e2         db  0x00 ; '.'
00000000000128e3         db  0x00 ; '.'
00000000000128e4         dd         0x00000018                                  ; Length of the record
00000000000128e8         dd         0x000014c0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000128ec         db         0x94, 0x86, 2 dup (0xff)                    ; begin 0xaf80
00000000000128f0         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0xaf97)
00000000000128f4         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000128f5         db  0x41 ; 'A'
00000000000128f6         db  0x0e ; '.'
00000000000128f7         db  0x10 ; '.'
00000000000128f8         db  0x83 ; '.'
00000000000128f9         db  0x02 ; '.'
00000000000128fa         db  0x51 ; 'Q'
00000000000128fb         db  0x0e ; '.'
00000000000128fc         db  0x08 ; '.'
00000000000128fd         db  0x00 ; '.'
00000000000128fe         db  0x00 ; '.'
00000000000128ff         db  0x00 ; '.'
0000000000012900         dd         0x00000018                                  ; Length of the record
0000000000012904         dd         0x000014dc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012908         db         0x98, 0x86, 2 dup (0xff)                    ; begin 0xafa0
000000000001290c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0xafce)
0000000000012910         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012911         db  0x47 ; 'G'
0000000000012912         db  0x0e ; '.'
0000000000012913         db  0x10 ; '.'
0000000000012914         db  0x61 ; 'a'
0000000000012915         db  0x0a ; '.'
0000000000012916         db  0x0e ; '.'
0000000000012917         db  0x08 ; '.'
0000000000012918         db  0x41 ; 'A'
0000000000012919         db  0x0b ; '.'
000000000001291a         db  0x00 ; '.'
000000000001291b         db  0x00 ; '.'
000000000001291c         dd         0x00000024                                  ; Length of the record
0000000000012920         dd         0x000014f8                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012924         db         0xac, 0x86, 2 dup (0xff)                    ; begin 0xafd0
0000000000012928         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0xaff8)
000000000001292c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000001292d         db  0x41 ; 'A'
000000000001292e         db  0x0e ; '.'
000000000001292f         db  0x10 ; '.'
0000000000012930         db  0x86 ; '.'
0000000000012931         db  0x02 ; '.'
0000000000012932         db  0x41 ; 'A'
0000000000012933         db  0x0e ; '.'
0000000000012934         db  0x18 ; '.'
0000000000012935         db  0x83 ; '.'
0000000000012936         db  0x03 ; '.'
0000000000012937         db  0x4d ; 'M'
0000000000012938         db  0x0e ; '.'
0000000000012939         db  0x20 ; ' '
000000000001293a         db  0x49 ; 'I'
000000000001293b         db  0x0e ; '.'
000000000001293c         db  0x18 ; '.'
000000000001293d         db  0x47 ; 'G'
000000000001293e         db  0x0e ; '.'
000000000001293f         db  0x10 ; '.'
0000000000012940         db  0x41 ; 'A'
0000000000012941         db  0x0e ; '.'
0000000000012942         db  0x08 ; '.'
0000000000012943         db  0x00 ; '.'
0000000000012944         dd         0x00000018                                  ; Length of the record
0000000000012948         dd         0x00001520                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
000000000001294c         db         0xb4, 0x86, 2 dup (0xff)                    ; begin 0xb000
0000000000012950         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0xb013)
0000000000012954         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012955         db  0x41 ; 'A'
0000000000012956         db  0x0e ; '.'
0000000000012957         db  0x10 ; '.'
0000000000012958         db  0x83 ; '.'
0000000000012959         db  0x02 ; '.'
000000000001295a         db  0x50 ; 'P'
000000000001295b         db  0x0e ; '.'
000000000001295c         db  0x08 ; '.'
000000000001295d         db  0x00 ; '.'
000000000001295e         db  0x00 ; '.'
000000000001295f         db  0x00 ; '.'
0000000000012960         dd         0x00000014                                  ; Length of the record
0000000000012964         dd         0x0000153c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012968         db         0xb8, 0x86, 2 dup (0xff)                    ; begin 0xb020
000000000001296c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0xb055)
0000000000012970         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012971         db  0x4b ; 'K'
0000000000012972         db  0x0e ; '.'
0000000000012973         db  0x10 ; '.'
0000000000012974         db  0x00 ; '.'
0000000000012975         db  0x00 ; '.'
0000000000012976         db  0x00 ; '.'
0000000000012977         db  0x00 ; '.'
0000000000012978         dd         0x0000001c                                  ; Length of the record
000000000001297c         dd         0x00001554                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012980         db         0xe0, 0x86, 2 dup (0xff)                    ; begin 0xb060
0000000000012984         db         0x2f, 3 dup (0x00)                          ; length 0x2f (end at 0xb08f)
0000000000012988         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012989         db  0x41 ; 'A'
000000000001298a         db  0x0e ; '.'
000000000001298b         db  0x10 ; '.'
000000000001298c         db  0x83 ; '.'
000000000001298d         db  0x02 ; '.'
000000000001298e         db  0x55 ; 'U'
000000000001298f         db  0x0a ; '.'
0000000000012990         db  0x0e ; '.'
0000000000012991         db  0x08 ; '.'
0000000000012992         db  0x4a ; 'J'
0000000000012993         db  0x0b ; '.'
0000000000012994         db  0x00 ; '.'
0000000000012995         db  0x00 ; '.'
0000000000012996         db  0x00 ; '.'
0000000000012997         db  0x00 ; '.'
0000000000012998         dd         0x00000024                                  ; Length of the record
000000000001299c         dd         0x00001574                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000129a0         db         0xf0, 0x86, 2 dup (0xff)                    ; begin 0xb090
00000000000129a4         db         0xac, 3 dup (0x00)                          ; length 0xac (end at 0xb13c)
00000000000129a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000129a9         db  0x42 ; 'B'
00000000000129aa         db  0x0e ; '.'
00000000000129ab         db  0x10 ; '.'
00000000000129ac         db  0x8d ; '.'
00000000000129ad         db  0x02 ; '.'
00000000000129ae         db  0x42 ; 'B'
00000000000129af         db  0x0e ; '.'
00000000000129b0         db  0x18 ; '.'
00000000000129b1         db  0x8c ; '.'
00000000000129b2         db  0x03 ; '.'
00000000000129b3         db  0x44 ; 'D'
00000000000129b4         db  0x0e ; '.'
00000000000129b5         db  0x20 ; ' '
00000000000129b6         db  0x86 ; '.'
00000000000129b7         db  0x04 ; '.'
00000000000129b8         db  0x41 ; 'A'
00000000000129b9         db  0x0e ; '.'
00000000000129ba         db  0x28 ; '('
00000000000129bb         db  0x83 ; '.'
00000000000129bc         db  0x05 ; '.'
00000000000129bd         db  0x47 ; 'G'
00000000000129be         db  0x0e ; '.'
00000000000129bf         db  0x40 ; '@'
00000000000129c0         dd         0x0000004c                                  ; Length of the record
00000000000129c4         dd         0x0000159c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000129c8         db         0x78, 0x87, 2 dup (0xff)                    ; begin 0xb140
00000000000129cc         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0xb55c)
00000000000129d0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000129d1         db  0x42 ; 'B'
00000000000129d2         db  0x0e ; '.'
00000000000129d3         db  0x10 ; '.'
00000000000129d4         db  0x8f ; '.'
00000000000129d5         db  0x02 ; '.'
00000000000129d6         db  0x42 ; 'B'
00000000000129d7         db  0x0e ; '.'
00000000000129d8         db  0x18 ; '.'
00000000000129d9         db  0x8e ; '.'
00000000000129da         db  0x03 ; '.'
00000000000129db         db  0x42 ; 'B'
00000000000129dc         db  0x0e ; '.'
00000000000129dd         db  0x20 ; ' '
00000000000129de         db  0x8d ; '.'
00000000000129df         db  0x04 ; '.'
00000000000129e0         db  0x42 ; 'B'
00000000000129e1         db  0x0e ; '.'
00000000000129e2         db  0x28 ; '('
00000000000129e3         db  0x8c ; '.'
00000000000129e4         db  0x05 ; '.'
00000000000129e5         db  0x41 ; 'A'
00000000000129e6         db  0x0e ; '.'
00000000000129e7         db  0x30 ; '0'
00000000000129e8         db  0x86 ; '.'
00000000000129e9         db  0x06 ; '.'
00000000000129ea         db  0x41 ; 'A'
00000000000129eb         db  0x0e ; '.'
00000000000129ec         db  0x38 ; '8'
00000000000129ed         db  0x83 ; '.'
00000000000129ee         db  0x07 ; '.'
00000000000129ef         db  0x44 ; 'D'
00000000000129f0         db  0x0e ; '.'
00000000000129f1         db  0x60 ; '`'
00000000000129f2         db  0x02 ; '.'
00000000000129f3         db  0xe9 ; '.'
00000000000129f4         db  0x0a ; '.'
00000000000129f5         db  0x0e ; '.'
00000000000129f6         db  0x38 ; '8'
00000000000129f7         db  0x41 ; 'A'
00000000000129f8         db  0x0e ; '.'
00000000000129f9         db  0x30 ; '0'
00000000000129fa         db  0x41 ; 'A'
00000000000129fb         db  0x0e ; '.'
00000000000129fc         db  0x28 ; '('
00000000000129fd         db  0x42 ; 'B'
00000000000129fe         db  0x0e ; '.'
00000000000129ff         db  0x20 ; ' '
0000000000012a00         db  0x42 ; 'B'
0000000000012a01         db  0x0e ; '.'
0000000000012a02         db  0x18 ; '.'
0000000000012a03         db  0x42 ; 'B'
0000000000012a04         db  0x0e ; '.'
0000000000012a05         db  0x10 ; '.'
0000000000012a06         db  0x42 ; 'B'
0000000000012a07         db  0x0e ; '.'
0000000000012a08         db  0x08 ; '.'
0000000000012a09         db  0x47 ; 'G'
0000000000012a0a         db  0x0b ; '.'
0000000000012a0b         db  0x00 ; '.'
0000000000012a0c         db  0x00 ; '.'
0000000000012a0d         db  0x00 ; '.'
0000000000012a0e         db  0x00 ; '.'
0000000000012a0f         db  0x00 ; '.'
0000000000012a10         dd         0x0000001c                                  ; Length of the record
0000000000012a14         dd         0x000015ec                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012a18         db         0x48, 0x8b, 2 dup (0xff)                    ; begin 0xb560
0000000000012a1c         db         0xb1, 3 dup (0x00)                          ; length 0xb1 (end at 0xb611)
0000000000012a20         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012a21         db  0x47 ; 'G'
0000000000012a22         db  0x0e ; '.'
0000000000012a23         db  0xe0 ; '.'
0000000000012a24         db  0x01 ; '.'
0000000000012a25         db  0x02 ; '.'
0000000000012a26         db  0xa4 ; '.'
0000000000012a27         db  0x0a ; '.'
0000000000012a28         db  0x0e ; '.'
0000000000012a29         db  0x08 ; '.'
0000000000012a2a         db  0x41 ; 'A'
0000000000012a2b         db  0x0b ; '.'
0000000000012a2c         db  0x00 ; '.'
0000000000012a2d         db  0x00 ; '.'
0000000000012a2e         db  0x00 ; '.'
0000000000012a2f         db  0x00 ; '.'
0000000000012a30         dd         0x00000018                                  ; Length of the record
0000000000012a34         dd         0x0000160c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012a38         db         0xe8, 0x8b, 2 dup (0xff)                    ; begin 0xb620
0000000000012a3c         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0xb661)
0000000000012a40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012a41         db  0x4a ; 'J'
0000000000012a42         db  0x0e ; '.'
0000000000012a43         db  0x10 ; '.'
0000000000012a44         db  0x4d ; 'M'
0000000000012a45         db  0x0e ; '.'
0000000000012a46         db  0x08 ; '.'
0000000000012a47         db  0x4b ; 'K'
0000000000012a48         db  0x0e ; '.'
0000000000012a49         db  0x10 ; '.'
0000000000012a4a         db  0x00 ; '.'
0000000000012a4b         db  0x00 ; '.'
0000000000012a4c         dd         0x00000028                                  ; Length of the record
0000000000012a50         dd         0x00001628                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012a54         db         0x1c, 0x8c, 2 dup (0xff)                    ; begin 0xb670
0000000000012a58         db         0x37, 3 dup (0x00)                          ; length 0x37 (end at 0xb6a7)
0000000000012a5c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012a5d         db  0x41 ; 'A'
0000000000012a5e         db  0x0e ; '.'
0000000000012a5f         db  0x10 ; '.'
0000000000012a60         db  0x86 ; '.'
0000000000012a61         db  0x02 ; '.'
0000000000012a62         db  0x41 ; 'A'
0000000000012a63         db  0x0e ; '.'
0000000000012a64         db  0x18 ; '.'
0000000000012a65         db  0x83 ; '.'
0000000000012a66         db  0x03 ; '.'
0000000000012a67         db  0x4e ; 'N'
0000000000012a68         db  0x0e ; '.'
0000000000012a69         db  0x20 ; ' '
0000000000012a6a         db  0x5d ; ']'
0000000000012a6b         db  0x0a ; '.'
0000000000012a6c         db  0x0e ; '.'
0000000000012a6d         db  0x18 ; '.'
0000000000012a6e         db  0x41 ; 'A'
0000000000012a6f         db  0x0e ; '.'
0000000000012a70         db  0x10 ; '.'
0000000000012a71         db  0x41 ; 'A'
0000000000012a72         db  0x0e ; '.'
0000000000012a73         db  0x08 ; '.'
0000000000012a74         db  0x41 ; 'A'
0000000000012a75         db  0x0b ; '.'
0000000000012a76         db  0x00 ; '.'
0000000000012a77         db  0x00 ; '.'
0000000000012a78         dd         0x0000004c                                  ; Length of the record
0000000000012a7c         dd         0x00001654                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012a80         db         0x30, 0x8c, 2 dup (0xff)                    ; begin 0xb6b0
0000000000012a84         db         0xd2, 0x02, 2 dup (0x00)                    ; length 0x2d2 (end at 0xb982)
0000000000012a88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012a89         db  0x42 ; 'B'
0000000000012a8a         db  0x0e ; '.'
0000000000012a8b         db  0x10 ; '.'
0000000000012a8c         db  0x8f ; '.'
0000000000012a8d         db  0x02 ; '.'
0000000000012a8e         db  0x42 ; 'B'
0000000000012a8f         db  0x0e ; '.'
0000000000012a90         db  0x18 ; '.'
0000000000012a91         db  0x8e ; '.'
0000000000012a92         db  0x03 ; '.'
0000000000012a93         db  0x42 ; 'B'
0000000000012a94         db  0x0e ; '.'
0000000000012a95         db  0x20 ; ' '
0000000000012a96         db  0x8d ; '.'
0000000000012a97         db  0x04 ; '.'
0000000000012a98         db  0x42 ; 'B'
0000000000012a99         db  0x0e ; '.'
0000000000012a9a         db  0x28 ; '('
0000000000012a9b         db  0x8c ; '.'
0000000000012a9c         db  0x05 ; '.'
0000000000012a9d         db  0x41 ; 'A'
0000000000012a9e         db  0x0e ; '.'
0000000000012a9f         db  0x30 ; '0'
0000000000012aa0         db  0x86 ; '.'
0000000000012aa1         db  0x06 ; '.'
0000000000012aa2         db  0x41 ; 'A'
0000000000012aa3         db  0x0e ; '.'
0000000000012aa4         db  0x38 ; '8'
0000000000012aa5         db  0x83 ; '.'
0000000000012aa6         db  0x07 ; '.'
0000000000012aa7         db  0x47 ; 'G'
0000000000012aa8         db  0x0e ; '.'
0000000000012aa9         db  0x50 ; 'P'
0000000000012aaa         db  0x02 ; '.'
0000000000012aab         db  0x42 ; 'B'
0000000000012aac         db  0x0a ; '.'
0000000000012aad         db  0x0e ; '.'
0000000000012aae         db  0x38 ; '8'
0000000000012aaf         db  0x41 ; 'A'
0000000000012ab0         db  0x0e ; '.'
0000000000012ab1         db  0x30 ; '0'
0000000000012ab2         db  0x41 ; 'A'
0000000000012ab3         db  0x0e ; '.'
0000000000012ab4         db  0x28 ; '('
0000000000012ab5         db  0x42 ; 'B'
0000000000012ab6         db  0x0e ; '.'
0000000000012ab7         db  0x20 ; ' '
0000000000012ab8         db  0x42 ; 'B'
0000000000012ab9         db  0x0e ; '.'
0000000000012aba         db  0x18 ; '.'
0000000000012abb         db  0x42 ; 'B'
0000000000012abc         db  0x0e ; '.'
0000000000012abd         db  0x10 ; '.'
0000000000012abe         db  0x42 ; 'B'
0000000000012abf         db  0x0e ; '.'
0000000000012ac0         db  0x08 ; '.'
0000000000012ac1         db  0x43 ; 'C'
0000000000012ac2         db  0x0b ; '.'
0000000000012ac3         db  0x00 ; '.'
0000000000012ac4         db  0x00 ; '.'
0000000000012ac5         db  0x00 ; '.'
0000000000012ac6         db  0x00 ; '.'
0000000000012ac7         db  0x00 ; '.'
0000000000012ac8         dd         0x00000034                                  ; Length of the record
0000000000012acc         dd         0x000016a4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012ad0         db         0xc0, 0x8e, 2 dup (0xff)                    ; begin 0xb990
0000000000012ad4         db         0x26, 0x01, 2 dup (0x00)                    ; length 0x126 (end at 0xbab6)
0000000000012ad8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012ad9         db  0x42 ; 'B'
0000000000012ada         db  0x0e ; '.'
0000000000012adb         db  0x10 ; '.'
0000000000012adc         db  0x8c ; '.'
0000000000012add         db  0x02 ; '.'
0000000000012ade         db  0x41 ; 'A'
0000000000012adf         db  0x0e ; '.'
0000000000012ae0         db  0x18 ; '.'
0000000000012ae1         db  0x86 ; '.'
0000000000012ae2         db  0x03 ; '.'
0000000000012ae3         db  0x44 ; 'D'
0000000000012ae4         db  0x0e ; '.'
0000000000012ae5         db  0x20 ; ' '
0000000000012ae6         db  0x83 ; '.'
0000000000012ae7         db  0x04 ; '.'
0000000000012ae8         db  0x4a ; 'J'
0000000000012ae9         db  0x0e ; '.'
0000000000012aea         db  0xb0 ; '.'
0000000000012aeb         db  0x03 ; '.'
0000000000012aec         db  0x02 ; '.'
0000000000012aed         db  0xd4 ; '.'
0000000000012aee         db  0x0a ; '.'
0000000000012aef         db  0x0e ; '.'
0000000000012af0         db  0x20 ; ' '
0000000000012af1         db  0x41 ; 'A'
0000000000012af2         db  0x0e ; '.'
0000000000012af3         db  0x18 ; '.'
0000000000012af4         db  0x41 ; 'A'
0000000000012af5         db  0x0e ; '.'
0000000000012af6         db  0x10 ; '.'
0000000000012af7         db  0x42 ; 'B'
0000000000012af8         db  0x0e ; '.'
0000000000012af9         db  0x08 ; '.'
0000000000012afa         db  0x47 ; 'G'
0000000000012afb         db  0x0b ; '.'
0000000000012afc         db  0x00 ; '.'
0000000000012afd         db  0x00 ; '.'
0000000000012afe         db  0x00 ; '.'
0000000000012aff         db  0x00 ; '.'
0000000000012b00         dd         0x0000003c                                  ; Length of the record
0000000000012b04         dd         0x000016dc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012b08         db         0xb8, 0x8f, 2 dup (0xff)                    ; begin 0xbac0
0000000000012b0c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0xbb43)
0000000000012b10         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012b11         db  0x42 ; 'B'
0000000000012b12         db  0x0e ; '.'
0000000000012b13         db  0x10 ; '.'
0000000000012b14         db  0x8d ; '.'
0000000000012b15         db  0x02 ; '.'
0000000000012b16         db  0x42 ; 'B'
0000000000012b17         db  0x0e ; '.'
0000000000012b18         db  0x18 ; '.'
0000000000012b19         db  0x8c ; '.'
0000000000012b1a         db  0x03 ; '.'
0000000000012b1b         db  0x44 ; 'D'
0000000000012b1c         db  0x0e ; '.'
0000000000012b1d         db  0x20 ; ' '
0000000000012b1e         db  0x86 ; '.'
0000000000012b1f         db  0x04 ; '.'
0000000000012b20         db  0x41 ; 'A'
0000000000012b21         db  0x0e ; '.'
0000000000012b22         db  0x28 ; '('
0000000000012b23         db  0x83 ; '.'
0000000000012b24         db  0x05 ; '.'
0000000000012b25         db  0x4a ; 'J'
0000000000012b26         db  0x0e ; '.'
0000000000012b27         db  0x40 ; '@'
0000000000012b28         db  0x02 ; '.'
0000000000012b29         db  0x64 ; 'd'
0000000000012b2a         db  0x0a ; '.'
0000000000012b2b         db  0x0e ; '.'
0000000000012b2c         db  0x28 ; '('
0000000000012b2d         db  0x41 ; 'A'
0000000000012b2e         db  0x0e ; '.'
0000000000012b2f         db  0x20 ; ' '
0000000000012b30         db  0x41 ; 'A'
0000000000012b31         db  0x0e ; '.'
0000000000012b32         db  0x18 ; '.'
0000000000012b33         db  0x42 ; 'B'
0000000000012b34         db  0x0e ; '.'
0000000000012b35         db  0x10 ; '.'
0000000000012b36         db  0x42 ; 'B'
0000000000012b37         db  0x0e ; '.'
0000000000012b38         db  0x08 ; '.'
0000000000012b39         db  0x41 ; 'A'
0000000000012b3a         db  0x0b ; '.'
0000000000012b3b         db  0x00 ; '.'
0000000000012b3c         db  0x00 ; '.'
0000000000012b3d         db  0x00 ; '.'
0000000000012b3e         db  0x00 ; '.'
0000000000012b3f         db  0x00 ; '.'
0000000000012b40         dd         0x00000018                                  ; Length of the record
0000000000012b44         dd         0x0000171c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012b48         db         0x08, 0x90, 2 dup (0xff)                    ; begin 0xbb50
0000000000012b4c         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0xbbd2)
0000000000012b50         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012b51         db  0x41 ; 'A'
0000000000012b52         db  0x0e ; '.'
0000000000012b53         db  0x10 ; '.'
0000000000012b54         db  0x83 ; '.'
0000000000012b55         db  0x02 ; '.'
0000000000012b56         db  0x02 ; '.'
0000000000012b57         db  0x80 ; '.'
0000000000012b58         db  0x0e ; '.'
0000000000012b59         db  0x08 ; '.'
0000000000012b5a         db  0x00 ; '.'
0000000000012b5b         db  0x00 ; '.'
0000000000012b5c         dd         0x00000018                                  ; Length of the record
0000000000012b60         dd         0x00001738                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012b64         db         0x7c, 0x90, 2 dup (0xff)                    ; begin 0xbbe0
0000000000012b68         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xbc16)
0000000000012b6c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012b6d         db  0x41 ; 'A'
0000000000012b6e         db  0x0e ; '.'
0000000000012b6f         db  0x10 ; '.'
0000000000012b70         db  0x83 ; '.'
0000000000012b71         db  0x02 ; '.'
0000000000012b72         db  0x70 ; 'p'
0000000000012b73         db  0x0e ; '.'
0000000000012b74         db  0x08 ; '.'
0000000000012b75         db  0x00 ; '.'
0000000000012b76         db  0x00 ; '.'
0000000000012b77         db  0x00 ; '.'
0000000000012b78         dd         0x00000074                                  ; Length of the record
0000000000012b7c         dd         0x00001754                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012b80         db         0xa0, 0x90, 2 dup (0xff)                    ; begin 0xbc20
0000000000012b84         db         0x48, 0x08, 2 dup (0x00)                    ; length 0x848 (end at 0xc468)
0000000000012b88         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012b89         db  0x42 ; 'B'
0000000000012b8a         db  0x0e ; '.'
0000000000012b8b         db  0x10 ; '.'
0000000000012b8c         db  0x8f ; '.'
0000000000012b8d         db  0x02 ; '.'
0000000000012b8e         db  0x42 ; 'B'
0000000000012b8f         db  0x0e ; '.'
0000000000012b90         db  0x18 ; '.'
0000000000012b91         db  0x8e ; '.'
0000000000012b92         db  0x03 ; '.'
0000000000012b93         db  0x49 ; 'I'
0000000000012b94         db  0x0e ; '.'
0000000000012b95         db  0x20 ; ' '
0000000000012b96         db  0x8d ; '.'
0000000000012b97         db  0x04 ; '.'
0000000000012b98         db  0x42 ; 'B'
0000000000012b99         db  0x0e ; '.'
0000000000012b9a         db  0x28 ; '('
0000000000012b9b         db  0x8c ; '.'
0000000000012b9c         db  0x05 ; '.'
0000000000012b9d         db  0x48 ; 'H'
0000000000012b9e         db  0x0e ; '.'
0000000000012b9f         db  0x30 ; '0'
0000000000012ba0         db  0x86 ; '.'
0000000000012ba1         db  0x06 ; '.'
0000000000012ba2         db  0x41 ; 'A'
0000000000012ba3         db  0x0e ; '.'
0000000000012ba4         db  0x38 ; '8'
0000000000012ba5         db  0x83 ; '.'
0000000000012ba6         db  0x07 ; '.'
0000000000012ba7         db  0x44 ; 'D'
0000000000012ba8         db  0x0e ; '.'
0000000000012ba9         db  0xa0 ; '.'
0000000000012baa         db  0x01 ; '.'
0000000000012bab         db  0x02 ; '.'
0000000000012bac         db  0x6f ; 'o'
0000000000012bad         db  0x0e ; '.'
0000000000012bae         db  0xa8 ; '.'
0000000000012baf         db  0x01 ; '.'
0000000000012bb0         db  0x4d ; 'M'
0000000000012bb1         db  0x0e ; '.'
0000000000012bb2         db  0xb0 ; '.'
0000000000012bb3         db  0x01 ; '.'
0000000000012bb4         db  0x46 ; 'F'
0000000000012bb5         db  0x0e ; '.'
0000000000012bb6         db  0xb8 ; '.'
0000000000012bb7         db  0x01 ; '.'
0000000000012bb8         db  0x46 ; 'F'
0000000000012bb9         db  0x0e ; '.'
0000000000012bba         db  0xc0 ; '.'
0000000000012bbb         db  0x01 ; '.'
0000000000012bbc         db  0x5d ; ']'
0000000000012bbd         db  0x0e ; '.'
0000000000012bbe         db  0xa0 ; '.'
0000000000012bbf         db  0x01 ; '.'
0000000000012bc0         db  0x75 ; 'u'
0000000000012bc1         db  0x0e ; '.'
0000000000012bc2         db  0xa8 ; '.'
0000000000012bc3         db  0x01 ; '.'
0000000000012bc4         db  0x41 ; 'A'
0000000000012bc5         db  0x0e ; '.'
0000000000012bc6         db  0xb0 ; '.'
0000000000012bc7         db  0x01 ; '.'
0000000000012bc8         db  0x62 ; 'b'
0000000000012bc9         db  0x0e ; '.'
0000000000012bca         db  0xa8 ; '.'
0000000000012bcb         db  0x01 ; '.'
0000000000012bcc         db  0x41 ; 'A'
0000000000012bcd         db  0x0e ; '.'
0000000000012bce         db  0xa0 ; '.'
0000000000012bcf         db  0x01 ; '.'
0000000000012bd0         db  0x03 ; '.'
0000000000012bd1         db  0xdf ; '.'
0000000000012bd2         db  0x01 ; '.'
0000000000012bd3         db  0x0a ; '.'
0000000000012bd4         db  0x0e ; '.'
0000000000012bd5         db  0x38 ; '8'
0000000000012bd6         db  0x41 ; 'A'
0000000000012bd7         db  0x0e ; '.'
0000000000012bd8         db  0x30 ; '0'
0000000000012bd9         db  0x41 ; 'A'
0000000000012bda         db  0x0e ; '.'
0000000000012bdb         db  0x28 ; '('
0000000000012bdc         db  0x42 ; 'B'
0000000000012bdd         db  0x0e ; '.'
0000000000012bde         db  0x20 ; ' '
0000000000012bdf         db  0x42 ; 'B'
0000000000012be0         db  0x0e ; '.'
0000000000012be1         db  0x18 ; '.'
0000000000012be2         db  0x42 ; 'B'
0000000000012be3         db  0x0e ; '.'
0000000000012be4         db  0x10 ; '.'
0000000000012be5         db  0x42 ; 'B'
0000000000012be6         db  0x0e ; '.'
0000000000012be7         db  0x08 ; '.'
0000000000012be8         db  0x45 ; 'E'
0000000000012be9         db  0x0b ; '.'
0000000000012bea         db  0x00 ; '.'
0000000000012beb         db  0x00 ; '.'
0000000000012bec         db  0x00 ; '.'
0000000000012bed         db  0x00 ; '.'
0000000000012bee         db  0x00 ; '.'
0000000000012bef         db  0x00 ; '.'
0000000000012bf0         dd         0x00000024                                  ; Length of the record
0000000000012bf4         dd         0x000017cc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012bf8         db         0x78, 0x98, 2 dup (0xff)                    ; begin 0xc470
0000000000012bfc         db         0x7e, 3 dup (0x00)                          ; length 0x7e (end at 0xc4ee)
0000000000012c00         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012c01         db  0x41 ; 'A'
0000000000012c02         db  0x0e ; '.'
0000000000012c03         db  0x10 ; '.'
0000000000012c04         db  0x83 ; '.'
0000000000012c05         db  0x02 ; '.'
0000000000012c06         db  0x4c ; 'L'
0000000000012c07         db  0x0e ; '.'
0000000000012c08         db  0x20 ; ' '
0000000000012c09         db  0x02 ; '.'
0000000000012c0a         db  0x49 ; 'I'
0000000000012c0b         db  0x0a ; '.'
0000000000012c0c         db  0x0e ; '.'
0000000000012c0d         db  0x10 ; '.'
0000000000012c0e         db  0x41 ; 'A'
0000000000012c0f         db  0x0e ; '.'
0000000000012c10         db  0x08 ; '.'
0000000000012c11         db  0x41 ; 'A'
0000000000012c12         db  0x0b ; '.'
0000000000012c13         db  0x00 ; '.'
0000000000012c14         db  0x00 ; '.'
0000000000012c15         db  0x00 ; '.'
0000000000012c16         db  0x00 ; '.'
0000000000012c17         db  0x00 ; '.'
0000000000012c18         dd         0x0000004c                                  ; Length of the record
0000000000012c1c         dd         0x000017f4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012c20         db         0xd0, 0x98, 2 dup (0xff)                    ; begin 0xc4f0
0000000000012c24         db         0xef, 3 dup (0x00)                          ; length 0xef (end at 0xc5df)
0000000000012c28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012c29         db  0x42 ; 'B'
0000000000012c2a         db  0x0e ; '.'
0000000000012c2b         db  0x10 ; '.'
0000000000012c2c         db  0x8f ; '.'
0000000000012c2d         db  0x02 ; '.'
0000000000012c2e         db  0x42 ; 'B'
0000000000012c2f         db  0x0e ; '.'
0000000000012c30         db  0x18 ; '.'
0000000000012c31         db  0x8e ; '.'
0000000000012c32         db  0x03 ; '.'
0000000000012c33         db  0x47 ; 'G'
0000000000012c34         db  0x0e ; '.'
0000000000012c35         db  0x20 ; ' '
0000000000012c36         db  0x8d ; '.'
0000000000012c37         db  0x04 ; '.'
0000000000012c38         db  0x42 ; 'B'
0000000000012c39         db  0x0e ; '.'
0000000000012c3a         db  0x28 ; '('
0000000000012c3b         db  0x8c ; '.'
0000000000012c3c         db  0x05 ; '.'
0000000000012c3d         db  0x44 ; 'D'
0000000000012c3e         db  0x0e ; '.'
0000000000012c3f         db  0x30 ; '0'
0000000000012c40         db  0x86 ; '.'
0000000000012c41         db  0x06 ; '.'
0000000000012c42         db  0x41 ; 'A'
0000000000012c43         db  0x0e ; '.'
0000000000012c44         db  0x38 ; '8'
0000000000012c45         db  0x83 ; '.'
0000000000012c46         db  0x07 ; '.'
0000000000012c47         db  0x5c ; '\'
0000000000012c48         db  0x0e ; '.'
0000000000012c49         db  0x40 ; '@'
0000000000012c4a         db  0x02 ; '.'
0000000000012c4b         db  0x61 ; 'a'
0000000000012c4c         db  0x0a ; '.'
0000000000012c4d         db  0x0e ; '.'
0000000000012c4e         db  0x38 ; '8'
0000000000012c4f         db  0x44 ; 'D'
0000000000012c50         db  0x0e ; '.'
0000000000012c51         db  0x30 ; '0'
0000000000012c52         db  0x41 ; 'A'
0000000000012c53         db  0x0e ; '.'
0000000000012c54         db  0x28 ; '('
0000000000012c55         db  0x42 ; 'B'
0000000000012c56         db  0x0e ; '.'
0000000000012c57         db  0x20 ; ' '
0000000000012c58         db  0x42 ; 'B'
0000000000012c59         db  0x0e ; '.'
0000000000012c5a         db  0x18 ; '.'
0000000000012c5b         db  0x42 ; 'B'
0000000000012c5c         db  0x0e ; '.'
0000000000012c5d         db  0x10 ; '.'
0000000000012c5e         db  0x42 ; 'B'
0000000000012c5f         db  0x0e ; '.'
0000000000012c60         db  0x08 ; '.'
0000000000012c61         db  0x44 ; 'D'
0000000000012c62         db  0x0b ; '.'
0000000000012c63         db  0x00 ; '.'
0000000000012c64         db  0x00 ; '.'
0000000000012c65         db  0x00 ; '.'
0000000000012c66         db  0x00 ; '.'
0000000000012c67         db  0x00 ; '.'
0000000000012c68         dd         0x00000010                                  ; Length of the record
0000000000012c6c         dd         0x00001844                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012c70         db         0x70, 0x99, 2 dup (0xff)                    ; begin 0xc5e0
0000000000012c74         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0xc5ea)
0000000000012c78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012c79         align      4
0000000000012c7c         dd         0x00000048                                  ; Length of the record
0000000000012c80         dd         0x00001858                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012c84         db         0x6c, 0x99, 2 dup (0xff)                    ; begin 0xc5f0
0000000000012c88         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0xc706)
0000000000012c8c         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012c8d         db  0x42 ; 'B'
0000000000012c8e         db  0x0e ; '.'
0000000000012c8f         db  0x10 ; '.'
0000000000012c90         db  0x8f ; '.'
0000000000012c91         db  0x02 ; '.'
0000000000012c92         db  0x42 ; 'B'
0000000000012c93         db  0x0e ; '.'
0000000000012c94         db  0x18 ; '.'
0000000000012c95         db  0x8e ; '.'
0000000000012c96         db  0x03 ; '.'
0000000000012c97         db  0x45 ; 'E'
0000000000012c98         db  0x0e ; '.'
0000000000012c99         db  0x20 ; ' '
0000000000012c9a         db  0x8d ; '.'
0000000000012c9b         db  0x04 ; '.'
0000000000012c9c         db  0x42 ; 'B'
0000000000012c9d         db  0x0e ; '.'
0000000000012c9e         db  0x28 ; '('
0000000000012c9f         db  0x8c ; '.'
0000000000012ca0         db  0x05 ; '.'
0000000000012ca1         db  0x44 ; 'D'
0000000000012ca2         db  0x0e ; '.'
0000000000012ca3         db  0x30 ; '0'
0000000000012ca4         db  0x86 ; '.'
0000000000012ca5         db  0x06 ; '.'
0000000000012ca6         db  0x41 ; 'A'
0000000000012ca7         db  0x0e ; '.'
0000000000012ca8         db  0x38 ; '8'
0000000000012ca9         db  0x83 ; '.'
0000000000012caa         db  0x07 ; '.'
0000000000012cab         db  0x47 ; 'G'
0000000000012cac         db  0x0e ; '.'
0000000000012cad         db  0x60 ; '`'
0000000000012cae         db  0x02 ; '.'
0000000000012caf         db  0xde ; '.'
0000000000012cb0         db  0x0a ; '.'
0000000000012cb1         db  0x0e ; '.'
0000000000012cb2         db  0x38 ; '8'
0000000000012cb3         db  0x41 ; 'A'
0000000000012cb4         db  0x0e ; '.'
0000000000012cb5         db  0x30 ; '0'
0000000000012cb6         db  0x41 ; 'A'
0000000000012cb7         db  0x0e ; '.'
0000000000012cb8         db  0x28 ; '('
0000000000012cb9         db  0x42 ; 'B'
0000000000012cba         db  0x0e ; '.'
0000000000012cbb         db  0x20 ; ' '
0000000000012cbc         db  0x42 ; 'B'
0000000000012cbd         db  0x0e ; '.'
0000000000012cbe         db  0x18 ; '.'
0000000000012cbf         db  0x42 ; 'B'
0000000000012cc0         db  0x0e ; '.'
0000000000012cc1         db  0x10 ; '.'
0000000000012cc2         db  0x42 ; 'B'
0000000000012cc3         db  0x0e ; '.'
0000000000012cc4         db  0x08 ; '.'
0000000000012cc5         db  0x41 ; 'A'
0000000000012cc6         db  0x0b ; '.'
0000000000012cc7         db  0x00 ; '.'
0000000000012cc8         dd         0x00000028                                  ; Length of the record
0000000000012ccc         dd         0x000018a4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012cd0         db         0x40, 0x9a, 2 dup (0xff)                    ; begin 0xc710
0000000000012cd4         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0xc783)
0000000000012cd8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012cd9         db  0x46 ; 'F'
0000000000012cda         db  0x0e ; '.'
0000000000012cdb         db  0x10 ; '.'
0000000000012cdc         db  0x8c ; '.'
0000000000012cdd         db  0x02 ; '.'
0000000000012cde         db  0x46 ; 'F'
0000000000012cdf         db  0x0e ; '.'
0000000000012ce0         db  0x18 ; '.'
0000000000012ce1         db  0x86 ; '.'
0000000000012ce2         db  0x03 ; '.'
0000000000012ce3         db  0x44 ; 'D'
0000000000012ce4         db  0x0e ; '.'
0000000000012ce5         db  0x20 ; ' '
0000000000012ce6         db  0x83 ; '.'
0000000000012ce7         db  0x04 ; '.'
0000000000012ce8         db  0x7f ; '.'
0000000000012ce9         db  0x0a ; '.'
0000000000012cea         db  0x0e ; '.'
0000000000012ceb         db  0x18 ; '.'
0000000000012cec         db  0x41 ; 'A'
0000000000012ced         db  0x0e ; '.'
0000000000012cee         db  0x10 ; '.'
0000000000012cef         db  0x42 ; 'B'
0000000000012cf0         db  0x0e ; '.'
0000000000012cf1         db  0x08 ; '.'
0000000000012cf2         db  0x4e ; 'N'
0000000000012cf3         db  0x0b ; '.'
0000000000012cf4         dd         0x0000005c                                  ; Length of the record
0000000000012cf8         dd         0x000018d0                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012cfc         db         0x94, 0x9a, 2 dup (0xff)                    ; begin 0xc790
0000000000012d00         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0xc8b0)
0000000000012d04         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012d05         db  0x42 ; 'B'
0000000000012d06         db  0x0e ; '.'
0000000000012d07         db  0x10 ; '.'
0000000000012d08         db  0x8f ; '.'
0000000000012d09         db  0x02 ; '.'
0000000000012d0a         db  0x42 ; 'B'
0000000000012d0b         db  0x0e ; '.'
0000000000012d0c         db  0x18 ; '.'
0000000000012d0d         db  0x8e ; '.'
0000000000012d0e         db  0x03 ; '.'
0000000000012d0f         db  0x45 ; 'E'
0000000000012d10         db  0x0e ; '.'
0000000000012d11         db  0x20 ; ' '
0000000000012d12         db  0x8d ; '.'
0000000000012d13         db  0x04 ; '.'
0000000000012d14         db  0x42 ; 'B'
0000000000012d15         db  0x0e ; '.'
0000000000012d16         db  0x28 ; '('
0000000000012d17         db  0x8c ; '.'
0000000000012d18         db  0x05 ; '.'
0000000000012d19         db  0x43 ; 'C'
0000000000012d1a         db  0x0e ; '.'
0000000000012d1b         db  0x30 ; '0'
0000000000012d1c         db  0x86 ; '.'
0000000000012d1d         db  0x06 ; '.'
0000000000012d1e         db  0x41 ; 'A'
0000000000012d1f         db  0x0e ; '.'
0000000000012d20         db  0x38 ; '8'
0000000000012d21         db  0x83 ; '.'
0000000000012d22         db  0x07 ; '.'
0000000000012d23         db  0x56 ; 'V'
0000000000012d24         db  0x0e ; '.'
0000000000012d25         db  0x40 ; '@'
0000000000012d26         db  0x02 ; '.'
0000000000012d27         db  0xd3 ; '.'
0000000000012d28         db  0x0a ; '.'
0000000000012d29         db  0x0e ; '.'
0000000000012d2a         db  0x38 ; '8'
0000000000012d2b         db  0x41 ; 'A'
0000000000012d2c         db  0x0e ; '.'
0000000000012d2d         db  0x30 ; '0'
0000000000012d2e         db  0x41 ; 'A'
0000000000012d2f         db  0x0e ; '.'
0000000000012d30         db  0x28 ; '('
0000000000012d31         db  0x42 ; 'B'
0000000000012d32         db  0x0e ; '.'
0000000000012d33         db  0x20 ; ' '
0000000000012d34         db  0x42 ; 'B'
0000000000012d35         db  0x0e ; '.'
0000000000012d36         db  0x18 ; '.'
0000000000012d37         db  0x42 ; 'B'
0000000000012d38         db  0x0e ; '.'
0000000000012d39         db  0x10 ; '.'
0000000000012d3a         db  0x42 ; 'B'
0000000000012d3b         db  0x0e ; '.'
0000000000012d3c         db  0x08 ; '.'
0000000000012d3d         db  0x46 ; 'F'
0000000000012d3e         db  0x0b ; '.'
0000000000012d3f         db  0x44 ; 'D'
0000000000012d40         db  0x0e ; '.'
0000000000012d41         db  0x38 ; '8'
0000000000012d42         db  0x46 ; 'F'
0000000000012d43         db  0x0e ; '.'
0000000000012d44         db  0x30 ; '0'
0000000000012d45         db  0x41 ; 'A'
0000000000012d46         db  0x0e ; '.'
0000000000012d47         db  0x28 ; '('
0000000000012d48         db  0x42 ; 'B'
0000000000012d49         db  0x0e ; '.'
0000000000012d4a         db  0x20 ; ' '
0000000000012d4b         db  0x42 ; 'B'
0000000000012d4c         db  0x0e ; '.'
0000000000012d4d         db  0x18 ; '.'
0000000000012d4e         db  0x42 ; 'B'
0000000000012d4f         db  0x0e ; '.'
0000000000012d50         db  0x10 ; '.'
0000000000012d51         db  0x42 ; 'B'
0000000000012d52         db  0x0e ; '.'
0000000000012d53         db  0x08 ; '.'
0000000000012d54         dd         0x00000048                                  ; Length of the record
0000000000012d58         dd         0x00001930                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012d5c         db         0x54, 0x9b, 2 dup (0xff)                    ; begin 0xc8b0
0000000000012d60         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0xc91d)
0000000000012d64         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012d65         db  0x42 ; 'B'
0000000000012d66         db  0x0e ; '.'
0000000000012d67         db  0x10 ; '.'
0000000000012d68         db  0x8f ; '.'
0000000000012d69         db  0x02 ; '.'
0000000000012d6a         db  0x42 ; 'B'
0000000000012d6b         db  0x0e ; '.'
0000000000012d6c         db  0x18 ; '.'
0000000000012d6d         db  0x8e ; '.'
0000000000012d6e         db  0x03 ; '.'
0000000000012d6f         db  0x45 ; 'E'
0000000000012d70         db  0x0e ; '.'
0000000000012d71         db  0x20 ; ' '
0000000000012d72         db  0x8d ; '.'
0000000000012d73         db  0x04 ; '.'
0000000000012d74         db  0x42 ; 'B'
0000000000012d75         db  0x0e ; '.'
0000000000012d76         db  0x28 ; '('
0000000000012d77         db  0x8c ; '.'
0000000000012d78         db  0x05 ; '.'
0000000000012d79         db  0x44 ; 'D'
0000000000012d7a         db  0x0e ; '.'
0000000000012d7b         db  0x30 ; '0'
0000000000012d7c         db  0x86 ; '.'
0000000000012d7d         db  0x06 ; '.'
0000000000012d7e         db  0x41 ; 'A'
0000000000012d7f         db  0x0e ; '.'
0000000000012d80         db  0x38 ; '8'
0000000000012d81         db  0x83 ; '.'
0000000000012d82         db  0x07 ; '.'
0000000000012d83         db  0x50 ; 'P'
0000000000012d84         db  0x0e ; '.'
0000000000012d85         db  0x40 ; '@'
0000000000012d86         db  0x5a ; 'Z'
0000000000012d87         db  0x0a ; '.'
0000000000012d88         db  0x0e ; '.'
0000000000012d89         db  0x38 ; '8'
0000000000012d8a         db  0x41 ; 'A'
0000000000012d8b         db  0x0e ; '.'
0000000000012d8c         db  0x30 ; '0'
0000000000012d8d         db  0x41 ; 'A'
0000000000012d8e         db  0x0e ; '.'
0000000000012d8f         db  0x28 ; '('
0000000000012d90         db  0x42 ; 'B'
0000000000012d91         db  0x0e ; '.'
0000000000012d92         db  0x20 ; ' '
0000000000012d93         db  0x42 ; 'B'
0000000000012d94         db  0x0e ; '.'
0000000000012d95         db  0x18 ; '.'
0000000000012d96         db  0x42 ; 'B'
0000000000012d97         db  0x0e ; '.'
0000000000012d98         db  0x10 ; '.'
0000000000012d99         db  0x42 ; 'B'
0000000000012d9a         db  0x0e ; '.'
0000000000012d9b         db  0x08 ; '.'
0000000000012d9c         db  0x41 ; 'A'
0000000000012d9d         db  0x0b ; '.'
0000000000012d9e         db  0x00 ; '.'
0000000000012d9f         db  0x00 ; '.'
0000000000012da0         dd         0x0000003c                                  ; Length of the record
0000000000012da4         dd         0x0000197c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012da8         db         0x78, 0x9b, 2 dup (0xff)                    ; begin 0xc920
0000000000012dac         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0xc96d)
0000000000012db0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012db1         db  0x42 ; 'B'
0000000000012db2         db  0x0e ; '.'
0000000000012db3         db  0x10 ; '.'
0000000000012db4         db  0x8e ; '.'
0000000000012db5         db  0x02 ; '.'
0000000000012db6         db  0x42 ; 'B'
0000000000012db7         db  0x0e ; '.'
0000000000012db8         db  0x18 ; '.'
0000000000012db9         db  0x8d ; '.'
0000000000012dba         db  0x03 ; '.'
0000000000012dbb         db  0x42 ; 'B'
0000000000012dbc         db  0x0e ; '.'
0000000000012dbd         db  0x20 ; ' '
0000000000012dbe         db  0x8c ; '.'
0000000000012dbf         db  0x04 ; '.'
0000000000012dc0         db  0x41 ; 'A'
0000000000012dc1         db  0x0e ; '.'
0000000000012dc2         db  0x28 ; '('
0000000000012dc3         db  0x86 ; '.'
0000000000012dc4         db  0x05 ; '.'
0000000000012dc5         db  0x41 ; 'A'
0000000000012dc6         db  0x0e ; '.'
0000000000012dc7         db  0x30 ; '0'
0000000000012dc8         db  0x83 ; '.'
0000000000012dc9         db  0x06 ; '.'
0000000000012dca         db  0x7a ; 'z'
0000000000012dcb         db  0x0e ; '.'
0000000000012dcc         db  0x28 ; '('
0000000000012dcd         db  0x44 ; 'D'
0000000000012dce         db  0x0e ; '.'
0000000000012dcf         db  0x20 ; ' '
0000000000012dd0         db  0x42 ; 'B'
0000000000012dd1         db  0x0e ; '.'
0000000000012dd2         db  0x18 ; '.'
0000000000012dd3         db  0x42 ; 'B'
0000000000012dd4         db  0x0e ; '.'
0000000000012dd5         db  0x10 ; '.'
0000000000012dd6         db  0x42 ; 'B'
0000000000012dd7         db  0x0e ; '.'
0000000000012dd8         db  0x08 ; '.'
0000000000012dd9         db  0x00 ; '.'
0000000000012dda         db  0x00 ; '.'
0000000000012ddb         db  0x00 ; '.'
0000000000012ddc         db  0x00 ; '.'
0000000000012ddd         db  0x00 ; '.'
0000000000012dde         db  0x00 ; '.'
0000000000012ddf         db  0x00 ; '.'
0000000000012de0         dd         0x0000004c                                  ; Length of the record
0000000000012de4         dd         0x000019bc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012de8         db         0x88, 0x9b, 2 dup (0xff)                    ; begin 0xc970
0000000000012dec         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0xc9ed)
0000000000012df0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012df1         db  0x42 ; 'B'
0000000000012df2         db  0x0e ; '.'
0000000000012df3         db  0x10 ; '.'
0000000000012df4         db  0x8c ; '.'
0000000000012df5         db  0x02 ; '.'
0000000000012df6         db  0x41 ; 'A'
0000000000012df7         db  0x0e ; '.'
0000000000012df8         db  0x18 ; '.'
0000000000012df9         db  0x86 ; '.'
0000000000012dfa         db  0x03 ; '.'
0000000000012dfb         db  0x44 ; 'D'
0000000000012dfc         db  0x0e ; '.'
0000000000012dfd         db  0x20 ; ' '
0000000000012dfe         db  0x83 ; '.'
0000000000012dff         db  0x04 ; '.'
0000000000012e00         db  0x69 ; 'i'
0000000000012e01         db  0x0a ; '.'
0000000000012e02         db  0x0e ; '.'
0000000000012e03         db  0x18 ; '.'
0000000000012e04         db  0x41 ; 'A'
0000000000012e05         db  0x0e ; '.'
0000000000012e06         db  0x10 ; '.'
0000000000012e07         db  0x42 ; 'B'
0000000000012e08         db  0x0e ; '.'
0000000000012e09         db  0x08 ; '.'
0000000000012e0a         db  0x45 ; 'E'
0000000000012e0b         db  0x0b ; '.'
0000000000012e0c         db  0x55 ; 'U'
0000000000012e0d         db  0x0a ; '.'
0000000000012e0e         db  0x0e ; '.'
0000000000012e0f         db  0x18 ; '.'
0000000000012e10         db  0x41 ; 'A'
0000000000012e11         db  0x0e ; '.'
0000000000012e12         db  0x10 ; '.'
0000000000012e13         db  0x42 ; 'B'
0000000000012e14         db  0x0e ; '.'
0000000000012e15         db  0x08 ; '.'
0000000000012e16         db  0x48 ; 'H'
0000000000012e17         db  0x0b ; '.'
0000000000012e18         db  0x41 ; 'A'
0000000000012e19         db  0x0a ; '.'
0000000000012e1a         db  0x0e ; '.'
0000000000012e1b         db  0x18 ; '.'
0000000000012e1c         db  0x46 ; 'F'
0000000000012e1d         db  0x0e ; '.'
0000000000012e1e         db  0x10 ; '.'
0000000000012e1f         db  0x42 ; 'B'
0000000000012e20         db  0x0e ; '.'
0000000000012e21         db  0x08 ; '.'
0000000000012e22         db  0x47 ; 'G'
0000000000012e23         db  0x0b ; '.'
0000000000012e24         db  0x49 ; 'I'
0000000000012e25         db  0x0e ; '.'
0000000000012e26         db  0x18 ; '.'
0000000000012e27         db  0x41 ; 'A'
0000000000012e28         db  0x0e ; '.'
0000000000012e29         db  0x10 ; '.'
0000000000012e2a         db  0x42 ; 'B'
0000000000012e2b         db  0x0e ; '.'
0000000000012e2c         db  0x08 ; '.'
0000000000012e2d         db  0x00 ; '.'
0000000000012e2e         db  0x00 ; '.'
0000000000012e2f         db  0x00 ; '.'
0000000000012e30         dd         0x0000001c                                  ; Length of the record
0000000000012e34         dd         0x00001a0c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012e38         db         0xb8, 0x9b, 2 dup (0xff)                    ; begin 0xc9f0
0000000000012e3c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0xca5e)
0000000000012e40         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012e41         db  0x44 ; 'D'
0000000000012e42         db  0x0e ; '.'
0000000000012e43         db  0x60 ; '`'
0000000000012e44         db  0x7f ; '.'
0000000000012e45         db  0x0a ; '.'
0000000000012e46         db  0x0e ; '.'
0000000000012e47         db  0x08 ; '.'
0000000000012e48         db  0x45 ; 'E'
0000000000012e49         db  0x0b ; '.'
0000000000012e4a         db  0x00 ; '.'
0000000000012e4b         db  0x00 ; '.'
0000000000012e4c         db  0x00 ; '.'
0000000000012e4d         db  0x00 ; '.'
0000000000012e4e         db  0x00 ; '.'
0000000000012e4f         db  0x00 ; '.'
0000000000012e50         dd         0x0000001c                                  ; Length of the record
0000000000012e54         dd         0x00001a2c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012e58         db         0x08, 0x9c, 2 dup (0xff)                    ; begin 0xca60
0000000000012e5c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0xcac0)
0000000000012e60         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012e61         db  0x44 ; 'D'
0000000000012e62         db  0x0e ; '.'
0000000000012e63         db  0x10 ; '.'
0000000000012e64         db  0x75 ; 'u'
0000000000012e65         db  0x0a ; '.'
0000000000012e66         db  0x0e ; '.'
0000000000012e67         db  0x08 ; '.'
0000000000012e68         db  0x47 ; 'G'
0000000000012e69         db  0x0b ; '.'
0000000000012e6a         db  0x5f ; '_'
0000000000012e6b         db  0x0e ; '.'
0000000000012e6c         db  0x08 ; '.'
0000000000012e6d         db  0x00 ; '.'
0000000000012e6e         db  0x00 ; '.'
0000000000012e6f         db  0x00 ; '.'
0000000000012e70         dd         0x00000014                                  ; Length of the record
0000000000012e74         dd         0x00001a4c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012e78         db         0x48, 0x9c, 2 dup (0xff)                    ; begin 0xcac0
0000000000012e7c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0xcaf6)
0000000000012e80         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012e81         align      8
0000000000012e88         dd         0x0000001c                                  ; Length of the record
0000000000012e8c         dd         0x00001a64                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012e90         db         0x70, 0x9c, 2 dup (0xff)                    ; begin 0xcb00
0000000000012e94         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0xcb3c)
0000000000012e98         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012e99         db  0x44 ; 'D'
0000000000012e9a         db  0x0e ; '.'
0000000000012e9b         db  0x10 ; '.'
0000000000012e9c         db  0x61 ; 'a'
0000000000012e9d         db  0x0a ; '.'
0000000000012e9e         db  0x0e ; '.'
0000000000012e9f         db  0x08 ; '.'
0000000000012ea0         db  0x4b ; 'K'
0000000000012ea1         db  0x0b ; '.'
0000000000012ea2         db  0x4b ; 'K'
0000000000012ea3         db  0x0e ; '.'
0000000000012ea4         db  0x08 ; '.'
0000000000012ea5         db  0x00 ; '.'
0000000000012ea6         db  0x00 ; '.'
0000000000012ea7         db  0x00 ; '.'
0000000000012ea8         dd         0x00000034                                  ; Length of the record
0000000000012eac         dd         0x00001a84                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012eb0         db         0x90, 0x9c, 2 dup (0xff)                    ; begin 0xcb40
0000000000012eb4         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0xcb7f)
0000000000012eb8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012eb9         db  0x42 ; 'B'
0000000000012eba         db  0x0e ; '.'
0000000000012ebb         db  0x10 ; '.'
0000000000012ebc         db  0x8d ; '.'
0000000000012ebd         db  0x02 ; '.'
0000000000012ebe         db  0x42 ; 'B'
0000000000012ebf         db  0x0e ; '.'
0000000000012ec0         db  0x18 ; '.'
0000000000012ec1         db  0x8c ; '.'
0000000000012ec2         db  0x03 ; '.'
0000000000012ec3         db  0x41 ; 'A'
0000000000012ec4         db  0x0e ; '.'
0000000000012ec5         db  0x20 ; ' '
0000000000012ec6         db  0x86 ; '.'
0000000000012ec7         db  0x04 ; '.'
0000000000012ec8         db  0x41 ; 'A'
0000000000012ec9         db  0x0e ; '.'
0000000000012eca         db  0x28 ; '('
0000000000012ecb         db  0x83 ; '.'
0000000000012ecc         db  0x05 ; '.'
0000000000012ecd         db  0x46 ; 'F'
0000000000012ece         db  0x0e ; '.'
0000000000012ecf         db  0x30 ; '0'
0000000000012ed0         db  0x6a ; 'j'
0000000000012ed1         db  0x0e ; '.'
0000000000012ed2         db  0x28 ; '('
0000000000012ed3         db  0x43 ; 'C'
0000000000012ed4         db  0x0e ; '.'
0000000000012ed5         db  0x20 ; ' '
0000000000012ed6         db  0x41 ; 'A'
0000000000012ed7         db  0x0e ; '.'
0000000000012ed8         db  0x18 ; '.'
0000000000012ed9         db  0x42 ; 'B'
0000000000012eda         db  0x0e ; '.'
0000000000012edb         db  0x10 ; '.'
0000000000012edc         db  0x42 ; 'B'
0000000000012edd         db  0x0e ; '.'
0000000000012ede         db  0x08 ; '.'
0000000000012edf         db  0x00 ; '.'
0000000000012ee0         dd         0x00000034                                  ; Length of the record
0000000000012ee4         dd         0x00001abc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012ee8         db         0x98, 0x9c, 2 dup (0xff)                    ; begin 0xcb80
0000000000012eec         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xcbfb)
0000000000012ef0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012ef1         db  0x42 ; 'B'
0000000000012ef2         db  0x0e ; '.'
0000000000012ef3         db  0x10 ; '.'
0000000000012ef4         db  0x8c ; '.'
0000000000012ef5         db  0x02 ; '.'
0000000000012ef6         db  0x41 ; 'A'
0000000000012ef7         db  0x0e ; '.'
0000000000012ef8         db  0x18 ; '.'
0000000000012ef9         db  0x86 ; '.'
0000000000012efa         db  0x03 ; '.'
0000000000012efb         db  0x41 ; 'A'
0000000000012efc         db  0x0e ; '.'
0000000000012efd         db  0x20 ; ' '
0000000000012efe         db  0x83 ; '.'
0000000000012eff         db  0x04 ; '.'
0000000000012f00         db  0x7d ; '}'
0000000000012f01         db  0x0a ; '.'
0000000000012f02         db  0x0e ; '.'
0000000000012f03         db  0x18 ; '.'
0000000000012f04         db  0x41 ; 'A'
0000000000012f05         db  0x0e ; '.'
0000000000012f06         db  0x10 ; '.'
0000000000012f07         db  0x42 ; 'B'
0000000000012f08         db  0x0e ; '.'
0000000000012f09         db  0x08 ; '.'
0000000000012f0a         db  0x44 ; 'D'
0000000000012f0b         db  0x0b ; '.'
0000000000012f0c         db  0x60 ; '`'
0000000000012f0d         db  0x0a ; '.'
0000000000012f0e         db  0x0e ; '.'
0000000000012f0f         db  0x18 ; '.'
0000000000012f10         db  0x41 ; 'A'
0000000000012f11         db  0x0e ; '.'
0000000000012f12         db  0x10 ; '.'
0000000000012f13         db  0x42 ; 'B'
0000000000012f14         db  0x0e ; '.'
0000000000012f15         db  0x08 ; '.'
0000000000012f16         db  0x45 ; 'E'
0000000000012f17         db  0x0b ; '.'
0000000000012f18         dd         0x0000001c                                  ; Length of the record
0000000000012f1c         dd         0x00001af4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012f20         db         0xe0, 0x9c, 2 dup (0xff)                    ; begin 0xcc00
0000000000012f24         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0xcc40)
0000000000012f28         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012f29         db  0x44 ; 'D'
0000000000012f2a         db  0x0e ; '.'
0000000000012f2b         db  0x10 ; '.'
0000000000012f2c         db  0x83 ; '.'
0000000000012f2d         db  0x02 ; '.'
0000000000012f2e         db  0x5a ; 'Z'
0000000000012f2f         db  0x0a ; '.'
0000000000012f30         db  0x0e ; '.'
0000000000012f31         db  0x08 ; '.'
0000000000012f32         db  0x4a ; 'J'
0000000000012f33         db  0x0b ; '.'
0000000000012f34         db  0x53 ; 'S'
0000000000012f35         db  0x0e ; '.'
0000000000012f36         db  0x08 ; '.'
0000000000012f37         db  0x00 ; '.'
0000000000012f38         dd         0x0000002c                                  ; Length of the record
0000000000012f3c         dd         0x00001b14                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012f40         db         0x00, 0x9d, 2 dup (0xff)                    ; begin 0xcc40
0000000000012f44         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xcc97)
0000000000012f48         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012f49         db  0x63 ; 'c'
0000000000012f4a         db  0x0e ; '.'
0000000000012f4b         db  0x10 ; '.'
0000000000012f4c         db  0x8c ; '.'
0000000000012f4d         db  0x02 ; '.'
0000000000012f4e         db  0x41 ; 'A'
0000000000012f4f         db  0x0e ; '.'
0000000000012f50         db  0x18 ; '.'
0000000000012f51         db  0x86 ; '.'
0000000000012f52         db  0x03 ; '.'
0000000000012f53         db  0x44 ; 'D'
0000000000012f54         db  0x0e ; '.'
0000000000012f55         db  0x20 ; ' '
0000000000012f56         db  0x83 ; '.'
0000000000012f57         db  0x04 ; '.'
0000000000012f58         db  0x6b ; 'k'
0000000000012f59         db  0x0e ; '.'
0000000000012f5a         db  0x18 ; '.'
0000000000012f5b         db  0x41 ; 'A'
0000000000012f5c         db  0x0e ; '.'
0000000000012f5d         db  0x10 ; '.'
0000000000012f5e         db  0x42 ; 'B'
0000000000012f5f         db  0x0e ; '.'
0000000000012f60         db  0x08 ; '.'
0000000000012f61         db  0x00 ; '.'
0000000000012f62         db  0x00 ; '.'
0000000000012f63         db  0x00 ; '.'
0000000000012f64         db  0x00 ; '.'
0000000000012f65         db  0x00 ; '.'
0000000000012f66         db  0x00 ; '.'
0000000000012f67         db  0x00 ; '.'
0000000000012f68         dd         0x0000002c                                  ; Length of the record
0000000000012f6c         dd         0x00001b44                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012f70         db         0x30, 0x9d, 2 dup (0xff)                    ; begin 0xcca0
0000000000012f74         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0xddbf)
0000000000012f78         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012f79         db  0x41 ; 'A'
0000000000012f7a         db  0x0e ; '.'
0000000000012f7b         db  0x10 ; '.'
0000000000012f7c         db  0x86 ; '.'
0000000000012f7d         db  0x02 ; '.'
0000000000012f7e         db  0x43 ; 'C'
0000000000012f7f         db  0x0d ; '.'
0000000000012f80         db  0x06 ; '.'
0000000000012f81         db  0x48 ; 'H'
0000000000012f82         db  0x8f ; '.'
0000000000012f83         db  0x03 ; '.'
0000000000012f84         db  0x8e ; '.'
0000000000012f85         db  0x04 ; '.'
0000000000012f86         db  0x8d ; '.'
0000000000012f87         db  0x05 ; '.'
0000000000012f88         db  0x8c ; '.'
0000000000012f89         db  0x06 ; '.'
0000000000012f8a         db  0x48 ; 'H'
0000000000012f8b         db  0x83 ; '.'
0000000000012f8c         db  0x07 ; '.'
0000000000012f8d         db  0x03 ; '.'
0000000000012f8e         db  0xef ; '.'
0000000000012f8f         db  0x01 ; '.'
0000000000012f90         db  0x0a ; '.'
0000000000012f91         db  0x0c ; '.'
0000000000012f92         db  0x07 ; '.'
0000000000012f93         db  0x08 ; '.'
0000000000012f94         db  0x45 ; 'E'
0000000000012f95         db  0x0b ; '.'
0000000000012f96         db  0x00 ; '.'
0000000000012f97         db  0x00 ; '.'
0000000000012f98         dd         0x00000014                                  ; Length of the record
0000000000012f9c         dd         0x00001b74                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012fa0         db         0x20, 0xae, 2 dup (0xff)                    ; begin 0xddc0
0000000000012fa4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xddce)
0000000000012fa8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012fa9         align      16
0000000000012fb0         dd         0x00000034                                  ; Length of the record
0000000000012fb4         dd         0x00001b8c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012fb8         db         0x18, 0xae, 2 dup (0xff)                    ; begin 0xddd0
0000000000012fbc         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0xe04e)
0000000000012fc0         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012fc1         db  0x42 ; 'B'
0000000000012fc2         db  0x0e ; '.'
0000000000012fc3         db  0x10 ; '.'
0000000000012fc4         db  0x8c ; '.'
0000000000012fc5         db  0x02 ; '.'
0000000000012fc6         db  0x41 ; 'A'
0000000000012fc7         db  0x0e ; '.'
0000000000012fc8         db  0x18 ; '.'
0000000000012fc9         db  0x86 ; '.'
0000000000012fca         db  0x03 ; '.'
0000000000012fcb         db  0x43 ; 'C'
0000000000012fcc         db  0x0e ; '.'
0000000000012fcd         db  0x20 ; ' '
0000000000012fce         db  0x83 ; '.'
0000000000012fcf         db  0x04 ; '.'
0000000000012fd0         db  0x44 ; 'D'
0000000000012fd1         db  0x0e ; '.'
0000000000012fd2         db  0x70 ; 'p'
0000000000012fd3         db  0x02 ; '.'
0000000000012fd4         db  0xf0 ; '.'
0000000000012fd5         db  0x0a ; '.'
0000000000012fd6         db  0x0e ; '.'
0000000000012fd7         db  0x20 ; ' '
0000000000012fd8         db  0x41 ; 'A'
0000000000012fd9         db  0x0e ; '.'
0000000000012fda         db  0x18 ; '.'
0000000000012fdb         db  0x41 ; 'A'
0000000000012fdc         db  0x0e ; '.'
0000000000012fdd         db  0x10 ; '.'
0000000000012fde         db  0x42 ; 'B'
0000000000012fdf         db  0x0e ; '.'
0000000000012fe0         db  0x08 ; '.'
0000000000012fe1         db  0x42 ; 'B'
0000000000012fe2         db  0x0b ; '.'
0000000000012fe3         db  0x00 ; '.'
0000000000012fe4         db  0x00 ; '.'
0000000000012fe5         db  0x00 ; '.'
0000000000012fe6         db  0x00 ; '.'
0000000000012fe7         db  0x00 ; '.'
0000000000012fe8         dd         0x00000014                                  ; Length of the record
0000000000012fec         dd         0x00001bc4                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000012ff0         db         0x60, 0xb0, 2 dup (0xff)                    ; begin 0xe050
0000000000012ff4         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0xe24e)
0000000000012ff8         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000012ff9         align      4096
0000000000013000         dd         0x0000004c                                  ; Length of the record
0000000000013004         dd         0x00001bdc                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000013008         db         0x48, 0xb2, 2 dup (0xff)                    ; begin 0xe250
000000000001300c         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0xef3c)
0000000000013010         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000013011         db  0x42 ; 'B'
0000000000013012         db  0x0e ; '.'
0000000000013013         db  0x10 ; '.'
0000000000013014         db  0x8f ; '.'
0000000000013015         db  0x02 ; '.'
0000000000013016         db  0x42 ; 'B'
0000000000013017         db  0x0e ; '.'
0000000000013018         db  0x18 ; '.'
0000000000013019         db  0x8e ; '.'
000000000001301a         db  0x03 ; '.'
000000000001301b         db  0x46 ; 'F'
000000000001301c         db  0x0e ; '.'
000000000001301d         db  0x20 ; ' '
000000000001301e         db  0x8d ; '.'
000000000001301f         db  0x04 ; '.'
0000000000013020         db  0x42 ; 'B'
0000000000013021         db  0x0e ; '.'
0000000000013022         db  0x28 ; '('
0000000000013023         db  0x8c ; '.'
0000000000013024         db  0x05 ; '.'
0000000000013025         db  0x45 ; 'E'
0000000000013026         db  0x0e ; '.'
0000000000013027         db  0x30 ; '0'
0000000000013028         db  0x86 ; '.'
0000000000013029         db  0x06 ; '.'
000000000001302a         db  0x41 ; 'A'
000000000001302b         db  0x0e ; '.'
000000000001302c         db  0x38 ; '8'
000000000001302d         db  0x83 ; '.'
000000000001302e         db  0x07 ; '.'
000000000001302f         db  0x52 ; 'R'
0000000000013030         db  0x0e ; '.'
0000000000013031         db  0x90 ; '.'
0000000000013032         db  0x01 ; '.'
0000000000013033         db  0x02 ; '.'
0000000000013034         db  0x82 ; '.'
0000000000013035         db  0x0a ; '.'
0000000000013036         db  0x0e ; '.'
0000000000013037         db  0x38 ; '8'
0000000000013038         db  0x41 ; 'A'
0000000000013039         db  0x0e ; '.'
000000000001303a         db  0x30 ; '0'
000000000001303b         db  0x41 ; 'A'
000000000001303c         db  0x0e ; '.'
000000000001303d         db  0x28 ; '('
000000000001303e         db  0x42 ; 'B'
000000000001303f         db  0x0e ; '.'
0000000000013040         db  0x20 ; ' '
0000000000013041         db  0x42 ; 'B'
0000000000013042         db  0x0e ; '.'
0000000000013043         db  0x18 ; '.'
0000000000013044         db  0x42 ; 'B'
0000000000013045         db  0x0e ; '.'
0000000000013046         db  0x10 ; '.'
0000000000013047         db  0x42 ; 'B'
0000000000013048         db  0x0e ; '.'
0000000000013049         db  0x08 ; '.'
000000000001304a         db  0x48 ; 'H'
000000000001304b         db  0x0b ; '.'
000000000001304c         db  0x00 ; '.'
000000000001304d         db  0x00 ; '.'
000000000001304e         db  0x00 ; '.'
000000000001304f         db  0x00 ; '.'
0000000000013050         dd         0x00000044                                  ; Length of the record
0000000000013054         dd         0x00001c2c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
0000000000013058         db         0xe8, 0xbe, 2 dup (0xff)                    ; begin 0xef40
000000000001305c         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xefa5)
0000000000013060         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000013061         db  0x42 ; 'B'
0000000000013062         db  0x0e ; '.'
0000000000013063         db  0x10 ; '.'
0000000000013064         db  0x8f ; '.'
0000000000013065         db  0x02 ; '.'
0000000000013066         db  0x42 ; 'B'
0000000000013067         db  0x0e ; '.'
0000000000013068         db  0x18 ; '.'
0000000000013069         db  0x8e ; '.'
000000000001306a         db  0x03 ; '.'
000000000001306b         db  0x45 ; 'E'
000000000001306c         db  0x0e ; '.'
000000000001306d         db  0x20 ; ' '
000000000001306e         db  0x8d ; '.'
000000000001306f         db  0x04 ; '.'
0000000000013070         db  0x42 ; 'B'
0000000000013071         db  0x0e ; '.'
0000000000013072         db  0x28 ; '('
0000000000013073         db  0x8c ; '.'
0000000000013074         db  0x05 ; '.'
0000000000013075         db  0x48 ; 'H'
0000000000013076         db  0x0e ; '.'
0000000000013077         db  0x30 ; '0'
0000000000013078         db  0x86 ; '.'
0000000000013079         db  0x06 ; '.'
000000000001307a         db  0x48 ; 'H'
000000000001307b         db  0x0e ; '.'
000000000001307c         db  0x38 ; '8'
000000000001307d         db  0x83 ; '.'
000000000001307e         db  0x07 ; '.'
000000000001307f         db  0x4d ; 'M'
0000000000013080         db  0x0e ; '.'
0000000000013081         db  0x40 ; '@'
0000000000013082         db  0x72 ; 'r'
0000000000013083         db  0x0e ; '.'
0000000000013084         db  0x38 ; '8'
0000000000013085         db  0x41 ; 'A'
0000000000013086         db  0x0e ; '.'
0000000000013087         db  0x30 ; '0'
0000000000013088         db  0x41 ; 'A'
0000000000013089         db  0x0e ; '.'
000000000001308a         db  0x28 ; '('
000000000001308b         db  0x42 ; 'B'
000000000001308c         db  0x0e ; '.'
000000000001308d         db  0x20 ; ' '
000000000001308e         db  0x42 ; 'B'
000000000001308f         db  0x0e ; '.'
0000000000013090         db  0x18 ; '.'
0000000000013091         db  0x42 ; 'B'
0000000000013092         db  0x0e ; '.'
0000000000013093         db  0x10 ; '.'
0000000000013094         db  0x42 ; 'B'
0000000000013095         db  0x0e ; '.'
0000000000013096         db  0x08 ; '.'
0000000000013097         db  0x00 ; '.'
0000000000013098         dd         0x00000014                                  ; Length of the record
000000000001309c         dd         0x00001c74                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000130a0         db         0x10, 0xbf, 2 dup (0xff)                    ; begin 0xefb0
00000000000130a4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xefb2)
00000000000130a8         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000130a9         align      16
00000000000130b0         dd         0x00000010                                  ; Length of the record
00000000000130b4         dd         0x00001c8c                                  ; FDE: parent CIE at 0x11428 (FDE encoding = 0x1B)
00000000000130b8         db         0x08, 0xbf, 2 dup (0xff)                    ; begin 0xefc0
00000000000130bc         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xefce)
00000000000130c0         db         0x00                                        ; Augmentation length (LEB128=0)
00000000000130c1         align      8


        ; Segment Segment 3
        ; Range: [0x213870; 0x214580[ (3344 bytes)
        ; File offset : [79984; 82672[ (2688 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x213870; 0x213878[ (8 bytes)
        ; File offset : [79984; 79992[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
0000000000213870         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x213878; 0x213880[ (8 bytes)
        ; File offset : [79992; 80000[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
0000000000213878         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x213880; 0x213b18[ (664 bytes)
        ; File offset : [80000; 80664[ (664 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
0000000000213880         db  0x08 ; '.'                                         ; DATA XREF=main+13, main+562
0000000000213881         db  0xf2 ; '.'
0000000000213882         db  0x00 ; '.'
0000000000213883         db  0x00 ; '.'
0000000000213884         db  0x00 ; '.'
0000000000213885         db  0x00 ; '.'
0000000000213886         db  0x00 ; '.'
0000000000213887         db  0x00 ; '.'
0000000000213888         db  0x00 ; '.'
0000000000213889         db  0x00 ; '.'
000000000021388a         db  0x00 ; '.'
000000000021388b         db  0x00 ; '.'
000000000021388c         db  0x00 ; '.'
000000000021388d         db  0x00 ; '.'
000000000021388e         db  0x00 ; '.'
000000000021388f         db  0x00 ; '.'
0000000000213890         db  0x00 ; '.'
0000000000213891         db  0x00 ; '.'
0000000000213892         db  0x00 ; '.'
0000000000213893         db  0x00 ; '.'
0000000000213894         db  0x00 ; '.'
0000000000213895         db  0x00 ; '.'
0000000000213896         db  0x00 ; '.'
0000000000213897         db  0x00 ; '.'
0000000000213898         db  0x61 ; 'a'
0000000000213899         db  0x00 ; '.'
000000000021389a         db  0x00 ; '.'
000000000021389b         db  0x00 ; '.'
000000000021389c         db  0x00 ; '.'
000000000021389d         db  0x00 ; '.'
000000000021389e         db  0x00 ; '.'
000000000021389f         db  0x00 ; '.'
00000000002138a0         db  0x0c ; '.'
00000000002138a1         db  0xf2 ; '.'
00000000002138a2         db  0x00 ; '.'
00000000002138a3         db  0x00 ; '.'
00000000002138a4         db  0x00 ; '.'
00000000002138a5         db  0x00 ; '.'
00000000002138a6         db  0x00 ; '.'
00000000002138a7         db  0x00 ; '.'
00000000002138a8         db  0x01 ; '.'
00000000002138a9         db  0x00 ; '.'
00000000002138aa         db  0x00 ; '.'
00000000002138ab         db  0x00 ; '.'
00000000002138ac         db  0x00 ; '.'
00000000002138ad         db  0x00 ; '.'
00000000002138ae         db  0x00 ; '.'
00000000002138af         db  0x00 ; '.'
00000000002138b0         db  0x00 ; '.'
00000000002138b1         db  0x00 ; '.'
00000000002138b2         db  0x00 ; '.'
00000000002138b3         db  0x00 ; '.'
00000000002138b4         db  0x00 ; '.'
00000000002138b5         db  0x00 ; '.'
00000000002138b6         db  0x00 ; '.'
00000000002138b7         db  0x00 ; '.'
00000000002138b8         db  0x42 ; 'B'
00000000002138b9         db  0x00 ; '.'
00000000002138ba         db  0x00 ; '.'
00000000002138bb         db  0x00 ; '.'
00000000002138bc         db  0x00 ; '.'
00000000002138bd         db  0x00 ; '.'
00000000002138be         db  0x00 ; '.'
00000000002138bf         db  0x00 ; '.'
00000000002138c0         db  0x17 ; '.'
00000000002138c1         db  0xf2 ; '.'
00000000002138c2         db  0x00 ; '.'
00000000002138c3         db  0x00 ; '.'
00000000002138c4         db  0x00 ; '.'
00000000002138c5         db  0x00 ; '.'
00000000002138c6         db  0x00 ; '.'
00000000002138c7         db  0x00 ; '.'
00000000002138c8         db  0x00 ; '.'
00000000002138c9         db  0x00 ; '.'
00000000002138ca         db  0x00 ; '.'
00000000002138cb         db  0x00 ; '.'
00000000002138cc         db  0x00 ; '.'
00000000002138cd         db  0x00 ; '.'
00000000002138ce         db  0x00 ; '.'
00000000002138cf         db  0x00 ; '.'
00000000002138d0         db  0x00 ; '.'
00000000002138d1         db  0x00 ; '.'
00000000002138d2         db  0x00 ; '.'
00000000002138d3         db  0x00 ; '.'
00000000002138d4         db  0x00 ; '.'
00000000002138d5         db  0x00 ; '.'
00000000002138d6         db  0x00 ; '.'
00000000002138d7         db  0x00 ; '.'
00000000002138d8         db  0x69 ; 'i'
00000000002138d9         db  0x00 ; '.'
00000000002138da         db  0x00 ; '.'
00000000002138db         db  0x00 ; '.'
00000000002138dc         db  0x00 ; '.'
00000000002138dd         db  0x00 ; '.'
00000000002138de         db  0x00 ; '.'
00000000002138df         db  0x00 ; '.'
00000000002138e0         db  0x1e ; '.'
00000000002138e1         db  0xf2 ; '.'
00000000002138e2         db  0x00 ; '.'
00000000002138e3         db  0x00 ; '.'
00000000002138e4         db  0x00 ; '.'
00000000002138e5         db  0x00 ; '.'
00000000002138e6         db  0x00 ; '.'
00000000002138e7         db  0x00 ; '.'
00000000002138e8         db  0x00 ; '.'
00000000002138e9         db  0x00 ; '.'
00000000002138ea         db  0x00 ; '.'
00000000002138eb         db  0x00 ; '.'
00000000002138ec         db  0x00 ; '.'
00000000002138ed         db  0x00 ; '.'
00000000002138ee         db  0x00 ; '.'
00000000002138ef         db  0x00 ; '.'
00000000002138f0         db  0x00 ; '.'
00000000002138f1         db  0x00 ; '.'
00000000002138f2         db  0x00 ; '.'
00000000002138f3         db  0x00 ; '.'
00000000002138f4         db  0x00 ; '.'
00000000002138f5         db  0x00 ; '.'
00000000002138f6         db  0x00 ; '.'
00000000002138f7         db  0x00 ; '.'
00000000002138f8         db  0x68 ; 'h'
00000000002138f9         db  0x00 ; '.'
00000000002138fa         db  0x00 ; '.'
00000000002138fb         db  0x00 ; '.'
00000000002138fc         db  0x00 ; '.'
00000000002138fd         db  0x00 ; '.'
00000000002138fe         db  0x00 ; '.'
00000000002138ff         db  0x00 ; '.'
0000000000213900         db  0x2d ; '-'
0000000000213901         db  0xf2 ; '.'
0000000000213902         db  0x00 ; '.'
0000000000213903         db  0x00 ; '.'
0000000000213904         db  0x00 ; '.'
0000000000213905         db  0x00 ; '.'
0000000000213906         db  0x00 ; '.'
0000000000213907         db  0x00 ; '.'
0000000000213908         db  0x00 ; '.'
0000000000213909         db  0x00 ; '.'
000000000021390a         db  0x00 ; '.'
000000000021390b         db  0x00 ; '.'
000000000021390c         db  0x00 ; '.'
000000000021390d         db  0x00 ; '.'
000000000021390e         db  0x00 ; '.'
000000000021390f         db  0x00 ; '.'
0000000000213910         db  0x00 ; '.'
0000000000213911         db  0x00 ; '.'
0000000000213912         db  0x00 ; '.'
0000000000213913         db  0x00 ; '.'
0000000000213914         db  0x00 ; '.'
0000000000213915         db  0x00 ; '.'
0000000000213916         db  0x00 ; '.'
0000000000213917         db  0x00 ; '.'
0000000000213918         db  0x48 ; 'H'
0000000000213919         db  0x00 ; '.'
000000000021391a         db  0x00 ; '.'
000000000021391b         db  0x00 ; '.'
000000000021391c         db  0x00 ; '.'
000000000021391d         db  0x00 ; '.'
000000000021391e         db  0x00 ; '.'
000000000021391f         db  0x00 ; '.'
0000000000213920         db  0x30 ; '0'
0000000000213921         db  0xf2 ; '.'
0000000000213922         db  0x00 ; '.'
0000000000213923         db  0x00 ; '.'
0000000000213924         db  0x00 ; '.'
0000000000213925         db  0x00 ; '.'
0000000000213926         db  0x00 ; '.'
0000000000213927         db  0x00 ; '.'
0000000000213928         db  0x00 ; '.'
0000000000213929         db  0x00 ; '.'
000000000021392a         db  0x00 ; '.'
000000000021392b         db  0x00 ; '.'
000000000021392c         db  0x00 ; '.'
000000000021392d         db  0x00 ; '.'
000000000021392e         db  0x00 ; '.'
000000000021392f         db  0x00 ; '.'
0000000000213930         db  0x00 ; '.'
0000000000213931         db  0x00 ; '.'
0000000000213932         db  0x00 ; '.'
0000000000213933         db  0x00 ; '.'
0000000000213934         db  0x00 ; '.'
0000000000213935         db  0x00 ; '.'
0000000000213936         db  0x00 ; '.'
0000000000213937         db  0x00 ; '.'
0000000000213938         db  0x6c ; 'l'
0000000000213939         db  0x00 ; '.'
000000000021393a         db  0x00 ; '.'
000000000021393b         db  0x00 ; '.'
000000000021393c         db  0x00 ; '.'
000000000021393d         db  0x00 ; '.'
000000000021393e         db  0x00 ; '.'
000000000021393f         db  0x00 ; '.'
0000000000213940         db  0x5e ; '^'
0000000000213941         db  0xf1 ; '.'
0000000000213942         db  0x00 ; '.'
0000000000213943         db  0x00 ; '.'
0000000000213944         db  0x00 ; '.'
0000000000213945         db  0x00 ; '.'
0000000000213946         db  0x00 ; '.'
0000000000213947         db  0x00 ; '.'
0000000000213948         db  0x02 ; '.'
0000000000213949         db  0x00 ; '.'
000000000021394a         db  0x00 ; '.'
000000000021394b         db  0x00 ; '.'
000000000021394c         db  0x00 ; '.'
000000000021394d         db  0x00 ; '.'
000000000021394e         db  0x00 ; '.'
000000000021394f         db  0x00 ; '.'
0000000000213950         db  0x00 ; '.'
0000000000213951         db  0x00 ; '.'
0000000000213952         db  0x00 ; '.'
0000000000213953         db  0x00 ; '.'
0000000000213954         db  0x00 ; '.'
0000000000213955         db  0x00 ; '.'
0000000000213956         db  0x00 ; '.'
0000000000213957         db  0x00 ; '.'
0000000000213958         db  0x83 ; '.'
0000000000213959         db  0x00 ; '.'
000000000021395a         db  0x00 ; '.'
000000000021395b         db  0x00 ; '.'
000000000021395c         db  0x00 ; '.'
000000000021395d         db  0x00 ; '.'
000000000021395e         db  0x00 ; '.'
000000000021395f         db  0x00 ; '.'
0000000000213960         db  0x36 ; '6'
0000000000213961         db  0xf2 ; '.'
0000000000213962         db  0x00 ; '.'
0000000000213963         db  0x00 ; '.'
0000000000213964         db  0x00 ; '.'
0000000000213965         db  0x00 ; '.'
0000000000213966         db  0x00 ; '.'
0000000000213967         db  0x00 ; '.'
0000000000213968         db  0x00 ; '.'
0000000000213969         db  0x00 ; '.'
000000000021396a         db  0x00 ; '.'
000000000021396b         db  0x00 ; '.'
000000000021396c         db  0x00 ; '.'
000000000021396d         db  0x00 ; '.'
000000000021396e         db  0x00 ; '.'
000000000021396f         db  0x00 ; '.'
0000000000213970         db  0x00 ; '.'
0000000000213971         db  0x00 ; '.'
0000000000213972         db  0x00 ; '.'
0000000000213973         db  0x00 ; '.'
0000000000213974         db  0x00 ; '.'
0000000000213975         db  0x00 ; '.'
0000000000213976         db  0x00 ; '.'
0000000000213977         db  0x00 ; '.'
0000000000213978         db  0x50 ; 'P'
0000000000213979         db  0x00 ; '.'
000000000021397a         db  0x00 ; '.'
000000000021397b         db  0x00 ; '.'
000000000021397c         db  0x00 ; '.'
000000000021397d         db  0x00 ; '.'
000000000021397e         db  0x00 ; '.'
000000000021397f         db  0x00 ; '.'
0000000000213980         db  0x42 ; 'B'
0000000000213981         db  0xf2 ; '.'
0000000000213982         db  0x00 ; '.'
0000000000213983         db  0x00 ; '.'
0000000000213984         db  0x00 ; '.'
0000000000213985         db  0x00 ; '.'
0000000000213986         db  0x00 ; '.'
0000000000213987         db  0x00 ; '.'
0000000000213988         db  0x00 ; '.'
0000000000213989         db  0x00 ; '.'
000000000021398a         db  0x00 ; '.'
000000000021398b         db  0x00 ; '.'
000000000021398c         db  0x00 ; '.'
000000000021398d         db  0x00 ; '.'
000000000021398e         db  0x00 ; '.'
000000000021398f         db  0x00 ; '.'
0000000000213990         db  0x00 ; '.'
0000000000213991         db  0x00 ; '.'
0000000000213992         db  0x00 ; '.'
0000000000213993         db  0x00 ; '.'
0000000000213994         db  0x00 ; '.'
0000000000213995         db  0x00 ; '.'
0000000000213996         db  0x00 ; '.'
0000000000213997         db  0x00 ; '.'
0000000000213998         db  0x54 ; 'T'
0000000000213999         db  0x00 ; '.'
000000000021399a         db  0x00 ; '.'
000000000021399b         db  0x00 ; '.'
000000000021399c         db  0x00 ; '.'
000000000021399d         db  0x00 ; '.'
000000000021399e         db  0x00 ; '.'
000000000021399f         db  0x00 ; '.'
00000000002139a0         db  0x50 ; 'P'
00000000002139a1         db  0xf2 ; '.'
00000000002139a2         db  0x00 ; '.'
00000000002139a3         db  0x00 ; '.'
00000000002139a4         db  0x00 ; '.'
00000000002139a5         db  0x00 ; '.'
00000000002139a6         db  0x00 ; '.'
00000000002139a7         db  0x00 ; '.'
00000000002139a8         db  0x00 ; '.'
00000000002139a9         db  0x00 ; '.'
00000000002139aa         db  0x00 ; '.'
00000000002139ab         db  0x00 ; '.'
00000000002139ac         db  0x00 ; '.'
00000000002139ad         db  0x00 ; '.'
00000000002139ae         db  0x00 ; '.'
00000000002139af         db  0x00 ; '.'
00000000002139b0         db  0x00 ; '.'
00000000002139b1         db  0x00 ; '.'
00000000002139b2         db  0x00 ; '.'
00000000002139b3         db  0x00 ; '.'
00000000002139b4         db  0x00 ; '.'
00000000002139b5         db  0x00 ; '.'
00000000002139b6         db  0x00 ; '.'
00000000002139b7         db  0x00 ; '.'
00000000002139b8         db  0x81 ; '.'
00000000002139b9         db  0x00 ; '.'
00000000002139ba         db  0x00 ; '.'
00000000002139bb         db  0x00 ; '.'
00000000002139bc         db  0x00 ; '.'
00000000002139bd         db  0x00 ; '.'
00000000002139be         db  0x00 ; '.'
00000000002139bf         db  0x00 ; '.'
00000000002139c0         db  0x4d ; 'M'
00000000002139c1         db  0xf2 ; '.'
00000000002139c2         db  0x00 ; '.'
00000000002139c3         db  0x00 ; '.'
00000000002139c4         db  0x00 ; '.'
00000000002139c5         db  0x00 ; '.'
00000000002139c6         db  0x00 ; '.'
00000000002139c7         db  0x00 ; '.'
00000000002139c8         db  0x00 ; '.'
00000000002139c9         db  0x00 ; '.'
00000000002139ca         db  0x00 ; '.'
00000000002139cb         db  0x00 ; '.'
00000000002139cc         db  0x00 ; '.'
00000000002139cd         db  0x00 ; '.'
00000000002139ce         db  0x00 ; '.'
00000000002139cf         db  0x00 ; '.'
00000000002139d0         db  0x00 ; '.'
00000000002139d1         db  0x00 ; '.'
00000000002139d2         db  0x00 ; '.'
00000000002139d3         db  0x00 ; '.'
00000000002139d4         db  0x00 ; '.'
00000000002139d5         db  0x00 ; '.'
00000000002139d6         db  0x00 ; '.'
00000000002139d7         db  0x00 ; '.'
00000000002139d8         db  0x80 ; '.'
00000000002139d9         db  0x00 ; '.'
00000000002139da         db  0x00 ; '.'
00000000002139db         db  0x00 ; '.'
00000000002139dc         db  0x00 ; '.'
00000000002139dd         db  0x00 ; '.'
00000000002139de         db  0x00 ; '.'
00000000002139df         db  0x00 ; '.'
00000000002139e0         db  0x98 ; '.'
00000000002139e1         db  0xf2 ; '.'
00000000002139e2         db  0x00 ; '.'
00000000002139e3         db  0x00 ; '.'
00000000002139e4         db  0x00 ; '.'
00000000002139e5         db  0x00 ; '.'
00000000002139e6         db  0x00 ; '.'
00000000002139e7         db  0x00 ; '.'
00000000002139e8         db  0x00 ; '.'
00000000002139e9         db  0x00 ; '.'
00000000002139ea         db  0x00 ; '.'
00000000002139eb         db  0x00 ; '.'
00000000002139ec         db  0x00 ; '.'
00000000002139ed         db  0x00 ; '.'
00000000002139ee         db  0x00 ; '.'
00000000002139ef         db  0x00 ; '.'
00000000002139f0         db  0x00 ; '.'
00000000002139f1         db  0x00 ; '.'
00000000002139f2         db  0x00 ; '.'
00000000002139f3         db  0x00 ; '.'
00000000002139f4         db  0x00 ; '.'
00000000002139f5         db  0x00 ; '.'
00000000002139f6         db  0x00 ; '.'
00000000002139f7         db  0x00 ; '.'
00000000002139f8         db  0x82 ; '.'
00000000002139f9         db  0x00 ; '.'
00000000002139fa         db  0x00 ; '.'
00000000002139fb         db  0x00 ; '.'
00000000002139fc         db  0x00 ; '.'
00000000002139fd         db  0x00 ; '.'
00000000002139fe         db  0x00 ; '.'
00000000002139ff         db  0x00 ; '.'
0000000000213a00         db  0x5d ; ']'
0000000000213a01         db  0xf2 ; '.'
0000000000213a02         db  0x00 ; '.'
0000000000213a03         db  0x00 ; '.'
0000000000213a04         db  0x00 ; '.'
0000000000213a05         db  0x00 ; '.'
0000000000213a06         db  0x00 ; '.'
0000000000213a07         db  0x00 ; '.'
0000000000213a08         db  0x01 ; '.'
0000000000213a09         db  0x00 ; '.'
0000000000213a0a         db  0x00 ; '.'
0000000000213a0b         db  0x00 ; '.'
0000000000213a0c         db  0x00 ; '.'
0000000000213a0d         db  0x00 ; '.'
0000000000213a0e         db  0x00 ; '.'
0000000000213a0f         db  0x00 ; '.'
0000000000213a10         db  0x00 ; '.'
0000000000213a11         db  0x00 ; '.'
0000000000213a12         db  0x00 ; '.'
0000000000213a13         db  0x00 ; '.'
0000000000213a14         db  0x00 ; '.'
0000000000213a15         db  0x00 ; '.'
0000000000213a16         db  0x00 ; '.'
0000000000213a17         db  0x00 ; '.'
0000000000213a18         db  0x74 ; 't'
0000000000213a19         db  0x00 ; '.'
0000000000213a1a         db  0x00 ; '.'
0000000000213a1b         db  0x00 ; '.'
0000000000213a1c         db  0x00 ; '.'
0000000000213a1d         db  0x00 ; '.'
0000000000213a1e         db  0x00 ; '.'
0000000000213a1f         db  0x00 ; '.'
0000000000213a20         db  0x55 ; 'U'
0000000000213a21         db  0xf2 ; '.'
0000000000213a22         db  0x00 ; '.'
0000000000213a23         db  0x00 ; '.'
0000000000213a24         db  0x00 ; '.'
0000000000213a25         db  0x00 ; '.'
0000000000213a26         db  0x00 ; '.'
0000000000213a27         db  0x00 ; '.'
0000000000213a28         db  0x01 ; '.'
0000000000213a29         db  0x00 ; '.'
0000000000213a2a         db  0x00 ; '.'
0000000000213a2b         db  0x00 ; '.'
0000000000213a2c         db  0x00 ; '.'
0000000000213a2d         db  0x00 ; '.'
0000000000213a2e         db  0x00 ; '.'
0000000000213a2f         db  0x00 ; '.'
0000000000213a30         db  0x00 ; '.'
0000000000213a31         db  0x00 ; '.'
0000000000213a32         db  0x00 ; '.'
0000000000213a33         db  0x00 ; '.'
0000000000213a34         db  0x00 ; '.'
0000000000213a35         db  0x00 ; '.'
0000000000213a36         db  0x00 ; '.'
0000000000213a37         db  0x00 ; '.'
0000000000213a38         db  0x78 ; 'x'
0000000000213a39         db  0x00 ; '.'
0000000000213a3a         db  0x00 ; '.'
0000000000213a3b         db  0x00 ; '.'
0000000000213a3c         db  0x00 ; '.'
0000000000213a3d         db  0x00 ; '.'
0000000000213a3e         db  0x00 ; '.'
0000000000213a3f         db  0x00 ; '.'
0000000000213a40         db  0x62 ; 'b'
0000000000213a41         db  0xf2 ; '.'
0000000000213a42         db  0x00 ; '.'
0000000000213a43         db  0x00 ; '.'
0000000000213a44         db  0x00 ; '.'
0000000000213a45         db  0x00 ; '.'
0000000000213a46         db  0x00 ; '.'
0000000000213a47         db  0x00 ; '.'
0000000000213a48         db  0x00 ; '.'
0000000000213a49         db  0x00 ; '.'
0000000000213a4a         db  0x00 ; '.'
0000000000213a4b         db  0x00 ; '.'
0000000000213a4c         db  0x00 ; '.'
0000000000213a4d         db  0x00 ; '.'
0000000000213a4e         db  0x00 ; '.'
0000000000213a4f         db  0x00 ; '.'
0000000000213a50         db  0x00 ; '.'
0000000000213a51         db  0x00 ; '.'
0000000000213a52         db  0x00 ; '.'
0000000000213a53         db  0x00 ; '.'
0000000000213a54         db  0x00 ; '.'
0000000000213a55         db  0x00 ; '.'
0000000000213a56         db  0x00 ; '.'
0000000000213a57         db  0x00 ; '.'
0000000000213a58         db  0x7e ; '~'
0000000000213a59         db  0xff ; '.'
0000000000213a5a         db  0xff ; '.'
0000000000213a5b         db  0xff ; '.'
0000000000213a5c         db  0x00 ; '.'
0000000000213a5d         db  0x00 ; '.'
0000000000213a5e         db  0x00 ; '.'
0000000000213a5f         db  0x00 ; '.'
0000000000213a60         db  0x67 ; 'g'
0000000000213a61         db  0xf2 ; '.'
0000000000213a62         db  0x00 ; '.'
0000000000213a63         db  0x00 ; '.'
0000000000213a64         db  0x00 ; '.'
0000000000213a65         db  0x00 ; '.'
0000000000213a66         db  0x00 ; '.'
0000000000213a67         db  0x00 ; '.'
0000000000213a68         db  0x00 ; '.'
0000000000213a69         db  0x00 ; '.'
0000000000213a6a         db  0x00 ; '.'
0000000000213a6b         db  0x00 ; '.'
0000000000213a6c         db  0x00 ; '.'
0000000000213a6d         db  0x00 ; '.'
0000000000213a6e         db  0x00 ; '.'
0000000000213a6f         db  0x00 ; '.'
0000000000213a70         db  0x00 ; '.'
0000000000213a71         db  0x00 ; '.'
0000000000213a72         db  0x00 ; '.'
0000000000213a73         db  0x00 ; '.'
0000000000213a74         db  0x00 ; '.'
0000000000213a75         db  0x00 ; '.'
0000000000213a76         db  0x00 ; '.'
0000000000213a77         db  0x00 ; '.'
0000000000213a78         db  0x7d ; '}'
0000000000213a79         db  0xff ; '.'
0000000000213a7a         db  0xff ; '.'
0000000000213a7b         db  0xff ; '.'
0000000000213a7c         db  0x00 ; '.'
0000000000213a7d         db  0x00 ; '.'
0000000000213a7e         db  0x00 ; '.'
0000000000213a7f         db  0x00 ; '.'
0000000000213a80         db  0x00 ; '.'
0000000000213a81         db  0x00 ; '.'
0000000000213a82         db  0x00 ; '.'
0000000000213a83         db  0x00 ; '.'
0000000000213a84         db  0x00 ; '.'
0000000000213a85         db  0x00 ; '.'
0000000000213a86         db  0x00 ; '.'
0000000000213a87         db  0x00 ; '.'
0000000000213a88         db  0x00 ; '.'
0000000000213a89         db  0x00 ; '.'
0000000000213a8a         db  0x00 ; '.'
0000000000213a8b         db  0x00 ; '.'
0000000000213a8c         db  0x00 ; '.'
0000000000213a8d         db  0x00 ; '.'
0000000000213a8e         db  0x00 ; '.'
0000000000213a8f         db  0x00 ; '.'
0000000000213a90         db  0x00 ; '.'
0000000000213a91         db  0x00 ; '.'
0000000000213a92         db  0x00 ; '.'
0000000000213a93         db  0x00 ; '.'
0000000000213a94         db  0x00 ; '.'
0000000000213a95         db  0x00 ; '.'
0000000000213a96         db  0x00 ; '.'
0000000000213a97         db  0x00 ; '.'
0000000000213a98         db  0x00 ; '.'
0000000000213a99         db  0x00 ; '.'
0000000000213a9a         db  0x00 ; '.'
0000000000213a9b         db  0x00 ; '.'
0000000000213a9c         db  0x00 ; '.'
0000000000213a9d         db  0x00 ; '.'
0000000000213a9e         db  0x00 ; '.'
0000000000213a9f         db  0x00 ; '.'
                     block_size_args:
0000000000213aa0         db  0x1e ; '.'                                         ; DATA XREF=human_options+67
0000000000213aa1         db  0xf2 ; '.'
0000000000213aa2         db  0x00 ; '.'
0000000000213aa3         db  0x00 ; '.'
0000000000213aa4         db  0x00 ; '.'
0000000000213aa5         db  0x00 ; '.'
0000000000213aa6         db  0x00 ; '.'
0000000000213aa7         db  0x00 ; '.'
0000000000213aa8         db  0x2d ; '-'
0000000000213aa9         db  0xf2 ; '.'
0000000000213aaa         db  0x00 ; '.'
0000000000213aab         db  0x00 ; '.'
0000000000213aac         db  0x00 ; '.'
0000000000213aad         db  0x00 ; '.'
0000000000213aae         db  0x00 ; '.'
0000000000213aaf         db  0x00 ; '.'
0000000000213ab0         db  0x00 ; '.'
0000000000213ab1         db  0x00 ; '.'
0000000000213ab2         db  0x00 ; '.'
0000000000213ab3         db  0x00 ; '.'
0000000000213ab4         db  0x00 ; '.'
0000000000213ab5         db  0x00 ; '.'
0000000000213ab6         db  0x00 ; '.'
0000000000213ab7         db  0x00 ; '.'
0000000000213ab8         db  0x00 ; '.'
0000000000213ab9         db  0x00 ; '.'
0000000000213aba         db  0x00 ; '.'
0000000000213abb         db  0x00 ; '.'
0000000000213abc         db  0x00 ; '.'
0000000000213abd         db  0x00 ; '.'
0000000000213abe         db  0x00 ; '.'
0000000000213abf         db  0x00 ; '.'
                     quoting_style_args:
0000000000213ac0         db  0xe5 ; '.'
0000000000213ac1         db  0x00 ; '.'
0000000000213ac2         db  0x01 ; '.'
0000000000213ac3         db  0x00 ; '.'
0000000000213ac4         db  0x00 ; '.'
0000000000213ac5         db  0x00 ; '.'
0000000000213ac6         db  0x00 ; '.'
0000000000213ac7         db  0x00 ; '.'
0000000000213ac8         db  0xed ; '.'
0000000000213ac9         db  0x00 ; '.'
0000000000213aca         db  0x01 ; '.'
0000000000213acb         db  0x00 ; '.'
0000000000213acc         db  0x00 ; '.'
0000000000213acd         db  0x00 ; '.'
0000000000213ace         db  0x00 ; '.'
0000000000213acf         db  0x00 ; '.'
0000000000213ad0         db  0xf3 ; '.'
0000000000213ad1         db  0x00 ; '.'
0000000000213ad2         db  0x01 ; '.'
0000000000213ad3         db  0x00 ; '.'
0000000000213ad4         db  0x00 ; '.'
0000000000213ad5         db  0x00 ; '.'
0000000000213ad6         db  0x00 ; '.'
0000000000213ad7         db  0x00 ; '.'
0000000000213ad8         db  0x00 ; '.'
0000000000213ad9         db  0x01 ; '.'
0000000000213ada         db  0x01 ; '.'
0000000000213adb         db  0x00 ; '.'
0000000000213adc         db  0x00 ; '.'
0000000000213add         db  0x00 ; '.'
0000000000213ade         db  0x00 ; '.'
0000000000213adf         db  0x00 ; '.'
0000000000213ae0         db  0x0d ; '.'
0000000000213ae1         db  0x01 ; '.'
0000000000213ae2         db  0x01 ; '.'
0000000000213ae3         db  0x00 ; '.'
0000000000213ae4         db  0x00 ; '.'
0000000000213ae5         db  0x00 ; '.'
0000000000213ae6         db  0x00 ; '.'
0000000000213ae7         db  0x00 ; '.'
0000000000213ae8         db  0x7f ; '.'
0000000000213ae9         db  0x0b ; '.'
0000000000213aea         db  0x01 ; '.'
0000000000213aeb         db  0x00 ; '.'
0000000000213aec         db  0x00 ; '.'
0000000000213aed         db  0x00 ; '.'
0000000000213aee         db  0x00 ; '.'
0000000000213aef         db  0x00 ; '.'
0000000000213af0         db  0x21 ; '!'
0000000000213af1         db  0x01 ; '.'
0000000000213af2         db  0x01 ; '.'
0000000000213af3         db  0x00 ; '.'
0000000000213af4         db  0x00 ; '.'
0000000000213af5         db  0x00 ; '.'
0000000000213af6         db  0x00 ; '.'
0000000000213af7         db  0x00 ; '.'
0000000000213af8         db  0x06 ; '.'
0000000000213af9         db  0x01 ; '.'
0000000000213afa         db  0x01 ; '.'
0000000000213afb         db  0x00 ; '.'
0000000000213afc         db  0x00 ; '.'
0000000000213afd         db  0x00 ; '.'
0000000000213afe         db  0x00 ; '.'
0000000000213aff         db  0x00 ; '.'
0000000000213b00         db  0x42 ; 'B'
0000000000213b01         db  0xf1 ; '.'
0000000000213b02         db  0x00 ; '.'
0000000000213b03         db  0x00 ; '.'
0000000000213b04         db  0x00 ; '.'
0000000000213b05         db  0x00 ; '.'
0000000000213b06         db  0x00 ; '.'
0000000000213b07         db  0x00 ; '.'
0000000000213b08         db  0x29 ; ')'
0000000000213b09         db  0x01 ; '.'
0000000000213b0a         db  0x01 ; '.'
0000000000213b0b         db  0x00 ; '.'
0000000000213b0c         db  0x00 ; '.'
0000000000213b0d         db  0x00 ; '.'
0000000000213b0e         db  0x00 ; '.'
0000000000213b0f         db  0x00 ; '.'
0000000000213b10         db  0x00 ; '.'
0000000000213b11         db  0x00 ; '.'
0000000000213b12         db  0x00 ; '.'
0000000000213b13         db  0x00 ; '.'
0000000000213b14         db  0x00 ; '.'
0000000000213b15         db  0x00 ; '.'
0000000000213b16         db  0x00 ; '.'
0000000000213b17         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x213b18; 0x213d08[ (496 bytes)
        ; File offset : [80664; 81160[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000213b18         db  0x01 ; '.'
0000000000213b19         db  0x00 ; '.'
0000000000213b1a         db  0x00 ; '.'
0000000000213b1b         db  0x00 ; '.'
0000000000213b1c         db  0x00 ; '.'
0000000000213b1d         db  0x00 ; '.'
0000000000213b1e         db  0x00 ; '.'
0000000000213b1f         db  0x00 ; '.'
0000000000213b20         db  0x01 ; '.'
0000000000213b21         db  0x00 ; '.'
0000000000213b22         db  0x00 ; '.'
0000000000213b23         db  0x00 ; '.'
0000000000213b24         db  0x00 ; '.'
0000000000213b25         db  0x00 ; '.'
0000000000213b26         db  0x00 ; '.'
0000000000213b27         db  0x00 ; '.'
0000000000213b28         db  0x0c ; '.'
0000000000213b29         db  0x00 ; '.'
0000000000213b2a         db  0x00 ; '.'
0000000000213b2b         db  0x00 ; '.'
0000000000213b2c         db  0x00 ; '.'
0000000000213b2d         db  0x00 ; '.'
0000000000213b2e         db  0x00 ; '.'
0000000000213b2f         db  0x00 ; '.'
0000000000213b30         db  0x20 ; ' '
0000000000213b31         db  0x20 ; ' '
0000000000213b32         db  0x00 ; '.'
0000000000213b33         db  0x00 ; '.'
0000000000213b34         db  0x00 ; '.'
0000000000213b35         db  0x00 ; '.'
0000000000213b36         db  0x00 ; '.'
0000000000213b37         db  0x00 ; '.'
0000000000213b38         db  0x0d ; '.'
0000000000213b39         db  0x00 ; '.'
0000000000213b3a         db  0x00 ; '.'
0000000000213b3b         db  0x00 ; '.'
0000000000213b3c         db  0x00 ; '.'
0000000000213b3d         db  0x00 ; '.'
0000000000213b3e         db  0x00 ; '.'
0000000000213b3f         db  0x00 ; '.'
0000000000213b40         db  0xd0 ; '.'
0000000000213b41         db  0xef ; '.'
0000000000213b42         db  0x00 ; '.'
0000000000213b43         db  0x00 ; '.'
0000000000213b44         db  0x00 ; '.'
0000000000213b45         db  0x00 ; '.'
0000000000213b46         db  0x00 ; '.'
0000000000213b47         db  0x00 ; '.'
0000000000213b48         db  0x19 ; '.'
0000000000213b49         db  0x00 ; '.'
0000000000213b4a         db  0x00 ; '.'
0000000000213b4b         db  0x00 ; '.'
0000000000213b4c         db  0x00 ; '.'
0000000000213b4d         db  0x00 ; '.'
0000000000213b4e         db  0x00 ; '.'
0000000000213b4f         db  0x00 ; '.'
0000000000213b50         db  0x70 ; 'p'
0000000000213b51         db  0x38 ; '8'
0000000000213b52         db  0x21 ; '!'
0000000000213b53         db  0x00 ; '.'
0000000000213b54         db  0x00 ; '.'
0000000000213b55         db  0x00 ; '.'
0000000000213b56         db  0x00 ; '.'
0000000000213b57         db  0x00 ; '.'
0000000000213b58         db  0x1b ; '.'
0000000000213b59         db  0x00 ; '.'
0000000000213b5a         db  0x00 ; '.'
0000000000213b5b         db  0x00 ; '.'
0000000000213b5c         db  0x00 ; '.'
0000000000213b5d         db  0x00 ; '.'
0000000000213b5e         db  0x00 ; '.'
0000000000213b5f         db  0x00 ; '.'
0000000000213b60         db  0x08 ; '.'
0000000000213b61         db  0x00 ; '.'
0000000000213b62         db  0x00 ; '.'
0000000000213b63         db  0x00 ; '.'
0000000000213b64         db  0x00 ; '.'
0000000000213b65         db  0x00 ; '.'
0000000000213b66         db  0x00 ; '.'
0000000000213b67         db  0x00 ; '.'
0000000000213b68         db  0x1a ; '.'
0000000000213b69         db  0x00 ; '.'
0000000000213b6a         db  0x00 ; '.'
0000000000213b6b         db  0x00 ; '.'
0000000000213b6c         db  0x00 ; '.'
0000000000213b6d         db  0x00 ; '.'
0000000000213b6e         db  0x00 ; '.'
0000000000213b6f         db  0x00 ; '.'
0000000000213b70         db  0x78 ; 'x'
0000000000213b71         db  0x38 ; '8'
0000000000213b72         db  0x21 ; '!'
0000000000213b73         db  0x00 ; '.'
0000000000213b74         db  0x00 ; '.'
0000000000213b75         db  0x00 ; '.'
0000000000213b76         db  0x00 ; '.'
0000000000213b77         db  0x00 ; '.'
0000000000213b78         db  0x1c ; '.'
0000000000213b79         db  0x00 ; '.'
0000000000213b7a         db  0x00 ; '.'
0000000000213b7b         db  0x00 ; '.'
0000000000213b7c         db  0x00 ; '.'
0000000000213b7d         db  0x00 ; '.'
0000000000213b7e         db  0x00 ; '.'
0000000000213b7f         db  0x00 ; '.'
0000000000213b80         db  0x08 ; '.'
0000000000213b81         db  0x00 ; '.'
0000000000213b82         db  0x00 ; '.'
0000000000213b83         db  0x00 ; '.'
0000000000213b84         db  0x00 ; '.'
0000000000213b85         db  0x00 ; '.'
0000000000213b86         db  0x00 ; '.'
0000000000213b87         db  0x00 ; '.'
0000000000213b88         db  0xf5 ; '.'
0000000000213b89         db  0xfe ; '.'
0000000000213b8a         db  0xff ; '.'
0000000000213b8b         db  0x6f ; 'o'
0000000000213b8c         db  0x00 ; '.'
0000000000213b8d         db  0x00 ; '.'
0000000000213b8e         db  0x00 ; '.'
0000000000213b8f         db  0x00 ; '.'
0000000000213b90         db  0x98 ; '.'
0000000000213b91         db  0x02 ; '.'
0000000000213b92         db  0x00 ; '.'
0000000000213b93         db  0x00 ; '.'
0000000000213b94         db  0x00 ; '.'
0000000000213b95         db  0x00 ; '.'
0000000000213b96         db  0x00 ; '.'
0000000000213b97         db  0x00 ; '.'
0000000000213b98         db  0x05 ; '.'
0000000000213b99         db  0x00 ; '.'
0000000000213b9a         db  0x00 ; '.'
0000000000213b9b         db  0x00 ; '.'
0000000000213b9c         db  0x00 ; '.'
0000000000213b9d         db  0x00 ; '.'
0000000000213b9e         db  0x00 ; '.'
0000000000213b9f         db  0x00 ; '.'
0000000000213ba0         db  0x40 ; '@'
0000000000213ba1         db  0x0c ; '.'
0000000000213ba2         db  0x00 ; '.'
0000000000213ba3         db  0x00 ; '.'
0000000000213ba4         db  0x00 ; '.'
0000000000213ba5         db  0x00 ; '.'
0000000000213ba6         db  0x00 ; '.'
0000000000213ba7         db  0x00 ; '.'
0000000000213ba8         db  0x06 ; '.'
0000000000213ba9         db  0x00 ; '.'
0000000000213baa         db  0x00 ; '.'
0000000000213bab         db  0x00 ; '.'
0000000000213bac         db  0x00 ; '.'
0000000000213bad         db  0x00 ; '.'
0000000000213bae         db  0x00 ; '.'
0000000000213baf         db  0x00 ; '.'
0000000000213bb0         db  0xe0 ; '.'
0000000000213bb1         db  0x02 ; '.'
0000000000213bb2         db  0x00 ; '.'
0000000000213bb3         db  0x00 ; '.'
0000000000213bb4         db  0x00 ; '.'
0000000000213bb5         db  0x00 ; '.'
0000000000213bb6         db  0x00 ; '.'
0000000000213bb7         db  0x00 ; '.'
0000000000213bb8         db  0x0a ; '.'
0000000000213bb9         db  0x00 ; '.'
0000000000213bba         db  0x00 ; '.'
0000000000213bbb         db  0x00 ; '.'
0000000000213bbc         db  0x00 ; '.'
0000000000213bbd         db  0x00 ; '.'
0000000000213bbe         db  0x00 ; '.'
0000000000213bbf         db  0x00 ; '.'
0000000000213bc0         db  0x18 ; '.'
0000000000213bc1         db  0x04 ; '.'
0000000000213bc2         db  0x00 ; '.'
0000000000213bc3         db  0x00 ; '.'
0000000000213bc4         db  0x00 ; '.'
0000000000213bc5         db  0x00 ; '.'
0000000000213bc6         db  0x00 ; '.'
0000000000213bc7         db  0x00 ; '.'
0000000000213bc8         db  0x0b ; '.'
0000000000213bc9         db  0x00 ; '.'
0000000000213bca         db  0x00 ; '.'
0000000000213bcb         db  0x00 ; '.'
0000000000213bcc         db  0x00 ; '.'
0000000000213bcd         db  0x00 ; '.'
0000000000213bce         db  0x00 ; '.'
0000000000213bcf         db  0x00 ; '.'
0000000000213bd0         db  0x18 ; '.'
0000000000213bd1         db  0x00 ; '.'
0000000000213bd2         db  0x00 ; '.'
0000000000213bd3         db  0x00 ; '.'
0000000000213bd4         db  0x00 ; '.'
0000000000213bd5         db  0x00 ; '.'
0000000000213bd6         db  0x00 ; '.'
0000000000213bd7         db  0x00 ; '.'
0000000000213bd8         db  0x15 ; '.'
0000000000213bd9         db  0x00 ; '.'
0000000000213bda         db  0x00 ; '.'
0000000000213bdb         db  0x00 ; '.'
0000000000213bdc         db  0x00 ; '.'
0000000000213bdd         db  0x00 ; '.'
0000000000213bde         db  0x00 ; '.'
0000000000213bdf         db  0x00 ; '.'
0000000000213be0         db  0x00 ; '.'
0000000000213be1         db  0x00 ; '.'
0000000000213be2         db  0x00 ; '.'
0000000000213be3         db  0x00 ; '.'
0000000000213be4         db  0x00 ; '.'
0000000000213be5         db  0x00 ; '.'
0000000000213be6         db  0x00 ; '.'
0000000000213be7         db  0x00 ; '.'
0000000000213be8         db  0x03 ; '.'
0000000000213be9         db  0x00 ; '.'
0000000000213bea         db  0x00 ; '.'
0000000000213beb         db  0x00 ; '.'
0000000000213bec         db  0x00 ; '.'
0000000000213bed         db  0x00 ; '.'
0000000000213bee         db  0x00 ; '.'
0000000000213bef         db  0x00 ; '.'
0000000000213bf0         db  0x08 ; '.'
0000000000213bf1         db  0x3d ; '='
0000000000213bf2         db  0x21 ; '!'
0000000000213bf3         db  0x00 ; '.'
0000000000213bf4         db  0x00 ; '.'
0000000000213bf5         db  0x00 ; '.'
0000000000213bf6         db  0x00 ; '.'
0000000000213bf7         db  0x00 ; '.'
0000000000213bf8         db  0x02 ; '.'
0000000000213bf9         db  0x00 ; '.'
0000000000213bfa         db  0x00 ; '.'
0000000000213bfb         db  0x00 ; '.'
0000000000213bfc         db  0x00 ; '.'
0000000000213bfd         db  0x00 ; '.'
0000000000213bfe         db  0x00 ; '.'
0000000000213bff         db  0x00 ; '.'
0000000000213c00         db  0x10 ; '.'
0000000000213c01         db  0x08 ; '.'
0000000000213c02         db  0x00 ; '.'
0000000000213c03         db  0x00 ; '.'
0000000000213c04         db  0x00 ; '.'
0000000000213c05         db  0x00 ; '.'
0000000000213c06         db  0x00 ; '.'
0000000000213c07         db  0x00 ; '.'
0000000000213c08         db  0x14 ; '.'
0000000000213c09         db  0x00 ; '.'
0000000000213c0a         db  0x00 ; '.'
0000000000213c0b         db  0x00 ; '.'
0000000000213c0c         db  0x00 ; '.'
0000000000213c0d         db  0x00 ; '.'
0000000000213c0e         db  0x00 ; '.'
0000000000213c0f         db  0x00 ; '.'
0000000000213c10         db  0x07 ; '.'
0000000000213c11         db  0x00 ; '.'
0000000000213c12         db  0x00 ; '.'
0000000000213c13         db  0x00 ; '.'
0000000000213c14         db  0x00 ; '.'
0000000000213c15         db  0x00 ; '.'
0000000000213c16         db  0x00 ; '.'
0000000000213c17         db  0x00 ; '.'
0000000000213c18         db  0x17 ; '.'
0000000000213c19         db  0x00 ; '.'
0000000000213c1a         db  0x00 ; '.'
0000000000213c1b         db  0x00 ; '.'
0000000000213c1c         db  0x00 ; '.'
0000000000213c1d         db  0x00 ; '.'
0000000000213c1e         db  0x00 ; '.'
0000000000213c1f         db  0x00 ; '.'
0000000000213c20         db  0x10 ; '.'
0000000000213c21         db  0x18 ; '.'
0000000000213c22         db  0x00 ; '.'
0000000000213c23         db  0x00 ; '.'
0000000000213c24         db  0x00 ; '.'
0000000000213c25         db  0x00 ; '.'
0000000000213c26         db  0x00 ; '.'
0000000000213c27         db  0x00 ; '.'
0000000000213c28         db  0x07 ; '.'
0000000000213c29         db  0x00 ; '.'
0000000000213c2a         db  0x00 ; '.'
0000000000213c2b         db  0x00 ; '.'
0000000000213c2c         db  0x00 ; '.'
0000000000213c2d         db  0x00 ; '.'
0000000000213c2e         db  0x00 ; '.'
0000000000213c2f         db  0x00 ; '.'
0000000000213c30         db  0x80 ; '.'
0000000000213c31         db  0x11 ; '.'
0000000000213c32         db  0x00 ; '.'
0000000000213c33         db  0x00 ; '.'
0000000000213c34         db  0x00 ; '.'
0000000000213c35         db  0x00 ; '.'
0000000000213c36         db  0x00 ; '.'
0000000000213c37         db  0x00 ; '.'
0000000000213c38         db  0x08 ; '.'
0000000000213c39         db  0x00 ; '.'
0000000000213c3a         db  0x00 ; '.'
0000000000213c3b         db  0x00 ; '.'
0000000000213c3c         db  0x00 ; '.'
0000000000213c3d         db  0x00 ; '.'
0000000000213c3e         db  0x00 ; '.'
0000000000213c3f         db  0x00 ; '.'
0000000000213c40         db  0x90 ; '.'
0000000000213c41         db  0x06 ; '.'
0000000000213c42         db  0x00 ; '.'
0000000000213c43         db  0x00 ; '.'
0000000000213c44         db  0x00 ; '.'
0000000000213c45         db  0x00 ; '.'
0000000000213c46         db  0x00 ; '.'
0000000000213c47         db  0x00 ; '.'
0000000000213c48         db  0x09 ; '.'
0000000000213c49         db  0x00 ; '.'
0000000000213c4a         db  0x00 ; '.'
0000000000213c4b         db  0x00 ; '.'
0000000000213c4c         db  0x00 ; '.'
0000000000213c4d         db  0x00 ; '.'
0000000000213c4e         db  0x00 ; '.'
0000000000213c4f         db  0x00 ; '.'
0000000000213c50         db  0x18 ; '.'
0000000000213c51         db  0x00 ; '.'
0000000000213c52         db  0x00 ; '.'
0000000000213c53         db  0x00 ; '.'
0000000000213c54         db  0x00 ; '.'
0000000000213c55         db  0x00 ; '.'
0000000000213c56         db  0x00 ; '.'
0000000000213c57         db  0x00 ; '.'
0000000000213c58         db  0x1e ; '.'
0000000000213c59         db  0x00 ; '.'
0000000000213c5a         db  0x00 ; '.'
0000000000213c5b         db  0x00 ; '.'
0000000000213c5c         db  0x00 ; '.'
0000000000213c5d         db  0x00 ; '.'
0000000000213c5e         db  0x00 ; '.'
0000000000213c5f         db  0x00 ; '.'
0000000000213c60         db  0x08 ; '.'
0000000000213c61         db  0x00 ; '.'
0000000000213c62         db  0x00 ; '.'
0000000000213c63         db  0x00 ; '.'
0000000000213c64         db  0x00 ; '.'
0000000000213c65         db  0x00 ; '.'
0000000000213c66         db  0x00 ; '.'
0000000000213c67         db  0x00 ; '.'
0000000000213c68         db  0xfb ; '.'
0000000000213c69         db  0xff ; '.'
0000000000213c6a         db  0xff ; '.'
0000000000213c6b         db  0x6f ; 'o'
0000000000213c6c         db  0x00 ; '.'
0000000000213c6d         db  0x00 ; '.'
0000000000213c6e         db  0x00 ; '.'
0000000000213c6f         db  0x00 ; '.'
0000000000213c70         db  0x01 ; '.'
0000000000213c71         db  0x00 ; '.'
0000000000213c72         db  0x00 ; '.'
0000000000213c73         db  0x08 ; '.'
0000000000213c74         db  0x00 ; '.'
0000000000213c75         db  0x00 ; '.'
0000000000213c76         db  0x00 ; '.'
0000000000213c77         db  0x00 ; '.'
0000000000213c78         db  0xfe ; '.'
0000000000213c79         db  0xff ; '.'
0000000000213c7a         db  0xff ; '.'
0000000000213c7b         db  0x6f ; 'o'
0000000000213c7c         db  0x00 ; '.'
0000000000213c7d         db  0x00 ; '.'
0000000000213c7e         db  0x00 ; '.'
0000000000213c7f         db  0x00 ; '.'
0000000000213c80         db  0x20 ; ' '
0000000000213c81         db  0x11 ; '.'
0000000000213c82         db  0x00 ; '.'
0000000000213c83         db  0x00 ; '.'
0000000000213c84         db  0x00 ; '.'
0000000000213c85         db  0x00 ; '.'
0000000000213c86         db  0x00 ; '.'
0000000000213c87         db  0x00 ; '.'
0000000000213c88         db  0xff ; '.'
0000000000213c89         db  0xff ; '.'
0000000000213c8a         db  0xff ; '.'
0000000000213c8b         db  0x6f ; 'o'
0000000000213c8c         db  0x00 ; '.'
0000000000213c8d         db  0x00 ; '.'
0000000000213c8e         db  0x00 ; '.'
0000000000213c8f         db  0x00 ; '.'
0000000000213c90         db  0x01 ; '.'
0000000000213c91         db  0x00 ; '.'
0000000000213c92         db  0x00 ; '.'
0000000000213c93         db  0x00 ; '.'
0000000000213c94         db  0x00 ; '.'
0000000000213c95         db  0x00 ; '.'
0000000000213c96         db  0x00 ; '.'
0000000000213c97         db  0x00 ; '.'
0000000000213c98         db  0xf0 ; '.'
0000000000213c99         db  0xff ; '.'
0000000000213c9a         db  0xff ; '.'
0000000000213c9b         db  0x6f ; 'o'
0000000000213c9c         db  0x00 ; '.'
0000000000213c9d         db  0x00 ; '.'
0000000000213c9e         db  0x00 ; '.'
0000000000213c9f         db  0x00 ; '.'
0000000000213ca0         db  0x58 ; 'X'
0000000000213ca1         db  0x10 ; '.'
0000000000213ca2         db  0x00 ; '.'
0000000000213ca3         db  0x00 ; '.'
0000000000213ca4         db  0x00 ; '.'
0000000000213ca5         db  0x00 ; '.'
0000000000213ca6         db  0x00 ; '.'
0000000000213ca7         db  0x00 ; '.'
0000000000213ca8         db  0xf9 ; '.'
0000000000213ca9         db  0xff ; '.'
0000000000213caa         db  0xff ; '.'
0000000000213cab         db  0x6f ; 'o'
0000000000213cac         db  0x00 ; '.'
0000000000213cad         db  0x00 ; '.'
0000000000213cae         db  0x00 ; '.'
0000000000213caf         db  0x00 ; '.'
0000000000213cb0         db  0x3b ; ';'
0000000000213cb1         db  0x00 ; '.'
0000000000213cb2         db  0x00 ; '.'
0000000000213cb3         db  0x00 ; '.'
0000000000213cb4         db  0x00 ; '.'
0000000000213cb5         db  0x00 ; '.'
0000000000213cb6         db  0x00 ; '.'
0000000000213cb7         db  0x00 ; '.'
0000000000213cb8         db  0x00 ; '.'
0000000000213cb9         db  0x00 ; '.'
0000000000213cba         db  0x00 ; '.'
0000000000213cbb         db  0x00 ; '.'
0000000000213cbc         db  0x00 ; '.'
0000000000213cbd         db  0x00 ; '.'
0000000000213cbe         db  0x00 ; '.'
0000000000213cbf         db  0x00 ; '.'
0000000000213cc0         db  0x00 ; '.'
0000000000213cc1         db  0x00 ; '.'
0000000000213cc2         db  0x00 ; '.'
0000000000213cc3         db  0x00 ; '.'
0000000000213cc4         db  0x00 ; '.'
0000000000213cc5         db  0x00 ; '.'
0000000000213cc6         db  0x00 ; '.'
0000000000213cc7         db  0x00 ; '.'
0000000000213cc8         db  0x00 ; '.'
0000000000213cc9         db  0x00 ; '.'
0000000000213cca         db  0x00 ; '.'
0000000000213ccb         db  0x00 ; '.'
0000000000213ccc         db  0x00 ; '.'
0000000000213ccd         db  0x00 ; '.'
0000000000213cce         db  0x00 ; '.'
0000000000213ccf         db  0x00 ; '.'
0000000000213cd0         db  0x00 ; '.'
0000000000213cd1         db  0x00 ; '.'
0000000000213cd2         db  0x00 ; '.'
0000000000213cd3         db  0x00 ; '.'
0000000000213cd4         db  0x00 ; '.'
0000000000213cd5         db  0x00 ; '.'
0000000000213cd6         db  0x00 ; '.'
0000000000213cd7         db  0x00 ; '.'
0000000000213cd8         db  0x00 ; '.'
0000000000213cd9         db  0x00 ; '.'
0000000000213cda         db  0x00 ; '.'
0000000000213cdb         db  0x00 ; '.'
0000000000213cdc         db  0x00 ; '.'
0000000000213cdd         db  0x00 ; '.'
0000000000213cde         db  0x00 ; '.'
0000000000213cdf         db  0x00 ; '.'
0000000000213ce0         db  0x00 ; '.'
0000000000213ce1         db  0x00 ; '.'
0000000000213ce2         db  0x00 ; '.'
0000000000213ce3         db  0x00 ; '.'
0000000000213ce4         db  0x00 ; '.'
0000000000213ce5         db  0x00 ; '.'
0000000000213ce6         db  0x00 ; '.'
0000000000213ce7         db  0x00 ; '.'
0000000000213ce8         db  0x00 ; '.'
0000000000213ce9         db  0x00 ; '.'
0000000000213cea         db  0x00 ; '.'
0000000000213ceb         db  0x00 ; '.'
0000000000213cec         db  0x00 ; '.'
0000000000213ced         db  0x00 ; '.'
0000000000213cee         db  0x00 ; '.'
0000000000213cef         db  0x00 ; '.'
0000000000213cf0         db  0x00 ; '.'
0000000000213cf1         db  0x00 ; '.'
0000000000213cf2         db  0x00 ; '.'
0000000000213cf3         db  0x00 ; '.'
0000000000213cf4         db  0x00 ; '.'
0000000000213cf5         db  0x00 ; '.'
0000000000213cf6         db  0x00 ; '.'
0000000000213cf7         db  0x00 ; '.'
0000000000213cf8         db  0x00 ; '.'
0000000000213cf9         db  0x00 ; '.'
0000000000213cfa         db  0x00 ; '.'
0000000000213cfb         db  0x00 ; '.'
0000000000213cfc         db  0x00 ; '.'
0000000000213cfd         db  0x00 ; '.'
0000000000213cfe         db  0x00 ; '.'
0000000000213cff         db  0x00 ; '.'
0000000000213d00         db  0x00 ; '.'
0000000000213d01         db  0x00 ; '.'
0000000000213d02         db  0x00 ; '.'
0000000000213d03         db  0x00 ; '.'
0000000000213d04         db  0x00 ; '.'
0000000000213d05         db  0x00 ; '.'
0000000000213d06         db  0x00 ; '.'
0000000000213d07         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x213d08; 0x213ff8[ (752 bytes)
        ; File offset : [81160; 81912[ (752 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000213d08         db  0x18 ; '.'
0000000000213d09         db  0x3b ; ';'
0000000000213d0a         db  0x21 ; '!'
0000000000213d0b         db  0x00 ; '.'
0000000000213d0c         db  0x00 ; '.'
0000000000213d0d         db  0x00 ; '.'
0000000000213d0e         db  0x00 ; '.'
0000000000213d0f         db  0x00 ; '.'
                     qword_213d10:
0000000000213d10         dq         0x0000000000000000                          ; DATA XREF=0x2040
0000000000213d18         db  0x00 ; '.'                                         ; DATA XREF=0x2046
0000000000213d19         db  0x00 ; '.'
0000000000213d1a         db  0x00 ; '.'
0000000000213d1b         db  0x00 ; '.'
0000000000213d1c         db  0x00 ; '.'
0000000000213d1d         db  0x00 ; '.'
0000000000213d1e         db  0x00 ; '.'
0000000000213d1f         db  0x00 ; '.'
                     getenv@GOT:        // getenv
0000000000213d20         dq         0x0000000000214590                          ; DATA XREF=j_getenv
                     __snprintf_chk@GOT:        // __snprintf_chk
0000000000213d28         dq         0x0000000000214598                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
0000000000213d30         dq         0x00000000002145a0                          ; DATA XREF=j_free
                     endmntent@GOT:        // endmntent
0000000000213d38         dq         0x00000000002145a8                          ; DATA XREF=j_endmntent
                     strverscmp@GOT:        // strverscmp
0000000000213d40         dq         0x00000000002145b0                          ; DATA XREF=j_strverscmp
                     abort@GOT:        // abort
0000000000213d48         dq         0x00000000002145b8                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000213d50         dq         0x00000000002145c0                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
0000000000213d58         dq         0x00000000002145c8                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
0000000000213d60         dq         0x00000000002145d8                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
0000000000213d68         dq         0x00000000002145e0                          ; DATA XREF=j___fpending
                     isatty@GOT:        // isatty
0000000000213d70         dq         0x00000000002145e8                          ; DATA XREF=j_isatty
                     iswcntrl@GOT:        // iswcntrl
0000000000213d78         dq         0x00000000002145f0                          ; DATA XREF=j_iswcntrl
                     wcswidth@GOT:        // wcswidth
0000000000213d80         dq         0x00000000002145f8                          ; DATA XREF=j_wcswidth
                     localeconv@GOT:        // localeconv
0000000000213d88         dq         0x0000000000214600                          ; DATA XREF=j_localeconv
                     mbstowcs@GOT:        // mbstowcs
0000000000213d90         dq         0x0000000000214608                          ; DATA XREF=j_mbstowcs
                     readlink@GOT:        // readlink
0000000000213d98         dq         0x0000000000214610                          ; DATA XREF=j_readlink
                     fcntl@GOT:        // fcntl
0000000000213da0         dq         0x0000000000214618                          ; DATA XREF=j_fcntl
                     textdomain@GOT:        // textdomain
0000000000213da8         dq         0x0000000000214620                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
0000000000213db0         dq         0x0000000000214628                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
0000000000213db8         dq         0x0000000000214630                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
0000000000213dc0         dq         0x0000000000214638                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000213dc8         dq         0x0000000000214640                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000213dd0         dq         0x0000000000214648                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
0000000000213dd8         dq         0x0000000000214650                          ; DATA XREF=j___lxstat
                     openat@GOT:        // openat
0000000000213de0         dq         0x0000000000214658                          ; DATA XREF=j_openat
                     chdir@GOT:        // chdir
0000000000213de8         dq         0x0000000000214660                          ; DATA XREF=j_chdir
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000213df0         dq         0x0000000000214668                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000213df8         dq         0x0000000000214670                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000213e00         dq         0x0000000000214678                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
0000000000213e08         dq         0x0000000000214680                          ; DATA XREF=j_strchr
                     __fxstatat@GOT:        // __fxstatat
0000000000213e10         dq         0x0000000000214688                          ; DATA XREF=j___fxstatat
                     __overflow@GOT:        // __overflow
0000000000213e18         dq         0x0000000000214690                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
0000000000213e20         dq         0x0000000000214698                          ; DATA XREF=j_strrchr
                     uname@GOT:        // uname
0000000000213e28         dq         0x00000000002146a0                          ; DATA XREF=j_uname
                     lseek@GOT:        // lseek
0000000000213e30         dq         0x00000000002146a8                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000213e38         dq         0x00000000002146b0                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
0000000000213e40         dq         0x00000000002146b8                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
0000000000213e48         dq         0x00000000002146c0                          ; DATA XREF=j_memset
                     getcwd@GOT:        // getcwd
0000000000213e50         dq         0x00000000002146c8                          ; DATA XREF=j_getcwd
                     canonicalize_file_name@GOT:        // canonicalize_file_name
0000000000213e58         dq         0x00000000002146d0                          ; DATA XREF=j_canonicalize_file_name
                     close@GOT:        // close
0000000000213e60         dq         0x00000000002146d8                          ; DATA XREF=j_close
                     strspn@GOT:        // strspn
0000000000213e68         dq         0x00000000002146e0                          ; DATA XREF=j_strspn
                     memchr@GOT:        // memchr
0000000000213e70         dq         0x00000000002146e8                          ; DATA XREF=j_memchr
                     memcmp@GOT:        // memcmp
0000000000213e78         dq         0x00000000002146f8                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000213e80         dq         0x0000000000214700                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000213e88         dq         0x0000000000214708                          ; DATA XREF=j_calloc
                     __getdelim@GOT:        // __getdelim
0000000000213e90         dq         0x0000000000214710                          ; DATA XREF=j___getdelim
                     strcmp@GOT:        // strcmp
0000000000213e98         dq         0x0000000000214718                          ; DATA XREF=j_strcmp
                     __memcpy_chk@GOT:        // __memcpy_chk
0000000000213ea0         dq         0x0000000000214720                          ; DATA XREF=j___memcpy_chk
                     memcpy@GOT:        // memcpy
0000000000213ea8         dq         0x0000000000214730                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
0000000000213eb0         dq         0x0000000000214738                          ; DATA XREF=j_fileno
                     statfs@GOT:        // statfs
0000000000213eb8         dq         0x0000000000214740                          ; DATA XREF=j_statfs
                     __xstat@GOT:        // __xstat
0000000000213ec0         dq         0x0000000000214748                          ; DATA XREF=j___xstat
                     sync@GOT:        // sync
0000000000213ec8         dq         0x0000000000214750                          ; DATA XREF=j_sync
                     wcwidth@GOT:        // wcwidth
0000000000213ed0         dq         0x0000000000214758                          ; DATA XREF=j_wcwidth
                     malloc@GOT:        // malloc
0000000000213ed8         dq         0x0000000000214760                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
0000000000213ee0         dq         0x0000000000214768                          ; DATA XREF=j_fflush
                     getmntent@GOT:        // getmntent
0000000000213ee8         dq         0x0000000000214770                          ; DATA XREF=j_getmntent
                     setmntent@GOT:        // setmntent
0000000000213ef0         dq         0x0000000000214778                          ; DATA XREF=j_setmntent
                     nl_langinfo@GOT:        // nl_langinfo
0000000000213ef8         dq         0x0000000000214780                          ; DATA XREF=j_nl_langinfo
                     sscanf@GOT:        // sscanf
0000000000213f00         dq         0x0000000000214788                          ; DATA XREF=j_sscanf
                     __freading@GOT:        // __freading
0000000000213f08         dq         0x0000000000214790                          ; DATA XREF=j___freading
                     statvfs@GOT:        // statvfs
0000000000213f10         dq         0x0000000000214798                          ; DATA XREF=j_statvfs
                     fchdir@GOT:        // fchdir
0000000000213f18         dq         0x00000000002147a0                          ; DATA XREF=j_fchdir
                     realloc@GOT:        // realloc
0000000000213f20         dq         0x00000000002147a8                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
0000000000213f28         dq         0x00000000002147b0                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000213f30         dq         0x00000000002147b8                          ; DATA XREF=j___printf_chk
                     mempcpy@GOT:        // mempcpy
0000000000213f38         dq         0x00000000002147c0                          ; DATA XREF=j_mempcpy
                     memmove@GOT:        // memmove
0000000000213f40         dq         0x00000000002147c8                          ; DATA XREF=j_memmove
                     error@GOT:        // error
0000000000213f48         dq         0x00000000002147d0                          ; DATA XREF=j_error
                     memrchr@GOT:        // memrchr
0000000000213f50         dq         0x00000000002147d8                          ; DATA XREF=j_memrchr
                     open@GOT:        // open
0000000000213f58         dq         0x00000000002147e0                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
0000000000213f60         dq         0x00000000002147e8                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
0000000000213f68         dq         0x00000000002147f0                          ; DATA XREF=j_fopen
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000213f70         dq         0x00000000002147f8                          ; DATA XREF=j___cxa_atexit
                     wcstombs@GOT:        // wcstombs
0000000000213f78         dq         0x0000000000214800                          ; DATA XREF=j_wcstombs
                     exit@GOT:        // exit
0000000000213f80         dq         0x0000000000214808                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000213f88         dq         0x0000000000214810                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000213f90         dq         0x0000000000214818                          ; DATA XREF=j___fprintf_chk
                     strdup@GOT:        // strdup
0000000000213f98         dq         0x0000000000214828                          ; DATA XREF=j_strdup
                     mbsinit@GOT:        // mbsinit
0000000000213fa0         dq         0x0000000000214830                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000213fa8         dq         0x0000000000214838                          ; DATA XREF=j_iswprint
                     hasmntopt@GOT:        // hasmntopt
0000000000213fb0         dq         0x0000000000214840                          ; DATA XREF=j_hasmntopt
                     strstr@GOT:        // strstr
0000000000213fb8         dq         0x0000000000214850                          ; DATA XREF=j_strstr
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000213fc0         dq         0x0000000000214858                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
0000000000213fc8         dq         0x0000000000214860                          ; DATA XREF=j___sprintf_chk
                     qword_213fd0:
0000000000213fd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
0000000000213fd8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000213fd9         db  0x00 ; '.'
0000000000213fda         db  0x00 ; '.'
0000000000213fdb         db  0x00 ; '.'
0000000000213fdc         db  0x00 ; '.'
0000000000213fdd         db  0x00 ; '.'
0000000000213fde         db  0x00 ; '.'
0000000000213fdf         db  0x00 ; '.'
                     qword_213fe0:
0000000000213fe0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_213fe8:
0000000000213fe8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_213ff0:
0000000000213ff0         dq         0x0000000000000000                          ; DATA XREF=j_qword_213ff0, __do_global_dtors_aux+9
0000000000213ff8         db  0x00 ; '.'
0000000000213ff9         db  0x00 ; '.'
0000000000213ffa         db  0x00 ; '.'
0000000000213ffb         db  0x00 ; '.'
0000000000213ffc         db  0x00 ; '.'
0000000000213ffd         db  0x00 ; '.'
0000000000213ffe         db  0x00 ; '.'
0000000000213fff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x214000; 0x2142f0[ (752 bytes)
        ; File offset : [81920; 82672[ (752 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000214000         db  0x00 ; '.'
0000000000214001         db  0x00 ; '.'
0000000000214002         db  0x00 ; '.'
0000000000214003         db  0x00 ; '.'
0000000000214004         db  0x00 ; '.'
0000000000214005         db  0x00 ; '.'
0000000000214006         db  0x00 ; '.'
0000000000214007         db  0x00 ; '.'
                     __dso_handle:
0000000000214008         dq         0x0000000000214008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     tty_out.8809:
0000000000214010         dd         0xffffffff                                  ; DATA XREF=replace_problematic_chars, replace_problematic_chars+58
0000000000214014         db  0x00 ; '.'
0000000000214015         db  0x00 ; '.'
0000000000214016         db  0x00 ; '.'
0000000000214017         db  0x00 ; '.'
0000000000214018         db  0x00 ; '.'
0000000000214019         db  0x00 ; '.'
000000000021401a         db  0x00 ; '.'
000000000021401b         db  0x00 ; '.'
000000000021401c         db  0x00 ; '.'
000000000021401d         db  0x00 ; '.'
000000000021401e         db  0x00 ; '.'
000000000021401f         db  0x00 ; '.'
                     field_data:
0000000000214020         db  0x00 ; '.'                                         ; DATA XREF=alloc_field+77, decode_output_arg+4
0000000000214021         db  0x00 ; '.'
0000000000214022         db  0x00 ; '.'
0000000000214023         db  0x00 ; '.'
0000000000214024         db  0x00 ; '.'
0000000000214025         db  0x00 ; '.'
0000000000214026         db  0x00 ; '.'
0000000000214027         db  0x00 ; '.'
0000000000214028         db  0x6f ; 'o'                                         ; DATA XREF=decode_output_arg+68
0000000000214029         db  0xf2 ; '.'
000000000021402a         db  0x00 ; '.'
000000000021402b         db  0x00 ; '.'
000000000021402c         db  0x00 ; '.'
000000000021402d         db  0x00 ; '.'
000000000021402e         db  0x00 ; '.'
000000000021402f         db  0x00 ; '.'
0000000000214030         db  0x02 ; '.'
0000000000214031         db  0x00 ; '.'
0000000000214032         db  0x00 ; '.'
0000000000214033         db  0x00 ; '.'
0000000000214034         db  0x00 ; '.'
0000000000214035         db  0x00 ; '.'
0000000000214036         db  0x00 ; '.'
0000000000214037         db  0x00 ; '.'
0000000000214038         db  0x76 ; 'v'
0000000000214039         db  0xf2 ; '.'
000000000021403a         db  0x00 ; '.'
000000000021403b         db  0x00 ; '.'
000000000021403c         db  0x00 ; '.'
000000000021403d         db  0x00 ; '.'
000000000021403e         db  0x00 ; '.'
000000000021403f         db  0x00 ; '.'
0000000000214040         db  0x0e ; '.'
0000000000214041         db  0x00 ; '.'
0000000000214042         db  0x00 ; '.'
0000000000214043         db  0x00 ; '.'
0000000000214044         db  0x00 ; '.'
0000000000214045         db  0x00 ; '.'
0000000000214046         db  0x00 ; '.'
0000000000214047         db  0x00 ; '.'
0000000000214048         db  0x00 ; '.'
0000000000214049         db  0x00 ; '.'
000000000021404a         db  0x00 ; '.'
000000000021404b         db  0x00 ; '.'
                     byte_21404c:
000000000021404c         db         0x00                                        ; DATA XREF=main+3058
000000000021404d         db  0x00 ; '.'
000000000021404e         db  0x00 ; '.'
000000000021404f         db  0x00 ; '.'
0000000000214050         db  0x01 ; '.'
0000000000214051         db  0x00 ; '.'
0000000000214052         db  0x00 ; '.'
0000000000214053         db  0x00 ; '.'
0000000000214054         db  0x00 ; '.'
0000000000214055         db  0x00 ; '.'
0000000000214056         db  0x00 ; '.'
0000000000214057         db  0x00 ; '.'
0000000000214058         db  0x81 ; '.'
0000000000214059         db  0xf2 ; '.'
000000000021405a         db  0x00 ; '.'
000000000021405b         db  0x00 ; '.'
000000000021405c         db  0x00 ; '.'
000000000021405d         db  0x00 ; '.'
000000000021405e         db  0x00 ; '.'
000000000021405f         db  0x00 ; '.'
0000000000214060         db  0x02 ; '.'
0000000000214061         db  0x00 ; '.'
0000000000214062         db  0x00 ; '.'
0000000000214063         db  0x00 ; '.'
0000000000214064         db  0x00 ; '.'
0000000000214065         db  0x00 ; '.'
0000000000214066         db  0x00 ; '.'
0000000000214067         db  0x00 ; '.'
0000000000214068         db  0x88 ; '.'
0000000000214069         db  0xf2 ; '.'
000000000021406a         db  0x00 ; '.'
000000000021406b         db  0x00 ; '.'
000000000021406c         db  0x00 ; '.'
000000000021406d         db  0x00 ; '.'
000000000021406e         db  0x00 ; '.'
000000000021406f         db  0x00 ; '.'
0000000000214070         db  0x04 ; '.'
0000000000214071         db  0x00 ; '.'
0000000000214072         db  0x00 ; '.'
0000000000214073         db  0x00 ; '.'
0000000000214074         db  0x00 ; '.'
0000000000214075         db  0x00 ; '.'
0000000000214076         db  0x00 ; '.'
0000000000214077         db  0x00 ; '.'
0000000000214078         db  0x00 ; '.'
0000000000214079         db  0x00 ; '.'
000000000021407a         db  0x00 ; '.'
000000000021407b         db  0x00 ; '.'
                     byte_21407c:
000000000021407c         db         0x00                                        ; DATA XREF=main+5053
000000000021407d         db  0x00 ; '.'
000000000021407e         db  0x00 ; '.'
000000000021407f         db  0x00 ; '.'
0000000000214080         db  0x02 ; '.'
0000000000214081         db  0x00 ; '.'
0000000000214082         db  0x00 ; '.'
0000000000214083         db  0x00 ; '.'
0000000000214084         db  0x00 ; '.'
0000000000214085         db  0x00 ; '.'
0000000000214086         db  0x00 ; '.'
0000000000214087         db  0x00 ; '.'
0000000000214088         db  0x12 ; '.'
0000000000214089         db  0xf2 ; '.'
000000000021408a         db  0x00 ; '.'
000000000021408b         db  0x00 ; '.'
000000000021408c         db  0x00 ; '.'
000000000021408d         db  0x00 ; '.'
000000000021408e         db  0x00 ; '.'
000000000021408f         db  0x00 ; '.'
0000000000214090         db  0x00 ; '.'
0000000000214091         db  0x00 ; '.'
0000000000214092         db  0x00 ; '.'
0000000000214093         db  0x00 ; '.'
0000000000214094         db  0x00 ; '.'
0000000000214095         db  0x00 ; '.'
0000000000214096         db  0x00 ; '.'
0000000000214097         db  0x00 ; '.'
0000000000214098         db  0xe4 ; '.'
0000000000214099         db  0xef ; '.'
000000000021409a         db  0x00 ; '.'
000000000021409b         db  0x00 ; '.'
000000000021409c         db  0x00 ; '.'
000000000021409d         db  0x00 ; '.'
000000000021409e         db  0x00 ; '.'
000000000021409f         db  0x00 ; '.'
00000000002140a0         db  0x05 ; '.'
00000000002140a1         db  0x00 ; '.'
00000000002140a2         db  0x00 ; '.'
00000000002140a3         db  0x00 ; '.'
00000000002140a4         db  0x00 ; '.'
00000000002140a5         db  0x00 ; '.'
00000000002140a6         db  0x00 ; '.'
00000000002140a7         db  0x00 ; '.'
00000000002140a8         db  0x01 ; '.'
00000000002140a9         db  0x00 ; '.'
00000000002140aa         db  0x00 ; '.'
00000000002140ab         db  0x00 ; '.'
00000000002140ac         db  0x00 ; '.'
00000000002140ad         db  0x00 ; '.'
00000000002140ae         db  0x00 ; '.'
00000000002140af         db  0x00 ; '.'
00000000002140b0         db  0x03 ; '.'
00000000002140b1         db  0x00 ; '.'
00000000002140b2         db  0x00 ; '.'
00000000002140b3         db  0x00 ; '.'
00000000002140b4         db  0x00 ; '.'
00000000002140b5         db  0x00 ; '.'
00000000002140b6         db  0x00 ; '.'
00000000002140b7         db  0x00 ; '.'
00000000002140b8         db  0xa6 ; '.'
00000000002140b9         db  0xf2 ; '.'
00000000002140ba         db  0x00 ; '.'
00000000002140bb         db  0x00 ; '.'
00000000002140bc         db  0x00 ; '.'
00000000002140bd         db  0x00 ; '.'
00000000002140be         db  0x00 ; '.'
00000000002140bf         db  0x00 ; '.'
00000000002140c0         db  0x00 ; '.'
00000000002140c1         db  0x00 ; '.'
00000000002140c2         db  0x00 ; '.'
00000000002140c3         db  0x00 ; '.'
00000000002140c4         db  0x00 ; '.'
00000000002140c5         db  0x00 ; '.'
00000000002140c6         db  0x00 ; '.'
00000000002140c7         db  0x00 ; '.'
00000000002140c8         db  0xac ; '.'
00000000002140c9         db  0xf2 ; '.'
00000000002140ca         db  0x00 ; '.'
00000000002140cb         db  0x00 ; '.'
00000000002140cc         db  0x00 ; '.'
00000000002140cd         db  0x00 ; '.'
00000000002140ce         db  0x00 ; '.'
00000000002140cf         db  0x00 ; '.'
00000000002140d0         db  0x05 ; '.'
00000000002140d1         db  0x00 ; '.'
00000000002140d2         db  0x00 ; '.'
00000000002140d3         db  0x00 ; '.'
00000000002140d4         db  0x00 ; '.'
00000000002140d5         db  0x00 ; '.'
00000000002140d6         db  0x00 ; '.'
00000000002140d7         db  0x00 ; '.'
00000000002140d8         db  0x01 ; '.'
00000000002140d9         db  0x00 ; '.'
00000000002140da         db  0x00 ; '.'
00000000002140db         db  0x00 ; '.'
00000000002140dc         db  0x00 ; '.'
00000000002140dd         db  0x00 ; '.'
00000000002140de         db  0x00 ; '.'
00000000002140df         db  0x00 ; '.'
00000000002140e0         db  0x04 ; '.'
00000000002140e1         db  0x00 ; '.'
00000000002140e2         db  0x00 ; '.'
00000000002140e3         db  0x00 ; '.'
00000000002140e4         db  0x00 ; '.'
00000000002140e5         db  0x00 ; '.'
00000000002140e6         db  0x00 ; '.'
00000000002140e7         db  0x00 ; '.'
00000000002140e8         db  0xb2 ; '.'
00000000002140e9         db  0xf2 ; '.'
00000000002140ea         db  0x00 ; '.'
00000000002140eb         db  0x00 ; '.'
00000000002140ec         db  0x00 ; '.'
00000000002140ed         db  0x00 ; '.'
00000000002140ee         db  0x00 ; '.'
00000000002140ef         db  0x00 ; '.'
00000000002140f0         db  0x00 ; '.'
00000000002140f1         db  0x00 ; '.'
00000000002140f2         db  0x00 ; '.'
00000000002140f3         db  0x00 ; '.'
00000000002140f4         db  0x00 ; '.'
00000000002140f5         db  0x00 ; '.'
00000000002140f6         db  0x00 ; '.'
00000000002140f7         db  0x00 ; '.'
00000000002140f8         db  0x8d ; '.'
00000000002140f9         db  0xf2 ; '.'
00000000002140fa         db  0x00 ; '.'
00000000002140fb         db  0x00 ; '.'
00000000002140fc         db  0x00 ; '.'
00000000002140fd         db  0x00 ; '.'
00000000002140fe         db  0x00 ; '.'
00000000002140ff         db  0x00 ; '.'
0000000000214100         db  0x05 ; '.'
0000000000214101         db  0x00 ; '.'
0000000000214102         db  0x00 ; '.'
0000000000214103         db  0x00 ; '.'
0000000000214104         db  0x00 ; '.'
0000000000214105         db  0x00 ; '.'
0000000000214106         db  0x00 ; '.'
0000000000214107         db  0x00 ; '.'
0000000000214108         db  0x01 ; '.'
0000000000214109         db  0x00 ; '.'
000000000021410a         db  0x00 ; '.'
000000000021410b         db  0x00 ; '.'
000000000021410c         db  0x00 ; '.'
000000000021410d         db  0x00 ; '.'
000000000021410e         db  0x00 ; '.'
000000000021410f         db  0x00 ; '.'
0000000000214110         db  0x05 ; '.'
0000000000214111         db  0x00 ; '.'
0000000000214112         db  0x00 ; '.'
0000000000214113         db  0x00 ; '.'
0000000000214114         db  0x00 ; '.'
0000000000214115         db  0x00 ; '.'
0000000000214116         db  0x00 ; '.'
0000000000214117         db  0x00 ; '.'
0000000000214118         db  0xbf ; '.'
0000000000214119         db  0xf2 ; '.'
000000000021411a         db  0x00 ; '.'
000000000021411b         db  0x00 ; '.'
000000000021411c         db  0x00 ; '.'
000000000021411d         db  0x00 ; '.'
000000000021411e         db  0x00 ; '.'
000000000021411f         db  0x00 ; '.'
0000000000214120         db  0x00 ; '.'
0000000000214121         db  0x00 ; '.'
0000000000214122         db  0x00 ; '.'
0000000000214123         db  0x00 ; '.'
0000000000214124         db  0x00 ; '.'
0000000000214125         db  0x00 ; '.'
0000000000214126         db  0x00 ; '.'
0000000000214127         db  0x00 ; '.'
0000000000214128         db  0xc6 ; '.'
0000000000214129         db  0xf2 ; '.'
000000000021412a         db  0x00 ; '.'
000000000021412b         db  0x00 ; '.'
000000000021412c         db  0x00 ; '.'
000000000021412d         db  0x00 ; '.'
000000000021412e         db  0x00 ; '.'
000000000021412f         db  0x00 ; '.'
0000000000214130         db  0x04 ; '.'
0000000000214131         db  0x00 ; '.'
0000000000214132         db  0x00 ; '.'
0000000000214133         db  0x00 ; '.'
0000000000214134         db  0x00 ; '.'
0000000000214135         db  0x00 ; '.'
0000000000214136         db  0x00 ; '.'
0000000000214137         db  0x00 ; '.'
0000000000214138         db  0x01 ; '.'
0000000000214139         db  0x00 ; '.'
000000000021413a         db  0x00 ; '.'
000000000021413b         db  0x00 ; '.'
000000000021413c         db  0x00 ; '.'
000000000021413d         db  0x00 ; '.'
000000000021413e         db  0x00 ; '.'
000000000021413f         db  0x00 ; '.'
0000000000214140         db  0x06 ; '.'
0000000000214141         db  0x00 ; '.'
0000000000214142         db  0x00 ; '.'
0000000000214143         db  0x00 ; '.'
0000000000214144         db  0x00 ; '.'
0000000000214145         db  0x00 ; '.'
0000000000214146         db  0x00 ; '.'
0000000000214147         db  0x00 ; '.'
0000000000214148         db  0x97 ; '.'
0000000000214149         db  0xf2 ; '.'
000000000021414a         db  0x00 ; '.'
000000000021414b         db  0x00 ; '.'
000000000021414c         db  0x00 ; '.'
000000000021414d         db  0x00 ; '.'
000000000021414e         db  0x00 ; '.'
000000000021414f         db  0x00 ; '.'
0000000000214150         db  0x01 ; '.'
0000000000214151         db  0x00 ; '.'
0000000000214152         db  0x00 ; '.'
0000000000214153         db  0x00 ; '.'
0000000000214154         db  0x00 ; '.'
0000000000214155         db  0x00 ; '.'
0000000000214156         db  0x00 ; '.'
0000000000214157         db  0x00 ; '.'
0000000000214158         db  0x9e ; '.'
0000000000214159         db  0xf2 ; '.'
000000000021415a         db  0x00 ; '.'
000000000021415b         db  0x00 ; '.'
000000000021415c         db  0x00 ; '.'
000000000021415d         db  0x00 ; '.'
000000000021415e         db  0x00 ; '.'
000000000021415f         db  0x00 ; '.'
0000000000214160         db  0x05 ; '.'
0000000000214161         db  0x00 ; '.'
0000000000214162         db  0x00 ; '.'
0000000000214163         db  0x00 ; '.'
0000000000214164         db  0x00 ; '.'
0000000000214165         db  0x00 ; '.'
0000000000214166         db  0x00 ; '.'
0000000000214167         db  0x00 ; '.'
0000000000214168         db  0x01 ; '.'
0000000000214169         db  0x00 ; '.'
000000000021416a         db  0x00 ; '.'
000000000021416b         db  0x00 ; '.'
000000000021416c         db  0x00 ; '.'
000000000021416d         db  0x00 ; '.'
000000000021416e         db  0x00 ; '.'
000000000021416f         db  0x00 ; '.'
0000000000214170         db  0x07 ; '.'
0000000000214171         db  0x00 ; '.'
0000000000214172         db  0x00 ; '.'
0000000000214173         db  0x00 ; '.'
0000000000214174         db  0x00 ; '.'
0000000000214175         db  0x00 ; '.'
0000000000214176         db  0x00 ; '.'
0000000000214177         db  0x00 ; '.'
0000000000214178         db  0xa5 ; '.'
0000000000214179         db  0xf2 ; '.'
000000000021417a         db  0x00 ; '.'
000000000021417b         db  0x00 ; '.'
000000000021417c         db  0x00 ; '.'
000000000021417d         db  0x00 ; '.'
000000000021417e         db  0x00 ; '.'
000000000021417f         db  0x00 ; '.'
0000000000214180         db  0x01 ; '.'
0000000000214181         db  0x00 ; '.'
0000000000214182         db  0x00 ; '.'
0000000000214183         db  0x00 ; '.'
0000000000214184         db  0x00 ; '.'
0000000000214185         db  0x00 ; '.'
0000000000214186         db  0x00 ; '.'
0000000000214187         db  0x00 ; '.'
0000000000214188         db  0xab ; '.'
0000000000214189         db  0xf2 ; '.'
000000000021418a         db  0x00 ; '.'
000000000021418b         db  0x00 ; '.'
000000000021418c         db  0x00 ; '.'
000000000021418d         db  0x00 ; '.'
000000000021418e         db  0x00 ; '.'
000000000021418f         db  0x00 ; '.'
0000000000214190         db  0x05 ; '.'
0000000000214191         db  0x00 ; '.'
0000000000214192         db  0x00 ; '.'
0000000000214193         db  0x00 ; '.'
0000000000214194         db  0x00 ; '.'
0000000000214195         db  0x00 ; '.'
0000000000214196         db  0x00 ; '.'
0000000000214197         db  0x00 ; '.'
0000000000214198         db  0x01 ; '.'
0000000000214199         db  0x00 ; '.'
000000000021419a         db  0x00 ; '.'
000000000021419b         db  0x00 ; '.'
000000000021419c         db  0x00 ; '.'
000000000021419d         db  0x00 ; '.'
000000000021419e         db  0x00 ; '.'
000000000021419f         db  0x00 ; '.'
00000000002141a0         db  0x08 ; '.'
00000000002141a1         db  0x00 ; '.'
00000000002141a2         db  0x00 ; '.'
00000000002141a3         db  0x00 ; '.'
00000000002141a4         db  0x00 ; '.'
00000000002141a5         db  0x00 ; '.'
00000000002141a6         db  0x00 ; '.'
00000000002141a7         db  0x00 ; '.'
00000000002141a8         db  0xb1 ; '.'
00000000002141a9         db  0xf2 ; '.'
00000000002141aa         db  0x00 ; '.'
00000000002141ab         db  0x00 ; '.'
00000000002141ac         db  0x00 ; '.'
00000000002141ad         db  0x00 ; '.'
00000000002141ae         db  0x00 ; '.'
00000000002141af         db  0x00 ; '.'
00000000002141b0         db  0x01 ; '.'
00000000002141b1         db  0x00 ; '.'
00000000002141b2         db  0x00 ; '.'
00000000002141b3         db  0x00 ; '.'
00000000002141b4         db  0x00 ; '.'
00000000002141b5         db  0x00 ; '.'
00000000002141b6         db  0x00 ; '.'
00000000002141b7         db  0x00 ; '.'
00000000002141b8         db  0xb8 ; '.'
00000000002141b9         db  0xf2 ; '.'
00000000002141ba         db  0x00 ; '.'
00000000002141bb         db  0x00 ; '.'
00000000002141bc         db  0x00 ; '.'
00000000002141bd         db  0x00 ; '.'
00000000002141be         db  0x00 ; '.'
00000000002141bf         db  0x00 ; '.'
00000000002141c0         db  0x05 ; '.'
00000000002141c1         db  0x00 ; '.'
00000000002141c2         db  0x00 ; '.'
00000000002141c3         db  0x00 ; '.'
00000000002141c4         db  0x00 ; '.'
00000000002141c5         db  0x00 ; '.'
00000000002141c6         db  0x00 ; '.'
00000000002141c7         db  0x00 ; '.'
00000000002141c8         db  0x01 ; '.'
00000000002141c9         db  0x00 ; '.'
00000000002141ca         db  0x00 ; '.'
00000000002141cb         db  0x00 ; '.'
00000000002141cc         db  0x00 ; '.'
00000000002141cd         db  0x00 ; '.'
00000000002141ce         db  0x00 ; '.'
00000000002141cf         db  0x00 ; '.'
00000000002141d0         db  0x09 ; '.'
00000000002141d1         db  0x00 ; '.'
00000000002141d2         db  0x00 ; '.'
00000000002141d3         db  0x00 ; '.'
00000000002141d4         db  0x00 ; '.'
00000000002141d5         db  0x00 ; '.'
00000000002141d6         db  0x00 ; '.'
00000000002141d7         db  0x00 ; '.'
00000000002141d8         db  0xbe ; '.'
00000000002141d9         db  0xf2 ; '.'
00000000002141da         db  0x00 ; '.'
00000000002141db         db  0x00 ; '.'
00000000002141dc         db  0x00 ; '.'
00000000002141dd         db  0x00 ; '.'
00000000002141de         db  0x00 ; '.'
00000000002141df         db  0x00 ; '.'
00000000002141e0         db  0x01 ; '.'
00000000002141e1         db  0x00 ; '.'
00000000002141e2         db  0x00 ; '.'
00000000002141e3         db  0x00 ; '.'
00000000002141e4         db  0x00 ; '.'
00000000002141e5         db  0x00 ; '.'
00000000002141e6         db  0x00 ; '.'
00000000002141e7         db  0x00 ; '.'
00000000002141e8         db  0xc5 ; '.'
00000000002141e9         db  0xf2 ; '.'
00000000002141ea         db  0x00 ; '.'
00000000002141eb         db  0x00 ; '.'
00000000002141ec         db  0x00 ; '.'
00000000002141ed         db  0x00 ; '.'
00000000002141ee         db  0x00 ; '.'
00000000002141ef         db  0x00 ; '.'
00000000002141f0         db  0x04 ; '.'
00000000002141f1         db  0x00 ; '.'
00000000002141f2         db  0x00 ; '.'
00000000002141f3         db  0x00 ; '.'
00000000002141f4         db  0x00 ; '.'
00000000002141f5         db  0x00 ; '.'
00000000002141f6         db  0x00 ; '.'
00000000002141f7         db  0x00 ; '.'
00000000002141f8         db  0x01 ; '.'
00000000002141f9         db  0x00 ; '.'
00000000002141fa         db  0x00 ; '.'
00000000002141fb         db  0x00 ; '.'
00000000002141fc         db  0x00 ; '.'
00000000002141fd         db  0x00 ; '.'
00000000002141fe         db  0x00 ; '.'
00000000002141ff         db  0x00 ; '.'
0000000000214200         db  0x0a ; '.'
0000000000214201         db  0x00 ; '.'
0000000000214202         db  0x00 ; '.'
0000000000214203         db  0x00 ; '.'
0000000000214204         db  0x00 ; '.'
0000000000214205         db  0x00 ; '.'
0000000000214206         db  0x00 ; '.'
0000000000214207         db  0x00 ; '.'
0000000000214208         db  0xcb ; '.'
0000000000214209         db  0xf2 ; '.'
000000000021420a         db  0x00 ; '.'
000000000021420b         db  0x00 ; '.'
000000000021420c         db  0x00 ; '.'
000000000021420d         db  0x00 ; '.'
000000000021420e         db  0x00 ; '.'
000000000021420f         db  0x00 ; '.'
0000000000214210         db  0x02 ; '.'
0000000000214211         db  0x00 ; '.'
0000000000214212         db  0x00 ; '.'
0000000000214213         db  0x00 ; '.'
0000000000214214         db  0x00 ; '.'
0000000000214215         db  0x00 ; '.'
0000000000214216         db  0x00 ; '.'
0000000000214217         db  0x00 ; '.'
0000000000214218         db  0xd2 ; '.'
0000000000214219         db  0xf2 ; '.'
000000000021421a         db  0x00 ; '.'
000000000021421b         db  0x00 ; '.'
000000000021421c         db  0x00 ; '.'
000000000021421d         db  0x00 ; '.'
000000000021421e         db  0x00 ; '.'
000000000021421f         db  0x00 ; '.'
0000000000214220         db  0x00 ; '.'
0000000000214221         db  0x00 ; '.'
0000000000214222         db  0x00 ; '.'
0000000000214223         db  0x00 ; '.'
0000000000214224         db  0x00 ; '.'
0000000000214225         db  0x00 ; '.'
0000000000214226         db  0x00 ; '.'
0000000000214227         db  0x00 ; '.'
0000000000214228         db  0x00 ; '.'
0000000000214229         db  0x00 ; '.'
000000000021422a         db  0x00 ; '.'
000000000021422b         db  0x00 ; '.'
000000000021422c         db  0x00 ; '.'
000000000021422d         db  0x00 ; '.'
000000000021422e         db  0x00 ; '.'
000000000021422f         db  0x00 ; '.'
0000000000214230         db  0x0b ; '.'
0000000000214231         db  0x00 ; '.'
0000000000214232         db  0x00 ; '.'
0000000000214233         db  0x00 ; '.'
0000000000214234         db  0x00 ; '.'
0000000000214235         db  0x00 ; '.'
0000000000214236         db  0x00 ; '.'
0000000000214237         db  0x00 ; '.'
0000000000214238         db  0xdd ; '.'
0000000000214239         db  0xf2 ; '.'
000000000021423a         db  0x00 ; '.'
000000000021423b         db  0x00 ; '.'
000000000021423c         db  0x00 ; '.'
000000000021423d         db  0x00 ; '.'
000000000021423e         db  0x00 ; '.'
000000000021423f         db  0x00 ; '.'
0000000000214240         db  0x02 ; '.'
0000000000214241         db  0x00 ; '.'
0000000000214242         db  0x00 ; '.'
0000000000214243         db  0x00 ; '.'
0000000000214244         db  0x00 ; '.'
0000000000214245         db  0x00 ; '.'
0000000000214246         db  0x00 ; '.'
0000000000214247         db  0x00 ; '.'
0000000000214248         db  0xe2 ; '.'
0000000000214249         db  0xf2 ; '.'
000000000021424a         db  0x00 ; '.'
000000000021424b         db  0x00 ; '.'
000000000021424c         db  0x00 ; '.'
000000000021424d         db  0x00 ; '.'
000000000021424e         db  0x00 ; '.'
000000000021424f         db  0x00 ; '.'
0000000000214250         db  0x00 ; '.'
0000000000214251         db  0x00 ; '.'
0000000000214252         db  0x00 ; '.'
0000000000214253         db  0x00 ; '.'
0000000000214254         db  0x00 ; '.'
0000000000214255         db  0x00 ; '.'
0000000000214256         db  0x00 ; '.'
0000000000214257         db  0x00 ; '.'
0000000000214258         db  0x00 ; '.'
0000000000214259         db  0x00 ; '.'
000000000021425a         db  0x00 ; '.'
000000000021425b         db  0x00 ; '.'
000000000021425c         db  0x00 ; '.'
000000000021425d         db  0x00 ; '.'
000000000021425e         db  0x00 ; '.'
000000000021425f         db  0x00 ; '.'
                     Version:
0000000000214260         dq         0x000000000000ff76                          ; "8.31", DATA XREF=main+989
                     exit_failure:
0000000000214268         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23, xstrtol_fatal+35
000000000021426c         db  0x00 ; '.'
000000000021426d         db  0x00 ; '.'
000000000021426e         db  0x00 ; '.'
000000000021426f         db  0x00 ; '.'
0000000000214270         db  0x00 ; '.'
0000000000214271         db  0x00 ; '.'
0000000000214272         db  0x00 ; '.'
0000000000214273         db  0x00 ; '.'
0000000000214274         db  0x00 ; '.'
0000000000214275         db  0x00 ; '.'
0000000000214276         db  0x00 ; '.'
0000000000214277         db  0x00 ; '.'
0000000000214278         db  0x00 ; '.'
0000000000214279         db  0x00 ; '.'
000000000021427a         db  0x00 ; '.'
000000000021427b         db  0x00 ; '.'
000000000021427c         db  0x00 ; '.'
000000000021427d         db  0x00 ; '.'
000000000021427e         db  0x00 ; '.'
000000000021427f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000214280         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000214281         db  0x00 ; '.'
0000000000214282         db  0x00 ; '.'
0000000000214283         db  0x00 ; '.'
0000000000214284         db  0x00 ; '.'
0000000000214285         db  0x00 ; '.'
0000000000214286         db  0x00 ; '.'
0000000000214287         db  0x00 ; '.'
0000000000214288         db  0x00 ; '.'
0000000000214289         db  0x00 ; '.'
000000000021428a         db  0x00 ; '.'
000000000021428b         db  0x00 ; '.'
000000000021428c         db  0x00 ; '.'
000000000021428d         db  0x00 ; '.'
000000000021428e         db  0x00 ; '.'
000000000021428f         db  0x00 ; '.'
0000000000214290         db  0x00 ; '.'
0000000000214291         db  0x00 ; '.'
0000000000214292         db  0x00 ; '.'
0000000000214293         db  0x00 ; '.'
0000000000214294         db  0x00 ; '.'
0000000000214295         db  0x00 ; '.'
0000000000214296         db  0x00 ; '.'
0000000000214297         db  0x00 ; '.'
0000000000214298         db  0x00 ; '.'
0000000000214299         db  0x00 ; '.'
000000000021429a         db  0x00 ; '.'
000000000021429b         db  0x00 ; '.'
000000000021429c         db  0x00 ; '.'
000000000021429d         db  0x00 ; '.'
000000000021429e         db  0x00 ; '.'
000000000021429f         db  0x00 ; '.'
00000000002142a0         db  0x00 ; '.'
00000000002142a1         db  0x00 ; '.'
00000000002142a2         db  0x00 ; '.'
00000000002142a3         db  0x00 ; '.'
00000000002142a4         db  0x00 ; '.'
00000000002142a5         db  0x00 ; '.'
00000000002142a6         db  0x00 ; '.'
00000000002142a7         db  0x00 ; '.'
00000000002142a8         db  0x00 ; '.'
00000000002142a9         db  0x00 ; '.'
00000000002142aa         db  0x00 ; '.'
00000000002142ab         db  0x00 ; '.'
00000000002142ac         db  0x00 ; '.'
00000000002142ad         db  0x00 ; '.'
00000000002142ae         db  0x00 ; '.'
00000000002142af         db  0x00 ; '.'
00000000002142b0         db  0x00 ; '.'
00000000002142b1         db  0x00 ; '.'
00000000002142b2         db  0x00 ; '.'
00000000002142b3         db  0x00 ; '.'
00000000002142b4         db  0x00 ; '.'
00000000002142b5         db  0x00 ; '.'
00000000002142b6         db  0x00 ; '.'
00000000002142b7         db  0x00 ; '.'
                     nslots:
00000000002142b8         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
00000000002142bc         align      64
                     slotvec:
00000000002142c0         dq         0x00000000002142d0                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
00000000002142c8         db  0x00 ; '.'
00000000002142c9         db  0x00 ; '.'
00000000002142ca         db  0x00 ; '.'
00000000002142cb         db  0x00 ; '.'
00000000002142cc         db  0x00 ; '.'
00000000002142cd         db  0x00 ; '.'
00000000002142ce         db  0x00 ; '.'
00000000002142cf         db  0x00 ; '.'
                     slotvec0:
00000000002142d0         dq         1.26481e-321, 1.07714e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec
                     statvfs_works_cache.2531:
00000000002142e0         dd         0xffffffff                                  ; DATA XREF=get_fs_usage+36, get_fs_usage+112, get_fs_usage+267
00000000002142e4         db  0x00 ; '.'
00000000002142e5         db  0x00 ; '.'
00000000002142e6         db  0x00 ; '.'
00000000002142e7         db  0x00 ; '.'
                     argmatch_die:
00000000002142e8         db  0xe0 ; '.'
00000000002142e9         db  0xc5 ; '.'
00000000002142ea         db  0x00 ; '.'
00000000002142eb         db  0x00 ; '.'
00000000002142ec         db  0x00 ; '.'
00000000002142ed         db  0x00 ; '.'
00000000002142ee         db  0x00 ; '.'
00000000002142ef         db  0x00 ; '.'
                     __TMC_END__:
00000000002142f0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7
00000000002142f1         db  0x00 ; '.'
00000000002142f2         db  0x00 ; '.'
00000000002142f3         db  0x00 ; '.'
00000000002142f4         db  0x00 ; '.'
00000000002142f5         db  0x00 ; '.'
00000000002142f6         db  0x00 ; '.'
00000000002142f7         db  0x00 ; '.'
00000000002142f8         db  0x00 ; '.'
00000000002142f9         db  0x00 ; '.'
00000000002142fa         db  0x00 ; '.'
00000000002142fb         db  0x00 ; '.'
00000000002142fc         db  0x00 ; '.'
00000000002142fd         db  0x00 ; '.'
00000000002142fe         db  0x00 ; '.'
00000000002142ff         db  0x00 ; '.'


        ; Section .bss
        ; Range: [0x214300; 0x214580[ (640 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
0000000000214300         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+102
0000000000214301         db  0x00 ; '.'
0000000000214302         db  0x00 ; '.'
0000000000214303         db  0x00 ; '.'
0000000000214304         db  0x00 ; '.'
0000000000214305         db  0x00 ; '.'
0000000000214306         db  0x00 ; '.'
0000000000214307         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
0000000000214308         db  0x00 ; '.'                                         ; DATA XREF=main+982, main+3250, main+3312, main+3369, usage+125, usage+162, usage+199, usage+236, usage+273, usage+310, usage+347
0000000000214309         db  0x00 ; '.'
000000000021430a         db  0x00 ; '.'
000000000021430b         db  0x00 ; '.'
000000000021430c         db  0x00 ; '.'
000000000021430d         db  0x00 ; '.'
000000000021430e         db  0x00 ; '.'
000000000021430f         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
0000000000214310         db  0x00 ; '.'                                         ; DATA XREF=main+1345, main+1426, main+1459, main+1538, main+1957, main+2040, main+4906
0000000000214311         db  0x00 ; '.'
0000000000214312         db  0x00 ; '.'
0000000000214313         db  0x00 ; '.'
0000000000214314         db  0x00 ; '.'
0000000000214315         db  0x00 ; '.'
0000000000214316         db  0x00 ; '.'
0000000000214317         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
0000000000214318         db  0x00 ; '.'                                         ; DATA XREF=main+514, main+548, main+643, main+925, main+1051
0000000000214319         db  0x00 ; '.'
000000000021431a         db  0x00 ; '.'
000000000021431b         db  0x00 ; '.'
000000000021431c         db  0x00 ; '.'
000000000021431d         db  0x00 ; '.'
000000000021431e         db  0x00 ; '.'
000000000021431f         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
0000000000214320         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
0000000000214321         db  0x00 ; '.'
0000000000214322         db  0x00 ; '.'
0000000000214323         db  0x00 ; '.'
0000000000214324         db  0x00 ; '.'
0000000000214325         db  0x00 ; '.'
0000000000214326         db  0x00 ; '.'
0000000000214327         db  0x00 ; '.'
0000000000214328         db  0x00 ; '.'
0000000000214329         db  0x00 ; '.'
000000000021432a         db  0x00 ; '.'
000000000021432b         db  0x00 ; '.'
000000000021432c         db  0x00 ; '.'
000000000021432d         db  0x00 ; '.'
000000000021432e         db  0x00 ; '.'
000000000021432f         db  0x00 ; '.'
0000000000214330         db  0x00 ; '.'
0000000000214331         db  0x00 ; '.'
0000000000214332         db  0x00 ; '.'
0000000000214333         db  0x00 ; '.'
0000000000214334         db  0x00 ; '.'
0000000000214335         db  0x00 ; '.'
0000000000214336         db  0x00 ; '.'
0000000000214337         db  0x00 ; '.'
0000000000214338         db  0x00 ; '.'
0000000000214339         db  0x00 ; '.'
000000000021433a         db  0x00 ; '.'
000000000021433b         db  0x00 ; '.'
000000000021433c         db  0x00 ; '.'
000000000021433d         db  0x00 ; '.'
000000000021433e         db  0x00 ; '.'
000000000021433f         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
0000000000214340         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216
0000000000214341         db  0x00 ; '.'
0000000000214342         db  0x00 ; '.'
0000000000214343         db  0x00 ; '.'
0000000000214344         db  0x00 ; '.'
0000000000214345         db  0x00 ; '.'
0000000000214346         db  0x00 ; '.'
0000000000214347         db  0x00 ; '.'
                     completed.7697:
0000000000214348         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
0000000000214349         db  0x00 ; '.'
000000000021434a         db  0x00 ; '.'
000000000021434b         db  0x00 ; '.'
000000000021434c         db  0x00 ; '.'
000000000021434d         db  0x00 ; '.'
000000000021434e         db  0x00 ; '.'
000000000021434f         db  0x00 ; '.'
0000000000214350         db  0x00 ; '.'
0000000000214351         db  0x00 ; '.'
0000000000214352         db  0x00 ; '.'
0000000000214353         db  0x00 ; '.'
0000000000214354         db  0x00 ; '.'
0000000000214355         db  0x00 ; '.'
0000000000214356         db  0x00 ; '.'
0000000000214357         db  0x00 ; '.'
0000000000214358         db  0x00 ; '.'
0000000000214359         db  0x00 ; '.'
000000000021435a         db  0x00 ; '.'
000000000021435b         db  0x00 ; '.'
000000000021435c         db  0x00 ; '.'
000000000021435d         db  0x00 ; '.'
000000000021435e         db  0x00 ; '.'
000000000021435f         db  0x00 ; '.'
                     nrows:
0000000000214360         db  0x00 ; '.'                                         ; DATA XREF=main+3121, alloc_table_row, alloc_table_row+30, alloc_table_row+60, get_header+126, sub_4730+79
0000000000214361         db  0x00 ; '.'
0000000000214362         db  0x00 ; '.'
0000000000214363         db  0x00 ; '.'
0000000000214364         db  0x00 ; '.'
0000000000214365         db  0x00 ; '.'
0000000000214366         db  0x00 ; '.'
0000000000214367         db  0x00 ; '.'
                     table:
0000000000214368         db  0x00 ; '.'                                         ; DATA XREF=main+3150, main+3291, main+3352, alloc_table_row+13, alloc_table_row+76, get_header+133, sub_4730+86
0000000000214369         db  0x00 ; '.'
000000000021436a         db  0x00 ; '.'
000000000021436b         db  0x00 ; '.'
000000000021436c         db  0x00 ; '.'
000000000021436d         db  0x00 ; '.'
000000000021436e         db  0x00 ; '.'
000000000021436f         db  0x00 ; '.'
                     ncolumns:
0000000000214370         db  0x00 ; '.'                                         ; DATA XREF=main+2910, main+3134, main+3279, main+3669, alloc_table_row+67, get_header+41, get_header+192, alloc_field+16, alloc_field+40, alloc_field+84, get_dev+898
0000000000214371         db  0x00 ; '.'
0000000000214372         db  0x00 ; '.'
0000000000214373         db  0x00 ; '.'
0000000000214374         db  0x00 ; '.'
0000000000214375         db  0x00 ; '.'
0000000000214376         db  0x00 ; '.'
0000000000214377         db  0x00 ; '.'
                     columns:
0000000000214378         db  0x00 ; '.'                                         ; DATA XREF=main+3196, get_header+55, get_header+166, alloc_field+23, alloc_field+95, get_dev+906, sub_4730+42
0000000000214379         db  0x00 ; '.'
000000000021437a         db  0x00 ; '.'
000000000021437b         db  0x00 ; '.'
000000000021437c         db  0x00 ; '.'
000000000021437d         db  0x00 ; '.'
000000000021437e         db  0x00 ; '.'
000000000021437f         db  0x00 ; '.'
                     header_mode:
0000000000214380         db  0x00 ; '.'                                         ; DATA XREF=main+602, main+650, main+704, main+717, main+777, main+800, main+1117, main+1146, main+1759, main+1772, main+1803
0000000000214381         db  0x00 ; '.'
0000000000214382         db  0x00 ; '.'
0000000000214383         db  0x00 ; '.'
0000000000214384         db  0x00 ; '.'
0000000000214385         db  0x00 ; '.'
0000000000214386         db  0x00 ; '.'
0000000000214387         db  0x00 ; '.'
0000000000214388         db  0x00 ; '.'
0000000000214389         db  0x00 ; '.'
000000000021438a         db  0x00 ; '.'
000000000021438b         db  0x00 ; '.'
000000000021438c         db  0x00 ; '.'
000000000021438d         db  0x00 ; '.'
000000000021438e         db  0x00 ; '.'
000000000021438f         db  0x00 ; '.'
0000000000214390         db  0x00 ; '.'
0000000000214391         db  0x00 ; '.'
0000000000214392         db  0x00 ; '.'
0000000000214393         db  0x00 ; '.'
0000000000214394         db  0x00 ; '.'
0000000000214395         db  0x00 ; '.'
0000000000214396         db  0x00 ; '.'
0000000000214397         db  0x00 ; '.'
0000000000214398         db  0x00 ; '.'
0000000000214399         db  0x00 ; '.'
000000000021439a         db  0x00 ; '.'
000000000021439b         db  0x00 ; '.'
000000000021439c         db  0x00 ; '.'
000000000021439d         db  0x00 ; '.'
000000000021439e         db  0x00 ; '.'
000000000021439f         db  0x00 ; '.'
                     grand_fsu:
00000000002143a0         db  0x00 ; '.'                                         ; DATA XREF=main+219, main+3079
00000000002143a1         db  0x00 ; '.'
00000000002143a2         db  0x00 ; '.'
00000000002143a3         db  0x00 ; '.'
00000000002143a4         db  0x00 ; '.'
00000000002143a5         db  0x00 ; '.'
00000000002143a6         db  0x00 ; '.'
00000000002143a7         db  0x00 ; '.'
                     qword_2143a8:
00000000002143a8         db  0x00 ; '.'                                         ; DATA XREF=get_dev+821
00000000002143a9         db  0x00 ; '.'
00000000002143aa         db  0x00 ; '.'
00000000002143ab         db  0x00 ; '.'
00000000002143ac         db  0x00 ; '.'
00000000002143ad         db  0x00 ; '.'
00000000002143ae         db  0x00 ; '.'
00000000002143af         db  0x00 ; '.'
                     qword_2143b0:
00000000002143b0         db  0x00 ; '.'                                         ; DATA XREF=get_dev+838
00000000002143b1         db  0x00 ; '.'
00000000002143b2         db  0x00 ; '.'
00000000002143b3         db  0x00 ; '.'
00000000002143b4         db  0x00 ; '.'
00000000002143b5         db  0x00 ; '.'
00000000002143b6         db  0x00 ; '.'
00000000002143b7         db  0x00 ; '.'
                     qword_2143b8:
00000000002143b8         db  0x00 ; '.'                                         ; DATA XREF=get_dev+865, get_dev+889, sub_4a7e+626, sub_4a7e+646, sub_4a7e+730
00000000002143b9         db  0x00 ; '.'
00000000002143ba         db  0x00 ; '.'
00000000002143bb         db  0x00 ; '.'
00000000002143bc         db  0x00 ; '.'
00000000002143bd         db  0x00 ; '.'
00000000002143be         db  0x00 ; '.'
00000000002143bf         db  0x00 ; '.'
                     byte_2143c0:
00000000002143c0         db  0x00 ; '.'                                         ; DATA XREF=get_dev+851, sub_4a7e+633, sub_4a7e+723
00000000002143c1         db  0x00 ; '.'
00000000002143c2         db  0x00 ; '.'
00000000002143c3         db  0x00 ; '.'
00000000002143c4         db  0x00 ; '.'
00000000002143c5         db  0x00 ; '.'
00000000002143c6         db  0x00 ; '.'
00000000002143c7         db  0x00 ; '.'
                     qword_2143c8:
00000000002143c8         db  0x00 ; '.'                                         ; DATA XREF=get_dev+791
00000000002143c9         db  0x00 ; '.'
00000000002143ca         db  0x00 ; '.'
00000000002143cb         db  0x00 ; '.'
00000000002143cc         db  0x00 ; '.'
00000000002143cd         db  0x00 ; '.'
00000000002143ce         db  0x00 ; '.'
00000000002143cf         db  0x00 ; '.'
                     qword_2143d0:
00000000002143d0         db  0x00 ; '.'                                         ; DATA XREF=get_dev+804
00000000002143d1         db  0x00 ; '.'
00000000002143d2         db  0x00 ; '.'
00000000002143d3         db  0x00 ; '.'
00000000002143d4         db  0x00 ; '.'
00000000002143d5         db  0x00 ; '.'
00000000002143d6         db  0x00 ; '.'
00000000002143d7         db  0x00 ; '.'
                     print_grand_total:
00000000002143d8         db  0x00 ; '.'                                         ; DATA XREF=main+212, main+688, main+3049, main+4579, get_dev+769
                     print_type:
00000000002143d9         db  0x00 ; '.'                                         ; DATA XREF=main+188, main+630, main+813, main+1866, main+2680, main+2763, main+2858, main+5040
00000000002143da         db  0x00 ; '.'
00000000002143db         db  0x00 ; '.'
00000000002143dc         db  0x00 ; '.'
00000000002143dd         db  0x00 ; '.'
00000000002143de         db  0x00 ; '.'
00000000002143df         db  0x00 ; '.'
                     mount_list:
00000000002143e0         db  0x00 ; '.'                                         ; DATA XREF=main+1732, main+2122, main+2215, main+2486, main+4095, main+4173, main+4733, main+4803, main+5464
00000000002143e1         db  0x00 ; '.'
00000000002143e2         db  0x00 ; '.'
00000000002143e3         db  0x00 ; '.'
00000000002143e4         db  0x00 ; '.'
00000000002143e5         db  0x00 ; '.'
00000000002143e6         db  0x00 ; '.'
00000000002143e7         db  0x00 ; '.'
                     fs_exclude_list:
00000000002143e8         db  0x00 ; '.'                                         ; DATA XREF=main+153, main+937, main+944, main+1184, main+5026, main+5380, excluded_fstype+4
00000000002143e9         db  0x00 ; '.'
00000000002143ea         db  0x00 ; '.'
00000000002143eb         db  0x00 ; '.'
00000000002143ec         db  0x00 ; '.'
00000000002143ed         db  0x00 ; '.'
00000000002143ee         db  0x00 ; '.'
00000000002143ef         db  0x00 ; '.'
                     fs_select_list:
00000000002143f0         db  0x00 ; '.'                                         ; DATA XREF=main+142, main+1063, main+1070, main+1156, main+1705, main+4944, selected_fstype+4
00000000002143f1         db  0x00 ; '.'
00000000002143f2         db  0x00 ; '.'
00000000002143f3         db  0x00 ; '.'
00000000002143f4         db  0x00 ; '.'
00000000002143f5         db  0x00 ; '.'
00000000002143f6         db  0x00 ; '.'
00000000002143f7         db  0x00 ; '.'
                     exit_status:
00000000002143f8         db  0x00 ; '.'                                         ; DATA XREF=main+202, main+1616, main+3580, main+3708, main+5164, main+5289, get_dev+337
00000000002143f9         db  0x00 ; '.'
00000000002143fa         db  0x00 ; '.'
00000000002143fb         db  0x00 ; '.'
                     require_sync:
00000000002143fc         db  0x00 ; '.'                                         ; DATA XREF=main+342, main+888, main+1745
                     file_systems_processed:
00000000002143fd         db  0x00 ; '.'                                         ; DATA XREF=main+195, main+3036, sub_4a7e+210
00000000002143fe         db  0x00 ; '.'
00000000002143ff         db  0x00 ; '.'
                     output_block_size:
0000000000214400         db  0x00 ; '.'                                         ; DATA XREF=main+406, main+466, main+521, main+746, main+851, main+1685, main+1830, get_header+295, get_header+408, get_dev+665
0000000000214401         db  0x00 ; '.'
0000000000214402         db  0x00 ; '.'
0000000000214403         db  0x00 ; '.'
0000000000214404         db  0x00 ; '.'
0000000000214405         db  0x00 ; '.'
0000000000214406         db  0x00 ; '.'
0000000000214407         db  0x00 ; '.'
                     human_output_opts:
0000000000214408         db  0x00 ; '.'                                         ; DATA XREF=main+178, main+396, main+456, main+528, main+736, main+841, main+1104, main+1133, main+1652, main+1837, df_readable+17
0000000000214409         db  0x00 ; '.'
000000000021440a         db  0x00 ; '.'
000000000021440b         db  0x00 ; '.'
                     show_listed_fs:
000000000021440c         db  0x00 ; '.'                                         ; DATA XREF=main+171, main+1987, main+4306, get_dev+150, sub_48a0+349, sub_4a7e+197
                     show_local_fs:
000000000021440d         db  0x00 ; '.'                                         ; DATA XREF=main+872, main+4284, main+4931, main+5066, get_dev+83
                     show_all_fs:
000000000021440e         db  0x00 ; '.'                                         ; DATA XREF=main+164, main+904, main+4088, main+4297, main+4918, get_dev+141, sub_48a0+336, sub_4a7e+167, sub_4a7e+188, sub_4a7e+295
000000000021440f         db  0x00 ; '.'
                     devlist_table:
0000000000214410         db  0x00 ; '.'                                         ; DATA XREF=main+4152, main+4226, main+4382, main+4780, main+4792, sub_4a7e+392
0000000000214411         db  0x00 ; '.'
0000000000214412         db  0x00 ; '.'
0000000000214413         db  0x00 ; '.'
0000000000214414         db  0x00 ; '.'
0000000000214415         db  0x00 ; '.'
0000000000214416         db  0x00 ; '.'
0000000000214417         db  0x00 ; '.'
                     ignore_EPIPE:
0000000000214418         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
0000000000214419         db  0x00 ; '.'
000000000021441a         db  0x00 ; '.'
000000000021441b         db  0x00 ; '.'
000000000021441c         db  0x00 ; '.'
000000000021441d         db  0x00 ; '.'
000000000021441e         db  0x00 ; '.'
000000000021441f         db  0x00 ; '.'
                     file_name:
0000000000214420         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
0000000000214421         db  0x00 ; '.'
0000000000214422         db  0x00 ; '.'
0000000000214423         db  0x00 ; '.'
0000000000214424         db  0x00 ; '.'
0000000000214425         db  0x00 ; '.'
0000000000214426         db  0x00 ; '.'
0000000000214427         db  0x00 ; '.'
                     program_name:
0000000000214428         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
0000000000214429         db  0x00 ; '.'
000000000021442a         db  0x00 ; '.'
000000000021442b         db  0x00 ; '.'
000000000021442c         db  0x00 ; '.'
000000000021442d         db  0x00 ; '.'
000000000021442e         db  0x00 ; '.'
000000000021442f         db  0x00 ; '.'
0000000000214430         db  0x00 ; '.'
0000000000214431         db  0x00 ; '.'
0000000000214432         db  0x00 ; '.'
0000000000214433         db  0x00 ; '.'
0000000000214434         db  0x00 ; '.'
0000000000214435         db  0x00 ; '.'
0000000000214436         db  0x00 ; '.'
0000000000214437         db  0x00 ; '.'
0000000000214438         db  0x00 ; '.'
0000000000214439         db  0x00 ; '.'
000000000021443a         db  0x00 ; '.'
000000000021443b         db  0x00 ; '.'
000000000021443c         db  0x00 ; '.'
000000000021443d         db  0x00 ; '.'
000000000021443e         db  0x00 ; '.'
000000000021443f         db  0x00 ; '.'
                     slot0:
0000000000214440         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
0000000000214441         db  0x00 ; '.'
0000000000214442         db  0x00 ; '.'
0000000000214443         db  0x00 ; '.'
0000000000214444         db  0x00 ; '.'
0000000000214445         db  0x00 ; '.'
0000000000214446         db  0x00 ; '.'
0000000000214447         db  0x00 ; '.'
0000000000214448         db  0x00 ; '.'
0000000000214449         db  0x00 ; '.'
000000000021444a         db  0x00 ; '.'
000000000021444b         db  0x00 ; '.'
000000000021444c         db  0x00 ; '.'
000000000021444d         db  0x00 ; '.'
000000000021444e         db  0x00 ; '.'
000000000021444f         db  0x00 ; '.'
0000000000214450         db  0x00 ; '.'
0000000000214451         db  0x00 ; '.'
0000000000214452         db  0x00 ; '.'
0000000000214453         db  0x00 ; '.'
0000000000214454         db  0x00 ; '.'
0000000000214455         db  0x00 ; '.'
0000000000214456         db  0x00 ; '.'
0000000000214457         db  0x00 ; '.'
0000000000214458         db  0x00 ; '.'
0000000000214459         db  0x00 ; '.'
000000000021445a         db  0x00 ; '.'
000000000021445b         db  0x00 ; '.'
000000000021445c         db  0x00 ; '.'
000000000021445d         db  0x00 ; '.'
000000000021445e         db  0x00 ; '.'
000000000021445f         db  0x00 ; '.'
0000000000214460         db  0x00 ; '.'
0000000000214461         db  0x00 ; '.'
0000000000214462         db  0x00 ; '.'
0000000000214463         db  0x00 ; '.'
0000000000214464         db  0x00 ; '.'
0000000000214465         db  0x00 ; '.'
0000000000214466         db  0x00 ; '.'
0000000000214467         db  0x00 ; '.'
0000000000214468         db  0x00 ; '.'
0000000000214469         db  0x00 ; '.'
000000000021446a         db  0x00 ; '.'
000000000021446b         db  0x00 ; '.'
000000000021446c         db  0x00 ; '.'
000000000021446d         db  0x00 ; '.'
000000000021446e         db  0x00 ; '.'
000000000021446f         db  0x00 ; '.'
0000000000214470         db  0x00 ; '.'
0000000000214471         db  0x00 ; '.'
0000000000214472         db  0x00 ; '.'
0000000000214473         db  0x00 ; '.'
0000000000214474         db  0x00 ; '.'
0000000000214475         db  0x00 ; '.'
0000000000214476         db  0x00 ; '.'
0000000000214477         db  0x00 ; '.'
0000000000214478         db  0x00 ; '.'
0000000000214479         db  0x00 ; '.'
000000000021447a         db  0x00 ; '.'
000000000021447b         db  0x00 ; '.'
000000000021447c         db  0x00 ; '.'
000000000021447d         db  0x00 ; '.'
000000000021447e         db  0x00 ; '.'
000000000021447f         db  0x00 ; '.'
0000000000214480         db  0x00 ; '.'
0000000000214481         db  0x00 ; '.'
0000000000214482         db  0x00 ; '.'
0000000000214483         db  0x00 ; '.'
0000000000214484         db  0x00 ; '.'
0000000000214485         db  0x00 ; '.'
0000000000214486         db  0x00 ; '.'
0000000000214487         db  0x00 ; '.'
0000000000214488         db  0x00 ; '.'
0000000000214489         db  0x00 ; '.'
000000000021448a         db  0x00 ; '.'
000000000021448b         db  0x00 ; '.'
000000000021448c         db  0x00 ; '.'
000000000021448d         db  0x00 ; '.'
000000000021448e         db  0x00 ; '.'
000000000021448f         db  0x00 ; '.'
0000000000214490         db  0x00 ; '.'
0000000000214491         db  0x00 ; '.'
0000000000214492         db  0x00 ; '.'
0000000000214493         db  0x00 ; '.'
0000000000214494         db  0x00 ; '.'
0000000000214495         db  0x00 ; '.'
0000000000214496         db  0x00 ; '.'
0000000000214497         db  0x00 ; '.'
0000000000214498         db  0x00 ; '.'
0000000000214499         db  0x00 ; '.'
000000000021449a         db  0x00 ; '.'
000000000021449b         db  0x00 ; '.'
000000000021449c         db  0x00 ; '.'
000000000021449d         db  0x00 ; '.'
000000000021449e         db  0x00 ; '.'
000000000021449f         db  0x00 ; '.'
00000000002144a0         db  0x00 ; '.'
00000000002144a1         db  0x00 ; '.'
00000000002144a2         db  0x00 ; '.'
00000000002144a3         db  0x00 ; '.'
00000000002144a4         db  0x00 ; '.'
00000000002144a5         db  0x00 ; '.'
00000000002144a6         db  0x00 ; '.'
00000000002144a7         db  0x00 ; '.'
00000000002144a8         db  0x00 ; '.'
00000000002144a9         db  0x00 ; '.'
00000000002144aa         db  0x00 ; '.'
00000000002144ab         db  0x00 ; '.'
00000000002144ac         db  0x00 ; '.'
00000000002144ad         db  0x00 ; '.'
00000000002144ae         db  0x00 ; '.'
00000000002144af         db  0x00 ; '.'
00000000002144b0         db  0x00 ; '.'
00000000002144b1         db  0x00 ; '.'
00000000002144b2         db  0x00 ; '.'
00000000002144b3         db  0x00 ; '.'
00000000002144b4         db  0x00 ; '.'
00000000002144b5         db  0x00 ; '.'
00000000002144b6         db  0x00 ; '.'
00000000002144b7         db  0x00 ; '.'
00000000002144b8         db  0x00 ; '.'
00000000002144b9         db  0x00 ; '.'
00000000002144ba         db  0x00 ; '.'
00000000002144bb         db  0x00 ; '.'
00000000002144bc         db  0x00 ; '.'
00000000002144bd         db  0x00 ; '.'
00000000002144be         db  0x00 ; '.'
00000000002144bf         db  0x00 ; '.'
00000000002144c0         db  0x00 ; '.'
00000000002144c1         db  0x00 ; '.'
00000000002144c2         db  0x00 ; '.'
00000000002144c3         db  0x00 ; '.'
00000000002144c4         db  0x00 ; '.'
00000000002144c5         db  0x00 ; '.'
00000000002144c6         db  0x00 ; '.'
00000000002144c7         db  0x00 ; '.'
00000000002144c8         db  0x00 ; '.'
00000000002144c9         db  0x00 ; '.'
00000000002144ca         db  0x00 ; '.'
00000000002144cb         db  0x00 ; '.'
00000000002144cc         db  0x00 ; '.'
00000000002144cd         db  0x00 ; '.'
00000000002144ce         db  0x00 ; '.'
00000000002144cf         db  0x00 ; '.'
00000000002144d0         db  0x00 ; '.'
00000000002144d1         db  0x00 ; '.'
00000000002144d2         db  0x00 ; '.'
00000000002144d3         db  0x00 ; '.'
00000000002144d4         db  0x00 ; '.'
00000000002144d5         db  0x00 ; '.'
00000000002144d6         db  0x00 ; '.'
00000000002144d7         db  0x00 ; '.'
00000000002144d8         db  0x00 ; '.'
00000000002144d9         db  0x00 ; '.'
00000000002144da         db  0x00 ; '.'
00000000002144db         db  0x00 ; '.'
00000000002144dc         db  0x00 ; '.'
00000000002144dd         db  0x00 ; '.'
00000000002144de         db  0x00 ; '.'
00000000002144df         db  0x00 ; '.'
00000000002144e0         db  0x00 ; '.'
00000000002144e1         db  0x00 ; '.'
00000000002144e2         db  0x00 ; '.'
00000000002144e3         db  0x00 ; '.'
00000000002144e4         db  0x00 ; '.'
00000000002144e5         db  0x00 ; '.'
00000000002144e6         db  0x00 ; '.'
00000000002144e7         db  0x00 ; '.'
00000000002144e8         db  0x00 ; '.'
00000000002144e9         db  0x00 ; '.'
00000000002144ea         db  0x00 ; '.'
00000000002144eb         db  0x00 ; '.'
00000000002144ec         db  0x00 ; '.'
00000000002144ed         db  0x00 ; '.'
00000000002144ee         db  0x00 ; '.'
00000000002144ef         db  0x00 ; '.'
00000000002144f0         db  0x00 ; '.'
00000000002144f1         db  0x00 ; '.'
00000000002144f2         db  0x00 ; '.'
00000000002144f3         db  0x00 ; '.'
00000000002144f4         db  0x00 ; '.'
00000000002144f5         db  0x00 ; '.'
00000000002144f6         db  0x00 ; '.'
00000000002144f7         db  0x00 ; '.'
00000000002144f8         db  0x00 ; '.'
00000000002144f9         db  0x00 ; '.'
00000000002144fa         db  0x00 ; '.'
00000000002144fb         db  0x00 ; '.'
00000000002144fc         db  0x00 ; '.'
00000000002144fd         db  0x00 ; '.'
00000000002144fe         db  0x00 ; '.'
00000000002144ff         db  0x00 ; '.'
0000000000214500         db  0x00 ; '.'
0000000000214501         db  0x00 ; '.'
0000000000214502         db  0x00 ; '.'
0000000000214503         db  0x00 ; '.'
0000000000214504         db  0x00 ; '.'
0000000000214505         db  0x00 ; '.'
0000000000214506         db  0x00 ; '.'
0000000000214507         db  0x00 ; '.'
0000000000214508         db  0x00 ; '.'
0000000000214509         db  0x00 ; '.'
000000000021450a         db  0x00 ; '.'
000000000021450b         db  0x00 ; '.'
000000000021450c         db  0x00 ; '.'
000000000021450d         db  0x00 ; '.'
000000000021450e         db  0x00 ; '.'
000000000021450f         db  0x00 ; '.'
0000000000214510         db  0x00 ; '.'
0000000000214511         db  0x00 ; '.'
0000000000214512         db  0x00 ; '.'
0000000000214513         db  0x00 ; '.'
0000000000214514         db  0x00 ; '.'
0000000000214515         db  0x00 ; '.'
0000000000214516         db  0x00 ; '.'
0000000000214517         db  0x00 ; '.'
0000000000214518         db  0x00 ; '.'
0000000000214519         db  0x00 ; '.'
000000000021451a         db  0x00 ; '.'
000000000021451b         db  0x00 ; '.'
000000000021451c         db  0x00 ; '.'
000000000021451d         db  0x00 ; '.'
000000000021451e         db  0x00 ; '.'
000000000021451f         db  0x00 ; '.'
0000000000214520         db  0x00 ; '.'
0000000000214521         db  0x00 ; '.'
0000000000214522         db  0x00 ; '.'
0000000000214523         db  0x00 ; '.'
0000000000214524         db  0x00 ; '.'
0000000000214525         db  0x00 ; '.'
0000000000214526         db  0x00 ; '.'
0000000000214527         db  0x00 ; '.'
0000000000214528         db  0x00 ; '.'
0000000000214529         db  0x00 ; '.'
000000000021452a         db  0x00 ; '.'
000000000021452b         db  0x00 ; '.'
000000000021452c         db  0x00 ; '.'
000000000021452d         db  0x00 ; '.'
000000000021452e         db  0x00 ; '.'
000000000021452f         db  0x00 ; '.'
0000000000214530         db  0x00 ; '.'
0000000000214531         db  0x00 ; '.'
0000000000214532         db  0x00 ; '.'
0000000000214533         db  0x00 ; '.'
0000000000214534         db  0x00 ; '.'
0000000000214535         db  0x00 ; '.'
0000000000214536         db  0x00 ; '.'
0000000000214537         db  0x00 ; '.'
0000000000214538         db  0x00 ; '.'
0000000000214539         db  0x00 ; '.'
000000000021453a         db  0x00 ; '.'
000000000021453b         db  0x00 ; '.'
000000000021453c         db  0x00 ; '.'
000000000021453d         db  0x00 ; '.'
000000000021453e         db  0x00 ; '.'
000000000021453f         db  0x00 ; '.'
                     default_quoting_options:
0000000000214540         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
0000000000214541         db  0x00 ; '.'
0000000000214542         db  0x00 ; '.'
0000000000214543         db  0x00 ; '.'
0000000000214544         db  0x00 ; '.'
0000000000214545         db  0x00 ; '.'
0000000000214546         db  0x00 ; '.'
0000000000214547         db  0x00 ; '.'
0000000000214548         db  0x00 ; '.'
0000000000214549         db  0x00 ; '.'
000000000021454a         db  0x00 ; '.'
000000000021454b         db  0x00 ; '.'
000000000021454c         db  0x00 ; '.'
000000000021454d         db  0x00 ; '.'
000000000021454e         db  0x00 ; '.'
000000000021454f         db  0x00 ; '.'
0000000000214550         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
0000000000214551         db  0x00 ; '.'
0000000000214552         db  0x00 ; '.'
0000000000214553         db  0x00 ; '.'
0000000000214554         db  0x00 ; '.'
0000000000214555         db  0x00 ; '.'
0000000000214556         db  0x00 ; '.'
0000000000214557         db  0x00 ; '.'
0000000000214558         db  0x00 ; '.'
0000000000214559         db  0x00 ; '.'
000000000021455a         db  0x00 ; '.'
000000000021455b         db  0x00 ; '.'
000000000021455c         db  0x00 ; '.'
000000000021455d         db  0x00 ; '.'
000000000021455e         db  0x00 ; '.'
000000000021455f         db  0x00 ; '.'
0000000000214560         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
0000000000214561         db  0x00 ; '.'
0000000000214562         db  0x00 ; '.'
0000000000214563         db  0x00 ; '.'
0000000000214564         db  0x00 ; '.'
0000000000214565         db  0x00 ; '.'
0000000000214566         db  0x00 ; '.'
0000000000214567         db  0x00 ; '.'
0000000000214568         db  0x00 ; '.'
0000000000214569         db  0x00 ; '.'
000000000021456a         db  0x00 ; '.'
000000000021456b         db  0x00 ; '.'
000000000021456c         db  0x00 ; '.'
000000000021456d         db  0x00 ; '.'
000000000021456e         db  0x00 ; '.'
000000000021456f         db  0x00 ; '.'
                     qword_214570:
0000000000214570         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
0000000000214571         db  0x00 ; '.'
0000000000214572         db  0x00 ; '.'
0000000000214573         db  0x00 ; '.'
0000000000214574         db  0x00 ; '.'
0000000000214575         db  0x00 ; '.'
0000000000214576         db  0x00 ; '.'
0000000000214577         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
0000000000214578         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
0000000000214579         db  0x00 ; '.'
000000000021457a         db  0x00 ; '.'
000000000021457b         db  0x00 ; '.'
000000000021457c         db  0x00 ; '.'
000000000021457d         db  0x00 ; '.'
000000000021457e         db  0x00 ; '.'
000000000021457f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x214590; 0x214b40[ (1456 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x214590; 0x4290d0[ (2181952 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     getenv:
0000000000214590         extern function code                                   ; DATA XREF=getenv@GOT
                     __snprintf_chk:
0000000000214598         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
00000000002145a0         extern function code                                   ; DATA XREF=free@GOT
                     endmntent:
00000000002145a8         extern function code                                   ; DATA XREF=endmntent@GOT
                     strverscmp:
00000000002145b0         extern function code                                   ; DATA XREF=strverscmp@GOT
                     abort:
00000000002145b8         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
00000000002145c0         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
00000000002145c8         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
00000000002145d0         extern function code
                     _exit:
00000000002145d8         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
00000000002145e0         extern function code                                   ; DATA XREF=__fpending@GOT
                     isatty:
00000000002145e8         extern function code                                   ; DATA XREF=isatty@GOT
                     iswcntrl:
00000000002145f0         extern function code                                   ; DATA XREF=iswcntrl@GOT
                     wcswidth:
00000000002145f8         extern function code                                   ; DATA XREF=wcswidth@GOT
                     localeconv:
0000000000214600         extern function code                                   ; DATA XREF=localeconv@GOT
                     mbstowcs:
0000000000214608         extern function code                                   ; DATA XREF=mbstowcs@GOT
                     readlink:
0000000000214610         extern function code                                   ; DATA XREF=readlink@GOT
                     fcntl:
0000000000214618         extern function code                                   ; DATA XREF=fcntl@GOT
                     textdomain:
0000000000214620         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
0000000000214628         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
0000000000214630         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
0000000000214638         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
0000000000214640         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
0000000000214648         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
0000000000214650         extern function code                                   ; DATA XREF=__lxstat@GOT
                     openat:
0000000000214658         extern function code                                   ; DATA XREF=openat@GOT
                     chdir:
0000000000214660         extern function code                                   ; DATA XREF=chdir@GOT
                     __stack_chk_fail:
0000000000214668         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
0000000000214670         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
0000000000214678         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
0000000000214680         extern function code                                   ; DATA XREF=strchr@GOT
                     __fxstatat:
0000000000214688         extern function code                                   ; DATA XREF=__fxstatat@GOT
                     __overflow:
0000000000214690         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000214698         extern function code                                   ; DATA XREF=strrchr@GOT
                     uname:
00000000002146a0         extern function code                                   ; DATA XREF=uname@GOT
                     lseek:
00000000002146a8         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
00000000002146b0         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
00000000002146b8         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
00000000002146c0         extern function code                                   ; DATA XREF=memset@GOT
                     getcwd:
00000000002146c8         extern function code                                   ; DATA XREF=getcwd@GOT
                     canonicalize_file_name:
00000000002146d0         extern function code                                   ; DATA XREF=canonicalize_file_name@GOT
                     close:
00000000002146d8         extern function code                                   ; DATA XREF=close@GOT
                     strspn:
00000000002146e0         extern function code                                   ; DATA XREF=strspn@GOT
                     memchr:
00000000002146e8         extern function code                                   ; DATA XREF=memchr@GOT
                     __libc_start_main:
00000000002146f0         extern function code
                     memcmp:
00000000002146f8         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
0000000000214700         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
0000000000214708         extern function code                                   ; DATA XREF=calloc@GOT
                     __getdelim:
0000000000214710         extern function code                                   ; DATA XREF=__getdelim@GOT
                     strcmp:
0000000000214718         extern function code                                   ; DATA XREF=strcmp@GOT
                     __memcpy_chk:
0000000000214720         extern function code                                   ; DATA XREF=__memcpy_chk@GOT
                     __gmon_start__:
0000000000214728         extern function code
                     memcpy:
0000000000214730         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
0000000000214738         extern function code                                   ; DATA XREF=fileno@GOT
                     statfs:
0000000000214740         extern function code                                   ; DATA XREF=statfs@GOT
                     __xstat:
0000000000214748         extern function code                                   ; DATA XREF=__xstat@GOT
                     sync:
0000000000214750         extern function code                                   ; DATA XREF=sync@GOT
                     wcwidth:
0000000000214758         extern function code                                   ; DATA XREF=wcwidth@GOT
                     malloc:
0000000000214760         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
0000000000214768         extern function code                                   ; DATA XREF=fflush@GOT
                     getmntent:
0000000000214770         extern function code                                   ; DATA XREF=getmntent@GOT
                     setmntent:
0000000000214778         extern function code                                   ; DATA XREF=setmntent@GOT
                     nl_langinfo:
0000000000214780         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     sscanf:
0000000000214788         extern function code                                   ; DATA XREF=sscanf@GOT
                     __freading:
0000000000214790         extern function code                                   ; DATA XREF=__freading@GOT
                     statvfs:
0000000000214798         extern function code                                   ; DATA XREF=statvfs@GOT
                     fchdir:
00000000002147a0         extern function code                                   ; DATA XREF=fchdir@GOT
                     realloc:
00000000002147a8         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
00000000002147b0         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
00000000002147b8         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     mempcpy:
00000000002147c0         extern function code                                   ; DATA XREF=mempcpy@GOT
                     memmove:
00000000002147c8         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
00000000002147d0         extern function code                                   ; DATA XREF=error@GOT
                     memrchr:
00000000002147d8         extern function code                                   ; DATA XREF=memrchr@GOT
                     open:
00000000002147e0         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
00000000002147e8         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
00000000002147f0         extern function code                                   ; DATA XREF=fopen@GOT
                     __cxa_atexit:
00000000002147f8         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     wcstombs:
0000000000214800         extern function code                                   ; DATA XREF=wcstombs@GOT
                     exit:
0000000000214808         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
0000000000214810         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
0000000000214818         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
0000000000214820         extern function code
                     strdup:
0000000000214828         extern function code                                   ; DATA XREF=strdup@GOT
                     mbsinit:
0000000000214830         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
0000000000214838         extern function code                                   ; DATA XREF=iswprint@GOT
                     hasmntopt:
0000000000214840         extern function code                                   ; DATA XREF=hasmntopt@GOT
                     __cxa_finalize:
0000000000214848         extern function code
                     strstr:
0000000000214850         extern function code                                   ; DATA XREF=strstr@GOT
                     __ctype_b_loc:
0000000000214858         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
0000000000214860         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     getenv@@GLIBC_2.2.5:
0000000000214868         extern function code
                     __snprintf_chk@@GLIBC_2.3.4:
0000000000214870         extern function code
                     free@@GLIBC_2.2.5:
0000000000214878         extern function code
                     endmntent@@GLIBC_2.2.5:
0000000000214880         extern function code
                     strverscmp@@GLIBC_2.2.5:
0000000000214888         extern function code
                     abort@@GLIBC_2.2.5:
0000000000214890         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000214898         extern function code
                     strncmp@@GLIBC_2.2.5:
00000000002148a0         extern function code
                     _ITM_deregisterTMCloneTable_2148a8:        // _ITM_deregisterTMCloneTable
00000000002148a8         extern function code
                     _exit@@GLIBC_2.2.5:
00000000002148b0         extern function code
                     __fpending@@GLIBC_2.2.5:
00000000002148b8         extern function code
                     isatty@@GLIBC_2.2.5:
00000000002148c0         extern function code
                     iswcntrl@@GLIBC_2.2.5:
00000000002148c8         extern function code
                     wcswidth@@GLIBC_2.2.5:
00000000002148d0         extern function code
                     localeconv@@GLIBC_2.2.5:
00000000002148d8         extern function code
                     mbstowcs@@GLIBC_2.2.5:
00000000002148e0         extern function code
                     readlink@@GLIBC_2.2.5:
00000000002148e8         extern function code
                     fcntl@@GLIBC_2.2.5:
00000000002148f0         extern function code
                     textdomain@@GLIBC_2.2.5:
00000000002148f8         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000214900         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000214908         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000214910         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
0000000000214918         extern function code
                     strlen@@GLIBC_2.2.5:
0000000000214920         extern function code
                     __lxstat@@GLIBC_2.2.5:
0000000000214928         extern function code
                     openat@@GLIBC_2.4:
0000000000214930         extern function code
                     chdir@@GLIBC_2.2.5:
0000000000214938         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
0000000000214940         extern function code
                     getopt_long@@GLIBC_2.2.5:
0000000000214948         extern function code
                     mbrtowc@@GLIBC_2.2.5:
0000000000214950         extern function code
                     strchr@@GLIBC_2.2.5:
0000000000214958         extern function code
                     __fxstatat@@GLIBC_2.4:
0000000000214960         extern function code
                     __overflow@@GLIBC_2.2.5:
0000000000214968         extern function code
                     strrchr@@GLIBC_2.2.5:
0000000000214970         extern function code
                     uname@@GLIBC_2.2.5:
0000000000214978         extern function code
                     lseek@@GLIBC_2.2.5:
0000000000214980         extern function code
                     __assert_fail@@GLIBC_2.2.5:
0000000000214988         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
0000000000214990         extern function code
                     memset@@GLIBC_2.2.5:
0000000000214998         extern function code
                     getcwd@@GLIBC_2.2.5:
00000000002149a0         extern function code
                     canonicalize_file_name@@GLIBC_2.2.5:
00000000002149a8         extern function code
                     close@@GLIBC_2.2.5:
00000000002149b0         extern function code
                     strspn@@GLIBC_2.2.5:
00000000002149b8         extern function code
                     memchr@@GLIBC_2.2.5:
00000000002149c0         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
00000000002149c8         extern function code
                     memcmp@@GLIBC_2.2.5:
00000000002149d0         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
00000000002149d8         extern function code
                     calloc@@GLIBC_2.2.5:
00000000002149e0         extern function code
                     __getdelim@@GLIBC_2.2.5:
00000000002149e8         extern function code
                     strcmp@@GLIBC_2.2.5:
00000000002149f0         extern function code
                     __memcpy_chk@@GLIBC_2.3.4:
00000000002149f8         extern function code
                     __gmon_start___214a00:        // __gmon_start__
0000000000214a00         extern function code
                     memcpy@@GLIBC_2.14:
0000000000214a08         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000214a10         extern function code
                     statfs@@GLIBC_2.2.5:
0000000000214a18         extern function code
                     __xstat@@GLIBC_2.2.5:
0000000000214a20         extern function code
                     sync@@GLIBC_2.2.5:
0000000000214a28         extern function code
                     wcwidth@@GLIBC_2.2.5:
0000000000214a30         extern function code
                     malloc@@GLIBC_2.2.5:
0000000000214a38         extern function code
                     fflush@@GLIBC_2.2.5:
0000000000214a40         extern function code
                     getmntent@@GLIBC_2.2.5:
0000000000214a48         extern function code
                     setmntent@@GLIBC_2.2.5:
0000000000214a50         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
0000000000214a58         extern function code
                     sscanf@@GLIBC_2.2.5:
0000000000214a60         extern function code
                     __freading@@GLIBC_2.2.5:
0000000000214a68         extern function code
                     statvfs@@GLIBC_2.2.5:
0000000000214a70         extern function code
                     fchdir@@GLIBC_2.2.5:
0000000000214a78         extern function code
                     realloc@@GLIBC_2.2.5:
0000000000214a80         extern function code
                     setlocale@@GLIBC_2.2.5:
0000000000214a88         extern function code
                     __printf_chk@@GLIBC_2.3.4:
0000000000214a90         extern function code
                     mempcpy@@GLIBC_2.2.5:
0000000000214a98         extern function code
                     memmove@@GLIBC_2.2.5:
0000000000214aa0         extern function code
                     error@@GLIBC_2.2.5:
0000000000214aa8         extern function code
                     memrchr@@GLIBC_2.2.5:
0000000000214ab0         extern function code
                     open@@GLIBC_2.2.5:
0000000000214ab8         extern function code
                     fseeko@@GLIBC_2.2.5:
0000000000214ac0         extern function code
                     fopen@@GLIBC_2.2.5:
0000000000214ac8         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
0000000000214ad0         extern function code
                     wcstombs@@GLIBC_2.2.5:
0000000000214ad8         extern function code
                     exit@@GLIBC_2.2.5:
0000000000214ae0         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000214ae8         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000214af0         extern function code
                     _ITM_registerTMCloneTable_214af8:        // _ITM_registerTMCloneTable
0000000000214af8         extern function code
                     strdup@@GLIBC_2.2.5:
0000000000214b00         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000214b08         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000214b10         extern function code
                     hasmntopt@@GLIBC_2.2.5:
0000000000214b18         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000214b20         extern function code
                     strstr@@GLIBC_2.2.5:
0000000000214b28         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
0000000000214b30         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
0000000000214b38         extern function code
