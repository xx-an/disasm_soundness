
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/[
        UUID: 45778F86-0B94-4BBF-882E-90BAECB88440
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xaf28[ (44840 bytes)
        ; File offset : [0; 44840[ (44840 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0xf0 ; '.'
0000000000000019         db  0x17 ; '.'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x18 ; '.'
0000000000000029         db  0x6f ; 'o'
000000000000002a         db  0x03 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x28 ; '('
00000000000000d1         db  0xaf ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x28 ; '('
00000000000000d9         db  0xaf ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xd0 ; '.'
00000000000000f1         db  0xbb ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xd0 ; '.'
00000000000000f9         db  0xbb ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xd0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0xbb ; '.'
0000000000000102         db  0x20 ; ' '
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0xb0 ; '.'
0000000000000109         db  0x04 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0x48 ; 'H'
0000000000000111         db  0x06 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x38 ; '8'
0000000000000129         db  0xbc ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x38 ; '8'
0000000000000131         db  0xbc ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x38 ; '8'
0000000000000139         db  0xbc ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'                                         ; DATA XREF=binary_operator+12, binary_operator+249
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x4c ; 'L'
0000000000000199         db  0x9e ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x4c ; 'L'
00000000000001a1         db  0x9e ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x4c ; 'L'
00000000000001a9         db  0x9e ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xe4 ; '.'
00000000000001b1         db  0x02 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xe4 ; '.'
00000000000001b9         db  0x02 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xd0 ; '.'
0000000000000209         db  0xbb ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xd0 ; '.'
0000000000000211         db  0xbb ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xd0 ; '.'
0000000000000219         db  0xbb ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x30 ; '0'
0000000000000221         db  0x04 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x30 ; '0'
0000000000000229         db  0x04 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000000238         db  0x2f ; '/'
0000000000000239         db  0x6c ; 'l'
000000000000023a         db  0x69 ; 'i'
000000000000023b         db  0x62 ; 'b'
000000000000023c         db  0x36 ; '6'
000000000000023d         db  0x34 ; '4'
000000000000023e         db  0x2f ; '/'
000000000000023f         db  0x6c ; 'l'
0000000000000240         db  0x64 ; 'd'
0000000000000241         db  0x2d ; '-'
0000000000000242         db  0x6c ; 'l'
0000000000000243         db  0x69 ; 'i'
0000000000000244         db  0x6e ; 'n'
0000000000000245         db  0x75 ; 'u'
0000000000000246         db  0x78 ; 'x'
0000000000000247         db  0x2d ; '-'
0000000000000248         db  0x78 ; 'x'
0000000000000249         db  0x38 ; '8'
000000000000024a         db  0x36 ; '6'
000000000000024b         db  0x2d ; '-'
000000000000024c         db  0x36 ; '6'
000000000000024d         db  0x34 ; '4'
000000000000024e         db  0x2e ; '.'
000000000000024f         db  0x73 ; 's'
0000000000000250         db  0x6f ; 'o'
0000000000000251         db  0x2e ; '.'
0000000000000252         db  0x32 ; '2'
0000000000000253         db  0x00 ; '.'


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x45 ; 'E'
0000000000000285         db  0x77 ; 'w'
0000000000000286         db  0x8f ; '.'
0000000000000287         db  0x86 ; '.'
0000000000000288         db  0x0b ; '.'
0000000000000289         db  0x94 ; '.'
000000000000028a         db  0x4b ; 'K'
000000000000028b         db  0xbf ; '.'
000000000000028c         db  0x88 ; '.'
000000000000028d         db  0x2e ; '.'
000000000000028e         db  0x90 ; '.'
000000000000028f         db  0xba ; '.'
0000000000000290         db  0xec ; '.'
0000000000000291         db  0xb8 ; '.'
0000000000000292         db  0x84 ; '.'
0000000000000293         db  0x40 ; '@'
0000000000000294         db  0xf8 ; '.'
0000000000000295         db  0xcf ; '.'
0000000000000296         db  0x0f ; '.'
0000000000000297         db  0x2a ; '*'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2d4[ (60 bytes)
        ; File offset : [664; 724[ (60 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x36 ; '6'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x49 ; 'I'
00000000000002aa         db  0x40 ; '@'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0x20 ; ' '
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x18 ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x36 ; '6'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x37 ; '7'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x00 ; '.'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x96 ; '.'
00000000000002c5         db  0xa0 ; '.'
00000000000002c6         db  0x89 ; '.'
00000000000002c7         db  0x97 ; '.'
00000000000002c8         db  0xce ; '.'
00000000000002c9         db  0x2c ; ','
00000000000002ca         db  0x63 ; 'c'
00000000000002cb         db  0x72 ; 'r'
00000000000002cc         db  0xe4 ; '.'
00000000000002cd         db  0x62 ; 'b'
00000000000002ce         db  0x41 ; 'A'
00000000000002cf         db  0xf5 ; '.'
00000000000002d0         db  0x39 ; '9'
00000000000002d1         db  0xf2 ; '.'
00000000000002d2         db  0x8b ; '.'
00000000000002d3         db  0x1c ; '.'
00000000000002d4         db  0x00 ; '.'
00000000000002d5         db  0x00 ; '.'
00000000000002d6         db  0x00 ; '.'
00000000000002d7         db  0x00 ; '.'


        ; Section .dynsym
        ; Range: [0x2d8; 0x878[ (1440 bytes)
        ; File offset : [728; 2168[ (1440 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002d8         db  0x00 ; '.'
00000000000002d9         db  0x00 ; '.'
00000000000002da         db  0x00 ; '.'
00000000000002db         db  0x00 ; '.'
00000000000002dc         db  0x00 ; '.'
00000000000002dd         db  0x00 ; '.'
00000000000002de         db  0x00 ; '.'
00000000000002df         db  0x00 ; '.'
00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x6f ; 'o'
00000000000002f1         db  0x01 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x12 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x00 ; '.'
00000000000002f9         db  0x00 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x00 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x1a ; '.'
0000000000000309         db  0x02 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x12 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x00 ; '.'
0000000000000311         db  0x00 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x00 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x7c ; '|'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x12 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x00 ; '.'
0000000000000329         db  0x00 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x00 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0xe8 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x12 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x00 ; '.'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x00 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0xa0 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x12 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x00 ; '.'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x00 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x31 ; '1'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x12 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x00 ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x00 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x7e ; '~'
0000000000000381         db  0x02 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x20 ; ' '
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x00 ; '.'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x00 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x82 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x12 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x00 ; '.'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x00 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x9c ; '.'
00000000000003b1         db  0x01 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x12 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x00 ; '.'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x00 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0xcc ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x12 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x00 ; '.'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x00 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0xe0 ; '.'
00000000000003e1         db  0x01 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x12 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x00 ; '.'
00000000000003e9         db  0x00 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x00 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x22 ; '"'
00000000000003f9         db  0x01 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x12 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x00 ; '.'
0000000000000401         db  0x00 ; '.'
0000000000000402         db  0x00 ; '.'
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x00 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'
0000000000000407         db  0x00 ; '.'
0000000000000408         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+29
0000000000000409         db  0x00 ; '.'
000000000000040a         db  0x00 ; '.'
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0xdc ; '.'
0000000000000411         db  0x01 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x12 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x00 ; '.'
0000000000000419         db  0x00 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x00 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x41 ; 'A'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x12 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x00 ; '.'
0000000000000431         db  0x00 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x00 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0xae ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x12 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x00 ; '.'
0000000000000449         db  0x00 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x00 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0xda ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x12 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x00 ; '.'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x00 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x62 ; 'b'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x12 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x00 ; '.'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x00 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x51 ; 'Q'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x12 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x00 ; '.'
0000000000000491         db  0x00 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x00 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x29 ; ')'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x12 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x00 ; '.'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x00 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x39 ; '9'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x12 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x00 ; '.'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x00 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x15 ; '.'
00000000000004d1         db  0x01 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x12 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x00 ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x00 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0xe1 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x12 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x00 ; '.'
00000000000004f1         db  0x00 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x00 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x94 ; '.'
0000000000000501         db  0x01 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x12 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x00 ; '.'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x00 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0xf2 ; '.'
0000000000000519         db  0x01 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x12 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x00 ; '.'
0000000000000521         db  0x00 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x00 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0xf9 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x12 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x00 ; '.'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x00 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x0b ; '.'
0000000000000549         db  0x02 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x12 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x00 ; '.'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x00 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0xd3 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x12 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x00 ; '.'
0000000000000569         db  0x00 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x00 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0xeb ; '.'
0000000000000579         db  0x01 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x12 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x00 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x00 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x9a ; '.'
0000000000000591         db  0x02 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x20 ; ' '
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x00 ; '.'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x00 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0xc5 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x12 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x00 ; '.'
00000000000005b1         db  0x00 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x00 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x1b ; '.'
00000000000005c1         db  0x01 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x12 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x00 ; '.'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x00 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x86 ; '.'
00000000000005d9         db  0x01 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x12 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x00 ; '.'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x00 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0xd4 ; '.'
00000000000005f1         db  0x01 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x12 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x00 ; '.'
00000000000005f9         db  0x00 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x00 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x34 ; '4'
0000000000000609         db  0x01 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x12 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x00 ; '.'
0000000000000611         db  0x00 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x00 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x0b ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x12 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0x00 ; '.'
0000000000000629         db  0x00 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x00 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x43 ; 'C'
0000000000000639         db  0x01 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x12 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x00 ; '.'
0000000000000641         db  0x00 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x00 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x7e ; '~'
0000000000000651         db  0x01 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x12 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x00 ; '.'
0000000000000659         db  0x00 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x00 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x5d ; ']'
0000000000000669         db  0x01 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x12 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x00 ; '.'
0000000000000671         db  0x00 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x00 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x74 ; 't'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x12 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x00 ; '.'
0000000000000689         db  0x00 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x00 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x1f ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x12 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x00 ; '.'
00000000000006a1         db  0x00 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x00 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x12 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x12 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x00 ; '.'
00000000000006b9         db  0x00 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x00 ; '.'
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x4b ; 'K'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x12 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x00 ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x00 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x04 ; '.'
00000000000006e1         db  0x02 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x12 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x00 ; '.'
00000000000006e9         db  0x00 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x00 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x29 ; ')'
00000000000006f9         db  0x01 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x12 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x00 ; '.'
0000000000000701         db  0x00 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x00 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x3a ; ':'
0000000000000711         db  0x02 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x12 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x00 ; '.'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x00 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x83 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x12 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x00 ; '.'
0000000000000731         db  0x00 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x00 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x8d ; '.'
0000000000000741         db  0x01 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x12 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x00 ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x00 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x01 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x12 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x00 ; '.'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x00 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0xa9 ; '.'
0000000000000771         db  0x02 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x20 ; ' '
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x00 ; '.'
0000000000000779         db  0x00 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x00 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x3b ; ';'
0000000000000789         db  0x01 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x12 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x00 ; '.'
0000000000000791         db  0x00 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x00 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x6b ; 'k'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x12 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x00 ; '.'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x00 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0xc5 ; '.'
00000000000007b9         db  0x01 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x22 ; '"'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x00 ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x00 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x4f ; 'O'
00000000000007d1         db  0x01 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x12 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x00 ; '.'
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x00 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x0e ; '.'
00000000000007e9         db  0x01 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x11 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x19 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x88 ; '.'
00000000000007f1         db  0xc0 ; '.'
00000000000007f2         db  0x20 ; ' '
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x00 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x08 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x1f ; '.'
0000000000000801         db  0x02 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x11 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x19 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x80 ; '.'
0000000000000809         db  0xc0 ; '.'
000000000000080a         db  0x20 ; ' '
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x00 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x08 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x88 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x21 ; '!'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x19 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x90 ; '.'
0000000000000821         db  0xc0 ; '.'
0000000000000822         db  0x20 ; ' '
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x00 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x08 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x2a ; '*'
0000000000000831         db  0x02 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x11 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x19 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x90 ; '.'
0000000000000839         db  0xc0 ; '.'
000000000000083a         db  0x20 ; ' '
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x00 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x08 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0xa7 ; '.'
0000000000000849         db  0x01 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x21 ; '!'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x19 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x80 ; '.'
0000000000000851         db  0xc0 ; '.'
0000000000000852         db  0x20 ; ' '
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x00 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x08 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x68 ; 'h'
0000000000000861         db  0x01 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x11 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x19 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xa0 ; '.'
0000000000000869         db  0xc0 ; '.'
000000000000086a         db  0x20 ; ' '
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x00 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x08 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0x878; 0xb3b[ (707 bytes)
        ; File offset : [2168; 2875[ (707 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x6c ; 'l'
000000000000087a         db  0x69 ; 'i'
000000000000087b         db  0x62 ; 'b'
000000000000087c         db  0x63 ; 'c'
000000000000087d         db  0x2e ; '.'
000000000000087e         db  0x73 ; 's'
000000000000087f         db  0x6f ; 'o'
0000000000000880         db  0x2e ; '.'
0000000000000881         db  0x36 ; '6'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x66 ; 'f'
0000000000000884         db  0x66 ; 'f'
0000000000000885         db  0x6c ; 'l'
0000000000000886         db  0x75 ; 'u'
0000000000000887         db  0x73 ; 's'
0000000000000888         db  0x68 ; 'h'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x5f ; '_'
000000000000088b         db  0x5f ; '_'
000000000000088c         db  0x70 ; 'p'
000000000000088d         db  0x72 ; 'r'
000000000000088e         db  0x69 ; 'i'
000000000000088f         db  0x6e ; 'n'
0000000000000890         db  0x74 ; 't'
0000000000000891         db  0x66 ; 'f'
0000000000000892         db  0x5f ; '_'
0000000000000893         db  0x63 ; 'c'
0000000000000894         db  0x68 ; 'h'
0000000000000895         db  0x6b ; 'k'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x73 ; 's'
0000000000000898         db  0x65 ; 'e'
0000000000000899         db  0x74 ; 't'
000000000000089a         db  0x6c ; 'l'
000000000000089b         db  0x6f ; 'o'
000000000000089c         db  0x63 ; 'c'
000000000000089d         db  0x61 ; 'a'
000000000000089e         db  0x6c ; 'l'
000000000000089f         db  0x65 ; 'e'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x6d ; 'm'
00000000000008a2         db  0x62 ; 'b'
00000000000008a3         db  0x72 ; 'r'
00000000000008a4         db  0x74 ; 't'
00000000000008a5         db  0x6f ; 'o'
00000000000008a6         db  0x77 ; 'w'
00000000000008a7         db  0x63 ; 'c'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x73 ; 's'
00000000000008aa         db  0x74 ; 't'
00000000000008ab         db  0x72 ; 'r'
00000000000008ac         db  0x6e ; 'n'
00000000000008ad         db  0x63 ; 'c'
00000000000008ae         db  0x6d ; 'm'
00000000000008af         db  0x70 ; 'p'
00000000000008b0         db  0x00 ; '.'
00000000000008b1         db  0x73 ; 's'
00000000000008b2         db  0x74 ; 't'
00000000000008b3         db  0x72 ; 'r'
00000000000008b4         db  0x72 ; 'r'
00000000000008b5         db  0x63 ; 'c'
00000000000008b6         db  0x68 ; 'h'
00000000000008b7         db  0x72 ; 'r'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x64 ; 'd'
00000000000008ba         db  0x63 ; 'c'
00000000000008bb         db  0x67 ; 'g'
00000000000008bc         db  0x65 ; 'e'
00000000000008bd         db  0x74 ; 't'
00000000000008be         db  0x74 ; 't'
00000000000008bf         db  0x65 ; 'e'
00000000000008c0         db  0x78 ; 'x'
00000000000008c1         db  0x74 ; 't'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x65 ; 'e'
00000000000008c4         db  0x72 ; 'r'
00000000000008c5         db  0x72 ; 'r'
00000000000008c6         db  0x6f ; 'o'
00000000000008c7         db  0x72 ; 'r'
00000000000008c8         db  0x00 ; '.'
00000000000008c9         db  0x5f ; '_'
00000000000008ca         db  0x5f ; '_'
00000000000008cb         db  0x73 ; 's'
00000000000008cc         db  0x74 ; 't'
00000000000008cd         db  0x61 ; 'a'
00000000000008ce         db  0x63 ; 'c'
00000000000008cf         db  0x6b ; 'k'
00000000000008d0         db  0x5f ; '_'
00000000000008d1         db  0x63 ; 'c'
00000000000008d2         db  0x68 ; 'h'
00000000000008d3         db  0x6b ; 'k'
00000000000008d4         db  0x5f ; '_'
00000000000008d5         db  0x66 ; 'f'
00000000000008d6         db  0x61 ; 'a'
00000000000008d7         db  0x69 ; 'i'
00000000000008d8         db  0x6c ; 'l'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x5f ; '_'
00000000000008db         db  0x5f ; '_'
00000000000008dc         db  0x6c ; 'l'
00000000000008dd         db  0x78 ; 'x'
00000000000008de         db  0x73 ; 's'
00000000000008df         db  0x74 ; 't'
00000000000008e0         db  0x61 ; 'a'
00000000000008e1         db  0x74 ; 't'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x69 ; 'i'
00000000000008e4         db  0x73 ; 's'
00000000000008e5         db  0x77 ; 'w'
00000000000008e6         db  0x70 ; 'p'
00000000000008e7         db  0x72 ; 'r'
00000000000008e8         db  0x69 ; 'i'
00000000000008e9         db  0x6e ; 'n'
00000000000008ea         db  0x74 ; 't'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x72 ; 'r'
00000000000008ed         db  0x65 ; 'e'
00000000000008ee         db  0x61 ; 'a'
00000000000008ef         db  0x6c ; 'l'
00000000000008f0         db  0x6c ; 'l'
00000000000008f1         db  0x6f ; 'o'
00000000000008f2         db  0x63 ; 'c'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x61 ; 'a'
00000000000008f5         db  0x62 ; 'b'
00000000000008f6         db  0x6f ; 'o'
00000000000008f7         db  0x72 ; 'r'
00000000000008f8         db  0x74 ; 't'
00000000000008f9         db  0x00 ; '.'
00000000000008fa         db  0x5f ; '_'
00000000000008fb         db  0x65 ; 'e'
00000000000008fc         db  0x78 ; 'x'
00000000000008fd         db  0x69 ; 'i'
00000000000008fe         db  0x74 ; 't'
00000000000008ff         db  0x00 ; '.'
                     aPrograminvocat:
0000000000000900         db         "program_invocation_name", 0
0000000000000918         db  0x65 ; 'e'
0000000000000919         db  0x72 ; 'r'
000000000000091a         db  0x72 ; 'r'
000000000000091b         db  0x6f ; 'o'
000000000000091c         db  0x72 ; 'r'
000000000000091d         db  0x5f ; '_'
000000000000091e         db  0x61 ; 'a'
000000000000091f         db  0x74 ; 't'
0000000000000920         db  0x5f ; '_'
0000000000000921         db  0x6c ; 'l'
0000000000000922         db  0x69 ; 'i'
0000000000000923         db  0x6e ; 'n'
0000000000000924         db  0x65 ; 'e'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x5f ; '_'
0000000000000927         db  0x5f ; '_'
0000000000000928         db  0x63 ; 'c'
0000000000000929         db  0x74 ; 't'
000000000000092a         db  0x79 ; 'y'
000000000000092b         db  0x70 ; 'p'
000000000000092c         db  0x65 ; 'e'
000000000000092d         db  0x5f ; '_'
000000000000092e         db  0x67 ; 'g'
000000000000092f         db  0x65 ; 'e'
0000000000000930         db  0x74 ; 't'
0000000000000931         db  0x5f ; '_'
0000000000000932         db  0x6d ; 'm'
0000000000000933         db  0x62 ; 'b'
0000000000000934         db  0x5f ; '_'
0000000000000935         db  0x63 ; 'c'
0000000000000936         db  0x75 ; 'u'
0000000000000937         db  0x72 ; 'r'
0000000000000938         db  0x5f ; '_'
0000000000000939         db  0x6d ; 'm'
000000000000093a         db  0x61 ; 'a'
000000000000093b         db  0x78 ; 'x'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x73 ; 's'
000000000000093e         db  0x74 ; 't'
000000000000093f         db  0x72 ; 'r'
0000000000000940         db  0x74 ; 't'
0000000000000941         db  0x6f ; 'o'
0000000000000942         db  0x6c ; 'l'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x69 ; 'i'
0000000000000945         db  0x73 ; 's'
0000000000000946         db  0x61 ; 'a'
0000000000000947         db  0x74 ; 't'
0000000000000948         db  0x74 ; 't'
0000000000000949         db  0x79 ; 'y'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x63 ; 'c'
000000000000094c         db  0x61 ; 'a'
000000000000094d         db  0x6c ; 'l'
000000000000094e         db  0x6c ; 'l'
000000000000094f         db  0x6f ; 'o'
0000000000000950         db  0x63 ; 'c'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x73 ; 's'
0000000000000953         db  0x74 ; 't'
0000000000000954         db  0x72 ; 'r'
0000000000000955         db  0x6c ; 'l'
0000000000000956         db  0x65 ; 'e'
0000000000000957         db  0x6e ; 'n'
0000000000000958         db  0x00 ; '.'
0000000000000959         db  0x6d ; 'm'
000000000000095a         db  0x65 ; 'e'
000000000000095b         db  0x6d ; 'm'
000000000000095c         db  0x73 ; 's'
000000000000095d         db  0x65 ; 'e'
000000000000095e         db  0x74 ; 't'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x5f ; '_'
0000000000000961         db  0x5f ; '_'
0000000000000962         db  0x65 ; 'e'
0000000000000963         db  0x72 ; 'r'
0000000000000964         db  0x72 ; 'r'
0000000000000965         db  0x6e ; 'n'
0000000000000966         db  0x6f ; 'o'
0000000000000967         db  0x5f ; '_'
0000000000000968         db  0x6c ; 'l'
0000000000000969         db  0x6f ; 'o'
000000000000096a         db  0x63 ; 'c'
000000000000096b         db  0x61 ; 'a'
000000000000096c         db  0x74 ; 't'
000000000000096d         db  0x69 ; 'i'
000000000000096e         db  0x6f ; 'o'
000000000000096f         db  0x6e ; 'n'
0000000000000970         db  0x00 ; '.'
0000000000000971         db  0x6d ; 'm'
0000000000000972         db  0x65 ; 'e'
0000000000000973         db  0x6d ; 'm'
0000000000000974         db  0x63 ; 'c'
0000000000000975         db  0x6d ; 'm'
0000000000000976         db  0x70 ; 'p'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x5f ; '_'
0000000000000979         db  0x5f ; '_'
000000000000097a         db  0x66 ; 'f'
000000000000097b         db  0x70 ; 'p'
000000000000097c         db  0x72 ; 'r'
000000000000097d         db  0x69 ; 'i'
000000000000097e         db  0x6e ; 'n'
000000000000097f         db  0x74 ; 't'
0000000000000980         db  0x66 ; 'f'
0000000000000981         db  0x5f ; '_'
0000000000000982         db  0x63 ; 'c'
0000000000000983         db  0x68 ; 'h'
0000000000000984         db  0x6b ; 'k'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x73 ; 's'
0000000000000987         db  0x74 ; 't'
0000000000000988         db  0x64 ; 'd'
0000000000000989         db  0x6f ; 'o'
000000000000098a         db  0x75 ; 'u'
000000000000098b         db  0x74 ; 't'
000000000000098c         db  0x00 ; '.'
000000000000098d         db  0x6c ; 'l'
000000000000098e         db  0x73 ; 's'
000000000000098f         db  0x65 ; 'e'
0000000000000990         db  0x65 ; 'e'
0000000000000991         db  0x6b ; 'k'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x6d ; 'm'
0000000000000994         db  0x65 ; 'e'
0000000000000995         db  0x6d ; 'm'
0000000000000996         db  0x63 ; 'c'
0000000000000997         db  0x70 ; 'p'
0000000000000998         db  0x79 ; 'y'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x66 ; 'f'
000000000000099b         db  0x63 ; 'c'
000000000000099c         db  0x6c ; 'l'
000000000000099d         db  0x6f ; 'o'
000000000000099e         db  0x73 ; 's'
000000000000099f         db  0x65 ; 'e'
00000000000009a0         db  0x00 ; '.'
00000000000009a1         db  0x65 ; 'e'
00000000000009a2         db  0x75 ; 'u'
00000000000009a3         db  0x69 ; 'i'
00000000000009a4         db  0x64 ; 'd'
00000000000009a5         db  0x61 ; 'a'
00000000000009a6         db  0x63 ; 'c'
00000000000009a7         db  0x63 ; 'c'
00000000000009a8         db  0x65 ; 'e'
00000000000009a9         db  0x73 ; 's'
00000000000009aa         db  0x73 ; 's'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x6d ; 'm'
00000000000009ad         db  0x61 ; 'a'
00000000000009ae         db  0x6c ; 'l'
00000000000009af         db  0x6c ; 'l'
00000000000009b0         db  0x6f ; 'o'
00000000000009b1         db  0x63 ; 'c'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x6d ; 'm'
00000000000009b4         db  0x62 ; 'b'
00000000000009b5         db  0x73 ; 's'
00000000000009b6         db  0x69 ; 'i'
00000000000009b7         db  0x6e ; 'n'
00000000000009b8         db  0x69 ; 'i'
00000000000009b9         db  0x74 ; 't'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x6e ; 'n'
00000000000009bc         db  0x6c ; 'l'
00000000000009bd         db  0x5f ; '_'
00000000000009be         db  0x6c ; 'l'
00000000000009bf         db  0x61 ; 'a'
00000000000009c0         db  0x6e ; 'n'
00000000000009c1         db  0x67 ; 'g'
00000000000009c2         db  0x69 ; 'i'
00000000000009c3         db  0x6e ; 'n'
00000000000009c4         db  0x66 ; 'f'
00000000000009c5         db  0x6f ; 'o'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x5f ; '_'
00000000000009c8         db  0x5f ; '_'
00000000000009c9         db  0x63 ; 'c'
00000000000009ca         db  0x74 ; 't'
00000000000009cb         db  0x79 ; 'y'
00000000000009cc         db  0x70 ; 'p'
00000000000009cd         db  0x65 ; 'e'
00000000000009ce         db  0x5f ; '_'
00000000000009cf         db  0x62 ; 'b'
00000000000009d0         db  0x5f ; '_'
00000000000009d1         db  0x6c ; 'l'
00000000000009d2         db  0x6f ; 'o'
00000000000009d3         db  0x63 ; 'c'
00000000000009d4         db  0x00 ; '.'
00000000000009d5         db  0x5f ; '_'
00000000000009d6         db  0x5f ; '_'
00000000000009d7         db  0x66 ; 'f'
00000000000009d8         db  0x72 ; 'r'
00000000000009d9         db  0x65 ; 'e'
00000000000009da         db  0x61 ; 'a'
00000000000009db         db  0x64 ; 'd'
00000000000009dc         db  0x69 ; 'i'
00000000000009dd         db  0x6e ; 'n'
00000000000009de         db  0x67 ; 'g'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x73 ; 's'
00000000000009e1         db  0x74 ; 't'
00000000000009e2         db  0x64 ; 'd'
00000000000009e3         db  0x65 ; 'e'
00000000000009e4         db  0x72 ; 'r'
00000000000009e5         db  0x72 ; 'r'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x5f ; '_'
00000000000009e8         db  0x5f ; '_'
00000000000009e9         db  0x73 ; 's'
00000000000009ea         db  0x6e ; 'n'
00000000000009eb         db  0x70 ; 'p'
00000000000009ec         db  0x72 ; 'r'
00000000000009ed         db  0x69 ; 'i'
00000000000009ee         db  0x6e ; 'n'
00000000000009ef         db  0x74 ; 't'
00000000000009f0         db  0x66 ; 'f'
00000000000009f1         db  0x5f ; '_'
00000000000009f2         db  0x63 ; 'c'
00000000000009f3         db  0x68 ; 'h'
00000000000009f4         db  0x6b ; 'k'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x67 ; 'g'
00000000000009f7         db  0x65 ; 'e'
00000000000009f8         db  0x74 ; 't'
00000000000009f9         db  0x65 ; 'e'
00000000000009fa         db  0x67 ; 'g'
00000000000009fb         db  0x69 ; 'i'
00000000000009fc         db  0x64 ; 'd'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x66 ; 'f'
00000000000009ff         db  0x69 ; 'i'
                     aLeno:
0000000000000a00         db         "leno", 0
0000000000000a05         db  0x66 ; 'f'
0000000000000a06         db  0x77 ; 'w'
0000000000000a07         db  0x72 ; 'r'
0000000000000a08         db  0x69 ; 'i'
0000000000000a09         db  0x74 ; 't'
0000000000000a0a         db  0x65 ; 'e'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x67 ; 'g'
0000000000000a0d         db  0x65 ; 'e'
0000000000000a0e         db  0x74 ; 't'
0000000000000a0f         db  0x65 ; 'e'
0000000000000a10         db  0x75 ; 'u'
0000000000000a11         db  0x69 ; 'i'
0000000000000a12         db  0x64 ; 'd'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x5f ; '_'
0000000000000a15         db  0x5f ; '_'
0000000000000a16         db  0x66 ; 'f'
0000000000000a17         db  0x70 ; 'p'
0000000000000a18         db  0x65 ; 'e'
0000000000000a19         db  0x6e ; 'n'
0000000000000a1a         db  0x64 ; 'd'
0000000000000a1b         db  0x69 ; 'i'
0000000000000a1c         db  0x6e ; 'n'
0000000000000a1d         db  0x67 ; 'g'
0000000000000a1e         db  0x00 ; '.'
0000000000000a1f         db  0x70 ; 'p'
0000000000000a20         db  0x72 ; 'r'
0000000000000a21         db  0x6f ; 'o'
0000000000000a22         db  0x67 ; 'g'
0000000000000a23         db  0x72 ; 'r'
0000000000000a24         db  0x61 ; 'a'
0000000000000a25         db  0x6d ; 'm'
0000000000000a26         db  0x5f ; '_'
0000000000000a27         db  0x69 ; 'i'
0000000000000a28         db  0x6e ; 'n'
0000000000000a29         db  0x76 ; 'v'
0000000000000a2a         db  0x6f ; 'o'
0000000000000a2b         db  0x63 ; 'c'
0000000000000a2c         db  0x61 ; 'a'
0000000000000a2d         db  0x74 ; 't'
0000000000000a2e         db  0x69 ; 'i'
0000000000000a2f         db  0x6f ; 'o'
0000000000000a30         db  0x6e ; 'n'
0000000000000a31         db  0x5f ; '_'
0000000000000a32         db  0x73 ; 's'
0000000000000a33         db  0x68 ; 'h'
0000000000000a34         db  0x6f ; 'o'
0000000000000a35         db  0x72 ; 'r'
0000000000000a36         db  0x74 ; 't'
0000000000000a37         db  0x5f ; '_'
0000000000000a38         db  0x6e ; 'n'
0000000000000a39         db  0x61 ; 'a'
0000000000000a3a         db  0x6d ; 'm'
0000000000000a3b         db  0x65 ; 'e'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x5f ; '_'
0000000000000a3e         db  0x5f ; '_'
0000000000000a3f         db  0x63 ; 'c'
0000000000000a40         db  0x78 ; 'x'
0000000000000a41         db  0x61 ; 'a'
0000000000000a42         db  0x5f ; '_'
0000000000000a43         db  0x66 ; 'f'
0000000000000a44         db  0x69 ; 'i'
0000000000000a45         db  0x6e ; 'n'
0000000000000a46         db  0x61 ; 'a'
0000000000000a47         db  0x6c ; 'l'
0000000000000a48         db  0x69 ; 'i'
0000000000000a49         db  0x7a ; 'z'
0000000000000a4a         db  0x65 ; 'e'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x5f ; '_'
0000000000000a4d         db  0x5f ; '_'
0000000000000a4e         db  0x78 ; 'x'
0000000000000a4f         db  0x73 ; 's'
0000000000000a50         db  0x74 ; 't'
0000000000000a51         db  0x61 ; 'a'
0000000000000a52         db  0x74 ; 't'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x62 ; 'b'
0000000000000a55         db  0x69 ; 'i'
0000000000000a56         db  0x6e ; 'n'
0000000000000a57         db  0x64 ; 'd'
0000000000000a58         db  0x74 ; 't'
0000000000000a59         db  0x65 ; 'e'
0000000000000a5a         db  0x78 ; 'x'
0000000000000a5b         db  0x74 ; 't'
0000000000000a5c         db  0x64 ; 'd'
0000000000000a5d         db  0x6f ; 'o'
0000000000000a5e         db  0x6d ; 'm'
0000000000000a5f         db  0x61 ; 'a'
0000000000000a60         db  0x69 ; 'i'
0000000000000a61         db  0x6e ; 'n'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x73 ; 's'
0000000000000a64         db  0x74 ; 't'
0000000000000a65         db  0x72 ; 'r'
0000000000000a66         db  0x63 ; 'c'
0000000000000a67         db  0x6d ; 'm'
0000000000000a68         db  0x70 ; 'p'
0000000000000a69         db  0x00 ; '.'
0000000000000a6a         db  0x5f ; '_'
0000000000000a6b         db  0x5f ; '_'
0000000000000a6c         db  0x6c ; 'l'
0000000000000a6d         db  0x69 ; 'i'
0000000000000a6e         db  0x62 ; 'b'
0000000000000a6f         db  0x63 ; 'c'
0000000000000a70         db  0x5f ; '_'
0000000000000a71         db  0x73 ; 's'
0000000000000a72         db  0x74 ; 't'
0000000000000a73         db  0x61 ; 'a'
0000000000000a74         db  0x72 ; 'r'
0000000000000a75         db  0x74 ; 't'
0000000000000a76         db  0x5f ; '_'
0000000000000a77         db  0x6d ; 'm'
0000000000000a78         db  0x61 ; 'a'
0000000000000a79         db  0x69 ; 'i'
0000000000000a7a         db  0x6e ; 'n'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x66 ; 'f'
0000000000000a7d         db  0x73 ; 's'
0000000000000a7e         db  0x65 ; 'e'
0000000000000a7f         db  0x65 ; 'e'
0000000000000a80         db  0x6b ; 'k'
0000000000000a81         db  0x6f ; 'o'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x66 ; 'f'
0000000000000a84         db  0x70 ; 'p'
0000000000000a85         db  0x75 ; 'u'
0000000000000a86         db  0x74 ; 't'
0000000000000a87         db  0x73 ; 's'
0000000000000a88         db  0x5f ; '_'
0000000000000a89         db  0x75 ; 'u'
0000000000000a8a         db  0x6e ; 'n'
0000000000000a8b         db  0x6c ; 'l'
0000000000000a8c         db  0x6f ; 'o'
0000000000000a8d         db  0x63 ; 'c'
0000000000000a8e         db  0x6b ; 'k'
0000000000000a8f         db  0x65 ; 'e'
0000000000000a90         db  0x64 ; 'd'
0000000000000a91         db  0x00 ; '.'
0000000000000a92         db  0x66 ; 'f'
0000000000000a93         db  0x72 ; 'r'
0000000000000a94         db  0x65 ; 'e'
0000000000000a95         db  0x65 ; 'e'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x5f ; '_'
0000000000000a98         db  0x5f ; '_'
0000000000000a99         db  0x70 ; 'p'
0000000000000a9a         db  0x72 ; 'r'
0000000000000a9b         db  0x6f ; 'o'
0000000000000a9c         db  0x67 ; 'g'
0000000000000a9d         db  0x6e ; 'n'
0000000000000a9e         db  0x61 ; 'a'
0000000000000a9f         db  0x6d ; 'm'
0000000000000aa0         db  0x65 ; 'e'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x5f ; '_'
0000000000000aa3         db  0x5f ; '_'
0000000000000aa4         db  0x70 ; 'p'
0000000000000aa5         db  0x72 ; 'r'
0000000000000aa6         db  0x6f ; 'o'
0000000000000aa7         db  0x67 ; 'g'
0000000000000aa8         db  0x6e ; 'n'
0000000000000aa9         db  0x61 ; 'a'
0000000000000aaa         db  0x6d ; 'm'
0000000000000aab         db  0x65 ; 'e'
0000000000000aac         db  0x5f ; '_'
0000000000000aad         db  0x66 ; 'f'
0000000000000aae         db  0x75 ; 'u'
0000000000000aaf         db  0x6c ; 'l'
0000000000000ab0         db  0x6c ; 'l'
0000000000000ab1         db  0x00 ; '.'
0000000000000ab2         db  0x5f ; '_'
0000000000000ab3         db  0x5f ; '_'
0000000000000ab4         db  0x63 ; 'c'
0000000000000ab5         db  0x78 ; 'x'
0000000000000ab6         db  0x61 ; 'a'
0000000000000ab7         db  0x5f ; '_'
0000000000000ab8         db  0x61 ; 'a'
0000000000000ab9         db  0x74 ; 't'
0000000000000aba         db  0x65 ; 'e'
0000000000000abb         db  0x78 ; 'x'
0000000000000abc         db  0x69 ; 'i'
0000000000000abd         db  0x74 ; 't'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x47 ; 'G'
0000000000000ac0         db  0x4c ; 'L'
0000000000000ac1         db  0x49 ; 'I'
0000000000000ac2         db  0x42 ; 'B'
0000000000000ac3         db  0x43 ; 'C'
0000000000000ac4         db  0x5f ; '_'
0000000000000ac5         db  0x32 ; '2'
0000000000000ac6         db  0x2e ; '.'
0000000000000ac7         db  0x33 ; '3'
0000000000000ac8         db  0x00 ; '.'
0000000000000ac9         db  0x47 ; 'G'
0000000000000aca         db  0x4c ; 'L'
0000000000000acb         db  0x49 ; 'I'
0000000000000acc         db  0x42 ; 'B'
0000000000000acd         db  0x43 ; 'C'
0000000000000ace         db  0x5f ; '_'
0000000000000acf         db  0x32 ; '2'
0000000000000ad0         db  0x2e ; '.'
0000000000000ad1         db  0x31 ; '1'
0000000000000ad2         db  0x34 ; '4'
0000000000000ad3         db  0x00 ; '.'
0000000000000ad4         db  0x47 ; 'G'
0000000000000ad5         db  0x4c ; 'L'
0000000000000ad6         db  0x49 ; 'I'
0000000000000ad7         db  0x42 ; 'B'
0000000000000ad8         db  0x43 ; 'C'
0000000000000ad9         db  0x5f ; '_'
0000000000000ada         db  0x32 ; '2'
0000000000000adb         db  0x2e ; '.'
0000000000000adc         db  0x34 ; '4'
0000000000000add         db  0x00 ; '.'
0000000000000ade         db  0x47 ; 'G'
0000000000000adf         db  0x4c ; 'L'
0000000000000ae0         db  0x49 ; 'I'
0000000000000ae1         db  0x42 ; 'B'
0000000000000ae2         db  0x43 ; 'C'
0000000000000ae3         db  0x5f ; '_'
0000000000000ae4         db  0x32 ; '2'
0000000000000ae5         db  0x2e ; '.'
0000000000000ae6         db  0x33 ; '3'
0000000000000ae7         db  0x2e ; '.'
0000000000000ae8         db  0x34 ; '4'
0000000000000ae9         db  0x00 ; '.'
0000000000000aea         db  0x47 ; 'G'
0000000000000aeb         db  0x4c ; 'L'
0000000000000aec         db  0x49 ; 'I'
0000000000000aed         db  0x42 ; 'B'
0000000000000aee         db  0x43 ; 'C'
0000000000000aef         db  0x5f ; '_'
0000000000000af0         db  0x32 ; '2'
0000000000000af1         db  0x2e ; '.'
0000000000000af2         db  0x32 ; '2'
0000000000000af3         db  0x2e ; '.'
0000000000000af4         db  0x35 ; '5'
0000000000000af5         db  0x00 ; '.'
0000000000000af6         db  0x5f ; '_'
0000000000000af7         db  0x49 ; 'I'
0000000000000af8         db  0x54 ; 'T'
0000000000000af9         db  0x4d ; 'M'
0000000000000afa         db  0x5f ; '_'
0000000000000afb         db  0x64 ; 'd'
0000000000000afc         db  0x65 ; 'e'
0000000000000afd         db  0x72 ; 'r'
0000000000000afe         db  0x65 ; 'e'
0000000000000aff         db  0x67 ; 'g'
                     aIstertmcloneta:
0000000000000b00         db         "isterTMCloneTable", 0
0000000000000b12         db  0x5f ; '_'
0000000000000b13         db  0x5f ; '_'
0000000000000b14         db  0x67 ; 'g'
0000000000000b15         db  0x6d ; 'm'
0000000000000b16         db  0x6f ; 'o'
0000000000000b17         db  0x6e ; 'n'
0000000000000b18         db  0x5f ; '_'
0000000000000b19         db  0x73 ; 's'
0000000000000b1a         db  0x74 ; 't'
0000000000000b1b         db  0x61 ; 'a'
0000000000000b1c         db  0x72 ; 'r'
0000000000000b1d         db  0x74 ; 't'
0000000000000b1e         db  0x5f ; '_'
0000000000000b1f         db  0x5f ; '_'
0000000000000b20         db  0x00 ; '.'
0000000000000b21         db  0x5f ; '_'
0000000000000b22         db  0x49 ; 'I'
0000000000000b23         db  0x54 ; 'T'
0000000000000b24         db  0x4d ; 'M'
0000000000000b25         db  0x5f ; '_'
0000000000000b26         db  0x72 ; 'r'
0000000000000b27         db  0x65 ; 'e'
0000000000000b28         db  0x67 ; 'g'
0000000000000b29         db  0x69 ; 'i'
0000000000000b2a         db  0x73 ; 's'
0000000000000b2b         db  0x74 ; 't'
0000000000000b2c         db  0x65 ; 'e'
0000000000000b2d         db  0x72 ; 'r'
0000000000000b2e         db  0x54 ; 'T'
0000000000000b2f         db  0x4d ; 'M'
0000000000000b30         db  0x43 ; 'C'
0000000000000b31         db  0x6c ; 'l'
0000000000000b32         db  0x6f ; 'o'
0000000000000b33         db  0x6e ; 'n'
0000000000000b34         db  0x65 ; 'e'
0000000000000b35         db  0x54 ; 'T'
0000000000000b36         db  0x61 ; 'a'
0000000000000b37         db  0x62 ; 'b'
0000000000000b38         db  0x6c ; 'l'
0000000000000b39         db  0x65 ; 'e'
0000000000000b3a         db  0x00 ; '.'
0000000000000b3b         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xb3c; 0xbb4[ (120 bytes)
        ; File offset : [2876; 2996[ (120 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000b3c         db  0x00 ; '.'
0000000000000b3d         db  0x00 ; '.'
0000000000000b3e         db  0x03 ; '.'
0000000000000b3f         db  0x00 ; '.'
0000000000000b40         db  0x02 ; '.'
0000000000000b41         db  0x00 ; '.'
0000000000000b42         db  0x02 ; '.'
0000000000000b43         db  0x00 ; '.'
0000000000000b44         db  0x02 ; '.'
0000000000000b45         db  0x00 ; '.'
0000000000000b46         db  0x02 ; '.'
0000000000000b47         db  0x00 ; '.'
0000000000000b48         db  0x02 ; '.'
0000000000000b49         db  0x00 ; '.'
0000000000000b4a         db  0x00 ; '.'
0000000000000b4b         db  0x00 ; '.'
0000000000000b4c         db  0x02 ; '.'
0000000000000b4d         db  0x00 ; '.'
0000000000000b4e         db  0x02 ; '.'
0000000000000b4f         db  0x00 ; '.'
0000000000000b50         db  0x02 ; '.'
0000000000000b51         db  0x00 ; '.'
0000000000000b52         db  0x02 ; '.'
0000000000000b53         db  0x00 ; '.'
0000000000000b54         db  0x02 ; '.'
0000000000000b55         db  0x00 ; '.'
0000000000000b56         db  0x02 ; '.'
0000000000000b57         db  0x00 ; '.'
0000000000000b58         db  0x02 ; '.'
0000000000000b59         db  0x00 ; '.'
0000000000000b5a         db  0x02 ; '.'
0000000000000b5b         db  0x00 ; '.'
0000000000000b5c         db  0x02 ; '.'
0000000000000b5d         db  0x00 ; '.'
0000000000000b5e         db  0x02 ; '.'
0000000000000b5f         db  0x00 ; '.'
0000000000000b60         db  0x04 ; '.'
0000000000000b61         db  0x00 ; '.'
0000000000000b62         db  0x02 ; '.'
0000000000000b63         db  0x00 ; '.'
0000000000000b64         db  0x02 ; '.'
0000000000000b65         db  0x00 ; '.'
0000000000000b66         db  0x02 ; '.'
0000000000000b67         db  0x00 ; '.'
0000000000000b68         db  0x02 ; '.'
0000000000000b69         db  0x00 ; '.'
0000000000000b6a         db  0x02 ; '.'
0000000000000b6b         db  0x00 ; '.'
0000000000000b6c         db  0x02 ; '.'
0000000000000b6d         db  0x00 ; '.'
0000000000000b6e         db  0x02 ; '.'
0000000000000b6f         db  0x00 ; '.'
0000000000000b70         db  0x02 ; '.'
0000000000000b71         db  0x00 ; '.'
0000000000000b72         db  0x02 ; '.'
0000000000000b73         db  0x00 ; '.'
0000000000000b74         db  0x02 ; '.'
0000000000000b75         db  0x00 ; '.'
0000000000000b76         db  0x00 ; '.'
0000000000000b77         db  0x00 ; '.'
0000000000000b78         db  0x02 ; '.'
0000000000000b79         db  0x00 ; '.'
0000000000000b7a         db  0x05 ; '.'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x02 ; '.'
0000000000000b7d         db  0x00 ; '.'
0000000000000b7e         db  0x02 ; '.'
0000000000000b7f         db  0x00 ; '.'
0000000000000b80         db  0x02 ; '.'
0000000000000b81         db  0x00 ; '.'
0000000000000b82         db  0x02 ; '.'
0000000000000b83         db  0x00 ; '.'
0000000000000b84         db  0x02 ; '.'
0000000000000b85         db  0x00 ; '.'
0000000000000b86         db  0x02 ; '.'
0000000000000b87         db  0x00 ; '.'
0000000000000b88         db  0x02 ; '.'
0000000000000b89         db  0x00 ; '.'
0000000000000b8a         db  0x02 ; '.'
0000000000000b8b         db  0x00 ; '.'
0000000000000b8c         db  0x02 ; '.'
0000000000000b8d         db  0x00 ; '.'
0000000000000b8e         db  0x03 ; '.'
0000000000000b8f         db  0x00 ; '.'
0000000000000b90         db  0x02 ; '.'
0000000000000b91         db  0x00 ; '.'
0000000000000b92         db  0x02 ; '.'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x02 ; '.'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x02 ; '.'
0000000000000b97         db  0x00 ; '.'
0000000000000b98         db  0x02 ; '.'
0000000000000b99         db  0x00 ; '.'
0000000000000b9a         db  0x02 ; '.'
0000000000000b9b         db  0x00 ; '.'
0000000000000b9c         db  0x03 ; '.'
0000000000000b9d         db  0x00 ; '.'
0000000000000b9e         db  0x00 ; '.'
0000000000000b9f         db  0x00 ; '.'
0000000000000ba0         db  0x02 ; '.'
0000000000000ba1         db  0x00 ; '.'
0000000000000ba2         db  0x02 ; '.'
0000000000000ba3         db  0x00 ; '.'
0000000000000ba4         db  0x02 ; '.'
0000000000000ba5         db  0x00 ; '.'
0000000000000ba6         db  0x06 ; '.'
0000000000000ba7         db  0x00 ; '.'
0000000000000ba8         db  0x02 ; '.'
0000000000000ba9         db  0x00 ; '.'
0000000000000baa         db  0x02 ; '.'
0000000000000bab         db  0x00 ; '.'
0000000000000bac         db  0x02 ; '.'
0000000000000bad         db  0x00 ; '.'
0000000000000bae         db  0x02 ; '.'
0000000000000baf         db  0x00 ; '.'
0000000000000bb0         db  0x02 ; '.'
0000000000000bb1         db  0x00 ; '.'
0000000000000bb2         db  0x02 ; '.'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x00 ; '.'
0000000000000bb5         db  0x00 ; '.'
0000000000000bb6         db  0x00 ; '.'
0000000000000bb7         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xbb8; 0xc18[ (96 bytes)
        ; File offset : [3000; 3096[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000bb8         db  0x01 ; '.'
0000000000000bb9         db  0x00 ; '.'
0000000000000bba         db  0x05 ; '.'
0000000000000bbb         db  0x00 ; '.'
0000000000000bbc         db  0x01 ; '.'
0000000000000bbd         db  0x00 ; '.'
0000000000000bbe         db  0x00 ; '.'
0000000000000bbf         db  0x00 ; '.'
0000000000000bc0         db  0x10 ; '.'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x00 ; '.'
0000000000000bc3         db  0x00 ; '.'
0000000000000bc4         db  0x00 ; '.'
0000000000000bc5         db  0x00 ; '.'
0000000000000bc6         db  0x00 ; '.'
0000000000000bc7         db  0x00 ; '.'
0000000000000bc8         db  0x13 ; '.'
0000000000000bc9         db  0x69 ; 'i'
0000000000000bca         db  0x69 ; 'i'
0000000000000bcb         db  0x0d ; '.'
0000000000000bcc         db  0x00 ; '.'
0000000000000bcd         db  0x00 ; '.'
0000000000000bce         db  0x06 ; '.'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x47 ; 'G'
0000000000000bd1         db  0x02 ; '.'
0000000000000bd2         db  0x00 ; '.'
0000000000000bd3         db  0x00 ; '.'
0000000000000bd4         db  0x10 ; '.'
0000000000000bd5         db  0x00 ; '.'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x00 ; '.'
0000000000000bd8         db  0x94 ; '.'
0000000000000bd9         db  0x91 ; '.'
0000000000000bda         db  0x96 ; '.'
0000000000000bdb         db  0x06 ; '.'
0000000000000bdc         db  0x00 ; '.'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x05 ; '.'
0000000000000bdf         db  0x00 ; '.'
0000000000000be0         db  0x51 ; 'Q'
0000000000000be1         db  0x02 ; '.'
0000000000000be2         db  0x00 ; '.'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x10 ; '.'
0000000000000be5         db  0x00 ; '.'
0000000000000be6         db  0x00 ; '.'
0000000000000be7         db  0x00 ; '.'
0000000000000be8         db  0x14 ; '.'
0000000000000be9         db  0x69 ; 'i'
0000000000000bea         db  0x69 ; 'i'
0000000000000beb         db  0x0d ; '.'
0000000000000bec         db  0x00 ; '.'
0000000000000bed         db  0x00 ; '.'
0000000000000bee         db  0x04 ; '.'
0000000000000bef         db  0x00 ; '.'
0000000000000bf0         db  0x5c ; '\'
0000000000000bf1         db  0x02 ; '.'
0000000000000bf2         db  0x00 ; '.'
0000000000000bf3         db  0x00 ; '.'
0000000000000bf4         db  0x10 ; '.'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x00 ; '.'
0000000000000bf7         db  0x00 ; '.'
0000000000000bf8         db  0x74 ; 't'
0000000000000bf9         db  0x19 ; '.'
0000000000000bfa         db  0x69 ; 'i'
0000000000000bfb         db  0x09 ; '.'
0000000000000bfc         db  0x00 ; '.'
0000000000000bfd         db  0x00 ; '.'
0000000000000bfe         db  0x03 ; '.'
0000000000000bff         db  0x00 ; '.'
0000000000000c00         db  0x66 ; 'f'
0000000000000c01         db  0x02 ; '.'
0000000000000c02         db  0x00 ; '.'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x10 ; '.'
0000000000000c05         db  0x00 ; '.'
0000000000000c06         db  0x00 ; '.'
0000000000000c07         db  0x00 ; '.'
0000000000000c08         db  0x75 ; 'u'
0000000000000c09         db  0x1a ; '.'
0000000000000c0a         db  0x69 ; 'i'
0000000000000c0b         db  0x09 ; '.'
0000000000000c0c         db  0x00 ; '.'
0000000000000c0d         db  0x00 ; '.'
0000000000000c0e         db  0x02 ; '.'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x72 ; 'r'
0000000000000c11         db  0x02 ; '.'
0000000000000c12         db  0x00 ; '.'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x00 ; '.'
0000000000000c15         db  0x00 ; '.'
0000000000000c16         db  0x00 ; '.'
0000000000000c17         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xc18; 0xe70[ (600 bytes)
        ; File offset : [3096; 3696[ (600 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000c18         db  0xd0 ; '.'
0000000000000c19         db  0xbb ; '.'
0000000000000c1a         db  0x20 ; ' '
0000000000000c1b         db  0x00 ; '.'
0000000000000c1c         db  0x00 ; '.'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x00 ; '.'
0000000000000c1f         db  0x00 ; '.'
0000000000000c20         db  0x08 ; '.'
0000000000000c21         db  0x00 ; '.'
0000000000000c22         db  0x00 ; '.'
0000000000000c23         db  0x00 ; '.'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x00 ; '.'
0000000000000c26         db  0x00 ; '.'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0xf0 ; '.'
0000000000000c29         db  0x18 ; '.'
0000000000000c2a         db  0x00 ; '.'
0000000000000c2b         db  0x00 ; '.'
0000000000000c2c         db  0x00 ; '.'
0000000000000c2d         db  0x00 ; '.'
0000000000000c2e         db  0x00 ; '.'
0000000000000c2f         db  0x00 ; '.'
0000000000000c30         db  0xd8 ; '.'
0000000000000c31         db  0xbb ; '.'
0000000000000c32         db  0x20 ; ' '
0000000000000c33         db  0x00 ; '.'
0000000000000c34         db  0x00 ; '.'
0000000000000c35         db  0x00 ; '.'
0000000000000c36         db  0x00 ; '.'
0000000000000c37         db  0x00 ; '.'
0000000000000c38         db  0x08 ; '.'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x00 ; '.'
0000000000000c3b         db  0x00 ; '.'
0000000000000c3c         db  0x00 ; '.'
0000000000000c3d         db  0x00 ; '.'
0000000000000c3e         db  0x00 ; '.'
0000000000000c3f         db  0x00 ; '.'
0000000000000c40         db  0xb0 ; '.'
0000000000000c41         db  0x18 ; '.'
0000000000000c42         db  0x00 ; '.'
0000000000000c43         db  0x00 ; '.'
0000000000000c44         db  0x00 ; '.'
0000000000000c45         db  0x00 ; '.'
0000000000000c46         db  0x00 ; '.'
0000000000000c47         db  0x00 ; '.'
0000000000000c48         db  0xe0 ; '.'
0000000000000c49         db  0xbb ; '.'
0000000000000c4a         db  0x20 ; ' '
0000000000000c4b         db  0x00 ; '.'
0000000000000c4c         db  0x00 ; '.'
0000000000000c4d         db  0x00 ; '.'
0000000000000c4e         db  0x00 ; '.'
0000000000000c4f         db  0x00 ; '.'
0000000000000c50         db  0x08 ; '.'
0000000000000c51         db  0x00 ; '.'
0000000000000c52         db  0x00 ; '.'
0000000000000c53         db  0x00 ; '.'
0000000000000c54         db  0x00 ; '.'
0000000000000c55         db  0x00 ; '.'
0000000000000c56         db  0x00 ; '.'
0000000000000c57         db  0x00 ; '.'
0000000000000c58         db  0xa9 ; '.'
0000000000000c59         db  0x93 ; '.'
0000000000000c5a         db  0x00 ; '.'
0000000000000c5b         db  0x00 ; '.'
0000000000000c5c         db  0x00 ; '.'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x00 ; '.'
0000000000000c5f         db  0x00 ; '.'
0000000000000c60         db  0xe8 ; '.'
0000000000000c61         db  0xbb ; '.'
0000000000000c62         db  0x20 ; ' '
0000000000000c63         db  0x00 ; '.'
0000000000000c64         db  0x00 ; '.'
0000000000000c65         db  0x00 ; '.'
0000000000000c66         db  0x00 ; '.'
0000000000000c67         db  0x00 ; '.'
0000000000000c68         db  0x08 ; '.'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x00 ; '.'
0000000000000c6b         db  0x00 ; '.'
0000000000000c6c         db  0x00 ; '.'
0000000000000c6d         db  0x00 ; '.'
0000000000000c6e         db  0x00 ; '.'
0000000000000c6f         db  0x00 ; '.'
0000000000000c70         db  0xb1 ; '.'
0000000000000c71         db  0x93 ; '.'
0000000000000c72         db  0x00 ; '.'
0000000000000c73         db  0x00 ; '.'
0000000000000c74         db  0x00 ; '.'
0000000000000c75         db  0x00 ; '.'
0000000000000c76         db  0x00 ; '.'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0xf0 ; '.'
0000000000000c79         db  0xbb ; '.'
0000000000000c7a         db  0x20 ; ' '
0000000000000c7b         db  0x00 ; '.'
0000000000000c7c         db  0x00 ; '.'
0000000000000c7d         db  0x00 ; '.'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x00 ; '.'
0000000000000c80         db  0x08 ; '.'
0000000000000c81         db  0x00 ; '.'
0000000000000c82         db  0x00 ; '.'
0000000000000c83         db  0x00 ; '.'
0000000000000c84         db  0x00 ; '.'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x00 ; '.'
0000000000000c87         db  0x00 ; '.'
0000000000000c88         db  0xb7 ; '.'
0000000000000c89         db  0x93 ; '.'
0000000000000c8a         db  0x00 ; '.'
0000000000000c8b         db  0x00 ; '.'
0000000000000c8c         db  0x00 ; '.'
0000000000000c8d         db  0x00 ; '.'
0000000000000c8e         db  0x00 ; '.'
0000000000000c8f         db  0x00 ; '.'
0000000000000c90         db  0xf8 ; '.'
0000000000000c91         db  0xbb ; '.'
0000000000000c92         db  0x20 ; ' '
0000000000000c93         db  0x00 ; '.'
0000000000000c94         db  0x00 ; '.'
0000000000000c95         db  0x00 ; '.'
0000000000000c96         db  0x00 ; '.'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x08 ; '.'
0000000000000c99         db  0x00 ; '.'
0000000000000c9a         db  0x00 ; '.'
0000000000000c9b         db  0x00 ; '.'
0000000000000c9c         db  0x00 ; '.'
0000000000000c9d         db  0x00 ; '.'
0000000000000c9e         db  0x00 ; '.'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0xc4 ; '.'
0000000000000ca1         db  0x93 ; '.'
0000000000000ca2         db  0x00 ; '.'
0000000000000ca3         db  0x00 ; '.'
0000000000000ca4         db  0x00 ; '.'
0000000000000ca5         db  0x00 ; '.'
0000000000000ca6         db  0x00 ; '.'
0000000000000ca7         db  0x00 ; '.'
0000000000000ca8         db  0x00 ; '.'
0000000000000ca9         db  0xbc ; '.'
0000000000000caa         db  0x20 ; ' '
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x00 ; '.'
0000000000000cad         db  0x00 ; '.'
0000000000000cae         db  0x00 ; '.'
0000000000000caf         db  0x00 ; '.'
0000000000000cb0         db  0x08 ; '.'
0000000000000cb1         db  0x00 ; '.'
0000000000000cb2         db  0x00 ; '.'
0000000000000cb3         db  0x00 ; '.'
0000000000000cb4         db  0x00 ; '.'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x00 ; '.'
0000000000000cb7         db  0x00 ; '.'
0000000000000cb8         db  0xd1 ; '.'
0000000000000cb9         db  0x93 ; '.'
0000000000000cba         db  0x00 ; '.'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x00 ; '.'
0000000000000cbd         db  0x00 ; '.'
0000000000000cbe         db  0x00 ; '.'
0000000000000cbf         db  0x00 ; '.'
0000000000000cc0         db  0x08 ; '.'
0000000000000cc1         db  0xbc ; '.'
0000000000000cc2         db  0x20 ; ' '
0000000000000cc3         db  0x00 ; '.'
0000000000000cc4         db  0x00 ; '.'
0000000000000cc5         db  0x00 ; '.'
0000000000000cc6         db  0x00 ; '.'
0000000000000cc7         db  0x00 ; '.'
0000000000000cc8         db  0x08 ; '.'
0000000000000cc9         db  0x00 ; '.'
0000000000000cca         db  0x00 ; '.'
0000000000000ccb         db  0x00 ; '.'
0000000000000ccc         db  0x00 ; '.'
0000000000000ccd         db  0x00 ; '.'
0000000000000cce         db  0x00 ; '.'
0000000000000ccf         db  0x00 ; '.'
0000000000000cd0         db  0xe5 ; '.'
0000000000000cd1         db  0x93 ; '.'
0000000000000cd2         db  0x00 ; '.'
0000000000000cd3         db  0x00 ; '.'
0000000000000cd4         db  0x00 ; '.'
0000000000000cd5         db  0x00 ; '.'
0000000000000cd6         db  0x00 ; '.'
0000000000000cd7         db  0x00 ; '.'
0000000000000cd8         db  0x10 ; '.'
0000000000000cd9         db  0xbc ; '.'
0000000000000cda         db  0x20 ; ' '
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x00 ; '.'
0000000000000cdd         db  0x00 ; '.'
0000000000000cde         db  0x00 ; '.'
0000000000000cdf         db  0x00 ; '.'
0000000000000ce0         db  0x08 ; '.'
0000000000000ce1         db  0x00 ; '.'
0000000000000ce2         db  0x00 ; '.'
0000000000000ce3         db  0x00 ; '.'
0000000000000ce4         db  0x00 ; '.'
0000000000000ce5         db  0x00 ; '.'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x00 ; '.'
0000000000000ce8         db  0xe7 ; '.'
0000000000000ce9         db  0x93 ; '.'
0000000000000cea         db  0x00 ; '.'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x00 ; '.'
0000000000000ced         db  0x00 ; '.'
0000000000000cee         db  0x00 ; '.'
0000000000000cef         db  0x00 ; '.'
0000000000000cf0         db  0x18 ; '.'
0000000000000cf1         db  0xbc ; '.'
0000000000000cf2         db  0x20 ; ' '
0000000000000cf3         db  0x00 ; '.'
0000000000000cf4         db  0x00 ; '.'
0000000000000cf5         db  0x00 ; '.'
0000000000000cf6         db  0x00 ; '.'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x08 ; '.'
0000000000000cf9         db  0x00 ; '.'
0000000000000cfa         db  0x00 ; '.'
0000000000000cfb         db  0x00 ; '.'
0000000000000cfc         db  0x00 ; '.'
0000000000000cfd         db  0x00 ; '.'
0000000000000cfe         db  0x00 ; '.'
0000000000000cff         db  0x00 ; '.'
0000000000000d00         db  0xca ; '.'
0000000000000d01         db  0x93 ; '.'
0000000000000d02         db  0x00 ; '.'
0000000000000d03         db  0x00 ; '.'
0000000000000d04         db  0x00 ; '.'
0000000000000d05         db  0x00 ; '.'
0000000000000d06         db  0x00 ; '.'
0000000000000d07         db  0x00 ; '.'
0000000000000d08         db  0x20 ; ' '
0000000000000d09         db  0xbc ; '.'
0000000000000d0a         db  0x20 ; ' '
0000000000000d0b         db  0x00 ; '.'
0000000000000d0c         db  0x00 ; '.'
0000000000000d0d         db  0x00 ; '.'
0000000000000d0e         db  0x00 ; '.'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x08 ; '.'
0000000000000d11         db  0x00 ; '.'
0000000000000d12         db  0x00 ; '.'
0000000000000d13         db  0x00 ; '.'
0000000000000d14         db  0x00 ; '.'
0000000000000d15         db  0x00 ; '.'
0000000000000d16         db  0x00 ; '.'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x94 ; '.'
0000000000000d19         db  0x84 ; '.'
0000000000000d1a         db  0x00 ; '.'
0000000000000d1b         db  0x00 ; '.'
0000000000000d1c         db  0x00 ; '.'
0000000000000d1d         db  0x00 ; '.'
0000000000000d1e         db  0x00 ; '.'
0000000000000d1f         db  0x00 ; '.'
0000000000000d20         db  0x28 ; '('
0000000000000d21         db  0xbc ; '.'
0000000000000d22         db  0x20 ; ' '
0000000000000d23         db  0x00 ; '.'
0000000000000d24         db  0x00 ; '.'
0000000000000d25         db  0x00 ; '.'
0000000000000d26         db  0x00 ; '.'
0000000000000d27         db  0x00 ; '.'
0000000000000d28         db  0x08 ; '.'
0000000000000d29         db  0x00 ; '.'
0000000000000d2a         db  0x00 ; '.'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x00 ; '.'
0000000000000d2d         db  0x00 ; '.'
0000000000000d2e         db  0x00 ; '.'
0000000000000d2f         db  0x00 ; '.'
0000000000000d30         db  0xef ; '.'
0000000000000d31         db  0x93 ; '.'
0000000000000d32         db  0x00 ; '.'
0000000000000d33         db  0x00 ; '.'
0000000000000d34         db  0x00 ; '.'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x00 ; '.'
0000000000000d37         db  0x00 ; '.'
0000000000000d38         db  0x08 ; '.'
0000000000000d39         db  0xc0 ; '.'
0000000000000d3a         db  0x20 ; ' '
0000000000000d3b         db  0x00 ; '.'
0000000000000d3c         db  0x00 ; '.'
0000000000000d3d         db  0x00 ; '.'
0000000000000d3e         db  0x00 ; '.'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x08 ; '.'
0000000000000d41         db  0x00 ; '.'
0000000000000d42         db  0x00 ; '.'
0000000000000d43         db  0x00 ; '.'
0000000000000d44         db  0x00 ; '.'
0000000000000d45         db  0x00 ; '.'
0000000000000d46         db  0x00 ; '.'
0000000000000d47         db  0x00 ; '.'
0000000000000d48         db  0x08 ; '.'
0000000000000d49         db  0xc0 ; '.'
0000000000000d4a         db  0x20 ; ' '
0000000000000d4b         db  0x00 ; '.'
0000000000000d4c         db  0x00 ; '.'
0000000000000d4d         db  0x00 ; '.'
0000000000000d4e         db  0x00 ; '.'
0000000000000d4f         db  0x00 ; '.'
0000000000000d50         db  0x10 ; '.'
0000000000000d51         db  0xc0 ; '.'
0000000000000d52         db  0x20 ; ' '
0000000000000d53         db  0x00 ; '.'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x00 ; '.'
0000000000000d56         db  0x00 ; '.'
0000000000000d57         db  0x00 ; '.'
0000000000000d58         db  0x08 ; '.'
0000000000000d59         db  0x00 ; '.'
0000000000000d5a         db  0x00 ; '.'
0000000000000d5b         db  0x00 ; '.'
0000000000000d5c         db  0x00 ; '.'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x00 ; '.'
0000000000000d5f         db  0x00 ; '.'
0000000000000d60         db  0x33 ; '3'
0000000000000d61         db  0x93 ; '.'
0000000000000d62         db  0x00 ; '.'
0000000000000d63         db  0x00 ; '.'
0000000000000d64         db  0x00 ; '.'
0000000000000d65         db  0x00 ; '.'
0000000000000d66         db  0x00 ; '.'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x60 ; '`'
0000000000000d69         db  0xc0 ; '.'
0000000000000d6a         db  0x20 ; ' '
0000000000000d6b         db  0x00 ; '.'
0000000000000d6c         db  0x00 ; '.'
0000000000000d6d         db  0x00 ; '.'
0000000000000d6e         db  0x00 ; '.'
0000000000000d6f         db  0x00 ; '.'
0000000000000d70         db  0x08 ; '.'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x00 ; '.'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x00 ; '.'
0000000000000d75         db  0x00 ; '.'
0000000000000d76         db  0x00 ; '.'
0000000000000d77         db  0x00 ; '.'
0000000000000d78         db  0x70 ; 'p'
0000000000000d79         db  0xc0 ; '.'
0000000000000d7a         db  0x20 ; ' '
0000000000000d7b         db  0x00 ; '.'
0000000000000d7c         db  0x00 ; '.'
0000000000000d7d         db  0x00 ; '.'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x00 ; '.'
0000000000000d80         db  0x78 ; 'x'
0000000000000d81         db  0xc0 ; '.'
0000000000000d82         db  0x20 ; ' '
0000000000000d83         db  0x00 ; '.'
0000000000000d84         db  0x00 ; '.'
0000000000000d85         db  0x00 ; '.'
0000000000000d86         db  0x00 ; '.'
0000000000000d87         db  0x00 ; '.'
0000000000000d88         db  0x08 ; '.'
0000000000000d89         db  0x00 ; '.'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x00 ; '.'
0000000000000d8c         db  0x00 ; '.'
0000000000000d8d         db  0x00 ; '.'
0000000000000d8e         db  0x00 ; '.'
0000000000000d8f         db  0x00 ; '.'
0000000000000d90         db  0xe0 ; '.'
0000000000000d91         db  0xc0 ; '.'
0000000000000d92         db  0x20 ; ' '
0000000000000d93         db  0x00 ; '.'
0000000000000d94         db  0x00 ; '.'
0000000000000d95         db  0x00 ; '.'
0000000000000d96         db  0x00 ; '.'
0000000000000d97         db  0x00 ; '.'
0000000000000d98         db  0xc0 ; '.'
0000000000000d99         db  0xbf ; '.'
0000000000000d9a         db  0x20 ; ' '
0000000000000d9b         db  0x00 ; '.'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x00 ; '.'
0000000000000d9e         db  0x00 ; '.'
0000000000000d9f         db  0x00 ; '.'
0000000000000da0         db  0x06 ; '.'
0000000000000da1         db  0x00 ; '.'
0000000000000da2         db  0x00 ; '.'
0000000000000da3         db  0x00 ; '.'
0000000000000da4         db  0x07 ; '.'
0000000000000da5         db  0x00 ; '.'
0000000000000da6         db  0x00 ; '.'
0000000000000da7         db  0x00 ; '.'
0000000000000da8         db  0x00 ; '.'
0000000000000da9         db  0x00 ; '.'
0000000000000daa         db  0x00 ; '.'
0000000000000dab         db  0x00 ; '.'
0000000000000dac         db  0x00 ; '.'
0000000000000dad         db  0x00 ; '.'
0000000000000dae         db  0x00 ; '.'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0xc8 ; '.'
0000000000000db1         db  0xbf ; '.'
0000000000000db2         db  0x20 ; ' '
0000000000000db3         db  0x00 ; '.'
0000000000000db4         db  0x00 ; '.'
0000000000000db5         db  0x00 ; '.'
0000000000000db6         db  0x00 ; '.'
0000000000000db7         db  0x00 ; '.'
0000000000000db8         db  0x06 ; '.'
0000000000000db9         db  0x00 ; '.'
0000000000000dba         db  0x00 ; '.'
0000000000000dbb         db  0x00 ; '.'
0000000000000dbc         db  0x18 ; '.'
0000000000000dbd         db  0x00 ; '.'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x00 ; '.'
0000000000000dc1         db  0x00 ; '.'
0000000000000dc2         db  0x00 ; '.'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x00 ; '.'
0000000000000dc5         db  0x00 ; '.'
0000000000000dc6         db  0x00 ; '.'
0000000000000dc7         db  0x00 ; '.'
0000000000000dc8         db  0xd0 ; '.'
0000000000000dc9         db  0xbf ; '.'
0000000000000dca         db  0x20 ; ' '
0000000000000dcb         db  0x00 ; '.'
0000000000000dcc         db  0x00 ; '.'
0000000000000dcd         db  0x00 ; '.'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x00 ; '.'
0000000000000dd0         db  0x06 ; '.'
0000000000000dd1         db  0x00 ; '.'
0000000000000dd2         db  0x00 ; '.'
0000000000000dd3         db  0x00 ; '.'
0000000000000dd4         db  0x1d ; '.'
0000000000000dd5         db  0x00 ; '.'
0000000000000dd6         db  0x00 ; '.'
0000000000000dd7         db  0x00 ; '.'
0000000000000dd8         db  0x00 ; '.'
0000000000000dd9         db  0x00 ; '.'
0000000000000dda         db  0x00 ; '.'
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x00 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x00 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0xd8 ; '.'
0000000000000de1         db  0xbf ; '.'
0000000000000de2         db  0x20 ; ' '
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x00 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x06 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x00 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x31 ; '1'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x00 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x00 ; '.'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x00 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x00 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x00 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0xe0 ; '.'
0000000000000df9         db  0xbf ; '.'
0000000000000dfa         db  0x20 ; ' '
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x00 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x00 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x06 ; '.'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x00 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x34 ; '4'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x00 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x00 ; '.'
0000000000000e09         db  0x00 ; '.'
0000000000000e0a         db  0x00 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x00 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x80 ; '.'
0000000000000e11         db  0xc0 ; '.'
0000000000000e12         db  0x20 ; ' '
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x00 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x00 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x05 ; '.'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x00 ; '.'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x37 ; '7'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x00 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x00 ; '.'
0000000000000e21         db  0x00 ; '.'
0000000000000e22         db  0x00 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x00 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x00 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x88 ; '.'
0000000000000e29         db  0xc0 ; '.'
0000000000000e2a         db  0x20 ; ' '
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x00 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x05 ; '.'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x00 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x36 ; '6'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x00 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x00 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x00 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x00 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x00 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x90 ; '.'
0000000000000e41         db  0xc0 ; '.'
0000000000000e42         db  0x20 ; ' '
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x00 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x00 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x05 ; '.'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x00 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x39 ; '9'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x00 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x00 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x00 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x00 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x00 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0xa0 ; '.'
0000000000000e59         db  0xc0 ; '.'
0000000000000e5a         db  0x20 ; ' '
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x00 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x00 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x05 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x00 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x3b ; ';'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x00 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x00 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x00 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x00 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x00 ; '.'
0000000000000e6f         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0xe70; 0x12f0[ (1152 bytes)
        ; File offset : [3696; 4848[ (1152 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000e70         db  0x40 ; '@'
0000000000000e71         db  0xbe ; '.'
0000000000000e72         db  0x20 ; ' '
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x00 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x07 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x00 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x01 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x00 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x00 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x48 ; 'H'
0000000000000e89         db  0xbe ; '.'
0000000000000e8a         db  0x20 ; ' '
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x07 ; '.'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x00 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x02 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x00 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x00 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x00 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x50 ; 'P'
0000000000000ea1         db  0xbe ; '.'
0000000000000ea2         db  0x20 ; ' '
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x00 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x07 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x03 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x00 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x00 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x00 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x58 ; 'X'
0000000000000eb9         db  0xbe ; '.'
0000000000000eba         db  0x20 ; ' '
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x00 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x07 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x00 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x04 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x00 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x00 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x60 ; '`'
0000000000000ed1         db  0xbe ; '.'
0000000000000ed2         db  0x20 ; ' '
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x00 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x07 ; '.'
0000000000000ed9         db  0x00 ; '.'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x05 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x00 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x00 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x68 ; 'h'
0000000000000ee9         db  0xbe ; '.'
0000000000000eea         db  0x20 ; ' '
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x07 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x06 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x00 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x00 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x70 ; 'p'
0000000000000f01         db  0xbe ; '.'
0000000000000f02         db  0x20 ; ' '
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x07 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x00 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x08 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x00 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x00 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x78 ; 'x'
0000000000000f19         db  0xbe ; '.'
0000000000000f1a         db  0x20 ; ' '
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0x07 ; '.'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x00 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x09 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x00 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x80 ; '.'
0000000000000f31         db  0xbe ; '.'
0000000000000f32         db  0x20 ; ' '
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x07 ; '.'
0000000000000f39         db  0x00 ; '.'
0000000000000f3a         db  0x00 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x0a ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x00 ; '.'
0000000000000f41         db  0x00 ; '.'
0000000000000f42         db  0x00 ; '.'
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x88 ; '.'
0000000000000f49         db  0xbe ; '.'
0000000000000f4a         db  0x20 ; ' '
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x07 ; '.'
0000000000000f51         db  0x00 ; '.'
0000000000000f52         db  0x00 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x0b ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x00 ; '.'
0000000000000f59         db  0x00 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x90 ; '.'
0000000000000f61         db  0xbe ; '.'
0000000000000f62         db  0x20 ; ' '
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x07 ; '.'
0000000000000f69         db  0x00 ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x0c ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x00 ; '.'
0000000000000f71         db  0x00 ; '.'
0000000000000f72         db  0x00 ; '.'
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x98 ; '.'
0000000000000f79         db  0xbe ; '.'
0000000000000f7a         db  0x20 ; ' '
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x07 ; '.'
0000000000000f81         db  0x00 ; '.'
0000000000000f82         db  0x00 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x0d ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x00 ; '.'
0000000000000f89         db  0x00 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0xa0 ; '.'
0000000000000f91         db  0xbe ; '.'
0000000000000f92         db  0x20 ; ' '
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x07 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x0e ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'                                         ; DATA XREF=vasnprintf+180
0000000000000fa0         db  0x00 ; '.'
0000000000000fa1         db  0x00 ; '.'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0xa8 ; '.'
0000000000000fa9         db  0xbe ; '.'
0000000000000faa         db  0x20 ; ' '
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x07 ; '.'
0000000000000fb1         db  0x00 ; '.'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x0f ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x00 ; '.'
0000000000000fb9         db  0x00 ; '.'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0xb0 ; '.'
0000000000000fc1         db  0xbe ; '.'
0000000000000fc2         db  0x20 ; ' '
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x07 ; '.'
0000000000000fc9         db  0x00 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x10 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x00 ; '.'
0000000000000fd1         db  0x00 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0xb8 ; '.'
0000000000000fd9         db  0xbe ; '.'
0000000000000fda         db  0x20 ; ' '
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x07 ; '.'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x11 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x00 ; '.'
0000000000000fe9         db  0x00 ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0xc0 ; '.'
0000000000000ff1         db  0xbe ; '.'
0000000000000ff2         db  0x20 ; ' '
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x07 ; '.'
0000000000000ff9         db  0x00 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x12 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x00 ; '.'                                         ; DATA XREF=unary_operator+539
0000000000001001         db  0x00 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0xc8 ; '.'
0000000000001009         db  0xbe ; '.'
000000000000100a         db  0x20 ; ' '
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x07 ; '.'
0000000000001011         db  0x00 ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x13 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x00 ; '.'
0000000000001019         db  0x00 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0xd0 ; '.'
0000000000001021         db  0xbe ; '.'
0000000000001022         db  0x20 ; ' '
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x07 ; '.'
0000000000001029         db  0x00 ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x14 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x00 ; '.'
0000000000001031         db  0x00 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0xd8 ; '.'
0000000000001039         db  0xbe ; '.'
000000000000103a         db  0x20 ; ' '
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x07 ; '.'
0000000000001041         db  0x00 ; '.'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x15 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x00 ; '.'
0000000000001049         db  0x00 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0xe0 ; '.'
0000000000001051         db  0xbe ; '.'
0000000000001052         db  0x20 ; ' '
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x07 ; '.'
0000000000001059         db  0x00 ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x16 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x00 ; '.'
0000000000001061         db  0x00 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0xe8 ; '.'
0000000000001069         db  0xbe ; '.'
000000000000106a         db  0x20 ; ' '
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x07 ; '.'
0000000000001071         db  0x00 ; '.'
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x17 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x00 ; '.'
0000000000001079         db  0x00 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xf0 ; '.'
0000000000001081         db  0xbe ; '.'
0000000000001082         db  0x20 ; ' '
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x07 ; '.'
0000000000001089         db  0x00 ; '.'
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x19 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x00 ; '.'
0000000000001091         db  0x00 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0xf8 ; '.'
0000000000001099         db  0xbe ; '.'
000000000000109a         db  0x20 ; ' '
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x07 ; '.'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x00 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x1a ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x00 ; '.'
00000000000010a9         db  0x00 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x00 ; '.'
00000000000010b1         db  0xbf ; '.'
00000000000010b2         db  0x20 ; ' '
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x07 ; '.'
00000000000010b9         db  0x00 ; '.'
00000000000010ba         db  0x00 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x1b ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x00 ; '.'
00000000000010c1         db  0x00 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x08 ; '.'
00000000000010c9         db  0xbf ; '.'
00000000000010ca         db  0x20 ; ' '
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x07 ; '.'
00000000000010d1         db  0x00 ; '.'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x1c ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x00 ; '.'
00000000000010d9         db  0x00 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x10 ; '.'
00000000000010e1         db  0xbf ; '.'
00000000000010e2         db  0x20 ; ' '
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x07 ; '.'
00000000000010e9         db  0x00 ; '.'
00000000000010ea         db  0x00 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x1e ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x00 ; '.'
00000000000010f1         db  0x00 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x18 ; '.'
00000000000010f9         db  0xbf ; '.'
00000000000010fa         db  0x20 ; ' '
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x07 ; '.'
0000000000001101         db  0x00 ; '.'
0000000000001102         db  0x00 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x1f ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x00 ; '.'
0000000000001109         db  0x00 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x20 ; ' '
0000000000001111         db  0xbf ; '.'
0000000000001112         db  0x20 ; ' '
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x07 ; '.'
0000000000001119         db  0x00 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x20 ; ' '
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x00 ; '.'
0000000000001121         db  0x00 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x28 ; '('
0000000000001129         db  0xbf ; '.'
000000000000112a         db  0x20 ; ' '
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x07 ; '.'
0000000000001131         db  0x00 ; '.'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x21 ; '!'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x00 ; '.'
0000000000001139         db  0x00 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x30 ; '0'
0000000000001141         db  0xbf ; '.'
0000000000001142         db  0x20 ; ' '
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x07 ; '.'
0000000000001149         db  0x00 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x22 ; '"'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x00 ; '.'
0000000000001151         db  0x00 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x38 ; '8'
0000000000001159         db  0xbf ; '.'
000000000000115a         db  0x20 ; ' '
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x07 ; '.'
0000000000001161         db  0x00 ; '.'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x23 ; '#'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0x00 ; '.'
0000000000001169         db  0x00 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x40 ; '@'
0000000000001171         db  0xbf ; '.'
0000000000001172         db  0x20 ; ' '
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x07 ; '.'
0000000000001179         db  0x00 ; '.'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x24 ; '$'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0x00 ; '.'
0000000000001181         db  0x00 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x48 ; 'H'
0000000000001189         db  0xbf ; '.'
000000000000118a         db  0x20 ; ' '
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x07 ; '.'
0000000000001191         db  0x00 ; '.'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x25 ; '%'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x00 ; '.'
0000000000001199         db  0x00 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x50 ; 'P'
00000000000011a1         db  0xbf ; '.'
00000000000011a2         db  0x20 ; ' '
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x07 ; '.'
00000000000011a9         db  0x00 ; '.'
00000000000011aa         db  0x00 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x26 ; '&'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x00 ; '.'
00000000000011b1         db  0x00 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x58 ; 'X'
00000000000011b9         db  0xbf ; '.'
00000000000011ba         db  0x20 ; ' '
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x07 ; '.'
00000000000011c1         db  0x00 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x27 ; '''
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x00 ; '.'
00000000000011c9         db  0x00 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x60 ; '`'
00000000000011d1         db  0xbf ; '.'
00000000000011d2         db  0x20 ; ' '
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x07 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x28 ; '('
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x00 ; '.'
00000000000011e1         db  0x00 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x68 ; 'h'
00000000000011e9         db  0xbf ; '.'
00000000000011ea         db  0x20 ; ' '
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x07 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x29 ; ')'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x00 ; '.'
00000000000011f9         db  0x00 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x70 ; 'p'
0000000000001201         db  0xbf ; '.'
0000000000001202         db  0x20 ; ' '
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x07 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x2a ; '*'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x00 ; '.'
0000000000001211         db  0x00 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x78 ; 'x'
0000000000001219         db  0xbf ; '.'
000000000000121a         db  0x20 ; ' '
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x07 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x2b ; '+'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x00 ; '.'
0000000000001229         db  0x00 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x80 ; '.'
0000000000001231         db  0xbf ; '.'
0000000000001232         db  0x20 ; ' '
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x07 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x2c ; ','
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0x00 ; '.'
0000000000001241         db  0x00 ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x88 ; '.'
0000000000001249         db  0xbf ; '.'
000000000000124a         db  0x20 ; ' '
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x07 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x2d ; '-'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0x00 ; '.'
0000000000001259         db  0x00 ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x90 ; '.'
0000000000001261         db  0xbf ; '.'
0000000000001262         db  0x20 ; ' '
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x07 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x2e ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0x00 ; '.'
0000000000001271         db  0x00 ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x98 ; '.'
0000000000001279         db  0xbf ; '.'
000000000000127a         db  0x20 ; ' '
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x07 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x2f ; '/'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0x00 ; '.'
0000000000001289         db  0x00 ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0xa0 ; '.'
0000000000001291         db  0xbf ; '.'
0000000000001292         db  0x20 ; ' '
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x07 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x30 ; '0'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0x00 ; '.'
00000000000012a1         db  0x00 ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0xa8 ; '.'
00000000000012a9         db  0xbf ; '.'
00000000000012aa         db  0x20 ; ' '
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x07 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x32 ; '2'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0x00 ; '.'
00000000000012b9         db  0x00 ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0xb0 ; '.'
00000000000012c1         db  0xbf ; '.'
00000000000012c2         db  0x20 ; ' '
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x07 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x33 ; '3'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0x00 ; '.'
00000000000012d1         db  0x00 ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0xb8 ; '.'
00000000000012d9         db  0xbf ; '.'
00000000000012da         db  0x20 ; ' '
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x07 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x35 ; '5'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0x00 ; '.'
00000000000012e9         db  0x00 ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x12f0; 0x1307[ (23 bytes)
        ; File offset : [4848; 4871[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
00000000000012f0         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
00000000000012f4         mov        rax, qword [qword_20bfd0]                   ; qword_20bfd0
00000000000012fb         test       rax, rax
00000000000012fe         je         loc_1302

0000000000001300         call       rax

                     loc_1302:
0000000000001302         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001306         ret
                        ; endp
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x00 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1310; 0x1620[ (784 bytes)
        ; File offset : [4880; 5664[ (784 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1310:
0000000000001310         push       qword [qword_20be30]                        ; Begin of unwind block (FDE at 0xa17c), qword_20be30, CODE XREF=sub_1326+5
0000000000001316         jmp        qword [qword_20be30+8]                      ; 0x20be38
                        ; endp
000000000000131c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___snprintf_chk:        // __snprintf_chk
0000000000001320         jmp        qword [__snprintf_chk@GOT]                  ; __snprintf_chk, __snprintf_chk@GOT, CODE XREF=vasnprintf+1464, vasnprintf+1776, vasnprintf+2093, vasnprintf+2222, vasnprintf+2417, vasnprintf+3225
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1326:
0000000000001326         push       0x0
000000000000132b         jmp        loc_1310


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001330         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, verror_at_line+84, verror_at_line+130, xrealloc+40, rpl_vasprintf+91, vasnprintf+402, vasnprintf+430, vasnprintf+458
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1336:
0000000000001336         push       0x1
000000000000133b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001340         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=binary_operator+1325, set_program_name+154, sub_3c70+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, verror_at_line+176, xalloc_die+48
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1346:
0000000000001346         push       0x2
000000000000134b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001350         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=unary_operator+273, unary_operator+1334, unary_operator+1376, close_stdout+22, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45, quotearg_alloc_mem+42, verror_at_line+157, xstrcat+288, xvasprintf+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1356:
0000000000001356         push       0x3
000000000000135b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error_at_line:        // error_at_line
0000000000001360         jmp        qword [error_at_line@GOT]                   ; error_at_line, error_at_line@GOT, CODE XREF=verror_at_line+68
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1366:
0000000000001366         push       0x4
000000000000136b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001370         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+799
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1376:
0000000000001376         push       0x5
000000000000137b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001380         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1386:
0000000000001386         push       0x6
000000000000138b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001390         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1396:
0000000000001396         push       0x7
000000000000139b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_isatty:        // isatty
00000000000013a0         jmp        qword [isatty@GOT]                          ; isatty, isatty@GOT, CODE XREF=unary_operator+329
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13a6:
00000000000013a6         push       0x8
00000000000013ab         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
00000000000013b0         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+62
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13b6:
00000000000013b6         push       0x9
00000000000013bb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
00000000000013c0         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13c6:
00000000000013c6         push       0xa
00000000000013cb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
00000000000013d0         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13d6:
00000000000013d6         push       0xb
00000000000013db         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
00000000000013e0         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+384, find_int+194, beyond+42, binary_operator+1091, binary_operator+1344, unary_operator+1436, or+917, or+967, three_arguments+305, usage+31, usage+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13e6:
00000000000013e6         push       0xc
00000000000013eb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
00000000000013f0         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_13f6:
00000000000013f6         push       0xd
00000000000013fb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001400         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=binary_operator+830, binary_operator+1152, quotearg_buffer_restyled+343, sub_3c70+411, sub_3c70+1742, xstrdup+4, xstrcat+100, xstrcat+166
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1406:
0000000000001406         push       0xe
000000000000140b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
0000000000001410         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=unary_operator+1249
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1416:
0000000000001416         push       0xf
000000000000141b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001420         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=binary_operator+1320, unary_operator+1484, sub_3c70+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, version_etc_va+101, version_etc+192, xstrcat+277
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1426:
0000000000001426         push       0x10
000000000000142b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001430         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1436:
0000000000001436         push       0x11
000000000000143b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001440         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1446:
0000000000001446         push       0x12
000000000000144b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001450         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1456:
0000000000001456         push       0x13
000000000000145b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001460         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1466:
0000000000001466         push       0x14
000000000000146b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_geteuid:        // geteuid
0000000000001470         jmp        qword [geteuid@GOT]                         ; geteuid, geteuid@GOT, CODE XREF=unary_operator+1390
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1476:
0000000000001476         push       0x15
000000000000147b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001480         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1486:
0000000000001486         push       0x16
000000000000148b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001490         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+100, usage+137, usage+174, usage+211, usage+248, usage+285, usage+322, usage+359, usage+396, usage+433, usage+470
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1496:
0000000000001496         push       0x17
000000000000149b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
00000000000014a0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14a6:
00000000000014a6         push       0x18
00000000000014ab         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
00000000000014b0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+125, main+213, main+236, main+257, binary_operator+203, binary_operator+351
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14b6:
00000000000014b6         push       0x19
00000000000014bb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtol:        // strtol
00000000000014c0         jmp        qword [strtol@GOT]                          ; strtol, strtol@GOT, CODE XREF=unary_operator+297
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14c6:
00000000000014c6         push       0x1a
00000000000014cb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
00000000000014d0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=xmemdup+35, xstrcat+186, vasnprintf+686, vasnprintf+912, vasnprintf+973, vasnprintf+2590, vasnprintf+3085, vasnprintf+3403, vasnprintf+3547, vasnprintf+4227, printf_parse+2492
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14d6:
00000000000014d6         push       0x1b
00000000000014db         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
00000000000014e0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14e6:
00000000000014e6         push       0x1c
00000000000014eb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
00000000000014f0         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=binary_operator+490, binary_operator+535, binary_operator+671, binary_operator+702, binary_operator+985, binary_operator+1026, binary_operator+1123, unary_operator+217, unary_operator+417, unary_operator+513, unary_operator+617
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_14f6:
00000000000014f6         push       0x1d
00000000000014fb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001500         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, vasnprintf+210, vasnprintf+2547, vasnprintf+3007, vasnprintf+3353, vasnprintf+3497, vasnprintf+4191, printf_parse+2420, printf_parse+2528, printf_parse+2852, printf_parse+3169
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1506:
0000000000001506         push       0x1e
000000000000150b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001510         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1516:
0000000000001516         push       0x1f
000000000000151b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001520         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1526:
0000000000001526         push       0x20
000000000000152b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getegid:        // getegid
0000000000001530         jmp        qword [getegid@GOT]                         ; getegid, getegid@GOT, CODE XREF=unary_operator+1348
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1536:
0000000000001536         push       0x21
000000000000153b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001540         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1546:
0000000000001546         push       0x22
000000000000154b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001550         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, vasnprintf+645, vasnprintf+1242, vasnprintf+1660, vasnprintf+2887, vasnprintf+4043, vasnprintf+4085, printf_parse+805, printf_parse+1041, printf_parse+2266, printf_parse+2729
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1556:
0000000000001556         push       0x23
000000000000155b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001560         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+31, usage+774, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1566:
0000000000001566         push       0x24
000000000000156b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001570         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+714, usage+762, usage+869, usage+930, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1576:
0000000000001576         push       0x25
000000000000157b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001580         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=close_stdout+125, close_stdout+157, verror_at_line+114, verror_at_line+171, xalloc_die+43
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1586:
0000000000001586         push       0x26
000000000000158b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001590         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1596:
0000000000001596         push       0x27
000000000000159b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_euidaccess:        // euidaccess
00000000000015a0         jmp        qword [euidaccess@GOT]                      ; euidaccess, euidaccess@GOT, CODE XREF=unary_operator+174, unary_operator+374, unary_operator+470
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15a6:
00000000000015a6         push       0x28
00000000000015ab         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
00000000000015b0         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15b6:
00000000000015b6         push       0x29
00000000000015bb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
00000000000015c0         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=test_syntax_error+165, usage+63
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15c6:
00000000000015c6         push       0x2a
00000000000015cb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
00000000000015d0         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15d6:
00000000000015d6         push       0x2b
00000000000015db         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
00000000000015e0         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+56, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15e6:
00000000000015e6         push       0x2c
00000000000015eb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
00000000000015f0         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_3c70+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_15f6:
00000000000015f6         push       0x2d
00000000000015fb         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001600         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_3c70+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1606:
0000000000001606         push       0x2e
000000000000160b         jmp        0x1310
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001610         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=find_int+4, sub_3a10+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1616:
0000000000001616         push       0x2f
000000000000161b         jmp        0x1310
                        ; endp


        ; Section .plt.got
        ; Range: [0x1620; 0x1628[ (8 bytes)
        ; File offset : [5664; 5672[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20bfe0:        // qword_20bfe0
0000000000001620         jmp        qword [qword_20bfe0]                        ; qword, End of unwind block (FDE at 0xa17c), Begin of unwind block (FDE at 0xa1a4), qword_20bfe0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001626         align      8
0000000000001628         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xa1a4)
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1630; 0x82ee[ (27838 bytes)
        ; File offset : [5680; 33518[ (27838 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     main:
0000000000001630         push       rbp                                         ; Begin of unwind block (FDE at 0xa394), DATA XREF=_start+29
0000000000001631         push       rbx
0000000000001632         mov        ebx, edi
0000000000001634         mov        rbp, rsi
0000000000001637         sub        rsp, 0x8
000000000000163b         mov        rdi, qword [rsi]
000000000000163e         call       set_program_name                            ; set_program_name
0000000000001643         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0x98e1
000000000000164a         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
000000000000164f         call       j_setlocale                                 ; setlocale
0000000000001654         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
000000000000165b         lea        rdi, qword [aGnuCoreutils+4]                ; argument "__domainname" for method j_bindtextdomain, 0x844a
0000000000001662         call       j_bindtextdomain                            ; bindtextdomain
0000000000001667         lea        rdi, qword [aGnuCoreutils+4]                ; argument "__domainname" for method j_textdomain, 0x844a
000000000000166e         call       j_textdomain                                ; textdomain
0000000000001673         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
000000000000167a         mov        dword [exit_failure], 0x2                   ; exit_failure
0000000000001684         call       atexit                                      ; atexit
0000000000001689         cmp        ebx, 0x2
000000000000168c         mov        qword [argv], rbp                           ; argv
0000000000001693         je         loc_16f7

0000000000001695         cmp        ebx, 0x1
0000000000001698         jle        loc_1793

000000000000169e         movsxd     rax, ebx
00000000000016a1         lea        rsi, qword [aKevinBraunsdor+17]             ; argument "__s2" for method j_strcmp, 0x84ce
00000000000016a8         mov        rdi, qword [rbp+rax*8-8]                    ; argument "__s1" for method j_strcmp
00000000000016ad         call       j_strcmp                                    ; strcmp
00000000000016b2         test       eax, eax
00000000000016b4         jne        loc_1793

00000000000016ba         lea        eax, dword [rbx-1]
00000000000016bd         lea        edi, dword [rbx-2]
00000000000016c0         mov        dword [pos], 0x1                            ; pos
00000000000016ca         mov        dword [argc], eax                           ; argc
00000000000016d0         call       posixtest                                   ; posixtest
00000000000016d5         movsxd     rdx, dword [pos]                            ; pos
00000000000016dc         cmp        edx, dword [argc]                           ; argc
00000000000016e2         jne        loc_17c2

00000000000016e8         xor        eax, 0x1
00000000000016eb         movzx      ebx, al

                     loc_16ee:
00000000000016ee         add        rsp, 0x8                                    ; CODE XREF=main+291, main+350
00000000000016f2         mov        eax, ebx
00000000000016f4         pop        rbx
00000000000016f5         pop        rbp
00000000000016f6         ret
                        ; endp

                     loc_16f7:
00000000000016f7         mov        rbp, qword [rbp+8]                          ; CODE XREF=main+99
00000000000016fb         lea        rsi, qword [aHelp]                          ; argument "__s2" for method j_strcmp, "--help"
0000000000001702         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
0000000000001705         call       j_strcmp                                    ; strcmp
000000000000170a         test       eax, eax
000000000000170c         je         loc_17e3

0000000000001712         lea        rsi, qword [aVersion]                       ; argument "__s2" for method j_strcmp, "--version"
0000000000001719         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
000000000000171c         call       j_strcmp                                    ; strcmp
0000000000001721         test       eax, eax
0000000000001723         mov        ebx, eax
0000000000001725         je         loc_1755

0000000000001727         lea        rsi, qword [aKevinBraunsdor+17]             ; argument "__s2" for method j_strcmp, 0x84ce
000000000000172e         mov        rdi, rbp                                    ; argument "__s1" for method j_strcmp
0000000000001731         call       j_strcmp                                    ; strcmp
0000000000001736         test       eax, eax
0000000000001738         jne        loc_1793

000000000000173a         mov        dword [argc], 0x1                           ; argc
0000000000001744         mov        dword [pos], 0x1                            ; pos
000000000000174e         mov        ebx, 0x1
0000000000001753         jmp        loc_16ee

                     loc_1755:
0000000000001755         sub        rsp, 0x8                                    ; CODE XREF=main+245
0000000000001759         mov        rcx, qword [Version]                        ; Version
0000000000001760         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001767         push       0x0
0000000000001769         lea        rdx, qword [aGnuCoreutils]                  ; "GNU coreutils"
0000000000001770         lea        r9, qword [aMatthewBradbur]                 ; "Matthew Bradburn"
0000000000001777         lea        r8, qword [aKevinBraunsdor]                 ; "Kevin Braunsdorf"
000000000000177e         lea        rsi, qword [aTestAndor+12]                  ; 0x842d
0000000000001785         xor        eax, eax
0000000000001787         call       version_etc                                 ; version_etc
000000000000178c         pop        rax
000000000000178d         pop        rdx
000000000000178e         jmp        loc_16ee

                     loc_1793:
0000000000001793         lea        rdi, qword [aKevinBraunsdor+17]             ; 0x84ce, CODE XREF=main+104, main+132, main+264
000000000000179a         call       quote                                       ; quote
000000000000179f         lea        rsi, qword [aMissingS]                      ; "missing %s"
00000000000017a6         mov        rbx, rax
00000000000017a9         mov        edx, 0x5

                     loc_17ae:
00000000000017ae         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=main+433
00000000000017b0         call       j_dcgettext                                 ; dcgettext
00000000000017b5         mov        rsi, rbx
00000000000017b8         mov        rdi, rax
00000000000017bb         xor        eax, eax
00000000000017bd         call       test_syntax_error                           ; test_syntax_error

                     loc_17c2:
00000000000017c2         mov        rax, qword [argv]                           ; argv, CODE XREF=main+178
00000000000017c9         mov        rdi, qword [rax+rdx*8]
00000000000017cd         call       quote                                       ; quote
00000000000017d2         mov        edx, 0x5
00000000000017d7         mov        rbx, rax
00000000000017da         lea        rsi, qword [aExtraArgumentS]                ; "extra argument %s"
00000000000017e1         jmp        loc_17ae

                     loc_17e3:
00000000000017e3         xor        edi, edi                                    ; argument #1 for method usage, CODE XREF=main+220
00000000000017e5         call       usage                                       ; usage
00000000000017ea         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xa394)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
00000000000017f0         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xa14c)
00000000000017f2         mov        r9, rdx
00000000000017f5         pop        rsi
00000000000017f6         mov        rdx, rsp
00000000000017f9         and        rsp, 0xfffffffffffffff0
00000000000017fd         push       rax
00000000000017fe         push       rsp
00000000000017ff         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000001806         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000180d         lea        rdi, qword [main]                           ; main
0000000000001814         call       qword [qword_20bfc0+8]                      ; 0x20bfc8
000000000000181a         hlt
                        ; endp
000000000000181b         align      32                                          ; End of unwind block (FDE at 0xa14c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000001820         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000001827         push       rbp
0000000000001828         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000182f         cmp        rax, rdi
0000000000001832         mov        rbp, rsp
0000000000001835         je         loc_1850

0000000000001837         mov        rax, qword [qword_20bfc0]                   ; qword_20bfc0
000000000000183e         test       rax, rax
0000000000001841         je         loc_1850

0000000000001843         pop        rbp
0000000000001844         jmp        rax
                        ; endp
0000000000001846         align      16

                     loc_1850:
0000000000001850         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000001851         ret
                        ; endp
0000000000001852         align      32

                     register_tm_clones:
0000000000001860         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000001867         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000186e         push       rbp
000000000000186f         sub        rsi, rdi
0000000000001872         mov        rbp, rsp
0000000000001875         sar        rsi, 0x3
0000000000001879         mov        rax, rsi
000000000000187c         shr        rax, 0x3f
0000000000001880         add        rsi, rax
0000000000001883         sar        rsi, 0x1
0000000000001886         je         loc_18a0

0000000000001888         mov        rax, qword [qword_20bfd8]                   ; qword_20bfd8
000000000000188f         test       rax, rax
0000000000001892         je         loc_18a0

0000000000001894         pop        rbp
0000000000001895         jmp        rax
                        ; endp
0000000000001897         align      32

                     loc_18a0:
00000000000018a0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000018a1         ret
                        ; endp
00000000000018a2         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
00000000000018b0         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
00000000000018b7         jne        loc_18e8

00000000000018b9         cmp        qword [qword_20bfe0], 0x0                   ; qword_20bfe0
00000000000018c1         push       rbp
00000000000018c2         mov        rbp, rsp
00000000000018c5         je         loc_18d3

00000000000018c7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000018ce         call       j_qword_20bfe0                              ; qword_20bfe0

                     loc_18d3:
00000000000018d3         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
00000000000018d8         mov        byte [completed.7697], 0x1                  ; completed.7697
00000000000018df         pop        rbp
00000000000018e0         ret
                        ; endp
00000000000018e1         align      8

                     loc_18e8:
00000000000018e8         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
00000000000018ea         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
00000000000018f0         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
00000000000018f1         mov        rbp, rsp
00000000000018f4         pop        rbp
00000000000018f5         jmp        register_tm_clones                          ; register_tm_clones
00000000000018fa         align      256


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     binop:
0000000000001900         mov        r8, rdi                                     ; Begin of unwind block (FDE at 0xa1bc), CODE XREF=or+562, or+580, three_arguments+37
0000000000001903         lea        rdi, qword [_IO_stdin_used+5]               ; 0x8305
000000000000190a         mov        ecx, 0x2
000000000000190f         mov        rsi, r8
0000000000001912         mov        eax, 0x1
0000000000001917         rep  cmpsb byte [rsi], byte [rdi]
0000000000001919         seta       dl
000000000000191c         sbb        dl, 0x0
000000000000191f         test       dl, dl
0000000000001921         je         loc_1a68

0000000000001927         lea        rdi, qword [_IO_stdin_used+4]               ; 0x8304
000000000000192e         mov        ecx, 0x3
0000000000001933         mov        rsi, r8
0000000000001936         rep  cmpsb byte [rsi], byte [rdi]
0000000000001938         seta       dl
000000000000193b         sbb        dl, 0x0
000000000000193e         test       dl, dl
0000000000001940         je         loc_1a68

0000000000001946         lea        rdi, qword [_IO_stdin_used+7]               ; 0x8307
000000000000194d         mov        ecx, 0x3
0000000000001952         mov        rsi, r8
0000000000001955         rep  cmpsb byte [rsi], byte [rdi]
0000000000001957         seta       dl
000000000000195a         sbb        dl, 0x0
000000000000195d         test       dl, dl
000000000000195f         je         loc_1a68

0000000000001965         lea        rdi, qword [_IO_stdin_used+10]              ; 0x830a
000000000000196c         mov        ecx, 0x4
0000000000001971         mov        rsi, r8
0000000000001974         rep  cmpsb byte [rsi], byte [rdi]
0000000000001976         seta       dl
0000000000001979         sbb        dl, 0x0
000000000000197c         test       dl, dl
000000000000197e         je         loc_1a68

0000000000001984         lea        rdi, qword [_IO_stdin_used+14]              ; 0x830e
000000000000198b         mov        ecx, 0x4
0000000000001990         mov        rsi, r8
0000000000001993         rep  cmpsb byte [rsi], byte [rdi]
0000000000001995         seta       dl
0000000000001998         sbb        dl, 0x0
000000000000199b         test       dl, dl
000000000000199d         je         loc_1a68

00000000000019a3         lea        rdi, qword [_IO_stdin_used+18]              ; 0x8312
00000000000019aa         mov        ecx, 0x4
00000000000019af         mov        rsi, r8
00000000000019b2         rep  cmpsb byte [rsi], byte [rdi]
00000000000019b4         seta       dl
00000000000019b7         sbb        dl, 0x0
00000000000019ba         test       dl, dl
00000000000019bc         je         loc_1a68

00000000000019c2         lea        rdi, qword [_IO_stdin_used+22]              ; 0x8316
00000000000019c9         mov        ecx, 0x4
00000000000019ce         mov        rsi, r8
00000000000019d1         rep  cmpsb byte [rsi], byte [rdi]
00000000000019d3         seta       dl
00000000000019d6         sbb        dl, 0x0
00000000000019d9         test       dl, dl
00000000000019db         je         loc_1a68

00000000000019e1         lea        rdi, qword [_IO_stdin_used+26]              ; 0x831a
00000000000019e8         mov        ecx, 0x4
00000000000019ed         mov        rsi, r8
00000000000019f0         rep  cmpsb byte [rsi], byte [rdi]
00000000000019f2         seta       dl
00000000000019f5         sbb        dl, 0x0
00000000000019f8         test       dl, dl
00000000000019fa         je         loc_1a68

00000000000019fc         lea        rdi, qword [_IO_stdin_used+30]              ; 0x831e
0000000000001a03         mov        ecx, 0x4
0000000000001a08         mov        rsi, r8
0000000000001a0b         rep  cmpsb byte [rsi], byte [rdi]
0000000000001a0d         seta       dl
0000000000001a10         sbb        dl, 0x0
0000000000001a13         test       dl, dl
0000000000001a15         je         loc_1a68

0000000000001a17         lea        rdi, qword [_IO_stdin_used+34]              ; 0x8322
0000000000001a1e         mov        ecx, 0x4
0000000000001a23         mov        rsi, r8
0000000000001a26         rep  cmpsb byte [rsi], byte [rdi]
0000000000001a28         seta       dl
0000000000001a2b         sbb        dl, 0x0
0000000000001a2e         test       dl, dl
0000000000001a30         je         loc_1a68

0000000000001a32         lea        rdi, qword [_IO_stdin_used+38]              ; 0x8326
0000000000001a39         mov        ecx, 0x4
0000000000001a3e         mov        rsi, r8
0000000000001a41         rep  cmpsb byte [rsi], byte [rdi]
0000000000001a43         seta       dl
0000000000001a46         sbb        dl, 0x0
0000000000001a49         test       dl, dl
0000000000001a4b         je         loc_1a68

0000000000001a4d         lea        rdi, qword [_IO_stdin_used+42]              ; 0x832a
0000000000001a54         mov        ecx, 0x4
0000000000001a59         mov        rsi, r8
0000000000001a5c         rep  cmpsb byte [rsi], byte [rdi]
0000000000001a5e         seta       al
0000000000001a61         sbb        al, 0x0
0000000000001a63         test       al, al
0000000000001a65         sete       al

                     loc_1a68:
0000000000001a68         ret                                                    ; CODE XREF=binop+33, binop+64, binop+95, binop+126, binop+157, binop+188, binop+219, binop+250, binop+277, binop+304, binop+331
                        ; endp
0000000000001a6a         align      16                                          ; End of unwind block (FDE at 0xa1bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_18: -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72
        ;    var_58: -88
        ;    var_68: -104
        ;    var_78: -120
        ;    var_88: -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int8_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D4: int32_t, -212
        ;    var_D8: int32_t, -216


                     test_syntax_error:
0000000000001a70         sub        rsp, 0xd8                                   ; Begin of unwind block (FDE at 0xa1d0), CODE XREF=main+397, find_int+207, beyond+55, binary_operator+1104, binary_operator+1356, unary_operator+1449, or+933, or+980, three_arguments+318
0000000000001a77         test       al, al
0000000000001a79         mov        qword [rsp+0xd8+var_B0], rsi
0000000000001a7e         mov        qword [rsp+0xd8+var_A8], rdx
0000000000001a83         mov        qword [rsp+0xd8+var_A0], rcx
0000000000001a88         mov        qword [rsp+0xd8+var_98], r8
0000000000001a8d         mov        qword [rsp+0xd8+var_90], r9
0000000000001a92         je         loc_1acb

0000000000001a94         movaps     xmmword [rsp+0xd8+var_88], xmm0
0000000000001a99         movaps     xmmword [rsp+0xd8+var_78], xmm1
0000000000001a9e         movaps     xmmword [rsp+0xd8+var_68], xmm2
0000000000001aa3         movaps     xmmword [rsp+0xd8+var_58], xmm3
0000000000001aab         movaps     xmmword [rsp+0xd8+var_48], xmm4
0000000000001ab3         movaps     xmmword [rsp+0xd8+var_38], xmm5
0000000000001abb         movaps     xmmword [rsp+0xd8+var_28], xmm6
0000000000001ac3         movaps     xmmword [rsp+0xd8+var_18], xmm7

                     loc_1acb:
0000000000001acb         mov        rax, qword [fs:0x28]                        ; CODE XREF=test_syntax_error+34
0000000000001ad4         mov        qword [rsp+0xd8+var_C0], rax
0000000000001ad9         xor        eax, eax
0000000000001adb         lea        rax, qword [rsp+0xd8+arg_0]
0000000000001ae3         mov        rdx, rdi
0000000000001ae6         mov        rcx, rsp
0000000000001ae9         xor        edi, edi
0000000000001aeb         xor        esi, esi
0000000000001aed         mov        qword [rsp+0xd8+var_D0], rax
0000000000001af2         lea        rax, qword [rsp+0xd8+var_B8]
0000000000001af7         mov        dword [rsp+0xd8+var_D8], 0x8
0000000000001afe         mov        dword [rsp+0xd8+var_D4], 0x30
0000000000001b06         mov        qword [rsp+0xd8+var_C8], rax
0000000000001b0b         call       verror                                      ; verror
0000000000001b10         mov        edi, 0x2                                    ; argument "__status" for method j_exit
0000000000001b15         call       j_exit                                      ; exit
                        ; endp
0000000000001b1a         align      32                                          ; End of unwind block (FDE at 0xa1d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_58: int64_t, -88
        ;    var_70: int8_t, -112
        ;    var_90: int8_t, -144
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_118: int64_t, -280
        ;    var_120: int64_t, -288
        ;    var_1A8: int64_t, -424
        ;    var_1B0: int64_t, -432
        ;    var_1B8: int64_t, -440


                     find_int:
0000000000001b20         push       rbx                                         ; Begin of unwind block (FDE at 0xa1e8), CODE XREF=binary_operator+801, binary_operator+1189, unary_operator+265
0000000000001b21         mov        rbx, rdi
0000000000001b24         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000001b29         mov        r8, qword [rax]
0000000000001b2c         mov        rax, rbx

                     loc_1b2f:
0000000000001b2f         movzx      ecx, byte [rax]                             ; CODE XREF=find_int+148
0000000000001b32         test       byte [r8+rcx*2], 0x1
0000000000001b37         mov        rdx, rcx
0000000000001b3a         jne        loc_1bb0

0000000000001b3c         cmp        cl, 0x2b
0000000000001b3f         je         loc_1bc0

0000000000001b41         xor        ecx, ecx
0000000000001b43         cmp        dl, 0x2d
0000000000001b46         sete       cl
0000000000001b49         add        rcx, rax

                     loc_1b4c:
0000000000001b4c         movsx      esi, byte [rcx]                             ; CODE XREF=find_int+167
0000000000001b4f         lea        rdx, qword [rcx+1]
0000000000001b53         sub        esi, 0x30
0000000000001b56         cmp        esi, 0x9
0000000000001b59         ja         loc_1bc9

0000000000001b5b         movsx      esi, byte [rcx+1]
0000000000001b5f         mov        ecx, esi
0000000000001b61         sub        esi, 0x30
0000000000001b64         cmp        esi, 0x9
0000000000001b67         ja         loc_1b81

0000000000001b69         nop        dword [rax]

                     loc_1b70:
0000000000001b70         add        rdx, 0x1                                    ; CODE XREF=find_int+95
0000000000001b74         movsx      esi, byte [rdx]
0000000000001b77         mov        ecx, esi
0000000000001b79         sub        esi, 0x30
0000000000001b7c         cmp        esi, 0x9
0000000000001b7f         jbe        loc_1b70

                     loc_1b81:
0000000000001b81         movzx      esi, cl                                     ; CODE XREF=find_int+71
0000000000001b84         test       byte [r8+rsi*2], 0x1
0000000000001b89         je         loc_1ba1

0000000000001b8b         nop        dword [rax+rax]

                     loc_1b90:
0000000000001b90         add        rdx, 0x1                                    ; CODE XREF=find_int+127
0000000000001b94         movzx      esi, byte [rdx]
0000000000001b97         test       byte [r8+rsi*2], 0x1
0000000000001b9c         mov        rcx, rsi
0000000000001b9f         jne        loc_1b90

                     loc_1ba1:
0000000000001ba1         test       cl, cl                                      ; CODE XREF=find_int+105
0000000000001ba3         jne        loc_1bc9

0000000000001ba5         pop        rbx
0000000000001ba6         ret
                        ; endp
0000000000001ba7         align      16

                     loc_1bb0:
0000000000001bb0         add        rax, 0x1                                    ; CODE XREF=find_int+26
0000000000001bb4         jmp        loc_1b2f
0000000000001bb9         align      64

                     loc_1bc0:
0000000000001bc0         lea        rcx, qword [rax+1]                          ; CODE XREF=find_int+31
0000000000001bc4         mov        rax, rcx
0000000000001bc7         jmp        loc_1b4c

                     loc_1bc9:
0000000000001bc9         mov        rdi, rbx                                    ; CODE XREF=find_int+57, find_int+131
0000000000001bcc         call       quote                                       ; quote
0000000000001bd1         lea        rsi, qword [aInvalidInteger]                ; argument "msgid" for method j_dcgettext, "invalid integer %s"
0000000000001bd8         mov        rbx, rax
0000000000001bdb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001bdd         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001be2         call       j_dcgettext                                 ; dcgettext
0000000000001be7         mov        rsi, rbx
0000000000001bea         mov        rdi, rax
0000000000001bed         xor        eax, eax
0000000000001bef         call       test_syntax_error                           ; test_syntax_error
0000000000001bf4         nop                                                    ; End of unwind block (FDE at 0xa1e8)
0000000000001bf6         nop        word [cs:rax+rax]
                     beyond:
0000000000001c00         movsxd     rdx, dword [argc]                           ; Begin of unwind block (FDE at 0xa208), argc, CODE XREF=unary_advance+37, two_arguments+107, posixtest+314, or+494, three_arguments+323
0000000000001c07         mov        rax, qword [argv]                           ; argv
0000000000001c0e         push       rbx
0000000000001c0f         mov        rdi, qword [rax+rdx*8-8]
0000000000001c14         call       quote                                       ; quote
0000000000001c19         lea        rsi, qword [aMissingArgumen]                ; argument "msgid" for method j_dcgettext, "missing argument after %s"
0000000000001c20         mov        rbx, rax
0000000000001c23         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000001c25         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000001c2a         call       j_dcgettext                                 ; dcgettext
0000000000001c2f         mov        rsi, rbx
0000000000001c32         mov        rdi, rax
0000000000001c35         xor        eax, eax
0000000000001c37         call       test_syntax_error                           ; test_syntax_error
0000000000001c3c         nop        dword [rax]                                 ; End of unwind block (FDE at 0xa208)
                     unary_advance:
0000000000001c40         mov        eax, dword [pos]                            ; Begin of unwind block (FDE at 0xa220), pos, CODE XREF=unary_operator+80, unary_operator+152, unary_operator+192, unary_operator+248, unary_operator+352, unary_operator+392, unary_operator+448, unary_operator+488, unary_operator+560, unary_operator+592, unary_operator+656
0000000000001c46         lea        edx, dword [rax+1]
0000000000001c49         cmp        edx, dword [argc]                           ; argc
0000000000001c4f         mov        dword [pos], edx                            ; pos
0000000000001c55         jge        loc_1c61

0000000000001c57         add        eax, 0x2
0000000000001c5a         mov        dword [pos], eax                            ; pos
0000000000001c60         ret
                        ; endp

                     loc_1c61:
0000000000001c61         sub        rsp, 0x8                                    ; CODE XREF=unary_advance+21
0000000000001c65         call       beyond                                      ; beyond
0000000000001c6a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xa220)
                     binary_operator:
0000000000001c70         push       r15                                         ; Begin of unwind block (FDE at 0xa234), CODE XREF=or+770, or+799, three_arguments+275
0000000000001c72         push       r14
0000000000001c74         mov        eax, edi
0000000000001c76         push       r13
0000000000001c78         push       r12
0000000000001c7a         push       rbp
0000000000001c7b         push       rbx
0000000000001c7c         sub        rsp, 0x178
0000000000001c83         mov        ecx, dword [pos]                            ; pos
0000000000001c89         mov        rbx, qword [fs:0x28]
0000000000001c92         mov        qword [rsp+0x1c0+var_58], rbx
0000000000001c9a         xor        ebx, ebx
0000000000001c9c         test       dil, dil
0000000000001c9f         lea        edx, dword [rcx+1]
0000000000001ca2         je         loc_1cad

0000000000001ca4         mov        dword [pos], edx                            ; pos
0000000000001caa         lea        edx, dword [rcx+2]

                     loc_1cad:
0000000000001cad         mov        edi, dword [argc]                           ; argc, CODE XREF=binary_operator+50
0000000000001cb3         xor        r13d, r13d
0000000000001cb6         mov        rbx, qword [argv]                           ; argv
0000000000001cbd         movsxd     r14, edx
0000000000001cc0         lea        ecx, dword [rdi-2]
0000000000001cc3         cmp        ecx, edx
0000000000001cc5         jle        loc_1ce8

0000000000001cc7         mov        rsi, qword [rbx+r14*8+8]
0000000000001ccc         lea        rdi, qword [aEfDoesNotAccep+20]             ; 0x8386
0000000000001cd3         mov        ecx, 0x3
0000000000001cd8         rep  cmpsb byte [rsi], byte [rdi]
0000000000001cda         seta       cl
0000000000001cdd         sbb        cl, 0x0
0000000000001ce0         test       cl, cl
0000000000001ce2         je         loc_1d80

                     loc_1ce8:
0000000000001ce8         mov        rsi, qword [rbx+r14*8]                      ; CODE XREF=binary_operator+85, binary_operator+284
0000000000001cec         lea        r15, qword [r14*8]
0000000000001cf4         movzx      edx, byte [rsi]
0000000000001cf7         cmp        dl, 0x2d
0000000000001cfa         je         loc_1df0

0000000000001d00         cmp        dl, 0x3d
0000000000001d03         je         loc_1d98

                     loc_1d09:
0000000000001d09         lea        rdi, qword [_IO_stdin_used+4]               ; 0x8304, CODE XREF=binary_operator+306, binary_operator+316
0000000000001d10         mov        ecx, 0x3
0000000000001d15         rep  cmpsb byte [rsi], byte [rdi]
0000000000001d17         seta       al
0000000000001d1a         sbb        al, 0x0
0000000000001d1c         test       al, al
0000000000001d1e         jne        loc_219d

0000000000001d24         movsxd     rax, dword [pos]                            ; pos
0000000000001d2b         mov        rbp, rax
0000000000001d2e         add        rax, 0x2
0000000000001d32         mov        rsi, qword [rbx+rax*8]                      ; argument "__s2" for method j_strcmp
0000000000001d36         mov        rdi, qword [rbx+rax*8-0x10]                 ; argument "__s1" for method j_strcmp
0000000000001d3b         call       j_strcmp                                    ; strcmp
0000000000001d40         test       eax, eax
0000000000001d42         setne      r13b
0000000000001d46         add        ebp, 0x3
0000000000001d49         mov        dword [pos], ebp                            ; pos

                     loc_1d4f:
0000000000001d4f         mov        rbx, qword [rsp+0x1c0+var_58]               ; CODE XREF=binary_operator+371, binary_operator+542, binary_operator+579, binary_operator+601, binary_operator+678, binary_operator+709, binary_operator+728, binary_operator+751, binary_operator+920, binary_operator+1045, binary_operator+1128
0000000000001d57         xor        rbx, qword [fs:0x28]
0000000000001d60         mov        eax, r13d
0000000000001d63         jne        loc_2198

0000000000001d69         add        rsp, 0x178
0000000000001d70         pop        rbx
0000000000001d71         pop        rbp
0000000000001d72         pop        r12
0000000000001d74         pop        r13
0000000000001d76         pop        r14
0000000000001d78         pop        r15
0000000000001d7a         ret
                        ; endp
0000000000001d7b         align      128

                     loc_1d80:
0000000000001d80         mov        dword [pos], edx                            ; pos, CODE XREF=binary_operator+114
0000000000001d86         mov        r13d, 0x1
0000000000001d8c         jmp        loc_1ce8
0000000000001d91         align      8

                     loc_1d98:
0000000000001d98         movzx      eax, byte [rsi+1]                           ; CODE XREF=binary_operator+147
0000000000001d9c         test       al, al
0000000000001d9e         je         loc_1db8

0000000000001da0         cmp        al, 0x3d
0000000000001da2         jne        loc_1d09

0000000000001da8         cmp        byte [rsi+2], 0x0
0000000000001dac         jne        loc_1d09

0000000000001db2         nop        word [rax+rax]

                     loc_1db8:
0000000000001db8         movsxd     rax, dword [pos]                            ; pos, CODE XREF=binary_operator+302
0000000000001dbf         mov        rbp, rax
0000000000001dc2         add        rax, 0x2
0000000000001dc6         mov        rsi, qword [rbx+rax*8]                      ; argument "__s2" for method j_strcmp
0000000000001dca         mov        rdi, qword [rbx+rax*8-0x10]                 ; argument "__s1" for method j_strcmp
0000000000001dcf         call       j_strcmp                                    ; strcmp
0000000000001dd4         test       eax, eax
0000000000001dd6         sete       r13b
0000000000001dda         add        ebp, 0x3
0000000000001ddd         mov        dword [pos], ebp                            ; pos
0000000000001de3         jmp        loc_1d4f
0000000000001de8         align      16

                     loc_1df0:
0000000000001df0         movzx      edx, byte [rsi+1]                           ; CODE XREF=binary_operator+138
0000000000001df4         cmp        dl, 0x6c
0000000000001df7         je         loc_1f68

0000000000001dfd         cmp        dl, 0x67
0000000000001e00         je         loc_1f68

                     loc_1e06:
0000000000001e06         cmp        dl, 0x65                                    ; CODE XREF=binary_operator+772
0000000000001e09         je         loc_1ed0

0000000000001e0f         cmp        dl, 0x6e
0000000000001e12         je         loc_2010

                     loc_1e18:
0000000000001e18         cmp        dl, 0x6f                                    ; CODE XREF=binary_operator+1139
0000000000001e1b         jne        loc_2170

0000000000001e21         cmp        byte [rsi+2], 0x74
0000000000001e25         jne        loc_209a

0000000000001e2b         cmp        byte [rsi+3], 0x0
0000000000001e2f         jne        loc_209a

0000000000001e35         add        dword [pos], 0x3                            ; pos
0000000000001e3c         or         r13b, al
0000000000001e3f         jne        loc_21a2

0000000000001e45         lea        r14, qword [rsp+0x1c0+var_120]
0000000000001e4d         mov        rsi, qword [rbx+r15-8]                      ; argument "__filename" for method j___xstat
0000000000001e52         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001e57         mov        rdx, r14                                    ; argument "__stat_buf" for method j___xstat
0000000000001e5a         call       j___xstat                                   ; __xstat
0000000000001e5f         test       eax, eax
0000000000001e61         mov        ebp, eax
0000000000001e63         jne        loc_1e7a

0000000000001e65         mov        rax, qword [rsp+0x1c0+var_C0]
0000000000001e6d         mov        r12, qword [rsp+0x1c0+var_C8]
0000000000001e75         mov        qword [rsp+0x1c0+var_1B8], rax

                     loc_1e7a:
0000000000001e7a         mov        rsi, qword [rbx+r15+8]                      ; argument "__filename" for method j___xstat, CODE XREF=binary_operator+499
0000000000001e7f         mov        rdx, r14                                    ; argument "__stat_buf" for method j___xstat
0000000000001e82         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001e87         call       j___xstat                                   ; __xstat
0000000000001e8c         test       eax, eax
0000000000001e8e         jne        loc_1d4f

0000000000001e94         mov        rdx, qword [rsp+0x1c0+var_C8]
0000000000001e9c         test       ebp, ebp
0000000000001e9e         mov        rsi, qword [rsp+0x1c0+var_C0]
0000000000001ea6         setne      r13b
0000000000001eaa         cmp        r12, rdx
0000000000001ead         setl       al
0000000000001eb0         or         r13b, al
0000000000001eb3         jne        loc_1d4f

0000000000001eb9         mov        ebp, dword [rsp+0x1c0+var_1B8]
0000000000001ebd         sub        ebp, esi
0000000000001ebf         shr        ebp, 0x1f
0000000000001ec2         cmp        r12, rdx
0000000000001ec5         cmovle     r13d, ebp
0000000000001ec9         jmp        loc_1d4f
0000000000001ece         align      16

                     loc_1ed0:
0000000000001ed0         movzx      edx, byte [rsi+2]                           ; CODE XREF=binary_operator+409
0000000000001ed4         cmp        dl, 0x71
0000000000001ed7         je         loc_2090

                     loc_1edd:
0000000000001edd         cmp        dl, 0x66                                    ; CODE XREF=binary_operator+1293
0000000000001ee0         jne        loc_209a

0000000000001ee6         cmp        byte [rsi+3], 0x0
0000000000001eea         jne        loc_209a

0000000000001ef0         add        dword [pos], 0x3                            ; pos
0000000000001ef7         or         r13b, al
0000000000001efa         jne        loc_21c1

0000000000001f00         mov        rsi, qword [rbx+r15-8]                      ; argument "__filename" for method j___xstat
0000000000001f05         lea        rdx, qword [rsp+0x1c0+var_1B0]              ; argument "__stat_buf" for method j___xstat
0000000000001f0a         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001f0f         call       j___xstat                                   ; __xstat
0000000000001f14         test       eax, eax
0000000000001f16         jne        loc_1d4f

0000000000001f1c         mov        rsi, qword [rbx+r15+8]                      ; argument "__filename" for method j___xstat
0000000000001f21         lea        rdx, qword [rsp+0x1c0+var_120]              ; argument "__stat_buf" for method j___xstat
0000000000001f29         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000001f2e         call       j___xstat                                   ; __xstat
0000000000001f33         test       eax, eax
0000000000001f35         jne        loc_1d4f

0000000000001f3b         mov        rax, qword [rsp+0x1c0+var_120]
0000000000001f43         cmp        qword [rsp+0x1c0+var_1B0], rax
0000000000001f48         jne        loc_1d4f

0000000000001f4e         mov        rax, qword [rsp+0x1c0+var_118]
0000000000001f56         cmp        qword [rsp+0x1c0+var_1A8], rax
0000000000001f5b         sete       r13b
0000000000001f5f         jmp        loc_1d4f
0000000000001f64         align      8

                     loc_1f68:
0000000000001f68         movzx      ecx, byte [rsi+2]                           ; CODE XREF=binary_operator+391, binary_operator+400
0000000000001f6c         cmp        cl, 0x65
0000000000001f6f         je         loc_1f7a

0000000000001f71         cmp        cl, 0x74
0000000000001f74         jne        loc_1e06

                     loc_1f7a:
0000000000001f7a         cmp        byte [rsi+3], 0x0                           ; CODE XREF=binary_operator+767
0000000000001f7e         jne        loc_20e0

                     loc_1f84:
0000000000001f84         test       al, al                                      ; CODE XREF=binary_operator+1060
0000000000001f86         mov        rdi, qword [rbx+r15-8]
0000000000001f8b         jne        loc_20f0

0000000000001f91         call       find_int                                    ; find_int
0000000000001f96         mov        rbx, rax

                     loc_1f99:
0000000000001f99         test       r13b, r13b                                  ; CODE XREF=binary_operator+1176
0000000000001f9c         mov        rax, qword [argv]                           ; argv
0000000000001fa3         je         loc_2110

0000000000001fa9         mov        rdi, qword [rax+r15+0x10]                   ; argument "__s" for method j_strlen
0000000000001fae         call       j_strlen                                    ; strlen
0000000000001fb3         lea        rsi, qword [rsp+0x1c0+var_70]
0000000000001fbb         mov        rdi, rax
0000000000001fbe         call       umaxtostr                                   ; umaxtostr

                     loc_1fc3:
0000000000001fc3         mov        rsi, rax                                    ; CODE XREF=binary_operator+1194
0000000000001fc6         mov        rdi, rbx
0000000000001fc9         call       strintcmp                                   ; strintcmp
0000000000001fce         mov        rdx, qword [argv]                           ; argv
0000000000001fd5         mov        rcx, qword [rdx+r14*8]
0000000000001fd9         cmp        byte [rcx+2], 0x65
0000000000001fdd         movzx      ecx, byte [rcx+1]
0000000000001fe1         sete       dl
0000000000001fe4         add        dword [pos], 0x3                            ; pos
0000000000001feb         cmp        cl, 0x6c
0000000000001fee         je         loc_2158

0000000000001ff4         cmp        cl, 0x67
0000000000001ff7         je         loc_2188

0000000000001ffd         test       eax, eax
0000000000001fff         setne      al
0000000000002002         cmp        al, dl
0000000000002004         sete       r13b
0000000000002008         jmp        loc_1d4f
000000000000200d         align      16

                     loc_2010:
0000000000002010         movzx      ecx, byte [rsi+2]                           ; CODE XREF=binary_operator+418
0000000000002014         cmp        cl, 0x65
0000000000002017         je         loc_2090

                     loc_2019:
0000000000002019         cmp        cl, 0x74                                    ; CODE XREF=binary_operator+1145
000000000000201c         jne        loc_209a

000000000000201e         cmp        byte [rsi+3], 0x0
0000000000002022         jne        loc_209a

0000000000002024         add        dword [pos], 0x3                            ; pos
000000000000202b         or         r13b, al
000000000000202e         jne        loc_21cf

0000000000002034         lea        rbp, qword [rsp+0x1c0+var_120]
000000000000203c         mov        rsi, qword [rbx+r15-8]                      ; argument "__filename" for method j___xstat
0000000000002041         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002046         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___xstat
0000000000002049         call       j___xstat                                   ; __xstat
000000000000204e         test       eax, eax
0000000000002050         lea        rcx, qword [rbx+r15+8]
0000000000002055         jne        loc_20c8

0000000000002057         mov        rsi, qword [rcx]                            ; argument "__filename" for method j___xstat
000000000000205a         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___xstat
000000000000205d         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002062         mov        rbx, qword [rsp+0x1c0+var_C8]
000000000000206a         mov        r12, qword [rsp+0x1c0+var_C0]
0000000000002072         call       j___xstat                                   ; __xstat
0000000000002077         test       eax, eax
0000000000002079         je         loc_2120

000000000000207f         mov        r13d, 0x1
0000000000002085         jmp        loc_1d4f
000000000000208a         align      16

                     loc_2090:
0000000000002090         cmp        byte [rsi+3], 0x0                           ; CODE XREF=binary_operator+615, binary_operator+935
0000000000002094         je         loc_1f84

                     loc_209a:
000000000000209a         mov        rdi, rsi                                    ; CODE XREF=binary_operator+437, binary_operator+447, binary_operator+624, binary_operator+634, binary_operator+940, binary_operator+946, binary_operator+1283
000000000000209d         call       quote                                       ; quote
00000000000020a2         lea        rsi, qword [aSUnknownBinary]                ; argument "msgid" for method j_dcgettext, "%s: unknown binary operator"
00000000000020a9         mov        rbx, rax
00000000000020ac         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000020ae         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000020b3         call       j_dcgettext                                 ; dcgettext
00000000000020b8         mov        rsi, rbx
00000000000020bb         mov        rdi, rax
00000000000020be         xor        eax, eax
00000000000020c0         call       test_syntax_error                           ; test_syntax_error
00000000000020c5         nop        dword [rax]

                     loc_20c8:
00000000000020c8         mov        rsi, qword [rcx]                            ; argument "__filename" for method j___xstat, CODE XREF=binary_operator+997
00000000000020cb         mov        rdx, rbp                                    ; argument "__stat_buf" for method j___xstat
00000000000020ce         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000020d3         call       j___xstat                                   ; __xstat
00000000000020d8         jmp        loc_1d4f
00000000000020dd         align      32

                     loc_20e0:
00000000000020e0         cmp        dl, 0x6e                                    ; CODE XREF=binary_operator+782
00000000000020e3         jne        loc_1e18

00000000000020e9         jmp        loc_2019
00000000000020ee         align      16

                     loc_20f0:
00000000000020f0         call       j_strlen                                    ; strlen, CODE XREF=binary_operator+795
00000000000020f5         lea        rsi, qword [rsp+0x1c0+var_90]
00000000000020fd         mov        rdi, rax
0000000000002100         call       umaxtostr                                   ; umaxtostr
0000000000002105         mov        rbx, rax
0000000000002108         jmp        loc_1f99
000000000000210d         align      16

                     loc_2110:
0000000000002110         mov        rdi, qword [rax+r15+8]                      ; CODE XREF=binary_operator+819
0000000000002115         call       find_int                                    ; find_int
000000000000211a         jmp        loc_1fc3
000000000000211f         align      32

                     loc_2120:
0000000000002120         cmp        rbx, qword [rsp+0x1c0+var_C8]               ; CODE XREF=binary_operator+1033
0000000000002128         mov        rax, qword [rsp+0x1c0+var_C0]
0000000000002130         jl         loc_1d4f

0000000000002136         mov        r13d, 0x1
000000000000213c         jg         loc_1d4f

0000000000002142         sub        r12d, eax
0000000000002145         test       r12d, r12d
0000000000002148         setg       r13b
000000000000214c         jmp        loc_1d4f
0000000000002151         align      8

                     loc_2158:
0000000000002158         movzx      edx, dl                                     ; CODE XREF=binary_operator+894
000000000000215b         cmp        edx, eax
000000000000215d         setg       r13b
0000000000002161         jmp        loc_1d4f
0000000000002166         align      16

                     loc_2170:
0000000000002170         cmp        dl, 0x65                                    ; CODE XREF=binary_operator+427
0000000000002173         jne        loc_209a

0000000000002179         movzx      edx, byte [rsi+2]
000000000000217d         jmp        loc_1edd
0000000000002182         align      8

                     loc_2188:
0000000000002188         movzx      edx, dl                                     ; CODE XREF=binary_operator+903
000000000000218b         neg        edx
000000000000218d         cmp        edx, eax
000000000000218f         setl       r13b
0000000000002193         jmp        loc_1d4f

                     loc_2198:
0000000000002198         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=binary_operator+243
                        ; endp

                     loc_219d:
000000000000219d         call       j_abort                                     ; abort, CODE XREF=binary_operator+174
                        ; endp

                     loc_21a2:
00000000000021a2         lea        rsi, qword [aOtDoesNotAccep]                ; "-ot does not accept -l", CODE XREF=binary_operator+463
00000000000021a9         mov        edx, 0x5

                     loc_21ae:
00000000000021ae         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=binary_operator+1373, binary_operator+1387
00000000000021b0         call       j_dcgettext                                 ; dcgettext
00000000000021b5         xor        esi, esi
00000000000021b7         mov        rdi, rax
00000000000021ba         xor        eax, eax
00000000000021bc         call       test_syntax_error                           ; test_syntax_error

                     loc_21c1:
00000000000021c1         mov        edx, 0x5                                    ; CODE XREF=binary_operator+650
00000000000021c6         lea        rsi, qword [aEfDoesNotAccep]                ; "-ef does not accept -l"
00000000000021cd         jmp        loc_21ae

                     loc_21cf:
00000000000021cf         mov        edx, 0x5                                    ; CODE XREF=binary_operator+958
00000000000021d4         lea        rsi, qword [aNtDoesNotAccep]                ; "-nt does not accept -l"
00000000000021db         jmp        loc_21ae
00000000000021dd         align      32                                          ; End of unwind block (FDE at 0xa234)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_88: int64_t, -136
        ;    var_98: int32_t, -152
        ;    var_9C: int32_t, -156
        ;    var_A0: int32_t, -160


                     unary_operator:
00000000000021e0         push       rbp                                         ; Begin of unwind block (FDE at 0xa280), CODE XREF=two_arguments+72, or+678
00000000000021e1         push       rbx
00000000000021e2         sub        rsp, 0xa8
00000000000021e9         mov        rbx, qword [argv]                           ; argv
00000000000021f0         mov        rax, qword [fs:0x28]
00000000000021f9         mov        qword [rsp+0xb8+var_20], rax
0000000000002201         xor        eax, eax
0000000000002203         movsxd     rax, dword [pos]                            ; pos
000000000000220a         mov        rdi, qword [rbx+rax*8]
000000000000220e         movzx      eax, byte [rdi+1]
0000000000002212         sub        eax, 0x47
0000000000002215         cmp        al, 0x33
0000000000002217         ja         loc_2766

000000000000221d         lea        rdx, qword [switch_table_84f0]              ; switch_table_84f0
0000000000002224         movzx      eax, al
0000000000002227         movsxd     rax, dword [rdx+rax*4]
000000000000222b         add        rax, rdx
000000000000222e         jmp        rax                                         ; switch statement using table at 0x84f0, with 52 cases, 0x2230,0x2278,0x22a0,0x22d8,0x2340,0x2368,0x23a0,0x23c8,0x2410,0x2430,0x2470,0x24b0,0x24f0,0x2520,0x2560,0x25a0,0x25e0,0x2620,0x2650,0x26a8,0x26f0,0x2766

                     loc_2230:
0000000000002230         call       unary_advance                               ; unary_advance, case 51, CODE XREF=unary_operator+78
0000000000002235         movsxd     rax, dword [pos]                            ; pos
000000000000223c         mov        rax, qword [rbx+rax*8-8]
0000000000002241         cmp        byte [rax], 0x0
0000000000002244         sete       al
0000000000002247         nop        word [rax+rax]

                     loc_2250:
0000000000002250         mov        rcx, qword [rsp+0xb8+var_20]                ; CODE XREF=unary_operator+184, unary_operator+228, unary_operator+240, unary_operator+310, unary_operator+323, unary_operator+339, unary_operator+384, unary_operator+428, unary_operator+443, unary_operator+480, unary_operator+524
0000000000002258         xor        rcx, qword [fs:0x28]
0000000000002261         jne        loc_27ac

0000000000002267         add        rsp, 0xa8
000000000000226e         pop        rbx
000000000000226f         pop        rbp
0000000000002270         ret
                        ; endp
0000000000002271         align      8

                     loc_2278:
0000000000002278         call       unary_advance                               ; unary_advance, case 49, CODE XREF=unary_operator+78
000000000000227d         movsxd     rax, dword [pos]                            ; pos
0000000000002284         mov        esi, 0x1                                    ; argument "__type" for method j_euidaccess
0000000000002289         mov        rdi, qword [rbx+rax*8-8]                    ; argument "__name" for method j_euidaccess
000000000000228e         call       j_euidaccess                                ; euidaccess
0000000000002293         test       eax, eax
0000000000002295         sete       al
0000000000002298         jmp        loc_2250
000000000000229a         align      32

                     loc_22a0:
00000000000022a0         call       unary_advance                               ; unary_advance, case 46, CODE XREF=unary_operator+78
00000000000022a5         movsxd     rax, dword [pos]                            ; pos
00000000000022ac         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000022af         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000022b4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000022b9         call       j___xstat                                   ; __xstat
00000000000022be         mov        edx, eax
00000000000022c0         xor        eax, eax
00000000000022c2         test       edx, edx
00000000000022c4         jne        loc_2250

00000000000022c6         mov        eax, dword [rsp+0xb8+var_A0]
00000000000022ca         shr        eax, 0xb
00000000000022cd         and        eax, 0x1
00000000000022d0         jmp        loc_2250
00000000000022d5         align      8

                     loc_22d8:
00000000000022d8         call       unary_advance                               ; unary_advance, case 45, CODE XREF=unary_operator+78
00000000000022dd         movsxd     rax, dword [pos]                            ; pos
00000000000022e4         mov        rdi, qword [rbx+rax*8-8]
00000000000022e9         call       find_int                                    ; find_int
00000000000022ee         mov        rbp, rax
00000000000022f1         call       j___errno_location                          ; __errno_location
00000000000022f6         xor        esi, esi                                    ; argument "__endptr" for method j_strtol
00000000000022f8         mov        rbx, rax
00000000000022fb         mov        rdi, rbp                                    ; argument "__nptr" for method j_strtol
00000000000022fe         mov        dword [rax], 0x0
0000000000002304         mov        edx, 0xa                                    ; argument "__base" for method j_strtol
0000000000002309         call       j_strtol                                    ; strtol
000000000000230e         mov        rdi, rax
0000000000002311         xor        eax, eax
0000000000002313         cmp        dword [rbx], 0x22
0000000000002316         je         loc_2250

000000000000231c         cmp        rdi, 0x7fffffff
0000000000002323         ja         loc_2250

0000000000002329         call       j_isatty                                    ; isatty
000000000000232e         test       eax, eax
0000000000002330         setne      al
0000000000002333         jmp        loc_2250
0000000000002338         align      64

                     loc_2340:
0000000000002340         call       unary_advance                               ; unary_advance, case 48, CODE XREF=unary_operator+78
0000000000002345         movsxd     rax, dword [pos]                            ; pos
000000000000234c         mov        esi, 0x2                                    ; argument "__type" for method j_euidaccess
0000000000002351         mov        rdi, qword [rbx+rax*8-8]                    ; argument "__name" for method j_euidaccess
0000000000002356         call       j_euidaccess                                ; euidaccess
000000000000235b         test       eax, eax
000000000000235d         sete       al
0000000000002360         jmp        loc_2250
0000000000002365         align      8

                     loc_2368:
0000000000002368         call       unary_advance                               ; unary_advance, case 44, CODE XREF=unary_operator+78
000000000000236d         movsxd     rax, dword [pos]                            ; pos
0000000000002374         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
0000000000002377         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
000000000000237c         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002381         call       j___xstat                                   ; __xstat
0000000000002386         mov        edx, eax
0000000000002388         xor        eax, eax
000000000000238a         test       edx, edx
000000000000238c         jne        loc_2250

0000000000002392         cmp        qword [rsp+0xb8+var_88], 0x0
0000000000002398         setg       al
000000000000239b         jmp        loc_2250

                     loc_23a0:
00000000000023a0         call       unary_advance                               ; unary_advance, case 43, CODE XREF=unary_operator+78
00000000000023a5         movsxd     rax, dword [pos]                            ; pos
00000000000023ac         mov        esi, 0x4                                    ; argument "__type" for method j_euidaccess
00000000000023b1         mov        rdi, qword [rbx+rax*8-8]                    ; argument "__name" for method j_euidaccess
00000000000023b6         call       j_euidaccess                                ; euidaccess
00000000000023bb         test       eax, eax
00000000000023bd         sete       al
00000000000023c0         jmp        loc_2250
00000000000023c5         align      8

                     loc_23c8:
00000000000023c8         call       unary_advance                               ; unary_advance, case 41, CODE XREF=unary_operator+78
00000000000023cd         movsxd     rax, dword [pos]                            ; pos
00000000000023d4         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000023d7         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000023dc         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000023e1         call       j___xstat                                   ; __xstat
00000000000023e6         mov        edx, eax
00000000000023e8         xor        eax, eax
00000000000023ea         test       edx, edx
00000000000023ec         jne        loc_2250

00000000000023f2         mov        eax, dword [rsp+0xb8+var_A0]
00000000000023f6         and        eax, 0xf000
00000000000023fb         cmp        eax, 0x1000
0000000000002400         sete       al
0000000000002403         jmp        loc_2250
0000000000002408         align      16

                     loc_2410:
0000000000002410         call       unary_advance                               ; unary_advance, case 39, CODE XREF=unary_operator+78
0000000000002415         movsxd     rax, dword [pos]                            ; pos
000000000000241c         mov        rax, qword [rbx+rax*8-8]
0000000000002421         cmp        byte [rax], 0x0
0000000000002424         setne      al
0000000000002427         jmp        loc_2250
000000000000242c         align      16

                     loc_2430:
0000000000002430         call       unary_advance                               ; unary_advance, case 36, CODE XREF=unary_operator+78
0000000000002435         movsxd     rax, dword [pos]                            ; pos
000000000000243c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000243f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002444         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002449         call       j___xstat                                   ; __xstat
000000000000244e         mov        edx, eax
0000000000002450         xor        eax, eax
0000000000002452         test       edx, edx
0000000000002454         jne        loc_2250

000000000000245a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000245e         shr        eax, 0x9
0000000000002461         and        eax, 0x1
0000000000002464         jmp        loc_2250
0000000000002469         align      16

                     loc_2470:
0000000000002470         call       unary_advance                               ; unary_advance, case 32, CODE XREF=unary_operator+78
0000000000002475         movsxd     rax, dword [pos]                            ; pos
000000000000247c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000247f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002484         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002489         call       j___xstat                                   ; __xstat
000000000000248e         mov        edx, eax
0000000000002490         xor        eax, eax
0000000000002492         test       edx, edx
0000000000002494         jne        loc_2250

000000000000249a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000249e         shr        eax, 0xa
00000000000024a1         and        eax, 0x1
00000000000024a4         jmp        loc_2250
00000000000024a9         align      16

                     loc_24b0:
00000000000024b0         call       unary_advance                               ; unary_advance, case 31, CODE XREF=unary_operator+78
00000000000024b5         movsxd     rax, dword [pos]                            ; pos
00000000000024bc         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000024bf         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000024c4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000024c9         call       j___xstat                                   ; __xstat
00000000000024ce         mov        edx, eax
00000000000024d0         xor        eax, eax
00000000000024d2         test       edx, edx
00000000000024d4         jne        loc_2250

00000000000024da         mov        eax, dword [rsp+0xb8+var_A0]
00000000000024de         and        eax, 0xf000
00000000000024e3         cmp        eax, 0x8000
00000000000024e8         sete       al
00000000000024eb         jmp        loc_2250

                     loc_24f0:
00000000000024f0         call       unary_advance                               ; unary_advance, case 30, CODE XREF=unary_operator+78
00000000000024f5         movsxd     rax, dword [pos]                            ; pos
00000000000024fc         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000024ff         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002504         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002509         call       j___xstat                                   ; __xstat
000000000000250e         test       eax, eax
0000000000002510         sete       al
0000000000002513         jmp        loc_2250
0000000000002518         align      32

                     loc_2520:
0000000000002520         call       unary_advance                               ; unary_advance, case 29, CODE XREF=unary_operator+78
0000000000002525         movsxd     rax, dword [pos]                            ; pos
000000000000252c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000252f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002534         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002539         call       j___xstat                                   ; __xstat
000000000000253e         mov        edx, eax
0000000000002540         xor        eax, eax
0000000000002542         test       edx, edx
0000000000002544         jne        loc_2250

000000000000254a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000254e         and        eax, 0xf000
0000000000002553         cmp        eax, 0x4000
0000000000002558         sete       al
000000000000255b         jmp        loc_2250

                     loc_2560:
0000000000002560         call       unary_advance                               ; unary_advance, case 28, CODE XREF=unary_operator+78
0000000000002565         movsxd     rax, dword [pos]                            ; pos
000000000000256c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000256f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002574         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002579         call       j___xstat                                   ; __xstat
000000000000257e         mov        edx, eax
0000000000002580         xor        eax, eax
0000000000002582         test       edx, edx
0000000000002584         jne        loc_2250

000000000000258a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000258e         and        eax, 0xf000
0000000000002593         cmp        eax, 0x2000
0000000000002598         sete       al
000000000000259b         jmp        loc_2250

                     loc_25a0:
00000000000025a0         call       unary_advance                               ; unary_advance, case 27, CODE XREF=unary_operator+78
00000000000025a5         movsxd     rax, dword [pos]                            ; pos
00000000000025ac         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000025af         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000025b4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000025b9         call       j___xstat                                   ; __xstat
00000000000025be         mov        edx, eax
00000000000025c0         xor        eax, eax
00000000000025c2         test       edx, edx
00000000000025c4         jne        loc_2250

00000000000025ca         mov        eax, dword [rsp+0xb8+var_A0]
00000000000025ce         and        eax, 0xf000
00000000000025d3         cmp        eax, 0x6000
00000000000025d8         sete       al
00000000000025db         jmp        loc_2250

                     loc_25e0:
00000000000025e0         call       unary_advance                               ; unary_advance, case 12, CODE XREF=unary_operator+78
00000000000025e5         movsxd     rax, dword [pos]                            ; pos
00000000000025ec         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000025ef         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
00000000000025f4         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
00000000000025f9         call       j___xstat                                   ; __xstat
00000000000025fe         mov        edx, eax
0000000000002600         xor        eax, eax
0000000000002602         test       edx, edx
0000000000002604         jne        loc_2250

000000000000260a         mov        eax, dword [rsp+0xb8+var_A0]
000000000000260e         and        eax, 0xf000
0000000000002613         cmp        eax, 0xc000
0000000000002618         sete       al
000000000000261b         jmp        loc_2250

                     loc_2620:
0000000000002620         call       unary_advance                               ; unary_advance, case 8, CODE XREF=unary_operator+78
0000000000002625         movsxd     rax, dword [pos]                            ; pos
000000000000262c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000262f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002634         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002639         call       j___xstat                                   ; __xstat
000000000000263e         test       eax, eax
0000000000002640         je         loc_2740

                     loc_2646:
0000000000002646         xor        eax, eax                                    ; CODE XREF=unary_operator+1168, unary_operator+1328
0000000000002648         jmp        loc_2250
000000000000264d         align      16

                     loc_2650:
0000000000002650         call       unary_advance                               ; unary_advance, case 7, CODE XREF=unary_operator+78
0000000000002655         movsxd     rax, dword [pos]                            ; pos
000000000000265c         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
000000000000265f         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002664         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002669         call       j___xstat                                   ; __xstat
000000000000266e         test       eax, eax
0000000000002670         jne        loc_2646

0000000000002672         xor        eax, eax
0000000000002674         mov        rsi, qword [rsp+0xb8+var_60]
0000000000002679         cmp        qword [rsp+0xb8+var_70], rsi
000000000000267e         mov        rcx, qword [rsp+0xb8+var_68]
0000000000002683         mov        rdx, qword [rsp+0xb8+var_58]
0000000000002688         jg         loc_2250

000000000000268e         mov        eax, 0x1
0000000000002693         jl         loc_2250

0000000000002699         sub        edx, ecx
000000000000269b         test       edx, edx
000000000000269d         setg       al
00000000000026a0         jmp        loc_2250
00000000000026a5         align      8

                     loc_26a8:
00000000000026a8         call       unary_advance                               ; unary_advance, case 33, CODE XREF=unary_operator+78
00000000000026ad         movsxd     rax, dword [pos]                            ; pos
00000000000026b4         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___lxstat
00000000000026b7         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
00000000000026bc         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___lxstat
00000000000026c1         call       j___lxstat                                  ; __lxstat
00000000000026c6         mov        edx, eax
00000000000026c8         xor        eax, eax
00000000000026ca         test       edx, edx
00000000000026cc         jne        loc_2250

00000000000026d2         mov        eax, dword [rsp+0xb8+var_A0]
00000000000026d6         and        eax, 0xf000
00000000000026db         cmp        eax, 0xa000
00000000000026e0         sete       al
00000000000026e3         jmp        loc_2250
00000000000026e8         align      16

                     loc_26f0:
00000000000026f0         call       unary_advance                               ; unary_advance, case 0, CODE XREF=unary_operator+78
00000000000026f5         movsxd     rax, dword [pos]                            ; pos
00000000000026fc         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___xstat
00000000000026ff         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000002704         mov        rsi, qword [rbx+rax*8-8]                    ; argument "__filename" for method j___xstat
0000000000002709         call       j___xstat                                   ; __xstat
000000000000270e         test       eax, eax
0000000000002710         jne        loc_2646

0000000000002716         call       j___errno_location                          ; __errno_location
000000000000271b         mov        dword [rax], 0x0
0000000000002721         mov        rbx, rax
0000000000002724         call       j_getegid                                   ; getegid
0000000000002729         cmp        eax, 0xffffffff
000000000000272c         mov        edx, eax
000000000000272e         je         loc_279e

                     loc_2730:
0000000000002730         cmp        dword [rsp+0xb8+var_98], edx                ; CODE XREF=unary_operator+1482
0000000000002734         sete       al
0000000000002737         jmp        loc_2250
000000000000273c         align      64

                     loc_2740:
0000000000002740         call       j___errno_location                          ; __errno_location, CODE XREF=unary_operator+1120
0000000000002745         mov        dword [rax], 0x0
000000000000274b         mov        rbx, rax
000000000000274e         call       j_geteuid                                   ; geteuid
0000000000002753         cmp        eax, 0xffffffff
0000000000002756         mov        edx, eax
0000000000002758         je         loc_2790

                     loc_275a:
000000000000275a         cmp        dword [rsp+0xb8+var_9C], edx                ; CODE XREF=unary_operator+1468
000000000000275e         sete       al
0000000000002761         jmp        loc_2250

                     loc_2766:
0000000000002766         call       quote                                       ; quote, case 50, CODE XREF=unary_operator+55, unary_operator+78
000000000000276b         lea        rsi, qword [aSUnaryOperator]                ; argument "msgid" for method j_dcgettext, "%s: unary operator expected"
0000000000002772         mov        rbx, rax
0000000000002775         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002777         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000277c         call       j_dcgettext                                 ; dcgettext
0000000000002781         mov        rsi, rbx
0000000000002784         mov        rdi, rax
0000000000002787         xor        eax, eax
0000000000002789         call       test_syntax_error                           ; test_syntax_error
000000000000278e         nop

                     loc_2790:
0000000000002790         mov        esi, dword [rbx]                            ; CODE XREF=unary_operator+1400
0000000000002792         xor        eax, eax
0000000000002794         test       esi, esi
0000000000002796         jne        loc_2250

000000000000279c         jmp        loc_275a

                     loc_279e:
000000000000279e         mov        ecx, dword [rbx]                            ; CODE XREF=unary_operator+1358
00000000000027a0         xor        eax, eax
00000000000027a2         test       ecx, ecx
00000000000027a4         jne        loc_2250

00000000000027aa         jmp        loc_2730

                     loc_27ac:
00000000000027ac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=unary_operator+129
                        ; endp
00000000000027b1         align      64                                          ; End of unwind block (FDE at 0xa280)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_49: int8_t, -73


                     two_arguments:
00000000000027c0         movsxd     rax, dword [pos]                            ; Begin of unwind block (FDE at 0xa2ac), pos, CODE XREF=posixtest+220, posixtest+297, three_arguments+105
00000000000027c7         mov        r9, qword [argv]                            ; argv
00000000000027ce         lea        rdi, qword [aSUnaryOperator+28]             ; 0x83d8
00000000000027d5         mov        ecx, 0x2
00000000000027da         mov        rdx, qword [r9+rax*8]
00000000000027de         mov        r8, rax
00000000000027e1         lea        r10, qword [rax*8]
00000000000027e9         mov        rsi, rdx
00000000000027ec         rep  cmpsb byte [rsi], byte [rdi]
00000000000027ee         seta       al
00000000000027f1         sbb        al, 0x0
00000000000027f3         test       al, al
00000000000027f5         je         loc_2810

00000000000027f7         cmp        byte [rdx], 0x2d
00000000000027fa         jne        loc_2827

00000000000027fc         cmp        byte [rdx+1], 0x0
0000000000002800         je         loc_2827

0000000000002802         cmp        byte [rdx+2], 0x0
0000000000002806         jne        loc_2827

0000000000002808         jmp        unary_operator                              ; unary_operator
                        ; endp
000000000000280d         align      16

                     loc_2810:
0000000000002810         mov        rax, qword [r9+r10+8]                       ; CODE XREF=two_arguments+53
0000000000002815         add        r8d, 0x2
0000000000002819         mov        dword [pos], r8d                            ; pos
0000000000002820         cmp        byte [rax], 0x0
0000000000002823         sete       al
0000000000002826         ret
                        ; endp

                     loc_2827:
0000000000002827         sub        rsp, 0x8                                    ; CODE XREF=two_arguments+58, two_arguments+64, two_arguments+70
000000000000282b         call       beyond                                      ; beyond
                     posixtest:
0000000000002830         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xa2ac), Begin of unwind block (FDE at 0xa2c4), CODE XREF=main+160, or+347
0000000000002834         cmp        edi, 0x2
0000000000002837         je         loc_2908

000000000000283d         jle        loc_28c0

0000000000002843         cmp        edi, 0x3
0000000000002846         je         loc_28b0

0000000000002848         cmp        edi, 0x4
000000000000284b         jne        loc_28f0

0000000000002851         movsxd     rdx, dword [pos]                            ; pos
0000000000002858         mov        r9, qword [argv]                            ; argv
000000000000285f         lea        rdi, qword [aSUnaryOperator+28]             ; 0x83d8
0000000000002866         mov        ecx, 0x2
000000000000286b         mov        r8, qword [r9+rdx*8]
000000000000286f         mov        rax, rdx
0000000000002872         lea        r10, qword [rdx*8]
000000000000287a         mov        rsi, r8
000000000000287d         rep  cmpsb byte [rsi], byte [rdi]
000000000000287f         seta       dl
0000000000002882         sbb        dl, 0x0
0000000000002885         test       dl, dl
0000000000002887         jne        loc_2918

000000000000288d         add        eax, 0x1
0000000000002890         cmp        eax, dword [argc]                           ; argc
0000000000002896         mov        dword [pos], eax                            ; pos
000000000000289c         jge        loc_296a

00000000000028a2         call       three_arguments                             ; three_arguments
00000000000028a7         add        rsp, 0x8
00000000000028ab         xor        eax, 0x1
00000000000028ae         ret
                        ; endp
00000000000028af         align      16

                     loc_28b0:
00000000000028b0         add        rsp, 0x8                                    ; CODE XREF=posixtest+22
00000000000028b4         jmp        three_arguments                             ; three_arguments
00000000000028b9         align      64

                     loc_28c0:
00000000000028c0         cmp        edi, 0x1                                    ; CODE XREF=posixtest+13
00000000000028c3         jne        loc_28f0

00000000000028c5         movsxd     rax, dword [pos]                            ; pos
00000000000028cc         lea        edx, dword [rax+1]
00000000000028cf         mov        dword [pos], edx                            ; pos
00000000000028d5         mov        rdx, qword [argv]                           ; argv
00000000000028dc         mov        rax, qword [rdx+rax*8]
00000000000028e0         cmp        byte [rax], 0x0
00000000000028e3         setne      al

                     loc_28e6:
00000000000028e6         add        rsp, 0x8                                    ; CODE XREF=posixtest+309
00000000000028ea         ret
                        ; endp
00000000000028eb         align      16

                     loc_28f0:
00000000000028f0         mov        eax, dword [pos]                            ; pos, CODE XREF=posixtest+27, posixtest+147

                     loc_28f6:
00000000000028f6         cmp        eax, dword [argc]                           ; argc, CODE XREF=posixtest+257, posixtest+286
00000000000028fc         jge        loc_296a

00000000000028fe         add        rsp, 0x8
0000000000002902         jmp        or                                          ; or
0000000000002904         align      8

                     loc_2908:
0000000000002908         add        rsp, 0x8                                    ; CODE XREF=posixtest+7
000000000000290c         jmp        two_arguments                               ; two_arguments
0000000000002911         align      8

                     loc_2918:
0000000000002918         lea        rdi, qword [aSUnaryOperator+30]             ; 0x83da, CODE XREF=posixtest+87
000000000000291f         mov        ecx, 0x2
0000000000002924         mov        rsi, r8
0000000000002927         rep  cmpsb byte [rsi], byte [rdi]
0000000000002929         seta       dl
000000000000292c         sbb        dl, 0x0
000000000000292f         test       dl, dl
0000000000002931         jne        loc_28f6

0000000000002933         mov        rsi, qword [r9+r10+0x18]
0000000000002938         lea        rdi, qword [aSSn+9]                         ; 0x989d
000000000000293f         mov        ecx, 0x2
0000000000002944         rep  cmpsb byte [rsi], byte [rdi]
0000000000002946         seta       dl
0000000000002949         sbb        dl, 0x0
000000000000294c         test       dl, dl
000000000000294e         jne        loc_28f6

0000000000002950         add        eax, 0x1
0000000000002953         mov        dword [pos], eax                            ; pos
0000000000002959         call       two_arguments                               ; two_arguments
000000000000295e         add        dword [pos], 0x1                            ; pos
0000000000002965         jmp        loc_28e6

                     loc_296a:
000000000000296a         call       beyond                                      ; beyond, CODE XREF=posixtest+108, posixtest+204
000000000000296f         nop                                                    ; End of unwind block (FDE at 0xa2c4)

                     or:
0000000000002970         push       r15                                         ; Begin of unwind block (FDE at 0xa2f8), CODE XREF=posixtest+210, three_arguments+262
0000000000002972         push       r14
0000000000002974         push       r13
0000000000002976         push       r12
0000000000002978         push       rbp
0000000000002979         push       rbx
000000000000297a         sub        rsp, 0x18
000000000000297e         mov        r11d, dword [pos]                           ; pos
0000000000002985         mov        r12d, dword [argc]                          ; argc
000000000000298c         mov        byte [rsp+0x58+var_49], 0x0
0000000000002991         nop        dword [rax]

                     loc_2998:
0000000000002998         cmp        r11d, r12d                                  ; CODE XREF=or+743
000000000000299b         mov        ebx, 0x1
00000000000029a0         lea        rbp, qword [aSExpectedFound+22]             ; 0x83fe
00000000000029a7         jge        loc_2b5e

00000000000029ad         nop        dword [rax]

                     loc_29b0:
00000000000029b0         mov        r15, qword [argv]                           ; argv, CODE XREF=or+488
00000000000029b7         movsxd     r9, r11d
00000000000029ba         mov        r10, qword [r15+r9*8]
00000000000029be         movzx      r13d, byte [r10]
00000000000029c2         cmp        r13b, 0x21
00000000000029c6         jne        loc_2ca7

00000000000029cc         cmp        byte [r10+1], 0x0
00000000000029d1         jne        loc_2caf

00000000000029d7         lea        r9d, dword [r11+1]
00000000000029db         cmp        r9d, r12d
00000000000029de         mov        dword [pos], r9d                            ; pos
00000000000029e5         jge        loc_2b5e

00000000000029eb         lea        eax, dword [r12-2]
00000000000029f0         movsxd     r9, r9d
00000000000029f3         xor        ecx, ecx
00000000000029f5         mov        r14d, 0x1
00000000000029fb         sub        eax, r11d
00000000000029fe         lea        rsi, qword [r9+rax+1]
0000000000002a03         jmp        loc_2a2d
0000000000002a05         align      8

                     loc_2a08:
0000000000002a08         cmp        byte [r10+1], 0x0                           ; CODE XREF=or+202
0000000000002a0d         jne        loc_2b68

0000000000002a13         lea        eax, dword [r9+1]
0000000000002a17         add        r9, 0x1
0000000000002a1b         cmp        r9, rsi
0000000000002a1e         je         loc_2cce

0000000000002a24         xor        r14d, 0x1
0000000000002a28         mov        ecx, 0x1

                     loc_2a2d:
0000000000002a2d         mov        r10, qword [r15+r9*8]                       ; CODE XREF=or+147
0000000000002a31         mov        r11d, r9d
0000000000002a34         movzx      eax, byte [r10]
0000000000002a38         cmp        al, 0x21
0000000000002a3a         je         loc_2a08

0000000000002a3c         test       cl, cl
0000000000002a3e         jne        loc_2cc2

                     loc_2a44:
0000000000002a44         mov        r13d, eax                                   ; CODE XREF=or+857

                     loc_2a47:
0000000000002a47         cmp        r13b, 0x28                                  ; CODE XREF=or+826
0000000000002a4b         jne        loc_2b78

0000000000002a51         cmp        byte [r10+1], 0x0
0000000000002a56         jne        loc_2b78

0000000000002a5c         lea        r9d, dword [r11+1]
0000000000002a60         cmp        r9d, r12d
0000000000002a63         mov        dword [pos], r9d                            ; pos
0000000000002a6a         jge        loc_2b5e

0000000000002a70         lea        eax, dword [r11+2]
0000000000002a74         cmp        eax, r12d
0000000000002a77         jge        loc_2cb7

0000000000002a7d         cdqe
0000000000002a7f         mov        r8d, 0x1
0000000000002a85         lea        r10, qword [r15+rax*8]
0000000000002a89         lea        eax, dword [r12-1]
0000000000002a8e         sub        eax, r11d
0000000000002a91         mov        r11d, eax

                     loc_2a94:
0000000000002a94         mov        rsi, qword [r10]                            ; CODE XREF=or+339
0000000000002a97         lea        rdi, qword [aSSn+9]                         ; 0x989d
0000000000002a9e         mov        ecx, 0x2
0000000000002aa3         rep  cmpsb byte [rsi], byte [rdi]
0000000000002aa5         seta       al
0000000000002aa8         sbb        al, 0x0
0000000000002aaa         test       al, al
0000000000002aac         je         loc_2ac8

0000000000002aae         cmp        r8d, 0x4
0000000000002ab2         je         loc_2c60

0000000000002ab8         add        r8d, 0x1
0000000000002abc         add        r10, 0x8
0000000000002ac0         cmp        r11d, r8d
0000000000002ac3         jne        loc_2a94

0000000000002ac5         nop        dword [rax]

                     loc_2ac8:
0000000000002ac8         mov        edi, r8d                                    ; CODE XREF=or+316, or+758, or+845
0000000000002acb         call       posixtest                                   ; posixtest
0000000000002ad0         movsxd     rcx, dword [pos]                            ; pos
0000000000002ad7         mov        rdx, qword [argv]                           ; argv
0000000000002ade         mov        rsi, qword [rdx+rcx*8]
0000000000002ae2         mov        r11, rcx
0000000000002ae5         test       rsi, rsi
0000000000002ae8         je         loc_2d1a

0000000000002aee         cmp        byte [rsi], 0x29
0000000000002af1         jne        loc_2cd9

0000000000002af7         cmp        byte [rsi+1], 0x0
0000000000002afb         jne        loc_2cd9

0000000000002b01         mov        r12d, dword [argc]                          ; argc
0000000000002b08         add        r11d, 0x1
0000000000002b0c         mov        dword [pos], r11d                           ; pos

                     loc_2b13:
0000000000002b13         xor        r14d, eax                                   ; CODE XREF=or+697, or+789, or+818
0000000000002b16         and        ebx, r14d
0000000000002b19         cmp        r12d, r11d
0000000000002b1c         jle        loc_2be7

                     loc_2b22:
0000000000002b22         mov        rcx, qword [argv]                           ; argv, CODE XREF=or+625
0000000000002b29         movsxd     rax, r11d
0000000000002b2c         mov        rdi, rbp
0000000000002b2f         mov        r8, qword [rcx+rax*8]
0000000000002b33         mov        ecx, 0x3
0000000000002b38         mov        rsi, r8
0000000000002b3b         rep  cmpsb byte [rsi], byte [rdi]
0000000000002b3d         seta       al
0000000000002b40         sbb        al, 0x0
0000000000002b42         test       al, al
0000000000002b44         jne        loc_2c2e

0000000000002b4a         add        r11d, 0x1
0000000000002b4e         cmp        r11d, r12d
0000000000002b51         mov        dword [pos], r11d                           ; pos
0000000000002b58         jl         loc_29b0

                     loc_2b5e:
0000000000002b5e         call       beyond                                      ; beyond, CODE XREF=or+55, or+117, or+250, or+868
0000000000002b63         nop        dword [rax+rax]

                     loc_2b68:
0000000000002b68         test       cl, cl                                      ; CODE XREF=or+157
0000000000002b6a         je         loc_2b78

0000000000002b6c         mov        dword [pos], r9d                            ; pos
0000000000002b73         nop        dword [rax+rax]

                     loc_2b78:
0000000000002b78         mov        eax, r12d                                   ; CODE XREF=or+219, or+230, or+506, or+834
0000000000002b7b         sub        eax, r11d
0000000000002b7e         cmp        eax, 0x3
0000000000002b81         jle        loc_2c00

0000000000002b83         lea        rdi, qword [aEfDoesNotAccep+20]             ; 0x8386
0000000000002b8a         mov        ecx, 0x3
0000000000002b8f         mov        rsi, r10
0000000000002b92         rep  cmpsb byte [rsi], byte [rdi]
0000000000002b94         seta       al
0000000000002b97         sbb        al, 0x0
0000000000002b99         test       al, al
0000000000002b9b         jne        loc_2baf

0000000000002b9d         mov        rdi, qword [r15+r9*8+0x10]
0000000000002ba2         call       binop                                       ; binop
0000000000002ba7         test       al, al
0000000000002ba9         jne        loc_2c8a

                     loc_2baf:
0000000000002baf         mov        rdi, qword [r15+r9*8+8]                     ; CODE XREF=or+555, loc_2c00
0000000000002bb4         call       binop                                       ; binop
0000000000002bb9         test       al, al
0000000000002bbb         jne        loc_2c70

0000000000002bc1         cmp        r13b, 0x2d
0000000000002bc5         je         loc_2c08

                     loc_2bc7:
0000000000002bc7         test       r13b, r13b                                  ; CODE XREF=or+662, or+669, or+676
0000000000002bca         setne      al
0000000000002bcd         add        r11d, 0x1
0000000000002bd1         xor        r14d, eax
0000000000002bd4         mov        dword [pos], r11d                           ; pos
0000000000002bdb         and        ebx, r14d
0000000000002bde         cmp        r12d, r11d
0000000000002be1         jg         loc_2b22

                     loc_2be7:
0000000000002be7         or         byte [rsp+0x58+var_49], bl                  ; CODE XREF=or+428

                     loc_2beb:
0000000000002beb         movzx      eax, byte [rsp+0x58+var_49]                 ; CODE XREF=or+730
0000000000002bf0         add        rsp, 0x18
0000000000002bf4         pop        rbx
0000000000002bf5         pop        rbp
0000000000002bf6         pop        r12
0000000000002bf8         pop        r13
0000000000002bfa         pop        r14
0000000000002bfc         pop        r15
0000000000002bfe         ret
                        ; endp
0000000000002bff         align      1024

                     loc_2c00:
0000000000002c00         je         loc_2baf                                    ; CODE XREF=or+529

0000000000002c02         cmp        r13b, 0x2d
0000000000002c06         jne        loc_2bc7

                     loc_2c08:
0000000000002c08         cmp        byte [r10+1], 0x0                           ; CODE XREF=or+597
0000000000002c0d         je         loc_2bc7

0000000000002c0f         cmp        byte [r10+2], 0x0
0000000000002c14         jne        loc_2bc7

0000000000002c16         call       unary_operator                              ; unary_operator
0000000000002c1b         mov        r11d, dword [pos]                           ; pos
0000000000002c22         mov        r12d, dword [argc]                          ; argc
0000000000002c29         jmp        loc_2b13

                     loc_2c2e:
0000000000002c2e         lea        rdi, qword [aSExpectedFound+25]             ; 0x8401, CODE XREF=or+468
0000000000002c35         mov        ecx, 0x3
0000000000002c3a         mov        rsi, r8
0000000000002c3d         or         byte [rsp+0x58+var_49], bl
0000000000002c41         rep  cmpsb byte [rsi], byte [rdi]
0000000000002c43         seta       al
0000000000002c46         sbb        al, 0x0
0000000000002c48         test       al, al
0000000000002c4a         jne        loc_2beb

0000000000002c4c         add        r11d, 0x1
0000000000002c50         mov        dword [pos], r11d                           ; pos
0000000000002c57         jmp        loc_2998
0000000000002c5c         align      32

                     loc_2c60:
0000000000002c60         mov        r8d, r12d                                   ; CODE XREF=or+322
0000000000002c63         sub        r8d, r9d
0000000000002c66         jmp        loc_2ac8
0000000000002c6b         align      16

                     loc_2c70:
0000000000002c70         xor        edi, edi                                    ; CODE XREF=or+587
0000000000002c72         call       binary_operator                             ; binary_operator
0000000000002c77         mov        r11d, dword [pos]                           ; pos
0000000000002c7e         mov        r12d, dword [argc]                          ; argc
0000000000002c85         jmp        loc_2b13

                     loc_2c8a:
0000000000002c8a         mov        edi, 0x1                                    ; CODE XREF=or+569
0000000000002c8f         call       binary_operator                             ; binary_operator
0000000000002c94         mov        r11d, dword [pos]                           ; pos
0000000000002c9b         mov        r12d, dword [argc]                          ; argc
0000000000002ca2         jmp        loc_2b13

                     loc_2ca7:
0000000000002ca7         xor        r14d, r14d                                  ; CODE XREF=or+86
0000000000002caa         jmp        loc_2a47

                     loc_2caf:
0000000000002caf         xor        r14d, r14d                                  ; CODE XREF=or+97
0000000000002cb2         jmp        loc_2b78

                     loc_2cb7:
0000000000002cb7         mov        r8d, 0x1                                    ; CODE XREF=or+263
0000000000002cbd         jmp        loc_2ac8

                     loc_2cc2:
0000000000002cc2         mov        dword [pos], r9d                            ; pos, CODE XREF=or+206
0000000000002cc9         jmp        loc_2a44

                     loc_2cce:
0000000000002cce         mov        dword [pos], eax                            ; pos, CODE XREF=or+174
0000000000002cd4         jmp        loc_2b5e

                     loc_2cd9:
0000000000002cd9         mov        edi, 0x1                                    ; CODE XREF=or+385, or+395
0000000000002cde         call       quote_n                                     ; quote_n
0000000000002ce3         lea        rsi, qword [aSSn+9]                         ; 0x989d
0000000000002cea         xor        edi, edi
0000000000002cec         mov        rbp, rax
0000000000002cef         call       quote_n                                     ; quote_n
0000000000002cf4         lea        rsi, qword [aSExpectedFound]                ; argument "msgid" for method j_dcgettext, "%s expected, found %s"
0000000000002cfb         mov        rbx, rax
0000000000002cfe         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d03         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d05         call       j_dcgettext                                 ; dcgettext
0000000000002d0a         mov        rdx, rbp
0000000000002d0d         mov        rdi, rax
0000000000002d10         mov        rsi, rbx
0000000000002d13         xor        eax, eax
0000000000002d15         call       test_syntax_error                           ; test_syntax_error

                     loc_2d1a:
0000000000002d1a         lea        rdi, qword [aSSn+9]                         ; 0x989d, CODE XREF=or+376
0000000000002d21         call       quote                                       ; quote
0000000000002d26         lea        rsi, qword [aSExpected]                     ; argument "msgid" for method j_dcgettext, "%s expected"
0000000000002d2d         mov        rbx, rax
0000000000002d30         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002d32         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002d37         call       j_dcgettext                                 ; dcgettext
0000000000002d3c         mov        rsi, rbx
0000000000002d3f         mov        rdi, rax
0000000000002d42         xor        eax, eax
0000000000002d44         call       test_syntax_error                           ; test_syntax_error
0000000000002d49         nop        dword [rax]                                 ; End of unwind block (FDE at 0xa2f8)

                     three_arguments:
0000000000002d50         movsxd     rax, dword [pos]                            ; Begin of unwind block (FDE at 0xa344), pos, CODE XREF=posixtest+114, posixtest+132
0000000000002d57         mov        r10, qword [argv]                           ; argv
0000000000002d5e         push       rbx
0000000000002d5f         mov        r9, rax
0000000000002d62         add        rax, 0x1
0000000000002d66         mov        r11, qword [r10+rax*8]
0000000000002d6a         lea        rbx, qword [rax*8]
0000000000002d72         mov        rdi, r11
0000000000002d75         call       binop                                       ; binop
0000000000002d7a         test       al, al
0000000000002d7c         jne        loc_2e60

0000000000002d82         mov        rdx, qword [r10+rbx-8]
0000000000002d87         lea        rdi, qword [aSUnaryOperator+28]             ; 0x83d8
0000000000002d8e         mov        ecx, 0x2
0000000000002d93         mov        rsi, rdx
0000000000002d96         rep  cmpsb byte [rsi], byte [rdi]
0000000000002d98         seta       al
0000000000002d9b         sbb        al, 0x0
0000000000002d9d         test       al, al
0000000000002d9f         jne        loc_2dc8

0000000000002da1         add        r9d, 0x1
0000000000002da5         cmp        r9d, dword [argc]                           ; argc
0000000000002dac         mov        dword [pos], r9d                            ; pos
0000000000002db3         jge        loc_2e93

0000000000002db9         call       two_arguments                               ; two_arguments
0000000000002dbe         pop        rbx
0000000000002dbf         xor        eax, 0x1
0000000000002dc2         ret
                        ; endp
0000000000002dc3         align      8

                     loc_2dc8:
0000000000002dc8         lea        rdi, qword [aSUnaryOperator+30]             ; 0x83da, CODE XREF=three_arguments+79
0000000000002dcf         mov        ecx, 0x2
0000000000002dd4         mov        rsi, rdx
0000000000002dd7         rep  cmpsb byte [rsi], byte [rdi]
0000000000002dd9         seta       al
0000000000002ddc         sbb        al, 0x0
0000000000002dde         test       al, al
0000000000002de0         jne        loc_2e18

0000000000002de2         mov        rsi, qword [r10+rbx+8]
0000000000002de7         lea        rdi, qword [aSSn+9]                         ; 0x989d
0000000000002dee         mov        ecx, 0x2
0000000000002df3         rep  cmpsb byte [rsi], byte [rdi]
0000000000002df5         seta       al
0000000000002df8         sbb        al, 0x0
0000000000002dfa         test       al, al
0000000000002dfc         jne        loc_2e18

0000000000002dfe         cmp        byte [r11], 0x0
0000000000002e02         pop        rbx
0000000000002e03         setne      al
0000000000002e06         add        r9d, 0x3
0000000000002e0a         mov        dword [pos], r9d                            ; pos
0000000000002e11         ret
                        ; endp
0000000000002e12         align      8

                     loc_2e18:
0000000000002e18         lea        rdi, qword [aSExpectedFound+22]             ; 0x83fe, CODE XREF=three_arguments+144, three_arguments+172
0000000000002e1f         mov        ecx, 0x3
0000000000002e24         mov        rsi, r11
0000000000002e27         rep  cmpsb byte [rsi], byte [rdi]
0000000000002e29         seta       al
0000000000002e2c         sbb        al, 0x0
0000000000002e2e         test       al, al
0000000000002e30         je         loc_2e4c

0000000000002e32         lea        rdi, qword [aSExpectedFound+25]             ; 0x8401
0000000000002e39         mov        ecx, 0x3
0000000000002e3e         mov        rsi, r11
0000000000002e41         rep  cmpsb byte [rsi], byte [rdi]
0000000000002e43         seta       al
0000000000002e46         sbb        al, 0x0
0000000000002e48         test       al, al
0000000000002e4a         jne        loc_2e68

                     loc_2e4c:
0000000000002e4c         cmp        r9d, dword [argc]                           ; argc, CODE XREF=three_arguments+224
0000000000002e53         jge        loc_2e93

0000000000002e55         pop        rbx
0000000000002e56         jmp        or                                          ; or
0000000000002e5b         align      32

                     loc_2e60:
0000000000002e60         pop        rbx                                         ; CODE XREF=three_arguments+44
0000000000002e61         xor        edi, edi
0000000000002e63         jmp        binary_operator                             ; binary_operator
                        ; endp

                     loc_2e68:
0000000000002e68         mov        rdi, r11                                    ; CODE XREF=three_arguments+250
0000000000002e6b         call       quote                                       ; quote
0000000000002e70         lea        rsi, qword [aSBinaryOperato]                ; argument "msgid" for method j_dcgettext, "%s: binary operator expected"
0000000000002e77         mov        rbx, rax
0000000000002e7a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e7c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002e81         call       j_dcgettext                                 ; dcgettext
0000000000002e86         mov        rsi, rbx
0000000000002e89         mov        rdi, rax
0000000000002e8c         xor        eax, eax
0000000000002e8e         call       test_syntax_error                           ; test_syntax_error

                     loc_2e93:
0000000000002e93         call       beyond                                      ; beyond, CODE XREF=three_arguments+99, three_arguments+259
0000000000002e98         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xa344)
                     usage:
0000000000002ea0         test       edi, edi                                    ; Begin of unwind block (FDE at 0xa374), CODE XREF=main+437
0000000000002ea2         push       r12
0000000000002ea4         push       rbp
0000000000002ea5         push       rbx
0000000000002ea6         mov        ebx, edi
0000000000002ea8         je         loc_2ee4

0000000000002eaa         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
0000000000002eb1         mov        rbp, qword [program_name]                   ; program_name
0000000000002eb8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ebd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ebf         call       j_dcgettext                                 ; dcgettext
0000000000002ec4         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002ecb         mov        rdx, rax
0000000000002ece         mov        rcx, rbp
0000000000002ed1         mov        esi, 0x1
0000000000002ed6         xor        eax, eax
0000000000002ed8         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2edd:
0000000000002edd         mov        edi, ebx                                    ; argument "__status" for method j_exit, CODE XREF=usage+935
0000000000002edf         call       j_exit                                      ; exit
                        ; endp

                     loc_2ee4:
0000000000002ee4         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+8
0000000000002eeb         lea        rsi, qword [aUsageTestExpre]                ; argument "msgid" for method j_dcgettext, "Usage: test EXPRESSION\\n  or:  test\\n  or:  [ EXPRESSION ]\\n  or:  [ ]\\n  or:  [ OPTION\\n"
0000000000002ef2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ef7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ef9         call       j_dcgettext                                 ; dcgettext
0000000000002efe         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f01         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f04         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f09         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f10         lea        rsi, qword [aExitWithTheSta]                ; argument "msgid" for method j_dcgettext, "Exit with the status determined by EXPRESSION.\\n\\n"
0000000000002f17         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f1c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f1e         call       j_dcgettext                                 ; dcgettext
0000000000002f23         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f26         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f29         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f2e         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f35         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
0000000000002f3c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f41         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f43         call       j_dcgettext                                 ; dcgettext
0000000000002f48         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f4b         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f4e         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f53         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f5a         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002f61         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f66         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f68         call       j_dcgettext                                 ; dcgettext
0000000000002f6d         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f70         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f73         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f78         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002f7f         lea        rsi, qword [aNanOmittedExpr]                ; argument "msgid" for method j_dcgettext, "\\nAn omitted EXPRESSION defaults to false.  Otherwise,\\nEXPRESSION is true or false and sets exit status.  It is one of:\\n"
0000000000002f86         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f8b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f8d         call       j_dcgettext                                 ; dcgettext
0000000000002f92         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002f95         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002f98         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002f9d         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002fa4         lea        rsi, qword [aNExpressionExp]                ; argument "msgid" for method j_dcgettext, "\\n  ( EXPRESSION )               EXPRESSION is true\\n  ! EXPRESSION                 EXPRESSION is false\\n  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 are true\\n  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 is true\\n"
0000000000002fab         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fb0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fb2         call       j_dcgettext                                 ; dcgettext
0000000000002fb7         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002fba         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002fbd         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002fc2         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002fc9         lea        rsi, qword [aNNStringTheLen]                ; argument "msgid" for method j_dcgettext, "\\n  -n STRING            the length of STRING is nonzero\\n  STRING               equivalent to -n STRING\\n  -z STRING            the length of STRING is zero\\n  STRING1 = STRING2    the strings are equal\\n  STRING1 != STRING2   the strings are not equal\\n"
0000000000002fd0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002fd5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002fd7         call       j_dcgettext                                 ; dcgettext
0000000000002fdc         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002fdf         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002fe2         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002fe7         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002fee         lea        rsi, qword [aNInteger1EqInt]                ; argument "msgid" for method j_dcgettext, "\\n  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2\\n  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER2\\n  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2\\n  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER…"
0000000000002ff5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002ffa         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002ffc         call       j_dcgettext                                 ; dcgettext
0000000000003001         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003004         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003007         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000300c         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003013         lea        rsi, qword [aNFile1EfFile2F]                ; argument "msgid" for method j_dcgettext, "\\n  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inode numbers\\n  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2\\n  FILE1 -ot FILE2   FILE1 is older than FILE2\\n"
000000000000301a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000301f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003021         call       j_dcgettext                                 ; dcgettext
0000000000003026         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003029         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000302c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003031         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003038         lea        rsi, qword [aNBFileFileExis]                ; argument "msgid" for method j_dcgettext, "\\n  -b FILE     FILE exists and is block special\\n  -c FILE     FILE exists and is character special\\n  -d FILE     FILE exists and is a directory\\n  -e FILE     FILE exists\\n"
000000000000303f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003044         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003046         call       j_dcgettext                                 ; dcgettext
000000000000304b         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
000000000000304e         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003051         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003056         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000305d         lea        rsi, qword [aFFileFileExist]                ; argument "msgid" for method j_dcgettext, "  -f FILE     FILE exists and is a regular file\\n  -g FILE     FILE exists and is set-group-ID\\n  -G FILE     FILE exists and is owned by the effective group ID\\n  -h FILE     FILE exists and is a symbolic link (same as -L)\\n  -k FILE     FILE exists and has i…"
0000000000003064         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003069         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000306b         call       j_dcgettext                                 ; dcgettext
0000000000003070         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003073         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003076         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000307b         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003082         lea        rsi, qword [aLFileFileExist]                ; argument "msgid" for method j_dcgettext, "  -L FILE     FILE exists and is a symbolic link (same as -h)\\n  -N FILE     FILE exists and has been modified since it was last read\\n  -O FILE     FILE exists and is owned by the effective user ID\\n  -p FILE     FILE exists and is a named pipe\\n  -r FILE    …"
0000000000003089         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000308e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003090         call       j_dcgettext                                 ; dcgettext
0000000000003095         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003098         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000309b         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000030a0         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000030a7         lea        rsi, qword [aSFileFileExist]                ; argument "msgid" for method j_dcgettext, "  -S FILE     FILE exists and is a socket\\n  -t FD       file descriptor FD is opened on a terminal\\n  -u FILE     FILE exists and its set-user-ID bit is set\\n  -w FILE     FILE exists and write permission is granted\\n  -x FILE     FILE exists and execute (or …"
00000000000030ae         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000030b3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000030b5         call       j_dcgettext                                 ; dcgettext
00000000000030ba         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000030bd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000030c0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000030c5         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000030cc         lea        rsi, qword [aNexceptForHAnd]                ; argument "msgid" for method j_dcgettext, "\\nExcept for -h and -L, all FILE-related tests dereference symbolic links.\\nBeware that parentheses need to be escaped (e.g., by backslashes) for shells.\\nINTEGER may also be -l STRING, which evaluates to the length of STRING.\\n"
00000000000030d3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000030d8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000030da         call       j_dcgettext                                 ; dcgettext
00000000000030df         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000030e2         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000030e5         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000030ea         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000030f1         lea        rsi, qword [aNnoteBinaryAAn]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: Binary -a and -o are inherently ambiguous.  Use 'test EXPR1 && test\\nEXPR2' or 'test EXPR1 || test EXPR2' instead.\\n"
00000000000030f8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000030fd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000030ff         call       j_dcgettext                                 ; dcgettext
0000000000003104         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003107         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000310a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000310f         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003116         lea        rsi, qword [aNnoteHonorsThe]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: [ honors the --help and --version options, but test does not.\\ntest treats each of those as it treats any other nonempty STRING.\\n"
000000000000311d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003122         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003124         call       j_dcgettext                                 ; dcgettext
0000000000003129         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
000000000000312c         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000312f         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003134         lea        rsi, qword [aTestAndor]                     ; argument "msgid" for method j_dcgettext, "test and/or ["
000000000000313b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000313d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003142         call       j_dcgettext                                 ; dcgettext
0000000000003147         lea        rsi, qword [aNnoteYourShell]                ; argument "msgid" for method j_dcgettext, "\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n"
000000000000314e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003150         mov        rbp, rax
0000000000003153         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003158         call       j_dcgettext                                 ; dcgettext
000000000000315d         mov        rdx, rbp
0000000000003160         mov        rsi, rax
0000000000003163         mov        edi, 0x1
0000000000003168         xor        eax, eax
000000000000316a         call       j___printf_chk                              ; __printf_chk
000000000000316f         lea        rsi, qword [aNsOnlineHelpSn]                ; argument "msgid" for method j_dcgettext, "\\n%s online help: <%s>\\n"
0000000000003176         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003178         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000317d         call       j_dcgettext                                 ; dcgettext
0000000000003182         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000003189         lea        rdx, qword [aGnuCoreutils]                  ; "GNU coreutils"
0000000000003190         mov        rsi, rax
0000000000003193         mov        edi, 0x1
0000000000003198         xor        eax, eax
000000000000319a         call       j___printf_chk                              ; __printf_chk
000000000000319f         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000031a1         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000031a6         call       j_setlocale                                 ; setlocale
00000000000031ab         test       rax, rax
00000000000031ae         je         loc_31cc

00000000000031b0         lea        rsi, qword [aGnuCoreutils+14]               ; argument "__s2" for method j_strncmp, 0x8454
00000000000031b7         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000031bc         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000031bf         call       j_strncmp                                   ; strncmp
00000000000031c4         test       eax, eax
00000000000031c6         jne        loc_324c

                     loc_31cc:
00000000000031cc         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+782, usage+977
00000000000031d3         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000031d5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000031da         lea        r12, qword [aTestInvocation]                ; "test invocation"
00000000000031e1         lea        rbp, qword [aTestInvocation+4]              ; 0x8477
00000000000031e8         call       j_dcgettext                                 ; dcgettext
00000000000031ed         lea        rcx, qword [aTestAndor+12]                  ; 0x842d
00000000000031f4         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000031fb         mov        rsi, rax
00000000000031fe         mov        edi, 0x1
0000000000003203         xor        eax, eax
0000000000003205         call       j___printf_chk                              ; __printf_chk
000000000000320a         lea        rax, qword [aTestAndor+12]                  ; 0x842d
0000000000003211         lea        rcx, qword [aWrittenBySSAnd+27]             ; 0x98e1
0000000000003218         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n"
000000000000321f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003224         cmp        r12, rax
0000000000003227         cmovne     rbp, rcx
000000000000322b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000322d         call       j_dcgettext                                 ; dcgettext
0000000000003232         mov        rcx, rbp
0000000000003235         mov        rsi, rax
0000000000003238         mov        rdx, r12
000000000000323b         mov        edi, 0x1
0000000000003240         xor        eax, eax
0000000000003242         call       j___printf_chk                              ; __printf_chk
0000000000003247         jmp        loc_2edd

                     loc_324c:
000000000000324c         mov        rbp, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+806
0000000000003253         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
000000000000325a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000325c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003261         call       j_dcgettext                                 ; dcgettext
0000000000003266         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003269         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000326c         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003271         jmp        loc_31cc
0000000000003276         align      128                                         ; End of unwind block (FDE at 0xa374)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000003280         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xa3cc), file_name
0000000000003287         ret
                        ; endp
0000000000003288         align      16                                          ; End of unwind block (FDE at 0xa3cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000003290         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xa3e0), ignore_EPIPE
0000000000003297         ret
                        ; endp
0000000000003298         align      32                                          ; End of unwind block (FDE at 0xa3e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
00000000000032a0         push       rbp                                         ; Begin of unwind block (FDE at 0xa3f4), DATA XREF=main+67
00000000000032a1         push       rbx
00000000000032a2         sub        rsp, 0x8
00000000000032a6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000032ad         call       close_stream                                ; close_stream
00000000000032b2         test       eax, eax
00000000000032b4         je         loc_32cc

00000000000032b6         call       j___errno_location                          ; __errno_location
00000000000032bb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
00000000000032c2         mov        rbx, rax
00000000000032c5         je         loc_32e3

00000000000032c7         cmp        dword [rax], 0x20
00000000000032ca         jne        loc_32e3

                     loc_32cc:
00000000000032cc         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
00000000000032d3         call       close_stream                                ; close_stream
00000000000032d8         test       eax, eax
00000000000032da         jne        loc_3322

00000000000032dc         add        rsp, 0x8
00000000000032e0         pop        rbx
00000000000032e1         pop        rbp
00000000000032e2         ret
                        ; endp

                     loc_32e3:
00000000000032e3         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
00000000000032ea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032ec         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000032f1         call       j_dcgettext                                 ; dcgettext
00000000000032f6         mov        rdi, qword [file_name]                      ; file_name
00000000000032fd         mov        rbp, rax
0000000000003300         test       rdi, rdi
0000000000003303         je         loc_332d

0000000000003305         call       quotearg_colon                              ; quotearg_colon
000000000000330a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000330c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003313         mov        rcx, rax
0000000000003316         mov        r8, rbp
0000000000003319         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000331b         xor        eax, eax
000000000000331d         call       j_error                                     ; error

                     loc_3322:
0000000000003322         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003328         call       j__exit                                     ; _exit
                        ; endp

                     loc_332d:
000000000000332d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
000000000000332f         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x9348
0000000000003336         mov        rcx, rax
0000000000003339         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000333b         xor        eax, eax
000000000000333d         call       j_error                                     ; error
0000000000003342         jmp        loc_3322
0000000000003344         align      16                                          ; End of unwind block (FDE at 0xa3f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     umaxtostr:
0000000000003350         lea        rcx, qword [rsi+0x14]                       ; Begin of unwind block (FDE at 0xa424), CODE XREF=binary_operator+846, binary_operator+1168
0000000000003354         mov        byte [rsi+0x14], 0x0
0000000000003358         movabs     rsi, 0xcccccccccccccccd
0000000000003362         nop        word [rax+rax]

                     loc_3368:
0000000000003368         mov        rax, rdi                                    ; CODE XREF=umaxtostr+60
000000000000336b         sub        rcx, 0x1
000000000000336f         mul        rsi
0000000000003372         shr        rdx, 0x3
0000000000003376         lea        rax, qword [rdx+rdx*4]
000000000000337a         add        rax, rax
000000000000337d         sub        rdi, rax
0000000000003380         add        edi, 0x30
0000000000003383         test       rdx, rdx
0000000000003386         mov        byte [rcx], dil
0000000000003389         mov        rdi, rdx
000000000000338c         jne        loc_3368

000000000000338e         mov        rax, rcx
0000000000003391         ret
                        ; endp
0000000000003392         align      32                                          ; End of unwind block (FDE at 0xa424)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
00000000000033a0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xa43c), CODE XREF=main+14
00000000000033a3         push       rbx
00000000000033a4         je         loc_341d

00000000000033a6         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
00000000000033ab         mov        rbx, rdi
00000000000033ae         call       j_strrchr                                   ; strrchr
00000000000033b3         test       rax, rax
00000000000033b6         je         loc_340d

00000000000033b8         lea        r8, qword [rax+1]
00000000000033bc         mov        rdx, r8
00000000000033bf         sub        rdx, rbx
00000000000033c2         cmp        rdx, 0x6
00000000000033c6         jle        loc_340d

00000000000033c8         lea        rsi, qword [rax-6]
00000000000033cc         lea        rdi, qword [aLibs]                          ; "/.libs/"
00000000000033d3         mov        ecx, 0x7
00000000000033d8         rep  cmpsb byte [rsi], byte [rdi]
00000000000033da         seta       dl
00000000000033dd         sbb        dl, 0x0
00000000000033e0         test       dl, dl
00000000000033e2         jne        loc_340d

00000000000033e4         lea        rdi, qword [aLibs+8]                        ; 0x9390
00000000000033eb         mov        ecx, 0x3
00000000000033f0         mov        rsi, r8
00000000000033f3         mov        rbx, r8
00000000000033f6         rep  cmpsb byte [rsi], byte [rdi]
00000000000033f8         seta       dl
00000000000033fb         sbb        dl, 0x0
00000000000033fe         test       dl, dl
0000000000003400         jne        loc_340d

0000000000003402         lea        rbx, qword [rax+4]
0000000000003406         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_340d:
000000000000340d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000003414         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
000000000000341b         pop        rbx
000000000000341c         ret
                        ; endp

                     loc_341d:
000000000000341d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000003424         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
000000000000342b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000003430         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000003435         call       j_fwrite                                    ; fwrite
000000000000343a         call       j_abort                                     ; abort
                        ; endp
000000000000343f         align      64                                          ; End of unwind block (FDE at 0xa43c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000003440         push       rbp                                         ; Begin of unwind block (FDE at 0xa45c), CODE XREF=sub_3c70+2597, sub_3c70+2619
0000000000003441         push       rbx
0000000000003442         mov        rbp, rdi
0000000000003445         mov        ebx, esi
0000000000003447         sub        rsp, 0x8
000000000000344b         call       locale_charset                              ; locale_charset
0000000000003450         movzx      edx, byte [rax]
0000000000003453         and        edx, 0xffffffdf
0000000000003456         cmp        dl, 0x55
0000000000003459         je         loc_34d0

000000000000345b         cmp        dl, 0x47
000000000000345e         je         loc_3480

                     loc_3460:
0000000000003460         lea        rax, qword [aLibs+27]                       ; 0x93a3, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000003467         lea        rdx, qword [aLibs+29]                       ; 0x93a5
000000000000346e         cmp        ebx, 0x9
0000000000003471         cmovne     rax, rdx
0000000000003475         add        rsp, 0x8
0000000000003479         pop        rbx
000000000000347a         pop        rbp
000000000000347b         ret
                        ; endp
000000000000347c         align      128

                     loc_3480:
0000000000003480         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000003484         and        edx, 0xffffffdf
0000000000003487         cmp        dl, 0x42
000000000000348a         jne        loc_3460

000000000000348c         cmp        byte [rax+2], 0x31
0000000000003490         jne        loc_3460

0000000000003492         cmp        byte [rax+3], 0x38
0000000000003496         jne        loc_3460

0000000000003498         cmp        byte [rax+4], 0x30
000000000000349c         jne        loc_3460

000000000000349e         cmp        byte [rax+5], 0x33
00000000000034a2         jne        loc_3460

00000000000034a4         cmp        byte [rax+6], 0x30
00000000000034a8         jne        loc_3460

00000000000034aa         cmp        byte [rax+7], 0x0
00000000000034ae         jne        loc_3460

00000000000034b0         cmp        byte [rbp], 0x60
00000000000034b4         lea        rax, qword [aLibs+20]                       ; 0x939c
00000000000034bb         lea        rdx, qword [aLibs+24]                       ; 0x93a0
00000000000034c2         cmovne     rax, rdx
00000000000034c6         add        rsp, 0x8
00000000000034ca         pop        rbx
00000000000034cb         pop        rbp
00000000000034cc         ret
                        ; endp
00000000000034cd         align      16

                     loc_34d0:
00000000000034d0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
00000000000034d4         and        edx, 0xffffffdf
00000000000034d7         cmp        dl, 0x54
00000000000034da         jne        loc_3460

00000000000034dc         movzx      edx, byte [rax+2]
00000000000034e0         and        edx, 0xffffffdf
00000000000034e3         cmp        dl, 0x46
00000000000034e6         jne        loc_3460

00000000000034ec         cmp        byte [rax+3], 0x2d
00000000000034f0         jne        loc_3460

00000000000034f6         cmp        byte [rax+4], 0x38
00000000000034fa         jne        loc_3460

0000000000003500         cmp        byte [rax+5], 0x0
0000000000003504         jne        loc_3460

000000000000350a         cmp        byte [rbp], 0x60
000000000000350e         lea        rax, qword [aLibs+12]                       ; 0x9394
0000000000003515         lea        rdx, qword [aLibs+16]                       ; 0x9398
000000000000351c         cmovne     rax, rdx
0000000000003520         add        rsp, 0x8
0000000000003524         pop        rbx
0000000000003525         pop        rbp
0000000000003526         ret
                        ; endp
0000000000003527         align      16                                          ; End of unwind block (FDE at 0xa45c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000003530         push       r15                                         ; Begin of unwind block (FDE at 0xa4a0), CODE XREF=sub_3c70+1165, sub_3c70+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000003532         push       r14
0000000000003534         mov        r15d, r8d
0000000000003537         push       r13
0000000000003539         push       r12
000000000000353b         mov        r14, rdi
000000000000353e         push       rbp
000000000000353f         push       rbx
0000000000003540         mov        ebx, r9d
0000000000003543         mov        r13, rsi
0000000000003546         mov        rbp, rcx
0000000000003549         and        ebx, 0x2
000000000000354c         sub        rsp, 0xb8
0000000000003553         mov        rax, qword [rsp+0xe8+arg_0]
000000000000355b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000003560         mov        dword [rsp+0xe8+var_E0], r8d
0000000000003565         mov        dword [rsp+0xe8+var_70], r9d
000000000000356a         mov        qword [rsp+0xe8+var_C8], rax
000000000000356f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000003577         mov        qword [rsp+0xe8+var_80], rax
000000000000357c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000003584         mov        qword [rsp+0xe8+var_88], rax
0000000000003589         mov        rax, qword [fs:0x28]
0000000000003592         mov        qword [rsp+0xe8+var_40], rax
000000000000359a         xor        eax, eax
000000000000359c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
00000000000035a1         cmp        r15d, 0xa
00000000000035a5         mov        qword [rsp+0xe8+var_90], rax
00000000000035aa         ja         loc_475f

00000000000035b0         lea        rcx, qword [switch_table_9400]              ; switch_table_9400
00000000000035b7         mov        edx, r15d
00000000000035ba         movsxd     rax, dword [rcx+rdx*4]
00000000000035be         add        rax, rcx
00000000000035c1         jmp        rax                                         ; switch statement using table at 0x9400, with 11 cases, 0x35c3,0x4194,0x41f0,0x4245,0x428a,0x42c4,0x436a,0x43a4,0x4598

                     loc_35c3:
00000000000035c3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_3c70+1318
00000000000035c8         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000035cd         xor        r12d, r12d
00000000000035d0         mov        qword [rsp+0xe8+var_98], 0x0
00000000000035d9         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000035de         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_35e3:
00000000000035e3         lea        rax, qword [aLibs+29]                       ; 0x93a5, CODE XREF=sub_3c70+1876
00000000000035ea         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000035f3         xor        r15d, r15d
00000000000035f6         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000035fe         mov        qword [rsp+0xe8+var_A0], rax

                     loc_3603:
0000000000003603         xor        r11d, r11d                                  ; CODE XREF=sub_3c70+180, sub_3c70+1400, sub_3c70+1488, sub_3c70+1557, sub_3c70+1615, sub_3c70+1781, sub_3c70+1839, sub_3c70+2408, sub_3c70+2485
0000000000003606         mov        rax, rbp
0000000000003609         mov        r8d, r12d
000000000000360c         mov        rbp, r11
000000000000360f         mov        r11, rax
0000000000003612         nop        word [rax+rax]

                     loc_3618:
0000000000003618         cmp        r11, rbp                                    ; CODE XREF=sub_3720+194
000000000000361b         setne      r12b
000000000000361f         cmp        r11, 0xffffffffffffffff
0000000000003623         jne        loc_3632

0000000000003625         mov        rax, qword [rsp+0xe8+var_D8]
000000000000362a         cmp        byte [rax+rbp], 0x0
000000000000362e         setne      r12b

                     loc_3632:
0000000000003632         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000003635         je         loc_3c90

000000000000363b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003640         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003645         lea        r9, qword [rdi+rbp]
0000000000003649         setne      al
000000000000364c         and        al, byte [rsp+0xe8+var_DB]
0000000000003650         mov        r10d, eax
0000000000003653         je         loc_3700

0000000000003659         mov        rax, qword [rsp+0xe8+var_D0]
000000000000365e         test       rax, rax
0000000000003661         je         loc_3a90

0000000000003667         cmp        r11, 0xffffffffffffffff
000000000000366b         lea        rbx, qword [rbp+rax]
0000000000003670         jne        loc_36a0

0000000000003672         cmp        rax, 0x1
0000000000003676         jbe        loc_36a0

0000000000003678         mov        byte [rsp+0xe8+var_B0], r8b
000000000000367d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000003682         mov        qword [rsp+0xe8+var_C0], r9
0000000000003687         call       j_strlen                                    ; strlen
000000000000368c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000003692         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000003698         mov        r11, rax
000000000000369b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_36a0:
00000000000036a0         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
00000000000036a3         mov        byte [rsp+0xe8+var_C0], r10b
00000000000036a8         ja         loc_3c60

00000000000036ae         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
00000000000036b3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
00000000000036b8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
00000000000036bb         mov        qword [rsp+0xe8+var_A8], r11
00000000000036c0         mov        byte [rsp+0xe8+var_B0], r8b
00000000000036c5         mov        qword [rsp+0xe8+var_B8], r9
00000000000036ca         call       j_memcmp                                    ; memcmp
00000000000036cf         test       eax, eax
00000000000036d1         mov        r9, qword [rsp+0xe8+var_B8]
00000000000036d6         movzx      r8d, byte [rsp+0xe8+var_B0]
00000000000036dc         mov        r11, qword [rsp+0xe8+var_A8]
00000000000036e1         jne        loc_3c60

00000000000036e7         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000036ec         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000036f2         jne        loc_4675

00000000000036f8         nop        dword [rax+rax]

                     loc_3700:
0000000000003700         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_3c50+19
0000000000003704         cmp        bl, 0x7e
0000000000003707         ja         loc_3a28

000000000000370d         lea        rcx, qword [switch_table_9400+44]           ; 0x942c
0000000000003714         movzx      edx, bl
0000000000003717         movsxd     rax, dword [rcx+rdx*4]
000000000000371b         add        rax, rcx
000000000000371e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3720:
0000000000003720         xor        r10d, r10d
0000000000003723         cmp        r11, 0x1
0000000000003727         setne      al
000000000000372a         cmp        r11, 0xffffffffffffffff
000000000000372e         jne        loc_373c

0000000000003730         mov        rax, qword [rsp+arg_8]
0000000000003735         cmp        byte [rax+1], 0x0
0000000000003739         setne      al

                     loc_373c:
000000000000373c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3720+14
0000000000003741         sete       dl
0000000000003744         test       al, al
0000000000003746         je         loc_3998

                     loc_374c:
000000000000374c         xor        r12d, r12d                                  ; CODE XREF=sub_3990+11
000000000000374f         xor        eax, eax
0000000000003751         nop        dword [rax]
                        ; endp

                     loc_3758:
0000000000003758         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_3940+50, sub_3a10+119
000000000000375d         jne        loc_3872

0000000000003763         test       dl, dl
0000000000003765         jne        loc_3872

                     loc_376b:
000000000000376b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_3820+87
0000000000003770         test       rsi, rsi
0000000000003773         je         loc_3789

0000000000003775         mov        edx, ebx
0000000000003777         shr        dl, 0x5
000000000000377a         movzx      edx, dl
000000000000377d         mov        edx, dword [rsi+rdx*4]
0000000000003780         bt         edx, ebx
0000000000003783         jb         loc_38d3

                     loc_3789:
0000000000003789         test       r10b, r10b                                  ; CODE XREF=sub_3720+83, sub_3820+93
000000000000378c         jne        loc_38d3

0000000000003792         xor        eax, 0x1
0000000000003795         add        rbp, 0x1
0000000000003799         and        eax, r8d

                     loc_379c:
000000000000379c         test       al, al                                      ; CODE XREF=sub_3c70+936
000000000000379e         je         loc_37c0

00000000000037a0         cmp        r13, r15
00000000000037a3         jbe        loc_37aa

00000000000037a5         mov        byte [r14+r15], 0x27

                     loc_37aa:
00000000000037aa         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3720+131
00000000000037ae         cmp        r13, rax
00000000000037b1         jbe        loc_37b9

00000000000037b3         mov        byte [r14+r15+1], 0x27

                     loc_37b9:
00000000000037b9         add        r15, 0x2                                    ; CODE XREF=sub_3720+145
00000000000037bd         xor        r8d, r8d

                     loc_37c0:
00000000000037c0         cmp        r15, r13                                    ; CODE XREF=sub_3720+126, sub_3820+275, sub_3c70+869
00000000000037c3         jae        loc_37c9

00000000000037c5         mov        byte [r14+r15], bl

                     loc_37c9:
00000000000037c9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_3720+163
00000000000037ce         add        r15, 0x1
00000000000037d2         mov        eax, 0x0
00000000000037d7         test       r12b, r12b
00000000000037da         cmove      edi, eax
00000000000037dd         mov        byte [rsp+0xe8+var_DA], dil
00000000000037e2         jmp        loc_3618
00000000000037e7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_37f0:
00000000000037f0         xor        r10d, r10d
00000000000037f3         mov        eax, dword [rsp+arg_0]
00000000000037f7         cmp        eax, 0x2
00000000000037fa         je         loc_3db8

0000000000003800         cmp        eax, 0x5
0000000000003803         je         loc_3d78

0000000000003809         cmp        eax, 0x2
000000000000380c         mov        ebx, 0x3f
0000000000003811         sete       dl
0000000000003814         xor        r12d, r12d
0000000000003817         xor        eax, eax
0000000000003819         jmp        sub_3720+56
                        ; endp
000000000000381e         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_3820:
0000000000003820         xor        r10d, r10d
0000000000003823         cmp        dword [rsp+arg_0], 0x2
0000000000003828         je         loc_3d30

000000000000382e         mov        byte [rsp+arg_74], r12b
0000000000003833         xor        edx, edx
0000000000003835         xor        eax, eax
0000000000003837         mov        ebx, 0x27
000000000000383c         jmp        sub_3720+56
                        ; endp
0000000000003841         nop        dword [rax]
0000000000003848         mov        edx, 0x9
000000000000384d         mov        ebx, 0x74

                     loc_3852:
0000000000003852         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_39e0+10, sub_3ad0+37, sub_3c10+53
0000000000003857         sete       al
000000000000385a         and        al, byte [rsp+arg_7]
000000000000385e         jne        sub_3990+30

0000000000003864         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_3820+114
0000000000003869         jne        loc_38d0

                     loc_386b:
000000000000386b         mov        ebx, edx                                    ; CODE XREF=sub_3940+18
000000000000386d         xor        r12d, r12d
0000000000003870         xor        eax, eax
                        ; endp

                     loc_3872:
0000000000003872         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_3720+61, sub_3720+69
0000000000003877         jne        loc_376b

000000000000387d         jmp        loc_3789
0000000000003882         nop        word [rax+rax]
0000000000003888         mov        edx, 0x8
000000000000388d         mov        ebx, 0x62
0000000000003892         jmp        sub_3820+68
0000000000003894         nop        dword [rax]
0000000000003898         cmp        dword [rsp+8], 0x2
000000000000389d         je         sub_3c70                                    ; sub_3c70
00000000000038a3         cmp        byte [rsp+0xd], 0x0
00000000000038a8         je         sub_3ab0+16

                     loc_38ae:
00000000000038ae         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3ab0+8
00000000000038b3         je         loc_3ac0

00000000000038b9         cmp        qword [rsp+arg_10], 0x0
00000000000038bf         jne        loc_3c7b

00000000000038c5         mov        ebx, 0x5c
00000000000038ca         nop        word [rax+rax]
                        ; endp

                     loc_38d0:
00000000000038d0         xor        r12d, r12d                                  ; CODE XREF=sub_3820+73, sub_3c10+29
                        ; endp

                     loc_38d3:
00000000000038d3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3720+99, sub_3720+108
00000000000038d8         sete       dl
00000000000038db         cmp        byte [rsp+0xe8+var_D9], 0x0
00000000000038e0         mov        eax, edx
00000000000038e2         jne        loc_4138

00000000000038e8         mov        eax, r8d
00000000000038eb         xor        eax, 0x1
00000000000038ee         and        al, dl
00000000000038f0         je         loc_3921

00000000000038f2         cmp        r13, r15
00000000000038f5         jbe        loc_38fc

00000000000038f7         mov        byte [r14+r15], 0x27

                     loc_38fc:
00000000000038fc         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_3820+213
0000000000003900         cmp        r13, rdx
0000000000003903         jbe        loc_390b

0000000000003905         mov        byte [r14+r15+1], 0x24

                     loc_390b:
000000000000390b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_3820+227
000000000000390f         cmp        r13, rdx
0000000000003912         jbe        loc_391a

0000000000003914         mov        byte [r14+r15+2], 0x27

                     loc_391a:
000000000000391a         add        r15, 0x3                                    ; CODE XREF=sub_3820+242
000000000000391e         mov        r8d, eax

                     loc_3921:
0000000000003921         cmp        r13, r15                                    ; CODE XREF=sub_3820+208
0000000000003924         jbe        loc_392b

0000000000003926         mov        byte [r14+r15], 0x5c

                     loc_392b:
000000000000392b         add        r15, 0x1                                    ; CODE XREF=sub_3820+260
000000000000392f         add        rbp, 0x1
0000000000003933         jmp        loc_37c0
0000000000003938         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3940:
0000000000003940         cmp        byte [rsp+arg_5], 0x0
0000000000003945         jne        loc_3b13

000000000000394b         xor        edx, edx
000000000000394d         test       byte [rsp+arg_70], 0x1
0000000000003952         je         loc_386b

0000000000003958         add        rbp, 0x1
000000000000395c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000003961         nop        dword [rax]
0000000000003968         cmp        dword [rsp+8], 0x2
000000000000396d         sete       dl
0000000000003970         xor        eax, eax
0000000000003972         jmp        sub_3720+56
0000000000003977         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3980:
0000000000003980         mov        edx, 0x7
0000000000003985         mov        ebx, 0x61
000000000000398a         jmp        sub_3820+68
                        ; endp
000000000000398f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3990:
0000000000003990         cmp        dword [rsp+8], 0x2
0000000000003995         sete       dl
                        ; endp

                     loc_3998:
0000000000003998         test       rbp, rbp                                    ; CODE XREF=sub_3720+38, sub_3bb0+35
000000000000399b         jne        loc_374c

00000000000039a1         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_3be0+43
00000000000039a6         and        al, dl
00000000000039a8         je         sub_3720+56

00000000000039ae         mov        rbp, r11
00000000000039b1         mov        dword [rsp+arg_0], 0x2
00000000000039b9         jmp        sub_3c70+1097
                        ; endp
00000000000039be         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_39c0:
00000000000039c0         cmp        dword [rsp+arg_0], 0x2
00000000000039c5         sete       dl
00000000000039c8         xor        r12d, r12d
00000000000039cb         jmp        sub_3990+17
                        ; endp
00000000000039cd         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_39d0:
00000000000039d0         cmp        dword [rsp+arg_0], 0x2
00000000000039d5         mov        ebx, 0x20
00000000000039da         sete       dl
00000000000039dd         jmp        sub_3990+17
                        ; endp
00000000000039df         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_39e0:
00000000000039e0         mov        edx, 0xd
00000000000039e5         mov        ebx, 0x72
00000000000039ea         jmp        loc_3852
00000000000039ef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_39f0:
00000000000039f0         mov        edx, 0xc
00000000000039f5         mov        ebx, 0x66
00000000000039fa         jmp        sub_3820+68
                        ; endp
00000000000039ff         align      512


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a00:
0000000000003a00         mov        edx, 0xb
0000000000003a05         mov        ebx, 0x76
0000000000003a0a         jmp        sub_3820+68
                        ; endp
0000000000003a0f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3a10:
0000000000003a10         mov        edx, 0xa
0000000000003a15         mov        ebx, 0x6e
0000000000003a1a         jmp        sub_3820+50
                        ; endp
0000000000003a1f         align      32

                     loc_3a20:
0000000000003a20         xor        r10d, r10d                                  ; CODE XREF=sub_3a10+135
0000000000003a23         nop        dword [rax+rax]

                     loc_3a28:
0000000000003a28         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
0000000000003a2e         jne        loc_3dd8

0000000000003a34         mov        qword [rsp+0xe8+var_B0], r11
0000000000003a39         mov        byte [rsp+0xe8+var_B8], r8b
0000000000003a3e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000003a43         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003a48         mov        rcx, qword [rax]
0000000000003a4b         movzx      edx, bl
0000000000003a4e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000003a54         movzx      r8d, byte [rsp+0xe8+var_B8]
0000000000003a5a         mov        r11, qword [rsp+0xe8+var_B0]
0000000000003a5f         mov        edi, 0x1
0000000000003a64         movzx      eax, word [rcx+rdx*2]
0000000000003a68         and        ax, 0x4000
0000000000003a6c         setne      r12b
0000000000003a70         sete       al
0000000000003a73         and        al, byte [rsp+0xe8+var_DB]

                     loc_3a77:
0000000000003a77         test       al, al                                      ; CODE XREF=sub_3c70+2221
0000000000003a79         jne        loc_4411

0000000000003a7f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003a84         sete       dl
0000000000003a87         jmp        loc_3758
0000000000003a8c         align      16

                     loc_3a90:
0000000000003a90         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000003a94         cmp        bl, 0x7e
0000000000003a97         ja         loc_3a20

0000000000003a99         lea        rcx, qword [switch_table_9400+552]          ; 0x9628
0000000000003aa0         movzx      edx, bl
0000000000003aa3         movsxd     rax, dword [rcx+rdx*4]
0000000000003aa7         add        rax, rcx
0000000000003aaa         jmp        rax
                        ; endp
0000000000003aac         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_3ab0:
0000000000003ab0         xor        r10d, r10d
0000000000003ab3         cmp        byte [rsp+arg_5], 0x0
0000000000003ab8         jne        loc_38ae

0000000000003abe         nop

                     loc_3ac0:
0000000000003ac0         mov        edx, 0x5c                                   ; CODE XREF=sub_3820+136, sub_3820+147
0000000000003ac5         mov        ebx, 0x5c
0000000000003aca         jmp        sub_3820+68
                        ; endp
0000000000003acf         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3ad0:
0000000000003ad0         mov        edx, 0xc
0000000000003ad5         xor        r10d, r10d
0000000000003ad8         mov        ebx, 0x66
0000000000003add         jmp        sub_3820+68
                        ; endp
0000000000003ae2         nop        word [rax+rax]
0000000000003ae8         mov        edx, 0xa
0000000000003aed         xor        r10d, r10d
0000000000003af0         mov        ebx, 0x6e
0000000000003af5         jmp        sub_3820+50
0000000000003afa         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3b00:
0000000000003b00         mov        ebx, 0x61
0000000000003b05         jmp        sub_3820+176
                        ; endp
0000000000003b0a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3b10:
0000000000003b10         xor        r10d, r10d
                        ; endp

                     loc_3b13:
0000000000003b13         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3940+5
0000000000003b18         sete       dl
0000000000003b1b         cmp        byte [rsp+arg_7], 0x0
0000000000003b20         jne        loc_46ba

0000000000003b26         mov        eax, r8d
0000000000003b29         mov        rcx, r15
0000000000003b2c         xor        eax, 0x1
0000000000003b2f         and        al, dl
0000000000003b31         je         loc_3b60

0000000000003b33         cmp        r13, r15
0000000000003b36         jbe        loc_3b3d

0000000000003b38         mov        byte [r14+r15], 0x27

                     loc_3b3d:
0000000000003b3d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_3b10+38
0000000000003b41         cmp        r13, rcx
0000000000003b44         jbe        loc_3b4c

0000000000003b46         mov        byte [r14+r15+1], 0x24

                     loc_3b4c:
0000000000003b4c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_3b10+52
0000000000003b50         cmp        r13, rcx
0000000000003b53         ja         loc_4189

                     loc_3b59:
0000000000003b59         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_3c70+1311
0000000000003b5d         mov        r8d, eax

                     loc_3b60:
0000000000003b60         cmp        r13, rcx                                    ; CODE XREF=sub_3b10+33
0000000000003b63         jbe        loc_3b6a

0000000000003b65         mov        byte [r14+rcx], 0x5c

                     loc_3b6a:
0000000000003b6a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_3b10+83
0000000000003b6f         lea        r15, qword [rcx+1]
0000000000003b73         je         loc_4179

0000000000003b79         lea        rax, qword [rbp+1]
0000000000003b7d         cmp        rax, r11
0000000000003b80         jae        loc_3b9b

0000000000003b82         mov        rax, qword [rsp+arg_8]
0000000000003b87         movzx      eax, byte [rax+rbp+1]
0000000000003b8c         mov        byte [rsp+arg_20], al
0000000000003b90         sub        eax, 0x30
0000000000003b93         cmp        al, 0x9
0000000000003b95         jbe        loc_43c9

                     loc_3b9b:
0000000000003b9b         mov        eax, r12d                                   ; CODE XREF=sub_3b10+112
0000000000003b9e         mov        ebx, 0x30
0000000000003ba3         xor        r12d, r12d
0000000000003ba6         jmp        sub_3720+56
                        ; endp
0000000000003bab         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_3bb0:
0000000000003bb0         cmp        dword [rsp+arg_0], 0x2
0000000000003bb5         mov        r12d, r10d
0000000000003bb8         sete       dl
0000000000003bbb         xor        r10d, r10d
0000000000003bbe         xor        eax, eax
0000000000003bc0         jmp        sub_3720+56
                        ; endp
0000000000003bc5         nop        dword [rax]
0000000000003bc8         cmp        dword [rsp+8], 0x2
0000000000003bcd         sete       dl
0000000000003bd0         xor        r10d, r10d
0000000000003bd3         jmp        sub_3990+8
0000000000003bd8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3be0:
0000000000003be0         cmp        dword [rsp+8], 0x2
0000000000003be5         sete       dl
0000000000003be8         xor        r10d, r10d
0000000000003beb         xor        r12d, r12d
0000000000003bee         jmp        sub_3990+17
                        ; endp
0000000000003bf3         nop        dword [rax+rax]
0000000000003bf8         cmp        dword [rsp+8], 0x2
0000000000003bfd         mov        r12d, r10d
0000000000003c00         mov        ebx, 0x20
0000000000003c05         sete       dl
0000000000003c08         xor        r10d, r10d
0000000000003c0b         jmp        sub_3990+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3c10:
0000000000003c10         mov        edx, 0xd
0000000000003c15         xor        r10d, r10d
0000000000003c18         mov        ebx, 0x72
0000000000003c1d         jmp        sub_3820+50
                        ; endp
0000000000003c22         nop        word [rax+rax]
0000000000003c28         mov        ebx, 0x76
0000000000003c2d         jmp        sub_3820+176
0000000000003c32         nop        word [rax+rax]
0000000000003c38         mov        edx, 0x9
0000000000003c3d         xor        r10d, r10d
0000000000003c40         mov        ebx, 0x74
0000000000003c45         jmp        sub_3820+50
0000000000003c4a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3c50:
0000000000003c50         mov        ebx, 0x62
0000000000003c55         jmp        sub_3820+176
                        ; endp
0000000000003c5a         nop        word [rax+rax]

                     loc_3c60:
0000000000003c60         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000003c63         jmp        loc_3700
0000000000003c68         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_3c70:
0000000000003c70         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3820+125
0000000000003c75         jne        sub_3c70+2416
                        ; endp

                     loc_3c7b:
0000000000003c7b         add        rbp, 0x1                                    ; CODE XREF=sub_3820+159
0000000000003c7f         mov        eax, r8d
0000000000003c82         xor        r12d, r12d
0000000000003c85         mov        ebx, 0x5c
0000000000003c8a         jmp        sub_3720+124
                        ; endp
0000000000003c8f         align      16

                     loc_3c90:
0000000000003c90         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000003c95         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000003c9a         mov        r12d, r8d
0000000000003c9d         mov        rbp, r11
0000000000003ca0         sete       dl
0000000000003ca3         mov        eax, ebx
0000000000003ca5         test       r15, r15
0000000000003ca8         sete       cl
0000000000003cab         and        eax, edx
0000000000003cad         and        al, cl
0000000000003caf         jne        loc_4716

0000000000003cb5         mov        eax, ebx
0000000000003cb7         xor        eax, 0x1
0000000000003cba         and        dl, al
0000000000003cbc         je         loc_462c

0000000000003cc2         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000003cc7         je         loc_462a

0000000000003ccd         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000003cd2         jne        loc_46cd

0000000000003cd8         test       r13, r13
0000000000003cdb         sete       al
0000000000003cde         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000003ce4         setne      dl
0000000000003ce7         and        al, dl
0000000000003ce9         je         loc_470c

0000000000003cef         mov        r13, qword [rsp+0xe8+var_98]

                     loc_3cf4:
0000000000003cf4         lea        rbx, qword [aLibs+29]                       ; 0x93a5, CODE XREF=sub_3c70+2781
0000000000003cfb         mov        byte [r14], 0x27
0000000000003cff         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000003d07         mov        r15d, 0x1
0000000000003d0d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000003d16         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000003d1b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000003d20         mov        byte [rsp+0xe8+var_6C], al
0000000000003d24         jmp        loc_3603
0000000000003d29         align      16

                     loc_3d30:
0000000000003d30         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_3820+8
0000000000003d35         jne        sub_3c70+2416

0000000000003d3b         test       r13, r13
0000000000003d3e         je         loc_4140

0000000000003d44         xor        edx, edx
0000000000003d46         cmp        qword [rsp+arg_48], 0x0
0000000000003d4c         jne        loc_4140

                     loc_3d52:
0000000000003d52         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_3c70+1284, sub_3c70+2794
0000000000003d57         add        r15, 0x3
0000000000003d5b         xor        eax, eax
0000000000003d5d         mov        byte [rsp+arg_74], r12b
0000000000003d62         xor        r8d, r8d
0000000000003d65         mov        r13, rdx
0000000000003d68         mov        ebx, 0x27
0000000000003d6d         jmp        sub_3720+105
                        ; endp
0000000000003d72         align      8

                     loc_3d78:
0000000000003d78         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_37f0+19
0000000000003d7d         je         loc_3da0

0000000000003d7f         lea        rcx, qword [rbp+2]
0000000000003d83         cmp        rcx, r11
0000000000003d86         jae        loc_3da0

0000000000003d88         mov        rax, qword [rsp+arg_8]
0000000000003d8d         cmp        byte [rax+rbp+1], 0x3f
0000000000003d92         je         loc_4522

0000000000003d98         nop        dword [rax+rax]

                     loc_3da0:
0000000000003da0         xor        edx, edx                                    ; CODE XREF=sub_3c70+269, sub_3c70+278, sub_3c70+2233, sub_3c70+2253
0000000000003da2         xor        r12d, r12d
0000000000003da5         xor        eax, eax
0000000000003da7         mov        ebx, 0x3f
0000000000003dac         jmp        sub_3720+56
                        ; endp
0000000000003db1         align      8

                     loc_3db8:
0000000000003db8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_37f0+10
0000000000003dbd         jne        loc_45e0

0000000000003dc3         xor        r12d, r12d
0000000000003dc6         xor        eax, eax
0000000000003dc8         mov        ebx, 0x3f
0000000000003dcd         jmp        sub_3720+105
                        ; endp
0000000000003dd2         align      8

                     loc_3dd8:
0000000000003dd8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_3a10+30
0000000000003de0         cmp        r11, 0xffffffffffffffff
0000000000003de4         mov        qword [rsp+0xe8+var_48], 0x0
0000000000003df0         mov        qword [rsp+0xe8+var_C0], rax
0000000000003df5         jne        loc_3e24

0000000000003df7         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000003dfc         mov        byte [rsp+0xe8+var_A8], r8b
0000000000003e01         mov        byte [rsp+0xe8+var_B0], r10b
0000000000003e06         mov        qword [rsp+0xe8+var_B8], r9
0000000000003e0b         call       j_strlen                                    ; strlen
0000000000003e10         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000003e16         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000003e1c         mov        r11, rax
0000000000003e1f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_3e24:
0000000000003e24         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_3c70+389
0000000000003e2c         xor        ecx, ecx
0000000000003e2e         mov        byte [rsp+0xe8+var_6A], bl
0000000000003e32         mov        byte [rsp+0xe8+var_6B], r8b
0000000000003e37         mov        rbx, rcx
0000000000003e3a         mov        qword [rsp+0xe8+var_60], r9
0000000000003e42         mov        qword [rsp+0xe8+var_B0], rax
0000000000003e47         mov        byte [rsp+0xe8+var_69], r10b
0000000000003e4c         mov        qword [rsp+0xe8+var_68], r15
0000000000003e54         mov        qword [rsp+0xe8+var_A8], r14
0000000000003e59         mov        qword [rsp+0xe8+var_78], r13
0000000000003e5e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_3e63:
0000000000003e63         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_3c70+623
0000000000003e68         lea        r14, qword [rbp+rbx]
0000000000003e6d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000003e72         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000003e77         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000003e7c         lea        r13, qword [rax+r14]
0000000000003e80         sub        rdx, r14
0000000000003e83         mov        rsi, r13
0000000000003e86         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000003e8b         test       rax, rax
0000000000003e8e         mov        r15, rax
0000000000003e91         je         loc_3ee1

0000000000003e93         cmp        rax, 0xffffffffffffffff
0000000000003e97         je         loc_44b5

0000000000003e9d         cmp        rax, 0xfffffffffffffffe
0000000000003ea1         je         loc_4441

0000000000003ea7         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000003eac         sete       al
0000000000003eaf         and        al, byte [rsp+0xe8+var_D9]
0000000000003eb3         jne        loc_4050

                     loc_3eb9:
0000000000003eb9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_3c70+996, sub_3c70+1031
0000000000003ec0         call       j_iswprint                                  ; iswprint
0000000000003ec5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000003eca         test       eax, eax
0000000000003ecc         mov        eax, 0x0
0000000000003ed1         cmove      r12d, eax
0000000000003ed5         add        rbx, r15
0000000000003ed8         call       j_mbsinit                                   ; mbsinit
0000000000003edd         test       eax, eax
0000000000003edf         je         loc_3e63

                     loc_3ee1:
0000000000003ee1         mov        edx, r12d                                   ; CODE XREF=sub_3c70+545
0000000000003ee4         mov        rdi, rbx
0000000000003ee7         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000003eed         xor        edx, 0x1
0000000000003ef0         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000003ef5         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000003efb         and        dl, byte [rsp+0xe8+var_DB]
0000000000003eff         mov        r15, qword [rsp+0xe8+var_68]
0000000000003f07         mov        r14, qword [rsp+0xe8+var_A8]
0000000000003f0c         mov        r13, qword [rsp+0xe8+var_78]
0000000000003f11         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_3f16:
0000000000003f16         cmp        rdi, 0x1                                    ; CODE XREF=sub_3c70+2112, sub_3c70+2168
0000000000003f1a         jbe        loc_451b

                     loc_3f20:
0000000000003f20         mov        rcx, rdi                                    ; CODE XREF=sub_3c70+1961
0000000000003f23         xor        esi, esi
0000000000003f25         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000003f2b         add        rcx, rbp
0000000000003f2e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000003f33         jmp        loc_3fee
0000000000003f38         align      64

                     loc_3f40:
0000000000003f40         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3c70+896
0000000000003f45         sete       al
0000000000003f48         test       r9b, r9b
0000000000003f4b         jne        loc_4400

0000000000003f51         mov        esi, r8d
0000000000003f54         xor        esi, 0x1
0000000000003f57         and        al, sil
0000000000003f5a         je         loc_3f8b

0000000000003f5c         cmp        r13, r15
0000000000003f5f         jbe        loc_3f66

0000000000003f61         mov        byte [r14+r15], 0x27

                     loc_3f66:
0000000000003f66         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_3c70+751
0000000000003f6a         cmp        r13, rsi
0000000000003f6d         jbe        loc_3f75

0000000000003f6f         mov        byte [r14+r15+1], 0x24

                     loc_3f75:
0000000000003f75         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_3c70+765
0000000000003f79         cmp        r13, rsi
0000000000003f7c         jbe        loc_3f84

0000000000003f7e         mov        byte [r14+r15+2], 0x27

                     loc_3f84:
0000000000003f84         add        r15, 0x3                                    ; CODE XREF=sub_3c70+780
0000000000003f88         mov        r8d, eax

                     loc_3f8b:
0000000000003f8b         cmp        r13, r15                                    ; CODE XREF=sub_3c70+746
0000000000003f8e         jbe        loc_3f95

0000000000003f90         mov        byte [r14+r15], 0x5c

                     loc_3f95:
0000000000003f95         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3c70+798
0000000000003f99         cmp        r13, rax
0000000000003f9c         jbe        loc_3fab

0000000000003f9e         mov        eax, ebx
0000000000003fa0         shr        al, 0x6
0000000000003fa3         add        eax, 0x30
0000000000003fa6         mov        byte [r14+r15+1], al

                     loc_3fab:
0000000000003fab         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3c70+812
0000000000003faf         cmp        r13, rax
0000000000003fb2         jbe        loc_3fc4

0000000000003fb4         mov        eax, ebx
0000000000003fb6         shr        al, 0x3
0000000000003fb9         and        eax, 0x7
0000000000003fbc         add        eax, 0x30
0000000000003fbf         mov        byte [r14+r15+2], al

                     loc_3fc4:
0000000000003fc4         and        ebx, 0x7                                    ; CODE XREF=sub_3c70+834
0000000000003fc7         add        rbp, 0x1
0000000000003fcb         add        r15, 0x3
0000000000003fcf         add        ebx, 0x30
0000000000003fd2         cmp        rbp, rcx
0000000000003fd5         jae        loc_37c0

0000000000003fdb         mov        esi, edx

                     loc_3fdd:
0000000000003fdd         cmp        r13, r15                                    ; CODE XREF=sub_3c70+985, sub_3c70+1969
0000000000003fe0         jbe        loc_3fe6

0000000000003fe2         mov        byte [r14+r15], bl

                     loc_3fe6:
0000000000003fe6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_3c70+880
0000000000003fea         add        r15, 0x1

                     loc_3fee:
0000000000003fee         test       dl, dl                                      ; CODE XREF=sub_3c70+707
0000000000003ff0         jne        loc_3f40

0000000000003ff6         mov        eax, esi
0000000000003ff8         xor        eax, 0x1
0000000000003ffb         and        eax, r8d
0000000000003ffe         test       r10b, r10b
0000000000004001         je         loc_4011

0000000000004003         cmp        r13, r15
0000000000004006         jbe        loc_400d

0000000000004008         mov        byte [r14+r15], 0x5c

                     loc_400d:
000000000000400d         add        r15, 0x1                                    ; CODE XREF=sub_3c70+918

                     loc_4011:
0000000000004011         add        rbp, 0x1                                    ; CODE XREF=sub_3c70+913
0000000000004015         cmp        rbp, rcx
0000000000004018         jae        loc_379c

000000000000401e         test       al, al
0000000000004020         je         loc_441e

0000000000004026         cmp        r13, r15
0000000000004029         jbe        loc_4030

000000000000402b         mov        byte [r14+r15], 0x27

                     loc_4030:
0000000000004030         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3c70+953
0000000000004034         cmp        r13, rax
0000000000004037         jbe        loc_403f

0000000000004039         mov        byte [r14+r15+1], 0x27

                     loc_403f:
000000000000403f         add        r15, 0x2                                    ; CODE XREF=sub_3c70+967
0000000000004043         xor        r10d, r10d
0000000000004046         xor        r8d, r8d
0000000000004049         jmp        loc_3fdd
000000000000404b         align      16

                     loc_4050:
0000000000004050         cmp        r15, 0x1                                    ; CODE XREF=sub_3c70+579
0000000000004054         je         loc_3eb9

000000000000405a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000405f         lea        rcx, qword [rdi+r15]
0000000000004063         lea        rdx, qword [rdi+r14+1]
0000000000004068         lea        r8, qword [rcx+r14]
000000000000406c         jmp        loc_407d
000000000000406e         align      16

                     loc_4070:
0000000000004070         add        rdx, 0x1                                    ; CODE XREF=sub_3c70+1046, sub_3c70+1072
0000000000004074         cmp        r8, rdx
0000000000004077         je         loc_3eb9

                     loc_407d:
000000000000407d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_3c70+1020
0000000000004080         sub        ecx, 0x5b
0000000000004083         cmp        cl, 0x21
0000000000004086         ja         loc_4070

0000000000004088         mov        esi, 0x1
000000000000408d         shl        rsi, cl
0000000000004090         mov        rcx, rsi
0000000000004093         movabs     rsi, 0x20000002b
000000000000409d         test       rcx, rsi
00000000000040a0         je         loc_4070

00000000000040a2         mov        r14, qword [rsp+0xe8+var_A8]
00000000000040a7         mov        r13, qword [rsp+0xe8+var_78]
00000000000040ac         mov        rbp, qword [rsp+0xe8+var_B8]
00000000000040b1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_40b9:
00000000000040b9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3c70+1227, sub_3c70+1948, sub_3c70+2585, sub_3c70+2734
00000000000040be         je         loc_40d0

00000000000040c0         test       al, al
00000000000040c2         mov        eax, 0x4
00000000000040c7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000040cc         mov        dword [rsp+0xe8+var_E0], eax

                     loc_40d0:
00000000000040d0         sub        rsp, 0x8                                    ; CODE XREF=sub_3c70+1102
00000000000040d4         mov        rcx, rbp
00000000000040d7         mov        rsi, r13
00000000000040da         push       qword [rsp+0xf0+var_88]
00000000000040de         push       qword [rsp+0xf8+var_80]
00000000000040e2         mov        rdi, r14
00000000000040e5         push       0x0
00000000000040e7         mov        r9d, dword [rsp+0x108+var_70]
00000000000040ef         mov        r8d, dword [rsp+0x108+var_E0]
00000000000040f4         mov        rdx, qword [rsp+0x108+var_D8]
00000000000040f9         and        r9d, 0xfffffffd
00000000000040fd         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004102         add        rsp, 0x20
0000000000004106         mov        r15, rax

                     loc_4109:
0000000000004109         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_3c70+2549, sub_3c70+2560, sub_3c70+2711
0000000000004111         xor        rbx, qword [fs:0x28]
000000000000411a         mov        rax, r15
000000000000411d         jne        loc_4723

0000000000004123         add        rsp, 0xb8
000000000000412a         pop        rbx
000000000000412b         pop        rbp
000000000000412c         pop        r12
000000000000412e         pop        r13
0000000000004130         pop        r14
0000000000004132         pop        r15
0000000000004134         ret
                        ; endp
0000000000004135         align      8

                     loc_4138:
0000000000004138         mov        rbp, r11                                    ; CODE XREF=sub_3820+194
000000000000413b         jmp        loc_40b9

                     loc_4140:
0000000000004140         cmp        r13, r15                                    ; CODE XREF=sub_3c70+206, sub_3c70+220
0000000000004143         jbe        loc_414a

0000000000004145         mov        byte [r14+r15], 0x27

                     loc_414a:
000000000000414a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3c70+1235
000000000000414e         cmp        r13, rax
0000000000004151         jbe        loc_4159

0000000000004153         mov        byte [r14+r15+1], 0x5c

                     loc_4159:
0000000000004159         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3c70+1249
000000000000415d         cmp        r13, rax
0000000000004160         jbe        loc_4752

0000000000004166         mov        rdx, r13
0000000000004169         mov        byte [r14+r15+2], 0x27
000000000000416f         mov        r13, qword [rsp+arg_48]
0000000000004174         jmp        loc_3d52

                     loc_4179:
0000000000004179         mov        eax, r12d                                   ; CODE XREF=sub_3b10+99
000000000000417c         mov        ebx, 0x30
0000000000004181         xor        r12d, r12d
0000000000004184         jmp        sub_3720+105
                        ; endp

                     loc_4189:
0000000000004189         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_3b10+67
000000000000418f         jmp        loc_3b59

                     loc_4194:
0000000000004194         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000004196         jne        loc_35c3

000000000000419c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_41a1:
00000000000041a1         test       r13, r13                                    ; CODE XREF=sub_3c70+2749
00000000000041a4         jne        loc_473a

00000000000041aa         lea        rax, qword [aLibs+29]                       ; 0x93a5
00000000000041b1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000041ba         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000041bf         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000041c4         xor        r12d, r12d
00000000000041c7         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000041cc         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000041d5         mov        qword [rsp+0xe8+var_A0], rax
00000000000041da         mov        r15d, 0x1
00000000000041e0         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000041e8         jmp        loc_3603
00000000000041ed         align      16

                     loc_41f0:
00000000000041f0         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
00000000000041f2         jne        loc_45ed

00000000000041f8         test       r13, r13
00000000000041fb         je         loc_4426

0000000000004201         mov        byte [r14], 0x22
0000000000004205         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000420a         xor        r12d, r12d
000000000000420d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004212         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_421b:
000000000000421b         lea        rax, qword [aLibs+27]                       ; 0x93a3, CODE XREF=sub_3c70+1996
0000000000004222         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004227         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000422c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004235         mov        r15d, 0x1
000000000000423b         mov        qword [rsp+0xe8+var_A0], rax
0000000000004240         jmp        loc_3603

                     loc_4245:
0000000000004245         lea        rax, qword [aLibs+27]                       ; case 6, 0x93a3, CODE XREF=quotearg_buffer_restyled+145
000000000000424c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004251         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004256         xor        r12d, r12d
0000000000004259         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004262         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004267         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000426c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004275         xor        r15d, r15d
0000000000004278         mov        qword [rsp+0xe8+var_A0], rax
000000000000427d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000004285         jmp        loc_3603

                     loc_428a:
000000000000428a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000428f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004294         xor        r12d, r12d
0000000000004297         mov        qword [rsp+0xe8+var_98], 0x0
00000000000042a0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000042a5         xor        r15d, r15d
00000000000042a8         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000042ad         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000042b6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000042bf         jmp        loc_3603

                     loc_42c4:
00000000000042c4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
00000000000042c9         je         loc_4321

00000000000042cb         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0x93a7
00000000000042d2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042d4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000042d9         call       j_dcgettext                                 ; dcgettext
00000000000042de         mov        rcx, rax
00000000000042e1         mov        qword [rsp+0xe8+var_80], rax
00000000000042e6         lea        rax, qword [aLibs+31]                       ; 0x93a7
00000000000042ed         cmp        rcx, rax
00000000000042f0         je         loc_468e

                     loc_42f6:
00000000000042f6         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0x93a5, CODE XREF=sub_3c70+2607
00000000000042fd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000042ff         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004304         call       j_dcgettext                                 ; dcgettext
0000000000004309         mov        rcx, rax
000000000000430c         mov        qword [rsp+0xe8+var_88], rax
0000000000004311         lea        rax, qword [aLibs+29]                       ; 0x93a5
0000000000004318         cmp        rcx, rax
000000000000431b         je         loc_46a4

                     loc_4321:
0000000000004321         xor        r15d, r15d                                  ; CODE XREF=sub_3c70+1625, sub_3c70+2629
0000000000004324         test       ebx, ebx
0000000000004326         je         loc_44ed

                     loc_432c:
000000000000432c         test       ebx, ebx                                    ; CODE XREF=sub_3c70+2183, sub_3c70+2214
000000000000432e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000004333         setne      byte [rsp+0xe8+var_D9]
0000000000004338         xor        r12d, r12d
000000000000433b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000433e         call       j_strlen                                    ; strlen
0000000000004343         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004348         mov        qword [rsp+0xe8+var_D0], rax
000000000000434d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004352         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004357         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004360         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004365         jmp        loc_3603

                     loc_436a:
000000000000436a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000436f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004374         xor        r12d, r12d
0000000000004377         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004380         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004385         xor        r15d, r15d
0000000000004388         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000438d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000004396         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000439f         jmp        loc_3603

                     loc_43a4:
00000000000043a4         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
00000000000043a9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000043ae         xor        r12d, r12d
00000000000043b1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000043ba         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000043bf         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000043c4         jmp        loc_35e3

                     loc_43c9:
00000000000043c9         cmp        r13, r15                                    ; CODE XREF=sub_3b10+133
00000000000043cc         jbe        loc_43d3

00000000000043ce         mov        byte [r14+r15], 0x30

                     loc_43d3:
00000000000043d3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_3c70+1884
00000000000043d7         cmp        r13, rax
00000000000043da         jbe        loc_43e2

00000000000043dc         mov        byte [r14+rcx+2], 0x30

                     loc_43e2:
00000000000043e2         mov        eax, r12d                                   ; CODE XREF=sub_3c70+1898
00000000000043e5         lea        r15, qword [rcx+3]
00000000000043e9         xor        r12d, r12d
00000000000043ec         mov        ebx, 0x30
00000000000043f1         jmp        sub_3720+56
                        ; endp
00000000000043f6         align      1024

                     loc_4400:
0000000000004400         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_3c70+731
0000000000004405         mov        rbp, r11
0000000000004408         mov        byte [rsp+0xe8+var_DB], bl
000000000000440c         jmp        loc_40b9

                     loc_4411:
0000000000004411         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3a10+105
0000000000004416         xor        r12d, r12d
0000000000004419         jmp        loc_3f20

                     loc_441e:
000000000000441e         xor        r10d, r10d                                  ; CODE XREF=sub_3c70+944
0000000000004421         jmp        loc_3fdd

                     loc_4426:
0000000000004426         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_3c70+1419
000000000000442f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004434         xor        r12d, r12d
0000000000004437         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000443c         jmp        loc_421b

                     loc_4441:
0000000000004441         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_3c70+561
0000000000004446         mov        rsi, r14
0000000000004449         mov        rcx, r13
000000000000444c         mov        rax, rbx
000000000000444f         mov        rdi, rbx
0000000000004452         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000004458         movzx      ebx, byte [rsp+0xe8+var_6A]
000000000000445d         mov        r9, qword [rsp+0xe8+var_60]
0000000000004465         cmp        rsi, r11
0000000000004468         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000446e         mov        r15, qword [rsp+0xe8+var_68]
0000000000004476         mov        r14, qword [rsp+0xe8+var_A8]
000000000000447b         mov        r13, qword [rsp+0xe8+var_78]
0000000000004480         jae        loc_44a8

0000000000004482         cmp        byte [rcx], 0x0
0000000000004485         jne        loc_4497

0000000000004487         jmp        loc_44a8
0000000000004489         align      16

                     loc_4490:
0000000000004490         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_3c70+2099
0000000000004495         je         loc_44a5

                     loc_4497:
0000000000004497         add        rax, 0x1                                    ; CODE XREF=sub_3c70+2069
000000000000449b         lea        rdx, qword [rbp+rax]
00000000000044a0         cmp        r11, rdx
00000000000044a3         ja         loc_4490

                     loc_44a5:
00000000000044a5         mov        rdi, rax                                    ; CODE XREF=sub_3c70+2085

                     loc_44a8:
00000000000044a8         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_3c70+2064, sub_3c70+2071
00000000000044ad         xor        r12d, r12d
00000000000044b0         jmp        loc_3f16

                     loc_44b5:
00000000000044b5         mov        rdi, rbx                                    ; CODE XREF=sub_3c70+551
00000000000044b8         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000044be         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000044c3         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000044c9         mov        r15, qword [rsp+0xe8+var_68]
00000000000044d1         xor        r12d, r12d
00000000000044d4         mov        r14, qword [rsp+0xe8+var_A8]
00000000000044d9         mov        r13, qword [rsp+0xe8+var_78]
00000000000044de         mov        r11, qword [rsp+0xe8+var_B8]
00000000000044e3         movzx      edx, byte [rsp+0xe8+var_DB]
00000000000044e8         jmp        loc_3f16

                     loc_44ed:
00000000000044ed         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_3c70+1718
00000000000044f2         movzx      eax, byte [rdx]
00000000000044f5         test       al, al
00000000000044f7         je         loc_432c

00000000000044fd         nop        dword [rax]

                     loc_4500:
0000000000004500         cmp        r13, r15                                    ; CODE XREF=sub_3c70+2212
0000000000004503         jbe        loc_4509

0000000000004505         mov        byte [r14+r15], al

                     loc_4509:
0000000000004509         add        r15, 0x1                                    ; CODE XREF=sub_3c70+2195
000000000000450d         movzx      eax, byte [rdx+r15]
0000000000004512         test       al, al
0000000000004514         jne        loc_4500

0000000000004516         jmp        loc_432c

                     loc_451b:
000000000000451b         mov        eax, edx                                    ; CODE XREF=sub_3c70+682
000000000000451d         jmp        loc_3a77

                     loc_4522:
0000000000004522         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_3c70+290
0000000000004526         cmp        bl, 0x3e
0000000000004529         ja         loc_3da0

000000000000452f         movabs     rax, 0x7000a38200000000
0000000000004539         bt         rax, rbx
000000000000453d         jae        loc_3da0

0000000000004543         cmp        byte [rsp+arg_7], 0x0
0000000000004548         jne        loc_4732

000000000000454e         cmp        r13, r15
0000000000004551         jbe        loc_4558

0000000000004553         mov        byte [r14+r15], 0x3f

                     loc_4558:
0000000000004558         lea        rax, qword [r15+1]                          ; CODE XREF=sub_3c70+2273
000000000000455c         cmp        r13, rax
000000000000455f         jbe        loc_4567

0000000000004561         mov        byte [r14+r15+1], 0x22

                     loc_4567:
0000000000004567         lea        rax, qword [r15+2]                          ; CODE XREF=sub_3c70+2287
000000000000456b         cmp        r13, rax
000000000000456e         jbe        loc_4576

0000000000004570         mov        byte [r14+r15+2], 0x22

                     loc_4576:
0000000000004576         lea        rax, qword [r15+3]                          ; CODE XREF=sub_3c70+2302
000000000000457a         cmp        r13, rax
000000000000457d         jbe        loc_4585

000000000000457f         mov        byte [r14+r15+3], 0x3f

                     loc_4585:
0000000000004585         add        r15, 0x4                                    ; CODE XREF=sub_3c70+2317
0000000000004589         xor        edx, edx
000000000000458b         xor        r12d, r12d
000000000000458e         xor        eax, eax
0000000000004590         mov        rbp, rcx
0000000000004593         jmp        sub_3720+56
                        ; endp

                     loc_4598:
0000000000004598         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000459a         je         loc_4728

00000000000045a0         lea        rax, qword [aLibs+29]                       ; 0x93a5
00000000000045a7         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000045ac         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000045b1         xor        r12d, r12d
00000000000045b4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000045bd         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000045c2         mov        byte [rsp+0xe8+var_DB], 0x0
00000000000045c7         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000045d0         xor        r15d, r15d
00000000000045d3         mov        qword [rsp+0xe8+var_A0], rax
00000000000045d8         jmp        loc_3603
00000000000045dd         align      32

                     loc_45e0:
00000000000045e0         mov        rbp, r11                                    ; CODE XREF=sub_3c70+333
00000000000045e3         movzx      eax, byte [rsp+arg_7]
00000000000045e8         jmp        sub_3c70+1097
                        ; endp

                     loc_45ed:
00000000000045ed         lea        rax, qword [aLibs+27]                       ; 0x93a3, CODE XREF=sub_3c70+1410
00000000000045f4         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000045f9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000045fe         xor        r12d, r12d
0000000000004601         mov        qword [rsp+0xe8+var_98], 0x0
000000000000460a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000460f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004614         mov        qword [rsp+0xe8+var_D0], 0x1
000000000000461d         xor        r15d, r15d
0000000000004620         mov        qword [rsp+0xe8+var_A0], rax
0000000000004625         jmp        loc_3603

                     loc_462a:
000000000000462a         mov        eax, edx                                    ; CODE XREF=sub_3c70+87

                     loc_462c:
000000000000462c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_3c70+76, sub_3c70+2721
0000000000004631         test       rbx, rbx
0000000000004634         je         loc_4662

0000000000004636         test       al, al
0000000000004638         je         loc_4662

000000000000463a         movzx      ecx, byte [rbx]
000000000000463d         mov        rax, rbx
0000000000004640         test       cl, cl
0000000000004642         je         loc_4662

0000000000004644         mov        rdx, r15
0000000000004647         sub        rax, r15

                     loc_464a:
000000000000464a         cmp        r13, rdx                                    ; CODE XREF=sub_3c70+2541
000000000000464d         jbe        loc_4653

000000000000464f         mov        byte [r14+rdx], cl

                     loc_4653:
0000000000004653         add        rdx, 0x1                                    ; CODE XREF=sub_3c70+2525
0000000000004657         movzx      ecx, byte [rax+rdx]
000000000000465b         test       cl, cl
000000000000465d         jne        loc_464a

000000000000465f         mov        r15, rdx

                     loc_4662:
0000000000004662         cmp        r13, r15                                    ; CODE XREF=sub_3c70+2500, sub_3c70+2504, sub_3c70+2514
0000000000004665         jbe        loc_4109

000000000000466b         mov        byte [r14+r15], 0x0
0000000000004670         jmp        loc_4109

                     loc_4675:
0000000000004675         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000467a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000467f         mov        rbp, r11
0000000000004682         sete       al
0000000000004685         mov        byte [rsp+0xe8+var_DB], bl
0000000000004689         jmp        loc_40b9

                     loc_468e:
000000000000468e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3c70+1664
0000000000004692         mov        rdi, rcx
0000000000004695         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000469a         mov        qword [rsp+0xe8+var_80], rax
000000000000469f         jmp        loc_42f6

                     loc_46a4:
00000000000046a4         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_3c70+1707
00000000000046a8         mov        rdi, rcx
00000000000046ab         call       gettext_quote.part.1                        ; gettext_quote.part.1
00000000000046b0         mov        qword [rsp+0xe8+var_88], rax
00000000000046b5         jmp        loc_4321

                     loc_46ba:
00000000000046ba         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_3b10+16
00000000000046bf         mov        rbp, r11
00000000000046c2         mov        eax, edx
00000000000046c4         mov        byte [rsp+arg_5], bl
00000000000046c8         jmp        sub_3c70+1097
                        ; endp

                     loc_46cd:
00000000000046cd         sub        rsp, 0x8                                    ; CODE XREF=sub_3c70+98
00000000000046d1         mov        r8d, 0x5
00000000000046d7         mov        rcx, r11
00000000000046da         push       qword [rsp+0xf0+var_88]
00000000000046de         push       qword [rsp+0xf8+var_80]
00000000000046e2         mov        rdi, r14
00000000000046e5         push       qword [rsp+0x100+var_C8]
00000000000046e9         mov        r9d, dword [rsp+0x108+var_70]
00000000000046f1         mov        rdx, qword [rsp+0x108+var_D8]
00000000000046f6         mov        rsi, qword [rsp+0x108+var_98]
00000000000046fb         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004700         add        rsp, 0x20
0000000000004704         mov        r15, rax
0000000000004707         jmp        loc_4109

                     loc_470c:
000000000000470c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_3c70+121
0000000000004711         jmp        loc_462c

                     loc_4716:
0000000000004716         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_3c70+63
000000000000471e         jmp        loc_40b9

                     loc_4723:
0000000000004723         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3c70+1197
                        ; endp

                     loc_4728:
0000000000004728         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_3c70+2346
000000000000472d         jmp        loc_41a1

                     loc_4732:
0000000000004732         mov        rbp, r11                                    ; CODE XREF=sub_3c70+2264
0000000000004735         jmp        sub_3c70+1120
                        ; endp

                     loc_473a:
000000000000473a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_3c70+1332
000000000000473f         xor        eax, eax
0000000000004741         xor        r12d, r12d
0000000000004744         mov        qword [rsp+0xe8+var_98], 0x0
000000000000474d         jmp        loc_3cf4

                     loc_4752:
0000000000004752         mov        rdx, r13                                    ; CODE XREF=sub_3c70+1264
0000000000004755         mov        r13, qword [rsp+arg_48]
000000000000475a         jmp        loc_3d52

                     loc_475f:
000000000000475f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000004764         align      16                                          ; End of unwind block (FDE at 0xa4a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000004770         push       r15                                         ; Begin of unwind block (FDE at 0xa518), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000004772         push       r14
0000000000004774         movsxd     r15, edi
0000000000004777         push       r13
0000000000004779         push       r12
000000000000477b         mov        r14, rdx
000000000000477e         push       rbp
000000000000477f         push       rbx
0000000000004780         mov        rbp, rcx
0000000000004783         sub        rsp, 0x28
0000000000004787         mov        qword [rsp+0x58+var_50], rsi
000000000000478c         call       j___errno_location                          ; __errno_location
0000000000004791         mov        r13, rax
0000000000004794         mov        eax, dword [rax]
0000000000004796         test       r15d, r15d
0000000000004799         mov        rbx, qword [slotvec]                        ; slotvec
00000000000047a0         mov        dword [rsp+0x58+var_40], eax
00000000000047a4         js         loc_4911

00000000000047aa         cmp        dword [nslots], r15d                        ; nslots
00000000000047b1         jg         loc_4815

00000000000047b3         cmp        r15d, 0x7fffffff
00000000000047ba         je         loc_4916

00000000000047c0         lea        r12d, dword [r15+1]
00000000000047c4         lea        rax, qword [slotvec0]                       ; slotvec0
00000000000047cb         movsxd     rsi, r12d
00000000000047ce         shl        rsi, 0x4
00000000000047d2         cmp        rbx, rax
00000000000047d5         je         loc_48f0

00000000000047db         mov        rdi, rbx                                    ; argument #1 for method xrealloc
00000000000047de         call       xrealloc                                    ; xrealloc
00000000000047e3         mov        rbx, rax
00000000000047e6         mov        qword [slotvec], rax                        ; slotvec

                     loc_47ed:
00000000000047ed         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
00000000000047f4         mov        edx, r12d
00000000000047f7         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000047f9         sub        edx, edi
00000000000047fb         shl        rdi, 0x4
00000000000047ff         movsxd     rdx, edx
0000000000004802         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000004805         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000004809         call       j_memset                                    ; memset
000000000000480e         mov        dword [nslots], r12d                        ; nslots

                     loc_4815:
0000000000004815         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000004818         shl        r15, 0x4
000000000000481c         sub        rsp, 0x8
0000000000004820         add        rbx, r15
0000000000004823         lea        r15, qword [rbp+8]
0000000000004827         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
000000000000482b         mov        r11, qword [rbx]
000000000000482e         mov        r12, qword [rbx+8]
0000000000004832         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000004835         or         eax, 0x1
0000000000004838         mov        dword [rsp+0x60+var_3C], eax
000000000000483c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000483f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000004842         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000004845         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000004847         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
000000000000484a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
000000000000484f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000004852         mov        qword [rsp+0x78+var_48], r11
0000000000004857         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000485c         add        rsp, 0x20
0000000000004860         mov        r11, qword [rsp+0x58+var_48]
0000000000004865         cmp        r11, rax
0000000000004868         ja         loc_48d1

000000000000486a         lea        rsi, qword [rax+1]
000000000000486e         lea        rax, qword [slot0]                          ; slot0
0000000000004875         cmp        r12, rax
0000000000004878         mov        qword [rbx], rsi
000000000000487b         je         loc_488f

000000000000487d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004880         mov        qword [rsp+0x58+var_48], rsi
0000000000004885         call       j_free                                      ; free
000000000000488a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_488f:
000000000000488f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000004892         mov        qword [rsp+0x58+var_48], rsi
0000000000004897         call       xmalloc                                     ; xmalloc
000000000000489c         sub        rsp, 0x8
00000000000048a0         mov        qword [rbx+8], rax
00000000000048a4         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000048a8         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000048ab         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000048ae         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000048b1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000048b3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
00000000000048b8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
00000000000048bb         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000048c0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
00000000000048c5         mov        r12, rax
00000000000048c8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000048cd         add        rsp, 0x20

                     loc_48d1:
00000000000048d1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
00000000000048d5         mov        dword [r13], eax
00000000000048d9         add        rsp, 0x28
00000000000048dd         mov        rax, r12
00000000000048e0         pop        rbx
00000000000048e1         pop        rbp
00000000000048e2         pop        r12
00000000000048e4         pop        r13
00000000000048e6         pop        r14
00000000000048e8         pop        r15
00000000000048ea         ret
                        ; endp
00000000000048eb         align      16

                     loc_48f0:
00000000000048f0         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
00000000000048f2         call       xrealloc                                    ; xrealloc
00000000000048f7         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
00000000000048ff         mov        rbx, rax
0000000000004902         mov        qword [slotvec], rax                        ; slotvec
0000000000004909         movups     xmmword [rax], xmm0
000000000000490c         jmp        loc_47ed

                     loc_4911:
0000000000004911         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_4916:
0000000000004916         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_491b:
000000000000491b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xa518)
                     clone_quoting_options:
0000000000004920         push       r12                                         ; Begin of unwind block (FDE at 0xa584)
0000000000004922         push       rbp
0000000000004923         push       rbx
0000000000004924         mov        rbx, rdi
0000000000004927         call       j___errno_location                          ; __errno_location
000000000000492c         mov        r12d, dword [rax]
000000000000492f         mov        rbp, rax
0000000000004932         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004939         test       rbx, rbx
000000000000493c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000004941         cmove      rbx, rax
0000000000004945         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000004948         call       xmemdup                                     ; xmemdup
000000000000494d         mov        dword [rbp], r12d
0000000000004951         pop        rbx
0000000000004952         pop        rbp
0000000000004953         pop        r12
0000000000004955         ret
                        ; endp
0000000000004956         align      32                                          ; End of unwind block (FDE at 0xa584)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000004960         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa5b0), default_quoting_options
0000000000004967         test       rdi, rdi
000000000000496a         cmove      rdi, rax
000000000000496e         mov        eax, dword [rdi]
0000000000004970         ret
                        ; endp
0000000000004971         align      128                                         ; End of unwind block (FDE at 0xa5b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000004980         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa5c4), default_quoting_options
0000000000004987         test       rdi, rdi
000000000000498a         cmove      rdi, rax
000000000000498e         mov        dword [rdi], esi
0000000000004990         ret
                        ; endp
0000000000004991         align      32                                          ; End of unwind block (FDE at 0xa5c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
00000000000049a0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa5d8), default_quoting_options
00000000000049a7         test       rdi, rdi
00000000000049aa         mov        ecx, esi
00000000000049ac         cmove      rdi, rax
00000000000049b0         mov        eax, esi
00000000000049b2         and        ecx, 0x1f
00000000000049b5         shr        al, 0x5
00000000000049b8         movzx      eax, al
00000000000049bb         lea        rdi, qword [rdi+rax*4+8]
00000000000049c0         mov        esi, dword [rdi]
00000000000049c2         mov        eax, esi
00000000000049c4         shr        eax, cl
00000000000049c6         xor        edx, eax
00000000000049c8         and        eax, 0x1
00000000000049cb         and        edx, 0x1
00000000000049ce         shl        edx, cl
00000000000049d0         xor        edx, esi
00000000000049d2         mov        dword [rdi], edx
00000000000049d4         ret
                        ; endp
00000000000049d5         align      32                                          ; End of unwind block (FDE at 0xa5d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
00000000000049e0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa5ec), default_quoting_options
00000000000049e7         test       rdi, rdi
00000000000049ea         cmove      rdi, rax
00000000000049ee         mov        eax, dword [rdi+4]
00000000000049f1         mov        dword [rdi+4], esi
00000000000049f4         ret
                        ; endp
00000000000049f5         align      512                                         ; End of unwind block (FDE at 0xa5ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000004a00         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa600), default_quoting_options
0000000000004a07         test       rdi, rdi
0000000000004a0a         cmove      rdi, rax
0000000000004a0e         test       rsi, rsi
0000000000004a11         mov        dword [rdi], 0xa
0000000000004a17         je         loc_4a27

0000000000004a19         test       rdx, rdx
0000000000004a1c         je         loc_4a27

0000000000004a1e         mov        qword [rdi+0x28], rsi
0000000000004a22         mov        qword [rdi+0x30], rdx
0000000000004a26         ret
                        ; endp

                     loc_4a27:
0000000000004a27         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
0000000000004a2b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000004a30         push       r15                                         ; End of unwind block (FDE at 0xa600), Begin of unwind block (FDE at 0xa614)
0000000000004a32         push       r14
0000000000004a34         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004a3b         push       r13
0000000000004a3d         push       r12
0000000000004a3f         mov        r13, rdi
0000000000004a42         push       rbp
0000000000004a43         push       rbx
0000000000004a44         mov        rbx, r8
0000000000004a47         mov        r14, rsi
0000000000004a4a         mov        r15, rdx
0000000000004a4d         sub        rsp, 0x18
0000000000004a51         test       r8, r8
0000000000004a54         cmove      rbx, rax
0000000000004a58         mov        qword [rsp+0x48+var_40], rcx
0000000000004a5d         call       j___errno_location                          ; __errno_location
0000000000004a62         mov        r12d, dword [rax]
0000000000004a65         mov        rbp, rax
0000000000004a68         lea        rax, qword [rbx+8]
0000000000004a6c         sub        rsp, 0x8
0000000000004a70         mov        r9d, dword [rbx+4]
0000000000004a74         push       qword [rbx+0x30]
0000000000004a77         mov        r8d, dword [rbx]
0000000000004a7a         push       qword [rbx+0x28]
0000000000004a7d         mov        rdx, r15
0000000000004a80         push       rax
0000000000004a81         mov        rcx, qword [rsp+0x68+var_40]
0000000000004a86         mov        rsi, r14
0000000000004a89         mov        rdi, r13
0000000000004a8c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004a91         mov        dword [rbp], r12d
0000000000004a95         add        rsp, 0x38
0000000000004a99         pop        rbx
0000000000004a9a         pop        rbp
0000000000004a9b         pop        r12
0000000000004a9d         pop        r13
0000000000004a9f         pop        r14
0000000000004aa1         pop        r15
0000000000004aa3         ret
                        ; endp
0000000000004aa4         align      16                                          ; End of unwind block (FDE at 0xa614)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000004ab0         push       r15                                         ; Begin of unwind block (FDE at 0xa668), CODE XREF=quotearg_alloc+5
0000000000004ab2         push       r14
0000000000004ab4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000004abb         push       r13
0000000000004abd         push       r12
0000000000004abf         mov        r12, rdx
0000000000004ac2         push       rbp
0000000000004ac3         push       rbx
0000000000004ac4         mov        rbx, rcx
0000000000004ac7         mov        r14, rdi
0000000000004aca         mov        r15, rsi
0000000000004acd         sub        rsp, 0x38
0000000000004ad1         test       rcx, rcx
0000000000004ad4         cmove      rbx, rax
0000000000004ad8         xor        ebp, ebp
0000000000004ada         call       j___errno_location                          ; __errno_location
0000000000004adf         test       r12, r12
0000000000004ae2         mov        r13, rax
0000000000004ae5         mov        eax, dword [rax]
0000000000004ae7         sete       bpl
0000000000004aeb         or         ebp, dword [rbx+4]
0000000000004aee         lea        r10, qword [rbx+8]
0000000000004af2         sub        rsp, 0x8
0000000000004af6         mov        r8d, dword [rbx]
0000000000004af9         mov        rcx, r15
0000000000004afc         mov        dword [rsp+0x70+var_5C], eax
0000000000004b00         push       qword [rbx+0x30]
0000000000004b03         mov        rdx, r14
0000000000004b06         push       qword [rbx+0x28]
0000000000004b09         push       r10
0000000000004b0b         xor        esi, esi
0000000000004b0d         mov        r9d, ebp
0000000000004b10         xor        edi, edi
0000000000004b12         mov        qword [rsp+0x88+var_48], r10
0000000000004b17         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004b1c         lea        rsi, qword [rax+1]
0000000000004b20         mov        qword [rsp+0x88+var_40], rax
0000000000004b25         add        rsp, 0x20
0000000000004b29         mov        rdi, rsi
0000000000004b2c         mov        qword [rsp+0x68+var_50], rsi
0000000000004b31         call       xmalloc                                     ; xmalloc
0000000000004b36         mov        qword [rsp+0x68+var_58], rax
0000000000004b3b         sub        rsp, 0x8
0000000000004b3f         push       qword [rbx+0x30]
0000000000004b42         push       qword [rbx+0x28]
0000000000004b45         mov        r10, qword [rsp+0x80+var_48]
0000000000004b4a         mov        r9d, ebp
0000000000004b4d         mov        r8d, dword [rbx]
0000000000004b50         mov        rcx, r15
0000000000004b53         mov        rdx, r14
0000000000004b56         mov        rdi, rax
0000000000004b59         push       r10
0000000000004b5b         mov        rsi, qword [rsp+0x88+var_50]
0000000000004b60         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004b65         mov        eax, dword [rsp+0x88+var_5C]
0000000000004b69         add        rsp, 0x20
0000000000004b6d         test       r12, r12
0000000000004b70         mov        dword [r13], eax
0000000000004b74         je         loc_4b7f

0000000000004b76         mov        r11, qword [rsp+0x68+var_40]
0000000000004b7b         mov        qword [r12], r11

                     loc_4b7f:
0000000000004b7f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000004b84         add        rsp, 0x38
0000000000004b88         pop        rbx
0000000000004b89         pop        rbp
0000000000004b8a         pop        r12
0000000000004b8c         pop        r13
0000000000004b8e         pop        r14
0000000000004b90         pop        r15
0000000000004b92         ret
                        ; endp
0000000000004b93         align      32                                          ; End of unwind block (FDE at 0xa668)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000004ba0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xa6d4)
0000000000004ba3         xor        edx, edx
0000000000004ba5         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
0000000000004baa         align      16                                          ; End of unwind block (FDE at 0xa6d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000004bb0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xa6e8), nslots
0000000000004bb6         push       r12
0000000000004bb8         mov        r12, qword [slotvec]                        ; slotvec
0000000000004bbf         push       rbp
0000000000004bc0         push       rbx
0000000000004bc1         cmp        eax, 0x1
0000000000004bc4         jle        loc_4bf1

0000000000004bc6         sub        eax, 0x2
0000000000004bc9         lea        rbx, qword [r12+0x18]
0000000000004bce         shl        rax, 0x4
0000000000004bd2         lea        rbp, qword [r12+rax+0x28]
0000000000004bd7         nop        word [rax+rax]

                     loc_4be0:
0000000000004be0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
0000000000004be3         add        rbx, 0x10
0000000000004be7         call       j_free                                      ; free
0000000000004bec         cmp        rbx, rbp
0000000000004bef         jne        loc_4be0

                     loc_4bf1:
0000000000004bf1         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000004bf6         lea        rbx, qword [slot0]                          ; slot0
0000000000004bfd         cmp        rdi, rbx
0000000000004c00         je         loc_4c19

0000000000004c02         call       j_free                                      ; free
0000000000004c07         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000004c12         mov        qword [slotvec0+8], rbx                     ; 0x20c078

                     loc_4c19:
0000000000004c19         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000004c20         cmp        r12, rbx
0000000000004c23         je         loc_4c34

0000000000004c25         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000004c28         call       j_free                                      ; free
0000000000004c2d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_4c34:
0000000000004c34         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000004c35         mov        dword [nslots], 0x1                         ; nslots
0000000000004c3f         pop        rbp
0000000000004c40         pop        r12
0000000000004c42         ret
                        ; endp
0000000000004c43         align      16                                          ; End of unwind block (FDE at 0xa6e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000004c50         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa714), default_quoting_options
0000000000004c57         mov        rdx, 0xffffffffffffffff
0000000000004c5e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004c63         align      16                                          ; End of unwind block (FDE at 0xa714)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000004c70         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa728), default_quoting_options
0000000000004c77         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004c7c         align      128                                         ; End of unwind block (FDE at 0xa728)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000004c80         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa73c), default_quoting_options
0000000000004c87         mov        rsi, rdi
0000000000004c8a         mov        rdx, 0xffffffffffffffff
0000000000004c91         xor        edi, edi
0000000000004c93         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004c98         align      32                                          ; End of unwind block (FDE at 0xa73c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000004ca0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xa750), default_quoting_options
0000000000004ca7         mov        rdx, rsi
0000000000004caa         mov        rsi, rdi
0000000000004cad         xor        edi, edi
0000000000004caf         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000004cb4         align      64                                          ; End of unwind block (FDE at 0xa750)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
0000000000004cc0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa764)
0000000000004cc4         mov        rax, rdx
0000000000004cc7         mov        rdx, qword [fs:0x28]
0000000000004cd0         mov        qword [rsp+0x48+var_10], rdx
0000000000004cd5         xor        edx, edx
0000000000004cd7         cmp        esi, 0xa
0000000000004cda         je         loc_4d44

0000000000004cdc         mov        dword [rsp+0x48+var_48], esi
0000000000004cdf         mov        rcx, rsp
0000000000004ce2         mov        rdx, 0xffffffffffffffff
0000000000004ce9         mov        rsi, rax
0000000000004cec         mov        qword [rsp+0x48+var_44], 0x0
0000000000004cf5         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004cfe         mov        qword [rsp+0x48+var_34], 0x0
0000000000004d07         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004d10         mov        qword [rsp+0x48+var_24], 0x0
0000000000004d19         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004d22         mov        dword [rsp+0x48+var_14], 0x0
0000000000004d2a         call       quotearg_n_options                          ; quotearg_n_options
0000000000004d2f         mov        rcx, qword [rsp+0x48+var_10]
0000000000004d34         xor        rcx, qword [fs:0x28]
0000000000004d3d         jne        loc_4d49

0000000000004d3f         add        rsp, 0x48
0000000000004d43         ret
                        ; endp

                     loc_4d44:
0000000000004d44         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_4d49:
0000000000004d49         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000004d4e         align      16                                          ; End of unwind block (FDE at 0xa764)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000004d50         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa780), CODE XREF=quotearg_style_mem+10
0000000000004d54         mov        rax, rdx
0000000000004d57         mov        rdx, rcx
0000000000004d5a         mov        rcx, qword [fs:0x28]
0000000000004d63         mov        qword [rsp+0x48+var_10], rcx
0000000000004d68         xor        ecx, ecx
0000000000004d6a         cmp        esi, 0xa
0000000000004d6d         je         loc_4dd0

0000000000004d6f         mov        dword [rsp+0x48+var_48], esi
0000000000004d72         mov        rcx, rsp
0000000000004d75         mov        rsi, rax
0000000000004d78         mov        qword [rsp+0x48+var_44], 0x0
0000000000004d81         mov        qword [rsp+0x48+var_3C], 0x0
0000000000004d8a         mov        qword [rsp+0x48+var_34], 0x0
0000000000004d93         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004d9c         mov        qword [rsp+0x48+var_24], 0x0
0000000000004da5         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004dae         mov        dword [rsp+0x48+var_14], 0x0
0000000000004db6         call       quotearg_n_options                          ; quotearg_n_options
0000000000004dbb         mov        rdx, qword [rsp+0x48+var_10]
0000000000004dc0         xor        rdx, qword [fs:0x28]
0000000000004dc9         jne        loc_4dd5

0000000000004dcb         add        rsp, 0x48
0000000000004dcf         ret
                        ; endp

                     loc_4dd0:
0000000000004dd0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_4dd5:
0000000000004dd5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000004dda         align      32                                          ; End of unwind block (FDE at 0xa780)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
0000000000004de0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xa79c)
0000000000004de3         mov        esi, edi
0000000000004de5         xor        edi, edi
0000000000004de7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
0000000000004dec         align      16                                          ; End of unwind block (FDE at 0xa79c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000004df0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xa7b0)
0000000000004df3         mov        rdx, rsi
0000000000004df6         mov        esi, edi
0000000000004df8         xor        edi, edi
0000000000004dfa         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000004dff         align      512                                         ; End of unwind block (FDE at 0xa7b0)

                     quotearg_char_mem:
0000000000004e00         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa7c4), CODE XREF=quotearg_char+11
0000000000004e04         mov        ecx, edx
0000000000004e06         mov        rax, qword [fs:0x28]
0000000000004e0f         mov        qword [rsp+0x48+var_10], rax
0000000000004e14         xor        eax, eax
0000000000004e16         mov        rax, qword [qword_20c210]                   ; qword_20c210
0000000000004e1d         mov        r8, rsp
0000000000004e20         and        ecx, 0x1f
0000000000004e23         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004e2b         mov        qword [rsp+0x48+var_18], rax
0000000000004e30         mov        eax, edx
0000000000004e32         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004e36         shr        al, 0x5
0000000000004e39         movzx      eax, al
0000000000004e3c         lea        r9, qword [r8+rax*4+8]
0000000000004e41         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20c1f0
0000000000004e49         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004e4e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20c200
0000000000004e56         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004e5b         mov        edx, dword [r9]
0000000000004e5e         mov        eax, edx
0000000000004e60         shr        eax, cl
0000000000004e62         not        eax
0000000000004e64         and        eax, 0x1
0000000000004e67         shl        eax, cl
0000000000004e69         mov        rcx, r8
0000000000004e6c         xor        eax, edx
0000000000004e6e         mov        rdx, rsi
0000000000004e71         mov        rsi, rdi
0000000000004e74         mov        dword [r9], eax
0000000000004e77         xor        edi, edi
0000000000004e79         call       quotearg_n_options                          ; quotearg_n_options
0000000000004e7e         mov        rsi, qword [rsp+0x48+var_10]
0000000000004e83         xor        rsi, qword [fs:0x28]
0000000000004e8c         jne        loc_4e93

0000000000004e8e         add        rsp, 0x48
0000000000004e92         ret
                        ; endp

                     loc_4e93:
0000000000004e93         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000004e98         align      32                                          ; End of unwind block (FDE at 0xa7c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000004ea0         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xa7e0)
0000000000004ea4         mov        rsi, 0xffffffffffffffff
0000000000004eab         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000004eb0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xa7e0), Begin of unwind block (FDE at 0xa7f4), CODE XREF=close_stdout+101
0000000000004eb5         mov        rsi, 0xffffffffffffffff
0000000000004ebc         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004ec1         align      16                                          ; End of unwind block (FDE at 0xa7f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000004ed0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xa808)
0000000000004ed5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000004eda         align      32                                          ; End of unwind block (FDE at 0xa808)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000004ee0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa81c)
0000000000004ee4         mov        rax, rdx
0000000000004ee7         mov        rdx, qword [fs:0x28]
0000000000004ef0         mov        qword [rsp+0x48+var_10], rdx
0000000000004ef5         xor        edx, edx
0000000000004ef7         cmp        esi, 0xa
0000000000004efa         je         loc_4f64

0000000000004efc         mov        dword [rsp+0x48+var_48], esi
0000000000004eff         mov        rcx, rsp
0000000000004f02         mov        rdx, 0xffffffffffffffff
0000000000004f09         mov        rsi, rax
0000000000004f0c         mov        qword [rsp+0x48+var_44], 0x0
0000000000004f15         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000004f1e         mov        qword [rsp+0x48+var_34], 0x0
0000000000004f27         mov        qword [rsp+0x48+var_2C], 0x0
0000000000004f30         mov        qword [rsp+0x48+var_24], 0x0
0000000000004f39         mov        qword [rsp+0x48+var_1C], 0x0
0000000000004f42         mov        dword [rsp+0x48+var_14], 0x0
0000000000004f4a         call       quotearg_n_options                          ; quotearg_n_options
0000000000004f4f         mov        rcx, qword [rsp+0x48+var_10]
0000000000004f54         xor        rcx, qword [fs:0x28]
0000000000004f5d         jne        loc_4f69

0000000000004f5f         add        rsp, 0x48
0000000000004f63         ret
                        ; endp

                     loc_4f64:
0000000000004f64         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_4f69:
0000000000004f69         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000004f6e         align      16                                          ; End of unwind block (FDE at 0xa81c)

                     quotearg_n_custom_mem:
0000000000004f70         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xa838), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000004f74         mov        r9, rcx
0000000000004f77         mov        rcx, qword [qword_20c210]                   ; qword_20c210
0000000000004f7e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000004f86         mov        rax, qword [fs:0x28]
0000000000004f8f         mov        qword [rsp+0x48+var_10], rax
0000000000004f94         xor        eax, eax
0000000000004f96         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000004f9a         test       rsi, rsi
0000000000004f9d         mov        qword [rsp+0x48+var_18], rcx
0000000000004fa2         mov        dword [rsp+0x48+var_48], 0xa
0000000000004fa9         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20c1f0
0000000000004fb1         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000004fb6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20c200
0000000000004fbe         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000004fc3         je         loc_4ff7

0000000000004fc5         test       rdx, rdx
0000000000004fc8         je         loc_4ff7

0000000000004fca         mov        qword [rsp+0x48+var_20], rsi
0000000000004fcf         mov        qword [rsp+0x48+var_18], rdx
0000000000004fd4         mov        rcx, rsp
0000000000004fd7         mov        rdx, r8
0000000000004fda         mov        rsi, r9
0000000000004fdd         call       quotearg_n_options                          ; quotearg_n_options
0000000000004fe2         mov        rdi, qword [rsp+0x48+var_10]
0000000000004fe7         xor        rdi, qword [fs:0x28]
0000000000004ff0         jne        loc_4ffc

0000000000004ff2         add        rsp, 0x48
0000000000004ff6         ret
                        ; endp

                     loc_4ff7:
0000000000004ff7         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_4ffc:
0000000000004ffc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000005001         align      16                                          ; End of unwind block (FDE at 0xa838)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom:
0000000000005010         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xa854)
0000000000005017         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
000000000000501c         align      32                                          ; End of unwind block (FDE at 0xa854)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000005020         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xa868)
0000000000005023         mov        r8, 0xffffffffffffffff
000000000000502a         mov        rdx, rsi
000000000000502d         mov        rsi, rdi
0000000000005030         xor        edi, edi
0000000000005032         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005037         align      64                                          ; End of unwind block (FDE at 0xa868)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000005040         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xa87c)
0000000000005043         mov        rcx, rdx
0000000000005046         mov        rdx, rsi
0000000000005049         mov        rsi, rdi
000000000000504c         xor        edi, edi
000000000000504e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005053         align      32                                          ; End of unwind block (FDE at 0xa87c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000005060         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa890), quote_quoting_options
0000000000005067         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000506c         align      16                                          ; End of unwind block (FDE at 0xa890)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000005070         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa8a4), quote_quoting_options
0000000000005077         mov        rdx, rsi
000000000000507a         mov        rsi, rdi
000000000000507d         xor        edi, edi
000000000000507f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005084         align      16                                          ; End of unwind block (FDE at 0xa8a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000005090         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa8b8), quote_quoting_options, CODE XREF=or+878, or+895
0000000000005097         mov        rdx, 0xffffffffffffffff
000000000000509e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000050a3         align      16                                          ; End of unwind block (FDE at 0xa8b8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
00000000000050b0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xa8cc), quote_quoting_options, CODE XREF=main+362, main+413, find_int+172, beyond+20, binary_operator+1069, unary_operator+1414, or+945, three_arguments+283
00000000000050b7         mov        rsi, rdi
00000000000050ba         mov        rdx, 0xffffffffffffffff
00000000000050c1         xor        edi, edi
00000000000050c3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000050c8         align      16                                          ; End of unwind block (FDE at 0xa8cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     strintcmp:
00000000000050d0         movzx      r8d, byte [rdi]                             ; Begin of unwind block (FDE at 0xa8e4), CODE XREF=binary_operator+857
00000000000050d4         movzx      edx, byte [rsi]
00000000000050d7         cmp        r8b, 0x2d
00000000000050db         je         loc_5180

00000000000050e1         cmp        dl, 0x2d
00000000000050e4         je         loc_51c8

00000000000050ea         nop        word [rax+rax]

                     loc_50f0:
00000000000050f0         cmp        r8b, 0x30                                   ; CODE XREF=strintcmp+448
00000000000050f4         je         loc_5288

                     loc_50fa:
00000000000050fa         cmp        dl, 0x30                                    ; CODE XREF=strintcmp+431
00000000000050fd         je         loc_5278

0000000000005103         movzx      eax, dl
0000000000005106         cmp        dl, r8b
0000000000005109         lea        ecx, dword [rax-0x30]
000000000000510c         jne        loc_52a8

0000000000005112         cmp        ecx, 0x9
0000000000005115         ja         loc_5340

                     loc_511b:
000000000000511b         add        rdi, 0x1                                    ; CODE XREF=strintcmp+107
000000000000511f         add        rsi, 0x1
0000000000005123         movzx      eax, byte [rsi]
0000000000005126         movzx      r8d, byte [rdi]
000000000000512a         mov        edx, eax
000000000000512c         lea        ecx, dword [rax-0x30]
000000000000512f         cmp        r8b, al
0000000000005132         jne        loc_52a8

0000000000005138         cmp        ecx, 0x9
000000000000513b         jbe        loc_511b

000000000000513d         movzx      edx, r8b

                     loc_5141:
0000000000005141         xor        r9d, r9d                                    ; CODE XREF=strintcmp+482
0000000000005144         cmp        ecx, 0x9
0000000000005147         ja         loc_5340

000000000000514d         nop        dword [rax]

                     loc_5150:
0000000000005150         xor        ecx, ecx                                    ; CODE XREF=strintcmp+517
0000000000005152         nop        word [rax+rax]

                     loc_5158:
0000000000005158         movzx      eax, byte [rsi+rcx+1]                       ; CODE XREF=strintcmp+151
000000000000515d         add        rcx, 0x1
0000000000005161         sub        eax, 0x30
0000000000005164         cmp        eax, 0x9
0000000000005167         jbe        loc_5158

0000000000005169         cmp        r9, rcx
000000000000516c         je         loc_5343

0000000000005172         sbb        eax, eax
0000000000005174         or         eax, 0x1
0000000000005177         ret
                        ; endp
0000000000005178         align      128

                     loc_5180:
0000000000005180         add        rdi, 0x1                                    ; CODE XREF=strintcmp+11, strintcmp+186
0000000000005184         movzx      ecx, byte [rdi]
0000000000005187         cmp        cl, 0x30
000000000000518a         je         loc_5180

000000000000518c         movzx      eax, cl
000000000000518f         cmp        dl, 0x2d
0000000000005192         lea        r8d, dword [rax-0x30]
0000000000005196         je         loc_5200

0000000000005198         cmp        r8d, 0x9
000000000000519c         jbe        loc_536e

00000000000051a2         nop        word [rax+rax]

                     loc_51a8:
00000000000051a8         cmp        dl, 0x30                                    ; CODE XREF=strintcmp+463
00000000000051ab         je         loc_5298

00000000000051b1         sub        edx, 0x30
00000000000051b4         xor        r9d, r9d
00000000000051b7         cmp        edx, 0x9
00000000000051ba         setbe      r9b
00000000000051be         mov        eax, r9d
00000000000051c1         neg        eax
00000000000051c3         ret
                        ; endp
00000000000051c4         align      8

                     loc_51c8:
00000000000051c8         add        rsi, 0x1                                    ; CODE XREF=strintcmp+20, strintcmp+257
00000000000051cc         movzx      eax, byte [rsi]
00000000000051cf         cmp        al, 0x30
00000000000051d1         je         loc_51c8

00000000000051d3         lea        edx, dword [rax-0x30]
00000000000051d6         mov        eax, 0x1
00000000000051db         cmp        edx, 0x9
00000000000051de         jbe        loc_52e3

                     loc_51e4:
00000000000051e4         cmp        r8b, 0x30                                   ; CODE XREF=strintcmp+544
00000000000051e8         je         loc_52e8

00000000000051ee         sub        r8d, 0x30
00000000000051f2         xor        eax, eax
00000000000051f4         cmp        r8d, 0x9
00000000000051f8         setbe      al
00000000000051fb         ret
                        ; endp
00000000000051fc         align      512

                     loc_5200:
0000000000005200         add        rsi, 0x1                                    ; CODE XREF=strintcmp+198, strintcmp+316
0000000000005204         movzx      r9d, byte [rsi]
0000000000005208         cmp        r9b, 0x30
000000000000520c         je         loc_5200

000000000000520e         cmp        cl, r9b
0000000000005211         jne        loc_5354

0000000000005217         cmp        r8d, 0x9
000000000000521b         lea        edx, dword [rax-0x30]
000000000000521e         ja         loc_5241

                     loc_5220:
0000000000005220         add        rdi, 0x1                                    ; CODE XREF=strintcmp+367
0000000000005224         add        rsi, 0x1
0000000000005228         movzx      eax, byte [rsi]
000000000000522b         movzx      ecx, byte [rdi]
000000000000522e         mov        r9d, eax
0000000000005231         lea        edx, dword [rax-0x30]
0000000000005234         cmp        cl, al
0000000000005236         jne        loc_52f8

000000000000523c         cmp        edx, 0x9
000000000000523f         jbe        loc_5220

                     loc_5241:
0000000000005241         xor        r10d, r10d                                  ; CODE XREF=strintcmp+334, strintcmp+564
0000000000005244         cmp        edx, 0x9
0000000000005247         ja         loc_5340

                     loc_524d:
000000000000524d         xor        edx, edx                                    ; CODE XREF=strintcmp+597
000000000000524f         nop

                     loc_5250:
0000000000005250         movzx      eax, byte [rsi+rdx+1]                       ; CODE XREF=strintcmp+399
0000000000005255         add        rdx, 0x1
0000000000005259         sub        eax, 0x30
000000000000525c         cmp        eax, 0x9
000000000000525f         jbe        loc_5250

0000000000005261         cmp        r10, rdx
0000000000005264         je         loc_535d

000000000000526a         sbb        eax, eax
000000000000526c         and        eax, 0x2
000000000000526f         sub        eax, 0x1
0000000000005272         ret
                        ; endp
0000000000005273         align      8

                     loc_5278:
0000000000005278         add        rsi, 0x1                                    ; CODE XREF=strintcmp+45
000000000000527c         movzx      edx, byte [rsi]
000000000000527f         jmp        loc_50fa
0000000000005284         align      8

                     loc_5288:
0000000000005288         add        rdi, 0x1                                    ; CODE XREF=strintcmp+36
000000000000528c         movzx      r8d, byte [rdi]
0000000000005290         jmp        loc_50f0
0000000000005295         align      8

                     loc_5298:
0000000000005298         add        rsi, 0x1                                    ; CODE XREF=strintcmp+219
000000000000529c         movzx      edx, byte [rsi]
000000000000529f         jmp        loc_51a8
00000000000052a4         align      8

                     loc_52a8:
00000000000052a8         movzx      eax, r8b                                    ; CODE XREF=strintcmp+60, strintcmp+98
00000000000052ac         sub        eax, 0x30
00000000000052af         cmp        eax, 0x9
00000000000052b2         ja         loc_5141

00000000000052b8         xor        r9d, r9d
00000000000052bb         nop        dword [rax+rax]

                     loc_52c0:
00000000000052c0         movzx      eax, byte [rdi+r9+1]                        ; CODE XREF=strintcmp+512
00000000000052c6         add        r9, 0x1
00000000000052ca         sub        eax, 0x30
00000000000052cd         cmp        eax, 0x9
00000000000052d0         jbe        loc_52c0

00000000000052d2         cmp        ecx, 0x9
00000000000052d5         jbe        loc_5150

00000000000052db         xor        eax, eax
00000000000052dd         test       r9, r9
00000000000052e0         setne      al

                     loc_52e3:
00000000000052e3         ret                                                    ; CODE XREF=strintcmp+270, strintcmp+632, strintcmp+658
                        ; endp
00000000000052e5         align      8

                     loc_52e8:
00000000000052e8         add        rdi, 0x1                                    ; CODE XREF=strintcmp+280
00000000000052ec         movzx      r8d, byte [rdi]
00000000000052f0         jmp        loc_51e4
00000000000052f5         align      8

                     loc_52f8:
00000000000052f8         movzx      r8d, cl                                     ; CODE XREF=strintcmp+358
00000000000052fc         sub        r8d, 0x30

                     loc_5300:
0000000000005300         cmp        r8d, 0x9                                    ; CODE XREF=strintcmp+651
0000000000005304         ja         loc_5241

000000000000530a         xor        r10d, r10d
000000000000530d         nop        dword [rax]

                     loc_5310:
0000000000005310         movzx      eax, byte [rdi+r10+1]                       ; CODE XREF=strintcmp+592
0000000000005316         add        r10, 0x1
000000000000531a         sub        eax, 0x30
000000000000531d         cmp        eax, 0x9
0000000000005320         jbe        loc_5310

0000000000005322         cmp        edx, 0x9
0000000000005325         jbe        loc_524d

000000000000532b         xor        eax, eax
000000000000532d         test       r10, r10
0000000000005330         setne      al
0000000000005333         neg        eax
0000000000005335         ret
                        ; endp
0000000000005336         align      64

                     loc_5340:
0000000000005340         xor        eax, eax                                    ; CODE XREF=strintcmp+69, strintcmp+119, strintcmp+375
0000000000005342         ret
                        ; endp

                     loc_5343:
0000000000005343         xor        eax, eax                                    ; CODE XREF=strintcmp+156
0000000000005345         test       r9, r9
0000000000005348         je         loc_52e3

000000000000534a         movzx      r9d, r8b
000000000000534e         mov        eax, r9d
0000000000005351         sub        eax, edx
0000000000005353         ret
                        ; endp

                     loc_5354:
0000000000005354         movzx      eax, r9b                                    ; CODE XREF=strintcmp+321
0000000000005358         lea        edx, dword [rax-0x30]
000000000000535b         jmp        loc_5300

                     loc_535d:
000000000000535d         xor        eax, eax                                    ; CODE XREF=strintcmp+404
000000000000535f         test       r10, r10
0000000000005362         je         loc_52e3

0000000000005368         mov        eax, r9d
000000000000536b         sub        eax, ecx
000000000000536d         ret
                        ; endp

                     loc_536e:
000000000000536e         mov        eax, 0xffffffff                             ; CODE XREF=strintcmp+204
0000000000005373         ret
                        ; endp
0000000000005374         align      128                                         ; End of unwind block (FDE at 0xa8e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     verror_at_line:
0000000000005380         push       r14                                         ; Begin of unwind block (FDE at 0xa8fc), CODE XREF=verror+10
0000000000005382         push       r13
0000000000005384         mov        r13d, esi
0000000000005387         push       r12
0000000000005389         push       rbp
000000000000538a         mov        r12d, edi
000000000000538d         push       rbx
000000000000538e         mov        rsi, r9
0000000000005391         mov        rdi, r8
0000000000005394         mov        rbp, rdx
0000000000005397         mov        r14d, ecx
000000000000539a         call       xvasprintf                                  ; xvasprintf
000000000000539f         test       rax, rax
00000000000053a2         je         loc_5407

00000000000053a4         test       rbp, rbp
00000000000053a7         mov        rbx, rax
00000000000053aa         je         loc_53e0

00000000000053ac         lea        r8, qword [aSS+4]                           ; argument "__format" for method j_error_at_line, 0x9348
00000000000053b3         mov        edi, r12d                                   ; argument "__status" for method j_error_at_line
00000000000053b6         mov        r9, rax
00000000000053b9         mov        ecx, r14d                                   ; argument "__lineno" for method j_error_at_line
00000000000053bc         mov        rdx, rbp                                    ; argument "__fname" for method j_error_at_line
00000000000053bf         mov        esi, r13d                                   ; argument "__errnum" for method j_error_at_line
00000000000053c2         xor        eax, eax
00000000000053c4         call       j_error_at_line                             ; error_at_line
00000000000053c9         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
00000000000053cc         pop        rbx
00000000000053cd         pop        rbp
00000000000053ce         pop        r12
00000000000053d0         pop        r13
00000000000053d2         pop        r14
00000000000053d4         jmp        j_free                                      ; free
                        ; endp
00000000000053d9         align      32

                     loc_53e0:
00000000000053e0         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x9348, CODE XREF=verror_at_line+42
00000000000053e7         mov        edi, r12d                                   ; argument "__status" for method j_error
00000000000053ea         mov        rcx, rax
00000000000053ed         mov        esi, r13d                                   ; argument "__errnum" for method j_error
00000000000053f0         xor        eax, eax
00000000000053f2         call       j_error                                     ; error
00000000000053f7         mov        rdi, rbx                                    ; argument "__ptr" for method j_free
00000000000053fa         pop        rbx
00000000000053fb         pop        rbp
00000000000053fc         pop        r12
00000000000053fe         pop        r13
0000000000005400         pop        r14
0000000000005402         jmp        j_free                                      ; free
                        ; endp

                     loc_5407:
0000000000005407         lea        rsi, qword [aUnableToDispla]                ; argument "msgid" for method j_dcgettext, "unable to display error message", CODE XREF=verror_at_line+34
000000000000540e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005413         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005415         call       j_dcgettext                                 ; dcgettext
000000000000541a         mov        rbx, rax
000000000000541d         call       j___errno_location                          ; __errno_location
0000000000005422         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000005424         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000005427         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005429         xor        eax, eax
000000000000542b         call       j_error                                     ; error
0000000000005430         call       j_abort                                     ; abort
                        ; endp
0000000000005435         align      64                                          ; End of unwind block (FDE at 0xa8fc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     verror:
0000000000005440         mov        r8, rdx                                     ; Begin of unwind block (FDE at 0xa94c), CODE XREF=test_syntax_error+155
0000000000005443         mov        r9, rcx
0000000000005446         xor        edx, edx
0000000000005448         xor        ecx, ecx
000000000000544a         jmp        verror_at_line                              ; verror_at_line
                        ; endp
000000000000544f         align      16                                          ; End of unwind block (FDE at 0xa94c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000005450         push       r15                                         ; Begin of unwind block (FDE at 0xa964), CODE XREF=version_etc_va+75, version_etc+161
0000000000005452         push       r14
0000000000005454         push       r13
0000000000005456         push       r12
0000000000005458         mov        r12, r9
000000000000545b         push       rbp
000000000000545c         push       rbx
000000000000545d         mov        rbp, rdi
0000000000005460         mov        rbx, r8
0000000000005463         sub        rsp, 0x28
0000000000005467         test       rsi, rsi
000000000000546a         je         loc_5588

0000000000005470         mov        r8, rdx
0000000000005473         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000547a         mov        r9, rcx
000000000000547d         xor        eax, eax
000000000000547f         mov        rcx, rsi
0000000000005482         mov        esi, 0x1
0000000000005487         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_548c:
000000000000548c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0x989b, CODE XREF=version_etc_arn+337
0000000000005493         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005495         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000549a         call       j_dcgettext                                 ; dcgettext
000000000000549f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
00000000000054a6         mov        rcx, rax
00000000000054a9         mov        r8d, 0x7e3
00000000000054af         mov        esi, 0x1
00000000000054b4         mov        rdi, rbp
00000000000054b7         xor        eax, eax
00000000000054b9         call       j___fprintf_chk                             ; __fprintf_chk
00000000000054be         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
00000000000054c5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000054c7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000054cc         call       j_dcgettext                                 ; dcgettext
00000000000054d1         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
00000000000054d4         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000054d7         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000054dc         cmp        r12, 0x9
00000000000054e0         ja         loc_5820

00000000000054e6         lea        rdx, qword [switch_table_9b88]              ; switch_table_9b88
00000000000054ed         movsxd     rax, dword [rdx+r12*4]
00000000000054f1         add        rax, rdx
00000000000054f4         jmp        rax                                         ; switch statement using table at 0x9b88, with 10 cases, 0x5500,0x5576,0x55b0,0x5608,0x5648,0x5690,0x56e0,0x5738,0x5768,0x57d0
00000000000054f6         align      256

                     loc_5500:
0000000000005500         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000005504         mov        rax, qword [rbx+0x10]
0000000000005508         lea        rsi, qword [aWrittenBySSSns_9a98]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
000000000000550f         mov        r8, qword [rbx+8]
0000000000005513         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005518         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000551a         mov        r13, qword [rbx+0x30]
000000000000551e         mov        r12, qword [rbx+0x28]
0000000000005522         mov        qword [rsp+0x58+var_48], r9
0000000000005527         mov        r15, qword [rbx+0x20]
000000000000552b         mov        r14, qword [rbx+0x18]
000000000000552f         mov        qword [rsp+0x58+var_58], rax
0000000000005533         mov        qword [rsp+0x58+var_50], r8
0000000000005538         mov        rbx, qword [rbx]
000000000000553b         call       j_dcgettext                                 ; dcgettext
0000000000005540         sub        rsp, 0x8

                     loc_5544:
0000000000005544         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000005549         mov        rdx, rax
000000000000554c         mov        rcx, rbx
000000000000554f         mov        esi, 0x1
0000000000005554         mov        rdi, rbp
0000000000005557         xor        eax, eax
0000000000005559         push       r9
000000000000555b         push       r13
000000000000555d         push       r12
000000000000555f         push       r15
0000000000005561         push       r14
0000000000005563         mov        r9, qword [rsp+0x88+var_58]
0000000000005568         mov        r8, qword [rsp+0x88+var_50]
000000000000556d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005572         add        rsp, 0x30

                     loc_5576:
0000000000005576         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000557a         pop        rbx
000000000000557b         pop        rbp
000000000000557c         pop        r12
000000000000557e         pop        r13
0000000000005580         pop        r14
0000000000005582         pop        r15
0000000000005584         ret
                        ; endp
0000000000005585         align      8

                     loc_5588:
0000000000005588         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000558b         mov        rcx, rdx
000000000000558e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000005595         mov        esi, 0x1
000000000000559a         xor        eax, eax
000000000000559c         call       j___fprintf_chk                             ; __fprintf_chk
00000000000055a1         jmp        loc_548c
00000000000055a6         align      16

                     loc_55b0:
00000000000055b0         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
00000000000055b4         mov        r9, qword [rbx+0x38]
00000000000055b8         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
00000000000055bf         mov        rax, qword [rbx+0x10]
00000000000055c3         mov        r8, qword [rbx+8]
00000000000055c7         mov        edx, 0x5
00000000000055cc         mov        r13, qword [rbx+0x30]
00000000000055d0         mov        r12, qword [rbx+0x28]
00000000000055d4         mov        r15, qword [rbx+0x20]
00000000000055d8         mov        r14, qword [rbx+0x18]
00000000000055dc         mov        rbx, qword [rbx]
00000000000055df         mov        qword [rsp+0x58+var_40], r10
00000000000055e4         mov        qword [rsp+0x58+var_48], r9
00000000000055e9         mov        qword [rsp+0x58+var_58], rax
00000000000055ed         mov        qword [rsp+0x58+var_50], r8

                     loc_55f2:
00000000000055f2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
00000000000055f4         call       j_dcgettext                                 ; dcgettext
00000000000055f9         mov        r10, qword [rsp+0x58+var_40]
00000000000055fe         push       r10
0000000000005600         jmp        loc_5544
0000000000005605         align      8

                     loc_5608:
0000000000005608         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000560b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
0000000000005612         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005617         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005619         call       j_dcgettext                                 ; dcgettext
000000000000561e         add        rsp, 0x28
0000000000005622         mov        rcx, rbx
0000000000005625         mov        rdi, rbp
0000000000005628         pop        rbx
0000000000005629         pop        rbp
000000000000562a         pop        r12
000000000000562c         pop        r13
000000000000562e         pop        r14
0000000000005630         pop        r15
0000000000005632         mov        rdx, rax
0000000000005635         mov        esi, 0x1
000000000000563a         xor        eax, eax
000000000000563c         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005641         align      8

                     loc_5648:
0000000000005648         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
000000000000564c         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
0000000000005653         mov        rbx, qword [rbx]
0000000000005656         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000565b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000565d         call       j_dcgettext                                 ; dcgettext
0000000000005662         add        rsp, 0x28
0000000000005666         mov        r8, r12
0000000000005669         mov        rcx, rbx
000000000000566c         mov        rdi, rbp
000000000000566f         mov        rdx, rax
0000000000005672         mov        esi, 0x1
0000000000005677         pop        rbx
0000000000005678         pop        rbp
0000000000005679         pop        r12
000000000000567b         pop        r13
000000000000567d         pop        r14
000000000000567f         pop        r15
0000000000005681         xor        eax, eax
0000000000005683         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000005688         align      16

                     loc_5690:
0000000000005690         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000005694         mov        r12, qword [rbx+8]
0000000000005698         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000569f         mov        rbx, qword [rbx]
00000000000056a2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056a7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056a9         call       j_dcgettext                                 ; dcgettext
00000000000056ae         add        rsp, 0x28
00000000000056b2         mov        r9, r13
00000000000056b5         mov        r8, r12
00000000000056b8         mov        rcx, rbx
00000000000056bb         mov        rdi, rbp
00000000000056be         mov        rdx, rax
00000000000056c1         pop        rbx
00000000000056c2         pop        rbp
00000000000056c3         pop        r12
00000000000056c5         pop        r13
00000000000056c7         pop        r14
00000000000056c9         pop        r15
00000000000056cb         mov        esi, 0x1
00000000000056d0         xor        eax, eax
00000000000056d2         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000056d7         align      32

                     loc_56e0:
00000000000056e0         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
00000000000056e7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056ec         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056ee         mov        r14, qword [rbx+0x18]
00000000000056f2         mov        r13, qword [rbx+0x10]
00000000000056f6         mov        r12, qword [rbx+8]
00000000000056fa         mov        rbx, qword [rbx]
00000000000056fd         call       j_dcgettext                                 ; dcgettext
0000000000005702         sub        rsp, 0x8

                     loc_5706:
0000000000005706         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000005708         mov        rdx, rax
000000000000570b         mov        r9, r13
000000000000570e         mov        r8, r12
0000000000005711         mov        rcx, rbx
0000000000005714         mov        rdi, rbp
0000000000005717         mov        esi, 0x1
000000000000571c         xor        eax, eax
000000000000571e         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005723         pop        rax
0000000000005724         pop        rdx
0000000000005725         add        rsp, 0x28
0000000000005729         pop        rbx
000000000000572a         pop        rbp
000000000000572b         pop        r12
000000000000572d         pop        r13
000000000000572f         pop        r14
0000000000005731         pop        r15
0000000000005733         ret
                        ; endp
0000000000005734         align      8

                     loc_5738:
0000000000005738         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
000000000000573c         lea        rsi, qword [aWrittenBySSSns_9a18]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
0000000000005743         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005748         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000574a         mov        r14, qword [rbx+0x18]
000000000000574e         mov        r13, qword [rbx+0x10]
0000000000005752         mov        r12, qword [rbx+8]
0000000000005756         mov        rbx, qword [rbx]
0000000000005759         call       j_dcgettext                                 ; dcgettext
000000000000575e         push       r15
0000000000005760         jmp        loc_5706
0000000000005762         align      8

                     loc_5768:
0000000000005768         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
000000000000576c         mov        r12, qword [rbx+0x28]
0000000000005770         lea        rsi, qword [aWrittenBySSSns_9a40]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000005777         mov        r15, qword [rbx+0x20]
000000000000577b         mov        r14, qword [rbx+0x18]
000000000000577f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005784         mov        r13, qword [rbx+0x10]
0000000000005788         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000578a         mov        rbx, qword [rbx]
000000000000578d         mov        qword [rsp+0x58+var_58], r8
0000000000005791         call       j_dcgettext                                 ; dcgettext
0000000000005796         sub        rsp, 0x8
000000000000579a         mov        r9, r13
000000000000579d         push       r12
000000000000579f         push       r15
00000000000057a1         push       r14

                     loc_57a3:
00000000000057a3         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
00000000000057a8         mov        rcx, rbx
00000000000057ab         mov        rdx, rax
00000000000057ae         mov        rdi, rbp
00000000000057b1         mov        esi, 0x1
00000000000057b6         xor        eax, eax
00000000000057b8         call       j___fprintf_chk                             ; __fprintf_chk
00000000000057bd         add        rsp, 0x20
00000000000057c1         add        rsp, 0x28
00000000000057c5         pop        rbx
00000000000057c6         pop        rbp
00000000000057c7         pop        r12
00000000000057c9         pop        r13
00000000000057cb         pop        r14
00000000000057cd         pop        r15
00000000000057cf         ret
                        ; endp

                     loc_57d0:
00000000000057d0         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
00000000000057d4         mov        r13, qword [rbx+0x30]
00000000000057d8         lea        rsi, qword [aWrittenBySSSns_9a68]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
00000000000057df         mov        r12, qword [rbx+0x28]
00000000000057e3         mov        r15, qword [rbx+0x20]
00000000000057e7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000057ec         mov        r14, qword [rbx+0x18]
00000000000057f0         mov        r8, qword [rbx+8]
00000000000057f4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000057f6         mov        qword [rsp+0x58+var_50], r9
00000000000057fb         mov        rbx, qword [rbx]
00000000000057fe         mov        qword [rsp+0x58+var_58], r8
0000000000005802         call       j_dcgettext                                 ; dcgettext
0000000000005807         push       r13
0000000000005809         push       r12
000000000000580b         push       r15
000000000000580d         push       r14
000000000000580f         mov        r9, qword [rsp+0x78+var_50]
0000000000005814         jmp        loc_57a3
0000000000005816         align      32

                     loc_5820:
0000000000005820         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000005824         mov        r9, qword [rbx+0x38]
0000000000005828         mov        edx, 0x5
000000000000582d         mov        rax, qword [rbx+0x10]
0000000000005831         mov        r8, qword [rbx+8]
0000000000005835         lea        rsi, qword [aWrittenBySSSns_9b00]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
000000000000583c         mov        r13, qword [rbx+0x30]
0000000000005840         mov        r12, qword [rbx+0x28]
0000000000005844         mov        r15, qword [rbx+0x20]
0000000000005848         mov        r14, qword [rbx+0x18]
000000000000584c         mov        qword [rsp+0x58+var_40], r10
0000000000005851         mov        qword [rsp+0x58+var_48], r9
0000000000005856         mov        qword [rsp+0x58+var_58], rax
000000000000585a         mov        qword [rsp+0x58+var_50], r8
000000000000585f         mov        rbx, qword [rbx]
0000000000005862         jmp        loc_55f2
0000000000005867         align      16                                          ; End of unwind block (FDE at 0xa964)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000005870         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xaa78)
0000000000005873         cmp        qword [r8], 0x0
0000000000005877         je         j_version_etc_arn                           ; version_etc_arn

0000000000005879         nop        dword [rax]

                     loc_5880:
0000000000005880         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000005884         cmp        qword [r8+r9*8], 0x0
0000000000005889         jne        loc_5880

                     j_version_etc_arn:        // version_etc_arn
000000000000588b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000005890         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xaa78), Begin of unwind block (FDE at 0xaa8c)
0000000000005894         mov        r10, r8
0000000000005897         xor        r9d, r9d
000000000000589a         mov        rax, qword [fs:0x28]
00000000000058a3         mov        qword [rsp+0x68+var_10], rax
00000000000058a8         xor        eax, eax
00000000000058aa         mov        r8, rsp
00000000000058ad         nop        dword [rax]

                     loc_58b0:
00000000000058b0         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
00000000000058b3         cmp        eax, 0x2f
00000000000058b6         ja         loc_58fa

00000000000058b8         mov        r11d, eax
00000000000058bb         add        r11, qword [r10+0x10]
00000000000058bf         add        eax, 0x8
00000000000058c2         mov        dword [r10], eax

                     loc_58c5:
00000000000058c5         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
00000000000058c8         test       rax, rax
00000000000058cb         mov        qword [r8+r9*8], rax
00000000000058cf         je         loc_58db

00000000000058d1         add        r9, 0x1
00000000000058d5         cmp        r9, 0xa
00000000000058d9         jne        loc_58b0

                     loc_58db:
00000000000058db         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
00000000000058e0         mov        rax, qword [rsp+0x68+var_10]
00000000000058e5         xor        rax, qword [fs:0x28]
00000000000058ee         jne        loc_58f5

00000000000058f0         add        rsp, 0x68
00000000000058f4         ret
                        ; endp

                     loc_58f5:
00000000000058f5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_58fa:
00000000000058fa         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
00000000000058fe         lea        rax, qword [r11+8]
0000000000005902         mov        qword [r10+8], rax
0000000000005906         jmp        loc_58c5
0000000000005908         align      16                                          ; End of unwind block (FDE at 0xaa8c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000005910         push       rbp                                         ; Begin of unwind block (FDE at 0xaaa8), CODE XREF=main+343
0000000000005911         push       rbx
0000000000005912         mov        r10d, 0x20
0000000000005918         xor        r11d, r11d
000000000000591b         sub        rsp, 0xb8
0000000000005922         mov        rax, qword [fs:0x28]
000000000000592b         mov        qword [rsp+0xc8+var_50], rax
0000000000005930         xor        eax, eax
0000000000005932         lea        rax, qword [rsp+0xc8+arg_0]
000000000000593a         mov        qword [rsp+0xc8+var_28], r8
0000000000005942         lea        rbx, qword [rsp+0xc8+arg_0]
000000000000594a         lea        r8, qword [rsp+0xc8+var_A8]
000000000000594f         mov        qword [rsp+0xc8+var_20], r9
0000000000005957         mov        dword [rsp+0xc8+var_C0], 0x20
000000000000595f         mov        qword [rsp+0xc8+var_B8], rax
0000000000005964         lea        rax, qword [rsp+0xc8+var_48]
000000000000596c         xor        r9d, r9d
000000000000596f         mov        qword [rsp+0xc8+var_B0], rax
0000000000005974         mov        rbp, rax
0000000000005977         nop        word [rax+rax]

                     loc_5980:
0000000000005980         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000005984         ja         loc_59dc

0000000000005986         mov        eax, r10d
0000000000005989         mov        r11d, 0x1
000000000000598f         add        r10d, 0x8
0000000000005993         add        rax, rbp

                     loc_5996:
0000000000005996         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000005999         test       rax, rax
000000000000599c         mov        qword [r8+r9*8], rax
00000000000059a0         je         loc_59ac

00000000000059a2         add        r9, 0x1
00000000000059a6         cmp        r9, 0xa
00000000000059aa         jne        loc_5980

                     loc_59ac:
00000000000059ac         test       r11b, r11b                                  ; CODE XREF=version_etc+144
00000000000059af         jne        loc_59d5

                     loc_59b1:
00000000000059b1         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
00000000000059b6         mov        rax, qword [rsp+0xc8+var_50]
00000000000059bb         xor        rax, qword [fs:0x28]
00000000000059c4         jne        loc_59d0

00000000000059c6         add        rsp, 0xb8
00000000000059cd         pop        rbx
00000000000059ce         pop        rbp
00000000000059cf         ret
                        ; endp

                     loc_59d0:
00000000000059d0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_59d5:
00000000000059d5         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
00000000000059da         jmp        loc_59b1

                     loc_59dc:
00000000000059dc         mov        rax, rbx                                    ; CODE XREF=version_etc+116
00000000000059df         add        rbx, 0x8
00000000000059e3         jmp        loc_5996
00000000000059e5         align      16                                          ; End of unwind block (FDE at 0xaaa8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
00000000000059f0         push       rbx                                         ; Begin of unwind block (FDE at 0xaad4)
00000000000059f1         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
00000000000059f8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000059fd         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000059ff         call       j_dcgettext                                 ; dcgettext
0000000000005a04         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000005a0b         mov        rsi, rax
0000000000005a0e         mov        edi, 0x1
0000000000005a13         xor        eax, eax
0000000000005a15         call       j___printf_chk                              ; __printf_chk
0000000000005a1a         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000005a21         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005a26         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005a28         call       j_dcgettext                                 ; dcgettext
0000000000005a2d         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005a34         lea        rdx, qword [aGnuCoreutils]                  ; "GNU coreutils"
0000000000005a3b         mov        rsi, rax
0000000000005a3e         mov        edi, 0x1
0000000000005a43         xor        eax, eax
0000000000005a45         call       j___printf_chk                              ; __printf_chk
0000000000005a4a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005a51         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000005a58         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005a5a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005a5f         call       j_dcgettext                                 ; dcgettext
0000000000005a64         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005a67         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005a6a         pop        rbx
0000000000005a6b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000005a70         push       rbx                                         ; End of unwind block (FDE at 0xaad4), Begin of unwind block (FDE at 0xaaf4), CODE XREF=quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15, xstrcat+135, xstrcat+229
0000000000005a71         mov        rbx, rdi
0000000000005a74         call       j_malloc                                    ; malloc
0000000000005a79         test       rax, rax
0000000000005a7c         jne        loc_5a83

0000000000005a7e         test       rbx, rbx
0000000000005a81         jne        loc_5a85

                     loc_5a83:
0000000000005a83         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000005a84         ret
                        ; endp

                     loc_5a85:
0000000000005a85         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5a8a:
0000000000005a8a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xaaf4)
                     xnmalloc:
0000000000005a90         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xab10)
0000000000005a93         mul        rsi
0000000000005a96         mov        rdi, rax
0000000000005a99         seto       al
0000000000005a9c         test       rdi, rdi
0000000000005a9f         js         loc_5aab

0000000000005aa1         movzx      eax, al
0000000000005aa4         test       rax, rax
0000000000005aa7         jne        loc_5aab

0000000000005aa9         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_5aab:
0000000000005aab         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
0000000000005aaf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5ab4:
0000000000005ab4         nop                                                    ; End of unwind block (FDE at 0xab10)
0000000000005ab6         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000005ac0         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xab24)
                        ; endp
0000000000005ac2         align      16                                          ; End of unwind block (FDE at 0xab24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000005ad0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xab38), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000005ad3         push       rbx
0000000000005ad4         mov        rbx, rsi
0000000000005ad7         jne        loc_5ade

0000000000005ad9         test       rdi, rdi
0000000000005adc         jne        loc_5af8

                     loc_5ade:
0000000000005ade         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000005ae1         call       j_realloc                                   ; realloc
0000000000005ae6         test       rax, rax
0000000000005ae9         jne        loc_5af0

0000000000005aeb         test       rbx, rbx
0000000000005aee         jne        loc_5b01

                     loc_5af0:
0000000000005af0         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000005af1         ret
                        ; endp
0000000000005af2         align      8

                     loc_5af8:
0000000000005af8         call       j_free                                      ; free, CODE XREF=xrealloc+12
0000000000005afd         xor        eax, eax
0000000000005aff         pop        rbx
0000000000005b00         ret
                        ; endp

                     loc_5b01:
0000000000005b01         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5b06:
0000000000005b06         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xab38)
                     xnrealloc:
0000000000005b10         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xab5c)
0000000000005b13         mul        rdx
0000000000005b16         mov        rsi, rax
0000000000005b19         seto       al
0000000000005b1c         test       rsi, rsi
0000000000005b1f         js         loc_5b2b

0000000000005b21         movzx      eax, al
0000000000005b24         test       rax, rax
0000000000005b27         jne        loc_5b2b

0000000000005b29         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_5b2b:
0000000000005b2b         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000005b2f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5b34:
0000000000005b34         nop                                                    ; End of unwind block (FDE at 0xab5c)
0000000000005b36         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000005b40         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xab70)
0000000000005b43         mov        r9, rdx
0000000000005b46         mov        rcx, qword [rsi]
0000000000005b49         je         loc_5b80

0000000000005b4b         xor        edx, edx
0000000000005b4d         movabs     rax, 0x5555555555555554
0000000000005b57         div        r9
0000000000005b5a         cmp        rax, rcx
0000000000005b5d         jbe        loc_5b9b

0000000000005b5f         mov        rax, rcx
0000000000005b62         shr        rax, 0x1
0000000000005b65         lea        rcx, qword [rax+rcx+1]

                     loc_5b6a:
0000000000005b6a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000005b6d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000005b71         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000005b74         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000005b79         align      128

                     loc_5b80:
0000000000005b80         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000005b83         je         loc_5ba8

                     loc_5b85:
0000000000005b85         mov        rax, rcx                                    ; CODE XREF=sub_5ba4+28
0000000000005b88         mul        r9
0000000000005b8b         seto       dl
0000000000005b8e         test       rax, rax
0000000000005b91         movzx      edx, dl
0000000000005b94         js         loc_5b9b

0000000000005b96         test       rdx, rdx
0000000000005b99         je         loc_5b6a

                     loc_5b9b:
0000000000005b9b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000005b9f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5ba4:
0000000000005ba4         nop        dword [rax]
                        ; endp

                     loc_5ba8:
0000000000005ba8         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000005baa         mov        eax, 0x80
0000000000005baf         xor        r8d, r8d
0000000000005bb2         div        r9
0000000000005bb5         test       rax, rax
0000000000005bb8         sete       r8b
0000000000005bbc         lea        rcx, qword [r8+rax]
0000000000005bc0         jmp        loc_5b85
0000000000005bc2         align      16                                          ; End of unwind block (FDE at 0xab70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000005bd0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xab88)
0000000000005bd3         mov        rax, qword [rsi]
0000000000005bd6         je         loc_5c00

0000000000005bd8         movabs     rdx, 0x5555555555555553
0000000000005be2         cmp        rax, rdx
0000000000005be5         ja         loc_5c11

0000000000005be7         mov        rdx, rax
0000000000005bea         shr        rdx, 0x1
0000000000005bed         lea        rax, qword [rdx+rax+1]

                     loc_5bf2:
0000000000005bf2         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000005bf5         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000005bf8         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000005bfd         align      1024

                     loc_5c00:
0000000000005c00         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000005c03         mov        edx, 0x80
0000000000005c08         cmove      rax, rdx
0000000000005c0c         test       rax, rax
0000000000005c0f         jns        loc_5bf2

                     loc_5c11:
0000000000005c11         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000005c15         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5c1a:
0000000000005c1a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xab88)
                     xzalloc:
0000000000005c20         push       rbx                                         ; Begin of unwind block (FDE at 0xaba0)
0000000000005c21         mov        rbx, rdi
0000000000005c24         call       xmalloc                                     ; xmalloc
0000000000005c29         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000005c2c         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000005c2e         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000005c31         pop        rbx
0000000000005c32         jmp        j_memset                                    ; memset
                        ; endp
0000000000005c37         align      64                                          ; End of unwind block (FDE at 0xaba0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000005c40         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xabbc)
0000000000005c43         sub        rsp, 0x8
0000000000005c47         mul        rsi
0000000000005c4a         seto       dl
0000000000005c4d         test       rax, rax
0000000000005c50         js         loc_5c69

0000000000005c52         movzx      edx, dl
0000000000005c55         test       rdx, rdx
0000000000005c58         jne        loc_5c69

0000000000005c5a         call       j_calloc                                    ; calloc
0000000000005c5f         test       rax, rax
0000000000005c62         je         loc_5c69

0000000000005c64         add        rsp, 0x8
0000000000005c68         ret
                        ; endp

                     loc_5c69:
0000000000005c69         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5c6e:
0000000000005c6e         nop                                                    ; End of unwind block (FDE at 0xabbc)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000005c70         push       rbp                                         ; Begin of unwind block (FDE at 0xabd8), CODE XREF=clone_quoting_options+40
0000000000005c71         push       rbx
0000000000005c72         mov        rbp, rdi
0000000000005c75         mov        rdi, rsi
0000000000005c78         mov        rbx, rsi
0000000000005c7b         sub        rsp, 0x8
0000000000005c7f         call       xmalloc                                     ; xmalloc
0000000000005c84         add        rsp, 0x8
0000000000005c88         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000005c8b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000005c8e         pop        rbx
0000000000005c8f         pop        rbp
0000000000005c90         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000005c93         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000005c98         align      32                                          ; End of unwind block (FDE at 0xabd8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000005ca0         push       rbx                                         ; Begin of unwind block (FDE at 0xac00)
0000000000005ca1         mov        rbx, rdi
0000000000005ca4         call       j_strlen                                    ; strlen
0000000000005ca9         mov        rdi, rbx
0000000000005cac         lea        rsi, qword [rax+1]
0000000000005cb0         pop        rbx
0000000000005cb1         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000005cb3         align      64                                          ; End of unwind block (FDE at 0xac00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000005cc0         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xac1c), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xvasprintf+159
0000000000005cc7         sub        rsp, 0x8
0000000000005ccb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005cd0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005cd2         call       j_dcgettext                                 ; dcgettext
0000000000005cd7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000005cdd         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0x9348
0000000000005ce4         mov        rcx, rax
0000000000005ce7         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005ce9         xor        eax, eax
0000000000005ceb         call       j_error                                     ; error
0000000000005cf0         call       j_abort                                     ; abort
                        ; endp
0000000000005cf5         align      256                                         ; End of unwind block (FDE at 0xac1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     xstrcat:
0000000000005d00         push       r15                                         ; Begin of unwind block (FDE at 0xac34), CODE XREF=xvasprintf+74
0000000000005d02         push       r14
0000000000005d04         push       r13
0000000000005d06         push       r12
0000000000005d08         push       rbp
0000000000005d09         push       rbx
0000000000005d0a         sub        rsp, 0x28
0000000000005d0e         mov        rax, qword [fs:0x28]
0000000000005d17         mov        qword [rsp+0x58+var_40], rax
0000000000005d1c         xor        eax, eax
0000000000005d1e         test       rdi, rdi
0000000000005d21         movdqu     xmm0, xmmword [rsi]
0000000000005d25         movups     xmmword [rsp+0x58+var_58], xmm0
0000000000005d29         mov        r14, qword [rsi+0x10]
0000000000005d2d         mov        qword [rsp+0x58+var_48], r14
0000000000005d32         je         loc_5de0

0000000000005d38         mov        r12, rdi
0000000000005d3b         mov        r15, rsi
0000000000005d3e         mov        rbp, rdi
0000000000005d41         xor        ebx, ebx
0000000000005d43         mov        r13, 0xffffffffffffffff

                     loc_5d4a:
0000000000005d4a         mov        edx, dword [rsp+0x58+var_58]                ; CODE XREF=xstrcat+116
0000000000005d4d         cmp        edx, 0x2f
0000000000005d50         ja         loc_5e30

0000000000005d56         mov        eax, edx
0000000000005d58         add        edx, 0x8
0000000000005d5b         add        rax, r14
0000000000005d5e         mov        dword [rsp+0x58+var_58], edx

                     loc_5d61:
0000000000005d61         mov        rdi, qword [rax]                            ; argument "__s" for method j_strlen, CODE XREF=xstrcat+318
0000000000005d64         call       j_strlen                                    ; strlen
0000000000005d69         add        rbx, rax
0000000000005d6c         cmovb      rbx, r13
0000000000005d70         sub        rbp, 0x1
0000000000005d74         jne        loc_5d4a

0000000000005d76         cmp        rbx, 0x7fffffff
0000000000005d7d         ja         loc_5e20

0000000000005d83         lea        rdi, qword [rbx+1]
0000000000005d87         call       xmalloc                                     ; xmalloc
0000000000005d8c         mov        r14, rax
0000000000005d8f         mov        rbx, rax
0000000000005d92         jmp        loc_5dc5

                     loc_5d94:
0000000000005d94         mov        eax, edx                                    ; CODE XREF=xstrcat+203
0000000000005d96         add        rax, qword [r15+0x10]
0000000000005d9a         add        edx, 0x8
0000000000005d9d         mov        dword [r15], edx

                     loc_5da0:
0000000000005da0         mov        r13, qword [rax]                            ; CODE XREF=xstrcat+217
0000000000005da3         mov        rdi, r13                                    ; argument "__s" for method j_strlen
0000000000005da6         call       j_strlen                                    ; strlen
0000000000005dab         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000005dae         mov        rbp, rax
0000000000005db1         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
0000000000005db4         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000005db7         add        rbx, rbp
0000000000005dba         call       j_memcpy                                    ; memcpy
0000000000005dbf         sub        r12, 0x1
0000000000005dc3         je         loc_5df0

                     loc_5dc5:
0000000000005dc5         mov        edx, dword [r15]                            ; CODE XREF=xstrcat+146
0000000000005dc8         cmp        edx, 0x2f
0000000000005dcb         jbe        loc_5d94

0000000000005dcd         mov        rax, qword [r15+8]
0000000000005dd1         lea        rdx, qword [rax+8]
0000000000005dd5         mov        qword [r15+8], rdx
0000000000005dd9         jmp        loc_5da0
0000000000005ddb         align      32

                     loc_5de0:
0000000000005de0         mov        edi, 0x1                                    ; CODE XREF=xstrcat+50
0000000000005de5         call       xmalloc                                     ; xmalloc
0000000000005dea         mov        rbx, rax
0000000000005ded         mov        r14, rax

                     loc_5df0:
0000000000005df0         mov        byte [rbx], 0x0                             ; CODE XREF=xstrcat+195

                     loc_5df3:
0000000000005df3         mov        rcx, qword [rsp+0x58+var_40]                ; CODE XREF=xstrcat+302
0000000000005df8         xor        rcx, qword [fs:0x28]
0000000000005e01         mov        rax, r14
0000000000005e04         jne        loc_5e15

0000000000005e06         add        rsp, 0x28
0000000000005e0a         pop        rbx
0000000000005e0b         pop        rbp
0000000000005e0c         pop        r12
0000000000005e0e         pop        r13
0000000000005e10         pop        r14
0000000000005e12         pop        r15
0000000000005e14         ret
                        ; endp

                     loc_5e15:
0000000000005e15         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrcat+260
                        ; endp
0000000000005e1a         align      32

                     loc_5e20:
0000000000005e20         call       j___errno_location                          ; __errno_location, CODE XREF=xstrcat+125
0000000000005e25         xor        r14d, r14d
0000000000005e28         mov        dword [rax], 0x4b
0000000000005e2e         jmp        loc_5df3

                     loc_5e30:
0000000000005e30         mov        rax, qword [rsp+0x58+var_50]                ; CODE XREF=xstrcat+80
0000000000005e35         lea        rdx, qword [rax+8]
0000000000005e39         mov        qword [rsp+0x58+var_50], rdx
0000000000005e3e         jmp        loc_5d61
0000000000005e43         align      16                                          ; End of unwind block (FDE at 0xac34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     xvasprintf:
0000000000005e50         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0xac80), CODE XREF=verror_at_line+26
0000000000005e54         mov        rax, qword [fs:0x28]
0000000000005e5d         mov        qword [rsp+0x18+var_10], rax
0000000000005e62         xor        eax, eax
0000000000005e64         movzx      eax, byte [rdi]
0000000000005e67         test       al, al
0000000000005e69         je         loc_5ee6

0000000000005e6b         cmp        al, 0x25
0000000000005e6d         mov        r8, rdi
0000000000005e70         jne        loc_5ea8

0000000000005e72         cmp        byte [rdi+1], 0x73
0000000000005e76         jne        loc_5ea8

0000000000005e78         xor        edi, edi
0000000000005e7a         jmp        loc_5e8d
0000000000005e7c         align      128

                     loc_5e80:
0000000000005e80         cmp        cl, 0x25                                    ; CODE XREF=xvasprintf+72
0000000000005e83         jne        loc_5ea8

0000000000005e85         cmp        byte [r8+rdi*2+1], 0x73
0000000000005e8b         jne        loc_5ea8

                     loc_5e8d:
0000000000005e8d         add        rdi, 0x1                                    ; CODE XREF=xvasprintf+42
0000000000005e91         movzx      ecx, byte [r8+rdi*2]
0000000000005e96         test       cl, cl
0000000000005e98         jne        loc_5e80

                     loc_5e9a:
0000000000005e9a         call       xstrcat                                     ; xstrcat, CODE XREF=xvasprintf+152
0000000000005e9f         jmp        loc_5ebe
0000000000005ea1         align      8

                     loc_5ea8:
0000000000005ea8         mov        rdx, rsi                                    ; CODE XREF=xvasprintf+32, xvasprintf+38, xvasprintf+51, xvasprintf+59
0000000000005eab         mov        rdi, rsp
0000000000005eae         mov        rsi, r8
0000000000005eb1         call       rpl_vasprintf                               ; rpl_vasprintf
0000000000005eb6         test       eax, eax
0000000000005eb8         js         loc_5ed8

0000000000005eba         mov        rax, qword [rsp+0x18+var_18]

                     loc_5ebe:
0000000000005ebe         mov        rdx, qword [rsp+0x18+var_10]                ; CODE XREF=xvasprintf+79, xvasprintf+148
0000000000005ec3         xor        rdx, qword [fs:0x28]
0000000000005ecc         jne        loc_5eea

0000000000005ece         add        rsp, 0x18
0000000000005ed2         ret
                        ; endp
0000000000005ed3         align      8

                     loc_5ed8:
0000000000005ed8         call       j___errno_location                          ; __errno_location, CODE XREF=xvasprintf+104
0000000000005edd         cmp        dword [rax], 0xc
0000000000005ee0         je         loc_5eef

0000000000005ee2         xor        eax, eax
0000000000005ee4         jmp        loc_5ebe

                     loc_5ee6:
0000000000005ee6         xor        edi, edi                                    ; CODE XREF=xvasprintf+25
0000000000005ee8         jmp        loc_5e9a

                     loc_5eea:
0000000000005eea         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xvasprintf+124
                        ; endp

                     loc_5eef:
0000000000005eef         call       xalloc_die                                  ; xalloc_die, CODE XREF=xvasprintf+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_5ef4:
0000000000005ef4         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xac80)
0000000000005efe         nop
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000005f00         push       r13                                         ; Begin of unwind block (FDE at 0xac9c), CODE XREF=sub_3c70+534
0000000000005f02         push       r12
0000000000005f04         mov        r13, rsi
0000000000005f07         push       rbp
0000000000005f08         push       rbx
0000000000005f09         mov        rbx, rdi
0000000000005f0c         mov        r12, rdx
0000000000005f0f         sub        rsp, 0x18
0000000000005f13         mov        rax, qword [fs:0x28]
0000000000005f1c         mov        qword [rsp+0x38+var_30], rax
0000000000005f21         xor        eax, eax
0000000000005f23         lea        rax, qword [rsp+0x38+var_34]
0000000000005f28         test       rdi, rdi
0000000000005f2b         cmove      rbx, rax
0000000000005f2f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000005f32         call       j_mbrtowc                                   ; mbrtowc
0000000000005f37         cmp        rax, 0xfffffffffffffffd
0000000000005f3b         mov        rbp, rax
0000000000005f3e         jbe        loc_5f60

0000000000005f40         test       r12, r12
0000000000005f43         je         loc_5f60

0000000000005f45         xor        edi, edi
0000000000005f47         call       hard_locale                                 ; hard_locale
0000000000005f4c         test       al, al
0000000000005f4e         jne        loc_5f60

0000000000005f50         movzx      eax, byte [r13]
0000000000005f55         mov        ebp, 0x1
0000000000005f5a         mov        dword [rbx], eax
0000000000005f5c         nop        dword [rax]

                     loc_5f60:
0000000000005f60         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000005f65         xor        rdx, qword [fs:0x28]
0000000000005f6e         mov        rax, rbp
0000000000005f71         jne        loc_5f7e

0000000000005f73         add        rsp, 0x18
0000000000005f77         pop        rbx
0000000000005f78         pop        rbp
0000000000005f79         pop        r12
0000000000005f7b         pop        r13
0000000000005f7d         ret
                        ; endp

                     loc_5f7e:
0000000000005f7e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000005f83         align      16                                          ; End of unwind block (FDE at 0xac9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     rpl_vasprintf:
0000000000005f90         push       rbx                                         ; Begin of unwind block (FDE at 0xacdc), CODE XREF=xvasprintf+97
0000000000005f91         mov        rax, rsi
0000000000005f94         mov        rbx, rdi
0000000000005f97         xor        edi, edi
0000000000005f99         sub        rsp, 0x10
0000000000005f9d         mov        rcx, qword [fs:0x28]
0000000000005fa6         mov        qword [rsp+0x18+var_10], rcx
0000000000005fab         xor        ecx, ecx
0000000000005fad         mov        rsi, rsp
0000000000005fb0         mov        rcx, rdx
0000000000005fb3         mov        rdx, rax
0000000000005fb6         call       vasnprintf                                  ; vasnprintf
0000000000005fbb         test       rax, rax
0000000000005fbe         je         loc_6002

0000000000005fc0         mov        rdx, qword [rsp+0x18+var_18]
0000000000005fc4         cmp        rdx, 0x7fffffff
0000000000005fcb         ja         loc_5fe8

0000000000005fcd         mov        qword [rbx], rax
0000000000005fd0         mov        eax, edx

                     loc_5fd2:
0000000000005fd2         mov        rbx, qword [rsp+0x18+var_10]                ; CODE XREF=rpl_vasprintf+112, rpl_vasprintf+119
0000000000005fd7         xor        rbx, qword [fs:0x28]
0000000000005fe0         jne        loc_6009

0000000000005fe2         add        rsp, 0x10
0000000000005fe6         pop        rbx
0000000000005fe7         ret
                        ; endp

                     loc_5fe8:
0000000000005fe8         mov        rdi, rax                                    ; argument "__ptr" for method j_free, CODE XREF=rpl_vasprintf+59
0000000000005feb         call       j_free                                      ; free
0000000000005ff0         call       j___errno_location                          ; __errno_location
0000000000005ff5         mov        dword [rax], 0x4b
0000000000005ffb         mov        eax, 0xffffffff
0000000000006000         jmp        loc_5fd2                                    ; DATA XREF=unary_operator+1011

                     loc_6002:
0000000000006002         mov        eax, 0xffffffff                             ; CODE XREF=rpl_vasprintf+46
0000000000006007         jmp        loc_5fd2

                     loc_6009:
0000000000006009         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_vasprintf+80
                        ; endp
000000000000600e         align      16                                          ; End of unwind block (FDE at 0xacdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000006010         push       r12                                         ; Begin of unwind block (FDE at 0xad04), CODE XREF=close_stdout+13, close_stdout+51
0000000000006012         push       rbp
0000000000006013         mov        rbp, rdi
0000000000006016         push       rbx
0000000000006017         call       j___fpending                                ; __fpending
000000000000601c         mov        ebx, dword [rbp]
000000000000601f         mov        rdi, rbp
0000000000006022         mov        r12, rax
0000000000006025         call       rpl_fclose                                  ; rpl_fclose
000000000000602a         and        ebx, 0x20
000000000000602d         test       ebx, ebx
000000000000602f         jne        loc_6048

0000000000006031         test       eax, eax
0000000000006033         je         loc_603f

0000000000006035         test       r12, r12
0000000000006038         mov        eax, 0xffffffff
000000000000603d         je         loc_6078

                     loc_603f:
000000000000603f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000006040         pop        rbp
0000000000006041         pop        r12
0000000000006043         ret
                        ; endp
0000000000006044         align      8

                     loc_6048:
0000000000006048         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000000604a         jne        loc_6068

000000000000604c         call       j___errno_location                          ; __errno_location
0000000000006051         mov        dword [rax], 0x0
0000000000006057         mov        eax, 0xffffffff
000000000000605c         pop        rbx
000000000000605d         pop        rbp
000000000000605e         pop        r12
0000000000006060         ret
                        ; endp
0000000000006061         align      8

                     loc_6068:
0000000000006068         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000006069         mov        eax, 0xffffffff
000000000000606e         pop        rbp
000000000000606f         pop        r12
0000000000006071         ret
                        ; endp
0000000000006072         align      8

                     loc_6078:
0000000000006078         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000607d         cmp        dword [rax], 0x9
0000000000006080         pop        rbx
0000000000006081         pop        rbp
0000000000006082         pop        r12
0000000000006084         setne      al
0000000000006087         movzx      eax, al
000000000000608a         neg        eax
000000000000608c         ret
                        ; endp
000000000000608d         align      16                                          ; End of unwind block (FDE at 0xad04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000006090         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xad54), CODE XREF=rpl_mbrtowc+71
0000000000006094         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000006096         call       j_setlocale                                 ; setlocale
000000000000609b         mov        rdx, rax
000000000000609e         mov        eax, 0x1
00000000000060a3         test       rdx, rdx
00000000000060a6         je         loc_60c5

00000000000060a8         lea        rdi, qword [aMemoryExhauste+17]             ; 0x9c00
00000000000060af         mov        ecx, 0x2
00000000000060b4         mov        rsi, rdx
00000000000060b7         rep  cmpsb byte [rsi], byte [rdi]
00000000000060b9         seta       cl
00000000000060bc         sbb        cl, 0x0
00000000000060bf         xor        eax, eax
00000000000060c1         test       cl, cl
00000000000060c3         jne        loc_60d0

                     loc_60c5:
00000000000060c5         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
00000000000060c9         ret
                        ; endp
00000000000060ca         align      16

                     loc_60d0:
00000000000060d0         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
00000000000060d7         mov        ecx, 0x6
00000000000060dc         mov        rsi, rdx
00000000000060df         rep  cmpsb byte [rsi], byte [rdi]
00000000000060e1         seta       al
00000000000060e4         sbb        al, 0x0
00000000000060e6         test       al, al
00000000000060e8         setne      al
00000000000060eb         add        rsp, 0x8
00000000000060ef         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
00000000000060f0         sub        rsp, 0x8                                    ; End of unwind block (FDE at 0xad54), Begin of unwind block (FDE at 0xad74), CODE XREF=gettext_quote.part.1+11
00000000000060f4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
00000000000060f9         call       j_nl_langinfo                               ; nl_langinfo
00000000000060fe         test       rax, rax
0000000000006101         je         loc_6120

0000000000006103         cmp        byte [rax], 0x0
0000000000006106         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000610d         cmove      rax, rdx
0000000000006111         add        rsp, 0x8
0000000000006115         ret
                        ; endp
0000000000006116         align      32

                     loc_6120:
0000000000006120         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
0000000000006127         add        rsp, 0x8
000000000000612b         ret
                        ; endp
000000000000612c         align      16                                          ; End of unwind block (FDE at 0xad74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
0000000000006130         push       r12                                         ; Begin of unwind block (FDE at 0xad94), CODE XREF=close_stream+21
0000000000006132         push       rbp
0000000000006133         push       rbx
0000000000006134         mov        rbx, rdi
0000000000006137         call       j_fileno                                    ; fileno
000000000000613c         test       eax, eax
000000000000613e         mov        rdi, rbx
0000000000006141         js         loc_6197

0000000000006143         call       j___freading                                ; __freading
0000000000006148         test       eax, eax
000000000000614a         jne        loc_6178

                     loc_614c:
000000000000614c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000614f         call       rpl_fflush                                  ; rpl_fflush
0000000000006154         test       eax, eax
0000000000006156         je         loc_6194

0000000000006158         call       j___errno_location                          ; __errno_location
000000000000615d         mov        r12d, dword [rax]
0000000000006160         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
0000000000006163         mov        rbp, rax
0000000000006166         call       j_fclose                                    ; fclose
000000000000616b         test       r12d, r12d
000000000000616e         jne        loc_61a0

                     loc_6170:
0000000000006170         pop        rbx                                         ; CODE XREF=rpl_fclose+121
0000000000006171         pop        rbp
0000000000006172         pop        r12
0000000000006174         ret
                        ; endp
0000000000006175         align      8

                     loc_6178:
0000000000006178         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000617b         call       j_fileno                                    ; fileno
0000000000006180         xor        esi, esi                                    ; argument "__offset" for method j_lseek
0000000000006182         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
0000000000006187         mov        edi, eax                                    ; argument "__fd" for method j_lseek
0000000000006189         call       j_lseek                                     ; lseek
000000000000618e         cmp        rax, 0xffffffffffffffff
0000000000006192         jne        loc_614c

                     loc_6194:
0000000000006194         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_6197:
0000000000006197         pop        rbx                                         ; CODE XREF=rpl_fclose+17
0000000000006198         pop        rbp
0000000000006199         pop        r12
000000000000619b         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_61a0:
00000000000061a0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
00000000000061a4         mov        eax, 0xffffffff
00000000000061a9         jmp        loc_6170
00000000000061ab         align      16                                          ; End of unwind block (FDE at 0xad94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
00000000000061b0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xadcc), CODE XREF=rpl_fclose+31
00000000000061b3         push       rbx
00000000000061b4         mov        rbx, rdi
00000000000061b7         je         loc_61ca

00000000000061b9         call       j___freading                                ; __freading
00000000000061be         test       eax, eax
00000000000061c0         je         loc_61ca

00000000000061c2         test       dword [rbx], 0x100
00000000000061c8         jne        loc_61d8

                     loc_61ca:
00000000000061ca         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
00000000000061cd         pop        rbx
00000000000061ce         jmp        j_fflush                                    ; fflush
                        ; endp
00000000000061d3         align      8

                     loc_61d8:
00000000000061d8         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
00000000000061db         mov        edx, 0x1
00000000000061e0         xor        esi, esi
00000000000061e2         call       rpl_fseeko                                  ; rpl_fseeko
00000000000061e7         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
00000000000061ea         pop        rbx
00000000000061eb         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
00000000000061f0         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xadcc), Begin of unwind block (FDE at 0xadec), CODE XREF=rpl_fflush+50
00000000000061f4         cmp        qword [rdi+0x10], rax
00000000000061f8         je         loc_6200

                     j_j_fseeko:        // fseeko
00000000000061fa         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
00000000000061ff         align      512

                     loc_6200:
0000000000006200         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000006204         cmp        qword [rdi+0x28], rax
0000000000006208         jne        j_j_fseeko                                  ; fseeko

000000000000620a         cmp        qword [rdi+0x48], 0x0
000000000000620f         jne        j_j_fseeko                                  ; fseeko

0000000000006211         push       r12
0000000000006213         push       rbp
0000000000006214         mov        r12d, edx
0000000000006217         push       rbx
0000000000006218         mov        rbp, rsi
000000000000621b         mov        rbx, rdi
000000000000621e         call       j_fileno                                    ; fileno
0000000000006223         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000006226         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000006229         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000622b         call       j_lseek                                     ; lseek
0000000000006230         cmp        rax, 0xffffffffffffffff
0000000000006234         je         loc_6242

0000000000006236         and        dword [rbx], 0xffffffef
0000000000006239         mov        qword [rbx+0x90], rax
0000000000006240         xor        eax, eax

                     loc_6242:
0000000000006242         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
0000000000006243         pop        rbp
0000000000006244         pop        r12
0000000000006246         ret
                        ; endp
0000000000006247         align      16                                          ; End of unwind block (FDE at 0xadec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_28: int8_t, -40
        ;    var_38: int64_t, -56
        ;    var_2A8: int64_t, -680
        ;    var_2B0: int64_t, -688
        ;    var_2B8: int64_t, -696
        ;    var_2C0: int64_t, -704
        ;    var_3A8: int64_t, -936
        ;    var_3B0: int8_t, -944
        ;    var_3B4: int32_t, -948
        ;    var_3B8: int32_t, -952
        ;    var_3BC: int32_t, -956
        ;    var_3C8: int64_t, -968
        ;    var_3D0: int64_t, -976
        ;    var_3D8: int64_t, -984
        ;    var_3E0: int64_t, -992
        ;    var_3E8: int64_t, -1000
        ;    var_3F0: int64_t, -1008
        ;    var_3F8: int64_t, -1016
        ;    var_400: int64_t, -1024
        ;    var_408: int64_t, -1032
        ;    var_410: int64_t, -1040
        ;    var_418: int64_t, -1048
        ;    var_420: int64_t, -1056
        ;    var_421: int8_t, -1057
        ;    var_424: int32_t, -1060
        ;    var_430: int64_t, -1072
        ;    var_440: -1088
        ;    var_450: -1104


                     vasnprintf:
0000000000006250         push       rbp                                         ; Begin of unwind block (FDE at 0xae1c), CODE XREF=rpl_vasprintf+38
0000000000006251         mov        rbp, rsp
0000000000006254         push       r15
0000000000006256         push       r14
0000000000006258         push       r13
000000000000625a         push       r12
000000000000625c         lea        r14, qword [rbp+var_3B0]
0000000000006263         push       rbx
0000000000006264         mov        rbx, rdx
0000000000006267         mov        r12, rcx
000000000000626a         mov        rdx, r14
000000000000626d         sub        rsp, 0x408
0000000000006274         mov        qword [rbp+var_418], rsi
000000000000627b         lea        rsi, qword [rbp+var_2C0]
0000000000006282         mov        qword [rbp+var_3E8], rdi
0000000000006289         mov        rdi, rbx
000000000000628c         mov        qword [rbp+var_410], r14
0000000000006293         mov        rax, qword [fs:0x28]
000000000000629c         mov        qword [rbp+var_38], rax
00000000000062a0         xor        eax, eax
00000000000062a2         mov        qword [rbp+var_408], rsi
00000000000062a9         call       printf_parse                                ; printf_parse
00000000000062ae         test       eax, eax
00000000000062b0         js         loc_7118

00000000000062b6         mov        rsi, r14
00000000000062b9         mov        rdi, r12
00000000000062bc         call       printf_fetchargs                            ; printf_fetchargs
00000000000062c1         test       eax, eax
00000000000062c3         js         loc_7180

00000000000062c9         mov        rax, qword [rbp+var_2B0]
00000000000062d0         mov        rdx, 0xffffffffffffffff
00000000000062d7         add        rax, 0x7
00000000000062db         cmp        rax, 0x6
00000000000062df         cmovbe     rax, rdx
00000000000062e3         add        rax, qword [rbp+var_2A8]
00000000000062ea         jb         loc_6d18

00000000000062f0         mov        rdi, rax
00000000000062f3         xor        r8d, r8d
00000000000062f6         add        rdi, 0x6
00000000000062fa         setb       r8b
00000000000062fe         jb         loc_6d18

0000000000006304         cmp        rdi, 0xf9f
000000000000630b         jbe        loc_6458

0000000000006311         cmp        rdi, 0xffffffffffffffff
0000000000006315         mov        qword [rbp+var_3C8], r8
000000000000631c         je         loc_6d18

0000000000006322         call       j_malloc                                    ; malloc
0000000000006327         test       rax, rax
000000000000632a         mov        qword [rbp+var_3D8], rax
0000000000006331         je         loc_6d18

0000000000006337         mov        r8, qword [rbp+var_3C8]
000000000000633e         mov        qword [rbp+var_420], rax

                     loc_6345:
0000000000006345         xor        r12d, r12d                                  ; CODE XREF=vasnprintf+558
0000000000006348         cmp        qword [rbp+var_3E8], 0x0
0000000000006350         je         loc_635c

0000000000006352         mov        rax, qword [rbp+var_418]
0000000000006359         mov        r12, qword [rax]

                     loc_635c:
000000000000635c         mov        r13, qword [rbp+var_2B8]                    ; CODE XREF=vasnprintf+256
0000000000006363         lea        rax, qword [rbp+var_3BC]
000000000000636a         mov        r15, qword [rbp+var_3E8]
0000000000006371         mov        qword [rbp+var_400], 0x0
000000000000637c         mov        qword [rbp+var_3F0], rax
0000000000006383         mov        rax, rbx
0000000000006386         mov        rbx, r8
0000000000006389         mov        rcx, qword [r13]
000000000000638d         mov        r8, rax
0000000000006390         cmp        rcx, r8
0000000000006393         je         loc_6d01

                     loc_6399:
0000000000006399         sub        rcx, r8                                     ; CODE XREF=vasnprintf+2731
000000000000639c         mov        rax, rbx
000000000000639f         add        rax, rcx
00000000000063a2         mov        r14, rax
00000000000063a5         jae        loc_6488

00000000000063ab         cmp        r12, 0xffffffffffffffff
00000000000063af         je         loc_6e80

                     loc_63b5:
00000000000063b5         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+1250, vasnprintf+2694, loc_6dc0, vasnprintf+2950, vasnprintf+3039, loc_6f18, vasnprintf+3299, vasnprintf+3309, vasnprintf+3371, vasnprintf+3515, loc_7130
00000000000063ba         mov        qword [rbp+var_3C8], rax

                     loc_63c1:
00000000000063c1         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1600, vasnprintf+1618, vasnprintf+1668, vasnprintf+2558, vasnprintf+4338
00000000000063c8         je         loc_63d3

00000000000063ca         test       r15, r15
00000000000063cd         jne        loc_6eb0

                     loc_63d3:
00000000000063d3         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+376, vasnprintf+3176
00000000000063da         test       rax, rax
00000000000063dd         je         loc_63e7

00000000000063df         mov        rdi, rax                                    ; argument "__ptr" for method j_free
00000000000063e2         call       j_free                                      ; free

                     loc_63e7:
00000000000063e7         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+397, vasnprintf+2772
00000000000063ee         mov        rdi, qword [rbp+var_2B8]
00000000000063f5         add        rax, 0x20
00000000000063f9         cmp        rdi, rax
00000000000063fc         je         loc_6403

00000000000063fe         call       j_free                                      ; free

                     loc_6403:
0000000000006403         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+428
000000000000640a         mov        rdi, qword [rbp+var_3A8]
0000000000006411         add        rax, 0x10
0000000000006415         cmp        rdi, rax
0000000000006418         je         loc_641f

000000000000641a         call       j_free                                      ; free

                     loc_641f:
000000000000641f         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+456
0000000000006426         xor        r15d, r15d
0000000000006429         mov        dword [rax], 0xc

                     loc_642f:
000000000000642f         mov        rdi, qword [rbp+var_38]                     ; CODE XREF=vasnprintf+1978, vasnprintf+3774, vasnprintf+3787, vasnprintf+3958, vasnprintf+4183
0000000000006433         xor        rdi, qword [fs:0x28]
000000000000643c         mov        rax, r15
000000000000643f         jne        loc_7347

0000000000006445         lea        rsp, qword [rbp+var_28]
0000000000006449         pop        rbx
000000000000644a         pop        r12
000000000000644c         pop        r13
000000000000644e         pop        r14
0000000000006450         pop        r15
0000000000006452         pop        rbp
0000000000006453         ret
                        ; endp
0000000000006454         align      8

                     loc_6458:
0000000000006458         add        rax, 0x24                                   ; CODE XREF=vasnprintf+187
000000000000645c         mov        qword [rbp+var_420], 0x0
0000000000006467         and        rax, 0xfffffffffffffff0
000000000000646b         sub        rsp, rax
000000000000646e         lea        rax, qword [rsp+0x430+var_421]
0000000000006473         and        rax, 0xfffffffffffffff0
0000000000006477         mov        qword [rbp+var_3D8], rax
000000000000647e         jmp        loc_6345
0000000000006483         align      8

                     loc_6488:
0000000000006488         cmp        r12, rax                                    ; CODE XREF=vasnprintf+341
000000000000648b         jae        loc_64f4

000000000000648d         test       r12, r12
0000000000006490         jne        loc_6dc0

0000000000006496         cmp        rax, 0xc
000000000000649a         ja         loc_6dd2

00000000000064a0         mov        r12d, 0xc

                     loc_64a6:
00000000000064a6         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+2940
00000000000064ad         sete       dl
00000000000064b0         test       r15, r15
00000000000064b3         je         loc_6df8

                     loc_64b9:
00000000000064b9         test       dl, dl                                      ; CODE XREF=vasnprintf+2972
00000000000064bb         jne        loc_6df8

00000000000064c1         mov        rsi, r12                                    ; argument "__size" for method j_realloc
00000000000064c4         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000064c7         mov        qword [rbp+var_3D0], r8
00000000000064ce         mov        qword [rbp+var_3C8], rcx
00000000000064d5         call       j_realloc                                   ; realloc
00000000000064da         test       rax, rax
00000000000064dd         mov        rcx, qword [rbp+var_3C8]
00000000000064e4         mov        r8, qword [rbp+var_3D0]
00000000000064eb         je         loc_6e9b

00000000000064f1         mov        r15, rax

                     loc_64f4:
00000000000064f4         lea        rdi, qword [r15+rbx]                        ; argument "__dest" for method j_memcpy, CODE XREF=vasnprintf+571, vasnprintf+3107, vasnprintf+3123, vasnprintf+3571
00000000000064f8         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
00000000000064fb         mov        rsi, r8                                     ; argument "__src" for method j_memcpy
00000000000064fe         call       j_memcpy                                    ; memcpy

                     loc_6503:
0000000000006503         mov        rax, qword [rbp+var_400]                    ; CODE XREF=vasnprintf+2740
000000000000650a         cmp        qword [rbp+var_2C0], rax
0000000000006511         je         loc_71cb

0000000000006517         movzx      edx, byte [r13+0x48]
000000000000651c         mov        rax, qword [r13+0x50]
0000000000006520         cmp        dl, 0x25
0000000000006523         je         loc_6cb8

0000000000006529         cmp        rax, 0xffffffffffffffff
000000000000652d         je         loc_7176

0000000000006533         mov        r8, qword [rbp+var_3A8]
000000000000653a         shl        rax, 0x5
000000000000653e         add        rax, r8
0000000000006541         cmp        dl, 0x6e
0000000000006544         mov        edi, dword [rax]
0000000000006546         mov        dword [rbp+var_3D0], edi
000000000000654c         je         loc_6d30

0000000000006552         mov        eax, dword [r13+0x10]
0000000000006556         mov        rdi, qword [rbp+var_3D8]
000000000000655d         test       al, 0x1
000000000000655f         mov        byte [rdi], 0x25
0000000000006562         lea        rbx, qword [rdi+1]
0000000000006566         je         loc_6577

0000000000006568         mov        rdi, qword [rbp+var_3D8]
000000000000656f         lea        rbx, qword [rdi+2]
0000000000006573         mov        byte [rdi+1], 0x27

                     loc_6577:
0000000000006577         test       al, 0x2                                     ; CODE XREF=vasnprintf+790
0000000000006579         je         loc_6582

000000000000657b         mov        byte [rbx], 0x2d
000000000000657e         add        rbx, 0x1

                     loc_6582:
0000000000006582         test       al, 0x4                                     ; CODE XREF=vasnprintf+809
0000000000006584         je         loc_658d

0000000000006586         mov        byte [rbx], 0x2b
0000000000006589         add        rbx, 0x1

                     loc_658d:
000000000000658d         test       al, 0x8                                     ; CODE XREF=vasnprintf+820
000000000000658f         je         loc_6598

0000000000006591         mov        byte [rbx], 0x20
0000000000006594         add        rbx, 0x1

                     loc_6598:
0000000000006598         test       al, 0x10                                    ; CODE XREF=vasnprintf+831
000000000000659a         je         loc_65a3

000000000000659c         mov        byte [rbx], 0x23
000000000000659f         add        rbx, 0x1

                     loc_65a3:
00000000000065a3         test       al, 0x40                                    ; CODE XREF=vasnprintf+842
00000000000065a5         je         loc_65ae

00000000000065a7         mov        byte [rbx], 0x49
00000000000065aa         add        rbx, 0x1

                     loc_65ae:
00000000000065ae         test       al, 0x20                                    ; CODE XREF=vasnprintf+853
00000000000065b0         je         loc_65b9

00000000000065b2         mov        byte [rbx], 0x30
00000000000065b5         add        rbx, 0x1

                     loc_65b9:
00000000000065b9         mov        rsi, qword [r13+0x18]                       ; CODE XREF=vasnprintf+864
00000000000065bd         mov        rdx, qword [r13+0x20]
00000000000065c1         cmp        rsi, rdx
00000000000065c4         je         loc_65f6

00000000000065c6         mov        rcx, rdx
00000000000065c9         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
00000000000065cc         mov        qword [rbp+var_3E0], r8
00000000000065d3         sub        rcx, rsi
00000000000065d6         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
00000000000065d9         mov        qword [rbp+var_3C8], rcx
00000000000065e0         call       j_memcpy                                    ; memcpy
00000000000065e5         mov        rcx, qword [rbp+var_3C8]
00000000000065ec         mov        r8, qword [rbp+var_3E0]
00000000000065f3         add        rbx, rcx

                     loc_65f6:
00000000000065f6         mov        rsi, qword [r13+0x30]                       ; CODE XREF=vasnprintf+884
00000000000065fa         mov        rdx, qword [r13+0x38]
00000000000065fe         cmp        rsi, rdx
0000000000006601         je         loc_6633

0000000000006603         mov        rcx, rdx
0000000000006606         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
0000000000006609         mov        qword [rbp+var_3E0], r8
0000000000006610         sub        rcx, rsi
0000000000006613         mov        rdx, rcx                                    ; argument "__n" for method j_memcpy
0000000000006616         mov        qword [rbp+var_3C8], rcx
000000000000661d         call       j_memcpy                                    ; memcpy
0000000000006622         mov        rcx, qword [rbp+var_3C8]
0000000000006629         mov        r8, qword [rbp+var_3E0]
0000000000006630         add        rbx, rcx

                     loc_6633:
0000000000006633         mov        edi, dword [rbp+var_3D0]                    ; CODE XREF=vasnprintf+945
0000000000006639         cmp        edi, 0x10
000000000000663c         ja         loc_666b

000000000000663e         mov        eax, 0x1
0000000000006643         mov        ecx, edi
0000000000006645         shl        rax, cl
0000000000006648         test       eax, 0x14180
000000000000664d         jne        loc_6664

000000000000664f         test       ah, 0x10
0000000000006652         jne        loc_6fb0

0000000000006658         test       ah, 0x6
000000000000665b         je         loc_666b

000000000000665d         mov        byte [rbx], 0x6c
0000000000006660         add        rbx, 0x1

                     loc_6664:
0000000000006664         mov        byte [rbx], 0x6c                            ; CODE XREF=vasnprintf+1021
0000000000006667         add        rbx, 0x1

                     loc_666b:
000000000000666b         movzx      eax, byte [r13+0x48]                        ; CODE XREF=vasnprintf+1004, vasnprintf+1035, vasnprintf+3431
0000000000006670         mov        byte [rbx+1], 0x0
0000000000006674         mov        byte [rbx], al
0000000000006676         mov        rax, qword [r13+0x28]
000000000000667a         cmp        rax, 0xffffffffffffffff
000000000000667e         je         loc_6db0

0000000000006684         shl        rax, 0x5
0000000000006688         add        rax, r8
000000000000668b         cmp        dword [rax], 0x5
000000000000668e         jne        loc_7176

0000000000006694         mov        eax, dword [rax+0x10]
0000000000006697         mov        dword [rbp+var_3E0], 0x1
00000000000066a1         mov        dword [rbp+var_3B8], eax

                     loc_66a7:
00000000000066a7         mov        rax, qword [r13+0x40]                       ; CODE XREF=vasnprintf+2922
00000000000066ab         cmp        rax, 0xffffffffffffffff
00000000000066af         je         loc_66dc

00000000000066b1         shl        rax, 0x5
00000000000066b5         add        r8, rax
00000000000066b8         cmp        dword [r8], 0x5
00000000000066bc         jne        loc_7176

00000000000066c2         mov        eax, dword [rbp+var_3E0]
00000000000066c8         mov        edx, dword [r8+0x10]
00000000000066cc         mov        dword [rbp+rax*4+var_3B8], edx
00000000000066d3         lea        eax, dword [rax+1]
00000000000066d6         mov        dword [rbp+var_3E0], eax

                     loc_66dc:
00000000000066dc         mov        rax, r14                                    ; CODE XREF=vasnprintf+1119
00000000000066df         xor        edx, edx
00000000000066e1         add        rax, 0x2
00000000000066e5         jb         loc_734c

00000000000066eb         cmp        r12, rax
00000000000066ee         jae        loc_673b

00000000000066f0         test       r12, r12
00000000000066f3         jne        loc_6f18

00000000000066f9         cmp        rax, 0xc
00000000000066fd         ja         loc_6f30

0000000000006703         mov        r12d, 0xc

                     loc_6709:
0000000000006709         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3284
0000000000006710         sete       dl
0000000000006713         test       r15, r15
0000000000006716         je         loc_6f60

                     loc_671c:
000000000000671c         test       dl, dl                                      ; CODE XREF=vasnprintf+3331
000000000000671e         jne        loc_6f60

0000000000006724         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006727         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000672a         call       j_realloc                                   ; realloc
000000000000672f         test       rax, rax
0000000000006732         je         loc_63b5

0000000000006738         mov        r15, rax

                     loc_673b:
000000000000673b         mov        byte [r15+r14], 0x0                         ; CODE XREF=vasnprintf+1182, vasnprintf+3411, vasnprintf+3795, vasnprintf+4357
0000000000006740         call       j___errno_location                          ; __errno_location
0000000000006745         mov        qword [rbp+var_3C8], rax
000000000000674c         mov        eax, dword [rax]
000000000000674e         mov        qword [rbp+var_3F8], rbx
0000000000006755         mov        dword [rbp+var_424], eax
000000000000675b         nop        dword [rax+rax]

                     loc_6760:
0000000000006760         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1591, vasnprintf+1677, vasnprintf+2598, vasnprintf+2652, vasnprintf+2755, vasnprintf+4332
0000000000006767         mov        rbx, r12
000000000000676a         mov        r10d, 0x7fffffff
0000000000006770         sub        rbx, r14
0000000000006773         mov        dword [rbp+var_3BC], 0xffffffff
000000000000677d         cmp        rbx, 0x7fffffff
0000000000006784         mov        dword [rax], 0x0
000000000000678a         mov        eax, dword [rbp+var_3D0]
0000000000006790         cmovbe     r10, rbx
0000000000006794         cmp        eax, 0x11
0000000000006797         ja         loc_7176

000000000000679d         lea        rsi, qword [switch_table_9c10]              ; switch_table_9c10
00000000000067a4         movsxd     rax, dword [rsi+rax*4]
00000000000067a8         add        rax, rsi
00000000000067ab         jmp        rax                                         ; switch statement using table at 0x9c10, with 18 cases, 0x67b0,0x68e8,0x6a10,0x6a98,0x6b18,0x6b58,0x6be0,0x6c10,0x7176
00000000000067ad         align      16

                     loc_67b0:
00000000000067b0         mov        rax, qword [r13+0x50]                       ; case 17, CODE XREF=vasnprintf+1371
00000000000067b4         lea        rdi, qword [r15+r14]
00000000000067b8         shl        rax, 0x5
00000000000067bc         add        rax, qword [rbp+var_3A8]
00000000000067c3         mov        r9, qword [rax+0x10]
00000000000067c7         mov        eax, dword [rbp+var_3E0]
00000000000067cd         cmp        eax, 0x1
00000000000067d0         je         loc_6c98

00000000000067d6         cmp        eax, 0x2
00000000000067d9         je         loc_6c80

00000000000067df         sub        rsp, 0x8
00000000000067e3         push       qword [rbp+var_3F0]

                     loc_67e9:
00000000000067e9         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+3262
00000000000067f0         mov        rsi, r10
00000000000067f3         mov        rcx, 0xffffffffffffffff
00000000000067fa         mov        edx, 0x1
00000000000067ff         xor        eax, eax
0000000000006801         mov        qword [rbp+var_430], r10
0000000000006808         call       j___snprintf_chk                            ; __snprintf_chk
000000000000680d         pop        rsi
000000000000680e         pop        rdi
000000000000680f         mov        r10, qword [rbp+var_430]

                     loc_6816:
0000000000006816         mov        ecx, dword [rbp+var_3BC]                    ; CODE XREF=vasnprintf+2109, vasnprintf+2238, vasnprintf+2433, vasnprintf+3237
000000000000681c         test       ecx, ecx
000000000000681e         js         loc_695c

                     loc_6824:
0000000000006824         movsxd     rdx, ecx                                    ; CODE XREF=vasnprintf+1798
0000000000006827         cmp        rdx, r10
000000000000682a         jae        loc_683a

000000000000682c         add        rdx, r15
000000000000682f         cmp        byte [rdx+r14], 0x0
0000000000006834         jne        loc_7176

                     loc_683a:
000000000000683a         cmp        ecx, eax                                    ; CODE XREF=vasnprintf+1498
000000000000683c         jge        loc_6846

                     loc_683e:
000000000000683e         mov        dword [rbp+var_3BC], eax                    ; CODE XREF=vasnprintf+1823
0000000000006844         mov        ecx, eax

                     loc_6846:
0000000000006846         lea        eax, dword [rcx+1]                          ; CODE XREF=vasnprintf+1516
0000000000006849         cmp        rax, r10
000000000000684c         jb         loc_7080

0000000000006852         cmp        rbx, 0x7ffffffe
0000000000006859         ja         loc_70a0

000000000000685f         lea        rsi, qword [r12+r12]
0000000000006863         lea        edx, dword [rcx+2]
0000000000006866         test       r12, r12
0000000000006869         mov        rax, 0xffffffffffffffff
0000000000006870         cmovns     rax, rsi
0000000000006874         add        rdx, r14
0000000000006877         jb         loc_7338

000000000000687d         cmp        rax, rdx
0000000000006880         cmovb      rax, rdx
0000000000006884         cmp        r12, rax
0000000000006887         jae        loc_6760

000000000000688d         test       r12, r12
0000000000006890         js         loc_63c1

0000000000006896         cmp        rsi, rax
0000000000006899         mov        r12, rsi
000000000000689c         jae        loc_68ab

000000000000689e         cmp        rax, 0xffffffffffffffff
00000000000068a2         je         loc_63c1

00000000000068a8         mov        r12, rax

                     loc_68ab:
00000000000068ab         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1612
00000000000068b2         sete       bl
00000000000068b5         test       r15, r15
00000000000068b8         je         loc_6c40

00000000000068be         test       bl, bl
00000000000068c0         jne        loc_6c40

00000000000068c6         mov        rsi, r12                                    ; argument "__size" for method j_realloc
00000000000068c9         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
00000000000068cc         call       j_realloc                                   ; realloc
00000000000068d1         test       rax, rax
00000000000068d4         je         loc_63c1

00000000000068da         mov        r15, rax
00000000000068dd         jmp        loc_6760
00000000000068e2         align      8

                     loc_68e8:
00000000000068e8         mov        rax, qword [r13+0x50]                       ; case 14, CODE XREF=vasnprintf+1371
00000000000068ec         lea        rdi, qword [r15+r14]
00000000000068f0         shl        rax, 0x5
00000000000068f4         add        rax, qword [rbp+var_3A8]
00000000000068fb         mov        r9d, dword [rax+0x10]
00000000000068ff         mov        eax, dword [rbp+var_3E0]
0000000000006905         cmp        eax, 0x1
0000000000006908         je         loc_6b40

                     loc_690e:
000000000000690e         cmp        eax, 0x2                                    ; CODE XREF=vasnprintf+2281, vasnprintf+2481, vasnprintf+2529
0000000000006911         je         loc_6b88

                     loc_6917:
0000000000006917         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2350
000000000000691b         push       qword [rbp+var_3F0]

                     loc_6921:
0000000000006921         mov        r8, qword [rbp+var_3D8]                     ; CODE XREF=vasnprintf+2303
0000000000006928         mov        rcx, 0xffffffffffffffff
000000000000692f         mov        edx, 0x1
0000000000006934         mov        rsi, r10
0000000000006937         xor        eax, eax
0000000000006939         mov        qword [rbp+var_430], r10
0000000000006940         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006945         pop        rdx
0000000000006946         pop        rcx
0000000000006947         mov        ecx, dword [rbp+var_3BC]
000000000000694d         mov        r10, qword [rbp+var_430]
0000000000006954         test       ecx, ecx
0000000000006956         jns        loc_6824

                     loc_695c:
000000000000695c         mov        rdi, qword [rbp+var_3F8]                    ; CODE XREF=vasnprintf+1486
0000000000006963         cmp        byte [rdi+1], 0x0
0000000000006967         jne        loc_6ca8

000000000000696d         test       eax, eax
000000000000696f         jns        loc_683e

0000000000006975         mov        rax, qword [rbp+var_3C8]
000000000000697c         mov        ebx, dword [rax]
000000000000697e         test       ebx, ebx
0000000000006980         jne        loc_69a0

0000000000006982         movzx      eax, byte [r13+0x48]
0000000000006987         mov        ebx, 0x16
000000000000698c         and        eax, 0xffffffef
000000000000698f         cmp        al, 0x63
0000000000006991         mov        eax, 0x54
0000000000006996         cmove      ebx, eax
0000000000006999         nop        dword [rax]

                     loc_69a0:
00000000000069a0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1840
00000000000069a7         je         loc_69b2

00000000000069a9         test       r15, r15
00000000000069ac         jne        loc_715c

                     loc_69b2:
00000000000069b2         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+1879, vasnprintf+3860
00000000000069b9         test       rax, rax
00000000000069bc         je         loc_69c6

00000000000069be         mov        rdi, rax                                    ; argument "__ptr" for method j_free
00000000000069c1         call       j_free                                      ; free

                     loc_69c6:
00000000000069c6         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+1900
00000000000069cd         mov        rdi, qword [rbp+var_2B8]
00000000000069d4         add        rax, 0x20
00000000000069d8         cmp        rdi, rax
00000000000069db         je         loc_69e2

00000000000069dd         call       j_free                                      ; free

                     loc_69e2:
00000000000069e2         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+1931
00000000000069e9         mov        rdi, qword [rbp+var_3A8]
00000000000069f0         add        rax, 0x10
00000000000069f4         cmp        rdi, rax
00000000000069f7         je         loc_69fe

00000000000069f9         call       j_free                                      ; free

                     loc_69fe:
00000000000069fe         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1959
0000000000006a05         xor        r15d, r15d
0000000000006a08         mov        dword [rax], ebx
0000000000006a0a         jmp        loc_642f
0000000000006a0f         align      16

                     loc_6a10:
0000000000006a10         mov        rax, qword [r13+0x50]                       ; case 12, CODE XREF=vasnprintf+1371
0000000000006a14         lea        rdi, qword [r15+r14]
0000000000006a18         shl        rax, 0x5
0000000000006a1c         add        rax, qword [rbp+var_3A8]
0000000000006a23         fld        tword [rax+0x10]
0000000000006a26         mov        eax, dword [rbp+var_3E0]
0000000000006a2c         cmp        eax, 0x1
0000000000006a2f         je         loc_7060

0000000000006a35         cmp        eax, 0x2
0000000000006a38         jne        loc_6f00

0000000000006a3e         mov        eax, dword [rbp+var_3B4]
0000000000006a44         sub        rsp, 0x8
0000000000006a48         push       qword [rbp+var_3F0]
0000000000006a4e         mov        r9d, dword [rbp+var_3B8]
0000000000006a55         mov        r8, qword [rbp+var_3D8]
0000000000006a5c         mov        rsi, r10
0000000000006a5f         sub        rsp, 0x18
0000000000006a63         mov        rcx, 0xffffffffffffffff
0000000000006a6a         mov        edx, 0x1
0000000000006a6f         fstp       tword [rsp+0x458+var_450]
0000000000006a73         push       rax
0000000000006a74         xor        eax, eax
0000000000006a76         mov        qword [rbp+var_430], r10
0000000000006a7d         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006a82         add        rsp, 0x30
0000000000006a86         mov        r10, qword [rbp+var_430]
0000000000006a8d         jmp        loc_6816
0000000000006a92         align      8

                     loc_6a98:
0000000000006a98         mov        rax, qword [r13+0x50]                       ; case 11, CODE XREF=vasnprintf+1371
0000000000006a9c         lea        rdi, qword [r15+r14]
0000000000006aa0         shl        rax, 0x5
0000000000006aa4         add        rax, qword [rbp+var_3A8]
0000000000006aab         movsd      xmm0, qword [rax+0x10]
0000000000006ab0         mov        eax, dword [rbp+var_3E0]
0000000000006ab6         cmp        eax, 0x1
0000000000006ab9         je         loc_7050

0000000000006abf         cmp        eax, 0x2
0000000000006ac2         jne        loc_6ec0

0000000000006ac8         mov        eax, dword [rbp+var_3B4]
0000000000006ace         push       qword [rbp+var_3F0]
0000000000006ad4         push       rax

                     loc_6ad5:
0000000000006ad5         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3594
0000000000006adc         mov        r8, qword [rbp+var_3D8]
0000000000006ae3         mov        rsi, r10
0000000000006ae6         mov        rcx, 0xffffffffffffffff
0000000000006aed         mov        edx, 0x1
0000000000006af2         mov        eax, 0x1
0000000000006af7         mov        qword [rbp+var_430], r10
0000000000006afe         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006b03         pop        r8
0000000000006b05         mov        r10, qword [rbp+var_430]
0000000000006b0c         pop        r9
0000000000006b0e         jmp        loc_6816
0000000000006b13         align      8

                     loc_6b18:
0000000000006b18         mov        rax, qword [r13+0x50]                       ; case 4, CODE XREF=vasnprintf+1371
0000000000006b1c         lea        rdi, qword [r15+r14]
0000000000006b20         shl        rax, 0x5
0000000000006b24         add        rax, qword [rbp+var_3A8]
0000000000006b2b         movzx      r9d, word [rax+0x10]
0000000000006b30         mov        eax, dword [rbp+var_3E0]
0000000000006b36         cmp        eax, 0x1
0000000000006b39         jne        loc_690e

0000000000006b3f         nop

                     loc_6b40:
0000000000006b40         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1720, vasnprintf+2345, vasnprintf+2487, vasnprintf+2535
0000000000006b46         push       r9

                     loc_6b48:
0000000000006b48         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+2640
0000000000006b4f         jmp        loc_6921
0000000000006b54         align      8

                     loc_6b58:
0000000000006b58         mov        rax, qword [r13+0x50]                       ; case 3, CODE XREF=vasnprintf+1371
0000000000006b5c         lea        rdi, qword [r15+r14]
0000000000006b60         shl        rax, 0x5
0000000000006b64         add        rax, qword [rbp+var_3A8]
0000000000006b6b         movsx      r9d, word [rax+0x10]
0000000000006b70         mov        eax, dword [rbp+var_3E0]
0000000000006b76         cmp        eax, 0x1
0000000000006b79         je         loc_6b40

0000000000006b7b         cmp        eax, 0x2
0000000000006b7e         jne        loc_6917

0000000000006b84         nop        dword [rax]

                     loc_6b88:
0000000000006b88         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1729
0000000000006b8c         push       qword [rbp+var_3F0]
0000000000006b92         push       r9

                     loc_6b94:
0000000000006b94         mov        eax, dword [rbp+var_3B4]                    ; CODE XREF=vasnprintf+2620
0000000000006b9a         push       rax

                     loc_6b9b:
0000000000006b9b         mov        r9d, dword [rbp+var_3B8]                    ; CODE XREF=vasnprintf+3617
0000000000006ba2         mov        r8, qword [rbp+var_3D8]
0000000000006ba9         mov        rsi, r10
0000000000006bac         mov        rcx, 0xffffffffffffffff
0000000000006bb3         mov        edx, 0x1
0000000000006bb8         xor        eax, eax
0000000000006bba         mov        qword [rbp+var_430], r10
0000000000006bc1         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006bc6         add        rsp, 0x20
0000000000006bca         mov        r10, qword [rbp+var_430]
0000000000006bd1         jmp        loc_6816
0000000000006bd6         align      32

                     loc_6be0:
0000000000006be0         mov        rax, qword [r13+0x50]                       ; case 2, CODE XREF=vasnprintf+1371
0000000000006be4         lea        rdi, qword [r15+r14]
0000000000006be8         shl        rax, 0x5
0000000000006bec         add        rax, qword [rbp+var_3A8]
0000000000006bf3         movzx      r9d, byte [rax+0x10]
0000000000006bf8         mov        eax, dword [rbp+var_3E0]
0000000000006bfe         cmp        eax, 0x1
0000000000006c01         jne        loc_690e

0000000000006c07         jmp        loc_6b40
0000000000006c0c         align      16

                     loc_6c10:
0000000000006c10         mov        rax, qword [r13+0x50]                       ; case 1, CODE XREF=vasnprintf+1371
0000000000006c14         lea        rdi, qword [r15+r14]
0000000000006c18         shl        rax, 0x5
0000000000006c1c         add        rax, qword [rbp+var_3A8]
0000000000006c23         movsx      r9d, byte [rax+0x10]
0000000000006c28         mov        eax, dword [rbp+var_3E0]
0000000000006c2e         cmp        eax, 0x1
0000000000006c31         jne        loc_690e

0000000000006c37         jmp        loc_6b40
0000000000006c3c         align      64

                     loc_6c40:
0000000000006c40         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1640, vasnprintf+1648
0000000000006c43         call       j_malloc                                    ; malloc
0000000000006c48         test       rax, rax
0000000000006c4b         mov        rcx, rax
0000000000006c4e         je         loc_63c1

0000000000006c54         test       r14, r14
0000000000006c57         je         loc_6d10

0000000000006c5d         test       bl, bl
0000000000006c5f         je         loc_6d10

0000000000006c65         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006c68         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006c6b         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006c6e         call       j_memcpy                                    ; memcpy
0000000000006c73         mov        r15, rax
0000000000006c76         jmp        loc_6760
0000000000006c7b         align      128

                     loc_6c80:
0000000000006c80         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+1417
0000000000006c84         push       qword [rbp+var_3F0]
0000000000006c8a         push       r9
0000000000006c8c         jmp        loc_6b94
0000000000006c91         align      8

                     loc_6c98:
0000000000006c98         push       qword [rbp+var_3F0]                         ; CODE XREF=vasnprintf+1408
0000000000006c9e         push       r9
0000000000006ca0         jmp        loc_6b48
0000000000006ca5         align      8

                     loc_6ca8:
0000000000006ca8         mov        byte [rdi+1], 0x0                           ; CODE XREF=vasnprintf+1815
0000000000006cac         jmp        loc_6760
0000000000006cb1         align      8

                     loc_6cb8:
0000000000006cb8         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+723
0000000000006cbc         jne        loc_7176

0000000000006cc2         mov        rax, r14
0000000000006cc5         add        rax, 0x1
0000000000006cc9         mov        rbx, rax
0000000000006ccc         jae        loc_6d58

0000000000006cd2         cmp        r12, 0xffffffffffffffff
0000000000006cd6         jne        loc_63b5

0000000000006cdc         mov        rbx, r12

                     loc_6cdf:
0000000000006cdf         mov        byte [r15+r14], 0x25                        ; CODE XREF=vasnprintf+2827, vasnprintf+2904, vasnprintf+3555, vasnprintf+3847

                     loc_6ce4:
0000000000006ce4         mov        r8, qword [r13+8]                           ; CODE XREF=vasnprintf+3142, vasnprintf+3446, vasnprintf+3462, vasnprintf+3479, vasnprintf+3653
0000000000006ce8         add        r13, 0x58
0000000000006cec         mov        rcx, qword [r13]
0000000000006cf0         add        qword [rbp+var_400], 0x1
0000000000006cf8         cmp        rcx, r8
0000000000006cfb         jne        loc_6399

                     loc_6d01:
0000000000006d01         mov        r14, rbx                                    ; CODE XREF=vasnprintf+323
0000000000006d04         jmp        loc_6503
0000000000006d09         align      16

                     loc_6d10:
0000000000006d10         mov        r15, rcx                                    ; CODE XREF=vasnprintf+2567, vasnprintf+2575
0000000000006d13         jmp        loc_6760

                     loc_6d18:
0000000000006d18         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+154, vasnprintf+174, vasnprintf+204, vasnprintf+225
0000000000006d1d         mov        qword [rbp+var_3C8], rax
0000000000006d24         jmp        loc_63e7
0000000000006d29         align      16

                     loc_6d30:
0000000000006d30         mov        edx, edi                                    ; CODE XREF=vasnprintf+764
0000000000006d32         sub        edx, 0x12
0000000000006d35         cmp        edx, 0x4
0000000000006d38         ja         loc_7176

0000000000006d3e         lea        rdi, qword [switch_table_9c58]              ; switch_table_9c58
0000000000006d45         mov        rax, qword [rax+0x10]
0000000000006d49         movsxd     rdx, dword [rdi+rdx*4]
0000000000006d4d         add        rdx, rdi
0000000000006d50         jmp        rdx                                         ; switch statement using table at 0x9c58, with 5 cases, 0x6e90,0x6fc0,0x6fd0,0x6fe0
0000000000006d52         align      8

                     loc_6d58:
0000000000006d58         cmp        r12, rax                                    ; CODE XREF=vasnprintf+2684
0000000000006d5b         jae        loc_6cdf

0000000000006d5d         test       r12, r12
0000000000006d60         jne        loc_7130

0000000000006d66         cmp        rax, 0xc
0000000000006d6a         ja         loc_7142

0000000000006d70         mov        r12d, 0xc

                     loc_6d76:
0000000000006d76         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3820, vasnprintf+3839
0000000000006d7d         sete       dl
0000000000006d80         test       r15, r15
0000000000006d83         je         loc_6ff0

0000000000006d89         test       dl, dl
0000000000006d8b         jne        loc_6ff0

0000000000006d91         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000006d94         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000006d97         call       j_realloc                                   ; realloc
0000000000006d9c         test       rax, rax
0000000000006d9f         je         loc_6e9b

0000000000006da5         mov        r15, rax
0000000000006da8         jmp        loc_6cdf
0000000000006dad         align      16

                     loc_6db0:
0000000000006db0         mov        dword [rbp+var_3E0], 0x0                    ; CODE XREF=vasnprintf+1070
0000000000006dba         jmp        loc_66a7
0000000000006dbf         align      64

                     loc_6dc0:
0000000000006dc0         js         loc_63b5                                    ; CODE XREF=vasnprintf+576

0000000000006dc6         add        r12, r12
0000000000006dc9         cmp        r12, rax
0000000000006dcc         jae        loc_64a6

                     loc_6dd2:
0000000000006dd2         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+586
0000000000006dd6         je         loc_63b5

0000000000006ddc         cmp        r15, qword [rbp+var_3E8]
0000000000006de3         mov        r12, rax
0000000000006de6         sete       dl
0000000000006de9         test       r15, r15
0000000000006dec         jne        loc_64b9

0000000000006df2         nop        word [rax+rax]

                     loc_6df8:
0000000000006df8         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+611, vasnprintf+619
0000000000006dfb         mov        qword [rbp+var_3E0], r8
0000000000006e02         mov        byte [rbp+var_3D0], dl
0000000000006e08         mov        qword [rbp+var_3C8], rcx
0000000000006e0f         call       j_malloc                                    ; malloc
0000000000006e14         test       rax, rax
0000000000006e17         mov        r9, rax
0000000000006e1a         mov        rcx, qword [rbp+var_3C8]
0000000000006e21         movzx      edx, byte [rbp+var_3D0]
0000000000006e28         mov        r8, qword [rbp+var_3E0]
0000000000006e2f         je         loc_63b5

0000000000006e35         test       rbx, rbx
0000000000006e38         je         loc_7040

0000000000006e3e         test       dl, dl
0000000000006e40         je         loc_7040

0000000000006e46         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006e49         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000006e4c         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006e4f         mov        qword [rbp+var_3D0], r8
0000000000006e56         mov        qword [rbp+var_3C8], rcx
0000000000006e5d         call       j_memcpy                                    ; memcpy
0000000000006e62         mov        rcx, qword [rbp+var_3C8]
0000000000006e69         mov        r15, rax
0000000000006e6c         mov        r8, qword [rbp+var_3D0]
0000000000006e73         jmp        loc_64f4
0000000000006e78         align      128

                     loc_6e80:
0000000000006e80         mov        r14, r12                                    ; CODE XREF=vasnprintf+351
0000000000006e83         jmp        loc_64f4
0000000000006e88         align      16

                     loc_6e90:
0000000000006e90         mov        qword [rax], r14                            ; case 4, CODE XREF=vasnprintf+2816
0000000000006e93         mov        rbx, r14
0000000000006e96         jmp        loc_6ce4

                     loc_6e9b:
0000000000006e9b         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+667, vasnprintf+2895, vasnprintf+4051
0000000000006ea0         mov        qword [rbp+var_3C8], rax
0000000000006ea7         nop        word [rax+rax]

                     loc_6eb0:
0000000000006eb0         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+381
0000000000006eb3         call       j_free                                      ; free
0000000000006eb8         jmp        loc_63d3
0000000000006ebd         align      64

                     loc_6ec0:
0000000000006ec0         mov        r9, qword [rbp+var_3F0]                     ; CODE XREF=vasnprintf+2162
0000000000006ec7         mov        r8, qword [rbp+var_3D8]
0000000000006ece         mov        rsi, r10
0000000000006ed1         mov        rcx, 0xffffffffffffffff
0000000000006ed8         mov        edx, 0x1
0000000000006edd         mov        eax, 0x1
0000000000006ee2         mov        qword [rbp+var_430], r10
0000000000006ee9         call       j___snprintf_chk                            ; __snprintf_chk
0000000000006eee         mov        r10, qword [rbp+var_430]
0000000000006ef5         jmp        loc_6816
0000000000006efa         align      256

                     loc_6f00:
0000000000006f00         sub        rsp, 0x10                                   ; CODE XREF=vasnprintf+2024
0000000000006f04         mov        r9, qword [rbp+var_3F0]
0000000000006f0b         fstp       tword [rsp+0x440+var_440]
0000000000006f0e         jmp        loc_67e9
0000000000006f13         align      8

                     loc_6f18:
0000000000006f18         js         loc_63b5                                    ; CODE XREF=vasnprintf+1187

0000000000006f1e         add        r12, r12
0000000000006f21         cmp        r12, rax
0000000000006f24         jae        loc_6709

0000000000006f2a         nop        word [rax+rax]

                     loc_6f30:
0000000000006f30         test       rdx, rdx                                    ; CODE XREF=vasnprintf+1197, vasnprintf+4372
0000000000006f33         jne        loc_63b5

0000000000006f39         cmp        rax, 0xffffffffffffffff
0000000000006f3d         je         loc_63b5

0000000000006f43         cmp        r15, qword [rbp+var_3E8]
0000000000006f4a         mov        r12, rax
0000000000006f4d         sete       dl
0000000000006f50         test       r15, r15
0000000000006f53         jne        loc_671c

0000000000006f59         nop        dword [rax]

                     loc_6f60:
0000000000006f60         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+1222, vasnprintf+1230
0000000000006f63         mov        byte [rbp+var_3C8], dl
0000000000006f69         call       j_malloc                                    ; malloc
0000000000006f6e         test       rax, rax
0000000000006f71         mov        rcx, rax
0000000000006f74         movzx      edx, byte [rbp+var_3C8]
0000000000006f7b         je         loc_63b5

0000000000006f81         test       r14, r14
0000000000006f84         je         loc_7120

0000000000006f8a         test       dl, dl
0000000000006f8c         je         loc_7120

0000000000006f92         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000006f95         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000006f98         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006f9b         call       j_memcpy                                    ; memcpy
0000000000006fa0         mov        r15, rax
0000000000006fa3         jmp        loc_673b
0000000000006fa8         align      16

                     loc_6fb0:
0000000000006fb0         mov        byte [rbx], 0x4c                            ; CODE XREF=vasnprintf+1026
0000000000006fb3         add        rbx, 0x1
0000000000006fb7         jmp        loc_666b
0000000000006fbc         align      64

                     loc_6fc0:
0000000000006fc0         mov        byte [rax], r14b                            ; case 0, CODE XREF=vasnprintf+2816
0000000000006fc3         mov        rbx, r14
0000000000006fc6         jmp        loc_6ce4
0000000000006fcb         align      16

                     loc_6fd0:
0000000000006fd0         mov        dword [rax], r14d                           ; case 2, CODE XREF=vasnprintf+2816
0000000000006fd3         mov        rbx, r14
0000000000006fd6         jmp        loc_6ce4
0000000000006fdb         align      32

                     loc_6fe0:
0000000000006fe0         mov        word [rax], r14w                            ; case 1, CODE XREF=vasnprintf+2816
0000000000006fe4         mov        rbx, r14
0000000000006fe7         jmp        loc_6ce4
0000000000006fec         align      16

                     loc_6ff0:
0000000000006ff0         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+2867, vasnprintf+2875
0000000000006ff3         mov        byte [rbp+var_3C8], dl
0000000000006ff9         call       j_malloc                                    ; malloc
0000000000006ffe         test       rax, rax
0000000000007001         mov        rcx, rax
0000000000007004         movzx      edx, byte [rbp+var_3C8]
000000000000700b         je         loc_63b5

0000000000007011         test       r14, r14
0000000000007014         je         loc_7154

000000000000701a         test       dl, dl
000000000000701c         je         loc_7154

0000000000007022         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
0000000000007025         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
0000000000007028         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
000000000000702b         call       j_memcpy                                    ; memcpy
0000000000007030         mov        r15, rax
0000000000007033         jmp        loc_6cdf
0000000000007038         align      64

                     loc_7040:
0000000000007040         mov        r15, r9                                     ; CODE XREF=vasnprintf+3048, vasnprintf+3056
0000000000007043         jmp        loc_64f4
0000000000007048         align      16

                     loc_7050:
0000000000007050         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2153
0000000000007054         push       qword [rbp+var_3F0]
000000000000705a         jmp        loc_6ad5
000000000000705f         align      32

                     loc_7060:
0000000000007060         sub        rsp, 0x8                                    ; CODE XREF=vasnprintf+2015
0000000000007064         push       qword [rbp+var_3F0]
000000000000706a         sub        rsp, 0x10
000000000000706e         fstp       tword [rsp+0x450+var_450]
0000000000007071         jmp        loc_6b9b
0000000000007076         align      128

                     loc_7080:
0000000000007080         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+1532
0000000000007087         mov        edi, dword [rbp+var_424]
000000000000708d         movsxd     rbx, ecx
0000000000007090         add        rbx, r14
0000000000007093         mov        dword [rax], edi
0000000000007095         jmp        loc_6ce4
000000000000709a         align      32

                     loc_70a0:
00000000000070a0         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+1545
00000000000070a7         je         loc_70b2

00000000000070a9         test       r15, r15
00000000000070ac         jne        loc_7169

                     loc_70b2:
00000000000070b2         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+3671, vasnprintf+3873
00000000000070b9         test       rax, rax
00000000000070bc         je         loc_70c6

00000000000070be         mov        rdi, rax                                    ; argument "__ptr" for method j_free
00000000000070c1         call       j_free                                      ; free

                     loc_70c6:
00000000000070c6         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+3692
00000000000070cd         mov        rdi, qword [rbp+var_2B8]
00000000000070d4         add        rax, 0x20
00000000000070d8         cmp        rdi, rax
00000000000070db         je         loc_70e2

00000000000070dd         call       j_free                                      ; free

                     loc_70e2:
00000000000070e2         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3723
00000000000070e9         mov        rdi, qword [rbp+var_3A8]
00000000000070f0         add        rax, 0x10
00000000000070f4         cmp        rdi, rax
00000000000070f7         je         loc_70fe

00000000000070f9         call       j_free                                      ; free

                     loc_70fe:
00000000000070fe         mov        rax, qword [rbp+var_3C8]                    ; CODE XREF=vasnprintf+3751
0000000000007105         xor        r15d, r15d
0000000000007108         mov        dword [rax], 0x4b
000000000000710e         jmp        loc_642f
0000000000007113         align      8

                     loc_7118:
0000000000007118         xor        r15d, r15d                                  ; CODE XREF=vasnprintf+96
000000000000711b         jmp        loc_642f

                     loc_7120:
0000000000007120         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3380, vasnprintf+3388
0000000000007123         jmp        loc_673b
0000000000007128         align      16

                     loc_7130:
0000000000007130         js         loc_63b5                                    ; CODE XREF=vasnprintf+2832

0000000000007136         add        r12, r12
0000000000007139         cmp        r12, rax
000000000000713c         jae        loc_6d76

                     loc_7142:
0000000000007142         cmp        rax, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+2842
0000000000007146         je         loc_63b5

000000000000714c         mov        r12, rax
000000000000714f         jmp        loc_6d76

                     loc_7154:
0000000000007154         mov        r15, rcx                                    ; CODE XREF=vasnprintf+3524, vasnprintf+3532
0000000000007157         jmp        loc_6cdf

                     loc_715c:
000000000000715c         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+1884
000000000000715f         call       j_free                                      ; free
0000000000007164         jmp        loc_69b2

                     loc_7169:
0000000000007169         mov        rdi, r15                                    ; argument "__ptr" for method j_free, CODE XREF=vasnprintf+3676
000000000000716c         call       j_free                                      ; free
0000000000007171         jmp        loc_70b2

                     loc_7176:
0000000000007176         call       j_abort                                     ; abort, case 0, CODE XREF=vasnprintf+733, vasnprintf+1086, vasnprintf+1132, vasnprintf+1351, vasnprintf+1371, vasnprintf+1508, vasnprintf+2668, vasnprintf+2792
                        ; endp
000000000000717b         align      128

                     loc_7180:
0000000000007180         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+115
0000000000007187         mov        rdi, qword [rbp+var_2B8]
000000000000718e         add        rax, 0x20
0000000000007192         cmp        rdi, rax
0000000000007195         je         loc_719c

0000000000007197         call       j_free                                      ; free

                     loc_719c:
000000000000719c         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+3909
00000000000071a3         mov        rdi, qword [rbp+var_3A8]
00000000000071aa         add        rax, 0x10
00000000000071ae         cmp        rdi, rax
00000000000071b1         je         loc_71b8

00000000000071b3         call       j_free                                      ; free

                     loc_71b8:
00000000000071b8         call       j___errno_location                          ; __errno_location, CODE XREF=vasnprintf+3937
00000000000071bd         xor        r15d, r15d
00000000000071c0         mov        dword [rax], 0x16
00000000000071c6         jmp        loc_642f

                     loc_71cb:
00000000000071cb         mov        rbx, r14                                    ; CODE XREF=vasnprintf+705
00000000000071ce         xor        eax, eax
00000000000071d0         add        rbx, 0x1
00000000000071d4         jb         loc_72e0

00000000000071da         cmp        r12, rbx
00000000000071dd         jae        loc_722c

00000000000071df         test       r12, r12
00000000000071e2         jne        loc_7319

00000000000071e8         cmp        rbx, 0xc
00000000000071ec         ja         loc_72fe

00000000000071f2         mov        r12d, 0xc

                     loc_71f8:
00000000000071f8         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+4292, vasnprintf+4309
00000000000071ff         sete       r13b
0000000000007203         test       r15, r15
0000000000007206         je         loc_72ac

000000000000720c         test       r13b, r13b
000000000000720f         jne        loc_72ac

0000000000007215         mov        rsi, r12                                    ; argument "__size" for method j_realloc
0000000000007218         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
000000000000721b         call       j_realloc                                   ; realloc
0000000000007220         test       rax, rax
0000000000007223         je         loc_6e9b

0000000000007229         mov        r15, rax

                     loc_722c:
000000000000722c         cmp        r15, qword [rbp+var_3E8]                    ; CODE XREF=vasnprintf+3981, vasnprintf+4235, vasnprintf+4249, vasnprintf+4323
0000000000007233         mov        byte [r15+r14], 0x0
0000000000007238         je         loc_7251

000000000000723a         cmp        r12, rbx
000000000000723d         jbe        loc_7251

000000000000723f         mov        rdi, r15                                    ; argument "__ptr" for method j_realloc
0000000000007242         mov        rsi, rbx                                    ; argument "__size" for method j_realloc
0000000000007245         call       j_realloc                                   ; realloc
000000000000724a         test       rax, rax
000000000000724d         cmovne     r15, rax

                     loc_7251:
0000000000007251         mov        rax, qword [rbp+var_420]                    ; CODE XREF=vasnprintf+4072, vasnprintf+4077
0000000000007258         test       rax, rax
000000000000725b         je         loc_7265

000000000000725d         mov        rdi, rax                                    ; argument "__ptr" for method j_free
0000000000007260         call       j_free                                      ; free

                     loc_7265:
0000000000007265         mov        rax, qword [rbp+var_408]                    ; CODE XREF=vasnprintf+4107
000000000000726c         mov        rdi, qword [rbp+var_2B8]
0000000000007273         add        rax, 0x20
0000000000007277         cmp        rdi, rax
000000000000727a         je         loc_7281

000000000000727c         call       j_free                                      ; free

                     loc_7281:
0000000000007281         mov        rax, qword [rbp+var_410]                    ; CODE XREF=vasnprintf+4138
0000000000007288         mov        rdi, qword [rbp+var_3A8]
000000000000728f         add        rax, 0x10
0000000000007293         cmp        rdi, rax
0000000000007296         je         loc_729d

0000000000007298         call       j_free                                      ; free

                     loc_729d:
000000000000729d         mov        rax, qword [rbp+var_418]                    ; CODE XREF=vasnprintf+4166
00000000000072a4         mov        qword [rax], r14
00000000000072a7         jmp        loc_642f

                     loc_72ac:
00000000000072ac         mov        rdi, r12                                    ; argument "__size" for method j_malloc, CODE XREF=vasnprintf+4022, vasnprintf+4031
00000000000072af         call       j_malloc                                    ; malloc
00000000000072b4         test       rax, rax
00000000000072b7         mov        rcx, rax
00000000000072ba         je         loc_63b5

00000000000072c0         test       r14, r14
00000000000072c3         je         loc_7330

00000000000072c5         test       r13b, r13b
00000000000072c8         je         loc_7330

00000000000072ca         mov        rsi, r15                                    ; argument "__src" for method j_memcpy
00000000000072cd         mov        rdx, r14                                    ; argument "__n" for method j_memcpy
00000000000072d0         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
00000000000072d3         call       j_memcpy                                    ; memcpy
00000000000072d8         mov        r15, rax
00000000000072db         jmp        loc_722c

                     loc_72e0:
00000000000072e0         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+3972
00000000000072e4         mov        eax, 0x1
00000000000072e9         je         loc_722c

00000000000072ef         test       r12, r12
00000000000072f2         je         loc_63b5

00000000000072f8         js         loc_63b5

                     loc_72fe:
00000000000072fe         test       rax, rax                                    ; CODE XREF=vasnprintf+3996, vasnprintf+4315
0000000000007301         jne        loc_63b5

0000000000007307         cmp        rbx, 0xffffffffffffffff
000000000000730b         je         loc_63b5

0000000000007311         mov        r12, rbx
0000000000007314         jmp        loc_71f8

                     loc_7319:
0000000000007319         js         loc_63b5                                    ; CODE XREF=vasnprintf+3986

000000000000731f         add        r12, r12
0000000000007322         cmp        r12, rbx
0000000000007325         jae        loc_71f8

000000000000732b         jmp        loc_72fe
000000000000732d         align      16

                     loc_7330:
0000000000007330         mov        r15, rcx                                    ; CODE XREF=vasnprintf+4211, vasnprintf+4216
0000000000007333         jmp        loc_722c

                     loc_7338:
0000000000007338         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1575
000000000000733c         je         loc_6760

0000000000007342         jmp        loc_63c1

                     loc_7347:
0000000000007347         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=vasnprintf+495
                        ; endp

                     loc_734c:
000000000000734c         cmp        r12, 0xffffffffffffffff                     ; CODE XREF=vasnprintf+1173
0000000000007350         mov        edx, 0x1
0000000000007355         je         loc_673b

000000000000735b         test       r12, r12
000000000000735e         je         loc_63b5

0000000000007364         jns        loc_6f30

000000000000736a         jmp        loc_63b5
000000000000736f         align      16                                          ; End of unwind block (FDE at 0xae1c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     printf_fetchargs:
0000000000007370         cmp        qword [rsi], 0x0                            ; Begin of unwind block (FDE at 0xae4c), CODE XREF=vasnprintf+108
0000000000007374         mov        rax, qword [rsi+8]
0000000000007378         je         loc_73dd

000000000000737a         lea        r8, qword [aNull+20]                        ; 0x9c80
0000000000007381         lea        r10, qword [wide_null_string.2696]          ; wide_null_string.2696
0000000000007388         lea        r9, qword [aNull]                           ; "(NULL)"
000000000000738f         xor        ecx, ecx
0000000000007391         nop        dword [rax]
0000000000007398         cmp        dword [rax], 0x16
000000000000739b         ja         loc_73e0

000000000000739d         mov        edx, dword [rax]
000000000000739f         movsxd     rdx, dword [r8+rdx*4]
00000000000073a3         add        rdx, r8
00000000000073a6         jmp        rdx
                        ; endp
00000000000073a8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_73b0:
00000000000073b0         mov        rdx, qword [rdi+8]
00000000000073b4         add        rdx, 0xf
00000000000073b8         and        rdx, 0xfffffffffffffff0
00000000000073bc         lea        r11, qword [rdx+0x10]
00000000000073c0         mov        qword [rdi+8], r11
00000000000073c4         fld        tword [rdx]
00000000000073c6         fstp       tword [rax+0x10]
00000000000073c9         nop        dword [rax]
00000000000073d0         add        rcx, 0x1                                    ; CODE XREF=sub_73e6+137, sub_73e6+183
00000000000073d4         add        rax, 0x20
00000000000073d8         cmp        qword [rsi], rcx
00000000000073db         ja         printf_fetchargs+40
                        ; endp

                     loc_73dd:
00000000000073dd         xor        eax, eax                                    ; CODE XREF=printf_fetchargs+8
00000000000073df         ret
                        ; endp

                     loc_73e0:
00000000000073e0         mov        eax, 0xffffffff                             ; CODE XREF=printf_fetchargs+43
00000000000073e5         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_73e6:
00000000000073e6         mov        r11d, dword [rdi]
00000000000073e9         cmp        r11d, 0x2f
00000000000073ed         ja         loc_752a

00000000000073f3         mov        edx, r11d
00000000000073f6         add        rdx, qword [rdi+0x10]
00000000000073fa         add        r11d, 0x8
00000000000073fe         mov        dword [rdi], r11d

                     loc_7401:
0000000000007401         mov        rdx, qword [rdx]                            ; CODE XREF=sub_74d0+102
0000000000007404         mov        qword [rax+0x10], rdx
0000000000007408         jmp        sub_73b0+32
                        ; endp
000000000000740a         mov        r11d, dword [rdi]
000000000000740d         cmp        r11d, 0x2f
0000000000007411         ja         sub_754c                                    ; sub_754c
0000000000007417         mov        edx, r11d
000000000000741a         add        rdx, qword [rdi+0x10]
000000000000741e         add        r11d, 0x8
0000000000007422         mov        dword [rdi], r11d

                     loc_7425:
0000000000007425         mov        edx, dword [rdx]                            ; CODE XREF=sub_754c+12
0000000000007427         mov        dword [rax+0x10], edx
000000000000742a         jmp        sub_73b0+32
                        ; endp
000000000000742c         mov        r11d, dword [rdi]
000000000000742f         cmp        r11d, 0x2f
0000000000007433         ja         sub_753b                                    ; sub_753b
0000000000007439         mov        edx, r11d
000000000000743c         add        rdx, qword [rdi+0x10]
0000000000007440         add        r11d, 0x8
0000000000007444         mov        dword [rdi], r11d

                     loc_7447:
0000000000007447         mov        edx, dword [rdx]                            ; CODE XREF=sub_753b+12
0000000000007449         mov        byte [rax+0x10], dl
000000000000744c         jmp        sub_73b0+32
                        ; endp
000000000000744e         mov        r11d, dword [rdi]
0000000000007451         cmp        r11d, 0x2f
0000000000007455         ja         sub_74d0+42
000000000000745b         mov        edx, r11d
000000000000745e         add        rdx, qword [rdi+0x10]
0000000000007462         add        r11d, 0x8
0000000000007466         mov        dword [rdi], r11d
0000000000007469         mov        edx, dword [rdx]                            ; CODE XREF=sub_74d0+54
000000000000746b         mov        word [rax+0x10], dx
000000000000746f         jmp        sub_73b0+32
0000000000007474         mov        r11d, dword [rdi]
0000000000007477         cmp        r11d, 0x2f
000000000000747b         ja         sub_74d0+59
0000000000007481         mov        edx, r11d
0000000000007484         add        rdx, qword [rdi+0x10]
0000000000007488         add        r11d, 0x8
000000000000748c         mov        dword [rdi], r11d
000000000000748f         mov        rdx, qword [rdx]                            ; CODE XREF=sub_74d0+71
0000000000007492         test       rdx, rdx
0000000000007495         cmove      rdx, r9
0000000000007499         mov        qword [rax+0x10], rdx
000000000000749d         jmp        sub_73b0+32
00000000000074a2         mov        r11d, dword [rdi+4]
00000000000074a6         cmp        r11d, 0xaf
00000000000074ad         ja         sub_755d                                    ; sub_755d
00000000000074b3         mov        edx, r11d
00000000000074b6         add        rdx, qword [rdi+0x10]
00000000000074ba         add        r11d, 0x10
00000000000074be         mov        dword [rdi+4], r11d

                     loc_74c2:
00000000000074c2         movsd      xmm0, qword [rdx]                           ; CODE XREF=sub_755d+12
00000000000074c6         movsd      qword [rax+0x10], xmm0
00000000000074cb         jmp        sub_73b0+32
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_74d0:
00000000000074d0         mov        r11d, dword [rdi]
00000000000074d3         cmp        r11d, 0x2f
00000000000074d7         ja         loc_751c

00000000000074d9         mov        edx, r11d
00000000000074dc         add        rdx, qword [rdi+0x10]
00000000000074e0         add        r11d, 0x8
00000000000074e4         mov        dword [rdi], r11d

                     loc_74e7:
00000000000074e7         mov        rdx, qword [rdx]                            ; CODE XREF=sub_74d0+88
00000000000074ea         test       rdx, rdx
00000000000074ed         cmove      rdx, r10
00000000000074f1         mov        qword [rax+0x10], rdx
00000000000074f5         jmp        sub_73b0+32
                        ; endp
00000000000074fa         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_73e6+111
00000000000074fe         lea        r11, qword [rdx+8]
0000000000007502         mov        qword [rdi+8], r11
0000000000007506         jmp        sub_73e6+131
000000000000750b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_73e6+149
000000000000750f         lea        r11, qword [rdx+8]
0000000000007513         mov        qword [rdi+8], r11
0000000000007517         jmp        sub_73e6+169

                     loc_751c:
000000000000751c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_74d0+7
0000000000007520         lea        r11, qword [rdx+8]
0000000000007524         mov        qword [rdi+8], r11
0000000000007528         jmp        loc_74e7

                     loc_752a:
000000000000752a         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_73e6+7
000000000000752e         lea        r11, qword [rdx+8]
0000000000007532         mov        qword [rdi+8], r11
0000000000007536         jmp        loc_7401


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_753b:
000000000000753b         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_73e6+77
000000000000753f         lea        r11, qword [rdx+8]
0000000000007543         mov        qword [rdi+8], r11
0000000000007547         jmp        loc_7447


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_754c:
000000000000754c         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_73e6+43
0000000000007550         lea        r11, qword [rdx+8]
0000000000007554         mov        qword [rdi+8], r11
0000000000007558         jmp        loc_7425


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_755d:
000000000000755d         mov        rdx, qword [rdi+8]                          ; CODE XREF=sub_73e6+199
0000000000007561         lea        r11, qword [rdx+8]
0000000000007565         mov        qword [rdi+8], r11
0000000000007569         jmp        loc_74c2


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_756e:
000000000000756e         nop                                                    ; End of unwind block (FDE at 0xae4c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128


                     printf_parse:
0000000000007570         push       r15                                         ; Begin of unwind block (FDE at 0xae64), CODE XREF=vasnprintf+89
0000000000007572         push       r14
0000000000007574         lea        rcx, qword [rsi+0x20]
0000000000007578         push       r13
000000000000757a         push       r12
000000000000757c         lea        rax, qword [rdx+0x10]
0000000000007580         push       rbp
0000000000007581         push       rbx
0000000000007582         mov        r14, rsi
0000000000007585         mov        r15, rdx
0000000000007588         xor        ebx, ebx
000000000000758a         mov        r9d, 0x7
0000000000007590         sub        rsp, 0x58
0000000000007594         mov        r10d, 0x7
000000000000759a         mov        qword [rsi], 0x0
00000000000075a1         mov        qword [rsi+8], rcx
00000000000075a5         mov        qword [rsp+0x88+var_60], rcx
00000000000075aa         mov        r8, 0xffffffffffffffff
00000000000075b1         mov        qword [rdx], 0x0
00000000000075b8         mov        qword [rsp+0x88+var_80], rax
00000000000075bd         mov        qword [rdx+8], rax
00000000000075c1         mov        qword [rsp+0x88+var_70], 0x0
00000000000075ca         mov        qword [rsp+0x88+var_78], 0x0
00000000000075d3         mov        qword [rsp+0x88+var_68], 0x0
00000000000075dc         jmp        loc_75eb
00000000000075de         align      32

                     loc_75e0:
00000000000075e0         cmp        al, 0x25                                    ; CODE XREF=printf_parse+128
00000000000075e2         lea        rbp, qword [rdi+1]
00000000000075e6         je         loc_7628

                     loc_75e8:
00000000000075e8         mov        rdi, rbp                                    ; CODE XREF=printf_parse+859, printf_parse+868

                     loc_75eb:
00000000000075eb         movzx      eax, byte [rdi]                             ; CODE XREF=printf_parse+108
00000000000075ee         test       al, al
00000000000075f0         jne        loc_75e0

00000000000075f2         lea        rax, qword [rbx+rbx*4]
00000000000075f6         lea        rax, qword [rbx+rax*2]
00000000000075fa         mov        qword [rcx+rax*8], rdi
00000000000075fe         mov        rax, qword [rsp+0x88+var_78]
0000000000007603         mov        qword [r14+0x10], rax
0000000000007607         mov        rax, qword [rsp+0x88+var_70]
000000000000760c         mov        qword [r14+0x18], rax
0000000000007610         xor        eax, eax

                     loc_7612:
0000000000007612         add        rsp, 0x58                                   ; CODE XREF=printf_parse+2174, printf_parse+2844
0000000000007616         pop        rbx
0000000000007617         pop        rbp
0000000000007618         pop        r12
000000000000761a         pop        r13
000000000000761c         pop        r14
000000000000761e         pop        r15
0000000000007620         ret
                        ; endp
0000000000007621         align      8

                     loc_7628:
0000000000007628         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+118
000000000000762c         mov        r13, r8
000000000000762f         lea        rax, qword [rbx+rax*2]
0000000000007633         lea        r12, qword [rcx+rax*8]
0000000000007637         mov        qword [r12], rdi
000000000000763b         mov        dword [r12+0x10], 0x0
0000000000007644         mov        qword [r12+0x18], 0x0
000000000000764d         mov        qword [r12+0x20], 0x0
0000000000007656         mov        qword [r12+0x28], r8
000000000000765b         mov        qword [r12+0x30], 0x0
0000000000007664         mov        qword [r12+0x38], 0x0
000000000000766d         mov        qword [r12+0x40], r8
0000000000007672         mov        qword [r12+0x50], r8
0000000000007677         movzx      ebx, byte [rdi+1]
000000000000767b         lea        eax, dword [rbx-0x30]
000000000000767e         cmp        al, 0x9
0000000000007680         ja         loc_76be

0000000000007682         jmp        loc_7aba
0000000000007687         align      16

                     loc_7690:
0000000000007690         cmp        bl, 0x2d                                    ; CODE XREF=printf_parse+344
0000000000007693         je         loc_76d8

0000000000007695         cmp        bl, 0x2b
0000000000007698         je         loc_76e0

000000000000769a         cmp        bl, 0x20
000000000000769d         je         loc_76f0

000000000000769f         cmp        bl, 0x23
00000000000076a2         je         loc_7700

00000000000076a4         cmp        bl, 0x30
00000000000076a7         je         loc_7710

00000000000076a9         cmp        bl, 0x49
00000000000076ac         jne        loc_7720

00000000000076ae         or         dword [r12+0x10], 0x40
00000000000076b4         nop        dword [rax]

                     loc_76b8:
00000000000076b8         movzx      ebx, byte [rax]                             ; CODE XREF=printf_parse+352, printf_parse+366, printf_parse+374, printf_parse+390, printf_parse+406, printf_parse+422
00000000000076bb         mov        rbp, rax

                     loc_76be:
00000000000076be         lea        rax, qword [rbp+1]                          ; CODE XREF=printf_parse+272, printf_parse+1381, printf_parse+1490
00000000000076c2         cmp        bl, 0x27
00000000000076c5         mov        rdx, rax
00000000000076c8         jne        loc_7690

00000000000076ca         or         dword [r12+0x10], 0x1
00000000000076d0         jmp        loc_76b8
00000000000076d2         align      8

                     loc_76d8:
00000000000076d8         or         dword [r12+0x10], 0x2                       ; CODE XREF=printf_parse+291
00000000000076de         jmp        loc_76b8

                     loc_76e0:
00000000000076e0         or         dword [r12+0x10], 0x4                       ; CODE XREF=printf_parse+296
00000000000076e6         jmp        loc_76b8
00000000000076e8         align      16

                     loc_76f0:
00000000000076f0         or         dword [r12+0x10], 0x8                       ; CODE XREF=printf_parse+301
00000000000076f6         jmp        loc_76b8
00000000000076f8         align      256

                     loc_7700:
0000000000007700         or         dword [r12+0x10], 0x10                      ; CODE XREF=printf_parse+306
0000000000007706         jmp        loc_76b8
0000000000007708         align      16

                     loc_7710:
0000000000007710         or         dword [r12+0x10], 0x20                      ; CODE XREF=printf_parse+311
0000000000007716         jmp        loc_76b8
0000000000007718         align      32

                     loc_7720:
0000000000007720         cmp        bl, 0x2a                                    ; CODE XREF=printf_parse+316
0000000000007723         je         loc_78d9

0000000000007729         lea        ecx, dword [rbx-0x30]
000000000000772c         cmp        cl, 0x9
000000000000772f         jbe        loc_7b47

                     loc_7735:
0000000000007735         cmp        bl, 0x2e                                    ; CODE XREF=printf_parse+1577, printf_parse+2412
0000000000007738         je         loc_7a0f

                     loc_773e:
000000000000773e         xor        eax, eax                                    ; CODE XREF=printf_parse+1177, printf_parse+1349, printf_parse+1648, printf_parse+2650
0000000000007740         mov        esi, 0x1
0000000000007745         jmp        loc_7777
0000000000007747         align      16

                     loc_7750:
0000000000007750         cmp        bl, 0x4c                                    ; CODE XREF=printf_parse+526
0000000000007753         je         loc_7790

0000000000007755         cmp        bl, 0x6c
0000000000007758         je         loc_7770

000000000000775a         cmp        bl, 0x6a
000000000000775d         je         loc_7770

000000000000775f         mov        edx, ebx
0000000000007761         and        edx, 0xffffffdf
0000000000007764         cmp        dl, 0x5a
0000000000007767         je         loc_7770

0000000000007769         cmp        bl, 0x74
000000000000776c         jne        loc_7798

000000000000776e         nop

                     loc_7770:
0000000000007770         add        eax, 0x8                                    ; CODE XREF=printf_parse+488, printf_parse+493, printf_parse+503

                     loc_7773:
0000000000007773         movzx      ebx, byte [rbp]                             ; CODE XREF=printf_parse+539, printf_parse+547

                     loc_7777:
0000000000007777         add        rbp, 0x1                                    ; CODE XREF=printf_parse+469
000000000000777b         cmp        bl, 0x68
000000000000777e         jne        loc_7750

0000000000007780         mov        ecx, eax
0000000000007782         mov        edx, esi
0000000000007784         and        ecx, 0x1
0000000000007787         shl        edx, cl
0000000000007789         or         eax, edx
000000000000778b         jmp        loc_7773
000000000000778d         align      16

                     loc_7790:
0000000000007790         or         eax, 0x4                                    ; CODE XREF=printf_parse+483
0000000000007793         jmp        loc_7773
0000000000007795         align      8

                     loc_7798:
0000000000007798         lea        edx, dword [rbx-0x25]                       ; CODE XREF=printf_parse+508
000000000000779b         cmp        dl, 0x53
000000000000779e         ja         loc_7dbb

00000000000077a4         lea        rcx, qword [switch_table_9cfc]              ; switch_table_9cfc
00000000000077ab         movzx      edx, dl
00000000000077ae         movsxd     rdx, dword [rcx+rdx*4]
00000000000077b2         add        rdx, rcx
00000000000077b5         jmp        rdx                                         ; switch statement using table at 0x9cfc, with 84 cases, 0x77b7,0x782b,0x7c6c,0x7cb8,0x7ccb,0x7d18,0x7d2b,0x7d4c,0x7d5c,0x7db0,0x7dbb

                     loc_77b7:
00000000000077b7         mov        r11d, 0x10                                  ; case 46, CODE XREF=printf_parse+581
00000000000077bd         mov        ebx, 0x73
00000000000077c2         nop        word [rax+rax]

                     loc_77c8:
00000000000077c8         cmp        r13, 0xffffffffffffffff                     ; CODE XREF=printf_parse+1797, printf_parse+1805, printf_parse+1820, printf_parse+1834, printf_parse+1853, printf_parse+1878, printf_parse+1892, printf_parse+1900, printf_parse+1915, printf_parse+1929, printf_parse+1952
00000000000077cc         je         loc_7e87

00000000000077d2         mov        qword [r12+0x50], r13

                     loc_77d7:
00000000000077d7         cmp        r9, r13                                     ; CODE XREF=printf_parse+2361
00000000000077da         mov        rcx, qword [r15+8]
00000000000077de         jbe        loc_7e00

                     loc_77e4:
00000000000077e4         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+2322
00000000000077e7         mov        rdx, rax
00000000000077ea         shl        rdx, 0x5
00000000000077ee         add        rdx, rcx
00000000000077f1         cmp        rax, r13
00000000000077f4         ja         loc_7816

00000000000077f6         nop        word [cs:rax+rax]

                     loc_7800:
0000000000007800         add        rax, 0x1                                    ; CODE XREF=printf_parse+673
0000000000007804         mov        dword [rdx], 0x0
000000000000780a         add        rdx, 0x20
000000000000780e         cmp        rax, r13
0000000000007811         jbe        loc_7800

0000000000007813         mov        qword [r15], rax

                     loc_7816:
0000000000007816         shl        r13, 0x5                                    ; CODE XREF=printf_parse+644
000000000000781a         lea        rax, qword [rcx+r13]
000000000000781e         mov        edx, dword [rax]
0000000000007820         test       edx, edx
0000000000007822         jne        loc_7df3

0000000000007828         mov        dword [rax], r11d

                     loc_782b:
000000000000782b         mov        byte [r12+0x48], bl                         ; case 0, CODE XREF=printf_parse+581, printf_parse+2182
0000000000007830         mov        rax, qword [r14]
0000000000007833         mov        qword [r12+8], rbp
0000000000007838         lea        rbx, qword [rax+1]
000000000000783c         cmp        r10, rbx
000000000000783f         mov        qword [r14], rbx
0000000000007842         ja         loc_78d0

0000000000007848         test       r10, r10
000000000000784b         js         loc_81f7

0000000000007851         add        r10, r10
0000000000007854         movabs     rax, 0x2e8ba2e8ba2e8ba
000000000000785e         cmp        r10, rax
0000000000007861         ja         loc_81f7

0000000000007867         lea        rax, qword [r10+r10*4]
000000000000786b         mov        rdi, qword [r14+8]
000000000000786f         cmp        qword [rsp+0x88+var_60], rdi
0000000000007874         mov        qword [rsp+0x88+var_48], r9
0000000000007879         mov        qword [rsp+0x88+var_50], r10
000000000000787e         lea        rax, qword [r10+rax*2]
0000000000007882         mov        qword [rsp+0x88+var_58], r8
0000000000007887         lea        rsi, qword [rax*8]
000000000000788f         je         loc_7f4d

0000000000007895         call       j_realloc                                   ; realloc
000000000000789a         test       rax, rax
000000000000789d         mov        rcx, rax
00000000000078a0         mov        r8, qword [rsp+0x88+var_58]
00000000000078a5         mov        r10, qword [rsp+0x88+var_50]
00000000000078aa         mov        r9, qword [rsp+0x88+var_48]
00000000000078af         je         loc_81f7

00000000000078b5         mov        rax, qword [rsp+0x88+var_60]
00000000000078ba         cmp        rax, qword [r14+8]
00000000000078be         mov        rbx, qword [r14]
00000000000078c1         je         loc_7f70

                     loc_78c7:
00000000000078c7         mov        qword [r14+8], rcx                          ; CODE XREF=printf_parse+2621
00000000000078cb         jmp        loc_75e8

                     loc_78d0:
00000000000078d0         mov        rcx, qword [r14+8]                          ; CODE XREF=printf_parse+722
00000000000078d4         jmp        loc_75e8

                     loc_78d9:
00000000000078d9         mov        rsi, qword [rsp+0x88+var_78]                ; CODE XREF=printf_parse+435
00000000000078de         mov        ecx, 0x1
00000000000078e3         mov        qword [r12+0x18], rbp
00000000000078e8         mov        qword [r12+0x20], rax
00000000000078ed         test       rsi, rsi
00000000000078f0         cmovne     rcx, rsi
00000000000078f4         mov        qword [rsp+0x88+var_78], rcx
00000000000078f9         movzx      ecx, byte [rbp+1]
00000000000078fd         lea        esi, dword [rcx-0x30]
0000000000007900         cmp        sil, 0x9
0000000000007904         jbe        loc_7be5

                     loc_790a:
000000000000790a         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1677
000000000000790f         cmp        rsi, 0xffffffffffffffff
0000000000007913         lea        rdx, qword [rsi+1]
0000000000007917         mov        qword [r12+0x28], rsi
000000000000791c         je         loc_7dbb

0000000000007922         mov        rbx, qword [rsp+0x88+var_68]
0000000000007927         mov        rbp, rax
000000000000792a         mov        qword [rsp+0x88+var_68], rdx

                     loc_792f:
000000000000792f         cmp        r9, rbx                                     ; CODE XREF=printf_parse+1783
0000000000007932         mov        rcx, qword [r15+8]
0000000000007936         ja         loc_7fb2

000000000000793c         add        r9, r9
000000000000793f         lea        rax, qword [rbx+1]
0000000000007943         cmp        r9, rbx
0000000000007946         cmovbe     r9, rax
000000000000794a         movabs     rax, 0x7ffffffffffffff
0000000000007954         cmp        r9, rax
0000000000007957         ja         loc_81fb

000000000000795d         mov        rsi, r9
0000000000007960         mov        qword [rsp+0x88+var_48], r9
0000000000007965         mov        qword [rsp+0x88+var_50], r10
000000000000796a         shl        rsi, 0x5
000000000000796e         cmp        qword [rsp+0x88+var_80], rcx
0000000000007973         mov        qword [rsp+0x88+var_58], r8
0000000000007978         je         loc_8091

000000000000797e         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007981         call       j_realloc                                   ; realloc
0000000000007986         mov        rdx, qword [r15+8]
000000000000798a         mov        r8, qword [rsp+0x88+var_58]
000000000000798f         mov        rcx, rax
0000000000007992         mov        r10, qword [rsp+0x88+var_50]
0000000000007997         mov        r9, qword [rsp+0x88+var_48]

                     loc_799c:
000000000000799c         test       rcx, rcx                                    ; CODE XREF=printf_parse+2880
000000000000799f         je         loc_8257

00000000000079a5         cmp        qword [rsp+0x88+var_80], rdx
00000000000079aa         mov        rax, qword [r15]
00000000000079ad         je         loc_816b

                     loc_79b3:
00000000000079b3         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3123

                     loc_79b7:
00000000000079b7         mov        rdx, rax                                    ; CODE XREF=printf_parse+2629
00000000000079ba         shl        rdx, 0x5
00000000000079be         add        rdx, rcx
00000000000079c1         cmp        rax, rbx
00000000000079c4         ja         loc_79e6

00000000000079c6         nop        word [cs:rax+rax]

                     loc_79d0:
00000000000079d0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1137
00000000000079d4         mov        dword [rdx], 0x0
00000000000079da         add        rdx, 0x20
00000000000079de         cmp        rax, rbx
00000000000079e1         jbe        loc_79d0

00000000000079e3         mov        qword [r15], rax

                     loc_79e6:
00000000000079e6         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1108
00000000000079ea         lea        rax, qword [rcx+rbx]
00000000000079ee         mov        edx, dword [rax]
00000000000079f0         test       edx, edx
00000000000079f2         jne        loc_7ecb

00000000000079f8         mov        dword [rax], 0x5
00000000000079fe         movzx      ebx, byte [rbp]
0000000000007a02         lea        rdx, qword [rbp+1]
0000000000007a06         cmp        bl, 0x2e
0000000000007a09         jne        loc_773e

                     loc_7a0f:
0000000000007a0f         cmp        byte [rbp+1], 0x2a                          ; CODE XREF=printf_parse+456
0000000000007a13         mov        qword [r12+0x30], rbp
0000000000007a18         jne        loc_7b9e

0000000000007a1e         mov        rsi, qword [rsp+0x88+var_70]
0000000000007a23         lea        r11, qword [rbp+2]
0000000000007a27         mov        eax, 0x2
0000000000007a2c         mov        qword [r12+0x38], r11
0000000000007a31         cmp        rsi, 0x2
0000000000007a35         cmovae     rax, rsi
0000000000007a39         mov        qword [rsp+0x88+var_70], rax
0000000000007a3e         movsx      eax, byte [rbp+2]
0000000000007a42         lea        edx, dword [rax-0x30]
0000000000007a45         cmp        dl, 0x9
0000000000007a48         jbe        loc_80dc

                     loc_7a4e:
0000000000007a4e         mov        rbx, qword [r12+0x40]                       ; CODE XREF=printf_parse+2946
0000000000007a53         cmp        rbx, 0xffffffffffffffff
0000000000007a57         je         loc_80b5

                     loc_7a5d:
0000000000007a5d         cmp        r9, rbx                                     ; CODE XREF=printf_parse+2919, printf_parse+3161
0000000000007a60         mov        rcx, qword [r15+8]
0000000000007a64         jbe        loc_7fcf

0000000000007a6a         mov        rax, qword [r15]

                     loc_7a6d:
0000000000007a6d         mov        rdx, rax                                    ; CODE XREF=printf_parse+2788
0000000000007a70         shl        rdx, 0x5
0000000000007a74         add        rdx, rcx
0000000000007a77         cmp        rax, rbx
0000000000007a7a         ja         loc_7a96

0000000000007a7c         nop        dword [rax]

                     loc_7a80:
0000000000007a80         add        rax, 0x1                                    ; CODE XREF=printf_parse+1313
0000000000007a84         mov        dword [rdx], 0x0
0000000000007a8a         add        rdx, 0x20
0000000000007a8e         cmp        rax, rbx
0000000000007a91         jbe        loc_7a80

0000000000007a93         mov        qword [r15], rax

                     loc_7a96:
0000000000007a96         shl        rbx, 0x5                                    ; CODE XREF=printf_parse+1290
0000000000007a9a         lea        rax, qword [rcx+rbx]
0000000000007a9e         mov        edx, dword [rax]
0000000000007aa0         test       edx, edx
0000000000007aa2         jne        loc_7fba

0000000000007aa8         mov        dword [rax], 0x5
0000000000007aae         mov        rbp, r11
0000000000007ab1         movzx      ebx, byte [r11]
0000000000007ab5         jmp        loc_773e

                     loc_7aba:
0000000000007aba         mov        rax, rbp                                    ; CODE XREF=printf_parse+274
0000000000007abd         nop        dword [rax]

                     loc_7ac0:
0000000000007ac0         add        rax, 0x1                                    ; CODE XREF=printf_parse+1373
0000000000007ac4         movzx      edx, byte [rax]
0000000000007ac7         lea        ecx, dword [rdx-0x30]
0000000000007aca         cmp        cl, 0x9
0000000000007acd         jbe        loc_7ac0

0000000000007acf         cmp        dl, 0x24
0000000000007ad2         mov        r13, r8
0000000000007ad5         jne        loc_76be

0000000000007adb         xor        edx, edx

                     loc_7add:
0000000000007add         movsx      eax, bl                                     ; CODE XREF=printf_parse+1463
0000000000007ae0         movabs     rdi, 0x1999999999999999
0000000000007aea         mov        rsi, r8
0000000000007aed         sub        eax, 0x30
0000000000007af0         cmp        rdx, rdi
0000000000007af3         cdqe
0000000000007af5         ja         loc_7afe

0000000000007af7         lea        rsi, qword [rdx+rdx*4]
0000000000007afb         add        rsi, rsi

                     loc_7afe:
0000000000007afe         mov        rcx, rbp                                    ; CODE XREF=printf_parse+1413

                     loc_7b01:
0000000000007b01         add        rax, rsi                                    ; CODE XREF=printf_parse+2390
0000000000007b04         movzx      ebx, byte [rbp+1]
0000000000007b08         setb       sil
0000000000007b0c         add        rbp, 0x1
0000000000007b10         mov        rdx, rax
0000000000007b13         movzx      esi, sil
0000000000007b17         test       rsi, rsi
0000000000007b1a         lea        edi, dword [rbx-0x30]
0000000000007b1d         jne        loc_7eae

0000000000007b23         cmp        dil, 0x9
0000000000007b27         jbe        loc_7add

0000000000007b29         mov        r13, rax
0000000000007b2c         sub        r13, 0x1
0000000000007b30         cmp        r13, 0xfffffffffffffffd
0000000000007b34         ja         loc_7dbb

0000000000007b3a         lea        rbp, qword [rcx+2]
0000000000007b3e         movzx      ebx, byte [rcx+2]
0000000000007b42         jmp        loc_76be

                     loc_7b47:
0000000000007b47         mov        qword [r12+0x18], rbp                       ; CODE XREF=printf_parse+447
0000000000007b4c         movzx      edi, byte [rbp]
0000000000007b50         mov        rsi, rbp
0000000000007b53         lea        ecx, dword [rdi-0x30]
0000000000007b56         cmp        cl, 0x9
0000000000007b59         jbe        loc_7b67

0000000000007b5b         jmp        loc_7b90
0000000000007b5d         align      32

                     loc_7b60:
0000000000007b60         mov        rbp, rax                                    ; CODE XREF=printf_parse+1536
0000000000007b63         add        rax, 0x1

                     loc_7b67:
0000000000007b67         movzx      edi, byte [rax]                             ; CODE XREF=printf_parse+1513
0000000000007b6a         lea        edx, dword [rdi-0x30]
0000000000007b6d         cmp        dl, 0x9
0000000000007b70         jbe        loc_7b60

0000000000007b72         mov        rcx, rax
0000000000007b75         lea        rdx, qword [rbp+2]
0000000000007b79         mov        rbp, rax
0000000000007b7c         sub        rcx, rsi
0000000000007b7f         mov        rsi, qword [rsp+0x88+var_78]
0000000000007b84         cmp        rsi, rcx
0000000000007b87         cmovae     rcx, rsi
0000000000007b8b         mov        qword [rsp+0x88+var_78], rcx

                     loc_7b90:
0000000000007b90         mov        qword [r12+0x20], rbp                       ; CODE XREF=printf_parse+1515
0000000000007b95         movzx      ebx, byte [rbp]
0000000000007b99         jmp        loc_7735

                     loc_7b9e:
0000000000007b9e         movzx      eax, byte [rbp+1]                           ; CODE XREF=printf_parse+1192
0000000000007ba2         sub        eax, 0x30
0000000000007ba5         cmp        al, 0x9
0000000000007ba7         ja         loc_7bbe

0000000000007ba9         nop        dword [rax]

                     loc_7bb0:
0000000000007bb0         add        rdx, 0x1                                    ; CODE XREF=printf_parse+1612
0000000000007bb4         movzx      eax, byte [rdx]
0000000000007bb7         sub        eax, 0x30
0000000000007bba         cmp        al, 0x9
0000000000007bbc         jbe        loc_7bb0

                     loc_7bbe:
0000000000007bbe         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=printf_parse+1591
0000000000007bc3         mov        rax, rdx
0000000000007bc6         mov        qword [r12+0x38], rdx
0000000000007bcb         sub        rax, rbp
0000000000007bce         movzx      ebx, byte [rdx]
0000000000007bd1         mov        rbp, rdx
0000000000007bd4         cmp        rsi, rax
0000000000007bd7         cmovae     rax, rsi
0000000000007bdb         mov        qword [rsp+0x88+var_70], rax
0000000000007be0         jmp        loc_773e

                     loc_7be5:
0000000000007be5         mov        rsi, rax                                    ; CODE XREF=printf_parse+916

                     loc_7be8:
0000000000007be8         add        rsi, 0x1                                    ; CODE XREF=printf_parse+1671
0000000000007bec         movzx      edi, byte [rsi]
0000000000007bef         lea        r11d, dword [rdi-0x30]
0000000000007bf3         cmp        r11b, 0x9
0000000000007bf7         jbe        loc_7be8

0000000000007bf9         cmp        dil, 0x24
0000000000007bfd         jne        loc_790a

0000000000007c03         xor        esi, esi

                     loc_7c05:
0000000000007c05         movsx      eax, cl                                     ; CODE XREF=printf_parse+1758
0000000000007c08         movabs     rdi, 0x1999999999999999
0000000000007c12         mov        rcx, r8
0000000000007c15         sub        eax, 0x30
0000000000007c18         cmp        rsi, rdi
0000000000007c1b         cdqe
0000000000007c1d         ja         loc_7c26

0000000000007c1f         lea        rcx, qword [rsi+rsi*4]
0000000000007c23         add        rcx, rcx

                     loc_7c26:
0000000000007c26         mov        rbp, rdx                                    ; CODE XREF=printf_parse+1709

                     loc_7c29:
0000000000007c29         xor        r11d, r11d                                  ; CODE XREF=printf_parse+3062
0000000000007c2c         add        rax, rcx
0000000000007c2f         movzx      ecx, byte [rdx+1]
0000000000007c33         setb       r11b
0000000000007c37         add        rdx, 0x1
0000000000007c3b         mov        rsi, rax
0000000000007c3e         test       r11, r11
0000000000007c41         lea        edi, dword [rcx-0x30]
0000000000007c44         jne        loc_814e

0000000000007c4a         cmp        dil, 0x9
0000000000007c4e         jbe        loc_7c05

0000000000007c50         lea        rbx, qword [rax-1]
0000000000007c54         cmp        rbx, 0xfffffffffffffffd
0000000000007c58         ja         loc_7dbb

0000000000007c5e         mov        qword [r12+0x28], rbx
0000000000007c63         add        rbp, 0x2
0000000000007c67         jmp        loc_792f

                     loc_7c6c:
0000000000007c6c         cmp        eax, 0xf                                    ; case 73, CODE XREF=printf_parse+581
0000000000007c6f         mov        r11d, 0x16
0000000000007c75         jg         loc_77c8

0000000000007c7b         test       al, 0x4
0000000000007c7d         jne        loc_77c8

0000000000007c83         cmp        eax, 0x7
0000000000007c86         mov        r11d, 0x15
0000000000007c8c         jg         loc_77c8

0000000000007c92         test       al, 0x2
0000000000007c94         mov        r11d, 0x12
0000000000007c9a         jne        loc_77c8

0000000000007ca0         xor        r11d, r11d
0000000000007ca3         test       al, 0x1
0000000000007ca5         sete       r11b
0000000000007ca9         add        r11d, 0x13
0000000000007cad         jmp        loc_77c8
0000000000007cb2         align      8

                     loc_7cb8:
0000000000007cb8         xor        r11d, r11d                                  ; case 62, CODE XREF=printf_parse+581
0000000000007cbb         cmp        eax, 0x7
0000000000007cbe         setg       r11b
0000000000007cc2         add        r11d, 0xd
0000000000007cc6         jmp        loc_77c8

                     loc_7ccb:
0000000000007ccb         cmp        eax, 0xf                                    ; case 68, CODE XREF=printf_parse+581
0000000000007cce         mov        r11d, 0x9
0000000000007cd4         jg         loc_77c8

0000000000007cda         test       al, 0x4
0000000000007cdc         jne        loc_77c8

0000000000007ce2         cmp        eax, 0x7
0000000000007ce5         mov        r11d, 0x7
0000000000007ceb         jg         loc_77c8

0000000000007cf1         test       al, 0x2
0000000000007cf3         mov        r11d, 0x1
0000000000007cf9         jne        loc_77c8

0000000000007cff         and        eax, 0x1
0000000000007d02         cmp        eax, 0x1
0000000000007d05         sbb        r11d, r11d
0000000000007d08         and        r11d, 0x2
0000000000007d0c         add        r11d, 0x3
0000000000007d10         jmp        loc_77c8
0000000000007d15         align      8

                     loc_7d18:
0000000000007d18         xor        r11d, r11d                                  ; case 78, CODE XREF=printf_parse+581
0000000000007d1b         cmp        eax, 0x7
0000000000007d1e         setg       r11b
0000000000007d22         add        r11d, 0xf
0000000000007d26         jmp        loc_77c8

                     loc_7d2b:
0000000000007d2b         cmp        eax, 0xf                                    ; case 66, CODE XREF=printf_parse+581
0000000000007d2e         mov        r11d, 0xc
0000000000007d34         jg         loc_77c8

0000000000007d3a         xor        r11d, r11d
0000000000007d3d         test       al, 0x4
0000000000007d3f         setne      r11b
0000000000007d43         add        r11d, 0xb
0000000000007d47         jmp        loc_77c8

                     loc_7d4c:
0000000000007d4c         mov        r11d, 0xe                                   ; case 30, CODE XREF=printf_parse+581
0000000000007d52         mov        ebx, 0x63
0000000000007d57         jmp        loc_77c8

                     loc_7d5c:
0000000000007d5c         cmp        eax, 0xf                                    ; case 83, CODE XREF=printf_parse+581
0000000000007d5f         mov        r11d, 0xa
0000000000007d65         jg         loc_77c8

0000000000007d6b         test       al, 0x4
0000000000007d6d         jne        loc_77c8

0000000000007d73         cmp        eax, 0x7
0000000000007d76         mov        r11d, 0x8
0000000000007d7c         jg         loc_77c8

0000000000007d82         test       al, 0x2
0000000000007d84         mov        r11d, 0x2
0000000000007d8a         jne        loc_77c8

0000000000007d90         and        eax, 0x1
0000000000007d93         cmp        eax, 0x1
0000000000007d96         sbb        r11d, r11d
0000000000007d99         and        r11d, 0x2
0000000000007d9d         add        r11d, 0x4
0000000000007da1         jmp        loc_77c8
0000000000007da6         align      16

                     loc_7db0:
0000000000007db0         mov        r11d, 0x11                                  ; case 75, CODE XREF=printf_parse+581
0000000000007db6         jmp        loc_77c8

                     loc_7dbb:
0000000000007dbb         mov        rcx, qword [r15+8]                          ; case 82, CODE XREF=printf_parse+558, printf_parse+581, printf_parse+940, printf_parse+1476, printf_parse+1768, printf_parse+2345, printf_parse+2370, printf_parse+2903, printf_parse+3019, printf_parse+3042, printf_parse+3146

                     loc_7dbf:
0000000000007dbf         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+2188, printf_parse+2398, printf_parse+2637
0000000000007dc4         je         loc_7dce

0000000000007dc6         mov        rdi, rcx                                    ; argument "__ptr" for method j_free
0000000000007dc9         call       j_free                                      ; free

                     loc_7dce:
0000000000007dce         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2132
0000000000007dd2         cmp        qword [rsp+0x88+var_60], rdi
0000000000007dd7         je         loc_7dde

0000000000007dd9         call       j_free                                      ; free

                     loc_7dde:
0000000000007dde         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2151
0000000000007de3         mov        dword [rax], 0x16
0000000000007de9         mov        eax, 0xffffffff
0000000000007dee         jmp        loc_7612

                     loc_7df3:
0000000000007df3         cmp        edx, r11d                                   ; CODE XREF=printf_parse+690
0000000000007df6         je         loc_782b

0000000000007dfc         jmp        loc_7dbf
0000000000007dfe         align      512

                     loc_7e00:
0000000000007e00         add        r9, r9                                      ; CODE XREF=printf_parse+622
0000000000007e03         lea        rax, qword [r13+1]
0000000000007e07         cmp        r9, r13
0000000000007e0a         cmovbe     r9, rax
0000000000007e0e         movabs     rax, 0x7ffffffffffffff
0000000000007e18         cmp        r9, rax
0000000000007e1b         ja         loc_81fb

0000000000007e21         mov        rsi, r9
0000000000007e24         mov        qword [rsp+0x88+var_40], r9
0000000000007e29         mov        qword [rsp+0x88+var_48], r10
0000000000007e2e         shl        rsi, 0x5
0000000000007e32         cmp        qword [rsp+0x88+var_80], rcx
0000000000007e37         mov        qword [rsp+0x88+var_50], r8
0000000000007e3c         mov        dword [rsp+0x88+var_58], r11d
0000000000007e41         je         loc_7ee1

0000000000007e47         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000007e4a         call       j_realloc                                   ; realloc
0000000000007e4f         test       rax, rax
0000000000007e52         mov        rcx, rax
0000000000007e55         mov        r11d, dword [rsp+0x88+var_58]
0000000000007e5a         mov        r8, qword [rsp+0x88+var_50]
0000000000007e5f         mov        r10, qword [rsp+0x88+var_48]
0000000000007e64         mov        r9, qword [rsp+0x88+var_40]
0000000000007e69         je         loc_81f7

0000000000007e6f         mov        rax, qword [rsp+0x88+var_80]
0000000000007e74         cmp        rax, qword [r15+8]
0000000000007e78         je         loc_7f09

                     loc_7e7e:
0000000000007e7e         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+2520
0000000000007e82         jmp        loc_77e4

                     loc_7e87:
0000000000007e87         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+604
0000000000007e8c         cmp        rsi, 0xffffffffffffffff
0000000000007e90         lea        rax, qword [rsi+1]
0000000000007e94         mov        qword [r12+0x50], rsi
0000000000007e99         je         loc_7dbb

0000000000007e9f         mov        r13, qword [rsp+0x88+var_68]
0000000000007ea4         mov        qword [rsp+0x88+var_68], rax
0000000000007ea9         jmp        loc_77d7

                     loc_7eae:
0000000000007eae         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1453
0000000000007eb2         ja         loc_7dbb

0000000000007eb8         movsx      eax, bl
0000000000007ebb         mov        rsi, r8
0000000000007ebe         mov        rcx, rbp
0000000000007ec1         sub        eax, 0x30
0000000000007ec4         cdqe
0000000000007ec6         jmp        loc_7b01

                     loc_7ecb:
0000000000007ecb         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1154
0000000000007ece         jne        loc_7dbf

0000000000007ed4         movzx      ebx, byte [rbp]
0000000000007ed8         lea        rdx, qword [rbp+1]
0000000000007edc         jmp        loc_7735

                     loc_7ee1:
0000000000007ee1         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2257
0000000000007ee4         call       j_malloc                                    ; malloc
0000000000007ee9         test       rax, rax
0000000000007eec         mov        rcx, rax
0000000000007eef         mov        r11d, dword [rsp+0x88+var_58]
0000000000007ef4         mov        r8, qword [rsp+0x88+var_50]
0000000000007ef9         mov        r10, qword [rsp+0x88+var_48]
0000000000007efe         mov        r9, qword [rsp+0x88+var_40]
0000000000007f03         je         loc_806c

                     loc_7f09:
0000000000007f09         mov        rdx, qword [r15]                            ; CODE XREF=printf_parse+2312
0000000000007f0c         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy
0000000000007f11         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007f14         mov        qword [rsp+0x88+var_40], r9
0000000000007f19         mov        qword [rsp+0x88+var_48], r10
0000000000007f1e         mov        qword [rsp+0x88+var_50], r8
0000000000007f23         mov        dword [rsp+0x88+var_58], r11d
0000000000007f28         shl        rdx, 0x5                                    ; argument "__n" for method j_memcpy
0000000000007f2c         call       j_memcpy                                    ; memcpy
0000000000007f31         mov        r9, qword [rsp+0x88+var_40]
0000000000007f36         mov        r10, qword [rsp+0x88+var_48]
0000000000007f3b         mov        rcx, rax
0000000000007f3e         mov        r8, qword [rsp+0x88+var_50]
0000000000007f43         mov        r11d, dword [rsp+0x88+var_58]
0000000000007f48         jmp        loc_7e7e

                     loc_7f4d:
0000000000007f4d         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+799
0000000000007f50         call       j_malloc                                    ; malloc
0000000000007f55         test       rax, rax
0000000000007f58         mov        rcx, rax
0000000000007f5b         mov        r8, qword [rsp+0x88+var_58]
0000000000007f60         mov        r10, qword [rsp+0x88+var_50]
0000000000007f65         mov        r9, qword [rsp+0x88+var_48]
0000000000007f6a         je         loc_8059

                     loc_7f70:
0000000000007f70         lea        rax, qword [rbx+rbx*4]                      ; CODE XREF=printf_parse+849
0000000000007f74         mov        rsi, qword [rsp+0x88+var_60]                ; argument "__src" for method j_memcpy
0000000000007f79         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000007f7c         mov        qword [rsp+0x88+var_48], r9
0000000000007f81         mov        qword [rsp+0x88+var_50], r10
0000000000007f86         lea        rdx, qword [rbx+rax*2]
0000000000007f8a         mov        qword [rsp+0x88+var_58], r8
0000000000007f8f         shl        rdx, 0x3                                    ; argument "__n" for method j_memcpy
0000000000007f93         call       j_memcpy                                    ; memcpy
0000000000007f98         mov        rbx, qword [r14]
0000000000007f9b         mov        rcx, rax
0000000000007f9e         mov        r9, qword [rsp+0x88+var_48]
0000000000007fa3         mov        r10, qword [rsp+0x88+var_50]
0000000000007fa8         mov        r8, qword [rsp+0x88+var_58]
0000000000007fad         jmp        loc_78c7

                     loc_7fb2:
0000000000007fb2         mov        rax, qword [r15]                            ; CODE XREF=printf_parse+966
0000000000007fb5         jmp        loc_79b7

                     loc_7fba:
0000000000007fba         cmp        edx, 0x5                                    ; CODE XREF=printf_parse+1330
0000000000007fbd         jne        loc_7dbf

0000000000007fc3         movzx      ebx, byte [r11]
0000000000007fc7         mov        rbp, r11
0000000000007fca         jmp        loc_773e

                     loc_7fcf:
0000000000007fcf         add        r9, r9                                      ; CODE XREF=printf_parse+1268
0000000000007fd2         lea        rax, qword [rbx+1]
0000000000007fd6         cmp        r9, rbx
0000000000007fd9         cmovbe     r9, rax
0000000000007fdd         movabs     rax, 0x7ffffffffffffff
0000000000007fe7         cmp        r9, rax
0000000000007fea         ja         loc_81fb

0000000000007ff0         mov        rsi, r9
0000000000007ff3         mov        qword [rsp+0x88+var_40], r9
0000000000007ff8         mov        qword [rsp+0x88+var_48], r10
0000000000007ffd         shl        rsi, 0x5
0000000000008001         cmp        qword [rsp+0x88+var_80], rcx
0000000000008006         mov        qword [rsp+0x88+var_50], r8
000000000000800b         mov        qword [rsp+0x88+var_58], r11
0000000000008010         je         loc_81ce

0000000000008016         mov        rdi, rcx                                    ; argument "__ptr" for method j_realloc
0000000000008019         call       j_realloc                                   ; realloc
000000000000801e         mov        rdx, qword [r15+8]
0000000000008022         mov        r11, qword [rsp+0x88+var_58]
0000000000008027         mov        rcx, rax
000000000000802a         mov        r8, qword [rsp+0x88+var_50]
000000000000802f         mov        r10, qword [rsp+0x88+var_48]
0000000000008034         mov        r9, qword [rsp+0x88+var_40]

                     loc_8039:
0000000000008039         test       rcx, rcx                                    ; CODE XREF=printf_parse+3202
000000000000803c         je         loc_8257

0000000000008042         cmp        qword [rsp+0x88+var_80], rdx
0000000000008047         mov        rax, qword [r15]
000000000000804a         je         loc_8210

                     loc_8050:
0000000000008050         mov        qword [r15+8], rcx                          ; CODE XREF=printf_parse+3298
0000000000008054         jmp        loc_7a6d

                     loc_8059:
0000000000008059         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+2554
000000000000805d         cmp        qword [rsp+0x88+var_80], rcx
0000000000008062         je         loc_807c

                     loc_8064:
0000000000008064         mov        rdi, rcx                                    ; argument "__ptr" for method j_free, CODE XREF=printf_parse+3216
0000000000008067         call       j_free                                      ; free

                     loc_806c:
000000000000806c         mov        rdi, qword [r14+8]                          ; CODE XREF=printf_parse+2451, printf_parse+3222
0000000000008070         cmp        qword [rsp+0x88+var_60], rdi
0000000000008075         je         loc_807c

0000000000008077         call       j_free                                      ; free

                     loc_807c:
000000000000807c         call       j___errno_location                          ; __errno_location, CODE XREF=printf_parse+2802, printf_parse+2821
0000000000008081         mov        dword [rax], 0xc
0000000000008087         mov        eax, 0xffffffff
000000000000808c         jmp        loc_7612

                     loc_8091:
0000000000008091         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+1032
0000000000008094         call       j_malloc                                    ; malloc
0000000000008099         mov        rdx, qword [rsp+0x88+var_80]
000000000000809e         mov        rcx, rax
00000000000080a1         mov        r9, qword [rsp+0x88+var_48]
00000000000080a6         mov        r10, qword [rsp+0x88+var_50]
00000000000080ab         mov        r8, qword [rsp+0x88+var_58]
00000000000080b0         jmp        loc_799c

                     loc_80b5:
00000000000080b5         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=printf_parse+1255
00000000000080ba         cmp        rsi, 0xffffffffffffffff
00000000000080be         lea        rax, qword [rsi+1]
00000000000080c2         mov        qword [r12+0x40], rsi
00000000000080c7         je         loc_7dbb

00000000000080cd         mov        rbx, qword [rsp+0x88+var_68]
00000000000080d2         mov        qword [rsp+0x88+var_68], rax
00000000000080d7         jmp        loc_7a5d

                     loc_80dc:
00000000000080dc         mov        rdx, r11                                    ; CODE XREF=printf_parse+1240

                     loc_80df:
00000000000080df         add        rdx, 0x1                                    ; CODE XREF=printf_parse+2941
00000000000080e3         movzx      ecx, byte [rdx]
00000000000080e6         lea        esi, dword [rcx-0x30]
00000000000080e9         cmp        sil, 0x9
00000000000080ed         jbe        loc_80df

00000000000080ef         cmp        cl, 0x24
00000000000080f2         jne        loc_7a4e

00000000000080f8         xor        ecx, ecx

                     loc_80fa:
00000000000080fa         movabs     rsi, 0x1999999999999999                     ; CODE XREF=printf_parse+3132
0000000000008104         sub        eax, 0x30
0000000000008107         mov        rdx, r8
000000000000810a         cmp        rcx, rsi
000000000000810d         cdqe
000000000000810f         ja         loc_8118

0000000000008111         lea        rdx, qword [rcx+rcx*4]
0000000000008115         add        rdx, rdx

                     loc_8118:
0000000000008118         mov        rsi, r11                                    ; CODE XREF=printf_parse+2975

                     loc_811b:
000000000000811b         xor        ebx, ebx                                    ; CODE XREF=printf_parse+3036
000000000000811d         add        rdx, rax
0000000000008120         movsx      eax, byte [r11+1]
0000000000008125         setb       bl
0000000000008128         add        r11, 0x1
000000000000812c         mov        rcx, rdx
000000000000812f         test       rbx, rbx
0000000000008132         lea        edi, dword [rax-0x30]
0000000000008135         je         loc_81a8

0000000000008137         cmp        dil, 0x9
000000000000813b         ja         loc_7dbb

0000000000008141         sub        eax, 0x30
0000000000008144         mov        rdx, r8
0000000000008147         mov        rsi, r11
000000000000814a         cdqe
000000000000814c         jmp        loc_811b

                     loc_814e:
000000000000814e         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+1748
0000000000008152         ja         loc_7dbb

0000000000008158         movsx      eax, cl
000000000000815b         mov        rbp, rdx
000000000000815e         mov        rcx, r8
0000000000008161         sub        eax, 0x30
0000000000008164         cdqe
0000000000008166         jmp        loc_7c29

                     loc_816b:
000000000000816b         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+1085
0000000000008170         shl        rax, 0x5
0000000000008174         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
0000000000008177         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000817a         mov        qword [rsp+0x88+var_48], r9
000000000000817f         mov        qword [rsp+0x88+var_50], r10
0000000000008184         mov        qword [rsp+0x88+var_58], r8
0000000000008189         call       j_memcpy                                    ; memcpy
000000000000818e         mov        r9, qword [rsp+0x88+var_48]
0000000000008193         mov        rcx, rax
0000000000008196         mov        r10, qword [rsp+0x88+var_50]
000000000000819b         mov        rax, qword [r15]
000000000000819e         mov        r8, qword [rsp+0x88+var_58]
00000000000081a3         jmp        loc_79b3

                     loc_81a8:
00000000000081a8         cmp        dil, 0x9                                    ; CODE XREF=printf_parse+3013
00000000000081ac         jbe        loc_80fa

00000000000081b2         lea        rbx, qword [rdx-1]
00000000000081b6         cmp        rbx, 0xfffffffffffffffd
00000000000081ba         ja         loc_7dbb

00000000000081c0         mov        qword [r12+0x40], rbx
00000000000081c5         lea        r11, qword [rsi+2]
00000000000081c9         jmp        loc_7a5d

                     loc_81ce:
00000000000081ce         mov        rdi, rsi                                    ; argument "__size" for method j_malloc, CODE XREF=printf_parse+2720
00000000000081d1         call       j_malloc                                    ; malloc
00000000000081d6         mov        rdx, qword [rsp+0x88+var_80]
00000000000081db         mov        rcx, rax
00000000000081de         mov        r9, qword [rsp+0x88+var_40]
00000000000081e3         mov        r10, qword [rsp+0x88+var_48]
00000000000081e8         mov        r8, qword [rsp+0x88+var_50]
00000000000081ed         mov        r11, qword [rsp+0x88+var_58]
00000000000081f2         jmp        loc_8039

                     loc_81f7:
00000000000081f7         mov        rcx, qword [r15+8]                          ; CODE XREF=printf_parse+731, printf_parse+753, printf_parse+831, printf_parse+2297

                     loc_81fb:
00000000000081fb         cmp        qword [rsp+0x88+var_80], rcx                ; CODE XREF=printf_parse+999, printf_parse+2219, printf_parse+2682, printf_parse+3306
0000000000008200         jne        loc_8064

0000000000008206         jmp        loc_806c
000000000000820b         align      16

                     loc_8210:
0000000000008210         mov        rsi, qword [rsp+0x88+var_80]                ; argument "__src" for method j_memcpy, CODE XREF=printf_parse+2778
0000000000008215         shl        rax, 0x5
0000000000008219         mov        rdi, rcx                                    ; argument "__dest" for method j_memcpy
000000000000821c         mov        rdx, rax                                    ; argument "__n" for method j_memcpy
000000000000821f         mov        qword [rsp+0x88+var_40], r9
0000000000008224         mov        qword [rsp+0x88+var_48], r10
0000000000008229         mov        qword [rsp+0x88+var_50], r8
000000000000822e         mov        qword [rsp+0x88+var_58], r11
0000000000008233         call       j_memcpy                                    ; memcpy
0000000000008238         mov        r9, qword [rsp+0x88+var_40]
000000000000823d         mov        rcx, rax
0000000000008240         mov        r10, qword [rsp+0x88+var_48]
0000000000008245         mov        rax, qword [r15]
0000000000008248         mov        r8, qword [rsp+0x88+var_50]
000000000000824d         mov        r11, qword [rsp+0x88+var_58]
0000000000008252         jmp        loc_8050

                     loc_8257:
0000000000008257         mov        rcx, rdx                                    ; CODE XREF=printf_parse+1071, printf_parse+2764
000000000000825a         jmp        loc_81fb
000000000000825c         align      32                                          ; End of unwind block (FDE at 0xae64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
0000000000008260         push       r15                                         ; Begin of unwind block (FDE at 0xaeb4), DATA XREF=_start+22
0000000000008262         push       r14
0000000000008264         mov        r15, rdx
0000000000008267         push       r13
0000000000008269         push       r12
000000000000826b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
0000000000008272         push       rbp
0000000000008273         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000827a         push       rbx
000000000000827b         mov        r13d, edi
000000000000827e         mov        r14, rsi
0000000000008281         sub        rbp, r12
0000000000008284         sub        rsp, 0x8
0000000000008288         sar        rbp, 0x3
000000000000828c         call       _init                                       ; _init
0000000000008291         test       rbp, rbp
0000000000008294         je         loc_82b6

0000000000008296         xor        ebx, ebx
0000000000008298         nop        dword [rax+rax]

                     loc_82a0:
00000000000082a0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
00000000000082a3         mov        rsi, r14
00000000000082a6         mov        edi, r13d
00000000000082a9         call       qword [r12+rbx*8]
00000000000082ad         add        rbx, 0x1
00000000000082b1         cmp        rbp, rbx
00000000000082b4         jne        loc_82a0

                     loc_82b6:
00000000000082b6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
00000000000082ba         pop        rbx
00000000000082bb         pop        rbp
00000000000082bc         pop        r12
00000000000082be         pop        r13
00000000000082c0         pop        r14
00000000000082c2         pop        r15
00000000000082c4         ret
                        ; endp
00000000000082c5         align      16                                          ; End of unwind block (FDE at 0xaeb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
00000000000082d0         ret                                                    ; Begin of unwind block (FDE at 0xaefc), DATA XREF=_start+15
                        ; endp
00000000000082d2         align      32                                          ; End of unwind block (FDE at 0xaefc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
00000000000082e0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xaf14), __dso_handle, CODE XREF=main+84
00000000000082e7         xor        esi, esi
00000000000082e9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
00000000000082ee         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xaf14)
00000000000082ef         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0x82f0; 0x82f9[ (9 bytes)
        ; File offset : [33520; 33529[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
00000000000082f0         sub        rsp, 0x8
00000000000082f4         add        rsp, 0x8
00000000000082f8         ret
                        ; endp
00000000000082f9         db  0x00 ; '.'
00000000000082fa         db  0x00 ; '.'
00000000000082fb         db  0x00 ; '.'
00000000000082fc         db  0x00 ; '.'
00000000000082fd         db  0x00 ; '.'
00000000000082fe         db  0x00 ; '.'
00000000000082ff         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0x8300; 0x9e4c[ (6988 bytes)
        ; File offset : [33536; 40524[ (6988 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
0000000000008300         db  0x01 ; '.'
0000000000008301         db  0x00 ; '.'
0000000000008302         db  0x02 ; '.'
0000000000008303         db  0x00 ; '.'
0000000000008304         db  0x21 ; '!'                                         ; DATA XREF=binop+39, binary_operator+153
0000000000008305         db  0x3d ; '='                                         ; DATA XREF=binop+3
0000000000008306         db  0x00 ; '.'
0000000000008307         db  0x3d ; '='                                         ; DATA XREF=binop+70
0000000000008308         db  0x3d ; '='
0000000000008309         db  0x00 ; '.'
000000000000830a         db  0x2d ; '-'                                         ; DATA XREF=binop+101
000000000000830b         db  0x6e ; 'n'
000000000000830c         db  0x74 ; 't'
000000000000830d         db  0x00 ; '.'
000000000000830e         db  0x2d ; '-'                                         ; DATA XREF=binop+132
000000000000830f         db  0x6f ; 'o'
0000000000008310         db  0x74 ; 't'
0000000000008311         db  0x00 ; '.'
0000000000008312         db  0x2d ; '-'                                         ; DATA XREF=binop+163
0000000000008313         db  0x65 ; 'e'
0000000000008314         db  0x66 ; 'f'
0000000000008315         db  0x00 ; '.'
0000000000008316         db  0x2d ; '-'                                         ; DATA XREF=binop+194
0000000000008317         db  0x65 ; 'e'
0000000000008318         db  0x71 ; 'q'
0000000000008319         db  0x00 ; '.'
000000000000831a         db  0x2d ; '-'                                         ; DATA XREF=binop+225
000000000000831b         db  0x6e ; 'n'
000000000000831c         db  0x65 ; 'e'
000000000000831d         db  0x00 ; '.'
000000000000831e         db  0x2d ; '-'                                         ; DATA XREF=binop+252
000000000000831f         db  0x6c ; 'l'
0000000000008320         db  0x74 ; 't'
0000000000008321         db  0x00 ; '.'
0000000000008322         db  0x2d ; '-'                                         ; DATA XREF=binop+279
0000000000008323         db  0x6c ; 'l'
0000000000008324         db  0x65 ; 'e'
0000000000008325         db  0x00 ; '.'
0000000000008326         db  0x2d ; '-'                                         ; DATA XREF=binop+306
0000000000008327         db  0x67 ; 'g'
0000000000008328         db  0x74 ; 't'
0000000000008329         db  0x00 ; '.'
000000000000832a         db  0x2d ; '-'                                         ; DATA XREF=binop+333
000000000000832b         db  0x67 ; 'g'
000000000000832c         db  0x65 ; 'e'
000000000000832d         db  0x00 ; '.'
                     aInvalidInteger:
000000000000832e         db         "invalid integer %s", 0                     ; DATA XREF=find_int+177
                     aMissingArgumen:
0000000000008341         db         "missing argument after %s", 0              ; DATA XREF=beyond+25
                     aNtDoesNotAccep:
000000000000835b         db         "-nt does not accept -l", 0                 ; DATA XREF=binary_operator+1380
                     aEfDoesNotAccep:
0000000000008372         db         "-ef does not accept -l", 0                 ; DATA XREF=binary_operator+1366
                     aOtDoesNotAccep:
0000000000008389         db         "-ot does not accept -l", 0                 ; DATA XREF=binary_operator+1330
                     aSUnknownBinary:
00000000000083a0         db         "%s: unknown binary operator", 0            ; DATA XREF=binary_operator+1074
                     aSUnaryOperator:
00000000000083bc         db         "%s: unary operator expected", 0            ; DATA XREF=unary_operator+1419
00000000000083d8         db  0x21 ; '!'                                         ; DATA XREF=two_arguments+14, posixtest+47, three_arguments+55
00000000000083d9         db  0x00 ; '.'
00000000000083da         db  0x28 ; '('                                         ; DATA XREF=posixtest+232, three_arguments+120
00000000000083db         db  0x00 ; '.'
                     aSExpected:
00000000000083dc         db         "%s expected", 0                            ; DATA XREF=or+950
                     aSExpectedFound:
00000000000083e8         db         "%s expected, found %s", 0                  ; DATA XREF=or+900
00000000000083fe         db  0x2d ; '-'                                         ; DATA XREF=or+48, three_arguments+200
00000000000083ff         db  0x61 ; 'a'
0000000000008400         db  0x00 ; '.'
0000000000008401         db  0x2d ; '-'                                         ; DATA XREF=or+702, three_arguments+226
0000000000008402         db  0x6f ; 'o'
0000000000008403         db  0x00 ; '.'
                     aSBinaryOperato:
0000000000008404         db         "%s: binary operator expected", 0           ; DATA XREF=three_arguments+288
                     aTestAndor:
0000000000008421         db         "test and/or [", 0                          ; DATA XREF=usage+660
                     aNsOnlineHelpSn:
000000000000842f         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+719
                     aGnuCoreutils:
0000000000008446         db         "GNU coreutils", 0                          ; DATA XREF=main+313, usage+745, emit_bug_reporting_address+68
0000000000008454         db  0x65 ; 'e'                                         ; DATA XREF=usage+784
0000000000008455         db  0x6e ; 'n'
0000000000008456         db  0x5f ; '_'
0000000000008457         db  0x00 ; '.'
                     aFullDocumentat:
0000000000008458         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+812
                     aTestInvocation:
0000000000008473         db         "test invocation", 0                        ; DATA XREF=usage+826
                     aUsrlocalsharel:
0000000000008483         db         "/usr/local/share/locale", 0                ; DATA XREF=main+36
                     aHelp:
000000000000849b         db         "--help", 0                                 ; DATA XREF=main+203
                     aVersion:
00000000000084a2         db         "--version", 0                              ; DATA XREF=main+226
                     aMatthewBradbur:
00000000000084ac         db         "Matthew Bradburn", 0                       ; DATA XREF=main+320
                     aKevinBraunsdor:
00000000000084bd         db         "Kevin Braunsdorf", 0                       ; DATA XREF=main+327
00000000000084ce         db  0x5d ; ']'                                         ; DATA XREF=main+113, main+247, main+355
00000000000084cf         db  0x00 ; '.'
                     aMissingS:
00000000000084d0         db         "missing %s", 0                             ; DATA XREF=main+367
                     aExtraArgumentS:
00000000000084db         db         "extra argument %s", 0                      ; DATA XREF=main+426
00000000000084ed         db  0x00 ; '.'
00000000000084ee         db  0x00 ; '.'
00000000000084ef         db  0x00 ; '.'
                     switch_table_84f0:        // switch_table
00000000000084f0         dd         unary_operator.loc_26f0-switch_table_84f0, 4 dup (unary_operator.loc_2766-switch_table_84f0), unary_operator.loc_26a8-switch_table_84f0, unary_operator.loc_2766-switch_table_84f0 ; switch table used at 0x222e containing 52 entries, DATA XREF=unary_operator+61
000000000000850c         dd         unary_operator.loc_2650-switch_table_84f0, unary_operator.loc_2620-switch_table_84f0, 3 dup (unary_operator.loc_2766-switch_table_84f0), unary_operator.loc_25e0-switch_table_84f0
0000000000008524         dd         14 dup (unary_operator.loc_2766-switch_table_84f0), unary_operator.loc_25a0-switch_table_84f0, unary_operator.loc_2560-switch_table_84f0, unary_operator.loc_2520-switch_table_84f0
0000000000008568         dd         unary_operator.loc_24f0-switch_table_84f0, unary_operator.loc_24b0-switch_table_84f0, unary_operator.loc_2470-switch_table_84f0, unary_operator.loc_26a8-switch_table_84f0
0000000000008578         dd         2 dup (unary_operator.loc_2766-switch_table_84f0), unary_operator.loc_2430-switch_table_84f0, 2 dup (unary_operator.loc_2766-switch_table_84f0), unary_operator.loc_2410-switch_table_84f0
0000000000008590         dd         unary_operator.loc_2766-switch_table_84f0, unary_operator.loc_23c8-switch_table_84f0, unary_operator.loc_2766-switch_table_84f0, unary_operator.loc_23a0-switch_table_84f0
00000000000085a0         dd         unary_operator.loc_2368-switch_table_84f0, unary_operator.loc_22d8-switch_table_84f0, unary_operator.loc_22a0-switch_table_84f0, unary_operator.loc_2766-switch_table_84f0
00000000000085b0         dd         unary_operator.loc_2340-switch_table_84f0, unary_operator.loc_2278-switch_table_84f0, unary_operator.loc_2766-switch_table_84f0, unary_operator.loc_2230-switch_table_84f0
                     aTrySHelpForMor:
00000000000085c0         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+10
00000000000085e7         align      8
                     aUsageTestExpre:
00000000000085e8         db         "Usage: test EXPRESSION\n  or:  test\n  or:  [ EXPRESSION ]\n  or:  [ ]\n  or:  [ OPTION\n", 0 ; DATA XREF=usage+75
000000000000863d         align      64
                     aExitWithTheSta:
0000000000008640         db         "Exit with the status determined by EXPRESSION.\n\n", 0 ; DATA XREF=usage+112
0000000000008671         align      8
                     aHelpDisplayThi:
0000000000008678         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+149
00000000000086a5         align      8
                     aVersionOutputV:
00000000000086a8         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+186
00000000000086de         align      32
                     aNanOmittedExpr:
00000000000086e0         db         "\nAn omitted EXPRESSION defaults to false.  Otherwise,\nEXPRESSION is true or false and sets exit status.  It is one of:\n", 0 ; DATA XREF=usage+223
                     aNExpressionExp:
0000000000008758         db         "\n  ( EXPRESSION )               EXPRESSION is true\n  ! EXPRESSION                 EXPRESSION is false\n  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 are true\n  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 is true\n", 0 ; DATA XREF=usage+260
0000000000008851         align      8
                     aNNStringTheLen:
0000000000008858         db         "\n  -n STRING            the length of STRING is nonzero\n  STRING               equivalent to -n STRING\n  -z STRING            the length of STRING is zero\n  STRING1 = STRING2    the strings are equal\n  STRING1 != STRING2   the strings are not equal\n", 0 ; DATA XREF=usage+297
0000000000008952         align      8
                     aNInteger1EqInt:
0000000000008958         db         "\n  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2\n  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER2\n  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2\n  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER" ; DATA XREF=usage+334
0000000000008a58         db         "2\n  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2\n  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2\n", 0
                     aNFile1EfFile2F:
0000000000008ad0         db         "\n  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inode numbers\n  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2\n  FILE1 -ot FILE2   FILE1 is older than FILE2\n", 0 ; DATA XREF=usage+371
0000000000008b8d         align      16
                     aNBFileFileExis:
0000000000008b90         db         "\n  -b FILE     FILE exists and is block special\n  -c FILE     FILE exists and is character special\n  -d FILE     FILE exists and is a directory\n  -e FILE     FILE exists\n", 0 ; DATA XREF=usage+408
0000000000008c3b         align      64
                     aFFileFileExist:
0000000000008c40         db         "  -f FILE     FILE exists and is a regular file\n  -g FILE     FILE exists and is set-group-ID\n  -G FILE     FILE exists and is owned by the effective group ID\n  -h FILE     FILE exists and is a symbolic link (same as -L)\n  -k FILE     FILE exists and has i" ; DATA XREF=usage+445
0000000000008d40         db         "ts sticky bit set\n", 0
0000000000008d53         align      8
                     aLFileFileExist:
0000000000008d58         db         "  -L FILE     FILE exists and is a symbolic link (same as -h)\n  -N FILE     FILE exists and has been modified since it was last read\n  -O FILE     FILE exists and is owned by the effective user ID\n  -p FILE     FILE exists and is a named pipe\n  -r FILE    " ; DATA XREF=usage+482
0000000000008e58         db         " FILE exists and read permission is granted\n  -s FILE     FILE exists and has a size greater than zero\n", 0
                     aSFileFileExist:
0000000000008ec0         db         "  -S FILE     FILE exists and is a socket\n  -t FD       file descriptor FD is opened on a terminal\n  -u FILE     FILE exists and its set-user-ID bit is set\n  -w FILE     FILE exists and write permission is granted\n  -x FILE     FILE exists and execute (or " ; DATA XREF=usage+519
0000000000008fc0         db         "search) permission is granted\n", 0
0000000000008fdf         align      32
                     aNexceptForHAnd:
0000000000008fe0         db         "\nExcept for -h and -L, all FILE-related tests dereference symbolic links.\nBeware that parentheses need to be escaped (e.g., by backslashes) for shells.\nINTEGER may also be -l STRING, which evaluates to the length of STRING.\n", 0 ; DATA XREF=usage+556
00000000000090c1         align      8
                     aNnoteBinaryAAn:
00000000000090c8         db         "\nNOTE: Binary -a and -o are inherently ambiguous.  Use 'test EXPR1 && test\nEXPR2' or 'test EXPR1 || test EXPR2' instead.\n", 0 ; DATA XREF=usage+593
0000000000009142         align      8
                     aNnoteHonorsThe:
0000000000009148         db         "\nNOTE: [ honors the --help and --version options, but test does not.\ntest treats each of those as it treats any other nonempty STRING.\n", 0 ; DATA XREF=usage+630
                     aNnoteYourShell:
00000000000091d0         db         "\nNOTE: your shell may have its own version of %s, which usually supersedes\nthe version described here.  Please refer to your shell's documentation\nfor details about the options it supports.\n", 0 ; DATA XREF=usage+679
000000000000928f         align      16
                     aHttpswwwgnuorg:
0000000000009290         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+738, usage+852, emit_bug_reporting_address+61
                     aReportAnyTrans:
00000000000092b8         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+947
00000000000092ff         align      256
                     aOrAvailableLoc:
0000000000009300         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+888
                     a831:
0000000000009333         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
0000000000009338         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
0000000000009344         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108
000000000000934b         align      16
                     aANullArgv0WasP:
0000000000009350         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
0000000000009388         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
0000000000009390         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
0000000000009391         db  0x74 ; 't'
0000000000009392         db  0x2d ; '-'
0000000000009393         db  0x00 ; '.'
0000000000009394         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
0000000000009395         db  0x80 ; '.'
0000000000009396         db  0x98 ; '.'
0000000000009397         db  0x00 ; '.'
0000000000009398         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
0000000000009399         db  0x80 ; '.'
000000000000939a         db  0x99 ; '.'
000000000000939b         db  0x00 ; '.'
000000000000939c         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000939d         db  0x07 ; '.'
000000000000939e         db  0x65 ; 'e'
000000000000939f         db  0x00 ; '.'
00000000000093a0         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
00000000000093a1         db  0xaf ; '.'
00000000000093a2         db  0x00 ; '.'
00000000000093a3         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_3c70+1451, sub_3c70+1493, sub_3c70+2429
00000000000093a4         db  0x00 ; '.'
00000000000093a5         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_3c70+132, sub_3c70+1338, sub_3c70+1670, sub_3c70+1697, sub_3c70+2352
00000000000093a6         db  0x00 ; '.'
00000000000093a7         db  0x60 ; '`'                                         ; DATA XREF=sub_3c70+1627, sub_3c70+1654
00000000000093a8         db  0x00 ; '.'
                     aLiteral:
00000000000093a9         db         "literal", 0
                     aShell:
00000000000093b1         db         "shell", 0
                     aShellalways:
00000000000093b7         db         "shell-always", 0
00000000000093c4         db  0x73 ; 's'
00000000000093c5         db  0x68 ; 'h'
00000000000093c6         db  0x65 ; 'e'
00000000000093c7         db  0x6c ; 'l'
00000000000093c8         db  0x6c ; 'l'
00000000000093c9         db  0x2d ; '-'
                     aEscape:
00000000000093ca         db         "escape", 0
                     aShellescapealw:
00000000000093d1         db         "shell-escape-always", 0
00000000000093e5         db  0x63 ; 'c'
00000000000093e6         db  0x00 ; '.'
                     aCmaybe:
00000000000093e7         db         "c-maybe", 0
                     aClocale:
00000000000093ef         db         "clocale", 0
00000000000093f7         align      1024
                     switch_table_9400:        // switch_table
0000000000009400         dd         quotearg_buffer_restyled.loc_436a-switch_table_9400, quotearg_buffer_restyled.loc_35c3-switch_table_9400, quotearg_buffer_restyled.loc_4598-switch_table_9400, quotearg_buffer_restyled.loc_43a4-switch_table_9400 ; switch table used at 0x35c1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
0000000000009410         dd         quotearg_buffer_restyled.loc_4194-switch_table_9400, quotearg_buffer_restyled.loc_41f0-switch_table_9400, quotearg_buffer_restyled.loc_4245-switch_table_9400, quotearg_buffer_restyled.loc_428a-switch_table_9400
0000000000009420         dd         3 dup (quotearg_buffer_restyled.loc_42c4-switch_table_9400)
000000000000942c         db  0x14 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000942d         db  0xa5 ; '.'
000000000000942e         db  0xff ; '.'
000000000000942f         db  0xff ; '.'
0000000000009430         db  0xfc ; '.'
0000000000009431         db  0xa5 ; '.'
0000000000009432         db  0xff ; '.'
0000000000009433         db  0xff ; '.'
0000000000009434         db  0xfc ; '.'
0000000000009435         db  0xa5 ; '.'
0000000000009436         db  0xff ; '.'
0000000000009437         db  0xff ; '.'
0000000000009438         db  0xfc ; '.'
0000000000009439         db  0xa5 ; '.'
000000000000943a         db  0xff ; '.'
000000000000943b         db  0xff ; '.'
000000000000943c         db  0xfc ; '.'
000000000000943d         db  0xa5 ; '.'
000000000000943e         db  0xff ; '.'
000000000000943f         db  0xff ; '.'
0000000000009440         db  0xfc ; '.'
0000000000009441         db  0xa5 ; '.'
0000000000009442         db  0xff ; '.'
0000000000009443         db  0xff ; '.'
0000000000009444         db  0xfc ; '.'
0000000000009445         db  0xa5 ; '.'
0000000000009446         db  0xff ; '.'
0000000000009447         db  0xff ; '.'
0000000000009448         db  0x54 ; 'T'
0000000000009449         db  0xa5 ; '.'
000000000000944a         db  0xff ; '.'
000000000000944b         db  0xff ; '.'
000000000000944c         db  0x5c ; '\'
000000000000944d         db  0xa4 ; '.'
000000000000944e         db  0xff ; '.'
000000000000944f         db  0xff ; '.'
0000000000009450         db  0x1c ; '.'
0000000000009451         db  0xa4 ; '.'
0000000000009452         db  0xff ; '.'
0000000000009453         db  0xff ; '.'
0000000000009454         db  0xe4 ; '.'
0000000000009455         db  0xa5 ; '.'
0000000000009456         db  0xff ; '.'
0000000000009457         db  0xff ; '.'
0000000000009458         db  0xd4 ; '.'
0000000000009459         db  0xa5 ; '.'
000000000000945a         db  0xff ; '.'
000000000000945b         db  0xff ; '.'
000000000000945c         db  0xc4 ; '.'
000000000000945d         db  0xa5 ; '.'
000000000000945e         db  0xff ; '.'
000000000000945f         db  0xff ; '.'
0000000000009460         db  0xb4 ; '.'
0000000000009461         db  0xa5 ; '.'
0000000000009462         db  0xff ; '.'
0000000000009463         db  0xff ; '.'
0000000000009464         db  0xfc ; '.'
0000000000009465         db  0xa5 ; '.'
0000000000009466         db  0xff ; '.'
0000000000009467         db  0xff ; '.'
0000000000009468         db  0xfc ; '.'
0000000000009469         db  0xa5 ; '.'
000000000000946a         db  0xff ; '.'
000000000000946b         db  0xff ; '.'
000000000000946c         db  0xfc ; '.'
000000000000946d         db  0xa5 ; '.'
000000000000946e         db  0xff ; '.'
000000000000946f         db  0xff ; '.'
0000000000009470         db  0xfc ; '.'
0000000000009471         db  0xa5 ; '.'
0000000000009472         db  0xff ; '.'
0000000000009473         db  0xff ; '.'
0000000000009474         db  0xfc ; '.'
0000000000009475         db  0xa5 ; '.'
0000000000009476         db  0xff ; '.'
0000000000009477         db  0xff ; '.'
0000000000009478         db  0xfc ; '.'
0000000000009479         db  0xa5 ; '.'
000000000000947a         db  0xff ; '.'
000000000000947b         db  0xff ; '.'
000000000000947c         db  0xfc ; '.'
000000000000947d         db  0xa5 ; '.'
000000000000947e         db  0xff ; '.'
000000000000947f         db  0xff ; '.'
0000000000009480         db  0xfc ; '.'
0000000000009481         db  0xa5 ; '.'
0000000000009482         db  0xff ; '.'
0000000000009483         db  0xff ; '.'
0000000000009484         db  0xfc ; '.'
0000000000009485         db  0xa5 ; '.'
0000000000009486         db  0xff ; '.'
0000000000009487         db  0xff ; '.'
0000000000009488         db  0xfc ; '.'
0000000000009489         db  0xa5 ; '.'
000000000000948a         db  0xff ; '.'
000000000000948b         db  0xff ; '.'
000000000000948c         db  0xfc ; '.'
000000000000948d         db  0xa5 ; '.'
000000000000948e         db  0xff ; '.'
000000000000948f         db  0xff ; '.'
0000000000009490         db  0xfc ; '.'
0000000000009491         db  0xa5 ; '.'
0000000000009492         db  0xff ; '.'
0000000000009493         db  0xff ; '.'
0000000000009494         db  0xfc ; '.'
0000000000009495         db  0xa5 ; '.'
0000000000009496         db  0xff ; '.'
0000000000009497         db  0xff ; '.'
0000000000009498         db  0xfc ; '.'
0000000000009499         db  0xa5 ; '.'
000000000000949a         db  0xff ; '.'
000000000000949b         db  0xff ; '.'
000000000000949c         db  0xfc ; '.'
000000000000949d         db  0xa5 ; '.'
000000000000949e         db  0xff ; '.'
000000000000949f         db  0xff ; '.'
00000000000094a0         db  0xfc ; '.'
00000000000094a1         db  0xa5 ; '.'
00000000000094a2         db  0xff ; '.'
00000000000094a3         db  0xff ; '.'
00000000000094a4         db  0xfc ; '.'
00000000000094a5         db  0xa5 ; '.'
00000000000094a6         db  0xff ; '.'
00000000000094a7         db  0xff ; '.'
00000000000094a8         db  0xfc ; '.'
00000000000094a9         db  0xa5 ; '.'
00000000000094aa         db  0xff ; '.'
00000000000094ab         db  0xff ; '.'
00000000000094ac         db  0xa4 ; '.'
00000000000094ad         db  0xa5 ; '.'
00000000000094ae         db  0xff ; '.'
00000000000094af         db  0xff ; '.'
00000000000094b0         db  0x94 ; '.'
00000000000094b1         db  0xa5 ; '.'
00000000000094b2         db  0xff ; '.'
00000000000094b3         db  0xff ; '.'
00000000000094b4         db  0x94 ; '.'
00000000000094b5         db  0xa5 ; '.'
00000000000094b6         db  0xff ; '.'
00000000000094b7         db  0xff ; '.'
00000000000094b8         db  0x64 ; 'd'
00000000000094b9         db  0xa5 ; '.'
00000000000094ba         db  0xff ; '.'
00000000000094bb         db  0xff ; '.'
00000000000094bc         db  0x94 ; '.'
00000000000094bd         db  0xa5 ; '.'
00000000000094be         db  0xff ; '.'
00000000000094bf         db  0xff ; '.'
00000000000094c0         db  0x3c ; '<'
00000000000094c1         db  0xa5 ; '.'
00000000000094c2         db  0xff ; '.'
00000000000094c3         db  0xff ; '.'
00000000000094c4         db  0x94 ; '.'
00000000000094c5         db  0xa5 ; '.'
00000000000094c6         db  0xff ; '.'
00000000000094c7         db  0xff ; '.'
00000000000094c8         db  0xf7 ; '.'
00000000000094c9         db  0xa3 ; '.'
00000000000094ca         db  0xff ; '.'
00000000000094cb         db  0xff ; '.'
00000000000094cc         db  0x94 ; '.'
00000000000094cd         db  0xa5 ; '.'
00000000000094ce         db  0xff ; '.'
00000000000094cf         db  0xff ; '.'
00000000000094d0         db  0x94 ; '.'
00000000000094d1         db  0xa5 ; '.'
00000000000094d2         db  0xff ; '.'
00000000000094d3         db  0xff ; '.'
00000000000094d4         db  0x94 ; '.'
00000000000094d5         db  0xa5 ; '.'
00000000000094d6         db  0xff ; '.'
00000000000094d7         db  0xff ; '.'
00000000000094d8         db  0x3c ; '<'
00000000000094d9         db  0xa5 ; '.'
00000000000094da         db  0xff ; '.'
00000000000094db         db  0xff ; '.'
00000000000094dc         db  0x3c ; '<'
00000000000094dd         db  0xa5 ; '.'
00000000000094de         db  0xff ; '.'
00000000000094df         db  0xff ; '.'
00000000000094e0         db  0x3c ; '<'
00000000000094e1         db  0xa5 ; '.'
00000000000094e2         db  0xff ; '.'
00000000000094e3         db  0xff ; '.'
00000000000094e4         db  0x3c ; '<'
00000000000094e5         db  0xa5 ; '.'
00000000000094e6         db  0xff ; '.'
00000000000094e7         db  0xff ; '.'
00000000000094e8         db  0x3c ; '<'
00000000000094e9         db  0xa5 ; '.'
00000000000094ea         db  0xff ; '.'
00000000000094eb         db  0xff ; '.'
00000000000094ec         db  0x3c ; '<'
00000000000094ed         db  0xa5 ; '.'
00000000000094ee         db  0xff ; '.'
00000000000094ef         db  0xff ; '.'
00000000000094f0         db  0x3c ; '<'
00000000000094f1         db  0xa5 ; '.'
00000000000094f2         db  0xff ; '.'
00000000000094f3         db  0xff ; '.'
00000000000094f4         db  0x3c ; '<'
00000000000094f5         db  0xa5 ; '.'
00000000000094f6         db  0xff ; '.'
00000000000094f7         db  0xff ; '.'
00000000000094f8         db  0x3c ; '<'
00000000000094f9         db  0xa5 ; '.'
00000000000094fa         db  0xff ; '.'
00000000000094fb         db  0xff ; '.'
00000000000094fc         db  0x3c ; '<'
00000000000094fd         db  0xa5 ; '.'
00000000000094fe         db  0xff ; '.'
00000000000094ff         db  0xff ; '.'
0000000000009500         db  0x3c ; '<'
0000000000009501         db  0xa5 ; '.'
0000000000009502         db  0xff ; '.'
0000000000009503         db  0xff ; '.'
0000000000009504         db  0x3c ; '<'
0000000000009505         db  0xa5 ; '.'
0000000000009506         db  0xff ; '.'
0000000000009507         db  0xff ; '.'
0000000000009508         db  0x3c ; '<'
0000000000009509         db  0xa5 ; '.'
000000000000950a         db  0xff ; '.'
000000000000950b         db  0xff ; '.'
000000000000950c         db  0x3c ; '<'
000000000000950d         db  0xa5 ; '.'
000000000000950e         db  0xff ; '.'
000000000000950f         db  0xff ; '.'
0000000000009510         db  0x3c ; '<'
0000000000009511         db  0xa5 ; '.'
0000000000009512         db  0xff ; '.'
0000000000009513         db  0xff ; '.'
0000000000009514         db  0x3c ; '<'
0000000000009515         db  0xa5 ; '.'
0000000000009516         db  0xff ; '.'
0000000000009517         db  0xff ; '.'
0000000000009518         db  0x94 ; '.'
0000000000009519         db  0xa5 ; '.'
000000000000951a         db  0xff ; '.'
000000000000951b         db  0xff ; '.'
000000000000951c         db  0x94 ; '.'
000000000000951d         db  0xa5 ; '.'
000000000000951e         db  0xff ; '.'
000000000000951f         db  0xff ; '.'
0000000000009520         db  0x94 ; '.'
0000000000009521         db  0xa5 ; '.'
0000000000009522         db  0xff ; '.'
0000000000009523         db  0xff ; '.'
0000000000009524         db  0x94 ; '.'
0000000000009525         db  0xa5 ; '.'
0000000000009526         db  0xff ; '.'
0000000000009527         db  0xff ; '.'
0000000000009528         db  0xc7 ; '.'
0000000000009529         db  0xa3 ; '.'
000000000000952a         db  0xff ; '.'
000000000000952b         db  0xff ; '.'
000000000000952c         db  0xfc ; '.'
000000000000952d         db  0xa5 ; '.'
000000000000952e         db  0xff ; '.'
000000000000952f         db  0xff ; '.'
0000000000009530         db  0x3c ; '<'
0000000000009531         db  0xa5 ; '.'
0000000000009532         db  0xff ; '.'
0000000000009533         db  0xff ; '.'
0000000000009534         db  0x3c ; '<'
0000000000009535         db  0xa5 ; '.'
0000000000009536         db  0xff ; '.'
0000000000009537         db  0xff ; '.'
0000000000009538         db  0x3c ; '<'
0000000000009539         db  0xa5 ; '.'
000000000000953a         db  0xff ; '.'
000000000000953b         db  0xff ; '.'
000000000000953c         db  0x3c ; '<'
000000000000953d         db  0xa5 ; '.'
000000000000953e         db  0xff ; '.'
000000000000953f         db  0xff ; '.'
0000000000009540         db  0x3c ; '<'
0000000000009541         db  0xa5 ; '.'
0000000000009542         db  0xff ; '.'
0000000000009543         db  0xff ; '.'
0000000000009544         db  0x3c ; '<'
0000000000009545         db  0xa5 ; '.'
0000000000009546         db  0xff ; '.'
0000000000009547         db  0xff ; '.'
0000000000009548         db  0x3c ; '<'
0000000000009549         db  0xa5 ; '.'
000000000000954a         db  0xff ; '.'
000000000000954b         db  0xff ; '.'
000000000000954c         db  0x3c ; '<'
000000000000954d         db  0xa5 ; '.'
000000000000954e         db  0xff ; '.'
000000000000954f         db  0xff ; '.'
0000000000009550         db  0x3c ; '<'
0000000000009551         db  0xa5 ; '.'
0000000000009552         db  0xff ; '.'
0000000000009553         db  0xff ; '.'
0000000000009554         db  0x3c ; '<'
0000000000009555         db  0xa5 ; '.'
0000000000009556         db  0xff ; '.'
0000000000009557         db  0xff ; '.'
0000000000009558         db  0x3c ; '<'
0000000000009559         db  0xa5 ; '.'
000000000000955a         db  0xff ; '.'
000000000000955b         db  0xff ; '.'
000000000000955c         db  0x3c ; '<'
000000000000955d         db  0xa5 ; '.'
000000000000955e         db  0xff ; '.'
000000000000955f         db  0xff ; '.'
0000000000009560         db  0x3c ; '<'
0000000000009561         db  0xa5 ; '.'
0000000000009562         db  0xff ; '.'
0000000000009563         db  0xff ; '.'
0000000000009564         db  0x3c ; '<'
0000000000009565         db  0xa5 ; '.'
0000000000009566         db  0xff ; '.'
0000000000009567         db  0xff ; '.'
0000000000009568         db  0x3c ; '<'
0000000000009569         db  0xa5 ; '.'
000000000000956a         db  0xff ; '.'
000000000000956b         db  0xff ; '.'
000000000000956c         db  0x3c ; '<'
000000000000956d         db  0xa5 ; '.'
000000000000956e         db  0xff ; '.'
000000000000956f         db  0xff ; '.'
0000000000009570         db  0x3c ; '<'
0000000000009571         db  0xa5 ; '.'
0000000000009572         db  0xff ; '.'
0000000000009573         db  0xff ; '.'
0000000000009574         db  0x3c ; '<'
0000000000009575         db  0xa5 ; '.'
0000000000009576         db  0xff ; '.'
0000000000009577         db  0xff ; '.'
0000000000009578         db  0x3c ; '<'
0000000000009579         db  0xa5 ; '.'
000000000000957a         db  0xff ; '.'
000000000000957b         db  0xff ; '.'
000000000000957c         db  0x3c ; '<'
000000000000957d         db  0xa5 ; '.'
000000000000957e         db  0xff ; '.'
000000000000957f         db  0xff ; '.'
0000000000009580         db  0x3c ; '<'
0000000000009581         db  0xa5 ; '.'
0000000000009582         db  0xff ; '.'
0000000000009583         db  0xff ; '.'
0000000000009584         db  0x3c ; '<'
0000000000009585         db  0xa5 ; '.'
0000000000009586         db  0xff ; '.'
0000000000009587         db  0xff ; '.'
0000000000009588         db  0x3c ; '<'
0000000000009589         db  0xa5 ; '.'
000000000000958a         db  0xff ; '.'
000000000000958b         db  0xff ; '.'
000000000000958c         db  0x3c ; '<'
000000000000958d         db  0xa5 ; '.'
000000000000958e         db  0xff ; '.'
000000000000958f         db  0xff ; '.'
0000000000009590         db  0x3c ; '<'
0000000000009591         db  0xa5 ; '.'
0000000000009592         db  0xff ; '.'
0000000000009593         db  0xff ; '.'
0000000000009594         db  0x3c ; '<'
0000000000009595         db  0xa5 ; '.'
0000000000009596         db  0xff ; '.'
0000000000009597         db  0xff ; '.'
0000000000009598         db  0x94 ; '.'
0000000000009599         db  0xa5 ; '.'
000000000000959a         db  0xff ; '.'
000000000000959b         db  0xff ; '.'
000000000000959c         db  0x6c ; 'l'
000000000000959d         db  0xa4 ; '.'
000000000000959e         db  0xff ; '.'
000000000000959f         db  0xff ; '.'
00000000000095a0         db  0x3c ; '<'
00000000000095a1         db  0xa5 ; '.'
00000000000095a2         db  0xff ; '.'
00000000000095a3         db  0xff ; '.'
00000000000095a4         db  0x94 ; '.'
00000000000095a5         db  0xa5 ; '.'
00000000000095a6         db  0xff ; '.'
00000000000095a7         db  0xff ; '.'
00000000000095a8         db  0x3c ; '<'
00000000000095a9         db  0xa5 ; '.'
00000000000095aa         db  0xff ; '.'
00000000000095ab         db  0xff ; '.'
00000000000095ac         db  0x94 ; '.'
00000000000095ad         db  0xa5 ; '.'
00000000000095ae         db  0xff ; '.'
00000000000095af         db  0xff ; '.'
00000000000095b0         db  0x3c ; '<'
00000000000095b1         db  0xa5 ; '.'
00000000000095b2         db  0xff ; '.'
00000000000095b3         db  0xff ; '.'
00000000000095b4         db  0x3c ; '<'
00000000000095b5         db  0xa5 ; '.'
00000000000095b6         db  0xff ; '.'
00000000000095b7         db  0xff ; '.'
00000000000095b8         db  0x3c ; '<'
00000000000095b9         db  0xa5 ; '.'
00000000000095ba         db  0xff ; '.'
00000000000095bb         db  0xff ; '.'
00000000000095bc         db  0x3c ; '<'
00000000000095bd         db  0xa5 ; '.'
00000000000095be         db  0xff ; '.'
00000000000095bf         db  0xff ; '.'
00000000000095c0         db  0x3c ; '<'
00000000000095c1         db  0xa5 ; '.'
00000000000095c2         db  0xff ; '.'
00000000000095c3         db  0xff ; '.'
00000000000095c4         db  0x3c ; '<'
00000000000095c5         db  0xa5 ; '.'
00000000000095c6         db  0xff ; '.'
00000000000095c7         db  0xff ; '.'
00000000000095c8         db  0x3c ; '<'
00000000000095c9         db  0xa5 ; '.'
00000000000095ca         db  0xff ; '.'
00000000000095cb         db  0xff ; '.'
00000000000095cc         db  0x3c ; '<'
00000000000095cd         db  0xa5 ; '.'
00000000000095ce         db  0xff ; '.'
00000000000095cf         db  0xff ; '.'
00000000000095d0         db  0x3c ; '<'
00000000000095d1         db  0xa5 ; '.'
00000000000095d2         db  0xff ; '.'
00000000000095d3         db  0xff ; '.'
00000000000095d4         db  0x3c ; '<'
00000000000095d5         db  0xa5 ; '.'
00000000000095d6         db  0xff ; '.'
00000000000095d7         db  0xff ; '.'
00000000000095d8         db  0x3c ; '<'
00000000000095d9         db  0xa5 ; '.'
00000000000095da         db  0xff ; '.'
00000000000095db         db  0xff ; '.'
00000000000095dc         db  0x3c ; '<'
00000000000095dd         db  0xa5 ; '.'
00000000000095de         db  0xff ; '.'
00000000000095df         db  0xff ; '.'
00000000000095e0         db  0x3c ; '<'
00000000000095e1         db  0xa5 ; '.'
00000000000095e2         db  0xff ; '.'
00000000000095e3         db  0xff ; '.'
00000000000095e4         db  0x3c ; '<'
00000000000095e5         db  0xa5 ; '.'
00000000000095e6         db  0xff ; '.'
00000000000095e7         db  0xff ; '.'
00000000000095e8         db  0x3c ; '<'
00000000000095e9         db  0xa5 ; '.'
00000000000095ea         db  0xff ; '.'
00000000000095eb         db  0xff ; '.'
00000000000095ec         db  0x3c ; '<'
00000000000095ed         db  0xa5 ; '.'
00000000000095ee         db  0xff ; '.'
00000000000095ef         db  0xff ; '.'
00000000000095f0         db  0x3c ; '<'
00000000000095f1         db  0xa5 ; '.'
00000000000095f2         db  0xff ; '.'
00000000000095f3         db  0xff ; '.'
00000000000095f4         db  0x3c ; '<'
00000000000095f5         db  0xa5 ; '.'
00000000000095f6         db  0xff ; '.'
00000000000095f7         db  0xff ; '.'
00000000000095f8         db  0x3c ; '<'
00000000000095f9         db  0xa5 ; '.'
00000000000095fa         db  0xff ; '.'
00000000000095fb         db  0xff ; '.'
00000000000095fc         db  0x3c ; '<'
00000000000095fd         db  0xa5 ; '.'
00000000000095fe         db  0xff ; '.'
00000000000095ff         db  0xff ; '.'
0000000000009600         db  0x3c ; '<'
0000000000009601         db  0xa5 ; '.'
0000000000009602         db  0xff ; '.'
0000000000009603         db  0xff ; '.'
0000000000009604         db  0x3c ; '<'
0000000000009605         db  0xa5 ; '.'
0000000000009606         db  0xff ; '.'
0000000000009607         db  0xff ; '.'
0000000000009608         db  0x3c ; '<'
0000000000009609         db  0xa5 ; '.'
000000000000960a         db  0xff ; '.'
000000000000960b         db  0xff ; '.'
000000000000960c         db  0x3c ; '<'
000000000000960d         db  0xa5 ; '.'
000000000000960e         db  0xff ; '.'
000000000000960f         db  0xff ; '.'
0000000000009610         db  0x3c ; '<'
0000000000009611         db  0xa5 ; '.'
0000000000009612         db  0xff ; '.'
0000000000009613         db  0xff ; '.'
0000000000009614         db  0x3c ; '<'
0000000000009615         db  0xa5 ; '.'
0000000000009616         db  0xff ; '.'
0000000000009617         db  0xff ; '.'
0000000000009618         db  0xf7 ; '.'
0000000000009619         db  0xa2 ; '.'
000000000000961a         db  0xff ; '.'
000000000000961b         db  0xff ; '.'
000000000000961c         db  0x94 ; '.'
000000000000961d         db  0xa5 ; '.'
000000000000961e         db  0xff ; '.'
000000000000961f         db  0xff ; '.'
0000000000009620         db  0xf7 ; '.'
0000000000009621         db  0xa2 ; '.'
0000000000009622         db  0xff ; '.'
0000000000009623         db  0xff ; '.'
0000000000009624         db  0x64 ; 'd'
0000000000009625         db  0xa5 ; '.'
0000000000009626         db  0xff ; '.'
0000000000009627         db  0xff ; '.'
0000000000009628         db  0xe8 ; '.'                                         ; DATA XREF=sub_3a10+137
0000000000009629         db  0xa4 ; '.'
000000000000962a         db  0xff ; '.'
000000000000962b         db  0xff ; '.'
000000000000962c         db  0xf8 ; '.'
000000000000962d         db  0xa3 ; '.'
000000000000962e         db  0xff ; '.'
000000000000962f         db  0xff ; '.'
0000000000009630         db  0xf8 ; '.'
0000000000009631         db  0xa3 ; '.'
0000000000009632         db  0xff ; '.'
0000000000009633         db  0xff ; '.'
0000000000009634         db  0xf8 ; '.'
0000000000009635         db  0xa3 ; '.'
0000000000009636         db  0xff ; '.'
0000000000009637         db  0xff ; '.'
0000000000009638         db  0xf8 ; '.'
0000000000009639         db  0xa3 ; '.'
000000000000963a         db  0xff ; '.'
000000000000963b         db  0xff ; '.'
000000000000963c         db  0xf8 ; '.'
000000000000963d         db  0xa3 ; '.'
000000000000963e         db  0xff ; '.'
000000000000963f         db  0xff ; '.'
0000000000009640         db  0xf8 ; '.'
0000000000009641         db  0xa3 ; '.'
0000000000009642         db  0xff ; '.'
0000000000009643         db  0xff ; '.'
0000000000009644         db  0xd8 ; '.'
0000000000009645         db  0xa4 ; '.'
0000000000009646         db  0xff ; '.'
0000000000009647         db  0xff ; '.'
0000000000009648         db  0x28 ; '('
0000000000009649         db  0xa6 ; '.'
000000000000964a         db  0xff ; '.'
000000000000964b         db  0xff ; '.'
000000000000964c         db  0x10 ; '.'
000000000000964d         db  0xa6 ; '.'
000000000000964e         db  0xff ; '.'
000000000000964f         db  0xff ; '.'
0000000000009650         db  0xc0 ; '.'
0000000000009651         db  0xa4 ; '.'
0000000000009652         db  0xff ; '.'
0000000000009653         db  0xff ; '.'
0000000000009654         db  0x00 ; '.'
0000000000009655         db  0xa6 ; '.'
0000000000009656         db  0xff ; '.'
0000000000009657         db  0xff ; '.'
0000000000009658         db  0xa8 ; '.'
0000000000009659         db  0xa4 ; '.'
000000000000965a         db  0xff ; '.'
000000000000965b         db  0xff ; '.'
000000000000965c         db  0xe8 ; '.'
000000000000965d         db  0xa5 ; '.'
000000000000965e         db  0xff ; '.'
000000000000965f         db  0xff ; '.'
0000000000009660         db  0xf8 ; '.'
0000000000009661         db  0xa3 ; '.'
0000000000009662         db  0xff ; '.'
0000000000009663         db  0xff ; '.'
0000000000009664         db  0xf8 ; '.'
0000000000009665         db  0xa3 ; '.'
0000000000009666         db  0xff ; '.'
0000000000009667         db  0xff ; '.'
0000000000009668         db  0xf8 ; '.'
0000000000009669         db  0xa3 ; '.'
000000000000966a         db  0xff ; '.'
000000000000966b         db  0xff ; '.'
000000000000966c         db  0xf8 ; '.'
000000000000966d         db  0xa3 ; '.'
000000000000966e         db  0xff ; '.'
000000000000966f         db  0xff ; '.'
0000000000009670         db  0xf8 ; '.'
0000000000009671         db  0xa3 ; '.'
0000000000009672         db  0xff ; '.'
0000000000009673         db  0xff ; '.'
0000000000009674         db  0xf8 ; '.'
0000000000009675         db  0xa3 ; '.'
0000000000009676         db  0xff ; '.'
0000000000009677         db  0xff ; '.'
0000000000009678         db  0xf8 ; '.'
0000000000009679         db  0xa3 ; '.'
000000000000967a         db  0xff ; '.'
000000000000967b         db  0xff ; '.'
000000000000967c         db  0xf8 ; '.'
000000000000967d         db  0xa3 ; '.'
000000000000967e         db  0xff ; '.'
000000000000967f         db  0xff ; '.'
0000000000009680         db  0xf8 ; '.'
0000000000009681         db  0xa3 ; '.'
0000000000009682         db  0xff ; '.'
0000000000009683         db  0xff ; '.'
0000000000009684         db  0xf8 ; '.'
0000000000009685         db  0xa3 ; '.'
0000000000009686         db  0xff ; '.'
0000000000009687         db  0xff ; '.'
0000000000009688         db  0xf8 ; '.'
0000000000009689         db  0xa3 ; '.'
000000000000968a         db  0xff ; '.'
000000000000968b         db  0xff ; '.'
000000000000968c         db  0xf8 ; '.'
000000000000968d         db  0xa3 ; '.'
000000000000968e         db  0xff ; '.'
000000000000968f         db  0xff ; '.'
0000000000009690         db  0xf8 ; '.'
0000000000009691         db  0xa3 ; '.'
0000000000009692         db  0xff ; '.'
0000000000009693         db  0xff ; '.'
0000000000009694         db  0xf8 ; '.'
0000000000009695         db  0xa3 ; '.'
0000000000009696         db  0xff ; '.'
0000000000009697         db  0xff ; '.'
0000000000009698         db  0xf8 ; '.'
0000000000009699         db  0xa3 ; '.'
000000000000969a         db  0xff ; '.'
000000000000969b         db  0xff ; '.'
000000000000969c         db  0xf8 ; '.'
000000000000969d         db  0xa3 ; '.'
000000000000969e         db  0xff ; '.'
000000000000969f         db  0xff ; '.'
00000000000096a0         db  0xf8 ; '.'
00000000000096a1         db  0xa3 ; '.'
00000000000096a2         db  0xff ; '.'
00000000000096a3         db  0xff ; '.'
00000000000096a4         db  0xf8 ; '.'
00000000000096a5         db  0xa3 ; '.'
00000000000096a6         db  0xff ; '.'
00000000000096a7         db  0xff ; '.'
00000000000096a8         db  0xd0 ; '.'
00000000000096a9         db  0xa5 ; '.'
00000000000096aa         db  0xff ; '.'
00000000000096ab         db  0xff ; '.'
00000000000096ac         db  0xb8 ; '.'
00000000000096ad         db  0xa5 ; '.'
00000000000096ae         db  0xff ; '.'
00000000000096af         db  0xff ; '.'
00000000000096b0         db  0xb8 ; '.'
00000000000096b1         db  0xa5 ; '.'
00000000000096b2         db  0xff ; '.'
00000000000096b3         db  0xff ; '.'
00000000000096b4         db  0xa0 ; '.'
00000000000096b5         db  0xa5 ; '.'
00000000000096b6         db  0xff ; '.'
00000000000096b7         db  0xff ; '.'
00000000000096b8         db  0xb8 ; '.'
00000000000096b9         db  0xa5 ; '.'
00000000000096ba         db  0xff ; '.'
00000000000096bb         db  0xff ; '.'
00000000000096bc         db  0x88 ; '.'
00000000000096bd         db  0xa5 ; '.'
00000000000096be         db  0xff ; '.'
00000000000096bf         db  0xff ; '.'
00000000000096c0         db  0xb8 ; '.'
00000000000096c1         db  0xa5 ; '.'
00000000000096c2         db  0xff ; '.'
00000000000096c3         db  0xff ; '.'
00000000000096c4         db  0xf8 ; '.'
00000000000096c5         db  0xa1 ; '.'
00000000000096c6         db  0xff ; '.'
00000000000096c7         db  0xff ; '.'
00000000000096c8         db  0xb8 ; '.'
00000000000096c9         db  0xa5 ; '.'
00000000000096ca         db  0xff ; '.'
00000000000096cb         db  0xff ; '.'
00000000000096cc         db  0xb8 ; '.'
00000000000096cd         db  0xa5 ; '.'
00000000000096ce         db  0xff ; '.'
00000000000096cf         db  0xff ; '.'
00000000000096d0         db  0xb8 ; '.'
00000000000096d1         db  0xa5 ; '.'
00000000000096d2         db  0xff ; '.'
00000000000096d3         db  0xff ; '.'
00000000000096d4         db  0x88 ; '.'
00000000000096d5         db  0xa5 ; '.'
00000000000096d6         db  0xff ; '.'
00000000000096d7         db  0xff ; '.'
00000000000096d8         db  0x88 ; '.'
00000000000096d9         db  0xa5 ; '.'
00000000000096da         db  0xff ; '.'
00000000000096db         db  0xff ; '.'
00000000000096dc         db  0x88 ; '.'
00000000000096dd         db  0xa5 ; '.'
00000000000096de         db  0xff ; '.'
00000000000096df         db  0xff ; '.'
00000000000096e0         db  0x88 ; '.'
00000000000096e1         db  0xa5 ; '.'
00000000000096e2         db  0xff ; '.'
00000000000096e3         db  0xff ; '.'
00000000000096e4         db  0x88 ; '.'
00000000000096e5         db  0xa5 ; '.'
00000000000096e6         db  0xff ; '.'
00000000000096e7         db  0xff ; '.'
00000000000096e8         db  0x88 ; '.'
00000000000096e9         db  0xa5 ; '.'
00000000000096ea         db  0xff ; '.'
00000000000096eb         db  0xff ; '.'
00000000000096ec         db  0x88 ; '.'
00000000000096ed         db  0xa5 ; '.'
00000000000096ee         db  0xff ; '.'
00000000000096ef         db  0xff ; '.'
00000000000096f0         db  0x88 ; '.'
00000000000096f1         db  0xa5 ; '.'
00000000000096f2         db  0xff ; '.'
00000000000096f3         db  0xff ; '.'
00000000000096f4         db  0x88 ; '.'
00000000000096f5         db  0xa5 ; '.'
00000000000096f6         db  0xff ; '.'
00000000000096f7         db  0xff ; '.'
00000000000096f8         db  0x88 ; '.'
00000000000096f9         db  0xa5 ; '.'
00000000000096fa         db  0xff ; '.'
00000000000096fb         db  0xff ; '.'
00000000000096fc         db  0x88 ; '.'
00000000000096fd         db  0xa5 ; '.'
00000000000096fe         db  0xff ; '.'
00000000000096ff         db  0xff ; '.'
0000000000009700         db  0x88 ; '.'
0000000000009701         db  0xa5 ; '.'
0000000000009702         db  0xff ; '.'
0000000000009703         db  0xff ; '.'
0000000000009704         db  0x88 ; '.'
0000000000009705         db  0xa5 ; '.'
0000000000009706         db  0xff ; '.'
0000000000009707         db  0xff ; '.'
0000000000009708         db  0x88 ; '.'
0000000000009709         db  0xa5 ; '.'
000000000000970a         db  0xff ; '.'
000000000000970b         db  0xff ; '.'
000000000000970c         db  0x88 ; '.'
000000000000970d         db  0xa5 ; '.'
000000000000970e         db  0xff ; '.'
000000000000970f         db  0xff ; '.'
0000000000009710         db  0x88 ; '.'
0000000000009711         db  0xa5 ; '.'
0000000000009712         db  0xff ; '.'
0000000000009713         db  0xff ; '.'
0000000000009714         db  0xb8 ; '.'
0000000000009715         db  0xa5 ; '.'
0000000000009716         db  0xff ; '.'
0000000000009717         db  0xff ; '.'
0000000000009718         db  0xb8 ; '.'
0000000000009719         db  0xa5 ; '.'
000000000000971a         db  0xff ; '.'
000000000000971b         db  0xff ; '.'
000000000000971c         db  0xb8 ; '.'
000000000000971d         db  0xa5 ; '.'
000000000000971e         db  0xff ; '.'
000000000000971f         db  0xff ; '.'
0000000000009720         db  0xb8 ; '.'
0000000000009721         db  0xa5 ; '.'
0000000000009722         db  0xff ; '.'
0000000000009723         db  0xff ; '.'
0000000000009724         db  0xc8 ; '.'
0000000000009725         db  0xa1 ; '.'
0000000000009726         db  0xff ; '.'
0000000000009727         db  0xff ; '.'
0000000000009728         db  0xf8 ; '.'
0000000000009729         db  0xa3 ; '.'
000000000000972a         db  0xff ; '.'
000000000000972b         db  0xff ; '.'
000000000000972c         db  0x88 ; '.'
000000000000972d         db  0xa5 ; '.'
000000000000972e         db  0xff ; '.'
000000000000972f         db  0xff ; '.'
0000000000009730         db  0x88 ; '.'
0000000000009731         db  0xa5 ; '.'
0000000000009732         db  0xff ; '.'
0000000000009733         db  0xff ; '.'
0000000000009734         db  0x88 ; '.'
0000000000009735         db  0xa5 ; '.'
0000000000009736         db  0xff ; '.'
0000000000009737         db  0xff ; '.'
0000000000009738         db  0x88 ; '.'
0000000000009739         db  0xa5 ; '.'
000000000000973a         db  0xff ; '.'
000000000000973b         db  0xff ; '.'
000000000000973c         db  0x88 ; '.'
000000000000973d         db  0xa5 ; '.'
000000000000973e         db  0xff ; '.'
000000000000973f         db  0xff ; '.'
0000000000009740         db  0x88 ; '.'
0000000000009741         db  0xa5 ; '.'
0000000000009742         db  0xff ; '.'
0000000000009743         db  0xff ; '.'
0000000000009744         db  0x88 ; '.'
0000000000009745         db  0xa5 ; '.'
0000000000009746         db  0xff ; '.'
0000000000009747         db  0xff ; '.'
0000000000009748         db  0x88 ; '.'
0000000000009749         db  0xa5 ; '.'
000000000000974a         db  0xff ; '.'
000000000000974b         db  0xff ; '.'
000000000000974c         db  0x88 ; '.'
000000000000974d         db  0xa5 ; '.'
000000000000974e         db  0xff ; '.'
000000000000974f         db  0xff ; '.'
0000000000009750         db  0x88 ; '.'
0000000000009751         db  0xa5 ; '.'
0000000000009752         db  0xff ; '.'
0000000000009753         db  0xff ; '.'
0000000000009754         db  0x88 ; '.'
0000000000009755         db  0xa5 ; '.'
0000000000009756         db  0xff ; '.'
0000000000009757         db  0xff ; '.'
0000000000009758         db  0x88 ; '.'
0000000000009759         db  0xa5 ; '.'
000000000000975a         db  0xff ; '.'
000000000000975b         db  0xff ; '.'
000000000000975c         db  0x88 ; '.'
000000000000975d         db  0xa5 ; '.'
000000000000975e         db  0xff ; '.'
000000000000975f         db  0xff ; '.'
0000000000009760         db  0x88 ; '.'
0000000000009761         db  0xa5 ; '.'
0000000000009762         db  0xff ; '.'
0000000000009763         db  0xff ; '.'
0000000000009764         db  0x88 ; '.'
0000000000009765         db  0xa5 ; '.'
0000000000009766         db  0xff ; '.'
0000000000009767         db  0xff ; '.'
0000000000009768         db  0x88 ; '.'
0000000000009769         db  0xa5 ; '.'
000000000000976a         db  0xff ; '.'
000000000000976b         db  0xff ; '.'
000000000000976c         db  0x88 ; '.'
000000000000976d         db  0xa5 ; '.'
000000000000976e         db  0xff ; '.'
000000000000976f         db  0xff ; '.'
0000000000009770         db  0x88 ; '.'
0000000000009771         db  0xa5 ; '.'
0000000000009772         db  0xff ; '.'
0000000000009773         db  0xff ; '.'
0000000000009774         db  0x88 ; '.'
0000000000009775         db  0xa5 ; '.'
0000000000009776         db  0xff ; '.'
0000000000009777         db  0xff ; '.'
0000000000009778         db  0x88 ; '.'
0000000000009779         db  0xa5 ; '.'
000000000000977a         db  0xff ; '.'
000000000000977b         db  0xff ; '.'
000000000000977c         db  0x88 ; '.'
000000000000977d         db  0xa5 ; '.'
000000000000977e         db  0xff ; '.'
000000000000977f         db  0xff ; '.'
0000000000009780         db  0x88 ; '.'
0000000000009781         db  0xa5 ; '.'
0000000000009782         db  0xff ; '.'
0000000000009783         db  0xff ; '.'
0000000000009784         db  0x88 ; '.'
0000000000009785         db  0xa5 ; '.'
0000000000009786         db  0xff ; '.'
0000000000009787         db  0xff ; '.'
0000000000009788         db  0x88 ; '.'
0000000000009789         db  0xa5 ; '.'
000000000000978a         db  0xff ; '.'
000000000000978b         db  0xff ; '.'
000000000000978c         db  0x88 ; '.'
000000000000978d         db  0xa5 ; '.'
000000000000978e         db  0xff ; '.'
000000000000978f         db  0xff ; '.'
0000000000009790         db  0x88 ; '.'
0000000000009791         db  0xa5 ; '.'
0000000000009792         db  0xff ; '.'
0000000000009793         db  0xff ; '.'
0000000000009794         db  0xb8 ; '.'
0000000000009795         db  0xa5 ; '.'
0000000000009796         db  0xff ; '.'
0000000000009797         db  0xff ; '.'
0000000000009798         db  0x88 ; '.'
0000000000009799         db  0xa4 ; '.'
000000000000979a         db  0xff ; '.'
000000000000979b         db  0xff ; '.'
000000000000979c         db  0x88 ; '.'
000000000000979d         db  0xa5 ; '.'
000000000000979e         db  0xff ; '.'
000000000000979f         db  0xff ; '.'
00000000000097a0         db  0xb8 ; '.'
00000000000097a1         db  0xa5 ; '.'
00000000000097a2         db  0xff ; '.'
00000000000097a3         db  0xff ; '.'
00000000000097a4         db  0x88 ; '.'
00000000000097a5         db  0xa5 ; '.'
00000000000097a6         db  0xff ; '.'
00000000000097a7         db  0xff ; '.'
00000000000097a8         db  0xb8 ; '.'
00000000000097a9         db  0xa5 ; '.'
00000000000097aa         db  0xff ; '.'
00000000000097ab         db  0xff ; '.'
00000000000097ac         db  0x88 ; '.'
00000000000097ad         db  0xa5 ; '.'
00000000000097ae         db  0xff ; '.'
00000000000097af         db  0xff ; '.'
00000000000097b0         db  0x88 ; '.'
00000000000097b1         db  0xa5 ; '.'
00000000000097b2         db  0xff ; '.'
00000000000097b3         db  0xff ; '.'
00000000000097b4         db  0x88 ; '.'
00000000000097b5         db  0xa5 ; '.'
00000000000097b6         db  0xff ; '.'
00000000000097b7         db  0xff ; '.'
00000000000097b8         db  0x88 ; '.'
00000000000097b9         db  0xa5 ; '.'
00000000000097ba         db  0xff ; '.'
00000000000097bb         db  0xff ; '.'
00000000000097bc         db  0x88 ; '.'
00000000000097bd         db  0xa5 ; '.'
00000000000097be         db  0xff ; '.'
00000000000097bf         db  0xff ; '.'
00000000000097c0         db  0x88 ; '.'
00000000000097c1         db  0xa5 ; '.'
00000000000097c2         db  0xff ; '.'
00000000000097c3         db  0xff ; '.'
00000000000097c4         db  0x88 ; '.'
00000000000097c5         db  0xa5 ; '.'
00000000000097c6         db  0xff ; '.'
00000000000097c7         db  0xff ; '.'
00000000000097c8         db  0x88 ; '.'
00000000000097c9         db  0xa5 ; '.'
00000000000097ca         db  0xff ; '.'
00000000000097cb         db  0xff ; '.'
00000000000097cc         db  0x88 ; '.'
00000000000097cd         db  0xa5 ; '.'
00000000000097ce         db  0xff ; '.'
00000000000097cf         db  0xff ; '.'
00000000000097d0         db  0x88 ; '.'
00000000000097d1         db  0xa5 ; '.'
00000000000097d2         db  0xff ; '.'
00000000000097d3         db  0xff ; '.'
00000000000097d4         db  0x88 ; '.'
00000000000097d5         db  0xa5 ; '.'
00000000000097d6         db  0xff ; '.'
00000000000097d7         db  0xff ; '.'
00000000000097d8         db  0x88 ; '.'
00000000000097d9         db  0xa5 ; '.'
00000000000097da         db  0xff ; '.'
00000000000097db         db  0xff ; '.'
00000000000097dc         db  0x88 ; '.'
00000000000097dd         db  0xa5 ; '.'
00000000000097de         db  0xff ; '.'
00000000000097df         db  0xff ; '.'
00000000000097e0         db  0x88 ; '.'
00000000000097e1         db  0xa5 ; '.'
00000000000097e2         db  0xff ; '.'
00000000000097e3         db  0xff ; '.'
00000000000097e4         db  0x88 ; '.'
00000000000097e5         db  0xa5 ; '.'
00000000000097e6         db  0xff ; '.'
00000000000097e7         db  0xff ; '.'
00000000000097e8         db  0x88 ; '.'
00000000000097e9         db  0xa5 ; '.'
00000000000097ea         db  0xff ; '.'
00000000000097eb         db  0xff ; '.'
00000000000097ec         db  0x88 ; '.'
00000000000097ed         db  0xa5 ; '.'
00000000000097ee         db  0xff ; '.'
00000000000097ef         db  0xff ; '.'
00000000000097f0         db  0x88 ; '.'
00000000000097f1         db  0xa5 ; '.'
00000000000097f2         db  0xff ; '.'
00000000000097f3         db  0xff ; '.'
00000000000097f4         db  0x88 ; '.'
00000000000097f5         db  0xa5 ; '.'
00000000000097f6         db  0xff ; '.'
00000000000097f7         db  0xff ; '.'
00000000000097f8         db  0x88 ; '.'
00000000000097f9         db  0xa5 ; '.'
00000000000097fa         db  0xff ; '.'
00000000000097fb         db  0xff ; '.'
00000000000097fc         db  0x88 ; '.'
00000000000097fd         db  0xa5 ; '.'
00000000000097fe         db  0xff ; '.'
00000000000097ff         db  0xff ; '.'
0000000000009800         db  0x88 ; '.'
0000000000009801         db  0xa5 ; '.'
0000000000009802         db  0xff ; '.'
0000000000009803         db  0xff ; '.'
0000000000009804         db  0x88 ; '.'
0000000000009805         db  0xa5 ; '.'
0000000000009806         db  0xff ; '.'
0000000000009807         db  0xff ; '.'
0000000000009808         db  0x88 ; '.'
0000000000009809         db  0xa5 ; '.'
000000000000980a         db  0xff ; '.'
000000000000980b         db  0xff ; '.'
000000000000980c         db  0x88 ; '.'
000000000000980d         db  0xa5 ; '.'
000000000000980e         db  0xff ; '.'
000000000000980f         db  0xff ; '.'
0000000000009810         db  0x88 ; '.'
0000000000009811         db  0xa5 ; '.'
0000000000009812         db  0xff ; '.'
0000000000009813         db  0xff ; '.'
0000000000009814         db  0xf8 ; '.'
0000000000009815         db  0xa0 ; '.'
0000000000009816         db  0xff ; '.'
0000000000009817         db  0xff ; '.'
0000000000009818         db  0xb8 ; '.'
0000000000009819         db  0xa5 ; '.'
000000000000981a         db  0xff ; '.'
000000000000981b         db  0xff ; '.'
000000000000981c         db  0xf8 ; '.'
000000000000981d         db  0xa0 ; '.'
000000000000981e         db  0xff ; '.'
000000000000981f         db  0xff ; '.'
0000000000009820         db  0xa0 ; '.'
0000000000009821         db  0xa5 ; '.'
0000000000009822         db  0xff ; '.'
0000000000009823         db  0xff ; '.'
0000000000009824         db  0x00 ; '.'
0000000000009825         db  0x00 ; '.'
0000000000009826         db  0x00 ; '.'
0000000000009827         db  0x00 ; '.'
0000000000009828         db  0x00 ; '.'
0000000000009829         db  0x00 ; '.'
000000000000982a         db  0x00 ; '.'
000000000000982b         db  0x00 ; '.'
000000000000982c         db  0x00 ; '.'
000000000000982d         db  0x00 ; '.'
000000000000982e         db  0x00 ; '.'
000000000000982f         db  0x00 ; '.'
0000000000009830         db  0x00 ; '.'
0000000000009831         db  0x00 ; '.'
0000000000009832         db  0x00 ; '.'
0000000000009833         db  0x00 ; '.'
0000000000009834         db  0x00 ; '.'
0000000000009835         db  0x00 ; '.'
0000000000009836         db  0x00 ; '.'
0000000000009837         db  0x00 ; '.'
0000000000009838         db  0x00 ; '.'
0000000000009839         db  0x00 ; '.'
000000000000983a         db  0x00 ; '.'
000000000000983b         db  0x00 ; '.'
000000000000983c         db  0x00 ; '.'
000000000000983d         db  0x00 ; '.'
000000000000983e         db  0x00 ; '.'
000000000000983f         db  0x00 ; '.'
                     quoting_style_vals:
0000000000009840         db  0x00 ; '.'
0000000000009841         db  0x00 ; '.'
0000000000009842         db  0x00 ; '.'
0000000000009843         db  0x00 ; '.'
0000000000009844         db  0x01 ; '.'
0000000000009845         db  0x00 ; '.'
0000000000009846         db  0x00 ; '.'
0000000000009847         db  0x00 ; '.'
0000000000009848         db  0x02 ; '.'
0000000000009849         db  0x00 ; '.'
000000000000984a         db  0x00 ; '.'
000000000000984b         db  0x00 ; '.'
000000000000984c         db  0x03 ; '.'
000000000000984d         db  0x00 ; '.'
000000000000984e         db  0x00 ; '.'
000000000000984f         db  0x00 ; '.'
0000000000009850         db  0x04 ; '.'
0000000000009851         db  0x00 ; '.'
0000000000009852         db  0x00 ; '.'
0000000000009853         db  0x00 ; '.'
0000000000009854         db  0x05 ; '.'
0000000000009855         db  0x00 ; '.'
0000000000009856         db  0x00 ; '.'
0000000000009857         db  0x00 ; '.'
0000000000009858         db  0x06 ; '.'
0000000000009859         db  0x00 ; '.'
000000000000985a         db  0x00 ; '.'
000000000000985b         db  0x00 ; '.'
000000000000985c         db  0x07 ; '.'
000000000000985d         db  0x00 ; '.'
000000000000985e         db  0x00 ; '.'
000000000000985f         db  0x00 ; '.'
0000000000009860         db  0x08 ; '.'
0000000000009861         db  0x00 ; '.'
0000000000009862         db  0x00 ; '.'
0000000000009863         db  0x00 ; '.'
0000000000009864         db  0x09 ; '.'
0000000000009865         db  0x00 ; '.'
0000000000009866         db  0x00 ; '.'
0000000000009867         db  0x00 ; '.'
                     aUnableToDispla:
0000000000009868         db         "unable to display error message", 0        ; DATA XREF=verror_at_line+135
                     aSSSn:
0000000000009888         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
0000000000009894         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000989b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000989c         db  0x43 ; 'C'
000000000000989d         db  0x29 ; ')'                                         ; DATA XREF=posixtest+264, or+295, or+883, or+938, three_arguments+151
000000000000989e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000989f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
00000000000098af         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
00000000000098c6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
00000000000098e2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
00000000000098f7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000990d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
0000000000009921         align      8
                     aNlicenseGplv3G:
0000000000009928         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
00000000000099f4         align      8
                     aWrittenBySSSna:
00000000000099f8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_9a18:        // aWrittenBySSSns
0000000000009a18         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
0000000000009a3c         align      64
                     aWrittenBySSSns_9a40:        // aWrittenBySSSns
0000000000009a40         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_9a68:        // aWrittenBySSSns
0000000000009a68         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
0000000000009a94         align      8
                     aWrittenBySSSns_9a98:        // aWrittenBySSSns
0000000000009a98         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
0000000000009ac8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
0000000000009afc         align      256
                     aWrittenBySSSns_9b00:        // aWrittenBySSSns
0000000000009b00         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
0000000000009b3c         align      64
                     aGeneralHelpUsi:
0000000000009b40         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
0000000000009b81         align      8
                     switch_table_9b88:        // switch_table
0000000000009b88         dd         version_etc_arn.loc_5576-switch_table_9b88, version_etc_arn.loc_5608-switch_table_9b88, version_etc_arn.loc_5648-switch_table_9b88, version_etc_arn.loc_5690-switch_table_9b88 ; switch table used at 0x54f4 containing 10 entries, DATA XREF=version_etc_arn+150
0000000000009b98         dd         version_etc_arn.loc_56e0-switch_table_9b88, version_etc_arn.loc_5738-switch_table_9b88, version_etc_arn.loc_5768-switch_table_9b88, version_etc_arn.loc_57d0-switch_table_9b88
0000000000009ba8         dd         version_etc_arn.loc_5500-switch_table_9b88, version_etc_arn.loc_55b0-switch_table_9b88
0000000000009bb0         align      64
                     version_etc_copyright:
0000000000009bc0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
0000000000009bef         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
0000000000009c00         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
0000000000009c01         db  0x00 ; '.'
                     aPosix:
0000000000009c02         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aAscii:
0000000000009c08         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
0000000000009c0e         align      16
                     switch_table_9c10:        // switch_table
0000000000009c10         dd         vasnprintf.loc_7176-switch_table_9c10, vasnprintf.loc_6c10-switch_table_9c10, vasnprintf.loc_6be0-switch_table_9c10, vasnprintf.loc_6b58-switch_table_9c10 ; switch table used at 0x67ab containing 18 entries, DATA XREF=vasnprintf+1357
0000000000009c20         dd         vasnprintf.loc_6b18-switch_table_9c10, 2 dup (vasnprintf.loc_68e8-switch_table_9c10), 4 dup (vasnprintf.loc_67b0-switch_table_9c10), vasnprintf.loc_6a98-switch_table_9c10
0000000000009c40         dd         vasnprintf.loc_6a10-switch_table_9c10, 2 dup (vasnprintf.loc_68e8-switch_table_9c10), 3 dup (vasnprintf.loc_67b0-switch_table_9c10)
                     switch_table_9c58:        // switch_table
0000000000009c58         dd         vasnprintf.loc_6fc0-switch_table_9c58, vasnprintf.loc_6fe0-switch_table_9c58, vasnprintf.loc_6fd0-switch_table_9c58, 2 dup (vasnprintf.loc_6e90-switch_table_9c58) ; switch table used at 0x6d50 containing 5 entries, DATA XREF=vasnprintf+2798
                     aNull:
0000000000009c6c         db         "(NULL)", 0                                 ; DATA XREF=printf_fetchargs+24
0000000000009c73         db  0x00 ; '.'
0000000000009c74         db  0x00 ; '.'
0000000000009c75         db  0x00 ; '.'
0000000000009c76         db  0x00 ; '.'
0000000000009c77         db  0x00 ; '.'
0000000000009c78         db  0x00 ; '.'
0000000000009c79         db  0x00 ; '.'
0000000000009c7a         db  0x00 ; '.'
0000000000009c7b         db  0x00 ; '.'
0000000000009c7c         db  0x00 ; '.'
0000000000009c7d         db  0x00 ; '.'
0000000000009c7e         db  0x00 ; '.'
0000000000009c7f         db  0x00 ; '.'
0000000000009c80         db  0x60 ; '`'                                         ; DATA XREF=printf_fetchargs+10
0000000000009c81         db  0xd7 ; '.'
0000000000009c82         db  0xff ; '.'
0000000000009c83         db  0xff ; '.'
0000000000009c84         db  0xac ; '.'
0000000000009c85         db  0xd7 ; '.'
0000000000009c86         db  0xff ; '.'
0000000000009c87         db  0xff ; '.'
0000000000009c88         db  0xac ; '.'
0000000000009c89         db  0xd7 ; '.'
0000000000009c8a         db  0xff ; '.'
0000000000009c8b         db  0xff ; '.'
0000000000009c8c         db  0xce ; '.'
0000000000009c8d         db  0xd7 ; '.'
0000000000009c8e         db  0xff ; '.'
0000000000009c8f         db  0xff ; '.'
0000000000009c90         db  0xce ; '.'
0000000000009c91         db  0xd7 ; '.'
0000000000009c92         db  0xff ; '.'
0000000000009c93         db  0xff ; '.'
0000000000009c94         db  0x8a ; '.'
0000000000009c95         db  0xd7 ; '.'
0000000000009c96         db  0xff ; '.'
0000000000009c97         db  0xff ; '.'
0000000000009c98         db  0x8a ; '.'
0000000000009c99         db  0xd7 ; '.'
0000000000009c9a         db  0xff ; '.'
0000000000009c9b         db  0xff ; '.'
0000000000009c9c         db  0x66 ; 'f'
0000000000009c9d         db  0xd7 ; '.'
0000000000009c9e         db  0xff ; '.'
0000000000009c9f         db  0xff ; '.'
0000000000009ca0         db  0x66 ; 'f'
0000000000009ca1         db  0xd7 ; '.'
0000000000009ca2         db  0xff ; '.'
0000000000009ca3         db  0xff ; '.'
0000000000009ca4         db  0x66 ; 'f'
0000000000009ca5         db  0xd7 ; '.'
0000000000009ca6         db  0xff ; '.'
0000000000009ca7         db  0xff ; '.'
0000000000009ca8         db  0x66 ; 'f'
0000000000009ca9         db  0xd7 ; '.'
0000000000009caa         db  0xff ; '.'
0000000000009cab         db  0xff ; '.'
0000000000009cac         db  0x22 ; '"'
0000000000009cad         db  0xd8 ; '.'
0000000000009cae         db  0xff ; '.'
0000000000009caf         db  0xff ; '.'
0000000000009cb0         db  0x30 ; '0'
0000000000009cb1         db  0xd7 ; '.'
0000000000009cb2         db  0xff ; '.'
0000000000009cb3         db  0xff ; '.'
0000000000009cb4         db  0x8a ; '.'
0000000000009cb5         db  0xd7 ; '.'
0000000000009cb6         db  0xff ; '.'
0000000000009cb7         db  0xff ; '.'
0000000000009cb8         db  0x8a ; '.'
0000000000009cb9         db  0xd7 ; '.'
0000000000009cba         db  0xff ; '.'
0000000000009cbb         db  0xff ; '.'
0000000000009cbc         db  0xf4 ; '.'
0000000000009cbd         db  0xd7 ; '.'
0000000000009cbe         db  0xff ; '.'
0000000000009cbf         db  0xff ; '.'
0000000000009cc0         db  0x50 ; 'P'
0000000000009cc1         db  0xd8 ; '.'
0000000000009cc2         db  0xff ; '.'
0000000000009cc3         db  0xff ; '.'
0000000000009cc4         db  0x66 ; 'f'
0000000000009cc5         db  0xd7 ; '.'
0000000000009cc6         db  0xff ; '.'
0000000000009cc7         db  0xff ; '.'
0000000000009cc8         db  0x66 ; 'f'
0000000000009cc9         db  0xd7 ; '.'
0000000000009cca         db  0xff ; '.'
0000000000009ccb         db  0xff ; '.'
0000000000009ccc         db  0x66 ; 'f'
0000000000009ccd         db  0xd7 ; '.'
0000000000009cce         db  0xff ; '.'
0000000000009ccf         db  0xff ; '.'
0000000000009cd0         db  0x66 ; 'f'
0000000000009cd1         db  0xd7 ; '.'
0000000000009cd2         db  0xff ; '.'
0000000000009cd3         db  0xff ; '.'
0000000000009cd4         db  0x66 ; 'f'
0000000000009cd5         db  0xd7 ; '.'
0000000000009cd6         db  0xff ; '.'
0000000000009cd7         db  0xff ; '.'
0000000000009cd8         db  0x66 ; 'f'
0000000000009cd9         db  0xd7 ; '.'
0000000000009cda         db  0xff ; '.'
0000000000009cdb         db  0xff ; '.'
0000000000009cdc         db  0x00 ; '.'
0000000000009cdd         db  0x00 ; '.'
0000000000009cde         db  0x00 ; '.'
0000000000009cdf         db  0x00 ; '.'
                     wide_null_string.2696:
0000000000009ce0         db  0x28 ; '('                                         ; DATA XREF=printf_fetchargs+17
0000000000009ce1         db  0x00 ; '.'
0000000000009ce2         db  0x00 ; '.'
0000000000009ce3         db  0x00 ; '.'
0000000000009ce4         db  0x4e ; 'N'
0000000000009ce5         db  0x00 ; '.'
0000000000009ce6         db  0x00 ; '.'
0000000000009ce7         db  0x00 ; '.'
0000000000009ce8         db  0x55 ; 'U'
0000000000009ce9         db  0x00 ; '.'
0000000000009cea         db  0x00 ; '.'
0000000000009ceb         db  0x00 ; '.'
0000000000009cec         db  0x4c ; 'L'
0000000000009ced         db  0x00 ; '.'
0000000000009cee         db  0x00 ; '.'
0000000000009cef         db  0x00 ; '.'
0000000000009cf0         db  0x4c ; 'L'
0000000000009cf1         db  0x00 ; '.'
0000000000009cf2         db  0x00 ; '.'
0000000000009cf3         db  0x00 ; '.'
0000000000009cf4         db  0x29 ; ')'
0000000000009cf5         db  0x00 ; '.'
0000000000009cf6         db  0x00 ; '.'
0000000000009cf7         db  0x00 ; '.'
0000000000009cf8         db  0x00 ; '.'
0000000000009cf9         db  0x00 ; '.'
0000000000009cfa         db  0x00 ; '.'
0000000000009cfb         db  0x00 ; '.'
                     switch_table_9cfc:        // switch_table
0000000000009cfc         dd         printf_parse.loc_782b-switch_table_9cfc, 27 dup (printf_parse.loc_7dbb-switch_table_9cfc), printf_parse.loc_7d2b-switch_table_9cfc, printf_parse.loc_7dbb-switch_table_9cfc ; switch table used at 0x77b5 containing 84 entries, DATA XREF=printf_parse+564
0000000000009d74         dd         printf_parse.loc_7d4c-switch_table_9cfc, printf_parse.loc_7dbb-switch_table_9cfc, 3 dup (printf_parse.loc_7d2b-switch_table_9cfc), 11 dup (printf_parse.loc_7dbb-switch_table_9cfc)
0000000000009db4         dd         printf_parse.loc_77b7-switch_table_9cfc, 4 dup (printf_parse.loc_7dbb-switch_table_9cfc), printf_parse.loc_7d5c-switch_table_9cfc, 8 dup (printf_parse.loc_7dbb-switch_table_9cfc)
0000000000009dec         dd         printf_parse.loc_7d2b-switch_table_9cfc, printf_parse.loc_7dbb-switch_table_9cfc, printf_parse.loc_7cb8-switch_table_9cfc, printf_parse.loc_7ccb-switch_table_9cfc
0000000000009dfc         dd         3 dup (printf_parse.loc_7d2b-switch_table_9cfc), printf_parse.loc_7dbb-switch_table_9cfc, printf_parse.loc_7ccb-switch_table_9cfc, 4 dup (printf_parse.loc_7dbb-switch_table_9cfc)
0000000000009e20         dd         printf_parse.loc_7c6c-switch_table_9cfc, printf_parse.loc_7d5c-switch_table_9cfc, printf_parse.loc_7db0-switch_table_9cfc, 2 dup (printf_parse.loc_7dbb-switch_table_9cfc)
0000000000009e34         dd         printf_parse.loc_7d18-switch_table_9cfc, printf_parse.loc_7dbb-switch_table_9cfc, printf_parse.loc_7d5c-switch_table_9cfc, 2 dup (printf_parse.loc_7dbb-switch_table_9cfc)
0000000000009e48         dd         printf_parse.loc_7d5c-switch_table_9cfc


        ; Section .eh_frame_hdr
        ; Range: [0x9e4c; 0xa130[ (740 bytes)
        ; File offset : [40524; 41264[ (740 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

0000000000009e4c         db  0x01 ; '.'
0000000000009e4d         db  0x1b ; '.'
0000000000009e4e         db  0x03 ; '.'
0000000000009e4f         db  0x3b ; ';'
0000000000009e50         db  0xe0 ; '.'
0000000000009e51         db  0x02 ; '.'
0000000000009e52         db  0x00 ; '.'
0000000000009e53         db  0x00 ; '.'
0000000000009e54         db  0x5b ; '['
0000000000009e55         db  0x00 ; '.'
0000000000009e56         db  0x00 ; '.'
0000000000009e57         db  0x00 ; '.'
0000000000009e58         db  0xc4 ; '.'
0000000000009e59         db  0x74 ; 't'
0000000000009e5a         db  0xff ; '.'
0000000000009e5b         db  0xff ; '.'
0000000000009e5c         db  0x2c ; ','
0000000000009e5d         db  0x03 ; '.'
0000000000009e5e         db  0x00 ; '.'
0000000000009e5f         db  0x00 ; '.'
0000000000009e60         db  0xd4 ; '.'
0000000000009e61         db  0x77 ; 'w'
0000000000009e62         db  0xff ; '.'
0000000000009e63         db  0xff ; '.'
0000000000009e64         db  0x54 ; 'T'
0000000000009e65         db  0x03 ; '.'
0000000000009e66         db  0x00 ; '.'
0000000000009e67         db  0x00 ; '.'
0000000000009e68         db  0xe4 ; '.'
0000000000009e69         db  0x77 ; 'w'
0000000000009e6a         db  0xff ; '.'
0000000000009e6b         db  0xff ; '.'
0000000000009e6c         db  0x44 ; 'D'
0000000000009e6d         db  0x05 ; '.'
0000000000009e6e         db  0x00 ; '.'
0000000000009e6f         db  0x00 ; '.'
0000000000009e70         db  0xa4 ; '.'
0000000000009e71         db  0x79 ; 'y'
0000000000009e72         db  0xff ; '.'
0000000000009e73         db  0xff ; '.'
0000000000009e74         db  0xfc ; '.'
0000000000009e75         db  0x02 ; '.'
0000000000009e76         db  0x00 ; '.'
0000000000009e77         db  0x00 ; '.'
0000000000009e78         db  0xb4 ; '.'
0000000000009e79         db  0x7a ; 'z'
0000000000009e7a         db  0xff ; '.'
0000000000009e7b         db  0xff ; '.'
0000000000009e7c         db  0x6c ; 'l'
0000000000009e7d         db  0x03 ; '.'
0000000000009e7e         db  0x00 ; '.'
0000000000009e7f         db  0x00 ; '.'
0000000000009e80         db  0x24 ; '$'
0000000000009e81         db  0x7c ; '|'
0000000000009e82         db  0xff ; '.'
0000000000009e83         db  0xff ; '.'
0000000000009e84         db  0x80 ; '.'
0000000000009e85         db  0x03 ; '.'
0000000000009e86         db  0x00 ; '.'
0000000000009e87         db  0x00 ; '.'
0000000000009e88         db  0xd4 ; '.'
0000000000009e89         db  0x7c ; '|'
0000000000009e8a         db  0xff ; '.'
0000000000009e8b         db  0xff ; '.'
0000000000009e8c         db  0x98 ; '.'
0000000000009e8d         db  0x03 ; '.'
0000000000009e8e         db  0x00 ; '.'
0000000000009e8f         db  0x00 ; '.'
0000000000009e90         db  0xb4 ; '.'
0000000000009e91         db  0x7d ; '}'
0000000000009e92         db  0xff ; '.'
0000000000009e93         db  0xff ; '.'
0000000000009e94         db  0xb8 ; '.'
0000000000009e95         db  0x03 ; '.'
0000000000009e96         db  0x00 ; '.'
0000000000009e97         db  0x00 ; '.'
0000000000009e98         db  0xf4 ; '.'
0000000000009e99         db  0x7d ; '}'
0000000000009e9a         db  0xff ; '.'
0000000000009e9b         db  0xff ; '.'
0000000000009e9c         db  0xd0 ; '.'
0000000000009e9d         db  0x03 ; '.'
0000000000009e9e         db  0x00 ; '.'
0000000000009e9f         db  0x00 ; '.'
0000000000009ea0         db  0x24 ; '$'
0000000000009ea1         db  0x7e ; '~'
0000000000009ea2         db  0xff ; '.'
0000000000009ea3         db  0xff ; '.'
0000000000009ea4         db  0xe4 ; '.'
0000000000009ea5         db  0x03 ; '.'
0000000000009ea6         db  0x00 ; '.'
0000000000009ea7         db  0x00 ; '.'
0000000000009ea8         db  0x94 ; '.'
0000000000009ea9         db  0x83 ; '.'
0000000000009eaa         db  0xff ; '.'
0000000000009eab         db  0xff ; '.'
0000000000009eac         db  0x30 ; '0'
0000000000009ead         db  0x04 ; '.'
0000000000009eae         db  0x00 ; '.'
0000000000009eaf         db  0x00 ; '.'
0000000000009eb0         db  0x74 ; 't'
0000000000009eb1         db  0x89 ; '.'
0000000000009eb2         db  0xff ; '.'
0000000000009eb3         db  0xff ; '.'
0000000000009eb4         db  0x5c ; '\'
0000000000009eb5         db  0x04 ; '.'
0000000000009eb6         db  0x00 ; '.'
0000000000009eb7         db  0x00 ; '.'
0000000000009eb8         db  0xe4 ; '.'
0000000000009eb9         db  0x89 ; '.'
0000000000009eba         db  0xff ; '.'
0000000000009ebb         db  0xff ; '.'
0000000000009ebc         db  0x74 ; 't'
0000000000009ebd         db  0x04 ; '.'
0000000000009ebe         db  0x00 ; '.'
0000000000009ebf         db  0x00 ; '.'
0000000000009ec0         db  0x24 ; '$'
0000000000009ec1         db  0x8b ; '.'
0000000000009ec2         db  0xff ; '.'
0000000000009ec3         db  0xff ; '.'
0000000000009ec4         db  0xa8 ; '.'
0000000000009ec5         db  0x04 ; '.'
0000000000009ec6         db  0x00 ; '.'
0000000000009ec7         db  0x00 ; '.'
0000000000009ec8         db  0x04 ; '.'
0000000000009ec9         db  0x8f ; '.'
0000000000009eca         db  0xff ; '.'
0000000000009ecb         db  0xff ; '.'
0000000000009ecc         db  0xf4 ; '.'
0000000000009ecd         db  0x04 ; '.'
0000000000009ece         db  0x00 ; '.'
0000000000009ecf         db  0x00 ; '.'
0000000000009ed0         db  0x54 ; 'T'
0000000000009ed1         db  0x90 ; '.'
0000000000009ed2         db  0xff ; '.'
0000000000009ed3         db  0xff ; '.'
0000000000009ed4         db  0x24 ; '$'
0000000000009ed5         db  0x05 ; '.'
0000000000009ed6         db  0x00 ; '.'
0000000000009ed7         db  0x00 ; '.'
0000000000009ed8         db  0x34 ; '4'
0000000000009ed9         db  0x94 ; '.'
0000000000009eda         db  0xff ; '.'
0000000000009edb         db  0xff ; '.'
0000000000009edc         db  0x7c ; '|'
0000000000009edd         db  0x05 ; '.'
0000000000009ede         db  0x00 ; '.'
0000000000009edf         db  0x00 ; '.'
0000000000009ee0         db  0x44 ; 'D'
0000000000009ee1         db  0x94 ; '.'
0000000000009ee2         db  0xff ; '.'
0000000000009ee3         db  0xff ; '.'
0000000000009ee4         db  0x90 ; '.'
0000000000009ee5         db  0x05 ; '.'
0000000000009ee6         db  0x00 ; '.'
0000000000009ee7         db  0x00 ; '.'
0000000000009ee8         db  0x54 ; 'T'
0000000000009ee9         db  0x94 ; '.'
0000000000009eea         db  0xff ; '.'
0000000000009eeb         db  0xff ; '.'
0000000000009eec         db  0xa4 ; '.'
0000000000009eed         db  0x05 ; '.'
0000000000009eee         db  0x00 ; '.'
0000000000009eef         db  0x00 ; '.'
0000000000009ef0         db  0x04 ; '.'
0000000000009ef1         db  0x95 ; '.'
0000000000009ef2         db  0xff ; '.'
0000000000009ef3         db  0xff ; '.'
0000000000009ef4         db  0xd4 ; '.'
0000000000009ef5         db  0x05 ; '.'
0000000000009ef6         db  0x00 ; '.'
0000000000009ef7         db  0x00 ; '.'
0000000000009ef8         db  0x54 ; 'T'
0000000000009ef9         db  0x95 ; '.'
0000000000009efa         db  0xff ; '.'
0000000000009efb         db  0xff ; '.'
0000000000009efc         db  0xec ; '.'
0000000000009efd         db  0x05 ; '.'
0000000000009efe         db  0x00 ; '.'
0000000000009eff         db  0x00 ; '.'
0000000000009f00         db  0xf4 ; '.'
0000000000009f01         db  0x95 ; '.'
0000000000009f02         db  0xff ; '.'
0000000000009f03         db  0xff ; '.'
0000000000009f04         db  0x0c ; '.'
0000000000009f05         db  0x06 ; '.'
0000000000009f06         db  0x00 ; '.'
0000000000009f07         db  0x00 ; '.'
0000000000009f08         db  0xe4 ; '.'
0000000000009f09         db  0x96 ; '.'
0000000000009f0a         db  0xff ; '.'
0000000000009f0b         db  0xff ; '.'
0000000000009f0c         db  0x50 ; 'P'
0000000000009f0d         db  0x06 ; '.'
0000000000009f0e         db  0x00 ; '.'
0000000000009f0f         db  0x00 ; '.'
0000000000009f10         db  0x24 ; '$'
0000000000009f11         db  0xa9 ; '.'
0000000000009f12         db  0xff ; '.'
0000000000009f13         db  0xff ; '.'
0000000000009f14         db  0xc8 ; '.'
0000000000009f15         db  0x06 ; '.'
0000000000009f16         db  0x00 ; '.'
0000000000009f17         db  0x00 ; '.'
0000000000009f18         db  0xd4 ; '.'
0000000000009f19         db  0xaa ; '.'
0000000000009f1a         db  0xff ; '.'
0000000000009f1b         db  0xff ; '.'
0000000000009f1c         db  0x34 ; '4'
0000000000009f1d         db  0x07 ; '.'
0000000000009f1e         db  0x00 ; '.'
0000000000009f1f         db  0x00 ; '.'
0000000000009f20         db  0x14 ; '.'
0000000000009f21         db  0xab ; '.'
0000000000009f22         db  0xff ; '.'
0000000000009f23         db  0xff ; '.'
0000000000009f24         db  0x60 ; '`'
0000000000009f25         db  0x07 ; '.'
0000000000009f26         db  0x00 ; '.'
0000000000009f27         db  0x00 ; '.'
0000000000009f28         db  0x34 ; '4'
0000000000009f29         db  0xab ; '.'
0000000000009f2a         db  0xff ; '.'
0000000000009f2b         db  0xff ; '.'
0000000000009f2c         db  0x74 ; 't'
0000000000009f2d         db  0x07 ; '.'
0000000000009f2e         db  0x00 ; '.'
0000000000009f2f         db  0x00 ; '.'
0000000000009f30         db  0x54 ; 'T'
0000000000009f31         db  0xab ; '.'
0000000000009f32         db  0xff ; '.'
0000000000009f33         db  0xff ; '.'
0000000000009f34         db  0x88 ; '.'
0000000000009f35         db  0x07 ; '.'
0000000000009f36         db  0x00 ; '.'
0000000000009f37         db  0x00 ; '.'
0000000000009f38         db  0x94 ; '.'
0000000000009f39         db  0xab ; '.'
0000000000009f3a         db  0xff ; '.'
0000000000009f3b         db  0xff ; '.'
0000000000009f3c         db  0x9c ; '.'
0000000000009f3d         db  0x07 ; '.'
0000000000009f3e         db  0x00 ; '.'
0000000000009f3f         db  0x00 ; '.'
0000000000009f40         db  0xb4 ; '.'
0000000000009f41         db  0xab ; '.'
0000000000009f42         db  0xff ; '.'
0000000000009f43         db  0xff ; '.'
0000000000009f44         db  0xb0 ; '.'
0000000000009f45         db  0x07 ; '.'
0000000000009f46         db  0x00 ; '.'
0000000000009f47         db  0x00 ; '.'
0000000000009f48         db  0xe4 ; '.'
0000000000009f49         db  0xab ; '.'
0000000000009f4a         db  0xff ; '.'
0000000000009f4b         db  0xff ; '.'
0000000000009f4c         db  0xc4 ; '.'
0000000000009f4d         db  0x07 ; '.'
0000000000009f4e         db  0x00 ; '.'
0000000000009f4f         db  0x00 ; '.'
0000000000009f50         db  0x64 ; 'd'
0000000000009f51         db  0xac ; '.'
0000000000009f52         db  0xff ; '.'
0000000000009f53         db  0xff ; '.'
0000000000009f54         db  0x18 ; '.'
0000000000009f55         db  0x08 ; '.'
0000000000009f56         db  0x00 ; '.'
0000000000009f57         db  0x00 ; '.'
0000000000009f58         db  0x54 ; 'T'
0000000000009f59         db  0xad ; '.'
0000000000009f5a         db  0xff ; '.'
0000000000009f5b         db  0xff ; '.'
0000000000009f5c         db  0x84 ; '.'
0000000000009f5d         db  0x08 ; '.'
0000000000009f5e         db  0x00 ; '.'
0000000000009f5f         db  0x00 ; '.'
0000000000009f60         db  0x64 ; 'd'
0000000000009f61         db  0xad ; '.'
0000000000009f62         db  0xff ; '.'
0000000000009f63         db  0xff ; '.'
0000000000009f64         db  0x98 ; '.'
0000000000009f65         db  0x08 ; '.'
0000000000009f66         db  0x00 ; '.'
0000000000009f67         db  0x00 ; '.'
0000000000009f68         db  0x04 ; '.'
0000000000009f69         db  0xae ; '.'
0000000000009f6a         db  0xff ; '.'
0000000000009f6b         db  0xff ; '.'
0000000000009f6c         db  0xc4 ; '.'
0000000000009f6d         db  0x08 ; '.'
0000000000009f6e         db  0x00 ; '.'
0000000000009f6f         db  0x00 ; '.'
0000000000009f70         db  0x24 ; '$'
0000000000009f71         db  0xae ; '.'
0000000000009f72         db  0xff ; '.'
0000000000009f73         db  0xff ; '.'
0000000000009f74         db  0xd8 ; '.'
0000000000009f75         db  0x08 ; '.'
0000000000009f76         db  0x00 ; '.'
0000000000009f77         db  0x00 ; '.'
0000000000009f78         db  0x34 ; '4'
0000000000009f79         db  0xae ; '.'
0000000000009f7a         db  0xff ; '.'
0000000000009f7b         db  0xff ; '.'
0000000000009f7c         db  0xec ; '.'
0000000000009f7d         db  0x08 ; '.'
0000000000009f7e         db  0x00 ; '.'
0000000000009f7f         db  0x00 ; '.'
0000000000009f80         db  0x54 ; 'T'
0000000000009f81         db  0xae ; '.'
0000000000009f82         db  0xff ; '.'
0000000000009f83         db  0xff ; '.'
0000000000009f84         db  0x00 ; '.'
0000000000009f85         db  0x09 ; '.'
0000000000009f86         db  0x00 ; '.'
0000000000009f87         db  0x00 ; '.'
0000000000009f88         db  0x74 ; 't'
0000000000009f89         db  0xae ; '.'
0000000000009f8a         db  0xff ; '.'
0000000000009f8b         db  0xff ; '.'
0000000000009f8c         db  0x14 ; '.'
0000000000009f8d         db  0x09 ; '.'
0000000000009f8e         db  0x00 ; '.'
0000000000009f8f         db  0x00 ; '.'
0000000000009f90         db  0x04 ; '.'
0000000000009f91         db  0xaf ; '.'
0000000000009f92         db  0xff ; '.'
0000000000009f93         db  0xff ; '.'
0000000000009f94         db  0x30 ; '0'
0000000000009f95         db  0x09 ; '.'
0000000000009f96         db  0x00 ; '.'
0000000000009f97         db  0x00 ; '.'
0000000000009f98         db  0x94 ; '.'
0000000000009f99         db  0xaf ; '.'
0000000000009f9a         db  0xff ; '.'
0000000000009f9b         db  0xff ; '.'
0000000000009f9c         db  0x4c ; 'L'
0000000000009f9d         db  0x09 ; '.'
0000000000009f9e         db  0x00 ; '.'
0000000000009f9f         db  0x00 ; '.'
0000000000009fa0         db  0xa4 ; '.'
0000000000009fa1         db  0xaf ; '.'
0000000000009fa2         db  0xff ; '.'
0000000000009fa3         db  0xff ; '.'
0000000000009fa4         db  0x60 ; '`'
0000000000009fa5         db  0x09 ; '.'
0000000000009fa6         db  0x00 ; '.'
0000000000009fa7         db  0x00 ; '.'
0000000000009fa8         db  0xb4 ; '.'
0000000000009fa9         db  0xaf ; '.'
0000000000009faa         db  0xff ; '.'
0000000000009fab         db  0xff ; '.'
0000000000009fac         db  0x74 ; 't'
0000000000009fad         db  0x09 ; '.'
0000000000009fae         db  0x00 ; '.'
0000000000009faf         db  0x00 ; '.'
0000000000009fb0         db  0x54 ; 'T'
0000000000009fb1         db  0xb0 ; '.'
0000000000009fb2         db  0xff ; '.'
0000000000009fb3         db  0xff ; '.'
0000000000009fb4         db  0x90 ; '.'
0000000000009fb5         db  0x09 ; '.'
0000000000009fb6         db  0x00 ; '.'
0000000000009fb7         db  0x00 ; '.'
0000000000009fb8         db  0x64 ; 'd'
0000000000009fb9         db  0xb0 ; '.'
0000000000009fba         db  0xff ; '.'
0000000000009fbb         db  0xff ; '.'
0000000000009fbc         db  0xa4 ; '.'
0000000000009fbd         db  0x09 ; '.'
0000000000009fbe         db  0x00 ; '.'
0000000000009fbf         db  0x00 ; '.'
0000000000009fc0         db  0x84 ; '.'
0000000000009fc1         db  0xb0 ; '.'
0000000000009fc2         db  0xff ; '.'
0000000000009fc3         db  0xff ; '.'
0000000000009fc4         db  0xb8 ; '.'
0000000000009fc5         db  0x09 ; '.'
0000000000009fc6         db  0x00 ; '.'
0000000000009fc7         db  0x00 ; '.'
0000000000009fc8         db  0x94 ; '.'
0000000000009fc9         db  0xb0 ; '.'
0000000000009fca         db  0xff ; '.'
0000000000009fcb         db  0xff ; '.'
0000000000009fcc         db  0xcc ; '.'
0000000000009fcd         db  0x09 ; '.'
0000000000009fce         db  0x00 ; '.'
0000000000009fcf         db  0x00 ; '.'
0000000000009fd0         db  0x24 ; '$'
0000000000009fd1         db  0xb1 ; '.'
0000000000009fd2         db  0xff ; '.'
0000000000009fd3         db  0xff ; '.'
0000000000009fd4         db  0xe8 ; '.'
0000000000009fd5         db  0x09 ; '.'
0000000000009fd6         db  0x00 ; '.'
0000000000009fd7         db  0x00 ; '.'
0000000000009fd8         db  0xc4 ; '.'
0000000000009fd9         db  0xb1 ; '.'
0000000000009fda         db  0xff ; '.'
0000000000009fdb         db  0xff ; '.'
0000000000009fdc         db  0x04 ; '.'
0000000000009fdd         db  0x0a ; '.'
0000000000009fde         db  0x00 ; '.'
0000000000009fdf         db  0x00 ; '.'
0000000000009fe0         db  0xd4 ; '.'
0000000000009fe1         db  0xb1 ; '.'
0000000000009fe2         db  0xff ; '.'
0000000000009fe3         db  0xff ; '.'
0000000000009fe4         db  0x18 ; '.'
0000000000009fe5         db  0x0a ; '.'
0000000000009fe6         db  0x00 ; '.'
0000000000009fe7         db  0x00 ; '.'
0000000000009fe8         db  0xf4 ; '.'
0000000000009fe9         db  0xb1 ; '.'
0000000000009fea         db  0xff ; '.'
0000000000009feb         db  0xff ; '.'
0000000000009fec         db  0x2c ; ','
0000000000009fed         db  0x0a ; '.'
0000000000009fee         db  0x00 ; '.'
0000000000009fef         db  0x00 ; '.'
0000000000009ff0         db  0x14 ; '.'
0000000000009ff1         db  0xb2 ; '.'
0000000000009ff2         db  0xff ; '.'
0000000000009ff3         db  0xff ; '.'
0000000000009ff4         db  0x40 ; '@'
0000000000009ff5         db  0x0a ; '.'
0000000000009ff6         db  0x00 ; '.'
0000000000009ff7         db  0x00 ; '.'
0000000000009ff8         db  0x24 ; '$'
0000000000009ff9         db  0xb2 ; '.'
0000000000009ffa         db  0xff ; '.'
0000000000009ffb         db  0xff ; '.'
0000000000009ffc         db  0x54 ; 'T'
0000000000009ffd         db  0x0a ; '.'
0000000000009ffe         db  0x00 ; '.'
0000000000009fff         db  0x00 ; '.'
000000000000a000         db  0x44 ; 'D'                                         ; DATA XREF=unary_operator+1275
000000000000a001         db  0xb2 ; '.'
000000000000a002         db  0xff ; '.'
000000000000a003         db  0xff ; '.'
000000000000a004         db  0x68 ; 'h'
000000000000a005         db  0x0a ; '.'
000000000000a006         db  0x00 ; '.'
000000000000a007         db  0x00 ; '.'
000000000000a008         db  0x64 ; 'd'
000000000000a009         db  0xb2 ; '.'
000000000000a00a         db  0xff ; '.'
000000000000a00b         db  0xff ; '.'
000000000000a00c         db  0x7c ; '|'
000000000000a00d         db  0x0a ; '.'
000000000000a00e         db  0x00 ; '.'
000000000000a00f         db  0x00 ; '.'
000000000000a010         db  0x84 ; '.'
000000000000a011         db  0xb2 ; '.'
000000000000a012         db  0xff ; '.'
000000000000a013         db  0xff ; '.'
000000000000a014         db  0x94 ; '.'
000000000000a015         db  0x0a ; '.'
000000000000a016         db  0x00 ; '.'
000000000000a017         db  0x00 ; '.'
000000000000a018         db  0x34 ; '4'
000000000000a019         db  0xb5 ; '.'
000000000000a01a         db  0xff ; '.'
000000000000a01b         db  0xff ; '.'
000000000000a01c         db  0xac ; '.'
000000000000a01d         db  0x0a ; '.'
000000000000a01e         db  0x00 ; '.'
000000000000a01f         db  0x00 ; '.'
000000000000a020         db  0xf4 ; '.'
000000000000a021         db  0xb5 ; '.'
000000000000a022         db  0xff ; '.'
000000000000a023         db  0xff ; '.'
000000000000a024         db  0xfc ; '.'
000000000000a025         db  0x0a ; '.'
000000000000a026         db  0x00 ; '.'
000000000000a027         db  0x00 ; '.'
000000000000a028         db  0x04 ; '.'
000000000000a029         db  0xb6 ; '.'
000000000000a02a         db  0xff ; '.'
000000000000a02b         db  0xff ; '.'
000000000000a02c         db  0x14 ; '.'
000000000000a02d         db  0x0b ; '.'
000000000000a02e         db  0x00 ; '.'
000000000000a02f         db  0x00 ; '.'
000000000000a030         db  0x24 ; '$'
000000000000a031         db  0xba ; '.'
000000000000a032         db  0xff ; '.'
000000000000a033         db  0xff ; '.'
000000000000a034         db  0x28 ; '('
000000000000a035         db  0x0c ; '.'
000000000000a036         db  0x00 ; '.'
000000000000a037         db  0x00 ; '.'
000000000000a038         db  0x44 ; 'D'
000000000000a039         db  0xba ; '.'
000000000000a03a         db  0xff ; '.'
000000000000a03b         db  0xff ; '.'
000000000000a03c         db  0x3c ; '<'
000000000000a03d         db  0x0c ; '.'
000000000000a03e         db  0x00 ; '.'
000000000000a03f         db  0x00 ; '.'
000000000000a040         db  0xc4 ; '.'
000000000000a041         db  0xba ; '.'
000000000000a042         db  0xff ; '.'
000000000000a043         db  0xff ; '.'
000000000000a044         db  0x58 ; 'X'
000000000000a045         db  0x0c ; '.'
000000000000a046         db  0x00 ; '.'
000000000000a047         db  0x00 ; '.'
000000000000a048         db  0xa4 ; '.'
000000000000a049         db  0xbb ; '.'
000000000000a04a         db  0xff ; '.'
000000000000a04b         db  0xff ; '.'
000000000000a04c         db  0x84 ; '.'
000000000000a04d         db  0x0c ; '.'
000000000000a04e         db  0x00 ; '.'
000000000000a04f         db  0x00 ; '.'
000000000000a050         db  0x24 ; '$'
000000000000a051         db  0xbc ; '.'
000000000000a052         db  0xff ; '.'
000000000000a053         db  0xff ; '.'
000000000000a054         db  0xa4 ; '.'
000000000000a055         db  0x0c ; '.'
000000000000a056         db  0x00 ; '.'
000000000000a057         db  0x00 ; '.'
000000000000a058         db  0x44 ; 'D'
000000000000a059         db  0xbc ; '.'
000000000000a05a         db  0xff ; '.'
000000000000a05b         db  0xff ; '.'
000000000000a05c         db  0xc0 ; '.'
000000000000a05d         db  0x0c ; '.'
000000000000a05e         db  0x00 ; '.'
000000000000a05f         db  0x00 ; '.'
000000000000a060         db  0x74 ; 't'
000000000000a061         db  0xbc ; '.'
000000000000a062         db  0xff ; '.'
000000000000a063         db  0xff ; '.'
000000000000a064         db  0xd4 ; '.'
000000000000a065         db  0x0c ; '.'
000000000000a066         db  0x00 ; '.'
000000000000a067         db  0x00 ; '.'
000000000000a068         db  0x84 ; '.'
000000000000a069         db  0xbc ; '.'
000000000000a06a         db  0xff ; '.'
000000000000a06b         db  0xff ; '.'
000000000000a06c         db  0xe8 ; '.'
000000000000a06d         db  0x0c ; '.'
000000000000a06e         db  0x00 ; '.'
000000000000a06f         db  0x00 ; '.'
000000000000a070         db  0xc4 ; '.'
000000000000a071         db  0xbc ; '.'
000000000000a072         db  0xff ; '.'
000000000000a073         db  0xff ; '.'
000000000000a074         db  0x0c ; '.'
000000000000a075         db  0x0d ; '.'
000000000000a076         db  0x00 ; '.'
000000000000a077         db  0x00 ; '.'
000000000000a078         db  0xf4 ; '.'
000000000000a079         db  0xbc ; '.'
000000000000a07a         db  0xff ; '.'
000000000000a07b         db  0xff ; '.'
000000000000a07c         db  0x20 ; ' '
000000000000a07d         db  0x0d ; '.'
000000000000a07e         db  0x00 ; '.'
000000000000a07f         db  0x00 ; '.'
000000000000a080         db  0x84 ; '.'
000000000000a081         db  0xbd ; '.'
000000000000a082         db  0xff ; '.'
000000000000a083         db  0xff ; '.'
000000000000a084         db  0x38 ; '8'
000000000000a085         db  0x0d ; '.'
000000000000a086         db  0x00 ; '.'
000000000000a087         db  0x00 ; '.'
000000000000a088         db  0xd4 ; '.'
000000000000a089         db  0xbd ; '.'
000000000000a08a         db  0xff ; '.'
000000000000a08b         db  0xff ; '.'
000000000000a08c         db  0x50 ; 'P'
000000000000a08d         db  0x0d ; '.'
000000000000a08e         db  0x00 ; '.'
000000000000a08f         db  0x00 ; '.'
000000000000a090         db  0xf4 ; '.'
000000000000a091         db  0xbd ; '.'
000000000000a092         db  0xff ; '.'
000000000000a093         db  0xff ; '.'
000000000000a094         db  0x6c ; 'l'
000000000000a095         db  0x0d ; '.'
000000000000a096         db  0x00 ; '.'
000000000000a097         db  0x00 ; '.'
000000000000a098         db  0x24 ; '$'
000000000000a099         db  0xbe ; '.'
000000000000a09a         db  0xff ; '.'
000000000000a09b         db  0xff ; '.'
000000000000a09c         db  0x88 ; '.'
000000000000a09d         db  0x0d ; '.'
000000000000a09e         db  0x00 ; '.'
000000000000a09f         db  0x00 ; '.'
000000000000a0a0         db  0x54 ; 'T'
000000000000a0a1         db  0xbe ; '.'
000000000000a0a2         db  0xff ; '.'
000000000000a0a3         db  0xff ; '.'
000000000000a0a4         db  0xb0 ; '.'
000000000000a0a5         db  0x0d ; '.'
000000000000a0a6         db  0x00 ; '.'
000000000000a0a7         db  0x00 ; '.'
000000000000a0a8         db  0x74 ; 't'
000000000000a0a9         db  0xbe ; '.'
000000000000a0aa         db  0xff ; '.'
000000000000a0ab         db  0xff ; '.'
000000000000a0ac         db  0xcc ; '.'
000000000000a0ad         db  0x0d ; '.'
000000000000a0ae         db  0x00 ; '.'
000000000000a0af         db  0x00 ; '.'
000000000000a0b0         db  0xb4 ; '.'
000000000000a0b1         db  0xbe ; '.'
000000000000a0b2         db  0xff ; '.'
000000000000a0b3         db  0xff ; '.'
000000000000a0b4         db  0xe4 ; '.'
000000000000a0b5         db  0x0d ; '.'
000000000000a0b6         db  0x00 ; '.'
000000000000a0b7         db  0x00 ; '.'
000000000000a0b8         db  0x04 ; '.'
000000000000a0b9         db  0xc0 ; '.'
000000000000a0ba         db  0xff ; '.'
000000000000a0bb         db  0xff ; '.'
000000000000a0bc         db  0x30 ; '0'
000000000000a0bd         db  0x0e ; '.'
000000000000a0be         db  0x00 ; '.'
000000000000a0bf         db  0x00 ; '.'
000000000000a0c0         db  0xb4 ; '.'
000000000000a0c1         db  0xc0 ; '.'
000000000000a0c2         db  0xff ; '.'
000000000000a0c3         db  0xff ; '.'
000000000000a0c4         db  0x4c ; 'L'
000000000000a0c5         db  0x0e ; '.'
000000000000a0c6         db  0x00 ; '.'
000000000000a0c7         db  0x00 ; '.'
000000000000a0c8         db  0x44 ; 'D'
000000000000a0c9         db  0xc1 ; '.'
000000000000a0ca         db  0xff ; '.'
000000000000a0cb         db  0xff ; '.'
000000000000a0cc         db  0x8c ; '.'
000000000000a0cd         db  0x0e ; '.'
000000000000a0ce         db  0x00 ; '.'
000000000000a0cf         db  0x00 ; '.'
000000000000a0d0         db  0xc4 ; '.'
000000000000a0d1         db  0xc1 ; '.'
000000000000a0d2         db  0xff ; '.'
000000000000a0d3         db  0xff ; '.'
000000000000a0d4         db  0xb4 ; '.'
000000000000a0d5         db  0x0e ; '.'
000000000000a0d6         db  0x00 ; '.'
000000000000a0d7         db  0x00 ; '.'
000000000000a0d8         db  0x44 ; 'D'
000000000000a0d9         db  0xc2 ; '.'
000000000000a0da         db  0xff ; '.'
000000000000a0db         db  0xff ; '.'
000000000000a0dc         db  0x04 ; '.'
000000000000a0dd         db  0x0f ; '.'
000000000000a0de         db  0x00 ; '.'
000000000000a0df         db  0x00 ; '.'
000000000000a0e0         db  0xa4 ; '.'
000000000000a0e1         db  0xc2 ; '.'
000000000000a0e2         db  0xff ; '.'
000000000000a0e3         db  0xff ; '.'
000000000000a0e4         db  0x24 ; '$'
000000000000a0e5         db  0x0f ; '.'
000000000000a0e6         db  0x00 ; '.'
000000000000a0e7         db  0x00 ; '.'
000000000000a0e8         db  0xe4 ; '.'
000000000000a0e9         db  0xc2 ; '.'
000000000000a0ea         db  0xff ; '.'
000000000000a0eb         db  0xff ; '.'
000000000000a0ec         db  0x44 ; 'D'
000000000000a0ed         db  0x0f ; '.'
000000000000a0ee         db  0x00 ; '.'
000000000000a0ef         db  0x00 ; '.'
000000000000a0f0         db  0x64 ; 'd'
000000000000a0f1         db  0xc3 ; '.'
000000000000a0f2         db  0xff ; '.'
000000000000a0f3         db  0xff ; '.'
000000000000a0f4         db  0x7c ; '|'
000000000000a0f5         db  0x0f ; '.'
000000000000a0f6         db  0x00 ; '.'
000000000000a0f7         db  0x00 ; '.'
000000000000a0f8         db  0xa4 ; '.'
000000000000a0f9         db  0xc3 ; '.'
000000000000a0fa         db  0xff ; '.'
000000000000a0fb         db  0xff ; '.'
000000000000a0fc         db  0x9c ; '.'
000000000000a0fd         db  0x0f ; '.'
000000000000a0fe         db  0x00 ; '.'
000000000000a0ff         db  0x00 ; '.'
000000000000a100         db  0x04 ; '.'
000000000000a101         db  0xc4 ; '.'
000000000000a102         db  0xff ; '.'
000000000000a103         db  0xff ; '.'
000000000000a104         db  0xcc ; '.'
000000000000a105         db  0x0f ; '.'
000000000000a106         db  0x00 ; '.'
000000000000a107         db  0x00 ; '.'
000000000000a108         db  0x24 ; '$'
000000000000a109         db  0xd5 ; '.'
000000000000a10a         db  0xff ; '.'
000000000000a10b         db  0xff ; '.'
000000000000a10c         db  0xfc ; '.'
000000000000a10d         db  0x0f ; '.'
000000000000a10e         db  0x00 ; '.'
000000000000a10f         db  0x00 ; '.'
000000000000a110         db  0x24 ; '$'
000000000000a111         db  0xd7 ; '.'
000000000000a112         db  0xff ; '.'
000000000000a113         db  0xff ; '.'
000000000000a114         db  0x14 ; '.'
000000000000a115         db  0x10 ; '.'
000000000000a116         db  0x00 ; '.'
000000000000a117         db  0x00 ; '.'
000000000000a118         db  0x14 ; '.'
000000000000a119         db  0xe4 ; '.'
000000000000a11a         db  0xff ; '.'
000000000000a11b         db  0xff ; '.'
000000000000a11c         db  0x64 ; 'd'
000000000000a11d         db  0x10 ; '.'
000000000000a11e         db  0x00 ; '.'
000000000000a11f         db  0x00 ; '.'
000000000000a120         db  0x84 ; '.'
000000000000a121         db  0xe4 ; '.'
000000000000a122         db  0xff ; '.'
000000000000a123         db  0xff ; '.'
000000000000a124         db  0xac ; '.'
000000000000a125         db  0x10 ; '.'
000000000000a126         db  0x00 ; '.'
000000000000a127         db  0x00 ; '.'
000000000000a128         db  0x94 ; '.'
000000000000a129         db  0xe4 ; '.'
000000000000a12a         db  0xff ; '.'
000000000000a12b         db  0xff ; '.'
000000000000a12c         db  0xc4 ; '.'
000000000000a12d         db  0x10 ; '.'
000000000000a12e         db  0x00 ; '.'
000000000000a12f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xa130; 0xaf28[ (3576 bytes)
        ; File offset : [41264; 44840[ (3576 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000a130         dd         0x00000014                                  ; Length of the record
000000000000a134         dd         0x00000000                                  ; CIE ID
000000000000a138         db         0x01                                        ; Version
000000000000a139         db         "zR", 0                                     ; Augmentation String
000000000000a13c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000a13d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000a13e         db         0x10                                        ; Return address register
000000000000a13f         db         0x01                                        ; Augmentation data length
000000000000a140         db         0x1b                                        ; FDE encoding
000000000000a141         db  0x0c ; '.'
000000000000a142         db  0x07 ; '.'
000000000000a143         db  0x08 ; '.'
000000000000a144         db  0x90 ; '.'
000000000000a145         db  0x01 ; '.'
000000000000a146         db  0x07 ; '.'
000000000000a147         db  0x10 ; '.'
000000000000a148         dd         0x00000014                                  ; Length of the record
000000000000a14c         dd         0x0000001c                                  ; FDE: parent CIE at 0xa130 (FDE encoding = 0x1B)
000000000000a150         db         0xa0, 0x76, 2 dup (0xff)                    ; begin 0x17f0
000000000000a154         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x181b)
000000000000a158         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a159         align      32
000000000000a160         dd         0x00000014                                  ; Length of the record
000000000000a164         dd         0x00000000                                  ; CIE ID
000000000000a168         db         0x01                                        ; Version
000000000000a169         db         "zR", 0                                     ; Augmentation String
000000000000a16c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000a16d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000a16e         db         0x10                                        ; Return address register
000000000000a16f         db         0x01                                        ; Augmentation data length
000000000000a170         db         0x1b                                        ; FDE encoding
000000000000a171         db  0x0c ; '.'
000000000000a172         db  0x07 ; '.'
000000000000a173         db  0x08 ; '.'
000000000000a174         db  0x90 ; '.'
000000000000a175         db  0x01 ; '.'
000000000000a176         db  0x00 ; '.'
000000000000a177         db  0x00 ; '.'
000000000000a178         dd         0x00000024                                  ; Length of the record
000000000000a17c         dd         0x0000001c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a180         db         0x90, 0x71, 2 dup (0xff)                    ; begin 0x1310
000000000000a184         db         0x10, 0x03, 2 dup (0x00)                    ; length 0x310 (end at 0x1620)
000000000000a188         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a189         db  0x0e ; '.'
000000000000a18a         db  0x10 ; '.'
000000000000a18b         db  0x46 ; 'F'
000000000000a18c         db  0x0e ; '.'
000000000000a18d         db  0x18 ; '.'
000000000000a18e         db  0x4a ; 'J'
000000000000a18f         db  0x0f ; '.'
000000000000a190         db  0x0b ; '.'
000000000000a191         db  0x77 ; 'w'
000000000000a192         db  0x08 ; '.'
000000000000a193         db  0x80 ; '.'
000000000000a194         db  0x00 ; '.'
000000000000a195         db  0x3f ; '?'
000000000000a196         db  0x1a ; '.'
000000000000a197         db  0x3b ; ';'
000000000000a198         db  0x2a ; '*'
000000000000a199         db  0x33 ; '3'
000000000000a19a         db  0x24 ; '$'
000000000000a19b         db  0x22 ; '"'
000000000000a19c         db  0x00 ; '.'
000000000000a19d         db  0x00 ; '.'
000000000000a19e         db  0x00 ; '.'
000000000000a19f         db  0x00 ; '.'
000000000000a1a0         dd         0x00000014                                  ; Length of the record
000000000000a1a4         dd         0x00000044                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a1a8         db         0x78, 0x74, 2 dup (0xff)                    ; begin 0x1620
000000000000a1ac         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1628)
000000000000a1b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1b1         align      8
000000000000a1b8         dd         0x00000010                                  ; Length of the record
000000000000a1bc         dd         0x0000005c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a1c0         db         0x40, 0x77, 2 dup (0xff)                    ; begin 0x1900
000000000000a1c4         db         0x6a, 0x01, 2 dup (0x00)                    ; length 0x16a (end at 0x1a6a)
000000000000a1c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1c9         align      4
000000000000a1cc         dd         0x00000014                                  ; Length of the record
000000000000a1d0         dd         0x00000070                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a1d4         db         0x9c, 0x78, 2 dup (0xff)                    ; begin 0x1a70
000000000000a1d8         db         0xaa, 3 dup (0x00)                          ; length 0xaa (end at 0x1b1a)
000000000000a1dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1dd         db  0x47 ; 'G'
000000000000a1de         db  0x0e ; '.'
000000000000a1df         db  0xe0 ; '.'
000000000000a1e0         db  0x01 ; '.'
000000000000a1e1         db  0x00 ; '.'
000000000000a1e2         db  0x00 ; '.'
000000000000a1e3         db  0x00 ; '.'
000000000000a1e4         dd         0x0000001c                                  ; Length of the record
000000000000a1e8         dd         0x00000088                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a1ec         db         0x34, 0x79, 2 dup (0xff)                    ; begin 0x1b20
000000000000a1f0         db         0xd4, 3 dup (0x00)                          ; length 0xd4 (end at 0x1bf4)
000000000000a1f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a1f5         db  0x41 ; 'A'
000000000000a1f6         db  0x0e ; '.'
000000000000a1f7         db  0x10 ; '.'
000000000000a1f8         db  0x83 ; '.'
000000000000a1f9         db  0x02 ; '.'
000000000000a1fa         db  0x02 ; '.'
000000000000a1fb         db  0x85 ; '.'
000000000000a1fc         db  0x0a ; '.'
000000000000a1fd         db  0x0e ; '.'
000000000000a1fe         db  0x08 ; '.'
000000000000a1ff         db  0x4a ; 'J'
000000000000a200         db  0x0b ; '.'
000000000000a201         db  0x00 ; '.'
000000000000a202         db  0x00 ; '.'
000000000000a203         db  0x00 ; '.'
000000000000a204         dd         0x00000014                                  ; Length of the record
000000000000a208         dd         0x000000a8                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a20c         db         0xf4, 0x79, 2 dup (0xff)                    ; begin 0x1c00
000000000000a210         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x1c3c)
000000000000a214         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a215         db  0x4f ; 'O'
000000000000a216         db  0x0e ; '.'
000000000000a217         db  0x10 ; '.'
000000000000a218         db  0x83 ; '.'
000000000000a219         db  0x02 ; '.'
000000000000a21a         db  0x00 ; '.'
000000000000a21b         db  0x00 ; '.'
000000000000a21c         dd         0x00000010                                  ; Length of the record
000000000000a220         dd         0x000000c0                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a224         db         0x1c, 0x7a, 2 dup (0xff)                    ; begin 0x1c40
000000000000a228         db         0x2a, 3 dup (0x00)                          ; length 0x2a (end at 0x1c6a)
000000000000a22c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a22d         db  0x65 ; 'e'
000000000000a22e         db  0x0e ; '.'
000000000000a22f         db  0x10 ; '.'
000000000000a230         dd         0x00000048                                  ; Length of the record
000000000000a234         dd         0x000000d4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a238         db         0x38, 0x7a, 2 dup (0xff)                    ; begin 0x1c70
000000000000a23c         db         0x6d, 0x05, 2 dup (0x00)                    ; length 0x56d (end at 0x21dd)
000000000000a240         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a241         db  0x42 ; 'B'
000000000000a242         db  0x0e ; '.'
000000000000a243         db  0x10 ; '.'
000000000000a244         db  0x8f ; '.'
000000000000a245         db  0x02 ; '.'
000000000000a246         db  0x42 ; 'B'
000000000000a247         db  0x0e ; '.'
000000000000a248         db  0x18 ; '.'
000000000000a249         db  0x8e ; '.'
000000000000a24a         db  0x03 ; '.'
000000000000a24b         db  0x44 ; 'D'
000000000000a24c         db  0x0e ; '.'
000000000000a24d         db  0x20 ; ' '
000000000000a24e         db  0x8d ; '.'
000000000000a24f         db  0x04 ; '.'
000000000000a250         db  0x42 ; 'B'
000000000000a251         db  0x0e ; '.'
000000000000a252         db  0x28 ; '('
000000000000a253         db  0x8c ; '.'
000000000000a254         db  0x05 ; '.'
000000000000a255         db  0x41 ; 'A'
000000000000a256         db  0x0e ; '.'
000000000000a257         db  0x30 ; '0'
000000000000a258         db  0x86 ; '.'
000000000000a259         db  0x06 ; '.'
000000000000a25a         db  0x41 ; 'A'
000000000000a25b         db  0x0e ; '.'
000000000000a25c         db  0x38 ; '8'
000000000000a25d         db  0x83 ; '.'
000000000000a25e         db  0x07 ; '.'
000000000000a25f         db  0x47 ; 'G'
000000000000a260         db  0x0e ; '.'
000000000000a261         db  0xb0 ; '.'
000000000000a262         db  0x03 ; '.'
000000000000a263         db  0x02 ; '.'
000000000000a264         db  0xed ; '.'
000000000000a265         db  0x0a ; '.'
000000000000a266         db  0x0e ; '.'
000000000000a267         db  0x38 ; '8'
000000000000a268         db  0x41 ; 'A'
000000000000a269         db  0x0e ; '.'
000000000000a26a         db  0x30 ; '0'
000000000000a26b         db  0x41 ; 'A'
000000000000a26c         db  0x0e ; '.'
000000000000a26d         db  0x28 ; '('
000000000000a26e         db  0x42 ; 'B'
000000000000a26f         db  0x0e ; '.'
000000000000a270         db  0x20 ; ' '
000000000000a271         db  0x42 ; 'B'
000000000000a272         db  0x0e ; '.'
000000000000a273         db  0x18 ; '.'
000000000000a274         db  0x42 ; 'B'
000000000000a275         db  0x0e ; '.'
000000000000a276         db  0x10 ; '.'
000000000000a277         db  0x42 ; 'B'
000000000000a278         db  0x0e ; '.'
000000000000a279         db  0x08 ; '.'
000000000000a27a         db  0x46 ; 'F'
000000000000a27b         db  0x0b ; '.'
000000000000a27c         dd         0x00000028                                  ; Length of the record
000000000000a280         dd         0x00000120                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a284         db         0x5c, 0x7f, 2 dup (0xff)                    ; begin 0x21e0
000000000000a288         db         0xd1, 0x05, 2 dup (0x00)                    ; length 0x5d1 (end at 0x27b1)
000000000000a28c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a28d         db  0x41 ; 'A'
000000000000a28e         db  0x0e ; '.'
000000000000a28f         db  0x10 ; '.'
000000000000a290         db  0x86 ; '.'
000000000000a291         db  0x02 ; '.'
000000000000a292         db  0x41 ; 'A'
000000000000a293         db  0x0e ; '.'
000000000000a294         db  0x18 ; '.'
000000000000a295         db  0x83 ; '.'
000000000000a296         db  0x03 ; '.'
000000000000a297         db  0x47 ; 'G'
000000000000a298         db  0x0e ; '.'
000000000000a299         db  0xc0 ; '.'
000000000000a29a         db  0x01 ; '.'
000000000000a29b         db  0x02 ; '.'
000000000000a29c         db  0x85 ; '.'
000000000000a29d         db  0x0a ; '.'
000000000000a29e         db  0x0e ; '.'
000000000000a29f         db  0x18 ; '.'
000000000000a2a0         db  0x41 ; 'A'
000000000000a2a1         db  0x0e ; '.'
000000000000a2a2         db  0x10 ; '.'
000000000000a2a3         db  0x41 ; 'A'
000000000000a2a4         db  0x0e ; '.'
000000000000a2a5         db  0x08 ; '.'
000000000000a2a6         db  0x48 ; 'H'
000000000000a2a7         db  0x0b ; '.'
000000000000a2a8         dd         0x00000014                                  ; Length of the record
000000000000a2ac         dd         0x0000014c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a2b0         db         0x10, 0x85, 2 dup (0xff)                    ; begin 0x27c0
000000000000a2b4         db         0x70, 3 dup (0x00)                          ; length 0x70 (end at 0x2830)
000000000000a2b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2b9         db  0x02 ; '.'
000000000000a2ba         db  0x6b ; 'k'
000000000000a2bb         db  0x0e ; '.'
000000000000a2bc         db  0x10 ; '.'
000000000000a2bd         db  0x00 ; '.'
000000000000a2be         db  0x00 ; '.'
000000000000a2bf         db  0x00 ; '.'
000000000000a2c0         dd         0x00000030                                  ; Length of the record
000000000000a2c4         dd         0x00000164                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a2c8         db         0x68, 0x85, 2 dup (0xff)                    ; begin 0x2830
000000000000a2cc         db         0x3f, 0x01, 2 dup (0x00)                    ; length 0x13f (end at 0x296f)
000000000000a2d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a2d1         db  0x44 ; 'D'
000000000000a2d2         db  0x0e ; '.'
000000000000a2d3         db  0x10 ; '.'
000000000000a2d4         db  0x02 ; '.'
000000000000a2d5         db  0x77 ; 'w'
000000000000a2d6         db  0x0a ; '.'
000000000000a2d7         db  0x0e ; '.'
000000000000a2d8         db  0x08 ; '.'
000000000000a2d9         db  0x45 ; 'E'
000000000000a2da         db  0x0b ; '.'
000000000000a2db         db  0x44 ; 'D'
000000000000a2dc         db  0x0a ; '.'
000000000000a2dd         db  0x0e ; '.'
000000000000a2de         db  0x08 ; '.'
000000000000a2df         db  0x4c ; 'L'
000000000000a2e0         db  0x0b ; '.'
000000000000a2e1         db  0x6a ; 'j'
000000000000a2e2         db  0x0a ; '.'
000000000000a2e3         db  0x0e ; '.'
000000000000a2e4         db  0x08 ; '.'
000000000000a2e5         db  0x46 ; 'F'
000000000000a2e6         db  0x0b ; '.'
000000000000a2e7         db  0x52 ; 'R'
000000000000a2e8         db  0x0a ; '.'
000000000000a2e9         db  0x0e ; '.'
000000000000a2ea         db  0x08 ; '.'
000000000000a2eb         db  0x46 ; 'F'
000000000000a2ec         db  0x0b ; '.'
000000000000a2ed         db  0x44 ; 'D'
000000000000a2ee         db  0x0a ; '.'
000000000000a2ef         db  0x0e ; '.'
000000000000a2f0         db  0x08 ; '.'
000000000000a2f1         db  0x4c ; 'L'
000000000000a2f2         db  0x0b ; '.'
000000000000a2f3         db  0x00 ; '.'
000000000000a2f4         dd         0x00000048                                  ; Length of the record
000000000000a2f8         dd         0x00000198                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a2fc         db         0x74, 0x86, 2 dup (0xff)                    ; begin 0x2970
000000000000a300         db         0xd9, 0x03, 2 dup (0x00)                    ; length 0x3d9 (end at 0x2d49)
000000000000a304         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a305         db  0x42 ; 'B'
000000000000a306         db  0x0e ; '.'
000000000000a307         db  0x10 ; '.'
000000000000a308         db  0x8f ; '.'
000000000000a309         db  0x02 ; '.'
000000000000a30a         db  0x42 ; 'B'
000000000000a30b         db  0x0e ; '.'
000000000000a30c         db  0x18 ; '.'
000000000000a30d         db  0x8e ; '.'
000000000000a30e         db  0x03 ; '.'
000000000000a30f         db  0x42 ; 'B'
000000000000a310         db  0x0e ; '.'
000000000000a311         db  0x20 ; ' '
000000000000a312         db  0x8d ; '.'
000000000000a313         db  0x04 ; '.'
000000000000a314         db  0x42 ; 'B'
000000000000a315         db  0x0e ; '.'
000000000000a316         db  0x28 ; '('
000000000000a317         db  0x8c ; '.'
000000000000a318         db  0x05 ; '.'
000000000000a319         db  0x41 ; 'A'
000000000000a31a         db  0x0e ; '.'
000000000000a31b         db  0x30 ; '0'
000000000000a31c         db  0x86 ; '.'
000000000000a31d         db  0x06 ; '.'
000000000000a31e         db  0x41 ; 'A'
000000000000a31f         db  0x0e ; '.'
000000000000a320         db  0x38 ; '8'
000000000000a321         db  0x83 ; '.'
000000000000a322         db  0x07 ; '.'
000000000000a323         db  0x44 ; 'D'
000000000000a324         db  0x0e ; '.'
000000000000a325         db  0x50 ; 'P'
000000000000a326         db  0x03 ; '.'
000000000000a327         db  0x76 ; 'v'
000000000000a328         db  0x02 ; '.'
000000000000a329         db  0x0a ; '.'
000000000000a32a         db  0x0e ; '.'
000000000000a32b         db  0x38 ; '8'
000000000000a32c         db  0x41 ; 'A'
000000000000a32d         db  0x0e ; '.'
000000000000a32e         db  0x30 ; '0'
000000000000a32f         db  0x41 ; 'A'
000000000000a330         db  0x0e ; '.'
000000000000a331         db  0x28 ; '('
000000000000a332         db  0x42 ; 'B'
000000000000a333         db  0x0e ; '.'
000000000000a334         db  0x20 ; ' '
000000000000a335         db  0x42 ; 'B'
000000000000a336         db  0x0e ; '.'
000000000000a337         db  0x18 ; '.'
000000000000a338         db  0x42 ; 'B'
000000000000a339         db  0x0e ; '.'
000000000000a33a         db  0x10 ; '.'
000000000000a33b         db  0x42 ; 'B'
000000000000a33c         db  0x0e ; '.'
000000000000a33d         db  0x08 ; '.'
000000000000a33e         db  0x42 ; 'B'
000000000000a33f         db  0x0b ; '.'
000000000000a340         dd         0x0000002c                                  ; Length of the record
000000000000a344         dd         0x000001e4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a348         db         0x08, 0x8a, 2 dup (0xff)                    ; begin 0x2d50
000000000000a34c         db         0x48, 0x01, 2 dup (0x00)                    ; length 0x148 (end at 0x2e98)
000000000000a350         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a351         db  0x4f ; 'O'
000000000000a352         db  0x0e ; '.'
000000000000a353         db  0x10 ; '.'
000000000000a354         db  0x83 ; '.'
000000000000a355         db  0x02 ; '.'
000000000000a356         db  0x02 ; '.'
000000000000a357         db  0x60 ; '`'
000000000000a358         db  0x0a ; '.'
000000000000a359         db  0x0e ; '.'
000000000000a35a         db  0x08 ; '.'
000000000000a35b         db  0x49 ; 'I'
000000000000a35c         db  0x0b ; '.'
000000000000a35d         db  0x7b ; '{'
000000000000a35e         db  0x0a ; '.'
000000000000a35f         db  0x0e ; '.'
000000000000a360         db  0x08 ; '.'
000000000000a361         db  0x55 ; 'U'
000000000000a362         db  0x0b ; '.'
000000000000a363         db  0x7e ; '~'
000000000000a364         db  0x0a ; '.'
000000000000a365         db  0x0e ; '.'
000000000000a366         db  0x08 ; '.'
000000000000a367         db  0x4a ; 'J'
000000000000a368         db  0x0b ; '.'
000000000000a369         db  0x41 ; 'A'
000000000000a36a         db  0x0a ; '.'
000000000000a36b         db  0x0e ; '.'
000000000000a36c         db  0x08 ; '.'
000000000000a36d         db  0x47 ; 'G'
000000000000a36e         db  0x0b ; '.'
000000000000a36f         db  0x00 ; '.'
000000000000a370         dd         0x0000001c                                  ; Length of the record
000000000000a374         dd         0x00000214                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a378         db         0x28, 0x8b, 2 dup (0xff)                    ; begin 0x2ea0
000000000000a37c         db         0xd6, 0x03, 2 dup (0x00)                    ; length 0x3d6 (end at 0x3276)
000000000000a380         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a381         db  0x44 ; 'D'
000000000000a382         db  0x0e ; '.'
000000000000a383         db  0x10 ; '.'
000000000000a384         db  0x8c ; '.'
000000000000a385         db  0x02 ; '.'
000000000000a386         db  0x41 ; 'A'
000000000000a387         db  0x0e ; '.'
000000000000a388         db  0x18 ; '.'
000000000000a389         db  0x86 ; '.'
000000000000a38a         db  0x03 ; '.'
000000000000a38b         db  0x41 ; 'A'
000000000000a38c         db  0x0e ; '.'
000000000000a38d         db  0x20 ; ' '
000000000000a38e         db  0x83 ; '.'
000000000000a38f         db  0x04 ; '.'
000000000000a390         dd         0x00000034                                  ; Length of the record
000000000000a394         dd         0x00000234                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a398         db         0x98, 0x72, 2 dup (0xff)                    ; begin 0x1630
000000000000a39c         db         0xba, 0x01, 2 dup (0x00)                    ; length 0x1ba (end at 0x17ea)
000000000000a3a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3a1         db  0x41 ; 'A'
000000000000a3a2         db  0x0e ; '.'
000000000000a3a3         db  0x10 ; '.'
000000000000a3a4         db  0x86 ; '.'
000000000000a3a5         db  0x02 ; '.'
000000000000a3a6         db  0x41 ; 'A'
000000000000a3a7         db  0x0e ; '.'
000000000000a3a8         db  0x18 ; '.'
000000000000a3a9         db  0x83 ; '.'
000000000000a3aa         db  0x03 ; '.'
000000000000a3ab         db  0x49 ; 'I'
000000000000a3ac         db  0x0e ; '.'
000000000000a3ad         db  0x20 ; ' '
000000000000a3ae         db  0x02 ; '.'
000000000000a3af         db  0xb7 ; '.'
000000000000a3b0         db  0x0a ; '.'
000000000000a3b1         db  0x0e ; '.'
000000000000a3b2         db  0x18 ; '.'
000000000000a3b3         db  0x43 ; 'C'
000000000000a3b4         db  0x0e ; '.'
000000000000a3b5         db  0x10 ; '.'
000000000000a3b6         db  0x41 ; 'A'
000000000000a3b7         db  0x0e ; '.'
000000000000a3b8         db  0x08 ; '.'
000000000000a3b9         db  0x41 ; 'A'
000000000000a3ba         db  0x0b ; '.'
000000000000a3bb         db  0x02 ; '.'
000000000000a3bc         db  0x62 ; 'b'
000000000000a3bd         db  0x0e ; '.'
000000000000a3be         db  0x28 ; '('
000000000000a3bf         db  0x50 ; 'P'
000000000000a3c0         db  0x0e ; '.'
000000000000a3c1         db  0x30 ; '0'
000000000000a3c2         db  0x64 ; 'd'
000000000000a3c3         db  0x0e ; '.'
000000000000a3c4         db  0x28 ; '('
000000000000a3c5         db  0x41 ; 'A'
000000000000a3c6         db  0x0e ; '.'
000000000000a3c7         db  0x20 ; ' '
000000000000a3c8         dd         0x00000010                                  ; Length of the record
000000000000a3cc         dd         0x0000026c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a3d0         db         0xb0, 0x8e, 2 dup (0xff)                    ; begin 0x3280
000000000000a3d4         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3288)
000000000000a3d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3d9         align      4
000000000000a3dc         dd         0x00000010                                  ; Length of the record
000000000000a3e0         dd         0x00000280                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a3e4         db         0xac, 0x8e, 2 dup (0xff)                    ; begin 0x3290
000000000000a3e8         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3298)
000000000000a3ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a3ed         align      16
000000000000a3f0         dd         0x0000002c                                  ; Length of the record
000000000000a3f4         dd         0x00000294                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a3f8         db         0xa8, 0x8e, 2 dup (0xff)                    ; begin 0x32a0
000000000000a3fc         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x3344)
000000000000a400         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a401         db  0x41 ; 'A'
000000000000a402         db  0x0e ; '.'
000000000000a403         db  0x10 ; '.'
000000000000a404         db  0x86 ; '.'
000000000000a405         db  0x02 ; '.'
000000000000a406         db  0x41 ; 'A'
000000000000a407         db  0x0e ; '.'
000000000000a408         db  0x18 ; '.'
000000000000a409         db  0x83 ; '.'
000000000000a40a         db  0x03 ; '.'
000000000000a40b         db  0x44 ; 'D'
000000000000a40c         db  0x0e ; '.'
000000000000a40d         db  0x20 ; ' '
000000000000a40e         db  0x7a ; 'z'
000000000000a40f         db  0x0a ; '.'
000000000000a410         db  0x0e ; '.'
000000000000a411         db  0x18 ; '.'
000000000000a412         db  0x41 ; 'A'
000000000000a413         db  0x0e ; '.'
000000000000a414         db  0x10 ; '.'
000000000000a415         db  0x41 ; 'A'
000000000000a416         db  0x0e ; '.'
000000000000a417         db  0x08 ; '.'
000000000000a418         db  0x41 ; 'A'
000000000000a419         db  0x0b ; '.'
000000000000a41a         db  0x00 ; '.'
000000000000a41b         db  0x00 ; '.'
000000000000a41c         db  0x00 ; '.'
000000000000a41d         db  0x00 ; '.'
000000000000a41e         db  0x00 ; '.'
000000000000a41f         db  0x00 ; '.'
000000000000a420         dd         0x00000014                                  ; Length of the record
000000000000a424         dd         0x000002c4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a428         db         0x28, 0x8f, 2 dup (0xff)                    ; begin 0x3350
000000000000a42c         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x3392)
000000000000a430         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a431         align      8
000000000000a438         dd         0x0000001c                                  ; Length of the record
000000000000a43c         dd         0x000002dc                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a440         db         0x60, 0x8f, 2 dup (0xff)                    ; begin 0x33a0
000000000000a444         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x343f)
000000000000a448         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a449         db  0x44 ; 'D'
000000000000a44a         db  0x0e ; '.'
000000000000a44b         db  0x10 ; '.'
000000000000a44c         db  0x83 ; '.'
000000000000a44d         db  0x02 ; '.'
000000000000a44e         db  0x02 ; '.'
000000000000a44f         db  0x78 ; 'x'
000000000000a450         db  0x0a ; '.'
000000000000a451         db  0x0e ; '.'
000000000000a452         db  0x08 ; '.'
000000000000a453         db  0x41 ; 'A'
000000000000a454         db  0x0b ; '.'
000000000000a455         db  0x00 ; '.'
000000000000a456         db  0x00 ; '.'
000000000000a457         db  0x00 ; '.'
000000000000a458         dd         0x00000040                                  ; Length of the record
000000000000a45c         dd         0x000002fc                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a460         db         0xe0, 0x8f, 2 dup (0xff)                    ; begin 0x3440
000000000000a464         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x3527)
000000000000a468         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a469         db  0x41 ; 'A'
000000000000a46a         db  0x0e ; '.'
000000000000a46b         db  0x10 ; '.'
000000000000a46c         db  0x86 ; '.'
000000000000a46d         db  0x02 ; '.'
000000000000a46e         db  0x41 ; 'A'
000000000000a46f         db  0x0e ; '.'
000000000000a470         db  0x18 ; '.'
000000000000a471         db  0x83 ; '.'
000000000000a472         db  0x03 ; '.'
000000000000a473         db  0x49 ; 'I'
000000000000a474         db  0x0e ; '.'
000000000000a475         db  0x20 ; ' '
000000000000a476         db  0x6e ; 'n'
000000000000a477         db  0x0a ; '.'
000000000000a478         db  0x0e ; '.'
000000000000a479         db  0x18 ; '.'
000000000000a47a         db  0x41 ; 'A'
000000000000a47b         db  0x0e ; '.'
000000000000a47c         db  0x10 ; '.'
000000000000a47d         db  0x41 ; 'A'
000000000000a47e         db  0x0e ; '.'
000000000000a47f         db  0x08 ; '.'
000000000000a480         db  0x45 ; 'E'
000000000000a481         db  0x0b ; '.'
000000000000a482         db  0x02 ; '.'
000000000000a483         db  0x4a ; 'J'
000000000000a484         db  0x0a ; '.'
000000000000a485         db  0x0e ; '.'
000000000000a486         db  0x18 ; '.'
000000000000a487         db  0x41 ; 'A'
000000000000a488         db  0x0e ; '.'
000000000000a489         db  0x10 ; '.'
000000000000a48a         db  0x41 ; 'A'
000000000000a48b         db  0x0e ; '.'
000000000000a48c         db  0x08 ; '.'
000000000000a48d         db  0x44 ; 'D'
000000000000a48e         db  0x0b ; '.'
000000000000a48f         db  0x02 ; '.'
000000000000a490         db  0x54 ; 'T'
000000000000a491         db  0x0e ; '.'
000000000000a492         db  0x18 ; '.'
000000000000a493         db  0x41 ; 'A'
000000000000a494         db  0x0e ; '.'
000000000000a495         db  0x10 ; '.'
000000000000a496         db  0x41 ; 'A'
000000000000a497         db  0x0e ; '.'
000000000000a498         db  0x08 ; '.'
000000000000a499         db  0x00 ; '.'
000000000000a49a         db  0x00 ; '.'
000000000000a49b         db  0x00 ; '.'
000000000000a49c         dd         0x00000074                                  ; Length of the record
000000000000a4a0         dd         0x00000340                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a4a4         db         0x8c, 0x90, 2 dup (0xff)                    ; begin 0x3530
000000000000a4a8         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x4764)
000000000000a4ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a4ad         db  0x42 ; 'B'
000000000000a4ae         db  0x0e ; '.'
000000000000a4af         db  0x10 ; '.'
000000000000a4b0         db  0x8f ; '.'
000000000000a4b1         db  0x02 ; '.'
000000000000a4b2         db  0x42 ; 'B'
000000000000a4b3         db  0x0e ; '.'
000000000000a4b4         db  0x18 ; '.'
000000000000a4b5         db  0x8e ; '.'
000000000000a4b6         db  0x03 ; '.'
000000000000a4b7         db  0x45 ; 'E'
000000000000a4b8         db  0x0e ; '.'
000000000000a4b9         db  0x20 ; ' '
000000000000a4ba         db  0x8d ; '.'
000000000000a4bb         db  0x04 ; '.'
000000000000a4bc         db  0x42 ; 'B'
000000000000a4bd         db  0x0e ; '.'
000000000000a4be         db  0x28 ; '('
000000000000a4bf         db  0x8c ; '.'
000000000000a4c0         db  0x05 ; '.'
000000000000a4c1         db  0x44 ; 'D'
000000000000a4c2         db  0x0e ; '.'
000000000000a4c3         db  0x30 ; '0'
000000000000a4c4         db  0x86 ; '.'
000000000000a4c5         db  0x06 ; '.'
000000000000a4c6         db  0x41 ; 'A'
000000000000a4c7         db  0x0e ; '.'
000000000000a4c8         db  0x38 ; '8'
000000000000a4c9         db  0x83 ; '.'
000000000000a4ca         db  0x07 ; '.'
000000000000a4cb         db  0x53 ; 'S'
000000000000a4cc         db  0x0e ; '.'
000000000000a4cd         db  0xf0 ; '.'
000000000000a4ce         db  0x01 ; '.'
000000000000a4cf         db  0x03 ; '.'
000000000000a4d0         db  0x81 ; '.'
000000000000a4d1         db  0x0b ; '.'
000000000000a4d2         db  0x0e ; '.'
000000000000a4d3         db  0xf8 ; '.'
000000000000a4d4         db  0x01 ; '.'
000000000000a4d5         db  0x4a ; 'J'
000000000000a4d6         db  0x0e ; '.'
000000000000a4d7         db  0x80 ; '.'
000000000000a4d8         db  0x02 ; '.'
000000000000a4d9         db  0x44 ; 'D'
000000000000a4da         db  0x0e ; '.'
000000000000a4db         db  0x88 ; '.'
000000000000a4dc         db  0x02 ; '.'
000000000000a4dd         db  0x45 ; 'E'
000000000000a4de         db  0x0e ; '.'
000000000000a4df         db  0x90 ; '.'
000000000000a4e0         db  0x02 ; '.'
000000000000a4e1         db  0x5f ; '_'
000000000000a4e2         db  0x0e ; '.'
000000000000a4e3         db  0xf0 ; '.'
000000000000a4e4         db  0x01 ; '.'
000000000000a4e5         db  0x64 ; 'd'
000000000000a4e6         db  0x0a ; '.'
000000000000a4e7         db  0x0e ; '.'
000000000000a4e8         db  0x38 ; '8'
000000000000a4e9         db  0x41 ; 'A'
000000000000a4ea         db  0x0e ; '.'
000000000000a4eb         db  0x30 ; '0'
000000000000a4ec         db  0x41 ; 'A'
000000000000a4ed         db  0x0e ; '.'
000000000000a4ee         db  0x28 ; '('
000000000000a4ef         db  0x42 ; 'B'
000000000000a4f0         db  0x0e ; '.'
000000000000a4f1         db  0x20 ; ' '
000000000000a4f2         db  0x42 ; 'B'
000000000000a4f3         db  0x0e ; '.'
000000000000a4f4         db  0x18 ; '.'
000000000000a4f5         db  0x42 ; 'B'
000000000000a4f6         db  0x0e ; '.'
000000000000a4f7         db  0x10 ; '.'
000000000000a4f8         db  0x42 ; 'B'
000000000000a4f9         db  0x0e ; '.'
000000000000a4fa         db  0x08 ; '.'
000000000000a4fb         db  0x44 ; 'D'
000000000000a4fc         db  0x0b ; '.'
000000000000a4fd         db  0x03 ; '.'
000000000000a4fe         db  0x99 ; '.'
000000000000a4ff         db  0x05 ; '.'
000000000000a500         db  0x0e ; '.'
000000000000a501         db  0xf8 ; '.'
000000000000a502         db  0x01 ; '.'
000000000000a503         db  0x4d ; 'M'
000000000000a504         db  0x0e ; '.'
000000000000a505         db  0x80 ; '.'
000000000000a506         db  0x02 ; '.'
000000000000a507         db  0x44 ; 'D'
000000000000a508         db  0x0e ; '.'
000000000000a509         db  0x88 ; '.'
000000000000a50a         db  0x02 ; '.'
000000000000a50b         db  0x47 ; 'G'
000000000000a50c         db  0x0e ; '.'
000000000000a50d         db  0x90 ; '.'
000000000000a50e         db  0x02 ; '.'
000000000000a50f         db  0x5b ; '['
000000000000a510         db  0x0e ; '.'
000000000000a511         db  0xf0 ; '.'
000000000000a512         db  0x01 ; '.'
000000000000a513         db  0x00 ; '.'
000000000000a514         dd         0x00000068                                  ; Length of the record
000000000000a518         dd         0x000003b8                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a51c         db         0x54, 0xa2, 2 dup (0xff)                    ; begin 0x4770
000000000000a520         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x491b)
000000000000a524         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a525         db  0x42 ; 'B'
000000000000a526         db  0x0e ; '.'
000000000000a527         db  0x10 ; '.'
000000000000a528         db  0x8f ; '.'
000000000000a529         db  0x02 ; '.'
000000000000a52a         db  0x42 ; 'B'
000000000000a52b         db  0x0e ; '.'
000000000000a52c         db  0x18 ; '.'
000000000000a52d         db  0x8e ; '.'
000000000000a52e         db  0x03 ; '.'
000000000000a52f         db  0x45 ; 'E'
000000000000a530         db  0x0e ; '.'
000000000000a531         db  0x20 ; ' '
000000000000a532         db  0x8d ; '.'
000000000000a533         db  0x04 ; '.'
000000000000a534         db  0x42 ; 'B'
000000000000a535         db  0x0e ; '.'
000000000000a536         db  0x28 ; '('
000000000000a537         db  0x8c ; '.'
000000000000a538         db  0x05 ; '.'
000000000000a539         db  0x44 ; 'D'
000000000000a53a         db  0x0e ; '.'
000000000000a53b         db  0x30 ; '0'
000000000000a53c         db  0x86 ; '.'
000000000000a53d         db  0x06 ; '.'
000000000000a53e         db  0x41 ; 'A'
000000000000a53f         db  0x0e ; '.'
000000000000a540         db  0x38 ; '8'
000000000000a541         db  0x83 ; '.'
000000000000a542         db  0x07 ; '.'
000000000000a543         db  0x47 ; 'G'
000000000000a544         db  0x0e ; '.'
000000000000a545         db  0x60 ; '`'
000000000000a546         db  0x02 ; '.'
000000000000a547         db  0x99 ; '.'
000000000000a548         db  0x0e ; '.'
000000000000a549         db  0x68 ; 'h'
000000000000a54a         db  0x5f ; '_'
000000000000a54b         db  0x0e ; '.'
000000000000a54c         db  0x70 ; 'p'
000000000000a54d         db  0x46 ; 'F'
000000000000a54e         db  0x0e ; '.'
000000000000a54f         db  0x78 ; 'x'
000000000000a550         db  0x42 ; 'B'
000000000000a551         db  0x0e ; '.'
000000000000a552         db  0x80 ; '.'
000000000000a553         db  0x01 ; '.'
000000000000a554         db  0x59 ; 'Y'
000000000000a555         db  0x0e ; '.'
000000000000a556         db  0x60 ; '`'
000000000000a557         db  0x02 ; '.'
000000000000a558         db  0x40 ; '@'
000000000000a559         db  0x0e ; '.'
000000000000a55a         db  0x68 ; 'h'
000000000000a55b         db  0x4b ; 'K'
000000000000a55c         db  0x0e ; '.'
000000000000a55d         db  0x70 ; 'p'
000000000000a55e         db  0x43 ; 'C'
000000000000a55f         db  0x0e ; '.'
000000000000a560         db  0x78 ; 'x'
000000000000a561         db  0x45 ; 'E'
000000000000a562         db  0x0e ; '.'
000000000000a563         db  0x80 ; '.'
000000000000a564         db  0x01 ; '.'
000000000000a565         db  0x5e ; '^'
000000000000a566         db  0x0e ; '.'
000000000000a567         db  0x60 ; '`'
000000000000a568         db  0x4c ; 'L'
000000000000a569         db  0x0a ; '.'
000000000000a56a         db  0x0e ; '.'
000000000000a56b         db  0x38 ; '8'
000000000000a56c         db  0x44 ; 'D'
000000000000a56d         db  0x0e ; '.'
000000000000a56e         db  0x30 ; '0'
000000000000a56f         db  0x41 ; 'A'
000000000000a570         db  0x0e ; '.'
000000000000a571         db  0x28 ; '('
000000000000a572         db  0x42 ; 'B'
000000000000a573         db  0x0e ; '.'
000000000000a574         db  0x20 ; ' '
000000000000a575         db  0x42 ; 'B'
000000000000a576         db  0x0e ; '.'
000000000000a577         db  0x18 ; '.'
000000000000a578         db  0x42 ; 'B'
000000000000a579         db  0x0e ; '.'
000000000000a57a         db  0x10 ; '.'
000000000000a57b         db  0x42 ; 'B'
000000000000a57c         db  0x0e ; '.'
000000000000a57d         db  0x08 ; '.'
000000000000a57e         db  0x46 ; 'F'
000000000000a57f         db  0x0b ; '.'
000000000000a580         dd         0x00000028                                  ; Length of the record
000000000000a584         dd         0x00000424                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a588         db         0x98, 0xa3, 2 dup (0xff)                    ; begin 0x4920
000000000000a58c         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x4956)
000000000000a590         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a591         db  0x42 ; 'B'
000000000000a592         db  0x0e ; '.'
000000000000a593         db  0x10 ; '.'
000000000000a594         db  0x8c ; '.'
000000000000a595         db  0x02 ; '.'
000000000000a596         db  0x41 ; 'A'
000000000000a597         db  0x0e ; '.'
000000000000a598         db  0x18 ; '.'
000000000000a599         db  0x86 ; '.'
000000000000a59a         db  0x03 ; '.'
000000000000a59b         db  0x41 ; 'A'
000000000000a59c         db  0x0e ; '.'
000000000000a59d         db  0x20 ; ' '
000000000000a59e         db  0x83 ; '.'
000000000000a59f         db  0x04 ; '.'
000000000000a5a0         db  0x6e ; 'n'
000000000000a5a1         db  0x0e ; '.'
000000000000a5a2         db  0x18 ; '.'
000000000000a5a3         db  0x41 ; 'A'
000000000000a5a4         db  0x0e ; '.'
000000000000a5a5         db  0x10 ; '.'
000000000000a5a6         db  0x42 ; 'B'
000000000000a5a7         db  0x0e ; '.'
000000000000a5a8         db  0x08 ; '.'
000000000000a5a9         db  0x00 ; '.'
000000000000a5aa         db  0x00 ; '.'
000000000000a5ab         db  0x00 ; '.'
000000000000a5ac         dd         0x00000010                                  ; Length of the record
000000000000a5b0         dd         0x00000450                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a5b4         db         0xac, 0xa3, 2 dup (0xff)                    ; begin 0x4960
000000000000a5b8         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4971)
000000000000a5bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a5bd         align      64
000000000000a5c0         dd         0x00000010                                  ; Length of the record
000000000000a5c4         dd         0x00000464                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a5c8         db         0xb8, 0xa3, 2 dup (0xff)                    ; begin 0x4980
000000000000a5cc         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4991)
000000000000a5d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a5d1         align      4
000000000000a5d4         dd         0x00000010                                  ; Length of the record
000000000000a5d8         dd         0x00000478                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a5dc         db         0xc4, 0xa3, 2 dup (0xff)                    ; begin 0x49a0
000000000000a5e0         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x49d5)
000000000000a5e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a5e5         align      8
000000000000a5e8         dd         0x00000010                                  ; Length of the record
000000000000a5ec         dd         0x0000048c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a5f0         db         0xf0, 0xa3, 2 dup (0xff)                    ; begin 0x49e0
000000000000a5f4         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x49f5)
000000000000a5f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a5f9         align      4
000000000000a5fc         dd         0x00000010                                  ; Length of the record
000000000000a600         dd         0x000004a0                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a604         db         0xfc, 0xa3, 2 dup (0xff)                    ; begin 0x4a00
000000000000a608         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x4a30)
000000000000a60c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a60d         db  0x6b ; 'k'
000000000000a60e         db  0x0e ; '.'
000000000000a60f         db  0x10 ; '.'
000000000000a610         dd         0x00000050                                  ; Length of the record
000000000000a614         dd         0x000004b4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a618         db         0x18, 0xa4, 2 dup (0xff)                    ; begin 0x4a30
000000000000a61c         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x4aa4)
000000000000a620         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a621         db  0x42 ; 'B'
000000000000a622         db  0x0e ; '.'
000000000000a623         db  0x10 ; '.'
000000000000a624         db  0x8f ; '.'
000000000000a625         db  0x02 ; '.'
000000000000a626         db  0x42 ; 'B'
000000000000a627         db  0x0e ; '.'
000000000000a628         db  0x18 ; '.'
000000000000a629         db  0x8e ; '.'
000000000000a62a         db  0x03 ; '.'
000000000000a62b         db  0x49 ; 'I'
000000000000a62c         db  0x0e ; '.'
000000000000a62d         db  0x20 ; ' '
000000000000a62e         db  0x8d ; '.'
000000000000a62f         db  0x04 ; '.'
000000000000a630         db  0x42 ; 'B'
000000000000a631         db  0x0e ; '.'
000000000000a632         db  0x28 ; '('
000000000000a633         db  0x8c ; '.'
000000000000a634         db  0x05 ; '.'
000000000000a635         db  0x44 ; 'D'
000000000000a636         db  0x0e ; '.'
000000000000a637         db  0x30 ; '0'
000000000000a638         db  0x86 ; '.'
000000000000a639         db  0x06 ; '.'
000000000000a63a         db  0x41 ; 'A'
000000000000a63b         db  0x0e ; '.'
000000000000a63c         db  0x38 ; '8'
000000000000a63d         db  0x83 ; '.'
000000000000a63e         db  0x07 ; '.'
000000000000a63f         db  0x4d ; 'M'
000000000000a640         db  0x0e ; '.'
000000000000a641         db  0x50 ; 'P'
000000000000a642         db  0x5f ; '_'
000000000000a643         db  0x0e ; '.'
000000000000a644         db  0x58 ; 'X'
000000000000a645         db  0x47 ; 'G'
000000000000a646         db  0x0e ; '.'
000000000000a647         db  0x60 ; '`'
000000000000a648         db  0x46 ; 'F'
000000000000a649         db  0x0e ; '.'
000000000000a64a         db  0x68 ; 'h'
000000000000a64b         db  0x44 ; 'D'
000000000000a64c         db  0x0e ; '.'
000000000000a64d         db  0x70 ; 'p'
000000000000a64e         db  0x58 ; 'X'
000000000000a64f         db  0x0e ; '.'
000000000000a650         db  0x38 ; '8'
000000000000a651         db  0x41 ; 'A'
000000000000a652         db  0x0e ; '.'
000000000000a653         db  0x30 ; '0'
000000000000a654         db  0x41 ; 'A'
000000000000a655         db  0x0e ; '.'
000000000000a656         db  0x28 ; '('
000000000000a657         db  0x42 ; 'B'
000000000000a658         db  0x0e ; '.'
000000000000a659         db  0x20 ; ' '
000000000000a65a         db  0x42 ; 'B'
000000000000a65b         db  0x0e ; '.'
000000000000a65c         db  0x18 ; '.'
000000000000a65d         db  0x42 ; 'B'
000000000000a65e         db  0x0e ; '.'
000000000000a65f         db  0x10 ; '.'
000000000000a660         db  0x42 ; 'B'
000000000000a661         db  0x0e ; '.'
000000000000a662         db  0x08 ; '.'
000000000000a663         db  0x00 ; '.'
000000000000a664         dd         0x00000068                                  ; Length of the record
000000000000a668         dd         0x00000508                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a66c         db         0x44, 0xa4, 2 dup (0xff)                    ; begin 0x4ab0
000000000000a670         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x4b93)
000000000000a674         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a675         db  0x42 ; 'B'
000000000000a676         db  0x0e ; '.'
000000000000a677         db  0x10 ; '.'
000000000000a678         db  0x8f ; '.'
000000000000a679         db  0x02 ; '.'
000000000000a67a         db  0x42 ; 'B'
000000000000a67b         db  0x0e ; '.'
000000000000a67c         db  0x18 ; '.'
000000000000a67d         db  0x8e ; '.'
000000000000a67e         db  0x03 ; '.'
000000000000a67f         db  0x49 ; 'I'
000000000000a680         db  0x0e ; '.'
000000000000a681         db  0x20 ; ' '
000000000000a682         db  0x8d ; '.'
000000000000a683         db  0x04 ; '.'
000000000000a684         db  0x42 ; 'B'
000000000000a685         db  0x0e ; '.'
000000000000a686         db  0x28 ; '('
000000000000a687         db  0x8c ; '.'
000000000000a688         db  0x05 ; '.'
000000000000a689         db  0x44 ; 'D'
000000000000a68a         db  0x0e ; '.'
000000000000a68b         db  0x30 ; '0'
000000000000a68c         db  0x86 ; '.'
000000000000a68d         db  0x06 ; '.'
000000000000a68e         db  0x41 ; 'A'
000000000000a68f         db  0x0e ; '.'
000000000000a690         db  0x38 ; '8'
000000000000a691         db  0x83 ; '.'
000000000000a692         db  0x07 ; '.'
000000000000a693         db  0x4d ; 'M'
000000000000a694         db  0x0e ; '.'
000000000000a695         db  0x70 ; 'p'
000000000000a696         db  0x65 ; 'e'
000000000000a697         db  0x0e ; '.'
000000000000a698         db  0x78 ; 'x'
000000000000a699         db  0x4d ; 'M'
000000000000a69a         db  0x0e ; '.'
000000000000a69b         db  0x80 ; '.'
000000000000a69c         db  0x01 ; '.'
000000000000a69d         db  0x46 ; 'F'
000000000000a69e         db  0x0e ; '.'
000000000000a69f         db  0x88 ; '.'
000000000000a6a0         db  0x01 ; '.'
000000000000a6a1         db  0x42 ; 'B'
000000000000a6a2         db  0x0e ; '.'
000000000000a6a3         db  0x90 ; '.'
000000000000a6a4         db  0x01 ; '.'
000000000000a6a5         db  0x5e ; '^'
000000000000a6a6         db  0x0e ; '.'
000000000000a6a7         db  0x70 ; 'p'
000000000000a6a8         db  0x56 ; 'V'
000000000000a6a9         db  0x0e ; '.'
000000000000a6aa         db  0x78 ; 'x'
000000000000a6ab         db  0x43 ; 'C'
000000000000a6ac         db  0x0e ; '.'
000000000000a6ad         db  0x80 ; '.'
000000000000a6ae         db  0x01 ; '.'
000000000000a6af         db  0x43 ; 'C'
000000000000a6b0         db  0x0e ; '.'
000000000000a6b1         db  0x88 ; '.'
000000000000a6b2         db  0x01 ; '.'
000000000000a6b3         db  0x56 ; 'V'
000000000000a6b4         db  0x0e ; '.'
000000000000a6b5         db  0x90 ; '.'
000000000000a6b6         db  0x01 ; '.'
000000000000a6b7         db  0x52 ; 'R'
000000000000a6b8         db  0x0e ; '.'
000000000000a6b9         db  0x70 ; 'p'
000000000000a6ba         db  0x5b ; '['
000000000000a6bb         db  0x0e ; '.'
000000000000a6bc         db  0x38 ; '8'
000000000000a6bd         db  0x41 ; 'A'
000000000000a6be         db  0x0e ; '.'
000000000000a6bf         db  0x30 ; '0'
000000000000a6c0         db  0x41 ; 'A'
000000000000a6c1         db  0x0e ; '.'
000000000000a6c2         db  0x28 ; '('
000000000000a6c3         db  0x42 ; 'B'
000000000000a6c4         db  0x0e ; '.'
000000000000a6c5         db  0x20 ; ' '
000000000000a6c6         db  0x42 ; 'B'
000000000000a6c7         db  0x0e ; '.'
000000000000a6c8         db  0x18 ; '.'
000000000000a6c9         db  0x42 ; 'B'
000000000000a6ca         db  0x0e ; '.'
000000000000a6cb         db  0x10 ; '.'
000000000000a6cc         db  0x42 ; 'B'
000000000000a6cd         db  0x0e ; '.'
000000000000a6ce         db  0x08 ; '.'
000000000000a6cf         db  0x00 ; '.'
000000000000a6d0         dd         0x00000010                                  ; Length of the record
000000000000a6d4         dd         0x00000574                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a6d8         db         0xc8, 0xa4, 2 dup (0xff)                    ; begin 0x4ba0
000000000000a6dc         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4baa)
000000000000a6e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a6e1         align      4
000000000000a6e4         dd         0x00000028                                  ; Length of the record
000000000000a6e8         dd         0x00000588                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a6ec         db         0xc4, 0xa4, 2 dup (0xff)                    ; begin 0x4bb0
000000000000a6f0         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x4c43)
000000000000a6f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a6f5         db  0x48 ; 'H'
000000000000a6f6         db  0x0e ; '.'
000000000000a6f7         db  0x10 ; '.'
000000000000a6f8         db  0x8c ; '.'
000000000000a6f9         db  0x02 ; '.'
000000000000a6fa         db  0x48 ; 'H'
000000000000a6fb         db  0x0e ; '.'
000000000000a6fc         db  0x18 ; '.'
000000000000a6fd         db  0x86 ; '.'
000000000000a6fe         db  0x03 ; '.'
000000000000a6ff         db  0x41 ; 'A'
000000000000a700         db  0x0e ; '.'
000000000000a701         db  0x20 ; ' '
000000000000a702         db  0x83 ; '.'
000000000000a703         db  0x04 ; '.'
000000000000a704         db  0x02 ; '.'
000000000000a705         db  0x74 ; 't'
000000000000a706         db  0x0e ; '.'
000000000000a707         db  0x18 ; '.'
000000000000a708         db  0x4b ; 'K'
000000000000a709         db  0x0e ; '.'
000000000000a70a         db  0x10 ; '.'
000000000000a70b         db  0x42 ; 'B'
000000000000a70c         db  0x0e ; '.'
000000000000a70d         db  0x08 ; '.'
000000000000a70e         db  0x00 ; '.'
000000000000a70f         db  0x00 ; '.'
000000000000a710         dd         0x00000010                                  ; Length of the record
000000000000a714         dd         0x000005b4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a718         db         0x38, 0xa5, 2 dup (0xff)                    ; begin 0x4c50
000000000000a71c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x4c63)
000000000000a720         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a721         align      4
000000000000a724         dd         0x00000010                                  ; Length of the record
000000000000a728         dd         0x000005c8                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a72c         db         0x44, 0xa5, 2 dup (0xff)                    ; begin 0x4c70
000000000000a730         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4c7c)
000000000000a734         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a735         align      8
000000000000a738         dd         0x00000010                                  ; Length of the record
000000000000a73c         dd         0x000005dc                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a740         db         0x40, 0xa5, 2 dup (0xff)                    ; begin 0x4c80
000000000000a744         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4c98)
000000000000a748         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a749         align      4
000000000000a74c         dd         0x00000010                                  ; Length of the record
000000000000a750         dd         0x000005f0                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a754         db         0x4c, 0xa5, 2 dup (0xff)                    ; begin 0x4ca0
000000000000a758         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x4cb4)
000000000000a75c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a75d         align      32
000000000000a760         dd         0x00000018                                  ; Length of the record
000000000000a764         dd         0x00000604                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a768         db         0x58, 0xa5, 2 dup (0xff)                    ; begin 0x4cc0
000000000000a76c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4d4e)
000000000000a770         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a771         db  0x44 ; 'D'
000000000000a772         db  0x0e ; '.'
000000000000a773         db  0x50 ; 'P'
000000000000a774         db  0x02 ; '.'
000000000000a775         db  0x7f ; '.'
000000000000a776         db  0x0a ; '.'
000000000000a777         db  0x0e ; '.'
000000000000a778         db  0x08 ; '.'
000000000000a779         db  0x41 ; 'A'
000000000000a77a         db  0x0b ; '.'
000000000000a77b         db  0x00 ; '.'
000000000000a77c         dd         0x00000018                                  ; Length of the record
000000000000a780         dd         0x00000620                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a784         db         0xcc, 0xa5, 2 dup (0xff)                    ; begin 0x4d50
000000000000a788         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x4dda)
000000000000a78c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a78d         db  0x44 ; 'D'
000000000000a78e         db  0x0e ; '.'
000000000000a78f         db  0x50 ; 'P'
000000000000a790         db  0x02 ; '.'
000000000000a791         db  0x7b ; '{'
000000000000a792         db  0x0a ; '.'
000000000000a793         db  0x0e ; '.'
000000000000a794         db  0x08 ; '.'
000000000000a795         db  0x41 ; 'A'
000000000000a796         db  0x0b ; '.'
000000000000a797         db  0x00 ; '.'
000000000000a798         dd         0x00000010                                  ; Length of the record
000000000000a79c         dd         0x0000063c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a7a0         db         0x40, 0xa6, 2 dup (0xff)                    ; begin 0x4de0
000000000000a7a4         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x4dec)
000000000000a7a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7a9         align      4
000000000000a7ac         dd         0x00000010                                  ; Length of the record
000000000000a7b0         dd         0x00000650                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a7b4         db         0x3c, 0xa6, 2 dup (0xff)                    ; begin 0x4df0
000000000000a7b8         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x4dff)
000000000000a7bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7bd         align      64
000000000000a7c0         dd         0x00000018                                  ; Length of the record
000000000000a7c4         dd         0x00000664                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a7c8         db         0x38, 0xa6, 2 dup (0xff)                    ; begin 0x4e00
000000000000a7cc         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x4e98)
000000000000a7d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7d1         db  0x44 ; 'D'
000000000000a7d2         db  0x0e ; '.'
000000000000a7d3         db  0x50 ; 'P'
000000000000a7d4         db  0x02 ; '.'
000000000000a7d5         db  0x8e ; '.'
000000000000a7d6         db  0x0a ; '.'
000000000000a7d7         db  0x0e ; '.'
000000000000a7d8         db  0x08 ; '.'
000000000000a7d9         db  0x41 ; 'A'
000000000000a7da         db  0x0b ; '.'
000000000000a7db         db  0x00 ; '.'
000000000000a7dc         dd         0x00000010                                  ; Length of the record
000000000000a7e0         dd         0x00000680                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a7e4         db         0xbc, 0xa6, 2 dup (0xff)                    ; begin 0x4ea0
000000000000a7e8         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x4eb0)
000000000000a7ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a7ed         align      16
000000000000a7f0         dd         0x00000010                                  ; Length of the record
000000000000a7f4         dd         0x00000694                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a7f8         db         0xb8, 0xa6, 2 dup (0xff)                    ; begin 0x4eb0
000000000000a7fc         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x4ec1)
000000000000a800         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a801         align      4
000000000000a804         dd         0x00000010                                  ; Length of the record
000000000000a808         dd         0x000006a8                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a80c         db         0xc4, 0xa6, 2 dup (0xff)                    ; begin 0x4ed0
000000000000a810         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x4eda)
000000000000a814         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a815         align      8
000000000000a818         dd         0x00000018                                  ; Length of the record
000000000000a81c         dd         0x000006bc                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a820         db         0xc0, 0xa6, 2 dup (0xff)                    ; begin 0x4ee0
000000000000a824         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x4f6e)
000000000000a828         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a829         db  0x44 ; 'D'
000000000000a82a         db  0x0e ; '.'
000000000000a82b         db  0x50 ; 'P'
000000000000a82c         db  0x02 ; '.'
000000000000a82d         db  0x7f ; '.'
000000000000a82e         db  0x0a ; '.'
000000000000a82f         db  0x0e ; '.'
000000000000a830         db  0x08 ; '.'
000000000000a831         db  0x41 ; 'A'
000000000000a832         db  0x0b ; '.'
000000000000a833         db  0x00 ; '.'
000000000000a834         dd         0x00000018                                  ; Length of the record
000000000000a838         dd         0x000006d8                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a83c         db         0x34, 0xa7, 2 dup (0xff)                    ; begin 0x4f70
000000000000a840         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x5001)
000000000000a844         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a845         db  0x44 ; 'D'
000000000000a846         db  0x0e ; '.'
000000000000a847         db  0x50 ; 'P'
000000000000a848         db  0x02 ; '.'
000000000000a849         db  0x82 ; '.'
000000000000a84a         db  0x0a ; '.'
000000000000a84b         db  0x0e ; '.'
000000000000a84c         db  0x08 ; '.'
000000000000a84d         db  0x41 ; 'A'
000000000000a84e         db  0x0b ; '.'
000000000000a84f         db  0x00 ; '.'
000000000000a850         dd         0x00000010                                  ; Length of the record
000000000000a854         dd         0x000006f4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a858         db         0xb8, 0xa7, 2 dup (0xff)                    ; begin 0x5010
000000000000a85c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x501c)
000000000000a860         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a861         align      4
000000000000a864         dd         0x00000010                                  ; Length of the record
000000000000a868         dd         0x00000708                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a86c         db         0xb4, 0xa7, 2 dup (0xff)                    ; begin 0x5020
000000000000a870         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5037)
000000000000a874         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a875         align      8
000000000000a878         dd         0x00000010                                  ; Length of the record
000000000000a87c         dd         0x0000071c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a880         db         0xc0, 0xa7, 2 dup (0xff)                    ; begin 0x5040
000000000000a884         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5053)
000000000000a888         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a889         align      4
000000000000a88c         dd         0x00000010                                  ; Length of the record
000000000000a890         dd         0x00000730                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a894         db         0xcc, 0xa7, 2 dup (0xff)                    ; begin 0x5060
000000000000a898         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x506c)
000000000000a89c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a89d         align      32
000000000000a8a0         dd         0x00000010                                  ; Length of the record
000000000000a8a4         dd         0x00000744                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a8a8         db         0xc8, 0xa7, 2 dup (0xff)                    ; begin 0x5070
000000000000a8ac         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x5084)
000000000000a8b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8b1         align      4
000000000000a8b4         dd         0x00000010                                  ; Length of the record
000000000000a8b8         dd         0x00000758                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a8bc         db         0xd4, 0xa7, 2 dup (0xff)                    ; begin 0x5090
000000000000a8c0         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x50a3)
000000000000a8c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8c5         align      8
000000000000a8c8         dd         0x00000014                                  ; Length of the record
000000000000a8cc         dd         0x0000076c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a8d0         db         0xe0, 0xa7, 2 dup (0xff)                    ; begin 0x50b0
000000000000a8d4         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x50c8)
000000000000a8d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8d9         align      32
000000000000a8e0         dd         0x00000014                                  ; Length of the record
000000000000a8e4         dd         0x00000784                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a8e8         db         0xe8, 0xa7, 2 dup (0xff)                    ; begin 0x50d0
000000000000a8ec         db         0xa4, 0x02, 2 dup (0x00)                    ; length 0x2a4 (end at 0x5374)
000000000000a8f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a8f1         align      8
000000000000a8f8         dd         0x0000004c                                  ; Length of the record
000000000000a8fc         dd         0x0000079c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a900         db         0x80, 0xaa, 2 dup (0xff)                    ; begin 0x5380
000000000000a904         db         0xb5, 3 dup (0x00)                          ; length 0xb5 (end at 0x5435)
000000000000a908         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a909         db  0x42 ; 'B'
000000000000a90a         db  0x0e ; '.'
000000000000a90b         db  0x10 ; '.'
000000000000a90c         db  0x8e ; '.'
000000000000a90d         db  0x02 ; '.'
000000000000a90e         db  0x42 ; 'B'
000000000000a90f         db  0x0e ; '.'
000000000000a910         db  0x18 ; '.'
000000000000a911         db  0x8d ; '.'
000000000000a912         db  0x03 ; '.'
000000000000a913         db  0x45 ; 'E'
000000000000a914         db  0x0e ; '.'
000000000000a915         db  0x20 ; ' '
000000000000a916         db  0x8c ; '.'
000000000000a917         db  0x04 ; '.'
000000000000a918         db  0x41 ; 'A'
000000000000a919         db  0x0e ; '.'
000000000000a91a         db  0x28 ; '('
000000000000a91b         db  0x86 ; '.'
000000000000a91c         db  0x05 ; '.'
000000000000a91d         db  0x44 ; 'D'
000000000000a91e         db  0x0e ; '.'
000000000000a91f         db  0x30 ; '0'
000000000000a920         db  0x83 ; '.'
000000000000a921         db  0x06 ; '.'
000000000000a922         db  0x7f ; '.'
000000000000a923         db  0x0a ; '.'
000000000000a924         db  0x0e ; '.'
000000000000a925         db  0x28 ; '('
000000000000a926         db  0x41 ; 'A'
000000000000a927         db  0x0e ; '.'
000000000000a928         db  0x20 ; ' '
000000000000a929         db  0x42 ; 'B'
000000000000a92a         db  0x0e ; '.'
000000000000a92b         db  0x18 ; '.'
000000000000a92c         db  0x42 ; 'B'
000000000000a92d         db  0x0e ; '.'
000000000000a92e         db  0x10 ; '.'
000000000000a92f         db  0x42 ; 'B'
000000000000a930         db  0x0e ; '.'
000000000000a931         db  0x08 ; '.'
000000000000a932         db  0x4c ; 'L'
000000000000a933         db  0x0b ; '.'
000000000000a934         db  0x5b ; '['
000000000000a935         db  0x0a ; '.'
000000000000a936         db  0x0e ; '.'
000000000000a937         db  0x28 ; '('
000000000000a938         db  0x41 ; 'A'
000000000000a939         db  0x0e ; '.'
000000000000a93a         db  0x20 ; ' '
000000000000a93b         db  0x42 ; 'B'
000000000000a93c         db  0x0e ; '.'
000000000000a93d         db  0x18 ; '.'
000000000000a93e         db  0x42 ; 'B'
000000000000a93f         db  0x0e ; '.'
000000000000a940         db  0x10 ; '.'
000000000000a941         db  0x42 ; 'B'
000000000000a942         db  0x0e ; '.'
000000000000a943         db  0x08 ; '.'
000000000000a944         db  0x45 ; 'E'
000000000000a945         db  0x0b ; '.'
000000000000a946         db  0x00 ; '.'
000000000000a947         db  0x00 ; '.'
000000000000a948         dd         0x00000014                                  ; Length of the record
000000000000a94c         dd         0x000007ec                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a950         db         0xf0, 0xaa, 2 dup (0xff)                    ; begin 0x5440
000000000000a954         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x544f)
000000000000a958         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a959         align      32
000000000000a960         dd         0x00000110                                  ; Length of the record
000000000000a964         dd         0x00000804                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000a968         db         0xe8, 0xaa, 2 dup (0xff)                    ; begin 0x5450
000000000000a96c         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x5867)
000000000000a970         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000a971         db  0x42 ; 'B'
000000000000a972         db  0x0e ; '.'
000000000000a973         db  0x10 ; '.'
000000000000a974         db  0x8f ; '.'
000000000000a975         db  0x02 ; '.'
000000000000a976         db  0x42 ; 'B'
000000000000a977         db  0x0e ; '.'
000000000000a978         db  0x18 ; '.'
000000000000a979         db  0x8e ; '.'
000000000000a97a         db  0x03 ; '.'
000000000000a97b         db  0x42 ; 'B'
000000000000a97c         db  0x0e ; '.'
000000000000a97d         db  0x20 ; ' '
000000000000a97e         db  0x8d ; '.'
000000000000a97f         db  0x04 ; '.'
000000000000a980         db  0x42 ; 'B'
000000000000a981         db  0x0e ; '.'
000000000000a982         db  0x28 ; '('
000000000000a983         db  0x8c ; '.'
000000000000a984         db  0x05 ; '.'
000000000000a985         db  0x44 ; 'D'
000000000000a986         db  0x0e ; '.'
000000000000a987         db  0x30 ; '0'
000000000000a988         db  0x86 ; '.'
000000000000a989         db  0x06 ; '.'
000000000000a98a         db  0x41 ; 'A'
000000000000a98b         db  0x0e ; '.'
000000000000a98c         db  0x38 ; '8'
000000000000a98d         db  0x83 ; '.'
000000000000a98e         db  0x07 ; '.'
000000000000a98f         db  0x4a ; 'J'
000000000000a990         db  0x0e ; '.'
000000000000a991         db  0x60 ; '`'
000000000000a992         db  0x02 ; '.'
000000000000a993         db  0xdd ; '.'
000000000000a994         db  0x0e ; '.'
000000000000a995         db  0x68 ; 'h'
000000000000a996         db  0x57 ; 'W'
000000000000a997         db  0x0e ; '.'
000000000000a998         db  0x70 ; 'p'
000000000000a999         db  0x42 ; 'B'
000000000000a99a         db  0x0e ; '.'
000000000000a99b         db  0x78 ; 'x'
000000000000a99c         db  0x42 ; 'B'
000000000000a99d         db  0x0e ; '.'
000000000000a99e         db  0x80 ; '.'
000000000000a99f         db  0x01 ; '.'
000000000000a9a0         db  0x42 ; 'B'
000000000000a9a1         db  0x0e ; '.'
000000000000a9a2         db  0x88 ; '.'
000000000000a9a3         db  0x01 ; '.'
000000000000a9a4         db  0x42 ; 'B'
000000000000a9a5         db  0x0e ; '.'
000000000000a9a6         db  0x90 ; '.'
000000000000a9a7         db  0x01 ; '.'
000000000000a9a8         db  0x53 ; 'S'
000000000000a9a9         db  0x0e ; '.'
000000000000a9aa         db  0x60 ; '`'
000000000000a9ab         db  0x44 ; 'D'
000000000000a9ac         db  0x0a ; '.'
000000000000a9ad         db  0x0e ; '.'
000000000000a9ae         db  0x38 ; '8'
000000000000a9af         db  0x41 ; 'A'
000000000000a9b0         db  0x0e ; '.'
000000000000a9b1         db  0x30 ; '0'
000000000000a9b2         db  0x41 ; 'A'
000000000000a9b3         db  0x0e ; '.'
000000000000a9b4         db  0x28 ; '('
000000000000a9b5         db  0x42 ; 'B'
000000000000a9b6         db  0x0e ; '.'
000000000000a9b7         db  0x20 ; ' '
000000000000a9b8         db  0x42 ; 'B'
000000000000a9b9         db  0x0e ; '.'
000000000000a9ba         db  0x18 ; '.'
000000000000a9bb         db  0x42 ; 'B'
000000000000a9bc         db  0x0e ; '.'
000000000000a9bd         db  0x10 ; '.'
000000000000a9be         db  0x42 ; 'B'
000000000000a9bf         db  0x0e ; '.'
000000000000a9c0         db  0x08 ; '.'
000000000000a9c1         db  0x44 ; 'D'
000000000000a9c2         db  0x0b ; '.'
000000000000a9c3         db  0x02 ; '.'
000000000000a9c4         db  0x78 ; 'x'
000000000000a9c5         db  0x0a ; '.'
000000000000a9c6         db  0x0e ; '.'
000000000000a9c7         db  0x68 ; 'h'
000000000000a9c8         db  0x48 ; 'H'
000000000000a9c9         db  0x0b ; '.'
000000000000a9ca         db  0x5a ; 'Z'
000000000000a9cb         db  0x0a ; '.'
000000000000a9cc         db  0x0e ; '.'
000000000000a9cd         db  0x38 ; '8'
000000000000a9ce         db  0x47 ; 'G'
000000000000a9cf         db  0x0e ; '.'
000000000000a9d0         db  0x30 ; '0'
000000000000a9d1         db  0x41 ; 'A'
000000000000a9d2         db  0x0e ; '.'
000000000000a9d3         db  0x28 ; '('
000000000000a9d4         db  0x42 ; 'B'
000000000000a9d5         db  0x0e ; '.'
000000000000a9d6         db  0x20 ; ' '
000000000000a9d7         db  0x42 ; 'B'
000000000000a9d8         db  0x0e ; '.'
000000000000a9d9         db  0x18 ; '.'
000000000000a9da         db  0x42 ; 'B'
000000000000a9db         db  0x0e ; '.'
000000000000a9dc         db  0x10 ; '.'
000000000000a9dd         db  0x42 ; 'B'
000000000000a9de         db  0x0e ; '.'
000000000000a9df         db  0x08 ; '.'
000000000000a9e0         db  0x56 ; 'V'
000000000000a9e1         db  0x0b ; '.'
000000000000a9e2         db  0x5e ; '^'
000000000000a9e3         db  0x0a ; '.'
000000000000a9e4         db  0x0e ; '.'
000000000000a9e5         db  0x38 ; '8'
000000000000a9e6         db  0x52 ; 'R'
000000000000a9e7         db  0x0e ; '.'
000000000000a9e8         db  0x30 ; '0'
000000000000a9e9         db  0x41 ; 'A'
000000000000a9ea         db  0x0e ; '.'
000000000000a9eb         db  0x28 ; '('
000000000000a9ec         db  0x42 ; 'B'
000000000000a9ed         db  0x0e ; '.'
000000000000a9ee         db  0x20 ; ' '
000000000000a9ef         db  0x42 ; 'B'
000000000000a9f0         db  0x0e ; '.'
000000000000a9f1         db  0x18 ; '.'
000000000000a9f2         db  0x42 ; 'B'
000000000000a9f3         db  0x0e ; '.'
000000000000a9f4         db  0x10 ; '.'
000000000000a9f5         db  0x42 ; 'B'
000000000000a9f6         db  0x0e ; '.'
000000000000a9f7         db  0x08 ; '.'
000000000000a9f8         db  0x4f ; 'O'
000000000000a9f9         db  0x0b ; '.'
000000000000a9fa         db  0x62 ; 'b'
000000000000a9fb         db  0x0a ; '.'
000000000000a9fc         db  0x0e ; '.'
000000000000a9fd         db  0x38 ; '8'
000000000000a9fe         db  0x50 ; 'P'
000000000000a9ff         db  0x0e ; '.'
000000000000aa00         db  0x30 ; '0'
000000000000aa01         db  0x41 ; 'A'
000000000000aa02         db  0x0e ; '.'
000000000000aa03         db  0x28 ; '('
000000000000aa04         db  0x42 ; 'B'
000000000000aa05         db  0x0e ; '.'
000000000000aa06         db  0x20 ; ' '
000000000000aa07         db  0x42 ; 'B'
000000000000aa08         db  0x0e ; '.'
000000000000aa09         db  0x18 ; '.'
000000000000aa0a         db  0x42 ; 'B'
000000000000aa0b         db  0x0e ; '.'
000000000000aa0c         db  0x10 ; '.'
000000000000aa0d         db  0x42 ; 'B'
000000000000aa0e         db  0x0e ; '.'
000000000000aa0f         db  0x08 ; '.'
000000000000aa10         db  0x55 ; 'U'
000000000000aa11         db  0x0b ; '.'
000000000000aa12         db  0x66 ; 'f'
000000000000aa13         db  0x0e ; '.'
000000000000aa14         db  0x68 ; 'h'
000000000000aa15         db  0x42 ; 'B'
000000000000aa16         db  0x0e ; '.'
000000000000aa17         db  0x70 ; 'p'
000000000000aa18         db  0x5c ; '\'
000000000000aa19         db  0x0e ; '.'
000000000000aa1a         db  0x68 ; 'h'
000000000000aa1b         db  0x41 ; 'A'
000000000000aa1c         db  0x0e ; '.'
000000000000aa1d         db  0x60 ; '`'
000000000000aa1e         db  0x44 ; 'D'
000000000000aa1f         db  0x0a ; '.'
000000000000aa20         db  0x0e ; '.'
000000000000aa21         db  0x38 ; '8'
000000000000aa22         db  0x41 ; 'A'
000000000000aa23         db  0x0e ; '.'
000000000000aa24         db  0x30 ; '0'
000000000000aa25         db  0x41 ; 'A'
000000000000aa26         db  0x0e ; '.'
000000000000aa27         db  0x28 ; '('
000000000000aa28         db  0x42 ; 'B'
000000000000aa29         db  0x0e ; '.'
000000000000aa2a         db  0x20 ; ' '
000000000000aa2b         db  0x42 ; 'B'
000000000000aa2c         db  0x0e ; '.'
000000000000aa2d         db  0x18 ; '.'
000000000000aa2e         db  0x42 ; 'B'
000000000000aa2f         db  0x0e ; '.'
000000000000aa30         db  0x10 ; '.'
000000000000aa31         db  0x42 ; 'B'
000000000000aa32         db  0x0e ; '.'
000000000000aa33         db  0x08 ; '.'
000000000000aa34         db  0x45 ; 'E'
000000000000aa35         db  0x0b ; '.'
000000000000aa36         db  0x68 ; 'h'
000000000000aa37         db  0x0a ; '.'
000000000000aa38         db  0x0e ; '.'
000000000000aa39         db  0x68 ; 'h'
000000000000aa3a         db  0x48 ; 'H'
000000000000aa3b         db  0x0b ; '.'
000000000000aa3c         db  0x72 ; 'r'
000000000000aa3d         db  0x0e ; '.'
000000000000aa3e         db  0x68 ; 'h'
000000000000aa3f         db  0x45 ; 'E'
000000000000aa40         db  0x0e ; '.'
000000000000aa41         db  0x70 ; 'p'
000000000000aa42         db  0x42 ; 'B'
000000000000aa43         db  0x0e ; '.'
000000000000aa44         db  0x78 ; 'x'
000000000000aa45         db  0x42 ; 'B'
000000000000aa46         db  0x0e ; '.'
000000000000aa47         db  0x80 ; '.'
000000000000aa48         db  0x01 ; '.'
000000000000aa49         db  0x5e ; '^'
000000000000aa4a         db  0x0e ; '.'
000000000000aa4b         db  0x60 ; '`'
000000000000aa4c         db  0x44 ; 'D'
000000000000aa4d         db  0x0a ; '.'
000000000000aa4e         db  0x0e ; '.'
000000000000aa4f         db  0x38 ; '8'
000000000000aa50         db  0x41 ; 'A'
000000000000aa51         db  0x0e ; '.'
000000000000aa52         db  0x30 ; '0'
000000000000aa53         db  0x41 ; 'A'
000000000000aa54         db  0x0e ; '.'
000000000000aa55         db  0x28 ; '('
000000000000aa56         db  0x42 ; 'B'
000000000000aa57         db  0x0e ; '.'
000000000000aa58         db  0x20 ; ' '
000000000000aa59         db  0x42 ; 'B'
000000000000aa5a         db  0x0e ; '.'
000000000000aa5b         db  0x18 ; '.'
000000000000aa5c         db  0x42 ; 'B'
000000000000aa5d         db  0x0e ; '.'
000000000000aa5e         db  0x10 ; '.'
000000000000aa5f         db  0x42 ; 'B'
000000000000aa60         db  0x0e ; '.'
000000000000aa61         db  0x08 ; '.'
000000000000aa62         db  0x41 ; 'A'
000000000000aa63         db  0x0b ; '.'
000000000000aa64         db  0x79 ; 'y'
000000000000aa65         db  0x0a ; '.'
000000000000aa66         db  0x0e ; '.'
000000000000aa67         db  0x68 ; 'h'
000000000000aa68         db  0x42 ; 'B'
000000000000aa69         db  0x0e ; '.'
000000000000aa6a         db  0x70 ; 'p'
000000000000aa6b         db  0x42 ; 'B'
000000000000aa6c         db  0x0e ; '.'
000000000000aa6d         db  0x78 ; 'x'
000000000000aa6e         db  0x42 ; 'B'
000000000000aa6f         db  0x0e ; '.'
000000000000aa70         db  0x80 ; '.'
000000000000aa71         db  0x01 ; '.'
000000000000aa72         db  0x51 ; 'Q'
000000000000aa73         db  0x0b ; '.'
000000000000aa74         dd         0x00000010                                  ; Length of the record
000000000000aa78         dd         0x00000918                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aa7c         db         0xf4, 0xad, 2 dup (0xff)                    ; begin 0x5870
000000000000aa80         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x5890)
000000000000aa84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa85         align      8
000000000000aa88         dd         0x00000018                                  ; Length of the record
000000000000aa8c         dd         0x0000092c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aa90         db         0x00, 0xae, 2 dup (0xff)                    ; begin 0x5890
000000000000aa94         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x5908)
000000000000aa98         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aa99         db  0x44 ; 'D'
000000000000aa9a         db  0x0e ; '.'
000000000000aa9b         db  0x70 ; 'p'
000000000000aa9c         db  0x02 ; '.'
000000000000aa9d         db  0x60 ; '`'
000000000000aa9e         db  0x0a ; '.'
000000000000aa9f         db  0x0e ; '.'
000000000000aaa0         db  0x08 ; '.'
000000000000aaa1         db  0x41 ; 'A'
000000000000aaa2         db  0x0b ; '.'
000000000000aaa3         db  0x00 ; '.'
000000000000aaa4         dd         0x00000028                                  ; Length of the record
000000000000aaa8         dd         0x00000948                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aaac         db         0x64, 0xae, 2 dup (0xff)                    ; begin 0x5910
000000000000aab0         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x59e5)
000000000000aab4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aab5         db  0x41 ; 'A'
000000000000aab6         db  0x0e ; '.'
000000000000aab7         db  0x10 ; '.'
000000000000aab8         db  0x86 ; '.'
000000000000aab9         db  0x02 ; '.'
000000000000aaba         db  0x41 ; 'A'
000000000000aabb         db  0x0e ; '.'
000000000000aabc         db  0x18 ; '.'
000000000000aabd         db  0x83 ; '.'
000000000000aabe         db  0x03 ; '.'
000000000000aabf         db  0x50 ; 'P'
000000000000aac0         db  0x0e ; '.'
000000000000aac1         db  0xd0 ; '.'
000000000000aac2         db  0x01 ; '.'
000000000000aac3         db  0x02 ; '.'
000000000000aac4         db  0xab ; '.'
000000000000aac5         db  0x0a ; '.'
000000000000aac6         db  0x0e ; '.'
000000000000aac7         db  0x18 ; '.'
000000000000aac8         db  0x41 ; 'A'
000000000000aac9         db  0x0e ; '.'
000000000000aaca         db  0x10 ; '.'
000000000000aacb         db  0x41 ; 'A'
000000000000aacc         db  0x0e ; '.'
000000000000aacd         db  0x08 ; '.'
000000000000aace         db  0x41 ; 'A'
000000000000aacf         db  0x0b ; '.'
000000000000aad0         dd         0x0000001c                                  ; Length of the record
000000000000aad4         dd         0x00000974                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aad8         db         0x18, 0xaf, 2 dup (0xff)                    ; begin 0x59f0
000000000000aadc         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x5a70)
000000000000aae0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aae1         db  0x41 ; 'A'
000000000000aae2         db  0x0e ; '.'
000000000000aae3         db  0x10 ; '.'
000000000000aae4         db  0x83 ; '.'
000000000000aae5         db  0x02 ; '.'
000000000000aae6         db  0x02 ; '.'
000000000000aae7         db  0x7a ; 'z'
000000000000aae8         db  0x0e ; '.'
000000000000aae9         db  0x08 ; '.'
000000000000aaea         db  0x00 ; '.'
000000000000aaeb         db  0x00 ; '.'
000000000000aaec         db  0x00 ; '.'
000000000000aaed         db  0x00 ; '.'
000000000000aaee         db  0x00 ; '.'
000000000000aaef         db  0x00 ; '.'
000000000000aaf0         dd         0x00000018                                  ; Length of the record
000000000000aaf4         dd         0x00000994                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aaf8         db         0x78, 0xaf, 2 dup (0xff)                    ; begin 0x5a70
000000000000aafc         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x5a8a)
000000000000ab00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab01         db  0x41 ; 'A'
000000000000ab02         db  0x0e ; '.'
000000000000ab03         db  0x10 ; '.'
000000000000ab04         db  0x83 ; '.'
000000000000ab05         db  0x02 ; '.'
000000000000ab06         db  0x53 ; 'S'
000000000000ab07         db  0x0a ; '.'
000000000000ab08         db  0x0e ; '.'
000000000000ab09         db  0x08 ; '.'
000000000000ab0a         db  0x41 ; 'A'
000000000000ab0b         db  0x0b ; '.'
000000000000ab0c         dd         0x00000010                                  ; Length of the record
000000000000ab10         dd         0x000009b0                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ab14         db         0x7c, 0xaf, 2 dup (0xff)                    ; begin 0x5a90
000000000000ab18         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x5ab4)
000000000000ab1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab1d         db  0x5f ; '_'
000000000000ab1e         db  0x0e ; '.'
000000000000ab1f         db  0x10 ; '.'
000000000000ab20         dd         0x00000010                                  ; Length of the record
000000000000ab24         dd         0x000009c4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ab28         db         0x98, 0xaf, 2 dup (0xff)                    ; begin 0x5ac0
000000000000ab2c         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x5ac2)
000000000000ab30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab31         align      4
000000000000ab34         dd         0x00000020                                  ; Length of the record
000000000000ab38         dd         0x000009d8                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ab3c         db         0x94, 0xaf, 2 dup (0xff)                    ; begin 0x5ad0
000000000000ab40         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x5b06)
000000000000ab44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab45         db  0x44 ; 'D'
000000000000ab46         db  0x0e ; '.'
000000000000ab47         db  0x10 ; '.'
000000000000ab48         db  0x83 ; '.'
000000000000ab49         db  0x02 ; '.'
000000000000ab4a         db  0x5d ; ']'
000000000000ab4b         db  0x0a ; '.'
000000000000ab4c         db  0x0e ; '.'
000000000000ab4d         db  0x08 ; '.'
000000000000ab4e         db  0x47 ; 'G'
000000000000ab4f         db  0x0b ; '.'
000000000000ab50         db  0x48 ; 'H'
000000000000ab51         db  0x0a ; '.'
000000000000ab52         db  0x0e ; '.'
000000000000ab53         db  0x08 ; '.'
000000000000ab54         db  0x41 ; 'A'
000000000000ab55         db  0x0b ; '.'
000000000000ab56         db  0x00 ; '.'
000000000000ab57         db  0x00 ; '.'
000000000000ab58         dd         0x00000010                                  ; Length of the record
000000000000ab5c         dd         0x000009fc                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ab60         db         0xb0, 0xaf, 2 dup (0xff)                    ; begin 0x5b10
000000000000ab64         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x5b34)
000000000000ab68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab69         db  0x5f ; '_'
000000000000ab6a         db  0x0e ; '.'
000000000000ab6b         db  0x10 ; '.'
000000000000ab6c         dd         0x00000014                                  ; Length of the record
000000000000ab70         dd         0x00000a10                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ab74         db         0xcc, 0xaf, 2 dup (0xff)                    ; begin 0x5b40
000000000000ab78         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x5bc2)
000000000000ab7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab7d         db  0x02 ; '.'
000000000000ab7e         db  0x5f ; '_'
000000000000ab7f         db  0x0e ; '.'
000000000000ab80         db  0x10 ; '.'
000000000000ab81         db  0x49 ; 'I'
000000000000ab82         db  0x0e ; '.'
000000000000ab83         db  0x08 ; '.'
000000000000ab84         dd         0x00000014                                  ; Length of the record
000000000000ab88         dd         0x00000a28                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ab8c         db         0x44, 0xb0, 2 dup (0xff)                    ; begin 0x5bd0
000000000000ab90         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x5c1a)
000000000000ab94         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ab95         db  0x02 ; '.'
000000000000ab96         db  0x45 ; 'E'
000000000000ab97         db  0x0e ; '.'
000000000000ab98         db  0x10 ; '.'
000000000000ab99         db  0x00 ; '.'
000000000000ab9a         db  0x00 ; '.'
000000000000ab9b         db  0x00 ; '.'
000000000000ab9c         dd         0x00000018                                  ; Length of the record
000000000000aba0         dd         0x00000a40                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aba4         db         0x7c, 0xb0, 2 dup (0xff)                    ; begin 0x5c20
000000000000aba8         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5c37)
000000000000abac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000abad         db  0x41 ; 'A'
000000000000abae         db  0x0e ; '.'
000000000000abaf         db  0x10 ; '.'
000000000000abb0         db  0x83 ; '.'
000000000000abb1         db  0x02 ; '.'
000000000000abb2         db  0x51 ; 'Q'
000000000000abb3         db  0x0e ; '.'
000000000000abb4         db  0x08 ; '.'
000000000000abb5         db  0x00 ; '.'
000000000000abb6         db  0x00 ; '.'
000000000000abb7         db  0x00 ; '.'
000000000000abb8         dd         0x00000018                                  ; Length of the record
000000000000abbc         dd         0x00000a5c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000abc0         db         0x80, 0xb0, 2 dup (0xff)                    ; begin 0x5c40
000000000000abc4         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x5c6e)
000000000000abc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000abc9         db  0x47 ; 'G'
000000000000abca         db  0x0e ; '.'
000000000000abcb         db  0x10 ; '.'
000000000000abcc         db  0x61 ; 'a'
000000000000abcd         db  0x0a ; '.'
000000000000abce         db  0x0e ; '.'
000000000000abcf         db  0x08 ; '.'
000000000000abd0         db  0x41 ; 'A'
000000000000abd1         db  0x0b ; '.'
000000000000abd2         db  0x00 ; '.'
000000000000abd3         db  0x00 ; '.'
000000000000abd4         dd         0x00000024                                  ; Length of the record
000000000000abd8         dd         0x00000a78                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000abdc         db         0x94, 0xb0, 2 dup (0xff)                    ; begin 0x5c70
000000000000abe0         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x5c98)
000000000000abe4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000abe5         db  0x41 ; 'A'
000000000000abe6         db  0x0e ; '.'
000000000000abe7         db  0x10 ; '.'
000000000000abe8         db  0x86 ; '.'
000000000000abe9         db  0x02 ; '.'
000000000000abea         db  0x41 ; 'A'
000000000000abeb         db  0x0e ; '.'
000000000000abec         db  0x18 ; '.'
000000000000abed         db  0x83 ; '.'
000000000000abee         db  0x03 ; '.'
000000000000abef         db  0x4d ; 'M'
000000000000abf0         db  0x0e ; '.'
000000000000abf1         db  0x20 ; ' '
000000000000abf2         db  0x49 ; 'I'
000000000000abf3         db  0x0e ; '.'
000000000000abf4         db  0x18 ; '.'
000000000000abf5         db  0x47 ; 'G'
000000000000abf6         db  0x0e ; '.'
000000000000abf7         db  0x10 ; '.'
000000000000abf8         db  0x41 ; 'A'
000000000000abf9         db  0x0e ; '.'
000000000000abfa         db  0x08 ; '.'
000000000000abfb         db  0x00 ; '.'
000000000000abfc         dd         0x00000018                                  ; Length of the record
000000000000ac00         dd         0x00000aa0                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ac04         db         0x9c, 0xb0, 2 dup (0xff)                    ; begin 0x5ca0
000000000000ac08         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5cb3)
000000000000ac0c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ac0d         db  0x41 ; 'A'
000000000000ac0e         db  0x0e ; '.'
000000000000ac0f         db  0x10 ; '.'
000000000000ac10         db  0x83 ; '.'
000000000000ac11         db  0x02 ; '.'
000000000000ac12         db  0x50 ; 'P'
000000000000ac13         db  0x0e ; '.'
000000000000ac14         db  0x08 ; '.'
000000000000ac15         db  0x00 ; '.'
000000000000ac16         db  0x00 ; '.'
000000000000ac17         db  0x00 ; '.'
000000000000ac18         dd         0x00000014                                  ; Length of the record
000000000000ac1c         dd         0x00000abc                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ac20         db         0xa0, 0xb0, 2 dup (0xff)                    ; begin 0x5cc0
000000000000ac24         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5cf5)
000000000000ac28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ac29         db  0x4b ; 'K'
000000000000ac2a         db  0x0e ; '.'
000000000000ac2b         db  0x10 ; '.'
000000000000ac2c         db  0x00 ; '.'
000000000000ac2d         db  0x00 ; '.'
000000000000ac2e         db  0x00 ; '.'
000000000000ac2f         db  0x00 ; '.'
000000000000ac30         dd         0x00000048                                  ; Length of the record
000000000000ac34         dd         0x00000ad4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ac38         db         0xc8, 0xb0, 2 dup (0xff)                    ; begin 0x5d00
000000000000ac3c         db         0x43, 0x01, 2 dup (0x00)                    ; length 0x143 (end at 0x5e43)
000000000000ac40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ac41         db  0x42 ; 'B'
000000000000ac42         db  0x0e ; '.'
000000000000ac43         db  0x10 ; '.'
000000000000ac44         db  0x8f ; '.'
000000000000ac45         db  0x02 ; '.'
000000000000ac46         db  0x42 ; 'B'
000000000000ac47         db  0x0e ; '.'
000000000000ac48         db  0x18 ; '.'
000000000000ac49         db  0x8e ; '.'
000000000000ac4a         db  0x03 ; '.'
000000000000ac4b         db  0x42 ; 'B'
000000000000ac4c         db  0x0e ; '.'
000000000000ac4d         db  0x20 ; ' '
000000000000ac4e         db  0x8d ; '.'
000000000000ac4f         db  0x04 ; '.'
000000000000ac50         db  0x42 ; 'B'
000000000000ac51         db  0x0e ; '.'
000000000000ac52         db  0x28 ; '('
000000000000ac53         db  0x8c ; '.'
000000000000ac54         db  0x05 ; '.'
000000000000ac55         db  0x41 ; 'A'
000000000000ac56         db  0x0e ; '.'
000000000000ac57         db  0x30 ; '0'
000000000000ac58         db  0x86 ; '.'
000000000000ac59         db  0x06 ; '.'
000000000000ac5a         db  0x41 ; 'A'
000000000000ac5b         db  0x0e ; '.'
000000000000ac5c         db  0x38 ; '8'
000000000000ac5d         db  0x83 ; '.'
000000000000ac5e         db  0x07 ; '.'
000000000000ac5f         db  0x44 ; 'D'
000000000000ac60         db  0x0e ; '.'
000000000000ac61         db  0x60 ; '`'
000000000000ac62         db  0x02 ; '.'
000000000000ac63         db  0xfc ; '.'
000000000000ac64         db  0x0a ; '.'
000000000000ac65         db  0x0e ; '.'
000000000000ac66         db  0x38 ; '8'
000000000000ac67         db  0x41 ; 'A'
000000000000ac68         db  0x0e ; '.'
000000000000ac69         db  0x30 ; '0'
000000000000ac6a         db  0x41 ; 'A'
000000000000ac6b         db  0x0e ; '.'
000000000000ac6c         db  0x28 ; '('
000000000000ac6d         db  0x42 ; 'B'
000000000000ac6e         db  0x0e ; '.'
000000000000ac6f         db  0x20 ; ' '
000000000000ac70         db  0x42 ; 'B'
000000000000ac71         db  0x0e ; '.'
000000000000ac72         db  0x18 ; '.'
000000000000ac73         db  0x42 ; 'B'
000000000000ac74         db  0x0e ; '.'
000000000000ac75         db  0x10 ; '.'
000000000000ac76         db  0x42 ; 'B'
000000000000ac77         db  0x0e ; '.'
000000000000ac78         db  0x08 ; '.'
000000000000ac79         db  0x41 ; 'A'
000000000000ac7a         db  0x0b ; '.'
000000000000ac7b         db  0x00 ; '.'
000000000000ac7c         dd         0x00000018                                  ; Length of the record
000000000000ac80         dd         0x00000b20                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ac84         db         0xcc, 0xb1, 2 dup (0xff)                    ; begin 0x5e50
000000000000ac88         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x5ef4)
000000000000ac8c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ac8d         db  0x44 ; 'D'
000000000000ac8e         db  0x0e ; '.'
000000000000ac8f         db  0x20 ; ' '
000000000000ac90         db  0x02 ; '.'
000000000000ac91         db  0x7e ; '~'
000000000000ac92         db  0x0a ; '.'
000000000000ac93         db  0x0e ; '.'
000000000000ac94         db  0x08 ; '.'
000000000000ac95         db  0x46 ; 'F'
000000000000ac96         db  0x0b ; '.'
000000000000ac97         db  0x00 ; '.'
000000000000ac98         dd         0x0000003c                                  ; Length of the record
000000000000ac9c         dd         0x00000b3c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aca0         db         0x60, 0xb2, 2 dup (0xff)                    ; begin 0x5f00
000000000000aca4         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x5f83)
000000000000aca8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aca9         db  0x42 ; 'B'
000000000000acaa         db  0x0e ; '.'
000000000000acab         db  0x10 ; '.'
000000000000acac         db  0x8d ; '.'
000000000000acad         db  0x02 ; '.'
000000000000acae         db  0x42 ; 'B'
000000000000acaf         db  0x0e ; '.'
000000000000acb0         db  0x18 ; '.'
000000000000acb1         db  0x8c ; '.'
000000000000acb2         db  0x03 ; '.'
000000000000acb3         db  0x44 ; 'D'
000000000000acb4         db  0x0e ; '.'
000000000000acb5         db  0x20 ; ' '
000000000000acb6         db  0x86 ; '.'
000000000000acb7         db  0x04 ; '.'
000000000000acb8         db  0x41 ; 'A'
000000000000acb9         db  0x0e ; '.'
000000000000acba         db  0x28 ; '('
000000000000acbb         db  0x83 ; '.'
000000000000acbc         db  0x05 ; '.'
000000000000acbd         db  0x4a ; 'J'
000000000000acbe         db  0x0e ; '.'
000000000000acbf         db  0x40 ; '@'
000000000000acc0         db  0x02 ; '.'
000000000000acc1         db  0x64 ; 'd'
000000000000acc2         db  0x0a ; '.'
000000000000acc3         db  0x0e ; '.'
000000000000acc4         db  0x28 ; '('
000000000000acc5         db  0x41 ; 'A'
000000000000acc6         db  0x0e ; '.'
000000000000acc7         db  0x20 ; ' '
000000000000acc8         db  0x41 ; 'A'
000000000000acc9         db  0x0e ; '.'
000000000000acca         db  0x18 ; '.'
000000000000accb         db  0x42 ; 'B'
000000000000accc         db  0x0e ; '.'
000000000000accd         db  0x10 ; '.'
000000000000acce         db  0x42 ; 'B'
000000000000accf         db  0x0e ; '.'
000000000000acd0         db  0x08 ; '.'
000000000000acd1         db  0x41 ; 'A'
000000000000acd2         db  0x0b ; '.'
000000000000acd3         db  0x00 ; '.'
000000000000acd4         db  0x00 ; '.'
000000000000acd5         db  0x00 ; '.'
000000000000acd6         db  0x00 ; '.'
000000000000acd7         db  0x00 ; '.'
000000000000acd8         dd         0x00000024                                  ; Length of the record
000000000000acdc         dd         0x00000b7c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ace0         db         0xb0, 0xb2, 2 dup (0xff)                    ; begin 0x5f90
000000000000ace4         db         0x7e, 3 dup (0x00)                          ; length 0x7e (end at 0x600e)
000000000000ace8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ace9         db  0x41 ; 'A'
000000000000acea         db  0x0e ; '.'
000000000000aceb         db  0x10 ; '.'
000000000000acec         db  0x83 ; '.'
000000000000aced         db  0x02 ; '.'
000000000000acee         db  0x4c ; 'L'
000000000000acef         db  0x0e ; '.'
000000000000acf0         db  0x20 ; ' '
000000000000acf1         db  0x02 ; '.'
000000000000acf2         db  0x49 ; 'I'
000000000000acf3         db  0x0a ; '.'
000000000000acf4         db  0x0e ; '.'
000000000000acf5         db  0x10 ; '.'
000000000000acf6         db  0x41 ; 'A'
000000000000acf7         db  0x0e ; '.'
000000000000acf8         db  0x08 ; '.'
000000000000acf9         db  0x41 ; 'A'
000000000000acfa         db  0x0b ; '.'
000000000000acfb         db  0x00 ; '.'
000000000000acfc         db  0x00 ; '.'
000000000000acfd         db  0x00 ; '.'
000000000000acfe         db  0x00 ; '.'
000000000000acff         db  0x00 ; '.'
000000000000ad00         dd         0x0000004c                                  ; Length of the record
000000000000ad04         dd         0x00000ba4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ad08         db         0x08, 0xb3, 2 dup (0xff)                    ; begin 0x6010
000000000000ad0c         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x608d)
000000000000ad10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad11         db  0x42 ; 'B'
000000000000ad12         db  0x0e ; '.'
000000000000ad13         db  0x10 ; '.'
000000000000ad14         db  0x8c ; '.'
000000000000ad15         db  0x02 ; '.'
000000000000ad16         db  0x41 ; 'A'
000000000000ad17         db  0x0e ; '.'
000000000000ad18         db  0x18 ; '.'
000000000000ad19         db  0x86 ; '.'
000000000000ad1a         db  0x03 ; '.'
000000000000ad1b         db  0x44 ; 'D'
000000000000ad1c         db  0x0e ; '.'
000000000000ad1d         db  0x20 ; ' '
000000000000ad1e         db  0x83 ; '.'
000000000000ad1f         db  0x04 ; '.'
000000000000ad20         db  0x69 ; 'i'
000000000000ad21         db  0x0a ; '.'
000000000000ad22         db  0x0e ; '.'
000000000000ad23         db  0x18 ; '.'
000000000000ad24         db  0x41 ; 'A'
000000000000ad25         db  0x0e ; '.'
000000000000ad26         db  0x10 ; '.'
000000000000ad27         db  0x42 ; 'B'
000000000000ad28         db  0x0e ; '.'
000000000000ad29         db  0x08 ; '.'
000000000000ad2a         db  0x45 ; 'E'
000000000000ad2b         db  0x0b ; '.'
000000000000ad2c         db  0x55 ; 'U'
000000000000ad2d         db  0x0a ; '.'
000000000000ad2e         db  0x0e ; '.'
000000000000ad2f         db  0x18 ; '.'
000000000000ad30         db  0x41 ; 'A'
000000000000ad31         db  0x0e ; '.'
000000000000ad32         db  0x10 ; '.'
000000000000ad33         db  0x42 ; 'B'
000000000000ad34         db  0x0e ; '.'
000000000000ad35         db  0x08 ; '.'
000000000000ad36         db  0x48 ; 'H'
000000000000ad37         db  0x0b ; '.'
000000000000ad38         db  0x41 ; 'A'
000000000000ad39         db  0x0a ; '.'
000000000000ad3a         db  0x0e ; '.'
000000000000ad3b         db  0x18 ; '.'
000000000000ad3c         db  0x46 ; 'F'
000000000000ad3d         db  0x0e ; '.'
000000000000ad3e         db  0x10 ; '.'
000000000000ad3f         db  0x42 ; 'B'
000000000000ad40         db  0x0e ; '.'
000000000000ad41         db  0x08 ; '.'
000000000000ad42         db  0x47 ; 'G'
000000000000ad43         db  0x0b ; '.'
000000000000ad44         db  0x49 ; 'I'
000000000000ad45         db  0x0e ; '.'
000000000000ad46         db  0x18 ; '.'
000000000000ad47         db  0x41 ; 'A'
000000000000ad48         db  0x0e ; '.'
000000000000ad49         db  0x10 ; '.'
000000000000ad4a         db  0x42 ; 'B'
000000000000ad4b         db  0x0e ; '.'
000000000000ad4c         db  0x08 ; '.'
000000000000ad4d         db  0x00 ; '.'
000000000000ad4e         db  0x00 ; '.'
000000000000ad4f         db  0x00 ; '.'
000000000000ad50         dd         0x0000001c                                  ; Length of the record
000000000000ad54         dd         0x00000bf4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ad58         db         0x38, 0xb3, 2 dup (0xff)                    ; begin 0x6090
000000000000ad5c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x60f0)
000000000000ad60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad61         db  0x44 ; 'D'
000000000000ad62         db  0x0e ; '.'
000000000000ad63         db  0x10 ; '.'
000000000000ad64         db  0x75 ; 'u'
000000000000ad65         db  0x0a ; '.'
000000000000ad66         db  0x0e ; '.'
000000000000ad67         db  0x08 ; '.'
000000000000ad68         db  0x47 ; 'G'
000000000000ad69         db  0x0b ; '.'
000000000000ad6a         db  0x5f ; '_'
000000000000ad6b         db  0x0e ; '.'
000000000000ad6c         db  0x08 ; '.'
000000000000ad6d         db  0x00 ; '.'
000000000000ad6e         db  0x00 ; '.'
000000000000ad6f         db  0x00 ; '.'
000000000000ad70         dd         0x0000001c                                  ; Length of the record
000000000000ad74         dd         0x00000c14                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ad78         db         0x78, 0xb3, 2 dup (0xff)                    ; begin 0x60f0
000000000000ad7c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0x612c)
000000000000ad80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ad81         db  0x44 ; 'D'
000000000000ad82         db  0x0e ; '.'
000000000000ad83         db  0x10 ; '.'
000000000000ad84         db  0x61 ; 'a'
000000000000ad85         db  0x0a ; '.'
000000000000ad86         db  0x0e ; '.'
000000000000ad87         db  0x08 ; '.'
000000000000ad88         db  0x4b ; 'K'
000000000000ad89         db  0x0b ; '.'
000000000000ad8a         db  0x4b ; 'K'
000000000000ad8b         db  0x0e ; '.'
000000000000ad8c         db  0x08 ; '.'
000000000000ad8d         db  0x00 ; '.'
000000000000ad8e         db  0x00 ; '.'
000000000000ad8f         db  0x00 ; '.'
000000000000ad90         dd         0x00000034                                  ; Length of the record
000000000000ad94         dd         0x00000c34                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ad98         db         0x98, 0xb3, 2 dup (0xff)                    ; begin 0x6130
000000000000ad9c         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0x61ab)
000000000000ada0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ada1         db  0x42 ; 'B'
000000000000ada2         db  0x0e ; '.'
000000000000ada3         db  0x10 ; '.'
000000000000ada4         db  0x8c ; '.'
000000000000ada5         db  0x02 ; '.'
000000000000ada6         db  0x41 ; 'A'
000000000000ada7         db  0x0e ; '.'
000000000000ada8         db  0x18 ; '.'
000000000000ada9         db  0x86 ; '.'
000000000000adaa         db  0x03 ; '.'
000000000000adab         db  0x41 ; 'A'
000000000000adac         db  0x0e ; '.'
000000000000adad         db  0x20 ; ' '
000000000000adae         db  0x83 ; '.'
000000000000adaf         db  0x04 ; '.'
000000000000adb0         db  0x7d ; '}'
000000000000adb1         db  0x0a ; '.'
000000000000adb2         db  0x0e ; '.'
000000000000adb3         db  0x18 ; '.'
000000000000adb4         db  0x41 ; 'A'
000000000000adb5         db  0x0e ; '.'
000000000000adb6         db  0x10 ; '.'
000000000000adb7         db  0x42 ; 'B'
000000000000adb8         db  0x0e ; '.'
000000000000adb9         db  0x08 ; '.'
000000000000adba         db  0x44 ; 'D'
000000000000adbb         db  0x0b ; '.'
000000000000adbc         db  0x60 ; '`'
000000000000adbd         db  0x0a ; '.'
000000000000adbe         db  0x0e ; '.'
000000000000adbf         db  0x18 ; '.'
000000000000adc0         db  0x41 ; 'A'
000000000000adc1         db  0x0e ; '.'
000000000000adc2         db  0x10 ; '.'
000000000000adc3         db  0x42 ; 'B'
000000000000adc4         db  0x0e ; '.'
000000000000adc5         db  0x08 ; '.'
000000000000adc6         db  0x45 ; 'E'
000000000000adc7         db  0x0b ; '.'
000000000000adc8         dd         0x0000001c                                  ; Length of the record
000000000000adcc         dd         0x00000c6c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000add0         db         0xe0, 0xb3, 2 dup (0xff)                    ; begin 0x61b0
000000000000add4         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x61f0)
000000000000add8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000add9         db  0x44 ; 'D'
000000000000adda         db  0x0e ; '.'
000000000000addb         db  0x10 ; '.'
000000000000addc         db  0x83 ; '.'
000000000000addd         db  0x02 ; '.'
000000000000adde         db  0x5a ; 'Z'
000000000000addf         db  0x0a ; '.'
000000000000ade0         db  0x0e ; '.'
000000000000ade1         db  0x08 ; '.'
000000000000ade2         db  0x4a ; 'J'
000000000000ade3         db  0x0b ; '.'
000000000000ade4         db  0x53 ; 'S'
000000000000ade5         db  0x0e ; '.'
000000000000ade6         db  0x08 ; '.'
000000000000ade7         db  0x00 ; '.'
000000000000ade8         dd         0x0000002c                                  ; Length of the record
000000000000adec         dd         0x00000c8c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000adf0         db         0x00, 0xb4, 2 dup (0xff)                    ; begin 0x61f0
000000000000adf4         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x6247)
000000000000adf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000adf9         db  0x63 ; 'c'
000000000000adfa         db  0x0e ; '.'
000000000000adfb         db  0x10 ; '.'
000000000000adfc         db  0x8c ; '.'
000000000000adfd         db  0x02 ; '.'
000000000000adfe         db  0x41 ; 'A'
000000000000adff         db  0x0e ; '.'
000000000000ae00         db  0x18 ; '.'
000000000000ae01         db  0x86 ; '.'
000000000000ae02         db  0x03 ; '.'
000000000000ae03         db  0x44 ; 'D'
000000000000ae04         db  0x0e ; '.'
000000000000ae05         db  0x20 ; ' '
000000000000ae06         db  0x83 ; '.'
000000000000ae07         db  0x04 ; '.'
000000000000ae08         db  0x6b ; 'k'
000000000000ae09         db  0x0e ; '.'
000000000000ae0a         db  0x18 ; '.'
000000000000ae0b         db  0x41 ; 'A'
000000000000ae0c         db  0x0e ; '.'
000000000000ae0d         db  0x10 ; '.'
000000000000ae0e         db  0x42 ; 'B'
000000000000ae0f         db  0x0e ; '.'
000000000000ae10         db  0x08 ; '.'
000000000000ae11         db  0x00 ; '.'
000000000000ae12         db  0x00 ; '.'
000000000000ae13         db  0x00 ; '.'
000000000000ae14         db  0x00 ; '.'
000000000000ae15         db  0x00 ; '.'
000000000000ae16         db  0x00 ; '.'
000000000000ae17         db  0x00 ; '.'
000000000000ae18         dd         0x0000002c                                  ; Length of the record
000000000000ae1c         dd         0x00000cbc                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ae20         db         0x30, 0xb4, 2 dup (0xff)                    ; begin 0x6250
000000000000ae24         db         0x1f, 0x11, 2 dup (0x00)                    ; length 0x111f (end at 0x736f)
000000000000ae28         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae29         db  0x41 ; 'A'
000000000000ae2a         db  0x0e ; '.'
000000000000ae2b         db  0x10 ; '.'
000000000000ae2c         db  0x86 ; '.'
000000000000ae2d         db  0x02 ; '.'
000000000000ae2e         db  0x43 ; 'C'
000000000000ae2f         db  0x0d ; '.'
000000000000ae30         db  0x06 ; '.'
000000000000ae31         db  0x48 ; 'H'
000000000000ae32         db  0x8f ; '.'
000000000000ae33         db  0x03 ; '.'
000000000000ae34         db  0x8e ; '.'
000000000000ae35         db  0x04 ; '.'
000000000000ae36         db  0x8d ; '.'
000000000000ae37         db  0x05 ; '.'
000000000000ae38         db  0x8c ; '.'
000000000000ae39         db  0x06 ; '.'
000000000000ae3a         db  0x48 ; 'H'
000000000000ae3b         db  0x83 ; '.'
000000000000ae3c         db  0x07 ; '.'
000000000000ae3d         db  0x03 ; '.'
000000000000ae3e         db  0xef ; '.'
000000000000ae3f         db  0x01 ; '.'
000000000000ae40         db  0x0a ; '.'
000000000000ae41         db  0x0c ; '.'
000000000000ae42         db  0x07 ; '.'
000000000000ae43         db  0x08 ; '.'
000000000000ae44         db  0x45 ; 'E'
000000000000ae45         db  0x0b ; '.'
000000000000ae46         db  0x00 ; '.'
000000000000ae47         db  0x00 ; '.'
000000000000ae48         dd         0x00000014                                  ; Length of the record
000000000000ae4c         dd         0x00000cec                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ae50         db         0x20, 0xc5, 2 dup (0xff)                    ; begin 0x7370
000000000000ae54         db         0xfe, 0x01, 2 dup (0x00)                    ; length 0x1fe (end at 0x756e)
000000000000ae58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae59         align      32
000000000000ae60         dd         0x0000004c                                  ; Length of the record
000000000000ae64         dd         0x00000d04                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000ae68         db         0x08, 0xc7, 2 dup (0xff)                    ; begin 0x7570
000000000000ae6c         db         0xec, 0x0c, 2 dup (0x00)                    ; length 0xcec (end at 0x825c)
000000000000ae70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ae71         db  0x42 ; 'B'
000000000000ae72         db  0x0e ; '.'
000000000000ae73         db  0x10 ; '.'
000000000000ae74         db  0x8f ; '.'
000000000000ae75         db  0x02 ; '.'
000000000000ae76         db  0x42 ; 'B'
000000000000ae77         db  0x0e ; '.'
000000000000ae78         db  0x18 ; '.'
000000000000ae79         db  0x8e ; '.'
000000000000ae7a         db  0x03 ; '.'
000000000000ae7b         db  0x46 ; 'F'
000000000000ae7c         db  0x0e ; '.'
000000000000ae7d         db  0x20 ; ' '
000000000000ae7e         db  0x8d ; '.'
000000000000ae7f         db  0x04 ; '.'
000000000000ae80         db  0x42 ; 'B'
000000000000ae81         db  0x0e ; '.'
000000000000ae82         db  0x28 ; '('
000000000000ae83         db  0x8c ; '.'
000000000000ae84         db  0x05 ; '.'
000000000000ae85         db  0x45 ; 'E'
000000000000ae86         db  0x0e ; '.'
000000000000ae87         db  0x30 ; '0'
000000000000ae88         db  0x86 ; '.'
000000000000ae89         db  0x06 ; '.'
000000000000ae8a         db  0x41 ; 'A'
000000000000ae8b         db  0x0e ; '.'
000000000000ae8c         db  0x38 ; '8'
000000000000ae8d         db  0x83 ; '.'
000000000000ae8e         db  0x07 ; '.'
000000000000ae8f         db  0x52 ; 'R'
000000000000ae90         db  0x0e ; '.'
000000000000ae91         db  0x90 ; '.'
000000000000ae92         db  0x01 ; '.'
000000000000ae93         db  0x02 ; '.'
000000000000ae94         db  0x82 ; '.'
000000000000ae95         db  0x0a ; '.'
000000000000ae96         db  0x0e ; '.'
000000000000ae97         db  0x38 ; '8'
000000000000ae98         db  0x41 ; 'A'
000000000000ae99         db  0x0e ; '.'
000000000000ae9a         db  0x30 ; '0'
000000000000ae9b         db  0x41 ; 'A'
000000000000ae9c         db  0x0e ; '.'
000000000000ae9d         db  0x28 ; '('
000000000000ae9e         db  0x42 ; 'B'
000000000000ae9f         db  0x0e ; '.'
000000000000aea0         db  0x20 ; ' '
000000000000aea1         db  0x42 ; 'B'
000000000000aea2         db  0x0e ; '.'
000000000000aea3         db  0x18 ; '.'
000000000000aea4         db  0x42 ; 'B'
000000000000aea5         db  0x0e ; '.'
000000000000aea6         db  0x10 ; '.'
000000000000aea7         db  0x42 ; 'B'
000000000000aea8         db  0x0e ; '.'
000000000000aea9         db  0x08 ; '.'
000000000000aeaa         db  0x48 ; 'H'
000000000000aeab         db  0x0b ; '.'
000000000000aeac         db  0x00 ; '.'
000000000000aead         db  0x00 ; '.'
000000000000aeae         db  0x00 ; '.'
000000000000aeaf         db  0x00 ; '.'
000000000000aeb0         dd         0x00000044                                  ; Length of the record
000000000000aeb4         dd         0x00000d54                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000aeb8         db         0xa8, 0xd3, 2 dup (0xff)                    ; begin 0x8260
000000000000aebc         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x82c5)
000000000000aec0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000aec1         db  0x42 ; 'B'
000000000000aec2         db  0x0e ; '.'
000000000000aec3         db  0x10 ; '.'
000000000000aec4         db  0x8f ; '.'
000000000000aec5         db  0x02 ; '.'
000000000000aec6         db  0x42 ; 'B'
000000000000aec7         db  0x0e ; '.'
000000000000aec8         db  0x18 ; '.'
000000000000aec9         db  0x8e ; '.'
000000000000aeca         db  0x03 ; '.'
000000000000aecb         db  0x45 ; 'E'
000000000000aecc         db  0x0e ; '.'
000000000000aecd         db  0x20 ; ' '
000000000000aece         db  0x8d ; '.'
000000000000aecf         db  0x04 ; '.'
000000000000aed0         db  0x42 ; 'B'
000000000000aed1         db  0x0e ; '.'
000000000000aed2         db  0x28 ; '('
000000000000aed3         db  0x8c ; '.'
000000000000aed4         db  0x05 ; '.'
000000000000aed5         db  0x48 ; 'H'
000000000000aed6         db  0x0e ; '.'
000000000000aed7         db  0x30 ; '0'
000000000000aed8         db  0x86 ; '.'
000000000000aed9         db  0x06 ; '.'
000000000000aeda         db  0x48 ; 'H'
000000000000aedb         db  0x0e ; '.'
000000000000aedc         db  0x38 ; '8'
000000000000aedd         db  0x83 ; '.'
000000000000aede         db  0x07 ; '.'
000000000000aedf         db  0x4d ; 'M'
000000000000aee0         db  0x0e ; '.'
000000000000aee1         db  0x40 ; '@'
000000000000aee2         db  0x72 ; 'r'
000000000000aee3         db  0x0e ; '.'
000000000000aee4         db  0x38 ; '8'
000000000000aee5         db  0x41 ; 'A'
000000000000aee6         db  0x0e ; '.'
000000000000aee7         db  0x30 ; '0'
000000000000aee8         db  0x41 ; 'A'
000000000000aee9         db  0x0e ; '.'
000000000000aeea         db  0x28 ; '('
000000000000aeeb         db  0x42 ; 'B'
000000000000aeec         db  0x0e ; '.'
000000000000aeed         db  0x20 ; ' '
000000000000aeee         db  0x42 ; 'B'
000000000000aeef         db  0x0e ; '.'
000000000000aef0         db  0x18 ; '.'
000000000000aef1         db  0x42 ; 'B'
000000000000aef2         db  0x0e ; '.'
000000000000aef3         db  0x10 ; '.'
000000000000aef4         db  0x42 ; 'B'
000000000000aef5         db  0x0e ; '.'
000000000000aef6         db  0x08 ; '.'
000000000000aef7         db  0x00 ; '.'
000000000000aef8         dd         0x00000014                                  ; Length of the record
000000000000aefc         dd         0x00000d9c                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000af00         db         0xd0, 0xd3, 2 dup (0xff)                    ; begin 0x82d0
000000000000af04         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x82d2)
000000000000af08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af09         align      16
000000000000af10         dd         0x00000010                                  ; Length of the record
000000000000af14         dd         0x00000db4                                  ; FDE: parent CIE at 0xa160 (FDE encoding = 0x1B)
000000000000af18         db         0xc8, 0xd3, 2 dup (0xff)                    ; begin 0x82e0
000000000000af1c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x82ee)
000000000000af20         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000af21         align      8


        ; Segment Segment 3
        ; Range: [0x20bbd0; 0x20c218[ (1608 bytes)
        ; File offset : [48080; 49280[ (1200 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20bbd0; 0x20bbd8[ (8 bytes)
        ; File offset : [48080; 48088[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020bbd0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20bbd8; 0x20bbe0[ (8 bytes)
        ; File offset : [48088; 48096[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020bbd8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20bbe0; 0x20bc38[ (88 bytes)
        ; File offset : [48096; 48184[ (88 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     quoting_style_args:
000000000020bbe0         db  0xa9 ; '.'
000000000020bbe1         db  0x93 ; '.'
000000000020bbe2         db  0x00 ; '.'
000000000020bbe3         db  0x00 ; '.'
000000000020bbe4         db  0x00 ; '.'
000000000020bbe5         db  0x00 ; '.'
000000000020bbe6         db  0x00 ; '.'
000000000020bbe7         db  0x00 ; '.'
000000000020bbe8         db  0xb1 ; '.'
000000000020bbe9         db  0x93 ; '.'
000000000020bbea         db  0x00 ; '.'
000000000020bbeb         db  0x00 ; '.'
000000000020bbec         db  0x00 ; '.'
000000000020bbed         db  0x00 ; '.'
000000000020bbee         db  0x00 ; '.'
000000000020bbef         db  0x00 ; '.'
000000000020bbf0         db  0xb7 ; '.'
000000000020bbf1         db  0x93 ; '.'
000000000020bbf2         db  0x00 ; '.'
000000000020bbf3         db  0x00 ; '.'
000000000020bbf4         db  0x00 ; '.'
000000000020bbf5         db  0x00 ; '.'
000000000020bbf6         db  0x00 ; '.'
000000000020bbf7         db  0x00 ; '.'
000000000020bbf8         db  0xc4 ; '.'
000000000020bbf9         db  0x93 ; '.'
000000000020bbfa         db  0x00 ; '.'
000000000020bbfb         db  0x00 ; '.'
000000000020bbfc         db  0x00 ; '.'
000000000020bbfd         db  0x00 ; '.'
000000000020bbfe         db  0x00 ; '.'
000000000020bbff         db  0x00 ; '.'
000000000020bc00         db  0xd1 ; '.'
000000000020bc01         db  0x93 ; '.'
000000000020bc02         db  0x00 ; '.'
000000000020bc03         db  0x00 ; '.'
000000000020bc04         db  0x00 ; '.'
000000000020bc05         db  0x00 ; '.'
000000000020bc06         db  0x00 ; '.'
000000000020bc07         db  0x00 ; '.'
000000000020bc08         db  0xe5 ; '.'
000000000020bc09         db  0x93 ; '.'
000000000020bc0a         db  0x00 ; '.'
000000000020bc0b         db  0x00 ; '.'
000000000020bc0c         db  0x00 ; '.'
000000000020bc0d         db  0x00 ; '.'
000000000020bc0e         db  0x00 ; '.'
000000000020bc0f         db  0x00 ; '.'
000000000020bc10         db  0xe7 ; '.'
000000000020bc11         db  0x93 ; '.'
000000000020bc12         db  0x00 ; '.'
000000000020bc13         db  0x00 ; '.'
000000000020bc14         db  0x00 ; '.'
000000000020bc15         db  0x00 ; '.'
000000000020bc16         db  0x00 ; '.'
000000000020bc17         db  0x00 ; '.'
000000000020bc18         db  0xca ; '.'
000000000020bc19         db  0x93 ; '.'
000000000020bc1a         db  0x00 ; '.'
000000000020bc1b         db  0x00 ; '.'
000000000020bc1c         db  0x00 ; '.'
000000000020bc1d         db  0x00 ; '.'
000000000020bc1e         db  0x00 ; '.'
000000000020bc1f         db  0x00 ; '.'
000000000020bc20         db  0x94 ; '.'
000000000020bc21         db  0x84 ; '.'
000000000020bc22         db  0x00 ; '.'
000000000020bc23         db  0x00 ; '.'
000000000020bc24         db  0x00 ; '.'
000000000020bc25         db  0x00 ; '.'
000000000020bc26         db  0x00 ; '.'
000000000020bc27         db  0x00 ; '.'
000000000020bc28         db  0xef ; '.'
000000000020bc29         db  0x93 ; '.'
000000000020bc2a         db  0x00 ; '.'
000000000020bc2b         db  0x00 ; '.'
000000000020bc2c         db  0x00 ; '.'
000000000020bc2d         db  0x00 ; '.'
000000000020bc2e         db  0x00 ; '.'
000000000020bc2f         db  0x00 ; '.'
000000000020bc30         db  0x00 ; '.'
000000000020bc31         db  0x00 ; '.'
000000000020bc32         db  0x00 ; '.'
000000000020bc33         db  0x00 ; '.'
000000000020bc34         db  0x00 ; '.'
000000000020bc35         db  0x00 ; '.'
000000000020bc36         db  0x00 ; '.'
000000000020bc37         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20bc38; 0x20be28[ (496 bytes)
        ; File offset : [48184; 48680[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020bc38         db  0x01 ; '.'
000000000020bc39         db  0x00 ; '.'
000000000020bc3a         db  0x00 ; '.'
000000000020bc3b         db  0x00 ; '.'
000000000020bc3c         db  0x00 ; '.'
000000000020bc3d         db  0x00 ; '.'
000000000020bc3e         db  0x00 ; '.'
000000000020bc3f         db  0x00 ; '.'
000000000020bc40         db  0x01 ; '.'
000000000020bc41         db  0x00 ; '.'
000000000020bc42         db  0x00 ; '.'
000000000020bc43         db  0x00 ; '.'
000000000020bc44         db  0x00 ; '.'
000000000020bc45         db  0x00 ; '.'
000000000020bc46         db  0x00 ; '.'
000000000020bc47         db  0x00 ; '.'
000000000020bc48         db  0x0c ; '.'
000000000020bc49         db  0x00 ; '.'
000000000020bc4a         db  0x00 ; '.'
000000000020bc4b         db  0x00 ; '.'
000000000020bc4c         db  0x00 ; '.'
000000000020bc4d         db  0x00 ; '.'
000000000020bc4e         db  0x00 ; '.'
000000000020bc4f         db  0x00 ; '.'
000000000020bc50         db  0xf0 ; '.'
000000000020bc51         db  0x12 ; '.'
000000000020bc52         db  0x00 ; '.'
000000000020bc53         db  0x00 ; '.'
000000000020bc54         db  0x00 ; '.'
000000000020bc55         db  0x00 ; '.'
000000000020bc56         db  0x00 ; '.'
000000000020bc57         db  0x00 ; '.'
000000000020bc58         db  0x0d ; '.'
000000000020bc59         db  0x00 ; '.'
000000000020bc5a         db  0x00 ; '.'
000000000020bc5b         db  0x00 ; '.'
000000000020bc5c         db  0x00 ; '.'
000000000020bc5d         db  0x00 ; '.'
000000000020bc5e         db  0x00 ; '.'
000000000020bc5f         db  0x00 ; '.'
000000000020bc60         db  0xf0 ; '.'
000000000020bc61         db  0x82 ; '.'
000000000020bc62         db  0x00 ; '.'
000000000020bc63         db  0x00 ; '.'
000000000020bc64         db  0x00 ; '.'
000000000020bc65         db  0x00 ; '.'
000000000020bc66         db  0x00 ; '.'
000000000020bc67         db  0x00 ; '.'
000000000020bc68         db  0x19 ; '.'
000000000020bc69         db  0x00 ; '.'
000000000020bc6a         db  0x00 ; '.'
000000000020bc6b         db  0x00 ; '.'
000000000020bc6c         db  0x00 ; '.'
000000000020bc6d         db  0x00 ; '.'
000000000020bc6e         db  0x00 ; '.'
000000000020bc6f         db  0x00 ; '.'
000000000020bc70         db  0xd0 ; '.'
000000000020bc71         db  0xbb ; '.'
000000000020bc72         db  0x20 ; ' '
000000000020bc73         db  0x00 ; '.'
000000000020bc74         db  0x00 ; '.'
000000000020bc75         db  0x00 ; '.'
000000000020bc76         db  0x00 ; '.'
000000000020bc77         db  0x00 ; '.'
000000000020bc78         db  0x1b ; '.'
000000000020bc79         db  0x00 ; '.'
000000000020bc7a         db  0x00 ; '.'
000000000020bc7b         db  0x00 ; '.'
000000000020bc7c         db  0x00 ; '.'
000000000020bc7d         db  0x00 ; '.'
000000000020bc7e         db  0x00 ; '.'
000000000020bc7f         db  0x00 ; '.'
000000000020bc80         db  0x08 ; '.'
000000000020bc81         db  0x00 ; '.'
000000000020bc82         db  0x00 ; '.'
000000000020bc83         db  0x00 ; '.'
000000000020bc84         db  0x00 ; '.'
000000000020bc85         db  0x00 ; '.'
000000000020bc86         db  0x00 ; '.'
000000000020bc87         db  0x00 ; '.'
000000000020bc88         db  0x1a ; '.'
000000000020bc89         db  0x00 ; '.'
000000000020bc8a         db  0x00 ; '.'
000000000020bc8b         db  0x00 ; '.'
000000000020bc8c         db  0x00 ; '.'
000000000020bc8d         db  0x00 ; '.'
000000000020bc8e         db  0x00 ; '.'
000000000020bc8f         db  0x00 ; '.'
000000000020bc90         db  0xd8 ; '.'
000000000020bc91         db  0xbb ; '.'
000000000020bc92         db  0x20 ; ' '
000000000020bc93         db  0x00 ; '.'
000000000020bc94         db  0x00 ; '.'
000000000020bc95         db  0x00 ; '.'
000000000020bc96         db  0x00 ; '.'
000000000020bc97         db  0x00 ; '.'
000000000020bc98         db  0x1c ; '.'
000000000020bc99         db  0x00 ; '.'
000000000020bc9a         db  0x00 ; '.'
000000000020bc9b         db  0x00 ; '.'
000000000020bc9c         db  0x00 ; '.'
000000000020bc9d         db  0x00 ; '.'
000000000020bc9e         db  0x00 ; '.'
000000000020bc9f         db  0x00 ; '.'
000000000020bca0         db  0x08 ; '.'
000000000020bca1         db  0x00 ; '.'
000000000020bca2         db  0x00 ; '.'
000000000020bca3         db  0x00 ; '.'
000000000020bca4         db  0x00 ; '.'
000000000020bca5         db  0x00 ; '.'
000000000020bca6         db  0x00 ; '.'
000000000020bca7         db  0x00 ; '.'
000000000020bca8         db  0xf5 ; '.'
000000000020bca9         db  0xfe ; '.'
000000000020bcaa         db  0xff ; '.'
000000000020bcab         db  0x6f ; 'o'
000000000020bcac         db  0x00 ; '.'
000000000020bcad         db  0x00 ; '.'
000000000020bcae         db  0x00 ; '.'
000000000020bcaf         db  0x00 ; '.'
000000000020bcb0         db  0x98 ; '.'
000000000020bcb1         db  0x02 ; '.'
000000000020bcb2         db  0x00 ; '.'
000000000020bcb3         db  0x00 ; '.'
000000000020bcb4         db  0x00 ; '.'
000000000020bcb5         db  0x00 ; '.'
000000000020bcb6         db  0x00 ; '.'
000000000020bcb7         db  0x00 ; '.'
000000000020bcb8         db  0x05 ; '.'
000000000020bcb9         db  0x00 ; '.'
000000000020bcba         db  0x00 ; '.'
000000000020bcbb         db  0x00 ; '.'
000000000020bcbc         db  0x00 ; '.'
000000000020bcbd         db  0x00 ; '.'
000000000020bcbe         db  0x00 ; '.'
000000000020bcbf         db  0x00 ; '.'
000000000020bcc0         db  0x78 ; 'x'
000000000020bcc1         db  0x08 ; '.'
000000000020bcc2         db  0x00 ; '.'
000000000020bcc3         db  0x00 ; '.'
000000000020bcc4         db  0x00 ; '.'
000000000020bcc5         db  0x00 ; '.'
000000000020bcc6         db  0x00 ; '.'
000000000020bcc7         db  0x00 ; '.'
000000000020bcc8         db  0x06 ; '.'
000000000020bcc9         db  0x00 ; '.'
000000000020bcca         db  0x00 ; '.'
000000000020bccb         db  0x00 ; '.'
000000000020bccc         db  0x00 ; '.'
000000000020bccd         db  0x00 ; '.'
000000000020bcce         db  0x00 ; '.'
000000000020bccf         db  0x00 ; '.'
000000000020bcd0         db  0xd8 ; '.'
000000000020bcd1         db  0x02 ; '.'
000000000020bcd2         db  0x00 ; '.'
000000000020bcd3         db  0x00 ; '.'
000000000020bcd4         db  0x00 ; '.'
000000000020bcd5         db  0x00 ; '.'
000000000020bcd6         db  0x00 ; '.'
000000000020bcd7         db  0x00 ; '.'
000000000020bcd8         db  0x0a ; '.'
000000000020bcd9         db  0x00 ; '.'
000000000020bcda         db  0x00 ; '.'
000000000020bcdb         db  0x00 ; '.'
000000000020bcdc         db  0x00 ; '.'
000000000020bcdd         db  0x00 ; '.'
000000000020bcde         db  0x00 ; '.'
000000000020bcdf         db  0x00 ; '.'
000000000020bce0         db  0xc3 ; '.'
000000000020bce1         db  0x02 ; '.'
000000000020bce2         db  0x00 ; '.'
000000000020bce3         db  0x00 ; '.'
000000000020bce4         db  0x00 ; '.'
000000000020bce5         db  0x00 ; '.'
000000000020bce6         db  0x00 ; '.'
000000000020bce7         db  0x00 ; '.'
000000000020bce8         db  0x0b ; '.'
000000000020bce9         db  0x00 ; '.'
000000000020bcea         db  0x00 ; '.'
000000000020bceb         db  0x00 ; '.'
000000000020bcec         db  0x00 ; '.'
000000000020bced         db  0x00 ; '.'
000000000020bcee         db  0x00 ; '.'
000000000020bcef         db  0x00 ; '.'
000000000020bcf0         db  0x18 ; '.'
000000000020bcf1         db  0x00 ; '.'
000000000020bcf2         db  0x00 ; '.'
000000000020bcf3         db  0x00 ; '.'
000000000020bcf4         db  0x00 ; '.'
000000000020bcf5         db  0x00 ; '.'
000000000020bcf6         db  0x00 ; '.'
000000000020bcf7         db  0x00 ; '.'
000000000020bcf8         db  0x15 ; '.'
000000000020bcf9         db  0x00 ; '.'
000000000020bcfa         db  0x00 ; '.'
000000000020bcfb         db  0x00 ; '.'
000000000020bcfc         db  0x00 ; '.'
000000000020bcfd         db  0x00 ; '.'
000000000020bcfe         db  0x00 ; '.'
000000000020bcff         db  0x00 ; '.'
000000000020bd00         db  0x00 ; '.'
000000000020bd01         db  0x00 ; '.'
000000000020bd02         db  0x00 ; '.'
000000000020bd03         db  0x00 ; '.'
000000000020bd04         db  0x00 ; '.'
000000000020bd05         db  0x00 ; '.'
000000000020bd06         db  0x00 ; '.'
000000000020bd07         db  0x00 ; '.'
000000000020bd08         db  0x03 ; '.'
000000000020bd09         db  0x00 ; '.'
000000000020bd0a         db  0x00 ; '.'
000000000020bd0b         db  0x00 ; '.'
000000000020bd0c         db  0x00 ; '.'
000000000020bd0d         db  0x00 ; '.'
000000000020bd0e         db  0x00 ; '.'
000000000020bd0f         db  0x00 ; '.'
000000000020bd10         db  0x28 ; '('
000000000020bd11         db  0xbe ; '.'
000000000020bd12         db  0x20 ; ' '
000000000020bd13         db  0x00 ; '.'
000000000020bd14         db  0x00 ; '.'
000000000020bd15         db  0x00 ; '.'
000000000020bd16         db  0x00 ; '.'
000000000020bd17         db  0x00 ; '.'
000000000020bd18         db  0x02 ; '.'
000000000020bd19         db  0x00 ; '.'
000000000020bd1a         db  0x00 ; '.'
000000000020bd1b         db  0x00 ; '.'
000000000020bd1c         db  0x00 ; '.'
000000000020bd1d         db  0x00 ; '.'
000000000020bd1e         db  0x00 ; '.'
000000000020bd1f         db  0x00 ; '.'
000000000020bd20         db  0x80 ; '.'
000000000020bd21         db  0x04 ; '.'
000000000020bd22         db  0x00 ; '.'
000000000020bd23         db  0x00 ; '.'
000000000020bd24         db  0x00 ; '.'
000000000020bd25         db  0x00 ; '.'
000000000020bd26         db  0x00 ; '.'
000000000020bd27         db  0x00 ; '.'
000000000020bd28         db  0x14 ; '.'
000000000020bd29         db  0x00 ; '.'
000000000020bd2a         db  0x00 ; '.'
000000000020bd2b         db  0x00 ; '.'
000000000020bd2c         db  0x00 ; '.'
000000000020bd2d         db  0x00 ; '.'
000000000020bd2e         db  0x00 ; '.'
000000000020bd2f         db  0x00 ; '.'
000000000020bd30         db  0x07 ; '.'
000000000020bd31         db  0x00 ; '.'
000000000020bd32         db  0x00 ; '.'
000000000020bd33         db  0x00 ; '.'
000000000020bd34         db  0x00 ; '.'
000000000020bd35         db  0x00 ; '.'
000000000020bd36         db  0x00 ; '.'
000000000020bd37         db  0x00 ; '.'
000000000020bd38         db  0x17 ; '.'
000000000020bd39         db  0x00 ; '.'
000000000020bd3a         db  0x00 ; '.'
000000000020bd3b         db  0x00 ; '.'
000000000020bd3c         db  0x00 ; '.'
000000000020bd3d         db  0x00 ; '.'
000000000020bd3e         db  0x00 ; '.'
000000000020bd3f         db  0x00 ; '.'
000000000020bd40         db  0x70 ; 'p'
000000000020bd41         db  0x0e ; '.'
000000000020bd42         db  0x00 ; '.'
000000000020bd43         db  0x00 ; '.'
000000000020bd44         db  0x00 ; '.'
000000000020bd45         db  0x00 ; '.'
000000000020bd46         db  0x00 ; '.'
000000000020bd47         db  0x00 ; '.'
000000000020bd48         db  0x07 ; '.'
000000000020bd49         db  0x00 ; '.'
000000000020bd4a         db  0x00 ; '.'
000000000020bd4b         db  0x00 ; '.'
000000000020bd4c         db  0x00 ; '.'
000000000020bd4d         db  0x00 ; '.'
000000000020bd4e         db  0x00 ; '.'
000000000020bd4f         db  0x00 ; '.'
000000000020bd50         db  0x18 ; '.'
000000000020bd51         db  0x0c ; '.'
000000000020bd52         db  0x00 ; '.'
000000000020bd53         db  0x00 ; '.'
000000000020bd54         db  0x00 ; '.'
000000000020bd55         db  0x00 ; '.'
000000000020bd56         db  0x00 ; '.'
000000000020bd57         db  0x00 ; '.'
000000000020bd58         db  0x08 ; '.'
000000000020bd59         db  0x00 ; '.'
000000000020bd5a         db  0x00 ; '.'
000000000020bd5b         db  0x00 ; '.'
000000000020bd5c         db  0x00 ; '.'
000000000020bd5d         db  0x00 ; '.'
000000000020bd5e         db  0x00 ; '.'
000000000020bd5f         db  0x00 ; '.'
000000000020bd60         db  0x58 ; 'X'
000000000020bd61         db  0x02 ; '.'
000000000020bd62         db  0x00 ; '.'
000000000020bd63         db  0x00 ; '.'
000000000020bd64         db  0x00 ; '.'
000000000020bd65         db  0x00 ; '.'
000000000020bd66         db  0x00 ; '.'
000000000020bd67         db  0x00 ; '.'
000000000020bd68         db  0x09 ; '.'
000000000020bd69         db  0x00 ; '.'
000000000020bd6a         db  0x00 ; '.'
000000000020bd6b         db  0x00 ; '.'
000000000020bd6c         db  0x00 ; '.'
000000000020bd6d         db  0x00 ; '.'
000000000020bd6e         db  0x00 ; '.'
000000000020bd6f         db  0x00 ; '.'
000000000020bd70         db  0x18 ; '.'
000000000020bd71         db  0x00 ; '.'
000000000020bd72         db  0x00 ; '.'
000000000020bd73         db  0x00 ; '.'
000000000020bd74         db  0x00 ; '.'
000000000020bd75         db  0x00 ; '.'
000000000020bd76         db  0x00 ; '.'
000000000020bd77         db  0x00 ; '.'
000000000020bd78         db  0x1e ; '.'
000000000020bd79         db  0x00 ; '.'
000000000020bd7a         db  0x00 ; '.'
000000000020bd7b         db  0x00 ; '.'
000000000020bd7c         db  0x00 ; '.'
000000000020bd7d         db  0x00 ; '.'
000000000020bd7e         db  0x00 ; '.'
000000000020bd7f         db  0x00 ; '.'
000000000020bd80         db  0x08 ; '.'
000000000020bd81         db  0x00 ; '.'
000000000020bd82         db  0x00 ; '.'
000000000020bd83         db  0x00 ; '.'
000000000020bd84         db  0x00 ; '.'
000000000020bd85         db  0x00 ; '.'
000000000020bd86         db  0x00 ; '.'
000000000020bd87         db  0x00 ; '.'
000000000020bd88         db  0xfb ; '.'
000000000020bd89         db  0xff ; '.'
000000000020bd8a         db  0xff ; '.'
000000000020bd8b         db  0x6f ; 'o'
000000000020bd8c         db  0x00 ; '.'
000000000020bd8d         db  0x00 ; '.'
000000000020bd8e         db  0x00 ; '.'
000000000020bd8f         db  0x00 ; '.'
000000000020bd90         db  0x01 ; '.'
000000000020bd91         db  0x00 ; '.'
000000000020bd92         db  0x00 ; '.'
000000000020bd93         db  0x08 ; '.'
000000000020bd94         db  0x00 ; '.'
000000000020bd95         db  0x00 ; '.'
000000000020bd96         db  0x00 ; '.'
000000000020bd97         db  0x00 ; '.'
000000000020bd98         db  0xfe ; '.'
000000000020bd99         db  0xff ; '.'
000000000020bd9a         db  0xff ; '.'
000000000020bd9b         db  0x6f ; 'o'
000000000020bd9c         db  0x00 ; '.'
000000000020bd9d         db  0x00 ; '.'
000000000020bd9e         db  0x00 ; '.'
000000000020bd9f         db  0x00 ; '.'
000000000020bda0         db  0xb8 ; '.'
000000000020bda1         db  0x0b ; '.'
000000000020bda2         db  0x00 ; '.'
000000000020bda3         db  0x00 ; '.'
000000000020bda4         db  0x00 ; '.'
000000000020bda5         db  0x00 ; '.'
000000000020bda6         db  0x00 ; '.'
000000000020bda7         db  0x00 ; '.'
000000000020bda8         db  0xff ; '.'
000000000020bda9         db  0xff ; '.'
000000000020bdaa         db  0xff ; '.'
000000000020bdab         db  0x6f ; 'o'
000000000020bdac         db  0x00 ; '.'
000000000020bdad         db  0x00 ; '.'
000000000020bdae         db  0x00 ; '.'
000000000020bdaf         db  0x00 ; '.'
000000000020bdb0         db  0x01 ; '.'
000000000020bdb1         db  0x00 ; '.'
000000000020bdb2         db  0x00 ; '.'
000000000020bdb3         db  0x00 ; '.'
000000000020bdb4         db  0x00 ; '.'
000000000020bdb5         db  0x00 ; '.'
000000000020bdb6         db  0x00 ; '.'
000000000020bdb7         db  0x00 ; '.'
000000000020bdb8         db  0xf0 ; '.'
000000000020bdb9         db  0xff ; '.'
000000000020bdba         db  0xff ; '.'
000000000020bdbb         db  0x6f ; 'o'
000000000020bdbc         db  0x00 ; '.'
000000000020bdbd         db  0x00 ; '.'
000000000020bdbe         db  0x00 ; '.'
000000000020bdbf         db  0x00 ; '.'
000000000020bdc0         db  0x3c ; '<'
000000000020bdc1         db  0x0b ; '.'
000000000020bdc2         db  0x00 ; '.'
000000000020bdc3         db  0x00 ; '.'
000000000020bdc4         db  0x00 ; '.'
000000000020bdc5         db  0x00 ; '.'
000000000020bdc6         db  0x00 ; '.'
000000000020bdc7         db  0x00 ; '.'
000000000020bdc8         db  0xf9 ; '.'
000000000020bdc9         db  0xff ; '.'
000000000020bdca         db  0xff ; '.'
000000000020bdcb         db  0x6f ; 'o'
000000000020bdcc         db  0x00 ; '.'
000000000020bdcd         db  0x00 ; '.'
000000000020bdce         db  0x00 ; '.'
000000000020bdcf         db  0x00 ; '.'
000000000020bdd0         db  0x10 ; '.'
000000000020bdd1         db  0x00 ; '.'
000000000020bdd2         db  0x00 ; '.'
000000000020bdd3         db  0x00 ; '.'
000000000020bdd4         db  0x00 ; '.'
000000000020bdd5         db  0x00 ; '.'
000000000020bdd6         db  0x00 ; '.'
000000000020bdd7         db  0x00 ; '.'
000000000020bdd8         db  0x00 ; '.'
000000000020bdd9         db  0x00 ; '.'
000000000020bdda         db  0x00 ; '.'
000000000020bddb         db  0x00 ; '.'
000000000020bddc         db  0x00 ; '.'
000000000020bddd         db  0x00 ; '.'
000000000020bdde         db  0x00 ; '.'
000000000020bddf         db  0x00 ; '.'
000000000020bde0         db  0x00 ; '.'
000000000020bde1         db  0x00 ; '.'
000000000020bde2         db  0x00 ; '.'
000000000020bde3         db  0x00 ; '.'
000000000020bde4         db  0x00 ; '.'
000000000020bde5         db  0x00 ; '.'
000000000020bde6         db  0x00 ; '.'
000000000020bde7         db  0x00 ; '.'
000000000020bde8         db  0x00 ; '.'
000000000020bde9         db  0x00 ; '.'
000000000020bdea         db  0x00 ; '.'
000000000020bdeb         db  0x00 ; '.'
000000000020bdec         db  0x00 ; '.'
000000000020bded         db  0x00 ; '.'
000000000020bdee         db  0x00 ; '.'
000000000020bdef         db  0x00 ; '.'
000000000020bdf0         db  0x00 ; '.'
000000000020bdf1         db  0x00 ; '.'
000000000020bdf2         db  0x00 ; '.'
000000000020bdf3         db  0x00 ; '.'
000000000020bdf4         db  0x00 ; '.'
000000000020bdf5         db  0x00 ; '.'
000000000020bdf6         db  0x00 ; '.'
000000000020bdf7         db  0x00 ; '.'
000000000020bdf8         db  0x00 ; '.'
000000000020bdf9         db  0x00 ; '.'
000000000020bdfa         db  0x00 ; '.'
000000000020bdfb         db  0x00 ; '.'
000000000020bdfc         db  0x00 ; '.'
000000000020bdfd         db  0x00 ; '.'
000000000020bdfe         db  0x00 ; '.'
000000000020bdff         db  0x00 ; '.'
000000000020be00         db  0x00 ; '.'
000000000020be01         db  0x00 ; '.'
000000000020be02         db  0x00 ; '.'
000000000020be03         db  0x00 ; '.'
000000000020be04         db  0x00 ; '.'
000000000020be05         db  0x00 ; '.'
000000000020be06         db  0x00 ; '.'
000000000020be07         db  0x00 ; '.'
000000000020be08         db  0x00 ; '.'
000000000020be09         db  0x00 ; '.'
000000000020be0a         db  0x00 ; '.'
000000000020be0b         db  0x00 ; '.'
000000000020be0c         db  0x00 ; '.'
000000000020be0d         db  0x00 ; '.'
000000000020be0e         db  0x00 ; '.'
000000000020be0f         db  0x00 ; '.'
000000000020be10         db  0x00 ; '.'
000000000020be11         db  0x00 ; '.'
000000000020be12         db  0x00 ; '.'
000000000020be13         db  0x00 ; '.'
000000000020be14         db  0x00 ; '.'
000000000020be15         db  0x00 ; '.'
000000000020be16         db  0x00 ; '.'
000000000020be17         db  0x00 ; '.'
000000000020be18         db  0x00 ; '.'
000000000020be19         db  0x00 ; '.'
000000000020be1a         db  0x00 ; '.'
000000000020be1b         db  0x00 ; '.'
000000000020be1c         db  0x00 ; '.'
000000000020be1d         db  0x00 ; '.'
000000000020be1e         db  0x00 ; '.'
000000000020be1f         db  0x00 ; '.'
000000000020be20         db  0x00 ; '.'
000000000020be21         db  0x00 ; '.'
000000000020be22         db  0x00 ; '.'
000000000020be23         db  0x00 ; '.'
000000000020be24         db  0x00 ; '.'
000000000020be25         db  0x00 ; '.'
000000000020be26         db  0x00 ; '.'
000000000020be27         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20be28; 0x20bfe8[ (448 bytes)
        ; File offset : [48680; 49128[ (448 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020be28         db  0x38 ; '8'
000000000020be29         db  0xbc ; '.'
000000000020be2a         db  0x20 ; ' '
000000000020be2b         db  0x00 ; '.'
000000000020be2c         db  0x00 ; '.'
000000000020be2d         db  0x00 ; '.'
000000000020be2e         db  0x00 ; '.'
000000000020be2f         db  0x00 ; '.'
                     qword_20be30:
000000000020be30         dq         0x0000000000000000                          ; DATA XREF=0x1310
000000000020be38         db  0x00 ; '.'                                         ; DATA XREF=0x1316
000000000020be39         db  0x00 ; '.'
000000000020be3a         db  0x00 ; '.'
000000000020be3b         db  0x00 ; '.'
000000000020be3c         db  0x00 ; '.'
000000000020be3d         db  0x00 ; '.'
000000000020be3e         db  0x00 ; '.'
000000000020be3f         db  0x00 ; '.'
                     __snprintf_chk@GOT:        // __snprintf_chk
000000000020be40         dq         0x000000000020c220                          ; DATA XREF=j___snprintf_chk
                     free@GOT:        // free
000000000020be48         dq         0x000000000020c228                          ; DATA XREF=j_free
                     abort@GOT:        // abort
000000000020be50         dq         0x000000000020c230                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020be58         dq         0x000000000020c238                          ; DATA XREF=j___errno_location
                     error_at_line@GOT:        // error_at_line
000000000020be60         dq         0x000000000020c240                          ; DATA XREF=j_error_at_line
                     strncmp@GOT:        // strncmp
000000000020be68         dq         0x000000000020c248                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020be70         dq         0x000000000020c258                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000020be78         dq         0x000000000020c260                          ; DATA XREF=j___fpending
                     isatty@GOT:        // isatty
000000000020be80         dq         0x000000000020c268                          ; DATA XREF=j_isatty
                     textdomain@GOT:        // textdomain
000000000020be88         dq         0x000000000020c270                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020be90         dq         0x000000000020c278                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020be98         dq         0x000000000020c280                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020bea0         dq         0x000000000020c288                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020bea8         dq         0x000000000020c290                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020beb0         dq         0x000000000020c298                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
000000000020beb8         dq         0x000000000020c2a0                          ; DATA XREF=j___lxstat
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020bec0         dq         0x000000000020c2a8                          ; DATA XREF=j___stack_chk_fail
                     mbrtowc@GOT:        // mbrtowc
000000000020bec8         dq         0x000000000020c2b0                          ; DATA XREF=j_mbrtowc
                     strrchr@GOT:        // strrchr
000000000020bed0         dq         0x000000000020c2b8                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020bed8         dq         0x000000000020c2c0                          ; DATA XREF=j_lseek
                     memset@GOT:        // memset
000000000020bee0         dq         0x000000000020c2c8                          ; DATA XREF=j_memset
                     geteuid@GOT:        // geteuid
000000000020bee8         dq         0x000000000020c2d0                          ; DATA XREF=j_geteuid
                     memcmp@GOT:        // memcmp
000000000020bef0         dq         0x000000000020c2e0                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020bef8         dq         0x000000000020c2e8                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020bf00         dq         0x000000000020c2f0                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
000000000020bf08         dq         0x000000000020c2f8                          ; DATA XREF=j_strcmp
                     strtol@GOT:        // strtol
000000000020bf10         dq         0x000000000020c308                          ; DATA XREF=j_strtol
                     memcpy@GOT:        // memcpy
000000000020bf18         dq         0x000000000020c310                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020bf20         dq         0x000000000020c318                          ; DATA XREF=j_fileno
                     __xstat@GOT:        // __xstat
000000000020bf28         dq         0x000000000020c320                          ; DATA XREF=j___xstat
                     malloc@GOT:        // malloc
000000000020bf30         dq         0x000000000020c328                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020bf38         dq         0x000000000020c330                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020bf40         dq         0x000000000020c338                          ; DATA XREF=j_nl_langinfo
                     getegid@GOT:        // getegid
000000000020bf48         dq         0x000000000020c340                          ; DATA XREF=j_getegid
                     __freading@GOT:        // __freading
000000000020bf50         dq         0x000000000020c348                          ; DATA XREF=j___freading
                     realloc@GOT:        // realloc
000000000020bf58         dq         0x000000000020c350                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020bf60         dq         0x000000000020c358                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020bf68         dq         0x000000000020c360                          ; DATA XREF=j___printf_chk
                     error@GOT:        // error
000000000020bf70         dq         0x000000000020c368                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
000000000020bf78         dq         0x000000000020c370                          ; DATA XREF=j_fseeko
                     euidaccess@GOT:        // euidaccess
000000000020bf80         dq         0x000000000020c378                          ; DATA XREF=j_euidaccess
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020bf88         dq         0x000000000020c380                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020bf90         dq         0x000000000020c388                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020bf98         dq         0x000000000020c390                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020bfa0         dq         0x000000000020c398                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020bfa8         dq         0x000000000020c3a8                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020bfb0         dq         0x000000000020c3b0                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020bfb8         dq         0x000000000020c3c0                          ; DATA XREF=j___ctype_b_loc
                     qword_20bfc0:
000000000020bfc0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020bfc8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020bfc9         db  0x00 ; '.'
000000000020bfca         db  0x00 ; '.'
000000000020bfcb         db  0x00 ; '.'
000000000020bfcc         db  0x00 ; '.'
000000000020bfcd         db  0x00 ; '.'
000000000020bfce         db  0x00 ; '.'
000000000020bfcf         db  0x00 ; '.'
                     qword_20bfd0:
000000000020bfd0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20bfd8:
000000000020bfd8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20bfe0:
000000000020bfe0         dq         0x0000000000000000                          ; DATA XREF=j_qword_20bfe0, __do_global_dtors_aux+9
000000000020bfe8         db  0x00 ; '.'
000000000020bfe9         db  0x00 ; '.'
000000000020bfea         db  0x00 ; '.'
000000000020bfeb         db  0x00 ; '.'
000000000020bfec         db  0x00 ; '.'
000000000020bfed         db  0x00 ; '.'
000000000020bfee         db  0x00 ; '.'
000000000020bfef         db  0x00 ; '.'
000000000020bff0         db  0x00 ; '.'
000000000020bff1         db  0x00 ; '.'
000000000020bff2         db  0x00 ; '.'
000000000020bff3         db  0x00 ; '.'
000000000020bff4         db  0x00 ; '.'
000000000020bff5         db  0x00 ; '.'
000000000020bff6         db  0x00 ; '.'
000000000020bff7         db  0x00 ; '.'
000000000020bff8         db  0x00 ; '.'
000000000020bff9         db  0x00 ; '.'
000000000020bffa         db  0x00 ; '.'
000000000020bffb         db  0x00 ; '.'
000000000020bffc         db  0x00 ; '.'
000000000020bffd         db  0x00 ; '.'
000000000020bffe         db  0x00 ; '.'
000000000020bfff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20c000; 0x20c080[ (128 bytes)
        ; File offset : [49152; 49280[ (128 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020c000         db  0x00 ; '.'
000000000020c001         db  0x00 ; '.'
000000000020c002         db  0x00 ; '.'
000000000020c003         db  0x00 ; '.'
000000000020c004         db  0x00 ; '.'
000000000020c005         db  0x00 ; '.'
000000000020c006         db  0x00 ; '.'
000000000020c007         db  0x00 ; '.'
                     __dso_handle:
000000000020c008         dq         0x000000000020c008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     Version:
000000000020c010         dq         0x0000000000009333                          ; "8.31", DATA XREF=main+297
                     exit_failure:
000000000020c018         dd         0x00000001                                  ; DATA XREF=main+74, close_stdout+130, xalloc_die+23
000000000020c01c         db  0x00 ; '.'
000000000020c01d         db  0x00 ; '.'
000000000020c01e         db  0x00 ; '.'
000000000020c01f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020c020         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020c021         db  0x00 ; '.'
000000000020c022         db  0x00 ; '.'
000000000020c023         db  0x00 ; '.'
000000000020c024         db  0x00 ; '.'
000000000020c025         db  0x00 ; '.'
000000000020c026         db  0x00 ; '.'
000000000020c027         db  0x00 ; '.'
000000000020c028         db  0x00 ; '.'
000000000020c029         db  0x00 ; '.'
000000000020c02a         db  0x00 ; '.'
000000000020c02b         db  0x00 ; '.'
000000000020c02c         db  0x00 ; '.'
000000000020c02d         db  0x00 ; '.'
000000000020c02e         db  0x00 ; '.'
000000000020c02f         db  0x00 ; '.'
000000000020c030         db  0x00 ; '.'
000000000020c031         db  0x00 ; '.'
000000000020c032         db  0x00 ; '.'
000000000020c033         db  0x00 ; '.'
000000000020c034         db  0x00 ; '.'
000000000020c035         db  0x00 ; '.'
000000000020c036         db  0x00 ; '.'
000000000020c037         db  0x00 ; '.'
000000000020c038         db  0x00 ; '.'
000000000020c039         db  0x00 ; '.'
000000000020c03a         db  0x00 ; '.'
000000000020c03b         db  0x00 ; '.'
000000000020c03c         db  0x00 ; '.'
000000000020c03d         db  0x00 ; '.'
000000000020c03e         db  0x00 ; '.'
000000000020c03f         db  0x00 ; '.'
000000000020c040         db  0x00 ; '.'
000000000020c041         db  0x00 ; '.'
000000000020c042         db  0x00 ; '.'
000000000020c043         db  0x00 ; '.'
000000000020c044         db  0x00 ; '.'
000000000020c045         db  0x00 ; '.'
000000000020c046         db  0x00 ; '.'
000000000020c047         db  0x00 ; '.'
000000000020c048         db  0x00 ; '.'
000000000020c049         db  0x00 ; '.'
000000000020c04a         db  0x00 ; '.'
000000000020c04b         db  0x00 ; '.'
000000000020c04c         db  0x00 ; '.'
000000000020c04d         db  0x00 ; '.'
000000000020c04e         db  0x00 ; '.'
000000000020c04f         db  0x00 ; '.'
000000000020c050         db  0x00 ; '.'
000000000020c051         db  0x00 ; '.'
000000000020c052         db  0x00 ; '.'
000000000020c053         db  0x00 ; '.'
000000000020c054         db  0x00 ; '.'
000000000020c055         db  0x00 ; '.'
000000000020c056         db  0x00 ; '.'
000000000020c057         db  0x00 ; '.'
                     nslots:
000000000020c058         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020c05c         align      32
                     slotvec:
000000000020c060         dq         0x000000000020c070                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020c068         db  0x00 ; '.'
000000000020c069         db  0x00 ; '.'
000000000020c06a         db  0x00 ; '.'
000000000020c06b         db  0x00 ; '.'
000000000020c06c         db  0x00 ; '.'
000000000020c06d         db  0x00 ; '.'
000000000020c06e         db  0x00 ; '.'
000000000020c06f         db  0x00 ; '.'
                     slotvec0:
000000000020c070         dq         1.26481e-321, 1.06053e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20c080; 0x20c218[ (408 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020c080         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020c081         db  0x00 ; '.'
000000000020c082         db  0x00 ; '.'
000000000020c083         db  0x00 ; '.'
000000000020c084         db  0x00 ; '.'
000000000020c085         db  0x00 ; '.'
000000000020c086         db  0x00 ; '.'
000000000020c087         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020c088         db  0x00 ; '.'                                         ; DATA XREF=main+304, usage+68, usage+105, usage+142, usage+179, usage+216, usage+253, usage+290, usage+327, usage+364, usage+401
000000000020c089         db  0x00 ; '.'
000000000020c08a         db  0x00 ; '.'
000000000020c08b         db  0x00 ; '.'
000000000020c08c         db  0x00 ; '.'
000000000020c08d         db  0x00 ; '.'
000000000020c08e         db  0x00 ; '.'
000000000020c08f         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020c090         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020c091         db  0x00 ; '.'
000000000020c092         db  0x00 ; '.'
000000000020c093         db  0x00 ; '.'
000000000020c094         db  0x00 ; '.'
000000000020c095         db  0x00 ; '.'
000000000020c096         db  0x00 ; '.'
000000000020c097         db  0x00 ; '.'
000000000020c098         db  0x00 ; '.'
000000000020c099         db  0x00 ; '.'
000000000020c09a         db  0x00 ; '.'
000000000020c09b         db  0x00 ; '.'
000000000020c09c         db  0x00 ; '.'
000000000020c09d         db  0x00 ; '.'
000000000020c09e         db  0x00 ; '.'
000000000020c09f         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020c0a0         db  0x00 ; '.'                                         ; DATA XREF=usage+36, close_stdout+44, set_program_name+125
000000000020c0a1         db  0x00 ; '.'
000000000020c0a2         db  0x00 ; '.'
000000000020c0a3         db  0x00 ; '.'
000000000020c0a4         db  0x00 ; '.'
000000000020c0a5         db  0x00 ; '.'
000000000020c0a6         db  0x00 ; '.'
000000000020c0a7         db  0x00 ; '.'
                     completed.7697:
000000000020c0a8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020c0a9         db  0x00 ; '.'
000000000020c0aa         db  0x00 ; '.'
000000000020c0ab         db  0x00 ; '.'
000000000020c0ac         db  0x00 ; '.'
000000000020c0ad         db  0x00 ; '.'
000000000020c0ae         db  0x00 ; '.'
000000000020c0af         db  0x00 ; '.'
                     argv:
000000000020c0b0         db  0x00 ; '.'                                         ; DATA XREF=main+92, main+402, beyond+7, binary_operator+70, binary_operator+812, binary_operator+862, unary_operator+9, two_arguments+7, posixtest+40, posixtest+165, or+64
000000000020c0b1         db  0x00 ; '.'
000000000020c0b2         db  0x00 ; '.'
000000000020c0b3         db  0x00 ; '.'
000000000020c0b4         db  0x00 ; '.'
000000000020c0b5         db  0x00 ; '.'
000000000020c0b6         db  0x00 ; '.'
000000000020c0b7         db  0x00 ; '.'
                     argc:
000000000020c0b8         db  0x00 ; '.'                                         ; DATA XREF=main+154, main+172, main+266, beyond, unary_advance+9, binary_operator+61, posixtest+96, posixtest+198, or+21, or+401, or+690
000000000020c0b9         db  0x00 ; '.'
000000000020c0ba         db  0x00 ; '.'
000000000020c0bb         db  0x00 ; '.'
                     pos:
000000000020c0bc         db  0x00 ; '.'                                         ; DATA XREF=main+144, main+165, main+276, unary_advance, unary_advance+15, unary_advance+26, binary_operator+19, binary_operator+52, binary_operator+180, binary_operator+217, binary_operator+272
000000000020c0bd         db  0x00 ; '.'
000000000020c0be         db  0x00 ; '.'
000000000020c0bf         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020c0c0         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020c0c1         db  0x00 ; '.'
000000000020c0c2         db  0x00 ; '.'
000000000020c0c3         db  0x00 ; '.'
000000000020c0c4         db  0x00 ; '.'
000000000020c0c5         db  0x00 ; '.'
000000000020c0c6         db  0x00 ; '.'
000000000020c0c7         db  0x00 ; '.'
                     file_name:
000000000020c0c8         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020c0c9         db  0x00 ; '.'
000000000020c0ca         db  0x00 ; '.'
000000000020c0cb         db  0x00 ; '.'
000000000020c0cc         db  0x00 ; '.'
000000000020c0cd         db  0x00 ; '.'
000000000020c0ce         db  0x00 ; '.'
000000000020c0cf         db  0x00 ; '.'
                     program_name:
000000000020c0d0         db  0x00 ; '.'                                         ; DATA XREF=usage+17, set_program_name+109
000000000020c0d1         db  0x00 ; '.'
000000000020c0d2         db  0x00 ; '.'
000000000020c0d3         db  0x00 ; '.'
000000000020c0d4         db  0x00 ; '.'
000000000020c0d5         db  0x00 ; '.'
000000000020c0d6         db  0x00 ; '.'
000000000020c0d7         db  0x00 ; '.'
000000000020c0d8         db  0x00 ; '.'
000000000020c0d9         db  0x00 ; '.'
000000000020c0da         db  0x00 ; '.'
000000000020c0db         db  0x00 ; '.'
000000000020c0dc         db  0x00 ; '.'
000000000020c0dd         db  0x00 ; '.'
000000000020c0de         db  0x00 ; '.'
000000000020c0df         db  0x00 ; '.'
                     slot0:
000000000020c0e0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020c0e1         db  0x00 ; '.'
000000000020c0e2         db  0x00 ; '.'
000000000020c0e3         db  0x00 ; '.'
000000000020c0e4         db  0x00 ; '.'
000000000020c0e5         db  0x00 ; '.'
000000000020c0e6         db  0x00 ; '.'
000000000020c0e7         db  0x00 ; '.'
000000000020c0e8         db  0x00 ; '.'
000000000020c0e9         db  0x00 ; '.'
000000000020c0ea         db  0x00 ; '.'
000000000020c0eb         db  0x00 ; '.'
000000000020c0ec         db  0x00 ; '.'
000000000020c0ed         db  0x00 ; '.'
000000000020c0ee         db  0x00 ; '.'
000000000020c0ef         db  0x00 ; '.'
000000000020c0f0         db  0x00 ; '.'
000000000020c0f1         db  0x00 ; '.'
000000000020c0f2         db  0x00 ; '.'
000000000020c0f3         db  0x00 ; '.'
000000000020c0f4         db  0x00 ; '.'
000000000020c0f5         db  0x00 ; '.'
000000000020c0f6         db  0x00 ; '.'
000000000020c0f7         db  0x00 ; '.'
000000000020c0f8         db  0x00 ; '.'
000000000020c0f9         db  0x00 ; '.'
000000000020c0fa         db  0x00 ; '.'
000000000020c0fb         db  0x00 ; '.'
000000000020c0fc         db  0x00 ; '.'
000000000020c0fd         db  0x00 ; '.'
000000000020c0fe         db  0x00 ; '.'
000000000020c0ff         db  0x00 ; '.'
000000000020c100         db  0x00 ; '.'
000000000020c101         db  0x00 ; '.'
000000000020c102         db  0x00 ; '.'
000000000020c103         db  0x00 ; '.'
000000000020c104         db  0x00 ; '.'
000000000020c105         db  0x00 ; '.'
000000000020c106         db  0x00 ; '.'
000000000020c107         db  0x00 ; '.'
000000000020c108         db  0x00 ; '.'
000000000020c109         db  0x00 ; '.'
000000000020c10a         db  0x00 ; '.'
000000000020c10b         db  0x00 ; '.'
000000000020c10c         db  0x00 ; '.'
000000000020c10d         db  0x00 ; '.'
000000000020c10e         db  0x00 ; '.'
000000000020c10f         db  0x00 ; '.'
000000000020c110         db  0x00 ; '.'
000000000020c111         db  0x00 ; '.'
000000000020c112         db  0x00 ; '.'
000000000020c113         db  0x00 ; '.'
000000000020c114         db  0x00 ; '.'
000000000020c115         db  0x00 ; '.'
000000000020c116         db  0x00 ; '.'
000000000020c117         db  0x00 ; '.'
000000000020c118         db  0x00 ; '.'
000000000020c119         db  0x00 ; '.'
000000000020c11a         db  0x00 ; '.'
000000000020c11b         db  0x00 ; '.'
000000000020c11c         db  0x00 ; '.'
000000000020c11d         db  0x00 ; '.'
000000000020c11e         db  0x00 ; '.'
000000000020c11f         db  0x00 ; '.'
000000000020c120         db  0x00 ; '.'
000000000020c121         db  0x00 ; '.'
000000000020c122         db  0x00 ; '.'
000000000020c123         db  0x00 ; '.'
000000000020c124         db  0x00 ; '.'
000000000020c125         db  0x00 ; '.'
000000000020c126         db  0x00 ; '.'
000000000020c127         db  0x00 ; '.'
000000000020c128         db  0x00 ; '.'
000000000020c129         db  0x00 ; '.'
000000000020c12a         db  0x00 ; '.'
000000000020c12b         db  0x00 ; '.'
000000000020c12c         db  0x00 ; '.'
000000000020c12d         db  0x00 ; '.'
000000000020c12e         db  0x00 ; '.'
000000000020c12f         db  0x00 ; '.'
000000000020c130         db  0x00 ; '.'
000000000020c131         db  0x00 ; '.'
000000000020c132         db  0x00 ; '.'
000000000020c133         db  0x00 ; '.'
000000000020c134         db  0x00 ; '.'
000000000020c135         db  0x00 ; '.'
000000000020c136         db  0x00 ; '.'
000000000020c137         db  0x00 ; '.'
000000000020c138         db  0x00 ; '.'
000000000020c139         db  0x00 ; '.'
000000000020c13a         db  0x00 ; '.'
000000000020c13b         db  0x00 ; '.'
000000000020c13c         db  0x00 ; '.'
000000000020c13d         db  0x00 ; '.'
000000000020c13e         db  0x00 ; '.'
000000000020c13f         db  0x00 ; '.'
000000000020c140         db  0x00 ; '.'
000000000020c141         db  0x00 ; '.'
000000000020c142         db  0x00 ; '.'
000000000020c143         db  0x00 ; '.'
000000000020c144         db  0x00 ; '.'
000000000020c145         db  0x00 ; '.'
000000000020c146         db  0x00 ; '.'
000000000020c147         db  0x00 ; '.'
000000000020c148         db  0x00 ; '.'
000000000020c149         db  0x00 ; '.'
000000000020c14a         db  0x00 ; '.'
000000000020c14b         db  0x00 ; '.'
000000000020c14c         db  0x00 ; '.'
000000000020c14d         db  0x00 ; '.'
000000000020c14e         db  0x00 ; '.'
000000000020c14f         db  0x00 ; '.'
000000000020c150         db  0x00 ; '.'
000000000020c151         db  0x00 ; '.'
000000000020c152         db  0x00 ; '.'
000000000020c153         db  0x00 ; '.'
000000000020c154         db  0x00 ; '.'
000000000020c155         db  0x00 ; '.'
000000000020c156         db  0x00 ; '.'
000000000020c157         db  0x00 ; '.'
000000000020c158         db  0x00 ; '.'
000000000020c159         db  0x00 ; '.'
000000000020c15a         db  0x00 ; '.'
000000000020c15b         db  0x00 ; '.'
000000000020c15c         db  0x00 ; '.'
000000000020c15d         db  0x00 ; '.'
000000000020c15e         db  0x00 ; '.'
000000000020c15f         db  0x00 ; '.'
000000000020c160         db  0x00 ; '.'
000000000020c161         db  0x00 ; '.'
000000000020c162         db  0x00 ; '.'
000000000020c163         db  0x00 ; '.'
000000000020c164         db  0x00 ; '.'
000000000020c165         db  0x00 ; '.'
000000000020c166         db  0x00 ; '.'
000000000020c167         db  0x00 ; '.'
000000000020c168         db  0x00 ; '.'
000000000020c169         db  0x00 ; '.'
000000000020c16a         db  0x00 ; '.'
000000000020c16b         db  0x00 ; '.'
000000000020c16c         db  0x00 ; '.'
000000000020c16d         db  0x00 ; '.'
000000000020c16e         db  0x00 ; '.'
000000000020c16f         db  0x00 ; '.'
000000000020c170         db  0x00 ; '.'
000000000020c171         db  0x00 ; '.'
000000000020c172         db  0x00 ; '.'
000000000020c173         db  0x00 ; '.'
000000000020c174         db  0x00 ; '.'
000000000020c175         db  0x00 ; '.'
000000000020c176         db  0x00 ; '.'
000000000020c177         db  0x00 ; '.'
000000000020c178         db  0x00 ; '.'
000000000020c179         db  0x00 ; '.'
000000000020c17a         db  0x00 ; '.'
000000000020c17b         db  0x00 ; '.'
000000000020c17c         db  0x00 ; '.'
000000000020c17d         db  0x00 ; '.'
000000000020c17e         db  0x00 ; '.'
000000000020c17f         db  0x00 ; '.'
000000000020c180         db  0x00 ; '.'
000000000020c181         db  0x00 ; '.'
000000000020c182         db  0x00 ; '.'
000000000020c183         db  0x00 ; '.'
000000000020c184         db  0x00 ; '.'
000000000020c185         db  0x00 ; '.'
000000000020c186         db  0x00 ; '.'
000000000020c187         db  0x00 ; '.'
000000000020c188         db  0x00 ; '.'
000000000020c189         db  0x00 ; '.'
000000000020c18a         db  0x00 ; '.'
000000000020c18b         db  0x00 ; '.'
000000000020c18c         db  0x00 ; '.'
000000000020c18d         db  0x00 ; '.'
000000000020c18e         db  0x00 ; '.'
000000000020c18f         db  0x00 ; '.'
000000000020c190         db  0x00 ; '.'
000000000020c191         db  0x00 ; '.'
000000000020c192         db  0x00 ; '.'
000000000020c193         db  0x00 ; '.'
000000000020c194         db  0x00 ; '.'
000000000020c195         db  0x00 ; '.'
000000000020c196         db  0x00 ; '.'
000000000020c197         db  0x00 ; '.'
000000000020c198         db  0x00 ; '.'
000000000020c199         db  0x00 ; '.'
000000000020c19a         db  0x00 ; '.'
000000000020c19b         db  0x00 ; '.'
000000000020c19c         db  0x00 ; '.'
000000000020c19d         db  0x00 ; '.'
000000000020c19e         db  0x00 ; '.'
000000000020c19f         db  0x00 ; '.'
000000000020c1a0         db  0x00 ; '.'
000000000020c1a1         db  0x00 ; '.'
000000000020c1a2         db  0x00 ; '.'
000000000020c1a3         db  0x00 ; '.'
000000000020c1a4         db  0x00 ; '.'
000000000020c1a5         db  0x00 ; '.'
000000000020c1a6         db  0x00 ; '.'
000000000020c1a7         db  0x00 ; '.'
000000000020c1a8         db  0x00 ; '.'
000000000020c1a9         db  0x00 ; '.'
000000000020c1aa         db  0x00 ; '.'
000000000020c1ab         db  0x00 ; '.'
000000000020c1ac         db  0x00 ; '.'
000000000020c1ad         db  0x00 ; '.'
000000000020c1ae         db  0x00 ; '.'
000000000020c1af         db  0x00 ; '.'
000000000020c1b0         db  0x00 ; '.'
000000000020c1b1         db  0x00 ; '.'
000000000020c1b2         db  0x00 ; '.'
000000000020c1b3         db  0x00 ; '.'
000000000020c1b4         db  0x00 ; '.'
000000000020c1b5         db  0x00 ; '.'
000000000020c1b6         db  0x00 ; '.'
000000000020c1b7         db  0x00 ; '.'
000000000020c1b8         db  0x00 ; '.'
000000000020c1b9         db  0x00 ; '.'
000000000020c1ba         db  0x00 ; '.'
000000000020c1bb         db  0x00 ; '.'
000000000020c1bc         db  0x00 ; '.'
000000000020c1bd         db  0x00 ; '.'
000000000020c1be         db  0x00 ; '.'
000000000020c1bf         db  0x00 ; '.'
000000000020c1c0         db  0x00 ; '.'
000000000020c1c1         db  0x00 ; '.'
000000000020c1c2         db  0x00 ; '.'
000000000020c1c3         db  0x00 ; '.'
000000000020c1c4         db  0x00 ; '.'
000000000020c1c5         db  0x00 ; '.'
000000000020c1c6         db  0x00 ; '.'
000000000020c1c7         db  0x00 ; '.'
000000000020c1c8         db  0x00 ; '.'
000000000020c1c9         db  0x00 ; '.'
000000000020c1ca         db  0x00 ; '.'
000000000020c1cb         db  0x00 ; '.'
000000000020c1cc         db  0x00 ; '.'
000000000020c1cd         db  0x00 ; '.'
000000000020c1ce         db  0x00 ; '.'
000000000020c1cf         db  0x00 ; '.'
000000000020c1d0         db  0x00 ; '.'
000000000020c1d1         db  0x00 ; '.'
000000000020c1d2         db  0x00 ; '.'
000000000020c1d3         db  0x00 ; '.'
000000000020c1d4         db  0x00 ; '.'
000000000020c1d5         db  0x00 ; '.'
000000000020c1d6         db  0x00 ; '.'
000000000020c1d7         db  0x00 ; '.'
000000000020c1d8         db  0x00 ; '.'
000000000020c1d9         db  0x00 ; '.'
000000000020c1da         db  0x00 ; '.'
000000000020c1db         db  0x00 ; '.'
000000000020c1dc         db  0x00 ; '.'
000000000020c1dd         db  0x00 ; '.'
000000000020c1de         db  0x00 ; '.'
000000000020c1df         db  0x00 ; '.'
                     default_quoting_options:
000000000020c1e0         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020c1e1         db  0x00 ; '.'
000000000020c1e2         db  0x00 ; '.'
000000000020c1e3         db  0x00 ; '.'
000000000020c1e4         db  0x00 ; '.'
000000000020c1e5         db  0x00 ; '.'
000000000020c1e6         db  0x00 ; '.'
000000000020c1e7         db  0x00 ; '.'
000000000020c1e8         db  0x00 ; '.'
000000000020c1e9         db  0x00 ; '.'
000000000020c1ea         db  0x00 ; '.'
000000000020c1eb         db  0x00 ; '.'
000000000020c1ec         db  0x00 ; '.'
000000000020c1ed         db  0x00 ; '.'
000000000020c1ee         db  0x00 ; '.'
000000000020c1ef         db  0x00 ; '.'
000000000020c1f0         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020c1f1         db  0x00 ; '.'
000000000020c1f2         db  0x00 ; '.'
000000000020c1f3         db  0x00 ; '.'
000000000020c1f4         db  0x00 ; '.'
000000000020c1f5         db  0x00 ; '.'
000000000020c1f6         db  0x00 ; '.'
000000000020c1f7         db  0x00 ; '.'
000000000020c1f8         db  0x00 ; '.'
000000000020c1f9         db  0x00 ; '.'
000000000020c1fa         db  0x00 ; '.'
000000000020c1fb         db  0x00 ; '.'
000000000020c1fc         db  0x00 ; '.'
000000000020c1fd         db  0x00 ; '.'
000000000020c1fe         db  0x00 ; '.'
000000000020c1ff         db  0x00 ; '.'
000000000020c200         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020c201         db  0x00 ; '.'
000000000020c202         db  0x00 ; '.'
000000000020c203         db  0x00 ; '.'
000000000020c204         db  0x00 ; '.'
000000000020c205         db  0x00 ; '.'
000000000020c206         db  0x00 ; '.'
000000000020c207         db  0x00 ; '.'
000000000020c208         db  0x00 ; '.'
000000000020c209         db  0x00 ; '.'
000000000020c20a         db  0x00 ; '.'
000000000020c20b         db  0x00 ; '.'
000000000020c20c         db  0x00 ; '.'
000000000020c20d         db  0x00 ; '.'
000000000020c20e         db  0x00 ; '.'
000000000020c20f         db  0x00 ; '.'
                     qword_20c210:
000000000020c210         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020c211         db  0x00 ; '.'
000000000020c212         db  0x00 ; '.'
000000000020c213         db  0x00 ; '.'
000000000020c214         db  0x00 ; '.'
000000000020c215         db  0x00 ; '.'
000000000020c216         db  0x00 ; '.'
000000000020c217         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20c220; 0x20c570[ (848 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20c220; 0x418790[ (2147696 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __snprintf_chk:
000000000020c220         extern function code                                   ; DATA XREF=__snprintf_chk@GOT
                     free:
000000000020c228         extern function code                                   ; DATA XREF=free@GOT
                     abort:
000000000020c230         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020c238         extern function code                                   ; DATA XREF=__errno_location@GOT
                     error_at_line:
000000000020c240         extern function code                                   ; DATA XREF=error_at_line@GOT
                     strncmp:
000000000020c248         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020c250         extern function code
                     _exit:
000000000020c258         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
000000000020c260         extern function code                                   ; DATA XREF=__fpending@GOT
                     isatty:
000000000020c268         extern function code                                   ; DATA XREF=isatty@GOT
                     textdomain:
000000000020c270         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020c278         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020c280         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000020c288         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020c290         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020c298         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
000000000020c2a0         extern function code                                   ; DATA XREF=__lxstat@GOT
                     __stack_chk_fail:
000000000020c2a8         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     mbrtowc:
000000000020c2b0         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strrchr:
000000000020c2b8         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020c2c0         extern function code                                   ; DATA XREF=lseek@GOT
                     memset:
000000000020c2c8         extern function code                                   ; DATA XREF=memset@GOT
                     geteuid:
000000000020c2d0         extern function code                                   ; DATA XREF=geteuid@GOT
                     __libc_start_main:
000000000020c2d8         extern function code
                     memcmp:
000000000020c2e0         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020c2e8         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020c2f0         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
000000000020c2f8         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
000000000020c300         extern function code
                     strtol:
000000000020c308         extern function code                                   ; DATA XREF=strtol@GOT
                     memcpy:
000000000020c310         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020c318         extern function code                                   ; DATA XREF=fileno@GOT
                     __xstat:
000000000020c320         extern function code                                   ; DATA XREF=__xstat@GOT
                     malloc:
000000000020c328         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020c330         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020c338         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     getegid:
000000000020c340         extern function code                                   ; DATA XREF=getegid@GOT
                     __freading:
000000000020c348         extern function code                                   ; DATA XREF=__freading@GOT
                     realloc:
000000000020c350         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000020c358         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020c360         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     error:
000000000020c368         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
000000000020c370         extern function code                                   ; DATA XREF=fseeko@GOT
                     euidaccess:
000000000020c378         extern function code                                   ; DATA XREF=euidaccess@GOT
                     __cxa_atexit:
000000000020c380         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000020c388         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020c390         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020c398         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020c3a0         extern function code
                     mbsinit:
000000000020c3a8         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020c3b0         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020c3b8         extern function code
                     __ctype_b_loc:
000000000020c3c0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __snprintf_chk@@GLIBC_2.3.4:
000000000020c3c8         extern function code
                     free@@GLIBC_2.2.5:
000000000020c3d0         extern function code
                     abort@@GLIBC_2.2.5:
000000000020c3d8         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020c3e0         extern function code
                     error_at_line@@GLIBC_2.2.5:
000000000020c3e8         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020c3f0         extern function code
                     _ITM_deregisterTMCloneTable_20c3f8:        // _ITM_deregisterTMCloneTable
000000000020c3f8         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020c400         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020c408         extern function code
                     isatty@@GLIBC_2.2.5:
000000000020c410         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020c418         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020c420         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020c428         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020c430         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020c438         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020c440         extern function code
                     __lxstat@@GLIBC_2.2.5:
000000000020c448         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020c450         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020c458         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020c460         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020c468         extern function code
                     memset@@GLIBC_2.2.5:
000000000020c470         extern function code
                     geteuid@@GLIBC_2.2.5:
000000000020c478         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020c480         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020c488         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020c490         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020c498         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020c4a0         extern function code
                     __gmon_start___20c4a8:        // __gmon_start__
000000000020c4a8         extern function code
                     strtol@@GLIBC_2.2.5:
000000000020c4b0         extern function code
                     memcpy@@GLIBC_2.14:
000000000020c4b8         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020c4c0         extern function code
                     __xstat@@GLIBC_2.2.5:
000000000020c4c8         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020c4d0         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020c4d8         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020c4e0         extern function code
                     getegid@@GLIBC_2.2.5:
000000000020c4e8         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020c4f0         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020c4f8         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020c500         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020c508         extern function code
                     error@@GLIBC_2.2.5:
000000000020c510         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020c518         extern function code
                     euidaccess@@GLIBC_2.2.5:
000000000020c520         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020c528         extern function code
                     exit@@GLIBC_2.2.5:
000000000020c530         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020c538         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020c540         extern function code
                     _ITM_registerTMCloneTable_20c548:        // _ITM_registerTMCloneTable
000000000020c548         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020c550         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020c558         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020c560         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020c568         extern function code
