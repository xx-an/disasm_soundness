
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/pr
        UUID: D3BD603C-62AF-5668-9A39-6D3C1FA9CE03
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0x10018[ (65560 bytes)
        ; File offset : [0; 65560[ (65560 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x10 ; '.'
0000000000000019         db  0x29 ; ')'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0x98 ; '.'
0000000000000029         db  0xeb ; '.'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x18 ; '.'
00000000000000d1         db  0x00 ; '.'
00000000000000d2         db  0x01 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x18 ; '.'
00000000000000d9         db  0x00 ; '.'
00000000000000da         db  0x01 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0xd0 ; '.'
00000000000000f1         db  0x07 ; '.'
00000000000000f2         db  0x01 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0xd0 ; '.'
00000000000000f9         db  0x07 ; '.'
00000000000000fa         db  0x21 ; '!'
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0xd0 ; '.'                                         ; DATA XREF=quotearg_free+87, rpl_fflush+18, slotvec0
0000000000000101         db  0x07 ; '.'
0000000000000102         db  0x21 ; '!'
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'                                         ; DATA XREF=main+265
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x10 ; '.'                                         ; DATA XREF=init_header+31, init_header+339
0000000000000109         db  0x09 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xd0 ; '.'
0000000000000111         db  0x0b ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'                                         ; DATA XREF=print_header+98
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0x98 ; '.'                                         ; DATA XREF=print_header+2, print_header+253
0000000000000129         db  0x0b ; '.'
000000000000012a         db  0x01 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0x98 ; '.'
0000000000000131         db  0x0b ; '.'
0000000000000132         db  0x21 ; '!'
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0x98 ; '.'
0000000000000139         db  0x0b ; '.'
000000000000013a         db  0x21 ; '!'
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'                                         ; DATA XREF=sub_6c10+411, sub_6c10+482, sub_76c9+3
000000000000016e         db  0x00 ; '.'                                         ; DATA XREF=sub_6c10+445, sub_76c9+37, sub_76c9+68
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'                                         ; DATA XREF=sub_6c10+352, sub_6c10+502, sub_76c9+89
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'                                         ; DATA XREF=sub_6c10+332, sub_6c10+467, sub_76c9+53
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x64 ; 'd'
0000000000000199         db  0xe6 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x64 ; 'd'
00000000000001a1         db  0xe6 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x64 ; 'd'
00000000000001a9         db  0xe6 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xec ; '.'
00000000000001b1         db  0x03 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xec ; '.'
00000000000001b9         db  0x03 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=xstrtoumax+573
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0xd0 ; '.'
0000000000000209         db  0x07 ; '.'
000000000000020a         db  0x01 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0xd0 ; '.'
0000000000000211         db  0x07 ; '.'
0000000000000212         db  0x21 ; '!'
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0xd0 ; '.'
0000000000000219         db  0x07 ; '.'
000000000000021a         db  0x21 ; '!'
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x30 ; '0'
0000000000000221         db  0x08 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x30 ; '0'
0000000000000229         db  0x08 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0xd3 ; '.'
0000000000000285         db  0xbd ; '.'
0000000000000286         db  0x60 ; '`'
0000000000000287         db  0x3c ; '<'
0000000000000288         db  0x62 ; 'b'
0000000000000289         db  0xaf ; '.'
000000000000028a         db  0x56 ; 'V'
000000000000028b         db  0x68 ; 'h'
000000000000028c         db  0x9a ; '.'
000000000000028d         db  0x39 ; '9'
000000000000028e         db  0x6d ; 'm'
000000000000028f         db  0x3c ; '<'
0000000000000290         db  0x1f ; '.'
0000000000000291         db  0xa9 ; '.'
0000000000000292         db  0xce ; '.'
0000000000000293         db  0x03 ; '.'
0000000000000294         db  0x27 ; '''
0000000000000295         db  0xe5 ; '.'
0000000000000296         db  0x3a ; ':'
0000000000000297         db  0x4e ; 'N'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x4b ; 'K'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x4b ; 'K'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x4c ; 'L'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x52 ; 'R'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xac0[ (2016 bytes)
        ; File offset : [736; 2752[ (2016 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0x58 ; 'X'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0x96 ; '.'
0000000000000311         db  0x01 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0xb8 ; '.'
0000000000000329         db  0x01 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0xff ; '.'
0000000000000341         db  0x02 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x89 ; '.'
0000000000000359         db  0x00 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x12 ; '.'
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0x1e ; '.'
0000000000000371         db  0x01 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0x40 ; '@'
0000000000000389         db  0x00 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x6e ; 'n'
00000000000003a1         db  0x03 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x20 ; ' '
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0xca ; '.'
00000000000003b9         db  0x00 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x95 ; '.'
00000000000003d1         db  0x00 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x11 ; '.'                                         ; DATA XREF=xstrtoimax+363, xstrtol+363, xstrtoumax+420
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x23 ; '#'                                         ; DATA XREF=__strftime_internal+1020, xstrtoimax+397, xstrtoimax+1614, xstrtol+397, xstrtol+1614, xstrtoumax+437, xstrtoumax+806, xstrtoumax+878, rpl_fcntl+288
0000000000000401         db  0x02 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x8f ; '.'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x03 ; '.'
0000000000000431         db  0x02 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x38 ; '8'
0000000000000449         db  0x01 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0xa7 ; '.'
0000000000000461         db  0x02 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0x68 ; 'h'
0000000000000479         db  0x01 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x61 ; 'a'
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0xa3 ; '.'
00000000000004a9         db  0x02 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x57 ; 'W'
00000000000004c1         db  0x00 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'                                         ; DATA XREF=__strftime_internal+19, __strftime_internal+233
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0xd6 ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0x09 ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x67 ; 'g'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0xe0 ; '.'
0000000000000521         db  0x01 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x32 ; '2'
0000000000000539         db  0x00 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x1c ; '.'
0000000000000551         db  0x02 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0xd2 ; '.'
0000000000000569         db  0x02 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0x4f ; 'O'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x12 ; '.'
0000000000000599         db  0x00 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0x54 ; 'T'
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0xbc ; '.'
00000000000005c9         db  0x00 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0xdd ; '.'
00000000000005e1         db  0x02 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x17 ; '.'
00000000000005f9         db  0x01 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x62 ; 'b'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xf4 ; '.'
0000000000000629         db  0x00 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0xb9 ; '.'
0000000000000641         db  0x02 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0x2f ; '/'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0xf0 ; '.'
0000000000000671         db  0x02 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x02 ; '.'
0000000000000689         db  0x01 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0xb2 ; '.'
00000000000006a1         db  0x02 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x8a ; '.'
00000000000006b9         db  0x03 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x20 ; ' '
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0xed ; '.'
00000000000006d1         db  0x00 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0x5a ; 'Z'
00000000000006e9         db  0x01 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x90 ; '.'
0000000000000701         db  0x01 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0xf5 ; '.'
0000000000000719         db  0x01 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0xd8 ; '.'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x7a ; 'z'
0000000000000749         db  0x01 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x0b ; '.'
0000000000000761         db  0x00 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0x9e ; '.'
0000000000000779         db  0x01 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0x10 ; '.'
0000000000000791         db  0x01 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0xec ; '.'
00000000000007a9         db  0x01 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0x2c ; ','
00000000000007c1         db  0x02 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0xc6 ; '.'
00000000000007d9         db  0x01 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x81 ; '.'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x51 ; 'Q'
0000000000000809         db  0x02 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x28 ; '('
0000000000000821         db  0x00 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x1b ; '.'
0000000000000839         db  0x00 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x81 ; '.'
0000000000000851         db  0x01 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0xb3 ; '.'
0000000000000869         db  0x00 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x61 ; 'a'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0xcb ; '.'
0000000000000899         db  0x02 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0x3a ; ':'
00000000000008b1         db  0x00 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0x36 ; '6'
00000000000008c9         db  0x01 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0x1f ; '.'
00000000000008e1         db  0x03 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0x96 ; '.'
00000000000008f9         db  0x00 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0xfc ; '.'
0000000000000911         db  0x01 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x3f ; '?'
0000000000000929         db  0x01 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x12 ; '.'
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x99 ; '.'
0000000000000941         db  0x03 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x20 ; ' '
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0x88 ; '.'
0000000000000959         db  0x01 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x78 ; 'x'
0000000000000971         db  0x00 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x12 ; '.'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x80 ; '.'
0000000000000989         db  0x02 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x22 ; '"'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x6c ; 'l'
00000000000009a1         db  0x02 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x12 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x00 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0x00 ; '.'
00000000000009a9         db  0x00 ; '.'
00000000000009aa         db  0x00 ; '.'
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x00 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xaa ; '.'
00000000000009b9         db  0x01 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x12 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x00 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0x00 ; '.'
00000000000009c1         db  0x00 ; '.'
00000000000009c2         db  0x00 ; '.'
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x00 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0x95 ; '.'
00000000000009d1         db  0x02 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x12 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x00 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0x00 ; '.'
00000000000009d9         db  0x00 ; '.'
00000000000009da         db  0x00 ; '.'
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x00 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0x4d ; 'M'
00000000000009e9         db  0x01 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x11 ; '.'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x19 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0xe8 ; '.'
00000000000009f1         db  0x10 ; '.'
00000000000009f2         db  0x21 ; '!'
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x08 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0x04 ; '.'
0000000000000a01         db  0x03 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x11 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x19 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0xe0 ; '.'
0000000000000a09         db  0x10 ; '.'
0000000000000a0a         db  0x21 ; '!'
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x08 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x8f ; '.'
0000000000000a19         db  0x00 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x11 ; '.'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x19 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0xf0 ; '.'
0000000000000a21         db  0x10 ; '.'
0000000000000a22         db  0x21 ; '!'
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x08 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0x9b ; '.'
0000000000000a31         db  0x00 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x21 ; '!'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x19 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0x08 ; '.'
0000000000000a39         db  0x11 ; '.'
0000000000000a3a         db  0x21 ; '!'
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x08 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0x0f ; '.'
0000000000000a49         db  0x03 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x11 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0x08 ; '.'
0000000000000a51         db  0x11 ; '.'
0000000000000a52         db  0x21 ; '!'
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x08 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0x33 ; '3'
0000000000000a61         db  0x02 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x21 ; '!'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x19 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0xe0 ; '.'
0000000000000a69         db  0x10 ; '.'
0000000000000a6a         db  0x21 ; '!'
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x08 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'
0000000000000a78         db  0xd1 ; '.'
0000000000000a79         db  0x01 ; '.'
0000000000000a7a         db  0x00 ; '.'
0000000000000a7b         db  0x00 ; '.'
0000000000000a7c         db  0x11 ; '.'
0000000000000a7d         db  0x00 ; '.'
0000000000000a7e         db  0x19 ; '.'
0000000000000a7f         db  0x00 ; '.'
0000000000000a80         db  0x20 ; ' '
0000000000000a81         db  0x11 ; '.'
0000000000000a82         db  0x21 ; '!'
0000000000000a83         db  0x00 ; '.'
0000000000000a84         db  0x00 ; '.'
0000000000000a85         db  0x00 ; '.'
0000000000000a86         db  0x00 ; '.'
0000000000000a87         db  0x00 ; '.'
0000000000000a88         db  0x08 ; '.'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x00 ; '.'
0000000000000a8b         db  0x00 ; '.'
0000000000000a8c         db  0x00 ; '.'
0000000000000a8d         db  0x00 ; '.'
0000000000000a8e         db  0x00 ; '.'
0000000000000a8f         db  0x00 ; '.'
0000000000000a90         db  0x48 ; 'H'
0000000000000a91         db  0x00 ; '.'
0000000000000a92         db  0x00 ; '.'
0000000000000a93         db  0x00 ; '.'
0000000000000a94         db  0x11 ; '.'
0000000000000a95         db  0x00 ; '.'
0000000000000a96         db  0x19 ; '.'
0000000000000a97         db  0x00 ; '.'
0000000000000a98         db  0xf8 ; '.'
0000000000000a99         db  0x10 ; '.'
0000000000000a9a         db  0x21 ; '!'
0000000000000a9b         db  0x00 ; '.'
0000000000000a9c         db  0x00 ; '.'
0000000000000a9d         db  0x00 ; '.'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x00 ; '.'
0000000000000aa0         db  0x04 ; '.'
0000000000000aa1         db  0x00 ; '.'
0000000000000aa2         db  0x00 ; '.'
0000000000000aa3         db  0x00 ; '.'
0000000000000aa4         db  0x00 ; '.'
0000000000000aa5         db  0x00 ; '.'
0000000000000aa6         db  0x00 ; '.'
0000000000000aa7         db  0x00 ; '.'
0000000000000aa8         db  0xbf ; '.'
0000000000000aa9         db  0x01 ; '.'
0000000000000aaa         db  0x00 ; '.'
0000000000000aab         db  0x00 ; '.'
0000000000000aac         db  0x11 ; '.'
0000000000000aad         db  0x00 ; '.'
0000000000000aae         db  0x19 ; '.'
0000000000000aaf         db  0x00 ; '.'
0000000000000ab0         db  0x00 ; '.'
0000000000000ab1         db  0x11 ; '.'
0000000000000ab2         db  0x21 ; '!'
0000000000000ab3         db  0x00 ; '.'
0000000000000ab4         db  0x00 ; '.'
0000000000000ab5         db  0x00 ; '.'
0000000000000ab6         db  0x00 ; '.'
0000000000000ab7         db  0x00 ; '.'
0000000000000ab8         db  0x08 ; '.'
0000000000000ab9         db  0x00 ; '.'
0000000000000aba         db  0x00 ; '.'
0000000000000abb         db  0x00 ; '.'
0000000000000abc         db  0x00 ; '.'
0000000000000abd         db  0x00 ; '.'
0000000000000abe         db  0x00 ; '.'
0000000000000abf         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xac0; 0xe73[ (947 bytes)
        ; File offset : [2752; 3699[ (947 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000ac0         db  0x00 ; '.'
0000000000000ac1         db  0x6c ; 'l'
0000000000000ac2         db  0x69 ; 'i'
0000000000000ac3         db  0x62 ; 'b'
0000000000000ac4         db  0x63 ; 'c'
0000000000000ac5         db  0x2e ; '.'
0000000000000ac6         db  0x73 ; 's'
0000000000000ac7         db  0x6f ; 'o'
0000000000000ac8         db  0x2e ; '.'
0000000000000ac9         db  0x36 ; '6'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x66 ; 'f'
0000000000000acc         db  0x66 ; 'f'
0000000000000acd         db  0x6c ; 'l'
0000000000000ace         db  0x75 ; 'u'
0000000000000acf         db  0x73 ; 's'
0000000000000ad0         db  0x68 ; 'h'
0000000000000ad1         db  0x00 ; '.'
0000000000000ad2         db  0x67 ; 'g'
0000000000000ad3         db  0x6d ; 'm'
0000000000000ad4         db  0x74 ; 't'
0000000000000ad5         db  0x69 ; 'i'
0000000000000ad6         db  0x6d ; 'm'
0000000000000ad7         db  0x65 ; 'e'
0000000000000ad8         db  0x5f ; '_'
0000000000000ad9         db  0x72 ; 'r'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x5f ; '_'
0000000000000adc         db  0x5f ; '_'
0000000000000add         db  0x70 ; 'p'
0000000000000ade         db  0x72 ; 'r'
0000000000000adf         db  0x69 ; 'i'
0000000000000ae0         db  0x6e ; 'n'
0000000000000ae1         db  0x74 ; 't'
0000000000000ae2         db  0x66 ; 'f'
0000000000000ae3         db  0x5f ; '_'
0000000000000ae4         db  0x63 ; 'c'
0000000000000ae5         db  0x68 ; 'h'
0000000000000ae6         db  0x6b ; 'k'
0000000000000ae7         db  0x00 ; '.'
0000000000000ae8         db  0x73 ; 's'
0000000000000ae9         db  0x65 ; 'e'
0000000000000aea         db  0x74 ; 't'
0000000000000aeb         db  0x6c ; 'l'
0000000000000aec         db  0x6f ; 'o'
0000000000000aed         db  0x63 ; 'c'
0000000000000aee         db  0x61 ; 'a'
0000000000000aef         db  0x6c ; 'l'
0000000000000af0         db  0x65 ; 'e'
0000000000000af1         db  0x00 ; '.'
0000000000000af2         db  0x6d ; 'm'
0000000000000af3         db  0x62 ; 'b'
0000000000000af4         db  0x72 ; 'r'
0000000000000af5         db  0x74 ; 't'
0000000000000af6         db  0x6f ; 'o'
0000000000000af7         db  0x77 ; 'w'
0000000000000af8         db  0x63 ; 'c'
0000000000000af9         db  0x00 ; '.'
0000000000000afa         db  0x66 ; 'f'
0000000000000afb         db  0x6f ; 'o'
0000000000000afc         db  0x70 ; 'p'
0000000000000afd         db  0x65 ; 'e'
0000000000000afe         db  0x6e ; 'n'
0000000000000aff         db  0x00 ; '.'
                     aStrncmp:
0000000000000b00         db         "strncmp", 0
0000000000000b08         db  0x6f ; 'o'
0000000000000b09         db  0x70 ; 'p'
0000000000000b0a         db  0x74 ; 't'
0000000000000b0b         db  0x69 ; 'i'
0000000000000b0c         db  0x6e ; 'n'
0000000000000b0d         db  0x64 ; 'd'
0000000000000b0e         db  0x00 ; '.'
0000000000000b0f         db  0x73 ; 's'
0000000000000b10         db  0x74 ; 't'
0000000000000b11         db  0x72 ; 'r'
0000000000000b12         db  0x72 ; 'r'
0000000000000b13         db  0x63 ; 'c'
0000000000000b14         db  0x68 ; 'h'
0000000000000b15         db  0x72 ; 'r'
0000000000000b16         db  0x00 ; '.'
0000000000000b17         db  0x64 ; 'd'
0000000000000b18         db  0x63 ; 'c'
0000000000000b19         db  0x67 ; 'g'
0000000000000b1a         db  0x65 ; 'e'
0000000000000b1b         db  0x74 ; 't'
0000000000000b1c         db  0x74 ; 't'
0000000000000b1d         db  0x65 ; 'e'
0000000000000b1e         db  0x78 ; 'x'
0000000000000b1f         db  0x74 ; 't'
0000000000000b20         db  0x00 ; '.'
0000000000000b21         db  0x65 ; 'e'
0000000000000b22         db  0x72 ; 'r'
0000000000000b23         db  0x72 ; 'r'
0000000000000b24         db  0x6f ; 'o'
0000000000000b25         db  0x72 ; 'r'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x5f ; '_'
0000000000000b28         db  0x5f ; '_'
0000000000000b29         db  0x73 ; 's'
0000000000000b2a         db  0x74 ; 't'
0000000000000b2b         db  0x61 ; 'a'
0000000000000b2c         db  0x63 ; 'c'
0000000000000b2d         db  0x6b ; 'k'
0000000000000b2e         db  0x5f ; '_'
0000000000000b2f         db  0x63 ; 'c'
0000000000000b30         db  0x68 ; 'h'
0000000000000b31         db  0x6b ; 'k'
0000000000000b32         db  0x5f ; '_'
0000000000000b33         db  0x66 ; 'f'
0000000000000b34         db  0x61 ; 'a'
0000000000000b35         db  0x69 ; 'i'
0000000000000b36         db  0x6c ; 'l'
0000000000000b37         db  0x00 ; '.'
0000000000000b38         db  0x69 ; 'i'
0000000000000b39         db  0x73 ; 's'
0000000000000b3a         db  0x77 ; 'w'
0000000000000b3b         db  0x70 ; 'p'
0000000000000b3c         db  0x72 ; 'r'
0000000000000b3d         db  0x69 ; 'i'
0000000000000b3e         db  0x6e ; 'n'
0000000000000b3f         db  0x74 ; 't'
0000000000000b40         db  0x00 ; '.'
                     aRealloc:
0000000000000b41         db         "realloc", 0
0000000000000b49         db  0x61 ; 'a'
0000000000000b4a         db  0x62 ; 'b'
0000000000000b4b         db  0x6f ; 'o'
0000000000000b4c         db  0x72 ; 'r'
0000000000000b4d         db  0x74 ; 't'
0000000000000b4e         db  0x00 ; '.'
0000000000000b4f         db  0x73 ; 's'
0000000000000b50         db  0x74 ; 't'
0000000000000b51         db  0x64 ; 'd'
0000000000000b52         db  0x69 ; 'i'
0000000000000b53         db  0x6e ; 'n'
0000000000000b54         db  0x00 ; '.'
0000000000000b55         db  0x5f ; '_'
0000000000000b56         db  0x65 ; 'e'
0000000000000b57         db  0x78 ; 'x'
0000000000000b58         db  0x69 ; 'i'
0000000000000b59         db  0x74 ; 't'
0000000000000b5a         db  0x00 ; '.'
0000000000000b5b         db  0x70 ; 'p'
0000000000000b5c         db  0x72 ; 'r'
0000000000000b5d         db  0x6f ; 'o'
0000000000000b5e         db  0x67 ; 'g'
0000000000000b5f         db  0x72 ; 'r'
0000000000000b60         db  0x61 ; 'a'
0000000000000b61         db  0x6d ; 'm'
0000000000000b62         db  0x5f ; '_'
0000000000000b63         db  0x69 ; 'i'
0000000000000b64         db  0x6e ; 'n'
0000000000000b65         db  0x76 ; 'v'
0000000000000b66         db  0x6f ; 'o'
0000000000000b67         db  0x63 ; 'c'
0000000000000b68         db  0x61 ; 'a'
0000000000000b69         db  0x74 ; 't'
                     aIonname:
0000000000000b6a         db         "ion_name", 0
0000000000000b73         db  0x73 ; 's'
0000000000000b74         db  0x74 ; 't'
0000000000000b75         db  0x72 ; 'r'
0000000000000b76         db  0x66 ; 'f'
0000000000000b77         db  0x74 ; 't'
0000000000000b78         db  0x69 ; 'i'
0000000000000b79         db  0x6d ; 'm'
0000000000000b7a         db  0x65 ; 'e'
0000000000000b7b         db  0x00 ; '.'
0000000000000b7c         db  0x5f ; '_'
0000000000000b7d         db  0x5f ; '_'
0000000000000b7e         db  0x61 ; 'a'
0000000000000b7f         db  0x73 ; 's'
0000000000000b80         db  0x73 ; 's'
0000000000000b81         db  0x65 ; 'e'
0000000000000b82         db  0x72 ; 'r'
0000000000000b83         db  0x74 ; 't'
0000000000000b84         db  0x5f ; '_'
0000000000000b85         db  0x66 ; 'f'
0000000000000b86         db  0x61 ; 'a'
0000000000000b87         db  0x69 ; 'i'
0000000000000b88         db  0x6c ; 'l'
0000000000000b89         db  0x00 ; '.'
0000000000000b8a         db  0x6c ; 'l'
0000000000000b8b         db  0x6f ; 'o'
0000000000000b8c         db  0x63 ; 'c'
0000000000000b8d         db  0x61 ; 'a'
0000000000000b8e         db  0x6c ; 'l'
0000000000000b8f         db  0x74 ; 't'
0000000000000b90         db  0x69 ; 'i'
0000000000000b91         db  0x6d ; 'm'
0000000000000b92         db  0x65 ; 'e'
0000000000000b93         db  0x5f ; '_'
0000000000000b94         db  0x72 ; 'r'
0000000000000b95         db  0x00 ; '.'
0000000000000b96         db  0x5f ; '_'
0000000000000b97         db  0x5f ; '_'
0000000000000b98         db  0x63 ; 'c'
0000000000000b99         db  0x74 ; 't'
0000000000000b9a         db  0x79 ; 'y'
0000000000000b9b         db  0x70 ; 'p'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x5f ; '_'
0000000000000b9e         db  0x67 ; 'g'
0000000000000b9f         db  0x65 ; 'e'
0000000000000ba0         db  0x74 ; 't'
0000000000000ba1         db  0x5f ; '_'
0000000000000ba2         db  0x6d ; 'm'
0000000000000ba3         db  0x62 ; 'b'
0000000000000ba4         db  0x5f ; '_'
0000000000000ba5         db  0x63 ; 'c'
0000000000000ba6         db  0x75 ; 'u'
0000000000000ba7         db  0x72 ; 'r'
0000000000000ba8         db  0x5f ; '_'
0000000000000ba9         db  0x6d ; 'm'
0000000000000baa         db  0x61 ; 'a'
0000000000000bab         db  0x78 ; 'x'
0000000000000bac         db  0x00 ; '.'
0000000000000bad         db  0x73 ; 's'
0000000000000bae         db  0x74 ; 't'
0000000000000baf         db  0x72 ; 'r'
0000000000000bb0         db  0x74 ; 't'
0000000000000bb1         db  0x6f ; 'o'
0000000000000bb2         db  0x6c ; 'l'
0000000000000bb3         db  0x00 ; '.'
0000000000000bb4         db  0x70 ; 'p'
0000000000000bb5         db  0x6f ; 'o'
0000000000000bb6         db  0x73 ; 's'
0000000000000bb7         db  0x69 ; 'i'
0000000000000bb8         db  0x78 ; 'x'
0000000000000bb9         db  0x5f ; '_'
0000000000000bba         db  0x66 ; 'f'
0000000000000bbb         db  0x61 ; 'a'
0000000000000bbc         db  0x64 ; 'd'
0000000000000bbd         db  0x76 ; 'v'
0000000000000bbe         db  0x69 ; 'i'
0000000000000bbf         db  0x73 ; 's'
0000000000000bc0         db  0x65 ; 'e'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x63 ; 'c'
0000000000000bc3         db  0x61 ; 'a'
0000000000000bc4         db  0x6c ; 'l'
0000000000000bc5         db  0x6c ; 'l'
0000000000000bc6         db  0x6f ; 'o'
0000000000000bc7         db  0x63 ; 'c'
0000000000000bc8         db  0x00 ; '.'
0000000000000bc9         db  0x73 ; 's'
0000000000000bca         db  0x74 ; 't'
0000000000000bcb         db  0x72 ; 'r'
0000000000000bcc         db  0x6c ; 'l'
0000000000000bcd         db  0x65 ; 'e'
0000000000000bce         db  0x6e ; 'n'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x75 ; 'u'
0000000000000bd1         db  0x6e ; 'n'
0000000000000bd2         db  0x67 ; 'g'
0000000000000bd3         db  0x65 ; 'e'
0000000000000bd4         db  0x74 ; 't'
0000000000000bd5         db  0x63 ; 'c'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x6d ; 'm'
0000000000000bd8         db  0x65 ; 'e'
0000000000000bd9         db  0x6d ; 'm'
0000000000000bda         db  0x73 ; 's'
0000000000000bdb         db  0x65 ; 'e'
0000000000000bdc         db  0x74 ; 't'
0000000000000bdd         db  0x00 ; '.'
0000000000000bde         db  0x5f ; '_'
0000000000000bdf         db  0x5f ; '_'
0000000000000be0         db  0x65 ; 'e'
0000000000000be1         db  0x72 ; 'r'
0000000000000be2         db  0x72 ; 'r'
0000000000000be3         db  0x6e ; 'n'
0000000000000be4         db  0x6f ; 'o'
0000000000000be5         db  0x5f ; '_'
0000000000000be6         db  0x6c ; 'l'
0000000000000be7         db  0x6f ; 'o'
0000000000000be8         db  0x63 ; 'c'
0000000000000be9         db  0x61 ; 'a'
0000000000000bea         db  0x74 ; 't'
0000000000000beb         db  0x69 ; 'i'
0000000000000bec         db  0x6f ; 'o'
0000000000000bed         db  0x6e ; 'n'
0000000000000bee         db  0x00 ; '.'
0000000000000bef         db  0x6d ; 'm'
0000000000000bf0         db  0x65 ; 'e'
0000000000000bf1         db  0x6d ; 'm'
0000000000000bf2         db  0x63 ; 'c'
0000000000000bf3         db  0x6d ; 'm'
0000000000000bf4         db  0x70 ; 'p'
0000000000000bf5         db  0x00 ; '.'
0000000000000bf6         db  0x75 ; 'u'
0000000000000bf7         db  0x6e ; 'n'
0000000000000bf8         db  0x73 ; 's'
0000000000000bf9         db  0x65 ; 'e'
0000000000000bfa         db  0x74 ; 't'
0000000000000bfb         db  0x65 ; 'e'
0000000000000bfc         db  0x6e ; 'n'
0000000000000bfd         db  0x76 ; 'v'
0000000000000bfe         db  0x00 ; '.'
0000000000000bff         db  0x5f ; '_'
                     aFprintfchk:
0000000000000c00         db         "_fprintf_chk", 0
0000000000000c0d         db  0x73 ; 's'
0000000000000c0e         db  0x74 ; 't'
0000000000000c0f         db  0x64 ; 'd'
0000000000000c10         db  0x6f ; 'o'
0000000000000c11         db  0x75 ; 'u'
0000000000000c12         db  0x74 ; 't'
0000000000000c13         db  0x00 ; '.'
0000000000000c14         db  0x6c ; 'l'
0000000000000c15         db  0x73 ; 's'
0000000000000c16         db  0x65 ; 'e'
0000000000000c17         db  0x65 ; 'e'
0000000000000c18         db  0x6b ; 'k'
0000000000000c19         db  0x00 ; '.'
0000000000000c1a         db  0x6d ; 'm'
0000000000000c1b         db  0x65 ; 'e'
0000000000000c1c         db  0x6d ; 'm'
0000000000000c1d         db  0x63 ; 'c'
0000000000000c1e         db  0x70 ; 'p'
0000000000000c1f         db  0x79 ; 'y'
0000000000000c20         db  0x00 ; '.'
0000000000000c21         db  0x66 ; 'f'
0000000000000c22         db  0x63 ; 'c'
0000000000000c23         db  0x6c ; 'l'
0000000000000c24         db  0x6f ; 'o'
0000000000000c25         db  0x73 ; 's'
0000000000000c26         db  0x65 ; 'e'
0000000000000c27         db  0x00 ; '.'
0000000000000c28         db  0x5f ; '_'
0000000000000c29         db  0x5f ; '_'
0000000000000c2a         db  0x73 ; 's'
0000000000000c2b         db  0x74 ; 't'
0000000000000c2c         db  0x72 ; 'r'
0000000000000c2d         db  0x74 ; 't'
0000000000000c2e         db  0x6f ; 'o'
0000000000000c2f         db  0x6c ; 'l'
0000000000000c30         db  0x5f ; '_'
0000000000000c31         db  0x69 ; 'i'
0000000000000c32         db  0x6e ; 'n'
0000000000000c33         db  0x74 ; 't'
0000000000000c34         db  0x65 ; 'e'
0000000000000c35         db  0x72 ; 'r'
0000000000000c36         db  0x6e ; 'n'
0000000000000c37         db  0x61 ; 'a'
0000000000000c38         db  0x6c ; 'l'
0000000000000c39         db  0x00 ; '.'
0000000000000c3a         db  0x6d ; 'm'
0000000000000c3b         db  0x61 ; 'a'
0000000000000c3c         db  0x6c ; 'l'
0000000000000c3d         db  0x6c ; 'l'
0000000000000c3e         db  0x6f ; 'o'
0000000000000c3f         db  0x63 ; 'c'
0000000000000c40         db  0x00 ; '.'
0000000000000c41         db  0x74 ; 't'
0000000000000c42         db  0x69 ; 'i'
0000000000000c43         db  0x6d ; 'm'
0000000000000c44         db  0x65 ; 'e'
0000000000000c45         db  0x67 ; 'g'
0000000000000c46         db  0x6d ; 'm'
0000000000000c47         db  0x00 ; '.'
0000000000000c48         db  0x6d ; 'm'
0000000000000c49         db  0x62 ; 'b'
0000000000000c4a         db  0x73 ; 's'
0000000000000c4b         db  0x69 ; 'i'
0000000000000c4c         db  0x6e ; 'n'
0000000000000c4d         db  0x69 ; 'i'
0000000000000c4e         db  0x74 ; 't'
0000000000000c4f         db  0x00 ; '.'
0000000000000c50         db  0x74 ; 't'
0000000000000c51         db  0x7a ; 'z'
0000000000000c52         db  0x73 ; 's'
0000000000000c53         db  0x65 ; 'e'
0000000000000c54         db  0x74 ; 't'
0000000000000c55         db  0x00 ; '.'
0000000000000c56         db  0x5f ; '_'
0000000000000c57         db  0x5f ; '_'
0000000000000c58         db  0x75 ; 'u'
0000000000000c59         db  0x66 ; 'f'
0000000000000c5a         db  0x6c ; 'l'
0000000000000c5b         db  0x6f ; 'o'
0000000000000c5c         db  0x77 ; 'w'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x6e ; 'n'
0000000000000c5f         db  0x6c ; 'l'
0000000000000c60         db  0x5f ; '_'
0000000000000c61         db  0x6c ; 'l'
0000000000000c62         db  0x61 ; 'a'
0000000000000c63         db  0x6e ; 'n'
0000000000000c64         db  0x67 ; 'g'
0000000000000c65         db  0x69 ; 'i'
0000000000000c66         db  0x6e ; 'n'
0000000000000c67         db  0x66 ; 'f'
0000000000000c68         db  0x6f ; 'o'
0000000000000c69         db  0x00 ; '.'
0000000000000c6a         db  0x5f ; '_'
0000000000000c6b         db  0x5f ; '_'
0000000000000c6c         db  0x63 ; 'c'
0000000000000c6d         db  0x74 ; 't'
0000000000000c6e         db  0x79 ; 'y'
0000000000000c6f         db  0x70 ; 'p'
0000000000000c70         db  0x65 ; 'e'
0000000000000c71         db  0x5f ; '_'
0000000000000c72         db  0x62 ; 'b'
0000000000000c73         db  0x5f ; '_'
0000000000000c74         db  0x6c ; 'l'
0000000000000c75         db  0x6f ; 'o'
0000000000000c76         db  0x63 ; 'c'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0x67 ; 'g'
0000000000000c79         db  0x65 ; 'e'
0000000000000c7a         db  0x74 ; 't'
0000000000000c7b         db  0x65 ; 'e'
0000000000000c7c         db  0x6e ; 'n'
0000000000000c7d         db  0x76 ; 'v'
0000000000000c7e         db  0x00 ; '.'
0000000000000c7f         db  0x6f ; 'o'
0000000000000c80         db  0x70 ; 'p'
0000000000000c81         db  0x74 ; 't'
0000000000000c82         db  0x61 ; 'a'
0000000000000c83         db  0x72 ; 'r'
0000000000000c84         db  0x67 ; 'g'
0000000000000c85         db  0x00 ; '.'
0000000000000c86         db  0x5f ; '_'
0000000000000c87         db  0x5f ; '_'
0000000000000c88         db  0x66 ; 'f'
0000000000000c89         db  0x72 ; 'r'
0000000000000c8a         db  0x65 ; 'e'
0000000000000c8b         db  0x61 ; 'a'
0000000000000c8c         db  0x64 ; 'd'
0000000000000c8d         db  0x69 ; 'i'
0000000000000c8e         db  0x6e ; 'n'
0000000000000c8f         db  0x67 ; 'g'
0000000000000c90         db  0x00 ; '.'
0000000000000c91         db  0x73 ; 's'
0000000000000c92         db  0x74 ; 't'
0000000000000c93         db  0x64 ; 'd'
0000000000000c94         db  0x65 ; 'e'
0000000000000c95         db  0x72 ; 'r'
0000000000000c96         db  0x72 ; 'r'
0000000000000c97         db  0x00 ; '.'
0000000000000c98         db  0x77 ; 'w'
0000000000000c99         db  0x63 ; 'c'
0000000000000c9a         db  0x77 ; 'w'
0000000000000c9b         db  0x69 ; 'i'
0000000000000c9c         db  0x64 ; 'd'
0000000000000c9d         db  0x74 ; 't'
0000000000000c9e         db  0x68 ; 'h'
0000000000000c9f         db  0x00 ; '.'
0000000000000ca0         db  0x67 ; 'g'
0000000000000ca1         db  0x65 ; 'e'
0000000000000ca2         db  0x74 ; 't'
0000000000000ca3         db  0x6f ; 'o'
0000000000000ca4         db  0x70 ; 'p'
0000000000000ca5         db  0x74 ; 't'
0000000000000ca6         db  0x5f ; '_'
0000000000000ca7         db  0x6c ; 'l'
0000000000000ca8         db  0x6f ; 'o'
0000000000000ca9         db  0x6e ; 'n'
0000000000000caa         db  0x67 ; 'g'
0000000000000cab         db  0x00 ; '.'
0000000000000cac         db  0x5f ; '_'
0000000000000cad         db  0x5f ; '_'
0000000000000cae         db  0x66 ; 'f'
0000000000000caf         db  0x78 ; 'x'
0000000000000cb0         db  0x73 ; 's'
0000000000000cb1         db  0x74 ; 't'
0000000000000cb2         db  0x61 ; 'a'
0000000000000cb3         db  0x74 ; 't'
0000000000000cb4         db  0x00 ; '.'
0000000000000cb5         db  0x66 ; 'f'
0000000000000cb6         db  0x69 ; 'i'
0000000000000cb7         db  0x6c ; 'l'
0000000000000cb8         db  0x65 ; 'e'
0000000000000cb9         db  0x6e ; 'n'
0000000000000cba         db  0x6f ; 'o'
0000000000000cbb         db  0x00 ; '.'
0000000000000cbc         db  0x66 ; 'f'
0000000000000cbd         db  0x77 ; 'w'
0000000000000cbe         db  0x72 ; 'r'
0000000000000cbf         db  0x69 ; 'i'
0000000000000cc0         db  0x74 ; 't'
0000000000000cc1         db  0x65 ; 'e'
0000000000000cc2         db  0x00 ; '.'
0000000000000cc3         db  0x63 ; 'c'
0000000000000cc4         db  0x6c ; 'l'
0000000000000cc5         db  0x6f ; 'o'
0000000000000cc6         db  0x63 ; 'c'
0000000000000cc7         db  0x6b ; 'k'
0000000000000cc8         db  0x5f ; '_'
0000000000000cc9         db  0x67 ; 'g'
0000000000000cca         db  0x65 ; 'e'
0000000000000ccb         db  0x74 ; 't'
0000000000000ccc         db  0x74 ; 't'
0000000000000ccd         db  0x69 ; 'i'
0000000000000cce         db  0x6d ; 'm'
0000000000000ccf         db  0x65 ; 'e'
0000000000000cd0         db  0x00 ; '.'
0000000000000cd1         db  0x5f ; '_'
0000000000000cd2         db  0x5f ; '_'
0000000000000cd3         db  0x66 ; 'f'
0000000000000cd4         db  0x70 ; 'p'
0000000000000cd5         db  0x65 ; 'e'
0000000000000cd6         db  0x6e ; 'n'
0000000000000cd7         db  0x64 ; 'd'
0000000000000cd8         db  0x69 ; 'i'
0000000000000cd9         db  0x6e ; 'n'
0000000000000cda         db  0x67 ; 'g'
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x73 ; 's'
0000000000000cdd         db  0x74 ; 't'
0000000000000cde         db  0x72 ; 'r'
0000000000000cdf         db  0x63 ; 'c'
0000000000000ce0         db  0x68 ; 'h'
0000000000000ce1         db  0x72 ; 'r'
0000000000000ce2         db  0x00 ; '.'
0000000000000ce3         db  0x69 ; 'i'
0000000000000ce4         db  0x73 ; 's'
0000000000000ce5         db  0x77 ; 'w'
0000000000000ce6         db  0x63 ; 'c'
0000000000000ce7         db  0x6e ; 'n'
0000000000000ce8         db  0x74 ; 't'
0000000000000ce9         db  0x72 ; 'r'
0000000000000cea         db  0x6c ; 'l'
0000000000000ceb         db  0x00 ; '.'
0000000000000cec         db  0x6d ; 'm'
0000000000000ced         db  0x6b ; 'k'
0000000000000cee         db  0x74 ; 't'
0000000000000cef         db  0x69 ; 'i'
0000000000000cf0         db  0x6d ; 'm'
0000000000000cf1         db  0x65 ; 'e'
0000000000000cf2         db  0x00 ; '.'
0000000000000cf3         db  0x70 ; 'p'
0000000000000cf4         db  0x72 ; 'r'
0000000000000cf5         db  0x6f ; 'o'
0000000000000cf6         db  0x67 ; 'g'
0000000000000cf7         db  0x72 ; 'r'
0000000000000cf8         db  0x61 ; 'a'
0000000000000cf9         db  0x6d ; 'm'
0000000000000cfa         db  0x5f ; '_'
0000000000000cfb         db  0x69 ; 'i'
0000000000000cfc         db  0x6e ; 'n'
0000000000000cfd         db  0x76 ; 'v'
0000000000000cfe         db  0x6f ; 'o'
0000000000000cff         db  0x63 ; 'c'
                     aAtionshortname:
0000000000000d00         db         "ation_short_name", 0
0000000000000d11         db  0x66 ; 'f'
0000000000000d12         db  0x64 ; 'd'
0000000000000d13         db  0x6f ; 'o'
0000000000000d14         db  0x70 ; 'p'
0000000000000d15         db  0x65 ; 'e'
0000000000000d16         db  0x6e ; 'n'
0000000000000d17         db  0x00 ; '.'
0000000000000d18         db  0x5f ; '_'
0000000000000d19         db  0x5f ; '_'
0000000000000d1a         db  0x63 ; 'c'
0000000000000d1b         db  0x74 ; 't'
0000000000000d1c         db  0x79 ; 'y'
0000000000000d1d         db  0x70 ; 'p'
0000000000000d1e         db  0x65 ; 'e'
0000000000000d1f         db  0x5f ; '_'
0000000000000d20         db  0x74 ; 't'
0000000000000d21         db  0x6f ; 'o'
0000000000000d22         db  0x75 ; 'u'
0000000000000d23         db  0x70 ; 'p'
0000000000000d24         db  0x70 ; 'p'
0000000000000d25         db  0x65 ; 'e'
0000000000000d26         db  0x72 ; 'r'
0000000000000d27         db  0x5f ; '_'
0000000000000d28         db  0x6c ; 'l'
0000000000000d29         db  0x6f ; 'o'
0000000000000d2a         db  0x63 ; 'c'
0000000000000d2b         db  0x00 ; '.'
0000000000000d2c         db  0x5f ; '_'
0000000000000d2d         db  0x5f ; '_'
0000000000000d2e         db  0x63 ; 'c'
0000000000000d2f         db  0x74 ; 't'
0000000000000d30         db  0x79 ; 'y'
0000000000000d31         db  0x70 ; 'p'
0000000000000d32         db  0x65 ; 'e'
0000000000000d33         db  0x5f ; '_'
0000000000000d34         db  0x74 ; 't'
0000000000000d35         db  0x6f ; 'o'
0000000000000d36         db  0x6c ; 'l'
0000000000000d37         db  0x6f ; 'o'
0000000000000d38         db  0x77 ; 'w'
0000000000000d39         db  0x65 ; 'e'
0000000000000d3a         db  0x72 ; 'r'
0000000000000d3b         db  0x5f ; '_'
0000000000000d3c         db  0x6c ; 'l'
0000000000000d3d         db  0x6f ; 'o'
0000000000000d3e         db  0x63 ; 'c'
0000000000000d3f         db  0x00 ; '.'
0000000000000d40         db  0x5f ; '_'
0000000000000d41         db  0x5f ; '_'
0000000000000d42         db  0x63 ; 'c'
0000000000000d43         db  0x78 ; 'x'
0000000000000d44         db  0x61 ; 'a'
0000000000000d45         db  0x5f ; '_'
0000000000000d46         db  0x66 ; 'f'
0000000000000d47         db  0x69 ; 'i'
0000000000000d48         db  0x6e ; 'n'
0000000000000d49         db  0x61 ; 'a'
0000000000000d4a         db  0x6c ; 'l'
0000000000000d4b         db  0x69 ; 'i'
0000000000000d4c         db  0x7a ; 'z'
0000000000000d4d         db  0x65 ; 'e'
0000000000000d4e         db  0x00 ; '.'
0000000000000d4f         db  0x66 ; 'f'
0000000000000d50         db  0x63 ; 'c'
0000000000000d51         db  0x6e ; 'n'
0000000000000d52         db  0x74 ; 't'
0000000000000d53         db  0x6c ; 'l'
0000000000000d54         db  0x00 ; '.'
0000000000000d55         db  0x5f ; '_'
0000000000000d56         db  0x5f ; '_'
0000000000000d57         db  0x73 ; 's'
0000000000000d58         db  0x70 ; 'p'
0000000000000d59         db  0x72 ; 'r'
0000000000000d5a         db  0x69 ; 'i'
0000000000000d5b         db  0x6e ; 'n'
0000000000000d5c         db  0x74 ; 't'
0000000000000d5d         db  0x66 ; 'f'
0000000000000d5e         db  0x5f ; '_'
0000000000000d5f         db  0x63 ; 'c'
0000000000000d60         db  0x68 ; 'h'
0000000000000d61         db  0x6b ; 'k'
0000000000000d62         db  0x00 ; '.'
0000000000000d63         db  0x62 ; 'b'
0000000000000d64         db  0x69 ; 'i'
0000000000000d65         db  0x6e ; 'n'
0000000000000d66         db  0x64 ; 'd'
0000000000000d67         db  0x74 ; 't'
0000000000000d68         db  0x65 ; 'e'
0000000000000d69         db  0x78 ; 'x'
0000000000000d6a         db  0x74 ; 't'
0000000000000d6b         db  0x64 ; 'd'
0000000000000d6c         db  0x6f ; 'o'
0000000000000d6d         db  0x6d ; 'm'
0000000000000d6e         db  0x61 ; 'a'
0000000000000d6f         db  0x69 ; 'i'
0000000000000d70         db  0x6e ; 'n'
0000000000000d71         db  0x00 ; '.'
0000000000000d72         db  0x73 ; 's'
0000000000000d73         db  0x74 ; 't'
0000000000000d74         db  0x72 ; 'r'
0000000000000d75         db  0x63 ; 'c'
0000000000000d76         db  0x6d ; 'm'
0000000000000d77         db  0x70 ; 'p'
0000000000000d78         db  0x00 ; '.'
0000000000000d79         db  0x5f ; '_'
0000000000000d7a         db  0x5f ; '_'
0000000000000d7b         db  0x6c ; 'l'
0000000000000d7c         db  0x69 ; 'i'
0000000000000d7d         db  0x62 ; 'b'
0000000000000d7e         db  0x63 ; 'c'
0000000000000d7f         db  0x5f ; '_'
0000000000000d80         db  0x73 ; 's'
0000000000000d81         db  0x74 ; 't'
0000000000000d82         db  0x61 ; 'a'
0000000000000d83         db  0x72 ; 'r'
0000000000000d84         db  0x74 ; 't'
0000000000000d85         db  0x5f ; '_'
0000000000000d86         db  0x6d ; 'm'
0000000000000d87         db  0x61 ; 'a'
0000000000000d88         db  0x69 ; 'i'
0000000000000d89         db  0x6e ; 'n'
0000000000000d8a         db  0x00 ; '.'
0000000000000d8b         db  0x66 ; 'f'
0000000000000d8c         db  0x73 ; 's'
0000000000000d8d         db  0x65 ; 'e'
0000000000000d8e         db  0x65 ; 'e'
0000000000000d8f         db  0x6b ; 'k'
0000000000000d90         db  0x6f ; 'o'
0000000000000d91         db  0x00 ; '.'
0000000000000d92         db  0x5f ; '_'
0000000000000d93         db  0x5f ; '_'
0000000000000d94         db  0x6f ; 'o'
0000000000000d95         db  0x76 ; 'v'
0000000000000d96         db  0x65 ; 'e'
0000000000000d97         db  0x72 ; 'r'
0000000000000d98         db  0x66 ; 'f'
0000000000000d99         db  0x6c ; 'l'
0000000000000d9a         db  0x6f ; 'o'
0000000000000d9b         db  0x77 ; 'w'
0000000000000d9c         db  0x00 ; '.'
0000000000000d9d         db  0x5f ; '_'
0000000000000d9e         db  0x5f ; '_'
0000000000000d9f         db  0x73 ; 's'
0000000000000da0         db  0x74 ; 't'
0000000000000da1         db  0x72 ; 'r'
0000000000000da2         db  0x74 ; 't'
0000000000000da3         db  0x6f ; 'o'
0000000000000da4         db  0x75 ; 'u'
0000000000000da5         db  0x6c ; 'l'
0000000000000da6         db  0x5f ; '_'
0000000000000da7         db  0x69 ; 'i'
0000000000000da8         db  0x6e ; 'n'
0000000000000da9         db  0x74 ; 't'
0000000000000daa         db  0x65 ; 'e'
0000000000000dab         db  0x72 ; 'r'
0000000000000dac         db  0x6e ; 'n'
0000000000000dad         db  0x61 ; 'a'
0000000000000dae         db  0x6c ; 'l'
0000000000000daf         db  0x00 ; '.'
0000000000000db0         db  0x66 ; 'f'
0000000000000db1         db  0x70 ; 'p'
0000000000000db2         db  0x75 ; 'u'
0000000000000db3         db  0x74 ; 't'
0000000000000db4         db  0x73 ; 's'
0000000000000db5         db  0x5f ; '_'
0000000000000db6         db  0x75 ; 'u'
0000000000000db7         db  0x6e ; 'n'
0000000000000db8         db  0x6c ; 'l'
0000000000000db9         db  0x6f ; 'o'
0000000000000dba         db  0x63 ; 'c'
0000000000000dbb         db  0x6b ; 'k'
0000000000000dbc         db  0x65 ; 'e'
0000000000000dbd         db  0x64 ; 'd'
0000000000000dbe         db  0x00 ; '.'
0000000000000dbf         db  0x66 ; 'f'
0000000000000dc0         db  0x72 ; 'r'
0000000000000dc1         db  0x65 ; 'e'
0000000000000dc2         db  0x65 ; 'e'
0000000000000dc3         db  0x00 ; '.'
0000000000000dc4         db  0x5f ; '_'
0000000000000dc5         db  0x5f ; '_'
0000000000000dc6         db  0x70 ; 'p'
0000000000000dc7         db  0x72 ; 'r'
0000000000000dc8         db  0x6f ; 'o'
0000000000000dc9         db  0x67 ; 'g'
0000000000000dca         db  0x6e ; 'n'
0000000000000dcb         db  0x61 ; 'a'
0000000000000dcc         db  0x6d ; 'm'
0000000000000dcd         db  0x65 ; 'e'
0000000000000dce         db  0x00 ; '.'
0000000000000dcf         db  0x5f ; '_'
0000000000000dd0         db  0x5f ; '_'
0000000000000dd1         db  0x70 ; 'p'
0000000000000dd2         db  0x72 ; 'r'
0000000000000dd3         db  0x6f ; 'o'
0000000000000dd4         db  0x67 ; 'g'
0000000000000dd5         db  0x6e ; 'n'
0000000000000dd6         db  0x61 ; 'a'
0000000000000dd7         db  0x6d ; 'm'
0000000000000dd8         db  0x65 ; 'e'
0000000000000dd9         db  0x5f ; '_'
0000000000000dda         db  0x66 ; 'f'
0000000000000ddb         db  0x75 ; 'u'
0000000000000ddc         db  0x6c ; 'l'
0000000000000ddd         db  0x6c ; 'l'
0000000000000dde         db  0x00 ; '.'
0000000000000ddf         db  0x5f ; '_'
0000000000000de0         db  0x5f ; '_'
0000000000000de1         db  0x63 ; 'c'
0000000000000de2         db  0x78 ; 'x'
0000000000000de3         db  0x61 ; 'a'
0000000000000de4         db  0x5f ; '_'
0000000000000de5         db  0x61 ; 'a'
0000000000000de6         db  0x74 ; 't'
0000000000000de7         db  0x65 ; 'e'
0000000000000de8         db  0x78 ; 'x'
0000000000000de9         db  0x69 ; 'i'
0000000000000dea         db  0x74 ; 't'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x47 ; 'G'
0000000000000ded         db  0x4c ; 'L'
0000000000000dee         db  0x49 ; 'I'
0000000000000def         db  0x42 ; 'B'
0000000000000df0         db  0x43 ; 'C'
0000000000000df1         db  0x5f ; '_'
0000000000000df2         db  0x32 ; '2'
0000000000000df3         db  0x2e ; '.'
0000000000000df4         db  0x33 ; '3'
0000000000000df5         db  0x2e ; '.'
0000000000000df6         db  0x34 ; '4'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x47 ; 'G'
0000000000000df9         db  0x4c ; 'L'
0000000000000dfa         db  0x49 ; 'I'
0000000000000dfb         db  0x42 ; 'B'
0000000000000dfc         db  0x43 ; 'C'
0000000000000dfd         db  0x5f ; '_'
0000000000000dfe         db  0x32 ; '2'
0000000000000dff         db  0x2e ; '.'
0000000000000e00         db  0x31 ; '1'
0000000000000e01         db  0x34 ; '4'
0000000000000e02         db  0x00 ; '.'
0000000000000e03         db  0x47 ; 'G'
0000000000000e04         db  0x4c ; 'L'
0000000000000e05         db  0x49 ; 'I'
0000000000000e06         db  0x42 ; 'B'
0000000000000e07         db  0x43 ; 'C'
0000000000000e08         db  0x5f ; '_'
0000000000000e09         db  0x32 ; '2'
0000000000000e0a         db  0x2e ; '.'
0000000000000e0b         db  0x34 ; '4'
0000000000000e0c         db  0x00 ; '.'
0000000000000e0d         db  0x47 ; 'G'
0000000000000e0e         db  0x4c ; 'L'
0000000000000e0f         db  0x49 ; 'I'
0000000000000e10         db  0x42 ; 'B'
0000000000000e11         db  0x43 ; 'C'
0000000000000e12         db  0x5f ; '_'
0000000000000e13         db  0x32 ; '2'
0000000000000e14         db  0x2e ; '.'
0000000000000e15         db  0x31 ; '1'
0000000000000e16         db  0x37 ; '7'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x47 ; 'G'
0000000000000e19         db  0x4c ; 'L'
0000000000000e1a         db  0x49 ; 'I'
0000000000000e1b         db  0x42 ; 'B'
0000000000000e1c         db  0x43 ; 'C'
0000000000000e1d         db  0x5f ; '_'
0000000000000e1e         db  0x32 ; '2'
0000000000000e1f         db  0x2e ; '.'
0000000000000e20         db  0x32 ; '2'
0000000000000e21         db  0x2e ; '.'
0000000000000e22         db  0x35 ; '5'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x47 ; 'G'
0000000000000e25         db  0x4c ; 'L'
0000000000000e26         db  0x49 ; 'I'
0000000000000e27         db  0x42 ; 'B'
0000000000000e28         db  0x43 ; 'C'
0000000000000e29         db  0x5f ; '_'
0000000000000e2a         db  0x32 ; '2'
0000000000000e2b         db  0x2e ; '.'
0000000000000e2c         db  0x33 ; '3'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x5f ; '_'
0000000000000e2f         db  0x49 ; 'I'
0000000000000e30         db  0x54 ; 'T'
0000000000000e31         db  0x4d ; 'M'
0000000000000e32         db  0x5f ; '_'
0000000000000e33         db  0x64 ; 'd'
0000000000000e34         db  0x65 ; 'e'
0000000000000e35         db  0x72 ; 'r'
0000000000000e36         db  0x65 ; 'e'
0000000000000e37         db  0x67 ; 'g'
0000000000000e38         db  0x69 ; 'i'
0000000000000e39         db  0x73 ; 's'
0000000000000e3a         db  0x74 ; 't'
0000000000000e3b         db  0x65 ; 'e'
0000000000000e3c         db  0x72 ; 'r'
0000000000000e3d         db  0x54 ; 'T'
0000000000000e3e         db  0x4d ; 'M'
0000000000000e3f         db  0x43 ; 'C'
0000000000000e40         db  0x6c ; 'l'
0000000000000e41         db  0x6f ; 'o'
0000000000000e42         db  0x6e ; 'n'
0000000000000e43         db  0x65 ; 'e'
0000000000000e44         db  0x54 ; 'T'
0000000000000e45         db  0x61 ; 'a'
0000000000000e46         db  0x62 ; 'b'
0000000000000e47         db  0x6c ; 'l'
0000000000000e48         db  0x65 ; 'e'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x5f ; '_'
0000000000000e4b         db  0x5f ; '_'
0000000000000e4c         db  0x67 ; 'g'
0000000000000e4d         db  0x6d ; 'm'
0000000000000e4e         db  0x6f ; 'o'
0000000000000e4f         db  0x6e ; 'n'
0000000000000e50         db  0x5f ; '_'
0000000000000e51         db  0x73 ; 's'
0000000000000e52         db  0x74 ; 't'
0000000000000e53         db  0x61 ; 'a'
0000000000000e54         db  0x72 ; 'r'
0000000000000e55         db  0x74 ; 't'
0000000000000e56         db  0x5f ; '_'
0000000000000e57         db  0x5f ; '_'
0000000000000e58         db  0x00 ; '.'
0000000000000e59         db  0x5f ; '_'
0000000000000e5a         db  0x49 ; 'I'
0000000000000e5b         db  0x54 ; 'T'
0000000000000e5c         db  0x4d ; 'M'
0000000000000e5d         db  0x5f ; '_'
0000000000000e5e         db  0x72 ; 'r'
0000000000000e5f         db  0x65 ; 'e'
0000000000000e60         db  0x67 ; 'g'
0000000000000e61         db  0x69 ; 'i'
0000000000000e62         db  0x73 ; 's'
0000000000000e63         db  0x74 ; 't'
0000000000000e64         db  0x65 ; 'e'
0000000000000e65         db  0x72 ; 'r'
0000000000000e66         db  0x54 ; 'T'
0000000000000e67         db  0x4d ; 'M'
0000000000000e68         db  0x43 ; 'C'
0000000000000e69         db  0x6c ; 'l'
0000000000000e6a         db  0x6f ; 'o'
0000000000000e6b         db  0x6e ; 'n'
0000000000000e6c         db  0x65 ; 'e'
0000000000000e6d         db  0x54 ; 'T'
0000000000000e6e         db  0x61 ; 'a'
0000000000000e6f         db  0x62 ; 'b'
0000000000000e70         db  0x6c ; 'l'
0000000000000e71         db  0x65 ; 'e'
0000000000000e72         db  0x00 ; '.'
0000000000000e73         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xe74; 0xf1c[ (168 bytes)
        ; File offset : [3700; 3868[ (168 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000e74         db  0x00 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x02 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x03 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x03 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x03 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x03 ; '.'
0000000000000e7f         db  0x00 ; '.'
0000000000000e80         db  0x03 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x03 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x00 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x03 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x03 ; '.'
0000000000000e89         db  0x00 ; '.'
0000000000000e8a         db  0x03 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x03 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x03 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x04 ; '.'
0000000000000e91         db  0x00 ; '.'
0000000000000e92         db  0x03 ; '.'
0000000000000e93         db  0x00 ; '.'
0000000000000e94         db  0x03 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x03 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0x03 ; '.'
0000000000000e99         db  0x00 ; '.'
0000000000000e9a         db  0x03 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x03 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x03 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x03 ; '.'
0000000000000ea1         db  0x00 ; '.'
0000000000000ea2         db  0x05 ; '.'
0000000000000ea3         db  0x00 ; '.'
0000000000000ea4         db  0x03 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x03 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0x03 ; '.'
0000000000000ea9         db  0x00 ; '.'
0000000000000eaa         db  0x03 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x03 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x03 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x03 ; '.'
0000000000000eb1         db  0x00 ; '.'
0000000000000eb2         db  0x03 ; '.'
0000000000000eb3         db  0x00 ; '.'
0000000000000eb4         db  0x03 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x03 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0x03 ; '.'
0000000000000eb9         db  0x00 ; '.'
0000000000000eba         db  0x03 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x03 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x03 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x03 ; '.'
0000000000000ec1         db  0x00 ; '.'
0000000000000ec2         db  0x03 ; '.'
0000000000000ec3         db  0x00 ; '.'
0000000000000ec4         db  0x03 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x00 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x03 ; '.'
0000000000000ec9         db  0x00 ; '.'
0000000000000eca         db  0x06 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x03 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x03 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x03 ; '.'
0000000000000ed1         db  0x00 ; '.'
0000000000000ed2         db  0x03 ; '.'
0000000000000ed3         db  0x00 ; '.'
0000000000000ed4         db  0x03 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x03 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x03 ; '.'
0000000000000ed9         db  0x00 ; '.'
0000000000000eda         db  0x03 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x03 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x03 ; '.'
0000000000000edf         db  0x00 ; '.'
0000000000000ee0         db  0x03 ; '.'
0000000000000ee1         db  0x00 ; '.'
0000000000000ee2         db  0x03 ; '.'
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x03 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x07 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x03 ; '.'
0000000000000ee9         db  0x00 ; '.'
0000000000000eea         db  0x03 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x03 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x03 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x03 ; '.'
0000000000000ef1         db  0x00 ; '.'
0000000000000ef2         db  0x03 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x03 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x03 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x03 ; '.'
0000000000000ef9         db  0x00 ; '.'
0000000000000efa         db  0x07 ; '.'
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x03 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x03 ; '.'
0000000000000f01         db  0x00 ; '.'
0000000000000f02         db  0x03 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x02 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x02 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x07 ; '.'
0000000000000f09         db  0x00 ; '.'
0000000000000f0a         db  0x03 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x03 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x03 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0x03 ; '.'
0000000000000f11         db  0x00 ; '.'
0000000000000f12         db  0x03 ; '.'
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x03 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x03 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x03 ; '.'
0000000000000f19         db  0x00 ; '.'
0000000000000f1a         db  0x03 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xf20; 0xf90[ (112 bytes)
        ; File offset : [3872; 3984[ (112 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000f20         db  0x01 ; '.'
0000000000000f21         db  0x00 ; '.'
0000000000000f22         db  0x06 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x01 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0x10 ; '.'
0000000000000f29         db  0x00 ; '.'
0000000000000f2a         db  0x00 ; '.'
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x74 ; 't'
0000000000000f31         db  0x19 ; '.'
0000000000000f32         db  0x69 ; 'i'
0000000000000f33         db  0x09 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x07 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0x2c ; ','
0000000000000f39         db  0x03 ; '.'
0000000000000f3a         db  0x00 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x10 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0x94 ; '.'
0000000000000f41         db  0x91 ; '.'
0000000000000f42         db  0x96 ; '.'
0000000000000f43         db  0x06 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x06 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x38 ; '8'
0000000000000f49         db  0x03 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x10 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0x14 ; '.'
0000000000000f51         db  0x69 ; 'i'
0000000000000f52         db  0x69 ; 'i'
0000000000000f53         db  0x0d ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x05 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0x43 ; 'C'
0000000000000f59         db  0x03 ; '.'
0000000000000f5a         db  0x00 ; '.'
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x10 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x97 ; '.'
0000000000000f61         db  0x91 ; '.'
0000000000000f62         db  0x96 ; '.'
0000000000000f63         db  0x06 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x04 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0x4d ; 'M'
0000000000000f69         db  0x03 ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x10 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0x75 ; 'u'
0000000000000f71         db  0x1a ; '.'
0000000000000f72         db  0x69 ; 'i'
0000000000000f73         db  0x09 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x03 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x58 ; 'X'
0000000000000f79         db  0x03 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x10 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0x13 ; '.'
0000000000000f81         db  0x69 ; 'i'
0000000000000f82         db  0x69 ; 'i'
0000000000000f83         db  0x0d ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x02 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0x64 ; 'd'
0000000000000f89         db  0x03 ; '.'
0000000000000f8a         db  0x00 ; '.'
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xf90; 0x14b8[ (1320 bytes)
        ; File offset : [3984; 5304[ (1320 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000f90         db  0xd0 ; '.'
0000000000000f91         db  0x07 ; '.'
0000000000000f92         db  0x21 ; '!'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0x08 ; '.'
0000000000000f99         db  0x00 ; '.'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0x10 ; '.'
0000000000000fa1         db  0x2a ; '*'
0000000000000fa2         db  0x00 ; '.'
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0xd8 ; '.'
0000000000000fa9         db  0x07 ; '.'
0000000000000faa         db  0x21 ; '!'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0x08 ; '.'
0000000000000fb1         db  0x00 ; '.'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0xd0 ; '.'
0000000000000fb9         db  0x29 ; ')'
0000000000000fba         db  0x00 ; '.'
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0xe0 ; '.'
0000000000000fc1         db  0x07 ; '.'
0000000000000fc2         db  0x21 ; '!'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0x08 ; '.'
0000000000000fc9         db  0x00 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x1d ; '.'
0000000000000fd1         db  0xc0 ; '.'
0000000000000fd2         db  0x00 ; '.'
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x00 ; '.'
0000000000000fd9         db  0x08 ; '.'
0000000000000fda         db  0x21 ; '!'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0x08 ; '.'
0000000000000fe1         db  0x00 ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x87 ; '.'
0000000000000fe9         db  0xbe ; '.'
0000000000000fea         db  0x00 ; '.'
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x20 ; ' '
0000000000000ff1         db  0x08 ; '.'
0000000000000ff2         db  0x21 ; '!'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0x08 ; '.'
0000000000000ff9         db  0x00 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x23 ; '#'
0000000000001001         db  0xc0 ; '.'
0000000000001002         db  0x00 ; '.'
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x40 ; '@'
0000000000001009         db  0x08 ; '.'
000000000000100a         db  0x21 ; '!'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0x08 ; '.'
0000000000001011         db  0x00 ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x2a ; '*'
0000000000001019         db  0xc0 ; '.'
000000000000101a         db  0x00 ; '.'
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x60 ; '`'
0000000000001021         db  0x08 ; '.'
0000000000001022         db  0x21 ; '!'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0x08 ; '.'
0000000000001029         db  0x00 ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0x3d ; '='
0000000000001031         db  0xc0 ; '.'
0000000000001032         db  0x00 ; '.'
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x80 ; '.'
0000000000001039         db  0x08 ; '.'
000000000000103a         db  0x21 ; '!'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x08 ; '.'
0000000000001041         db  0x00 ; '.'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0x4a ; 'J'
0000000000001049         db  0xc0 ; '.'
000000000000104a         db  0x00 ; '.'
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0xa0 ; '.'
0000000000001051         db  0x08 ; '.'
0000000000001052         db  0x21 ; '!'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x08 ; '.'
0000000000001059         db  0x00 ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0x56 ; 'V'
0000000000001061         db  0xc0 ; '.'
0000000000001062         db  0x00 ; '.'
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0xc0 ; '.'
0000000000001069         db  0x08 ; '.'
000000000000106a         db  0x21 ; '!'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x08 ; '.'
0000000000001071         db  0x00 ; '.'
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x62 ; 'b'
0000000000001079         db  0xc0 ; '.'
000000000000107a         db  0x00 ; '.'
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0xe0 ; '.'
0000000000001081         db  0x08 ; '.'
0000000000001082         db  0x21 ; '!'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x08 ; '.'
0000000000001089         db  0x00 ; '.'
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0xe1 ; '.'
0000000000001091         db  0xc0 ; '.'
0000000000001092         db  0x00 ; '.'
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x00 ; '.'
0000000000001099         db  0x09 ; '.'
000000000000109a         db  0x21 ; '!'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x08 ; '.'
00000000000010a1         db  0x00 ; '.'
00000000000010a2         db  0x00 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x6c ; 'l'
00000000000010a9         db  0xc0 ; '.'
00000000000010aa         db  0x00 ; '.'
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x20 ; ' '
00000000000010b1         db  0x09 ; '.'
00000000000010b2         db  0x21 ; '!'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x08 ; '.'
00000000000010b9         db  0x00 ; '.'
00000000000010ba         db  0x00 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x78 ; 'x'
00000000000010c1         db  0xc0 ; '.'
00000000000010c2         db  0x00 ; '.'
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x40 ; '@'
00000000000010c9         db  0x09 ; '.'
00000000000010ca         db  0x21 ; '!'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x08 ; '.'
00000000000010d1         db  0x00 ; '.'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x83 ; '.'
00000000000010d9         db  0xc0 ; '.'
00000000000010da         db  0x00 ; '.'
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x60 ; '`'
00000000000010e1         db  0x09 ; '.'
00000000000010e2         db  0x21 ; '!'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x08 ; '.'
00000000000010e9         db  0x00 ; '.'
00000000000010ea         db  0x00 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x8a ; '.'
00000000000010f1         db  0xc0 ; '.'
00000000000010f2         db  0x00 ; '.'
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x80 ; '.'
00000000000010f9         db  0x09 ; '.'
00000000000010fa         db  0x21 ; '!'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0x08 ; '.'
0000000000001101         db  0x00 ; '.'
0000000000001102         db  0x00 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x90 ; '.'
0000000000001109         db  0xc0 ; '.'
000000000000110a         db  0x00 ; '.'
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0xa0 ; '.'
0000000000001111         db  0x09 ; '.'
0000000000001112         db  0x21 ; '!'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0x08 ; '.'
0000000000001119         db  0x00 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x9d ; '.'
0000000000001121         db  0xc0 ; '.'
0000000000001122         db  0x00 ; '.'
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0xc0 ; '.'
0000000000001129         db  0x09 ; '.'
000000000000112a         db  0x21 ; '!'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x08 ; '.'
0000000000001131         db  0x00 ; '.'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0xaf ; '.'
0000000000001139         db  0xc0 ; '.'
000000000000113a         db  0x00 ; '.'
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0xe0 ; '.'
0000000000001141         db  0x09 ; '.'
0000000000001142         db  0x21 ; '!'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0x08 ; '.'
0000000000001149         db  0x00 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0xb6 ; '.'
0000000000001151         db  0xc0 ; '.'
0000000000001152         db  0x00 ; '.'
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x00 ; '.'
0000000000001159         db  0x0a ; '.'
000000000000115a         db  0x21 ; '!'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0x08 ; '.'
0000000000001161         db  0x00 ; '.'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0xc7 ; '.'
0000000000001169         db  0xc0 ; '.'
000000000000116a         db  0x00 ; '.'
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x20 ; ' '
0000000000001171         db  0x0a ; '.'
0000000000001172         db  0x21 ; '!'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0x08 ; '.'
0000000000001179         db  0x00 ; '.'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0xd1 ; '.'
0000000000001181         db  0xc0 ; '.'
0000000000001182         db  0x00 ; '.'
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x40 ; '@'
0000000000001189         db  0x0a ; '.'
000000000000118a         db  0x21 ; '!'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0x08 ; '.'
0000000000001191         db  0x00 ; '.'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0xdc ; '.'
0000000000001199         db  0xc0 ; '.'
000000000000119a         db  0x00 ; '.'
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x60 ; '`'
00000000000011a1         db  0x0a ; '.'
00000000000011a2         db  0x21 ; '!'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x08 ; '.'
00000000000011a9         db  0x00 ; '.'
00000000000011aa         db  0x00 ; '.'
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0xe8 ; '.'
00000000000011b1         db  0xc0 ; '.'
00000000000011b2         db  0x00 ; '.'
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x80 ; '.'
00000000000011b9         db  0x0a ; '.'
00000000000011ba         db  0x21 ; '!'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x08 ; '.'
00000000000011c1         db  0x00 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0xf8 ; '.'
00000000000011c9         db  0xc0 ; '.'
00000000000011ca         db  0x00 ; '.'
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0xa0 ; '.'
00000000000011d1         db  0x0a ; '.'
00000000000011d2         db  0x21 ; '!'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0x08 ; '.'
00000000000011d9         db  0x00 ; '.'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x0e ; '.'
00000000000011e1         db  0xc1 ; '.'
00000000000011e2         db  0x00 ; '.'
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0xc0 ; '.'
00000000000011e9         db  0x0a ; '.'
00000000000011ea         db  0x21 ; '!'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x08 ; '.'
00000000000011f1         db  0x00 ; '.'
00000000000011f2         db  0x00 ; '.'
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x09 ; '.'
00000000000011f9         db  0xc1 ; '.'
00000000000011fa         db  0x00 ; '.'
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0xe0 ; '.'
0000000000001201         db  0x0a ; '.'
0000000000001202         db  0x21 ; '!'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x08 ; '.'
0000000000001209         db  0x00 ; '.'
000000000000120a         db  0x00 ; '.'
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0x14 ; '.'
0000000000001211         db  0xc1 ; '.'
0000000000001212         db  0x00 ; '.'
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x00 ; '.'
0000000000001219         db  0x0b ; '.'
000000000000121a         db  0x21 ; '!'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x00 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x08 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0x19 ; '.'
0000000000001229         db  0xc1 ; '.'
000000000000122a         db  0x00 ; '.'
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x40 ; '@'
0000000000001231         db  0x0b ; '.'
0000000000001232         db  0x21 ; '!'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x00 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x08 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0xb7 ; '.'
0000000000001241         db  0xda ; '.'
0000000000001242         db  0x00 ; '.'
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x48 ; 'H'
0000000000001249         db  0x0b ; '.'
000000000000124a         db  0x21 ; '!'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x00 ; '.'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x08 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0xbf ; '.'
0000000000001259         db  0xda ; '.'
000000000000125a         db  0x00 ; '.'
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x50 ; 'P'
0000000000001261         db  0x0b ; '.'
0000000000001262         db  0x21 ; '!'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x00 ; '.'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x08 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0xc5 ; '.'
0000000000001271         db  0xda ; '.'
0000000000001272         db  0x00 ; '.'
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x58 ; 'X'
0000000000001279         db  0x0b ; '.'
000000000000127a         db  0x21 ; '!'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x00 ; '.'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x08 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0xd2 ; '.'
0000000000001289         db  0xda ; '.'
000000000000128a         db  0x00 ; '.'
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x60 ; '`'
0000000000001291         db  0x0b ; '.'
0000000000001292         db  0x21 ; '!'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x00 ; '.'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x08 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0xdf ; '.'
00000000000012a1         db  0xda ; '.'
00000000000012a2         db  0x00 ; '.'
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x68 ; 'h'
00000000000012a9         db  0x0b ; '.'
00000000000012aa         db  0x21 ; '!'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x00 ; '.'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x08 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0xf3 ; '.'
00000000000012b9         db  0xda ; '.'
00000000000012ba         db  0x00 ; '.'
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x70 ; 'p'
00000000000012c1         db  0x0b ; '.'
00000000000012c2         db  0x21 ; '!'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x00 ; '.'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x08 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0xf5 ; '.'
00000000000012d1         db  0xda ; '.'
00000000000012d2         db  0x00 ; '.'
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x78 ; 'x'
00000000000012d9         db  0x0b ; '.'
00000000000012da         db  0x21 ; '!'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x00 ; '.'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x08 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0xd8 ; '.'
00000000000012e9         db  0xda ; '.'
00000000000012ea         db  0x00 ; '.'
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x80 ; '.'
00000000000012f1         db  0x0b ; '.'
00000000000012f2         db  0x21 ; '!'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x00 ; '.'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x08 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0xd1 ; '.'
0000000000001301         db  0xbf ; '.'
0000000000001302         db  0x00 ; '.'
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x88 ; '.'
0000000000001309         db  0x0b ; '.'
000000000000130a         db  0x21 ; '!'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x00 ; '.'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x08 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0xfd ; '.'
0000000000001319         db  0xda ; '.'
000000000000131a         db  0x00 ; '.'
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x08 ; '.'
0000000000001321         db  0x10 ; '.'
0000000000001322         db  0x21 ; '!'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x00 ; '.'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x08 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0x08 ; '.'
0000000000001331         db  0x10 ; '.'
0000000000001332         db  0x21 ; '!'
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x50 ; 'P'
0000000000001339         db  0x10 ; '.'
000000000000133a         db  0x21 ; '!'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x00 ; '.'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x08 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'
0000000000001348         db  0xe5 ; '.'
0000000000001349         db  0xbe ; '.'
000000000000134a         db  0x00 ; '.'
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x58 ; 'X'
0000000000001351         db  0x10 ; '.'
0000000000001352         db  0x21 ; '!'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x00 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x08 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0x35 ; '5'
0000000000001361         db  0xd8 ; '.'
0000000000001362         db  0x00 ; '.'
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0xc0 ; '.'
0000000000001369         db  0x10 ; '.'
000000000000136a         db  0x21 ; '!'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x00 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x08 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0xd0 ; '.'
0000000000001379         db  0x10 ; '.'
000000000000137a         db  0x21 ; '!'
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0xd8 ; '.'
0000000000001381         db  0x10 ; '.'
0000000000001382         db  0x21 ; '!'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x00 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x08 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0x60 ; '`'
0000000000001391         db  0x12 ; '.'
0000000000001392         db  0x21 ; '!'
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0xc8 ; '.'
0000000000001399         db  0x0f ; '.'
000000000000139a         db  0x21 ; '!'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x00 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x06 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x08 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0x00 ; '.'
00000000000013a9         db  0x00 ; '.'
00000000000013aa         db  0x00 ; '.'
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0xd0 ; '.'
00000000000013b1         db  0x0f ; '.'
00000000000013b2         db  0x21 ; '!'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x00 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x06 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x24 ; '$'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0x00 ; '.'
00000000000013c1         db  0x00 ; '.'
00000000000013c2         db  0x00 ; '.'
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0xd8 ; '.'
00000000000013c9         db  0x0f ; '.'
00000000000013ca         db  0x21 ; '!'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x00 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x06 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x29 ; ')'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0x00 ; '.'
00000000000013d9         db  0x00 ; '.'
00000000000013da         db  0x00 ; '.'
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0xe0 ; '.'
00000000000013e1         db  0x0f ; '.'
00000000000013e2         db  0x21 ; '!'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x00 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x06 ; '.'
00000000000013e9         db  0x00 ; '.'
00000000000013ea         db  0x00 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x44 ; 'D'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0x00 ; '.'
00000000000013f1         db  0x00 ; '.'
00000000000013f2         db  0x00 ; '.'
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0xe8 ; '.'
00000000000013f9         db  0x0f ; '.'
00000000000013fa         db  0x21 ; '!'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x00 ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x06 ; '.'
0000000000001401         db  0x00 ; '.'
0000000000001402         db  0x00 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x47 ; 'G'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x00 ; '.'
0000000000001409         db  0x00 ; '.'
000000000000140a         db  0x00 ; '.'
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0xe0 ; '.'
0000000000001411         db  0x10 ; '.'
0000000000001412         db  0x21 ; '!'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x00 ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x05 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x4c ; 'L'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x00 ; '.'
0000000000001421         db  0x00 ; '.'
0000000000001422         db  0x00 ; '.'
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0xe8 ; '.'
0000000000001429         db  0x10 ; '.'
000000000000142a         db  0x21 ; '!'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x00 ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x05 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x4b ; 'K'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x00 ; '.'
0000000000001439         db  0x00 ; '.'
000000000000143a         db  0x00 ; '.'
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0xf0 ; '.'
0000000000001441         db  0x10 ; '.'
0000000000001442         db  0x21 ; '!'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x00 ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x05 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x00 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x4d ; 'M'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x00 ; '.'
0000000000001451         db  0x00 ; '.'
0000000000001452         db  0x00 ; '.'
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0xf8 ; '.'
0000000000001459         db  0x10 ; '.'
000000000000145a         db  0x21 ; '!'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x00 ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x05 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x00 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x52 ; 'R'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x00 ; '.'
0000000000001469         db  0x00 ; '.'
000000000000146a         db  0x00 ; '.'
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x00 ; '.'
0000000000001471         db  0x11 ; '.'
0000000000001472         db  0x21 ; '!'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x00 ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x05 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x53 ; 'S'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x00 ; '.'
0000000000001481         db  0x00 ; '.'
0000000000001482         db  0x00 ; '.'
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x08 ; '.'
0000000000001489         db  0x11 ; '.'
000000000000148a         db  0x21 ; '!'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x00 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x05 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x4f ; 'O'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x00 ; '.'
0000000000001499         db  0x00 ; '.'
000000000000149a         db  0x00 ; '.'
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x20 ; ' '
00000000000014a1         db  0x11 ; '.'
00000000000014a2         db  0x21 ; '!'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x00 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x05 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x51 ; 'Q'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x00 ; '.'
00000000000014b1         db  0x00 ; '.'
00000000000014b2         db  0x00 ; '.'
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x14b8; 0x1b30[ (1656 bytes)
        ; File offset : [5304; 6960[ (1656 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

00000000000014b8         db  0xa0 ; '.'
00000000000014b9         db  0x0d ; '.'
00000000000014ba         db  0x21 ; '!'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x00 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x07 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x01 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x00 ; '.'
00000000000014c9         db  0x00 ; '.'
00000000000014ca         db  0x00 ; '.'
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0xa8 ; '.'
00000000000014d1         db  0x0d ; '.'
00000000000014d2         db  0x21 ; '!'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x00 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x07 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x02 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x00 ; '.'
00000000000014e1         db  0x00 ; '.'
00000000000014e2         db  0x00 ; '.'
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0xb0 ; '.'
00000000000014e9         db  0x0d ; '.'
00000000000014ea         db  0x21 ; '!'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x00 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x07 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x03 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x00 ; '.'
00000000000014f9         db  0x00 ; '.'
00000000000014fa         db  0x00 ; '.'
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0xb8 ; '.'
0000000000001501         db  0x0d ; '.'
0000000000001502         db  0x21 ; '!'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x00 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x07 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x04 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x00 ; '.'
0000000000001511         db  0x00 ; '.'
0000000000001512         db  0x00 ; '.'
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0xc0 ; '.'
0000000000001519         db  0x0d ; '.'
000000000000151a         db  0x21 ; '!'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x00 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x07 ; '.'
0000000000001521         db  0x00 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x05 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x00 ; '.'
0000000000001529         db  0x00 ; '.'
000000000000152a         db  0x00 ; '.'
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0xc8 ; '.'
0000000000001531         db  0x0d ; '.'
0000000000001532         db  0x21 ; '!'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x00 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x07 ; '.'
0000000000001539         db  0x00 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x06 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x00 ; '.'
0000000000001541         db  0x00 ; '.'
0000000000001542         db  0x00 ; '.'
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0xd0 ; '.'
0000000000001549         db  0x0d ; '.'
000000000000154a         db  0x21 ; '!'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x00 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x07 ; '.'
0000000000001551         db  0x00 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x07 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x00 ; '.'
0000000000001559         db  0x00 ; '.'
000000000000155a         db  0x00 ; '.'
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0xd8 ; '.'
0000000000001561         db  0x0d ; '.'
0000000000001562         db  0x21 ; '!'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x00 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x07 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x09 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x00 ; '.'
0000000000001571         db  0x00 ; '.'
0000000000001572         db  0x00 ; '.'
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0xe0 ; '.'
0000000000001579         db  0x0d ; '.'
000000000000157a         db  0x21 ; '!'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x00 ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x07 ; '.'
0000000000001581         db  0x00 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x0a ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x00 ; '.'
0000000000001589         db  0x00 ; '.'
000000000000158a         db  0x00 ; '.'
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0xe8 ; '.'
0000000000001591         db  0x0d ; '.'
0000000000001592         db  0x21 ; '!'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x00 ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x07 ; '.'
0000000000001599         db  0x00 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x0b ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x00 ; '.'
00000000000015a1         db  0x00 ; '.'
00000000000015a2         db  0x00 ; '.'
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0xf0 ; '.'
00000000000015a9         db  0x0d ; '.'
00000000000015aa         db  0x21 ; '!'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x00 ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x07 ; '.'
00000000000015b1         db  0x00 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x0c ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x00 ; '.'
00000000000015b9         db  0x00 ; '.'
00000000000015ba         db  0x00 ; '.'
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0xf8 ; '.'
00000000000015c1         db  0x0d ; '.'
00000000000015c2         db  0x21 ; '!'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x00 ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x07 ; '.'
00000000000015c9         db  0x00 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x0d ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x00 ; '.'
00000000000015d1         db  0x00 ; '.'
00000000000015d2         db  0x00 ; '.'
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x00 ; '.'
00000000000015d9         db  0x0e ; '.'
00000000000015da         db  0x21 ; '!'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x00 ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x07 ; '.'
00000000000015e1         db  0x00 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x0e ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0x00 ; '.'
00000000000015e9         db  0x00 ; '.'
00000000000015ea         db  0x00 ; '.'
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x08 ; '.'
00000000000015f1         db  0x0e ; '.'
00000000000015f2         db  0x21 ; '!'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x00 ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x07 ; '.'
00000000000015f9         db  0x00 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x0f ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0x00 ; '.'
0000000000001601         db  0x00 ; '.'
0000000000001602         db  0x00 ; '.'
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x10 ; '.'
0000000000001609         db  0x0e ; '.'
000000000000160a         db  0x21 ; '!'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x00 ; '.'
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x07 ; '.'
0000000000001611         db  0x00 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x10 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0x00 ; '.'
0000000000001619         db  0x00 ; '.'
000000000000161a         db  0x00 ; '.'
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x18 ; '.'
0000000000001621         db  0x0e ; '.'
0000000000001622         db  0x21 ; '!'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x00 ; '.'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x07 ; '.'
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x11 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0x00 ; '.'
0000000000001631         db  0x00 ; '.'
0000000000001632         db  0x00 ; '.'
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x20 ; ' '
0000000000001639         db  0x0e ; '.'
000000000000163a         db  0x21 ; '!'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x00 ; '.'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x07 ; '.'
0000000000001641         db  0x00 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x12 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0x00 ; '.'
0000000000001649         db  0x00 ; '.'
000000000000164a         db  0x00 ; '.'
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x28 ; '('
0000000000001651         db  0x0e ; '.'
0000000000001652         db  0x21 ; '!'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x00 ; '.'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x07 ; '.'
0000000000001659         db  0x00 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x13 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0x00 ; '.'
0000000000001661         db  0x00 ; '.'
0000000000001662         db  0x00 ; '.'
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x30 ; '0'
0000000000001669         db  0x0e ; '.'
000000000000166a         db  0x21 ; '!'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x00 ; '.'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x07 ; '.'
0000000000001671         db  0x00 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x14 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0x00 ; '.'
0000000000001679         db  0x00 ; '.'
000000000000167a         db  0x00 ; '.'
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x38 ; '8'
0000000000001681         db  0x0e ; '.'
0000000000001682         db  0x21 ; '!'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x00 ; '.'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x07 ; '.'
0000000000001689         db  0x00 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x15 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0x00 ; '.'
0000000000001691         db  0x00 ; '.'
0000000000001692         db  0x00 ; '.'
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x40 ; '@'
0000000000001699         db  0x0e ; '.'
000000000000169a         db  0x21 ; '!'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x00 ; '.'
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x07 ; '.'
00000000000016a1         db  0x00 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x16 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0x00 ; '.'
00000000000016a9         db  0x00 ; '.'
00000000000016aa         db  0x00 ; '.'
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x48 ; 'H'
00000000000016b1         db  0x0e ; '.'
00000000000016b2         db  0x21 ; '!'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x00 ; '.'
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x07 ; '.'
00000000000016b9         db  0x00 ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x17 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0x00 ; '.'
00000000000016c1         db  0x00 ; '.'
00000000000016c2         db  0x00 ; '.'
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x50 ; 'P'
00000000000016c9         db  0x0e ; '.'
00000000000016ca         db  0x21 ; '!'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x00 ; '.'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x07 ; '.'
00000000000016d1         db  0x00 ; '.'
00000000000016d2         db  0x00 ; '.'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x18 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0x00 ; '.'
00000000000016d9         db  0x00 ; '.'
00000000000016da         db  0x00 ; '.'
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x58 ; 'X'
00000000000016e1         db  0x0e ; '.'
00000000000016e2         db  0x21 ; '!'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x00 ; '.'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x07 ; '.'
00000000000016e9         db  0x00 ; '.'
00000000000016ea         db  0x00 ; '.'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x19 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0x00 ; '.'
00000000000016f1         db  0x00 ; '.'
00000000000016f2         db  0x00 ; '.'
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x60 ; '`'
00000000000016f9         db  0x0e ; '.'
00000000000016fa         db  0x21 ; '!'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x00 ; '.'
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x07 ; '.'
0000000000001701         db  0x00 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x1a ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x00 ; '.'
0000000000001709         db  0x00 ; '.'
000000000000170a         db  0x00 ; '.'
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x68 ; 'h'
0000000000001711         db  0x0e ; '.'
0000000000001712         db  0x21 ; '!'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x00 ; '.'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x07 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x1b ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x00 ; '.'
0000000000001721         db  0x00 ; '.'
0000000000001722         db  0x00 ; '.'
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x70 ; 'p'
0000000000001729         db  0x0e ; '.'
000000000000172a         db  0x21 ; '!'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x00 ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x07 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x1c ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x00 ; '.'
0000000000001739         db  0x00 ; '.'
000000000000173a         db  0x00 ; '.'
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x78 ; 'x'
0000000000001741         db  0x0e ; '.'
0000000000001742         db  0x21 ; '!'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x00 ; '.'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x07 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x1d ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x00 ; '.'
0000000000001751         db  0x00 ; '.'
0000000000001752         db  0x00 ; '.'
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x80 ; '.'
0000000000001759         db  0x0e ; '.'
000000000000175a         db  0x21 ; '!'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x00 ; '.'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x07 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x1e ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x00 ; '.'
0000000000001769         db  0x00 ; '.'
000000000000176a         db  0x00 ; '.'
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x88 ; '.'
0000000000001771         db  0x0e ; '.'
0000000000001772         db  0x21 ; '!'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x00 ; '.'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x07 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x1f ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x00 ; '.'
0000000000001781         db  0x00 ; '.'
0000000000001782         db  0x00 ; '.'
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x90 ; '.'
0000000000001789         db  0x0e ; '.'
000000000000178a         db  0x21 ; '!'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x00 ; '.'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x07 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x20 ; ' '
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x00 ; '.'
0000000000001799         db  0x00 ; '.'
000000000000179a         db  0x00 ; '.'
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x98 ; '.'
00000000000017a1         db  0x0e ; '.'
00000000000017a2         db  0x21 ; '!'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x00 ; '.'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x07 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x21 ; '!'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x00 ; '.'
00000000000017b1         db  0x00 ; '.'
00000000000017b2         db  0x00 ; '.'
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0xa0 ; '.'
00000000000017b9         db  0x0e ; '.'
00000000000017ba         db  0x21 ; '!'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x00 ; '.'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x07 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x22 ; '"'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x00 ; '.'
00000000000017c9         db  0x00 ; '.'
00000000000017ca         db  0x00 ; '.'
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0xa8 ; '.'
00000000000017d1         db  0x0e ; '.'
00000000000017d2         db  0x21 ; '!'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x00 ; '.'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x07 ; '.'
00000000000017d9         db  0x00 ; '.'
00000000000017da         db  0x00 ; '.'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x23 ; '#'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x00 ; '.'
00000000000017e1         db  0x00 ; '.'
00000000000017e2         db  0x00 ; '.'
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0xb0 ; '.'
00000000000017e9         db  0x0e ; '.'
00000000000017ea         db  0x21 ; '!'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x00 ; '.'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x07 ; '.'
00000000000017f1         db  0x00 ; '.'
00000000000017f2         db  0x00 ; '.'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x25 ; '%'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x00 ; '.'
00000000000017f9         db  0x00 ; '.'
00000000000017fa         db  0x00 ; '.'
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0xb8 ; '.'
0000000000001801         db  0x0e ; '.'
0000000000001802         db  0x21 ; '!'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x00 ; '.'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x07 ; '.'
0000000000001809         db  0x00 ; '.'
000000000000180a         db  0x00 ; '.'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x26 ; '&'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x00 ; '.'
0000000000001811         db  0x00 ; '.'
0000000000001812         db  0x00 ; '.'
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0xc0 ; '.'
0000000000001819         db  0x0e ; '.'
000000000000181a         db  0x21 ; '!'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x00 ; '.'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x07 ; '.'
0000000000001821         db  0x00 ; '.'
0000000000001822         db  0x00 ; '.'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x27 ; '''
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x00 ; '.'
0000000000001829         db  0x00 ; '.'
000000000000182a         db  0x00 ; '.'
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0xc8 ; '.'
0000000000001831         db  0x0e ; '.'
0000000000001832         db  0x21 ; '!'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x00 ; '.'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x07 ; '.'
0000000000001839         db  0x00 ; '.'
000000000000183a         db  0x00 ; '.'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x28 ; '('
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x00 ; '.'
0000000000001841         db  0x00 ; '.'
0000000000001842         db  0x00 ; '.'
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0xd0 ; '.'
0000000000001849         db  0x0e ; '.'
000000000000184a         db  0x21 ; '!'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x00 ; '.'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x07 ; '.'
0000000000001851         db  0x00 ; '.'
0000000000001852         db  0x00 ; '.'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x2a ; '*'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x00 ; '.'
0000000000001859         db  0x00 ; '.'
000000000000185a         db  0x00 ; '.'
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0xd8 ; '.'
0000000000001861         db  0x0e ; '.'
0000000000001862         db  0x21 ; '!'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x00 ; '.'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x07 ; '.'
0000000000001869         db  0x00 ; '.'
000000000000186a         db  0x00 ; '.'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x2b ; '+'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x00 ; '.'
0000000000001871         db  0x00 ; '.'
0000000000001872         db  0x00 ; '.'
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0xe0 ; '.'
0000000000001879         db  0x0e ; '.'
000000000000187a         db  0x21 ; '!'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x00 ; '.'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x07 ; '.'
0000000000001881         db  0x00 ; '.'
0000000000001882         db  0x00 ; '.'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x2c ; ','
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x00 ; '.'
0000000000001889         db  0x00 ; '.'
000000000000188a         db  0x00 ; '.'
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0xe8 ; '.'
0000000000001891         db  0x0e ; '.'
0000000000001892         db  0x21 ; '!'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x00 ; '.'
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x07 ; '.'
0000000000001899         db  0x00 ; '.'
000000000000189a         db  0x00 ; '.'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x2d ; '-'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x00 ; '.'
00000000000018a1         db  0x00 ; '.'
00000000000018a2         db  0x00 ; '.'
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0xf0 ; '.'
00000000000018a9         db  0x0e ; '.'
00000000000018aa         db  0x21 ; '!'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x00 ; '.'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x07 ; '.'
00000000000018b1         db  0x00 ; '.'
00000000000018b2         db  0x00 ; '.'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x2e ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x00 ; '.'
00000000000018b9         db  0x00 ; '.'
00000000000018ba         db  0x00 ; '.'
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0xf8 ; '.'
00000000000018c1         db  0x0e ; '.'
00000000000018c2         db  0x21 ; '!'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x00 ; '.'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x07 ; '.'
00000000000018c9         db  0x00 ; '.'
00000000000018ca         db  0x00 ; '.'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x2f ; '/'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x00 ; '.'
00000000000018d1         db  0x00 ; '.'
00000000000018d2         db  0x00 ; '.'
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x00 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x00 ; '.'
00000000000018d9         db  0x0f ; '.'
00000000000018da         db  0x21 ; '!'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x00 ; '.'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x07 ; '.'
00000000000018e1         db  0x00 ; '.'
00000000000018e2         db  0x00 ; '.'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x30 ; '0'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0x00 ; '.'
00000000000018e9         db  0x00 ; '.'
00000000000018ea         db  0x00 ; '.'
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x08 ; '.'
00000000000018f1         db  0x0f ; '.'
00000000000018f2         db  0x21 ; '!'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x00 ; '.'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x07 ; '.'
00000000000018f9         db  0x00 ; '.'
00000000000018fa         db  0x00 ; '.'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x31 ; '1'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0x00 ; '.'
0000000000001901         db  0x00 ; '.'
0000000000001902         db  0x00 ; '.'
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x00 ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x10 ; '.'
0000000000001909         db  0x0f ; '.'
000000000000190a         db  0x21 ; '!'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x00 ; '.'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x07 ; '.'
0000000000001911         db  0x00 ; '.'
0000000000001912         db  0x00 ; '.'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x32 ; '2'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0x00 ; '.'
0000000000001919         db  0x00 ; '.'
000000000000191a         db  0x00 ; '.'
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x00 ; '.'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x18 ; '.'
0000000000001921         db  0x0f ; '.'
0000000000001922         db  0x21 ; '!'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x00 ; '.'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x07 ; '.'
0000000000001929         db  0x00 ; '.'
000000000000192a         db  0x00 ; '.'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x33 ; '3'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0x00 ; '.'
0000000000001931         db  0x00 ; '.'
0000000000001932         db  0x00 ; '.'
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x00 ; '.'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x20 ; ' '
0000000000001939         db  0x0f ; '.'
000000000000193a         db  0x21 ; '!'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x00 ; '.'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x07 ; '.'
0000000000001941         db  0x00 ; '.'
0000000000001942         db  0x00 ; '.'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x34 ; '4'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0x00 ; '.'
0000000000001949         db  0x00 ; '.'
000000000000194a         db  0x00 ; '.'
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x00 ; '.'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x28 ; '('
0000000000001951         db  0x0f ; '.'
0000000000001952         db  0x21 ; '!'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x00 ; '.'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x07 ; '.'
0000000000001959         db  0x00 ; '.'
000000000000195a         db  0x00 ; '.'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x35 ; '5'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'
0000000000001960         db  0x00 ; '.'
0000000000001961         db  0x00 ; '.'
0000000000001962         db  0x00 ; '.'
0000000000001963         db  0x00 ; '.'
0000000000001964         db  0x00 ; '.'
0000000000001965         db  0x00 ; '.'
0000000000001966         db  0x00 ; '.'
0000000000001967         db  0x00 ; '.'
0000000000001968         db  0x30 ; '0'
0000000000001969         db  0x0f ; '.'
000000000000196a         db  0x21 ; '!'
000000000000196b         db  0x00 ; '.'
000000000000196c         db  0x00 ; '.'
000000000000196d         db  0x00 ; '.'
000000000000196e         db  0x00 ; '.'
000000000000196f         db  0x00 ; '.'
0000000000001970         db  0x07 ; '.'
0000000000001971         db  0x00 ; '.'
0000000000001972         db  0x00 ; '.'
0000000000001973         db  0x00 ; '.'
0000000000001974         db  0x36 ; '6'
0000000000001975         db  0x00 ; '.'
0000000000001976         db  0x00 ; '.'
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x00 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x00 ; '.'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'
0000000000001980         db  0x38 ; '8'
0000000000001981         db  0x0f ; '.'
0000000000001982         db  0x21 ; '!'
0000000000001983         db  0x00 ; '.'
0000000000001984         db  0x00 ; '.'
0000000000001985         db  0x00 ; '.'
0000000000001986         db  0x00 ; '.'
0000000000001987         db  0x00 ; '.'
0000000000001988         db  0x07 ; '.'
0000000000001989         db  0x00 ; '.'
000000000000198a         db  0x00 ; '.'
000000000000198b         db  0x00 ; '.'
000000000000198c         db  0x37 ; '7'
000000000000198d         db  0x00 ; '.'
000000000000198e         db  0x00 ; '.'
000000000000198f         db  0x00 ; '.'
0000000000001990         db  0x00 ; '.'
0000000000001991         db  0x00 ; '.'
0000000000001992         db  0x00 ; '.'
0000000000001993         db  0x00 ; '.'
0000000000001994         db  0x00 ; '.'
0000000000001995         db  0x00 ; '.'
0000000000001996         db  0x00 ; '.'
0000000000001997         db  0x00 ; '.'
0000000000001998         db  0x40 ; '@'
0000000000001999         db  0x0f ; '.'
000000000000199a         db  0x21 ; '!'
000000000000199b         db  0x00 ; '.'
000000000000199c         db  0x00 ; '.'
000000000000199d         db  0x00 ; '.'
000000000000199e         db  0x00 ; '.'
000000000000199f         db  0x00 ; '.'
00000000000019a0         db  0x07 ; '.'
00000000000019a1         db  0x00 ; '.'
00000000000019a2         db  0x00 ; '.'
00000000000019a3         db  0x00 ; '.'
00000000000019a4         db  0x38 ; '8'
00000000000019a5         db  0x00 ; '.'
00000000000019a6         db  0x00 ; '.'
00000000000019a7         db  0x00 ; '.'
00000000000019a8         db  0x00 ; '.'
00000000000019a9         db  0x00 ; '.'
00000000000019aa         db  0x00 ; '.'
00000000000019ab         db  0x00 ; '.'
00000000000019ac         db  0x00 ; '.'
00000000000019ad         db  0x00 ; '.'
00000000000019ae         db  0x00 ; '.'
00000000000019af         db  0x00 ; '.'
00000000000019b0         db  0x48 ; 'H'
00000000000019b1         db  0x0f ; '.'
00000000000019b2         db  0x21 ; '!'
00000000000019b3         db  0x00 ; '.'
00000000000019b4         db  0x00 ; '.'
00000000000019b5         db  0x00 ; '.'
00000000000019b6         db  0x00 ; '.'
00000000000019b7         db  0x00 ; '.'
00000000000019b8         db  0x07 ; '.'
00000000000019b9         db  0x00 ; '.'
00000000000019ba         db  0x00 ; '.'
00000000000019bb         db  0x00 ; '.'
00000000000019bc         db  0x39 ; '9'
00000000000019bd         db  0x00 ; '.'
00000000000019be         db  0x00 ; '.'
00000000000019bf         db  0x00 ; '.'
00000000000019c0         db  0x00 ; '.'
00000000000019c1         db  0x00 ; '.'
00000000000019c2         db  0x00 ; '.'
00000000000019c3         db  0x00 ; '.'
00000000000019c4         db  0x00 ; '.'
00000000000019c5         db  0x00 ; '.'
00000000000019c6         db  0x00 ; '.'
00000000000019c7         db  0x00 ; '.'
00000000000019c8         db  0x50 ; 'P'
00000000000019c9         db  0x0f ; '.'
00000000000019ca         db  0x21 ; '!'
00000000000019cb         db  0x00 ; '.'
00000000000019cc         db  0x00 ; '.'
00000000000019cd         db  0x00 ; '.'
00000000000019ce         db  0x00 ; '.'
00000000000019cf         db  0x00 ; '.'
00000000000019d0         db  0x07 ; '.'
00000000000019d1         db  0x00 ; '.'
00000000000019d2         db  0x00 ; '.'
00000000000019d3         db  0x00 ; '.'
00000000000019d4         db  0x3a ; ':'
00000000000019d5         db  0x00 ; '.'
00000000000019d6         db  0x00 ; '.'
00000000000019d7         db  0x00 ; '.'
00000000000019d8         db  0x00 ; '.'
00000000000019d9         db  0x00 ; '.'
00000000000019da         db  0x00 ; '.'
00000000000019db         db  0x00 ; '.'
00000000000019dc         db  0x00 ; '.'
00000000000019dd         db  0x00 ; '.'
00000000000019de         db  0x00 ; '.'
00000000000019df         db  0x00 ; '.'
00000000000019e0         db  0x58 ; 'X'
00000000000019e1         db  0x0f ; '.'
00000000000019e2         db  0x21 ; '!'
00000000000019e3         db  0x00 ; '.'
00000000000019e4         db  0x00 ; '.'
00000000000019e5         db  0x00 ; '.'
00000000000019e6         db  0x00 ; '.'
00000000000019e7         db  0x00 ; '.'
00000000000019e8         db  0x07 ; '.'
00000000000019e9         db  0x00 ; '.'
00000000000019ea         db  0x00 ; '.'
00000000000019eb         db  0x00 ; '.'
00000000000019ec         db  0x3b ; ';'
00000000000019ed         db  0x00 ; '.'
00000000000019ee         db  0x00 ; '.'
00000000000019ef         db  0x00 ; '.'
00000000000019f0         db  0x00 ; '.'
00000000000019f1         db  0x00 ; '.'
00000000000019f2         db  0x00 ; '.'
00000000000019f3         db  0x00 ; '.'
00000000000019f4         db  0x00 ; '.'
00000000000019f5         db  0x00 ; '.'
00000000000019f6         db  0x00 ; '.'
00000000000019f7         db  0x00 ; '.'
00000000000019f8         db  0x60 ; '`'
00000000000019f9         db  0x0f ; '.'
00000000000019fa         db  0x21 ; '!'
00000000000019fb         db  0x00 ; '.'
00000000000019fc         db  0x00 ; '.'
00000000000019fd         db  0x00 ; '.'
00000000000019fe         db  0x00 ; '.'
00000000000019ff         db  0x00 ; '.'
0000000000001a00         db  0x07 ; '.'
0000000000001a01         db  0x00 ; '.'
0000000000001a02         db  0x00 ; '.'
0000000000001a03         db  0x00 ; '.'
0000000000001a04         db  0x3c ; '<'
0000000000001a05         db  0x00 ; '.'
0000000000001a06         db  0x00 ; '.'
0000000000001a07         db  0x00 ; '.'
0000000000001a08         db  0x00 ; '.'
0000000000001a09         db  0x00 ; '.'
0000000000001a0a         db  0x00 ; '.'
0000000000001a0b         db  0x00 ; '.'
0000000000001a0c         db  0x00 ; '.'
0000000000001a0d         db  0x00 ; '.'
0000000000001a0e         db  0x00 ; '.'
0000000000001a0f         db  0x00 ; '.'
0000000000001a10         db  0x68 ; 'h'
0000000000001a11         db  0x0f ; '.'
0000000000001a12         db  0x21 ; '!'
0000000000001a13         db  0x00 ; '.'
0000000000001a14         db  0x00 ; '.'
0000000000001a15         db  0x00 ; '.'
0000000000001a16         db  0x00 ; '.'
0000000000001a17         db  0x00 ; '.'
0000000000001a18         db  0x07 ; '.'
0000000000001a19         db  0x00 ; '.'
0000000000001a1a         db  0x00 ; '.'
0000000000001a1b         db  0x00 ; '.'
0000000000001a1c         db  0x3d ; '='
0000000000001a1d         db  0x00 ; '.'
0000000000001a1e         db  0x00 ; '.'
0000000000001a1f         db  0x00 ; '.'
0000000000001a20         db  0x00 ; '.'
0000000000001a21         db  0x00 ; '.'
0000000000001a22         db  0x00 ; '.'
0000000000001a23         db  0x00 ; '.'
0000000000001a24         db  0x00 ; '.'
0000000000001a25         db  0x00 ; '.'
0000000000001a26         db  0x00 ; '.'
0000000000001a27         db  0x00 ; '.'
0000000000001a28         db  0x70 ; 'p'
0000000000001a29         db  0x0f ; '.'
0000000000001a2a         db  0x21 ; '!'
0000000000001a2b         db  0x00 ; '.'
0000000000001a2c         db  0x00 ; '.'
0000000000001a2d         db  0x00 ; '.'
0000000000001a2e         db  0x00 ; '.'
0000000000001a2f         db  0x00 ; '.'
0000000000001a30         db  0x07 ; '.'
0000000000001a31         db  0x00 ; '.'
0000000000001a32         db  0x00 ; '.'
0000000000001a33         db  0x00 ; '.'
0000000000001a34         db  0x3e ; '>'
0000000000001a35         db  0x00 ; '.'
0000000000001a36         db  0x00 ; '.'
0000000000001a37         db  0x00 ; '.'
0000000000001a38         db  0x00 ; '.'
0000000000001a39         db  0x00 ; '.'
0000000000001a3a         db  0x00 ; '.'
0000000000001a3b         db  0x00 ; '.'
0000000000001a3c         db  0x00 ; '.'
0000000000001a3d         db  0x00 ; '.'
0000000000001a3e         db  0x00 ; '.'
0000000000001a3f         db  0x00 ; '.'
0000000000001a40         db  0x78 ; 'x'
0000000000001a41         db  0x0f ; '.'
0000000000001a42         db  0x21 ; '!'
0000000000001a43         db  0x00 ; '.'
0000000000001a44         db  0x00 ; '.'
0000000000001a45         db  0x00 ; '.'
0000000000001a46         db  0x00 ; '.'
0000000000001a47         db  0x00 ; '.'
0000000000001a48         db  0x07 ; '.'
0000000000001a49         db  0x00 ; '.'
0000000000001a4a         db  0x00 ; '.'
0000000000001a4b         db  0x00 ; '.'
0000000000001a4c         db  0x3f ; '?'
0000000000001a4d         db  0x00 ; '.'
0000000000001a4e         db  0x00 ; '.'
0000000000001a4f         db  0x00 ; '.'
0000000000001a50         db  0x00 ; '.'
0000000000001a51         db  0x00 ; '.'
0000000000001a52         db  0x00 ; '.'
0000000000001a53         db  0x00 ; '.'
0000000000001a54         db  0x00 ; '.'
0000000000001a55         db  0x00 ; '.'
0000000000001a56         db  0x00 ; '.'
0000000000001a57         db  0x00 ; '.'
0000000000001a58         db  0x80 ; '.'
0000000000001a59         db  0x0f ; '.'
0000000000001a5a         db  0x21 ; '!'
0000000000001a5b         db  0x00 ; '.'
0000000000001a5c         db  0x00 ; '.'
0000000000001a5d         db  0x00 ; '.'
0000000000001a5e         db  0x00 ; '.'
0000000000001a5f         db  0x00 ; '.'
0000000000001a60         db  0x07 ; '.'
0000000000001a61         db  0x00 ; '.'
0000000000001a62         db  0x00 ; '.'
0000000000001a63         db  0x00 ; '.'
0000000000001a64         db  0x40 ; '@'
0000000000001a65         db  0x00 ; '.'
0000000000001a66         db  0x00 ; '.'
0000000000001a67         db  0x00 ; '.'
0000000000001a68         db  0x00 ; '.'
0000000000001a69         db  0x00 ; '.'
0000000000001a6a         db  0x00 ; '.'
0000000000001a6b         db  0x00 ; '.'
0000000000001a6c         db  0x00 ; '.'
0000000000001a6d         db  0x00 ; '.'
0000000000001a6e         db  0x00 ; '.'
0000000000001a6f         db  0x00 ; '.'
0000000000001a70         db  0x88 ; '.'
0000000000001a71         db  0x0f ; '.'
0000000000001a72         db  0x21 ; '!'
0000000000001a73         db  0x00 ; '.'
0000000000001a74         db  0x00 ; '.'
0000000000001a75         db  0x00 ; '.'
0000000000001a76         db  0x00 ; '.'
0000000000001a77         db  0x00 ; '.'
0000000000001a78         db  0x07 ; '.'
0000000000001a79         db  0x00 ; '.'
0000000000001a7a         db  0x00 ; '.'
0000000000001a7b         db  0x00 ; '.'
0000000000001a7c         db  0x41 ; 'A'
0000000000001a7d         db  0x00 ; '.'
0000000000001a7e         db  0x00 ; '.'
0000000000001a7f         db  0x00 ; '.'
0000000000001a80         db  0x00 ; '.'
0000000000001a81         db  0x00 ; '.'
0000000000001a82         db  0x00 ; '.'
0000000000001a83         db  0x00 ; '.'
0000000000001a84         db  0x00 ; '.'
0000000000001a85         db  0x00 ; '.'
0000000000001a86         db  0x00 ; '.'
0000000000001a87         db  0x00 ; '.'
0000000000001a88         db  0x90 ; '.'
0000000000001a89         db  0x0f ; '.'
0000000000001a8a         db  0x21 ; '!'
0000000000001a8b         db  0x00 ; '.'
0000000000001a8c         db  0x00 ; '.'
0000000000001a8d         db  0x00 ; '.'
0000000000001a8e         db  0x00 ; '.'
0000000000001a8f         db  0x00 ; '.'
0000000000001a90         db  0x07 ; '.'
0000000000001a91         db  0x00 ; '.'
0000000000001a92         db  0x00 ; '.'
0000000000001a93         db  0x00 ; '.'
0000000000001a94         db  0x42 ; 'B'
0000000000001a95         db  0x00 ; '.'
0000000000001a96         db  0x00 ; '.'
0000000000001a97         db  0x00 ; '.'
0000000000001a98         db  0x00 ; '.'
0000000000001a99         db  0x00 ; '.'
0000000000001a9a         db  0x00 ; '.'
0000000000001a9b         db  0x00 ; '.'
0000000000001a9c         db  0x00 ; '.'
0000000000001a9d         db  0x00 ; '.'
0000000000001a9e         db  0x00 ; '.'
0000000000001a9f         db  0x00 ; '.'
0000000000001aa0         db  0x98 ; '.'
0000000000001aa1         db  0x0f ; '.'
0000000000001aa2         db  0x21 ; '!'
0000000000001aa3         db  0x00 ; '.'
0000000000001aa4         db  0x00 ; '.'
0000000000001aa5         db  0x00 ; '.'
0000000000001aa6         db  0x00 ; '.'
0000000000001aa7         db  0x00 ; '.'
0000000000001aa8         db  0x07 ; '.'
0000000000001aa9         db  0x00 ; '.'
0000000000001aaa         db  0x00 ; '.'
0000000000001aab         db  0x00 ; '.'
0000000000001aac         db  0x43 ; 'C'
0000000000001aad         db  0x00 ; '.'
0000000000001aae         db  0x00 ; '.'
0000000000001aaf         db  0x00 ; '.'
0000000000001ab0         db  0x00 ; '.'
0000000000001ab1         db  0x00 ; '.'
0000000000001ab2         db  0x00 ; '.'
0000000000001ab3         db  0x00 ; '.'
0000000000001ab4         db  0x00 ; '.'
0000000000001ab5         db  0x00 ; '.'
0000000000001ab6         db  0x00 ; '.'
0000000000001ab7         db  0x00 ; '.'
0000000000001ab8         db  0xa0 ; '.'
0000000000001ab9         db  0x0f ; '.'
0000000000001aba         db  0x21 ; '!'
0000000000001abb         db  0x00 ; '.'
0000000000001abc         db  0x00 ; '.'
0000000000001abd         db  0x00 ; '.'
0000000000001abe         db  0x00 ; '.'
0000000000001abf         db  0x00 ; '.'
0000000000001ac0         db  0x07 ; '.'
0000000000001ac1         db  0x00 ; '.'
0000000000001ac2         db  0x00 ; '.'
0000000000001ac3         db  0x00 ; '.'
0000000000001ac4         db  0x45 ; 'E'
0000000000001ac5         db  0x00 ; '.'
0000000000001ac6         db  0x00 ; '.'
0000000000001ac7         db  0x00 ; '.'
0000000000001ac8         db  0x00 ; '.'
0000000000001ac9         db  0x00 ; '.'
0000000000001aca         db  0x00 ; '.'
0000000000001acb         db  0x00 ; '.'
0000000000001acc         db  0x00 ; '.'
0000000000001acd         db  0x00 ; '.'
0000000000001ace         db  0x00 ; '.'
0000000000001acf         db  0x00 ; '.'
0000000000001ad0         db  0xa8 ; '.'
0000000000001ad1         db  0x0f ; '.'
0000000000001ad2         db  0x21 ; '!'
0000000000001ad3         db  0x00 ; '.'
0000000000001ad4         db  0x00 ; '.'
0000000000001ad5         db  0x00 ; '.'
0000000000001ad6         db  0x00 ; '.'
0000000000001ad7         db  0x00 ; '.'
0000000000001ad8         db  0x07 ; '.'
0000000000001ad9         db  0x00 ; '.'
0000000000001ada         db  0x00 ; '.'
0000000000001adb         db  0x00 ; '.'
0000000000001adc         db  0x46 ; 'F'
0000000000001add         db  0x00 ; '.'
0000000000001ade         db  0x00 ; '.'
0000000000001adf         db  0x00 ; '.'
0000000000001ae0         db  0x00 ; '.'
0000000000001ae1         db  0x00 ; '.'
0000000000001ae2         db  0x00 ; '.'
0000000000001ae3         db  0x00 ; '.'
0000000000001ae4         db  0x00 ; '.'
0000000000001ae5         db  0x00 ; '.'
0000000000001ae6         db  0x00 ; '.'
0000000000001ae7         db  0x00 ; '.'
0000000000001ae8         db  0xb0 ; '.'
0000000000001ae9         db  0x0f ; '.'
0000000000001aea         db  0x21 ; '!'
0000000000001aeb         db  0x00 ; '.'
0000000000001aec         db  0x00 ; '.'
0000000000001aed         db  0x00 ; '.'
0000000000001aee         db  0x00 ; '.'
0000000000001aef         db  0x00 ; '.'
0000000000001af0         db  0x07 ; '.'
0000000000001af1         db  0x00 ; '.'
0000000000001af2         db  0x00 ; '.'
0000000000001af3         db  0x00 ; '.'
0000000000001af4         db  0x48 ; 'H'
0000000000001af5         db  0x00 ; '.'
0000000000001af6         db  0x00 ; '.'
0000000000001af7         db  0x00 ; '.'
0000000000001af8         db  0x00 ; '.'
0000000000001af9         db  0x00 ; '.'
0000000000001afa         db  0x00 ; '.'
0000000000001afb         db  0x00 ; '.'
0000000000001afc         db  0x00 ; '.'
0000000000001afd         db  0x00 ; '.'
0000000000001afe         db  0x00 ; '.'
0000000000001aff         db  0x00 ; '.'
0000000000001b00         db  0xb8 ; '.'
0000000000001b01         db  0x0f ; '.'
0000000000001b02         db  0x21 ; '!'
0000000000001b03         db  0x00 ; '.'
0000000000001b04         db  0x00 ; '.'
0000000000001b05         db  0x00 ; '.'
0000000000001b06         db  0x00 ; '.'
0000000000001b07         db  0x00 ; '.'
0000000000001b08         db  0x07 ; '.'
0000000000001b09         db  0x00 ; '.'
0000000000001b0a         db  0x00 ; '.'
0000000000001b0b         db  0x00 ; '.'
0000000000001b0c         db  0x49 ; 'I'
0000000000001b0d         db  0x00 ; '.'
0000000000001b0e         db  0x00 ; '.'
0000000000001b0f         db  0x00 ; '.'
0000000000001b10         db  0x00 ; '.'
0000000000001b11         db  0x00 ; '.'
0000000000001b12         db  0x00 ; '.'
0000000000001b13         db  0x00 ; '.'
0000000000001b14         db  0x00 ; '.'
0000000000001b15         db  0x00 ; '.'
0000000000001b16         db  0x00 ; '.'
0000000000001b17         db  0x00 ; '.'
0000000000001b18         db  0xc0 ; '.'
0000000000001b19         db  0x0f ; '.'
0000000000001b1a         db  0x21 ; '!'
0000000000001b1b         db  0x00 ; '.'
0000000000001b1c         db  0x00 ; '.'
0000000000001b1d         db  0x00 ; '.'
0000000000001b1e         db  0x00 ; '.'
0000000000001b1f         db  0x00 ; '.'
0000000000001b20         db  0x07 ; '.'
0000000000001b21         db  0x00 ; '.'
0000000000001b22         db  0x00 ; '.'
0000000000001b23         db  0x00 ; '.'
0000000000001b24         db  0x4a ; 'J'
0000000000001b25         db  0x00 ; '.'
0000000000001b26         db  0x00 ; '.'
0000000000001b27         db  0x00 ; '.'
0000000000001b28         db  0x00 ; '.'
0000000000001b29         db  0x00 ; '.'
0000000000001b2a         db  0x00 ; '.'
0000000000001b2b         db  0x00 ; '.'
0000000000001b2c         db  0x00 ; '.'
0000000000001b2d         db  0x00 ; '.'
0000000000001b2e         db  0x00 ; '.'
0000000000001b2f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1b30; 0x1b47[ (23 bytes)
        ; File offset : [6960; 6983[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001b30         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001b34         mov        rax, qword [qword_210fd8]                   ; qword_210fd8
0000000000001b3b         test       rax, rax
0000000000001b3e         je         loc_1b42

0000000000001b40         call       rax

                     loc_1b42:
0000000000001b42         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001b46         ret
                        ; endp
0000000000001b47         db  0x00 ; '.'
0000000000001b48         db  0x00 ; '.'
0000000000001b49         db  0x00 ; '.'
0000000000001b4a         db  0x00 ; '.'
0000000000001b4b         db  0x00 ; '.'
0000000000001b4c         db  0x00 ; '.'
0000000000001b4d         db  0x00 ; '.'
0000000000001b4e         db  0x00 ; '.'
0000000000001b4f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1b50; 0x1fb0[ (1120 bytes)
        ; File offset : [6992; 8112[ (1120 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1b50:
0000000000001b50         push       qword [qword_210d90]                        ; Begin of unwind block (FDE at 0xea9c), qword_210d90, CODE XREF=sub_1b66+5
0000000000001b56         jmp        qword [qword_210d90+8]                      ; 0x210d98
                        ; endp
0000000000001b5c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_toupper_loc:        // __ctype_toupper_loc
0000000000001b60         jmp        qword [__ctype_toupper_loc@GOT]             ; __ctype_toupper_loc, __ctype_toupper_loc@GOT, CODE XREF=memcpy_uppcase+19
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x0
0000000000001b6b         jmp        loc_1b50


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___uflow:        // __uflow
0000000000001b70         jmp        qword [__uflow@GOT]                         ; __uflow, __uflow@GOT, CODE XREF=skip_read+171, skip_read+483, skip_read+551, skip_read+566, skip_read+579, read_rest_of_line+55, read_rest_of_line+190, read_line+976, read_line+1088, read_line+1104, read_line+1120
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x1
0000000000001b7b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getenv:        // getenv
0000000000001b80         jmp        qword [getenv@GOT]                          ; getenv, getenv@GOT, CODE XREF=main+398, main+1999, set_tz+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x2
0000000000001b8b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_free:        // free
0000000000001b90         jmp        qword [free@GOT]                            ; free, free@GOT, CODE XREF=main+372, main+677, main+689, main+701, main+713, main+725, main+737, main+859, init_header+231, print_files+354, print_files+403
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x3
0000000000001b9b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001ba0         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=set_program_name+154, sub_8280+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, xstrtol_fatal+118
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x4
0000000000001bab         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
0000000000001bb0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+2133, close_file.part.4+179, close_file.part.4+227, open_file+208, getoptarg+199, close_stdout+22, fopen_safer+93, fopen_safer+120, quotearg_n_options+28, clone_quoting_options+7, quotearg_buffer+45
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x5
0000000000001bbb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
0000000000001bc0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+1068, usage+1261
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x6
0000000000001bcb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_localtime_r:        // localtime_r
0000000000001bd0         jmp        qword [localtime_r@GOT]                     ; localtime_r, localtime_r@GOT, CODE XREF=localtime_rz+43, mktime_z+170
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x7
0000000000001bdb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
0000000000001be0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x8
0000000000001beb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
0000000000001bf0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x9
0000000000001bfb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswcntrl:        // iswcntrl
0000000000001c00         jmp        qword [iswcntrl@GOT]                        ; iswcntrl, iswcntrl@GOT, CODE XREF=mbsnwidth+247
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0xa
0000000000001c0b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001c10         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0xb
0000000000001c1b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_clock_gettime:        // clock_gettime
0000000000001c20         jmp        qword [clock_gettime@GOT]                   ; clock_gettime, clock_gettime@GOT, CODE XREF=gettime+5, current_timespec+25
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0xc
0000000000001c2b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setenv:        // setenv
0000000000001c30         jmp        qword [setenv@GOT]                          ; setenv, setenv@GOT, CODE XREF=setenv_TZ+20
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0xd
0000000000001c3b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001c40         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+96
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0xe
0000000000001c4b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtol_internal:        // __strtol_internal
0000000000001c50         jmp        qword [__strtol_internal@GOT]               ; __strtol_internal, __strtol_internal@GOT, CODE XREF=xstrtoimax+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0xf
0000000000001c5b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001c60         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x10
0000000000001c6b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001c70         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+84
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x11
0000000000001c7b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001c80         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+892, main+1103, main+1242, main+1500, main+1664, main+2125, main+2217, main+2253, main+2304, main+2348, integer_overflow+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x12
0000000000001c8b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001c90         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=mbsnwidth+41, quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x13
0000000000001c9b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001ca0         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=separator_string+4, gnu_mbswidth+11, sub_6750+36, quotearg_buffer_restyled+343, sub_8280+411, sub_8280+1742, xstrdup+4, tzalloc+12, save_abbr+105, save_abbr+195
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x14
0000000000001cab         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001cb0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+2329, first_last_page+288, init_header+532, print_header+294, char_to_clump+519, getoptarg+234, current_timespec+60, mbsnwidth+442, sub_7880+181, nstrftime+73, sub_8280+2739
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x15
0000000000001cbb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001cc0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+239
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x16
0000000000001ccb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001cd0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x17
0000000000001cdb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strchr:        // strchr
0000000000001ce0         jmp        qword [strchr@GOT]                          ; strchr, strchr@GOT, CODE XREF=xstrtoimax+236, xstrtoimax+271, xstrtoimax+323, xstrtol+236, xstrtol+271, xstrtol+323, xstrtoumax+291, xstrtoumax+323, xstrtoumax+380
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x18
0000000000001ceb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001cf0         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=pad_across_to+101, print_white_space+176, print_white_space+197, print_sep_string+224, print_char+169, print_files+2800, print_files+2874, print_files+2955, print_files+3891, print_files+3906
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x19
0000000000001cfb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001d00         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x1a
0000000000001d0b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_gmtime_r:        // gmtime_r
0000000000001d10         jmp        qword [gmtime_r@GOT]                        ; gmtime_r, gmtime_r@GOT, CODE XREF=localtime_rz+144
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x1b
0000000000001d1b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001d20         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=rpl_fclose+89, j_j_fseeko+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x1c
0000000000001d2b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001d30         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=xstrtoimax+1705, xstrtol+1705, xstrtoumax+927
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x1d
0000000000001d3b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___strtoul_internal:        // __strtoul_internal
0000000000001d40         jmp        qword [__strtoul_internal@GOT]              ; __strtoul_internal, __strtoul_internal@GOT, CODE XREF=xstrtoumax+142
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x1e
0000000000001d4b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001d50         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=__strftime_internal+285, __strftime_internal+737, __strftime_internal+1204, __strftime_internal+1570, sub_6550+119, sub_6550+321, sub_6750+162, sub_69a0+363, sub_69a0+429, sub_69a0+564, sub_6c10+1560
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x1f
0000000000001d5b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001d60         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=fopen_safer+106, rpl_fcntl+510
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x20
0000000000001d6b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_posix_fadvise:        // posix_fadvise
0000000000001d70         jmp        qword [posix_fadvise@GOT]                   ; posix_fadvise, posix_fadvise@GOT, CODE XREF=fdadvise, fadvise+22
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x21
0000000000001d7b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001d80         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x22
0000000000001d8b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001d90         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+157, usage+194, usage+231, usage+268, usage+305, usage+342, usage+379, usage+416, usage+453, usage+490, usage+527
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x23
0000000000001d9b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001da0         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da6:
0000000000001da6         push       0x24
0000000000001dab         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001db0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=save_abbr+70, save_abbr+142, set_tz+157
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1db6:
0000000000001db6         push       0x25
0000000000001dbb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strtol:        // strtol
0000000000001dc0         jmp        qword [strtol@GOT]                          ; strtol, strtol@GOT, CODE XREF=xstrtol+87
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dc6:
0000000000001dc6         push       0x26
0000000000001dcb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001dd0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=sub_69a0+609, sub_6c10+1904, sub_76c9+303, xmemdup+35, tzalloc+81, save_abbr+294
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1dd6:
0000000000001dd6         push       0x27
0000000000001ddb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_tzset:        // tzset
0000000000001de0         jmp        qword [tzset@GOT]                           ; tzset, tzset@GOT, CODE XREF=revert_tz.part.1+80, set_tz+216
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1de6:
0000000000001de6         push       0x28
0000000000001deb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001df0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=close_file.part.4+16, print_files+791, fadvise+8, fopen_safer+23, rpl_fclose+7, rpl_fclose+75, j_j_fseeko+36
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1df6:
0000000000001df6         push       0x29
0000000000001dfb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_wcwidth:        // wcwidth
0000000000001e00         jmp        qword [wcwidth@GOT]                         ; wcwidth, wcwidth@GOT, CODE XREF=mbsnwidth+227
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e06:
0000000000001e06         push       0x2a
0000000000001e0b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001e10         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=xmalloc+4, tzalloc+42, tzalloc+109
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e16:
0000000000001e16         push       0x2b
0000000000001e1b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001e20         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e26:
0000000000001e26         push       0x2c
0000000000001e2b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001e30         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e36:
0000000000001e36         push       0x2d
0000000000001e3b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_ungetc:        // ungetc
0000000000001e40         jmp        qword [ungetc@GOT]                          ; ungetc, ungetc@GOT, CODE XREF=skip_read+451, read_rest_of_line+171, read_line+819, read_line+936
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e46:
0000000000001e46         push       0x2e
0000000000001e4b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001e50         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=init_header+413
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e56:
0000000000001e56         push       0x2f
0000000000001e5b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mktime:        // mktime
0000000000001e60         jmp        qword [mktime@GOT]                          ; mktime, mktime@GOT, CODE XREF=mktime_z+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e66:
0000000000001e66         push       0x30
0000000000001e6b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001e70         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fclose+19, rpl_fflush+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e76:
0000000000001e76         push       0x31
0000000000001e7b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001e80         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e86:
0000000000001e86         push       0x32
0000000000001e8b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopen:        // fdopen
0000000000001e90         jmp        qword [fdopen@GOT]                          ; fdopen, fdopen@GOT, CODE XREF=fopen_safer+80
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1e96:
0000000000001e96         push       0x33
0000000000001e9b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001ea0         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+65, usage+1043, usage+1236, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ea6:
0000000000001ea6         push       0x34
0000000000001eab         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001eb0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=print_header+208, usage+120, usage+1031, usage+1124, usage+1185, usage+1224, usage+1327, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1eb6:
0000000000001eb6         push       0x35
0000000000001ebb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_timegm:        // timegm
0000000000001ec0         jmp        qword [timegm@GOT]                          ; timegm, timegm@GOT, CODE XREF=mktime_z+291
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ec6:
0000000000001ec6         push       0x36
0000000000001ecb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strftime:        // strftime
0000000000001ed0         jmp        qword [strftime@GOT]                        ; strftime, strftime@GOT, CODE XREF=__strftime_internal+1048
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ed6:
0000000000001ed6         push       0x37
0000000000001edb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001ee0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+2150, main+2234, main+2270, main+2324, main+2365, integer_overflow+35, print_header+289, close_file.part.4+203, close_file.part.4+251, open_file+229, print_files+3775
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ee6:
0000000000001ee6         push       0x38
0000000000001eeb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001ef0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ef6:
0000000000001ef6         push       0x39
0000000000001efb         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fopen:        // fopen
0000000000001f00         jmp        qword [fopen@GOT]                           ; fopen, fopen@GOT, CODE XREF=fopen_safer+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f06:
0000000000001f06         push       0x3a
0000000000001f0b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unsetenv:        // unsetenv
0000000000001f10         jmp        qword [unsetenv@GOT]                        ; unsetenv, unsetenv@GOT, CODE XREF=setenv_TZ+39
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f16:
0000000000001f16         push       0x3b
0000000000001f1b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001f20         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f26:
0000000000001f26         push       0x3c
0000000000001f2b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001f30         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+1876, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f36:
0000000000001f36         push       0x3d
0000000000001f3b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001f40         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f46:
0000000000001f46         push       0x3e
0000000000001f4b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001f50         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=usage+81, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332, version_etc_arn+492, version_etc_arn+563, version_etc_arn+642, version_etc_arn+718, version_etc_arn+872
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f56:
0000000000001f56         push       0x3f
0000000000001f5b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001f60         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=mbsnwidth+167, sub_8280+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f66:
0000000000001f66         push       0x40
0000000000001f6b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001f70         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_8280+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f76:
0000000000001f76         push       0x41
0000000000001f7b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_tolower_loc:        // __ctype_tolower_loc
0000000000001f80         jmp        qword [__ctype_tolower_loc@GOT]             ; __ctype_tolower_loc, __ctype_tolower_loc@GOT, CODE XREF=memcpy_lowcase+19
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f86:
0000000000001f86         push       0x42
0000000000001f8b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001f90         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=char_to_clump+58, print_char+37, print_char+125, mbsnwidth+367, sub_8020+51, xstrtoumax+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1f96:
0000000000001f96         push       0x43
0000000000001f9b         jmp        0x1b50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___sprintf_chk:        // __sprintf_chk
0000000000001fa0         jmp        qword [__sprintf_chk@GOT]                   ; __sprintf_chk, __sprintf_chk@GOT, CODE XREF=init_header+522, print_header+113, char_to_clump+391, add_line_number.isra.2+49
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1fa6:
0000000000001fa6         push       0x44
0000000000001fab         jmp        0x1b50
                        ; endp


        ; Section .plt.got
        ; Range: [0x1fb0; 0x1fb8[ (8 bytes)
        ; File offset : [8112; 8120[ (8 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_210fe8:        // qword_210fe8
0000000000001fb0         jmp        qword [qword_210fe8]                        ; qword, End of unwind block (FDE at 0xea9c), Begin of unwind block (FDE at 0xeac4), qword_210fe8, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001fb6         align      8
0000000000001fb8         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xeac4)
0000000000001fb9         db  0x00 ; '.'
0000000000001fba         db  0x00 ; '.'
0000000000001fbb         db  0x00 ; '.'
0000000000001fbc         db  0x00 ; '.'
0000000000001fbd         db  0x00 ; '.'
0000000000001fbe         db  0x00 ; '.'
0000000000001fbf         db  0x00 ; '.'


        ; Section .text
        ; Range: [0x1fc0; 0xbe3e[ (40574 bytes)
        ; File offset : [8128; 48702[ (40574 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_59: int8_t, -89
        ;    var_5A: int8_t, -90
        ;    var_5B: int8_t, -91
        ;    var_60: int32_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_74: int32_t, -116
        ;    var_80: int64_t, -128


                     main:
0000000000001fc0         push       r15                                         ; Begin of unwind block (FDE at 0xf03c), DATA XREF=_start+29
0000000000001fc2         push       r14
0000000000001fc4         push       r13
0000000000001fc6         push       r12
0000000000001fc8         mov        r12d, edi
0000000000001fcb         push       rbp
0000000000001fcc         push       rbx
0000000000001fcd         mov        r13, rsi
0000000000001fd0         sub        rsp, 0x58
0000000000001fd4         mov        rdi, qword [rsi]
0000000000001fd7         mov        rax, qword [fs:0x28]
0000000000001fe0         mov        qword [rsp+0x88+var_40], rax
0000000000001fe5         xor        eax, eax
0000000000001fe7         mov        qword [rsp+0x88+var_48], 0x0
0000000000001ff0         call       set_program_name                            ; set_program_name
0000000000001ff5         lea        rsi, qword [aStandardInput+16]              ; argument "__locale" for method j_setlocale, 0xbee5
0000000000001ffc         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000002001         call       j_setlocale                                 ; setlocale
0000000000002006         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
000000000000200d         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000002014         call       j_bindtextdomain                            ; bindtextdomain
0000000000002019         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000002020         call       j_textdomain                                ; textdomain
0000000000002025         lea        rdi, qword [close_stdout]                   ; argument "__func" for method atexit, close_stdout
000000000000202c         call       atexit                                      ; atexit
0000000000002031         cmp        r12d, 0x1
0000000000002035         mov        qword [rsp+0x88+var_68], 0x0
000000000000203e         jle        loc_2056

0000000000002040         lea        edi, dword [r12-1]
0000000000002045         movsxd     rdi, edi
0000000000002048         shl        rdi, 0x3
000000000000204c         call       xmalloc                                     ; xmalloc
0000000000002051         mov        qword [rsp+0x88+var_68], rax

                     loc_2056:
0000000000002056         lea        rax, qword [rsp+0x88+var_48]                ; CODE XREF=main+126
000000000000205b         lea        r14, qword [rsp+0x88+var_4C]
0000000000002060         lea        rbp, qword [switch_table_d3e0]              ; switch_table_d3e0
0000000000002067         xor        ebx, ebx
0000000000002069         xor        r15d, r15d
000000000000206c         mov        byte [rsp+0x88+var_59], 0x0
0000000000002071         mov        byte [rsp+0x88+var_5A], 0x0
0000000000002076         mov        byte [rsp+0x88+var_5B], 0x0
000000000000207b         mov        dword [rsp+0x88+var_60], 0x0
0000000000002083         mov        qword [rsp+0x88+var_70], rax
0000000000002088         nop        dword [rax+rax]

                     loc_2090:
0000000000002090         lea        rdx, qword [short_options]                  ; argument "__shortopts" for method j_getopt_long, short_options, CODE XREF=main+311, main+834, main+873, main+972, main+986, main+1007, main+1068, main+1082, main+1146, main+1200, main+1221
0000000000002097         lea        rcx, qword [long_options]                   ; argument "__longopts" for method j_getopt_long, long_options
000000000000209e         mov        r8, r14                                     ; argument "__longind" for method j_getopt_long
00000000000020a1         mov        rsi, r13                                    ; argument "___argv" for method j_getopt_long
00000000000020a4         mov        edi, r12d                                   ; argument "___argc" for method j_getopt_long
00000000000020a7         mov        dword [rsp+0x88+var_4C], 0xffffffff
00000000000020af         call       j_getopt_long                               ; getopt_long
00000000000020b4         cmp        eax, 0xffffffff
00000000000020b7         mov        edx, eax
00000000000020b9         je         loc_2124

00000000000020bb         lea        eax, dword [rax-0x30]
00000000000020be         cmp        eax, 0x9
00000000000020c1         jbe        loc_20e0

00000000000020c3         add        edx, 0x83
00000000000020c9         cmp        edx, 0x104
00000000000020cf         ja         loc_2851

00000000000020d5         movsxd     rax, dword [rbp+rdx*4]
00000000000020da         add        rax, rbp
00000000000020dd         jmp        rax                                         ; switch statement using table at 0xd3e0, with 261 cases, 0x22dd,0x2307,0x232e,0x2391,0x239f,0x23b4,0x23f1,0x23ff,0x243f,0x2475,0x248a,0x24cd,0x24ff,0x2514,0x2546,0x2554,0x2562,0x2570,0x2585,0x25d4,0x25e9,0x2629,0x2675,0x2683,0x2691,0x26a6,0x26db,0x284a,0x2851
00000000000020df         align      32

                     loc_20e0:
00000000000020e0         lea        rcx, qword [rbx+1]                          ; CODE XREF=main+257
00000000000020e4         cmp        rcx, qword [rsp+0x88+var_48]
00000000000020e9         jae        loc_2100

                     loc_20eb:
00000000000020eb         mov        byte [r15+rbx], dl                          ; CODE XREF=main+354
00000000000020ef         mov        byte [r15+rcx], 0x0
00000000000020f4         mov        rbx, rcx
00000000000020f7         jmp        loc_2090
00000000000020f9         align      256

                     loc_2100:
0000000000002100         mov        rsi, qword [rsp+0x88+var_70]                ; CODE XREF=main+297
0000000000002105         mov        rdi, r15
0000000000002108         mov        dword [rsp+0x88+var_74], edx
000000000000210c         mov        qword [rsp+0x88+var_80], rcx
0000000000002111         call       x2realloc                                   ; x2realloc
0000000000002116         mov        edx, dword [rsp+0x88+var_74]
000000000000211a         mov        r15, rax
000000000000211d         mov        rcx, qword [rsp+0x88+var_80]
0000000000002122         jmp        loc_20eb

                     loc_2124:
0000000000002124         test       r15, r15                                    ; CODE XREF=main+249
0000000000002127         je         loc_2139

0000000000002129         mov        rdi, r15
000000000000212c         call       parse_column_count                          ; parse_column_count
0000000000002131         mov        rdi, r15                                    ; argument "__ptr" for method j_free
0000000000002134         call       j_free                                      ; free

                     loc_2139:
0000000000002139         cmp        qword [date_format], 0x0                    ; date_format, CODE XREF=main+359
0000000000002141         je         loc_2788

                     loc_2147:
0000000000002147         lea        rdi, qword [aPosixlycorrect+16]             ; argument "__name" for method j_getenv, 0xc01a, CODE XREF=main+2037
000000000000214e         call       j_getenv                                    ; getenv
0000000000002153         mov        rdi, rax
0000000000002156         call       tzalloc                                     ; tzalloc
000000000000215b         cmp        qword [first_page_number], 0x0              ; first_page_number
0000000000002163         mov        qword [localtz], rax                        ; localtz
000000000000216a         jne        loc_2177

000000000000216c         mov        qword [first_page_number], 0x1              ; first_page_number

                     loc_2177:
0000000000002177         movzx      edi, byte [parallel_files]                  ; parallel_files, CODE XREF=main+426
000000000000217e         test       dil, dil
0000000000002181         je         loc_219d

0000000000002183         cmp        byte [explicit_columns], 0x0                ; explicit_columns
000000000000218a         jne        loc_28de

0000000000002190         cmp        byte [print_across_flag], 0x0               ; print_across_flag
0000000000002197         jne        loc_285b

                     loc_219d:
000000000000219d         cmp        byte [rsp+0x88+var_5B], 0x0                 ; CODE XREF=main+449
00000000000021a2         je         loc_21d6

00000000000021a4         cmp        byte [rsp+0x88+var_5A], 0x0
00000000000021a9         je         loc_2727

00000000000021af         test       dil, dil
00000000000021b2         jne        loc_21c1

00000000000021b4         cmp        byte [explicit_columns], 0x0                ; explicit_columns
00000000000021bb         je         loc_283e

                     loc_21c1:
00000000000021c1         cmp        byte [rsp+0x88+var_59], 0x0                 ; CODE XREF=main+498
00000000000021c6         mov        byte [truncate_lines], 0x1                  ; truncate_lines
00000000000021cd         je         loc_21d6

                     loc_21cf:
00000000000021cf         mov        byte [use_col_separator], 0x1               ; use_col_separator, CODE XREF=main+1944, main+1964

                     loc_21d6:
00000000000021d6         mov        eax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+482, main+525, main+1902, main+1913, main+1931, main+1970, main+2181
00000000000021dc         cmp        r12d, eax
00000000000021df         jle        loc_221f

00000000000021e1         mov        ecx, dword [rsp+0x88+var_60]
00000000000021e5         movsxd     rdx, eax
00000000000021e8         mov        esi, r12d
00000000000021eb         mov        r9, qword [rsp+0x88+var_68]
00000000000021f0         sub        esi, eax
00000000000021f2         lea        rdx, qword [r13+rdx*8]
00000000000021f7         mov        eax, ecx
00000000000021f9         add        esi, eax
00000000000021fb         nop        dword [rax+rax]

                     loc_2200:
0000000000002200         mov        r8, qword [rdx]                             ; CODE XREF=main+594
0000000000002203         add        ecx, 0x1
0000000000002206         add        rdx, 0x8
000000000000220a         cmp        ecx, esi
000000000000220c         mov        qword [r9+rax*8], r8
0000000000002210         mov        eax, ecx
0000000000002212         jne        loc_2200

0000000000002214         mov        dword [rsp+0x88+var_60], ecx
0000000000002218         mov        dword [optind@@GLIBC_2.2.5], r12d           ; optind@@GLIBC_2.2.5

                     loc_221f:
000000000000221f         cmp        dword [rsp+0x88+var_60], 0x0                ; CODE XREF=main+543
0000000000002224         je         loc_2719

000000000000222a         test       dil, dil
000000000000222d         jne        loc_282b

0000000000002233         mov        eax, dword [rsp+0x88+var_60]
0000000000002237         mov        rbx, qword [rsp+0x88+var_68]
000000000000223c         sub        eax, 0x1
000000000000223f         lea        rbp, qword [rbx+rax*8+8]
0000000000002244         nop        dword [rax]

                     loc_2248:
0000000000002248         mov        rsi, rbx                                    ; CODE XREF=main+668
000000000000224b         mov        edi, 0x1
0000000000002250         add        rbx, 0x8
0000000000002254         call       print_files                                 ; print_files
0000000000002259         cmp        rbp, rbx
000000000000225c         jne        loc_2248

                     loc_225e:
000000000000225e         mov        rdi, qword [number_buff]                    ; argument "__ptr" for method j_free, number_buff, CODE XREF=main+1890, main+2169
0000000000002265         call       j_free                                      ; free
000000000000226a         mov        rdi, qword [clump_buff]                     ; argument "__ptr" for method j_free, clump_buff
0000000000002271         call       j_free                                      ; free
0000000000002276         mov        rdi, qword [column_vector]                  ; argument "__ptr" for method j_free, column_vector
000000000000227d         call       j_free                                      ; free
0000000000002282         mov        rdi, qword [line_vector]                    ; argument "__ptr" for method j_free, line_vector
0000000000002289         call       j_free                                      ; free
000000000000228e         mov        rdi, qword [end_vector]                     ; argument "__ptr" for method j_free, end_vector
0000000000002295         call       j_free                                      ; free
000000000000229a         mov        rdi, qword [buff]                           ; argument "__ptr" for method j_free, buff
00000000000022a1         call       j_free                                      ; free
00000000000022a6         cmp        byte [have_read_stdin], 0x0                 ; have_read_stdin
00000000000022ad         jne        loc_27ea

                     loc_22b3:
00000000000022b3         mov        rbx, qword [rsp+0x88+var_40]                ; CODE XREF=main+2105
00000000000022b8         xor        rbx, qword [fs:0x28]
00000000000022c1         movzx      eax, byte [failed_opens]                    ; failed_opens
00000000000022c8         jne        loc_28d9

00000000000022ce         add        rsp, 0x58
00000000000022d2         pop        rbx
00000000000022d3         pop        rbp
00000000000022d4         pop        r12
00000000000022d6         pop        r13
00000000000022d8         pop        r14
00000000000022da         pop        r15
00000000000022dc         ret
                        ; endp

                     loc_22dd:
00000000000022dd         mov        rdx, qword [optarg@@GLIBC_2.2.5]            ; case 260, optarg@@GLIBC_2.2.5, CODE XREF=main+285
00000000000022e4         test       rdx, rdx
00000000000022e7         je         loc_287f

00000000000022ed         mov        edi, dword [rsp+0x88+var_4C]
00000000000022f1         xor        esi, esi
00000000000022f3         call       first_last_page                             ; first_last_page
00000000000022f8         test       al, al
00000000000022fa         je         loc_28a3

                     loc_2300:
0000000000002300         xor        ebx, ebx                                    ; CODE XREF=main+952, main+1029, main+1168, main+1623, main+2063
0000000000002302         jmp        loc_2090

                     loc_2307:
0000000000002307         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 259, optarg@@GLIBC_2.2.5, CODE XREF=main+285
000000000000230e         xor        ebx, ebx
0000000000002310         call       parse_column_count                          ; parse_column_count
0000000000002315         mov        rdi, r15                                    ; argument "__ptr" for method j_free
0000000000002318         xor        r15d, r15d
000000000000231b         call       j_free                                      ; free
0000000000002320         mov        qword [rsp+0x88+var_48], 0x0
0000000000002329         jmp        loc_2090

                     loc_232e:
000000000000232e         lea        rsi, qword [aWPagewidthInva]                ; case 250, argument "msgid" for method j_dcgettext, "'-w PAGE_WIDTH' invalid number of characters", CODE XREF=main+285
0000000000002335         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002337         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000233c         call       j_dcgettext                                 ; dcgettext
0000000000002341         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000002348         lea        rcx, qword [aStandardInput+16]              ; 0xbee5
000000000000234f         xor        r9d, r9d
0000000000002352         mov        esi, 0x1
0000000000002357         mov        r8, rax
000000000000235a         mov        edx, 0x7fffffff
000000000000235f         call       xdectoimax                                  ; xdectoimax
0000000000002364         movzx      esi, byte [truncate_lines]                  ; truncate_lines
000000000000236b         test       sil, sil
000000000000236e         mov        byte [rsp+0x88+var_5B], sil
0000000000002373         mov        byte [rsp+0x88+var_5A], sil
0000000000002378         jne        loc_2300

000000000000237a         mov        dword [chars_per_line], eax                 ; chars_per_line
0000000000002380         mov        byte [rsp+0x88+var_5A], 0x1
0000000000002385         xor        ebx, ebx
0000000000002387         mov        byte [rsp+0x88+var_5B], 0x1
000000000000238c         jmp        loc_2090

                     loc_2391:
0000000000002391         mov        byte [use_esc_sequence], 0x1                ; case 249, use_esc_sequence, CODE XREF=main+285
0000000000002398         xor        ebx, ebx
000000000000239a         jmp        loc_2090

                     loc_239f:
000000000000239f         mov        byte [extremities], 0x0                     ; case 247, extremities, CODE XREF=main+285
00000000000023a6         mov        byte [keep_FF], 0x1                         ; keep_FF
00000000000023ad         xor        ebx, ebx
00000000000023af         jmp        loc_2090

                     loc_23b4:
00000000000023b4         movzx      eax, byte [use_col_separator]               ; case 246, use_col_separator, CODE XREF=main+285
00000000000023bb         test       al, al
00000000000023bd         mov        byte [rsp+0x88+var_5B], al
00000000000023c1         mov        byte [rsp+0x88+var_59], al
00000000000023c5         jne        loc_2300

00000000000023cb         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000023d2         test       rdi, rdi
00000000000023d5         je         loc_2777

00000000000023db         call       separator_string                            ; separator_string
00000000000023e0         xor        ebx, ebx
00000000000023e2         mov        byte [rsp+0x88+var_59], 0x1
00000000000023e7         mov        byte [rsp+0x88+var_5B], 0x1
00000000000023ec         jmp        loc_2090

                     loc_23f1:
00000000000023f1         mov        byte [ignore_failed_opens], 0x1             ; case 245, ignore_failed_opens, CODE XREF=main+285
00000000000023f8         xor        ebx, ebx
00000000000023fa         jmp        loc_2090

                     loc_23ff:
00000000000023ff         lea        rsi, qword [aOMarginInvalid]                ; case 242, argument "msgid" for method j_dcgettext, "'-o MARGIN' invalid line offset", CODE XREF=main+285
0000000000002406         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000240b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000240d         xor        ebx, ebx
000000000000240f         call       j_dcgettext                                 ; dcgettext
0000000000002414         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
000000000000241b         lea        rcx, qword [aStandardInput+16]              ; 0xbee5
0000000000002422         mov        r8, rax
0000000000002425         xor        r9d, r9d
0000000000002428         mov        edx, 0x7fffffff
000000000000242d         xor        esi, esi
000000000000242f         call       xdectoimax                                  ; xdectoimax
0000000000002434         mov        dword [chars_per_margin], eax               ; chars_per_margin
000000000000243a         jmp        loc_2090

                     loc_243f:
000000000000243f         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 241, optarg@@GLIBC_2.2.5, CODE XREF=main+285
0000000000002446         mov        byte [numbered_lines], 0x1                  ; numbered_lines
000000000000244d         test       rdi, rdi
0000000000002450         je         loc_2300

0000000000002456         lea        rcx, qword [chars_per_number]               ; chars_per_number
000000000000245d         lea        rdx, qword [number_separator]               ; number_separator
0000000000002464         mov        esi, 0x6e
0000000000002469         xor        ebx, ebx
000000000000246b         call       getoptarg                                   ; getoptarg
0000000000002470         jmp        loc_2090

                     loc_2475:
0000000000002475         mov        byte [parallel_files], 0x1                  ; case 240, parallel_files, CODE XREF=main+285
000000000000247c         mov        byte [storing_columns], 0x0                 ; storing_columns
0000000000002483         xor        ebx, ebx
0000000000002485         jmp        loc_2090

                     loc_248a:
000000000000248a         lea        rsi, qword [aLPagelengthInv]                ; case 239, argument "msgid" for method j_dcgettext, "'-l PAGE_LENGTH' invalid number of lines", CODE XREF=main+285
0000000000002491         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002496         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002498         xor        ebx, ebx
000000000000249a         call       j_dcgettext                                 ; dcgettext
000000000000249f         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000024a6         lea        rcx, qword [aStandardInput+16]              ; 0xbee5
00000000000024ad         mov        r8, rax
00000000000024b0         xor        r9d, r9d
00000000000024b3         mov        edx, 0x7fffffff
00000000000024b8         mov        esi, 0x1
00000000000024bd         call       xdectoimax                                  ; xdectoimax
00000000000024c2         mov        dword [lines_per_page], eax                 ; lines_per_page
00000000000024c8         jmp        loc_2090

                     loc_24cd:
00000000000024cd         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 236, optarg@@GLIBC_2.2.5, CODE XREF=main+285
00000000000024d4         test       rdi, rdi
00000000000024d7         je         loc_24f1

00000000000024d9         lea        rcx, qword [chars_per_output_tab]           ; chars_per_output_tab
00000000000024e0         lea        rdx, qword [output_tab_char]                ; output_tab_char
00000000000024e7         mov        esi, 0x69
00000000000024ec         call       getoptarg                                   ; getoptarg

                     loc_24f1:
00000000000024f1         mov        byte [tabify_output], 0x1                   ; tabify_output, CODE XREF=main+1303
00000000000024f8         xor        ebx, ebx
00000000000024fa         jmp        loc_2090

                     loc_24ff:
00000000000024ff         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; case 235, optarg@@GLIBC_2.2.5, CODE XREF=main+285
0000000000002506         xor        ebx, ebx
0000000000002508         mov        qword [custom_header], rax                  ; custom_header
000000000000250f         jmp        loc_2090

                     loc_2514:
0000000000002514         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 232, optarg@@GLIBC_2.2.5, CODE XREF=main+285
000000000000251b         test       rdi, rdi
000000000000251e         je         loc_2538

0000000000002520         lea        rcx, qword [chars_per_input_tab]            ; chars_per_input_tab, DATA XREF=__strftime_internal+965, __strftime_internal+1328, __strftime_internal+1420
0000000000002527         lea        rdx, qword [input_tab_char]                 ; input_tab_char
000000000000252e         mov        esi, 0x65
0000000000002533         call       getoptarg                                   ; getoptarg

                     loc_2538:
0000000000002538         mov        byte [untabify_input], 0x1                  ; untabify_input, CODE XREF=main+1374
000000000000253f         xor        ebx, ebx
0000000000002541         jmp        loc_2090

                     loc_2546:
0000000000002546         mov        byte [double_space], 0x1                    ; case 231, double_space, CODE XREF=main+285
000000000000254d         xor        ebx, ebx
000000000000254f         jmp        loc_2090

                     loc_2554:
0000000000002554         mov        byte [use_cntrl_prefix], 0x1                ; case 230, use_cntrl_prefix, CODE XREF=main+285
000000000000255b         xor        ebx, ebx
000000000000255d         jmp        loc_2090

                     loc_2562:
0000000000002562         mov        byte [balance_columns], 0x1                 ; case 229, balance_columns, CODE XREF=main+285
0000000000002569         xor        ebx, ebx
000000000000256b         jmp        loc_2090

                     loc_2570:
0000000000002570         mov        byte [print_across_flag], 0x1               ; case 228, print_across_flag, CODE XREF=main+285
0000000000002577         mov        byte [storing_columns], 0x0                 ; storing_columns
000000000000257e         xor        ebx, ebx
0000000000002580         jmp        loc_2090

                     loc_2585:
0000000000002585         lea        rsi, qword [aWPagewidthInva_d318]           ; case 218, argument "msgid" for method j_dcgettext, "'-W PAGE_WIDTH' invalid number of characters", CODE XREF=main+285
000000000000258c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002591         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002593         mov        byte [truncate_lines], 0x1                  ; truncate_lines
000000000000259a         xor        ebx, ebx
000000000000259c         call       j_dcgettext                                 ; dcgettext
00000000000025a1         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000025a8         lea        rcx, qword [aStandardInput+16]              ; 0xbee5
00000000000025af         mov        r8, rax
00000000000025b2         xor        r9d, r9d
00000000000025b5         mov        edx, 0x7fffffff
00000000000025ba         mov        esi, 0x1
00000000000025bf         call       xdectoimax                                  ; xdectoimax
00000000000025c4         mov        byte [rsp+0x88+var_5A], 0x0
00000000000025c9         mov        dword [chars_per_line], eax                 ; chars_per_line
00000000000025cf         jmp        loc_2090

                     loc_25d4:
00000000000025d4         mov        byte [extremities], 0x0                     ; case 215, extremities, CODE XREF=main+285
00000000000025db         mov        byte [keep_FF], 0x0                         ; keep_FF
00000000000025e2         xor        ebx, ebx
00000000000025e4         jmp        loc_2090

                     loc_25e9:
00000000000025e9         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; case 214, optarg@@GLIBC_2.2.5, CODE XREF=main+285
00000000000025f0         lea        rax, qword [aStandardInput+16]              ; 0xbee5
00000000000025f7         mov        dword [col_sep_length], 0x0                 ; col_sep_length
0000000000002601         mov        byte [use_col_separator], 0x1               ; use_col_separator
0000000000002608         mov        byte [rsp+0x88+var_59], 0x0
000000000000260d         mov        qword [col_sep_string], rax                 ; col_sep_string
0000000000002614         test       rdi, rdi
0000000000002617         je         loc_2300

000000000000261d         call       separator_string                            ; separator_string
0000000000002622         xor        ebx, ebx
0000000000002624         jmp        loc_2090

                     loc_2629:
0000000000002629         lea        rsi, qword [aNNumberInvalid]                ; case 209, argument "msgid" for method j_dcgettext, "'-N NUMBER' invalid starting line number", CODE XREF=main+285
0000000000002630         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002635         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002637         mov        byte [skip_count], 0x0                      ; skip_count
000000000000263e         xor        ebx, ebx
0000000000002640         call       j_dcgettext                                 ; dcgettext
0000000000002645         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
000000000000264c         lea        rcx, qword [aStandardInput+16]              ; 0xbee5
0000000000002653         mov        r8, rax
0000000000002656         xor        r9d, r9d
0000000000002659         mov        edx, 0x7fffffff
000000000000265e         mov        rsi, 0xffffffff80000000
0000000000002665         call       xdectoimax                                  ; xdectoimax
000000000000266a         mov        dword [start_line_num], eax                 ; start_line_num
0000000000002670         jmp        loc_2090

                     loc_2675:
0000000000002675         mov        byte [join_lines], 0x1                      ; case 205, join_lines, CODE XREF=main+285
000000000000267c         xor        ebx, ebx
000000000000267e         jmp        loc_2090

                     loc_2683:
0000000000002683         mov        byte [use_form_feed], 0x1                   ; case 233, use_form_feed, CODE XREF=main+285
000000000000268a         xor        ebx, ebx
000000000000268c         jmp        loc_2090

                     loc_2691:
0000000000002691         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; case 199, optarg@@GLIBC_2.2.5, CODE XREF=main+285
0000000000002698         xor        ebx, ebx
000000000000269a         mov        qword [date_format], rax                    ; date_format
00000000000026a1         jmp        loc_2090

                     loc_26a6:
00000000000026a6         cmp        qword [first_page_number], 0x0              ; case 132, first_page_number, CODE XREF=main+285
00000000000026ae         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000026b5         jne        loc_26c0

00000000000026b7         cmp        byte [rax], 0x2b
00000000000026ba         je         loc_27ba

                     loc_26c0:
00000000000026c0         mov        edx, dword [rsp+0x88+var_60]                ; CODE XREF=main+1781, main+2076
00000000000026c4         mov        rsi, qword [rsp+0x88+var_68]
00000000000026c9         xor        ebx, ebx
00000000000026cb         mov        qword [rsi+rdx*8], rax
00000000000026cf         lea        eax, dword [rdx+1]
00000000000026d2         mov        dword [rsp+0x88+var_60], eax
00000000000026d6         jmp        loc_2090

                     loc_26db:
00000000000026db         sub        rsp, 0x8                                    ; case 0, CODE XREF=main+285
00000000000026df         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000026e6         mov        rcx, qword [Version]                        ; Version
00000000000026ed         push       0x0
00000000000026ef         lea        r9, qword [aRolandHuebner]                  ; "Roland Huebner"
00000000000026f6         lea        r8, qword [aPeteTermaat]                    ; "Pete TerMaat"
00000000000026fd         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xbf75
0000000000002704         lea        rsi, qword [aPageWidthTooNa+22]             ; 0xbefc
000000000000270b         xor        eax, eax
000000000000270d         call       version_etc                                 ; version_etc
0000000000002712         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000002714         call       j_exit                                      ; exit
                        ; endp

                     loc_2719:
0000000000002719         xor        esi, esi                                    ; CODE XREF=main+612
000000000000271b         xor        edi, edi
000000000000271d         call       print_files                                 ; print_files
0000000000002722         jmp        loc_225e

                     loc_2727:
0000000000002727         cmp        byte [use_col_separator], 0x1               ; use_col_separator, CODE XREF=main+489
000000000000272e         je         loc_21d6

0000000000002734         cmp        byte [rsp+0x88+var_59], 0x0
0000000000002739         je         loc_21d6

000000000000273f         test       dil, dil
0000000000002742         jne        loc_2751

0000000000002744         cmp        byte [explicit_columns], 0x0                ; explicit_columns
000000000000274b         je         loc_21d6

                     loc_2751:
0000000000002751         cmp        byte [truncate_lines], 0x0                  ; truncate_lines, CODE XREF=main+1922
0000000000002758         jne        loc_21cf

000000000000275e         cmp        dword [col_sep_length], 0x0                 ; col_sep_length
0000000000002765         mov        byte [join_lines], 0x1                      ; join_lines
000000000000276c         jg         loc_21cf

0000000000002772         jmp        loc_21d6

                     loc_2777:
0000000000002777         mov        byte [rsp+0x88+var_59], 0x1                 ; CODE XREF=main+1045
000000000000277c         mov        byte [rsp+0x88+var_5B], 0x1
0000000000002781         xor        ebx, ebx
0000000000002783         jmp        loc_2090

                     loc_2788:
0000000000002788         lea        rdi, qword [aPosixlycorrect]                ; argument "__name" for method j_getenv, "POSIXLY_CORRECT", CODE XREF=main+385
000000000000278f         call       j_getenv                                    ; getenv
0000000000002794         test       rax, rax
0000000000002797         je         loc_27e1

0000000000002799         mov        edi, 0x2
000000000000279e         call       hard_locale                                 ; hard_locale
00000000000027a3         test       al, al
00000000000027a5         lea        rdx, qword [aBEHmY]                         ; "%b %e %H:%M %Y"
00000000000027ac         jne        loc_27e1

                     loc_27ae:
00000000000027ae         mov        qword [date_format], rdx                    ; date_format, CODE XREF=main+2088
00000000000027b5         jmp        loc_2147

                     loc_27ba:
00000000000027ba         lea        rdx, qword [rax+1]                          ; CODE XREF=main+1786
00000000000027be         mov        esi, 0x2b
00000000000027c3         mov        edi, 0xfffffffe
00000000000027c8         call       first_last_page                             ; first_last_page
00000000000027cd         test       al, al
00000000000027cf         jne        loc_2300

00000000000027d5         mov        rax, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
00000000000027dc         jmp        loc_26c0

                     loc_27e1:
00000000000027e1         lea        rdx, qword [aYmdHm]                         ; "%Y-%m-%d %H:%M", CODE XREF=main+2007, main+2028
00000000000027e8         jmp        loc_27ae

                     loc_27ea:
00000000000027ea         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5, CODE XREF=main+749
00000000000027f1         call       rpl_fclose                                  ; rpl_fclose
00000000000027f6         add        eax, 0x1
00000000000027f9         jne        loc_22b3

00000000000027ff         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input"
0000000000002806         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000280b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000280d         call       j_dcgettext                                 ; dcgettext
0000000000002812         mov        rbx, rax
0000000000002815         call       j___errno_location                          ; __errno_location
000000000000281a         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000281c         mov        rdx, rbx                                    ; argument "__format" for method j_error
000000000000281f         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002824         xor        eax, eax
0000000000002826         call       j_error                                     ; error

                     loc_282b:
000000000000282b         mov        rsi, qword [rsp+0x88+var_68]                ; CODE XREF=main+621
0000000000002830         mov        edi, dword [rsp+0x88+var_60]
0000000000002834         call       print_files                                 ; print_files
0000000000002839         jmp        loc_225e

                     loc_283e:
000000000000283e         mov        byte [join_lines], 0x1                      ; join_lines, CODE XREF=main+507
0000000000002845         jmp        loc_21d6

                     loc_284a:
000000000000284a         xor        edi, edi                                    ; case 1, argument #1 for method usage, CODE XREF=main+285
000000000000284c         call       usage                                       ; usage

                     loc_2851:
0000000000002851         mov        edi, 0x1                                    ; case 258, argument #1 for method usage, CODE XREF=main+271, main+285
0000000000002856         call       usage                                       ; usage

                     loc_285b:
000000000000285b         lea        rsi, qword [aCannotSpecifyB]                ; argument "msgid" for method j_dcgettext, "cannot specify both printing across and printing in parallel", CODE XREF=main+471
0000000000002862         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002867         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002869         call       j_dcgettext                                 ; dcgettext
000000000000286e         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002870         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002873         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002878         xor        eax, eax
000000000000287a         call       j_error                                     ; error

                     loc_287f:
000000000000287f         lea        rsi, qword [aPagesfirstpage]                ; argument "msgid" for method j_dcgettext, "'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument", CODE XREF=main+807
0000000000002886         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000288b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000288d         call       j_dcgettext                                 ; dcgettext
0000000000002892         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002894         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002897         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000289c         xor        eax, eax
000000000000289e         call       j_error                                     ; error

                     loc_28a3:
00000000000028a3         mov        rdi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+826
00000000000028aa         call       quote                                       ; quote
00000000000028af         lea        rsi, qword [aInvalidPageRan]                ; argument "msgid" for method j_dcgettext, "invalid page range %s"
00000000000028b6         mov        rbx, rax
00000000000028b9         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000028be         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000028c0         call       j_dcgettext                                 ; dcgettext
00000000000028c5         mov        rcx, rbx
00000000000028c8         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000028cb         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000028cd         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000028d2         xor        eax, eax
00000000000028d4         call       j_error                                     ; error

                     loc_28d9:
00000000000028d9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+776
                        ; endp

                     loc_28de:
00000000000028de         lea        rsi, qword [aCannotSpecifyN]                ; argument "msgid" for method j_dcgettext, "cannot specify number of columns when printing in parallel", CODE XREF=main+458
00000000000028e5         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000028ea         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000028ec         call       j_dcgettext                                 ; dcgettext
00000000000028f1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000028f3         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000028f6         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000028fb         xor        eax, eax
00000000000028fd         call       j_error                                     ; error
0000000000002902         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xf03c)
000000000000290c         nop        dword [rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002910         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xea6c)
0000000000002912         mov        r9, rdx
0000000000002915         pop        rsi
0000000000002916         mov        rdx, rsp
0000000000002919         and        rsp, 0xfffffffffffffff0
000000000000291d         push       rax
000000000000291e         push       rsp
000000000000291f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
0000000000002926         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
000000000000292d         lea        rdi, qword [main]                           ; main
0000000000002934         call       qword [qword_210fc8+8]                      ; 0x210fd0
000000000000293a         hlt
                        ; endp
000000000000293b         align      64                                          ; End of unwind block (FDE at 0xea6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
0000000000002940         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
0000000000002947         push       rbp
0000000000002948         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000294f         cmp        rax, rdi
0000000000002952         mov        rbp, rsp
0000000000002955         je         loc_2970

0000000000002957         mov        rax, qword [qword_210fc8]                   ; qword_210fc8
000000000000295e         test       rax, rax
0000000000002961         je         loc_2970

0000000000002963         pop        rbp
0000000000002964         jmp        rax
                        ; endp
0000000000002966         align      16

                     loc_2970:
0000000000002970         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
0000000000002971         ret
                        ; endp
0000000000002972         align      128

                     register_tm_clones:
0000000000002980         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002987         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000298e         push       rbp
000000000000298f         sub        rsi, rdi
0000000000002992         mov        rbp, rsp
0000000000002995         sar        rsi, 0x3
0000000000002999         mov        rax, rsi
000000000000299c         shr        rax, 0x3f
00000000000029a0         add        rsi, rax
00000000000029a3         sar        rsi, 0x1
00000000000029a6         je         loc_29c0

00000000000029a8         mov        rax, qword [qword_210fe0]                   ; qword_210fe0
00000000000029af         test       rax, rax
00000000000029b2         je         loc_29c0

00000000000029b4         pop        rbp
00000000000029b5         jmp        rax
                        ; endp
00000000000029b7         align      64

                     loc_29c0:
00000000000029c0         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
00000000000029c1         ret
                        ; endp
00000000000029c2         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
00000000000029d0         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
00000000000029d7         jne        loc_2a08

00000000000029d9         cmp        qword [qword_210fe8], 0x0                   ; qword_210fe8
00000000000029e1         push       rbp
00000000000029e2         mov        rbp, rsp
00000000000029e5         je         loc_29f3

00000000000029e7         mov        rdi, qword [__dso_handle]                   ; __dso_handle
00000000000029ee         call       j_qword_210fe8                              ; qword_210fe8

                     loc_29f3:
00000000000029f3         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
00000000000029f8         mov        byte [completed.7697], 0x1                  ; completed.7697
00000000000029ff         pop        rbp
0000000000002a00         ret
                        ; endp
0000000000002a01         align      8

                     loc_2a08:
0000000000002a08         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
0000000000002a0a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002a10         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002a11         mov        rbp, rsp
0000000000002a14         pop        rbp
0000000000002a15         jmp        register_tm_clones                          ; register_tm_clones
0000000000002a1a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cols_ready_to_print:
0000000000002a20         mov        eax, dword [columns]                        ; Begin of unwind block (FDE at 0xeadc), columns, CODE XREF=print_files+1435, print_files+1504, print_files+1762, print_files+1820
0000000000002a26         mov        rcx, qword [column_vector]                  ; column_vector
0000000000002a2d         test       eax, eax
0000000000002a2f         je         loc_2a76

0000000000002a31         movzx      esi, byte [storing_columns]                 ; storing_columns
0000000000002a38         sub        eax, 0x1
0000000000002a3b         lea        rdx, qword [rcx+0x10]
0000000000002a3f         shl        rax, 0x6
0000000000002a43         lea        rcx, qword [rcx+rax+0x50]
0000000000002a48         xor        eax, eax
0000000000002a4a         nop        word [rax+rax]

                     loc_2a50:
0000000000002a50         cmp        dword [rdx], 0x1                            ; CODE XREF=cols_ready_to_print+84
0000000000002a53         jbe        loc_2a6a

0000000000002a55         test       sil, sil
0000000000002a58         je         loc_2a6d

0000000000002a5a         mov        r8d, dword [rdx+0x1c]
0000000000002a5e         test       r8d, r8d
0000000000002a61         jle        loc_2a6d

0000000000002a63         mov        edi, dword [rdx+0x20]
0000000000002a66         test       edi, edi
0000000000002a68         jle        loc_2a6d

                     loc_2a6a:
0000000000002a6a         add        eax, 0x1                                    ; CODE XREF=cols_ready_to_print+51

                     loc_2a6d:
0000000000002a6d         add        rdx, 0x40                                   ; CODE XREF=cols_ready_to_print+56, cols_ready_to_print+65, cols_ready_to_print+72
0000000000002a71         cmp        rdx, rcx
0000000000002a74         jne        loc_2a50

                     loc_2a76:
0000000000002a76         ret                                                    ; CODE XREF=cols_ready_to_print+15
                        ; endp
0000000000002a78         align      128                                         ; End of unwind block (FDE at 0xeadc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     reset_status:
0000000000002a80         mov        edx, dword [columns]                        ; Begin of unwind block (FDE at 0xeaf0), columns, CODE XREF=print_files+2071, print_files+3228
0000000000002a86         mov        rdi, qword [column_vector]                  ; column_vector
0000000000002a8d         test       edx, edx
0000000000002a8f         je         loc_2ad1

0000000000002a91         sub        edx, 0x1
0000000000002a94         mov        ecx, dword [files_ready_to_read]            ; files_ready_to_read
0000000000002a9a         lea        rax, qword [rdi+0x10]
0000000000002a9e         shl        rdx, 0x6
0000000000002aa2         xor        esi, esi
0000000000002aa4         lea        rdx, qword [rdi+rdx+0x50]
0000000000002aa9         nop        dword [rax]

                     loc_2ab0:
0000000000002ab0         cmp        dword [rax], 0x2                            ; CODE XREF=reset_status+74
0000000000002ab3         jne        loc_2ac3

0000000000002ab5         mov        dword [rax], 0x0
0000000000002abb         add        ecx, 0x1
0000000000002abe         mov        esi, 0x1

                     loc_2ac3:
0000000000002ac3         add        rax, 0x40                                   ; CODE XREF=reset_status+51
0000000000002ac7         cmp        rax, rdx
0000000000002aca         jne        loc_2ab0

0000000000002acc         test       sil, sil
0000000000002acf         jne        loc_2aeb

                     loc_2ad1:
0000000000002ad1         cmp        byte [storing_columns], 0x0                 ; storing_columns, CODE XREF=reset_status+15, reset_status+113
0000000000002ad8         je         loc_2ae9

0000000000002ada         xor        eax, eax
0000000000002adc         cmp        dword [rdi+0x10], 0x3
0000000000002ae0         setne      al
0000000000002ae3         mov        dword [files_ready_to_read], eax            ; files_ready_to_read

                     loc_2ae9:
0000000000002ae9         ret                                                    ; CODE XREF=reset_status+88
                        ; endp

                     loc_2aeb:
0000000000002aeb         mov        dword [files_ready_to_read], ecx            ; files_ready_to_read, CODE XREF=reset_status+79
0000000000002af1         jmp        loc_2ad1
0000000000002af3         align      256                                         ; End of unwind block (FDE at 0xeaf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     store_char:
0000000000002b00         mov        ecx, dword [buff_current]                   ; Begin of unwind block (FDE at 0xeb04), buff_current, DATA XREF=read_line+107, print_files+1088, print_files+1288
0000000000002b06         push       rbx
0000000000002b07         mov        ebx, edi
0000000000002b09         cmp        rcx, qword [buff_allocated]                 ; buff_allocated
0000000000002b10         mov        rax, qword [buff]                           ; buff
0000000000002b17         mov        rdx, rcx
0000000000002b1a         jb         loc_2b3b

0000000000002b1c         lea        rsi, qword [buff_allocated]                 ; buff_allocated
0000000000002b23         mov        rdi, rax
0000000000002b26         call       x2realloc                                   ; x2realloc
0000000000002b2b         mov        ecx, dword [buff_current]                   ; buff_current
0000000000002b31         mov        qword [buff], rax                           ; buff
0000000000002b38         mov        rdx, rcx

                     loc_2b3b:
0000000000002b3b         add        edx, 0x1                                    ; CODE XREF=store_char+26
0000000000002b3e         mov        byte [rax+rcx], bl
0000000000002b41         mov        dword [buff_current], edx                   ; buff_current
0000000000002b47         pop        rbx
0000000000002b48         ret
                        ; endp
0000000000002b49         align      16                                          ; End of unwind block (FDE at 0xeb04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     integer_overflow:
0000000000002b50         lea        rsi, qword [aIntegerOverflo]                ; Begin of unwind block (FDE at 0xeb20), argument "msgid" for method j_dcgettext, "integer overflow", CODE XREF=separator_string+32, print_files+3926
0000000000002b57         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002b5c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b5e         sub        rsp, 0x8
0000000000002b62         call       j_dcgettext                                 ; dcgettext
0000000000002b67         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002b69         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002b6c         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002b71         xor        eax, eax
0000000000002b73         call       j_error                                     ; error
0000000000002b78         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xeb20)
                     first_last_page:
0000000000002b80         push       r14                                         ; Begin of unwind block (FDE at 0xeb34), CODE XREF=main+819, main+2056
0000000000002b82         push       r13
0000000000002b84         lea        r8, qword [aStandardInput+16]               ; 0xbee5
0000000000002b8b         push       r12
0000000000002b8d         push       rbp
0000000000002b8e         mov        r14d, edi
0000000000002b91         push       rbx
0000000000002b92         mov        rbx, rdx
0000000000002b95         mov        r13d, esi
0000000000002b98         mov        edx, 0xa
0000000000002b9d         mov        rdi, rbx
0000000000002ba0         sub        rsp, 0x20
0000000000002ba4         lea        rcx, qword [rsp+0x50+var_48]
0000000000002ba9         mov        r12, rsp
0000000000002bac         mov        qword [rsp+0x50+var_40], 0xffffffffffffffff
0000000000002bb5         mov        rsi, r12
0000000000002bb8         mov        rax, qword [fs:0x28]
0000000000002bc1         mov        qword [rsp+0x50+var_38], rax
0000000000002bc6         xor        eax, eax
0000000000002bc8         call       xstrtoumax                                  ; xstrtoumax
0000000000002bcd         test       eax, 0xfffffffd
0000000000002bd2         jne        loc_2c88

0000000000002bd8         mov        rdi, qword [rsp+0x50+var_50]
0000000000002bdc         cmp        rdi, rbx
0000000000002bdf         je         loc_2c58

0000000000002be1         cmp        qword [rsp+0x50+var_48], 0x0
0000000000002be7         je         loc_2c58

0000000000002be9         movzx      eax, byte [rdi]
0000000000002bec         cmp        al, 0x3a
0000000000002bee         je         loc_2c18

                     loc_2bf0:
0000000000002bf0         test       al, al                                      ; CODE XREF=first_last_page+259
0000000000002bf2         jne        loc_2c58

0000000000002bf4         mov        rax, qword [rsp+0x50+var_48]
0000000000002bf9         mov        qword [first_page_number], rax              ; first_page_number
0000000000002c00         mov        rax, qword [rsp+0x50+var_40]
0000000000002c05         mov        qword [last_page_number], rax               ; last_page_number
0000000000002c0c         mov        eax, 0x1
0000000000002c11         jmp        loc_2c5a
0000000000002c13         align      8

                     loc_2c18:
0000000000002c18         lea        rbp, qword [rdi+1]                          ; CODE XREF=first_last_page+110
0000000000002c1c         lea        rcx, qword [rsp+0x50+var_40]
0000000000002c21         lea        r8, qword [aStandardInput+16]               ; 0xbee5
0000000000002c28         mov        edx, 0xa
0000000000002c2d         mov        rsi, r12
0000000000002c30         mov        rdi, rbp
0000000000002c33         call       xstrtoumax                                  ; xstrtoumax
0000000000002c38         test       eax, eax
0000000000002c3a         jne        loc_2c88

0000000000002c3c         mov        rax, qword [rsp+0x50+var_50]
0000000000002c40         cmp        rax, rbp
0000000000002c43         je         loc_2c58

0000000000002c45         mov        rdx, qword [rsp+0x50+var_48]
0000000000002c4a         cmp        qword [rsp+0x50+var_40], rdx
0000000000002c4f         jae        loc_2c80

0000000000002c51         nop        dword [rax]

                     loc_2c58:
0000000000002c58         xor        eax, eax                                    ; CODE XREF=first_last_page+95, first_last_page+103, first_last_page+114, first_last_page+195

                     loc_2c5a:
0000000000002c5a         mov        rsi, qword [rsp+0x50+var_38]                ; CODE XREF=first_last_page+145
0000000000002c5f         xor        rsi, qword [fs:0x28]
0000000000002c68         jne        loc_2ca0

0000000000002c6a         add        rsp, 0x20
0000000000002c6e         pop        rbx
0000000000002c6f         pop        rbp
0000000000002c70         pop        r12
0000000000002c72         pop        r13
0000000000002c74         pop        r14
0000000000002c76         ret
                        ; endp
0000000000002c77         align      128

                     loc_2c80:
0000000000002c80         movzx      eax, byte [rax]                             ; CODE XREF=first_last_page+207
0000000000002c83         jmp        loc_2bf0

                     loc_2c88:
0000000000002c88         lea        rcx, qword [long_options]                   ; long_options, CODE XREF=first_last_page+82, first_last_page+186
0000000000002c8f         movsx      edx, r13b
0000000000002c93         mov        r8, rbx
0000000000002c96         mov        esi, r14d
0000000000002c99         mov        edi, eax
0000000000002c9b         call       xstrtol_fatal                               ; xstrtol_fatal

                     loc_2ca0:
0000000000002ca0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=first_last_page+232
                        ; endp
0000000000002ca5         align      16                                          ; End of unwind block (FDE at 0xeb34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     separator_string:
0000000000002cb0         push       rbx                                         ; Begin of unwind block (FDE at 0xeb78), CODE XREF=main+1051, main+1629
0000000000002cb1         mov        rbx, rdi
0000000000002cb4         call       j_strlen                                    ; strlen
0000000000002cb9         cmp        rax, 0x7fffffff
0000000000002cbf         ja         loc_2cd0

0000000000002cc1         mov        qword [col_sep_string], rbx                 ; col_sep_string
0000000000002cc8         mov        dword [col_sep_length], eax                 ; col_sep_length
0000000000002cce         pop        rbx
0000000000002ccf         ret
                        ; endp

                     loc_2cd0:
0000000000002cd0         call       integer_overflow                            ; integer_overflow, CODE XREF=separator_string+15
0000000000002cd5         nop                                                    ; End of unwind block (FDE at 0xeb78)
0000000000002cd6         nop        word [cs:rax+rax]
                     parse_column_count:
0000000000002ce0         push       rbx                                         ; Begin of unwind block (FDE at 0xeb94), CODE XREF=main+364, main+848
0000000000002ce1         lea        rsi, qword [aInvalidNumberO]                ; argument "msgid" for method j_dcgettext, "invalid number of columns"
0000000000002ce8         mov        rbx, rdi
0000000000002ceb         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002cf0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002cf2         call       j_dcgettext                                 ; dcgettext
0000000000002cf7         lea        rcx, qword [aStandardInput+16]              ; 0xbee5
0000000000002cfe         mov        rdi, rbx
0000000000002d01         mov        r8, rax
0000000000002d04         xor        r9d, r9d
0000000000002d07         mov        edx, 0x7fffffff
0000000000002d0c         mov        esi, 0x1
0000000000002d11         call       xdectoimax                                  ; xdectoimax
0000000000002d16         mov        byte [explicit_columns], 0x1                ; explicit_columns
0000000000002d1d         mov        dword [columns], eax                        ; columns
0000000000002d23         pop        rbx
0000000000002d24         ret
                        ; endp
0000000000002d25         align      16                                          ; End of unwind block (FDE at 0xeb94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_58: int8_t, -88
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_E8: int8_t, -232
        ;    var_128: int8_t, -296
        ;    var_130: int64_t, -304
        ;    var_138: int64_t, -312


                     init_header:
0000000000002d30         push       r15                                         ; Begin of unwind block (FDE at 0xebb0), CODE XREF=print_files+802, print_files+3312, print_files+3690
0000000000002d32         push       r14
0000000000002d34         mov        ecx, 0x2
0000000000002d39         push       r13
0000000000002d3b         push       r12
0000000000002d3d         mov        r12d, esi
0000000000002d40         push       rbp
0000000000002d41         push       rbx
0000000000002d42         mov        rbx, rdi
0000000000002d45         lea        rdi, qword [aSsArgumentSToo+30]             ; 0xe549
0000000000002d4c         mov        rsi, rbx
0000000000002d4f         sub        rsp, 0x108
0000000000002d56         mov        rax, qword [fs:0x28]
0000000000002d5f         mov        qword [rsp+0x138+var_40], rax
0000000000002d67         xor        eax, eax
0000000000002d69         rep  cmpsb byte [rsi], byte [rdi]
0000000000002d6b         seta       al
0000000000002d6e         sbb        al, 0x0
0000000000002d70         test       al, al
0000000000002d72         je         loc_2e98

0000000000002d78         test       r12d, r12d
0000000000002d7b         jns        loc_2ec0

                     loc_2d81:
0000000000002d81         cmp        qword [timespec.7349], 0x0                  ; timespec.7349, CODE XREF=init_header+420
0000000000002d89         je         loc_2eac

                     loc_2d8f:
0000000000002d8f         movdqa     xmm0, xmmword [timespec.7349]               ; timespec.7349, CODE XREF=init_header+374, init_header+392
0000000000002d97         movaps     xmmword [rsp+0x138+var_138], xmm0
0000000000002d9b         mov        r15, qword [rsp+0x138+var_130]

                     loc_2da0:
0000000000002da0         lea        r14, qword [rsp+0x138+var_128]              ; CODE XREF=init_header+451
0000000000002da5         mov        rsi, rsp
0000000000002da8         mov        rdi, qword [localtz]                        ; localtz
0000000000002daf         mov        rdx, r14
0000000000002db2         call       localtime_rz                                ; localtime_rz
0000000000002db7         test       rax, rax
0000000000002dba         je         loc_2f00

0000000000002dc0         mov        r8, qword [localtz]                         ; localtz
0000000000002dc7         mov        rdx, qword [date_format]                    ; date_format
0000000000002dce         mov        r9d, r15d
0000000000002dd1         mov        rcx, r14
0000000000002dd4         mov        rsi, 0xffffffffffffffff
0000000000002ddb         xor        edi, edi
0000000000002ddd         call       nstrftime                                   ; nstrftime
0000000000002de2         lea        r13, qword [rax+1]
0000000000002de6         mov        rdi, r13
0000000000002de9         call       xmalloc                                     ; xmalloc
0000000000002dee         mov        r8, qword [localtz]                         ; localtz
0000000000002df5         mov        rdx, qword [date_format]                    ; date_format
0000000000002dfc         mov        r9d, r15d
0000000000002dff         mov        rcx, r14
0000000000002e02         mov        rsi, r13
0000000000002e05         mov        rdi, rax
0000000000002e08         mov        rbp, rax
0000000000002e0b         call       nstrftime                                   ; nstrftime

                     loc_2e10:
0000000000002e10         mov        rdi, qword [date_text]                      ; argument "__ptr" for method j_free, date_text, CODE XREF=init_header+527
0000000000002e17         call       j_free                                      ; free
0000000000002e1c         mov        rax, qword [custom_header]                  ; custom_header
0000000000002e23         mov        qword [date_text], rbp                      ; date_text
0000000000002e2a         test       rax, rax
0000000000002e2d         jne        loc_2e3d

0000000000002e2f         lea        rax, qword [aStandardInput+16]              ; 0xbee5
0000000000002e36         test       r12d, r12d
0000000000002e39         cmovns     rax, rbx

                     loc_2e3d:
0000000000002e3d         xor        esi, esi                                    ; CODE XREF=init_header+253
0000000000002e3f         mov        ebx, dword [chars_per_line]                 ; chars_per_line
0000000000002e45         mov        rdi, rbp
0000000000002e48         mov        qword [file_text], rax                      ; file_text
0000000000002e4f         call       gnu_mbswidth                                ; gnu_mbswidth
0000000000002e54         mov        rdi, qword [file_text]                      ; file_text
0000000000002e5b         sub        ebx, eax
0000000000002e5d         xor        esi, esi
0000000000002e5f         call       gnu_mbswidth                                ; gnu_mbswidth
0000000000002e64         sub        ebx, eax
0000000000002e66         mov        rax, qword [rsp+0x138+var_40]
0000000000002e6e         xor        rax, qword [fs:0x28]
0000000000002e77         mov        dword [header_width_available], ebx         ; header_width_available
0000000000002e7d         jne        loc_2f44

0000000000002e83         add        rsp, 0x108
0000000000002e8a         pop        rbx
0000000000002e8b         pop        rbp
0000000000002e8c         pop        r12
0000000000002e8e         pop        r13
0000000000002e90         pop        r14
0000000000002e92         pop        r15
0000000000002e94         ret
                        ; endp
0000000000002e95         align      8

                     loc_2e98:
0000000000002e98         cmp        qword [timespec.7349], 0x0                  ; timespec.7349, CODE XREF=init_header+66
0000000000002ea0         mov        r12d, 0xffffffff
0000000000002ea6         jne        loc_2d8f

                     loc_2eac:
0000000000002eac         lea        rdi, qword [timespec.7349]                  ; timespec.7349, CODE XREF=init_header+89
0000000000002eb3         call       gettime                                     ; gettime
0000000000002eb8         jmp        loc_2d8f
0000000000002ebd         align      64

                     loc_2ec0:
0000000000002ec0         lea        rdx, qword [rsp+0x138+var_E8]               ; argument "__stat_buf" for method j___fxstat, CODE XREF=init_header+75
0000000000002ec5         mov        esi, r12d                                   ; argument "__fildes" for method j___fxstat
0000000000002ec8         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
0000000000002ecd         call       j___fxstat                                  ; __fxstat
0000000000002ed2         test       eax, eax
0000000000002ed4         jne        loc_2d81

0000000000002eda         mov        r15, qword [rsp+0x138+var_88]
0000000000002ee2         mov        rax, qword [rsp+0x138+var_90]
0000000000002eea         mov        qword [rsp+0x138+var_130], r15
0000000000002eef         mov        qword [rsp+0x138+var_138], rax
0000000000002ef3         jmp        loc_2da0
0000000000002ef8         align      256

                     loc_2f00:
0000000000002f00         mov        edi, 0x21                                   ; CODE XREF=init_header+138
0000000000002f05         call       xmalloc                                     ; xmalloc
0000000000002f0a         mov        rdi, qword [rsp+0x138+var_138]
0000000000002f0e         lea        rsi, qword [rsp+0x138+var_58]
0000000000002f16         mov        rbp, rax
0000000000002f19         call       imaxtostr                                   ; imaxtostr
0000000000002f1e         lea        rcx, qword [aS09d]                          ; "%s.%09d"
0000000000002f25         mov        r8, rax
0000000000002f28         mov        r9d, r15d
0000000000002f2b         mov        edx, 0x21
0000000000002f30         mov        esi, 0x1
0000000000002f35         mov        rdi, rbp
0000000000002f38         xor        eax, eax
0000000000002f3a         call       j___sprintf_chk                             ; __sprintf_chk
0000000000002f3f         jmp        loc_2e10

                     loc_2f44:
0000000000002f44         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=init_header+333
                        ; endp
0000000000002f49         align      16                                          ; End of unwind block (FDE at 0xebb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     pad_across_to:
0000000000002f50         push       rbp                                         ; Begin of unwind block (FDE at 0xec00), CODE XREF=print_header+44, print_stored+346, align_column+82, read_line+850
0000000000002f51         push       rbx
0000000000002f52         mov        ebp, edi
0000000000002f54         sub        rsp, 0x8
0000000000002f58         cmp        byte [tabify_output], 0x0                   ; tabify_output
0000000000002f5f         mov        ebx, dword [output_position]                ; output_position
0000000000002f65         jne        loc_2fa0

                     loc_2f67:
0000000000002f67         add        ebx, 0x1                                    ; CODE XREF=pad_across_to+106
0000000000002f6a         cmp        ebx, ebp
0000000000002f6c         jg         loc_2f91

                     loc_2f6e:
0000000000002f6e         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=pad_across_to+63
0000000000002f75         mov        rax, qword [rdi+0x28]
0000000000002f79         cmp        rax, qword [rdi+0x30]
0000000000002f7d         jae        loc_2fb0

0000000000002f7f         lea        rdx, qword [rax+1]
0000000000002f83         add        ebx, 0x1
0000000000002f86         cmp        ebx, ebp
0000000000002f88         mov        qword [rdi+0x28], rdx
0000000000002f8c         mov        byte [rax], 0x20
0000000000002f8f         jle        loc_2f6e

                     loc_2f91:
0000000000002f91         mov        dword [output_position], ebp                ; output_position, CODE XREF=pad_across_to+28
0000000000002f97         add        rsp, 0x8
0000000000002f9b         pop        rbx
0000000000002f9c         pop        rbp
0000000000002f9d         ret
                        ; endp
0000000000002f9e         align      32

                     loc_2fa0:
0000000000002fa0         sub        ebp, ebx                                    ; CODE XREF=pad_across_to+21
0000000000002fa2         mov        dword [spaces_not_printed], ebp             ; spaces_not_printed
0000000000002fa8         add        rsp, 0x8
0000000000002fac         pop        rbx
0000000000002fad         pop        rbp
0000000000002fae         ret
                        ; endp
0000000000002faf         align      16

                     loc_2fb0:
0000000000002fb0         mov        esi, 0x20                                   ; argument #2 for method j___overflow, CODE XREF=pad_across_to+45
0000000000002fb5         call       j___overflow                                ; __overflow
0000000000002fba         jmp        loc_2f67
0000000000002fbc         align      64                                          ; End of unwind block (FDE at 0xec00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_white_space:
0000000000002fc0         push       r12                                         ; Begin of unwind block (FDE at 0xec38), CODE XREF=print_sep_string+86, print_sep_string+168, j_print_white_space, print_header+49, print_char+120
0000000000002fc2         mov        r12d, dword [spaces_not_printed]            ; spaces_not_printed
0000000000002fc9         push       rbp
0000000000002fca         mov        ebp, dword [output_position]                ; output_position
0000000000002fd0         push       rbx
0000000000002fd1         add        r12d, ebp
0000000000002fd4         mov        eax, r12d
0000000000002fd7         sub        eax, ebp
0000000000002fd9         cmp        eax, 0x1
0000000000002fdc         jle        loc_3024

0000000000002fde         nop

                     loc_2fe0:
0000000000002fe0         mov        ecx, dword [chars_per_output_tab]           ; chars_per_output_tab, CODE XREF=print_white_space+98
0000000000002fe6         mov        eax, ebp
0000000000002fe8         cdq
0000000000002fe9         idiv       ecx
0000000000002feb         sub        ecx, edx
0000000000002fed         lea        ebx, dword [rcx+rbp]
0000000000002ff0         cmp        r12d, ebx
0000000000002ff3         jl         loc_3024

0000000000002ff5         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002ffc         movzx      esi, byte [output_tab_char]                 ; output_tab_char
0000000000003003         mov        rax, qword [rdi+0x28]
0000000000003007         cmp        rax, qword [rdi+0x30]
000000000000300b         jae        loc_3070

000000000000300d         lea        rdx, qword [rax+1]
0000000000003011         mov        ebp, ebx
0000000000003013         mov        qword [rdi+0x28], rdx
0000000000003017         mov        byte [rax], sil

                     loc_301a:
000000000000301a         mov        eax, r12d                                   ; CODE XREF=print_white_space+183
000000000000301d         sub        eax, ebp
000000000000301f         cmp        eax, 0x1
0000000000003022         jg         loc_2fe0

                     loc_3024:
0000000000003024         add        ebp, 0x1                                    ; CODE XREF=print_white_space+28, print_white_space+51, print_white_space+202
0000000000003027         cmp        r12d, ebp
000000000000302a         jl         loc_3050

                     loc_302c:
000000000000302c         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_white_space+142
0000000000003033         mov        rax, qword [rdi+0x28]
0000000000003037         cmp        rax, qword [rdi+0x30]
000000000000303b         jae        loc_3080

000000000000303d         lea        rdx, qword [rax+1]
0000000000003041         add        ebp, 0x1
0000000000003044         cmp        r12d, ebp
0000000000003047         mov        qword [rdi+0x28], rdx
000000000000304b         mov        byte [rax], 0x20
000000000000304e         jge        loc_302c

                     loc_3050:
0000000000003050         pop        rbx                                         ; CODE XREF=print_white_space+106
0000000000003051         mov        dword [output_position], r12d               ; output_position
0000000000003058         mov        dword [spaces_not_printed], 0x0             ; spaces_not_printed
0000000000003062         pop        rbp
0000000000003063         pop        r12
0000000000003065         ret
                        ; endp
0000000000003066         align      16

                     loc_3070:
0000000000003070         call       j___overflow                                ; __overflow, CODE XREF=print_white_space+75
0000000000003075         mov        ebp, ebx
0000000000003077         jmp        loc_301a
0000000000003079         align      128

                     loc_3080:
0000000000003080         mov        esi, 0x20                                   ; argument #2 for method j___overflow, CODE XREF=print_white_space+123
0000000000003085         call       j___overflow                                ; __overflow
000000000000308a         jmp        loc_3024
000000000000308c         align      16                                          ; End of unwind block (FDE at 0xec38)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_sep_string:
0000000000003090         mov        edx, dword [separators_not_printed]         ; Begin of unwind block (FDE at 0xec68), separators_not_printed, CODE XREF=print_stored+328, align_column+64, read_line+880
0000000000003096         mov        eax, dword [spaces_not_printed]             ; spaces_not_printed
000000000000309c         test       edx, edx
000000000000309e         jle        loc_3190

00000000000030a4         push       r14
00000000000030a6         push       r13
00000000000030a8         xor        r13d, r13d
00000000000030ab         push       r12
00000000000030ad         mov        r12, qword [col_sep_string]                 ; col_sep_string
00000000000030b4         push       rbp
00000000000030b5         mov        ebp, dword [col_sep_length]                 ; col_sep_length
00000000000030bb         push       rbx
00000000000030bc         nop        dword [rax]

                     loc_30c0:
00000000000030c0         lea        r14d, dword [rbp+r12]                       ; CODE XREF=print_sep_string+198
00000000000030c5         mov        rbx, r12

                     loc_30c8:
00000000000030c8         mov        edx, r14d                                   ; CODE XREF=print_sep_string+217
00000000000030cb         sub        edx, ebx
00000000000030cd         test       edx, edx
00000000000030cf         jle        loc_3121

                     loc_30d1:
00000000000030d1         movzx      esi, byte [rbx]                             ; CODE XREF=print_sep_string+143
00000000000030d4         add        rbx, 0x1
00000000000030d8         cmp        sil, 0x20
00000000000030dc         je         loc_3160

00000000000030e2         test       eax, eax
00000000000030e4         jle        loc_30ef

00000000000030e6         call       print_white_space                           ; print_white_space
00000000000030eb         movzx      esi, byte [rbx-1]

                     loc_30ef:
00000000000030ef         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_sep_string+84
00000000000030f6         mov        rax, qword [rdi+0x28]
00000000000030fa         cmp        rax, qword [rdi+0x30]
00000000000030fe         jae        loc_3170

0000000000003100         lea        rdx, qword [rax+1]
0000000000003104         mov        qword [rdi+0x28], rdx
0000000000003108         mov        byte [rax], sil

                     loc_310b:
000000000000310b         mov        edx, r14d                                   ; CODE XREF=print_sep_string+229
000000000000310e         add        dword [output_position], 0x1                ; output_position
0000000000003115         mov        eax, dword [spaces_not_printed]             ; spaces_not_printed
000000000000311b         sub        edx, ebx
000000000000311d         test       edx, edx
000000000000311f         jg         loc_30d1

                     loc_3121:
0000000000003121         test       ebp, ebp                                    ; CODE XREF=print_sep_string+63
0000000000003123         mov        edx, r13d
0000000000003126         cmovns     edx, ebp
0000000000003129         sub        ebp, 0x1
000000000000312c         movsxd     rcx, edx
000000000000312f         sub        ebp, edx
0000000000003131         add        r12, rcx
0000000000003134         test       eax, eax
0000000000003136         jle        loc_313d

0000000000003138         call       print_white_space                           ; print_white_space

                     loc_313d:
000000000000313d         mov        eax, dword [separators_not_printed]         ; separators_not_printed, CODE XREF=print_sep_string+166
0000000000003143         sub        eax, 0x1
0000000000003146         test       eax, eax
0000000000003148         mov        dword [separators_not_printed], eax         ; separators_not_printed
000000000000314e         jle        loc_3180

0000000000003150         mov        eax, dword [spaces_not_printed]             ; spaces_not_printed
0000000000003156         jmp        loc_30c0
000000000000315b         align      32

                     loc_3160:
0000000000003160         add        eax, 0x1                                    ; CODE XREF=print_sep_string+76
0000000000003163         mov        dword [spaces_not_printed], eax             ; spaces_not_printed
0000000000003169         jmp        loc_30c8
000000000000316e         align      16

                     loc_3170:
0000000000003170         call       j___overflow                                ; __overflow, CODE XREF=print_sep_string+110
0000000000003175         jmp        loc_310b
0000000000003177         align      128

                     loc_3180:
0000000000003180         pop        rbx                                         ; CODE XREF=print_sep_string+190
0000000000003181         pop        rbp
0000000000003182         pop        r12
0000000000003184         pop        r13
0000000000003186         pop        r14
0000000000003188         ret
                        ; endp
0000000000003189         align      16

                     loc_3190:
0000000000003190         test       eax, eax                                    ; CODE XREF=print_sep_string+14
0000000000003192         jg         j_print_white_space                         ; print_white_space

0000000000003194         ret
                        ; endp

                     j_print_white_space:        // print_white_space
0000000000003196         jmp        print_white_space                           ; print_white_space, CODE XREF=print_sep_string+258
                        ; endp
000000000000319b         align      32                                          ; End of unwind block (FDE at 0xec68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32


                     print_header:
00000000000031a0         push       rbp                                         ; Begin of unwind block (FDE at 0xeca8), CODE XREF=print_stored+312, read_line+992, read_line+1047
00000000000031a1         push       rbx
00000000000031a2         sub        rsp, 0x128
00000000000031a9         mov        edi, dword [chars_per_margin]               ; chars_per_margin
00000000000031af         mov        dword [output_position], 0x0                ; output_position
00000000000031b9         mov        rax, qword [fs:0x28]
00000000000031c2         mov        qword [rsp+0x138+var_20], rax
00000000000031ca         xor        eax, eax
00000000000031cc         call       pad_across_to                               ; pad_across_to
00000000000031d1         call       print_white_space                           ; print_white_space
00000000000031d6         mov        rbx, qword [page_number]                    ; page_number
00000000000031dd         mov        edx, 0x5
00000000000031e2         test       rbx, rbx
00000000000031e5         je         loc_32a7

00000000000031eb         lea        rsi, qword [aPageLu]                        ; argument "msgid" for method j_dcgettext, "Page %lu"
00000000000031f2         mov        rbp, rsp
00000000000031f5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000031f7         call       j_dcgettext                                 ; dcgettext
00000000000031fc         mov        r8, rbx
00000000000031ff         mov        rcx, rax
0000000000003202         mov        edx, 0x114
0000000000003207         mov        esi, 0x1
000000000000320c         mov        rdi, rbp
000000000000320f         xor        eax, eax
0000000000003211         call       j___sprintf_chk                             ; __sprintf_chk
0000000000003216         mov        ebx, dword [header_width_available]         ; header_width_available
000000000000321c         xor        esi, esi
000000000000321e         mov        rdi, rbp
0000000000003221         call       gnu_mbswidth                                ; gnu_mbswidth
0000000000003226         mov        r8, qword [date_text]                       ; date_text
000000000000322d         mov        edx, dword [chars_per_margin]               ; chars_per_margin
0000000000003233         lea        rcx, qword [aStandardInput+16]              ; 0xbee5
000000000000323a         sub        ebx, eax
000000000000323c         mov        eax, 0x0
0000000000003241         lea        rsi, qword [aNnssssssnnn]                   ; "\\n\\n%*s%s%*s%s%*s%s\\n\\n\\n"
0000000000003248         cmovs      ebx, eax
000000000000324b         lea        rax, qword [aNnssssssnnn+21]                ; 0xbeca
0000000000003252         sub        rsp, 0x8
0000000000003256         mov        r9d, ebx
0000000000003259         push       rbp
000000000000325a         mov        edi, 0x1
000000000000325f         sar        r9d, 0x1
0000000000003262         push       rax
0000000000003263         sub        ebx, r9d
0000000000003266         push       rbx
0000000000003267         push       qword [file_text]                           ; file_text
000000000000326d         push       rax
000000000000326e         xor        eax, eax
0000000000003270         call       j___printf_chk                              ; __printf_chk
0000000000003275         add        rsp, 0x30
0000000000003279         mov        byte [print_a_header], 0x0                  ; print_a_header
0000000000003280         mov        dword [output_position], 0x0                ; output_position
000000000000328a         mov        rax, qword [rsp+0x138+var_20]
0000000000003292         xor        rax, qword [fs:0x28]
000000000000329b         jne        loc_32c6

000000000000329d         add        rsp, 0x128
00000000000032a4         pop        rbx
00000000000032a5         pop        rbp
00000000000032a6         ret
                        ; endp

                     loc_32a7:
00000000000032a7         lea        rsi, qword [aPageNumberOver]                ; argument "msgid" for method j_dcgettext, "page number overflow", CODE XREF=print_header+69
00000000000032ae         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032b0         call       j_dcgettext                                 ; dcgettext
00000000000032b5         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000032b7         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000032ba         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000032bf         xor        eax, eax
00000000000032c1         call       j_error                                     ; error

                     loc_32c6:
00000000000032c6         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=print_header+251
                        ; endp
00000000000032cb         align      16                                          ; End of unwind block (FDE at 0xeca8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_22: int8_t, -34
        ;    var_23: int8_t, -35
        ;    var_24: int8_t, -36


                     char_to_clump:
00000000000032d0         push       r12                                         ; Begin of unwind block (FDE at 0xecf0), CODE XREF=read_line+86, read_line+528
00000000000032d2         push       rbp
00000000000032d3         mov        ebp, edi
00000000000032d5         push       rbx
00000000000032d6         sub        rsp, 0x10
00000000000032da         mov        rbx, qword [clump_buff]                     ; clump_buff
00000000000032e1         mov        ecx, dword [chars_per_input_tab]            ; chars_per_input_tab
00000000000032e7         mov        rax, qword [fs:0x28]
00000000000032f0         mov        qword [rsp+0x28+var_20], rax
00000000000032f5         xor        eax, eax
00000000000032f7         cmp        byte [input_tab_char], dil                  ; input_tab_char
00000000000032fe         je         loc_3365

0000000000003300         cmp        dil, 0x9
0000000000003304         je         loc_3360

0000000000003306         movzx      r12d, dil
000000000000330a         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000330f         mov        rax, qword [rax]
0000000000003312         test       byte [rax+r12*2+1], 0x40
0000000000003318         jne        loc_3400

000000000000331e         cmp        byte [use_esc_sequence], 0x0                ; use_esc_sequence
0000000000003325         jne        loc_3438

000000000000332b         cmp        byte [use_cntrl_prefix], 0x0                ; use_cntrl_prefix
0000000000003332         je         loc_3490

0000000000003338         test       bpl, bpl
000000000000333b         js         loc_3438

0000000000003341         xor        ebp, 0x40
0000000000003344         mov        byte [rbx], 0x5e
0000000000003347         mov        esi, dword [input_position]                 ; input_position
000000000000334d         mov        byte [rbx+1], bpl
0000000000003351         mov        eax, 0x2
0000000000003356         mov        edx, 0x2
000000000000335b         jmp        loc_3390
000000000000335d         align      32

                     loc_3360:
0000000000003360         mov        ecx, 0x8                                    ; CODE XREF=char_to_clump+52

                     loc_3365:
0000000000003365         mov        esi, dword [input_position]                 ; input_position, CODE XREF=char_to_clump+46
000000000000336b         mov        eax, esi
000000000000336d         cdq
000000000000336e         idiv       ecx
0000000000003370         sub        ecx, edx
0000000000003372         cmp        byte [untabify_input], 0x0                  ; untabify_input
0000000000003379         mov        edx, ecx
000000000000337b         jne        loc_33b8

000000000000337d         test       edx, edx
000000000000337f         mov        byte [rbx], bpl
0000000000003382         mov        eax, 0x1
0000000000003387         js         loc_33e3

0000000000003389         nop        dword [rax]

                     loc_3390:
0000000000003390         add        edx, esi                                    ; CODE XREF=char_to_clump+139, char_to_clump+273, char_to_clump+285, char_to_clump+323, char_to_clump+436, char_to_clump+470, char_to_clump+514
0000000000003392         mov        dword [input_position], edx                 ; input_position

                     loc_3398:
0000000000003398         mov        rdi, qword [rsp+0x28+var_20]                ; CODE XREF=char_to_clump+297, char_to_clump+348
000000000000339d         xor        rdi, qword [fs:0x28]
00000000000033a6         jne        loc_34d7

00000000000033ac         add        rsp, 0x10
00000000000033b0         pop        rbx
00000000000033b1         pop        rbp
00000000000033b2         pop        r12
00000000000033b4         ret
                        ; endp
00000000000033b5         align      8

                     loc_33b8:
00000000000033b8         test       ecx, ecx                                    ; CODE XREF=char_to_clump+171
00000000000033ba         je         loc_34d0

00000000000033c0         lea        eax, dword [rcx-1]
00000000000033c3         lea        rax, qword [rbx+rax+1]
00000000000033c8         nop        dword [rax+rax]

                     loc_33d0:
00000000000033d0         add        rbx, 0x1                                    ; CODE XREF=char_to_clump+267
00000000000033d4         mov        byte [rbx-1], 0x20
00000000000033d8         cmp        rax, rbx
00000000000033db         jne        loc_33d0

00000000000033dd         test       edx, edx
00000000000033df         mov        eax, edx
00000000000033e1         jns        loc_3390

                     loc_33e3:
00000000000033e3         test       esi, esi                                    ; CODE XREF=char_to_clump+183
00000000000033e5         je         loc_3420

00000000000033e7         mov        ecx, edx
00000000000033e9         neg        ecx

                     loc_33eb:
00000000000033eb         cmp        ecx, esi                                    ; CODE XREF=char_to_clump+506
00000000000033ed         jl         loc_3390

00000000000033ef         mov        dword [input_position], 0x0                 ; input_position
00000000000033f9         jmp        loc_3398
00000000000033fb         align      1024

                     loc_3400:
0000000000003400         mov        byte [rbx], bpl                             ; CODE XREF=char_to_clump+72
0000000000003403         mov        esi, dword [input_position]                 ; input_position
0000000000003409         mov        eax, 0x1
000000000000340e         mov        edx, 0x1
0000000000003413         jmp        loc_3390
0000000000003418         align      32

                     loc_3420:
0000000000003420         mov        dword [input_position], 0x0                 ; input_position, CODE XREF=char_to_clump+277, char_to_clump+485
000000000000342a         xor        eax, eax
000000000000342c         jmp        loc_3398
0000000000003431         align      8

                     loc_3438:
0000000000003438         lea        rdi, qword [rsp+0x28+var_24]                ; CODE XREF=char_to_clump+85, char_to_clump+107
000000000000343d         lea        rcx, qword [aNnssssssnnn+23]                ; 0xbecc
0000000000003444         mov        edx, 0x4
0000000000003449         mov        esi, 0x1
000000000000344e         mov        byte [rbx], 0x5c
0000000000003451         movzx      r8d, bpl
0000000000003455         xor        eax, eax
0000000000003457         call       j___sprintf_chk                             ; __sprintf_chk
000000000000345c         movzx      eax, byte [rsp+0x28+var_24]
0000000000003461         mov        esi, dword [input_position]                 ; input_position
0000000000003467         mov        edx, 0x4
000000000000346c         mov        byte [rbx+1], al
000000000000346f         movzx      eax, byte [rsp+0x28+var_23]
0000000000003474         mov        byte [rbx+2], al
0000000000003477         movzx      eax, byte [rsp+0x28+var_22]
000000000000347c         mov        byte [rbx+3], al
000000000000347f         mov        eax, 0x4
0000000000003484         jmp        loc_3390
0000000000003489         align      16

                     loc_3490:
0000000000003490         cmp        bpl, 0x8                                    ; CODE XREF=char_to_clump+98
0000000000003494         mov        esi, dword [input_position]                 ; input_position
000000000000349a         je         loc_34b0

000000000000349c         mov        byte [rbx], bpl
000000000000349f         mov        eax, 0x1
00000000000034a4         xor        edx, edx
00000000000034a6         jmp        loc_3390
00000000000034ab         align      16

                     loc_34b0:
00000000000034b0         test       esi, esi                                    ; CODE XREF=char_to_clump+458
00000000000034b2         mov        byte [rbx], 0x8
00000000000034b5         je         loc_3420

00000000000034bb         mov        ecx, 0x1
00000000000034c0         mov        eax, 0x1
00000000000034c5         mov        edx, 0xffffffff
00000000000034ca         jmp        loc_33eb
00000000000034cf         align      16

                     loc_34d0:
00000000000034d0         xor        eax, eax                                    ; CODE XREF=char_to_clump+234
00000000000034d2         jmp        loc_3390

                     loc_34d7:
00000000000034d7         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=char_to_clump+214
                        ; endp
00000000000034dc         align      32                                          ; End of unwind block (FDE at 0xecf0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_char:
00000000000034e0         push       rbp                                         ; Begin of unwind block (FDE at 0xed24), CODE XREF=print_stored+136, DATA XREF=print_files+1074, print_files+2842
00000000000034e1         push       rbx
00000000000034e2         mov        ebx, edi
00000000000034e4         sub        rsp, 0x8
00000000000034e8         cmp        byte [tabify_output], 0x0                   ; tabify_output
00000000000034ef         je         loc_3520

00000000000034f1         cmp        dil, 0x20
00000000000034f5         mov        eax, dword [spaces_not_printed]             ; spaces_not_printed
00000000000034fb         je         loc_3570

00000000000034fd         test       eax, eax
00000000000034ff         movzx      ebp, dil
0000000000003503         jg         loc_3558

0000000000003505         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000350a         mov        rax, qword [rax]
000000000000350d         test       byte [rax+rbp*2+1], 0x40
0000000000003512         jne        loc_3548

                     loc_3514:
0000000000003514         cmp        bl, 0x8                                     ; CODE XREF=print_char+140
0000000000003517         jne        loc_3520

0000000000003519         sub        dword [output_position], 0x1                ; output_position

                     loc_3520:
0000000000003520         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_char+15, print_char+55, print_char+111
0000000000003527         mov        rax, qword [rdi+0x28]
000000000000352b         cmp        rax, qword [rdi+0x30]
000000000000352f         jae        loc_3580

0000000000003531         lea        rdx, qword [rax+1]
0000000000003535         mov        qword [rdi+0x28], rdx
0000000000003539         mov        byte [rax], bl
000000000000353b         add        rsp, 0x8
000000000000353f         pop        rbx
0000000000003540         pop        rbp
0000000000003541         ret
                        ; endp
0000000000003542         align      8

                     loc_3548:
0000000000003548         add        dword [output_position], 0x1                ; output_position, CODE XREF=print_char+50, print_char+138
000000000000354f         jmp        loc_3520
0000000000003551         align      8

                     loc_3558:
0000000000003558         call       print_white_space                           ; print_white_space, CODE XREF=print_char+35
000000000000355d         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000003562         mov        rax, qword [rax]
0000000000003565         test       byte [rax+rbp*2+1], 0x40
000000000000356a         jne        loc_3548

000000000000356c         jmp        loc_3514
000000000000356e         align      16

                     loc_3570:
0000000000003570         add        eax, 0x1                                    ; CODE XREF=print_char+27
0000000000003573         mov        dword [spaces_not_printed], eax             ; spaces_not_printed
0000000000003579         add        rsp, 0x8
000000000000357d         pop        rbx
000000000000357e         pop        rbp
000000000000357f         ret
                        ; endp

                     loc_3580:
0000000000003580         add        rsp, 0x8                                    ; CODE XREF=print_char+79
0000000000003584         movzx      esi, bl                                     ; argument #2 for method j___overflow
0000000000003587         pop        rbx
0000000000003588         pop        rbp
0000000000003589         jmp        j___overflow                                ; __overflow
                        ; endp
000000000000358e         align      16                                          ; End of unwind block (FDE at 0xed24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     print_stored:
0000000000003590         push       r13                                         ; Begin of unwind block (FDE at 0xed64), DATA XREF=print_files+1095, print_files+1299
0000000000003592         push       r12
0000000000003594         mov        r13, rdi
0000000000003597         push       rbp
0000000000003598         push       rbx
0000000000003599         sub        rsp, 0x8
000000000000359d         movsxd     r12, dword [rdi+0x28]
00000000000035a1         mov        rbp, qword [buff]                           ; buff
00000000000035a8         mov        byte [pad_vertically], 0x1                  ; pad_vertically
00000000000035af         lea        eax, dword [r12+1]
00000000000035b4         mov        dword [rdi+0x28], eax
00000000000035b7         mov        rax, qword [line_vector]                    ; line_vector
00000000000035be         movsxd     rbx, dword [rax+r12*4]
00000000000035c2         movsxd     rax, dword [rax+r12*4+4]
00000000000035c7         add        rbx, rbp
00000000000035ca         add        rbp, rax
00000000000035cd         cmp        byte [print_a_header], 0x0                  ; print_a_header
00000000000035d4         jne        loc_36c8

                     loc_35da:
00000000000035da         cmp        dword [r13+0x10], 0x1                       ; CODE XREF=print_stored+317
00000000000035df         je         loc_3670

                     loc_35e5:
00000000000035e5         mov        eax, dword [col_sep_length]                 ; col_sep_length, CODE XREF=print_stored+284
00000000000035eb         mov        edi, dword [padding_not_printed]            ; padding_not_printed
00000000000035f1         cmp        eax, edi
00000000000035f3         jl         loc_36e8

                     loc_35f9:
00000000000035f9         cmp        byte [use_col_separator], 0x0               ; use_col_separator, CODE XREF=print_stored+361
0000000000003600         jne        loc_36d8

                     loc_3606:
0000000000003606         cmp        rbx, rbp                                    ; CODE XREF=print_stored+333
0000000000003609         je         loc_3622

000000000000360b         nop        dword [rax+rax]

                     loc_3610:
0000000000003610         add        rbx, 0x1                                    ; CODE XREF=print_stored+144
0000000000003614         movsx      edi, byte [rbx-1]
0000000000003618         call       print_char                                  ; print_char
000000000000361d         cmp        rbp, rbx
0000000000003620         jne        loc_3610

                     loc_3622:
0000000000003622         mov        eax, dword [spaces_not_printed]             ; spaces_not_printed, CODE XREF=print_stored+121
0000000000003628         test       eax, eax
000000000000362a         jne        loc_3659

000000000000362c         mov        rdx, qword [end_vector]                     ; end_vector
0000000000003633         mov        eax, dword [r13+0x34]
0000000000003637         mov        ecx, dword [col_sep_length]                 ; col_sep_length
000000000000363d         mov        esi, dword [rdx+r12*4]
0000000000003641         add        esi, eax
0000000000003643         sub        eax, ecx
0000000000003645         cmp        eax, dword [chars_per_margin]               ; chars_per_margin
000000000000364b         mov        edx, esi
000000000000364d         mov        dword [output_position], esi                ; output_position
0000000000003653         je         loc_3700

                     loc_3659:
0000000000003659         add        rsp, 0x8                                    ; CODE XREF=print_stored+154, print_stored+297, print_stored+306
000000000000365d         mov        eax, 0x1
0000000000003662         pop        rbx
0000000000003663         pop        rbp
0000000000003664         pop        r12
0000000000003666         pop        r13
0000000000003668         ret
                        ; endp
0000000000003669         align      16

                     loc_3670:
0000000000003670         mov        edx, dword [columns]                        ; columns, CODE XREF=print_stored+79
0000000000003676         mov        rcx, qword [column_vector]                  ; column_vector
000000000000367d         test       edx, edx
000000000000367f         jle        loc_36a7

0000000000003681         sub        edx, 0x1
0000000000003684         lea        rax, qword [rcx+0x10]
0000000000003688         shl        rdx, 0x6
000000000000368c         lea        rdx, qword [rcx+rdx+0x50]
0000000000003691         nop        dword [rax]

                     loc_3698:
0000000000003698         mov        dword [rax], 0x2                            ; CODE XREF=print_stored+277
000000000000369e         add        rax, 0x40
00000000000036a2         cmp        rax, rdx
00000000000036a5         jne        loc_3698

                     loc_36a7:
00000000000036a7         mov        edx, dword [rcx+0x30]                       ; CODE XREF=print_stored+239
00000000000036aa         test       edx, edx
00000000000036ac         jg         loc_35e5

00000000000036b2         cmp        byte [extremities], 0x0                     ; extremities
00000000000036b9         jne        loc_3659

00000000000036bb         mov        byte [pad_vertically], 0x0                  ; pad_vertically
00000000000036c2         jmp        loc_3659
00000000000036c4         align      8

                     loc_36c8:
00000000000036c8         call       print_header                                ; print_header, CODE XREF=print_stored+68
00000000000036cd         jmp        loc_35da
00000000000036d2         align      8

                     loc_36d8:
00000000000036d8         call       print_sep_string                            ; print_sep_string, CODE XREF=print_stored+112
00000000000036dd         jmp        loc_3606
00000000000036e2         align      8

                     loc_36e8:
00000000000036e8         sub        edi, eax                                    ; CODE XREF=print_stored+99
00000000000036ea         call       pad_across_to                               ; pad_across_to
00000000000036ef         mov        dword [padding_not_printed], 0x0            ; padding_not_printed
00000000000036f9         jmp        loc_35f9
00000000000036fe         align      256

                     loc_3700:
0000000000003700         sub        edx, ecx                                    ; CODE XREF=print_stored+195
0000000000003702         mov        eax, 0x1
0000000000003707         mov        dword [output_position], edx                ; output_position
000000000000370d         add        rsp, 0x8
0000000000003711         pop        rbx
0000000000003712         pop        rbp
0000000000003713         pop        r12
0000000000003715         pop        r13
0000000000003717         ret
                        ; endp
0000000000003718         align      32                                          ; End of unwind block (FDE at 0xed64)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hold_file.isra.1:
0000000000003720         cmp        byte [parallel_files], 0x0                  ; Begin of unwind block (FDE at 0xedb0), parallel_files, CODE XREF=skip_read+402, skip_read+464, read_rest_of_line+136, read_line+761
0000000000003727         jne        loc_3790

0000000000003729         mov        edx, dword [columns]                        ; columns
000000000000372f         mov        rdi, qword [column_vector]                  ; column_vector
0000000000003736         test       edx, edx
0000000000003738         je         loc_377a

000000000000373a         sub        edx, 0x1
000000000000373d         movzx      ecx, byte [storing_columns]                 ; storing_columns
0000000000003744         lea        rax, qword [rdi+0x10]
0000000000003748         shl        rdx, 0x6
000000000000374c         lea        rdx, qword [rdi+rdx+0x50]
0000000000003751         jmp        loc_3767
0000000000003753         align      8

                     loc_3758:
0000000000003758         mov        dword [rax], 0x1                            ; CODE XREF=hold_file.isra.1+73
000000000000375e         add        rax, 0x40
0000000000003762         cmp        rax, rdx
0000000000003765         je         loc_377a

                     loc_3767:
0000000000003767         test       cl, cl                                      ; CODE XREF=hold_file.isra.1+49, hold_file.isra.1+88
0000000000003769         jne        loc_3758

000000000000376b         mov        dword [rax], 0x2
0000000000003771         add        rax, 0x40
0000000000003775         cmp        rax, rdx
0000000000003778         jne        loc_3767

                     loc_377a:
000000000000377a         mov        dword [rsi], 0x0                            ; CODE XREF=hold_file.isra.1+24, hold_file.isra.1+69
0000000000003780         sub        dword [files_ready_to_read], 0x1            ; files_ready_to_read
0000000000003787         ret
                        ; endp
0000000000003788         align      16

                     loc_3790:
0000000000003790         mov        dword [rdi], 0x2                            ; CODE XREF=hold_file.isra.1+7
0000000000003796         sub        dword [files_ready_to_read], 0x1            ; files_ready_to_read
000000000000379d         mov        dword [rsi], 0x0
00000000000037a3         ret
                        ; endp
00000000000037a4         align      16                                          ; End of unwind block (FDE at 0xedb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     add_line_number.isra.2:
00000000000037b0         push       r12                                         ; Begin of unwind block (FDE at 0xedc4), CODE XREF=align_column+53, read_line+956
00000000000037b2         mov        r9d, dword [line_number]                    ; line_number
00000000000037b9         lea        rcx, qword [aNnssssssnnn+28]                ; 0xbed1
00000000000037c0         push       rbp
00000000000037c1         mov        r8d, dword [chars_per_number]               ; chars_per_number
00000000000037c8         mov        rbp, rdi
00000000000037cb         mov        rdi, qword [number_buff]                    ; number_buff
00000000000037d2         push       rbx
00000000000037d3         mov        rdx, 0xffffffffffffffff
00000000000037da         xor        eax, eax
00000000000037dc         mov        esi, 0x1
00000000000037e1         call       j___sprintf_chk                             ; __sprintf_chk
00000000000037e6         mov        edx, dword [chars_per_number]               ; chars_per_number
00000000000037ec         add        dword [line_number], 0x1                    ; line_number
00000000000037f3         sub        eax, edx
00000000000037f5         movsxd     rbx, eax
00000000000037f8         add        rbx, qword [number_buff]                    ; number_buff
00000000000037ff         test       edx, edx
0000000000003801         jle        loc_3820

0000000000003803         lea        eax, dword [rdx-1]
0000000000003806         lea        r12, qword [rbx+rax+1]
000000000000380b         nop        dword [rax+rax]

                     loc_3810:
0000000000003810         add        rbx, 0x1                                    ; CODE XREF=add_line_number.isra.2+110
0000000000003814         movsx      edi, byte [rbx-1]
0000000000003818         call       qword [rbp]
000000000000381b         cmp        rbx, r12
000000000000381e         jne        loc_3810

                     loc_3820:
0000000000003820         cmp        dword [columns], 0x1                        ; columns, CODE XREF=add_line_number.isra.2+81
0000000000003827         movsx      edi, byte [number_separator]                ; number_separator
000000000000382e         jg         loc_3880

0000000000003830         call       qword [rbp]
0000000000003833         cmp        byte [number_separator], 0x9                ; number_separator
000000000000383a         jne        loc_3857

000000000000383c         mov        esi, dword [output_position]                ; output_position
0000000000003842         mov        ecx, dword [chars_per_output_tab]           ; chars_per_output_tab
0000000000003848         mov        eax, esi
000000000000384a         cdq
000000000000384b         idiv       ecx
000000000000384d         sub        ecx, edx
000000000000384f         add        ecx, esi
0000000000003851         mov        dword [output_position], ecx                ; output_position

                     loc_3857:
0000000000003857         cmp        byte [truncate_lines], 0x0                  ; truncate_lines, CODE XREF=add_line_number.isra.2+138, add_line_number.isra.2+217, add_line_number.isra.2+236, add_line_number.isra.2+256
000000000000385e         je         loc_3875

0000000000003860         cmp        byte [parallel_files], 0x0                  ; parallel_files
0000000000003867         jne        loc_3875

0000000000003869         mov        eax, dword [number_width]                   ; number_width
000000000000386f         add        dword [input_position], eax                 ; input_position

                     loc_3875:
0000000000003875         pop        rbx                                         ; CODE XREF=add_line_number.isra.2+174, add_line_number.isra.2+183
0000000000003876         pop        rbp
0000000000003877         pop        r12
0000000000003879         ret
                        ; endp
000000000000387a         align      128

                     loc_3880:
0000000000003880         cmp        dil, 0x9                                    ; CODE XREF=add_line_number.isra.2+126
0000000000003884         je         loc_388b

0000000000003886         call       qword [rbp]
0000000000003889         jmp        loc_3857

                     loc_388b:
000000000000388b         mov        eax, dword [number_width]                   ; number_width, CODE XREF=add_line_number.isra.2+212
0000000000003891         sub        eax, dword [chars_per_number]               ; chars_per_number
0000000000003897         test       eax, eax
0000000000003899         lea        ebx, dword [rax-1]
000000000000389c         jle        loc_3857

000000000000389e         nop

                     loc_38a0:
00000000000038a0         sub        ebx, 0x1                                    ; CODE XREF=add_line_number.isra.2+254
00000000000038a3         mov        edi, 0x20
00000000000038a8         call       qword [rbp]
00000000000038ab         cmp        ebx, 0xffffffff
00000000000038ae         jne        loc_38a0

00000000000038b0         jmp        loc_3857
00000000000038b2         align      64                                          ; End of unwind block (FDE at 0xedc4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     align_column:
00000000000038c0         push       rbx                                         ; Begin of unwind block (FDE at 0xedf4), CODE XREF=read_line+231, print_files+2499
00000000000038c1         mov        eax, dword [col_sep_length]                 ; col_sep_length
00000000000038c7         mov        rbx, rdi
00000000000038ca         mov        edi, dword [rdi+0x34]
00000000000038cd         cmp        edi, eax
00000000000038cf         mov        dword [padding_not_printed], edi            ; padding_not_printed
00000000000038d5         jg         loc_3910

                     loc_38d7:
00000000000038d7         cmp        byte [use_col_separator], 0x0               ; use_col_separator, CODE XREF=align_column+97
00000000000038de         jne        loc_3900

                     loc_38e0:
00000000000038e0         cmp        byte [rbx+0x38], 0x0                        ; CODE XREF=align_column+69
00000000000038e4         jne        loc_38f0

00000000000038e6         pop        rbx
00000000000038e7         ret
                        ; endp
00000000000038e8         align      16

                     loc_38f0:
00000000000038f0         lea        rdi, qword [rbx+0x20]                       ; CODE XREF=align_column+36
00000000000038f4         pop        rbx
00000000000038f5         jmp        add_line_number.isra.2                      ; add_line_number.isra.2
                        ; endp
00000000000038fa         align      256

                     loc_3900:
0000000000003900         call       print_sep_string                            ; print_sep_string, CODE XREF=align_column+30
0000000000003905         jmp        loc_38e0
0000000000003907         align      16

                     loc_3910:
0000000000003910         sub        edi, eax                                    ; CODE XREF=align_column+21
0000000000003912         call       pad_across_to                               ; pad_across_to
0000000000003917         mov        dword [padding_not_printed], 0x0            ; padding_not_printed
0000000000003921         jmp        loc_38d7
0000000000003923         align      16                                          ; End of unwind block (FDE at 0xedf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_file.part.4:
0000000000003930         push       rbx                                         ; Begin of unwind block (FDE at 0xee18), CODE XREF=skip_read+270, read_rest_of_line+159, read_line+787
0000000000003931         mov        rbx, rdi
0000000000003934         mov        rdi, qword [rdi]
0000000000003937         test       byte [rdi], 0x20
000000000000393a         jne        loc_3a00

0000000000003940         call       j_fileno                                    ; fileno
0000000000003945         test       eax, eax
0000000000003947         jne        loc_39c0

                     loc_3949:
0000000000003949         cmp        byte [parallel_files], 0x0                  ; parallel_files, CODE XREF=close_file.part.4+154
0000000000003950         jne        loc_39a0

0000000000003952         mov        edx, dword [columns]                        ; columns
0000000000003958         mov        rcx, qword [column_vector]                  ; column_vector
000000000000395f         test       edx, edx
0000000000003961         je         loc_39ae

0000000000003963         sub        edx, 0x1
0000000000003966         lea        rax, qword [rcx+0x10]
000000000000396a         shl        rdx, 0x6
000000000000396e         lea        rdx, qword [rcx+rdx+0x50]
0000000000003973         nop        dword [rax+rax]

                     loc_3978:
0000000000003978         mov        ecx, dword [rax+0x1c]                       ; CODE XREF=close_file.part.4+99
000000000000397b         mov        dword [rax], 0x3
0000000000003981         test       ecx, ecx
0000000000003983         jne        loc_398c

0000000000003985         mov        dword [rax+0x20], 0x0

                     loc_398c:
000000000000398c         add        rax, 0x40                                   ; CODE XREF=close_file.part.4+83
0000000000003990         cmp        rax, rdx
0000000000003993         jne        loc_3978

0000000000003995         sub        dword [files_ready_to_read], 0x1            ; files_ready_to_read
000000000000399c         pop        rbx
000000000000399d         ret
                        ; endp
000000000000399e         align      32

                     loc_39a0:
00000000000039a0         mov        dword [rbx+0x10], 0x3                       ; CODE XREF=close_file.part.4+32
00000000000039a7         mov        dword [rbx+0x30], 0x0

                     loc_39ae:
00000000000039ae         sub        dword [files_ready_to_read], 0x1            ; files_ready_to_read, CODE XREF=close_file.part.4+49
00000000000039b5         pop        rbx
00000000000039b6         ret
                        ; endp
00000000000039b7         align      64

                     loc_39c0:
00000000000039c0         mov        rdi, qword [rbx]                            ; CODE XREF=close_file.part.4+23
00000000000039c3         call       rpl_fclose                                  ; rpl_fclose
00000000000039c8         test       eax, eax
00000000000039ca         je         loc_3949

00000000000039d0         mov        rdx, qword [rbx+8]
00000000000039d4         mov        esi, 0x3
00000000000039d9         xor        edi, edi
00000000000039db         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000039e0         mov        rbx, rax
00000000000039e3         call       j___errno_location                          ; __errno_location
00000000000039e8         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000039ea         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xd84a
00000000000039f1         mov        rcx, rbx
00000000000039f4         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000039f9         xor        eax, eax
00000000000039fb         call       j_error                                     ; error

                     loc_3a00:
0000000000003a00         mov        rdx, qword [rbx+8]                          ; CODE XREF=close_file.part.4+10
0000000000003a04         mov        esi, 0x3
0000000000003a09         xor        edi, edi
0000000000003a0b         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003a10         mov        rbx, rax
0000000000003a13         call       j___errno_location                          ; __errno_location
0000000000003a18         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
0000000000003a1a         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xd84a
0000000000003a21         mov        rcx, rbx
0000000000003a24         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000003a29         xor        eax, eax
0000000000003a2b         call       j_error                                     ; error
                     skip_read:
0000000000003a30         push       r13                                         ; End of unwind block (FDE at 0xee18), Begin of unwind block (FDE at 0xee3c), CODE XREF=print_files+3060, print_files+3148
0000000000003a32         push       r12
0000000000003a34         mov        r13, rdi
0000000000003a37         push       rbp
0000000000003a38         push       rbx
0000000000003a39         mov        r12d, esi
0000000000003a3c         sub        rsp, 0x8
0000000000003a40         mov        rbx, qword [rdi]
0000000000003a43         mov        rax, qword [rbx+8]
0000000000003a47         cmp        rax, qword [rbx+0x10]
0000000000003a4b         jae        loc_3c10

0000000000003a51         lea        rdx, qword [rax+1]
0000000000003a55         mov        qword [rbx+8], rdx
0000000000003a59         movzx      eax, byte [rax]

                     loc_3a5c:
0000000000003a5c         cmp        eax, 0xc                                    ; CODE XREF=skip_read+488
0000000000003a5f         je         loc_3af0

0000000000003a65         mov        byte [r13+0x39], 0x0
0000000000003a6a         xor        ebp, ebp

                     loc_3a6c:
0000000000003a6c         cmp        byte [last_line], 0x0                       ; last_line, CODE XREF=skip_read+249
0000000000003a73         jne        loc_3ae8

                     loc_3a75:
0000000000003a75         cmp        eax, 0xa                                    ; CODE XREF=skip_read+176, skip_read+189
0000000000003a78         je         loc_3aa6

                     loc_3a7a:
0000000000003a7a         cmp        eax, 0xc                                    ; CODE XREF=skip_read+116
0000000000003a7d         je         loc_3b50

0000000000003a83         cmp        eax, 0xffffffff
0000000000003a86         je         loc_3b30

0000000000003a8c         mov        rax, qword [rbx+8]
0000000000003a90         cmp        rax, qword [rbx+0x10]
0000000000003a94         jae        loc_3ad8

0000000000003a96         lea        rdx, qword [rax+1]
0000000000003a9a         mov        qword [rbx+8], rdx
0000000000003a9e         movzx      eax, byte [rax]
0000000000003aa1         cmp        eax, 0xa
0000000000003aa4         jne        loc_3a7a

                     loc_3aa6:
0000000000003aa6         cmp        byte [skip_count], 0x0                      ; skip_count, CODE XREF=skip_read+72, skip_read+261, skip_read+275, skip_read+407, skip_read+469
0000000000003aad         je         loc_3aca

0000000000003aaf         cmp        byte [parallel_files], 0x1                  ; parallel_files
0000000000003ab6         jne        loc_3abe

0000000000003ab8         cmp        r12d, 0x1
0000000000003abc         jne        loc_3aca

                     loc_3abe:
0000000000003abe         test       bpl, bpl                                    ; CODE XREF=skip_read+134
0000000000003ac1         jne        loc_3aca

0000000000003ac3         add        dword [line_count], 0x1                     ; line_count

                     loc_3aca:
0000000000003aca         add        rsp, 0x8                                    ; CODE XREF=skip_read+125, skip_read+140, skip_read+145
0000000000003ace         pop        rbx
0000000000003acf         pop        rbp
0000000000003ad0         pop        r12
0000000000003ad2         pop        r13
0000000000003ad4         ret
                        ; endp
0000000000003ad5         align      8

                     loc_3ad8:
0000000000003ad8         mov        rdi, rbx                                    ; argument #1 for method j___uflow, CODE XREF=skip_read+100
0000000000003adb         call       j___uflow                                   ; __uflow
0000000000003ae0         jmp        loc_3a75
0000000000003ae2         align      8

                     loc_3ae8:
0000000000003ae8         mov        byte [r13+0x39], 0x1                        ; CODE XREF=skip_read+67
0000000000003aed         jmp        loc_3a75
0000000000003aef         align      16

                     loc_3af0:
0000000000003af0         cmp        byte [r13+0x39], 0x0                        ; CODE XREF=skip_read+47
0000000000003af5         je         loc_3bd0

0000000000003afb         mov        rax, qword [rbx+8]
0000000000003aff         cmp        rax, qword [rbx+0x10]
0000000000003b03         jae        loc_3c63

0000000000003b09         lea        rdx, qword [rax+1]
0000000000003b0d         mov        qword [rbx+8], rdx
0000000000003b11         movzx      eax, byte [rax]

                     loc_3b14:
0000000000003b14         cmp        eax, 0xa                                    ; CODE XREF=skip_read+571
0000000000003b17         je         loc_3c3a

                     loc_3b1d:
0000000000003b1d         cmp        eax, 0xc                                    ; CODE XREF=skip_read+543, skip_read+584
0000000000003b20         mov        byte [r13+0x39], 0x0
0000000000003b25         sete       bpl
0000000000003b29         jmp        loc_3a6c
0000000000003b2e         align      16

                     loc_3b30:
0000000000003b30         cmp        dword [r13+0x10], 0x3                       ; CODE XREF=skip_read+86
0000000000003b35         je         loc_3aa6

0000000000003b3b         mov        rdi, r13
0000000000003b3e         call       close_file.part.4                           ; close_file.part.4
0000000000003b43         jmp        loc_3aa6
0000000000003b48         align      16

                     loc_3b50:
0000000000003b50         movzx      eax, byte [last_line]                       ; last_line, CODE XREF=skip_read+77

                     loc_3b57:
0000000000003b57         test       al, al                                      ; CODE XREF=skip_read+435
0000000000003b59         je         loc_3b9c

0000000000003b5b         cmp        byte [parallel_files], 0x0                  ; parallel_files
0000000000003b62         jne        loc_3c30

0000000000003b68         mov        edx, dword [columns]                        ; columns
0000000000003b6e         mov        rcx, qword [column_vector]                  ; column_vector
0000000000003b75         test       edx, edx
0000000000003b77         je         loc_3b9c

0000000000003b79         sub        edx, 0x1
0000000000003b7c         lea        rax, qword [rcx+0x39]
0000000000003b80         shl        rdx, 0x6
0000000000003b84         lea        rdx, qword [rcx+rdx+0x79]
0000000000003b89         nop        dword [rax]

                     loc_3b90:
0000000000003b90         mov        byte [rax], 0x0                             ; CODE XREF=skip_read+362
0000000000003b93         add        rax, 0x40
0000000000003b97         cmp        rax, rdx
0000000000003b9a         jne        loc_3b90

                     loc_3b9c:
0000000000003b9c         mov        rax, qword [rbx+8]                          ; CODE XREF=skip_read+297, skip_read+327, skip_read+501, skip_read+517
0000000000003ba0         cmp        rax, qword [rbx+0x10]
0000000000003ba4         jae        loc_3c54

0000000000003baa         lea        rdx, qword [rax+1]
0000000000003bae         mov        qword [rbx+8], rdx
0000000000003bb2         movzx      edi, byte [rax]

                     loc_3bb5:
0000000000003bb5         cmp        edi, 0xa                                    ; CODE XREF=skip_read+558
0000000000003bb8         jne        loc_3bf0

0000000000003bba         lea        rsi, qword [r13+0x30]
0000000000003bbe         lea        rdi, qword [r13+0x10]
0000000000003bc2         call       hold_file.isra.1                            ; hold_file.isra.1
0000000000003bc7         jmp        loc_3aa6
0000000000003bcc         align      16

                     loc_3bd0:
0000000000003bd0         movzx      ebp, byte [last_line]                       ; last_line, CODE XREF=skip_read+197
0000000000003bd7         test       bpl, bpl
0000000000003bda         mov        eax, ebp
0000000000003bdc         je         loc_3c20

0000000000003bde         mov        byte [r13+0x39], 0x1
0000000000003be3         jmp        loc_3b57
0000000000003be8         align      16

                     loc_3bf0:
0000000000003bf0         mov        rsi, rbx                                    ; argument "__stream" for method j_ungetc, CODE XREF=skip_read+392
0000000000003bf3         call       j_ungetc                                    ; ungetc
0000000000003bf8         lea        rsi, qword [r13+0x30]
0000000000003bfc         lea        rdi, qword [r13+0x10]
0000000000003c00         call       hold_file.isra.1                            ; hold_file.isra.1
0000000000003c05         jmp        loc_3aa6
0000000000003c0a         align      16

                     loc_3c10:
0000000000003c10         mov        rdi, rbx                                    ; argument #1 for method j___uflow, CODE XREF=skip_read+27
0000000000003c13         call       j___uflow                                   ; __uflow
0000000000003c18         jmp        loc_3a5c
0000000000003c1d         align      32

                     loc_3c20:
0000000000003c20         mov        ebp, 0x1                                    ; CODE XREF=skip_read+428
0000000000003c25         jmp        loc_3b9c
0000000000003c2a         align      16

                     loc_3c30:
0000000000003c30         mov        byte [r13+0x39], 0x0                        ; CODE XREF=skip_read+306
0000000000003c35         jmp        loc_3b9c

                     loc_3c3a:
0000000000003c3a         mov        rax, qword [rbx+8]                          ; CODE XREF=skip_read+231
0000000000003c3e         cmp        rax, qword [rbx+0x10]
0000000000003c42         jae        loc_3c70

0000000000003c44         lea        rdx, qword [rax+1]
0000000000003c48         mov        qword [rbx+8], rdx
0000000000003c4c         movzx      eax, byte [rax]
0000000000003c4f         jmp        loc_3b1d

                     loc_3c54:
0000000000003c54         mov        rdi, rbx                                    ; argument #1 for method j___uflow, CODE XREF=skip_read+372
0000000000003c57         call       j___uflow                                   ; __uflow
0000000000003c5c         mov        edi, eax
0000000000003c5e         jmp        loc_3bb5

                     loc_3c63:
0000000000003c63         mov        rdi, rbx                                    ; argument #1 for method j___uflow, CODE XREF=skip_read+211
0000000000003c66         call       j___uflow                                   ; __uflow
0000000000003c6b         jmp        loc_3b14

                     loc_3c70:
0000000000003c70         mov        rdi, rbx                                    ; argument #1 for method j___uflow, CODE XREF=skip_read+530
0000000000003c73         call       j___uflow                                   ; __uflow
0000000000003c78         jmp        loc_3b1d
0000000000003c7d         align      128                                         ; End of unwind block (FDE at 0xee3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_rest_of_line:
0000000000003c80         push       rbp                                         ; Begin of unwind block (FDE at 0xee78), CODE XREF=print_files+2435, print_files+2579
0000000000003c81         push       rbx
0000000000003c82         mov        rbp, rdi
0000000000003c85         sub        rsp, 0x8
0000000000003c89         mov        rbx, qword [rdi]
0000000000003c8c         jmp        loc_3caa
0000000000003c8e         align      16

                     loc_3c90:
0000000000003c90         lea        rdx, qword [rax+1]                          ; CODE XREF=read_rest_of_line+50
0000000000003c94         mov        qword [rbx+8], rdx
0000000000003c98         movzx      eax, byte [rax]
0000000000003c9b         cmp        eax, 0xa
0000000000003c9e         je         loc_3cc1

                     loc_3ca0:
0000000000003ca0         cmp        eax, 0xc                                    ; CODE XREF=read_rest_of_line+63
0000000000003ca3         je         loc_3cd0

0000000000003ca5         cmp        eax, 0xffffffff
0000000000003ca8         je         loc_3d10

                     loc_3caa:
0000000000003caa         mov        rax, qword [rbx+8]                          ; CODE XREF=read_rest_of_line+12
0000000000003cae         cmp        rax, qword [rbx+0x10]
0000000000003cb2         jb         loc_3c90

0000000000003cb4         mov        rdi, rbx                                    ; argument #1 for method j___uflow
0000000000003cb7         call       j___uflow                                   ; __uflow
0000000000003cbc         cmp        eax, 0xa
0000000000003cbf         jne        loc_3ca0

                     loc_3cc1:
0000000000003cc1         add        rsp, 0x8                                    ; CODE XREF=read_rest_of_line+30, read_rest_of_line+148
0000000000003cc5         pop        rbx
0000000000003cc6         pop        rbp
0000000000003cc7         ret
                        ; endp
0000000000003cc8         align      16

                     loc_3cd0:
0000000000003cd0         mov        rax, qword [rbx+8]                          ; CODE XREF=read_rest_of_line+35
0000000000003cd4         cmp        rax, qword [rbx+0x10]
0000000000003cd8         jae        loc_3d3b

0000000000003cda         lea        rdx, qword [rax+1]
0000000000003cde         mov        qword [rbx+8], rdx
0000000000003ce2         movzx      edi, byte [rax]

                     loc_3ce5:
0000000000003ce5         cmp        edi, 0xa                                    ; CODE XREF=read_rest_of_line+197
0000000000003ce8         jne        loc_3d28

0000000000003cea         cmp        byte [keep_FF], 0x0                         ; keep_FF
0000000000003cf1         je         loc_3cfa

                     loc_3cf3:
0000000000003cf3         mov        byte [print_a_FF], 0x1                      ; print_a_FF, CODE XREF=read_rest_of_line+183

                     loc_3cfa:
0000000000003cfa         add        rsp, 0x8                                    ; CODE XREF=read_rest_of_line+113, read_rest_of_line+185
0000000000003cfe         lea        rsi, qword [rbp+0x30]
0000000000003d02         lea        rdi, qword [rbp+0x10]
0000000000003d06         pop        rbx
0000000000003d07         pop        rbp
0000000000003d08         jmp        hold_file.isra.1                            ; hold_file.isra.1
                        ; endp
0000000000003d0d         align      16

                     loc_3d10:
0000000000003d10         cmp        dword [rbp+0x10], 0x3                       ; CODE XREF=read_rest_of_line+40
0000000000003d14         je         loc_3cc1

0000000000003d16         add        rsp, 0x8
0000000000003d1a         mov        rdi, rbp
0000000000003d1d         pop        rbx
0000000000003d1e         pop        rbp
0000000000003d1f         jmp        close_file.part.4                           ; close_file.part.4
                        ; endp
0000000000003d24         align      8

                     loc_3d28:
0000000000003d28         mov        rsi, rbx                                    ; argument "__stream" for method j_ungetc, CODE XREF=read_rest_of_line+104
0000000000003d2b         call       j_ungetc                                    ; ungetc
0000000000003d30         cmp        byte [keep_FF], 0x0                         ; keep_FF
0000000000003d37         jne        loc_3cf3

0000000000003d39         jmp        loc_3cfa

                     loc_3d3b:
0000000000003d3b         mov        rdi, rbx                                    ; argument #1 for method j___uflow, CODE XREF=read_rest_of_line+88
0000000000003d3e         call       j___uflow                                   ; __uflow
0000000000003d43         mov        edi, eax
0000000000003d45         jmp        loc_3ce5
0000000000003d47         align      16                                          ; End of unwind block (FDE at 0xee78)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     read_line:
0000000000003d50         push       r14                                         ; Begin of unwind block (FDE at 0xeebc), CODE XREF=print_files+2279, DATA XREF=print_files+1081, print_files+2853
0000000000003d52         push       r13
0000000000003d54         push       r12
0000000000003d56         push       rbp
0000000000003d57         push       rbx
0000000000003d58         mov        rbx, rdi
0000000000003d5b         mov        rdi, qword [rdi]
0000000000003d5e         mov        rax, qword [rdi+8]
0000000000003d62         cmp        rax, qword [rdi+0x10]
0000000000003d66         jae        loc_4120

0000000000003d6c         lea        rdx, qword [rax+1]
0000000000003d70         mov        qword [rdi+8], rdx
0000000000003d74         movzx      ebp, byte [rax]

                     loc_3d77:
0000000000003d77         cmp        ebp, 0xc                                    ; CODE XREF=read_line+983
0000000000003d7a         mov        r13d, dword [input_position]                ; input_position
0000000000003d81         je         loc_3fa0

                     loc_3d87:
0000000000003d87         cmp        ebp, 0xa                                    ; CODE XREF=read_line+632, read_line+666, read_line+1151
0000000000003d8a         mov        byte [rbx+0x39], 0x0
0000000000003d8e         je         loc_3dae

0000000000003d90         cmp        ebp, 0xc
0000000000003d93         je         loc_3ff0

0000000000003d99         cmp        ebp, 0xffffffff
0000000000003d9c         je         loc_3ea0

0000000000003da2         movsx      edi, bpl
0000000000003da6         call       char_to_clump                               ; char_to_clump
0000000000003dab         mov        r12d, eax

                     loc_3dae:
0000000000003dae         cmp        byte [truncate_lines], 0x0                  ; truncate_lines, CODE XREF=read_line+62
0000000000003db5         jne        loc_3e78

                     loc_3dbb:
0000000000003dbb         lea        rax, qword [store_char]                     ; store_char, CODE XREF=read_line+308
0000000000003dc2         cmp        qword [rbx+0x20], rax
0000000000003dc6         je         loc_3ee1

0000000000003dcc         cmp        byte [print_a_header], 0x0                  ; print_a_header
0000000000003dd3         mov        byte [pad_vertically], 0x1                  ; pad_vertically
0000000000003dda         je         loc_3de9

0000000000003ddc         cmp        byte [storing_columns], 0x0                 ; storing_columns
0000000000003de3         je         loc_4130

                     loc_3de9:
0000000000003de9         cmp        byte [parallel_files], 0x0                  ; parallel_files, CODE XREF=read_line+138, read_line+997
0000000000003df0         je         loc_3ec0

0000000000003df6         cmp        byte [align_empty_cols], 0x0                ; align_empty_cols
0000000000003dfd         je         loc_3ec0

0000000000003e03         mov        eax, dword [separators_not_printed]         ; separators_not_printed
0000000000003e09         mov        r13, qword [column_vector]                  ; column_vector
0000000000003e10         mov        dword [separators_not_printed], 0x0         ; separators_not_printed
0000000000003e1a         test       eax, eax
0000000000003e1c         jle        loc_3e48

0000000000003e1e         lea        r14d, dword [rax-1]
0000000000003e22         add        r14, 0x1
0000000000003e26         shl        r14, 0x6
0000000000003e2a         add        r14, r13
0000000000003e2d         nop        dword [rax]

                     loc_3e30:
0000000000003e30         mov        rdi, r13                                    ; CODE XREF=read_line+246
0000000000003e33         add        r13, 0x40
0000000000003e37         call       align_column                                ; align_column
0000000000003e3c         add        dword [separators_not_printed], 0x1         ; separators_not_printed
0000000000003e43         cmp        r14, r13
0000000000003e46         jne        loc_3e30

                     loc_3e48:
0000000000003e48         cmp        byte [truncate_lines], 0x0                  ; truncate_lines, CODE XREF=read_line+204
0000000000003e4f         mov        edi, dword [rbx+0x34]
0000000000003e52         mov        dword [padding_not_printed], edi            ; padding_not_printed
0000000000003e58         je         loc_4178

0000000000003e5e         mov        eax, dword [chars_per_column]               ; chars_per_column
0000000000003e64         mov        dword [spaces_not_printed], eax             ; spaces_not_printed

                     loc_3e6a:
0000000000003e6a         mov        byte [align_empty_cols], 0x0                ; align_empty_cols, CODE XREF=read_line+1074
0000000000003e71         jmp        loc_3ec6
0000000000003e73         align      8

                     loc_3e78:
0000000000003e78         mov        eax, dword [chars_per_column]               ; chars_per_column, CODE XREF=read_line+101
0000000000003e7e         cmp        dword [input_position], eax                 ; input_position
0000000000003e84         jle        loc_3dbb

0000000000003e8a         pop        rbx
0000000000003e8b         mov        dword [input_position], r13d                ; input_position
0000000000003e92         xor        eax, eax
0000000000003e94         pop        rbp
0000000000003e95         pop        r12
0000000000003e97         pop        r13
0000000000003e99         pop        r14
0000000000003e9b         ret
                        ; endp
0000000000003e9c         align      32

                     loc_3ea0:
0000000000003ea0         cmp        dword [rbx+0x10], 0x3                       ; CODE XREF=read_line+76, read_line+513
0000000000003ea4         jne        loc_4060

                     loc_3eaa:
0000000000003eaa         mov        eax, 0x1                                    ; CODE XREF=read_line+421, read_line+495

                     loc_3eaf:
0000000000003eaf         pop        rbx                                         ; CODE XREF=read_line+1034
0000000000003eb0         pop        rbp
0000000000003eb1         pop        r12
0000000000003eb3         pop        r13
0000000000003eb5         pop        r14
0000000000003eb7         ret
                        ; endp
0000000000003eb8         align      64

                     loc_3ec0:
0000000000003ec0         mov        edi, dword [padding_not_printed]            ; padding_not_printed, CODE XREF=read_line+160, read_line+173

                     loc_3ec6:
0000000000003ec6         mov        eax, dword [col_sep_length]                 ; col_sep_length, CODE XREF=read_line+289
0000000000003ecc         cmp        eax, edi
0000000000003ece         jl         loc_40a0

                     loc_3ed4:
0000000000003ed4         cmp        byte [use_col_separator], 0x0               ; use_col_separator, CODE XREF=read_line+865
0000000000003edb         jne        loc_40c0

                     loc_3ee1:
0000000000003ee1         cmp        byte [rbx+0x38], 0x0                        ; CODE XREF=read_line+118, read_line+885
0000000000003ee5         jne        loc_4108

                     loc_3eeb:
0000000000003eeb         cmp        ebp, 0xa                                    ; CODE XREF=read_line+961
0000000000003eee         mov        byte [empty_line], 0x0                      ; empty_line
0000000000003ef5         je         loc_3eaa

0000000000003ef7         test       r12d, r12d
0000000000003efa         mov        rbp, qword [clump_buff]                     ; clump_buff
0000000000003f01         je         loc_3f20

0000000000003f03         lea        eax, dword [r12-1]
0000000000003f08         lea        r12, qword [rbp+rax+1]
0000000000003f0d         nop        dword [rax]

                     loc_3f10:
0000000000003f10         add        rbp, 0x1                                    ; CODE XREF=read_line+462
0000000000003f14         movsx      edi, byte [rbp-1]
0000000000003f18         call       qword [rbx+0x20]
0000000000003f1b         cmp        r12, rbp
0000000000003f1e         jne        loc_3f10

                     loc_3f20:
0000000000003f20         mov        rdi, qword [rbx]                            ; CODE XREF=read_line+433, read_line+555, read_line+584
0000000000003f23         mov        rax, qword [rdi+8]
0000000000003f27         cmp        rax, qword [rdi+0x10]
0000000000003f2b         jae        loc_4190

0000000000003f31         lea        rdx, qword [rax+1]
0000000000003f35         mov        qword [rdi+8], rdx
0000000000003f39         movzx      eax, byte [rax]

                     loc_3f3c:
0000000000003f3c         cmp        eax, 0xa                                    ; CODE XREF=read_line+1093
0000000000003f3f         je         loc_3eaa

0000000000003f45         cmp        eax, 0xc
0000000000003f48         je         loc_40d0

0000000000003f4e         cmp        eax, 0xffffffff
0000000000003f51         je         loc_3ea0

0000000000003f57         movsx      edi, al
0000000000003f5a         mov        ebp, dword [input_position]                 ; input_position
0000000000003f60         call       char_to_clump                               ; char_to_clump
0000000000003f65         cmp        byte [truncate_lines], 0x0                  ; truncate_lines
0000000000003f6c         jne        loc_4140

                     loc_3f72:
0000000000003f72         test       eax, eax                                    ; CODE XREF=read_line+1020
0000000000003f74         mov        rbp, qword [clump_buff]                     ; clump_buff
0000000000003f7b         je         loc_3f20

0000000000003f7d         sub        eax, 0x1
0000000000003f80         lea        r12, qword [rbp+rax+1]
0000000000003f85         nop        dword [rax]

                     loc_3f88:
0000000000003f88         add        rbp, 0x1                                    ; CODE XREF=read_line+582
0000000000003f8c         movsx      edi, byte [rbp-1]
0000000000003f90         call       qword [rbx+0x20]
0000000000003f93         cmp        rbp, r12
0000000000003f96         jne        loc_3f88

0000000000003f98         jmp        loc_3f20
0000000000003f9a         align      32

                     loc_3fa0:
0000000000003fa0         cmp        byte [rbx+0x39], 0x0                        ; CODE XREF=read_line+49
0000000000003fa4         mov        rdi, qword [rbx]
0000000000003fa7         mov        rax, qword [rdi+8]
0000000000003fab         mov        rdx, qword [rdi+0x10]
0000000000003faf         je         loc_3ffb

0000000000003fb1         cmp        rdx, rax
0000000000003fb4         jbe        loc_41b0

0000000000003fba         lea        rdx, qword [rax+1]
0000000000003fbe         mov        qword [rdi+8], rdx
0000000000003fc2         movzx      ebp, byte [rax]

                     loc_3fc5:
0000000000003fc5         cmp        ebp, 0xa                                    ; CODE XREF=read_line+1127
0000000000003fc8         jne        loc_3d87

0000000000003fce         mov        rdi, qword [rbx]
0000000000003fd1         mov        rax, qword [rdi+8]
0000000000003fd5         cmp        rax, qword [rdi+0x10]
0000000000003fd9         jae        loc_41c8

0000000000003fdf         lea        rdx, qword [rax+1]
0000000000003fe3         mov        qword [rdi+8], rdx
0000000000003fe7         movzx      ebp, byte [rax]
0000000000003fea         jmp        loc_3d87
0000000000003fef         align      16

                     loc_3ff0:
0000000000003ff0         mov        rdi, qword [rbx]                            ; CODE XREF=read_line+67
0000000000003ff3         mov        rax, qword [rdi+8]
0000000000003ff7         mov        rdx, qword [rdi+0x10]

                     loc_3ffb:
0000000000003ffb         cmp        rax, rdx                                    ; CODE XREF=read_line+607
0000000000003ffe         jae        loc_41a0

0000000000004004         lea        rdx, qword [rax+1]
0000000000004008         mov        qword [rdi+8], rdx
000000000000400c         movzx      edi, byte [rax]

                     loc_400f:
000000000000400f         cmp        edi, 0xa                                    ; CODE XREF=read_line+1111
0000000000004012         jne        loc_4080

0000000000004014         cmp        byte [print_a_header], 0x0                  ; print_a_header
000000000000401b         mov        byte [FF_only], 0x1                         ; FF_only
0000000000004022         je         loc_4031

                     loc_4024:
0000000000004024         cmp        byte [storing_columns], 0x0                 ; storing_columns, CODE XREF=read_line+840
000000000000402b         je         loc_4160

                     loc_4031:
0000000000004031         cmp        byte [keep_FF], 0x0                         ; keep_FF, CODE XREF=read_line+722, read_line+838, read_line+927, read_line+941
0000000000004038         je         loc_4041

000000000000403a         mov        byte [print_a_FF], 0x1                      ; print_a_FF

                     loc_4041:
0000000000004041         lea        rsi, qword [rbx+0x30]                       ; CODE XREF=read_line+744, read_line+1052
0000000000004045         lea        rdi, qword [rbx+0x10]
0000000000004049         call       hold_file.isra.1                            ; hold_file.isra.1
000000000000404e         pop        rbx
000000000000404f         mov        eax, 0x1
0000000000004054         pop        rbp
0000000000004055         pop        r12
0000000000004057         pop        r13
0000000000004059         pop        r14
000000000000405b         ret
                        ; endp
000000000000405c         align      32

                     loc_4060:
0000000000004060         mov        rdi, rbx                                    ; CODE XREF=read_line+340
0000000000004063         call       close_file.part.4                           ; close_file.part.4
0000000000004068         pop        rbx
0000000000004069         mov        eax, 0x1
000000000000406e         pop        rbp
000000000000406f         pop        r12
0000000000004071         pop        r13
0000000000004073         pop        r14
0000000000004075         ret
                        ; endp
0000000000004076         align      128

                     loc_4080:
0000000000004080         mov        rsi, qword [rbx]                            ; argument "__stream" for method j_ungetc, CODE XREF=read_line+706
0000000000004083         call       j_ungetc                                    ; ungetc
0000000000004088         cmp        byte [print_a_header], 0x0                  ; print_a_header
000000000000408f         mov        byte [FF_only], 0x1                         ; FF_only
0000000000004096         je         loc_4031

0000000000004098         jmp        loc_4024
000000000000409a         align      32

                     loc_40a0:
00000000000040a0         sub        edi, eax                                    ; CODE XREF=read_line+382
00000000000040a2         call       pad_across_to                               ; pad_across_to
00000000000040a7         mov        dword [padding_not_printed], 0x0            ; padding_not_printed
00000000000040b1         jmp        loc_3ed4
00000000000040b6         align      64

                     loc_40c0:
00000000000040c0         call       print_sep_string                            ; print_sep_string, CODE XREF=read_line+395
00000000000040c5         jmp        loc_3ee1
00000000000040ca         align      16

                     loc_40d0:
00000000000040d0         mov        rdi, qword [rbx]                            ; CODE XREF=read_line+504
00000000000040d3         mov        rax, qword [rdi+8]
00000000000040d7         cmp        rax, qword [rdi+0x10]
00000000000040db         jae        loc_41bc

00000000000040e1         lea        rdx, qword [rax+1]
00000000000040e5         mov        qword [rdi+8], rdx
00000000000040e9         movzx      edi, byte [rax]

                     loc_40ec:
00000000000040ec         cmp        edi, 0xa                                    ; CODE XREF=read_line+1139
00000000000040ef         je         loc_4031

00000000000040f5         mov        rsi, qword [rbx]                            ; argument "__stream" for method j_ungetc
00000000000040f8         call       j_ungetc                                    ; ungetc
00000000000040fd         jmp        loc_4031
0000000000004102         align      8

                     loc_4108:
0000000000004108         lea        rdi, qword [rbx+0x20]                       ; CODE XREF=read_line+405
000000000000410c         call       add_line_number.isra.2                      ; add_line_number.isra.2
0000000000004111         jmp        loc_3eeb
0000000000004116         align      32

                     loc_4120:
0000000000004120         call       j___uflow                                   ; __uflow, CODE XREF=read_line+22
0000000000004125         mov        ebp, eax
0000000000004127         jmp        loc_3d77
000000000000412c         align      16

                     loc_4130:
0000000000004130         call       print_header                                ; print_header, CODE XREF=read_line+147
0000000000004135         jmp        loc_3de9
000000000000413a         align      64

                     loc_4140:
0000000000004140         mov        ecx, dword [chars_per_column]               ; chars_per_column, CODE XREF=read_line+540
0000000000004146         cmp        dword [input_position], ecx                 ; input_position
000000000000414c         jle        loc_3f72

0000000000004152         mov        dword [input_position], ebp                 ; input_position
0000000000004158         xor        eax, eax
000000000000415a         jmp        loc_3eaf
000000000000415f         align      32

                     loc_4160:
0000000000004160         mov        byte [pad_vertically], 0x1                  ; pad_vertically, CODE XREF=read_line+731
0000000000004167         call       print_header                                ; print_header
000000000000416c         jmp        loc_4041
0000000000004171         align      8

                     loc_4178:
0000000000004178         mov        dword [spaces_not_printed], 0x0             ; spaces_not_printed, CODE XREF=read_line+264
0000000000004182         jmp        loc_3e6a
0000000000004187         align      16

                     loc_4190:
0000000000004190         call       j___uflow                                   ; __uflow, CODE XREF=read_line+475
0000000000004195         jmp        loc_3f3c
000000000000419a         align      32

                     loc_41a0:
00000000000041a0         call       j___uflow                                   ; __uflow, CODE XREF=read_line+686
00000000000041a5         mov        edi, eax
00000000000041a7         jmp        loc_400f
00000000000041ac         align      16

                     loc_41b0:
00000000000041b0         call       j___uflow                                   ; __uflow, CODE XREF=read_line+612
00000000000041b5         mov        ebp, eax
00000000000041b7         jmp        loc_3fc5

                     loc_41bc:
00000000000041bc         call       j___uflow                                   ; __uflow, CODE XREF=read_line+907
00000000000041c1         mov        edi, eax
00000000000041c3         jmp        loc_40ec

                     loc_41c8:
00000000000041c8         call       j___uflow                                   ; __uflow, CODE XREF=read_line+649
00000000000041cd         mov        ebp, eax
00000000000041cf         jmp        loc_3d87
00000000000041d4         align      32                                          ; End of unwind block (FDE at 0xeebc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     open_file:
00000000000041e0         push       rbp                                         ; Begin of unwind block (FDE at 0xef34), CODE XREF=print_files+567, print_files+775
00000000000041e1         push       rbx
00000000000041e2         mov        rbp, rdi
00000000000041e5         lea        rdi, qword [aSsArgumentSToo+30]             ; 0xe549
00000000000041ec         mov        rbx, rsi
00000000000041ef         mov        ecx, 0x2
00000000000041f4         sub        rsp, 0x8
00000000000041f8         mov        rsi, rbp
00000000000041fb         rep  cmpsb byte [rsi], byte [rdi]
00000000000041fd         seta       al
0000000000004200         sbb        al, 0x0
0000000000004202         test       al, al
0000000000004204         jne        loc_4260

0000000000004206         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input"
000000000000420d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000420f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000004214         call       j_dcgettext                                 ; dcgettext
0000000000004219         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000004220         mov        qword [rbx+8], rax
0000000000004224         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin
000000000000422b         test       rdi, rdi
000000000000422e         mov        qword [rbx], rdi
0000000000004231         je         loc_427e

                     loc_4233:
0000000000004233         mov        esi, 0x2                                    ; CODE XREF=open_file+156
0000000000004238         call       fadvise                                     ; fadvise
000000000000423d         mov        dword [rbx+0x10], 0x0
0000000000004244         mov        byte [rbx+0x39], 0x0
0000000000004248         mov        ebx, 0x1
000000000000424d         add        dword [total_files], 0x1                    ; total_files
0000000000004254         add        rsp, 0x8
0000000000004258         mov        eax, ebx
000000000000425a         pop        rbx
000000000000425b         pop        rbp
000000000000425c         ret
                        ; endp
000000000000425d         align      32

                     loc_4260:
0000000000004260         lea        rsi, qword [aFirstlinenumbe+16]             ; 0xc0ad, CODE XREF=open_file+36
0000000000004267         mov        rdi, rbp
000000000000426a         mov        qword [rbx+8], rbp
000000000000426e         call       fopen_safer                                 ; fopen_safer
0000000000004273         mov        rdi, rax
0000000000004276         mov        qword [rbx], rax
0000000000004279         test       rdi, rdi
000000000000427c         jne        loc_4233

                     loc_427e:
000000000000427e         movzx      ebx, byte [ignore_failed_opens]             ; ignore_failed_opens, CODE XREF=open_file+81
0000000000004285         mov        byte [failed_opens], 0x1                    ; failed_opens
000000000000428c         test       bl, bl
000000000000428e         je         loc_42a0

0000000000004290         xor        ebx, ebx
0000000000004292         add        rsp, 0x8
0000000000004296         mov        eax, ebx
0000000000004298         pop        rbx
0000000000004299         pop        rbp
000000000000429a         ret
                        ; endp
000000000000429b         align      32

                     loc_42a0:
00000000000042a0         mov        rdx, rbp                                    ; CODE XREF=open_file+174
00000000000042a3         mov        esi, 0x3
00000000000042a8         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
00000000000042ad         mov        rbp, rax
00000000000042b0         call       j___errno_location                          ; __errno_location
00000000000042b5         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000042b7         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xd84a
00000000000042be         mov        rcx, rbp
00000000000042c1         xor        eax, eax
00000000000042c3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000042c5         call       j_error                                     ; error
00000000000042ca         add        rsp, 0x8
00000000000042ce         mov        eax, ebx
00000000000042d0         pop        rbx
00000000000042d1         pop        rbp
00000000000042d2         ret
                        ; endp
00000000000042d3         align      32                                          ; End of unwind block (FDE at 0xef34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_39: int8_t, -57
        ;    var_40: int32_t, -64


                     print_files:
00000000000042e0         push       r15                                         ; Begin of unwind block (FDE at 0xef74), CODE XREF=main+660, main+1885, main+2164
00000000000042e2         push       r14
00000000000042e4         push       r13
00000000000042e6         push       r12
00000000000042e8         mov        r12d, edi
00000000000042eb         push       rbp
00000000000042ec         push       rbx
00000000000042ed         mov        rbp, rsi
00000000000042f0         sub        rsp, 0x18
00000000000042f4         mov        edx, dword [lines_per_page]                 ; lines_per_page
00000000000042fa         lea        eax, dword [rdx-0xa]
00000000000042fd         test       eax, eax
00000000000042ff         mov        dword [lines_per_body], eax                 ; lines_per_body
0000000000004305         jle        loc_4573

000000000000430b         cmp        byte [extremities], 0x0                     ; extremities
0000000000004312         je         loc_4581

                     loc_4318:
0000000000004318         cmp        byte [double_space], 0x0                    ; double_space, CODE XREF=print_files+679
000000000000431f         je         loc_4336

0000000000004321         mov        edx, dword [lines_per_body]                 ; lines_per_body
0000000000004327         mov        eax, edx
0000000000004329         shr        eax, 0x1f
000000000000432c         add        eax, edx
000000000000432e         sar        eax, 0x1
0000000000004330         mov        dword [lines_per_body], eax                 ; lines_per_body

                     loc_4336:
0000000000004336         test       r12d, r12d                                  ; CODE XREF=print_files+63
0000000000004339         jne        loc_4557

000000000000433f         mov        ecx, dword [columns]                        ; columns
0000000000004345         mov        byte [parallel_files], 0x0                  ; parallel_files

                     loc_434c:
000000000000434c         cmp        byte [storing_columns], 0x0                 ; storing_columns, CODE XREF=print_files+654, print_files+4008
0000000000004353         je         loc_435c

0000000000004355         mov        byte [balance_columns], 0x1                 ; balance_columns

                     loc_435c:
000000000000435c         cmp        ecx, 0x1                                    ; CODE XREF=print_files+115
000000000000435f         movzx      edx, byte [join_lines]                      ; join_lines
0000000000004366         jle        loc_478a

000000000000436c         cmp        byte [use_col_separator], 0x0               ; use_col_separator
0000000000004373         jne        loc_458c

0000000000004379         test       dl, dl
000000000000437b         jne        loc_479c

0000000000004381         lea        rax, qword [aNnssssssnnn+21]                ; 0xbeca
0000000000004388         mov        qword [col_sep_string], rax                 ; col_sep_string

                     loc_438f:
000000000000438f         mov        dword [col_sep_length], 0x1                 ; col_sep_length, CODE XREF=print_files+1226
0000000000004399         mov        byte [use_col_separator], 0x1               ; use_col_separator
00000000000043a0         mov        eax, 0x1

                     loc_43a5:
00000000000043a5         mov        byte [truncate_lines], 0x1                  ; truncate_lines, CODE XREF=print_files+692, print_files+701, print_files+717, print_files+737
00000000000043ac         mov        byte [tabify_output], 0x1                   ; tabify_output

                     loc_43b3:
00000000000043b3         test       dl, dl                                      ; CODE XREF=print_files+1207
00000000000043b5         je         loc_43be

00000000000043b7         mov        byte [truncate_lines], 0x0                  ; truncate_lines

                     loc_43be:
00000000000043be         movzx      esi, byte [numbered_lines]                  ; numbered_lines, CODE XREF=print_files+213
00000000000043c5         test       sil, sil
00000000000043c8         je         loc_45d0

00000000000043ce         cmp        byte [number_separator], 0x9                ; number_separator
00000000000043d5         mov        edx, dword [start_line_num]                 ; start_line_num
00000000000043db         mov        dword [line_count], edx                     ; line_count
00000000000043e1         mov        edx, dword [chars_per_number]               ; chars_per_number
00000000000043e7         je         loc_515b

00000000000043ed         add        edx, 0x1
00000000000043f0         mov        dword [number_width], edx                   ; number_width

                     loc_43f6:
00000000000043f6         cmp        byte [parallel_files], 0x0                  ; parallel_files, CODE XREF=print_files+3736
00000000000043fd         je         loc_45d0

0000000000004403         mov        edi, dword [number_width]                   ; number_width

                     loc_4409:
0000000000004409         lea        edx, dword [rcx-1]                          ; CODE XREF=print_files+754
000000000000440c         imul       edx, eax
000000000000440f         jo         loc_528d

                     loc_4415:
0000000000004415         mov        eax, dword [chars_per_line]                 ; chars_per_line, CODE XREF=print_files+4018
000000000000441b         sub        eax, edi
000000000000441d         sub        eax, edx
000000000000441f         jo         loc_524f

0000000000004425         cdq
0000000000004426         idiv       ecx
0000000000004428         test       eax, eax
000000000000442a         mov        dword [chars_per_column], eax               ; chars_per_column
0000000000004430         jle        loc_5259

0000000000004436         test       sil, sil
0000000000004439         je         loc_446c

000000000000443b         mov        rdi, qword [number_buff]                    ; argument "__ptr" for method j_free, number_buff
0000000000004442         call       j_free                                      ; free
0000000000004447         cmp        dword [chars_per_number], 0xb               ; chars_per_number
000000000000444e         mov        edi, 0xb
0000000000004453         cmovae     edi, dword [chars_per_number]               ; chars_per_number
000000000000445a         mov        edi, edi
000000000000445c         add        rdi, 0x1                                    ; argument #1 for method xmalloc
0000000000004460         call       xmalloc                                     ; xmalloc
0000000000004465         mov        qword [number_buff], rax                    ; number_buff

                     loc_446c:
000000000000446c         mov        rdi, qword [clump_buff]                     ; argument "__ptr" for method j_free, clump_buff, CODE XREF=print_files+345
0000000000004473         call       j_free                                      ; free
0000000000004478         cmp        dword [chars_per_input_tab], 0x8            ; chars_per_input_tab
000000000000447f         mov        edi, 0x8
0000000000004484         cmovge     edi, dword [chars_per_input_tab]            ; chars_per_input_tab
000000000000448b         movsxd     rdi, edi                                    ; argument #1 for method xmalloc
000000000000448e         call       xmalloc                                     ; xmalloc
0000000000004493         mov        rdi, qword [column_vector]                  ; argument "__ptr" for method j_free, column_vector
000000000000449a         mov        qword [clump_buff], rax                     ; clump_buff
00000000000044a1         mov        dword [total_files], 0x0                    ; total_files
00000000000044ab         call       j_free                                      ; free
00000000000044b0         movsxd     rdi, dword [columns]                        ; columns
00000000000044b7         mov        edx, 0x40
00000000000044bc         xor        ecx, ecx
00000000000044be         mov        rax, rdx
00000000000044c1         mul        rdi
00000000000044c4         jo         loc_5245

                     loc_44ca:
00000000000044ca         test       rax, rax                                    ; CODE XREF=print_files+3946
00000000000044cd         js         loc_527d

00000000000044d3         test       rcx, rcx
00000000000044d6         jne        loc_527d

00000000000044dc         shl        rdi, 0x6                                    ; argument #1 for method xmalloc
00000000000044e0         call       xmalloc                                     ; xmalloc
00000000000044e5         cmp        byte [parallel_files], 0x0                  ; parallel_files
00000000000044ec         mov        rbx, rax
00000000000044ef         mov        qword [column_vector], rax                  ; column_vector
00000000000044f6         je         loc_45d7

00000000000044fc         test       r12d, r12d
00000000000044ff         je         loc_4538

0000000000004501         lea        eax, dword [r12-1]
0000000000004506         lea        r12, qword [rbp+rax*8+8]
000000000000450b         nop        dword [rax+rax]

                     loc_4510:
0000000000004510         mov        rdi, qword [rbp]                            ; argument #1 for method open_file, CODE XREF=print_files+598
0000000000004514         mov        rsi, rbx                                    ; argument #2 for method open_file
0000000000004517         call       open_file                                   ; open_file
000000000000451c         test       al, al
000000000000451e         jne        loc_452b

0000000000004520         sub        dword [columns], 0x1                        ; columns
0000000000004527         sub        rbx, 0x40

                     loc_452b:
000000000000452b         add        rbp, 0x8                                    ; CODE XREF=print_files+574
000000000000452f         add        rbx, 0x40
0000000000004533         cmp        rbp, r12
0000000000004536         jne        loc_4510

                     loc_4538:
0000000000004538         mov        r11d, dword [columns]                       ; columns, CODE XREF=print_files+543
000000000000453f         test       r11d, r11d
0000000000004542         jne        loc_4fc4

                     loc_4548:
0000000000004548         add        rsp, 0x18                                   ; CODE XREF=print_files+782, print_files+1442, print_files+2065
000000000000454c         pop        rbx
000000000000454d         pop        rbp
000000000000454e         pop        r12
0000000000004550         pop        r13
0000000000004552         pop        r14
0000000000004554         pop        r15
0000000000004556         ret
                        ; endp

                     loc_4557:
0000000000004557         cmp        byte [parallel_files], 0x0                  ; parallel_files, CODE XREF=print_files+89
000000000000455e         je         loc_5282

0000000000004564         mov        dword [columns], r12d                       ; columns
000000000000456b         mov        ecx, r12d
000000000000456e         jmp        loc_434c

                     loc_4573:
0000000000004573         mov        byte [extremities], 0x0                     ; extremities, CODE XREF=print_files+37
000000000000457a         mov        byte [keep_FF], 0x1                         ; keep_FF

                     loc_4581:
0000000000004581         mov        dword [lines_per_body], edx                 ; lines_per_body, CODE XREF=print_files+50
0000000000004587         jmp        loc_4318

                     loc_458c:
000000000000458c         test       dl, dl                                      ; CODE XREF=print_files+147
000000000000458e         mov        eax, dword [col_sep_length]                 ; col_sep_length
0000000000004594         jne        loc_43a5

000000000000459a         cmp        eax, 0x1
000000000000459d         jne        loc_43a5

00000000000045a3         mov        rsi, qword [col_sep_string]                 ; col_sep_string
00000000000045aa         cmp        byte [rsi], 0x9
00000000000045ad         jne        loc_43a5

00000000000045b3         lea        rsi, qword [aNnssssssnnn+21]                ; 0xbeca
00000000000045ba         mov        qword [col_sep_string], rsi                 ; col_sep_string
00000000000045c1         jmp        loc_43a5
00000000000045c6         align      16

                     loc_45d0:
00000000000045d0         xor        edi, edi                                    ; CODE XREF=print_files+232, print_files+285
00000000000045d2         jmp        loc_4409

                     loc_45d7:
00000000000045d7         test       r12d, r12d                                  ; CODE XREF=print_files+534
00000000000045da         jle        loc_5104

00000000000045e0         mov        rdi, qword [rbp]                            ; argument #1 for method open_file
00000000000045e4         mov        rsi, rax                                    ; argument #2 for method open_file
00000000000045e7         call       open_file                                   ; open_file
00000000000045ec         test       al, al
00000000000045ee         je         loc_4548

00000000000045f4         mov        rdi, qword [rbx]                            ; argument "__stream" for method j_fileno
00000000000045f7         call       j_fileno                                    ; fileno
00000000000045fc         mov        rdi, qword [rbp]                            ; argument #1 for method init_header
0000000000004600         mov        esi, eax                                    ; argument #2 for method init_header
0000000000004602         call       init_header                                 ; init_header
0000000000004607         mov        dword [rbx+0x2c], 0x0

                     loc_460e:
000000000000460e         mov        esi, dword [columns]                        ; columns, CODE XREF=print_files+3702
0000000000004614         mov        rdx, qword [rbx+8]
0000000000004618         lea        rax, qword [rbx+0x40]
000000000000461c         mov        rcx, qword [rbx]
000000000000461f         cmp        esi, 0x1
0000000000004622         je         loc_465a

0000000000004624         sub        esi, 0x2
0000000000004627         add        rsi, 0x2
000000000000462b         shl        rsi, 0x6
000000000000462f         add        rbx, rsi
0000000000004632         nop        word [rax+rax]

                     loc_4638:
0000000000004638         mov        qword [rax+8], rdx                          ; CODE XREF=print_files+888
000000000000463c         mov        qword [rax], rcx
000000000000463f         add        rax, 0x40
0000000000004643         mov        dword [rax-0x30], 0x0
000000000000464a         mov        byte [rax-7], 0x0
000000000000464e         mov        dword [rax-0x14], 0x0
0000000000004655         cmp        rax, rbx
0000000000004658         jne        loc_4638

                     loc_465a:
000000000000465a         cmp        byte [storing_columns], 0x0                 ; storing_columns, CODE XREF=print_files+834, print_files+3317
0000000000004661         mov        eax, dword [total_files]                    ; total_files
0000000000004667         mov        dword [files_ready_to_read], eax            ; files_ready_to_read
000000000000466d         jne        loc_4fda

                     loc_4673:
0000000000004673         mov        r13, qword [first_page_number]              ; first_page_number, CODE XREF=print_files+3615
000000000000467a         cmp        r13, 0x1
000000000000467e         ja         loc_4e7e

0000000000004684         mov        qword [page_number], 0x1                    ; page_number

                     loc_468f:
000000000000468f         movzx      ebx, byte [truncate_lines]                  ; truncate_lines, CODE XREF=print_files+3283
0000000000004696         xor        r8d, r8d
0000000000004699         mov        esi, dword [chars_per_margin]               ; chars_per_margin
000000000000469f         test       bl, bl
00000000000046a1         je         loc_46c6

00000000000046a3         mov        r8d, dword [chars_per_column]               ; chars_per_column
00000000000046aa         add        r8d, esi
00000000000046ad         cmp        byte [parallel_files], 0x0                  ; parallel_files
00000000000046b4         je         loc_46c6

00000000000046b6         cmp        byte [numbered_lines], 0x0                  ; numbered_lines
00000000000046bd         je         loc_46c6

00000000000046bf         add        r8d, dword [number_width]                   ; number_width

                     loc_46c6:
00000000000046c6         mov        eax, dword [col_sep_length]                 ; col_sep_length, CODE XREF=print_files+961, print_files+980, print_files+989
00000000000046cc         mov        r10d, dword [columns]                       ; columns
00000000000046d3         movzx      r11d, byte [storing_columns]                ; storing_columns
00000000000046db         mov        r9, qword [column_vector]                   ; column_vector
00000000000046e2         add        esi, eax
00000000000046e4         cmp        r10d, 0x1
00000000000046e8         mov        dword [rsp+0x48+var_40], eax
00000000000046ec         mov        rax, r9
00000000000046ef         mov        ecx, r11d
00000000000046f2         jle        loc_51fd

00000000000046f8         movzx      eax, byte [parallel_files]                  ; parallel_files
00000000000046ff         movzx      edi, byte [numbered_lines]                  ; numbered_lines
0000000000004706         mov        edx, 0x1
000000000000470b         mov        r15d, dword [chars_per_column]              ; chars_per_column
0000000000004712         lea        r14, qword [print_char]                     ; print_char
0000000000004719         lea        r13, qword [read_line]                      ; read_line
0000000000004720         lea        r12, qword [store_char]                     ; store_char
0000000000004727         lea        rbp, qword [print_stored]                   ; print_stored
000000000000472e         xor        eax, 0x1
0000000000004731         mov        byte [rsp+0x48+var_39], al
0000000000004735         mov        rax, r9
0000000000004738         jmp        loc_477b
000000000000473a         align      64

                     loc_4740:
0000000000004740         mov        qword [rax+0x20], r12                       ; CODE XREF=print_files+1182
0000000000004744         mov        qword [rax+0x18], rbp

                     loc_4748:
0000000000004748         xor        ecx, ecx                                    ; CODE XREF=print_files+1192
000000000000474a         test       dil, dil
000000000000474d         je         loc_4759

000000000000474f         cmp        edx, 0x1
0000000000004752         sete       cl
0000000000004755         or         cl, byte [rsp+0x48+var_39]

                     loc_4759:
0000000000004759         test       bl, bl                                      ; CODE XREF=print_files+1133
000000000000475b         mov        byte [rax+0x38], cl
000000000000475e         mov        dword [rax+0x34], esi
0000000000004761         je         loc_47b0

0000000000004763         mov        ecx, dword [rsp+0x48+var_40]
0000000000004767         add        edx, 0x1
000000000000476a         add        rax, 0x40
000000000000476e         cmp        edx, r10d
0000000000004771         lea        esi, dword [rcx+r8]
0000000000004775         lea        r8d, dword [rsi+r15]
0000000000004779         je         loc_47c1

                     loc_477b:
000000000000477b         test       r11b, r11b                                  ; CODE XREF=print_files+1112, print_files+1247
000000000000477e         jne        loc_4740

0000000000004780         mov        qword [rax+0x20], r14
0000000000004784         mov        qword [rax+0x18], r13
0000000000004788         jmp        loc_4748

                     loc_478a:
000000000000478a         mov        byte [storing_columns], 0x0                 ; storing_columns, CODE XREF=print_files+134
0000000000004791         mov        eax, dword [col_sep_length]                 ; col_sep_length
0000000000004797         jmp        loc_43b3

                     loc_479c:
000000000000479c         lea        rax, qword [aStandardInput+15]              ; 0xbee4, CODE XREF=print_files+155
00000000000047a3         mov        qword [col_sep_string], rax                 ; col_sep_string
00000000000047aa         jmp        loc_438f
00000000000047af         align      16

                     loc_47b0:
00000000000047b0         add        edx, 0x1                                    ; CODE XREF=print_files+1153
00000000000047b3         xor        r8d, r8d
00000000000047b6         xor        esi, esi
00000000000047b8         add        rax, 0x40
00000000000047bc         cmp        edx, r10d
00000000000047bf         jne        loc_477b

                     loc_47c1:
00000000000047c1         lea        eax, dword [rdx-2]                          ; CODE XREF=print_files+1177
00000000000047c4         mov        ecx, r11d
00000000000047c7         add        rax, 0x1
00000000000047cb         shl        rax, 0x6
00000000000047cf         add        rax, r9

                     loc_47d2:
00000000000047d2         test       r11b, r11b                                  ; CODE XREF=print_files+3881
00000000000047d5         je         loc_4dfa

00000000000047db         cmp        byte [balance_columns], 0x0                 ; balance_columns
00000000000047e2         je         loc_4dfa

00000000000047e8         lea        rbx, qword [store_char]                     ; store_char
00000000000047ef         mov        qword [rax+0x20], rbx
00000000000047f3         lea        rbx, qword [print_stored]                   ; print_stored
00000000000047fa         mov        qword [rax+0x18], rbx

                     loc_47fe:
00000000000047fe         test       dil, dil                                    ; CODE XREF=print_files+2864
0000000000004801         je         loc_4815

0000000000004803         movzx      edi, byte [parallel_files]                  ; parallel_files
000000000000480a         xor        edi, 0x1
000000000000480d         cmp        edx, 0x1
0000000000004810         sete       dl
0000000000004813         or         edi, edx

                     loc_4815:
0000000000004815         mov        byte [rax+0x38], dil                        ; CODE XREF=print_files+1313
0000000000004819         mov        dword [rax+0x34], esi
000000000000481c         test       cl, cl
000000000000481e         mov        eax, dword [line_count]                     ; line_count
0000000000004824         mov        rbp, r9
0000000000004827         mov        dword [line_number], eax                    ; line_number
000000000000482d         jne        loc_4b1c

                     loc_4833:
0000000000004833         test       r10d, r10d                                  ; CODE XREF=print_files+2102
0000000000004836         je         loc_487b

0000000000004838         lea        edx, dword [r10-1]
000000000000483c         mov        ecx, dword [lines_per_body]                 ; lines_per_body
0000000000004842         lea        rax, qword [r9+0x30]
0000000000004846         shl        rdx, 0x6
000000000000484a         lea        rdx, qword [r9+rdx+0x70]
000000000000484f         jmp        loc_4863
0000000000004851         align      8

                     loc_4858:
0000000000004858         mov        dword [rax], ecx                            ; CODE XREF=print_files+1418
000000000000485a         add        rax, 0x40
000000000000485e         cmp        rdx, rax
0000000000004861         je         loc_487b

                     loc_4863:
0000000000004863         mov        r8d, dword [rax-0x20]                       ; CODE XREF=print_files+1391, print_files+1433
0000000000004867         test       r8d, r8d
000000000000486a         je         loc_4858

000000000000486c         mov        dword [rax], 0x0
0000000000004872         add        rax, 0x40
0000000000004876         cmp        rdx, rax
0000000000004879         jne        loc_4863

                     loc_487b:
000000000000487b         call       cols_ready_to_print                         ; cols_ready_to_print, CODE XREF=print_files+1366, print_files+1409, print_files+2790, print_files+2837, print_files+2969
0000000000004880         test       eax, eax
0000000000004882         je         loc_4548

0000000000004888         cmp        byte [extremities], 0x0                     ; extremities
000000000000488f         je         loc_4898

0000000000004891         mov        byte [print_a_header], 0x1                  ; print_a_header

                     loc_4898:
0000000000004898         cmp        byte [double_space], 0x0                    ; double_space, CODE XREF=print_files+1455
000000000000489f         mov        byte [pad_vertically], 0x0                  ; pad_vertically
00000000000048a6         mov        r13d, dword [lines_per_body]                ; lines_per_body
00000000000048ad         je         loc_48b2

00000000000048af         add        r13d, r13d

                     loc_48b2:
00000000000048b2         xor        r12d, r12d                                  ; CODE XREF=print_files+1485
00000000000048b5         cmp        r13d, 0x0
00000000000048b9         jle        loc_51e2

00000000000048bf         nop

                     loc_48c0:
00000000000048c0         call       cols_ready_to_print                         ; cols_ready_to_print, CODE XREF=print_files+1886
00000000000048c5         test       eax, eax
00000000000048c7         je         loc_4a86

00000000000048cd         mov        edi, dword [columns]                        ; columns
00000000000048d3         mov        dword [output_position], 0x0                ; output_position
00000000000048dd         mov        dword [spaces_not_printed], 0x0             ; spaces_not_printed
00000000000048e7         mov        dword [separators_not_printed], 0x0         ; separators_not_printed
00000000000048f1         mov        byte [pad_vertically], 0x0                  ; pad_vertically
00000000000048f8         mov        byte [align_empty_cols], 0x0                ; align_empty_cols
00000000000048ff         test       edi, edi
0000000000004901         mov        byte [empty_line], 0x1                      ; empty_line
0000000000004908         mov        rbx, qword [column_vector]                  ; column_vector
000000000000490f         jle        loc_49fc

0000000000004915         mov        ebp, 0x1
000000000000491a         jmp        loc_4973
000000000000491c         align      32

                     loc_4920:
0000000000004920         cmp        byte [parallel_files], 0x0                  ; parallel_files, CODE XREF=print_files+1756, print_files+1769
0000000000004927         je         loc_4950

0000000000004929         mov        eax, dword [rbx+0x10]
000000000000492c         test       eax, eax
000000000000492e         je         loc_4950

0000000000004930         cmp        byte [empty_line], 0x0                      ; empty_line
0000000000004937         jne        loc_4c70

000000000000493d         cmp        eax, 0x3
0000000000004940         je         loc_4ca0

0000000000004946         cmp        eax, 0x2
0000000000004949         je         loc_4ce0

000000000000494f         nop

                     loc_4950:
0000000000004950         cmp        byte [use_col_separator], 0x0               ; use_col_separator, CODE XREF=print_files+1607, print_files+1614, print_files+2455, print_files+2481, print_files+2504, print_files+2567
0000000000004957         je         loc_4960

0000000000004959         add        dword [separators_not_printed], 0x1         ; separators_not_printed

                     loc_4960:
0000000000004960         add        ebp, 0x1                                    ; CODE XREF=print_files+1655
0000000000004963         add        rbx, 0x40
0000000000004967         cmp        ebp, dword [columns]                        ; columns
000000000000496d         jg         loc_4cb0

                     loc_4973:
0000000000004973         mov        esi, dword [rbx+0x30]                       ; CODE XREF=print_files+1594
0000000000004976         mov        dword [input_position], 0x0                 ; input_position
0000000000004980         test       esi, esi
0000000000004982         jle        loc_4c80

                     loc_4988:
0000000000004988         mov        eax, dword [rbx+0x34]                       ; CODE XREF=print_files+2468
000000000000498b         mov        byte [FF_only], 0x0                         ; FF_only
0000000000004992         mov        rdi, rbx
0000000000004995         mov        dword [padding_not_printed], eax            ; padding_not_printed
000000000000499b         call       qword [rbx+0x18]
000000000000499e         test       al, al
00000000000049a0         je         loc_4c60

                     loc_49a6:
00000000000049a6         mov        eax, dword [rbx+0x30]                       ; CODE XREF=print_files+2440
00000000000049a9         movzx      r9d, byte [pad_vertically]                  ; pad_vertically
00000000000049b1         sub        eax, 0x1
00000000000049b4         or         r12d, r9d
00000000000049b7         test       eax, eax
00000000000049b9         mov        dword [rbx+0x30], eax
00000000000049bc         jg         loc_4920

00000000000049c2         call       cols_ready_to_print                         ; cols_ready_to_print
00000000000049c7         test       eax, eax
00000000000049c9         jne        loc_4920

00000000000049cf         test       r9b, r9b
00000000000049d2         je         loc_4cc8

                     loc_49d8:
00000000000049d8         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_files+2519
00000000000049df         mov        rax, qword [rdi+0x28]
00000000000049e3         cmp        rax, qword [rdi+0x30]
00000000000049e7         jae        loc_4dcb

00000000000049ed         lea        rdx, qword [rax+1]
00000000000049f1         mov        qword [rdi+0x28], rdx
00000000000049f5         mov        byte [rax], 0xa

                     loc_49f8:
00000000000049f8         sub        r13d, 0x1                                   ; CODE XREF=print_files+2805

                     loc_49fc:
00000000000049fc         call       cols_ready_to_print                         ; cols_ready_to_print, CODE XREF=print_files+1583, print_files+2525
0000000000004a01         test       eax, eax
0000000000004a03         je         loc_4cc8

                     loc_4a09:
0000000000004a09         cmp        byte [double_space], 0x0                    ; double_space, CODE XREF=print_files+2543
0000000000004a10         je         loc_4a3b

0000000000004a12         test       r12b, r12b
0000000000004a15         je         loc_4a3b

0000000000004a17         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004a1e         mov        rax, qword [rdi+0x28]
0000000000004a22         cmp        rax, qword [rdi+0x30]
0000000000004a26         jae        loc_4e15

0000000000004a2c         lea        rdx, qword [rax+1]
0000000000004a30         mov        qword [rdi+0x28], rdx
0000000000004a34         mov        byte [rax], 0xa

                     loc_4a37:
0000000000004a37         sub        r13d, 0x1                                   ; CODE XREF=print_files+2879

                     loc_4a3b:
0000000000004a3b         test       r13d, r13d                                  ; CODE XREF=print_files+1840, print_files+1845
0000000000004a3e         jg         loc_48c0

                     loc_4a44:
0000000000004a44         test       r13d, r13d                                  ; CODE XREF=print_files+2549
0000000000004a47         jne        loc_4a86

0000000000004a49         mov        r10d, dword [columns]                       ; columns
0000000000004a50         mov        r9, qword [column_vector]                   ; column_vector
0000000000004a57         test       r10d, r10d
0000000000004a5a         jle        loc_4a86

                     loc_4a5c:
0000000000004a5c         lea        edx, dword [r10-1]                          ; CODE XREF=print_files+3851
0000000000004a60         lea        rax, qword [r9+0x10]
0000000000004a64         shl        rdx, 0x6
0000000000004a68         lea        rdx, qword [r9+rdx+0x50]
0000000000004a6d         nop        dword [rax]

                     loc_4a70:
0000000000004a70         mov        ecx, dword [rax]                            ; CODE XREF=print_files+1953
0000000000004a72         test       ecx, ecx
0000000000004a74         jne        loc_4a7a

0000000000004a76         mov        byte [rax+0x29], 0x1

                     loc_4a7a:
0000000000004a7a         add        rax, 0x40                                   ; CODE XREF=print_files+1940
0000000000004a7e         cmp        rdx, rax
0000000000004a81         jne        loc_4a70

0000000000004a83         xor        r13d, r13d

                     loc_4a86:
0000000000004a86         test       r12b, r12b                                  ; CODE XREF=print_files+1511, print_files+1895, print_files+1914
0000000000004a89         mov        byte [pad_vertically], r12b                 ; pad_vertically
0000000000004a90         je         loc_4a9f

0000000000004a92         cmp        byte [extremities], 0x0                     ; extremities
0000000000004a99         jne        loc_4e24

                     loc_4a9f:
0000000000004a9f         cmp        byte [keep_FF], 0x0                         ; keep_FF, CODE XREF=print_files+1968, loc_51e2, print_files+3864
0000000000004aa6         je         loc_4ad8

0000000000004aa8         cmp        byte [print_a_FF], 0x0                      ; print_a_FF
0000000000004aaf         je         loc_4ad8

0000000000004ab1         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000004ab8         mov        rax, qword [rdi+0x28]
0000000000004abc         cmp        rax, qword [rdi+0x30]
0000000000004ac0         jae        loc_520e

0000000000004ac6         lea        rdx, qword [rax+1]
0000000000004aca         mov        qword [rdi+0x28], rdx
0000000000004ace         mov        byte [rax], 0xc

                     loc_4ad1:
0000000000004ad1         mov        byte [print_a_FF], 0x0                      ; print_a_FF, CODE XREF=print_files+3896

                     loc_4ad8:
0000000000004ad8         mov        rax, qword [page_number]                    ; page_number, CODE XREF=print_files+1990, print_files+1999, print_files+2903, print_files+2927, print_files+3837, print_files+3911
0000000000004adf         add        rax, 0x1
0000000000004ae3         cmp        rax, qword [last_page_number]               ; last_page_number
0000000000004aea         mov        qword [page_number], rax                    ; page_number
0000000000004af1         ja         loc_4548

0000000000004af7         call       reset_status                                ; reset_status
0000000000004afc         movzx      ecx, byte [storing_columns]                 ; storing_columns
0000000000004b03         mov        r9, qword [column_vector]                   ; column_vector
0000000000004b0a         mov        r10d, dword [columns]                       ; columns
0000000000004b11         mov        rbp, r9
0000000000004b14         test       cl, cl
0000000000004b16         je         loc_4833

                     loc_4b1c:
0000000000004b1c         movzx      r11d, byte [balance_columns]                ; balance_columns, CODE XREF=print_files+1357
0000000000004b24         mov        esi, r10d
0000000000004b27         mov        dword [buff_current], 0x0                   ; buff_current
0000000000004b31         cmp        r11b, 0x1
0000000000004b35         sbb        esi, 0x0
0000000000004b38         test       esi, esi
0000000000004b3a         mov        dword [rsp+0x48+var_40], esi
0000000000004b3e         jle        loc_4fb8

0000000000004b44         lea        edx, dword [rsi-1]
0000000000004b47         lea        rax, qword [r9+0x2c]
0000000000004b4b         shl        rdx, 0x6
0000000000004b4f         lea        rdx, qword [r9+rdx+0x6c]
0000000000004b54         nop        dword [rax]

                     loc_4b58:
0000000000004b58         mov        dword [rax], 0x0                            ; CODE XREF=print_files+2181
0000000000004b5e         add        rax, 0x40
0000000000004b62         cmp        rdx, rax
0000000000004b65         jne        loc_4b58

0000000000004b67         mov        eax, dword [files_ready_to_read]            ; files_ready_to_read
0000000000004b6d         test       eax, eax
0000000000004b6f         je         loc_4fba

0000000000004b75         xor        r13d, r13d
0000000000004b78         mov        r14d, 0x1
0000000000004b7e         xor        r12d, r12d
0000000000004b81         xor        r15d, r15d
0000000000004b84         nop        dword [rax]

                     loc_4b88:
0000000000004b88         mov        ebx, dword [lines_per_body]                 ; lines_per_body, CODE XREF=print_files+2391
0000000000004b8e         mov        dword [rbp+0x28], r12d
0000000000004b92         test       ebx, ebx
0000000000004b94         jne        loc_4ba5

0000000000004b96         jmp        loc_4c15
0000000000004b98         align      32

                     loc_4ba0:
0000000000004ba0         sub        ebx, 0x1                                    ; CODE XREF=print_files+2264, print_files+2308
0000000000004ba3         je         loc_4c15

                     loc_4ba5:
0000000000004ba5         mov        esi, dword [files_ready_to_read]            ; files_ready_to_read, CODE XREF=print_files+2228, print_files+2355
0000000000004bab         test       esi, esi
0000000000004bad         je         loc_4d00

0000000000004bb3         mov        ecx, dword [rbp+0x10]
0000000000004bb6         test       ecx, ecx
0000000000004bb8         jne        loc_4ba0

0000000000004bba         mov        rdi, rbp                                    ; argument #1 for method read_line
0000000000004bbd         mov        dword [input_position], 0x0                 ; input_position
0000000000004bc7         call       read_line                                   ; read_line
0000000000004bcc         test       al, al
0000000000004bce         je         loc_4cf0

                     loc_4bd4:
0000000000004bd4         mov        edx, dword [rbp+0x10]                       ; CODE XREF=print_files+2584
0000000000004bd7         mov        eax, dword [buff_current]                   ; buff_current
0000000000004bdd         test       edx, edx
0000000000004bdf         je         loc_4be6

0000000000004be1         cmp        r13d, eax
0000000000004be4         je         loc_4ba0

                     loc_4be6:
0000000000004be6         mov        rcx, qword [line_vector]                    ; line_vector, CODE XREF=print_files+2303
0000000000004bed         add        dword [rbp+0x2c], 0x1
0000000000004bf1         add        r12d, 0x1
0000000000004bf5         mov        esi, dword [input_position]                 ; input_position
0000000000004bfb         sub        ebx, 0x1
0000000000004bfe         mov        dword [rcx+r15*4], r13d
0000000000004c02         mov        r13d, eax
0000000000004c05         mov        rcx, qword [end_vector]                     ; end_vector
0000000000004c0c         mov        dword [rcx+r15*4], esi
0000000000004c10         mov        r15d, r12d
0000000000004c13         jne        loc_4ba5

                     loc_4c15:
0000000000004c15         add        r14d, 0x1                                   ; CODE XREF=print_files+2230, print_files+2243
0000000000004c19         add        rbp, 0x40
0000000000004c1d         cmp        dword [rsp+0x48+var_40], r14d
0000000000004c22         lea        rcx, qword [r15*4]
0000000000004c2a         mov        eax, r13d
0000000000004c2d         jl         loc_4c3d

0000000000004c2f         mov        ebx, dword [files_ready_to_read]            ; files_ready_to_read
0000000000004c35         test       ebx, ebx
0000000000004c37         jne        loc_4b88

                     loc_4c3d:
0000000000004c3d         mov        rbp, qword [column_vector]                  ; column_vector, CODE XREF=print_files+2381
0000000000004c44         mov        r10d, dword [columns]                       ; columns
0000000000004c4b         movzx      r11d, byte [balance_columns]                ; balance_columns
0000000000004c53         mov        r9, rbp
0000000000004c56         jmp        loc_4d24
0000000000004c5b         align      32

                     loc_4c60:
0000000000004c60         mov        rdi, rbx                                    ; argument #1 for method read_rest_of_line, CODE XREF=print_files+1728
0000000000004c63         call       read_rest_of_line                           ; read_rest_of_line
0000000000004c68         jmp        loc_49a6
0000000000004c6d         align      16

                     loc_4c70:
0000000000004c70         mov        byte [align_empty_cols], 0x1                ; align_empty_cols, CODE XREF=print_files+1623, print_files+2494
0000000000004c77         jmp        loc_4950
0000000000004c7c         align      128

                     loc_4c80:
0000000000004c80         cmp        dword [rbx+0x10], 0x1                       ; CODE XREF=print_files+1698
0000000000004c84         je         loc_4988

0000000000004c8a         cmp        byte [parallel_files], 0x0                  ; parallel_files
0000000000004c91         je         loc_4950

0000000000004c97         cmp        byte [empty_line], 0x0                      ; empty_line
0000000000004c9e         jne        loc_4c70

                     loc_4ca0:
0000000000004ca0         mov        rdi, rbx                                    ; argument #1 for method align_column, CODE XREF=print_files+1632, print_files+2573
0000000000004ca3         call       align_column                                ; align_column
0000000000004ca8         jmp        loc_4950
0000000000004cad         align      16

                     loc_4cb0:
0000000000004cb0         cmp        byte [pad_vertically], 0x0                  ; pad_vertically, CODE XREF=print_files+1677
0000000000004cb7         jne        loc_49d8

0000000000004cbd         jmp        loc_49fc
0000000000004cc2         align      8

                     loc_4cc8:
0000000000004cc8         cmp        byte [extremities], 0x0                     ; extremities, CODE XREF=print_files+1778, print_files+1827
0000000000004ccf         jne        loc_4a09

0000000000004cd5         jmp        loc_4a44
0000000000004cda         align      32

                     loc_4ce0:
0000000000004ce0         cmp        byte [FF_only], 0x0                         ; FF_only, CODE XREF=print_files+1641
0000000000004ce7         je         loc_4950

0000000000004ced         jmp        loc_4ca0
0000000000004cef         align      16

                     loc_4cf0:
0000000000004cf0         mov        rdi, rbp                                    ; argument #1 for method read_rest_of_line, CODE XREF=print_files+2286
0000000000004cf3         call       read_rest_of_line                           ; read_rest_of_line
0000000000004cf8         jmp        loc_4bd4
0000000000004cfd         align      256

                     loc_4d00:
0000000000004d00         mov        r9, qword [column_vector]                   ; column_vector, CODE XREF=print_files+2253
0000000000004d07         movzx      r11d, byte [balance_columns]                ; balance_columns
0000000000004d0f         lea        rcx, qword [r15*4]
0000000000004d17         mov        r10d, dword [columns]                       ; columns
0000000000004d1e         mov        eax, r13d
0000000000004d21         mov        rbp, r9

                     loc_4d24:
0000000000004d24         mov        rdx, qword [line_vector]                    ; line_vector, CODE XREF=print_files+2422, print_files+3295
0000000000004d2b         test       r11b, r11b
0000000000004d2e         lea        r13d, dword [r10-1]
0000000000004d32         mov        dword [rdx+rcx], eax
0000000000004d35         je         loc_4dda

0000000000004d3b         test       r10d, r10d
0000000000004d3e         jle        loc_4d7e

0000000000004d40         mov        eax, r12d
0000000000004d43         lea        ebx, dword [r10+1]
0000000000004d47         xor        edi, edi
0000000000004d49         cdq
0000000000004d4a         mov        rsi, r9
0000000000004d4d         mov        ecx, 0x1
0000000000004d52         idiv       r10d
0000000000004d55         lea        r12d, dword [rax+1]
0000000000004d59         nop        dword [rax]

                     loc_4d60:
0000000000004d60         cmp        ecx, edx                                    ; CODE XREF=print_files+2716
0000000000004d62         mov        r8d, r12d
0000000000004d65         mov        dword [rsi+0x28], edi
0000000000004d68         cmovg      r8d, eax
0000000000004d6c         add        ecx, 0x1
0000000000004d6f         add        rsi, 0x40
0000000000004d73         mov        dword [rsi-0x14], r8d
0000000000004d77         add        edi, r8d
0000000000004d7a         cmp        ebx, ecx
0000000000004d7c         jne        loc_4d60

                     loc_4d7e:
0000000000004d7e         test       r13d, r13d                                  ; CODE XREF=print_files+2654
0000000000004d81         je         loc_4dc0

                     loc_4d83:
0000000000004d83         lea        edx, dword [r10-2]                          ; CODE XREF=print_files+2813
0000000000004d87         lea        rax, qword [r9+0x2c]
0000000000004d8b         mov        rcx, rdx
0000000000004d8e         shl        rdx, 0x6
0000000000004d92         lea        rsi, qword [r9+rdx+0x6c]
0000000000004d97         nop        word [rax+rax]

                     loc_4da0:
0000000000004da0         mov        edx, dword [rax]                            ; CODE XREF=print_files+2764
0000000000004da2         add        rax, 0x40
0000000000004da6         mov        dword [rax-0x3c], edx
0000000000004da9         cmp        rsi, rax
0000000000004dac         jne        loc_4da0

0000000000004dae         mov        ebp, ecx
0000000000004db0         add        rbp, 0x1
0000000000004db4         shl        rbp, 0x6
0000000000004db8         add        rbp, r9
0000000000004dbb         test       r11b, r11b
0000000000004dbe         je         loc_4ddf

                     loc_4dc0:
0000000000004dc0         mov        eax, dword [rbp+0x2c]                       ; CODE XREF=print_files+2721
0000000000004dc3         mov        dword [rbp+0x30], eax
0000000000004dc6         jmp        loc_487b

                     loc_4dcb:
0000000000004dcb         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=print_files+1799
0000000000004dd0         call       j___overflow                                ; __overflow
0000000000004dd5         jmp        loc_49f8

                     loc_4dda:
0000000000004dda         test       r13d, r13d                                  ; CODE XREF=print_files+2645
0000000000004ddd         jne        loc_4d83

                     loc_4ddf:
0000000000004ddf         mov        r11d, dword [rbp+0x10]                      ; CODE XREF=print_files+2782
0000000000004de3         test       r11d, r11d
0000000000004de6         jne        loc_4e72

0000000000004dec         mov        eax, dword [lines_per_body]                 ; lines_per_body
0000000000004df2         mov        dword [rbp+0x30], eax
0000000000004df5         jmp        loc_487b

                     loc_4dfa:
0000000000004dfa         lea        rbx, qword [print_char]                     ; print_char, CODE XREF=print_files+1269, print_files+1282
0000000000004e01         mov        qword [rax+0x20], rbx
0000000000004e05         lea        rbx, qword [read_line]                      ; read_line
0000000000004e0c         mov        qword [rax+0x18], rbx
0000000000004e10         jmp        loc_47fe

                     loc_4e15:
0000000000004e15         mov        esi, 0xa                                    ; argument #2 for method j___overflow, CODE XREF=print_files+1862
0000000000004e1a         call       j___overflow                                ; __overflow
0000000000004e1f         jmp        loc_4a37

                     loc_4e24:
0000000000004e24         cmp        byte [use_form_feed], 0x0                   ; use_form_feed, CODE XREF=print_files+1977
0000000000004e2b         jne        loc_51c1

0000000000004e31         add        r13d, 0x5
0000000000004e35         jne        loc_4e55

0000000000004e37         jmp        loc_4ad8
0000000000004e3c         align      64

                     loc_4e40:
0000000000004e40         lea        rdx, qword [rax+1]                          ; CODE XREF=print_files+2948
0000000000004e44         mov        qword [rdi+0x28], rdx
0000000000004e48         mov        byte [rax], 0xa

                     loc_4e4b:
0000000000004e4b         sub        r13d, 0x1                                   ; CODE XREF=print_files+2960
0000000000004e4f         je         loc_4ad8

                     loc_4e55:
0000000000004e55         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_files+2901
0000000000004e5c         mov        rax, qword [rdi+0x28]
0000000000004e60         cmp        rax, qword [rdi+0x30]
0000000000004e64         jb         loc_4e40

0000000000004e66         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000004e6b         call       j___overflow                                ; __overflow
0000000000004e70         jmp        loc_4e4b

                     loc_4e72:
0000000000004e72         mov        dword [rbp+0x30], 0x0                       ; CODE XREF=print_files+2822
0000000000004e79         jmp        loc_487b

                     loc_4e7e:
0000000000004e7e         mov        r12d, 0x1                                   ; CODE XREF=print_files+926
0000000000004e84         nop        dword [rax]

                     loc_4e88:
0000000000004e88         cmp        dword [lines_per_body], 0x1                 ; lines_per_body, CODE XREF=print_files+3263
0000000000004e8f         mov        rbx, qword [column_vector]                  ; column_vector
0000000000004e96         mov        r14d, 0x1
0000000000004e9c         mov        eax, dword [columns]                        ; columns
0000000000004ea2         jle        loc_4efb

0000000000004ea4         nop        dword [rax]

                     loc_4ea8:
0000000000004ea8         test       eax, eax                                    ; CODE XREF=print_files+3097
0000000000004eaa         jle        loc_4eee

0000000000004eac         mov        ebp, 0x1
0000000000004eb1         jmp        loc_4ec3
0000000000004eb3         align      8

                     loc_4eb8:
0000000000004eb8         add        ebp, 0x1                                    ; CODE XREF=print_files+3050
0000000000004ebb         add        rbx, 0x40
0000000000004ebf         cmp        ebp, eax
0000000000004ec1         jg         loc_4ee7

                     loc_4ec3:
0000000000004ec3         mov        r10d, dword [rbx+0x10]                      ; CODE XREF=print_files+3025, print_files+3077
0000000000004ec7         test       r10d, r10d
0000000000004eca         jne        loc_4eb8

0000000000004ecc         mov        esi, ebp
0000000000004ece         mov        rdi, rbx                                    ; argument #1 for method skip_read
0000000000004ed1         add        ebp, 0x1
0000000000004ed4         call       skip_read                                   ; skip_read
0000000000004ed9         mov        eax, dword [columns]                        ; columns
0000000000004edf         add        rbx, 0x40
0000000000004ee3         cmp        ebp, eax
0000000000004ee5         jle        loc_4ec3

                     loc_4ee7:
0000000000004ee7         mov        rbx, qword [column_vector]                  ; column_vector, CODE XREF=print_files+3041

                     loc_4eee:
0000000000004eee         add        r14d, 0x1                                   ; CODE XREF=print_files+3018
0000000000004ef2         cmp        r14d, dword [lines_per_body]                ; lines_per_body
0000000000004ef9         jl         loc_4ea8

                     loc_4efb:
0000000000004efb         test       eax, eax                                    ; CODE XREF=print_files+3010
0000000000004efd         mov        byte [last_line], 0x1                       ; last_line
0000000000004f04         jle        loc_4f7c

0000000000004f06         mov        ebp, 0x1
0000000000004f0b         jmp        loc_4f1b
0000000000004f0d         align      16

                     loc_4f10:
0000000000004f10         add        ebp, 0x1                                    ; CODE XREF=print_files+3138
0000000000004f13         add        rbx, 0x40
0000000000004f17         cmp        ebp, eax
0000000000004f19         jg         loc_4f3f

                     loc_4f1b:
0000000000004f1b         mov        r9d, dword [rbx+0x10]                       ; CODE XREF=print_files+3115, print_files+3165
0000000000004f1f         test       r9d, r9d
0000000000004f22         jne        loc_4f10

0000000000004f24         mov        esi, ebp
0000000000004f26         mov        rdi, rbx                                    ; argument #1 for method skip_read
0000000000004f29         add        ebp, 0x1
0000000000004f2c         call       skip_read                                   ; skip_read
0000000000004f31         mov        eax, dword [columns]                        ; columns
0000000000004f37         add        rbx, 0x40
0000000000004f3b         cmp        ebp, eax
0000000000004f3d         jle        loc_4f1b

                     loc_4f3f:
0000000000004f3f         cmp        byte [storing_columns], 0x0                 ; storing_columns, CODE XREF=print_files+3129
0000000000004f46         je         loc_4f7c

0000000000004f48         test       eax, eax
0000000000004f4a         mov        rcx, qword [column_vector]                  ; column_vector
0000000000004f51         jle        loc_4f7c

0000000000004f53         sub        eax, 0x1
0000000000004f56         lea        rdx, qword [rcx+0x10]
0000000000004f5a         shl        rax, 0x6
0000000000004f5e         lea        rax, qword [rcx+rax+0x50]
0000000000004f63         nop        dword [rax+rax]

                     loc_4f68:
0000000000004f68         cmp        dword [rdx], 0x3                            ; CODE XREF=print_files+3226
0000000000004f6b         je         loc_4f73

0000000000004f6d         mov        dword [rdx], 0x2

                     loc_4f73:
0000000000004f73         add        rdx, 0x40                                   ; CODE XREF=print_files+3211
0000000000004f77         cmp        rdx, rax
0000000000004f7a         jne        loc_4f68

                     loc_4f7c:
0000000000004f7c         call       reset_status                                ; reset_status, CODE XREF=print_files+3108, print_files+3174, print_files+3185
0000000000004f81         mov        r8d, dword [files_ready_to_read]            ; files_ready_to_read
0000000000004f88         mov        byte [last_line], 0x0                       ; last_line
0000000000004f8f         test       r8d, r8d
0000000000004f92         jle        loc_517d

0000000000004f98         add        r12, 0x1
0000000000004f9c         cmp        r13, r12
0000000000004f9f         jne        loc_4e88

                     loc_4fa5:
0000000000004fa5         mov        rax, qword [first_page_number]              ; first_page_number, CODE XREF=print_files+3788
0000000000004fac         mov        qword [page_number], rax                    ; page_number
0000000000004fb3         jmp        loc_468f

                     loc_4fb8:
0000000000004fb8         xor        eax, eax                                    ; CODE XREF=print_files+2142

                     loc_4fba:
0000000000004fba         xor        ecx, ecx                                    ; CODE XREF=print_files+2191
0000000000004fbc         xor        r12d, r12d
0000000000004fbf         jmp        loc_4d24

                     loc_4fc4:
0000000000004fc4         lea        rdi, qword [aStandardInput+16]              ; argument #1 for method init_header, 0xbee5, CODE XREF=print_files+610
0000000000004fcb         mov        esi, 0xffffffff                             ; argument #2 for method init_header
0000000000004fd0         call       init_header                                 ; init_header
0000000000004fd5         jmp        loc_465a

                     loc_4fda:
0000000000004fda         mov        ebx, dword [lines_per_body]                 ; lines_per_body, CODE XREF=print_files+909
0000000000004fe0         imul       ebx, dword [columns]                        ; columns
0000000000004fe7         jo         loc_5236

0000000000004fed         mov        r12d, ebx
0000000000004ff0         add        r12d, 0x1
0000000000004ff4         jo         loc_5236

0000000000004ffa         mov        ebp, dword [chars_per_column]               ; chars_per_column
0000000000005000         add        ebp, 0x1
0000000000005003         jo         loc_5236

0000000000005009         imul       ebp, ebx
000000000000500c         jo         loc_5236

0000000000005012         mov        rdi, qword [line_vector]                    ; argument "__ptr" for method j_free, line_vector
0000000000005019         call       j_free                                      ; free
000000000000501e         mov        edx, 0x4
0000000000005023         movsxd     rcx, r12d
0000000000005026         xor        esi, esi
0000000000005028         mov        rax, rdx
000000000000502b         mul        rcx
000000000000502e         jo         loc_522c

                     loc_5034:
0000000000005034         test       rax, rax                                    ; CODE XREF=print_files+3921
0000000000005037         js         loc_527d

000000000000503d         test       rsi, rsi
0000000000005040         jne        loc_527d

0000000000005046         lea        rdi, qword [rcx*4]                          ; argument #1 for method xmalloc
000000000000504e         movsxd     rbx, ebx
0000000000005051         call       xmalloc                                     ; xmalloc
0000000000005056         mov        rdi, qword [end_vector]                     ; argument "__ptr" for method j_free, end_vector
000000000000505d         mov        qword [line_vector], rax                    ; line_vector
0000000000005064         call       j_free                                      ; free
0000000000005069         mov        edx, 0x4
000000000000506e         xor        ecx, ecx
0000000000005070         mov        rax, rdx
0000000000005073         mul        rbx
0000000000005076         jo         loc_523b

                     loc_507c:
000000000000507c         test       rax, rax                                    ; CODE XREF=print_files+3936
000000000000507f         js         loc_527d

0000000000005085         test       rcx, rcx
0000000000005088         jne        loc_527d

000000000000508e         lea        rdi, qword [rbx*4]                          ; argument #1 for method xmalloc
0000000000005096         movsxd     rbp, ebp
0000000000005099         call       xmalloc                                     ; xmalloc
000000000000509e         mov        rdi, qword [buff]                           ; argument "__ptr" for method j_free, buff
00000000000050a5         mov        qword [end_vector], rax                     ; end_vector
00000000000050ac         call       j_free                                      ; free
00000000000050b1         movzx      eax, byte [use_col_separator]               ; use_col_separator
00000000000050b8         lea        rdi, qword [rax+1]
00000000000050bc         mov        rax, rdi
00000000000050bf         mul        rbp
00000000000050c2         mov        rdi, rax
00000000000050c5         seto       al
00000000000050c8         test       rdi, rdi
00000000000050cb         movzx      eax, al
00000000000050ce         js         loc_527d

00000000000050d4         test       rax, rax
00000000000050d7         jne        loc_527d

00000000000050dd         call       xmalloc                                     ; xmalloc
00000000000050e2         mov        qword [buff], rax                           ; buff
00000000000050e9         movzx      eax, byte [use_col_separator]               ; use_col_separator
00000000000050f0         add        rax, 0x1
00000000000050f4         imul       rbp, rax
00000000000050f8         mov        qword [buff_allocated], rbp                 ; buff_allocated
00000000000050ff         jmp        loc_4673

                     loc_5104:
0000000000005104         lea        rsi, qword [aStandardInput]                 ; argument "msgid" for method j_dcgettext, "standard input", CODE XREF=print_files+762
000000000000510b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005110         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005112         call       j_dcgettext                                 ; dcgettext
0000000000005117         mov        qword [rbx+8], rax
000000000000511b         mov        rax, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000005122         lea        rdi, qword [aStandardInput+16]              ; argument #1 for method init_header, 0xbee5
0000000000005129         mov        dword [rbx+0x10], 0x0
0000000000005130         mov        byte [rbx+0x39], 0x0
0000000000005134         mov        esi, 0xffffffff                             ; argument #2 for method init_header
0000000000005139         mov        byte [have_read_stdin], 0x1                 ; have_read_stdin
0000000000005140         add        dword [total_files], 0x1                    ; total_files
0000000000005147         mov        qword [rbx], rax
000000000000514a         call       init_header                                 ; init_header
000000000000514f         mov        dword [rbx+0x2c], 0x0
0000000000005156         jmp        loc_460e

                     loc_515b:
000000000000515b         mov        edi, edx                                    ; CODE XREF=print_files+263
000000000000515d         sar        edi, 0x1f
0000000000005160         shr        edi, 0x1d
0000000000005163         lea        r8d, dword [rdx+rdi]
0000000000005167         and        r8d, 0x7
000000000000516b         sub        edi, r8d
000000000000516e         lea        edx, dword [rdx+rdi+8]
0000000000005172         mov        dword [number_width], edx                   ; number_width
0000000000005178         jmp        loc_43f6

                     loc_517d:
000000000000517d         lea        rsi, qword [aStartingPageNu]                ; argument "msgid" for method j_dcgettext, "starting page number %lu exceeds page count %lu", CODE XREF=print_files+3250
0000000000005184         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005186         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000518b         call       j_dcgettext                                 ; dcgettext
0000000000005190         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000005192         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005195         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000005197         xor        eax, eax
0000000000005199         mov        r8, r12
000000000000519c         mov        rcx, r13
000000000000519f         call       j_error                                     ; error
00000000000051a4         mov        edi, dword [files_ready_to_read]            ; files_ready_to_read
00000000000051aa         test       edi, edi
00000000000051ac         jg         loc_4fa5

00000000000051b2         add        rsp, 0x18
00000000000051b6         pop        rbx
00000000000051b7         pop        rbp
00000000000051b8         pop        r12
00000000000051ba         pop        r13
00000000000051bc         pop        r14
00000000000051be         pop        r15
00000000000051c0         ret
                        ; endp

                     loc_51c1:
00000000000051c1         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=print_files+2891
00000000000051c8         mov        rax, qword [rdi+0x28]
00000000000051cc         cmp        rax, qword [rdi+0x30]
00000000000051d0         jae        loc_521d

00000000000051d2         lea        rdx, qword [rax+1]
00000000000051d6         mov        qword [rdi+0x28], rdx
00000000000051da         mov        byte [rax], 0xc
00000000000051dd         jmp        loc_4ad8

                     loc_51e2:
00000000000051e2         jne        loc_4a9f                                    ; CODE XREF=print_files+1497

00000000000051e8         test       r10d, r10d
00000000000051eb         jg         loc_4a5c

00000000000051f1         mov        byte [pad_vertically], 0x0                  ; pad_vertically
00000000000051f8         jmp        loc_4a9f

                     loc_51fd:
00000000000051fd         mov        edx, 0x1                                    ; CODE XREF=print_files+1042
0000000000005202         movzx      edi, byte [numbered_lines]                  ; numbered_lines
0000000000005209         jmp        loc_47d2

                     loc_520e:
000000000000520e         mov        esi, 0xc                                    ; argument #2 for method j___overflow, CODE XREF=print_files+2016
0000000000005213         call       j___overflow                                ; __overflow
0000000000005218         jmp        loc_4ad1

                     loc_521d:
000000000000521d         mov        esi, 0xc                                    ; argument #2 for method j___overflow, CODE XREF=print_files+3824
0000000000005222         call       j___overflow                                ; __overflow
0000000000005227         jmp        loc_4ad8

                     loc_522c:
000000000000522c         mov        esi, 0x1                                    ; CODE XREF=print_files+3406
0000000000005231         jmp        loc_5034

                     loc_5236:
0000000000005236         call       integer_overflow                            ; integer_overflow, CODE XREF=print_files+3335, print_files+3348, print_files+3363, print_files+3372

                     loc_523b:
000000000000523b         mov        ecx, 0x1                                    ; CODE XREF=print_files+3478
0000000000005240         jmp        loc_507c

                     loc_5245:
0000000000005245         mov        ecx, 0x1                                    ; CODE XREF=print_files+484
000000000000524a         jmp        loc_44ca

                     loc_524f:
000000000000524f         mov        dword [chars_per_column], 0x0               ; chars_per_column, CODE XREF=print_files+319

                     loc_5259:
0000000000005259         lea        rsi, qword [aPageWidthTooNa]                ; argument "msgid" for method j_dcgettext, "page width too narrow", CODE XREF=print_files+336
0000000000005260         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005265         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005267         call       j_dcgettext                                 ; dcgettext
000000000000526c         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000526e         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000005271         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000005276         xor        eax, eax
0000000000005278         call       j_error                                     ; error

                     loc_527d:
000000000000527d         call       xalloc_die                                  ; xalloc_die, CODE XREF=print_files+493, print_files+502, print_files+3415, print_files+3424, print_files+3487, print_files+3496, print_files+3566, print_files+3575
                        ; endp

                     loc_5282:
0000000000005282         mov        ecx, dword [columns]                        ; columns, CODE XREF=print_files+638
0000000000005288         jmp        loc_434c

                     loc_528d:
000000000000528d         mov        edx, 0x7fffffff                             ; CODE XREF=print_files+303
0000000000005292         jmp        loc_4415
0000000000005297         align      32                                          ; End of unwind block (FDE at 0xef74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
00000000000052a0         push       r13                                         ; Begin of unwind block (FDE at 0xefdc), CODE XREF=main+2188, main+2198, getoptarg+229
00000000000052a2         push       r12
00000000000052a4         mov        edx, 0x5
00000000000052a9         push       rbp
00000000000052aa         push       rbx
00000000000052ab         mov        ebp, edi
00000000000052ad         sub        rsp, 0x88
00000000000052b4         mov        rbx, qword [program_name]                   ; program_name
00000000000052bb         mov        rax, qword [fs:0x28]
00000000000052c4         mov        qword [rsp+0xa8+var_30], rax
00000000000052c9         xor        eax, eax
00000000000052cb         test       edi, edi
00000000000052cd         je         loc_52fd

00000000000052cf         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
00000000000052d6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000052d8         call       j_dcgettext                                 ; dcgettext
00000000000052dd         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000052e4         mov        rdx, rax
00000000000052e7         mov        rcx, rbx
00000000000052ea         mov        esi, 0x1
00000000000052ef         xor        eax, eax
00000000000052f1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_52f6:
00000000000052f6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+1190
00000000000052f8         call       j_exit                                      ; exit
                        ; endp

                     loc_52fd:
00000000000052fd         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n", CODE XREF=usage+45
0000000000005304         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005306         call       j_dcgettext                                 ; dcgettext
000000000000530b         mov        rdx, rbx
000000000000530e         mov        rsi, rax
0000000000005311         mov        edi, 0x1
0000000000005316         xor        eax, eax
0000000000005318         call       j___printf_chk                              ; __printf_chk
000000000000531d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005324         lea        rsi, qword [aPaginateOrColu]                ; argument "msgid" for method j_dcgettext, "Paginate or columnate FILE(s) for printing.\\n"
000000000000532b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005330         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005332         call       j_dcgettext                                 ; dcgettext
0000000000005337         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000533a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000533d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005342         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005349         lea        rsi, qword [aNwithNoFileOrW]                ; argument "msgid" for method j_dcgettext, "\\nWith no FILE, or when FILE is -, read standard input.\\n"
0000000000005350         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005355         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005357         call       j_dcgettext                                 ; dcgettext
000000000000535c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000535f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005362         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005367         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000536e         lea        rsi, qword [aNmandatoryArgu]                ; argument "msgid" for method j_dcgettext, "\\nMandatory arguments to long options are mandatory for short options too.\\n"
0000000000005375         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000537a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000537c         call       j_dcgettext                                 ; dcgettext
0000000000005381         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005384         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005387         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000538c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005393         lea        rsi, qword [aFirstpagelastp]                ; argument "msgid" for method j_dcgettext, "  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]\\n                    begin [stop] printing with page FIRST_[LAST_]PAGE\\n  -COLUMN, --columns=COLUMN\\n                    output COLUMN columns and print columns down,\\n                    unless -a is u…"
000000000000539a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000539f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053a1         call       j_dcgettext                                 ; dcgettext
00000000000053a6         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000053a9         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000053ac         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000053b1         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000053b8         lea        rsi, qword [aAAcrossPrintCo]                ; argument "msgid" for method j_dcgettext, "  -a, --across      print columns across rather than down, used together\\n                    with -COLUMN\\n  -c, --show-control-chars\\n                    use hat notation (^G) and octal backslash notation\\n  -d, --double-space\\n                    double spac…"
00000000000053bf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000053c4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053c6         call       j_dcgettext                                 ; dcgettext
00000000000053cb         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000053ce         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000053d1         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000053d6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000053dd         lea        rsi, qword [aDDateformatfor]                ; argument "msgid" for method j_dcgettext, "  -D, --date-format=FORMAT\\n                    use FORMAT for the header date\\n  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]\\n                    expand input CHARs (TABs) to tab WIDTH (8)\\n  -F, -f, --form-feed\\n                    use form feeds instead of …"
00000000000053e4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000053e9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000053eb         call       j_dcgettext                                 ; dcgettext
00000000000053f0         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000053f3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000053f6         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000053fb         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005402         lea        rsi, qword [aHHeaderheadern]                ; argument "msgid" for method j_dcgettext, "  -h, --header=HEADER\\n                    use a centered HEADER instead of filename in page header,\\n                    -h \\\"\\\" prints a blank line, don't use -h\\\"\\\"\\n  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]\\n                    replace spaces with CHARs (…"
0000000000005409         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000540e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005410         call       j_dcgettext                                 ; dcgettext
0000000000005415         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005418         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000541b         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005420         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005427         lea        rsi, qword [aLLengthpagelen]                ; argument "msgid" for method j_dcgettext, "  -l, --length=PAGE_LENGTH\\n                    set the page length to PAGE_LENGTH (66) lines\\n                    (default number of lines of text 56, and with -F 63).\\n                    implies -t if PAGE_LENGTH <= 10\\n"
000000000000542e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005433         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005435         call       j_dcgettext                                 ; dcgettext
000000000000543a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000543d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005440         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005445         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000544c         lea        rsi, qword [aMMergePrintAll]                ; argument "msgid" for method j_dcgettext, "  -m, --merge       print all files in parallel, one in each column,\\n                    truncate lines, but join lines of full length with -J\\n"
0000000000005453         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005458         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000545a         call       j_dcgettext                                 ; dcgettext
000000000000545f         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005462         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005465         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000546a         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005471         lea        rsi, qword [aNsepdigitsNumb]                ; argument "msgid" for method j_dcgettext, "  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]\\n                    number lines, use DIGITS (5) digits, then SEP (TAB),\\n                    default counting starts with 1st line of input file\\n  -N, --first-line-number=NUMBER\\n                    start coun…"
0000000000005478         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000547d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000547f         call       j_dcgettext                                 ; dcgettext
0000000000005484         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005487         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000548a         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000548f         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005496         lea        rsi, qword [aOIndentmarginn]                ; argument "msgid" for method j_dcgettext, "  -o, --indent=MARGIN\\n                    offset each line with MARGIN (zero) spaces, do not\\n                    affect -w or -W, MARGIN will be added to PAGE_WIDTH\\n  -r, --no-file-warnings\\n                    omit warning when a file cannot be opened\\n"
000000000000549d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000054a2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000054a4         call       j_dcgettext                                 ; dcgettext
00000000000054a9         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000054ac         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000054af         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000054b4         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000054bb         lea        rsi, qword [aScharSeparator]                ; argument "msgid" for method j_dcgettext, "  -s[CHAR], --separator[=CHAR]\\n                    separate columns by a single character, default for CHAR\\n                    is the <TAB> character without -w and 'no char' with -w.\\n                    -s[CHAR] turns off line truncation of all 3 column\\n…"
00000000000054c2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000054c7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000054c9         call       j_dcgettext                                 ; dcgettext
00000000000054ce         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000054d1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000054d4         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000054d9         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000054e0         lea        rsi, qword [aSstringSepstri]                ; argument "msgid" for method j_dcgettext, "  -S[STRING], --sep-string[=STRING]\\n                    separate columns by STRING,\\n                    without -S: Default separator <TAB> with -J and <space>\\n                    otherwise (same as -S\\\" \\\"), no effect on column options\\n"
00000000000054e7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000054ec         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000054ee         call       j_dcgettext                                 ; dcgettext
00000000000054f3         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000054f6         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000054f9         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000054fe         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005505         lea        rsi, qword [aTOmitheaderOmi]                ; argument "msgid" for method j_dcgettext, "  -t, --omit-header  omit page headers and trailers;\\n                     implied if PAGE_LENGTH <= 10\\n"
000000000000550c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005511         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005513         call       j_dcgettext                                 ; dcgettext
0000000000005518         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000551b         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000551e         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005523         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000552a         lea        rsi, qword [aTOmitpaginatio]                ; argument "msgid" for method j_dcgettext, "  -T, --omit-pagination\\n                    omit page headers and trailers, eliminate any pagination\\n                    by form feeds set in input files\\n  -v, --show-nonprinting\\n                    use octal backslash notation\\n  -w, --width=PAGE_WIDTH\\n   …"
0000000000005531         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005536         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005538         call       j_dcgettext                                 ; dcgettext
000000000000553d         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005540         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005543         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005548         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000554f         lea        rsi, qword [aWPagewidthpage]                ; argument "msgid" for method j_dcgettext, "  -W, --page-width=PAGE_WIDTH\\n                    set page width to PAGE_WIDTH (72) characters always,\\n                    truncate lines, except -J option is set, no interference\\n                    with -S or -s\\n"
0000000000005556         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000555b         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000555d         call       j_dcgettext                                 ; dcgettext
0000000000005562         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005565         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005568         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000556d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005574         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
000000000000557b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005580         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005582         call       j_dcgettext                                 ; dcgettext
0000000000005587         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000558a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000558d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005592         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000005599         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
00000000000055a0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000055a5         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000055a7         call       j_dcgettext                                 ; dcgettext
00000000000055ac         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000055af         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000055b2         lea        rbx, qword [aPageWidthTooNa+22]             ; 0xbefc
00000000000055b9         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000055be         lea        rax, qword [aPageWidthTooNa+25]             ; 0xbeff
00000000000055c5         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
00000000000055cc         mov        qword [rsp+0xa8+var_48], 0x0
00000000000055d5         mov        qword [rsp+0xa8+var_40], 0x0
00000000000055de         mov        rdx, rsp
00000000000055e1         mov        qword [rsp+0xa8+var_A8], rax
00000000000055e5         lea        rax, qword [aTestInvocation]                ; "test invocation"
00000000000055ec         mov        qword [rsp+0xa8+var_78], rcx
00000000000055f1         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
00000000000055f8         mov        qword [rsp+0xa8+var_A0], rax
00000000000055fd         lea        rax, qword [aCoreutils]                     ; "coreutils"
0000000000005604         mov        qword [rsp+0xa8+var_68], rcx
0000000000005609         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
0000000000005610         mov        qword [rsp+0xa8+var_98], rax
0000000000005615         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
000000000000561c         mov        qword [rsp+0xa8+var_58], rcx
0000000000005621         mov        qword [rsp+0xa8+var_90], rax
0000000000005626         lea        rax, qword [aSha224sum]                     ; "sha224sum"
000000000000562d         mov        qword [rsp+0xa8+var_88], rax
0000000000005632         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
0000000000005639         mov        qword [rsp+0xa8+var_80], rax
000000000000563e         mov        qword [rsp+0xa8+var_70], rax
0000000000005643         mov        qword [rsp+0xa8+var_60], rax
0000000000005648         mov        qword [rsp+0xa8+var_50], rax
000000000000564d         nop        dword [rax]

                     loc_5650:
0000000000005650         add        rdx, 0x10                                   ; CODE XREF=usage+973
0000000000005654         mov        rdi, qword [rdx]
0000000000005657         test       rdi, rdi
000000000000565a         je         loc_566f

000000000000565c         mov        ecx, 0x3
0000000000005661         mov        rsi, rbx
0000000000005664         rep  cmpsb byte [rsi], byte [rdi]
0000000000005666         seta       al
0000000000005669         sbb        al, 0x0
000000000000566b         test       al, al
000000000000566d         jne        loc_5650

                     loc_566f:
000000000000566f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+954
0000000000005673         xor        edi, edi
0000000000005675         mov        edx, 0x5
000000000000567a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000005681         test       r12, r12
0000000000005684         je         loc_574b

000000000000568a         call       j_dcgettext                                 ; dcgettext
000000000000568f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005696         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xbf75
000000000000569d         mov        rsi, rax
00000000000056a0         mov        edi, 0x1
00000000000056a5         xor        eax, eax
00000000000056a7         call       j___printf_chk                              ; __printf_chk
00000000000056ac         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
00000000000056ae         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
00000000000056b3         call       j_setlocale                                 ; setlocale
00000000000056b8         test       rax, rax
00000000000056bb         je         loc_56d9

00000000000056bd         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xbf83
00000000000056c4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000056c9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000056cc         call       j_strncmp                                   ; strncmp
00000000000056d1         test       eax, eax
00000000000056d3         jne        loc_57e0

                     loc_56d9:
00000000000056d9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1051, usage+1381
00000000000056e0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000056e2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000056e7         call       j_dcgettext                                 ; dcgettext
00000000000056ec         lea        rcx, qword [aPageWidthTooNa+22]             ; 0xbefc
00000000000056f3         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000056fa         mov        rsi, rax
00000000000056fd         mov        edi, 0x1
0000000000005702         xor        eax, eax
0000000000005704         call       j___printf_chk                              ; __printf_chk
0000000000005709         cmp        r12, rbx
000000000000570c         lea        rcx, qword [aMulticallInvoc+10]             ; 0xbf1b
0000000000005713         lea        rbx, qword [aStandardInput+16]              ; 0xbee5
000000000000571a         cmove      rbx, rcx

                     loc_571e:
000000000000571e         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1332
0000000000005725         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005727         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000572c         call       j_dcgettext                                 ; dcgettext
0000000000005731         mov        rcx, rbx
0000000000005734         mov        rsi, rax
0000000000005737         mov        rdx, r12
000000000000573a         mov        edi, 0x1
000000000000573f         xor        eax, eax
0000000000005741         call       j___printf_chk                              ; __printf_chk
0000000000005746         jmp        loc_52f6

                     loc_574b:
000000000000574b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+996
0000000000005750         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000005757         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xbf75
000000000000575e         mov        rsi, rax
0000000000005761         mov        edi, 0x1
0000000000005766         xor        eax, eax
0000000000005768         call       j___printf_chk                              ; __printf_chk
000000000000576d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000576f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000005774         call       j_setlocale                                 ; setlocale
0000000000005779         test       rax, rax
000000000000577c         je         loc_5796

000000000000577e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xbf83
0000000000005785         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
000000000000578a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000578d         call       j_strncmp                                   ; strncmp
0000000000005792         test       eax, eax
0000000000005794         jne        loc_57d9

                     loc_5796:
0000000000005796         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+1244
000000000000579d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000057a2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000057a4         lea        r12, qword [aPageWidthTooNa+22]             ; 0xbefc
00000000000057ab         lea        rbx, qword [aMulticallInvoc+10]             ; 0xbf1b
00000000000057b2         call       j_dcgettext                                 ; dcgettext
00000000000057b7         lea        rcx, qword [aPageWidthTooNa+22]             ; 0xbefc
00000000000057be         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000057c5         mov        rsi, rax
00000000000057c8         mov        edi, 0x1
00000000000057cd         xor        eax, eax
00000000000057cf         call       j___printf_chk                              ; __printf_chk
00000000000057d4         jmp        loc_571e

                     loc_57d9:
00000000000057d9         lea        r12, qword [aPageWidthTooNa+22]             ; 0xbefc, CODE XREF=usage+1268

                     loc_57e0:
00000000000057e0         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+1075
00000000000057e7         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000057ee         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000057f0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000057f5         call       j_dcgettext                                 ; dcgettext
00000000000057fa         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000057fd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005800         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005805         jmp        loc_56d9
000000000000580a         align      16                                          ; End of unwind block (FDE at 0xefdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     getoptarg:
0000000000005810         push       r12                                         ; Begin of unwind block (FDE at 0xf008), CODE XREF=main+1195, main+1324, main+1395
0000000000005812         push       rbp
0000000000005813         mov        r12d, esi
0000000000005816         push       rbx
0000000000005817         mov        rbp, rcx
000000000000581a         mov        rbx, rdi
000000000000581d         sub        rsp, 0x10
0000000000005821         movsx      esi, byte [rdi]
0000000000005824         mov        rax, qword [fs:0x28]
000000000000582d         mov        qword [rsp+0x28+var_20], rax
0000000000005832         xor        eax, eax
0000000000005834         mov        eax, esi
0000000000005836         sub        esi, 0x30
0000000000005839         cmp        esi, 0x9
000000000000583c         jbe        loc_5848

000000000000583e         mov        byte [rdx], al
0000000000005840         movzx      eax, byte [rdi+1]
0000000000005844         add        rbx, 0x1

                     loc_5848:
0000000000005848         test       al, al                                      ; CODE XREF=getoptarg+44
000000000000584a         jne        loc_5870

                     loc_584c:
000000000000584c         mov        rax, qword [rsp+0x28+var_20]                ; CODE XREF=getoptarg+145
0000000000005851         xor        rax, qword [fs:0x28]
000000000000585a         jne        loc_58fa

0000000000005860         add        rsp, 0x10
0000000000005864         pop        rbx
0000000000005865         pop        rbp
0000000000005866         pop        r12
0000000000005868         ret
                        ; endp
0000000000005869         align      16

                     loc_5870:
0000000000005870         lea        r8, qword [aStandardInput+16]               ; 0xbee5, CODE XREF=getoptarg+58
0000000000005877         xor        esi, esi
0000000000005879         mov        rcx, rsp
000000000000587c         mov        edx, 0xa
0000000000005881         mov        rdi, rbx
0000000000005884         call       xstrtol                                     ; xstrtol
0000000000005889         test       eax, eax
000000000000588b         jne        loc_58a3

000000000000588d         mov        rax, qword [rsp+0x28+var_28]
0000000000005891         lea        rdx, qword [rax-1]
0000000000005895         cmp        rdx, 0x7ffffffe
000000000000589c         ja         loc_58a3

000000000000589e         mov        dword [rbp], eax
00000000000058a1         jmp        loc_584c

                     loc_58a3:
00000000000058a3         mov        rdi, rbx                                    ; CODE XREF=getoptarg+123, getoptarg+140
00000000000058a6         movsx      r12d, r12b
00000000000058aa         call       quote                                       ; quote
00000000000058af         lea        rsi, qword [aCExtraCharacte]                ; argument "msgid" for method j_dcgettext, "'-%c' extra characters or invalid number in the argument: %s"
00000000000058b6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000058b8         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000058bd         mov        rbp, rax
00000000000058c0         call       j_dcgettext                                 ; dcgettext
00000000000058c5         cmp        qword [rsp+0x28+var_28], 0x7fffffff
00000000000058cd         mov        rbx, rax
00000000000058d0         mov        esi, 0x4b
00000000000058d5         jg         loc_58de

00000000000058d7         call       j___errno_location                          ; __errno_location
00000000000058dc         mov        esi, dword [rax]

                     loc_58de:
00000000000058de         xor        edi, edi                                    ; argument "__status" for method j_error, CODE XREF=getoptarg+197
00000000000058e0         mov        r8, rbp
00000000000058e3         mov        ecx, r12d
00000000000058e6         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000058e9         xor        eax, eax
00000000000058eb         call       j_error                                     ; error
00000000000058f0         mov        edi, 0x1                                    ; argument #1 for method usage
00000000000058f5         call       usage                                       ; usage

                     loc_58fa:
00000000000058fa         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=getoptarg+74
                        ; endp
00000000000058ff         align      256                                         ; End of unwind block (FDE at 0xf008)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000005900         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xf09c), file_name
0000000000005907         ret
                        ; endp
0000000000005908         align      16                                          ; End of unwind block (FDE at 0xf09c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000005910         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xf0b0), ignore_EPIPE
0000000000005917         ret
                        ; endp
0000000000005918         align      32                                          ; End of unwind block (FDE at 0xf0b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000005920         push       rbp                                         ; Begin of unwind block (FDE at 0xf0c4), DATA XREF=main+101
0000000000005921         push       rbx
0000000000005922         sub        rsp, 0x8
0000000000005926         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000592d         call       close_stream                                ; close_stream
0000000000005932         test       eax, eax
0000000000005934         je         loc_594c

0000000000005936         call       j___errno_location                          ; __errno_location
000000000000593b         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000005942         mov        rbx, rax
0000000000005945         je         loc_5963

0000000000005947         cmp        dword [rax], 0x20
000000000000594a         jne        loc_5963

                     loc_594c:
000000000000594c         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000005953         call       close_stream                                ; close_stream
0000000000005958         test       eax, eax
000000000000595a         jne        loc_59a2

000000000000595c         add        rsp, 0x8
0000000000005960         pop        rbx
0000000000005961         pop        rbp
0000000000005962         ret
                        ; endp

                     loc_5963:
0000000000005963         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
000000000000596a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000596c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005971         call       j_dcgettext                                 ; dcgettext
0000000000005976         mov        rdi, qword [file_name]                      ; file_name
000000000000597d         mov        rbp, rax
0000000000005980         test       rdi, rdi
0000000000005983         je         loc_59ad

0000000000005985         call       quotearg_colon                              ; quotearg_colon
000000000000598a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
000000000000598c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000005993         mov        rcx, rax
0000000000005996         mov        r8, rbp
0000000000005999         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000599b         xor        eax, eax
000000000000599d         call       j_error                                     ; error

                     loc_59a2:
00000000000059a2         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
00000000000059a8         call       j__exit                                     ; _exit
                        ; endp

                     loc_59ad:
00000000000059ad         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
00000000000059af         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xd84a
00000000000059b6         mov        rcx, rax
00000000000059b9         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000059bb         xor        eax, eax
00000000000059bd         call       j_error                                     ; error
00000000000059c2         jmp        loc_59a2
00000000000059c4         align      16                                          ; End of unwind block (FDE at 0xf0c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fdadvise:
00000000000059d0         jmp        j_posix_fadvise                             ; posix_fadvise, Begin of unwind block (FDE at 0xf0f4)
                        ; endp
00000000000059d5         align      32                                          ; End of unwind block (FDE at 0xf0f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fadvise:
00000000000059e0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xf108), CODE XREF=open_file+88
00000000000059e3         je         loc_5a00

00000000000059e5         push       rbx
00000000000059e6         mov        ebx, esi
00000000000059e8         call       j_fileno                                    ; fileno
00000000000059ed         mov        ecx, ebx                                    ; argument "__advise" for method j_posix_fadvise
00000000000059ef         xor        edx, edx                                    ; argument "__len" for method j_posix_fadvise
00000000000059f1         xor        esi, esi                                    ; argument "__offset" for method j_posix_fadvise
00000000000059f3         pop        rbx
00000000000059f4         mov        edi, eax                                    ; argument "__fd" for method j_posix_fadvise
00000000000059f6         jmp        j_posix_fadvise                             ; posix_fadvise
                        ; endp
00000000000059fb         align      512

                     loc_5a00:
0000000000005a00         ret                                                    ; CODE XREF=fadvise+3
                        ; endp
0000000000005a02         align      16                                          ; End of unwind block (FDE at 0xf108)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fopen_safer:
0000000000005a10         push       r12                                         ; Begin of unwind block (FDE at 0xf124), CODE XREF=open_file+142
0000000000005a12         push       rbp
0000000000005a13         mov        rbp, rsi
0000000000005a16         push       rbx
0000000000005a17         call       j_fopen                                     ; fopen
0000000000005a1c         test       rax, rax
0000000000005a1f         mov        rbx, rax
0000000000005a22         je         loc_5a31

0000000000005a24         mov        rdi, rax                                    ; argument "__stream" for method j_fileno
0000000000005a27         call       j_fileno                                    ; fileno
0000000000005a2c         cmp        eax, 0x2
0000000000005a2f         jbe        loc_5a40

                     loc_5a31:
0000000000005a31         mov        rax, rbx                                    ; CODE XREF=fopen_safer+18, fopen_safer+91, fopen_safer+115, fopen_safer+145
0000000000005a34         pop        rbx
0000000000005a35         pop        rbp
0000000000005a36         pop        r12
0000000000005a38         ret
                        ; endp
0000000000005a39         align      64

                     loc_5a40:
0000000000005a40         mov        edi, eax                                    ; CODE XREF=fopen_safer+31
0000000000005a42         call       dup_safer                                   ; dup_safer
0000000000005a47         test       eax, eax
0000000000005a49         mov        r12d, eax
0000000000005a4c         js         loc_5a88

0000000000005a4e         mov        rdi, rbx
0000000000005a51         call       rpl_fclose                                  ; rpl_fclose
0000000000005a56         test       eax, eax
0000000000005a58         jne        loc_5a6d

0000000000005a5a         mov        rsi, rbp                                    ; argument "__modes" for method j_fdopen
0000000000005a5d         mov        edi, r12d                                   ; argument "__fd" for method j_fdopen
0000000000005a60         call       j_fdopen                                    ; fdopen
0000000000005a65         test       rax, rax
0000000000005a68         mov        rbx, rax
0000000000005a6b         jne        loc_5a31

                     loc_5a6d:
0000000000005a6d         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+72
0000000000005a72         mov        ebp, dword [rax]
0000000000005a74         mov        rbx, rax
0000000000005a77         mov        edi, r12d                                   ; argument "__fd" for method j_close
0000000000005a7a         call       j_close                                     ; close
0000000000005a7f         mov        dword [rbx], ebp
0000000000005a81         xor        ebx, ebx
0000000000005a83         jmp        loc_5a31
0000000000005a85         align      8

                     loc_5a88:
0000000000005a88         call       j___errno_location                          ; __errno_location, CODE XREF=fopen_safer+60
0000000000005a8d         mov        r12d, dword [rax]
0000000000005a90         mov        rbp, rax
0000000000005a93         mov        rdi, rbx
0000000000005a96         call       rpl_fclose                                  ; rpl_fclose
0000000000005a9b         xor        ebx, ebx
0000000000005a9d         mov        dword [rbp], r12d
0000000000005aa1         jmp        loc_5a31
0000000000005aa3         align      16                                          ; End of unwind block (FDE at 0xf124)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettime:
0000000000005ab0         mov        rsi, rdi                                    ; Begin of unwind block (FDE at 0xf154), argument "__tp" for method j_clock_gettime, CODE XREF=init_header+387
0000000000005ab3         xor        edi, edi                                    ; argument "__clock_id" for method j_clock_gettime
0000000000005ab5         jmp        j_clock_gettime                             ; clock_gettime
                        ; endp
0000000000005aba         align      64                                          ; End of unwind block (FDE at 0xf154)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     current_timespec:
0000000000005ac0         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0xf168)
0000000000005ac4         xor        edi, edi                                    ; argument "__clock_id" for method j_clock_gettime
0000000000005ac6         mov        rsi, rsp                                    ; argument "__tp" for method j_clock_gettime
0000000000005ac9         mov        rax, qword [fs:0x28]
0000000000005ad2         mov        qword [rsp+0x28+var_10], rax
0000000000005ad7         xor        eax, eax
0000000000005ad9         call       j_clock_gettime                             ; clock_gettime
0000000000005ade         mov        rcx, qword [rsp+0x28+var_10]
0000000000005ae3         xor        rcx, qword [fs:0x28]
0000000000005aec         mov        rax, qword [rsp+0x28+var_28]
0000000000005af0         mov        rdx, qword [rsp+0x28+var_20]
0000000000005af5         jne        loc_5afc

0000000000005af7         add        rsp, 0x28
0000000000005afb         ret
                        ; endp

                     loc_5afc:
0000000000005afc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=current_timespec+53
                        ; endp
0000000000005b01         align      16                                          ; End of unwind block (FDE at 0xf168)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000005b10         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xf184), CODE XREF=main+2014, rpl_mbrtowc+71
0000000000005b14         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000005b16         call       j_setlocale                                 ; setlocale
0000000000005b1b         mov        rdx, rax
0000000000005b1e         mov        eax, 0x1
0000000000005b23         test       rdx, rdx
0000000000005b26         je         loc_5b45

0000000000005b28         lea        rdi, qword [aSS+7]                          ; 0xd84d
0000000000005b2f         mov        ecx, 0x2
0000000000005b34         mov        rsi, rdx
0000000000005b37         rep  cmpsb byte [rsi], byte [rdi]
0000000000005b39         seta       cl
0000000000005b3c         sbb        cl, 0x0
0000000000005b3f         xor        eax, eax
0000000000005b41         test       cl, cl
0000000000005b43         jne        loc_5b50

                     loc_5b45:
0000000000005b45         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000005b49         ret
                        ; endp
0000000000005b4a         align      16

                     loc_5b50:
0000000000005b50         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000005b57         mov        ecx, 0x6
0000000000005b5c         mov        rsi, rdx
0000000000005b5f         rep  cmpsb byte [rsi], byte [rdi]
0000000000005b61         seta       al
0000000000005b64         sbb        al, 0x0
0000000000005b66         test       al, al
0000000000005b68         setne      al
0000000000005b6b         add        rsp, 0x8
0000000000005b6f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     imaxtostr:
0000000000005b70         test       rdi, rdi                                    ; End of unwind block (FDE at 0xf184), Begin of unwind block (FDE at 0xf1a4), CODE XREF=init_header+489
0000000000005b73         lea        rcx, qword [rsi+0x14]
0000000000005b77         mov        byte [rsi+0x14], 0x0
0000000000005b7b         movabs     r9, 0x6666666666666667
0000000000005b85         movabs     rsi, 0xcccccccccccccccd
0000000000005b8f         mov        r8d, 0x30
0000000000005b95         js         loc_5bd3

0000000000005b97         nop        word [rax+rax]

                     loc_5ba0:
0000000000005ba0         mov        rax, rdi                                    ; CODE XREF=imaxtostr+84
0000000000005ba3         sub        rcx, 0x1
0000000000005ba7         mul        rsi
0000000000005baa         shr        rdx, 0x3
0000000000005bae         lea        rax, qword [rdx+rdx*4]
0000000000005bb2         add        rax, rax
0000000000005bb5         sub        rdi, rax
0000000000005bb8         add        edi, 0x30
0000000000005bbb         test       rdx, rdx
0000000000005bbe         mov        byte [rcx], dil
0000000000005bc1         mov        rdi, rdx
0000000000005bc4         jne        loc_5ba0

0000000000005bc6         mov        rax, rcx
0000000000005bc9         ret
                        ; endp
0000000000005bca         align      16

                     loc_5bd0:
0000000000005bd0         mov        rcx, rsi                                    ; CODE XREF=imaxtostr+142

                     loc_5bd3:
0000000000005bd3         mov        rax, rdi                                    ; CODE XREF=imaxtostr+37
0000000000005bd6         lea        rsi, qword [rcx-1]
0000000000005bda         imul       r9
0000000000005bdd         mov        rax, rdi
0000000000005be0         sar        rax, 0x3f
0000000000005be4         sar        rdx, 0x2
0000000000005be8         sub        rdx, rax
0000000000005beb         lea        rax, qword [rdx+rdx*4]
0000000000005bef         lea        eax, dword [r8+rax*2]
0000000000005bf3         sub        eax, edi
0000000000005bf5         test       rdx, rdx
0000000000005bf8         mov        rdi, rdx
0000000000005bfb         mov        byte [rcx-1], al
0000000000005bfe         jne        loc_5bd0

0000000000005c00         sub        rcx, 0x2
0000000000005c04         mov        byte [rsi-1], 0x2d
0000000000005c08         mov        rax, rcx
0000000000005c0b         ret
                        ; endp
0000000000005c0c         align      16                                          ; End of unwind block (FDE at 0xf1a4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_4C: int32_t, -76
        ;    var_5C: int32_t, -92


                     mbsnwidth:
0000000000005c10         push       r15                                         ; Begin of unwind block (FDE at 0xf1bc), CODE XREF=gnu_mbswidth+30
0000000000005c12         push       r14
0000000000005c14         push       r13
0000000000005c16         push       r12
0000000000005c18         lea        r13, qword [rdi+rsi]
0000000000005c1c         push       rbp
0000000000005c1d         push       rbx
0000000000005c1e         mov        rbx, rdi
0000000000005c21         sub        rsp, 0x38
0000000000005c25         mov        rax, qword [fs:0x28]
0000000000005c2e         mov        qword [rsp+0x68+var_40], rax
0000000000005c33         xor        eax, eax
0000000000005c35         mov        dword [rsp+0x68+var_5C], edx
0000000000005c39         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000005c3e         cmp        rax, 0x1
0000000000005c42         jbe        loc_5d78

0000000000005c48         xor        ebp, ebp
0000000000005c4a         cmp        rbx, r13
0000000000005c4d         jae        loc_5d3d

0000000000005c53         lea        r12, qword [rsp+0x68+var_48]
0000000000005c58         lea        r14, qword [rsp+0x68+var_4C]
0000000000005c5d         jmp        loc_5c7b
0000000000005c5f         align      32

                     loc_5c60:
0000000000005c60         cmp        al, 0x25                                    ; CODE XREF=mbsnwidth+112
0000000000005c62         jge        loc_5c6b

0000000000005c64         sub        eax, 0x20
0000000000005c67         cmp        al, 0x3
0000000000005c69         ja         loc_5c91

                     loc_5c6b:
0000000000005c6b         add        rbx, 0x1                                    ; CODE XREF=mbsnwidth+82, mbsnwidth+120, mbsnwidth+127, mbsnwidth+285
0000000000005c6f         add        ebp, 0x1

                     loc_5c72:
0000000000005c72         cmp        rbx, r13                                    ; CODE XREF=mbsnwidth+174, mbsnwidth+349
0000000000005c75         jae        loc_5d3d

                     loc_5c7b:
0000000000005c7b         movzx      eax, byte [rbx]                             ; CODE XREF=mbsnwidth+77
0000000000005c7e         cmp        al, 0x3f
0000000000005c80         jle        loc_5c60

0000000000005c82         cmp        al, 0x41
0000000000005c84         jl         loc_5c91

0000000000005c86         cmp        al, 0x5f
0000000000005c88         jle        loc_5c6b

0000000000005c8a         sub        eax, 0x61
0000000000005c8d         cmp        al, 0x1d
0000000000005c8f         jbe        loc_5c6b

                     loc_5c91:
0000000000005c91         mov        qword [r12], 0x0                            ; CODE XREF=mbsnwidth+89, mbsnwidth+116
0000000000005c99         jmp        loc_5cc0
0000000000005c9b         align      32

                     loc_5ca0:
0000000000005ca0         mov        ecx, 0x7fffffff                             ; CODE XREF=mbsnwidth+234
0000000000005ca5         sub        ecx, ebp
0000000000005ca7         cmp        ecx, eax
0000000000005ca9         jl         loc_5dc0

0000000000005caf         add        ebp, eax

                     loc_5cb1:
0000000000005cb1         mov        rdi, r12                                    ; argument "__ps" for method j_mbsinit, CODE XREF=mbsnwidth+254, mbsnwidth+271
0000000000005cb4         add        rbx, r15
0000000000005cb7         call       j_mbsinit                                   ; mbsinit
0000000000005cbc         test       eax, eax
0000000000005cbe         jne        loc_5c72

                     loc_5cc0:
0000000000005cc0         mov        rdx, r13                                    ; CODE XREF=mbsnwidth+137
0000000000005cc3         mov        rcx, r12
0000000000005cc6         mov        rsi, rbx
0000000000005cc9         sub        rdx, rbx
0000000000005ccc         mov        rdi, r14
0000000000005ccf         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000005cd4         cmp        rax, 0xffffffffffffffff
0000000000005cd8         mov        r15, rax
0000000000005cdb         je         loc_5d28

0000000000005cdd         cmp        rax, 0xfffffffffffffffe
0000000000005ce1         je         loc_5d60

0000000000005ce3         mov        edi, dword [rsp+0x68+var_4C]                ; argument "__c" for method j_wcwidth
0000000000005ce7         test       rax, rax
0000000000005cea         mov        eax, 0x1
0000000000005cef         cmove      r15, rax
0000000000005cf3         call       j_wcwidth                                   ; wcwidth
0000000000005cf8         test       eax, eax
0000000000005cfa         jns        loc_5ca0

0000000000005cfc         test       byte [rsp+0x68+var_5C], 0x2
0000000000005d01         jne        loc_5d38

0000000000005d03         mov        edi, dword [rsp+0x68+var_4C]                ; argument "__wc" for method j_iswcntrl
0000000000005d07         call       j_iswcntrl                                  ; iswcntrl
0000000000005d0c         test       eax, eax
0000000000005d0e         jne        loc_5cb1

0000000000005d10         cmp        ebp, 0x7fffffff
0000000000005d16         je         loc_5dc0

0000000000005d1c         add        ebp, 0x1
0000000000005d1f         jmp        loc_5cb1
0000000000005d21         align      8

                     loc_5d28:
0000000000005d28         test       byte [rsp+0x68+var_5C], 0x1                 ; CODE XREF=mbsnwidth+203
0000000000005d2d         je         loc_5c6b

0000000000005d33         nop        dword [rax+rax]

                     loc_5d38:
0000000000005d38         mov        ebp, 0xffffffff                             ; CODE XREF=mbsnwidth+241, mbsnwidth+341, mbsnwidth+403

                     loc_5d3d:
0000000000005d3d         mov        rsi, qword [rsp+0x68+var_40]                ; CODE XREF=mbsnwidth+61, mbsnwidth+101, mbsnwidth+365, mbsnwidth+415, mbsnwidth+425, mbsnwidth+437
0000000000005d42         xor        rsi, qword [fs:0x28]
0000000000005d4b         mov        eax, ebp
0000000000005d4d         jne        loc_5dca

0000000000005d4f         add        rsp, 0x38
0000000000005d53         pop        rbx
0000000000005d54         pop        rbp
0000000000005d55         pop        r12
0000000000005d57         pop        r13
0000000000005d59         pop        r14
0000000000005d5b         pop        r15
0000000000005d5d         ret
                        ; endp
0000000000005d5e         align      32

                     loc_5d60:
0000000000005d60         test       byte [rsp+0x68+var_5C], 0x1                 ; CODE XREF=mbsnwidth+209
0000000000005d65         jne        loc_5d38

0000000000005d67         add        ebp, 0x1
0000000000005d6a         mov        rbx, r13
0000000000005d6d         jmp        loc_5c72
0000000000005d72         align      8

                     loc_5d78:
0000000000005d78         xor        ebp, ebp                                    ; CODE XREF=mbsnwidth+50
0000000000005d7a         cmp        rbx, r13
0000000000005d7d         jae        loc_5d3d

0000000000005d7f         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000005d84         mov        edx, dword [rsp+0x68+var_5C]
0000000000005d88         mov        rcx, qword [rax]
0000000000005d8b         xor        ebp, ebp
0000000000005d8d         and        edx, 0x2

                     loc_5d90:
0000000000005d90         add        rbx, 0x1                                    ; CODE XREF=mbsnwidth+423
0000000000005d94         movzx      eax, byte [rbx-1]
0000000000005d98         movzx      eax, word [rcx+rax*2]
0000000000005d9c         test       ah, 0x40
0000000000005d9f         jne        loc_5da9

0000000000005da1         test       edx, edx
0000000000005da3         jne        loc_5d38

0000000000005da5         test       al, 0x2
0000000000005da7         jne        loc_5db4

                     loc_5da9:
0000000000005da9         cmp        ebp, 0x7fffffff                             ; CODE XREF=mbsnwidth+399
0000000000005daf         je         loc_5d3d

0000000000005db1         add        ebp, 0x1

                     loc_5db4:
0000000000005db4         cmp        r13, rbx                                    ; CODE XREF=mbsnwidth+407
0000000000005db7         jne        loc_5d90

0000000000005db9         jmp        loc_5d3d
0000000000005dbb         align      64

                     loc_5dc0:
0000000000005dc0         mov        ebp, 0x7fffffff                             ; CODE XREF=mbsnwidth+153, mbsnwidth+262
0000000000005dc5         jmp        loc_5d3d

                     loc_5dca:
0000000000005dca         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mbsnwidth+317
                        ; endp
0000000000005dcf         align      16                                          ; End of unwind block (FDE at 0xf1bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gnu_mbswidth:
0000000000005dd0         push       rbp                                         ; Begin of unwind block (FDE at 0xf208), CODE XREF=init_header+287, init_header+303, print_header+129
0000000000005dd1         push       rbx
0000000000005dd2         mov        ebp, esi
0000000000005dd4         mov        rbx, rdi
0000000000005dd7         sub        rsp, 0x8
0000000000005ddb         call       j_strlen                                    ; strlen
0000000000005de0         add        rsp, 0x8
0000000000005de4         mov        edx, ebp
0000000000005de6         mov        rdi, rbx
0000000000005de9         pop        rbx
0000000000005dea         pop        rbp
0000000000005deb         mov        rsi, rax
0000000000005dee         jmp        mbsnwidth                                   ; mbsnwidth
                        ; endp
0000000000005df3         align      512                                         ; End of unwind block (FDE at 0xf208)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     memcpy_lowcase:
0000000000005e00         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0xf234), CODE XREF=sub_6c10+1936, sub_76c9+334
0000000000005e03         push       r12
0000000000005e05         push       rbp
0000000000005e06         mov        rbp, rdi
0000000000005e09         push       rbx
0000000000005e0a         je         loc_5e39

0000000000005e0c         mov        r12, rsi
0000000000005e0f         lea        rbx, qword [rdx-1]
0000000000005e13         call       j___ctype_tolower_loc                       ; __ctype_tolower_loc
0000000000005e18         nop        dword [rax+rax]

                     loc_5e20:
0000000000005e20         movzx      ecx, byte [r12+rbx]                         ; CODE XREF=memcpy_lowcase+55
0000000000005e25         mov        rdx, qword [rax]
0000000000005e28         mov        edx, dword [rdx+rcx*4]
0000000000005e2b         mov        byte [rbp+rbx], dl
0000000000005e2f         sub        rbx, 0x1
0000000000005e33         cmp        rbx, 0xffffffffffffffff
0000000000005e37         jne        loc_5e20

                     loc_5e39:
0000000000005e39         mov        rax, rbp                                    ; CODE XREF=memcpy_lowcase+10
0000000000005e3c         pop        rbx
0000000000005e3d         pop        rbp
0000000000005e3e         pop        r12
0000000000005e40         ret
                        ; endp
0000000000005e41         align      16                                          ; End of unwind block (FDE at 0xf234)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     memcpy_uppcase:
0000000000005e50         test       rdx, rdx                                    ; Begin of unwind block (FDE at 0xf260), CODE XREF=__strftime_internal+787, __strftime_internal+1265, sub_6750+219
0000000000005e53         push       r12
0000000000005e55         push       rbp
0000000000005e56         mov        rbp, rdi
0000000000005e59         push       rbx
0000000000005e5a         je         loc_5e89

0000000000005e5c         mov        r12, rsi
0000000000005e5f         lea        rbx, qword [rdx-1]
0000000000005e63         call       j___ctype_toupper_loc                       ; __ctype_toupper_loc
0000000000005e68         nop        dword [rax+rax]

                     loc_5e70:
0000000000005e70         movzx      ecx, byte [r12+rbx]                         ; CODE XREF=memcpy_uppcase+55
0000000000005e75         mov        rdx, qword [rax]
0000000000005e78         mov        edx, dword [rdx+rcx*4]
0000000000005e7b         mov        byte [rbp+rbx], dl
0000000000005e7f         sub        rbx, 0x1
0000000000005e83         cmp        rbx, 0xffffffffffffffff
0000000000005e87         jne        loc_5e70

                     loc_5e89:
0000000000005e89         mov        rax, rbp                                    ; CODE XREF=memcpy_uppcase+10
0000000000005e8c         pop        rbx
0000000000005e8d         pop        rbp
0000000000005e8e         pop        r12
0000000000005e90         ret
                        ; endp
0000000000005e91         align      32                                          ; End of unwind block (FDE at 0xf260)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_490: int32_t, -1168
        ;    var_4B0: int64_t, -1200
        ;    var_4B8: int64_t, -1208
        ;    var_4C0: int64_t, -1216
        ;    var_4C8: int64_t, -1224
        ;    var_4CC: int32_t, -1228
        ;    var_4CD: int8_t, -1229
        ;    var_4D8: int64_t, -1240
        ;    var_4E0: int64_t, -1248
        ;    var_4E8: int64_t, -1256
        ;    var_4F0: int64_t, -1264


                     __strftime_internal:
0000000000005ea0         push       r15                                         ; Begin of unwind block (FDE at 0xf28c), CODE XREF=__strftime_internal+1707, sub_6550+184, nstrftime+43
0000000000005ea2         push       r14
0000000000005ea4         mov        r11, rdx
0000000000005ea7         push       r13
0000000000005ea9         push       r12
0000000000005eab         mov        r13, rcx
0000000000005eae         push       rbp
0000000000005eaf         push       rbx
0000000000005eb0         mov        rbp, rdi
0000000000005eb3         sub        rsp, 0x4c8
0000000000005eba         mov        rdi, qword [rcx+0x30]
0000000000005ebe         mov        r15d, dword [rcx+8]
0000000000005ec2         mov        rax, qword [rsp+0x4f8+arg_8]
0000000000005eca         mov        qword [rsp+0x4f8+var_4F0], rsi
0000000000005ecf         mov        dword [rsp+0x4f8+var_4CC], r9d
0000000000005ed4         movsxd     r10, dword [rsp+0x4f8+arg_0]
0000000000005edc         mov        byte [rsp+0x4f8+var_4CD], r8b
0000000000005ee1         mov        qword [rsp+0x4f8+var_4E0], rax
0000000000005ee6         mov        rax, qword [rsp+0x4f8+arg_10]
0000000000005eee         mov        qword [rsp+0x4f8+var_4E8], rax
0000000000005ef3         mov        rax, qword [fs:0x28]
0000000000005efc         mov        qword [rsp+0x4f8+var_40], rax
0000000000005f04         xor        eax, eax
0000000000005f06         lea        rax, qword [aStandardInput+16]              ; 0xbee5
0000000000005f0d         test       rdi, rdi
0000000000005f10         cmovne     rax, rdi
0000000000005f14         cmp        r15d, 0xc
0000000000005f18         mov        qword [rsp+0x4f8+var_4D8], rax
0000000000005f1d         jle        loc_6010

0000000000005f23         sub        r15d, 0xc

                     loc_5f27:
0000000000005f27         movzx      eax, byte [r11]                             ; CODE XREF=__strftime_internal+380
0000000000005f2b         xor        r14d, r14d
0000000000005f2e         test       al, al
0000000000005f30         je         loc_5fec

0000000000005f36         mov        dword [rsp+0x4f8+var_490], r15d
0000000000005f3b         mov        rbx, r11

                     loc_5f3e:
0000000000005f3e         cmp        al, 0x25                                    ; CODE XREF=__strftime_internal+326
0000000000005f40         je         loc_6028

0000000000005f46         test       r10d, r10d
0000000000005f49         mov        r12d, 0x0
0000000000005f4f         mov        eax, 0x1
0000000000005f54         cmovns     r12, r10
0000000000005f58         test       r12, r12
0000000000005f5b         cmove      r12, rax
0000000000005f5f         mov        rax, qword [rsp+0x4f8+var_4F0]
0000000000005f64         sub        rax, r14
0000000000005f67         cmp        rax, r12
0000000000005f6a         ja         loc_5fa0

                     loc_5f6c:
0000000000005f6c         xor        r14d, r14d                                  ; CODE XREF=__strftime_internal+660, __strftime_internal+1505, sub_6550+252, sub_6c10+1491

                     loc_5f6f:
0000000000005f6f         mov        rbx, qword [rsp+0x4f8+var_40]               ; CODE XREF=__strftime_internal+335, __strftime_internal+347, __strftime_internal+357
0000000000005f77         xor        rbx, qword [fs:0x28]
0000000000005f80         mov        rax, r14
0000000000005f83         jne        loc_7935

0000000000005f89         add        rsp, 0x4c8
0000000000005f90         pop        rbx
0000000000005f91         pop        rbp
0000000000005f92         pop        r12
0000000000005f94         pop        r13
0000000000005f96         pop        r14
0000000000005f98         pop        r15
0000000000005f9a         ret
                        ; endp
0000000000005f9b         align      32

                     loc_5fa0:
0000000000005fa0         test       rbp, rbp                                    ; CODE XREF=__strftime_internal+202
0000000000005fa3         je         loc_5fcc

0000000000005fa5         cmp        r10d, 0x1
0000000000005fa9         jle        loc_5fc2

0000000000005fab         lea        r15, qword [r10-1]
0000000000005faf         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000005fb2         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000005fb7         mov        rdx, r15                                    ; argument "__n" for method j_memset
0000000000005fba         add        rbp, r15
0000000000005fbd         call       j_memset                                    ; memset

                     loc_5fc2:
0000000000005fc2         movzx      eax, byte [rbx]                             ; CODE XREF=__strftime_internal+265
0000000000005fc5         add        rbp, 0x1
0000000000005fc9         mov        byte [rbp-1], al

                     loc_5fcc:
0000000000005fcc         add        r14, r12                                    ; CODE XREF=__strftime_internal+259
0000000000005fcf         mov        r12, rbx

                     loc_5fd2:
0000000000005fd2         movzx      eax, byte [r12+1]                           ; CODE XREF=__strftime_internal+808, sub_6c10+2417
0000000000005fd8         lea        rbx, qword [r12+1]
0000000000005fdd         mov        r10, 0xffffffffffffffff
0000000000005fe4         test       al, al
0000000000005fe6         jne        loc_5f3e

                     loc_5fec:
0000000000005fec         test       rbp, rbp                                    ; CODE XREF=__strftime_internal+144
0000000000005fef         je         loc_5f6f

0000000000005ff5         cmp        qword [rsp+0x4f8+var_4F0], 0x0
0000000000005ffb         je         loc_5f6f

0000000000006001         mov        byte [rbp], 0x0
0000000000006005         jmp        loc_5f6f
000000000000600a         align      16

                     loc_6010:
0000000000006010         test       r15d, r15d                                  ; CODE XREF=__strftime_internal+125
0000000000006013         mov        eax, 0xc
0000000000006018         cmove      r15d, eax
000000000000601c         jmp        loc_5f27
0000000000006021         align      8

                     loc_6028:
0000000000006028         movzx      eax, byte [rsp+0x4f8+var_4CD]               ; CODE XREF=__strftime_internal+160
000000000000602d         xor        r8d, r8d
0000000000006030         xor        r15d, r15d
0000000000006033         mov        edx, 0x1
0000000000006038         mov        byte [rsp+0x4f8+var_4C8], al

                     loc_603c:
000000000000603c         add        rbx, 0x1                                    ; CODE XREF=__strftime_internal+563, __strftime_internal+582, __strftime_internal+821
0000000000006040         movsx      eax, byte [rbx]
0000000000006043         lea        ecx, dword [rax-0x23]
0000000000006046         mov        esi, eax
0000000000006048         mov        r9d, eax
000000000000604b         cmp        cl, 0x3c
000000000000604e         ja         loc_607c

0000000000006050         mov        rdi, rdx
0000000000006053         movabs     r11, 0x1000000000002500
000000000000605d         shl        rdi, cl
0000000000006060         test       rdi, r11
0000000000006063         jne        loc_60d0

0000000000006065         test       cl, cl
0000000000006067         je         loc_60e0

0000000000006069         movabs     rcx, 0x800000000000000
0000000000006073         test       rdi, rcx
0000000000006076         jne        loc_61d0

                     loc_607c:
000000000000607c         lea        edx, dword [rax-0x30]                       ; CODE XREF=__strftime_internal+430
000000000000607f         cmp        edx, 0x9
0000000000006082         jbe        loc_61e0

                     loc_6088:
0000000000006088         cmp        sil, 0x45                                   ; CODE XREF=__strftime_internal+882, __strftime_internal+940
000000000000608c         je         loc_60b8

000000000000608e         xor        r11d, r11d
0000000000006091         cmp        sil, 0x4f
0000000000006095         je         loc_60b8

                     loc_6097:
0000000000006097         cmp        sil, 0x7a                                   ; CODE XREF=__strftime_internal+551
000000000000609b         ja         loc_60f0

000000000000609d         lea        rdx, qword [aMdy+9]                         ; 0xd870
00000000000060a4         movzx      eax, sil
00000000000060a8         movsxd     rax, dword [rdx+rax*4]
00000000000060ac         add        rax, rdx
00000000000060af         jmp        rax
                        ; endp
00000000000060b1         align      8

                     loc_60b8:
00000000000060b8         movsx      r9d, byte [rbx+1]                           ; CODE XREF=__strftime_internal+492, __strftime_internal+501
00000000000060bd         mov        r11d, eax
00000000000060c0         add        rbx, 0x1
00000000000060c4         mov        esi, r9d
00000000000060c7         jmp        loc_6097
00000000000060c9         align      16

                     loc_60d0:
00000000000060d0         mov        r15d, eax                                   ; CODE XREF=__strftime_internal+451
00000000000060d3         jmp        loc_603c
00000000000060d8         align      32

                     loc_60e0:
00000000000060e0         mov        r8d, 0x1                                    ; CODE XREF=__strftime_internal+455
00000000000060e6         jmp        loc_603c
00000000000060eb         mov        rbx, r9                                     ; CODE XREF=sub_6c10+1186
00000000000060ee         nop

                     loc_60f0:
00000000000060f0         lea        rax, qword [rbx-1]                          ; CODE XREF=__strftime_internal+507, __strftime_internal+956, __strftime_internal+1289, __strftime_internal+1354, sub_6550+376, sub_6550+437, sub_6c10+287, sub_6c10+305, sub_6c10+712, sub_6c10+789, sub_6c10+813
00000000000060f4         mov        r8d, 0x1

                     loc_60fa:
00000000000060fa         mov        r9, rax                                     ; CODE XREF=__strftime_internal+617
00000000000060fd         lea        rax, qword [rax-1]
0000000000006101         add        r8d, 0x1
0000000000006105         cmp        byte [rax+1], 0x25
0000000000006109         jne        loc_60fa

000000000000610b         mov        rdx, qword [rsp+0x4f8+var_4F0]
0000000000006110         mov        eax, 0x0
0000000000006115         movsxd     r8, r8d
0000000000006118         mov        rcx, r8
000000000000611b         mov        r12, rbx
000000000000611e         sub        rdx, r14
0000000000006121         test       r10d, r10d
0000000000006124         cmovns     eax, r10d
0000000000006128         cdqe
000000000000612a         cmp        rax, r8
000000000000612d         cmovae     rcx, rax
0000000000006131         cmp        rcx, rdx                                    ; CODE XREF=sub_6c10+1213, sub_6c10+2676
0000000000006134         jae        loc_5f6c

000000000000613a         test       rbp, rbp
000000000000613d         je         loc_61c5

0000000000006143         cmp        rax, r8
0000000000006146         jbe        loc_6195

0000000000006148         movsxd     rdx, r10d
000000000000614b         mov        qword [rsp+0x4f8+var_4B0], r8
0000000000006150         mov        qword [rsp+0x4f8+var_4B8], rcx
0000000000006155         sub        rdx, r8
0000000000006158         cmp        r15d, 0x30
000000000000615c         mov        qword [rsp+0x4f8+var_4C0], r9
0000000000006161         lea        rbx, qword [rbp+rdx]
0000000000006166         je         loc_73d6

000000000000616c         cmp        r15d, 0x2b
0000000000006170         je         loc_73d6

0000000000006176         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000006179         mov        esi, 0x20                                   ; argument "__c" for method j_memset
000000000000617e         mov        rbp, rbx
0000000000006181         call       j_memset                                    ; memset
0000000000006186         mov        r8, qword [rsp+0x4f8+var_4B0]
000000000000618b         mov        rcx, qword [rsp+0x4f8+var_4B8]
0000000000006190         mov        r9, qword [rsp+0x4f8+var_4C0]

                     loc_6195:
0000000000006195         cmp        byte [rsp+0x4f8+var_4C8], 0x0               ; CODE XREF=__strftime_internal+678, sub_6c10+2021
000000000000619a         mov        qword [rsp+0x4f8+var_4C0], rcx
000000000000619f         mov        rdx, r8
00000000000061a2         mov        qword [rsp+0x4f8+var_4C8], r8
00000000000061a7         mov        rsi, r9
00000000000061aa         mov        rdi, rbp
00000000000061ad         je         loc_7380

00000000000061b3         call       memcpy_uppcase                              ; memcpy_uppcase
00000000000061b8         mov        r8, qword [rsp+0x4f8+var_4C8]
00000000000061bd         mov        rcx, qword [rsp+0x4f8+var_4C0]

                     loc_61c2:
00000000000061c2         add        rbp, r8                                     ; CODE XREF=sub_6c10+1919

                     loc_61c5:
00000000000061c5         add        r14, rcx                                    ; CODE XREF=__strftime_internal+669
00000000000061c8         jmp        loc_5fd2
00000000000061cd         align      16

                     loc_61d0:
00000000000061d0         mov        byte [rsp+0x4f8+var_4C8], 0x1               ; CODE XREF=__strftime_internal+470
00000000000061d5         jmp        loc_603c
00000000000061da         align      32

                     loc_61e0:
00000000000061e0         xor        r10d, r10d                                  ; CODE XREF=__strftime_internal+482

                     loc_61e3:
00000000000061e3         movsx      eax, byte [rbx+1]                           ; CODE XREF=__strftime_internal+877
00000000000061e7         cmp        r10d, 0xccccccc
00000000000061ee         lea        rcx, qword [rbx+1]
00000000000061f2         mov        esi, eax
00000000000061f4         lea        edx, dword [rax-0x30]
00000000000061f7         jg         loc_6226

00000000000061f9         movsx      edi, byte [rbx]
00000000000061fc         je         loc_6220

                     loc_61fe:
00000000000061fe         lea        r9d, dword [r10+r10*4]                      ; CODE XREF=__strftime_internal+900
0000000000006202         mov        rbx, rcx
0000000000006205         lea        r10d, dword [rdi+r9*2-0x30]

                     loc_620a:
000000000000620a         cmp        edx, 0x9                                    ; CODE XREF=__strftime_internal+926
000000000000620d         jbe        loc_61e3

000000000000620f         mov        r9d, eax
0000000000006212         jmp        loc_6088
0000000000006217         align      32

                     loc_6220:
0000000000006220         cmp        dil, 0x37                                   ; CODE XREF=__strftime_internal+860
0000000000006224         jle        loc_61fe

                     loc_6226:
0000000000006226         cmp        edx, 0x9                                    ; CODE XREF=__strftime_internal+855
0000000000006229         ja         loc_6240

000000000000622b         movsx      eax, byte [rbx+2]
000000000000622f         mov        r10d, 0x7fffffff
0000000000006235         add        rbx, 0x2
0000000000006239         mov        esi, eax
000000000000623b         lea        edx, dword [rax-0x30]
000000000000623e         jmp        loc_620a

                     loc_6240:
0000000000006240         mov        r9d, eax                                    ; CODE XREF=__strftime_internal+905
0000000000006243         mov        rbx, rcx
0000000000006246         mov        r10d, 0x7fffffff
000000000000624c         jmp        loc_6088
0000000000006251         nop        dword [rax]
0000000000006258         cmp        r11d, 0x4f
000000000000625c         je         __strftime_internal+592
0000000000006262         xor        r8d, r8d                                    ; CODE XREF=sub_6c10+902
0000000000006265         mov        eax, 0x2520                                 ; CODE XREF=__strftime_internal+1625, sub_6750+375, sub_6c10+891, sub_6c10+2069
000000000000626a         test       r11d, r11d
000000000000626d         mov        word [rsp+0xab], ax
0000000000006275         jne        sub_794b                                    ; sub_794b
000000000000627b         lea        rdx, qword [rsp+0xab]
0000000000006283         mov        r12, rbx
0000000000006286         lea        rax, qword [rdx+2]

                     loc_628a:
000000000000628a         lea        r9, qword [rsp+0x1+arg_A7]                  ; CODE XREF=__strftime_internal+1345, __strftime_internal+1462
0000000000006292         mov        byte [rax], sil
0000000000006295         mov        byte [rax+1], 0x0
0000000000006299         mov        rcx, r13                                    ; argument "__tp" for method j_strftime
000000000000629c         mov        esi, 0x400                                  ; argument "__maxsize" for method j_strftime
00000000000062a1         mov        dword [rsp+0x1+arg_2F], r10d
00000000000062a6         mov        rdi, r9                                     ; argument "__s" for method j_strftime
00000000000062a9         mov        byte [rsp+0x1+arg_47], r8b
00000000000062ae         mov        dword [rsp+0x1+arg_3F], r11d
00000000000062b3         mov        qword [rsp+0x1+arg_37], r9
00000000000062b8         call       j_strftime                                  ; strftime
00000000000062bd         test       rax, rax
00000000000062c0         je         __strftime_internal+306

00000000000062c6         movsxd     r10, dword [rsp+0x1+arg_2F]
00000000000062cb         lea        rcx, qword [rax-1]
00000000000062cf         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]
00000000000062d4         mov        eax, 0x0
00000000000062d9         test       r10d, r10d
00000000000062dc         cmovns     rax, r10
00000000000062e0         cmp        rcx, rax
00000000000062e3         mov        rbx, rax
00000000000062e6         cmovae     rbx, rcx
00000000000062ea         sub        rdx, r14
00000000000062ed         cmp        rdx, rbx
00000000000062f0         jbe        __strftime_internal+204

00000000000062f6         test       rbp, rbp
00000000000062f9         je         loc_639e

00000000000062ff         mov        r11d, dword [rsp+0x1+arg_3F]
0000000000006304         mov        r9, qword [rsp+0x1+arg_37]
0000000000006309         movzx      r8d, byte [rsp+0x1+arg_47]
000000000000630f         test       r11d, r11d
0000000000006312         jne        loc_636e

0000000000006314         cmp        rcx, rax
0000000000006317         jae        loc_636e

0000000000006319         movsxd     rdx, r10d
000000000000631c         mov        qword [rsp+0x1+arg_47], r9
0000000000006321         mov        qword [rsp+0x1+arg_3F], rcx
0000000000006326         sub        rdx, rcx
0000000000006329         cmp        r15d, 0x30
000000000000632d         mov        byte [rsp+0x1+arg_37], r8b
0000000000006332         lea        rax, qword [rbp+rdx]
0000000000006337         mov        qword [rsp+0x1+arg_2F], rax
000000000000633c         je         loc_73af

0000000000006342         cmp        r15d, 0x2b
0000000000006346         je         loc_73af

000000000000634c         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000634f         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000006354         call       j_memset                                    ; memset
0000000000006359         movzx      r8d, byte [rsp+0x1+arg_37]
000000000000635f         mov        rbp, qword [rsp+0x1+arg_2F]
0000000000006364         mov        r9, qword [rsp+0x1+arg_47]
0000000000006369         mov        rcx, qword [rsp+0x1+arg_3F]

                     loc_636e:
000000000000636e         test       r8b, r8b                                    ; CODE XREF=__strftime_internal+1138, __strftime_internal+1143, sub_6c10+1985
0000000000006371         lea        rsi, qword [r9+1]
0000000000006375         mov        rdx, rcx
0000000000006378         jne        loc_7398

000000000000637e         cmp        byte [rsp+0x1+arg_27], 0x0
0000000000006383         mov        rdi, rbp
0000000000006386         mov        qword [rsp+0x1+arg_27], rcx
000000000000638b         je         loc_6c01

                     loc_6391:
0000000000006391         call       memcpy_uppcase                              ; memcpy_uppcase, CODE XREF=sub_69a0+603
0000000000006396         mov        rcx, qword [rsp+0x1+arg_27]

                     loc_639b:
000000000000639b         add        rbp, rcx                                    ; CODE XREF=sub_69a0+619, sub_6c10+1946

                     loc_639e:
000000000000639e         add        r14, rbx                                    ; CODE XREF=__strftime_internal+1113, sub_69a0+491
00000000000063a1         jmp        __strftime_internal+306
                        ; endp
00000000000063a6         test       r11d, r11d
00000000000063a9         jne        __strftime_internal+592
00000000000063af         movzx      eax, byte [rsp+0x30]
00000000000063b4         test       r8b, r8b
00000000000063b7         lea        rdx, qword [rsp+0xab]
00000000000063bf         mov        r12, rbx
00000000000063c2         cmovne     eax, r8d
00000000000063c6         xor        r8d, r8d
00000000000063c9         xor        r11d, r11d
00000000000063cc         mov        byte [rsp+0x30], al
00000000000063d0         mov        eax, 0x2520
00000000000063d5         mov        word [rsp+0xab], ax
00000000000063dd         lea        rax, qword [rdx+2]
00000000000063e1         jmp        __strftime_internal+1002
00000000000063e6         cmp        r11d, 0x45
00000000000063ea         je         __strftime_internal+592
00000000000063f0         mov        ecx, dword [r13]
00000000000063f4         mov        edi, 0x2
00000000000063f9         nop        dword [rax]

                     loc_6400:
0000000000006400         mov        eax, ecx                                    ; CODE XREF=sub_6550+418, sub_6c10+727, sub_6c10+780, sub_6c10+804, sub_6c10+1237, sub_6c10+1261, sub_6c10+1337, sub_6c10+1361, sub_6c10+1388, sub_6c10+1400, sub_6c10+2659
0000000000006402         xor        esi, esi
0000000000006404         mov        byte [rsp+0x1+arg_37], 0x0
0000000000006409         shr        eax, 0x1f
000000000000640c         mov        dword [rsp+0x1+arg_2F], eax
0000000000006410         mov        eax, ecx
0000000000006412         not        eax
0000000000006414         shr        eax, 0x1f

                     loc_6417:
0000000000006417         cmp        r11d, 0x4f                                  ; CODE XREF=sub_6550+507, sub_6750+338, sub_6750+580, sub_6c10+703, sub_6c10+1056, sub_6c10+1448, sub_6c10+1633, sub_76c9+177, sub_76c9+246
000000000000641b         jne        loc_72a0

0000000000006421         test       al, al
0000000000006423         je         loc_72a0

0000000000006429         mov        esi, r9d
000000000000642c         mov        edx, 0x2520                                 ; CODE XREF=sub_6c10+2076
0000000000006431         xor        r8d, r8d
0000000000006434         mov        word [rsp+0x1+arg_A2], dx
000000000000643c         lea        rdx, qword [rsp+0x1+arg_A2]
0000000000006444         mov        byte [rsp+0x1+arg_A4], r11b
000000000000644c         mov        r12, rbx
000000000000644f         mov        r11d, edi
0000000000006452         lea        rax, qword [rdx+3]
0000000000006456         jmp        loc_628a
000000000000645b         test       r10d, r10d
000000000000645e         mov        ecx, 0x0
0000000000006463         mov        eax, 0x1
0000000000006468         cmovns     ecx, r10d
000000000000646c         movsxd     rcx, ecx
000000000000646f         test       rcx, rcx
0000000000006472         cmove      rcx, rax
0000000000006476         mov        rax, qword [rsp+8]
000000000000647b         sub        rax, r14
000000000000647e         cmp        rax, rcx
0000000000006481         jbe        __strftime_internal+204
0000000000006487         test       rbp, rbp
000000000000648a         je         __strftime_internal+1592
000000000000648c         cmp        r10d, 0x1
0000000000006490         jle        __strftime_internal+1580
0000000000006492         movsxd     rdx, r10d
0000000000006495         mov        qword [rsp+0x30], rcx
000000000000649a         sub        rdx, 0x1
000000000000649e         cmp        r15d, 0x30
00000000000064a2         lea        r12, qword [rbp+rdx]
00000000000064a7         je         sub_76c9+251
00000000000064ad         cmp        r15d, 0x2b
00000000000064b1         je         sub_76c9+251
00000000000064b7         mov        rdi, rbp
00000000000064ba         mov        esi, 0x20
00000000000064bf         mov        rbp, r12
00000000000064c2         call       j_memset                                    ; memset
00000000000064c7         mov        rcx, qword [rsp+0x30]
00000000000064cc         mov        byte [rbp], 0x9                             ; CODE XREF=__strftime_internal+1520, sub_76c9+272
00000000000064d0         add        rbp, 0x1
00000000000064d4         nop        dword [rax]

                     loc_64d8:
00000000000064d8         add        r14, rcx                                    ; CODE XREF=__strftime_internal+1514, sub_6550+261, sub_6550+342, sub_6750+91, sub_6750+232, sub_6c10+1500, sub_6c10+1578
00000000000064db         mov        r12, rbx
00000000000064de         jmp        __strftime_internal+306
                        ; endp
00000000000064e3         mov        eax, 0x1
00000000000064e8         test       r8b, r8b                                    ; CODE XREF=sub_6c10+1585
00000000000064eb         jne        sub_6c10+2059
00000000000064f1         mov        r8d, eax
00000000000064f4         mov        esi, 0x70
00000000000064f9         jmp        __strftime_internal+965
00000000000064fe         lea        rax, qword [aYmdHm+9]                       ; 0xbfba
0000000000006505         mov        dword [rsp+0x38], 0xffffffff
000000000000650d         mov        qword [rsp+0x40], rax
0000000000006512         movzx      r8d, byte [rsp+0x30]                        ; CODE XREF=sub_6550+367, sub_6c10+1090, sub_6c10+1148, sub_76c9+434
0000000000006518         mov        eax, dword [rsp+0x518]
000000000000651f         mov        rsi, 0xffffffffffffffff
0000000000006526         mov        dword [rsp+0x48], r10d
000000000000652b         xor        edi, edi
000000000000652d         mov        r9d, r15d
0000000000006530         mov        rcx, r13
0000000000006533         mov        dword [rsp+0x30], r8d
0000000000006538         push       rax
0000000000006539         push       qword [rsp+0x18]
000000000000653d         push       qword [rsp+0x28]
0000000000006541         mov        eax, dword [rsp+0x50]
0000000000006545         push       rax
0000000000006546         mov        rdx, qword [rsp+0x60]
000000000000654b         call       __strftime_internal                         ; __strftime_internal


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6550:
0000000000006550         add        rsp, 0x20
0000000000006554         movsxd     r10, dword [rsp+72]
0000000000006559         mov        r11, rax
000000000000655c         mov        rsi, qword [rsp+8]
0000000000006561         mov        eax, 0x0
0000000000006566         test       r10d, r10d
0000000000006569         cmovns     rax, r10
000000000000656d         cmp        r11, rax
0000000000006570         mov        r12, rax
0000000000006573         cmovae     r12, r11
0000000000006577         sub        rsi, r14
000000000000657a         cmp        rsi, r12
000000000000657d         mov        qword [rsp+72], rsi
0000000000006582         jbe        __strftime_internal+204

0000000000006588         test       rbp, rbp
000000000000658b         je         __strftime_internal+300

0000000000006591         cmp        r11, rax
0000000000006594         jae        loc_65d6

0000000000006596         movsxd     rdx, r10d
0000000000006599         mov        qword [rsp+88], r11
000000000000659e         sub        rdx, r11
00000000000065a1         cmp        r15d, 0x30
00000000000065a5         lea        rax, qword [rbp+rdx]
00000000000065aa         mov        qword [rsp+80], rax
00000000000065af         je         loc_76ac

00000000000065b5         cmp        r15d, 0x2b
00000000000065b9         je         loc_76ac

00000000000065bf         mov        rdi, rbp                                    ; argument "__s" for method j_memset
00000000000065c2         mov        esi, 0x20                                   ; argument "__c" for method j_memset
00000000000065c7         call       j_memset                                    ; memset
00000000000065cc         mov        rbp, qword [rsp+80]
00000000000065d1         mov        r11, qword [rsp+88]

                     loc_65d6:
00000000000065d6         mov        eax, dword [rsp+1304]                       ; CODE XREF=sub_6550+68, sub_6c10+2739
00000000000065dd         mov        qword [rsp+80], r11
00000000000065e2         mov        rdi, rbp                                    ; argument #1 for method __strftime_internal
00000000000065e5         mov        r9d, r15d                                   ; argument #6 for method __strftime_internal
00000000000065e8         mov        rcx, r13                                    ; argument #4 for method __strftime_internal
00000000000065eb         push       rax
00000000000065ec         push       qword [rsp+24]                              ; argument #9 for method __strftime_internal
00000000000065f0         push       qword [rsp+40]                              ; argument #8 for method __strftime_internal
00000000000065f4         mov        eax, dword [rsp+80]
00000000000065f8         push       rax                                         ; argument #7 for method __strftime_internal
00000000000065f9         mov        r8d, dword [rsp+80]                         ; argument #5 for method __strftime_internal
00000000000065fe         mov        rdx, qword [rsp+96]                         ; argument #3 for method __strftime_internal
0000000000006603         mov        rsi, qword [rsp+104]                        ; argument #2 for method __strftime_internal
0000000000006608         call       __strftime_internal                         ; __strftime_internal
000000000000660d         mov        r11, qword [rsp+112]
0000000000006612         add        rsp, 0x20
0000000000006616         add        rbp, r11
0000000000006619         jmp        __strftime_internal+300
                        ; endp
000000000000661e         mov        rdx, qword [rsp+8]
0000000000006623         mov        eax, 0x0
0000000000006628         mov        ecx, 0x1
000000000000662d         sub        rdx, r14
0000000000006630         test       r10d, r10d
0000000000006633         cmovns     eax, r10d
0000000000006637         cdqe
0000000000006639         test       rax, rax
000000000000663c         cmovne     rcx, rax
0000000000006640         test       r11d, r11d
0000000000006643         jne        sub_6c10+2664
0000000000006649         cmp        rcx, rdx
000000000000664c         jae        __strftime_internal+204
0000000000006652         test       rbp, rbp
0000000000006655         je         __strftime_internal+1592
000000000000665b         cmp        r10d, 0x1
000000000000665f         jle        sub_6550+334
0000000000006661         movsxd     rdx, r10d
0000000000006664         mov        qword [rsp+0x30], rcx
0000000000006669         sub        rdx, 0x1
000000000000666d         cmp        r15d, 0x30
0000000000006671         lea        r12, qword [rbp+rdx]
0000000000006676         je         sub_7880+101
000000000000667c         cmp        r15d, 0x2b
0000000000006680         mov        esi, 0x20
0000000000006685         je         sub_7880+101
000000000000668b         mov        rdi, rbp                                    ; CODE XREF=sub_7880+106
000000000000668e         mov        rbp, r12
0000000000006691         call       j_memset                                    ; memset
0000000000006696         movzx      esi, byte [rbx]
0000000000006699         mov        rcx, qword [rsp+0x30]
000000000000669e         mov        byte [rbp], sil                             ; CODE XREF=sub_6550+271
00000000000066a2         add        rbp, 0x1
00000000000066a6         jmp        __strftime_internal+1592
00000000000066ab         lea        rax, qword [aHms]                           ; "%H:%M:%S"
00000000000066b2         mov        dword [rsp+0x38], 0xffffffff
00000000000066ba         mov        qword [rsp+0x40], rax
00000000000066bf         jmp        __strftime_internal+1650
00000000000066c4         cmp        r11d, 0x45
00000000000066c8         je         __strftime_internal+592
00000000000066ce         mov        esi, dword [r13+0x1c]
00000000000066d2         sub        esi, dword [r13+0x18]
00000000000066d6         mov        edx, 0x92492493
00000000000066db         add        esi, 0x7
00000000000066de         mov        eax, esi
00000000000066e0         imul       edx
00000000000066e2         lea        ecx, dword [rdx+rsi]                        ; CODE XREF=sub_6c10+873
00000000000066e5         sar        esi, 0x1f
00000000000066e8         mov        edi, 0x2
00000000000066ed         sar        ecx, 0x2
00000000000066f0         sub        ecx, esi
00000000000066f2         jmp        __strftime_internal+1376
00000000000066f7         cmp        r11d, 0x45
00000000000066fb         je         sub_6c10+2074
0000000000006701         cmp        r11d, 0x4f
0000000000006705         je         __strftime_internal+592
000000000000670b         mov        eax, dword [r13+0x14]
000000000000670f         cmp        eax, 0xfffff894
0000000000006714         lea        ecx, dword [rax+0x76c]
000000000000671a         setl       byte [rsp+0x38]
000000000000671f         cmp        eax, 0xfffff894
0000000000006724         setge      al
0000000000006727         test       r15d, r15d
000000000000672a         jne        sub_6c10+2457

                     loc_6730:
0000000000006730         mov        r15d, dword [rsp+0x1+arg_23]                ; CODE XREF=sub_6c10+2451
0000000000006735         cmp        r15d, 0x2b
0000000000006739         je         loc_75b3

                     loc_673f:
000000000000673f         mov        byte [rsp+0x1+arg_37], 0x0                  ; CODE XREF=sub_6c10+2461
0000000000006744         mov        edi, 0x4

                     loc_6749:
0000000000006749         xor        esi, esi                                    ; CODE XREF=sub_6c10+1034
000000000000674b         jmp        loc_6417


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6750:
0000000000006750         movzx      esi, byte [rsp+48]
0000000000006755         mov        rdi, qword [rsp+32]                         ; argument "__s" for method j_strlen
000000000000675a         test       r8b, r8b
000000000000675d         mov        eax, 0x0
0000000000006762         mov        dword [rsp+56], r10d
0000000000006767         mov        byte [rsp+64], r8b
000000000000676c         cmovne     esi, eax
000000000000676f         mov        byte [rsp+48], sil
0000000000006774         call       j_strlen                                    ; strlen
0000000000006779         movsxd     r10, dword [rsp+56]
000000000000677e         mov        r12, rax
0000000000006781         mov        rdx, qword [rsp+8]
0000000000006786         mov        eax, 0x0
000000000000678b         test       r10d, r10d
000000000000678e         cmovns     rax, r10
0000000000006792         cmp        r12, rax
0000000000006795         mov        rcx, rax
0000000000006798         cmovae     rcx, r12
000000000000679c         sub        rdx, r14
000000000000679f         cmp        rdx, rcx
00000000000067a2         jbe        __strftime_internal+204

00000000000067a8         test       rbp, rbp
00000000000067ab         je         loc_64d8

00000000000067b1         cmp        r12, rax
00000000000067b4         movzx      r8d, byte [rsp+64]
00000000000067ba         jae        loc_6807

00000000000067bc         movsxd     rdx, r10d
00000000000067bf         mov        qword [rsp+72], rcx
00000000000067c4         mov        byte [rsp+64], r8b
00000000000067c9         sub        rdx, r12
00000000000067cc         cmp        r15d, 0x30
00000000000067d0         lea        rax, qword [rbp+rdx]
00000000000067d5         mov        qword [rsp+56], rax
00000000000067da         je         loc_789f

00000000000067e0         cmp        r15d, 0x2b
00000000000067e4         je         loc_789f

00000000000067ea         mov        rdi, rbp                                    ; argument "__s" for method j_memset
00000000000067ed         mov        esi, 0x20                                   ; argument "__c" for method j_memset
00000000000067f2         call       j_memset                                    ; memset
00000000000067f7         movzx      r8d, byte [rsp+64]
00000000000067fd         mov        rbp, qword [rsp+56]
0000000000006802         mov        rcx, qword [rsp+72]

                     loc_6807:
0000000000006807         test       r8b, r8b                                    ; CODE XREF=sub_6750+106, sub_7880+60
000000000000680a         jne        loc_7807

0000000000006810         cmp        byte [rsp+48], 0x0
0000000000006815         mov        rdx, r12
0000000000006818         mov        qword [rsp+48], rcx
000000000000681d         mov        rsi, qword [rsp+32]
0000000000006822         mov        rdi, rbp
0000000000006825         je         loc_77f8

000000000000682b         call       memcpy_uppcase                              ; memcpy_uppcase
0000000000006830         mov        rcx, qword [rsp+48]

                     loc_6835:
0000000000006835         add        rbp, r12                                    ; CODE XREF=sub_76c9+313, sub_76c9+344
0000000000006838         jmp        loc_64d8
000000000000683d         cmp        r11d, 0x45
0000000000006841         je         sub_6c10+2074
0000000000006847         mov        esi, dword [r13+0x14]
000000000000684b         mov        edx, 0x51eb851f
0000000000006850         mov        eax, esi
0000000000006852         imul       edx
0000000000006854         mov        eax, esi
0000000000006856         sar        eax, 0x1f
0000000000006859         mov        ecx, edx
000000000000685b         sar        ecx, 0x5
000000000000685e         sub        ecx, eax
0000000000006860         mov        eax, esi
0000000000006862         imul       ecx, ecx, 0x64
0000000000006865         sub        eax, ecx
0000000000006867         mov        ecx, eax
0000000000006869         jns        sub_6750+297
000000000000686b         neg        eax
000000000000686d         add        ecx, 0x64
0000000000006870         cmp        esi, 0xfffff893
0000000000006876         cmovle     ecx, eax

                     loc_6879:
0000000000006879         test       r15d, r15d                                  ; CODE XREF=sub_6750+281, sub_6c10+633
000000000000687c         je         loc_6eaa

                     loc_6882:
0000000000006882         mov        eax, 0x1                                    ; CODE XREF=sub_6c10+660, sub_7880+198
0000000000006887         mov        byte [rsp+0x1+arg_2F], 0x0
000000000000688c         cmp        r15d, 0x2b                                  ; CODE XREF=sub_6c10+989
0000000000006890         je         loc_7003

0000000000006896         mov        byte [rsp+0x1+arg_37], 0x0                  ; CODE XREF=sub_6c10+1005
000000000000689b         mov        edi, 0x2
00000000000068a0         xor        esi, esi
00000000000068a2         jmp        loc_6417
00000000000068a7         movzx      eax, byte [rsp+0x30]
00000000000068ac         test       r8b, r8b
00000000000068af         cmovne     eax, r8d
00000000000068b3         cmp        r11d, 0x45
00000000000068b7         je         sub_76c9+349
00000000000068bd         mov        esi, r9d
00000000000068c0         mov        byte [rsp+0x30], al
00000000000068c4         xor        r8d, r8d
00000000000068c7         jmp        __strftime_internal+965
00000000000068cc         xor        r8d, r8d
00000000000068cf         mov        ecx, dword [r13+0x20]                       ; CODE XREF=sub_6c10+296
00000000000068d3         test       ecx, ecx
00000000000068d5         js         sub_6c10+2414
00000000000068db         mov        rcx, qword [r13+0x28]
00000000000068df         mov        byte [rsp+0x38], 0x1
00000000000068e4         test       ecx, ecx
00000000000068e6         js         sub_6750+428
00000000000068e8         mov        byte [rsp+0x38], 0x0
00000000000068ed         jne        sub_6750+428
00000000000068ef         mov        rax, qword [rsp+0x20]
00000000000068f4         cmp        byte [rax], 0x2d
00000000000068f7         sete       byte [rsp+0x38]
00000000000068fc         mov        eax, ecx                                    ; CODE XREF=sub_6750+406, sub_6750+413
00000000000068fe         mov        edx, 0x91a2b3c5
0000000000006903         mov        esi, 0x88888889
0000000000006908         imul       edx
000000000000690a         mov        eax, ecx
000000000000690c         sar        eax, 0x1f
000000000000690f         mov        dword [rsp+0x40], eax
0000000000006913         lea        r12d, dword [rdx+rcx]
0000000000006917         sar        r12d, 0xb
000000000000691b         sub        r12d, eax
000000000000691e         mov        eax, ecx
0000000000006920         imul       esi
0000000000006922         lea        edi, dword [rdx+rcx]
0000000000006925         sar        edi, 0x5
0000000000006928         sub        edi, dword [rsp+0x40]
000000000000692c         mov        eax, edi
000000000000692e         imul       esi
0000000000006930         mov        eax, edi
0000000000006932         sar        eax, 0x1f
0000000000006935         lea        esi, dword [rdx+rdi]
0000000000006938         sar        esi, 0x5
000000000000693b         sub        esi, eax
000000000000693d         mov        eax, edi
000000000000693f         imul       esi, esi, 0x3c
0000000000006942         imul       edi, edi, 0x3c
0000000000006945         sub        eax, esi
0000000000006947         sub        ecx, edi
0000000000006949         cmp        r8, 0x1
000000000000694d         mov        esi, eax
000000000000694f         je         sub_76c9+217
0000000000006955         jb         sub_7880                                    ; sub_7880
000000000000695b         cmp        r8, 0x2
000000000000695f         je         sub_76c9+140
0000000000006965         cmp        r8, 0x3
0000000000006969         jne        sub_76c9+358
000000000000696f         test       ecx, ecx
0000000000006971         jne        sub_76c9+140
0000000000006977         test       eax, eax
0000000000006979         jne        sub_76c9+217
000000000000697f         movzx      eax, byte [rsp+0x38]
0000000000006984         mov        ecx, r12d
0000000000006987         mov        byte [rsp+0x40], 0x1
000000000000698c         mov        edi, 0x3
0000000000006991         xor        eax, 0x1
0000000000006994         jmp        __strftime_internal+1399
0000000000006999         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_69a0:
00000000000069a0         cmp        r11d, 0x4f
00000000000069a4         mov        eax, dword [r13+0x10]
00000000000069a8         mov        edi, 0x1
00000000000069ad         je         __strftime_internal+1420

00000000000069b3         lea        edx, dword [rax+rax*4]
00000000000069b6         mov        byte [rsp+64], 0x0
00000000000069bb         mov        byte [rsp+56], 0x0
00000000000069c0         xor        esi, esi
00000000000069c2         lea        ecx, dword [rax+rdx*2]
00000000000069c5         sar        ecx, 0x5
00000000000069c8         add        ecx, 0x1
00000000000069cb         nop        dword [rax+rax]
                        ; endp

                     loc_69d0:
00000000000069d0         lea        r9, qword [rsp+0x1+arg_A7]                  ; CODE XREF=sub_6c10+1692
00000000000069d8         mov        r12d, 0xcccccccd
00000000000069de         lea        r11, qword [r9+0x17]
00000000000069e2         nop        word [rax+rax]

                     loc_69e8:
00000000000069e8         test       sil, 0x1                                    ; CODE XREF=sub_69a0+130
00000000000069ec         lea        r8, qword [r11-1]
00000000000069f0         je         loc_6a01

00000000000069f2         lea        rax, qword [r11-2]
00000000000069f6         mov        byte [r11-1], 0x3a
00000000000069fb         mov        r11, r8
00000000000069fe         mov        r8, rax

                     loc_6a01:
0000000000006a01         mov        eax, ecx                                    ; CODE XREF=sub_69a0+80
0000000000006a03         sar        esi, 0x1
0000000000006a05         mul        r12d
0000000000006a08         shr        edx, 0x3
0000000000006a0b         lea        eax, dword [rdx+rdx*4]
0000000000006a0e         add        eax, eax
0000000000006a10         sub        ecx, eax
0000000000006a12         mov        eax, esi
0000000000006a14         add        ecx, 0x30
0000000000006a17         or         eax, edx
0000000000006a19         mov        byte [r11-1], cl
0000000000006a1d         mov        ecx, edx
0000000000006a1f         mov        r11, r8
0000000000006a22         jne        loc_69e8

0000000000006a24         cmp        r10d, edi
0000000000006a27         cmovge     edi, r10d
0000000000006a2b         cmp        byte [rsp+0x1+arg_2F], 0x0
0000000000006a30         mov        dword [rsp+0x1+arg_3F], edi
0000000000006a34         jne        loc_72b8

0000000000006a3a         cmp        byte [rsp+0x1+arg_37], 0x0
0000000000006a3f         je         loc_6cd9

0000000000006a45         cmp        r15d, 0x2d
0000000000006a49         je         loc_7573

0000000000006a4f         mov        byte [rsp+0x1+arg_2F], 0x2b

                     loc_6a54:
0000000000006a54         mov        eax, dword [rsp+0x1+arg_3F]                 ; CODE XREF=sub_6c10+1713
0000000000006a58         lea        rcx, qword [r9+0x17]
0000000000006a5c         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]
0000000000006a61         sub        rcx, r8
0000000000006a64         lea        r12d, dword [rax-1]
0000000000006a68         sub        rdx, r14
0000000000006a6b         sub        r12d, ecx
0000000000006a6e         test       r12d, r12d
0000000000006a71         jle        loc_74bc

0000000000006a77         cmp        r15d, 0x5f
0000000000006a7b         je         loc_7436

0000000000006a81         movsxd     rax, dword [rsp+0x1+arg_3F]
0000000000006a86         cmp        rax, rdx
0000000000006a89         mov        rdi, rax
0000000000006a8c         jae        __strftime_internal+204

0000000000006a92         test       r10d, r10d
0000000000006a95         mov        eax, 0x0
0000000000006a9a         mov        esi, 0x1
0000000000006a9f         cmovns     eax, r10d
0000000000006aa3         cdqe
0000000000006aa5         test       rax, rax
0000000000006aa8         cmovne     rsi, rax
0000000000006aac         cmp        rsi, rdx
0000000000006aaf         jae        __strftime_internal+204

0000000000006ab5         add        r14, rsi
0000000000006ab8         test       rbp, rbp
0000000000006abb         movsxd     r9, r12d
0000000000006abe         mov        r12, rbx
0000000000006ac1         je         loc_6b64

0000000000006ac7         test       edi, edi
0000000000006ac9         jne        loc_6b1f

0000000000006acb         cmp        rax, 0x1
0000000000006acf         jbe        loc_6b1f

0000000000006ad1         movsxd     rdx, r10d
0000000000006ad4         mov        qword [rsp+0x1+arg_4F], r8
0000000000006ad9         mov        qword [rsp+0x1+arg_47], r9
0000000000006ade         sub        rdx, 0x1
0000000000006ae2         cmp        r15d, 0x30
0000000000006ae6         mov        qword [rsp+0x1+arg_37], rcx
0000000000006aeb         lea        r12, qword [rbp+rdx]
0000000000006af0         je         loc_78c1

0000000000006af6         cmp        r15d, 0x2b
0000000000006afa         je         loc_78c1

0000000000006b00         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000006b03         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000006b08         mov        rbp, r12
0000000000006b0b         call       j_memset                                    ; memset
0000000000006b10         mov        r8, qword [rsp+0x1+arg_4F]
0000000000006b15         mov        r9, qword [rsp+0x1+arg_47]
0000000000006b1a         mov        rcx, qword [rsp+0x1+arg_37]

                     loc_6b1f:
0000000000006b1f         movzx      eax, byte [rsp+0x1+arg_2F]                  ; CODE XREF=sub_69a0+297, sub_69a0+303, sub_7880+96
0000000000006b24         add        rbp, 0x1
0000000000006b28         mov        r12, rbx
0000000000006b2b         mov        byte [rbp-1], al

                     loc_6b2e:
0000000000006b2e         test       rbp, rbp                                    ; CODE XREF=sub_6c10+2711
0000000000006b31         je         loc_6b64

0000000000006b33         mov        rdx, r9                                     ; argument "__n" for method j_memset
0000000000006b36         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000006b39         mov        esi, 0x30                                   ; argument "__c" for method j_memset
0000000000006b3e         mov        qword [rsp+0x1+arg_47], r8
0000000000006b43         mov        qword [rsp+0x1+arg_37], rcx
0000000000006b48         mov        qword [rsp+0x1+arg_2F], r9
0000000000006b4d         call       j_memset                                    ; memset
0000000000006b52         mov        r9, qword [rsp+0x1+arg_2F]
0000000000006b57         mov        r8, qword [rsp+0x1+arg_47]
0000000000006b5c         mov        rcx, qword [rsp+0x1+arg_37]
0000000000006b61         add        rbp, r9

                     loc_6b64:
0000000000006b64         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_69a0+289, sub_69a0+401
0000000000006b69         add        r14, r9
0000000000006b6c         xor        r11d, r11d
0000000000006b6f         xor        r10d, r10d
0000000000006b72         sub        rdx, r14

                     loc_6b75:
0000000000006b75         cmp        rcx, r11                                    ; CODE XREF=sub_6c10+258, sub_6c10+1895, sub_6c10+2215, sub_6c10+2398, sub_6c10+2636
0000000000006b78         mov        rbx, r11
0000000000006b7b         cmovae     rbx, rcx
0000000000006b7f         cmp        rbx, rdx
0000000000006b82         jae        __strftime_internal+204

0000000000006b88         test       rbp, rbp
0000000000006b8b         je         loc_639e

0000000000006b91         mov        esi, dword [rsp+0x1+arg_3F]
0000000000006b95         test       esi, esi
0000000000006b97         jne        loc_6be8

0000000000006b99         cmp        rcx, r11
0000000000006b9c         jae        loc_6be8

0000000000006b9e         movsxd     rdx, r10d
0000000000006ba1         mov        qword [rsp+0x1+arg_3F], r8
0000000000006ba6         mov        qword [rsp+0x1+arg_37], rcx
0000000000006bab         sub        rdx, rcx
0000000000006bae         cmp        r15d, 0x30
0000000000006bb2         lea        rax, qword [rbp+rdx]
0000000000006bb7         mov        qword [rsp+0x1+arg_2F], rax
0000000000006bbc         je         loc_73fa

0000000000006bc2         cmp        r15d, 0x2b
0000000000006bc6         je         loc_73fa

0000000000006bcc         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000006bcf         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000006bd4         call       j_memset                                    ; memset
0000000000006bd9         mov        rbp, qword [rsp+0x1+arg_2F]
0000000000006bde         mov        r8, qword [rsp+0x1+arg_3F]
0000000000006be3         mov        rcx, qword [rsp+0x1+arg_37]

                     loc_6be8:
0000000000006be8         cmp        byte [rsp+0x1+arg_27], 0x0                  ; CODE XREF=sub_69a0+503, sub_69a0+508, sub_6c10+2054
0000000000006bed         mov        rdx, rcx
0000000000006bf0         mov        qword [rsp+0x1+arg_27], rcx
0000000000006bf5         mov        rsi, r8
0000000000006bf8         mov        rdi, rbp
0000000000006bfb         jne        loc_6391

                     loc_6c01:
0000000000006c01         call       j_memcpy                                    ; memcpy, CODE XREF=__strftime_internal+1259
0000000000006c06         mov        rcx, qword [rsp+0x1+arg_27]
0000000000006c0b         jmp        loc_639b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6c10:
0000000000006c10         movdqu     xmm0, xmmword [r13]
0000000000006c16         lea        rsi, qword [rsp+112]                        ; argument #2 for method mktime_z
0000000000006c1b         mov        rax, qword [r13+0x30]
0000000000006c1f         mov        rdi, qword [rsp+16]                         ; argument #1 for method mktime_z
0000000000006c24         movaps     xmmword [rsp+112], xmm0
0000000000006c29         mov        dword [rsp+56], r10d
0000000000006c2e         movdqu     xmm0, xmmword [r13+0x10]
0000000000006c34         mov        qword [rsp+160], rax
0000000000006c3c         movaps     xmmword [rsp+128], xmm0
0000000000006c44         movdqu     xmm0, xmmword [r13+0x20]
0000000000006c4a         movaps     xmmword [rsp+144], xmm0
0000000000006c52         call       mktime_z                                    ; mktime_z
0000000000006c57         lea        r9, qword [rsp+176]
0000000000006c5f         mov        rsi, rax
0000000000006c62         mov        rcx, rax
0000000000006c65         movabs     r11, 0x6666666666666667
0000000000006c6f         mov        edi, 0x30
0000000000006c74         mov        r10d, dword [rsp+56]
0000000000006c79         lea        r8, qword [r9+0x17]
0000000000006c7d         nop        dword [rax]

                     loc_6c80:
0000000000006c80         mov        rax, rcx                                    ; CODE XREF=sub_6c10+174
0000000000006c83         imul       r11
0000000000006c86         mov        rax, rcx
0000000000006c89         sar        rax, 0x3f
0000000000006c8d         sar        rdx, 0x2
0000000000006c91         sub        rdx, rax
0000000000006c94         mov        rax, rdx
0000000000006c97         lea        rdx, qword [rdx+rdx*4]
0000000000006c9b         add        rdx, rdx
0000000000006c9e         sub        rcx, rdx
0000000000006ca1         mov        rdx, rcx
0000000000006ca4         mov        rcx, rax
0000000000006ca7         mov        eax, edi
0000000000006ca9         sub        eax, edx
0000000000006cab         add        edx, 0x30
0000000000006cae         test       rsi, rsi
0000000000006cb1         cmovs      edx, eax
0000000000006cb4         sub        r8, 0x1
0000000000006cb8         test       rcx, rcx
0000000000006cbb         mov        byte [r8], dl
0000000000006cbe         jne        loc_6c80

0000000000006cc0         test       r10d, r10d
0000000000006cc3         mov        edi, 0x1
0000000000006cc8         cmovg      edi, r10d
0000000000006ccc         test       rsi, rsi
0000000000006ccf         mov        dword [rsp+72], edi
0000000000006cd3         js         sub_6c10+1704
                        ; endp

                     loc_6cd9:
0000000000006cd9         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_69a0+159
0000000000006cde         lea        rcx, qword [r9+0x17]
0000000000006ce2         sub        rcx, r8
0000000000006ce5         sub        rdx, r14
0000000000006ce8         cmp        r15d, 0x2d
0000000000006cec         je         loc_6cff

0000000000006cee         mov        r12d, dword [rsp+0x1+arg_3F]
0000000000006cf3         sub        r12d, ecx
0000000000006cf6         test       r12d, r12d
0000000000006cf9         jg         loc_7689

                     loc_6cff:
0000000000006cff         test       r10d, r10d                                  ; CODE XREF=sub_6c10+220
0000000000006d02         mov        r11d, 0x0
0000000000006d08         mov        r12, rbx
0000000000006d0b         cmovns     r11d, r10d
0000000000006d0f         movsxd     r11, r11d
0000000000006d12         jmp        loc_6b75
0000000000006d17         movzx      eax, byte [rbx+1]
0000000000006d1b         lea        rdx, qword [rbx+1]
0000000000006d1f         cmp        al, 0x3a
0000000000006d21         je         sub_76c9+369
0000000000006d27         mov        r8d, 0x1
0000000000006d2d         cmp        al, 0x7a                                    ; CODE XREF=sub_76c9+396
0000000000006d2f         jne        __strftime_internal+592
0000000000006d35         mov        rbx, rdx
0000000000006d38         jmp        sub_6750+383
0000000000006d3d         cmp        r11d, 0x45
0000000000006d41         je         __strftime_internal+592
0000000000006d47         mov        edi, dword [r13+0x14]
0000000000006d4b         mov        r8d, dword [r13+0x1c]
0000000000006d4f         mov        edx, 0x92492493
0000000000006d54         mov        eax, edi
0000000000006d56         mov        ecx, r8d
0000000000006d59         sar        eax, 0x1f
0000000000006d5c         and        eax, 0x190
0000000000006d61         lea        r12d, dword [rdi+rax-0x64]
0000000000006d66         mov        eax, dword [r13+0x18]
0000000000006d6a         sub        ecx, eax
0000000000006d6c         mov        dword [rsp+0x38], eax
0000000000006d70         add        ecx, 0x17e
0000000000006d76         mov        eax, ecx
0000000000006d78         imul       edx
0000000000006d7a         lea        eax, dword [rdx+rcx]
0000000000006d7d         mov        edx, ecx
0000000000006d7f         sar        edx, 0x1f
0000000000006d82         sar        eax, 0x2
0000000000006d85         sub        eax, edx
0000000000006d87         lea        edx, dword [rax*8]
0000000000006d8e         sub        edx, eax
0000000000006d90         mov        eax, edx
0000000000006d92         mov        edx, r8d
0000000000006d95         sub        edx, ecx
0000000000006d97         lea        eax, dword [rdx+rax+3]
0000000000006d9b         test       eax, eax
0000000000006d9d         mov        dword [rsp+0x40], eax
0000000000006da1         js         sub_6c10+2744
0000000000006da7         test       r12b, 0x3
0000000000006dab         mov        eax, 0x16d
0000000000006db0         jne        sub_6c10+487
0000000000006db2         mov        ecx, 0x51eb851f
0000000000006db7         mov        eax, r12d
0000000000006dba         imul       ecx
0000000000006dbc         mov        eax, r12d
0000000000006dbf         sar        eax, 0x1f
0000000000006dc2         mov        dword [rsp+0x48], eax
0000000000006dc6         mov        ecx, edx
0000000000006dc8         sar        edx, 0x5
0000000000006dcb         sub        edx, eax
0000000000006dcd         mov        eax, 0x16e
0000000000006dd2         imul       edx, edx, 0x64
0000000000006dd5         cmp        r12d, edx
0000000000006dd8         jne        sub_6c10+487
0000000000006dda         sar        ecx, 0x7
0000000000006ddd         mov        eax, ecx
0000000000006ddf         sub        eax, dword [rsp+0x48]
0000000000006de3         imul       eax, eax, 0x190
0000000000006de9         cmp        r12d, eax
0000000000006dec         sete       al
0000000000006def         movzx      eax, al
0000000000006df2         add        eax, 0x16d
0000000000006df7         sub        r8d, eax                                    ; CODE XREF=sub_6c10+416, sub_6c10+456
0000000000006dfa         mov        edx, 0x92492493
0000000000006dff         mov        ecx, r8d
0000000000006e02         sub        ecx, dword [rsp+0x38]
0000000000006e06         add        ecx, 0x17e
0000000000006e0c         mov        eax, ecx
0000000000006e0e         sub        r8d, ecx
0000000000006e11         imul       edx
0000000000006e13         lea        eax, dword [rdx+rcx]
0000000000006e16         mov        edx, ecx
0000000000006e18         sar        edx, 0x1f
0000000000006e1b         sar        eax, 0x2
0000000000006e1e         sub        eax, edx
0000000000006e20         lea        edx, dword [rax*8]
0000000000006e27         sub        edx, eax
0000000000006e29         lea        ecx, dword [r8+rdx+3]
0000000000006e2e         mov        r8d, 0x1
0000000000006e34         test       ecx, ecx
0000000000006e36         jns        sub_6c10+559
0000000000006e38         mov        ecx, dword [rsp+0x40]
0000000000006e3c         xor        r8d, r8d

                     loc_6e3f:
0000000000006e3f         cmp        sil, 0x47                                   ; CODE XREF=sub_6c10+550, sub_76c9+135
0000000000006e43         je         loc_7586

0000000000006e49         cmp        sil, 0x67
0000000000006e4d         jne        loc_777f

0000000000006e53         mov        ecx, 0x51eb851f
0000000000006e58         mov        eax, edi
0000000000006e5a         mov        esi, edi
0000000000006e5c         imul       ecx
0000000000006e5e         mov        eax, edx
0000000000006e60         mov        edx, edi
0000000000006e62         sar        edx, 0x1f
0000000000006e65         sar        eax, 0x5
0000000000006e68         sub        eax, edx
0000000000006e6a         imul       eax, eax, 0x64
0000000000006e6d         sub        esi, eax
0000000000006e6f         add        esi, r8d
0000000000006e72         mov        eax, esi
0000000000006e74         imul       ecx
0000000000006e76         mov        eax, esi
0000000000006e78         sar        eax, 0x1f
0000000000006e7b         mov        ecx, edx
0000000000006e7d         sar        ecx, 0x5
0000000000006e80         sub        ecx, eax
0000000000006e82         imul       ecx, ecx, 0x64
0000000000006e85         sub        esi, ecx
0000000000006e87         mov        ecx, esi
0000000000006e89         jns        loc_6879

0000000000006e8f         mov        eax, 0xfffff894
0000000000006e94         sub        eax, r8d
0000000000006e97         cmp        edi, eax
0000000000006e99         jge        loc_793a

0000000000006e9f         neg        ecx
0000000000006ea1         test       r15d, r15d
0000000000006ea4         jne        loc_6882

                     loc_6eaa:
0000000000006eaa         mov        r15d, dword [rsp+0x1+arg_23]                ; CODE XREF=sub_6750+300, sub_7880+192
0000000000006eaf         mov        eax, 0x1
0000000000006eb4         cmp        r15d, 0x2b
0000000000006eb8         je         loc_791a

0000000000006ebe         mov        byte [rsp+0x1+arg_37], 0x0
0000000000006ec3         mov        byte [rsp+0x1+arg_2F], 0x0
0000000000006ec8         mov        edi, 0x2
0000000000006ecd         xor        esi, esi
0000000000006ecf         jmp        loc_6417
0000000000006ed4         cmp        r11d, 0x45
0000000000006ed8         je         __strftime_internal+592
0000000000006ede         mov        ecx, dword [r13+0xc]
0000000000006ee2         mov        edi, 0x2
0000000000006ee7         jmp        __strftime_internal+1376
0000000000006eec         mov        eax, dword [r13+0x18]
0000000000006ef0         mov        edx, 0x92492493
0000000000006ef5         mov        edi, 0x1
0000000000006efa         lea        ecx, dword [rax+6]
0000000000006efd         mov        eax, ecx
0000000000006eff         imul       edx
0000000000006f01         lea        eax, dword [rdx+rcx]
0000000000006f04         mov        edx, ecx
0000000000006f06         sar        edx, 0x1f
0000000000006f09         sar        eax, 0x2
0000000000006f0c         sub        eax, edx
0000000000006f0e         lea        edx, dword [rax*8]
0000000000006f15         sub        edx, eax
0000000000006f17         sub        ecx, edx
0000000000006f19         add        ecx, 0x1
0000000000006f1c         jmp        __strftime_internal+1376
0000000000006f21         cmp        r11d, 0x45
0000000000006f25         je         __strftime_internal+592
0000000000006f2b         mov        ecx, dword [r13+0x18]
0000000000006f2f         mov        edi, 0x1
0000000000006f34         jmp        __strftime_internal+1376
0000000000006f39         cmp        r11d, 0x45
0000000000006f3d         je         __strftime_internal+592
0000000000006f43         mov        eax, dword [r13+0x18]
0000000000006f47         mov        ecx, 0x92492493
0000000000006f4c         lea        esi, dword [rax+6]
0000000000006f4f         mov        eax, esi
0000000000006f51         imul       ecx
0000000000006f53         lea        eax, dword [rdx+rsi]
0000000000006f56         mov        edx, esi
0000000000006f58         sar        edx, 0x1f
0000000000006f5b         sar        eax, 0x2
0000000000006f5e         sub        eax, edx
0000000000006f60         lea        edx, dword [rax*8]
0000000000006f67         sub        edx, eax
0000000000006f69         mov        eax, edx
0000000000006f6b         mov        edx, dword [r13+0x1c]
0000000000006f6f         sub        eax, esi
0000000000006f71         lea        esi, dword [rax+rdx+7]
0000000000006f75         mov        eax, esi
0000000000006f77         imul       ecx
0000000000006f79         jmp        sub_6550+402
0000000000006f7e         cmp        r11d, 0x45
0000000000006f82         je         __strftime_internal+592
0000000000006f88         test       r8b, r8b
0000000000006f8b         je         __strftime_internal+965
0000000000006f91         mov        byte [rsp+0x30], r8b
0000000000006f96         jmp        __strftime_internal+962
0000000000006f9b         cmp        r11d, 0x45
0000000000006f9f         je         sub_6c10+2074
0000000000006fa5         mov        esi, dword [r13+0x14]
0000000000006fa9         mov        edx, 0x51eb851f
0000000000006fae         mov        eax, esi
0000000000006fb0         imul       edx
0000000000006fb2         mov        eax, edx
0000000000006fb4         mov        edx, esi
0000000000006fb6         sar        edx, 0x1f
0000000000006fb9         sar        eax, 0x5
0000000000006fbc         sub        eax, edx
0000000000006fbe         mov        edx, esi
0000000000006fc0         lea        ecx, dword [rax+0x13]
0000000000006fc3         imul       eax, eax, 0x64
0000000000006fc6         sub        edx, eax
0000000000006fc8         mov        eax, edx
0000000000006fca         shr        eax, 0x1f
0000000000006fcd         test       ecx, ecx
0000000000006fcf         setg       dl
0000000000006fd2         and        eax, edx
0000000000006fd4         cmp        esi, 0xfffff894
0000000000006fda         setl       byte [rsp+0x38]
0000000000006fdf         sub        ecx, eax
0000000000006fe1         cmp        esi, 0xfffff894
0000000000006fe7         setge      al
0000000000006fea         test       r15d, r15d
0000000000006fed         jne        sub_6750+316
0000000000006ff3         cmp        dword [rsp+0x2c], 0x2b
0000000000006ff8         mov        r15d, dword [rsp+0x2c]
0000000000006ffd         jne        sub_6750+326

                     loc_7003:
0000000000007003         mov        edi, 0x2                                    ; CODE XREF=sub_6750+320
0000000000007008         mov        edx, 0x63

                     loc_700d:
000000000000700d         cmp        edx, ecx                                    ; CODE XREF=sub_6c10+2477
000000000000700f         mov        byte [rsp+0x1+arg_37], 0x1
0000000000007014         mov        r15d, 0x2b
000000000000701a         jb         loc_6749

                     loc_7020:
0000000000007020         cmp        r10d, edi                                   ; CODE XREF=sub_7880+164
0000000000007023         mov        r15d, 0x2b
0000000000007029         setg       byte [rsp+0x1+arg_37]
000000000000702e         xor        esi, esi
0000000000007030         jmp        loc_6417
0000000000007035         test       r11d, r11d
0000000000007038         jne        __strftime_internal+592
000000000000703e         lea        rax, qword [aMdy]                           ; "%m/%d/%y"
0000000000007045         mov        dword [rsp+0x38], 0xffffffff
000000000000704d         mov        qword [rsp+0x40], rax
0000000000007052         jmp        __strftime_internal+1650
0000000000007057         test       r11d, r11d
000000000000705a         jne        __strftime_internal+592
0000000000007060         test       r15d, r15d
0000000000007063         jne        sub_76c9+404
0000000000007069         test       r10d, r10d
000000000000706c         jns        sub_76c9+404
0000000000007072         lea        rax, qword [aYmd]                           ; "%Y-%m-%d"
0000000000007079         mov        dword [rsp+0x38], 0x4
0000000000007081         mov        r15d, 0x2b
0000000000007087         mov        qword [rsp+0x40], rax
000000000000708c         jmp        __strftime_internal+1650
0000000000007091         movzx      ecx, byte [rbx-1]
0000000000007095         lea        r9, qword [rbx-1]
0000000000007099         mov        rdx, qword [rsp+8]                          ; CODE XREF=sub_76c9+364
000000000000709e         mov        eax, 0x0
00000000000070a3         sub        rdx, r14
00000000000070a6         test       r10d, r10d
00000000000070a9         cmovns     eax, r10d
00000000000070ad         cmp        cl, 0x25
00000000000070b0         cdqe
00000000000070b2         jne        __strftime_internal+587
00000000000070b8         test       rax, rax
00000000000070bb         mov        ecx, 0x1
00000000000070c0         mov        r12, r9
00000000000070c3         cmovne     rcx, rax
00000000000070c7         mov        r8d, 0x1
00000000000070cd         jmp        __strftime_internal+657
00000000000070d2         cmp        r11d, 0x45
00000000000070d6         je         __strftime_internal+592
00000000000070dc         mov        ecx, dword [r13+8]
00000000000070e0         mov        edi, 0x2
00000000000070e5         jmp        __strftime_internal+1376
00000000000070ea         cmp        r11d, 0x45
00000000000070ee         je         __strftime_internal+592
00000000000070f4         mov        ecx, dword [r13+4]
00000000000070f8         mov        edi, 0x2
00000000000070fd         jmp        __strftime_internal+1376
0000000000007102         cmp        r11d, 0x45
0000000000007106         je         __strftime_internal+592
000000000000710c         cmp        r10d, 0xffffffff
0000000000007110         je         sub_6c10+2641
0000000000007116         cmp        r10d, 0x8
000000000000711a         jg         sub_7880+169
0000000000007120         mov        ecx, dword [rsp+0x518]
0000000000007127         mov        esi, r10d
000000000000712a         mov        edi, 0x66666667
000000000000712f         nop
0000000000007130         mov        eax, ecx                                    ; CODE XREF=sub_6c10+1332
0000000000007132         add        esi, 0x1
0000000000007135         sar        ecx, 0x1f
0000000000007138         imul       edi
000000000000713a         sar        edx, 0x2
000000000000713d         sub        edx, ecx
000000000000713f         cmp        esi, 0x9
0000000000007142         mov        ecx, edx
0000000000007144         jne        sub_6c10+1312
0000000000007146         mov        edi, r10d                                   ; CODE XREF=sub_7880+176
0000000000007149         jmp        __strftime_internal+1376
000000000000714e         cmp        r11d, 0x45
0000000000007152         je         __strftime_internal+592
0000000000007158         mov        ecx, dword [rsp+0x68]
000000000000715c         mov        edi, 0x2
0000000000007161         jmp        __strftime_internal+1376
0000000000007166         cmp        r11d, 0x45
000000000000716a         je         __strftime_internal+592
0000000000007170         mov        ecx, dword [rsp+0x68]
0000000000007174         test       r15d, r15d                                  ; CODE XREF=sub_6c10+1652, sub_6c10+1671
0000000000007177         mov        edi, 0x2
000000000000717c         jne        __strftime_internal+1376
0000000000007182         mov        r15d, 0x5f
0000000000007188         jmp        __strftime_internal+1376
000000000000718d         cmp        r11d, 0x45
0000000000007191         je         __strftime_internal+592
0000000000007197         mov        eax, dword [r13+0x10]
000000000000719b         mov        byte [rsp+0x40], 0x0
00000000000071a0         mov        edi, 0x2
00000000000071a5         cmp        eax, 0xffffffff
00000000000071a8         lea        ecx, dword [rax+1]
00000000000071ab         setl       byte [rsp+0x38]
00000000000071b0         cmp        eax, 0xffffffff
00000000000071b3         setge      al
00000000000071b6         xor        esi, esi
00000000000071b8         jmp        __strftime_internal+1399
00000000000071bd         test       r10d, r10d
00000000000071c0         mov        ecx, 0x0
00000000000071c5         mov        eax, 0x1
00000000000071ca         cmovns     ecx, r10d
00000000000071ce         movsxd     rcx, ecx
00000000000071d1         test       rcx, rcx
00000000000071d4         cmove      rcx, rax
00000000000071d8         mov        rax, qword [rsp+8]
00000000000071dd         sub        rax, r14
00000000000071e0         cmp        rax, rcx
00000000000071e3         jbe        __strftime_internal+204
00000000000071e9         test       rbp, rbp
00000000000071ec         je         __strftime_internal+1592
00000000000071f2         cmp        r10d, 0x1
00000000000071f6         jle        sub_6c10+1570
00000000000071f8         movsxd     rdx, r10d
00000000000071fb         mov        qword [rsp+0x30], rcx
0000000000007200         sub        rdx, 0x1
0000000000007204         cmp        r15d, 0x30
0000000000007208         lea        r12, qword [rbp+rdx]
000000000000720d         je         sub_76c9+277
0000000000007213         cmp        r15d, 0x2b
0000000000007217         je         sub_76c9+277
000000000000721d         mov        rdi, rbp
0000000000007220         mov        esi, 0x20
0000000000007225         mov        rbp, r12
0000000000007228         call       j_memset                                    ; memset
000000000000722d         mov        rcx, qword [rsp+0x30]
0000000000007232         mov        byte [rbp], 0xa                             ; CODE XREF=sub_6c10+1510, sub_76c9+298
0000000000007236         add        rbp, 0x1
000000000000723a         jmp        __strftime_internal+1592
000000000000723f         xor        eax, eax
0000000000007241         jmp        __strftime_internal+1608
0000000000007246         cmp        r11d, 0x45
000000000000724a         je         __strftime_internal+592
0000000000007250         mov        eax, dword [r13+0x1c]
0000000000007254         mov        byte [rsp+0x40], 0x0
0000000000007259         mov        edi, 0x3
000000000000725e         cmp        eax, 0xffffffff
0000000000007261         lea        ecx, dword [rax+1]
0000000000007264         setl       byte [rsp+0x38]
0000000000007269         cmp        eax, 0xffffffff
000000000000726c         setge      al
000000000000726f         xor        esi, esi
0000000000007271         jmp        __strftime_internal+1399
0000000000007276         cmp        r11d, 0x45
000000000000727a         je         __strftime_internal+592
0000000000007280         mov        ecx, dword [r13+8]
0000000000007284         jmp        sub_6c10+1380
0000000000007289         cmp        r11d, 0x45
000000000000728d         je         __strftime_internal+592
0000000000007293         mov        ecx, dword [r13+0xc]
0000000000007297         jmp        sub_6c10+1380
000000000000729c         nop        dword [rax]

                     loc_72a0:
00000000000072a0         mov        eax, ecx                                    ; CODE XREF=__strftime_internal+1403, __strftime_internal+1411
00000000000072a2         neg        eax
00000000000072a4         cmp        byte [rsp+0x1+arg_2F], 0x0
00000000000072a9         cmovne     ecx, eax
00000000000072ac         jmp        loc_69d0
00000000000072b1         align      8

                     loc_72b8:
00000000000072b8         cmp        r15d, 0x2d                                  ; CODE XREF=sub_69a0+148
00000000000072bc         mov        byte [rsp+0x1+arg_2F], 0x2d
00000000000072c1         jne        loc_6a54

                     loc_72c7:
00000000000072c7         test       r10d, r10d                                  ; CODE XREF=sub_6c10+2409
00000000000072ca         mov        r11d, 0x0
00000000000072d0         mov        rax, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]
00000000000072d5         cmovns     r11d, r10d
00000000000072d9         mov        r12d, 0x1
00000000000072df         movsxd     r11, r11d
00000000000072e2         test       r11, r11
00000000000072e5         cmovne     r12, r11
00000000000072e9         sub        rax, r14
00000000000072ec         cmp        rax, r12
00000000000072ef         jbe        __strftime_internal+204

00000000000072f5         test       rbp, rbp
00000000000072f8         je         loc_735c

00000000000072fa         mov        eax, dword [rsp+0x1+arg_3F]
00000000000072fe         test       eax, eax
0000000000007300         jne        loc_7354

0000000000007302         cmp        r11, 0x1
0000000000007306         jbe        loc_7354

0000000000007308         movsxd     rax, r10d
000000000000730b         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000730e         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000007313         lea        rcx, qword [rax-1]
0000000000007317         mov        qword [rsp+0x1+arg_57], r9
000000000000731c         mov        qword [rsp+0x1+arg_4F], r8
0000000000007321         mov        qword [rsp+0x1+arg_47], r11
0000000000007326         mov        dword [rsp+0x1+arg_37], r10d
000000000000732b         mov        rdx, rcx                                    ; argument "__n" for method j_memset
000000000000732e         mov        qword [rsp+0x1+arg_2F], rcx
0000000000007333         call       j_memset                                    ; memset
0000000000007338         mov        rcx, qword [rsp+0x1+arg_2F]
000000000000733d         mov        r9, qword [rsp+0x1+arg_57]
0000000000007342         mov        r8, qword [rsp+0x1+arg_4F]
0000000000007347         mov        r11, qword [rsp+0x1+arg_47]
000000000000734c         mov        r10d, dword [rsp+0x1+arg_37]
0000000000007351         add        rbp, rcx

                     loc_7354:
0000000000007354         mov        byte [rbp], r15b                            ; CODE XREF=sub_6c10+1776, sub_6c10+1782
0000000000007358         add        rbp, 0x1

                     loc_735c:
000000000000735c         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6c10+1768
0000000000007361         lea        rcx, qword [r9+0x17]
0000000000007365         add        r14, r12
0000000000007368         mov        r15d, 0x2d
000000000000736e         mov        r12, rbx
0000000000007371         sub        rcx, r8
0000000000007374         sub        rdx, r14
0000000000007377         jmp        loc_6b75
000000000000737c         align      128

                     loc_7380:
0000000000007380         call       j_memcpy                                    ; memcpy, CODE XREF=__strftime_internal+781
0000000000007385         mov        rcx, qword [rsp+0x4f8+var_4C0]
000000000000738a         mov        r8, qword [rsp+0x4f8+var_4C8]
000000000000738f         jmp        loc_61c2
0000000000007394         align      8

                     loc_7398:
0000000000007398         mov        rdi, rbp                                    ; CODE XREF=__strftime_internal+1240
000000000000739b         mov        qword [rsp+0x1+arg_27], rcx
00000000000073a0         call       memcpy_lowcase                              ; memcpy_lowcase
00000000000073a5         mov        rcx, qword [rsp+0x1+arg_27]
00000000000073aa         jmp        loc_639b

                     loc_73af:
00000000000073af         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=__strftime_internal+1180, __strftime_internal+1190
00000000000073b2         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000073b7         call       j_memset                                    ; memset
00000000000073bc         mov        rbp, qword [rsp+0x1+arg_2F]
00000000000073c1         movzx      r8d, byte [rsp+0x1+arg_37]
00000000000073c7         mov        rcx, qword [rsp+0x1+arg_3F]
00000000000073cc         mov        r9, qword [rsp+0x1+arg_47]
00000000000073d1         jmp        loc_636e

                     loc_73d6:
00000000000073d6         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=__strftime_internal+710, __strftime_internal+720
00000000000073d9         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000073de         mov        rbp, rbx
00000000000073e1         call       j_memset                                    ; memset
00000000000073e6         mov        r9, qword [rsp+0x4f8+var_4C0]
00000000000073eb         mov        rcx, qword [rsp+0x4f8+var_4B8]
00000000000073f0         mov        r8, qword [rsp+0x4f8+var_4B0]
00000000000073f5         jmp        loc_6195

                     loc_73fa:
00000000000073fa         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_69a0+540, sub_69a0+550
00000000000073fd         mov        esi, 0x30                                   ; argument "__c" for method j_memset
0000000000007402         call       j_memset                                    ; memset
0000000000007407         mov        rbp, qword [rsp+0x1+arg_2F]
000000000000740c         mov        rcx, qword [rsp+0x1+arg_37]
0000000000007411         mov        r8, qword [rsp+0x1+arg_3F]
0000000000007416         jmp        loc_6be8
000000000000741b         mov        esi, 0x70                                   ; CODE XREF=__strftime_internal+1611
0000000000007420         mov        byte [rsp+0x30], 0x0
0000000000007425         jmp        __strftime_internal+965
000000000000742a         xor        edi, edi                                    ; CODE XREF=sub_6550+427, sub_6750+241, sub_6c10+911
000000000000742c         jmp        __strftime_internal+1420

                     loc_7431:
0000000000007431         mov        byte [rsp+0x1+arg_2F], 0x0                  ; CODE XREF=sub_6c10+2685

                     loc_7436:
0000000000007436         movsxd     r15, r12d                                   ; CODE XREF=sub_69a0+219
0000000000007439         cmp        r15, rdx
000000000000743c         jae        __strftime_internal+204

0000000000007442         test       rbp, rbp
0000000000007445         je         loc_7478

0000000000007447         mov        rdi, rbp                                    ; argument "__s" for method j_memset
000000000000744a         mov        rdx, r15                                    ; argument "__n" for method j_memset
000000000000744d         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000007452         mov        dword [rsp+0x1+arg_4F], r10d
0000000000007457         mov        qword [rsp+0x1+arg_47], r9
000000000000745c         add        rbp, r15
000000000000745f         mov        qword [rsp+0x1+arg_37], r8
0000000000007464         call       j_memset                                    ; memset
0000000000007469         mov        r10d, dword [rsp+0x1+arg_4F]
000000000000746e         mov        r9, qword [rsp+0x1+arg_47]
0000000000007473         mov        r8, qword [rsp+0x1+arg_37]

                     loc_7478:
0000000000007478         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6c10+2101
000000000000747d         mov        eax, r10d
0000000000007480         add        r14, r15
0000000000007483         sub        eax, r12d
0000000000007486         cmp        r10d, r12d
0000000000007489         mov        r10d, 0x0
000000000000748f         cmovg      r10d, eax
0000000000007493         sub        rdx, r14
0000000000007496         cmp        byte [rsp+0x1+arg_2F], 0x0
000000000000749b         jne        loc_75c2

00000000000074a1         add        r9, 0x17
00000000000074a5         movsxd     r11, r10d
00000000000074a8         mov        r12, rbx
00000000000074ab         mov        rcx, r9
00000000000074ae         mov        r15d, 0x5f
00000000000074b4         sub        rcx, r8
00000000000074b7         jmp        loc_6b75

                     loc_74bc:
00000000000074bc         test       r10d, r10d                                  ; CODE XREF=sub_69a0+209
00000000000074bf         mov        r11d, 0x0
00000000000074c5         mov        r12d, 0x1
00000000000074cb         cmovns     r11d, r10d
00000000000074cf         movsxd     r11, r11d
00000000000074d2         test       r11, r11
00000000000074d5         cmovne     r12, r11
00000000000074d9         cmp        r12, rdx
00000000000074dc         jae        __strftime_internal+204

00000000000074e2         test       rbp, rbp
00000000000074e5         je         loc_7560

00000000000074e7         mov        edi, dword [rsp+0x1+arg_3F]
00000000000074eb         test       edi, edi
00000000000074ed         jne        loc_7554

00000000000074ef         cmp        r11, 0x1
00000000000074f3         jbe        loc_7554

00000000000074f5         movsxd     rdx, r10d
00000000000074f8         mov        dword [rsp+0x1+arg_63], r10d
00000000000074fd         mov        qword [rsp+0x1+arg_57], r8
0000000000007502         sub        rdx, 0x1
0000000000007506         cmp        r15d, 0x30
000000000000750a         mov        qword [rsp+0x1+arg_4F], rcx
000000000000750f         lea        rax, qword [rbp+rdx]
0000000000007514         mov        qword [rsp+0x1+arg_47], r11
0000000000007519         mov        qword [rsp+0x1+arg_37], rax
000000000000751e         je         loc_78ef

0000000000007524         cmp        r15d, 0x2b
0000000000007528         je         loc_78ef

000000000000752e         mov        rdi, rbp                                    ; argument "__s" for method j_memset
0000000000007531         mov        esi, 0x20                                   ; argument "__c" for method j_memset
0000000000007536         call       j_memset                                    ; memset
000000000000753b         mov        rbp, qword [rsp+0x1+arg_37]
0000000000007540         mov        r10d, dword [rsp+0x1+arg_63]
0000000000007545         mov        r8, qword [rsp+0x1+arg_57]
000000000000754a         mov        rcx, qword [rsp+0x1+arg_4F]
000000000000754f         mov        r11, qword [rsp+0x1+arg_47]

                     loc_7554:
0000000000007554         movzx      eax, byte [rsp+0x1+arg_2F]                  ; CODE XREF=sub_6c10+2269, sub_6c10+2275, sub_7880+149
0000000000007559         add        rbp, 0x1
000000000000755d         mov        byte [rbp-1], al

                     loc_7560:
0000000000007560         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6c10+2261
0000000000007565         add        r14, r12
0000000000007568         mov        r12, rbx
000000000000756b         sub        rdx, r14
000000000000756e         jmp        loc_6b75

                     loc_7573:
0000000000007573         mov        r15d, 0x2b                                  ; CODE XREF=sub_69a0+169
0000000000007579         jmp        loc_72c7
000000000000757e         mov        r12, rbx                                    ; CODE XREF=sub_6750+389
0000000000007581         jmp        __strftime_internal+306

                     loc_7586:
0000000000007586         mov        eax, 0xfffff894                             ; CODE XREF=sub_6c10+563
000000000000758b         lea        ecx, dword [rdi+r8+0x76c]
0000000000007593         sub        eax, r8d
0000000000007596         cmp        edi, eax
0000000000007598         setl       byte [rsp+0x1+arg_2F]
000000000000759d         setge      al
00000000000075a0         test       r15d, r15d
00000000000075a3         je         loc_6730

00000000000075a9         cmp        r15d, 0x2b                                  ; CODE XREF=sub_6550+474
00000000000075ad         jne        loc_673f

                     loc_75b3:
00000000000075b3         mov        edi, 0x4                                    ; CODE XREF=sub_6550+489
00000000000075b8         mov        edx, 0x270f
00000000000075bd         jmp        loc_700d

                     loc_75c2:
00000000000075c2         movsxd     r15, r10d                                   ; CODE XREF=sub_6c10+2187
00000000000075c5         mov        r12d, 0x1
00000000000075cb         test       r15, r15
00000000000075ce         cmovne     r12, r15
00000000000075d2         cmp        r12, rdx
00000000000075d5         jae        __strftime_internal+204

00000000000075db         test       rbp, rbp
00000000000075de         je         loc_763b

00000000000075e0         mov        r11d, dword [rsp+0x1+arg_3F]
00000000000075e5         test       r11d, r11d
00000000000075e8         jne        loc_762f

00000000000075ea         cmp        r15, 0x1
00000000000075ee         jbe        loc_762f

00000000000075f0         lea        rcx, qword [r15-1]
00000000000075f4         mov        rdi, rbp                                    ; argument "__s" for method j_memset
00000000000075f7         mov        esi, 0x20                                   ; argument "__c" for method j_memset
00000000000075fc         mov        dword [rsp+0x1+arg_57], r10d
0000000000007601         mov        qword [rsp+0x1+arg_4F], r9
0000000000007606         mov        rdx, rcx                                    ; argument "__n" for method j_memset
0000000000007609         mov        qword [rsp+0x1+arg_47], r8
000000000000760e         mov        qword [rsp+0x1+arg_37], rcx
0000000000007613         call       j_memset                                    ; memset
0000000000007618         mov        rcx, qword [rsp+0x1+arg_37]
000000000000761d         mov        r10d, dword [rsp+0x1+arg_57]
0000000000007622         mov        r9, qword [rsp+0x1+arg_4F]
0000000000007627         mov        r8, qword [rsp+0x1+arg_47]
000000000000762c         add        rbp, rcx

                     loc_762f:
000000000000762f         movzx      eax, byte [rsp+0x1+arg_2F]                  ; CODE XREF=sub_6c10+2520, sub_6c10+2526
0000000000007634         add        rbp, 0x1
0000000000007638         mov        byte [rbp-1], al

                     loc_763b:
000000000000763b         mov        rdx, qword [rsp+0x1+var_FFFFFFFFFFFFFFF9]   ; CODE XREF=sub_6c10+2510
0000000000007640         add        r9, 0x17
0000000000007644         add        r14, r12
0000000000007647         mov        rcx, r9
000000000000764a         mov        r11, r15
000000000000764d         mov        r12, rbx
0000000000007650         sub        rcx, r8
0000000000007653         mov        r15d, 0x5f
0000000000007659         sub        rdx, r14
000000000000765c         jmp        loc_6b75
0000000000007661         mov        ecx, dword [rsp+0x518]                      ; CODE XREF=sub_6c10+1280
0000000000007668         mov        edi, 0x9
000000000000766d         mov        r10d, 0x9
0000000000007673         jmp        __strftime_internal+1376
0000000000007678         mov        r12, rbx                                    ; CODE XREF=sub_6550+243
000000000000767b         mov        r9, rbx
000000000000767e         mov        r8d, 0x1
0000000000007684         jmp        __strftime_internal+657

                     loc_7689:
0000000000007689         cmp        r15d, 0x5f                                  ; CODE XREF=sub_6c10+233
000000000000768d         je         loc_7431

0000000000007693         movsxd     rax, dword [rsp+0x1+arg_3F]
0000000000007698         cmp        rax, rdx
000000000000769b         jae        __strftime_internal+204

00000000000076a1         movsxd     r9, r12d
00000000000076a4         mov        r12, rbx
00000000000076a7         jmp        loc_6b2e

                     loc_76ac:
00000000000076ac         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_6550+95, sub_6550+105
00000000000076af         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000076b4         call       j_memset                                    ; memset
00000000000076b9         mov        rbp, qword [rsp+80]
00000000000076be         mov        r11, qword [rsp+88]
00000000000076c3         jmp        loc_65d6
00000000000076c8         db  0x41 ; 'A'                                         ; CODE XREF=sub_6c10+401


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_A7: int8_t, 175
        ;    arg_A4: int8_t, 172
        ;    arg_A2: int16_t, 170
        ;    arg_63: int32_t, 107
        ;    arg_57: int64_t, 95
        ;    arg_4F: int64_t, 87
        ;    arg_47: int64_t, 79
        ;    arg_3F: int64_t, 71
        ;    arg_37: int64_t, 63
        ;    arg_2F: int64_t, 55
        ;    arg_27: int64_t, 47
        ;    arg_23: int32_t, 43
        ;    var_FFFFFFFFFFFFFFF9: int64_t, 7


                     sub_76c9:
00000000000076c9         sub        esp, 0x1
00000000000076cc         mov        edx, 0x16d
00000000000076d1         test       r12b, 0x3
00000000000076d5         jne        loc_7713

00000000000076d7         mov        eax, r12d
00000000000076da         mov        edx, 0x51eb851f
00000000000076df         imul       edx
00000000000076e1         mov        eax, edx
00000000000076e3         mov        edx, r12d
00000000000076e6         sar        edx, 0x1f
00000000000076e9         sar        eax, 0x5
00000000000076ec         sub        eax, edx
00000000000076ee         mov        edx, 0x16e
00000000000076f3         imul       eax, eax, 0x64
00000000000076f6         cmp        r12d, eax
00000000000076f9         jne        loc_7713

00000000000076fb         mov        eax, r12d
00000000000076fe         mov        ecx, 0x190
0000000000007703         cdq
0000000000007704         idiv       ecx
0000000000007706         cmp        edx, 0x1
0000000000007709         sbb        edx, edx
000000000000770b         not        edx
000000000000770d         add        edx, 0x16e

                     loc_7713:
0000000000007713         add        r8d, edx                                    ; CODE XREF=sub_76c9+12, sub_76c9+48
0000000000007716         mov        edx, 0x92492493
000000000000771b         mov        ecx, r8d
000000000000771e         sub        ecx, dword [rsp+0x1+arg_2F]
0000000000007722         add        ecx, 0x17e
0000000000007728         mov        eax, ecx
000000000000772a         sub        r8d, ecx
000000000000772d         imul       edx
000000000000772f         lea        eax, dword [rdx+rcx]
0000000000007732         mov        edx, ecx
0000000000007734         sar        edx, 0x1f
0000000000007737         sar        eax, 0x2
000000000000773a         sub        eax, edx
000000000000773c         lea        edx, dword [rax*8]
0000000000007743         sub        edx, eax
0000000000007745         lea        ecx, dword [r8+rdx+3]
000000000000774a         mov        r8d, 0xffffffff
0000000000007750         jmp        loc_6e3f
0000000000007755         imul       esi, esi, 0x64                              ; CODE XREF=sub_6750+527, sub_6750+545
0000000000007758         mov        byte [rsp+0x40], 0x1
000000000000775d         mov        edi, 0x9
0000000000007762         imul       eax, r12d, 0x2710
0000000000007769         add        eax, esi
000000000000776b         mov        esi, 0x14
0000000000007770         add        ecx, eax
0000000000007772         movzx      eax, byte [rsp+0x38]
0000000000007777         xor        eax, 0x1
000000000000777a         jmp        __strftime_internal+1399

                     loc_777f:
000000000000777f         mov        eax, ecx                                    ; CODE XREF=sub_6c10+573
0000000000007781         mov        edx, 0x92492493
0000000000007786         mov        edi, 0x2
000000000000778b         imul       edx
000000000000778d         lea        eax, dword [rdx+rcx]
0000000000007790         sar        ecx, 0x1f
0000000000007793         sar        eax, 0x2
0000000000007796         sub        eax, ecx
0000000000007798         mov        ecx, eax
000000000000779a         add        ecx, 0x1
000000000000779d         jmp        loc_6400
00000000000077a2         movzx      eax, byte [rsp+0x38]                        ; CODE XREF=sub_6750+511, sub_6750+553
00000000000077a7         mov        byte [rsp+0x40], 0x1
00000000000077ac         mov        edi, 0x6
00000000000077b1         imul       ecx, r12d, 0x64
00000000000077b5         xor        eax, 0x1
00000000000077b8         add        ecx, esi
00000000000077ba         mov        esi, 0x4
00000000000077bf         jmp        __strftime_internal+1399
00000000000077c4         mov        rdi, rbp                                    ; CODE XREF=__strftime_internal+1543, __strftime_internal+1553
00000000000077c7         mov        esi, 0x30
00000000000077cc         mov        rbp, r12
00000000000077cf         call       j_memset                                    ; memset
00000000000077d4         mov        rcx, qword [rsp+0x30]
00000000000077d9         jmp        __strftime_internal+1580
00000000000077de         mov        rdi, rbp                                    ; CODE XREF=sub_6c10+1533, sub_6c10+1543
00000000000077e1         mov        esi, 0x30
00000000000077e6         mov        rbp, r12
00000000000077e9         call       j_memset                                    ; memset
00000000000077ee         mov        rcx, qword [rsp+0x30]
00000000000077f3         jmp        sub_6c10+1570

                     loc_77f8:
00000000000077f8         call       j_memcpy                                    ; memcpy, CODE XREF=sub_6750+213
00000000000077fd         mov        rcx, qword [rsp+48]
0000000000007802         jmp        loc_6835

                     loc_7807:
0000000000007807         mov        rsi, qword [rsp+32]                         ; argument #2 for method memcpy_lowcase, CODE XREF=sub_6750+186
000000000000780c         mov        rdx, r12                                    ; argument #3 for method memcpy_lowcase
000000000000780f         mov        rdi, rbp                                    ; argument #1 for method memcpy_lowcase
0000000000007812         mov        qword [rsp+48], rcx
0000000000007817         call       memcpy_lowcase                              ; memcpy_lowcase
000000000000781c         mov        rcx, qword [rsp+48]
0000000000007821         jmp        loc_6835
0000000000007826         mov        byte [rsp+0x30], al                         ; CODE XREF=sub_6750+359
000000000000782a         jmp        __strftime_internal+592
000000000000782f         movzx      ecx, byte [rbx]                             ; CODE XREF=sub_6750+537
0000000000007832         mov        r9, rbx
0000000000007835         jmp        sub_6c10+1161
000000000000783a         lea        rcx, qword [rbx+2]                          ; CODE XREF=sub_6c10+273
000000000000783e         mov        r8d, 0x1
0000000000007844         mov        rdx, rcx                                    ; CODE XREF=sub_76c9+402
0000000000007847         add        rcx, 0x1
000000000000784b         movzx      eax, byte [rcx-1]
000000000000784f         add        r8, 0x1
0000000000007853         cmp        al, 0x3a
0000000000007855         jne        sub_6c10+285
000000000000785b         jmp        sub_76c9+379
000000000000785d         mov        esi, r10d                                   ; CODE XREF=sub_6c10+1107, sub_6c10+1116
0000000000007860         mov        eax, 0x0
0000000000007865         sub        esi, 0x6
0000000000007868         cmovns     eax, esi
000000000000786b         mov        dword [rsp+0x38], eax
000000000000786f         lea        rax, qword [aYmd]                           ; "%Y-%m-%d"
0000000000007876         mov        qword [rsp+0x40], rax
000000000000787b         jmp        __strftime_internal+1650


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7880:
0000000000007880         imul       ecx, r12d, 0x64                             ; CODE XREF=sub_6750+517
0000000000007884         xor        esi, esi
0000000000007886         mov        byte [rsp+64], 0x1
000000000000788b         mov        edi, 0x5
0000000000007890         add        ecx, eax
0000000000007892         movzx      eax, byte [rsp+56]
0000000000007897         xor        eax, 0x1
000000000000789a         jmp        __strftime_internal+1399
                        ; endp

                     loc_789f:
000000000000789f         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_6750+138, sub_6750+148
00000000000078a2         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000078a7         call       j_memset                                    ; memset
00000000000078ac         mov        rbp, qword [rsp+56]
00000000000078b1         movzx      r8d, byte [rsp+64]
00000000000078b7         mov        rcx, qword [rsp+72]
00000000000078bc         jmp        loc_6807

                     loc_78c1:
00000000000078c1         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_69a0+336, sub_69a0+346
00000000000078c4         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000078c9         mov        rbp, r12
00000000000078cc         call       j_memset                                    ; memset
00000000000078d1         mov        rcx, qword [rsp+0x1+arg_37]
00000000000078d6         mov        r9, qword [rsp+0x1+arg_47]
00000000000078db         mov        r8, qword [rsp+0x1+arg_4F]
00000000000078e0         jmp        loc_6b1f
00000000000078e5         mov        esi, 0x30                                   ; CODE XREF=sub_6550+294, sub_6550+309
00000000000078ea         jmp        sub_6550+315

                     loc_78ef:
00000000000078ef         mov        rdi, rbp                                    ; argument "__s" for method j_memset, CODE XREF=sub_6c10+2318, sub_6c10+2328
00000000000078f2         mov        esi, 0x30                                   ; argument "__c" for method j_memset
00000000000078f7         call       j_memset                                    ; memset
00000000000078fc         mov        rbp, qword [rsp+0x1+arg_37]
0000000000007901         mov        r11, qword [rsp+0x1+arg_47]
0000000000007906         mov        rcx, qword [rsp+0x1+arg_4F]
000000000000790b         mov        r8, qword [rsp+0x1+arg_57]
0000000000007910         mov        r10d, dword [rsp+0x1+arg_63]
0000000000007915         jmp        loc_7554

                     loc_791a:
000000000000791a         mov        byte [rsp+0x1+arg_2F], 0x0                  ; CODE XREF=sub_6c10+680
000000000000791f         mov        edi, 0x2
0000000000007924         jmp        loc_7020
0000000000007929         mov        ecx, dword [rsp+0x518]                      ; CODE XREF=sub_6c10+1290
0000000000007930         jmp        sub_6c10+1334

                     loc_7935:
0000000000007935         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=__strftime_internal+227
                        ; endp

                     loc_793a:
000000000000793a         add        ecx, 0x64                                   ; CODE XREF=sub_6c10+649
000000000000793d         test       r15d, r15d
0000000000007940         je         loc_6eaa

0000000000007946         jmp        loc_6882


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_794b:
000000000000794b         xor        edi, edi                                    ; CODE XREF=__strftime_internal+981
000000000000794d         jmp        __strftime_internal+1436
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7952:
0000000000007952         nop        dword [rax]                                 ; End of unwind block (FDE at 0xf28c)
0000000000007956         nop        word [cs:rax+rax]
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_11: int8_t, -17


                     nstrftime:
0000000000007960         sub        rsp, 0x18                                   ; Begin of unwind block (FDE at 0xf304), CODE XREF=init_header+173, init_header+219
0000000000007964         mov        rax, qword [fs:0x28]
000000000000796d         mov        qword [rsp+0x18+var_10], rax
0000000000007972         xor        eax, eax
0000000000007974         mov        byte [rsp+0x18+var_11], 0x0
0000000000007979         push       r9
000000000000797b         xor        r9d, r9d
000000000000797e         push       r8
0000000000007980         xor        r8d, r8d
0000000000007983         lea        rax, qword [rsp+0x28+var_11]
0000000000007988         push       rax
0000000000007989         push       0xffffffffffffffff
000000000000798b         call       __strftime_internal                         ; __strftime_internal
0000000000007990         add        rsp, 0x20
0000000000007994         mov        rdx, qword [rsp+0x18+var_10]
0000000000007999         xor        rdx, qword [fs:0x28]
00000000000079a2         jne        loc_79a9

00000000000079a4         add        rsp, 0x18
00000000000079a8         ret
                        ; endp

                     loc_79a9:
00000000000079a9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=nstrftime+66
                        ; endp
00000000000079ae         align      16                                          ; End of unwind block (FDE at 0xf304)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
00000000000079b0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xf334), CODE XREF=main+48
00000000000079b3         push       rbx
00000000000079b4         je         loc_7a2d

00000000000079b6         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
00000000000079bb         mov        rbx, rdi
00000000000079be         call       j_strrchr                                   ; strrchr
00000000000079c3         test       rax, rax
00000000000079c6         je         loc_7a1d

00000000000079c8         lea        r8, qword [rax+1]
00000000000079cc         mov        rdx, r8
00000000000079cf         sub        rdx, rbx
00000000000079d2         cmp        rdx, 0x6
00000000000079d6         jle        loc_7a1d

00000000000079d8         lea        rsi, qword [rax-6]
00000000000079dc         lea        rdi, qword [aLibs]                          ; "/.libs/"
00000000000079e3         mov        ecx, 0x7
00000000000079e8         rep  cmpsb byte [rsi], byte [rdi]
00000000000079ea         seta       dl
00000000000079ed         sbb        dl, 0x0
00000000000079f0         test       dl, dl
00000000000079f2         jne        loc_7a1d

00000000000079f4         lea        rdi, qword [aLibs+8]                        ; 0xdaa0
00000000000079fb         mov        ecx, 0x3
0000000000007a00         mov        rsi, r8
0000000000007a03         mov        rbx, r8
0000000000007a06         rep  cmpsb byte [rsi], byte [rdi]
0000000000007a08         seta       dl
0000000000007a0b         sbb        dl, 0x0
0000000000007a0e         test       dl, dl
0000000000007a10         jne        loc_7a1d

0000000000007a12         lea        rbx, qword [rax+4]
0000000000007a16         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_7a1d:
0000000000007a1d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
0000000000007a24         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
0000000000007a2b         pop        rbx
0000000000007a2c         ret
                        ; endp

                     loc_7a2d:
0000000000007a2d         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
0000000000007a34         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
0000000000007a3b         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
0000000000007a40         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
0000000000007a45         call       j_fwrite                                    ; fwrite
0000000000007a4a         call       j_abort                                     ; abort
                        ; endp
0000000000007a4f         align      16                                          ; End of unwind block (FDE at 0xf334)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
0000000000007a50         push       rbp                                         ; Begin of unwind block (FDE at 0xf354), CODE XREF=sub_8280+2597, sub_8280+2619
0000000000007a51         push       rbx
0000000000007a52         mov        rbp, rdi
0000000000007a55         mov        ebx, esi
0000000000007a57         sub        rsp, 0x8
0000000000007a5b         call       locale_charset                              ; locale_charset
0000000000007a60         movzx      edx, byte [rax]
0000000000007a63         and        edx, 0xffffffdf
0000000000007a66         cmp        dl, 0x55
0000000000007a69         je         loc_7ae0

0000000000007a6b         cmp        dl, 0x47
0000000000007a6e         je         loc_7a90

                     loc_7a70:
0000000000007a70         lea        rax, qword [aLibs+27]                       ; 0xdab3, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
0000000000007a77         lea        rdx, qword [aInvalidSsArgum+25]             ; 0xe529
0000000000007a7e         cmp        ebx, 0x9
0000000000007a81         cmovne     rax, rdx
0000000000007a85         add        rsp, 0x8
0000000000007a89         pop        rbx
0000000000007a8a         pop        rbp
0000000000007a8b         ret
                        ; endp
0000000000007a8c         align      16

                     loc_7a90:
0000000000007a90         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000007a94         and        edx, 0xffffffdf
0000000000007a97         cmp        dl, 0x42
0000000000007a9a         jne        loc_7a70

0000000000007a9c         cmp        byte [rax+2], 0x31
0000000000007aa0         jne        loc_7a70

0000000000007aa2         cmp        byte [rax+3], 0x38
0000000000007aa6         jne        loc_7a70

0000000000007aa8         cmp        byte [rax+4], 0x30
0000000000007aac         jne        loc_7a70

0000000000007aae         cmp        byte [rax+5], 0x33
0000000000007ab2         jne        loc_7a70

0000000000007ab4         cmp        byte [rax+6], 0x30
0000000000007ab8         jne        loc_7a70

0000000000007aba         cmp        byte [rax+7], 0x0
0000000000007abe         jne        loc_7a70

0000000000007ac0         cmp        byte [rbp], 0x60
0000000000007ac4         lea        rax, qword [aLibs+20]                       ; 0xdaac
0000000000007acb         lea        rdx, qword [aLibs+24]                       ; 0xdab0
0000000000007ad2         cmovne     rax, rdx
0000000000007ad6         add        rsp, 0x8
0000000000007ada         pop        rbx
0000000000007adb         pop        rbp
0000000000007adc         ret
                        ; endp
0000000000007add         align      32

                     loc_7ae0:
0000000000007ae0         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000007ae4         and        edx, 0xffffffdf
0000000000007ae7         cmp        dl, 0x54
0000000000007aea         jne        loc_7a70

0000000000007aec         movzx      edx, byte [rax+2]
0000000000007af0         and        edx, 0xffffffdf
0000000000007af3         cmp        dl, 0x46
0000000000007af6         jne        loc_7a70

0000000000007afc         cmp        byte [rax+3], 0x2d
0000000000007b00         jne        loc_7a70

0000000000007b06         cmp        byte [rax+4], 0x38
0000000000007b0a         jne        loc_7a70

0000000000007b10         cmp        byte [rax+5], 0x0
0000000000007b14         jne        loc_7a70

0000000000007b1a         cmp        byte [rbp], 0x60
0000000000007b1e         lea        rax, qword [aLibs+12]                       ; 0xdaa4
0000000000007b25         lea        rdx, qword [aLibs+16]                       ; 0xdaa8
0000000000007b2c         cmovne     rax, rdx
0000000000007b30         add        rsp, 0x8
0000000000007b34         pop        rbx
0000000000007b35         pop        rbp
0000000000007b36         ret
                        ; endp
0000000000007b37         align      64                                          ; End of unwind block (FDE at 0xf354)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
0000000000007b40         push       r15                                         ; Begin of unwind block (FDE at 0xf398), CODE XREF=sub_8280+1165, sub_8280+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
0000000000007b42         push       r14
0000000000007b44         mov        r15d, r8d
0000000000007b47         push       r13
0000000000007b49         push       r12
0000000000007b4b         mov        r14, rdi
0000000000007b4e         push       rbp
0000000000007b4f         push       rbx
0000000000007b50         mov        ebx, r9d
0000000000007b53         mov        r13, rsi
0000000000007b56         mov        rbp, rcx
0000000000007b59         and        ebx, 0x2
0000000000007b5c         sub        rsp, 0xb8
0000000000007b63         mov        rax, qword [rsp+0xe8+arg_0]
0000000000007b6b         mov        qword [rsp+0xe8+var_D8], rdx
0000000000007b70         mov        dword [rsp+0xe8+var_E0], r8d
0000000000007b75         mov        dword [rsp+0xe8+var_70], r9d
0000000000007b7a         mov        qword [rsp+0xe8+var_C8], rax
0000000000007b7f         mov        rax, qword [rsp+0xe8+arg_8]
0000000000007b87         mov        qword [rsp+0xe8+var_80], rax
0000000000007b8c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000007b94         mov        qword [rsp+0xe8+var_88], rax
0000000000007b99         mov        rax, qword [fs:0x28]
0000000000007ba2         mov        qword [rsp+0xe8+var_40], rax
0000000000007baa         xor        eax, eax
0000000000007bac         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000007bb1         cmp        r15d, 0xa
0000000000007bb5         mov        qword [rsp+0xe8+var_90], rax
0000000000007bba         ja         loc_8d6f

0000000000007bc0         lea        rcx, qword [switch_table_db20]              ; switch_table_db20
0000000000007bc7         mov        edx, r15d
0000000000007bca         movsxd     rax, dword [rcx+rdx*4]
0000000000007bce         add        rax, rcx
0000000000007bd1         jmp        rax                                         ; switch statement using table at 0xdb20, with 11 cases, 0x7bd3,0x87a4,0x8800,0x8855,0x889a,0x88d4,0x897a,0x89b4,0x8ba8

                     loc_7bd3:
0000000000007bd3         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_8280+1318
0000000000007bd8         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000007bdd         xor        r12d, r12d
0000000000007be0         mov        qword [rsp+0xe8+var_98], 0x0
0000000000007be9         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007bee         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_7bf3:
0000000000007bf3         lea        rax, qword [aInvalidSsArgum+25]             ; 0xe529, CODE XREF=sub_8280+1876
0000000000007bfa         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000007c03         xor        r15d, r15d
0000000000007c06         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000007c0e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_7c13:
0000000000007c13         xor        r11d, r11d                                  ; CODE XREF=sub_8280+180, sub_8280+1400, sub_8280+1488, sub_8280+1557, sub_8280+1615, sub_8280+1781, sub_8280+1839, sub_8280+2408, sub_8280+2485
0000000000007c16         mov        rax, rbp
0000000000007c19         mov        r8d, r12d
0000000000007c1c         mov        rbp, r11
0000000000007c1f         mov        r11, rax
0000000000007c22         nop        word [rax+rax]

                     loc_7c28:
0000000000007c28         cmp        r11, rbp                                    ; CODE XREF=sub_7d30+194
0000000000007c2b         setne      r12b
0000000000007c2f         cmp        r11, 0xffffffffffffffff
0000000000007c33         jne        loc_7c42

0000000000007c35         mov        rax, qword [rsp+0xe8+var_D8]
0000000000007c3a         cmp        byte [rax+rbp], 0x0
0000000000007c3e         setne      r12b

                     loc_7c42:
0000000000007c42         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
0000000000007c45         je         loc_82a0

0000000000007c4b         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000007c50         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000007c55         lea        r9, qword [rdi+rbp]
0000000000007c59         setne      al
0000000000007c5c         and        al, byte [rsp+0xe8+var_DB]
0000000000007c60         mov        r10d, eax
0000000000007c63         je         loc_7d10

0000000000007c69         mov        rax, qword [rsp+0xe8+var_D0]
0000000000007c6e         test       rax, rax
0000000000007c71         je         loc_80a0

0000000000007c77         cmp        r11, 0xffffffffffffffff
0000000000007c7b         lea        rbx, qword [rbp+rax]
0000000000007c80         jne        loc_7cb0

0000000000007c82         cmp        rax, 0x1
0000000000007c86         jbe        loc_7cb0

0000000000007c88         mov        byte [rsp+0xe8+var_B0], r8b
0000000000007c8d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000007c92         mov        qword [rsp+0xe8+var_C0], r9
0000000000007c97         call       j_strlen                                    ; strlen
0000000000007c9c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000007ca2         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000007ca8         mov        r11, rax
0000000000007cab         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_7cb0:
0000000000007cb0         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000007cb3         mov        byte [rsp+0xe8+var_C0], r10b
0000000000007cb8         ja         loc_8270

0000000000007cbe         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000007cc3         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000007cc8         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
0000000000007ccb         mov        qword [rsp+0xe8+var_A8], r11
0000000000007cd0         mov        byte [rsp+0xe8+var_B0], r8b
0000000000007cd5         mov        qword [rsp+0xe8+var_B8], r9
0000000000007cda         call       j_memcmp                                    ; memcmp
0000000000007cdf         test       eax, eax
0000000000007ce1         mov        r9, qword [rsp+0xe8+var_B8]
0000000000007ce6         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000007cec         mov        r11, qword [rsp+0xe8+var_A8]
0000000000007cf1         jne        loc_8270

0000000000007cf7         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000007cfc         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000007d02         jne        loc_8c85

0000000000007d08         nop        dword [rax+rax]

                     loc_7d10:
0000000000007d10         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_8260+19
0000000000007d14         cmp        bl, 0x7e
0000000000007d17         ja         loc_8038

0000000000007d1d         lea        rcx, qword [switch_table_db20+44]           ; 0xdb4c
0000000000007d24         movzx      edx, bl
0000000000007d27         movsxd     rax, dword [rcx+rdx*4]
0000000000007d2b         add        rax, rcx
0000000000007d2e         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7d30:
0000000000007d30         xor        r10d, r10d
0000000000007d33         cmp        r11, 0x1
0000000000007d37         setne      al
0000000000007d3a         cmp        r11, 0xffffffffffffffff
0000000000007d3e         jne        loc_7d4c

0000000000007d40         mov        rax, qword [rsp+arg_8]
0000000000007d45         cmp        byte [rax+1], 0x0
0000000000007d49         setne      al

                     loc_7d4c:
0000000000007d4c         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7d30+14
0000000000007d51         sete       dl
0000000000007d54         test       al, al
0000000000007d56         je         loc_7fa8

                     loc_7d5c:
0000000000007d5c         xor        r12d, r12d                                  ; CODE XREF=sub_7fa0+11
0000000000007d5f         xor        eax, eax
0000000000007d61         nop        dword [rax]
                        ; endp

                     loc_7d68:
0000000000007d68         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_7f50+50, sub_8020+119
0000000000007d6d         jne        loc_7e82

0000000000007d73         test       dl, dl
0000000000007d75         jne        loc_7e82

                     loc_7d7b:
0000000000007d7b         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_7e30+87
0000000000007d80         test       rsi, rsi
0000000000007d83         je         loc_7d99

0000000000007d85         mov        edx, ebx
0000000000007d87         shr        dl, 0x5
0000000000007d8a         movzx      edx, dl
0000000000007d8d         mov        edx, dword [rsi+rdx*4]
0000000000007d90         bt         edx, ebx
0000000000007d93         jb         loc_7ee3

                     loc_7d99:
0000000000007d99         test       r10b, r10b                                  ; CODE XREF=sub_7d30+83, sub_7e30+93
0000000000007d9c         jne        loc_7ee3

0000000000007da2         xor        eax, 0x1
0000000000007da5         add        rbp, 0x1
0000000000007da9         and        eax, r8d

                     loc_7dac:
0000000000007dac         test       al, al                                      ; CODE XREF=sub_8280+936
0000000000007dae         je         loc_7dd0

0000000000007db0         cmp        r13, r15
0000000000007db3         jbe        loc_7dba

0000000000007db5         mov        byte [r14+r15], 0x27

                     loc_7dba:
0000000000007dba         lea        rax, qword [r15+1]                          ; CODE XREF=sub_7d30+131
0000000000007dbe         cmp        r13, rax
0000000000007dc1         jbe        loc_7dc9

0000000000007dc3         mov        byte [r14+r15+1], 0x27

                     loc_7dc9:
0000000000007dc9         add        r15, 0x2                                    ; CODE XREF=sub_7d30+145
0000000000007dcd         xor        r8d, r8d

                     loc_7dd0:
0000000000007dd0         cmp        r15, r13                                    ; CODE XREF=sub_7d30+126, sub_7e30+275, sub_8280+869
0000000000007dd3         jae        loc_7dd9

0000000000007dd5         mov        byte [r14+r15], bl

                     loc_7dd9:
0000000000007dd9         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_7d30+163
0000000000007dde         add        r15, 0x1
0000000000007de2         mov        eax, 0x0
0000000000007de7         test       r12b, r12b
0000000000007dea         cmove      edi, eax
0000000000007ded         mov        byte [rsp+0xe8+var_DA], dil
0000000000007df2         jmp        loc_7c28
0000000000007df7         align      512


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7e00:
0000000000007e00         xor        r10d, r10d
0000000000007e03         mov        eax, dword [rsp+arg_0]
0000000000007e07         cmp        eax, 0x2
0000000000007e0a         je         loc_83c8

0000000000007e10         cmp        eax, 0x5
0000000000007e13         je         loc_8388

0000000000007e19         cmp        eax, 0x2
0000000000007e1c         mov        ebx, 0x3f
0000000000007e21         sete       dl
0000000000007e24         xor        r12d, r12d
0000000000007e27         xor        eax, eax
0000000000007e29         jmp        sub_7d30+56
                        ; endp
0000000000007e2e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_7e30:
0000000000007e30         xor        r10d, r10d
0000000000007e33         cmp        dword [rsp+arg_0], 0x2
0000000000007e38         je         loc_8340

0000000000007e3e         mov        byte [rsp+arg_74], r12b
0000000000007e43         xor        edx, edx
0000000000007e45         xor        eax, eax
0000000000007e47         mov        ebx, 0x27
0000000000007e4c         jmp        sub_7d30+56
                        ; endp
0000000000007e51         nop        dword [rax]
0000000000007e58         mov        edx, 0x9
0000000000007e5d         mov        ebx, 0x74

                     loc_7e62:
0000000000007e62         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7ff0+10, sub_80e0+37, sub_8220+53
0000000000007e67         sete       al
0000000000007e6a         and        al, byte [rsp+arg_7]
0000000000007e6e         jne        sub_7fa0+30

0000000000007e74         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_7e30+114
0000000000007e79         jne        loc_7ee0

                     loc_7e7b:
0000000000007e7b         mov        ebx, edx                                    ; CODE XREF=sub_7f50+18
0000000000007e7d         xor        r12d, r12d
0000000000007e80         xor        eax, eax
                        ; endp

                     loc_7e82:
0000000000007e82         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_7d30+61, sub_7d30+69
0000000000007e87         jne        loc_7d7b

0000000000007e8d         jmp        loc_7d99
0000000000007e92         nop        word [rax+rax]
0000000000007e98         mov        edx, 0x8
0000000000007e9d         mov        ebx, 0x62
0000000000007ea2         jmp        sub_7e30+68
0000000000007ea4         nop        dword [rax]
0000000000007ea8         cmp        dword [rsp+8], 0x2
0000000000007ead         je         sub_8280                                    ; sub_8280
0000000000007eb3         cmp        byte [rsp+0xd], 0x0
0000000000007eb8         je         sub_80c0+16

                     loc_7ebe:
0000000000007ebe         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_80c0+8
0000000000007ec3         je         loc_80d0

0000000000007ec9         cmp        qword [rsp+arg_10], 0x0
0000000000007ecf         jne        loc_828b

0000000000007ed5         mov        ebx, 0x5c
0000000000007eda         nop        word [rax+rax]
                        ; endp

                     loc_7ee0:
0000000000007ee0         xor        r12d, r12d                                  ; CODE XREF=sub_7e30+73, sub_8220+29
                        ; endp

                     loc_7ee3:
0000000000007ee3         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_7d30+99, sub_7d30+108
0000000000007ee8         sete       dl
0000000000007eeb         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000007ef0         mov        eax, edx
0000000000007ef2         jne        loc_8748

0000000000007ef8         mov        eax, r8d
0000000000007efb         xor        eax, 0x1
0000000000007efe         and        al, dl
0000000000007f00         je         loc_7f31

0000000000007f02         cmp        r13, r15
0000000000007f05         jbe        loc_7f0c

0000000000007f07         mov        byte [r14+r15], 0x27

                     loc_7f0c:
0000000000007f0c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_7e30+213
0000000000007f10         cmp        r13, rdx
0000000000007f13         jbe        loc_7f1b

0000000000007f15         mov        byte [r14+r15+1], 0x24

                     loc_7f1b:
0000000000007f1b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_7e30+227
0000000000007f1f         cmp        r13, rdx
0000000000007f22         jbe        loc_7f2a

0000000000007f24         mov        byte [r14+r15+2], 0x27

                     loc_7f2a:
0000000000007f2a         add        r15, 0x3                                    ; CODE XREF=sub_7e30+242
0000000000007f2e         mov        r8d, eax

                     loc_7f31:
0000000000007f31         cmp        r13, r15                                    ; CODE XREF=sub_7e30+208
0000000000007f34         jbe        loc_7f3b

0000000000007f36         mov        byte [r14+r15], 0x5c

                     loc_7f3b:
0000000000007f3b         add        r15, 0x1                                    ; CODE XREF=sub_7e30+260
0000000000007f3f         add        rbp, 0x1
0000000000007f43         jmp        loc_7dd0
0000000000007f48         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7f50:
0000000000007f50         cmp        byte [rsp+arg_5], 0x0
0000000000007f55         jne        loc_8123

0000000000007f5b         xor        edx, edx
0000000000007f5d         test       byte [rsp+arg_70], 0x1
0000000000007f62         je         loc_7e7b

0000000000007f68         add        rbp, 0x1
0000000000007f6c         jmp        quotearg_buffer_restyled+232
                        ; endp
0000000000007f71         nop        dword [rax]
0000000000007f78         cmp        dword [rsp+8], 0x2
0000000000007f7d         sete       dl
0000000000007f80         xor        eax, eax
0000000000007f82         jmp        sub_7d30+56
0000000000007f87         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7f90:
0000000000007f90         mov        edx, 0x7
0000000000007f95         mov        ebx, 0x61
0000000000007f9a         jmp        sub_7e30+68
                        ; endp
0000000000007f9f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_7fa0:
0000000000007fa0         cmp        dword [rsp+8], 0x2
0000000000007fa5         sete       dl
                        ; endp

                     loc_7fa8:
0000000000007fa8         test       rbp, rbp                                    ; CODE XREF=sub_7d30+38, sub_81c0+35
0000000000007fab         jne        loc_7d5c

0000000000007fb1         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_81f0+43
0000000000007fb6         and        al, dl
0000000000007fb8         je         sub_7d30+56

0000000000007fbe         mov        rbp, r11
0000000000007fc1         mov        dword [rsp+arg_0], 0x2
0000000000007fc9         jmp        sub_8280+1097
                        ; endp
0000000000007fce         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_7fd0:
0000000000007fd0         cmp        dword [rsp+arg_0], 0x2
0000000000007fd5         sete       dl
0000000000007fd8         xor        r12d, r12d
0000000000007fdb         jmp        sub_7fa0+17
                        ; endp
0000000000007fdd         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_7fe0:
0000000000007fe0         cmp        dword [rsp+arg_0], 0x2
0000000000007fe5         mov        ebx, 0x20
0000000000007fea         sete       dl
0000000000007fed         jmp        sub_7fa0+17
                        ; endp
0000000000007fef         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_7ff0:
0000000000007ff0         mov        edx, 0xd
0000000000007ff5         mov        ebx, 0x72
0000000000007ffa         jmp        loc_7e62
0000000000007fff         align      32768


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8000:
0000000000008000         mov        edx, 0xc
0000000000008005         mov        ebx, 0x66
000000000000800a         jmp        sub_7e30+68
                        ; endp
000000000000800f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8010:
0000000000008010         mov        edx, 0xb
0000000000008015         mov        ebx, 0x76
000000000000801a         jmp        sub_7e30+68
                        ; endp
000000000000801f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8020:
0000000000008020         mov        edx, 0xa
0000000000008025         mov        ebx, 0x6e
000000000000802a         jmp        sub_7e30+50
                        ; endp
000000000000802f         align      16

                     loc_8030:
0000000000008030         xor        r10d, r10d                                  ; CODE XREF=sub_8020+135
0000000000008033         nop        dword [rax+rax]

                     loc_8038:
0000000000008038         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
000000000000803e         jne        loc_83e8

0000000000008044         mov        qword [rsp+0xe8+var_B0], r11
0000000000008049         mov        byte [rsp+0xe8+var_B8], r8b
000000000000804e         mov        byte [rsp+0xe8+var_C0], r10b
0000000000008053         call       j___ctype_b_loc                             ; __ctype_b_loc
0000000000008058         mov        rcx, qword [rax]
000000000000805b         movzx      edx, bl
000000000000805e         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000008064         movzx      r8d, byte [rsp+0xe8+var_B8]
000000000000806a         mov        r11, qword [rsp+0xe8+var_B0]
000000000000806f         mov        edi, 0x1
0000000000008074         movzx      eax, word [rcx+rdx*2]
0000000000008078         and        ax, 0x4000
000000000000807c         setne      r12b
0000000000008080         sete       al
0000000000008083         and        al, byte [rsp+0xe8+var_DB]

                     loc_8087:
0000000000008087         test       al, al                                      ; CODE XREF=sub_8280+2221
0000000000008089         jne        loc_8a21

000000000000808f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000008094         sete       dl
0000000000008097         jmp        loc_7d68
000000000000809c         align      32

                     loc_80a0:
00000000000080a0         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
00000000000080a4         cmp        bl, 0x7e
00000000000080a7         ja         loc_8030

00000000000080a9         lea        rcx, qword [switch_table_db20+552]          ; 0xdd48
00000000000080b0         movzx      edx, bl
00000000000080b3         movsxd     rax, dword [rcx+rdx*4]
00000000000080b7         add        rax, rcx
00000000000080ba         jmp        rax
                        ; endp
00000000000080bc         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_80c0:
00000000000080c0         xor        r10d, r10d
00000000000080c3         cmp        byte [rsp+arg_5], 0x0
00000000000080c8         jne        loc_7ebe

00000000000080ce         nop

                     loc_80d0:
00000000000080d0         mov        edx, 0x5c                                   ; CODE XREF=sub_7e30+136, sub_7e30+147
00000000000080d5         mov        ebx, 0x5c
00000000000080da         jmp        sub_7e30+68
                        ; endp
00000000000080df         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_80e0:
00000000000080e0         mov        edx, 0xc
00000000000080e5         xor        r10d, r10d
00000000000080e8         mov        ebx, 0x66
00000000000080ed         jmp        sub_7e30+68
                        ; endp
00000000000080f2         nop        word [rax+rax]
00000000000080f8         mov        edx, 0xa
00000000000080fd         xor        r10d, r10d
0000000000008100         mov        ebx, 0x6e
0000000000008105         jmp        sub_7e30+50
000000000000810a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8110:
0000000000008110         mov        ebx, 0x61
0000000000008115         jmp        sub_7e30+176
                        ; endp
000000000000811a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8120:
0000000000008120         xor        r10d, r10d
                        ; endp

                     loc_8123:
0000000000008123         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_7f50+5
0000000000008128         sete       dl
000000000000812b         cmp        byte [rsp+arg_7], 0x0
0000000000008130         jne        loc_8cca

0000000000008136         mov        eax, r8d
0000000000008139         mov        rcx, r15
000000000000813c         xor        eax, 0x1
000000000000813f         and        al, dl
0000000000008141         je         loc_8170

0000000000008143         cmp        r13, r15
0000000000008146         jbe        loc_814d

0000000000008148         mov        byte [r14+r15], 0x27

                     loc_814d:
000000000000814d         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_8120+38
0000000000008151         cmp        r13, rcx
0000000000008154         jbe        loc_815c

0000000000008156         mov        byte [r14+r15+1], 0x24

                     loc_815c:
000000000000815c         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_8120+52
0000000000008160         cmp        r13, rcx
0000000000008163         ja         loc_8799

                     loc_8169:
0000000000008169         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_8280+1311
000000000000816d         mov        r8d, eax

                     loc_8170:
0000000000008170         cmp        r13, rcx                                    ; CODE XREF=sub_8120+33
0000000000008173         jbe        loc_817a

0000000000008175         mov        byte [r14+rcx], 0x5c

                     loc_817a:
000000000000817a         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_8120+83
000000000000817f         lea        r15, qword [rcx+1]
0000000000008183         je         loc_8789

0000000000008189         lea        rax, qword [rbp+1]
000000000000818d         cmp        rax, r11
0000000000008190         jae        loc_81ab

0000000000008192         mov        rax, qword [rsp+arg_8]
0000000000008197         movzx      eax, byte [rax+rbp+1]
000000000000819c         mov        byte [rsp+arg_20], al
00000000000081a0         sub        eax, 0x30
00000000000081a3         cmp        al, 0x9
00000000000081a5         jbe        loc_89d9

                     loc_81ab:
00000000000081ab         mov        eax, r12d                                   ; CODE XREF=sub_8120+112
00000000000081ae         mov        ebx, 0x30
00000000000081b3         xor        r12d, r12d
00000000000081b6         jmp        sub_7d30+56
                        ; endp
00000000000081bb         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_81c0:
00000000000081c0         cmp        dword [rsp+arg_0], 0x2
00000000000081c5         mov        r12d, r10d
00000000000081c8         sete       dl
00000000000081cb         xor        r10d, r10d
00000000000081ce         xor        eax, eax
00000000000081d0         jmp        sub_7d30+56
                        ; endp
00000000000081d5         nop        dword [rax]
00000000000081d8         cmp        dword [rsp+8], 0x2
00000000000081dd         sete       dl
00000000000081e0         xor        r10d, r10d
00000000000081e3         jmp        sub_7fa0+8
00000000000081e8         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_81f0:
00000000000081f0         cmp        dword [rsp+8], 0x2
00000000000081f5         sete       dl
00000000000081f8         xor        r10d, r10d
00000000000081fb         xor        r12d, r12d
00000000000081fe         jmp        sub_7fa0+17
                        ; endp
0000000000008203         nop        dword [rax+rax]
0000000000008208         cmp        dword [rsp+8], 0x2
000000000000820d         mov        r12d, r10d
0000000000008210         mov        ebx, 0x20
0000000000008215         sete       dl
0000000000008218         xor        r10d, r10d
000000000000821b         jmp        sub_7fa0+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8220:
0000000000008220         mov        edx, 0xd
0000000000008225         xor        r10d, r10d
0000000000008228         mov        ebx, 0x72
000000000000822d         jmp        sub_7e30+50
                        ; endp
0000000000008232         nop        word [rax+rax]
0000000000008238         mov        ebx, 0x76
000000000000823d         jmp        sub_7e30+176
0000000000008242         nop        word [rax+rax]
0000000000008248         mov        edx, 0x9
000000000000824d         xor        r10d, r10d
0000000000008250         mov        ebx, 0x74
0000000000008255         jmp        sub_7e30+50
000000000000825a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8260:
0000000000008260         mov        ebx, 0x62
0000000000008265         jmp        sub_7e30+176
                        ; endp
000000000000826a         nop        word [rax+rax]

                     loc_8270:
0000000000008270         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
0000000000008273         jmp        loc_7d10
0000000000008278         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_8280:
0000000000008280         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7e30+125
0000000000008285         jne        sub_8280+2416
                        ; endp

                     loc_828b:
000000000000828b         add        rbp, 0x1                                    ; CODE XREF=sub_7e30+159
000000000000828f         mov        eax, r8d
0000000000008292         xor        r12d, r12d
0000000000008295         mov        ebx, 0x5c
000000000000829a         jmp        sub_7d30+124
                        ; endp
000000000000829f         align      32

                     loc_82a0:
00000000000082a0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
00000000000082a5         movzx      ebx, byte [rsp+0xe8+var_D9]
00000000000082aa         mov        r12d, r8d
00000000000082ad         mov        rbp, r11
00000000000082b0         sete       dl
00000000000082b3         mov        eax, ebx
00000000000082b5         test       r15, r15
00000000000082b8         sete       cl
00000000000082bb         and        eax, edx
00000000000082bd         and        al, cl
00000000000082bf         jne        loc_8d26

00000000000082c5         mov        eax, ebx
00000000000082c7         xor        eax, 0x1
00000000000082ca         and        dl, al
00000000000082cc         je         loc_8c3c

00000000000082d2         cmp        byte [rsp+0xe8+var_6C], 0x0
00000000000082d7         je         loc_8c3a

00000000000082dd         cmp        byte [rsp+0xe8+var_DA], 0x0
00000000000082e2         jne        loc_8cdd

00000000000082e8         test       r13, r13
00000000000082eb         sete       al
00000000000082ee         cmp        qword [rsp+0xe8+var_98], 0x0
00000000000082f4         setne      dl
00000000000082f7         and        al, dl
00000000000082f9         je         loc_8d1c

00000000000082ff         mov        r13, qword [rsp+0xe8+var_98]

                     loc_8304:
0000000000008304         lea        rbx, qword [aInvalidSsArgum+25]             ; 0xe529, CODE XREF=sub_8280+2781
000000000000830b         mov        byte [r14], 0x27
000000000000830f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000008317         mov        r15d, 0x1
000000000000831d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008326         mov        byte [rsp+0xe8+var_D9], 0x0
000000000000832b         mov        qword [rsp+0xe8+var_A0], rbx
0000000000008330         mov        byte [rsp+0xe8+var_6C], al
0000000000008334         jmp        loc_7c13
0000000000008339         align      64

                     loc_8340:
0000000000008340         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7e30+8
0000000000008345         jne        sub_8280+2416

000000000000834b         test       r13, r13
000000000000834e         je         loc_8750

0000000000008354         xor        edx, edx
0000000000008356         cmp        qword [rsp+arg_48], 0x0
000000000000835c         jne        loc_8750

                     loc_8362:
0000000000008362         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_8280+1284, sub_8280+2794
0000000000008367         add        r15, 0x3
000000000000836b         xor        eax, eax
000000000000836d         mov        byte [rsp+arg_74], r12b
0000000000008372         xor        r8d, r8d
0000000000008375         mov        r13, rdx
0000000000008378         mov        ebx, 0x27
000000000000837d         jmp        sub_7d30+105
                        ; endp
0000000000008382         align      8

                     loc_8388:
0000000000008388         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_7e00+19
000000000000838d         je         loc_83b0

000000000000838f         lea        rcx, qword [rbp+2]
0000000000008393         cmp        rcx, r11
0000000000008396         jae        loc_83b0

0000000000008398         mov        rax, qword [rsp+arg_8]
000000000000839d         cmp        byte [rax+rbp+1], 0x3f
00000000000083a2         je         loc_8b32

00000000000083a8         nop        dword [rax+rax]

                     loc_83b0:
00000000000083b0         xor        edx, edx                                    ; CODE XREF=sub_8280+269, sub_8280+278, sub_8280+2233, sub_8280+2253
00000000000083b2         xor        r12d, r12d
00000000000083b5         xor        eax, eax
00000000000083b7         mov        ebx, 0x3f
00000000000083bc         jmp        sub_7d30+56
                        ; endp
00000000000083c1         align      8

                     loc_83c8:
00000000000083c8         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_7e00+10
00000000000083cd         jne        loc_8bf0

00000000000083d3         xor        r12d, r12d
00000000000083d6         xor        eax, eax
00000000000083d8         mov        ebx, 0x3f
00000000000083dd         jmp        sub_7d30+105
                        ; endp
00000000000083e2         align      8

                     loc_83e8:
00000000000083e8         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_8020+30
00000000000083f0         cmp        r11, 0xffffffffffffffff
00000000000083f4         mov        qword [rsp+0xe8+var_48], 0x0
0000000000008400         mov        qword [rsp+0xe8+var_C0], rax
0000000000008405         jne        loc_8434

0000000000008407         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
000000000000840c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000008411         mov        byte [rsp+0xe8+var_B0], r10b
0000000000008416         mov        qword [rsp+0xe8+var_B8], r9
000000000000841b         call       j_strlen                                    ; strlen
0000000000008420         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000008426         movzx      r10d, byte [rsp+0xe8+var_B0]
000000000000842c         mov        r11, rax
000000000000842f         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_8434:
0000000000008434         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_8280+389
000000000000843c         xor        ecx, ecx
000000000000843e         mov        byte [rsp+0xe8+var_6A], bl
0000000000008442         mov        byte [rsp+0xe8+var_6B], r8b
0000000000008447         mov        rbx, rcx
000000000000844a         mov        qword [rsp+0xe8+var_60], r9
0000000000008452         mov        qword [rsp+0xe8+var_B0], rax
0000000000008457         mov        byte [rsp+0xe8+var_69], r10b
000000000000845c         mov        qword [rsp+0xe8+var_68], r15
0000000000008464         mov        qword [rsp+0xe8+var_A8], r14
0000000000008469         mov        qword [rsp+0xe8+var_78], r13
000000000000846e         mov        qword [rsp+0xe8+var_B8], r11

                     loc_8473:
0000000000008473         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_8280+623
0000000000008478         lea        r14, qword [rbp+rbx]
000000000000847d         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000008482         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000008487         mov        rdi, qword [rsp+0xe8+var_B0]
000000000000848c         lea        r13, qword [rax+r14]
0000000000008490         sub        rdx, r14
0000000000008493         mov        rsi, r13
0000000000008496         call       rpl_mbrtowc                                 ; rpl_mbrtowc
000000000000849b         test       rax, rax
000000000000849e         mov        r15, rax
00000000000084a1         je         loc_84f1

00000000000084a3         cmp        rax, 0xffffffffffffffff
00000000000084a7         je         loc_8ac5

00000000000084ad         cmp        rax, 0xfffffffffffffffe
00000000000084b1         je         loc_8a51

00000000000084b7         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000084bc         sete       al
00000000000084bf         and        al, byte [rsp+0xe8+var_D9]
00000000000084c3         jne        loc_8660

                     loc_84c9:
00000000000084c9         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_8280+996, sub_8280+1031
00000000000084d0         call       j_iswprint                                  ; iswprint
00000000000084d5         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
00000000000084da         test       eax, eax
00000000000084dc         mov        eax, 0x0
00000000000084e1         cmove      r12d, eax
00000000000084e5         add        rbx, r15
00000000000084e8         call       j_mbsinit                                   ; mbsinit
00000000000084ed         test       eax, eax
00000000000084ef         je         loc_8473

                     loc_84f1:
00000000000084f1         mov        edx, r12d                                   ; CODE XREF=sub_8280+545
00000000000084f4         mov        rdi, rbx
00000000000084f7         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000084fd         xor        edx, 0x1
0000000000008500         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000008505         movzx      r10d, byte [rsp+0xe8+var_69]
000000000000850b         and        dl, byte [rsp+0xe8+var_DB]
000000000000850f         mov        r15, qword [rsp+0xe8+var_68]
0000000000008517         mov        r14, qword [rsp+0xe8+var_A8]
000000000000851c         mov        r13, qword [rsp+0xe8+var_78]
0000000000008521         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_8526:
0000000000008526         cmp        rdi, 0x1                                    ; CODE XREF=sub_8280+2112, sub_8280+2168
000000000000852a         jbe        loc_8b2b

                     loc_8530:
0000000000008530         mov        rcx, rdi                                    ; CODE XREF=sub_8280+1961
0000000000008533         xor        esi, esi
0000000000008535         movzx      r9d, byte [rsp+0xe8+var_D9]
000000000000853b         add        rcx, rbp
000000000000853e         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000008543         jmp        loc_85fe
0000000000008548         align      16

                     loc_8550:
0000000000008550         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_8280+896
0000000000008555         sete       al
0000000000008558         test       r9b, r9b
000000000000855b         jne        loc_8a10

0000000000008561         mov        esi, r8d
0000000000008564         xor        esi, 0x1
0000000000008567         and        al, sil
000000000000856a         je         loc_859b

000000000000856c         cmp        r13, r15
000000000000856f         jbe        loc_8576

0000000000008571         mov        byte [r14+r15], 0x27

                     loc_8576:
0000000000008576         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_8280+751
000000000000857a         cmp        r13, rsi
000000000000857d         jbe        loc_8585

000000000000857f         mov        byte [r14+r15+1], 0x24

                     loc_8585:
0000000000008585         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_8280+765
0000000000008589         cmp        r13, rsi
000000000000858c         jbe        loc_8594

000000000000858e         mov        byte [r14+r15+2], 0x27

                     loc_8594:
0000000000008594         add        r15, 0x3                                    ; CODE XREF=sub_8280+780
0000000000008598         mov        r8d, eax

                     loc_859b:
000000000000859b         cmp        r13, r15                                    ; CODE XREF=sub_8280+746
000000000000859e         jbe        loc_85a5

00000000000085a0         mov        byte [r14+r15], 0x5c

                     loc_85a5:
00000000000085a5         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8280+798
00000000000085a9         cmp        r13, rax
00000000000085ac         jbe        loc_85bb

00000000000085ae         mov        eax, ebx
00000000000085b0         shr        al, 0x6
00000000000085b3         add        eax, 0x30
00000000000085b6         mov        byte [r14+r15+1], al

                     loc_85bb:
00000000000085bb         lea        rax, qword [r15+2]                          ; CODE XREF=sub_8280+812
00000000000085bf         cmp        r13, rax
00000000000085c2         jbe        loc_85d4

00000000000085c4         mov        eax, ebx
00000000000085c6         shr        al, 0x3
00000000000085c9         and        eax, 0x7
00000000000085cc         add        eax, 0x30
00000000000085cf         mov        byte [r14+r15+2], al

                     loc_85d4:
00000000000085d4         and        ebx, 0x7                                    ; CODE XREF=sub_8280+834
00000000000085d7         add        rbp, 0x1
00000000000085db         add        r15, 0x3
00000000000085df         add        ebx, 0x30
00000000000085e2         cmp        rbp, rcx
00000000000085e5         jae        loc_7dd0

00000000000085eb         mov        esi, edx

                     loc_85ed:
00000000000085ed         cmp        r13, r15                                    ; CODE XREF=sub_8280+985, sub_8280+1969
00000000000085f0         jbe        loc_85f6

00000000000085f2         mov        byte [r14+r15], bl

                     loc_85f6:
00000000000085f6         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_8280+880
00000000000085fa         add        r15, 0x1

                     loc_85fe:
00000000000085fe         test       dl, dl                                      ; CODE XREF=sub_8280+707
0000000000008600         jne        loc_8550

0000000000008606         mov        eax, esi
0000000000008608         xor        eax, 0x1
000000000000860b         and        eax, r8d
000000000000860e         test       r10b, r10b
0000000000008611         je         loc_8621

0000000000008613         cmp        r13, r15
0000000000008616         jbe        loc_861d

0000000000008618         mov        byte [r14+r15], 0x5c

                     loc_861d:
000000000000861d         add        r15, 0x1                                    ; CODE XREF=sub_8280+918

                     loc_8621:
0000000000008621         add        rbp, 0x1                                    ; CODE XREF=sub_8280+913
0000000000008625         cmp        rbp, rcx
0000000000008628         jae        loc_7dac

000000000000862e         test       al, al
0000000000008630         je         loc_8a2e

0000000000008636         cmp        r13, r15
0000000000008639         jbe        loc_8640

000000000000863b         mov        byte [r14+r15], 0x27

                     loc_8640:
0000000000008640         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8280+953
0000000000008644         cmp        r13, rax
0000000000008647         jbe        loc_864f

0000000000008649         mov        byte [r14+r15+1], 0x27

                     loc_864f:
000000000000864f         add        r15, 0x2                                    ; CODE XREF=sub_8280+967
0000000000008653         xor        r10d, r10d
0000000000008656         xor        r8d, r8d
0000000000008659         jmp        loc_85ed
000000000000865b         align      32

                     loc_8660:
0000000000008660         cmp        r15, 0x1                                    ; CODE XREF=sub_8280+579
0000000000008664         je         loc_84c9

000000000000866a         mov        rdi, qword [rsp+0xe8+var_D8]
000000000000866f         lea        rcx, qword [rdi+r15]
0000000000008673         lea        rdx, qword [rdi+r14+1]
0000000000008678         lea        r8, qword [rcx+r14]
000000000000867c         jmp        loc_868d
000000000000867e         align      128

                     loc_8680:
0000000000008680         add        rdx, 0x1                                    ; CODE XREF=sub_8280+1046, sub_8280+1072
0000000000008684         cmp        r8, rdx
0000000000008687         je         loc_84c9

                     loc_868d:
000000000000868d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_8280+1020
0000000000008690         sub        ecx, 0x5b
0000000000008693         cmp        cl, 0x21
0000000000008696         ja         loc_8680

0000000000008698         mov        esi, 0x1
000000000000869d         shl        rsi, cl
00000000000086a0         mov        rcx, rsi
00000000000086a3         movabs     rsi, 0x20000002b
00000000000086ad         test       rcx, rsi
00000000000086b0         je         loc_8680

00000000000086b2         mov        r14, qword [rsp+0xe8+var_A8]
00000000000086b7         mov        r13, qword [rsp+0xe8+var_78]
00000000000086bc         mov        rbp, qword [rsp+0xe8+var_B8]
00000000000086c1         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_86c9:
00000000000086c9         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_8280+1227, sub_8280+1948, sub_8280+2585, sub_8280+2734
00000000000086ce         je         loc_86e0

00000000000086d0         test       al, al
00000000000086d2         mov        eax, 0x4
00000000000086d7         cmove      eax, dword [rsp+0xe8+var_E0]
00000000000086dc         mov        dword [rsp+0xe8+var_E0], eax

                     loc_86e0:
00000000000086e0         sub        rsp, 0x8                                    ; CODE XREF=sub_8280+1102
00000000000086e4         mov        rcx, rbp
00000000000086e7         mov        rsi, r13
00000000000086ea         push       qword [rsp+0xf0+var_88]
00000000000086ee         push       qword [rsp+0xf8+var_80]
00000000000086f2         mov        rdi, r14
00000000000086f5         push       0x0
00000000000086f7         mov        r9d, dword [rsp+0x108+var_70]
00000000000086ff         mov        r8d, dword [rsp+0x108+var_E0]
0000000000008704         mov        rdx, qword [rsp+0x108+var_D8]
0000000000008709         and        r9d, 0xfffffffd
000000000000870d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008712         add        rsp, 0x20
0000000000008716         mov        r15, rax

                     loc_8719:
0000000000008719         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_8280+2549, sub_8280+2560, sub_8280+2711
0000000000008721         xor        rbx, qword [fs:0x28]
000000000000872a         mov        rax, r15
000000000000872d         jne        loc_8d33

0000000000008733         add        rsp, 0xb8
000000000000873a         pop        rbx
000000000000873b         pop        rbp
000000000000873c         pop        r12
000000000000873e         pop        r13
0000000000008740         pop        r14
0000000000008742         pop        r15
0000000000008744         ret
                        ; endp
0000000000008745         align      8

                     loc_8748:
0000000000008748         mov        rbp, r11                                    ; CODE XREF=sub_7e30+194
000000000000874b         jmp        loc_86c9

                     loc_8750:
0000000000008750         cmp        r13, r15                                    ; CODE XREF=sub_8280+206, sub_8280+220
0000000000008753         jbe        loc_875a

0000000000008755         mov        byte [r14+r15], 0x27

                     loc_875a:
000000000000875a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8280+1235
000000000000875e         cmp        r13, rax
0000000000008761         jbe        loc_8769

0000000000008763         mov        byte [r14+r15+1], 0x5c

                     loc_8769:
0000000000008769         lea        rax, qword [r15+2]                          ; CODE XREF=sub_8280+1249
000000000000876d         cmp        r13, rax
0000000000008770         jbe        loc_8d62

0000000000008776         mov        rdx, r13
0000000000008779         mov        byte [r14+r15+2], 0x27
000000000000877f         mov        r13, qword [rsp+arg_48]
0000000000008784         jmp        loc_8362

                     loc_8789:
0000000000008789         mov        eax, r12d                                   ; CODE XREF=sub_8120+99
000000000000878c         mov        ebx, 0x30
0000000000008791         xor        r12d, r12d
0000000000008794         jmp        sub_7d30+105
                        ; endp

                     loc_8799:
0000000000008799         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_8120+67
000000000000879f         jmp        loc_8169

                     loc_87a4:
00000000000087a4         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
00000000000087a6         jne        loc_7bd3

00000000000087ac         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_87b1:
00000000000087b1         test       r13, r13                                    ; CODE XREF=sub_8280+2749
00000000000087b4         jne        loc_8d4a

00000000000087ba         lea        rax, qword [aInvalidSsArgum+25]             ; 0xe529
00000000000087c1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000087ca         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000087cf         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000087d4         xor        r12d, r12d
00000000000087d7         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000087dc         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000087e5         mov        qword [rsp+0xe8+var_A0], rax
00000000000087ea         mov        r15d, 0x1
00000000000087f0         mov        dword [rsp+0xe8+var_E0], 0x2
00000000000087f8         jmp        loc_7c13
00000000000087fd         align      2048

                     loc_8800:
0000000000008800         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000008802         jne        loc_8bfd

0000000000008808         test       r13, r13
000000000000880b         je         loc_8a36

0000000000008811         mov        byte [r14], 0x22
0000000000008815         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000881a         xor        r12d, r12d
000000000000881d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008822         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_882b:
000000000000882b         lea        rax, qword [aLibs+27]                       ; 0xdab3, CODE XREF=sub_8280+1996
0000000000008832         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000008837         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000883c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008845         mov        r15d, 0x1
000000000000884b         mov        qword [rsp+0xe8+var_A0], rax
0000000000008850         jmp        loc_7c13

                     loc_8855:
0000000000008855         lea        rax, qword [aLibs+27]                       ; case 6, 0xdab3, CODE XREF=quotearg_buffer_restyled+145
000000000000885c         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008861         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008866         xor        r12d, r12d
0000000000008869         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008872         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000008877         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000887c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008885         xor        r15d, r15d
0000000000008888         mov        qword [rsp+0xe8+var_A0], rax
000000000000888d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000008895         jmp        loc_7c13

                     loc_889a:
000000000000889a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000889f         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000088a4         xor        r12d, r12d
00000000000088a7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000088b0         mov        byte [rsp+0xe8+var_D9], 0x0
00000000000088b5         xor        r15d, r15d
00000000000088b8         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000088bd         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000088c6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000088cf         jmp        loc_7c13

                     loc_88d4:
00000000000088d4         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
00000000000088d9         je         loc_8931

00000000000088db         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xdab5
00000000000088e2         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000088e4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000088e9         call       j_dcgettext                                 ; dcgettext
00000000000088ee         mov        rcx, rax
00000000000088f1         mov        qword [rsp+0xe8+var_80], rax
00000000000088f6         lea        rax, qword [aLibs+29]                       ; 0xdab5
00000000000088fd         cmp        rcx, rax
0000000000008900         je         loc_8c9e

                     loc_8906:
0000000000008906         lea        rsi, qword [aInvalidSsArgum+25]             ; argument "msgid" for method j_dcgettext, 0xe529, CODE XREF=sub_8280+2607
000000000000890d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000890f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000008914         call       j_dcgettext                                 ; dcgettext
0000000000008919         mov        rcx, rax
000000000000891c         mov        qword [rsp+0xe8+var_88], rax
0000000000008921         lea        rax, qword [aInvalidSsArgum+25]             ; 0xe529
0000000000008928         cmp        rcx, rax
000000000000892b         je         loc_8cb4

                     loc_8931:
0000000000008931         xor        r15d, r15d                                  ; CODE XREF=sub_8280+1625, sub_8280+2629
0000000000008934         test       ebx, ebx
0000000000008936         je         loc_8afd

                     loc_893c:
000000000000893c         test       ebx, ebx                                    ; CODE XREF=sub_8280+2183, sub_8280+2214
000000000000893e         mov        rbx, qword [rsp+0xe8+var_88]
0000000000008943         setne      byte [rsp+0xe8+var_D9]
0000000000008948         xor        r12d, r12d
000000000000894b         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
000000000000894e         call       j_strlen                                    ; strlen
0000000000008953         mov        qword [rsp+0xe8+var_A0], rbx
0000000000008958         mov        qword [rsp+0xe8+var_D0], rax
000000000000895d         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008962         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008967         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008970         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008975         jmp        loc_7c13

                     loc_897a:
000000000000897a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
000000000000897f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008984         xor        r12d, r12d
0000000000008987         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008990         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000008995         xor        r15d, r15d
0000000000008998         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000899d         mov        qword [rsp+0xe8+var_D0], 0x0
00000000000089a6         mov        qword [rsp+0xe8+var_A0], 0x0
00000000000089af         jmp        loc_7c13

                     loc_89b4:
00000000000089b4         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
00000000000089b9         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000089be         xor        r12d, r12d
00000000000089c1         mov        qword [rsp+0xe8+var_98], 0x0
00000000000089ca         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000089cf         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000089d4         jmp        loc_7bf3

                     loc_89d9:
00000000000089d9         cmp        r13, r15                                    ; CODE XREF=sub_8120+133
00000000000089dc         jbe        loc_89e3

00000000000089de         mov        byte [r14+r15], 0x30

                     loc_89e3:
00000000000089e3         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_8280+1884
00000000000089e7         cmp        r13, rax
00000000000089ea         jbe        loc_89f2

00000000000089ec         mov        byte [r14+rcx+2], 0x30

                     loc_89f2:
00000000000089f2         mov        eax, r12d                                   ; CODE XREF=sub_8280+1898
00000000000089f5         lea        r15, qword [rcx+3]
00000000000089f9         xor        r12d, r12d
00000000000089fc         mov        ebx, 0x30
0000000000008a01         jmp        sub_7d30+56
                        ; endp
0000000000008a06         align      16

                     loc_8a10:
0000000000008a10         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_8280+731
0000000000008a15         mov        rbp, r11
0000000000008a18         mov        byte [rsp+0xe8+var_DB], bl
0000000000008a1c         jmp        loc_86c9

                     loc_8a21:
0000000000008a21         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_8020+105
0000000000008a26         xor        r12d, r12d
0000000000008a29         jmp        loc_8530

                     loc_8a2e:
0000000000008a2e         xor        r10d, r10d                                  ; CODE XREF=sub_8280+944
0000000000008a31         jmp        loc_85ed

                     loc_8a36:
0000000000008a36         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_8280+1419
0000000000008a3f         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008a44         xor        r12d, r12d
0000000000008a47         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008a4c         jmp        loc_882b

                     loc_8a51:
0000000000008a51         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_8280+561
0000000000008a56         mov        rsi, r14
0000000000008a59         mov        rcx, r13
0000000000008a5c         mov        rax, rbx
0000000000008a5f         mov        rdi, rbx
0000000000008a62         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000008a68         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000008a6d         mov        r9, qword [rsp+0xe8+var_60]
0000000000008a75         cmp        rsi, r11
0000000000008a78         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000008a7e         mov        r15, qword [rsp+0xe8+var_68]
0000000000008a86         mov        r14, qword [rsp+0xe8+var_A8]
0000000000008a8b         mov        r13, qword [rsp+0xe8+var_78]
0000000000008a90         jae        loc_8ab8

0000000000008a92         cmp        byte [rcx], 0x0
0000000000008a95         jne        loc_8aa7

0000000000008a97         jmp        loc_8ab8
0000000000008a99         align      32

                     loc_8aa0:
0000000000008aa0         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_8280+2099
0000000000008aa5         je         loc_8ab5

                     loc_8aa7:
0000000000008aa7         add        rax, 0x1                                    ; CODE XREF=sub_8280+2069
0000000000008aab         lea        rdx, qword [rbp+rax]
0000000000008ab0         cmp        r11, rdx
0000000000008ab3         ja         loc_8aa0

                     loc_8ab5:
0000000000008ab5         mov        rdi, rax                                    ; CODE XREF=sub_8280+2085

                     loc_8ab8:
0000000000008ab8         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_8280+2064, sub_8280+2071
0000000000008abd         xor        r12d, r12d
0000000000008ac0         jmp        loc_8526

                     loc_8ac5:
0000000000008ac5         mov        rdi, rbx                                    ; CODE XREF=sub_8280+551
0000000000008ac8         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000008ace         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000008ad3         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000008ad9         mov        r15, qword [rsp+0xe8+var_68]
0000000000008ae1         xor        r12d, r12d
0000000000008ae4         mov        r14, qword [rsp+0xe8+var_A8]
0000000000008ae9         mov        r13, qword [rsp+0xe8+var_78]
0000000000008aee         mov        r11, qword [rsp+0xe8+var_B8]
0000000000008af3         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000008af8         jmp        loc_8526

                     loc_8afd:
0000000000008afd         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_8280+1718
0000000000008b02         movzx      eax, byte [rdx]
0000000000008b05         test       al, al
0000000000008b07         je         loc_893c

0000000000008b0d         nop        dword [rax]

                     loc_8b10:
0000000000008b10         cmp        r13, r15                                    ; CODE XREF=sub_8280+2212
0000000000008b13         jbe        loc_8b19

0000000000008b15         mov        byte [r14+r15], al

                     loc_8b19:
0000000000008b19         add        r15, 0x1                                    ; CODE XREF=sub_8280+2195
0000000000008b1d         movzx      eax, byte [rdx+r15]
0000000000008b22         test       al, al
0000000000008b24         jne        loc_8b10

0000000000008b26         jmp        loc_893c

                     loc_8b2b:
0000000000008b2b         mov        eax, edx                                    ; CODE XREF=sub_8280+682
0000000000008b2d         jmp        loc_8087

                     loc_8b32:
0000000000008b32         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_8280+290
0000000000008b36         cmp        bl, 0x3e
0000000000008b39         ja         loc_83b0

0000000000008b3f         movabs     rax, 0x7000a38200000000
0000000000008b49         bt         rax, rbx
0000000000008b4d         jae        loc_83b0

0000000000008b53         cmp        byte [rsp+arg_7], 0x0
0000000000008b58         jne        loc_8d42

0000000000008b5e         cmp        r13, r15
0000000000008b61         jbe        loc_8b68

0000000000008b63         mov        byte [r14+r15], 0x3f

                     loc_8b68:
0000000000008b68         lea        rax, qword [r15+1]                          ; CODE XREF=sub_8280+2273
0000000000008b6c         cmp        r13, rax
0000000000008b6f         jbe        loc_8b77

0000000000008b71         mov        byte [r14+r15+1], 0x22

                     loc_8b77:
0000000000008b77         lea        rax, qword [r15+2]                          ; CODE XREF=sub_8280+2287
0000000000008b7b         cmp        r13, rax
0000000000008b7e         jbe        loc_8b86

0000000000008b80         mov        byte [r14+r15+2], 0x22

                     loc_8b86:
0000000000008b86         lea        rax, qword [r15+3]                          ; CODE XREF=sub_8280+2302
0000000000008b8a         cmp        r13, rax
0000000000008b8d         jbe        loc_8b95

0000000000008b8f         mov        byte [r14+r15+3], 0x3f

                     loc_8b95:
0000000000008b95         add        r15, 0x4                                    ; CODE XREF=sub_8280+2317
0000000000008b99         xor        edx, edx
0000000000008b9b         xor        r12d, r12d
0000000000008b9e         xor        eax, eax
0000000000008ba0         mov        rbp, rcx
0000000000008ba3         jmp        sub_7d30+56
                        ; endp

                     loc_8ba8:
0000000000008ba8         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
0000000000008baa         je         loc_8d38

0000000000008bb0         lea        rax, qword [aInvalidSsArgum+25]             ; 0xe529
0000000000008bb7         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008bbc         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008bc1         xor        r12d, r12d
0000000000008bc4         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008bcd         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000008bd2         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000008bd7         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008be0         xor        r15d, r15d
0000000000008be3         mov        qword [rsp+0xe8+var_A0], rax
0000000000008be8         jmp        loc_7c13
0000000000008bed         align      16

                     loc_8bf0:
0000000000008bf0         mov        rbp, r11                                    ; CODE XREF=sub_8280+333
0000000000008bf3         movzx      eax, byte [rsp+arg_7]
0000000000008bf8         jmp        sub_8280+1097
                        ; endp

                     loc_8bfd:
0000000000008bfd         lea        rax, qword [aLibs+27]                       ; 0xdab3, CODE XREF=sub_8280+1410
0000000000008c04         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000008c09         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000008c0e         xor        r12d, r12d
0000000000008c11         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008c1a         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000008c1f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000008c24         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000008c2d         xor        r15d, r15d
0000000000008c30         mov        qword [rsp+0xe8+var_A0], rax
0000000000008c35         jmp        loc_7c13

                     loc_8c3a:
0000000000008c3a         mov        eax, edx                                    ; CODE XREF=sub_8280+87

                     loc_8c3c:
0000000000008c3c         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_8280+76, sub_8280+2721
0000000000008c41         test       rbx, rbx
0000000000008c44         je         loc_8c72

0000000000008c46         test       al, al
0000000000008c48         je         loc_8c72

0000000000008c4a         movzx      ecx, byte [rbx]
0000000000008c4d         mov        rax, rbx
0000000000008c50         test       cl, cl
0000000000008c52         je         loc_8c72

0000000000008c54         mov        rdx, r15
0000000000008c57         sub        rax, r15

                     loc_8c5a:
0000000000008c5a         cmp        r13, rdx                                    ; CODE XREF=sub_8280+2541
0000000000008c5d         jbe        loc_8c63

0000000000008c5f         mov        byte [r14+rdx], cl

                     loc_8c63:
0000000000008c63         add        rdx, 0x1                                    ; CODE XREF=sub_8280+2525
0000000000008c67         movzx      ecx, byte [rax+rdx]
0000000000008c6b         test       cl, cl
0000000000008c6d         jne        loc_8c5a

0000000000008c6f         mov        r15, rdx

                     loc_8c72:
0000000000008c72         cmp        r13, r15                                    ; CODE XREF=sub_8280+2500, sub_8280+2504, sub_8280+2514
0000000000008c75         jbe        loc_8719

0000000000008c7b         mov        byte [r14+r15], 0x0
0000000000008c80         jmp        loc_8719

                     loc_8c85:
0000000000008c85         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
0000000000008c8a         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000008c8f         mov        rbp, r11
0000000000008c92         sete       al
0000000000008c95         mov        byte [rsp+0xe8+var_DB], bl
0000000000008c99         jmp        loc_86c9

                     loc_8c9e:
0000000000008c9e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_8280+1664
0000000000008ca2         mov        rdi, rcx
0000000000008ca5         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000008caa         mov        qword [rsp+0xe8+var_80], rax
0000000000008caf         jmp        loc_8906

                     loc_8cb4:
0000000000008cb4         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_8280+1707
0000000000008cb8         mov        rdi, rcx
0000000000008cbb         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000008cc0         mov        qword [rsp+0xe8+var_88], rax
0000000000008cc5         jmp        loc_8931

                     loc_8cca:
0000000000008cca         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_8120+16
0000000000008ccf         mov        rbp, r11
0000000000008cd2         mov        eax, edx
0000000000008cd4         mov        byte [rsp+arg_5], bl
0000000000008cd8         jmp        sub_8280+1097
                        ; endp

                     loc_8cdd:
0000000000008cdd         sub        rsp, 0x8                                    ; CODE XREF=sub_8280+98
0000000000008ce1         mov        r8d, 0x5
0000000000008ce7         mov        rcx, r11
0000000000008cea         push       qword [rsp+0xf0+var_88]
0000000000008cee         push       qword [rsp+0xf8+var_80]
0000000000008cf2         mov        rdi, r14
0000000000008cf5         push       qword [rsp+0x100+var_C8]
0000000000008cf9         mov        r9d, dword [rsp+0x108+var_70]
0000000000008d01         mov        rdx, qword [rsp+0x108+var_D8]
0000000000008d06         mov        rsi, qword [rsp+0x108+var_98]
0000000000008d0b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008d10         add        rsp, 0x20
0000000000008d14         mov        r15, rax
0000000000008d17         jmp        loc_8719

                     loc_8d1c:
0000000000008d1c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_8280+121
0000000000008d21         jmp        loc_8c3c

                     loc_8d26:
0000000000008d26         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_8280+63
0000000000008d2e         jmp        loc_86c9

                     loc_8d33:
0000000000008d33         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_8280+1197
                        ; endp

                     loc_8d38:
0000000000008d38         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_8280+2346
0000000000008d3d         jmp        loc_87b1

                     loc_8d42:
0000000000008d42         mov        rbp, r11                                    ; CODE XREF=sub_8280+2264
0000000000008d45         jmp        sub_8280+1120
                        ; endp

                     loc_8d4a:
0000000000008d4a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_8280+1332
0000000000008d4f         xor        eax, eax
0000000000008d51         xor        r12d, r12d
0000000000008d54         mov        qword [rsp+0xe8+var_98], 0x0
0000000000008d5d         jmp        loc_8304

                     loc_8d62:
0000000000008d62         mov        rdx, r13                                    ; CODE XREF=sub_8280+1264
0000000000008d65         mov        r13, qword [rsp+arg_48]
0000000000008d6a         jmp        loc_8362

                     loc_8d6f:
0000000000008d6f         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
0000000000008d74         align      128                                         ; End of unwind block (FDE at 0xf398)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000008d80         push       r15                                         ; Begin of unwind block (FDE at 0xf410), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000008d82         push       r14
0000000000008d84         movsxd     r15, edi
0000000000008d87         push       r13
0000000000008d89         push       r12
0000000000008d8b         mov        r14, rdx
0000000000008d8e         push       rbp
0000000000008d8f         push       rbx
0000000000008d90         mov        rbp, rcx
0000000000008d93         sub        rsp, 0x28
0000000000008d97         mov        qword [rsp+0x58+var_50], rsi
0000000000008d9c         call       j___errno_location                          ; __errno_location
0000000000008da1         mov        r13, rax
0000000000008da4         mov        eax, dword [rax]
0000000000008da6         test       r15d, r15d
0000000000008da9         mov        rbx, qword [slotvec]                        ; slotvec
0000000000008db0         mov        dword [rsp+0x58+var_40], eax
0000000000008db4         js         loc_8f21

0000000000008dba         cmp        dword [nslots], r15d                        ; nslots
0000000000008dc1         jg         loc_8e25

0000000000008dc3         cmp        r15d, 0x7fffffff
0000000000008dca         je         loc_8f26

0000000000008dd0         lea        r12d, dword [r15+1]
0000000000008dd4         lea        rax, qword [slotvec0]                       ; slotvec0
0000000000008ddb         movsxd     rsi, r12d
0000000000008dde         shl        rsi, 0x4
0000000000008de2         cmp        rbx, rax
0000000000008de5         je         loc_8f00

0000000000008deb         mov        rdi, rbx                                    ; argument #1 for method xrealloc
0000000000008dee         call       xrealloc                                    ; xrealloc
0000000000008df3         mov        rbx, rax
0000000000008df6         mov        qword [slotvec], rax                        ; slotvec

                     loc_8dfd:
0000000000008dfd         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000008e04         mov        edx, r12d
0000000000008e07         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000008e09         sub        edx, edi
0000000000008e0b         shl        rdi, 0x4
0000000000008e0f         movsxd     rdx, edx
0000000000008e12         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000008e15         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000008e19         call       j_memset                                    ; memset
0000000000008e1e         mov        dword [nslots], r12d                        ; nslots

                     loc_8e25:
0000000000008e25         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
0000000000008e28         shl        r15, 0x4
0000000000008e2c         sub        rsp, 0x8
0000000000008e30         add        rbx, r15
0000000000008e33         lea        r15, qword [rbp+8]
0000000000008e37         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000008e3b         mov        r11, qword [rbx]
0000000000008e3e         mov        r12, qword [rbx+8]
0000000000008e42         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000008e45         or         eax, 0x1
0000000000008e48         mov        dword [rsp+0x60+var_3C], eax
0000000000008e4c         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000008e4f         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
0000000000008e52         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000008e55         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000008e57         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
0000000000008e5a         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000008e5f         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
0000000000008e62         mov        qword [rsp+0x78+var_48], r11
0000000000008e67         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008e6c         add        rsp, 0x20
0000000000008e70         mov        r11, qword [rsp+0x58+var_48]
0000000000008e75         cmp        r11, rax
0000000000008e78         ja         loc_8ee1

0000000000008e7a         lea        rsi, qword [rax+1]
0000000000008e7e         lea        rax, qword [slot0]                          ; slot0
0000000000008e85         cmp        r12, rax
0000000000008e88         mov        qword [rbx], rsi
0000000000008e8b         je         loc_8e9f

0000000000008e8d         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000008e90         mov        qword [rsp+0x58+var_48], rsi
0000000000008e95         call       j_free                                      ; free
0000000000008e9a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_8e9f:
0000000000008e9f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000008ea2         mov        qword [rsp+0x58+var_48], rsi
0000000000008ea7         call       xmalloc                                     ; xmalloc
0000000000008eac         sub        rsp, 0x8
0000000000008eb0         mov        qword [rbx+8], rax
0000000000008eb4         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000008eb8         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
0000000000008ebb         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
0000000000008ebe         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000008ec1         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000008ec3         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000008ec8         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
0000000000008ecb         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000008ed0         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000008ed5         mov        r12, rax
0000000000008ed8         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000008edd         add        rsp, 0x20

                     loc_8ee1:
0000000000008ee1         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000008ee5         mov        dword [r13], eax
0000000000008ee9         add        rsp, 0x28
0000000000008eed         mov        rax, r12
0000000000008ef0         pop        rbx
0000000000008ef1         pop        rbp
0000000000008ef2         pop        r12
0000000000008ef4         pop        r13
0000000000008ef6         pop        r14
0000000000008ef8         pop        r15
0000000000008efa         ret
                        ; endp
0000000000008efb         align      256

                     loc_8f00:
0000000000008f00         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000008f02         call       xrealloc                                    ; xrealloc
0000000000008f07         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
0000000000008f0f         mov        rbx, rax
0000000000008f12         mov        qword [slotvec], rax                        ; slotvec
0000000000008f19         movups     xmmword [rax], xmm0
0000000000008f1c         jmp        loc_8dfd

                     loc_8f21:
0000000000008f21         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_8f26:
0000000000008f26         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_8f2b:
0000000000008f2b         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xf410)
                     clone_quoting_options:
0000000000008f30         push       r12                                         ; Begin of unwind block (FDE at 0xf47c)
0000000000008f32         push       rbp
0000000000008f33         push       rbx
0000000000008f34         mov        rbx, rdi
0000000000008f37         call       j___errno_location                          ; __errno_location
0000000000008f3c         mov        r12d, dword [rax]
0000000000008f3f         mov        rbp, rax
0000000000008f42         lea        rax, qword [default_quoting_options]        ; default_quoting_options
0000000000008f49         test       rbx, rbx
0000000000008f4c         mov        esi, 0x38                                   ; argument #2 for method xmemdup
0000000000008f51         cmove      rbx, rax
0000000000008f55         mov        rdi, rbx                                    ; argument #1 for method xmemdup
0000000000008f58         call       xmemdup                                     ; xmemdup
0000000000008f5d         mov        dword [rbp], r12d
0000000000008f61         pop        rbx
0000000000008f62         pop        rbp
0000000000008f63         pop        r12
0000000000008f65         ret
                        ; endp
0000000000008f66         align      16                                          ; End of unwind block (FDE at 0xf47c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
0000000000008f70         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf4a8), default_quoting_options
0000000000008f77         test       rdi, rdi
0000000000008f7a         cmove      rdi, rax
0000000000008f7e         mov        eax, dword [rdi]
0000000000008f80         ret
                        ; endp
0000000000008f81         align      16                                          ; End of unwind block (FDE at 0xf4a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000008f90         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf4bc), default_quoting_options
0000000000008f97         test       rdi, rdi
0000000000008f9a         cmove      rdi, rax
0000000000008f9e         mov        dword [rdi], esi
0000000000008fa0         ret
                        ; endp
0000000000008fa1         align      16                                          ; End of unwind block (FDE at 0xf4bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000008fb0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf4d0), default_quoting_options
0000000000008fb7         test       rdi, rdi
0000000000008fba         mov        ecx, esi
0000000000008fbc         cmove      rdi, rax
0000000000008fc0         mov        eax, esi
0000000000008fc2         and        ecx, 0x1f
0000000000008fc5         shr        al, 0x5
0000000000008fc8         movzx      eax, al
0000000000008fcb         lea        rdi, qword [rdi+rax*4+8]
0000000000008fd0         mov        esi, dword [rdi]
0000000000008fd2         mov        eax, esi
0000000000008fd4         shr        eax, cl
0000000000008fd6         xor        edx, eax
0000000000008fd8         and        eax, 0x1
0000000000008fdb         and        edx, 0x1
0000000000008fde         shl        edx, cl
0000000000008fe0         xor        edx, esi
0000000000008fe2         mov        dword [rdi], edx
0000000000008fe4         ret
                        ; endp
0000000000008fe5         align      16                                          ; End of unwind block (FDE at 0xf4d0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000008ff0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf4e4), default_quoting_options
0000000000008ff7         test       rdi, rdi
0000000000008ffa         cmove      rdi, rax
0000000000008ffe         mov        eax, dword [rdi+4]
0000000000009001         mov        dword [rdi+4], esi
0000000000009004         ret
                        ; endp
0000000000009005         align      16                                          ; End of unwind block (FDE at 0xf4e4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000009010         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf4f8), default_quoting_options
0000000000009017         test       rdi, rdi
000000000000901a         cmove      rdi, rax
000000000000901e         test       rsi, rsi
0000000000009021         mov        dword [rdi], 0xa
0000000000009027         je         loc_9037

0000000000009029         test       rdx, rdx
000000000000902c         je         loc_9037

000000000000902e         mov        qword [rdi+0x28], rsi
0000000000009032         mov        qword [rdi+0x30], rdx
0000000000009036         ret
                        ; endp

                     loc_9037:
0000000000009037         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
000000000000903b         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
0000000000009040         push       r15                                         ; End of unwind block (FDE at 0xf4f8), Begin of unwind block (FDE at 0xf50c)
0000000000009042         push       r14
0000000000009044         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000904b         push       r13
000000000000904d         push       r12
000000000000904f         mov        r13, rdi
0000000000009052         push       rbp
0000000000009053         push       rbx
0000000000009054         mov        rbx, r8
0000000000009057         mov        r14, rsi
000000000000905a         mov        r15, rdx
000000000000905d         sub        rsp, 0x18
0000000000009061         test       r8, r8
0000000000009064         cmove      rbx, rax
0000000000009068         mov        qword [rsp+0x48+var_40], rcx
000000000000906d         call       j___errno_location                          ; __errno_location
0000000000009072         mov        r12d, dword [rax]
0000000000009075         mov        rbp, rax
0000000000009078         lea        rax, qword [rbx+8]
000000000000907c         sub        rsp, 0x8
0000000000009080         mov        r9d, dword [rbx+4]
0000000000009084         push       qword [rbx+0x30]
0000000000009087         mov        r8d, dword [rbx]
000000000000908a         push       qword [rbx+0x28]
000000000000908d         mov        rdx, r15
0000000000009090         push       rax
0000000000009091         mov        rcx, qword [rsp+0x68+var_40]
0000000000009096         mov        rsi, r14
0000000000009099         mov        rdi, r13
000000000000909c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000090a1         mov        dword [rbp], r12d
00000000000090a5         add        rsp, 0x38
00000000000090a9         pop        rbx
00000000000090aa         pop        rbp
00000000000090ab         pop        r12
00000000000090ad         pop        r13
00000000000090af         pop        r14
00000000000090b1         pop        r15
00000000000090b3         ret
                        ; endp
00000000000090b4         align      64                                          ; End of unwind block (FDE at 0xf50c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
00000000000090c0         push       r15                                         ; Begin of unwind block (FDE at 0xf560), CODE XREF=quotearg_alloc+5
00000000000090c2         push       r14
00000000000090c4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000090cb         push       r13
00000000000090cd         push       r12
00000000000090cf         mov        r12, rdx
00000000000090d2         push       rbp
00000000000090d3         push       rbx
00000000000090d4         mov        rbx, rcx
00000000000090d7         mov        r14, rdi
00000000000090da         mov        r15, rsi
00000000000090dd         sub        rsp, 0x38
00000000000090e1         test       rcx, rcx
00000000000090e4         cmove      rbx, rax
00000000000090e8         xor        ebp, ebp
00000000000090ea         call       j___errno_location                          ; __errno_location
00000000000090ef         test       r12, r12
00000000000090f2         mov        r13, rax
00000000000090f5         mov        eax, dword [rax]
00000000000090f7         sete       bpl
00000000000090fb         or         ebp, dword [rbx+4]
00000000000090fe         lea        r10, qword [rbx+8]
0000000000009102         sub        rsp, 0x8
0000000000009106         mov        r8d, dword [rbx]
0000000000009109         mov        rcx, r15
000000000000910c         mov        dword [rsp+0x70+var_5C], eax
0000000000009110         push       qword [rbx+0x30]
0000000000009113         mov        rdx, r14
0000000000009116         push       qword [rbx+0x28]
0000000000009119         push       r10
000000000000911b         xor        esi, esi
000000000000911d         mov        r9d, ebp
0000000000009120         xor        edi, edi
0000000000009122         mov        qword [rsp+0x88+var_48], r10
0000000000009127         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000912c         lea        rsi, qword [rax+1]
0000000000009130         mov        qword [rsp+0x88+var_40], rax
0000000000009135         add        rsp, 0x20
0000000000009139         mov        rdi, rsi
000000000000913c         mov        qword [rsp+0x68+var_50], rsi
0000000000009141         call       xmalloc                                     ; xmalloc
0000000000009146         mov        qword [rsp+0x68+var_58], rax
000000000000914b         sub        rsp, 0x8
000000000000914f         push       qword [rbx+0x30]
0000000000009152         push       qword [rbx+0x28]
0000000000009155         mov        r10, qword [rsp+0x80+var_48]
000000000000915a         mov        r9d, ebp
000000000000915d         mov        r8d, dword [rbx]
0000000000009160         mov        rcx, r15
0000000000009163         mov        rdx, r14
0000000000009166         mov        rdi, rax
0000000000009169         push       r10
000000000000916b         mov        rsi, qword [rsp+0x88+var_50]
0000000000009170         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000009175         mov        eax, dword [rsp+0x88+var_5C]
0000000000009179         add        rsp, 0x20
000000000000917d         test       r12, r12
0000000000009180         mov        dword [r13], eax
0000000000009184         je         loc_918f

0000000000009186         mov        r11, qword [rsp+0x68+var_40]
000000000000918b         mov        qword [r12], r11

                     loc_918f:
000000000000918f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000009194         add        rsp, 0x38
0000000000009198         pop        rbx
0000000000009199         pop        rbp
000000000000919a         pop        r12
000000000000919c         pop        r13
000000000000919e         pop        r14
00000000000091a0         pop        r15
00000000000091a2         ret
                        ; endp
00000000000091a3         align      16                                          ; End of unwind block (FDE at 0xf560)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
00000000000091b0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xf5cc)
00000000000091b3         xor        edx, edx
00000000000091b5         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
00000000000091ba         align      64                                          ; End of unwind block (FDE at 0xf5cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
00000000000091c0         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xf5e0), nslots
00000000000091c6         push       r12
00000000000091c8         mov        r12, qword [slotvec]                        ; slotvec
00000000000091cf         push       rbp
00000000000091d0         push       rbx
00000000000091d1         cmp        eax, 0x1
00000000000091d4         jle        loc_9201

00000000000091d6         sub        eax, 0x2
00000000000091d9         lea        rbx, qword [r12+0x18]
00000000000091de         shl        rax, 0x4
00000000000091e2         lea        rbp, qword [r12+rax+0x28]
00000000000091e7         nop        word [rax+rax]

                     loc_91f0:
00000000000091f0         mov        rdi, qword [rbx]                            ; argument "__ptr" for method j_free, CODE XREF=quotearg_free+63
00000000000091f3         add        rbx, 0x10
00000000000091f7         call       j_free                                      ; free
00000000000091fc         cmp        rbx, rbp
00000000000091ff         jne        loc_91f0

                     loc_9201:
0000000000009201         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000009206         lea        rbx, qword [slot0]                          ; slot0
000000000000920d         cmp        rdi, rbx
0000000000009210         je         loc_9229

0000000000009212         call       j_free                                      ; free
0000000000009217         mov        qword [slotvec0], 0x100                     ; slotvec0
0000000000009222         mov        qword [slotvec0+8], rbx                     ; 0x2110d8

                     loc_9229:
0000000000009229         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
0000000000009230         cmp        r12, rbx
0000000000009233         je         loc_9244

0000000000009235         mov        rdi, r12                                    ; argument "__ptr" for method j_free
0000000000009238         call       j_free                                      ; free
000000000000923d         mov        qword [slotvec], rbx                        ; slotvec

                     loc_9244:
0000000000009244         pop        rbx                                         ; CODE XREF=quotearg_free+115
0000000000009245         mov        dword [nslots], 0x1                         ; nslots
000000000000924f         pop        rbp
0000000000009250         pop        r12
0000000000009252         ret
                        ; endp
0000000000009253         align      32                                          ; End of unwind block (FDE at 0xf5e0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
0000000000009260         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf60c), default_quoting_options
0000000000009267         mov        rdx, 0xffffffffffffffff
000000000000926e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000009273         align      128                                         ; End of unwind block (FDE at 0xf60c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000009280         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf620), default_quoting_options
0000000000009287         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000928c         align      16                                          ; End of unwind block (FDE at 0xf620)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000009290         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf634), default_quoting_options
0000000000009297         mov        rsi, rdi
000000000000929a         mov        rdx, 0xffffffffffffffff
00000000000092a1         xor        edi, edi
00000000000092a3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000092a8         align      16                                          ; End of unwind block (FDE at 0xf634)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
00000000000092b0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xf648), default_quoting_options
00000000000092b7         mov        rdx, rsi
00000000000092ba         mov        rsi, rdi
00000000000092bd         xor        edi, edi
00000000000092bf         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000092c4         align      16                                          ; End of unwind block (FDE at 0xf648)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style:
00000000000092d0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xf65c)
00000000000092d4         mov        rax, rdx
00000000000092d7         mov        rdx, qword [fs:0x28]
00000000000092e0         mov        qword [rsp+0x48+var_10], rdx
00000000000092e5         xor        edx, edx
00000000000092e7         cmp        esi, 0xa
00000000000092ea         je         loc_9354

00000000000092ec         mov        dword [rsp+0x48+var_48], esi
00000000000092ef         mov        rcx, rsp
00000000000092f2         mov        rdx, 0xffffffffffffffff
00000000000092f9         mov        rsi, rax
00000000000092fc         mov        qword [rsp+0x48+var_44], 0x0
0000000000009305         mov        qword [rsp+0x48+var_3C], 0x0
000000000000930e         mov        qword [rsp+0x48+var_34], 0x0
0000000000009317         mov        qword [rsp+0x48+var_2C], 0x0
0000000000009320         mov        qword [rsp+0x48+var_24], 0x0
0000000000009329         mov        qword [rsp+0x48+var_1C], 0x0
0000000000009332         mov        dword [rsp+0x48+var_14], 0x0
000000000000933a         call       quotearg_n_options                          ; quotearg_n_options
000000000000933f         mov        rcx, qword [rsp+0x48+var_10]
0000000000009344         xor        rcx, qword [fs:0x28]
000000000000934d         jne        loc_9359

000000000000934f         add        rsp, 0x48
0000000000009353         ret
                        ; endp

                     loc_9354:
0000000000009354         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_9359:
0000000000009359         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
000000000000935e         align      32                                          ; End of unwind block (FDE at 0xf65c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000009360         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xf678), CODE XREF=quotearg_style_mem+10
0000000000009364         mov        rax, rdx
0000000000009367         mov        rdx, rcx
000000000000936a         mov        rcx, qword [fs:0x28]
0000000000009373         mov        qword [rsp+0x48+var_10], rcx
0000000000009378         xor        ecx, ecx
000000000000937a         cmp        esi, 0xa
000000000000937d         je         loc_93e0

000000000000937f         mov        dword [rsp+0x48+var_48], esi
0000000000009382         mov        rcx, rsp
0000000000009385         mov        rsi, rax
0000000000009388         mov        qword [rsp+0x48+var_44], 0x0
0000000000009391         mov        qword [rsp+0x48+var_3C], 0x0
000000000000939a         mov        qword [rsp+0x48+var_34], 0x0
00000000000093a3         mov        qword [rsp+0x48+var_2C], 0x0
00000000000093ac         mov        qword [rsp+0x48+var_24], 0x0
00000000000093b5         mov        qword [rsp+0x48+var_1C], 0x0
00000000000093be         mov        dword [rsp+0x48+var_14], 0x0
00000000000093c6         call       quotearg_n_options                          ; quotearg_n_options
00000000000093cb         mov        rdx, qword [rsp+0x48+var_10]
00000000000093d0         xor        rdx, qword [fs:0x28]
00000000000093d9         jne        loc_93e5

00000000000093db         add        rsp, 0x48
00000000000093df         ret
                        ; endp

                     loc_93e0:
00000000000093e0         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_93e5:
00000000000093e5         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
00000000000093ea         align      16                                          ; End of unwind block (FDE at 0xf678)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style:
00000000000093f0         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xf694)
00000000000093f3         mov        esi, edi
00000000000093f5         xor        edi, edi
00000000000093f7         jmp        quotearg_n_style                            ; quotearg_n_style
                        ; endp
00000000000093fc         align      1024                                        ; End of unwind block (FDE at 0xf694)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000009400         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xf6a8)
0000000000009403         mov        rdx, rsi
0000000000009406         mov        esi, edi
0000000000009408         xor        edi, edi
000000000000940a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
000000000000940f         align      16                                          ; End of unwind block (FDE at 0xf6a8)

                     quotearg_char_mem:
0000000000009410         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xf6bc), CODE XREF=quotearg_char+11
0000000000009414         mov        ecx, edx
0000000000009416         mov        rax, qword [fs:0x28]
000000000000941f         mov        qword [rsp+0x48+var_10], rax
0000000000009424         xor        eax, eax
0000000000009426         mov        rax, qword [qword_211390]                   ; qword_211390
000000000000942d         mov        r8, rsp
0000000000009430         and        ecx, 0x1f
0000000000009433         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
000000000000943b         mov        qword [rsp+0x48+var_18], rax
0000000000009440         mov        eax, edx
0000000000009442         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000009446         shr        al, 0x5
0000000000009449         movzx      eax, al
000000000000944c         lea        r9, qword [r8+rax*4+8]
0000000000009451         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x211370
0000000000009459         movaps     xmmword [rsp+0x48+var_38], xmm0
000000000000945e         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x211380
0000000000009466         movaps     xmmword [rsp+0x48+var_28], xmm0
000000000000946b         mov        edx, dword [r9]
000000000000946e         mov        eax, edx
0000000000009470         shr        eax, cl
0000000000009472         not        eax
0000000000009474         and        eax, 0x1
0000000000009477         shl        eax, cl
0000000000009479         mov        rcx, r8
000000000000947c         xor        eax, edx
000000000000947e         mov        rdx, rsi
0000000000009481         mov        rsi, rdi
0000000000009484         mov        dword [r9], eax
0000000000009487         xor        edi, edi
0000000000009489         call       quotearg_n_options                          ; quotearg_n_options
000000000000948e         mov        rsi, qword [rsp+0x48+var_10]
0000000000009493         xor        rsi, qword [fs:0x28]
000000000000949c         jne        loc_94a3

000000000000949e         add        rsp, 0x48
00000000000094a2         ret
                        ; endp

                     loc_94a3:
00000000000094a3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
00000000000094a8         align      16                                          ; End of unwind block (FDE at 0xf6bc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
00000000000094b0         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xf6d8)
00000000000094b4         mov        rsi, 0xffffffffffffffff
00000000000094bb         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
00000000000094c0         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xf6d8), Begin of unwind block (FDE at 0xf6ec), CODE XREF=close_stdout+101
00000000000094c5         mov        rsi, 0xffffffffffffffff
00000000000094cc         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000094d1         align      32                                          ; End of unwind block (FDE at 0xf6ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
00000000000094e0         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xf700)
00000000000094e5         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
00000000000094ea         align      16                                          ; End of unwind block (FDE at 0xf700)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
00000000000094f0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xf714), CODE XREF=close_file.part.4+171, close_file.part.4+219, open_file+200
00000000000094f4         mov        rax, rdx
00000000000094f7         mov        rdx, qword [fs:0x28]
0000000000009500         mov        qword [rsp+0x48+var_10], rdx
0000000000009505         xor        edx, edx
0000000000009507         cmp        esi, 0xa
000000000000950a         je         loc_9574

000000000000950c         mov        dword [rsp+0x48+var_48], esi
000000000000950f         mov        rcx, rsp
0000000000009512         mov        rdx, 0xffffffffffffffff
0000000000009519         mov        rsi, rax
000000000000951c         mov        qword [rsp+0x48+var_44], 0x0
0000000000009525         mov        qword [rsp+0x48+var_3C], 0x4000000
000000000000952e         mov        qword [rsp+0x48+var_34], 0x0
0000000000009537         mov        qword [rsp+0x48+var_2C], 0x0
0000000000009540         mov        qword [rsp+0x48+var_24], 0x0
0000000000009549         mov        qword [rsp+0x48+var_1C], 0x0
0000000000009552         mov        dword [rsp+0x48+var_14], 0x0
000000000000955a         call       quotearg_n_options                          ; quotearg_n_options
000000000000955f         mov        rcx, qword [rsp+0x48+var_10]
0000000000009564         xor        rcx, qword [fs:0x28]
000000000000956d         jne        loc_9579

000000000000956f         add        rsp, 0x48
0000000000009573         ret
                        ; endp

                     loc_9574:
0000000000009574         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_9579:
0000000000009579         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
000000000000957e         align      128                                         ; End of unwind block (FDE at 0xf714)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000009580         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xf730), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000009584         mov        r9, rcx
0000000000009587         mov        rcx, qword [qword_211390]                   ; qword_211390
000000000000958e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000009596         mov        rax, qword [fs:0x28]
000000000000959f         mov        qword [rsp+0x48+var_10], rax
00000000000095a4         xor        eax, eax
00000000000095a6         movaps     xmmword [rsp+0x48+var_48], xmm0
00000000000095aa         test       rsi, rsi
00000000000095ad         mov        qword [rsp+0x48+var_18], rcx
00000000000095b2         mov        dword [rsp+0x48+var_48], 0xa
00000000000095b9         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x211370
00000000000095c1         movaps     xmmword [rsp+0x48+var_38], xmm0
00000000000095c6         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x211380
00000000000095ce         movaps     xmmword [rsp+0x48+var_28], xmm0
00000000000095d3         je         loc_9607

00000000000095d5         test       rdx, rdx
00000000000095d8         je         loc_9607

00000000000095da         mov        qword [rsp+0x48+var_20], rsi
00000000000095df         mov        qword [rsp+0x48+var_18], rdx
00000000000095e4         mov        rcx, rsp
00000000000095e7         mov        rdx, r8
00000000000095ea         mov        rsi, r9
00000000000095ed         call       quotearg_n_options                          ; quotearg_n_options
00000000000095f2         mov        rdi, qword [rsp+0x48+var_10]
00000000000095f7         xor        rdi, qword [fs:0x28]
0000000000009600         jne        loc_960c

0000000000009602         add        rsp, 0x48
0000000000009606         ret
                        ; endp

                     loc_9607:
0000000000009607         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_960c:
000000000000960c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000009611         align      32                                          ; End of unwind block (FDE at 0xf730)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000009620         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xf74c)
0000000000009627         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
000000000000962c         align      16                                          ; End of unwind block (FDE at 0xf74c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000009630         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xf760)
0000000000009633         mov        r8, 0xffffffffffffffff
000000000000963a         mov        rdx, rsi
000000000000963d         mov        rsi, rdi
0000000000009640         xor        edi, edi
0000000000009642         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000009647         align      16                                          ; End of unwind block (FDE at 0xf760)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000009650         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xf774)
0000000000009653         mov        rcx, rdx
0000000000009656         mov        rdx, rsi
0000000000009659         mov        rsi, rdi
000000000000965c         xor        edi, edi
000000000000965e         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000009663         align      16                                          ; End of unwind block (FDE at 0xf774)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000009670         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xf788), quote_quoting_options
0000000000009677         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
000000000000967c         align      128                                         ; End of unwind block (FDE at 0xf788)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000009680         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xf79c), quote_quoting_options
0000000000009687         mov        rdx, rsi
000000000000968a         mov        rsi, rdi
000000000000968d         xor        edi, edi
000000000000968f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000009694         align      32                                          ; End of unwind block (FDE at 0xf79c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
00000000000096a0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xf7b0), quote_quoting_options
00000000000096a7         mov        rdx, 0xffffffffffffffff
00000000000096ae         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000096b3         align      64                                          ; End of unwind block (FDE at 0xf7b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
00000000000096c0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xf7c4), quote_quoting_options, CODE XREF=main+2282, getoptarg+154, xnumtoimax+111
00000000000096c7         mov        rsi, rdi
00000000000096ca         mov        rdx, 0xffffffffffffffff
00000000000096d1         xor        edi, edi
00000000000096d3         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000096d8         align      32                                          ; End of unwind block (FDE at 0xf7c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     dup_safer:
00000000000096e0         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0xf7dc), CODE XREF=fopen_safer+50
00000000000096e5         xor        esi, esi
00000000000096e7         xor        eax, eax
00000000000096e9         jmp        rpl_fcntl                                   ; rpl_fcntl
00000000000096ee         align      16                                          ; End of unwind block (FDE at 0xf7dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
00000000000096f0         push       r15                                         ; Begin of unwind block (FDE at 0xf7f4), CODE XREF=j_version_etc_arn, version_etc_va+75, version_etc+161
00000000000096f2         push       r14
00000000000096f4         push       r13
00000000000096f6         push       r12
00000000000096f8         mov        r12, r9
00000000000096fb         push       rbp
00000000000096fc         push       rbx
00000000000096fd         mov        rbp, rdi
0000000000009700         mov        rbx, r8
0000000000009703         sub        rsp, 0x28
0000000000009707         test       rsi, rsi
000000000000970a         je         loc_9828

0000000000009710         mov        r8, rdx
0000000000009713         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
000000000000971a         mov        r9, rcx
000000000000971d         xor        eax, eax
000000000000971f         mov        rcx, rsi
0000000000009722         mov        esi, 0x1
0000000000009727         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_972c:
000000000000972c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xdf9b, CODE XREF=version_etc_arn+337
0000000000009733         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009735         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000973a         call       j_dcgettext                                 ; dcgettext
000000000000973f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000009746         mov        rcx, rax
0000000000009749         mov        r8d, 0x7e3
000000000000974f         mov        esi, 0x1
0000000000009754         mov        rdi, rbp
0000000000009757         xor        eax, eax
0000000000009759         call       j___fprintf_chk                             ; __fprintf_chk
000000000000975e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000009765         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009767         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000976c         call       j_dcgettext                                 ; dcgettext
0000000000009771         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000009774         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000009777         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000977c         cmp        r12, 0x9
0000000000009780         ja         loc_9ac0

0000000000009786         lea        rdx, qword [switch_table_e284]              ; switch_table_e284
000000000000978d         movsxd     rax, dword [rdx+r12*4]
0000000000009791         add        rax, rdx
0000000000009794         jmp        rax                                         ; switch statement using table at 0xe284, with 10 cases, 0x97a0,0x9816,0x9850,0x98a8,0x98e8,0x9930,0x9980,0x99d8,0x9a08,0x9a70
0000000000009796         align      32

                     loc_97a0:
00000000000097a0         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
00000000000097a4         mov        rax, qword [rbx+0x10]
00000000000097a8         lea        rsi, qword [aWrittenBySSSns_e198]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
00000000000097af         mov        r8, qword [rbx+8]
00000000000097b3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000097b8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000097ba         mov        r13, qword [rbx+0x30]
00000000000097be         mov        r12, qword [rbx+0x28]
00000000000097c2         mov        qword [rsp+0x58+var_48], r9
00000000000097c7         mov        r15, qword [rbx+0x20]
00000000000097cb         mov        r14, qword [rbx+0x18]
00000000000097cf         mov        qword [rsp+0x58+var_58], rax
00000000000097d3         mov        qword [rsp+0x58+var_50], r8
00000000000097d8         mov        rbx, qword [rbx]
00000000000097db         call       j_dcgettext                                 ; dcgettext
00000000000097e0         sub        rsp, 0x8

                     loc_97e4:
00000000000097e4         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
00000000000097e9         mov        rdx, rax
00000000000097ec         mov        rcx, rbx
00000000000097ef         mov        esi, 0x1
00000000000097f4         mov        rdi, rbp
00000000000097f7         xor        eax, eax
00000000000097f9         push       r9
00000000000097fb         push       r13
00000000000097fd         push       r12
00000000000097ff         push       r15
0000000000009801         push       r14
0000000000009803         mov        r9, qword [rsp+0x88+var_58]
0000000000009808         mov        r8, qword [rsp+0x88+var_50]
000000000000980d         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009812         add        rsp, 0x30

                     loc_9816:
0000000000009816         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000981a         pop        rbx
000000000000981b         pop        rbp
000000000000981c         pop        r12
000000000000981e         pop        r13
0000000000009820         pop        r14
0000000000009822         pop        r15
0000000000009824         ret
                        ; endp
0000000000009825         align      8

                     loc_9828:
0000000000009828         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000982b         mov        rcx, rdx
000000000000982e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000009835         mov        esi, 0x1
000000000000983a         xor        eax, eax
000000000000983c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009841         jmp        loc_972c
0000000000009846         align      16

                     loc_9850:
0000000000009850         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000009854         mov        r9, qword [rbx+0x38]
0000000000009858         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000985f         mov        rax, qword [rbx+0x10]
0000000000009863         mov        r8, qword [rbx+8]
0000000000009867         mov        edx, 0x5
000000000000986c         mov        r13, qword [rbx+0x30]
0000000000009870         mov        r12, qword [rbx+0x28]
0000000000009874         mov        r15, qword [rbx+0x20]
0000000000009878         mov        r14, qword [rbx+0x18]
000000000000987c         mov        rbx, qword [rbx]
000000000000987f         mov        qword [rsp+0x58+var_40], r10
0000000000009884         mov        qword [rsp+0x58+var_48], r9
0000000000009889         mov        qword [rsp+0x58+var_58], rax
000000000000988d         mov        qword [rsp+0x58+var_50], r8

                     loc_9892:
0000000000009892         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000009894         call       j_dcgettext                                 ; dcgettext
0000000000009899         mov        r10, qword [rsp+0x58+var_40]
000000000000989e         push       r10
00000000000098a0         jmp        loc_97e4
00000000000098a5         align      8

                     loc_98a8:
00000000000098a8         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
00000000000098ab         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
00000000000098b2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000098b7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000098b9         call       j_dcgettext                                 ; dcgettext
00000000000098be         add        rsp, 0x28
00000000000098c2         mov        rcx, rbx
00000000000098c5         mov        rdi, rbp
00000000000098c8         pop        rbx
00000000000098c9         pop        rbp
00000000000098ca         pop        r12
00000000000098cc         pop        r13
00000000000098ce         pop        r14
00000000000098d0         pop        r15
00000000000098d2         mov        rdx, rax
00000000000098d5         mov        esi, 0x1
00000000000098da         xor        eax, eax
00000000000098dc         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000098e1         align      8

                     loc_98e8:
00000000000098e8         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
00000000000098ec         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
00000000000098f3         mov        rbx, qword [rbx]
00000000000098f6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000098fb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000098fd         call       j_dcgettext                                 ; dcgettext
0000000000009902         add        rsp, 0x28
0000000000009906         mov        r8, r12
0000000000009909         mov        rcx, rbx
000000000000990c         mov        rdi, rbp
000000000000990f         mov        rdx, rax
0000000000009912         mov        esi, 0x1
0000000000009917         pop        rbx
0000000000009918         pop        rbp
0000000000009919         pop        r12
000000000000991b         pop        r13
000000000000991d         pop        r14
000000000000991f         pop        r15
0000000000009921         xor        eax, eax
0000000000009923         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000009928         align      16

                     loc_9930:
0000000000009930         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000009934         mov        r12, qword [rbx+8]
0000000000009938         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000993f         mov        rbx, qword [rbx]
0000000000009942         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009947         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009949         call       j_dcgettext                                 ; dcgettext
000000000000994e         add        rsp, 0x28
0000000000009952         mov        r9, r13
0000000000009955         mov        r8, r12
0000000000009958         mov        rcx, rbx
000000000000995b         mov        rdi, rbp
000000000000995e         mov        rdx, rax
0000000000009961         pop        rbx
0000000000009962         pop        rbp
0000000000009963         pop        r12
0000000000009965         pop        r13
0000000000009967         pop        r14
0000000000009969         pop        r15
000000000000996b         mov        esi, 0x1
0000000000009970         xor        eax, eax
0000000000009972         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000009977         align      128

                     loc_9980:
0000000000009980         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000009987         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000998c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000998e         mov        r14, qword [rbx+0x18]
0000000000009992         mov        r13, qword [rbx+0x10]
0000000000009996         mov        r12, qword [rbx+8]
000000000000999a         mov        rbx, qword [rbx]
000000000000999d         call       j_dcgettext                                 ; dcgettext
00000000000099a2         sub        rsp, 0x8

                     loc_99a6:
00000000000099a6         push       r14                                         ; CODE XREF=version_etc_arn+784
00000000000099a8         mov        rdx, rax
00000000000099ab         mov        r9, r13
00000000000099ae         mov        r8, r12
00000000000099b1         mov        rcx, rbx
00000000000099b4         mov        rdi, rbp
00000000000099b7         mov        esi, 0x1
00000000000099bc         xor        eax, eax
00000000000099be         call       j___fprintf_chk                             ; __fprintf_chk
00000000000099c3         pop        rax
00000000000099c4         pop        rdx
00000000000099c5         add        rsp, 0x28
00000000000099c9         pop        rbx
00000000000099ca         pop        rbp
00000000000099cb         pop        r12
00000000000099cd         pop        r13
00000000000099cf         pop        r14
00000000000099d1         pop        r15
00000000000099d3         ret
                        ; endp
00000000000099d4         align      8

                     loc_99d8:
00000000000099d8         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
00000000000099dc         lea        rsi, qword [aWrittenBySSSns_e118]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
00000000000099e3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000099e8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000099ea         mov        r14, qword [rbx+0x18]
00000000000099ee         mov        r13, qword [rbx+0x10]
00000000000099f2         mov        r12, qword [rbx+8]
00000000000099f6         mov        rbx, qword [rbx]
00000000000099f9         call       j_dcgettext                                 ; dcgettext
00000000000099fe         push       r15
0000000000009a00         jmp        loc_99a6
0000000000009a02         align      8

                     loc_9a08:
0000000000009a08         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
0000000000009a0c         mov        r12, qword [rbx+0x28]
0000000000009a10         lea        rsi, qword [aWrittenBySSSns_e140]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, and %s.\\n"
0000000000009a17         mov        r15, qword [rbx+0x20]
0000000000009a1b         mov        r14, qword [rbx+0x18]
0000000000009a1f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009a24         mov        r13, qword [rbx+0x10]
0000000000009a28         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009a2a         mov        rbx, qword [rbx]
0000000000009a2d         mov        qword [rsp+0x58+var_58], r8
0000000000009a31         call       j_dcgettext                                 ; dcgettext
0000000000009a36         sub        rsp, 0x8
0000000000009a3a         mov        r9, r13
0000000000009a3d         push       r12
0000000000009a3f         push       r15
0000000000009a41         push       r14

                     loc_9a43:
0000000000009a43         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
0000000000009a48         mov        rcx, rbx
0000000000009a4b         mov        rdx, rax
0000000000009a4e         mov        rdi, rbp
0000000000009a51         mov        esi, 0x1
0000000000009a56         xor        eax, eax
0000000000009a58         call       j___fprintf_chk                             ; __fprintf_chk
0000000000009a5d         add        rsp, 0x20
0000000000009a61         add        rsp, 0x28
0000000000009a65         pop        rbx
0000000000009a66         pop        rbp
0000000000009a67         pop        r12
0000000000009a69         pop        r13
0000000000009a6b         pop        r14
0000000000009a6d         pop        r15
0000000000009a6f         ret
                        ; endp

                     loc_9a70:
0000000000009a70         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000009a74         mov        r13, qword [rbx+0x30]
0000000000009a78         lea        rsi, qword [aWrittenBySSSns_e168]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
0000000000009a7f         mov        r12, qword [rbx+0x28]
0000000000009a83         mov        r15, qword [rbx+0x20]
0000000000009a87         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009a8c         mov        r14, qword [rbx+0x18]
0000000000009a90         mov        r8, qword [rbx+8]
0000000000009a94         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009a96         mov        qword [rsp+0x58+var_50], r9
0000000000009a9b         mov        rbx, qword [rbx]
0000000000009a9e         mov        qword [rsp+0x58+var_58], r8
0000000000009aa2         call       j_dcgettext                                 ; dcgettext
0000000000009aa7         push       r13
0000000000009aa9         push       r12
0000000000009aab         push       r15
0000000000009aad         push       r14
0000000000009aaf         mov        r9, qword [rsp+0x78+var_50]
0000000000009ab4         jmp        loc_9a43
0000000000009ab6         align      64

                     loc_9ac0:
0000000000009ac0         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
0000000000009ac4         mov        r9, qword [rbx+0x38]
0000000000009ac8         mov        edx, 0x5
0000000000009acd         mov        rax, qword [rbx+0x10]
0000000000009ad1         mov        r8, qword [rbx+8]
0000000000009ad5         lea        rsi, qword [aWrittenBySSSns_e200]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
0000000000009adc         mov        r13, qword [rbx+0x30]
0000000000009ae0         mov        r12, qword [rbx+0x28]
0000000000009ae4         mov        r15, qword [rbx+0x20]
0000000000009ae8         mov        r14, qword [rbx+0x18]
0000000000009aec         mov        qword [rsp+0x58+var_40], r10
0000000000009af1         mov        qword [rsp+0x58+var_48], r9
0000000000009af6         mov        qword [rsp+0x58+var_58], rax
0000000000009afa         mov        qword [rsp+0x58+var_50], r8
0000000000009aff         mov        rbx, qword [rbx]
0000000000009b02         jmp        loc_9892
0000000000009b07         align      16                                          ; End of unwind block (FDE at 0xf7f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000009b10         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xf908)
0000000000009b13         cmp        qword [r8], 0x0
0000000000009b17         je         j_version_etc_arn                           ; version_etc_arn

0000000000009b19         nop        dword [rax]

                     loc_9b20:
0000000000009b20         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000009b24         cmp        qword [r8+r9*8], 0x0
0000000000009b29         jne        loc_9b20

                     j_version_etc_arn:        // version_etc_arn
0000000000009b2b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000009b30         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xf908), Begin of unwind block (FDE at 0xf91c)
0000000000009b34         mov        r10, r8
0000000000009b37         xor        r9d, r9d
0000000000009b3a         mov        rax, qword [fs:0x28]
0000000000009b43         mov        qword [rsp+0x68+var_10], rax
0000000000009b48         xor        eax, eax
0000000000009b4a         mov        r8, rsp
0000000000009b4d         nop        dword [rax]

                     loc_9b50:
0000000000009b50         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000009b53         cmp        eax, 0x2f
0000000000009b56         ja         loc_9b9a

0000000000009b58         mov        r11d, eax
0000000000009b5b         add        r11, qword [r10+0x10]
0000000000009b5f         add        eax, 0x8
0000000000009b62         mov        dword [r10], eax

                     loc_9b65:
0000000000009b65         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000009b68         test       rax, rax
0000000000009b6b         mov        qword [r8+r9*8], rax
0000000000009b6f         je         loc_9b7b

0000000000009b71         add        r9, 0x1
0000000000009b75         cmp        r9, 0xa
0000000000009b79         jne        loc_9b50

                     loc_9b7b:
0000000000009b7b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000009b80         mov        rax, qword [rsp+0x68+var_10]
0000000000009b85         xor        rax, qword [fs:0x28]
0000000000009b8e         jne        loc_9b95

0000000000009b90         add        rsp, 0x68
0000000000009b94         ret
                        ; endp

                     loc_9b95:
0000000000009b95         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_9b9a:
0000000000009b9a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
0000000000009b9e         lea        rax, qword [r11+8]
0000000000009ba2         mov        qword [r10+8], rax
0000000000009ba6         jmp        loc_9b65
0000000000009ba8         align      16                                          ; End of unwind block (FDE at 0xf91c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
0000000000009bb0         push       rbp                                         ; Begin of unwind block (FDE at 0xf938), CODE XREF=main+1869
0000000000009bb1         push       rbx
0000000000009bb2         mov        r10d, 0x20
0000000000009bb8         xor        r11d, r11d
0000000000009bbb         sub        rsp, 0xb8
0000000000009bc2         mov        rax, qword [fs:0x28]
0000000000009bcb         mov        qword [rsp+0xc8+var_50], rax
0000000000009bd0         xor        eax, eax
0000000000009bd2         lea        rax, qword [rsp+0xc8+arg_0]
0000000000009bda         mov        qword [rsp+0xc8+var_28], r8
0000000000009be2         lea        rbx, qword [rsp+0xc8+arg_0]
0000000000009bea         lea        r8, qword [rsp+0xc8+var_A8]
0000000000009bef         mov        qword [rsp+0xc8+var_20], r9
0000000000009bf7         mov        dword [rsp+0xc8+var_C0], 0x20
0000000000009bff         mov        qword [rsp+0xc8+var_B8], rax
0000000000009c04         lea        rax, qword [rsp+0xc8+var_48]
0000000000009c0c         xor        r9d, r9d
0000000000009c0f         mov        qword [rsp+0xc8+var_B0], rax
0000000000009c14         mov        rbp, rax
0000000000009c17         nop        word [rax+rax]

                     loc_9c20:
0000000000009c20         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000009c24         ja         loc_9c7c

0000000000009c26         mov        eax, r10d
0000000000009c29         mov        r11d, 0x1
0000000000009c2f         add        r10d, 0x8
0000000000009c33         add        rax, rbp

                     loc_9c36:
0000000000009c36         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000009c39         test       rax, rax
0000000000009c3c         mov        qword [r8+r9*8], rax
0000000000009c40         je         loc_9c4c

0000000000009c42         add        r9, 0x1
0000000000009c46         cmp        r9, 0xa
0000000000009c4a         jne        loc_9c20

                     loc_9c4c:
0000000000009c4c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
0000000000009c4f         jne        loc_9c75

                     loc_9c51:
0000000000009c51         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000009c56         mov        rax, qword [rsp+0xc8+var_50]
0000000000009c5b         xor        rax, qword [fs:0x28]
0000000000009c64         jne        loc_9c70

0000000000009c66         add        rsp, 0xb8
0000000000009c6d         pop        rbx
0000000000009c6e         pop        rbp
0000000000009c6f         ret
                        ; endp

                     loc_9c70:
0000000000009c70         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_9c75:
0000000000009c75         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
0000000000009c7a         jmp        loc_9c51

                     loc_9c7c:
0000000000009c7c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
0000000000009c7f         add        rbx, 0x8
0000000000009c83         jmp        loc_9c36
0000000000009c85         align      16                                          ; End of unwind block (FDE at 0xf938)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000009c90         push       rbx                                         ; Begin of unwind block (FDE at 0xf964)
0000000000009c91         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000009c98         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009c9d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009c9f         call       j_dcgettext                                 ; dcgettext
0000000000009ca4         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
0000000000009cab         mov        rsi, rax
0000000000009cae         mov        edi, 0x1
0000000000009cb3         xor        eax, eax
0000000000009cb5         call       j___printf_chk                              ; __printf_chk
0000000000009cba         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
0000000000009cc1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009cc6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009cc8         call       j_dcgettext                                 ; dcgettext
0000000000009ccd         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000009cd4         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xbf75
0000000000009cdb         mov        rsi, rax
0000000000009cde         mov        edi, 0x1
0000000000009ce3         xor        eax, eax
0000000000009ce5         call       j___printf_chk                              ; __printf_chk
0000000000009cea         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000009cf1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
0000000000009cf8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009cfa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009cff         call       j_dcgettext                                 ; dcgettext
0000000000009d04         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000009d07         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000009d0a         pop        rbx
0000000000009d0b         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000009d10         push       rbx                                         ; End of unwind block (FDE at 0xf964), Begin of unwind block (FDE at 0xf984), CODE XREF=main+140, init_header+185, init_header+469, print_files+384, print_files+430, print_files+512, print_files+3441, print_files+3513, print_files+3581, quotearg_n_options+295, quotearg_alloc_mem+129
0000000000009d11         mov        rbx, rdi
0000000000009d14         call       j_malloc                                    ; malloc
0000000000009d19         test       rax, rax
0000000000009d1c         jne        loc_9d23

0000000000009d1e         test       rbx, rbx
0000000000009d21         jne        loc_9d25

                     loc_9d23:
0000000000009d23         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000009d24         ret
                        ; endp

                     loc_9d25:
0000000000009d25         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d2a:
0000000000009d2a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xf984)
                     xnmalloc:
0000000000009d30         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xf9a0)
0000000000009d33         mul        rsi
0000000000009d36         mov        rdi, rax
0000000000009d39         seto       al
0000000000009d3c         test       rdi, rdi
0000000000009d3f         js         loc_9d4b

0000000000009d41         movzx      eax, al
0000000000009d44         test       rax, rax
0000000000009d47         jne        loc_9d4b

0000000000009d49         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_9d4b:
0000000000009d4b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
0000000000009d4f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9d54:
0000000000009d54         nop                                                    ; End of unwind block (FDE at 0xf9a0)
0000000000009d56         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000009d60         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xf9b4)
                        ; endp
0000000000009d62         align      16                                          ; End of unwind block (FDE at 0xf9b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
0000000000009d70         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xf9c8), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
0000000000009d73         push       rbx
0000000000009d74         mov        rbx, rsi
0000000000009d77         jne        loc_9d7e

0000000000009d79         test       rdi, rdi
0000000000009d7c         jne        loc_9d98

                     loc_9d7e:
0000000000009d7e         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
0000000000009d81         call       j_realloc                                   ; realloc
0000000000009d86         test       rax, rax
0000000000009d89         jne        loc_9d90

0000000000009d8b         test       rbx, rbx
0000000000009d8e         jne        loc_9da1

                     loc_9d90:
0000000000009d90         pop        rbx                                         ; CODE XREF=xrealloc+25
0000000000009d91         ret
                        ; endp
0000000000009d92         align      8

                     loc_9d98:
0000000000009d98         call       j_free                                      ; free, CODE XREF=xrealloc+12
0000000000009d9d         xor        eax, eax
0000000000009d9f         pop        rbx
0000000000009da0         ret
                        ; endp

                     loc_9da1:
0000000000009da1         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9da6:
0000000000009da6         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xf9c8)
                     xnrealloc:
0000000000009db0         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xf9ec)
0000000000009db3         mul        rdx
0000000000009db6         mov        rsi, rax
0000000000009db9         seto       al
0000000000009dbc         test       rsi, rsi
0000000000009dbf         js         loc_9dcb

0000000000009dc1         movzx      eax, al
0000000000009dc4         test       rax, rax
0000000000009dc7         jne        loc_9dcb

0000000000009dc9         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_9dcb:
0000000000009dcb         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
0000000000009dcf         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9dd4:
0000000000009dd4         nop                                                    ; End of unwind block (FDE at 0xf9ec)
0000000000009dd6         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000009de0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xfa00)
0000000000009de3         mov        r9, rdx
0000000000009de6         mov        rcx, qword [rsi]
0000000000009de9         je         loc_9e20

0000000000009deb         xor        edx, edx
0000000000009ded         movabs     rax, 0x5555555555555554
0000000000009df7         div        r9
0000000000009dfa         cmp        rax, rcx
0000000000009dfd         jbe        loc_9e3b

0000000000009dff         mov        rax, rcx
0000000000009e02         shr        rax, 0x1
0000000000009e05         lea        rcx, qword [rax+rcx+1]

                     loc_9e0a:
0000000000009e0a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
0000000000009e0d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000009e11         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000009e14         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000009e19         align      32

                     loc_9e20:
0000000000009e20         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000009e23         je         loc_9e48

                     loc_9e25:
0000000000009e25         mov        rax, rcx                                    ; CODE XREF=sub_9e44+28
0000000000009e28         mul        r9
0000000000009e2b         seto       dl
0000000000009e2e         test       rax, rax
0000000000009e31         movzx      edx, dl
0000000000009e34         js         loc_9e3b

0000000000009e36         test       rdx, rdx
0000000000009e39         je         loc_9e0a

                     loc_9e3b:
0000000000009e3b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
0000000000009e3f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9e44:
0000000000009e44         nop        dword [rax]
                        ; endp

                     loc_9e48:
0000000000009e48         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
0000000000009e4a         mov        eax, 0x80
0000000000009e4f         xor        r8d, r8d
0000000000009e52         div        r9
0000000000009e55         test       rax, rax
0000000000009e58         sete       r8b
0000000000009e5c         lea        rcx, qword [r8+rax]
0000000000009e60         jmp        loc_9e25
0000000000009e62         align      16                                          ; End of unwind block (FDE at 0xfa00)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
0000000000009e70         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xfa18), CODE XREF=main+337, store_char+38
0000000000009e73         mov        rax, qword [rsi]
0000000000009e76         je         loc_9ea0

0000000000009e78         movabs     rdx, 0x5555555555555553
0000000000009e82         cmp        rax, rdx
0000000000009e85         ja         loc_9eb1

0000000000009e87         mov        rdx, rax
0000000000009e8a         shr        rdx, 0x1
0000000000009e8d         lea        rax, qword [rdx+rax+1]

                     loc_9e92:
0000000000009e92         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
0000000000009e95         mov        rsi, rax                                    ; argument #2 for method xrealloc
0000000000009e98         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000009e9d         align      32

                     loc_9ea0:
0000000000009ea0         test       rax, rax                                    ; CODE XREF=x2realloc+6
0000000000009ea3         mov        edx, 0x80
0000000000009ea8         cmove      rax, rdx
0000000000009eac         test       rax, rax
0000000000009eaf         jns        loc_9e92

                     loc_9eb1:
0000000000009eb1         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
0000000000009eb5         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9eba:
0000000000009eba         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xfa18)
                     xzalloc:
0000000000009ec0         push       rbx                                         ; Begin of unwind block (FDE at 0xfa30)
0000000000009ec1         mov        rbx, rdi
0000000000009ec4         call       xmalloc                                     ; xmalloc
0000000000009ec9         mov        rdx, rbx                                    ; argument "__n" for method j_memset
0000000000009ecc         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000009ece         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000009ed1         pop        rbx
0000000000009ed2         jmp        j_memset                                    ; memset
                        ; endp
0000000000009ed7         align      32                                          ; End of unwind block (FDE at 0xfa30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000009ee0         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xfa4c)
0000000000009ee3         sub        rsp, 0x8
0000000000009ee7         mul        rsi
0000000000009eea         seto       dl
0000000000009eed         test       rax, rax
0000000000009ef0         js         loc_9f09

0000000000009ef2         movzx      edx, dl
0000000000009ef5         test       rdx, rdx
0000000000009ef8         jne        loc_9f09

0000000000009efa         call       j_calloc                                    ; calloc
0000000000009eff         test       rax, rax
0000000000009f02         je         loc_9f09

0000000000009f04         add        rsp, 0x8
0000000000009f08         ret
                        ; endp

                     loc_9f09:
0000000000009f09         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_9f0e:
0000000000009f0e         nop                                                    ; End of unwind block (FDE at 0xfa4c)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000009f10         push       rbp                                         ; Begin of unwind block (FDE at 0xfa68), CODE XREF=clone_quoting_options+40
0000000000009f11         push       rbx
0000000000009f12         mov        rbp, rdi
0000000000009f15         mov        rdi, rsi
0000000000009f18         mov        rbx, rsi
0000000000009f1b         sub        rsp, 0x8
0000000000009f1f         call       xmalloc                                     ; xmalloc
0000000000009f24         add        rsp, 0x8
0000000000009f28         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
0000000000009f2b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
0000000000009f2e         pop        rbx
0000000000009f2f         pop        rbp
0000000000009f30         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000009f33         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000009f38         align      64                                          ; End of unwind block (FDE at 0xfa68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000009f40         push       rbx                                         ; Begin of unwind block (FDE at 0xfa90)
0000000000009f41         mov        rbx, rdi
0000000000009f44         call       j_strlen                                    ; strlen
0000000000009f49         mov        rdi, rbx
0000000000009f4c         lea        rsi, qword [rax+1]
0000000000009f50         pop        rbx
0000000000009f51         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000009f53         align      32                                          ; End of unwind block (FDE at 0xfa90)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000009f60         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xfaac), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=print_files+3997, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41
0000000000009f67         sub        rsp, 0x8
0000000000009f6b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000009f70         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000009f72         call       j_dcgettext                                 ; dcgettext
0000000000009f77         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
0000000000009f7d         lea        rdx, qword [aSS+4]                          ; argument "__format" for method j_error, 0xd84a
0000000000009f84         mov        rcx, rax
0000000000009f87         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000009f89         xor        eax, eax
0000000000009f8b         call       j_error                                     ; error
0000000000009f90         call       j_abort                                     ; abort
                        ; endp
0000000000009f95         align      32                                          ; End of unwind block (FDE at 0xfaac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72


                     xnumtoimax:
0000000000009fa0         push       r15                                         ; Begin of unwind block (FDE at 0xfac4), CODE XREF=xdectoimax+23
0000000000009fa2         push       r14
0000000000009fa4         mov        r15, rcx
0000000000009fa7         push       r13
0000000000009fa9         push       r12
0000000000009fab         mov        r14, rdx
0000000000009fae         push       rbp
0000000000009faf         push       rbx
0000000000009fb0         mov        edx, esi
0000000000009fb2         xor        esi, esi
0000000000009fb4         mov        r12, rdi
0000000000009fb7         mov        r13, r9
0000000000009fba         sub        rsp, 0x18
0000000000009fbe         mov        rcx, rsp
0000000000009fc1         mov        ebx, dword [rsp+0x48+arg_0]
0000000000009fc5         mov        rax, qword [fs:0x28]
0000000000009fce         mov        qword [rsp+0x48+var_40], rax
0000000000009fd3         xor        eax, eax
0000000000009fd5         call       xstrtoimax                                  ; xstrtoimax
0000000000009fda         test       eax, eax
0000000000009fdc         jne        loc_a070

0000000000009fe2         mov        rbp, qword [rsp+0x48+var_48]
0000000000009fe6         cmp        rbp, r14
0000000000009fe9         jl         loc_9ff0

0000000000009feb         cmp        rbp, r15
0000000000009fee         jle        loc_a046

                     loc_9ff0:
0000000000009ff0         call       j___errno_location                          ; __errno_location, CODE XREF=xnumtoimax+73
0000000000009ff5         cmp        rbp, 0x3fffffff
0000000000009ffc         mov        r14, rax
0000000000009fff         jle        loc_a090

                     loc_a005:
000000000000a005         mov        dword [r14], 0x4b                           ; CODE XREF=xnumtoimax+221

                     loc_a00c:
000000000000a00c         mov        rdi, r12                                    ; CODE XREF=xnumtoimax+226, xnumtoimax+234, xnumtoimax+263
000000000000a00f         call       quote                                       ; quote
000000000000a014         mov        esi, dword [r14]
000000000000a017         mov        r8, rax
000000000000a01a         mov        eax, 0x0
000000000000a01f         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
000000000000a026         mov        rcx, r13
000000000000a029         cmp        esi, 0x16
000000000000a02c         cmove      esi, eax                                    ; argument "__errnum" for method j_error
000000000000a02f         test       ebx, ebx
000000000000a031         mov        eax, 0x1
000000000000a036         cmove      ebx, eax
000000000000a039         xor        eax, eax
000000000000a03b         mov        edi, ebx                                    ; argument "__status" for method j_error
000000000000a03d         call       j_error                                     ; error
000000000000a042         mov        rbp, qword [rsp+0x48+var_48]

                     loc_a046:
000000000000a046         mov        rdx, qword [rsp+0x48+var_40]                ; CODE XREF=xnumtoimax+78
000000000000a04b         xor        rdx, qword [fs:0x28]
000000000000a054         mov        rax, rbp
000000000000a057         jne        loc_a0ac

000000000000a059         add        rsp, 0x18
000000000000a05d         pop        rbx
000000000000a05e         pop        rbp
000000000000a05f         pop        r12
000000000000a061         pop        r13
000000000000a063         pop        r14
000000000000a065         pop        r15
000000000000a067         ret
                        ; endp
000000000000a068         align      16

                     loc_a070:
000000000000a070         mov        ebp, eax                                    ; CODE XREF=xnumtoimax+60
000000000000a072         call       j___errno_location                          ; __errno_location
000000000000a077         cmp        ebp, 0x1
000000000000a07a         mov        r14, rax
000000000000a07d         je         loc_a005

000000000000a07f         cmp        ebp, 0x3
000000000000a082         jne        loc_a00c

000000000000a084         mov        dword [rax], 0x0
000000000000a08a         jmp        loc_a00c
000000000000a08c         align      16

                     loc_a090:
000000000000a090         cmp        rbp, 0xffffffffbfffffff                     ; CODE XREF=xnumtoimax+95
000000000000a097         mov        eax, 0x22
000000000000a09c         mov        edx, 0x4b
000000000000a0a1         cmovle     eax, edx
000000000000a0a4         mov        dword [r14], eax
000000000000a0a7         jmp        loc_a00c

                     loc_a0ac:
000000000000a0ac         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xnumtoimax+183
                        ; endp
000000000000a0b1         align      64                                          ; End of unwind block (FDE at 0xfac4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xdectoimax:
000000000000a0c0         sub        rsp, 0x10                                   ; Begin of unwind block (FDE at 0xfb10), CODE XREF=main+927, main+1135, main+1277, main+1535, main+1701, parse_column_count+49
000000000000a0c4         push       r9
000000000000a0c6         mov        r9, r8
000000000000a0c9         mov        r8, rcx
000000000000a0cc         mov        rcx, rdx
000000000000a0cf         mov        rdx, rsi
000000000000a0d2         mov        esi, 0xa
000000000000a0d7         call       xnumtoimax                                  ; xnumtoimax
000000000000a0dc         add        rsp, 0x18
000000000000a0e0         ret
                        ; endp
000000000000a0e1         align      16                                          ; End of unwind block (FDE at 0xfb10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoimax:
000000000000a0f0         push       r15                                         ; Begin of unwind block (FDE at 0xfb2c), CODE XREF=xnumtoimax+53
000000000000a0f2         push       r14
000000000000a0f4         push       r13
000000000000a0f6         push       r12
000000000000a0f8         push       rbp
000000000000a0f9         push       rbx
000000000000a0fa         sub        rsp, 0x28
000000000000a0fe         mov        rax, qword [fs:0x28]
000000000000a107         mov        qword [rsp+0x58+var_40], rax
000000000000a10c         xor        eax, eax
000000000000a10e         cmp        edx, 0x24
000000000000a111         ja         loc_a77f

000000000000a117         lea        rax, qword [rsp+0x58+var_48]
000000000000a11c         test       rsi, rsi
000000000000a11f         mov        rbx, rsi
000000000000a122         mov        r12, rdi
000000000000a125         mov        ebp, edx
000000000000a127         mov        r14, rcx
000000000000a12a         cmove      rbx, rax
000000000000a12e         mov        r15, r8
000000000000a131         call       j___errno_location                          ; __errno_location
000000000000a136         xor        ecx, ecx
000000000000a138         mov        edx, ebp
000000000000a13a         mov        dword [rax], 0x0
000000000000a140         mov        rsi, rbx
000000000000a143         mov        rdi, r12
000000000000a146         mov        r13, rax
000000000000a149         call       j___strtol_internal                         ; __strtol_internal
000000000000a14e         mov        rcx, qword [rbx]
000000000000a151         mov        rbp, rax
000000000000a154         cmp        rcx, r12
000000000000a157         je         loc_a1b8

000000000000a159         mov        eax, dword [r13]
000000000000a15d         test       eax, eax
000000000000a15f         jne        loc_a1a0

000000000000a161         xor        r12d, r12d

                     loc_a164:
000000000000a164         test       r15, r15                                    ; CODE XREF=xstrtoimax+193
000000000000a167         je         loc_a176

000000000000a169         movzx      r13d, byte [rcx]
000000000000a16d         test       r13b, r13b
000000000000a170         jne        loc_a1f3

                     loc_a176:
000000000000a176         mov        qword [r14], rbp                            ; CODE XREF=xstrtoimax+119, xstrtoimax+550

                     loc_a179:
000000000000a179         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoimax+185, xstrtoimax+227, xstrtoimax+249, xstrtoimax+383, xstrtoimax+1382
000000000000a17e         xor        rdi, qword [fs:0x28]
000000000000a187         mov        eax, r12d
000000000000a18a         jne        loc_a79e

000000000000a190         add        rsp, 0x28
000000000000a194         pop        rbx
000000000000a195         pop        rbp
000000000000a196         pop        r12
000000000000a198         pop        r13
000000000000a19a         pop        r14
000000000000a19c         pop        r15
000000000000a19e         ret
                        ; endp
000000000000a19f         align      32

                     loc_a1a0:
000000000000a1a0         cmp        eax, 0x22                                   ; CODE XREF=xstrtoimax+111
000000000000a1a3         mov        r12d, 0x4
000000000000a1a9         jne        loc_a179

000000000000a1ab         mov        r12d, 0x1
000000000000a1b1         jmp        loc_a164
000000000000a1b3         align      8

                     loc_a1b8:
000000000000a1b8         test       r15, r15                                    ; CODE XREF=xstrtoimax+103
000000000000a1bb         je         loc_a650

000000000000a1c1         movzx      r13d, byte [rcx]
000000000000a1c5         mov        qword [rsp+0x58+var_50], rcx
000000000000a1ca         mov        r12d, 0x4
000000000000a1d0         test       r13b, r13b
000000000000a1d3         je         loc_a179

000000000000a1d5         movsx      esi, r13b                                   ; argument "__c" for method j_strchr
000000000000a1d9         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000a1dc         call       j_strchr                                    ; strchr
000000000000a1e1         test       rax, rax
000000000000a1e4         mov        rcx, qword [rsp+0x58+var_50]
000000000000a1e9         je         loc_a179

000000000000a1eb         mov        ebp, 0x1
000000000000a1f0         xor        r12d, r12d

                     loc_a1f3:
000000000000a1f3         movsx      esi, r13b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoimax+128
000000000000a1f7         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000a1fa         mov        qword [rsp+0x58+var_50], rcx
000000000000a1ff         call       j_strchr                                    ; strchr
000000000000a204         test       rax, rax
000000000000a207         mov        rcx, qword [rsp+0x58+var_50]
000000000000a20c         je         loc_a268

000000000000a20e         lea        eax, dword [r13-0x45]
000000000000a212         cmp        al, 0x2f
000000000000a214         ja         loc_a278

000000000000a216         movabs     rdx, 0x814400308945
000000000000a220         bt         rdx, rax
000000000000a224         jae        loc_a278

000000000000a226         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000a22b         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000a22e         mov        qword [rsp+0x58+var_50], rcx
000000000000a233         call       j_strchr                                    ; strchr
000000000000a238         test       rax, rax
000000000000a23b         mov        rcx, qword [rsp+0x58+var_50]
000000000000a240         je         loc_a278

000000000000a242         movzx      eax, byte [rcx+1]
000000000000a246         cmp        al, 0x44
000000000000a248         je         loc_a256

000000000000a24a         cmp        al, 0x69
000000000000a24c         je         loc_a738

000000000000a252         cmp        al, 0x42
000000000000a254         jne        loc_a278

                     loc_a256:
000000000000a256         mov        edi, 0x2                                    ; CODE XREF=xstrtoimax+344
000000000000a25b         mov        eax, 0x3e8
000000000000a260         jmp        loc_a282
000000000000a262         align      8

                     loc_a268:
000000000000a268         mov        qword [r14], rbp                            ; case 52, CODE XREF=xstrtoimax+284, xstrtoimax+410, xstrtoimax+430
000000000000a26b         or         r12d, 0x2
000000000000a26f         jmp        loc_a179
000000000000a274         align      8

                     loc_a278:
000000000000a278         mov        edi, 0x1                                    ; CODE XREF=xstrtoimax+292, xstrtoimax+308, xstrtoimax+336, xstrtoimax+356
000000000000a27d         mov        eax, 0x400

                     loc_a282:
000000000000a282         sub        r13d, 0x42                                  ; CODE XREF=xstrtoimax+368, xstrtoimax+1627
000000000000a286         cmp        r13b, 0x35
000000000000a28a         ja         loc_a268

000000000000a28c         lea        rsi, qword [switch_table_e348]              ; switch_table_e348
000000000000a293         movzx      r13d, r13b
000000000000a297         movsxd     rdx, dword [rsi+r13*4]
000000000000a29b         add        rdx, rsi
000000000000a29e         jmp        rdx                                         ; switch statement using table at 0xe348, with 54 cases, 0xa268,0xa2a0,0xa300,0xa320,0xa350,0xa380,0xa3f0,0xa460,0xa4a0,0xa500,0xa568,0xa5d0,0xa600

                     loc_a2a0:
000000000000a2a0         movabs     r8, 0x8000000000000000                      ; case 43, CODE XREF=xstrtoimax+430
000000000000a2aa         movsxd     rsi, eax
000000000000a2ad         mov        rax, r8
000000000000a2b0         cqo
000000000000a2b2         idiv       rsi
000000000000a2b5         cmp        rbp, rax
000000000000a2b8         mov        r9, rax
000000000000a2bb         jl         loc_a765

000000000000a2c1         movabs     r10, 0x7fffffffffffffff
000000000000a2cb         mov        rax, r10
000000000000a2ce         cqo
000000000000a2d0         idiv       rsi
000000000000a2d3         cmp        rbp, rax
000000000000a2d6         jg         loc_a772

000000000000a2dc         imul       rbp, rsi
000000000000a2e0         cmp        r9, rbp
000000000000a2e3         jg         loc_a765

000000000000a2e9         cmp        rax, rbp
000000000000a2ec         jl         loc_a772

000000000000a2f2         imul       rbp, rsi
000000000000a2f6         xor        eax, eax

                     loc_a2f8:
000000000000a2f8         or         r12d, eax                                   ; CODE XREF=xstrtoimax+1661, xstrtoimax+1674
000000000000a2fb         nop        dword [rax+rax]

                     loc_a300:
000000000000a300         movsxd     rax, edi                                    ; case 33, CODE XREF=xstrtoimax+430, xstrtoimax+601, xstrtoimax+650, xstrtoimax+935, xstrtoimax+1027, xstrtoimax+1290, xstrtoimax+1408, xstrtoimax+1600
000000000000a303         add        rcx, rax
000000000000a306         mov        eax, r12d
000000000000a309         or         eax, 0x2
000000000000a30c         mov        qword [rbx], rcx
000000000000a30f         cmp        byte [rcx], 0x0
000000000000a312         cmovne     r12d, eax
000000000000a316         jmp        loc_a176
000000000000a31b         align      32

                     loc_a320:
000000000000a320         movabs     rax, 0xc000000000000000                     ; case 53, CODE XREF=xstrtoimax+430
000000000000a32a         cmp        rbp, rax
000000000000a32d         jl         loc_a660

000000000000a333         movabs     rax, 0x3fffffffffffffff
000000000000a33d         cmp        rbp, rax
000000000000a340         jg         loc_a720

000000000000a346         add        rbp, rbp
000000000000a349         jmp        loc_a300
000000000000a34b         align      16

                     loc_a350:
000000000000a350         movabs     rax, 0xffc0000000000000                     ; case 32, CODE XREF=xstrtoimax+430
000000000000a35a         cmp        rbp, rax
000000000000a35d         jl         loc_a660

000000000000a363         movabs     rax, 0x3fffffffffffff
000000000000a36d         cmp        rbp, rax
000000000000a370         jg         loc_a720

000000000000a376         shl        rbp, 0x9
000000000000a37a         jmp        loc_a300
000000000000a37c         align      128

                     loc_a380:
000000000000a380         movsxd     rsi, eax                                    ; case 24, CODE XREF=xstrtoimax+430
000000000000a383         movabs     rax, 0x8000000000000000
000000000000a38d         mov        r8d, 0x7
000000000000a393         cqo
000000000000a395         xor        r11d, r11d
000000000000a398         movabs     r9, 0x7fffffffffffffff
000000000000a3a2         idiv       rsi
000000000000a3a5         mov        r10, rax
000000000000a3a8         jmp        loc_a3cf
000000000000a3aa         align      16

                     loc_a3b0:
000000000000a3b0         mov        rax, r9                                     ; CODE XREF=xstrtoimax+738
000000000000a3b3         cqo
000000000000a3b5         idiv       rsi
000000000000a3b8         cmp        rax, rbp
000000000000a3bb         jl         loc_a6a8

000000000000a3c1         imul       rbp, rsi

                     loc_a3c5:
000000000000a3c5         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+756, xstrtoimax+1480
000000000000a3c9         je         loc_a4f0

                     loc_a3cf:
000000000000a3cf         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+696
000000000000a3d2         jle        loc_a3b0

000000000000a3d4         mov        r11d, 0x1
000000000000a3da         movabs     rbp, 0x8000000000000000
000000000000a3e4         jmp        loc_a3c5
000000000000a3e6         align      16

                     loc_a3f0:
000000000000a3f0         movsxd     rsi, eax                                    ; case 23, CODE XREF=xstrtoimax+430
000000000000a3f3         movabs     rax, 0x8000000000000000
000000000000a3fd         mov        r8d, 0x8
000000000000a403         cqo
000000000000a405         xor        r11d, r11d
000000000000a408         movabs     r9, 0x7fffffffffffffff
000000000000a412         idiv       rsi
000000000000a415         mov        r10, rax
000000000000a418         jmp        loc_a43f
000000000000a41a         align      32

                     loc_a420:
000000000000a420         mov        rax, r9                                     ; CODE XREF=xstrtoimax+850
000000000000a423         cqo
000000000000a425         idiv       rsi
000000000000a428         cmp        rax, rbp
000000000000a42b         jl         loc_a678

000000000000a431         imul       rbp, rsi

                     loc_a435:
000000000000a435         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+868, xstrtoimax+1432
000000000000a439         je         loc_a4f0

                     loc_a43f:
000000000000a43f         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+808
000000000000a442         jle        loc_a420

000000000000a444         mov        r11d, 0x1
000000000000a44a         movabs     rbp, 0x8000000000000000
000000000000a454         jmp        loc_a435
000000000000a456         align      32

                     loc_a460:
000000000000a460         movabs     r8, 0x8000000000000000                      ; case 41, CODE XREF=xstrtoimax+430
000000000000a46a         movsxd     rsi, eax
000000000000a46d         mov        rax, r8
000000000000a470         cqo
000000000000a472         idiv       rsi
000000000000a475         cmp        rbp, rax
000000000000a478         jl         loc_a660

000000000000a47e         sub        r8, 0x1
000000000000a482         mov        rax, r8
000000000000a485         cqo
000000000000a487         idiv       rsi
000000000000a48a         cmp        rbp, rax
000000000000a48d         jg         loc_a720

000000000000a493         imul       rbp, rsi
000000000000a497         jmp        loc_a300
000000000000a49c         align      32

                     loc_a4a0:
000000000000a4a0         movsxd     rsi, eax                                    ; case 37, CODE XREF=xstrtoimax+430
000000000000a4a3         movabs     rax, 0x8000000000000000
000000000000a4ad         mov        r8d, 0x3
000000000000a4b3         cqo
000000000000a4b5         xor        r11d, r11d
000000000000a4b8         movabs     r9, 0x7fffffffffffffff
000000000000a4c2         idiv       rsi
000000000000a4c5         mov        r10, rax

                     loc_a4c8:
000000000000a4c8         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1018
000000000000a4cb         jg         loc_a6c0

000000000000a4d1         mov        rax, r9
000000000000a4d4         cqo
000000000000a4d6         idiv       rsi
000000000000a4d9         cmp        rax, rbp
000000000000a4dc         jl         loc_a750

000000000000a4e2         imul       rbp, rsi

                     loc_a4e6:
000000000000a4e6         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1504, xstrtoimax+1648
000000000000a4ea         jne        loc_a4c8

000000000000a4ec         nop        dword [rax]

                     loc_a4f0:
000000000000a4f0         or         r12d, r11d                                  ; CODE XREF=xstrtoimax+729, xstrtoimax+841, xstrtoimax+1113, xstrtoimax+1217, xstrtoimax+1368
000000000000a4f3         jmp        loc_a300
000000000000a4f8         align      256

                     loc_a500:
000000000000a500         movsxd     rsi, eax                                    ; case 3, CODE XREF=xstrtoimax+430
000000000000a503         movabs     rax, 0x8000000000000000
000000000000a50d         mov        r8d, 0x6
000000000000a513         cqo
000000000000a515         xor        r11d, r11d
000000000000a518         movabs     r9, 0x7fffffffffffffff
000000000000a522         idiv       rsi
000000000000a525         mov        r10, rax
000000000000a528         jmp        loc_a54b
000000000000a52a         align      16

                     loc_a530:
000000000000a530         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1118
000000000000a533         cqo
000000000000a535         idiv       rsi
000000000000a538         cmp        rax, rbp
000000000000a53b         jl         loc_a6d8

000000000000a541         imul       rbp, rsi

                     loc_a545:
000000000000a545         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1136, xstrtoimax+1528
000000000000a549         je         loc_a4f0

                     loc_a54b:
000000000000a54b         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1080
000000000000a54e         jle        loc_a530

000000000000a550         mov        r11d, 0x1
000000000000a556         movabs     rbp, 0x8000000000000000
000000000000a560         jmp        loc_a545
000000000000a562         align      8

                     loc_a568:
000000000000a568         movsxd     rsi, eax                                    ; case 14, CODE XREF=xstrtoimax+430
000000000000a56b         movabs     rax, 0x8000000000000000
000000000000a575         mov        r8d, 0x5
000000000000a57b         cqo
000000000000a57d         xor        r11d, r11d
000000000000a580         movabs     r9, 0x7fffffffffffffff
000000000000a58a         idiv       rsi
000000000000a58d         mov        r10, rax
000000000000a590         jmp        loc_a5b7
000000000000a592         align      8

                     loc_a598:
000000000000a598         mov        rax, r9                                     ; CODE XREF=xstrtoimax+1226
000000000000a59b         cqo
000000000000a59d         idiv       rsi
000000000000a5a0         cmp        rax, rbp
000000000000a5a3         jl         loc_a6f0

000000000000a5a9         imul       rbp, rsi

                     loc_a5ad:
000000000000a5ad         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1244, xstrtoimax+1552
000000000000a5b1         je         loc_a4f0

                     loc_a5b7:
000000000000a5b7         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1184
000000000000a5ba         jle        loc_a598

000000000000a5bc         mov        r11d, 0x1
000000000000a5c2         movabs     rbp, 0x8000000000000000
000000000000a5cc         jmp        loc_a5ad
000000000000a5ce         align      16

                     loc_a5d0:
000000000000a5d0         movabs     rax, 0xffe0000000000000                     ; case 0, CODE XREF=xstrtoimax+430
000000000000a5da         cmp        rbp, rax
000000000000a5dd         jl         loc_a660

000000000000a5e3         movabs     rax, 0x1fffffffffffff
000000000000a5ed         cmp        rbp, rax
000000000000a5f0         jg         loc_a720

000000000000a5f6         shl        rbp, 0xa
000000000000a5fa         jmp        loc_a300
000000000000a5ff         align      512

                     loc_a600:
000000000000a600         movsxd     rsi, eax                                    ; case 50, CODE XREF=xstrtoimax+430
000000000000a603         movabs     rax, 0x8000000000000000
000000000000a60d         mov        r8d, 0x4
000000000000a613         cqo
000000000000a615         xor        r11d, r11d
000000000000a618         movabs     r9, 0x7fffffffffffffff
000000000000a622         idiv       rsi
000000000000a625         mov        r10, rax

                     loc_a628:
000000000000a628         cmp        r10, rbp                                    ; CODE XREF=xstrtoimax+1366
000000000000a62b         jg         loc_a690

000000000000a62d         mov        rax, r9
000000000000a630         cqo
000000000000a632         idiv       rsi
000000000000a635         cmp        rax, rbp
000000000000a638         jl         loc_a708

000000000000a63e         imul       rbp, rsi

                     loc_a642:
000000000000a642         sub        r8d, 0x1                                    ; CODE XREF=xstrtoimax+1456, xstrtoimax+1576
000000000000a646         jne        loc_a628

000000000000a648         jmp        loc_a4f0
000000000000a64d         align      16

                     loc_a650:
000000000000a650         mov        r12d, 0x4                                   ; CODE XREF=xstrtoimax+203
000000000000a656         jmp        loc_a179
000000000000a65b         align      32

                     loc_a660:
000000000000a660         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+573, xstrtoimax+621, xstrtoimax+904, xstrtoimax+1261
000000000000a666         movabs     rbp, 0x8000000000000000
000000000000a670         jmp        loc_a300
000000000000a675         align      8

                     loc_a678:
000000000000a678         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+827
000000000000a67e         movabs     rbp, 0x7fffffffffffffff
000000000000a688         jmp        loc_a435
000000000000a68d         align      16

                     loc_a690:
000000000000a690         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1339
000000000000a696         movabs     rbp, 0x8000000000000000
000000000000a6a0         jmp        loc_a642
000000000000a6a2         align      8

                     loc_a6a8:
000000000000a6a8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+715
000000000000a6ae         movabs     rbp, 0x7fffffffffffffff
000000000000a6b8         jmp        loc_a3c5
000000000000a6bd         align      64

                     loc_a6c0:
000000000000a6c0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+987
000000000000a6c6         movabs     rbp, 0x8000000000000000
000000000000a6d0         jmp        loc_a4e6
000000000000a6d5         align      8

                     loc_a6d8:
000000000000a6d8         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1099
000000000000a6de         movabs     rbp, 0x7fffffffffffffff
000000000000a6e8         jmp        loc_a545
000000000000a6ed         align      16

                     loc_a6f0:
000000000000a6f0         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1203
000000000000a6f6         movabs     rbp, 0x7fffffffffffffff
000000000000a700         jmp        loc_a5ad
000000000000a705         align      8

                     loc_a708:
000000000000a708         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1352
000000000000a70e         movabs     rbp, 0x7fffffffffffffff
000000000000a718         jmp        loc_a642
000000000000a71d         align      32

                     loc_a720:
000000000000a720         mov        r12d, 0x1                                   ; CODE XREF=xstrtoimax+592, xstrtoimax+640, xstrtoimax+925, xstrtoimax+1280
000000000000a726         movabs     rbp, 0x7fffffffffffffff
000000000000a730         jmp        loc_a300
000000000000a735         align      8

                     loc_a738:
000000000000a738         xor        edi, edi                                    ; CODE XREF=xstrtoimax+348
000000000000a73a         cmp        byte [rcx+2], 0x42
000000000000a73e         mov        eax, 0x400
000000000000a743         sete       dil
000000000000a747         lea        edi, dword [rdi+rdi+1]
000000000000a74b         jmp        loc_a282

                     loc_a750:
000000000000a750         mov        r11d, 0x1                                   ; CODE XREF=xstrtoimax+1004
000000000000a756         movabs     rbp, 0x7fffffffffffffff
000000000000a760         jmp        loc_a4e6

                     loc_a765:
000000000000a765         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+459, xstrtoimax+499
000000000000a76a         mov        rbp, r8
000000000000a76d         jmp        loc_a2f8

                     loc_a772:
000000000000a772         mov        eax, 0x1                                    ; CODE XREF=xstrtoimax+486, xstrtoimax+508
000000000000a777         mov        rbp, r10
000000000000a77a         jmp        loc_a2f8

                     loc_a77f:
000000000000a77f         lea        rcx, qword [__PRETTY_FUNCTION__.4162]       ; argument "__function" for method j___assert_fail, "xstrtoimax", CODE XREF=xstrtoimax+33
000000000000a786         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000a78d         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000a794         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000a799         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_a79e:
000000000000a79e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoimax+154
                        ; endp
000000000000a7a3         align      16                                          ; End of unwind block (FDE at 0xfb2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtol:
000000000000a7b0         push       r15                                         ; Begin of unwind block (FDE at 0xfb7c), CODE XREF=getoptarg+116
000000000000a7b2         push       r14
000000000000a7b4         push       r13
000000000000a7b6         push       r12
000000000000a7b8         push       rbp
000000000000a7b9         push       rbx
000000000000a7ba         sub        rsp, 0x28
000000000000a7be         mov        rax, qword [fs:0x28]
000000000000a7c7         mov        qword [rsp+0x58+var_40], rax
000000000000a7cc         xor        eax, eax
000000000000a7ce         cmp        edx, 0x24
000000000000a7d1         ja         loc_ae3f

000000000000a7d7         lea        rax, qword [rsp+0x58+var_48]
000000000000a7dc         test       rsi, rsi
000000000000a7df         mov        rbx, rsi
000000000000a7e2         mov        r12, rdi
000000000000a7e5         mov        ebp, edx
000000000000a7e7         mov        r14, rcx
000000000000a7ea         cmove      rbx, rax
000000000000a7ee         mov        r15, r8
000000000000a7f1         call       j___errno_location                          ; __errno_location
000000000000a7f6         mov        edx, ebp                                    ; argument "__base" for method j_strtol
000000000000a7f8         mov        dword [rax], 0x0
000000000000a7fe         mov        rsi, rbx                                    ; argument "__endptr" for method j_strtol
000000000000a801         mov        rdi, r12                                    ; argument "__nptr" for method j_strtol
000000000000a804         mov        r13, rax
000000000000a807         call       j_strtol                                    ; strtol
000000000000a80c         mov        rcx, qword [rbx]
000000000000a80f         mov        rbp, rax
000000000000a812         cmp        rcx, r12
000000000000a815         je         loc_a878

000000000000a817         mov        eax, dword [r13]
000000000000a81b         test       eax, eax
000000000000a81d         jne        loc_a860

000000000000a81f         xor        r12d, r12d

                     loc_a822:
000000000000a822         test       r15, r15                                    ; CODE XREF=xstrtol+193
000000000000a825         je         loc_a834

000000000000a827         movzx      r13d, byte [rcx]
000000000000a82b         test       r13b, r13b
000000000000a82e         jne        loc_a8b3

                     loc_a834:
000000000000a834         mov        qword [r14], rbp                            ; CODE XREF=xstrtol+117, xstrtol+550

                     loc_a837:
000000000000a837         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtol+185, xstrtol+227, xstrtol+249, xstrtol+383, xstrtol+1382
000000000000a83c         xor        rdi, qword [fs:0x28]
000000000000a845         mov        eax, r12d
000000000000a848         jne        loc_ae5e

000000000000a84e         add        rsp, 0x28
000000000000a852         pop        rbx
000000000000a853         pop        rbp
000000000000a854         pop        r12
000000000000a856         pop        r13
000000000000a858         pop        r14
000000000000a85a         pop        r15
000000000000a85c         ret
                        ; endp
000000000000a85d         align      32

                     loc_a860:
000000000000a860         cmp        eax, 0x22                                   ; CODE XREF=xstrtol+109
000000000000a863         mov        r12d, 0x4
000000000000a869         jne        loc_a837

000000000000a86b         mov        r12d, 0x1
000000000000a871         jmp        loc_a822
000000000000a873         align      8

                     loc_a878:
000000000000a878         test       r15, r15                                    ; CODE XREF=xstrtol+101
000000000000a87b         je         loc_ad10

000000000000a881         movzx      r13d, byte [rcx]
000000000000a885         mov        qword [rsp+0x58+var_50], rcx
000000000000a88a         mov        r12d, 0x4
000000000000a890         test       r13b, r13b
000000000000a893         je         loc_a837

000000000000a895         movsx      esi, r13b                                   ; argument "__c" for method j_strchr
000000000000a899         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000a89c         call       j_strchr                                    ; strchr
000000000000a8a1         test       rax, rax
000000000000a8a4         mov        rcx, qword [rsp+0x58+var_50]
000000000000a8a9         je         loc_a837

000000000000a8ab         mov        ebp, 0x1
000000000000a8b0         xor        r12d, r12d

                     loc_a8b3:
000000000000a8b3         movsx      esi, r13b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtol+126
000000000000a8b7         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000a8ba         mov        qword [rsp+0x58+var_50], rcx
000000000000a8bf         call       j_strchr                                    ; strchr
000000000000a8c4         test       rax, rax
000000000000a8c7         mov        rcx, qword [rsp+0x58+var_50]
000000000000a8cc         je         loc_a928

000000000000a8ce         lea        eax, dword [r13-0x45]
000000000000a8d2         cmp        al, 0x2f
000000000000a8d4         ja         loc_a938

000000000000a8d6         movabs     rdx, 0x814400308945
000000000000a8e0         bt         rdx, rax
000000000000a8e4         jae        loc_a938

000000000000a8e6         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000a8eb         mov        rdi, r15                                    ; argument "__s" for method j_strchr
000000000000a8ee         mov        qword [rsp+0x58+var_50], rcx
000000000000a8f3         call       j_strchr                                    ; strchr
000000000000a8f8         test       rax, rax
000000000000a8fb         mov        rcx, qword [rsp+0x58+var_50]
000000000000a900         je         loc_a938

000000000000a902         movzx      eax, byte [rcx+1]
000000000000a906         cmp        al, 0x44
000000000000a908         je         loc_a916

000000000000a90a         cmp        al, 0x69
000000000000a90c         je         loc_adf8

000000000000a912         cmp        al, 0x42
000000000000a914         jne        loc_a938

                     loc_a916:
000000000000a916         mov        edi, 0x2                                    ; CODE XREF=xstrtol+344
000000000000a91b         mov        eax, 0x3e8
000000000000a920         jmp        loc_a942
000000000000a922         align      8

                     loc_a928:
000000000000a928         mov        qword [r14], rbp                            ; case 52, CODE XREF=xstrtol+284, xstrtol+410, xstrtol+430
000000000000a92b         or         r12d, 0x2
000000000000a92f         jmp        loc_a837
000000000000a934         align      8

                     loc_a938:
000000000000a938         mov        edi, 0x1                                    ; CODE XREF=xstrtol+292, xstrtol+308, xstrtol+336, xstrtol+356
000000000000a93d         mov        eax, 0x400

                     loc_a942:
000000000000a942         sub        r13d, 0x42                                  ; CODE XREF=xstrtol+368, xstrtol+1627
000000000000a946         cmp        r13b, 0x35
000000000000a94a         ja         loc_a928

000000000000a94c         lea        rsi, qword [switch_table_e430]              ; switch_table_e430
000000000000a953         movzx      r13d, r13b
000000000000a957         movsxd     rdx, dword [rsi+r13*4]
000000000000a95b         add        rdx, rsi
000000000000a95e         jmp        rdx                                         ; switch statement using table at 0xe430, with 54 cases, 0xa928,0xa960,0xa9c0,0xa9e0,0xaa10,0xaa40,0xaab0,0xab20,0xab60,0xabc0,0xac28,0xac90,0xacc0

                     loc_a960:
000000000000a960         movabs     r8, 0x8000000000000000                      ; case 43, CODE XREF=xstrtol+430
000000000000a96a         movsxd     rsi, eax
000000000000a96d         mov        rax, r8
000000000000a970         cqo
000000000000a972         idiv       rsi
000000000000a975         cmp        rbp, rax
000000000000a978         mov        r9, rax
000000000000a97b         jl         loc_ae25

000000000000a981         movabs     r10, 0x7fffffffffffffff
000000000000a98b         mov        rax, r10
000000000000a98e         cqo
000000000000a990         idiv       rsi
000000000000a993         cmp        rbp, rax
000000000000a996         jg         loc_ae32

000000000000a99c         imul       rbp, rsi
000000000000a9a0         cmp        r9, rbp
000000000000a9a3         jg         loc_ae25

000000000000a9a9         cmp        rax, rbp
000000000000a9ac         jl         loc_ae32

000000000000a9b2         imul       rbp, rsi
000000000000a9b6         xor        eax, eax

                     loc_a9b8:
000000000000a9b8         or         r12d, eax                                   ; CODE XREF=xstrtol+1661, xstrtol+1674
000000000000a9bb         nop        dword [rax+rax]

                     loc_a9c0:
000000000000a9c0         movsxd     rax, edi                                    ; case 33, CODE XREF=xstrtol+430, xstrtol+601, xstrtol+650, xstrtol+935, xstrtol+1027, xstrtol+1290, xstrtol+1408, xstrtol+1600
000000000000a9c3         add        rcx, rax
000000000000a9c6         mov        eax, r12d
000000000000a9c9         or         eax, 0x2
000000000000a9cc         mov        qword [rbx], rcx
000000000000a9cf         cmp        byte [rcx], 0x0
000000000000a9d2         cmovne     r12d, eax
000000000000a9d6         jmp        loc_a834
000000000000a9db         align      32

                     loc_a9e0:
000000000000a9e0         movabs     rax, 0xc000000000000000                     ; case 53, CODE XREF=xstrtol+430
000000000000a9ea         cmp        rbp, rax
000000000000a9ed         jl         loc_ad20

000000000000a9f3         movabs     rax, 0x3fffffffffffffff
000000000000a9fd         cmp        rbp, rax
000000000000aa00         jg         loc_ade0

000000000000aa06         add        rbp, rbp
000000000000aa09         jmp        loc_a9c0
000000000000aa0b         align      16

                     loc_aa10:
000000000000aa10         movabs     rax, 0xffc0000000000000                     ; case 32, CODE XREF=xstrtol+430
000000000000aa1a         cmp        rbp, rax
000000000000aa1d         jl         loc_ad20

000000000000aa23         movabs     rax, 0x3fffffffffffff
000000000000aa2d         cmp        rbp, rax
000000000000aa30         jg         loc_ade0

000000000000aa36         shl        rbp, 0x9
000000000000aa3a         jmp        loc_a9c0
000000000000aa3c         align      64

                     loc_aa40:
000000000000aa40         movsxd     rsi, eax                                    ; case 24, CODE XREF=xstrtol+430
000000000000aa43         movabs     rax, 0x8000000000000000
000000000000aa4d         mov        r8d, 0x7
000000000000aa53         cqo
000000000000aa55         xor        r11d, r11d
000000000000aa58         movabs     r9, 0x7fffffffffffffff
000000000000aa62         idiv       rsi
000000000000aa65         mov        r10, rax
000000000000aa68         jmp        loc_aa8f
000000000000aa6a         align      16

                     loc_aa70:
000000000000aa70         mov        rax, r9                                     ; CODE XREF=xstrtol+738
000000000000aa73         cqo
000000000000aa75         idiv       rsi
000000000000aa78         cmp        rax, rbp
000000000000aa7b         jl         loc_ad68

000000000000aa81         imul       rbp, rsi

                     loc_aa85:
000000000000aa85         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+756, xstrtol+1480
000000000000aa89         je         loc_abb0

                     loc_aa8f:
000000000000aa8f         cmp        r10, rbp                                    ; CODE XREF=xstrtol+696
000000000000aa92         jle        loc_aa70

000000000000aa94         mov        r11d, 0x1
000000000000aa9a         movabs     rbp, 0x8000000000000000
000000000000aaa4         jmp        loc_aa85
000000000000aaa6         align      16

                     loc_aab0:
000000000000aab0         movsxd     rsi, eax                                    ; case 23, CODE XREF=xstrtol+430
000000000000aab3         movabs     rax, 0x8000000000000000
000000000000aabd         mov        r8d, 0x8
000000000000aac3         cqo
000000000000aac5         xor        r11d, r11d
000000000000aac8         movabs     r9, 0x7fffffffffffffff
000000000000aad2         idiv       rsi
000000000000aad5         mov        r10, rax
000000000000aad8         jmp        loc_aaff
000000000000aada         align      32

                     loc_aae0:
000000000000aae0         mov        rax, r9                                     ; CODE XREF=xstrtol+850
000000000000aae3         cqo
000000000000aae5         idiv       rsi
000000000000aae8         cmp        rax, rbp
000000000000aaeb         jl         loc_ad38

000000000000aaf1         imul       rbp, rsi

                     loc_aaf5:
000000000000aaf5         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+868, xstrtol+1432
000000000000aaf9         je         loc_abb0

                     loc_aaff:
000000000000aaff         cmp        r10, rbp                                    ; CODE XREF=xstrtol+808
000000000000ab02         jle        loc_aae0

000000000000ab04         mov        r11d, 0x1
000000000000ab0a         movabs     rbp, 0x8000000000000000
000000000000ab14         jmp        loc_aaf5
000000000000ab16         align      32

                     loc_ab20:
000000000000ab20         movabs     r8, 0x8000000000000000                      ; case 41, CODE XREF=xstrtol+430
000000000000ab2a         movsxd     rsi, eax
000000000000ab2d         mov        rax, r8
000000000000ab30         cqo
000000000000ab32         idiv       rsi
000000000000ab35         cmp        rbp, rax
000000000000ab38         jl         loc_ad20

000000000000ab3e         sub        r8, 0x1
000000000000ab42         mov        rax, r8
000000000000ab45         cqo
000000000000ab47         idiv       rsi
000000000000ab4a         cmp        rbp, rax
000000000000ab4d         jg         loc_ade0

000000000000ab53         imul       rbp, rsi
000000000000ab57         jmp        loc_a9c0
000000000000ab5c         align      32

                     loc_ab60:
000000000000ab60         movsxd     rsi, eax                                    ; case 37, CODE XREF=xstrtol+430
000000000000ab63         movabs     rax, 0x8000000000000000
000000000000ab6d         mov        r8d, 0x3
000000000000ab73         cqo
000000000000ab75         xor        r11d, r11d
000000000000ab78         movabs     r9, 0x7fffffffffffffff
000000000000ab82         idiv       rsi
000000000000ab85         mov        r10, rax

                     loc_ab88:
000000000000ab88         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1018
000000000000ab8b         jg         loc_ad80

000000000000ab91         mov        rax, r9
000000000000ab94         cqo
000000000000ab96         idiv       rsi
000000000000ab99         cmp        rax, rbp
000000000000ab9c         jl         loc_ae10

000000000000aba2         imul       rbp, rsi

                     loc_aba6:
000000000000aba6         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1504, xstrtol+1648
000000000000abaa         jne        loc_ab88

000000000000abac         nop        dword [rax]

                     loc_abb0:
000000000000abb0         or         r12d, r11d                                  ; CODE XREF=xstrtol+729, xstrtol+841, xstrtol+1113, xstrtol+1217, xstrtol+1368
000000000000abb3         jmp        loc_a9c0
000000000000abb8         align      64

                     loc_abc0:
000000000000abc0         movsxd     rsi, eax                                    ; case 3, CODE XREF=xstrtol+430
000000000000abc3         movabs     rax, 0x8000000000000000
000000000000abcd         mov        r8d, 0x6
000000000000abd3         cqo
000000000000abd5         xor        r11d, r11d
000000000000abd8         movabs     r9, 0x7fffffffffffffff
000000000000abe2         idiv       rsi
000000000000abe5         mov        r10, rax
000000000000abe8         jmp        loc_ac0b
000000000000abea         align      16

                     loc_abf0:
000000000000abf0         mov        rax, r9                                     ; CODE XREF=xstrtol+1118
000000000000abf3         cqo
000000000000abf5         idiv       rsi
000000000000abf8         cmp        rax, rbp
000000000000abfb         jl         loc_ad98

000000000000ac01         imul       rbp, rsi

                     loc_ac05:
000000000000ac05         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1136, xstrtol+1528
000000000000ac09         je         loc_abb0

                     loc_ac0b:
000000000000ac0b         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1080
000000000000ac0e         jle        loc_abf0

000000000000ac10         mov        r11d, 0x1
000000000000ac16         movabs     rbp, 0x8000000000000000
000000000000ac20         jmp        loc_ac05
000000000000ac22         align      8

                     loc_ac28:
000000000000ac28         movsxd     rsi, eax                                    ; case 14, CODE XREF=xstrtol+430
000000000000ac2b         movabs     rax, 0x8000000000000000
000000000000ac35         mov        r8d, 0x5
000000000000ac3b         cqo
000000000000ac3d         xor        r11d, r11d
000000000000ac40         movabs     r9, 0x7fffffffffffffff
000000000000ac4a         idiv       rsi
000000000000ac4d         mov        r10, rax
000000000000ac50         jmp        loc_ac77
000000000000ac52         align      8

                     loc_ac58:
000000000000ac58         mov        rax, r9                                     ; CODE XREF=xstrtol+1226
000000000000ac5b         cqo
000000000000ac5d         idiv       rsi
000000000000ac60         cmp        rax, rbp
000000000000ac63         jl         loc_adb0

000000000000ac69         imul       rbp, rsi

                     loc_ac6d:
000000000000ac6d         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1244, xstrtol+1552
000000000000ac71         je         loc_abb0

                     loc_ac77:
000000000000ac77         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1184
000000000000ac7a         jle        loc_ac58

000000000000ac7c         mov        r11d, 0x1
000000000000ac82         movabs     rbp, 0x8000000000000000
000000000000ac8c         jmp        loc_ac6d
000000000000ac8e         align      16

                     loc_ac90:
000000000000ac90         movabs     rax, 0xffe0000000000000                     ; case 0, CODE XREF=xstrtol+430
000000000000ac9a         cmp        rbp, rax
000000000000ac9d         jl         loc_ad20

000000000000aca3         movabs     rax, 0x1fffffffffffff
000000000000acad         cmp        rbp, rax
000000000000acb0         jg         loc_ade0

000000000000acb6         shl        rbp, 0xa
000000000000acba         jmp        loc_a9c0
000000000000acbf         align      64

                     loc_acc0:
000000000000acc0         movsxd     rsi, eax                                    ; case 50, CODE XREF=xstrtol+430
000000000000acc3         movabs     rax, 0x8000000000000000
000000000000accd         mov        r8d, 0x4
000000000000acd3         cqo
000000000000acd5         xor        r11d, r11d
000000000000acd8         movabs     r9, 0x7fffffffffffffff
000000000000ace2         idiv       rsi
000000000000ace5         mov        r10, rax

                     loc_ace8:
000000000000ace8         cmp        r10, rbp                                    ; CODE XREF=xstrtol+1366
000000000000aceb         jg         loc_ad50

000000000000aced         mov        rax, r9
000000000000acf0         cqo
000000000000acf2         idiv       rsi
000000000000acf5         cmp        rax, rbp
000000000000acf8         jl         loc_adc8

000000000000acfe         imul       rbp, rsi

                     loc_ad02:
000000000000ad02         sub        r8d, 0x1                                    ; CODE XREF=xstrtol+1456, xstrtol+1576
000000000000ad06         jne        loc_ace8

000000000000ad08         jmp        loc_abb0
000000000000ad0d         align      16

                     loc_ad10:
000000000000ad10         mov        r12d, 0x4                                   ; CODE XREF=xstrtol+203
000000000000ad16         jmp        loc_a837
000000000000ad1b         align      32

                     loc_ad20:
000000000000ad20         mov        r12d, 0x1                                   ; CODE XREF=xstrtol+573, xstrtol+621, xstrtol+904, xstrtol+1261
000000000000ad26         movabs     rbp, 0x8000000000000000
000000000000ad30         jmp        loc_a9c0
000000000000ad35         align      8

                     loc_ad38:
000000000000ad38         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+827
000000000000ad3e         movabs     rbp, 0x7fffffffffffffff
000000000000ad48         jmp        loc_aaf5
000000000000ad4d         align      16

                     loc_ad50:
000000000000ad50         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1339
000000000000ad56         movabs     rbp, 0x8000000000000000
000000000000ad60         jmp        loc_ad02
000000000000ad62         align      8

                     loc_ad68:
000000000000ad68         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+715
000000000000ad6e         movabs     rbp, 0x7fffffffffffffff
000000000000ad78         jmp        loc_aa85
000000000000ad7d         align      128

                     loc_ad80:
000000000000ad80         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+987
000000000000ad86         movabs     rbp, 0x8000000000000000
000000000000ad90         jmp        loc_aba6
000000000000ad95         align      8

                     loc_ad98:
000000000000ad98         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1099
000000000000ad9e         movabs     rbp, 0x7fffffffffffffff
000000000000ada8         jmp        loc_ac05
000000000000adad         align      16

                     loc_adb0:
000000000000adb0         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1203
000000000000adb6         movabs     rbp, 0x7fffffffffffffff
000000000000adc0         jmp        loc_ac6d
000000000000adc5         align      8

                     loc_adc8:
000000000000adc8         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1352
000000000000adce         movabs     rbp, 0x7fffffffffffffff
000000000000add8         jmp        loc_ad02
000000000000addd         align      32

                     loc_ade0:
000000000000ade0         mov        r12d, 0x1                                   ; CODE XREF=xstrtol+592, xstrtol+640, xstrtol+925, xstrtol+1280
000000000000ade6         movabs     rbp, 0x7fffffffffffffff
000000000000adf0         jmp        loc_a9c0
000000000000adf5         align      8

                     loc_adf8:
000000000000adf8         xor        edi, edi                                    ; CODE XREF=xstrtol+348
000000000000adfa         cmp        byte [rcx+2], 0x42
000000000000adfe         mov        eax, 0x400
000000000000ae03         sete       dil
000000000000ae07         lea        edi, dword [rdi+rdi+1]
000000000000ae0b         jmp        loc_a942

                     loc_ae10:
000000000000ae10         mov        r11d, 0x1                                   ; CODE XREF=xstrtol+1004
000000000000ae16         movabs     rbp, 0x7fffffffffffffff
000000000000ae20         jmp        loc_aba6

                     loc_ae25:
000000000000ae25         mov        eax, 0x1                                    ; CODE XREF=xstrtol+459, xstrtol+499
000000000000ae2a         mov        rbp, r8
000000000000ae2d         jmp        loc_a9b8

                     loc_ae32:
000000000000ae32         mov        eax, 0x1                                    ; CODE XREF=xstrtol+486, xstrtol+508
000000000000ae37         mov        rbp, r10
000000000000ae3a         jmp        loc_a9b8

                     loc_ae3f:
000000000000ae3f         lea        rcx, qword [__PRETTY_FUNCTION__.4162_e508]  ; argument "__function" for method j___assert_fail, "xstrtol", CODE XREF=xstrtol+33
000000000000ae46         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000ae4d         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000ae54         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000ae59         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_ae5e:
000000000000ae5e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtol+152
                        ; endp
000000000000ae63         align      16                                          ; End of unwind block (FDE at 0xfb7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_31: int8_t, -49
        ;    var_32: int8_t, -50


                     xstrtol_fatal:
000000000000ae70         push       r13                                         ; Begin of unwind block (FDE at 0xfbcc), CODE XREF=first_last_page+283
000000000000ae72         push       r12
000000000000ae74         mov        r10d, esi
000000000000ae77         push       rbp
000000000000ae78         push       rbx
000000000000ae79         mov        r12, r8
000000000000ae7c         sub        rsp, 0x18
000000000000ae80         mov        rax, qword [fs:0x28]
000000000000ae89         mov        qword [rsp+0x38+var_30], rax
000000000000ae8e         xor        eax, eax
000000000000ae90         cmp        edi, 0x3
000000000000ae93         mov        ebp, dword [exit_failure]                   ; exit_failure
000000000000ae99         ja         loc_aef4

000000000000ae9b         cmp        edi, 0x2
000000000000ae9e         jae        loc_aeeb

000000000000aea0         sub        edi, 0x1
000000000000aea3         lea        rsi, qword [aSsArgumentSToo]                ; "%s%s argument '%s' too large"
000000000000aeaa         jne        loc_aee6

                     loc_aeac:
000000000000aeac         test       r10d, r10d                                  ; CODE XREF=xstrtol_fatal+130, xstrtol_fatal+142
000000000000aeaf         movsxd     rax, r10d
000000000000aeb2         js         loc_af02

000000000000aeb4         shl        rax, 0x5
000000000000aeb8         lea        rbx, qword [aSsArgumentSToo+29]             ; 0xe548
000000000000aebf         mov        r13, qword [rcx+rax]

                     loc_aec3:
000000000000aec3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext, CODE XREF=xstrtol_fatal+170
000000000000aec8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000aeca         call       j_dcgettext                                 ; dcgettext
000000000000aecf         mov        r9, r12
000000000000aed2         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000aed5         mov        r8, r13
000000000000aed8         mov        rcx, rbx
000000000000aedb         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000aedd         mov        edi, ebp                                    ; argument "__status" for method j_error
000000000000aedf         xor        eax, eax
000000000000aee1         call       j_error                                     ; error

                     loc_aee6:
000000000000aee6         call       j_abort                                     ; abort, CODE XREF=xstrtol_fatal+58, xstrtol_fatal+144
                        ; endp

                     loc_aeeb:
000000000000aeeb         lea        rsi, qword [aInvalidSuffixI]                ; "invalid suffix in %s%s argument '%s'", CODE XREF=xstrtol_fatal+46
000000000000aef2         jmp        loc_aeac

                     loc_aef4:
000000000000aef4         cmp        edi, 0x4                                    ; CODE XREF=xstrtol_fatal+41
000000000000aef7         lea        rsi, qword [aInvalidSsArgum]                ; "invalid %s%s argument '%s'"
000000000000aefe         je         loc_aeac

000000000000af00         jmp        loc_aee6

                     loc_af02:
000000000000af02         lea        rbx, qword [aSsArgumentSToo+29]             ; 0xe548, CODE XREF=xstrtol_fatal+66
000000000000af09         mov        byte [rsp+0x38+var_32], dl
000000000000af0d         mov        byte [rsp+0x38+var_31], 0x0
000000000000af12         lea        r13, qword [rsp+0x38+var_32]
000000000000af17         sub        rbx, rax
000000000000af1a         jmp        loc_aec3
000000000000af1c         align      32                                          ; End of unwind block (FDE at 0xfbcc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80


                     xstrtoumax:
000000000000af20         push       r15                                         ; Begin of unwind block (FDE at 0xfbf4), CODE XREF=first_last_page+72, first_last_page+179
000000000000af22         push       r14
000000000000af24         push       r13
000000000000af26         push       r12
000000000000af28         push       rbp
000000000000af29         push       rbx
000000000000af2a         sub        rsp, 0x28
000000000000af2e         mov        rax, qword [fs:0x28]
000000000000af37         mov        qword [rsp+0x58+var_40], rax
000000000000af3c         xor        eax, eax
000000000000af3e         cmp        edx, 0x24
000000000000af41         ja         loc_b2a5

000000000000af47         lea        rax, qword [rsp+0x58+var_48]
000000000000af4c         mov        r15, rsi
000000000000af4f         test       rsi, rsi
000000000000af52         mov        rbp, rdi
000000000000af55         mov        dword [rsp+0x58+var_50], edx
000000000000af59         mov        r14, rcx
000000000000af5c         mov        r13, r8
000000000000af5f         cmove      r15, rax
000000000000af63         call       j___errno_location                          ; __errno_location
000000000000af68         mov        dword [rax], 0x0
000000000000af6e         mov        r12, rax
000000000000af71         movzx      ebx, byte [rbp]
000000000000af75         call       j___ctype_b_loc                             ; __ctype_b_loc
000000000000af7a         mov        edx, dword [rsp+0x58+var_50]
000000000000af7e         mov        rsi, qword [rax]
000000000000af81         mov        rax, rbp
000000000000af84         jmp        loc_af97
000000000000af86         align      16

                     loc_af90:
000000000000af90         add        rax, 0x1                                    ; CODE XREF=xstrtoumax+127
000000000000af94         movzx      ebx, byte [rax]

                     loc_af97:
000000000000af97         movzx      ecx, bl                                     ; CODE XREF=xstrtoumax+100
000000000000af9a         test       byte [rsi+rcx*2+1], 0x20
000000000000af9f         jne        loc_af90

000000000000afa1         cmp        bl, 0x2d
000000000000afa4         je         loc_aff8

000000000000afa6         xor        ecx, ecx
000000000000afa8         mov        rsi, r15
000000000000afab         mov        rdi, rbp
000000000000afae         call       j___strtoul_internal                        ; __strtoul_internal
000000000000afb3         mov        rcx, qword [r15]
000000000000afb6         mov        rbx, rax
000000000000afb9         cmp        rcx, rbp
000000000000afbc         je         loc_afe8

000000000000afbe         mov        eax, dword [r12]
000000000000afc2         test       eax, eax
000000000000afc4         je         loc_b028

000000000000afc6         cmp        eax, 0x22
000000000000afc9         mov        ebp, 0x1
000000000000afce         jne        loc_aff8

                     loc_afd0:
000000000000afd0         test       r13, r13                                    ; CODE XREF=xstrtoumax+266
000000000000afd3         je         loc_afde

000000000000afd5         movzx      r12d, byte [rcx]
000000000000afd9         test       r12b, r12b
000000000000afdc         jne        loc_b057

                     loc_afde:
000000000000afde         mov        qword [r14], rbx                            ; CODE XREF=xstrtoumax+179
000000000000afe1         jmp        loc_affd
000000000000afe3         align      8

                     loc_afe8:
000000000000afe8         test       r13, r13                                    ; CODE XREF=xstrtoumax+156
000000000000afeb         mov        qword [rsp+0x58+var_50], rcx
000000000000aff0         jne        loc_b030

000000000000aff2         nop        word [rax+rax]

                     loc_aff8:
000000000000aff8         mov        ebp, 0x4                                    ; CODE XREF=xstrtoumax+132, xstrtoumax+174, xstrtoumax+280, xstrtoumax+309

                     loc_affd:
000000000000affd         mov        rdi, qword [rsp+0x58+var_40]                ; CODE XREF=xstrtoumax+193, xstrtoumax+535, xstrtoumax+546
000000000000b002         xor        rdi, qword [fs:0x28]
000000000000b00b         mov        eax, ebp
000000000000b00d         jne        loc_b2a0

000000000000b013         add        rsp, 0x28
000000000000b017         pop        rbx
000000000000b018         pop        rbp
000000000000b019         pop        r12
000000000000b01b         pop        r13
000000000000b01d         pop        r14
000000000000b01f         pop        r15
000000000000b021         ret
                        ; endp
000000000000b022         align      8

                     loc_b028:
000000000000b028         xor        ebp, ebp                                    ; CODE XREF=xstrtoumax+164
000000000000b02a         jmp        loc_afd0
000000000000b02c         align      16

                     loc_b030:
000000000000b030         movzx      r12d, byte [rbp]                            ; CODE XREF=xstrtoumax+208
000000000000b035         test       r12b, r12b
000000000000b038         je         loc_aff8

000000000000b03a         movsx      esi, r12b                                   ; argument "__c" for method j_strchr
000000000000b03e         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000b041         xor        ebp, ebp
000000000000b043         call       j_strchr                                    ; strchr
000000000000b048         test       rax, rax
000000000000b04b         mov        ebx, 0x1
000000000000b050         mov        rcx, qword [rsp+0x58+var_50]
000000000000b055         je         loc_aff8

                     loc_b057:
000000000000b057         movsx      esi, r12b                                   ; argument "__c" for method j_strchr, CODE XREF=xstrtoumax+188
000000000000b05b         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000b05e         mov        qword [rsp+0x58+var_50], rcx
000000000000b063         call       j_strchr                                    ; strchr
000000000000b068         test       rax, rax
000000000000b06b         mov        rcx, qword [rsp+0x58+var_50]
000000000000b070         je         loc_b13c

000000000000b076         lea        eax, dword [r12-0x45]
000000000000b07b         cmp        al, 0x2f
000000000000b07d         ja         loc_b0d0

000000000000b07f         movabs     rdx, 0x814400308945
000000000000b089         bt         rdx, rax
000000000000b08d         jae        loc_b0d0

000000000000b08f         mov        esi, 0x30                                   ; argument "__c" for method j_strchr
000000000000b094         mov        rdi, r13                                    ; argument "__s" for method j_strchr
000000000000b097         mov        qword [rsp+0x58+var_50], rcx
000000000000b09c         call       j_strchr                                    ; strchr
000000000000b0a1         test       rax, rax
000000000000b0a4         mov        rcx, qword [rsp+0x58+var_50]
000000000000b0a9         je         loc_b0d0

000000000000b0ab         movzx      eax, byte [rcx+1]
000000000000b0af         cmp        al, 0x44
000000000000b0b1         je         loc_b0bf

000000000000b0b3         cmp        al, 0x69
000000000000b0b5         je         loc_b288

000000000000b0bb         cmp        al, 0x42
000000000000b0bd         jne        loc_b0d0

                     loc_b0bf:
000000000000b0bf         mov        edi, 0x2                                    ; CODE XREF=xstrtoumax+401
000000000000b0c4         mov        esi, 0x3e8
000000000000b0c9         jmp        loc_b0da
000000000000b0cb         align      16

                     loc_b0d0:
000000000000b0d0         mov        edi, 0x1                                    ; CODE XREF=xstrtoumax+349, xstrtoumax+365, xstrtoumax+393, xstrtoumax+413
000000000000b0d5         mov        esi, 0x400

                     loc_b0da:
000000000000b0da         sub        r12d, 0x42                                  ; CODE XREF=xstrtoumax+425, xstrtoumax+891
000000000000b0de         cmp        r12b, 0x35
000000000000b0e2         ja         loc_b13c

000000000000b0e4         lea        rdx, qword [switch_table_e578]              ; switch_table_e578
000000000000b0eb         movzx      r12d, r12b
000000000000b0ef         movsxd     rax, dword [rdx+r12*4]
000000000000b0f3         add        rax, rdx
000000000000b0f6         jmp        rax                                         ; switch statement using table at 0xe578, with 54 cases, 0xb0f8,0xb120,0xb13c,0xb147,0xb15d,0xb174,0xb19a,0xb1bf,0xb1df,0xb200,0xb223,0xb246,0xb25c

                     loc_b0f8:
000000000000b0f8         mov        rax, rbx                                    ; case 43, CODE XREF=xstrtoumax+470
000000000000b0fb         mul        rsi
000000000000b0fe         jo         loc_b2f1

000000000000b104         xor        r8d, r8d

                     loc_b107:
000000000000b107         mul        rsi                                         ; CODE XREF=xstrtoumax+846, xstrtoumax+862, xstrtoumax+987
000000000000b10a         jo         loc_b2e2

000000000000b110         mov        rbx, rax

                     loc_b113:
000000000000b113         or         ebp, r8d                                    ; CODE XREF=xstrtoumax+972
000000000000b116         nop        word [cs:rax+rax]

                     loc_b120:
000000000000b120         movsxd     rdi, edi                                    ; case 33, CODE XREF=xstrtoumax+470, xstrtoumax+571, xstrtoumax+594, xstrtoumax+632, xstrtoumax+712, xstrtoumax+727, xstrtoumax+823
000000000000b123         mov        eax, ebp
000000000000b125         add        rcx, rdi
000000000000b128         or         eax, 0x2
000000000000b12b         mov        qword [r15], rcx
000000000000b12e         cmp        byte [rcx], 0x0
000000000000b131         mov        qword [r14], rbx
000000000000b134         cmovne     ebp, eax
000000000000b137         jmp        loc_affd

                     loc_b13c:
000000000000b13c         mov        qword [r14], rbx                            ; case 52, CODE XREF=xstrtoumax+336, xstrtoumax+450, xstrtoumax+470
000000000000b13f         or         ebp, 0x2
000000000000b142         jmp        loc_affd

                     loc_b147:
000000000000b147         mov        edx, 0x2                                    ; case 53, CODE XREF=xstrtoumax+470
000000000000b14c         mov        rax, rdx
000000000000b14f         mul        rbx
000000000000b152         jo         loc_b1ee

000000000000b158         add        rbx, rbx
000000000000b15b         jmp        loc_b120

                     loc_b15d:
000000000000b15d         mov        edx, 0x200                                  ; case 32, CODE XREF=xstrtoumax+470
000000000000b162         mov        rax, rdx
000000000000b165         mul        rbx
000000000000b168         jo         loc_b1ee

000000000000b16e         shl        rbx, 0x9
000000000000b172         jmp        loc_b120

                     loc_b174:
000000000000b174         mov        r8d, 0x7                                    ; case 24, CODE XREF=xstrtoumax+470
000000000000b17a         xor        r9d, r9d
000000000000b17d         nop        dword [rax]

                     loc_b180:
000000000000b180         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+627
000000000000b183         mul        rsi
000000000000b186         mov        rbx, rax
000000000000b189         jo         loc_b31e

                     loc_b18f:
000000000000b18f         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1032
000000000000b193         jne        loc_b180

                     loc_b195:
000000000000b195         or         ebp, r9d                                    ; CODE XREF=xstrtoumax+669, xstrtoumax+701, xstrtoumax+766, xstrtoumax+801
000000000000b198         jmp        loc_b120

                     loc_b19a:
000000000000b19a         mov        r8d, 0x8                                    ; case 23, CODE XREF=xstrtoumax+470
000000000000b1a0         xor        r9d, r9d
000000000000b1a3         nop        dword [rax+rax]

                     loc_b1a8:
000000000000b1a8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+667
000000000000b1ab         mul        rsi
000000000000b1ae         mov        rbx, rax
000000000000b1b1         jo         loc_b300

                     loc_b1b7:
000000000000b1b7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1002
000000000000b1bb         jne        loc_b1a8

000000000000b1bd         jmp        loc_b195

                     loc_b1bf:
000000000000b1bf         mov        r8d, 0x4                                    ; case 50, CODE XREF=xstrtoumax+470
000000000000b1c5         xor        r9d, r9d

                     loc_b1c8:
000000000000b1c8         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+699
000000000000b1cb         mul        rsi
000000000000b1ce         mov        rbx, rax
000000000000b1d1         jo         loc_b2d3

                     loc_b1d7:
000000000000b1d7         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+957
000000000000b1db         jne        loc_b1c8

000000000000b1dd         jmp        loc_b195

                     loc_b1df:
000000000000b1df         mov        rax, rbx                                    ; case 41, CODE XREF=xstrtoumax+470
000000000000b1e2         mul        rsi
000000000000b1e5         mov        rbx, rax
000000000000b1e8         jno        loc_b120

                     loc_b1ee:
000000000000b1ee         mov        ebp, 0x1                                    ; CODE XREF=xstrtoumax+562, xstrtoumax+584, xstrtoumax+817
000000000000b1f3         or         rbx, 0xffffffffffffffff
000000000000b1f7         jmp        loc_b120
000000000000b1fc         align      512

                     loc_b200:
000000000000b200         mov        r8d, 0x5                                    ; case 14, CODE XREF=xstrtoumax+470
000000000000b206         xor        r9d, r9d

                     loc_b209:
000000000000b209         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+764
000000000000b20c         mul        rsi
000000000000b20f         mov        rbx, rax
000000000000b212         jo         loc_b30f

                     loc_b218:
000000000000b218         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+1017
000000000000b21c         jne        loc_b209

000000000000b21e         jmp        loc_b195

                     loc_b223:
000000000000b223         mov        r8d, 0x6                                    ; case 3, CODE XREF=xstrtoumax+470
000000000000b229         xor        r9d, r9d

                     loc_b22c:
000000000000b22c         mov        rax, rbx                                    ; CODE XREF=xstrtoumax+799
000000000000b22f         mul        rsi
000000000000b232         mov        rbx, rax
000000000000b235         jo         loc_b2c4

                     loc_b23b:
000000000000b23b         sub        r8d, 0x1                                    ; CODE XREF=xstrtoumax+942
000000000000b23f         jne        loc_b22c

000000000000b241         jmp        loc_b195

                     loc_b246:
000000000000b246         mov        edx, 0x400                                  ; case 0, CODE XREF=xstrtoumax+470
000000000000b24b         mov        rax, rdx
000000000000b24e         mul        rbx
000000000000b251         jo         loc_b1ee

000000000000b253         shl        rbx, 0xa
000000000000b257         jmp        loc_b120

                     loc_b25c:
000000000000b25c         mov        rax, rbx                                    ; case 37, CODE XREF=xstrtoumax+470
000000000000b25f         mul        rsi
000000000000b262         jo         loc_b32d

000000000000b268         xor        r8d, r8d

                     loc_b26b:
000000000000b26b         mul        rsi                                         ; CODE XREF=xstrtoumax+1047
000000000000b26e         jno        loc_b107

000000000000b274         mov        r8d, 0x1
000000000000b27a         or         rax, 0xffffffffffffffff
000000000000b27e         jmp        loc_b107
000000000000b283         align      8

                     loc_b288:
000000000000b288         xor        edi, edi                                    ; CODE XREF=xstrtoumax+405
000000000000b28a         cmp        byte [rcx+2], 0x42
000000000000b28e         mov        esi, 0x400
000000000000b293         sete       dil
000000000000b297         lea        edi, dword [rdi+rdi+1]
000000000000b29b         jmp        loc_b0da

                     loc_b2a0:
000000000000b2a0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=xstrtoumax+237
                        ; endp

                     loc_b2a5:
000000000000b2a5         lea        rcx, qword [__PRETTY_FUNCTION__.4162_e650]  ; argument "__function" for method j___assert_fail, "xstrtoumax", CODE XREF=xstrtoumax+33
000000000000b2ac         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xstrtol.c"
000000000000b2b3         lea        rdi, qword [a0StrtolbaseStr]                ; argument "__assertion" for method j___assert_fail, "0 <= strtol_base && strtol_base <= 36"
000000000000b2ba         mov        edx, 0x54                                   ; argument "__line" for method j___assert_fail
000000000000b2bf         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_b2c4:
000000000000b2c4         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+789
000000000000b2ca         or         rbx, 0xffffffffffffffff
000000000000b2ce         jmp        loc_b23b

                     loc_b2d3:
000000000000b2d3         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+689
000000000000b2d9         or         rbx, 0xffffffffffffffff
000000000000b2dd         jmp        loc_b1d7

                     loc_b2e2:
000000000000b2e2         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+490
000000000000b2e8         or         rbx, 0xffffffffffffffff
000000000000b2ec         jmp        loc_b113

                     loc_b2f1:
000000000000b2f1         or         rax, 0xffffffffffffffff                     ; CODE XREF=xstrtoumax+478
000000000000b2f5         mov        r8d, 0x1
000000000000b2fb         jmp        loc_b107

                     loc_b300:
000000000000b300         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+657
000000000000b306         or         rbx, 0xffffffffffffffff
000000000000b30a         jmp        loc_b1b7

                     loc_b30f:
000000000000b30f         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+754
000000000000b315         or         rbx, 0xffffffffffffffff
000000000000b319         jmp        loc_b218

                     loc_b31e:
000000000000b31e         mov        r9d, 0x1                                    ; CODE XREF=xstrtoumax+617
000000000000b324         or         rbx, 0xffffffffffffffff
000000000000b328         jmp        loc_b18f

                     loc_b32d:
000000000000b32d         mov        r8d, 0x1                                    ; CODE XREF=xstrtoumax+834
000000000000b333         or         rax, 0xffffffffffffffff
000000000000b337         jmp        loc_b26b
000000000000b33c         align      64                                          ; End of unwind block (FDE at 0xfbf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000b340         push       r12                                         ; Begin of unwind block (FDE at 0xfc44), CODE XREF=main+2097, close_file.part.4+147, fopen_safer+65, fopen_safer+134, close_stream+21
000000000000b342         push       rbp
000000000000b343         push       rbx
000000000000b344         mov        rbx, rdi
000000000000b347         call       j_fileno                                    ; fileno
000000000000b34c         test       eax, eax
000000000000b34e         mov        rdi, rbx
000000000000b351         js         loc_b3a7

000000000000b353         call       j___freading                                ; __freading
000000000000b358         test       eax, eax
000000000000b35a         jne        loc_b388

                     loc_b35c:
000000000000b35c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000b35f         call       rpl_fflush                                  ; rpl_fflush
000000000000b364         test       eax, eax
000000000000b366         je         loc_b3a4

000000000000b368         call       j___errno_location                          ; __errno_location
000000000000b36d         mov        r12d, dword [rax]
000000000000b370         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000b373         mov        rbp, rax
000000000000b376         call       j_fclose                                    ; fclose
000000000000b37b         test       r12d, r12d
000000000000b37e         jne        loc_b3b0

                     loc_b380:
000000000000b380         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000b381         pop        rbp
000000000000b382         pop        r12
000000000000b384         ret
                        ; endp
000000000000b385         align      8

                     loc_b388:
000000000000b388         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000b38b         call       j_fileno                                    ; fileno
000000000000b390         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000b392         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000b397         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000b399         call       j_lseek                                     ; lseek
000000000000b39e         cmp        rax, 0xffffffffffffffff
000000000000b3a2         jne        loc_b35c

                     loc_b3a4:
000000000000b3a4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_b3a7:
000000000000b3a7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000b3a8         pop        rbp
000000000000b3a9         pop        r12
000000000000b3ab         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_b3b0:
000000000000b3b0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000b3b4         mov        eax, 0xffffffff
000000000000b3b9         jmp        loc_b380
000000000000b3bb         align      64                                          ; End of unwind block (FDE at 0xfc44)

                     rpl_fcntl:
000000000000b3c0         push       r12                                         ; Begin of unwind block (FDE at 0xfc7c), CODE XREF=dup_safer+9
000000000000b3c2         push       rbp
000000000000b3c3         mov        ebp, edi
000000000000b3c5         push       rbx
000000000000b3c6         sub        rsp, 0x50
000000000000b3ca         mov        rax, qword [fs:0x28]
000000000000b3d3         mov        qword [rsp+0x68+var_50], rax
000000000000b3d8         xor        eax, eax
000000000000b3da         lea        rax, qword [rsp+0x68+arg_0]
000000000000b3df         test       esi, esi
000000000000b3e1         mov        qword [rsp+0x68+var_38], rdx
000000000000b3e6         mov        qword [rsp+0x68+var_30], rcx
000000000000b3eb         mov        qword [rsp+0x68+var_28], r8
000000000000b3f0         mov        qword [rsp+0x68+var_60], rax
000000000000b3f5         lea        rax, qword [rsp+0x68+var_48]
000000000000b3fa         mov        qword [rsp+0x68+var_20], r9
000000000000b3ff         mov        dword [rsp+0x68+var_68], 0x10
000000000000b406         mov        qword [rsp+0x68+var_58], rax
000000000000b40b         je         loc_b612

000000000000b411         cmp        esi, 0x406
000000000000b417         jne        loc_b460

000000000000b419         mov        rax, qword [rsp+0x68+var_58]
000000000000b41e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
000000000000b425         mov        dword [rsp+0x68+var_68], 0x18
000000000000b42c         mov        r12d, dword [rax+0x10]
000000000000b430         mov        edx, r12d
000000000000b433         js         loc_b563

000000000000b439         xor        eax, eax
000000000000b43b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
000000000000b440         call       j_fcntl                                     ; fcntl
000000000000b445         test       eax, eax
000000000000b447         mov        ebx, eax
000000000000b449         js         loc_b5d8

                     loc_b44f:
000000000000b44f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
000000000000b459         jmp        loc_b4a0
000000000000b45b         align      32

                     loc_b460:
000000000000b460         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
000000000000b463         je         loc_b490

000000000000b465         jg         loc_b4c0

000000000000b467         cmp        esi, 0x4
000000000000b46a         je         loc_b540

000000000000b470         jg         loc_b530

000000000000b476         cmp        esi, 0x2
000000000000b479         je         loc_b540

000000000000b47f         jg         loc_b490

000000000000b481         cmp        esi, 0x1
000000000000b484         jne        loc_b4e8

000000000000b486         nop        word [cs:rax+rax]

                     loc_b490:
000000000000b490         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
000000000000b492         xor        eax, eax
000000000000b494         call       j_fcntl                                     ; fcntl
000000000000b499         mov        ebx, eax
000000000000b49b         nop        dword [rax+rax]

                     loc_b4a0:
000000000000b4a0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
000000000000b4a5         xor        rcx, qword [fs:0x28]
000000000000b4ae         mov        eax, ebx
000000000000b4b0         jne        loc_b60d

000000000000b4b6         add        rsp, 0x50
000000000000b4ba         pop        rbx
000000000000b4bb         pop        rbp
000000000000b4bc         pop        r12
000000000000b4be         ret
                        ; endp
000000000000b4bf         align      64

                     loc_b4c0:
000000000000b4c0         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
000000000000b4c6         jg         loc_b510

000000000000b4c8         cmp        esi, 0x406
000000000000b4ce         jge        loc_b540

000000000000b4d0         cmp        esi, 0x401
000000000000b4d6         je         loc_b490

000000000000b4d8         cmp        esi, 0x402
000000000000b4de         je         loc_b540

000000000000b4e0         cmp        esi, 0x400
000000000000b4e6         je         loc_b540

                     loc_b4e8:
000000000000b4e8         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000000b4eb         cmp        eax, 0x2f
000000000000b4ee         ja         loc_b62a

000000000000b4f4         add        rax, qword [rsp+0x68+var_58]

                     loc_b4f9:
000000000000b4f9         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000000b4fc         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000b4fe         xor        eax, eax
000000000000b500         call       j_fcntl                                     ; fcntl
000000000000b505         mov        ebx, eax
000000000000b507         jmp        loc_b4a0
000000000000b509         align      16

                     loc_b510:
000000000000b510         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
000000000000b516         je         loc_b540

000000000000b518         jl         loc_b490

000000000000b51e         cmp        esi, 0x40a
000000000000b524         jne        loc_b4e8

000000000000b526         jmp        loc_b490
000000000000b52b         align      16

                     loc_b530:
000000000000b530         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
000000000000b533         je         loc_b490

000000000000b539         jg         loc_b540

000000000000b53b         cmp        esi, 0x8
000000000000b53e         jne        loc_b4e8

                     loc_b540:
000000000000b540         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
000000000000b543         cmp        eax, 0x2f
000000000000b546         ja         loc_b634

000000000000b54c         add        rax, qword [rsp+0x68+var_58]

                     loc_b551:
000000000000b551         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
000000000000b553         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000b555         xor        eax, eax
000000000000b557         call       j_fcntl                                     ; fcntl
000000000000b55c         mov        ebx, eax
000000000000b55e         jmp        loc_b4a0

                     loc_b563:
000000000000b563         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
000000000000b565         xor        eax, eax
000000000000b567         call       j_fcntl                                     ; fcntl
000000000000b56c         test       eax, eax
000000000000b56e         mov        ebx, eax
000000000000b570         js         loc_b4a0

000000000000b576         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000b57d         jne        loc_b4a0

                     loc_b583:
000000000000b583         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
000000000000b585         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
000000000000b58a         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000b58c         call       j_fcntl                                     ; fcntl
000000000000b591         test       eax, eax
000000000000b593         js         loc_b5b1

000000000000b595         or         eax, 0x1
000000000000b598         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
000000000000b59d         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000b59f         mov        edx, eax
000000000000b5a1         xor        eax, eax
000000000000b5a3         call       j_fcntl                                     ; fcntl
000000000000b5a8         cmp        eax, 0xffffffff
000000000000b5ab         jne        loc_b4a0

                     loc_b5b1:
000000000000b5b1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
000000000000b5b6         mov        r12d, dword [rax]
000000000000b5b9         mov        rbp, rax
000000000000b5bc         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000b5be         call       j_close                                     ; close
000000000000b5c3         mov        ebx, 0xffffffff
000000000000b5c8         mov        dword [rbp], r12d
000000000000b5cc         jmp        loc_b4a0
000000000000b5d1         align      8

                     loc_b5d8:
000000000000b5d8         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
000000000000b5dd         cmp        dword [rax], 0x16
000000000000b5e0         jne        loc_b44f

000000000000b5e6         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000b5e8         xor        eax, eax
000000000000b5ea         mov        edx, r12d
000000000000b5ed         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000b5ef         call       j_fcntl                                     ; fcntl
000000000000b5f4         test       eax, eax
000000000000b5f6         mov        ebx, eax
000000000000b5f8         js         loc_b4a0

000000000000b5fe         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000b608         jmp        loc_b583

                     loc_b60d:
000000000000b60d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_b612:
000000000000b612         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
000000000000b617         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000b619         mov        edx, dword [rax+0x10]
000000000000b61c         xor        eax, eax
000000000000b61e         call       j_fcntl                                     ; fcntl
000000000000b623         mov        ebx, eax
000000000000b625         jmp        loc_b4a0

                     loc_b62a:
000000000000b62a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000000b62f         jmp        loc_b4f9

                     loc_b634:
000000000000b634         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
000000000000b639         jmp        loc_b551
000000000000b63e         align      64                                          ; End of unwind block (FDE at 0xfc7c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
000000000000b640         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xfcb4), CODE XREF=rpl_fclose+31
000000000000b643         push       rbx
000000000000b644         mov        rbx, rdi
000000000000b647         je         loc_b65a

000000000000b649         call       j___freading                                ; __freading
000000000000b64e         test       eax, eax
000000000000b650         je         loc_b65a

000000000000b652         test       dword [rbx], 0x100
000000000000b658         jne        loc_b668

                     loc_b65a:
000000000000b65a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000b65d         pop        rbx
000000000000b65e         jmp        j_fflush                                    ; fflush
                        ; endp
000000000000b663         align      8

                     loc_b668:
000000000000b668         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000b66b         mov        edx, 0x1
000000000000b670         xor        esi, esi
000000000000b672         call       rpl_fseeko                                  ; rpl_fseeko
000000000000b677         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000b67a         pop        rbx
000000000000b67b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
000000000000b680         mov        rax, qword [rdi+8]                          ; End of unwind block (FDE at 0xfcb4), Begin of unwind block (FDE at 0xfcd4), CODE XREF=rpl_fflush+50
000000000000b684         cmp        qword [rdi+0x10], rax
000000000000b688         je         loc_b690

                     j_j_fseeko:        // fseeko
000000000000b68a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000b68f         align      16

                     loc_b690:
000000000000b690         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
000000000000b694         cmp        qword [rdi+0x28], rax
000000000000b698         jne        j_j_fseeko                                  ; fseeko

000000000000b69a         cmp        qword [rdi+0x48], 0x0
000000000000b69f         jne        j_j_fseeko                                  ; fseeko

000000000000b6a1         push       r12
000000000000b6a3         push       rbp
000000000000b6a4         mov        r12d, edx
000000000000b6a7         push       rbx
000000000000b6a8         mov        rbp, rsi
000000000000b6ab         mov        rbx, rdi
000000000000b6ae         call       j_fileno                                    ; fileno
000000000000b6b3         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
000000000000b6b6         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
000000000000b6b9         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000b6bb         call       j_lseek                                     ; lseek
000000000000b6c0         cmp        rax, 0xffffffffffffffff
000000000000b6c4         je         loc_b6d2

000000000000b6c6         and        dword [rbx], 0xffffffef
000000000000b6c9         mov        qword [rbx+0x90], rax
000000000000b6d0         xor        eax, eax

                     loc_b6d2:
000000000000b6d2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
000000000000b6d3         pop        rbp
000000000000b6d4         pop        r12
000000000000b6d6         ret
                        ; endp
000000000000b6d7         align      32                                          ; End of unwind block (FDE at 0xfcd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
000000000000b6e0         push       r13                                         ; Begin of unwind block (FDE at 0xfd04), CODE XREF=mbsnwidth+191, sub_8280+534
000000000000b6e2         push       r12
000000000000b6e4         mov        r13, rsi
000000000000b6e7         push       rbp
000000000000b6e8         push       rbx
000000000000b6e9         mov        rbx, rdi
000000000000b6ec         mov        r12, rdx
000000000000b6ef         sub        rsp, 0x18
000000000000b6f3         mov        rax, qword [fs:0x28]
000000000000b6fc         mov        qword [rsp+0x38+var_30], rax
000000000000b701         xor        eax, eax
000000000000b703         lea        rax, qword [rsp+0x38+var_34]
000000000000b708         test       rdi, rdi
000000000000b70b         cmove      rbx, rax
000000000000b70f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
000000000000b712         call       j_mbrtowc                                   ; mbrtowc
000000000000b717         cmp        rax, 0xfffffffffffffffd
000000000000b71b         mov        rbp, rax
000000000000b71e         jbe        loc_b740

000000000000b720         test       r12, r12
000000000000b723         je         loc_b740

000000000000b725         xor        edi, edi
000000000000b727         call       hard_locale                                 ; hard_locale
000000000000b72c         test       al, al
000000000000b72e         jne        loc_b740

000000000000b730         movzx      eax, byte [r13]
000000000000b735         mov        ebp, 0x1
000000000000b73a         mov        dword [rbx], eax
000000000000b73c         nop        dword [rax]

                     loc_b740:
000000000000b740         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
000000000000b745         xor        rdx, qword [fs:0x28]
000000000000b74e         mov        rax, rbp
000000000000b751         jne        loc_b75e

000000000000b753         add        rsp, 0x18
000000000000b757         pop        rbx
000000000000b758         pop        rbp
000000000000b759         pop        r12
000000000000b75b         pop        r13
000000000000b75d         ret
                        ; endp

                     loc_b75e:
000000000000b75e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
000000000000b763         align      16                                          ; End of unwind block (FDE at 0xfd04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setenv_TZ:
000000000000b770         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xfd44), CODE XREF=revert_tz.part.1+36, set_tz+69
000000000000b773         je         loc_b790

000000000000b775         mov        rsi, rdi                                    ; argument "__value" for method j_setenv
000000000000b778         lea        rdi, qword [aPosixlycorrect+16]             ; argument "__name" for method j_setenv, 0xc01a
000000000000b77f         mov        edx, 0x1                                    ; argument "__replace" for method j_setenv
000000000000b784         jmp        j_setenv                                    ; setenv
                        ; endp
000000000000b789         align      16

                     loc_b790:
000000000000b790         lea        rdi, qword [aPosixlycorrect+16]             ; argument "__name" for method j_unsetenv, 0xc01a, CODE XREF=setenv_TZ+3
000000000000b797         jmp        j_unsetenv                                  ; unsetenv
                        ; endp
000000000000b79c         align      32                                          ; End of unwind block (FDE at 0xfd44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzfree.part.0:
000000000000b7a0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xfd58), CODE XREF=revert_tz.part.1+54, set_tz+103, tzfree+6
000000000000b7a3         je         loc_b7c8

000000000000b7a5         push       rbx
000000000000b7a6         nop        word [cs:rax+rax]

                     loc_b7b0:
000000000000b7b0         mov        rbx, qword [rdi]                            ; CODE XREF=tzfree.part.0+30
000000000000b7b3         call       j_free                                      ; free
000000000000b7b8         test       rbx, rbx
000000000000b7bb         mov        rdi, rbx
000000000000b7be         jne        loc_b7b0

000000000000b7c0         pop        rbx
000000000000b7c1         ret
                        ; endp
000000000000b7c2         align      8

                     loc_b7c8:
000000000000b7c8         ret                                                    ; CODE XREF=tzfree.part.0+3
                        ; endp
000000000000b7ca         align      16                                          ; End of unwind block (FDE at 0xfd58)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     revert_tz.part.1:
000000000000b7d0         push       r13                                         ; Begin of unwind block (FDE at 0xfd74), CODE XREF=localtime_rz+105, localtime_rz+152, mktime_z+108
000000000000b7d2         push       r12
000000000000b7d4         push       rbp
000000000000b7d5         push       rbx
000000000000b7d6         mov        rbp, rdi
000000000000b7d9         sub        rsp, 0x8
000000000000b7dd         call       j___errno_location                          ; __errno_location
000000000000b7e2         cmp        byte [rbp+8], 0x0
000000000000b7e6         mov        rbx, rax
000000000000b7e9         mov        r12d, dword [rax]
000000000000b7ec         lea        rdi, qword [rbp+9]
000000000000b7f0         jne        loc_b7f4

000000000000b7f2         xor        edi, edi

                     loc_b7f4:
000000000000b7f4         call       setenv_TZ                                   ; setenv_TZ, CODE XREF=revert_tz.part.1+32
000000000000b7f9         test       eax, eax
000000000000b7fb         je         loc_b820

000000000000b7fd         mov        r12d, dword [rbx]
000000000000b800         xor        r13d, r13d

                     loc_b803:
000000000000b803         mov        rdi, rbp                                    ; CODE XREF=revert_tz.part.1+91
000000000000b806         call       tzfree.part.0                               ; tzfree.part.0
000000000000b80b         mov        dword [rbx], r12d
000000000000b80e         add        rsp, 0x8
000000000000b812         mov        eax, r13d
000000000000b815         pop        rbx
000000000000b816         pop        rbp
000000000000b817         pop        r12
000000000000b819         pop        r13
000000000000b81b         ret
                        ; endp
000000000000b81c         align      32

                     loc_b820:
000000000000b820         call       j_tzset                                     ; tzset, CODE XREF=revert_tz.part.1+43
000000000000b825         mov        r13d, 0x1
000000000000b82b         jmp        loc_b803
000000000000b82d         align      16                                          ; End of unwind block (FDE at 0xfd74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzalloc:
000000000000b830         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xfdb0), CODE XREF=main+406, save_abbr+236, set_tz+44
000000000000b833         push       r12
000000000000b835         push       rbp
000000000000b836         push       rbx
000000000000b837         je         loc_b898

000000000000b839         mov        r12, rdi
000000000000b83c         call       j_strlen                                    ; strlen
000000000000b841         lea        rbp, qword [rax+1]
000000000000b845         mov        edi, 0x76
000000000000b84a         cmp        rbp, 0x76
000000000000b84e         cmovae     rdi, rbp
000000000000b852         add        rdi, 0x11
000000000000b856         and        rdi, 0xfffffffffffffff8                     ; argument "__size" for method j_malloc
000000000000b85a         call       j_malloc                                    ; malloc
000000000000b85f         test       rax, rax
000000000000b862         mov        rbx, rax
000000000000b865         je         loc_b88b

000000000000b867         mov        qword [rax], 0x0
000000000000b86e         lea        rdi, qword [rbx+9]                          ; argument "__dest" for method j_memcpy
000000000000b872         mov        eax, 0x1
000000000000b877         mov        word [rbx+8], ax
000000000000b87b         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
000000000000b87e         mov        rsi, r12                                    ; argument "__src" for method j_memcpy
000000000000b881         call       j_memcpy                                    ; memcpy
000000000000b886         mov        byte [rbx+rbp+9], 0x0

                     loc_b88b:
000000000000b88b         mov        rax, rbx                                    ; CODE XREF=tzalloc+53, tzalloc+120
000000000000b88e         pop        rbx
000000000000b88f         pop        rbp
000000000000b890         pop        r12
000000000000b892         ret
                        ; endp
000000000000b893         align      8

                     loc_b898:
000000000000b898         mov        edi, 0x80                                   ; argument "__size" for method j_malloc, CODE XREF=tzalloc+7
000000000000b89d         call       j_malloc                                    ; malloc
000000000000b8a2         test       rax, rax
000000000000b8a5         mov        rbx, rax
000000000000b8a8         je         loc_b88b

000000000000b8aa         xor        edx, edx
000000000000b8ac         mov        qword [rbx], 0x0
000000000000b8b3         mov        rax, rbx
000000000000b8b6         mov        word [rbx+8], dx
000000000000b8ba         pop        rbx
000000000000b8bb         pop        rbp
000000000000b8bc         pop        r12
000000000000b8be         ret
                        ; endp
000000000000b8bf         align      64                                          ; End of unwind block (FDE at 0xfdb0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     save_abbr:
000000000000b8c0         push       r15                                         ; Begin of unwind block (FDE at 0xfde8), CODE XREF=localtime_rz+59, mktime_z+81
000000000000b8c2         push       r14
000000000000b8c4         mov        eax, 0x1
000000000000b8c9         push       r13
000000000000b8cb         push       r12
000000000000b8cd         push       rbp
000000000000b8ce         push       rbx
000000000000b8cf         sub        rsp, 0x8
000000000000b8d3         mov        rbp, qword [rsi+0x30]
000000000000b8d7         test       rbp, rbp
000000000000b8da         je         loc_b970

000000000000b8e0         cmp        rsi, rbp
000000000000b8e3         mov        r12, rdi
000000000000b8e6         mov        r13, rsi
000000000000b8e9         ja         loc_b8f4

000000000000b8eb         lea        rdx, qword [rsi+0x38]
000000000000b8ef         cmp        rbp, rdx
000000000000b8f2         jb         loc_b970

                     loc_b8f4:
000000000000b8f4         cmp        byte [rbp], 0x0                             ; CODE XREF=save_abbr+41
000000000000b8f8         lea        rbx, qword [r12+9]
000000000000b8fd         je         loc_b960

000000000000b8ff         nop

                     loc_b900:
000000000000b900         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp, CODE XREF=save_abbr+118, save_abbr+127
000000000000b903         mov        rdi, rbx                                    ; argument "__s1" for method j_strcmp
000000000000b906         call       j_strcmp                                    ; strcmp
000000000000b90b         test       eax, eax
000000000000b90d         je         loc_b967

                     loc_b90f:
000000000000b90f         cmp        byte [rbx], 0x0                             ; CODE XREF=save_abbr+149
000000000000b912         jne        loc_b926

000000000000b914         lea        r14, qword [r12+9]
000000000000b919         cmp        r14, rbx
000000000000b91c         jne        loc_b980

000000000000b91e         cmp        byte [r12+8], 0x0
000000000000b924         je         loc_b980

                     loc_b926:
000000000000b926         mov        rdi, rbx                                    ; argument "__s" for method j_strlen, CODE XREF=save_abbr+82
000000000000b929         call       j_strlen                                    ; strlen
000000000000b92e         lea        rbx, qword [rbx+rax+1]
000000000000b933         cmp        byte [rbx], 0x0
000000000000b936         jne        loc_b900

000000000000b938         mov        rax, qword [r12]
000000000000b93c         test       rax, rax
000000000000b93f         je         loc_b900

000000000000b941         lea        rbx, qword [rax+9]
000000000000b945         mov        rsi, rbp                                    ; argument "__s2" for method j_strcmp
000000000000b948         mov        r12, rax
000000000000b94b         mov        rdi, rbx                                    ; argument "__s1" for method j_strcmp
000000000000b94e         call       j_strcmp                                    ; strcmp
000000000000b953         test       eax, eax
000000000000b955         jne        loc_b90f

000000000000b957         jmp        loc_b967
000000000000b959         align      32

                     loc_b960:
000000000000b960         lea        rbx, qword [aStandardInput+16]              ; 0xbee5, CODE XREF=save_abbr+61

                     loc_b967:
000000000000b967         mov        qword [r13+0x30], rbx                       ; CODE XREF=save_abbr+77, save_abbr+151, save_abbr+263, save_abbr+305
000000000000b96b         mov        eax, 0x1

                     loc_b970:
000000000000b970         add        rsp, 0x8                                    ; CODE XREF=save_abbr+26, save_abbr+50, save_abbr+253, save_abbr+285
000000000000b974         pop        rbx
000000000000b975         pop        rbp
000000000000b976         pop        r12
000000000000b978         pop        r13
000000000000b97a         pop        r14
000000000000b97c         pop        r15
000000000000b97e         ret
                        ; endp
000000000000b97f         align      128

                     loc_b980:
000000000000b980         mov        rdi, rbp                                    ; argument "__s" for method j_strlen, CODE XREF=save_abbr+92, save_abbr+100
000000000000b983         call       j_strlen                                    ; strlen
000000000000b988         lea        rdx, qword [rax+1]
000000000000b98c         mov        r15, rax
000000000000b98f         mov        rax, rbx
000000000000b992         sub        rax, r14
000000000000b995         mov        rcx, rax
000000000000b998         not        rcx
000000000000b99b         cmp        rcx, rdx
000000000000b99e         jb         loc_b9d0

000000000000b9a0         add        rax, rdx
000000000000b9a3         cmp        rax, 0x76
000000000000b9a7         jbe        loc_b9e0

000000000000b9a9         mov        rdi, rbp
000000000000b9ac         call       tzalloc                                     ; tzalloc
000000000000b9b1         mov        rbx, rax
000000000000b9b4         mov        qword [r12], rax
000000000000b9b8         xor        eax, eax
000000000000b9ba         test       rbx, rbx
000000000000b9bd         je         loc_b970

000000000000b9bf         mov        byte [rbx+8], 0x0
000000000000b9c3         add        rbx, 0x9
000000000000b9c7         jmp        loc_b967
000000000000b9c9         align      16

                     loc_b9d0:
000000000000b9d0         call       j___errno_location                          ; __errno_location, CODE XREF=save_abbr+222
000000000000b9d5         mov        dword [rax], 0xc
000000000000b9db         xor        eax, eax
000000000000b9dd         jmp        loc_b970
000000000000b9df         align      32

                     loc_b9e0:
000000000000b9e0         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy, CODE XREF=save_abbr+231
000000000000b9e3         mov        rdi, rbx                                    ; argument "__dest" for method j_memcpy
000000000000b9e6         call       j_memcpy                                    ; memcpy
000000000000b9eb         mov        byte [rbx+r15+1], 0x0
000000000000b9f1         jmp        loc_b967
000000000000b9f6         align      512                                         ; End of unwind block (FDE at 0xfde8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32


                     set_tz:
000000000000ba00         push       r12                                         ; Begin of unwind block (FDE at 0xfe34), CODE XREF=localtime_rz+24, mktime_z+39
000000000000ba02         push       rbp
000000000000ba03         mov        rbp, rdi
000000000000ba06         push       rbx
000000000000ba07         lea        rdi, qword [aPosixlycorrect+16]             ; argument "__name" for method j_getenv, 0xc01a
000000000000ba0e         sub        rsp, 0x10
000000000000ba12         call       j_getenv                                    ; getenv
000000000000ba17         test       rax, rax
000000000000ba1a         mov        rbx, rax
000000000000ba1d         je         loc_bab8

000000000000ba23         cmp        byte [rbp+8], 0x0
000000000000ba27         jne        loc_ba90

                     loc_ba29:
000000000000ba29         mov        rdi, rbx                                    ; CODE XREF=set_tz+164, set_tz+194
000000000000ba2c         call       tzalloc                                     ; tzalloc
000000000000ba31         test       rax, rax
000000000000ba34         mov        r12, rax
000000000000ba37         je         loc_ba7d

000000000000ba39         xor        edi, edi
000000000000ba3b         cmp        byte [rbp+8], 0x0
000000000000ba3f         je         loc_ba45

000000000000ba41         lea        rdi, qword [rbp+9]

                     loc_ba45:
000000000000ba45         call       setenv_TZ                                   ; setenv_TZ, CODE XREF=set_tz+63
000000000000ba4a         test       eax, eax
000000000000ba4c         je         loc_bad8

000000000000ba52         call       j___errno_location                          ; __errno_location
000000000000ba57         cmp        r12, 0x1
000000000000ba5b         mov        ebx, dword [rax]
000000000000ba5d         je         loc_ba78

000000000000ba5f         mov        rdi, r12
000000000000ba62         mov        qword [rsp+0x28+var_20], rax
000000000000ba67         call       tzfree.part.0                               ; tzfree.part.0
000000000000ba6c         mov        rax, qword [rsp+0x28+var_20]
000000000000ba71         nop        dword [rax]

                     loc_ba78:
000000000000ba78         mov        dword [rax], ebx                            ; CODE XREF=set_tz+93
000000000000ba7a         xor        r12d, r12d

                     loc_ba7d:
000000000000ba7d         add        rsp, 0x10                                   ; CODE XREF=set_tz+55, set_tz+221
000000000000ba81         mov        rax, r12
000000000000ba84         pop        rbx
000000000000ba85         pop        rbp
000000000000ba86         pop        r12
000000000000ba88         ret
                        ; endp
000000000000ba89         align      16

                     loc_ba90:
000000000000ba90         lea        rdi, qword [rbp+9]                          ; argument "__s1" for method j_strcmp, CODE XREF=set_tz+39
000000000000ba94         mov        rsi, rax                                    ; argument "__s2" for method j_strcmp
000000000000ba97         mov        r12d, 0x1
000000000000ba9d         call       j_strcmp                                    ; strcmp
000000000000baa2         test       eax, eax
000000000000baa4         jne        loc_ba29

000000000000baa6         add        rsp, 0x10
000000000000baaa         mov        rax, r12
000000000000baad         pop        rbx
000000000000baae         pop        rbp
000000000000baaf         pop        r12
000000000000bab1         ret
                        ; endp
000000000000bab2         align      8

                     loc_bab8:
000000000000bab8         cmp        byte [rbp+8], 0x0                           ; CODE XREF=set_tz+29
000000000000babc         mov        r12d, 0x1
000000000000bac2         jne        loc_ba29

000000000000bac8         add        rsp, 0x10
000000000000bacc         mov        rax, r12
000000000000bacf         pop        rbx
000000000000bad0         pop        rbp
000000000000bad1         pop        r12
000000000000bad3         ret
                        ; endp
000000000000bad4         align      8

                     loc_bad8:
000000000000bad8         call       j_tzset                                     ; tzset, CODE XREF=set_tz+76
000000000000badd         jmp        loc_ba7d
000000000000badf         align      32                                          ; End of unwind block (FDE at 0xfe34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     tzfree:
000000000000bae0         cmp        rdi, 0x1                                    ; Begin of unwind block (FDE at 0xfe88)
000000000000bae4         je         loc_baeb

000000000000bae6         jmp        tzfree.part.0                               ; tzfree.part.0
                        ; endp

                     loc_baeb:
000000000000baeb         ret                                                    ; CODE XREF=tzfree+4
                        ; endp
000000000000baec         align      16                                          ; End of unwind block (FDE at 0xfe88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     localtime_rz:
000000000000baf0         push       r13                                         ; Begin of unwind block (FDE at 0xfe9c), CODE XREF=init_header+130
000000000000baf2         push       r12
000000000000baf4         push       rbp
000000000000baf5         push       rbx
000000000000baf6         mov        rbp, rsi
000000000000baf9         sub        rsp, 0x8
000000000000bafd         test       rdi, rdi
000000000000bb00         je         loc_bb70

000000000000bb02         mov        r13, rdx
000000000000bb05         mov        rbx, rdi
000000000000bb08         call       set_tz                                      ; set_tz
000000000000bb0d         test       rax, rax
000000000000bb10         mov        r12, rax
000000000000bb13         je         loc_bb5e

000000000000bb15         mov        rsi, r13                                    ; argument "__tp" for method j_localtime_r
000000000000bb18         mov        rdi, rbp                                    ; argument "__timer" for method j_localtime_r
000000000000bb1b         call       j_localtime_r                               ; localtime_r
000000000000bb20         test       rax, rax
000000000000bb23         je         loc_bb50

000000000000bb25         mov        rsi, r13
000000000000bb28         mov        rdi, rbx
000000000000bb2b         call       save_abbr                                   ; save_abbr
000000000000bb30         test       al, al
000000000000bb32         je         loc_bb50

000000000000bb34         cmp        r12, 0x1
000000000000bb38         jne        loc_bb85

                     loc_bb3a:
000000000000bb3a         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+159
000000000000bb3e         mov        rax, r13
000000000000bb41         pop        rbx
000000000000bb42         pop        rbp
000000000000bb43         pop        r12
000000000000bb45         pop        r13
000000000000bb47         ret
                        ; endp
000000000000bb48         align      16

                     loc_bb50:
000000000000bb50         cmp        r12, 0x1                                    ; CODE XREF=localtime_rz+51, localtime_rz+66
000000000000bb54         je         loc_bb5e

000000000000bb56         mov        rdi, r12
000000000000bb59         call       revert_tz.part.1                            ; revert_tz.part.1

                     loc_bb5e:
000000000000bb5e         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+35, localtime_rz+100, localtime_rz+161
000000000000bb62         xor        eax, eax
000000000000bb64         pop        rbx
000000000000bb65         pop        rbp
000000000000bb66         pop        r12
000000000000bb68         pop        r13
000000000000bb6a         ret
                        ; endp
000000000000bb6b         align      16

                     loc_bb70:
000000000000bb70         add        rsp, 0x8                                    ; CODE XREF=localtime_rz+16
000000000000bb74         mov        rdi, rbp                                    ; argument "__timer" for method j_gmtime_r
000000000000bb77         mov        rsi, rdx                                    ; argument "__tp" for method j_gmtime_r
000000000000bb7a         pop        rbx
000000000000bb7b         pop        rbp
000000000000bb7c         pop        r12
000000000000bb7e         pop        r13
000000000000bb80         jmp        j_gmtime_r                                  ; gmtime_r
                        ; endp

                     loc_bb85:
000000000000bb85         mov        rdi, r12                                    ; CODE XREF=localtime_rz+72
000000000000bb88         call       revert_tz.part.1                            ; revert_tz.part.1
000000000000bb8d         test       al, al
000000000000bb8f         jne        loc_bb3a

000000000000bb91         jmp        loc_bb5e
000000000000bb93         align      32                                          ; End of unwind block (FDE at 0xfe9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_38: int32_t, -56
        ;    var_44: int32_t, -68
        ;    var_48: int32_t, -72
        ;    var_4C: int32_t, -76
        ;    var_50: int32_t, -80
        ;    var_54: int32_t, -84
        ;    var_58: int32_t, -88
        ;    var_60: int64_t, -96


                     mktime_z:
000000000000bba0         push       r12                                         ; Begin of unwind block (FDE at 0xfefc), CODE XREF=sub_6c10+66
000000000000bba2         push       rbp
000000000000bba3         push       rbx
000000000000bba4         mov        rbx, rsi
000000000000bba7         sub        rsp, 0x50
000000000000bbab         mov        rax, qword [fs:0x28]
000000000000bbb4         mov        qword [rsp+0x68+var_20], rax
000000000000bbb9         xor        eax, eax
000000000000bbbb         test       rdi, rdi
000000000000bbbe         je         loc_bcc0

000000000000bbc4         mov        rbp, rdi
000000000000bbc7         call       set_tz                                      ; set_tz
000000000000bbcc         test       rax, rax
000000000000bbcf         mov        r12, rax
000000000000bbd2         je         loc_bcd0

000000000000bbd8         mov        rdi, rbx                                    ; argument "__tp" for method j_mktime
000000000000bbdb         call       j_mktime                                    ; mktime
000000000000bbe0         cmp        rax, 0xffffffffffffffff
000000000000bbe4         mov        qword [rsp+0x68+var_60], rax
000000000000bbe9         je         loc_bc40

                     loc_bbeb:
000000000000bbeb         mov        rsi, rbx                                    ; CODE XREF=mktime_z+269
000000000000bbee         mov        rdi, rbp
000000000000bbf1         call       save_abbr                                   ; save_abbr
000000000000bbf6         test       al, al
000000000000bbf8         jne        loc_bc03

000000000000bbfa         mov        qword [rsp+0x68+var_60], 0xffffffffffffffff

                     loc_bc03:
000000000000bc03         cmp        r12, 0x1                                    ; CODE XREF=mktime_z+88, mktime_z+178, mktime_z+261, mktime_z+275
000000000000bc07         je         loc_bc19

000000000000bc09         mov        rdi, r12
000000000000bc0c         call       revert_tz.part.1                            ; revert_tz.part.1
000000000000bc11         test       al, al
000000000000bc13         je         loc_bcd0

                     loc_bc19:
000000000000bc19         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=mktime_z+103

                     loc_bc1e:
000000000000bc1e         mov        rcx, qword [rsp+0x68+var_20]                ; CODE XREF=mktime_z+296, mktime_z+311
000000000000bc23         xor        rcx, qword [fs:0x28]
000000000000bc2c         jne        loc_bcdc

000000000000bc32         add        rsp, 0x50
000000000000bc36         pop        rbx
000000000000bc37         pop        rbp
000000000000bc38         pop        r12
000000000000bc3a         ret
                        ; endp
000000000000bc3b         align      64

                     loc_bc40:
000000000000bc40         lea        rsi, qword [rsp+0x68+var_58]                ; argument "__tp" for method j_localtime_r, CODE XREF=mktime_z+73
000000000000bc45         lea        rdi, qword [rsp+0x68+var_60]                ; argument "__timer" for method j_localtime_r
000000000000bc4a         call       j_localtime_r                               ; localtime_r
000000000000bc4f         test       rax, rax
000000000000bc52         je         loc_bc03

000000000000bc54         mov        eax, dword [rbx]
000000000000bc56         mov        edx, dword [rbx+4]
000000000000bc59         xor        eax, dword [rsp+0x68+var_58]
000000000000bc5d         xor        edx, dword [rsp+0x68+var_54]
000000000000bc61         mov        ecx, dword [rsp+0x68+var_38]
000000000000bc65         or         eax, edx
000000000000bc67         mov        edx, dword [rbx+8]
000000000000bc6a         xor        edx, dword [rsp+0x68+var_50]
000000000000bc6e         or         eax, edx
000000000000bc70         mov        edx, dword [rbx+0xc]
000000000000bc73         xor        edx, dword [rsp+0x68+var_4C]
000000000000bc77         or         eax, edx
000000000000bc79         mov        edx, dword [rbx+0x10]
000000000000bc7c         xor        edx, dword [rsp+0x68+var_48]
000000000000bc80         or         eax, edx
000000000000bc82         mov        edx, dword [rbx+0x14]
000000000000bc85         xor        edx, dword [rsp+0x68+var_44]
000000000000bc89         or         eax, edx
000000000000bc8b         mov        edx, dword [rbx+0x20]
000000000000bc8e         test       edx, edx
000000000000bc90         sete       dil
000000000000bc94         test       ecx, ecx
000000000000bc96         sete       sil
000000000000bc9a         cmp        dil, sil
000000000000bc9d         je         loc_bcab

000000000000bc9f         test       edx, edx
000000000000bca1         js         loc_bcab

000000000000bca3         test       ecx, ecx
000000000000bca5         jns        loc_bc03

                     loc_bcab:
000000000000bcab         test       eax, eax                                    ; CODE XREF=mktime_z+253, mktime_z+257
000000000000bcad         je         loc_bbeb

000000000000bcb3         jmp        loc_bc03
000000000000bcb8         align      64

                     loc_bcc0:
000000000000bcc0         mov        rdi, rsi                                    ; argument "__tp" for method j_timegm, CODE XREF=mktime_z+30
000000000000bcc3         call       j_timegm                                    ; timegm
000000000000bcc8         jmp        loc_bc1e
000000000000bccd         align      16

                     loc_bcd0:
000000000000bcd0         mov        rax, 0xffffffffffffffff                     ; CODE XREF=mktime_z+50, mktime_z+115
000000000000bcd7         jmp        loc_bc1e

                     loc_bcdc:
000000000000bcdc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=mktime_z+140
                        ; endp
000000000000bce1         align      16                                          ; End of unwind block (FDE at 0xfefc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
000000000000bcf0         push       r12                                         ; Begin of unwind block (FDE at 0xff34), CODE XREF=close_stdout+13, close_stdout+51
000000000000bcf2         push       rbp
000000000000bcf3         mov        rbp, rdi
000000000000bcf6         push       rbx
000000000000bcf7         call       j___fpending                                ; __fpending
000000000000bcfc         mov        ebx, dword [rbp]
000000000000bcff         mov        rdi, rbp
000000000000bd02         mov        r12, rax
000000000000bd05         call       rpl_fclose                                  ; rpl_fclose
000000000000bd0a         and        ebx, 0x20
000000000000bd0d         test       ebx, ebx
000000000000bd0f         jne        loc_bd28

000000000000bd11         test       eax, eax
000000000000bd13         je         loc_bd1f

000000000000bd15         test       r12, r12
000000000000bd18         mov        eax, 0xffffffff
000000000000bd1d         je         loc_bd58

                     loc_bd1f:
000000000000bd1f         pop        rbx                                         ; CODE XREF=close_stream+35
000000000000bd20         pop        rbp
000000000000bd21         pop        r12
000000000000bd23         ret
                        ; endp
000000000000bd24         align      8

                     loc_bd28:
000000000000bd28         test       eax, eax                                    ; CODE XREF=close_stream+31
000000000000bd2a         jne        loc_bd48

000000000000bd2c         call       j___errno_location                          ; __errno_location
000000000000bd31         mov        dword [rax], 0x0
000000000000bd37         mov        eax, 0xffffffff
000000000000bd3c         pop        rbx
000000000000bd3d         pop        rbp
000000000000bd3e         pop        r12
000000000000bd40         ret
                        ; endp
000000000000bd41         align      8

                     loc_bd48:
000000000000bd48         pop        rbx                                         ; CODE XREF=close_stream+58
000000000000bd49         mov        eax, 0xffffffff
000000000000bd4e         pop        rbp
000000000000bd4f         pop        r12
000000000000bd51         ret
                        ; endp
000000000000bd52         align      8

                     loc_bd58:
000000000000bd58         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
000000000000bd5d         cmp        dword [rax], 0x9
000000000000bd60         pop        rbx
000000000000bd61         pop        rbp
000000000000bd62         pop        r12
000000000000bd64         setne      al
000000000000bd67         movzx      eax, al
000000000000bd6a         neg        eax
000000000000bd6c         ret
                        ; endp
000000000000bd6d         align      16                                          ; End of unwind block (FDE at 0xff34)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000000bd70         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xff84), CODE XREF=gettext_quote.part.1+11
000000000000bd74         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000000bd79         call       j_nl_langinfo                               ; nl_langinfo
000000000000bd7e         test       rax, rax
000000000000bd81         je         loc_bda0

000000000000bd83         cmp        byte [rax], 0x0
000000000000bd86         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000bd8d         cmove      rax, rdx
000000000000bd91         add        rsp, 0x8
000000000000bd95         ret
                        ; endp
000000000000bd96         align      32

                     loc_bda0:
000000000000bda0         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000000bda7         add        rsp, 0x8
000000000000bdab         ret
                        ; endp
000000000000bdac         align      16                                          ; End of unwind block (FDE at 0xff84)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000bdb0         push       r15                                         ; Begin of unwind block (FDE at 0xffa4), DATA XREF=_start+22
000000000000bdb2         push       r14
000000000000bdb4         mov        r15, rdx
000000000000bdb7         push       r13
000000000000bdb9         push       r12
000000000000bdbb         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000bdc2         push       rbp
000000000000bdc3         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000bdca         push       rbx
000000000000bdcb         mov        r13d, edi
000000000000bdce         mov        r14, rsi
000000000000bdd1         sub        rbp, r12
000000000000bdd4         sub        rsp, 0x8
000000000000bdd8         sar        rbp, 0x3
000000000000bddc         call       _init                                       ; _init
000000000000bde1         test       rbp, rbp
000000000000bde4         je         loc_be06

000000000000bde6         xor        ebx, ebx
000000000000bde8         nop        dword [rax+rax]

                     loc_bdf0:
000000000000bdf0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000bdf3         mov        rsi, r14
000000000000bdf6         mov        edi, r13d
000000000000bdf9         call       qword [r12+rbx*8]
000000000000bdfd         add        rbx, 0x1
000000000000be01         cmp        rbp, rbx
000000000000be04         jne        loc_bdf0

                     loc_be06:
000000000000be06         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000be0a         pop        rbx
000000000000be0b         pop        rbp
000000000000be0c         pop        r12
000000000000be0e         pop        r13
000000000000be10         pop        r14
000000000000be12         pop        r15
000000000000be14         ret
                        ; endp
000000000000be15         align      32                                          ; End of unwind block (FDE at 0xffa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000be20         ret                                                    ; Begin of unwind block (FDE at 0xffec), DATA XREF=_start+15
                        ; endp
000000000000be22         align      16                                          ; End of unwind block (FDE at 0xffec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000be30         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0x10004), __dso_handle, CODE XREF=main+108
000000000000be37         xor        esi, esi
000000000000be39         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000be3e         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0x10004)
000000000000be3f         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xbe40; 0xbe49[ (9 bytes)
        ; File offset : [48704; 48713[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000be40         sub        rsp, 0x8
000000000000be44         add        rsp, 0x8
000000000000be48         ret
                        ; endp
000000000000be49         db  0x00 ; '.'
000000000000be4a         db  0x00 ; '.'
000000000000be4b         db  0x00 ; '.'
000000000000be4c         db  0x00 ; '.'
000000000000be4d         db  0x00 ; '.'
000000000000be4e         db  0x00 ; '.'
000000000000be4f         db  0x00 ; '.'
000000000000be50         db  0x00 ; '.'
000000000000be51         db  0x00 ; '.'
000000000000be52         db  0x00 ; '.'
000000000000be53         db  0x00 ; '.'
000000000000be54         db  0x00 ; '.'
000000000000be55         db  0x00 ; '.'
000000000000be56         db  0x00 ; '.'
000000000000be57         db  0x00 ; '.'
000000000000be58         db  0x00 ; '.'
000000000000be59         db  0x00 ; '.'
000000000000be5a         db  0x00 ; '.'
000000000000be5b         db  0x00 ; '.'
000000000000be5c         db  0x00 ; '.'
000000000000be5d         db  0x00 ; '.'
000000000000be5e         db  0x00 ; '.'
000000000000be5f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xbe60; 0xe661[ (10241 bytes)
        ; File offset : [48736; 58977[ (10241 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000be60         db  0x01 ; '.'
000000000000be61         db  0x00 ; '.'
000000000000be62         db  0x02 ; '.'
000000000000be63         db  0x00 ; '.'
                     aIntegerOverflo:
000000000000be64         db         "integer overflow", 0                       ; DATA XREF=integer_overflow
                     aInvalidNumberO:
000000000000be75         db         "invalid number of columns", 0              ; DATA XREF=parse_column_count+1
                     aS09d:
000000000000be8f         db         "%s.%09d", 0                                ; DATA XREF=init_header+494
                     aPageNumberOver:
000000000000be97         db         "page number overflow", 0                   ; DATA XREF=print_header+263
                     aPageLu:
000000000000beac         db         "Page %lu", 0                               ; DATA XREF=print_header+75
                     aNnssssssnnn:
000000000000beb5         db         "\n\n%*s%s%*s%s%*s%s\n\n\n", 0              ; DATA XREF=print_header+161
000000000000beca         db  0x20 ; ' '                                         ; DATA XREF=print_header+171, print_files+161, print_files+723
000000000000becb         db  0x00 ; '.'
000000000000becc         db  0x25 ; '%'                                         ; DATA XREF=char_to_clump+365
000000000000becd         db  0x30 ; '0'
000000000000bece         db  0x33 ; '3'
000000000000becf         db  0x6f ; 'o'
000000000000bed0         db  0x00 ; '.'
000000000000bed1         db  0x25 ; '%'                                         ; DATA XREF=add_line_number.isra.2+9
000000000000bed2         db  0x2a ; '*'
000000000000bed3         db  0x64 ; 'd'
000000000000bed4         db  0x00 ; '.'
                     aStandardInput:
000000000000bed5         db         "standard input", 0                         ; DATA XREF=main+2111, open_file+38, print_files+3620
000000000000bee4         db  0x09 ; '.'                                         ; DATA XREF=print_files+1212
000000000000bee5         db  0x00 ; '.'                                         ; DATA XREF=main+53, main+904, main+1115, main+1254, main+1512, main+1584, main+1676, first_last_page+4, first_last_page+161, parse_column_count+23, init_header+255
                     aPageWidthTooNa:
000000000000bee6         db         "page width too narrow", 0                  ; DATA XREF=print_files+3961
000000000000befc         db  0x70 ; 'p'                                         ; DATA XREF=main+1860, usage+786, usage+1100, usage+1284, usage+1303, usage+1337
000000000000befd         db  0x72 ; 'r'
000000000000befe         db  0x00 ; '.'
000000000000beff         db  0x5b ; '['                                         ; DATA XREF=usage+798
000000000000bf00         db  0x00 ; '.'
                     aTestInvocation:
000000000000bf01         db         "test invocation", 0                        ; DATA XREF=usage+837
                     aMulticallInvoc:
000000000000bf11         db         "Multi-call invocation", 0                  ; DATA XREF=usage+885
                     aSha224sum:
000000000000bf27         db         "sha224sum", 0                              ; DATA XREF=usage+902
                     aSha2Utilities:
000000000000bf31         db         "sha2 utilities", 0                         ; DATA XREF=usage+914
                     aSha256sum:
000000000000bf40         db         "sha256sum", 0                              ; DATA XREF=usage+805
                     aSha384sum:
000000000000bf4a         db         "sha384sum", 0                              ; DATA XREF=usage+849
                     aSha512sum:
000000000000bf54         db         "sha512sum", 0                              ; DATA XREF=usage+873
                     aNsOnlineHelpSn:
000000000000bf5e         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+986
000000000000bf75         db  0x47 ; 'G'                                         ; DATA XREF=main+1853, usage+1014, usage+1207, emit_bug_reporting_address+68
000000000000bf76         db  0x4e ; 'N'
000000000000bf77         db  0x55 ; 'U'
000000000000bf78         db  0x20 ; ' '
                     aCoreutils:
000000000000bf79         db         "coreutils", 0                              ; DATA XREF=main+77, main+89, usage+861
000000000000bf83         db  0x65 ; 'e'                                         ; DATA XREF=usage+1053, usage+1246
000000000000bf84         db  0x6e ; 'n'
000000000000bf85         db  0x5f ; '_'
000000000000bf86         db  0x00 ; '.'
                     aFullDocumentat:
000000000000bf87         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+1081, usage+1270
                     aBEHmY:
000000000000bfa2         db         "%b %e %H:%M %Y", 0                         ; DATA XREF=main+2021
                     aYmdHm:
000000000000bfb1         db         "%Y-%m-%d %H:%M", 0                         ; DATA XREF=main+2081
                     aUsrlocalsharel:
000000000000bfc0         db         "/usr/local/share/locale", 0                ; DATA XREF=main+70
                     aInvalidPageRan:
000000000000bfd8         db         "invalid page range %s", 0                  ; DATA XREF=main+2287
                     aRolandHuebner:
000000000000bfee         db         "Roland Huebner", 0                         ; DATA XREF=main+1839
                     aPeteTermaat:
000000000000bffd         db         "Pete TerMaat", 0                           ; DATA XREF=main+1846
                     aPosixlycorrect:
000000000000c00a         db         "POSIXLY_CORRECT", 0                        ; DATA XREF=main+1992
000000000000c01a         db  0x54 ; 'T'                                         ; DATA XREF=main+391, setenv_TZ+8, setenv_TZ+32, set_tz+7
000000000000c01b         db  0x5a ; 'Z'
000000000000c01c         db  0x00 ; '.'
                     aPages:
000000000000c01d         db         "pages", 0
                     aAcross:
000000000000c023         db         "across", 0
                     aShowcontrolcha:
000000000000c02a         db         "show-control-chars", 0
                     aDoublespace:
000000000000c03d         db         "double-space", 0
                     aDateformat:
000000000000c04a         db         "date-format", 0
                     aExpandtabs:
000000000000c056         db         "expand-tabs", 0
                     aFormfeed:
000000000000c062         db         "form-feed", 0
                     aOutputtabs:
000000000000c06c         db         "output-tabs", 0
                     aJoinlines:
000000000000c078         db         "join-lines", 0
                     aLength:
000000000000c083         db         "length", 0
                     aMerge:
000000000000c08a         db         "merge", 0
                     aNumberlines:
000000000000c090         db         "number-lines", 0
                     aFirstlinenumbe:
000000000000c09d         db         "first-line-number", 0
                     aIndent:
000000000000c0af         db         "indent", 0
                     aNofilewarnings:
000000000000c0b6         db         "no-file-warnings", 0
                     aSeparator:
000000000000c0c7         db         "separator", 0
                     aSepstring:
000000000000c0d1         db         "sep-string", 0
000000000000c0dc         db  0x6f ; 'o'
000000000000c0dd         db  0x6d ; 'm'
000000000000c0de         db  0x69 ; 'i'
000000000000c0df         db  0x74 ; 't'
000000000000c0e0         db  0x2d ; '-'
                     aHeader:
000000000000c0e1         db         "header", 0
                     aOmitpagination:
000000000000c0e8         db         "omit-pagination", 0
                     aShownonprintin:
000000000000c0f8         db         "show-nonprinting", 0
000000000000c109         db  0x70 ; 'p'
000000000000c10a         db  0x61 ; 'a'
000000000000c10b         db  0x67 ; 'g'
000000000000c10c         db  0x65 ; 'e'
000000000000c10d         db  0x2d ; '-'
                     aWidth:
000000000000c10e         db         "width", 0
                     aHelp:
000000000000c114         db         "help", 0
                     aVersion:
000000000000c119         db         "version", 0
000000000000c121         align      8
                     aStartingPageNu:
000000000000c128         db         "starting page number %lu exceeds page count %lu", 0 ; DATA XREF=print_files+3741
                     aTrySHelpForMor:
000000000000c158         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000c17f         align      128
                     aUsageSOptionFi:
000000000000c180         db         "Usage: %s [OPTION]... [FILE]...\n", 0      ; DATA XREF=usage+93
000000000000c1a1         align      8
                     aPaginateOrColu:
000000000000c1a8         db         "Paginate or columnate FILE(s) for printing.\n", 0 ; DATA XREF=usage+132
000000000000c1d5         align      8
                     aNwithNoFileOrW:
000000000000c1d8         db         "\nWith no FILE, or when FILE is -, read standard input.\n", 0 ; DATA XREF=usage+169
                     aNmandatoryArgu:
000000000000c210         db         "\nMandatory arguments to long options are mandatory for short options too.\n", 0 ; DATA XREF=usage+206
000000000000c25b         align      32
                     aFirstpagelastp:
000000000000c260         db         "  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]\n                    begin [stop] printing with page FIRST_[LAST_]PAGE\n  -COLUMN, --columns=COLUMN\n                    output COLUMN columns and print columns down,\n                    unless -a is u" ; DATA XREF=usage+243
000000000000c360         db         "sed. Balance number of lines in the\n                    columns on each page\n", 0
000000000000c3ae         align      16
                     aAAcrossPrintCo:
000000000000c3b0         db         "  -a, --across      print columns across rather than down, used together\n                    with -COLUMN\n  -c, --show-control-chars\n                    use hat notation (^G) and octal backslash notation\n  -d, --double-space\n                    double spac" ; DATA XREF=usage+280
000000000000c4b0         db         "e the output\n", 0
000000000000c4be         align      64
                     aDDateformatfor:
000000000000c4c0         db         "  -D, --date-format=FORMAT\n                    use FORMAT for the header date\n  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]\n                    expand input CHARs (TABs) to tab WIDTH (8)\n  -F, -f, --form-feed\n                    use form feeds instead of " ; DATA XREF=usage+317
000000000000c5c0         db         "newlines to separate pages\n                    (by a 3-line page header with -F or a 5-line header\n                    and trailer without -F)\n", 0
                     aHHeaderheadern:
000000000000c650         db         "  -h, --header=HEADER\n                    use a centered HEADER instead of filename in page header,\n                    -h \"\" prints a blank line, don't use -h\"\"\n  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]\n                    replace spaces with CHARs (" ; DATA XREF=usage+354
000000000000c750         db         "TABs) to tab WIDTH (8)\n  -J, --join-lines  merge full lines, turns off -W line truncation, no column\n                    alignment, --sep-string[=STRING] sets separators\n", 0
000000000000c7fb         align      2048
                     aLLengthpagelen:
000000000000c800         db         "  -l, --length=PAGE_LENGTH\n                    set the page length to PAGE_LENGTH (66) lines\n                    (default number of lines of text 56, and with -F 63).\n                    implies -t if PAGE_LENGTH <= 10\n", 0 ; DATA XREF=usage+391
000000000000c8dc         align      32
                     aMMergePrintAll:
000000000000c8e0         db         "  -m, --merge       print all files in parallel, one in each column,\n                    truncate lines, but join lines of full length with -J\n", 0 ; DATA XREF=usage+428
                     aNsepdigitsNumb:
000000000000c970         db         "  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]\n                    number lines, use DIGITS (5) digits, then SEP (TAB),\n                    default counting starts with 1st line of input file\n  -N, --first-line-number=NUMBER\n                    start coun" ; DATA XREF=usage+465
000000000000ca70         db         "ting with NUMBER at 1st line of first\n                    page printed (see +FIRST_PAGE)\n", 0
000000000000caca         align      16
                     aOIndentmarginn:
000000000000cad0         db         "  -o, --indent=MARGIN\n                    offset each line with MARGIN (zero) spaces, do not\n                    affect -w or -W, MARGIN will be added to PAGE_WIDTH\n  -r, --no-file-warnings\n                    omit warning when a file cannot be opened\n", 0 ; DATA XREF=usage+502
000000000000cbcd         align      16
                     aScharSeparator:
000000000000cbd0         db         "  -s[CHAR], --separator[=CHAR]\n                    separate columns by a single character, default for CHAR\n                    is the <TAB> character without -w and 'no char' with -w.\n                    -s[CHAR] turns off line truncation of all 3 column\n" ; DATA XREF=usage+539
000000000000ccd0         db         "                    options (-COLUMN|-a -COLUMN|-m) except -w is set\n", 0
000000000000cd16         align      8
                     aSstringSepstri:
000000000000cd18         db         "  -S[STRING], --sep-string[=STRING]\n                    separate columns by STRING,\n                    without -S: Default separator <TAB> with -J and <space>\n                    otherwise (same as -S\" \"), no effect on column options\n", 0 ; DATA XREF=usage+576
000000000000ce04         align      8
                     aTOmitheaderOmi:
000000000000ce08         db         "  -t, --omit-header  omit page headers and trailers;\n                     implied if PAGE_LENGTH <= 10\n", 0 ; DATA XREF=usage+613
                     aTOmitpaginatio:
000000000000ce70         db         "  -T, --omit-pagination\n                    omit page headers and trailers, eliminate any pagination\n                    by form feeds set in input files\n  -v, --show-nonprinting\n                    use octal backslash notation\n  -w, --width=PAGE_WIDTH\n   " ; DATA XREF=usage+650
000000000000cf70         db         "                 set page width to PAGE_WIDTH (72) characters for\n                    multiple text-column output only, -s[char] turns off (72)\n", 0
000000000000d001         align      8
                     aWPagewidthpage:
000000000000d008         db         "  -W, --page-width=PAGE_WIDTH\n                    set page width to PAGE_WIDTH (72) characters always,\n                    truncate lines, except -J option is set, no interference\n                    with -S or -s\n", 0 ; DATA XREF=usage+687
000000000000d0df         align      32
                     aHelpDisplayThi:
000000000000d0e0         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+724
000000000000d10d         align      16
                     aVersionOutputV:
000000000000d110         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+761
000000000000d146         align      8
                     aHttpswwwgnuorg:
000000000000d148         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+1007, usage+1107, usage+1200, usage+1310, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000d170         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1351
000000000000d1b7         align      8
                     aOrAvailableLoc:
000000000000d1b8         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+1150
000000000000d1eb         align      16
                     aCExtraCharacte:
000000000000d1f0         db         "'-%c' extra characters or invalid number in the argument: %s", 0 ; DATA XREF=getoptarg+159
000000000000d22d         align      16
                     aPagesfirstpage:
000000000000d230         db         "'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument", 0 ; DATA XREF=main+2239
000000000000d262         align      8
                     aLPagelengthInv:
000000000000d268         db         "'-l PAGE_LENGTH' invalid number of lines", 0 ; DATA XREF=main+1226
000000000000d291         align      8
                     aNNumberInvalid:
000000000000d298         db         "'-N NUMBER' invalid starting line number", 0 ; DATA XREF=main+1641
000000000000d2c1         align      8
                     aOMarginInvalid:
000000000000d2c8         db         "'-o MARGIN' invalid line offset", 0        ; DATA XREF=main+1087
                     aWPagewidthInva:
000000000000d2e8         db         "'-w PAGE_WIDTH' invalid number of characters", 0 ; DATA XREF=main+878
000000000000d315         align      8
                     aWPagewidthInva_d318:        // aWPagewidthInva
000000000000d318         db         "'-W PAGE_WIDTH' invalid number of characters", 0 ; DATA XREF=main+1477
000000000000d345         align      8
                     aCannotSpecifyN:
000000000000d348         db         "cannot specify number of columns when printing in parallel", 0 ; DATA XREF=main+2334
000000000000d383         align      8
                     aCannotSpecifyB:
000000000000d388         db         "cannot specify both printing across and printing in parallel", 0 ; DATA XREF=main+2203
000000000000d3c5         align      32
                     switch_table_d3e0:        // switch_table
000000000000d3e0         dd         main.loc_26db-switch_table_d3e0, main.loc_284a-switch_table_d3e0, 130 dup (main.loc_2851-switch_table_d3e0), main.loc_26a6-switch_table_d3e0 ; switch table used at 0x20dd containing 261 entries, DATA XREF=main+160
000000000000d5f4         dd         66 dup (main.loc_2851-switch_table_d3e0), main.loc_2691-switch_table_d3e0, main.loc_2851-switch_table_d3e0, main.loc_2683-switch_table_d3e0
000000000000d708         dd         3 dup (main.loc_2851-switch_table_d3e0), main.loc_2675-switch_table_d3e0, 3 dup (main.loc_2851-switch_table_d3e0), main.loc_2629-switch_table_d3e0
000000000000d728         dd         4 dup (main.loc_2851-switch_table_d3e0), main.loc_25e9-switch_table_d3e0, main.loc_25d4-switch_table_d3e0, 2 dup (main.loc_2851-switch_table_d3e0)
000000000000d748         dd         main.loc_2585-switch_table_d3e0, 9 dup (main.loc_2851-switch_table_d3e0), main.loc_2570-switch_table_d3e0, main.loc_2562-switch_table_d3e0
000000000000d778         dd         main.loc_2554-switch_table_d3e0, main.loc_2546-switch_table_d3e0, main.loc_2514-switch_table_d3e0, main.loc_2683-switch_table_d3e0
000000000000d788         dd         main.loc_2851-switch_table_d3e0, main.loc_24ff-switch_table_d3e0, main.loc_24cd-switch_table_d3e0, 2 dup (main.loc_2851-switch_table_d3e0)
000000000000d79c         dd         main.loc_248a-switch_table_d3e0, main.loc_2475-switch_table_d3e0, main.loc_243f-switch_table_d3e0, main.loc_23ff-switch_table_d3e0
000000000000d7ac         dd         2 dup (main.loc_2851-switch_table_d3e0), main.loc_23f1-switch_table_d3e0, main.loc_23b4-switch_table_d3e0, main.loc_239f-switch_table_d3e0
000000000000d7c0         dd         main.loc_2851-switch_table_d3e0, main.loc_2391-switch_table_d3e0, main.loc_232e-switch_table_d3e0, 8 dup (main.loc_2851-switch_table_d3e0)
000000000000d7ec         dd         main.loc_2307-switch_table_d3e0, main.loc_22dd-switch_table_d3e0
000000000000d7f4         db  0x00 ; '.'
000000000000d7f5         db  0x00 ; '.'
000000000000d7f6         db  0x00 ; '.'
000000000000d7f7         db  0x00 ; '.'
000000000000d7f8         db  0x00 ; '.'
000000000000d7f9         db  0x00 ; '.'
000000000000d7fa         db  0x00 ; '.'
000000000000d7fb         db  0x00 ; '.'
000000000000d7fc         db  0x00 ; '.'
000000000000d7fd         db  0x00 ; '.'
000000000000d7fe         db  0x00 ; '.'
000000000000d7ff         db  0x00 ; '.'
                     short_options:
000000000000d800         db  0x2d ; '-'                                         ; DATA XREF=main+208
000000000000d801         db  0x30 ; '0'
000000000000d802         db  0x31 ; '1'
000000000000d803         db  0x32 ; '2'
000000000000d804         db  0x33 ; '3'
000000000000d805         db  0x34 ; '4'
000000000000d806         db  0x35 ; '5'
000000000000d807         db  0x36 ; '6'
000000000000d808         db  0x37 ; '7'
000000000000d809         db  0x38 ; '8'
000000000000d80a         db  0x39 ; '9'
000000000000d80b         db  0x44 ; 'D'
000000000000d80c         db  0x3a ; ':'
000000000000d80d         db  0x46 ; 'F'
000000000000d80e         db  0x4a ; 'J'
000000000000d80f         db  0x4e ; 'N'
000000000000d810         db  0x3a ; ':'
000000000000d811         db  0x53 ; 'S'
000000000000d812         db  0x3a ; ':'
000000000000d813         db  0x3a ; ':'
000000000000d814         db  0x54 ; 'T'
000000000000d815         db  0x57 ; 'W'
000000000000d816         db  0x3a ; ':'
000000000000d817         db  0x61 ; 'a'
000000000000d818         db  0x62 ; 'b'
000000000000d819         db  0x63 ; 'c'
000000000000d81a         db  0x64 ; 'd'
000000000000d81b         db  0x65 ; 'e'
000000000000d81c         db  0x3a ; ':'
000000000000d81d         db  0x3a ; ':'
000000000000d81e         db  0x66 ; 'f'
000000000000d81f         db  0x68 ; 'h'
000000000000d820         db  0x3a ; ':'
000000000000d821         db  0x69 ; 'i'
000000000000d822         db  0x3a ; ':'
000000000000d823         db  0x3a ; ':'
000000000000d824         db  0x6c ; 'l'
000000000000d825         db  0x3a ; ':'
000000000000d826         db  0x6d ; 'm'
000000000000d827         db  0x6e ; 'n'
000000000000d828         db  0x3a ; ':'
000000000000d829         db  0x3a ; ':'
000000000000d82a         db  0x6f ; 'o'
000000000000d82b         db  0x3a ; ':'
000000000000d82c         db  0x72 ; 'r'
000000000000d82d         db  0x73 ; 's'
000000000000d82e         db  0x3a ; ':'
000000000000d82f         db  0x3a ; ':'
000000000000d830         db  0x74 ; 't'
000000000000d831         db  0x76 ; 'v'
000000000000d832         db  0x77 ; 'w'
000000000000d833         db  0x3a ; ':'
000000000000d834         db  0x00 ; '.'
                     a831:
000000000000d835         db         "8.31", 0                                   ; DATA XREF=Version
                     aWriteError:
000000000000d83a         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aSS:
000000000000d846         db         "%s: %s", 0                                 ; DATA XREF=close_stdout+108, xnumtoimax+127
000000000000d84d         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000d84e         db  0x00 ; '.'
                     aPosix:
000000000000d84f         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aHms:
000000000000d855         db         "%H:%M:%S", 0                               ; DATA XREF=sub_6550+347
                     aYmd:
000000000000d85e         db         "%Y-%m-%d", 0                               ; DATA XREF=sub_6c10+1122, sub_76c9+422
                     aMdy:
000000000000d867         db         "%m/%d/%y", 0                               ; DATA XREF=sub_6c10+1070
000000000000d870         db  0x21 ; '!'                                         ; DATA XREF=__strftime_internal+509
000000000000d871         db  0x98 ; '.'
000000000000d872         db  0xff ; '.'
000000000000d873         db  0xff ; '.'
000000000000d874         db  0x80 ; '.'
000000000000d875         db  0x88 ; '.'
000000000000d876         db  0xff ; '.'
000000000000d877         db  0xff ; '.'
000000000000d878         db  0x80 ; '.'
000000000000d879         db  0x88 ; '.'
000000000000d87a         db  0xff ; '.'
000000000000d87b         db  0xff ; '.'
000000000000d87c         db  0x80 ; '.'
000000000000d87d         db  0x88 ; '.'
000000000000d87e         db  0xff ; '.'
000000000000d87f         db  0xff ; '.'
000000000000d880         db  0x80 ; '.'
000000000000d881         db  0x88 ; '.'
000000000000d882         db  0xff ; '.'
000000000000d883         db  0xff ; '.'
000000000000d884         db  0x80 ; '.'
000000000000d885         db  0x88 ; '.'
000000000000d886         db  0xff ; '.'
000000000000d887         db  0xff ; '.'
000000000000d888         db  0x80 ; '.'
000000000000d889         db  0x88 ; '.'
000000000000d88a         db  0xff ; '.'
000000000000d88b         db  0xff ; '.'
000000000000d88c         db  0x80 ; '.'
000000000000d88d         db  0x88 ; '.'
000000000000d88e         db  0xff ; '.'
000000000000d88f         db  0xff ; '.'
000000000000d890         db  0x80 ; '.'
000000000000d891         db  0x88 ; '.'
000000000000d892         db  0xff ; '.'
000000000000d893         db  0xff ; '.'
000000000000d894         db  0x80 ; '.'
000000000000d895         db  0x88 ; '.'
000000000000d896         db  0xff ; '.'
000000000000d897         db  0xff ; '.'
000000000000d898         db  0x80 ; '.'
000000000000d899         db  0x88 ; '.'
000000000000d89a         db  0xff ; '.'
000000000000d89b         db  0xff ; '.'
000000000000d89c         db  0x80 ; '.'
000000000000d89d         db  0x88 ; '.'
000000000000d89e         db  0xff ; '.'
000000000000d89f         db  0xff ; '.'
000000000000d8a0         db  0x80 ; '.'
000000000000d8a1         db  0x88 ; '.'
000000000000d8a2         db  0xff ; '.'
000000000000d8a3         db  0xff ; '.'
000000000000d8a4         db  0x80 ; '.'
000000000000d8a5         db  0x88 ; '.'
000000000000d8a6         db  0xff ; '.'
000000000000d8a7         db  0xff ; '.'
000000000000d8a8         db  0x80 ; '.'
000000000000d8a9         db  0x88 ; '.'
000000000000d8aa         db  0xff ; '.'
000000000000d8ab         db  0xff ; '.'
000000000000d8ac         db  0x80 ; '.'
000000000000d8ad         db  0x88 ; '.'
000000000000d8ae         db  0xff ; '.'
000000000000d8af         db  0xff ; '.'
000000000000d8b0         db  0x80 ; '.'
000000000000d8b1         db  0x88 ; '.'
000000000000d8b2         db  0xff ; '.'
000000000000d8b3         db  0xff ; '.'
000000000000d8b4         db  0x80 ; '.'
000000000000d8b5         db  0x88 ; '.'
000000000000d8b6         db  0xff ; '.'
000000000000d8b7         db  0xff ; '.'
000000000000d8b8         db  0x80 ; '.'
000000000000d8b9         db  0x88 ; '.'
000000000000d8ba         db  0xff ; '.'
000000000000d8bb         db  0xff ; '.'
000000000000d8bc         db  0x80 ; '.'
000000000000d8bd         db  0x88 ; '.'
000000000000d8be         db  0xff ; '.'
000000000000d8bf         db  0xff ; '.'
000000000000d8c0         db  0x80 ; '.'
000000000000d8c1         db  0x88 ; '.'
000000000000d8c2         db  0xff ; '.'
000000000000d8c3         db  0xff ; '.'
000000000000d8c4         db  0x80 ; '.'
000000000000d8c5         db  0x88 ; '.'
000000000000d8c6         db  0xff ; '.'
000000000000d8c7         db  0xff ; '.'
000000000000d8c8         db  0x80 ; '.'
000000000000d8c9         db  0x88 ; '.'
000000000000d8ca         db  0xff ; '.'
000000000000d8cb         db  0xff ; '.'
000000000000d8cc         db  0x80 ; '.'
000000000000d8cd         db  0x88 ; '.'
000000000000d8ce         db  0xff ; '.'
000000000000d8cf         db  0xff ; '.'
000000000000d8d0         db  0x80 ; '.'
000000000000d8d1         db  0x88 ; '.'
000000000000d8d2         db  0xff ; '.'
000000000000d8d3         db  0xff ; '.'
000000000000d8d4         db  0x80 ; '.'
000000000000d8d5         db  0x88 ; '.'
000000000000d8d6         db  0xff ; '.'
000000000000d8d7         db  0xff ; '.'
000000000000d8d8         db  0x80 ; '.'
000000000000d8d9         db  0x88 ; '.'
000000000000d8da         db  0xff ; '.'
000000000000d8db         db  0xff ; '.'
000000000000d8dc         db  0x80 ; '.'
000000000000d8dd         db  0x88 ; '.'
000000000000d8de         db  0xff ; '.'
000000000000d8df         db  0xff ; '.'
000000000000d8e0         db  0x80 ; '.'
000000000000d8e1         db  0x88 ; '.'
000000000000d8e2         db  0xff ; '.'
000000000000d8e3         db  0xff ; '.'
000000000000d8e4         db  0x80 ; '.'
000000000000d8e5         db  0x88 ; '.'
000000000000d8e6         db  0xff ; '.'
000000000000d8e7         db  0xff ; '.'
000000000000d8e8         db  0x80 ; '.'
000000000000d8e9         db  0x88 ; '.'
000000000000d8ea         db  0xff ; '.'
000000000000d8eb         db  0xff ; '.'
000000000000d8ec         db  0x80 ; '.'
000000000000d8ed         db  0x88 ; '.'
000000000000d8ee         db  0xff ; '.'
000000000000d8ef         db  0xff ; '.'
000000000000d8f0         db  0x80 ; '.'
000000000000d8f1         db  0x88 ; '.'
000000000000d8f2         db  0xff ; '.'
000000000000d8f3         db  0xff ; '.'
000000000000d8f4         db  0x80 ; '.'
000000000000d8f5         db  0x88 ; '.'
000000000000d8f6         db  0xff ; '.'
000000000000d8f7         db  0xff ; '.'
000000000000d8f8         db  0x80 ; '.'
000000000000d8f9         db  0x88 ; '.'
000000000000d8fa         db  0xff ; '.'
000000000000d8fb         db  0xff ; '.'
000000000000d8fc         db  0x80 ; '.'
000000000000d8fd         db  0x88 ; '.'
000000000000d8fe         db  0xff ; '.'
000000000000d8ff         db  0xff ; '.'
000000000000d900         db  0x80 ; '.'
000000000000d901         db  0x88 ; '.'
000000000000d902         db  0xff ; '.'
000000000000d903         db  0xff ; '.'
000000000000d904         db  0xae ; '.'
000000000000d905         db  0x8d ; '.'
000000000000d906         db  0xff ; '.'
000000000000d907         db  0xff ; '.'
000000000000d908         db  0x80 ; '.'
000000000000d909         db  0x88 ; '.'
000000000000d90a         db  0xff ; '.'
000000000000d90b         db  0xff ; '.'
000000000000d90c         db  0x80 ; '.'
000000000000d90d         db  0x88 ; '.'
000000000000d90e         db  0xff ; '.'
000000000000d90f         db  0xff ; '.'
000000000000d910         db  0x80 ; '.'
000000000000d911         db  0x88 ; '.'
000000000000d912         db  0xff ; '.'
000000000000d913         db  0xff ; '.'
000000000000d914         db  0x80 ; '.'
000000000000d915         db  0x88 ; '.'
000000000000d916         db  0xff ; '.'
000000000000d917         db  0xff ; '.'
000000000000d918         db  0x80 ; '.'
000000000000d919         db  0x88 ; '.'
000000000000d91a         db  0xff ; '.'
000000000000d91b         db  0xff ; '.'
000000000000d91c         db  0x80 ; '.'
000000000000d91d         db  0x88 ; '.'
000000000000d91e         db  0xff ; '.'
000000000000d91f         db  0xff ; '.'
000000000000d920         db  0x80 ; '.'
000000000000d921         db  0x88 ; '.'
000000000000d922         db  0xff ; '.'
000000000000d923         db  0xff ; '.'
000000000000d924         db  0x80 ; '.'
000000000000d925         db  0x88 ; '.'
000000000000d926         db  0xff ; '.'
000000000000d927         db  0xff ; '.'
000000000000d928         db  0x80 ; '.'
000000000000d929         db  0x88 ; '.'
000000000000d92a         db  0xff ; '.'
000000000000d92b         db  0xff ; '.'
000000000000d92c         db  0x80 ; '.'
000000000000d92d         db  0x88 ; '.'
000000000000d92e         db  0xff ; '.'
000000000000d92f         db  0xff ; '.'
000000000000d930         db  0x80 ; '.'
000000000000d931         db  0x88 ; '.'
000000000000d932         db  0xff ; '.'
000000000000d933         db  0xff ; '.'
000000000000d934         db  0x80 ; '.'
000000000000d935         db  0x88 ; '.'
000000000000d936         db  0xff ; '.'
000000000000d937         db  0xff ; '.'
000000000000d938         db  0x80 ; '.'
000000000000d939         db  0x88 ; '.'
000000000000d93a         db  0xff ; '.'
000000000000d93b         db  0xff ; '.'
000000000000d93c         db  0x80 ; '.'
000000000000d93d         db  0x88 ; '.'
000000000000d93e         db  0xff ; '.'
000000000000d93f         db  0xff ; '.'
000000000000d940         db  0x80 ; '.'
000000000000d941         db  0x88 ; '.'
000000000000d942         db  0xff ; '.'
000000000000d943         db  0xff ; '.'
000000000000d944         db  0x80 ; '.'
000000000000d945         db  0x88 ; '.'
000000000000d946         db  0xff ; '.'
000000000000d947         db  0xff ; '.'
000000000000d948         db  0x80 ; '.'
000000000000d949         db  0x88 ; '.'
000000000000d94a         db  0xff ; '.'
000000000000d94b         db  0xff ; '.'
000000000000d94c         db  0x80 ; '.'
000000000000d94d         db  0x88 ; '.'
000000000000d94e         db  0xff ; '.'
000000000000d94f         db  0xff ; '.'
000000000000d950         db  0x80 ; '.'
000000000000d951         db  0x88 ; '.'
000000000000d952         db  0xff ; '.'
000000000000d953         db  0xff ; '.'
000000000000d954         db  0x80 ; '.'
000000000000d955         db  0x88 ; '.'
000000000000d956         db  0xff ; '.'
000000000000d957         db  0xff ; '.'
000000000000d958         db  0xa7 ; '.'
000000000000d959         db  0x94 ; '.'
000000000000d95a         db  0xff ; '.'
000000000000d95b         db  0xff ; '.'
000000000000d95c         db  0x80 ; '.'
000000000000d95d         db  0x88 ; '.'
000000000000d95e         db  0xff ; '.'
000000000000d95f         db  0xff ; '.'
000000000000d960         db  0x80 ; '.'
000000000000d961         db  0x88 ; '.'
000000000000d962         db  0xff ; '.'
000000000000d963         db  0xff ; '.'
000000000000d964         db  0x80 ; '.'
000000000000d965         db  0x88 ; '.'
000000000000d966         db  0xff ; '.'
000000000000d967         db  0xff ; '.'
000000000000d968         db  0x80 ; '.'
000000000000d969         db  0x88 ; '.'
000000000000d96a         db  0xff ; '.'
000000000000d96b         db  0xff ; '.'
000000000000d96c         db  0x80 ; '.'
000000000000d96d         db  0x88 ; '.'
000000000000d96e         db  0xff ; '.'
000000000000d96f         db  0xff ; '.'
000000000000d970         db  0x80 ; '.'
000000000000d971         db  0x88 ; '.'
000000000000d972         db  0xff ; '.'
000000000000d973         db  0xff ; '.'
000000000000d974         db  0x36 ; '6'
000000000000d975         db  0x8b ; '.'
000000000000d976         db  0xff ; '.'
000000000000d977         db  0xff ; '.'
000000000000d978         db  0x0e ; '.'
000000000000d979         db  0x97 ; '.'
000000000000d97a         db  0xff ; '.'
000000000000d97b         db  0xff ; '.'
000000000000d97c         db  0x2b ; '+'
000000000000d97d         db  0x97 ; '.'
000000000000d97e         db  0xff ; '.'
000000000000d97f         db  0xff ; '.'
000000000000d980         db  0xc5 ; '.'
000000000000d981         db  0x97 ; '.'
000000000000d982         db  0xff ; '.'
000000000000d983         db  0xff ; '.'
000000000000d984         db  0x80 ; '.'
000000000000d985         db  0x88 ; '.'
000000000000d986         db  0xff ; '.'
000000000000d987         db  0xff ; '.'
000000000000d988         db  0xe7 ; '.'
000000000000d989         db  0x97 ; '.'
000000000000d98a         db  0xff ; '.'
000000000000d98b         db  0xff ; '.'
000000000000d98c         db  0xcd ; '.'
000000000000d98d         db  0x94 ; '.'
000000000000d98e         db  0xff ; '.'
000000000000d98f         db  0xff ; '.'
000000000000d990         db  0x62 ; 'b'
000000000000d991         db  0x98 ; '.'
000000000000d992         db  0xff ; '.'
000000000000d993         db  0xff ; '.'
000000000000d994         db  0xde ; '.'
000000000000d995         db  0x98 ; '.'
000000000000d996         db  0xff ; '.'
000000000000d997         db  0xff ; '.'
000000000000d998         db  0x80 ; '.'
000000000000d999         db  0x88 ; '.'
000000000000d99a         db  0xff ; '.'
000000000000d99b         db  0xff ; '.'
000000000000d99c         db  0x80 ; '.'
000000000000d99d         db  0x88 ; '.'
000000000000d99e         db  0xff ; '.'
000000000000d99f         db  0xff ; '.'
000000000000d9a0         db  0x80 ; '.'
000000000000d9a1         db  0x88 ; '.'
000000000000d9a2         db  0xff ; '.'
000000000000d9a3         db  0xff ; '.'
000000000000d9a4         db  0x7a ; 'z'
000000000000d9a5         db  0x98 ; '.'
000000000000d9a6         db  0xff ; '.'
000000000000d9a7         db  0xff ; '.'
000000000000d9a8         db  0x92 ; '.'
000000000000d9a9         db  0x98 ; '.'
000000000000d9aa         db  0xff ; '.'
000000000000d9ab         db  0xff ; '.'
000000000000d9ac         db  0x80 ; '.'
000000000000d9ad         db  0x88 ; '.'
000000000000d9ae         db  0xff ; '.'
000000000000d9af         db  0xff ; '.'
000000000000d9b0         db  0x73 ; 's'
000000000000d9b1         db  0x8c ; '.'
000000000000d9b2         db  0xff ; '.'
000000000000d9b3         db  0xff ; '.'
000000000000d9b4         db  0x80 ; '.'
000000000000d9b5         db  0x88 ; '.'
000000000000d9b6         db  0xff ; '.'
000000000000d9b7         db  0xff ; '.'
000000000000d9b8         db  0x8e ; '.'
000000000000d9b9         db  0x8c ; '.'
000000000000d9ba         db  0xff ; '.'
000000000000d9bb         db  0xff ; '.'
000000000000d9bc         db  0x76 ; 'v'
000000000000d9bd         db  0x8b ; '.'
000000000000d9be         db  0xff ; '.'
000000000000d9bf         db  0xff ; '.'
000000000000d9c0         db  0x3b ; ';'
000000000000d9c1         db  0x8e ; '.'
000000000000d9c2         db  0xff ; '.'
000000000000d9c3         db  0xff ; '.'
000000000000d9c4         db  0x54 ; 'T'
000000000000d9c5         db  0x8e ; '.'
000000000000d9c6         db  0xff ; '.'
000000000000d9c7         db  0xff ; '.'
000000000000d9c8         db  0xcd ; '.'
000000000000d9c9         db  0x94 ; '.'
000000000000d9ca         db  0xff ; '.'
000000000000d9cb         db  0xff ; '.'
000000000000d9cc         db  0xc9 ; '.'
000000000000d9cd         db  0x96 ; '.'
000000000000d9ce         db  0xff ; '.'
000000000000d9cf         db  0xff ; '.'
000000000000d9d0         db  0xe8 ; '.'
000000000000d9d1         db  0x89 ; '.'
000000000000d9d2         db  0xff ; '.'
000000000000d9d3         db  0xff ; '.'
000000000000d9d4         db  0x87 ; '.'
000000000000d9d5         db  0x8e ; '.'
000000000000d9d6         db  0xff ; '.'
000000000000d9d7         db  0xff ; '.'
000000000000d9d8         db  0xe0 ; '.'
000000000000d9d9         db  0x8e ; '.'
000000000000d9da         db  0xff ; '.'
000000000000d9db         db  0xff ; '.'
000000000000d9dc         db  0x80 ; '.'
000000000000d9dd         db  0x88 ; '.'
000000000000d9de         db  0xff ; '.'
000000000000d9df         db  0xff ; '.'
000000000000d9e0         db  0x80 ; '.'
000000000000d9e1         db  0x88 ; '.'
000000000000d9e2         db  0xff ; '.'
000000000000d9e3         db  0xff ; '.'
000000000000d9e4         db  0x80 ; '.'
000000000000d9e5         db  0x88 ; '.'
000000000000d9e6         db  0xff ; '.'
000000000000d9e7         db  0xff ; '.'
000000000000d9e8         db  0x80 ; '.'
000000000000d9e9         db  0x88 ; '.'
000000000000d9ea         db  0xff ; '.'
000000000000d9eb         db  0xff ; '.'
000000000000d9ec         db  0x80 ; '.'
000000000000d9ed         db  0x88 ; '.'
000000000000d9ee         db  0xff ; '.'
000000000000d9ef         db  0xff ; '.'
000000000000d9f0         db  0x80 ; '.'
000000000000d9f1         db  0x88 ; '.'
000000000000d9f2         db  0xff ; '.'
000000000000d9f3         db  0xff ; '.'
000000000000d9f4         db  0x36 ; '6'
000000000000d9f5         db  0x8b ; '.'
000000000000d9f6         db  0xff ; '.'
000000000000d9f7         db  0xff ; '.'
000000000000d9f8         db  0x37 ; '7'
000000000000d9f9         db  0x90 ; '.'
000000000000d9fa         db  0xff ; '.'
000000000000d9fb         db  0xff ; '.'
000000000000d9fc         db  0xe8 ; '.'
000000000000d9fd         db  0x89 ; '.'
000000000000d9fe         db  0xff ; '.'
000000000000d9ff         db  0xff ; '.'
000000000000da00         db  0x64 ; 'd'
000000000000da01         db  0x96 ; '.'
000000000000da02         db  0xff ; '.'
000000000000da03         db  0xff ; '.'
000000000000da04         db  0x19 ; '.'
000000000000da05         db  0x9a ; '.'
000000000000da06         db  0xff ; '.'
000000000000da07         db  0xff ; '.'
000000000000da08         db  0x80 ; '.'
000000000000da09         db  0x88 ; '.'
000000000000da0a         db  0xff ; '.'
000000000000da0b         db  0xff ; '.'
000000000000da0c         db  0xcd ; '.'
000000000000da0d         db  0x94 ; '.'
000000000000da0e         db  0xff ; '.'
000000000000da0f         db  0xff ; '.'
000000000000da10         db  0x37 ; '7'
000000000000da11         db  0x90 ; '.'
000000000000da12         db  0xff ; '.'
000000000000da13         db  0xff ; '.'
000000000000da14         db  0x80 ; '.'
000000000000da15         db  0x88 ; '.'
000000000000da16         db  0xff ; '.'
000000000000da17         db  0xff ; '.'
000000000000da18         db  0xd6 ; '.'
000000000000da19         db  0x99 ; '.'
000000000000da1a         db  0xff ; '.'
000000000000da1b         db  0xff ; '.'
000000000000da1c         db  0x06 ; '.'
000000000000da1d         db  0x9a ; '.'
000000000000da1e         db  0xff ; '.'
000000000000da1f         db  0xff ; '.'
000000000000da20         db  0xf6 ; '.'
000000000000da21         db  0x98 ; '.'
000000000000da22         db  0xff ; '.'
000000000000da23         db  0xff ; '.'
000000000000da24         db  0x1d ; '.'
000000000000da25         db  0x99 ; '.'
000000000000da26         db  0xff ; '.'
000000000000da27         db  0xff ; '.'
000000000000da28         db  0x4d ; 'M'
000000000000da29         db  0x99 ; '.'
000000000000da2a         db  0xff ; '.'
000000000000da2b         db  0xff ; '.'
000000000000da2c         db  0x80 ; '.'
000000000000da2d         db  0x88 ; '.'
000000000000da2e         db  0xff ; '.'
000000000000da2f         db  0xff ; '.'
000000000000da30         db  0xcf ; '.'
000000000000da31         db  0x99 ; '.'
000000000000da32         db  0xff ; '.'
000000000000da33         db  0xff ; '.'
000000000000da34         db  0x30 ; '0'
000000000000da35         db  0x91 ; '.'
000000000000da36         db  0xff ; '.'
000000000000da37         db  0xff ; '.'
000000000000da38         db  0xf2 ; '.'
000000000000da39         db  0x89 ; '.'
000000000000da3a         db  0xff ; '.'
000000000000da3b         db  0xff ; '.'
000000000000da3c         db  0xa0 ; '.'
000000000000da3d         db  0x93 ; '.'
000000000000da3e         db  0xff ; '.'
000000000000da3f         db  0xff ; '.'
000000000000da40         db  0xeb ; '.'
000000000000da41         db  0x8b ; '.'
000000000000da42         db  0xff ; '.'
000000000000da43         db  0xff ; '.'
000000000000da44         db  0x7c ; '|'
000000000000da45         db  0x96 ; '.'
000000000000da46         db  0xff ; '.'
000000000000da47         db  0xff ; '.'
000000000000da48         db  0x80 ; '.'
000000000000da49         db  0x88 ; '.'
000000000000da4a         db  0xff ; '.'
000000000000da4b         db  0xff ; '.'
000000000000da4c         db  0xb1 ; '.'
000000000000da4d         db  0x96 ; '.'
000000000000da4e         db  0xff ; '.'
000000000000da4f         db  0xff ; '.'
000000000000da50         db  0xe8 ; '.'
000000000000da51         db  0x89 ; '.'
000000000000da52         db  0xff ; '.'
000000000000da53         db  0xff ; '.'
000000000000da54         db  0xcd ; '.'
000000000000da55         db  0x8f ; '.'
000000000000da56         db  0xff ; '.'
000000000000da57         db  0xff ; '.'
000000000000da58         db  0x5c ; '\'
000000000000da59         db  0x90 ; '.'
000000000000da5a         db  0xff ; '.'
000000000000da5b         db  0xff ; '.'
000000000000da5c         db  0x00 ; '.'
000000000000da5d         db  0x00 ; '.'
000000000000da5e         db  0x00 ; '.'
000000000000da5f         db  0x00 ; '.'
                     aANullArgv0WasP:
000000000000da60         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000da98         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000daa0         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000daa1         db  0x74 ; 't'
000000000000daa2         db  0x2d ; '-'
000000000000daa3         db  0x00 ; '.'
000000000000daa4         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000daa5         db  0x80 ; '.'
000000000000daa6         db  0x98 ; '.'
000000000000daa7         db  0x00 ; '.'
000000000000daa8         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000daa9         db  0x80 ; '.'
000000000000daaa         db  0x99 ; '.'
000000000000daab         db  0x00 ; '.'
000000000000daac         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000daad         db  0x07 ; '.'
000000000000daae         db  0x65 ; 'e'
000000000000daaf         db  0x00 ; '.'
000000000000dab0         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000dab1         db  0xaf ; '.'
000000000000dab2         db  0x00 ; '.'
000000000000dab3         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_8280+1451, sub_8280+1493, sub_8280+2429
000000000000dab4         db  0x00 ; '.'
000000000000dab5         db  0x60 ; '`'                                         ; DATA XREF=sub_8280+1627, sub_8280+1654
000000000000dab6         db  0x00 ; '.'
                     aLiteral:
000000000000dab7         db         "literal", 0
                     aShell:
000000000000dabf         db         "shell", 0
                     aShellalways:
000000000000dac5         db         "shell-always", 0
000000000000dad2         db  0x73 ; 's'
000000000000dad3         db  0x68 ; 'h'
000000000000dad4         db  0x65 ; 'e'
000000000000dad5         db  0x6c ; 'l'
000000000000dad6         db  0x6c ; 'l'
000000000000dad7         db  0x2d ; '-'
                     aEscape:
000000000000dad8         db         "escape", 0
                     aShellescapealw:
000000000000dadf         db         "shell-escape-always", 0
000000000000daf3         db  0x63 ; 'c'
000000000000daf4         db  0x00 ; '.'
                     aCmaybe:
000000000000daf5         db         "c-maybe", 0
                     aClocale:
000000000000dafd         db         "clocale", 0
000000000000db05         align      32
                     switch_table_db20:        // switch_table
000000000000db20         dd         quotearg_buffer_restyled.loc_897a-switch_table_db20, quotearg_buffer_restyled.loc_7bd3-switch_table_db20, quotearg_buffer_restyled.loc_8ba8-switch_table_db20, quotearg_buffer_restyled.loc_89b4-switch_table_db20 ; switch table used at 0x7bd1 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000db30         dd         quotearg_buffer_restyled.loc_87a4-switch_table_db20, quotearg_buffer_restyled.loc_8800-switch_table_db20, quotearg_buffer_restyled.loc_8855-switch_table_db20, quotearg_buffer_restyled.loc_889a-switch_table_db20
000000000000db40         dd         3 dup (quotearg_buffer_restyled.loc_88d4-switch_table_db20)
000000000000db4c         db  0x04 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000db4d         db  0xa4 ; '.'
000000000000db4e         db  0xff ; '.'
000000000000db4f         db  0xff ; '.'
000000000000db50         db  0xec ; '.'
000000000000db51         db  0xa4 ; '.'
000000000000db52         db  0xff ; '.'
000000000000db53         db  0xff ; '.'
000000000000db54         db  0xec ; '.'
000000000000db55         db  0xa4 ; '.'
000000000000db56         db  0xff ; '.'
000000000000db57         db  0xff ; '.'
000000000000db58         db  0xec ; '.'
000000000000db59         db  0xa4 ; '.'
000000000000db5a         db  0xff ; '.'
000000000000db5b         db  0xff ; '.'
000000000000db5c         db  0xec ; '.'
000000000000db5d         db  0xa4 ; '.'
000000000000db5e         db  0xff ; '.'
000000000000db5f         db  0xff ; '.'
000000000000db60         db  0xec ; '.'
000000000000db61         db  0xa4 ; '.'
000000000000db62         db  0xff ; '.'
000000000000db63         db  0xff ; '.'
000000000000db64         db  0xec ; '.'
000000000000db65         db  0xa4 ; '.'
000000000000db66         db  0xff ; '.'
000000000000db67         db  0xff ; '.'
000000000000db68         db  0x44 ; 'D'
000000000000db69         db  0xa4 ; '.'
000000000000db6a         db  0xff ; '.'
000000000000db6b         db  0xff ; '.'
000000000000db6c         db  0x4c ; 'L'
000000000000db6d         db  0xa3 ; '.'
000000000000db6e         db  0xff ; '.'
000000000000db6f         db  0xff ; '.'
000000000000db70         db  0x0c ; '.'
000000000000db71         db  0xa3 ; '.'
000000000000db72         db  0xff ; '.'
000000000000db73         db  0xff ; '.'
000000000000db74         db  0xd4 ; '.'
000000000000db75         db  0xa4 ; '.'
000000000000db76         db  0xff ; '.'
000000000000db77         db  0xff ; '.'
000000000000db78         db  0xc4 ; '.'
000000000000db79         db  0xa4 ; '.'
000000000000db7a         db  0xff ; '.'
000000000000db7b         db  0xff ; '.'
000000000000db7c         db  0xb4 ; '.'
000000000000db7d         db  0xa4 ; '.'
000000000000db7e         db  0xff ; '.'
000000000000db7f         db  0xff ; '.'
000000000000db80         db  0xa4 ; '.'
000000000000db81         db  0xa4 ; '.'
000000000000db82         db  0xff ; '.'
000000000000db83         db  0xff ; '.'
000000000000db84         db  0xec ; '.'
000000000000db85         db  0xa4 ; '.'
000000000000db86         db  0xff ; '.'
000000000000db87         db  0xff ; '.'
000000000000db88         db  0xec ; '.'
000000000000db89         db  0xa4 ; '.'
000000000000db8a         db  0xff ; '.'
000000000000db8b         db  0xff ; '.'
000000000000db8c         db  0xec ; '.'
000000000000db8d         db  0xa4 ; '.'
000000000000db8e         db  0xff ; '.'
000000000000db8f         db  0xff ; '.'
000000000000db90         db  0xec ; '.'
000000000000db91         db  0xa4 ; '.'
000000000000db92         db  0xff ; '.'
000000000000db93         db  0xff ; '.'
000000000000db94         db  0xec ; '.'
000000000000db95         db  0xa4 ; '.'
000000000000db96         db  0xff ; '.'
000000000000db97         db  0xff ; '.'
000000000000db98         db  0xec ; '.'
000000000000db99         db  0xa4 ; '.'
000000000000db9a         db  0xff ; '.'
000000000000db9b         db  0xff ; '.'
000000000000db9c         db  0xec ; '.'
000000000000db9d         db  0xa4 ; '.'
000000000000db9e         db  0xff ; '.'
000000000000db9f         db  0xff ; '.'
000000000000dba0         db  0xec ; '.'
000000000000dba1         db  0xa4 ; '.'
000000000000dba2         db  0xff ; '.'
000000000000dba3         db  0xff ; '.'
000000000000dba4         db  0xec ; '.'
000000000000dba5         db  0xa4 ; '.'
000000000000dba6         db  0xff ; '.'
000000000000dba7         db  0xff ; '.'
000000000000dba8         db  0xec ; '.'
000000000000dba9         db  0xa4 ; '.'
000000000000dbaa         db  0xff ; '.'
000000000000dbab         db  0xff ; '.'
000000000000dbac         db  0xec ; '.'
000000000000dbad         db  0xa4 ; '.'
000000000000dbae         db  0xff ; '.'
000000000000dbaf         db  0xff ; '.'
000000000000dbb0         db  0xec ; '.'
000000000000dbb1         db  0xa4 ; '.'
000000000000dbb2         db  0xff ; '.'
000000000000dbb3         db  0xff ; '.'
000000000000dbb4         db  0xec ; '.'
000000000000dbb5         db  0xa4 ; '.'
000000000000dbb6         db  0xff ; '.'
000000000000dbb7         db  0xff ; '.'
000000000000dbb8         db  0xec ; '.'
000000000000dbb9         db  0xa4 ; '.'
000000000000dbba         db  0xff ; '.'
000000000000dbbb         db  0xff ; '.'
000000000000dbbc         db  0xec ; '.'
000000000000dbbd         db  0xa4 ; '.'
000000000000dbbe         db  0xff ; '.'
000000000000dbbf         db  0xff ; '.'
000000000000dbc0         db  0xec ; '.'
000000000000dbc1         db  0xa4 ; '.'
000000000000dbc2         db  0xff ; '.'
000000000000dbc3         db  0xff ; '.'
000000000000dbc4         db  0xec ; '.'
000000000000dbc5         db  0xa4 ; '.'
000000000000dbc6         db  0xff ; '.'
000000000000dbc7         db  0xff ; '.'
000000000000dbc8         db  0xec ; '.'
000000000000dbc9         db  0xa4 ; '.'
000000000000dbca         db  0xff ; '.'
000000000000dbcb         db  0xff ; '.'
000000000000dbcc         db  0x94 ; '.'
000000000000dbcd         db  0xa4 ; '.'
000000000000dbce         db  0xff ; '.'
000000000000dbcf         db  0xff ; '.'
000000000000dbd0         db  0x84 ; '.'
000000000000dbd1         db  0xa4 ; '.'
000000000000dbd2         db  0xff ; '.'
000000000000dbd3         db  0xff ; '.'
000000000000dbd4         db  0x84 ; '.'
000000000000dbd5         db  0xa4 ; '.'
000000000000dbd6         db  0xff ; '.'
000000000000dbd7         db  0xff ; '.'
000000000000dbd8         db  0x54 ; 'T'
000000000000dbd9         db  0xa4 ; '.'
000000000000dbda         db  0xff ; '.'
000000000000dbdb         db  0xff ; '.'
000000000000dbdc         db  0x84 ; '.'
000000000000dbdd         db  0xa4 ; '.'
000000000000dbde         db  0xff ; '.'
000000000000dbdf         db  0xff ; '.'
000000000000dbe0         db  0x2c ; ','
000000000000dbe1         db  0xa4 ; '.'
000000000000dbe2         db  0xff ; '.'
000000000000dbe3         db  0xff ; '.'
000000000000dbe4         db  0x84 ; '.'
000000000000dbe5         db  0xa4 ; '.'
000000000000dbe6         db  0xff ; '.'
000000000000dbe7         db  0xff ; '.'
000000000000dbe8         db  0xe7 ; '.'
000000000000dbe9         db  0xa2 ; '.'
000000000000dbea         db  0xff ; '.'
000000000000dbeb         db  0xff ; '.'
000000000000dbec         db  0x84 ; '.'
000000000000dbed         db  0xa4 ; '.'
000000000000dbee         db  0xff ; '.'
000000000000dbef         db  0xff ; '.'
000000000000dbf0         db  0x84 ; '.'
000000000000dbf1         db  0xa4 ; '.'
000000000000dbf2         db  0xff ; '.'
000000000000dbf3         db  0xff ; '.'
000000000000dbf4         db  0x84 ; '.'
000000000000dbf5         db  0xa4 ; '.'
000000000000dbf6         db  0xff ; '.'
000000000000dbf7         db  0xff ; '.'
000000000000dbf8         db  0x2c ; ','
000000000000dbf9         db  0xa4 ; '.'
000000000000dbfa         db  0xff ; '.'
000000000000dbfb         db  0xff ; '.'
000000000000dbfc         db  0x2c ; ','
000000000000dbfd         db  0xa4 ; '.'
000000000000dbfe         db  0xff ; '.'
000000000000dbff         db  0xff ; '.'
000000000000dc00         db  0x2c ; ','
000000000000dc01         db  0xa4 ; '.'
000000000000dc02         db  0xff ; '.'
000000000000dc03         db  0xff ; '.'
000000000000dc04         db  0x2c ; ','
000000000000dc05         db  0xa4 ; '.'
000000000000dc06         db  0xff ; '.'
000000000000dc07         db  0xff ; '.'
000000000000dc08         db  0x2c ; ','
000000000000dc09         db  0xa4 ; '.'
000000000000dc0a         db  0xff ; '.'
000000000000dc0b         db  0xff ; '.'
000000000000dc0c         db  0x2c ; ','
000000000000dc0d         db  0xa4 ; '.'
000000000000dc0e         db  0xff ; '.'
000000000000dc0f         db  0xff ; '.'
000000000000dc10         db  0x2c ; ','
000000000000dc11         db  0xa4 ; '.'
000000000000dc12         db  0xff ; '.'
000000000000dc13         db  0xff ; '.'
000000000000dc14         db  0x2c ; ','
000000000000dc15         db  0xa4 ; '.'
000000000000dc16         db  0xff ; '.'
000000000000dc17         db  0xff ; '.'
000000000000dc18         db  0x2c ; ','
000000000000dc19         db  0xa4 ; '.'
000000000000dc1a         db  0xff ; '.'
000000000000dc1b         db  0xff ; '.'
000000000000dc1c         db  0x2c ; ','
000000000000dc1d         db  0xa4 ; '.'
000000000000dc1e         db  0xff ; '.'
000000000000dc1f         db  0xff ; '.'
000000000000dc20         db  0x2c ; ','
000000000000dc21         db  0xa4 ; '.'
000000000000dc22         db  0xff ; '.'
000000000000dc23         db  0xff ; '.'
000000000000dc24         db  0x2c ; ','
000000000000dc25         db  0xa4 ; '.'
000000000000dc26         db  0xff ; '.'
000000000000dc27         db  0xff ; '.'
000000000000dc28         db  0x2c ; ','
000000000000dc29         db  0xa4 ; '.'
000000000000dc2a         db  0xff ; '.'
000000000000dc2b         db  0xff ; '.'
000000000000dc2c         db  0x2c ; ','
000000000000dc2d         db  0xa4 ; '.'
000000000000dc2e         db  0xff ; '.'
000000000000dc2f         db  0xff ; '.'
000000000000dc30         db  0x2c ; ','
000000000000dc31         db  0xa4 ; '.'
000000000000dc32         db  0xff ; '.'
000000000000dc33         db  0xff ; '.'
000000000000dc34         db  0x2c ; ','
000000000000dc35         db  0xa4 ; '.'
000000000000dc36         db  0xff ; '.'
000000000000dc37         db  0xff ; '.'
000000000000dc38         db  0x84 ; '.'
000000000000dc39         db  0xa4 ; '.'
000000000000dc3a         db  0xff ; '.'
000000000000dc3b         db  0xff ; '.'
000000000000dc3c         db  0x84 ; '.'
000000000000dc3d         db  0xa4 ; '.'
000000000000dc3e         db  0xff ; '.'
000000000000dc3f         db  0xff ; '.'
000000000000dc40         db  0x84 ; '.'
000000000000dc41         db  0xa4 ; '.'
000000000000dc42         db  0xff ; '.'
000000000000dc43         db  0xff ; '.'
000000000000dc44         db  0x84 ; '.'
000000000000dc45         db  0xa4 ; '.'
000000000000dc46         db  0xff ; '.'
000000000000dc47         db  0xff ; '.'
000000000000dc48         db  0xb7 ; '.'
000000000000dc49         db  0xa2 ; '.'
000000000000dc4a         db  0xff ; '.'
000000000000dc4b         db  0xff ; '.'
000000000000dc4c         db  0xec ; '.'
000000000000dc4d         db  0xa4 ; '.'
000000000000dc4e         db  0xff ; '.'
000000000000dc4f         db  0xff ; '.'
000000000000dc50         db  0x2c ; ','
000000000000dc51         db  0xa4 ; '.'
000000000000dc52         db  0xff ; '.'
000000000000dc53         db  0xff ; '.'
000000000000dc54         db  0x2c ; ','
000000000000dc55         db  0xa4 ; '.'
000000000000dc56         db  0xff ; '.'
000000000000dc57         db  0xff ; '.'
000000000000dc58         db  0x2c ; ','
000000000000dc59         db  0xa4 ; '.'
000000000000dc5a         db  0xff ; '.'
000000000000dc5b         db  0xff ; '.'
000000000000dc5c         db  0x2c ; ','
000000000000dc5d         db  0xa4 ; '.'
000000000000dc5e         db  0xff ; '.'
000000000000dc5f         db  0xff ; '.'
000000000000dc60         db  0x2c ; ','
000000000000dc61         db  0xa4 ; '.'
000000000000dc62         db  0xff ; '.'
000000000000dc63         db  0xff ; '.'
000000000000dc64         db  0x2c ; ','
000000000000dc65         db  0xa4 ; '.'
000000000000dc66         db  0xff ; '.'
000000000000dc67         db  0xff ; '.'
000000000000dc68         db  0x2c ; ','
000000000000dc69         db  0xa4 ; '.'
000000000000dc6a         db  0xff ; '.'
000000000000dc6b         db  0xff ; '.'
000000000000dc6c         db  0x2c ; ','
000000000000dc6d         db  0xa4 ; '.'
000000000000dc6e         db  0xff ; '.'
000000000000dc6f         db  0xff ; '.'
000000000000dc70         db  0x2c ; ','
000000000000dc71         db  0xa4 ; '.'
000000000000dc72         db  0xff ; '.'
000000000000dc73         db  0xff ; '.'
000000000000dc74         db  0x2c ; ','
000000000000dc75         db  0xa4 ; '.'
000000000000dc76         db  0xff ; '.'
000000000000dc77         db  0xff ; '.'
000000000000dc78         db  0x2c ; ','
000000000000dc79         db  0xa4 ; '.'
000000000000dc7a         db  0xff ; '.'
000000000000dc7b         db  0xff ; '.'
000000000000dc7c         db  0x2c ; ','
000000000000dc7d         db  0xa4 ; '.'
000000000000dc7e         db  0xff ; '.'
000000000000dc7f         db  0xff ; '.'
000000000000dc80         db  0x2c ; ','
000000000000dc81         db  0xa4 ; '.'
000000000000dc82         db  0xff ; '.'
000000000000dc83         db  0xff ; '.'
000000000000dc84         db  0x2c ; ','
000000000000dc85         db  0xa4 ; '.'
000000000000dc86         db  0xff ; '.'
000000000000dc87         db  0xff ; '.'
000000000000dc88         db  0x2c ; ','
000000000000dc89         db  0xa4 ; '.'
000000000000dc8a         db  0xff ; '.'
000000000000dc8b         db  0xff ; '.'
000000000000dc8c         db  0x2c ; ','
000000000000dc8d         db  0xa4 ; '.'
000000000000dc8e         db  0xff ; '.'
000000000000dc8f         db  0xff ; '.'
000000000000dc90         db  0x2c ; ','
000000000000dc91         db  0xa4 ; '.'
000000000000dc92         db  0xff ; '.'
000000000000dc93         db  0xff ; '.'
000000000000dc94         db  0x2c ; ','
000000000000dc95         db  0xa4 ; '.'
000000000000dc96         db  0xff ; '.'
000000000000dc97         db  0xff ; '.'
000000000000dc98         db  0x2c ; ','
000000000000dc99         db  0xa4 ; '.'
000000000000dc9a         db  0xff ; '.'
000000000000dc9b         db  0xff ; '.'
000000000000dc9c         db  0x2c ; ','
000000000000dc9d         db  0xa4 ; '.'
000000000000dc9e         db  0xff ; '.'
000000000000dc9f         db  0xff ; '.'
000000000000dca0         db  0x2c ; ','
000000000000dca1         db  0xa4 ; '.'
000000000000dca2         db  0xff ; '.'
000000000000dca3         db  0xff ; '.'
000000000000dca4         db  0x2c ; ','
000000000000dca5         db  0xa4 ; '.'
000000000000dca6         db  0xff ; '.'
000000000000dca7         db  0xff ; '.'
000000000000dca8         db  0x2c ; ','
000000000000dca9         db  0xa4 ; '.'
000000000000dcaa         db  0xff ; '.'
000000000000dcab         db  0xff ; '.'
000000000000dcac         db  0x2c ; ','
000000000000dcad         db  0xa4 ; '.'
000000000000dcae         db  0xff ; '.'
000000000000dcaf         db  0xff ; '.'
000000000000dcb0         db  0x2c ; ','
000000000000dcb1         db  0xa4 ; '.'
000000000000dcb2         db  0xff ; '.'
000000000000dcb3         db  0xff ; '.'
000000000000dcb4         db  0x2c ; ','
000000000000dcb5         db  0xa4 ; '.'
000000000000dcb6         db  0xff ; '.'
000000000000dcb7         db  0xff ; '.'
000000000000dcb8         db  0x84 ; '.'
000000000000dcb9         db  0xa4 ; '.'
000000000000dcba         db  0xff ; '.'
000000000000dcbb         db  0xff ; '.'
000000000000dcbc         db  0x5c ; '\'
000000000000dcbd         db  0xa3 ; '.'
000000000000dcbe         db  0xff ; '.'
000000000000dcbf         db  0xff ; '.'
000000000000dcc0         db  0x2c ; ','
000000000000dcc1         db  0xa4 ; '.'
000000000000dcc2         db  0xff ; '.'
000000000000dcc3         db  0xff ; '.'
000000000000dcc4         db  0x84 ; '.'
000000000000dcc5         db  0xa4 ; '.'
000000000000dcc6         db  0xff ; '.'
000000000000dcc7         db  0xff ; '.'
000000000000dcc8         db  0x2c ; ','
000000000000dcc9         db  0xa4 ; '.'
000000000000dcca         db  0xff ; '.'
000000000000dccb         db  0xff ; '.'
000000000000dccc         db  0x84 ; '.'
000000000000dccd         db  0xa4 ; '.'
000000000000dcce         db  0xff ; '.'
000000000000dccf         db  0xff ; '.'
000000000000dcd0         db  0x2c ; ','
000000000000dcd1         db  0xa4 ; '.'
000000000000dcd2         db  0xff ; '.'
000000000000dcd3         db  0xff ; '.'
000000000000dcd4         db  0x2c ; ','
000000000000dcd5         db  0xa4 ; '.'
000000000000dcd6         db  0xff ; '.'
000000000000dcd7         db  0xff ; '.'
000000000000dcd8         db  0x2c ; ','
000000000000dcd9         db  0xa4 ; '.'
000000000000dcda         db  0xff ; '.'
000000000000dcdb         db  0xff ; '.'
000000000000dcdc         db  0x2c ; ','
000000000000dcdd         db  0xa4 ; '.'
000000000000dcde         db  0xff ; '.'
000000000000dcdf         db  0xff ; '.'
000000000000dce0         db  0x2c ; ','
000000000000dce1         db  0xa4 ; '.'
000000000000dce2         db  0xff ; '.'
000000000000dce3         db  0xff ; '.'
000000000000dce4         db  0x2c ; ','
000000000000dce5         db  0xa4 ; '.'
000000000000dce6         db  0xff ; '.'
000000000000dce7         db  0xff ; '.'
000000000000dce8         db  0x2c ; ','
000000000000dce9         db  0xa4 ; '.'
000000000000dcea         db  0xff ; '.'
000000000000dceb         db  0xff ; '.'
000000000000dcec         db  0x2c ; ','
000000000000dced         db  0xa4 ; '.'
000000000000dcee         db  0xff ; '.'
000000000000dcef         db  0xff ; '.'
000000000000dcf0         db  0x2c ; ','
000000000000dcf1         db  0xa4 ; '.'
000000000000dcf2         db  0xff ; '.'
000000000000dcf3         db  0xff ; '.'
000000000000dcf4         db  0x2c ; ','
000000000000dcf5         db  0xa4 ; '.'
000000000000dcf6         db  0xff ; '.'
000000000000dcf7         db  0xff ; '.'
000000000000dcf8         db  0x2c ; ','
000000000000dcf9         db  0xa4 ; '.'
000000000000dcfa         db  0xff ; '.'
000000000000dcfb         db  0xff ; '.'
000000000000dcfc         db  0x2c ; ','
000000000000dcfd         db  0xa4 ; '.'
000000000000dcfe         db  0xff ; '.'
000000000000dcff         db  0xff ; '.'
000000000000dd00         db  0x2c ; ','
000000000000dd01         db  0xa4 ; '.'
000000000000dd02         db  0xff ; '.'
000000000000dd03         db  0xff ; '.'
000000000000dd04         db  0x2c ; ','
000000000000dd05         db  0xa4 ; '.'
000000000000dd06         db  0xff ; '.'
000000000000dd07         db  0xff ; '.'
000000000000dd08         db  0x2c ; ','
000000000000dd09         db  0xa4 ; '.'
000000000000dd0a         db  0xff ; '.'
000000000000dd0b         db  0xff ; '.'
000000000000dd0c         db  0x2c ; ','
000000000000dd0d         db  0xa4 ; '.'
000000000000dd0e         db  0xff ; '.'
000000000000dd0f         db  0xff ; '.'
000000000000dd10         db  0x2c ; ','
000000000000dd11         db  0xa4 ; '.'
000000000000dd12         db  0xff ; '.'
000000000000dd13         db  0xff ; '.'
000000000000dd14         db  0x2c ; ','
000000000000dd15         db  0xa4 ; '.'
000000000000dd16         db  0xff ; '.'
000000000000dd17         db  0xff ; '.'
000000000000dd18         db  0x2c ; ','
000000000000dd19         db  0xa4 ; '.'
000000000000dd1a         db  0xff ; '.'
000000000000dd1b         db  0xff ; '.'
000000000000dd1c         db  0x2c ; ','
000000000000dd1d         db  0xa4 ; '.'
000000000000dd1e         db  0xff ; '.'
000000000000dd1f         db  0xff ; '.'
000000000000dd20         db  0x2c ; ','
000000000000dd21         db  0xa4 ; '.'
000000000000dd22         db  0xff ; '.'
000000000000dd23         db  0xff ; '.'
000000000000dd24         db  0x2c ; ','
000000000000dd25         db  0xa4 ; '.'
000000000000dd26         db  0xff ; '.'
000000000000dd27         db  0xff ; '.'
000000000000dd28         db  0x2c ; ','
000000000000dd29         db  0xa4 ; '.'
000000000000dd2a         db  0xff ; '.'
000000000000dd2b         db  0xff ; '.'
000000000000dd2c         db  0x2c ; ','
000000000000dd2d         db  0xa4 ; '.'
000000000000dd2e         db  0xff ; '.'
000000000000dd2f         db  0xff ; '.'
000000000000dd30         db  0x2c ; ','
000000000000dd31         db  0xa4 ; '.'
000000000000dd32         db  0xff ; '.'
000000000000dd33         db  0xff ; '.'
000000000000dd34         db  0x2c ; ','
000000000000dd35         db  0xa4 ; '.'
000000000000dd36         db  0xff ; '.'
000000000000dd37         db  0xff ; '.'
000000000000dd38         db  0xe7 ; '.'
000000000000dd39         db  0xa1 ; '.'
000000000000dd3a         db  0xff ; '.'
000000000000dd3b         db  0xff ; '.'
000000000000dd3c         db  0x84 ; '.'
000000000000dd3d         db  0xa4 ; '.'
000000000000dd3e         db  0xff ; '.'
000000000000dd3f         db  0xff ; '.'
000000000000dd40         db  0xe7 ; '.'
000000000000dd41         db  0xa1 ; '.'
000000000000dd42         db  0xff ; '.'
000000000000dd43         db  0xff ; '.'
000000000000dd44         db  0x54 ; 'T'
000000000000dd45         db  0xa4 ; '.'
000000000000dd46         db  0xff ; '.'
000000000000dd47         db  0xff ; '.'
000000000000dd48         db  0xd8 ; '.'                                         ; DATA XREF=sub_8020+137
000000000000dd49         db  0xa3 ; '.'
000000000000dd4a         db  0xff ; '.'
000000000000dd4b         db  0xff ; '.'
000000000000dd4c         db  0xe8 ; '.'
000000000000dd4d         db  0xa2 ; '.'
000000000000dd4e         db  0xff ; '.'
000000000000dd4f         db  0xff ; '.'
000000000000dd50         db  0xe8 ; '.'
000000000000dd51         db  0xa2 ; '.'
000000000000dd52         db  0xff ; '.'
000000000000dd53         db  0xff ; '.'
000000000000dd54         db  0xe8 ; '.'
000000000000dd55         db  0xa2 ; '.'
000000000000dd56         db  0xff ; '.'
000000000000dd57         db  0xff ; '.'
000000000000dd58         db  0xe8 ; '.'
000000000000dd59         db  0xa2 ; '.'
000000000000dd5a         db  0xff ; '.'
000000000000dd5b         db  0xff ; '.'
000000000000dd5c         db  0xe8 ; '.'
000000000000dd5d         db  0xa2 ; '.'
000000000000dd5e         db  0xff ; '.'
000000000000dd5f         db  0xff ; '.'
000000000000dd60         db  0xe8 ; '.'
000000000000dd61         db  0xa2 ; '.'
000000000000dd62         db  0xff ; '.'
000000000000dd63         db  0xff ; '.'
000000000000dd64         db  0xc8 ; '.'
000000000000dd65         db  0xa3 ; '.'
000000000000dd66         db  0xff ; '.'
000000000000dd67         db  0xff ; '.'
000000000000dd68         db  0x18 ; '.'
000000000000dd69         db  0xa5 ; '.'
000000000000dd6a         db  0xff ; '.'
000000000000dd6b         db  0xff ; '.'
000000000000dd6c         db  0x00 ; '.'
000000000000dd6d         db  0xa5 ; '.'
000000000000dd6e         db  0xff ; '.'
000000000000dd6f         db  0xff ; '.'
000000000000dd70         db  0xb0 ; '.'
000000000000dd71         db  0xa3 ; '.'
000000000000dd72         db  0xff ; '.'
000000000000dd73         db  0xff ; '.'
000000000000dd74         db  0xf0 ; '.'
000000000000dd75         db  0xa4 ; '.'
000000000000dd76         db  0xff ; '.'
000000000000dd77         db  0xff ; '.'
000000000000dd78         db  0x98 ; '.'
000000000000dd79         db  0xa3 ; '.'
000000000000dd7a         db  0xff ; '.'
000000000000dd7b         db  0xff ; '.'
000000000000dd7c         db  0xd8 ; '.'
000000000000dd7d         db  0xa4 ; '.'
000000000000dd7e         db  0xff ; '.'
000000000000dd7f         db  0xff ; '.'
000000000000dd80         db  0xe8 ; '.'
000000000000dd81         db  0xa2 ; '.'
000000000000dd82         db  0xff ; '.'
000000000000dd83         db  0xff ; '.'
000000000000dd84         db  0xe8 ; '.'
000000000000dd85         db  0xa2 ; '.'
000000000000dd86         db  0xff ; '.'
000000000000dd87         db  0xff ; '.'
000000000000dd88         db  0xe8 ; '.'
000000000000dd89         db  0xa2 ; '.'
000000000000dd8a         db  0xff ; '.'
000000000000dd8b         db  0xff ; '.'
000000000000dd8c         db  0xe8 ; '.'
000000000000dd8d         db  0xa2 ; '.'
000000000000dd8e         db  0xff ; '.'
000000000000dd8f         db  0xff ; '.'
000000000000dd90         db  0xe8 ; '.'
000000000000dd91         db  0xa2 ; '.'
000000000000dd92         db  0xff ; '.'
000000000000dd93         db  0xff ; '.'
000000000000dd94         db  0xe8 ; '.'
000000000000dd95         db  0xa2 ; '.'
000000000000dd96         db  0xff ; '.'
000000000000dd97         db  0xff ; '.'
000000000000dd98         db  0xe8 ; '.'
000000000000dd99         db  0xa2 ; '.'
000000000000dd9a         db  0xff ; '.'
000000000000dd9b         db  0xff ; '.'
000000000000dd9c         db  0xe8 ; '.'
000000000000dd9d         db  0xa2 ; '.'
000000000000dd9e         db  0xff ; '.'
000000000000dd9f         db  0xff ; '.'
000000000000dda0         db  0xe8 ; '.'
000000000000dda1         db  0xa2 ; '.'
000000000000dda2         db  0xff ; '.'
000000000000dda3         db  0xff ; '.'
000000000000dda4         db  0xe8 ; '.'
000000000000dda5         db  0xa2 ; '.'
000000000000dda6         db  0xff ; '.'
000000000000dda7         db  0xff ; '.'
000000000000dda8         db  0xe8 ; '.'
000000000000dda9         db  0xa2 ; '.'
000000000000ddaa         db  0xff ; '.'
000000000000ddab         db  0xff ; '.'
000000000000ddac         db  0xe8 ; '.'
000000000000ddad         db  0xa2 ; '.'
000000000000ddae         db  0xff ; '.'
000000000000ddaf         db  0xff ; '.'
000000000000ddb0         db  0xe8 ; '.'
000000000000ddb1         db  0xa2 ; '.'
000000000000ddb2         db  0xff ; '.'
000000000000ddb3         db  0xff ; '.'
000000000000ddb4         db  0xe8 ; '.'
000000000000ddb5         db  0xa2 ; '.'
000000000000ddb6         db  0xff ; '.'
000000000000ddb7         db  0xff ; '.'
000000000000ddb8         db  0xe8 ; '.'
000000000000ddb9         db  0xa2 ; '.'
000000000000ddba         db  0xff ; '.'
000000000000ddbb         db  0xff ; '.'
000000000000ddbc         db  0xe8 ; '.'
000000000000ddbd         db  0xa2 ; '.'
000000000000ddbe         db  0xff ; '.'
000000000000ddbf         db  0xff ; '.'
000000000000ddc0         db  0xe8 ; '.'
000000000000ddc1         db  0xa2 ; '.'
000000000000ddc2         db  0xff ; '.'
000000000000ddc3         db  0xff ; '.'
000000000000ddc4         db  0xe8 ; '.'
000000000000ddc5         db  0xa2 ; '.'
000000000000ddc6         db  0xff ; '.'
000000000000ddc7         db  0xff ; '.'
000000000000ddc8         db  0xc0 ; '.'
000000000000ddc9         db  0xa4 ; '.'
000000000000ddca         db  0xff ; '.'
000000000000ddcb         db  0xff ; '.'
000000000000ddcc         db  0xa8 ; '.'
000000000000ddcd         db  0xa4 ; '.'
000000000000ddce         db  0xff ; '.'
000000000000ddcf         db  0xff ; '.'
000000000000ddd0         db  0xa8 ; '.'
000000000000ddd1         db  0xa4 ; '.'
000000000000ddd2         db  0xff ; '.'
000000000000ddd3         db  0xff ; '.'
000000000000ddd4         db  0x90 ; '.'
000000000000ddd5         db  0xa4 ; '.'
000000000000ddd6         db  0xff ; '.'
000000000000ddd7         db  0xff ; '.'
000000000000ddd8         db  0xa8 ; '.'
000000000000ddd9         db  0xa4 ; '.'
000000000000ddda         db  0xff ; '.'
000000000000dddb         db  0xff ; '.'
000000000000dddc         db  0x78 ; 'x'
000000000000dddd         db  0xa4 ; '.'
000000000000ddde         db  0xff ; '.'
000000000000dddf         db  0xff ; '.'
000000000000dde0         db  0xa8 ; '.'
000000000000dde1         db  0xa4 ; '.'
000000000000dde2         db  0xff ; '.'
000000000000dde3         db  0xff ; '.'
000000000000dde4         db  0xe8 ; '.'
000000000000dde5         db  0xa0 ; '.'
000000000000dde6         db  0xff ; '.'
000000000000dde7         db  0xff ; '.'
000000000000dde8         db  0xa8 ; '.'
000000000000dde9         db  0xa4 ; '.'
000000000000ddea         db  0xff ; '.'
000000000000ddeb         db  0xff ; '.'
000000000000ddec         db  0xa8 ; '.'
000000000000dded         db  0xa4 ; '.'
000000000000ddee         db  0xff ; '.'
000000000000ddef         db  0xff ; '.'
000000000000ddf0         db  0xa8 ; '.'
000000000000ddf1         db  0xa4 ; '.'
000000000000ddf2         db  0xff ; '.'
000000000000ddf3         db  0xff ; '.'
000000000000ddf4         db  0x78 ; 'x'
000000000000ddf5         db  0xa4 ; '.'
000000000000ddf6         db  0xff ; '.'
000000000000ddf7         db  0xff ; '.'
000000000000ddf8         db  0x78 ; 'x'
000000000000ddf9         db  0xa4 ; '.'
000000000000ddfa         db  0xff ; '.'
000000000000ddfb         db  0xff ; '.'
000000000000ddfc         db  0x78 ; 'x'
000000000000ddfd         db  0xa4 ; '.'
000000000000ddfe         db  0xff ; '.'
000000000000ddff         db  0xff ; '.'
000000000000de00         db  0x78 ; 'x'
000000000000de01         db  0xa4 ; '.'
000000000000de02         db  0xff ; '.'
000000000000de03         db  0xff ; '.'
000000000000de04         db  0x78 ; 'x'
000000000000de05         db  0xa4 ; '.'
000000000000de06         db  0xff ; '.'
000000000000de07         db  0xff ; '.'
000000000000de08         db  0x78 ; 'x'
000000000000de09         db  0xa4 ; '.'
000000000000de0a         db  0xff ; '.'
000000000000de0b         db  0xff ; '.'
000000000000de0c         db  0x78 ; 'x'
000000000000de0d         db  0xa4 ; '.'
000000000000de0e         db  0xff ; '.'
000000000000de0f         db  0xff ; '.'
000000000000de10         db  0x78 ; 'x'
000000000000de11         db  0xa4 ; '.'
000000000000de12         db  0xff ; '.'
000000000000de13         db  0xff ; '.'
000000000000de14         db  0x78 ; 'x'
000000000000de15         db  0xa4 ; '.'
000000000000de16         db  0xff ; '.'
000000000000de17         db  0xff ; '.'
000000000000de18         db  0x78 ; 'x'
000000000000de19         db  0xa4 ; '.'
000000000000de1a         db  0xff ; '.'
000000000000de1b         db  0xff ; '.'
000000000000de1c         db  0x78 ; 'x'
000000000000de1d         db  0xa4 ; '.'
000000000000de1e         db  0xff ; '.'
000000000000de1f         db  0xff ; '.'
000000000000de20         db  0x78 ; 'x'
000000000000de21         db  0xa4 ; '.'
000000000000de22         db  0xff ; '.'
000000000000de23         db  0xff ; '.'
000000000000de24         db  0x78 ; 'x'
000000000000de25         db  0xa4 ; '.'
000000000000de26         db  0xff ; '.'
000000000000de27         db  0xff ; '.'
000000000000de28         db  0x78 ; 'x'
000000000000de29         db  0xa4 ; '.'
000000000000de2a         db  0xff ; '.'
000000000000de2b         db  0xff ; '.'
000000000000de2c         db  0x78 ; 'x'
000000000000de2d         db  0xa4 ; '.'
000000000000de2e         db  0xff ; '.'
000000000000de2f         db  0xff ; '.'
000000000000de30         db  0x78 ; 'x'
000000000000de31         db  0xa4 ; '.'
000000000000de32         db  0xff ; '.'
000000000000de33         db  0xff ; '.'
000000000000de34         db  0xa8 ; '.'
000000000000de35         db  0xa4 ; '.'
000000000000de36         db  0xff ; '.'
000000000000de37         db  0xff ; '.'
000000000000de38         db  0xa8 ; '.'
000000000000de39         db  0xa4 ; '.'
000000000000de3a         db  0xff ; '.'
000000000000de3b         db  0xff ; '.'
000000000000de3c         db  0xa8 ; '.'
000000000000de3d         db  0xa4 ; '.'
000000000000de3e         db  0xff ; '.'
000000000000de3f         db  0xff ; '.'
000000000000de40         db  0xa8 ; '.'
000000000000de41         db  0xa4 ; '.'
000000000000de42         db  0xff ; '.'
000000000000de43         db  0xff ; '.'
000000000000de44         db  0xb8 ; '.'
000000000000de45         db  0xa0 ; '.'
000000000000de46         db  0xff ; '.'
000000000000de47         db  0xff ; '.'
000000000000de48         db  0xe8 ; '.'
000000000000de49         db  0xa2 ; '.'
000000000000de4a         db  0xff ; '.'
000000000000de4b         db  0xff ; '.'
000000000000de4c         db  0x78 ; 'x'
000000000000de4d         db  0xa4 ; '.'
000000000000de4e         db  0xff ; '.'
000000000000de4f         db  0xff ; '.'
000000000000de50         db  0x78 ; 'x'
000000000000de51         db  0xa4 ; '.'
000000000000de52         db  0xff ; '.'
000000000000de53         db  0xff ; '.'
000000000000de54         db  0x78 ; 'x'
000000000000de55         db  0xa4 ; '.'
000000000000de56         db  0xff ; '.'
000000000000de57         db  0xff ; '.'
000000000000de58         db  0x78 ; 'x'
000000000000de59         db  0xa4 ; '.'
000000000000de5a         db  0xff ; '.'
000000000000de5b         db  0xff ; '.'
000000000000de5c         db  0x78 ; 'x'
000000000000de5d         db  0xa4 ; '.'
000000000000de5e         db  0xff ; '.'
000000000000de5f         db  0xff ; '.'
000000000000de60         db  0x78 ; 'x'
000000000000de61         db  0xa4 ; '.'
000000000000de62         db  0xff ; '.'
000000000000de63         db  0xff ; '.'
000000000000de64         db  0x78 ; 'x'
000000000000de65         db  0xa4 ; '.'
000000000000de66         db  0xff ; '.'
000000000000de67         db  0xff ; '.'
000000000000de68         db  0x78 ; 'x'
000000000000de69         db  0xa4 ; '.'
000000000000de6a         db  0xff ; '.'
000000000000de6b         db  0xff ; '.'
000000000000de6c         db  0x78 ; 'x'
000000000000de6d         db  0xa4 ; '.'
000000000000de6e         db  0xff ; '.'
000000000000de6f         db  0xff ; '.'
000000000000de70         db  0x78 ; 'x'
000000000000de71         db  0xa4 ; '.'
000000000000de72         db  0xff ; '.'
000000000000de73         db  0xff ; '.'
000000000000de74         db  0x78 ; 'x'
000000000000de75         db  0xa4 ; '.'
000000000000de76         db  0xff ; '.'
000000000000de77         db  0xff ; '.'
000000000000de78         db  0x78 ; 'x'
000000000000de79         db  0xa4 ; '.'
000000000000de7a         db  0xff ; '.'
000000000000de7b         db  0xff ; '.'
000000000000de7c         db  0x78 ; 'x'
000000000000de7d         db  0xa4 ; '.'
000000000000de7e         db  0xff ; '.'
000000000000de7f         db  0xff ; '.'
000000000000de80         db  0x78 ; 'x'
000000000000de81         db  0xa4 ; '.'
000000000000de82         db  0xff ; '.'
000000000000de83         db  0xff ; '.'
000000000000de84         db  0x78 ; 'x'
000000000000de85         db  0xa4 ; '.'
000000000000de86         db  0xff ; '.'
000000000000de87         db  0xff ; '.'
000000000000de88         db  0x78 ; 'x'
000000000000de89         db  0xa4 ; '.'
000000000000de8a         db  0xff ; '.'
000000000000de8b         db  0xff ; '.'
000000000000de8c         db  0x78 ; 'x'
000000000000de8d         db  0xa4 ; '.'
000000000000de8e         db  0xff ; '.'
000000000000de8f         db  0xff ; '.'
000000000000de90         db  0x78 ; 'x'
000000000000de91         db  0xa4 ; '.'
000000000000de92         db  0xff ; '.'
000000000000de93         db  0xff ; '.'
000000000000de94         db  0x78 ; 'x'
000000000000de95         db  0xa4 ; '.'
000000000000de96         db  0xff ; '.'
000000000000de97         db  0xff ; '.'
000000000000de98         db  0x78 ; 'x'
000000000000de99         db  0xa4 ; '.'
000000000000de9a         db  0xff ; '.'
000000000000de9b         db  0xff ; '.'
000000000000de9c         db  0x78 ; 'x'
000000000000de9d         db  0xa4 ; '.'
000000000000de9e         db  0xff ; '.'
000000000000de9f         db  0xff ; '.'
000000000000dea0         db  0x78 ; 'x'
000000000000dea1         db  0xa4 ; '.'
000000000000dea2         db  0xff ; '.'
000000000000dea3         db  0xff ; '.'
000000000000dea4         db  0x78 ; 'x'
000000000000dea5         db  0xa4 ; '.'
000000000000dea6         db  0xff ; '.'
000000000000dea7         db  0xff ; '.'
000000000000dea8         db  0x78 ; 'x'
000000000000dea9         db  0xa4 ; '.'
000000000000deaa         db  0xff ; '.'
000000000000deab         db  0xff ; '.'
000000000000deac         db  0x78 ; 'x'
000000000000dead         db  0xa4 ; '.'
000000000000deae         db  0xff ; '.'
000000000000deaf         db  0xff ; '.'
000000000000deb0         db  0x78 ; 'x'
000000000000deb1         db  0xa4 ; '.'
000000000000deb2         db  0xff ; '.'
000000000000deb3         db  0xff ; '.'
000000000000deb4         db  0xa8 ; '.'
000000000000deb5         db  0xa4 ; '.'
000000000000deb6         db  0xff ; '.'
000000000000deb7         db  0xff ; '.'
000000000000deb8         db  0x78 ; 'x'
000000000000deb9         db  0xa3 ; '.'
000000000000deba         db  0xff ; '.'
000000000000debb         db  0xff ; '.'
000000000000debc         db  0x78 ; 'x'
000000000000debd         db  0xa4 ; '.'
000000000000debe         db  0xff ; '.'
000000000000debf         db  0xff ; '.'
000000000000dec0         db  0xa8 ; '.'
000000000000dec1         db  0xa4 ; '.'
000000000000dec2         db  0xff ; '.'
000000000000dec3         db  0xff ; '.'
000000000000dec4         db  0x78 ; 'x'
000000000000dec5         db  0xa4 ; '.'
000000000000dec6         db  0xff ; '.'
000000000000dec7         db  0xff ; '.'
000000000000dec8         db  0xa8 ; '.'
000000000000dec9         db  0xa4 ; '.'
000000000000deca         db  0xff ; '.'
000000000000decb         db  0xff ; '.'
000000000000decc         db  0x78 ; 'x'
000000000000decd         db  0xa4 ; '.'
000000000000dece         db  0xff ; '.'
000000000000decf         db  0xff ; '.'
000000000000ded0         db  0x78 ; 'x'
000000000000ded1         db  0xa4 ; '.'
000000000000ded2         db  0xff ; '.'
000000000000ded3         db  0xff ; '.'
000000000000ded4         db  0x78 ; 'x'
000000000000ded5         db  0xa4 ; '.'
000000000000ded6         db  0xff ; '.'
000000000000ded7         db  0xff ; '.'
000000000000ded8         db  0x78 ; 'x'
000000000000ded9         db  0xa4 ; '.'
000000000000deda         db  0xff ; '.'
000000000000dedb         db  0xff ; '.'
000000000000dedc         db  0x78 ; 'x'
000000000000dedd         db  0xa4 ; '.'
000000000000dede         db  0xff ; '.'
000000000000dedf         db  0xff ; '.'
000000000000dee0         db  0x78 ; 'x'
000000000000dee1         db  0xa4 ; '.'
000000000000dee2         db  0xff ; '.'
000000000000dee3         db  0xff ; '.'
000000000000dee4         db  0x78 ; 'x'
000000000000dee5         db  0xa4 ; '.'
000000000000dee6         db  0xff ; '.'
000000000000dee7         db  0xff ; '.'
000000000000dee8         db  0x78 ; 'x'
000000000000dee9         db  0xa4 ; '.'
000000000000deea         db  0xff ; '.'
000000000000deeb         db  0xff ; '.'
000000000000deec         db  0x78 ; 'x'
000000000000deed         db  0xa4 ; '.'
000000000000deee         db  0xff ; '.'
000000000000deef         db  0xff ; '.'
000000000000def0         db  0x78 ; 'x'
000000000000def1         db  0xa4 ; '.'
000000000000def2         db  0xff ; '.'
000000000000def3         db  0xff ; '.'
000000000000def4         db  0x78 ; 'x'
000000000000def5         db  0xa4 ; '.'
000000000000def6         db  0xff ; '.'
000000000000def7         db  0xff ; '.'
000000000000def8         db  0x78 ; 'x'
000000000000def9         db  0xa4 ; '.'
000000000000defa         db  0xff ; '.'
000000000000defb         db  0xff ; '.'
000000000000defc         db  0x78 ; 'x'
000000000000defd         db  0xa4 ; '.'
000000000000defe         db  0xff ; '.'
000000000000deff         db  0xff ; '.'
000000000000df00         db  0x78 ; 'x'
000000000000df01         db  0xa4 ; '.'
000000000000df02         db  0xff ; '.'
000000000000df03         db  0xff ; '.'
000000000000df04         db  0x78 ; 'x'
000000000000df05         db  0xa4 ; '.'
000000000000df06         db  0xff ; '.'
000000000000df07         db  0xff ; '.'
000000000000df08         db  0x78 ; 'x'
000000000000df09         db  0xa4 ; '.'
000000000000df0a         db  0xff ; '.'
000000000000df0b         db  0xff ; '.'
000000000000df0c         db  0x78 ; 'x'
000000000000df0d         db  0xa4 ; '.'
000000000000df0e         db  0xff ; '.'
000000000000df0f         db  0xff ; '.'
000000000000df10         db  0x78 ; 'x'
000000000000df11         db  0xa4 ; '.'
000000000000df12         db  0xff ; '.'
000000000000df13         db  0xff ; '.'
000000000000df14         db  0x78 ; 'x'
000000000000df15         db  0xa4 ; '.'
000000000000df16         db  0xff ; '.'
000000000000df17         db  0xff ; '.'
000000000000df18         db  0x78 ; 'x'
000000000000df19         db  0xa4 ; '.'
000000000000df1a         db  0xff ; '.'
000000000000df1b         db  0xff ; '.'
000000000000df1c         db  0x78 ; 'x'
000000000000df1d         db  0xa4 ; '.'
000000000000df1e         db  0xff ; '.'
000000000000df1f         db  0xff ; '.'
000000000000df20         db  0x78 ; 'x'
000000000000df21         db  0xa4 ; '.'
000000000000df22         db  0xff ; '.'
000000000000df23         db  0xff ; '.'
000000000000df24         db  0x78 ; 'x'
000000000000df25         db  0xa4 ; '.'
000000000000df26         db  0xff ; '.'
000000000000df27         db  0xff ; '.'
000000000000df28         db  0x78 ; 'x'
000000000000df29         db  0xa4 ; '.'
000000000000df2a         db  0xff ; '.'
000000000000df2b         db  0xff ; '.'
000000000000df2c         db  0x78 ; 'x'
000000000000df2d         db  0xa4 ; '.'
000000000000df2e         db  0xff ; '.'
000000000000df2f         db  0xff ; '.'
000000000000df30         db  0x78 ; 'x'
000000000000df31         db  0xa4 ; '.'
000000000000df32         db  0xff ; '.'
000000000000df33         db  0xff ; '.'
000000000000df34         db  0xe8 ; '.'
000000000000df35         db  0x9f ; '.'
000000000000df36         db  0xff ; '.'
000000000000df37         db  0xff ; '.'
000000000000df38         db  0xa8 ; '.'
000000000000df39         db  0xa4 ; '.'
000000000000df3a         db  0xff ; '.'
000000000000df3b         db  0xff ; '.'
000000000000df3c         db  0xe8 ; '.'
000000000000df3d         db  0x9f ; '.'
000000000000df3e         db  0xff ; '.'
000000000000df3f         db  0xff ; '.'
000000000000df40         db  0x90 ; '.'
000000000000df41         db  0xa4 ; '.'
000000000000df42         db  0xff ; '.'
000000000000df43         db  0xff ; '.'
000000000000df44         db  0x00 ; '.'
000000000000df45         db  0x00 ; '.'
000000000000df46         db  0x00 ; '.'
000000000000df47         db  0x00 ; '.'
000000000000df48         db  0x00 ; '.'
000000000000df49         db  0x00 ; '.'
000000000000df4a         db  0x00 ; '.'
000000000000df4b         db  0x00 ; '.'
000000000000df4c         db  0x00 ; '.'
000000000000df4d         db  0x00 ; '.'
000000000000df4e         db  0x00 ; '.'
000000000000df4f         db  0x00 ; '.'
000000000000df50         db  0x00 ; '.'
000000000000df51         db  0x00 ; '.'
000000000000df52         db  0x00 ; '.'
000000000000df53         db  0x00 ; '.'
000000000000df54         db  0x00 ; '.'
000000000000df55         db  0x00 ; '.'
000000000000df56         db  0x00 ; '.'
000000000000df57         db  0x00 ; '.'
000000000000df58         db  0x00 ; '.'
000000000000df59         db  0x00 ; '.'
000000000000df5a         db  0x00 ; '.'
000000000000df5b         db  0x00 ; '.'
000000000000df5c         db  0x00 ; '.'
000000000000df5d         db  0x00 ; '.'
000000000000df5e         db  0x00 ; '.'
000000000000df5f         db  0x00 ; '.'
                     quoting_style_vals:
000000000000df60         db  0x00 ; '.'
000000000000df61         db  0x00 ; '.'
000000000000df62         db  0x00 ; '.'
000000000000df63         db  0x00 ; '.'
000000000000df64         db  0x01 ; '.'
000000000000df65         db  0x00 ; '.'
000000000000df66         db  0x00 ; '.'
000000000000df67         db  0x00 ; '.'
000000000000df68         db  0x02 ; '.'
000000000000df69         db  0x00 ; '.'
000000000000df6a         db  0x00 ; '.'
000000000000df6b         db  0x00 ; '.'
000000000000df6c         db  0x03 ; '.'
000000000000df6d         db  0x00 ; '.'
000000000000df6e         db  0x00 ; '.'
000000000000df6f         db  0x00 ; '.'
000000000000df70         db  0x04 ; '.'
000000000000df71         db  0x00 ; '.'
000000000000df72         db  0x00 ; '.'
000000000000df73         db  0x00 ; '.'
000000000000df74         db  0x05 ; '.'
000000000000df75         db  0x00 ; '.'
000000000000df76         db  0x00 ; '.'
000000000000df77         db  0x00 ; '.'
000000000000df78         db  0x06 ; '.'
000000000000df79         db  0x00 ; '.'
000000000000df7a         db  0x00 ; '.'
000000000000df7b         db  0x00 ; '.'
000000000000df7c         db  0x07 ; '.'
000000000000df7d         db  0x00 ; '.'
000000000000df7e         db  0x00 ; '.'
000000000000df7f         db  0x00 ; '.'
000000000000df80         db  0x08 ; '.'
000000000000df81         db  0x00 ; '.'
000000000000df82         db  0x00 ; '.'
000000000000df83         db  0x00 ; '.'
000000000000df84         db  0x09 ; '.'
000000000000df85         db  0x00 ; '.'
000000000000df86         db  0x00 ; '.'
000000000000df87         db  0x00 ; '.'
                     aSSSn:
000000000000df88         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000df94         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000df9b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000df9c         db  0x43 ; 'C'
000000000000df9d         db  0x29 ; ')'
000000000000df9e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000df9f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000dfaf         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000dfc6         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000dfe2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aBugcoreutilsgn:
000000000000dff7         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=emit_bug_reporting_address+20
                     aSHomePageSn:
000000000000e00d         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000e021         align      8
                     aNlicenseGplv3G:
000000000000e028         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000e0f4         align      8
                     aWrittenBySSSna:
000000000000e0f8         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_e118:        // aWrittenBySSSns
000000000000e118         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000e13c         align      64
                     aWrittenBySSSns_e140:        // aWrittenBySSSns
000000000000e140         db         "Written by %s, %s, %s,\n%s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+800
                     aWrittenBySSSns_e168:        // aWrittenBySSSns
000000000000e168         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000e194         align      8
                     aWrittenBySSSns_e198:        // aWrittenBySSSns
000000000000e198         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000e1c8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000e1fc         align      512
                     aWrittenBySSSns_e200:        // aWrittenBySSSns
000000000000e200         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000e23c         align      64
                     aGeneralHelpUsi:
000000000000e240         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000e281         align      4
                     switch_table_e284:        // switch_table
000000000000e284         dd         version_etc_arn.loc_9816-switch_table_e284, version_etc_arn.loc_98a8-switch_table_e284, version_etc_arn.loc_98e8-switch_table_e284, version_etc_arn.loc_9930-switch_table_e284 ; switch table used at 0x9794 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000e294         dd         version_etc_arn.loc_9980-switch_table_e284, version_etc_arn.loc_99d8-switch_table_e284, version_etc_arn.loc_9a08-switch_table_e284, version_etc_arn.loc_9a70-switch_table_e284
000000000000e2a4         dd         version_etc_arn.loc_97a0-switch_table_e284, version_etc_arn.loc_9850-switch_table_e284
000000000000e2ac         align      64
                     version_etc_copyright:
000000000000e2c0         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000e2ef         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li:
000000000000e300         db         "../coreutils-8.31/lib/xstrtol.c", 0        ; DATA XREF=xstrtoimax+1686, xstrtol+1686, xstrtoumax+908
                     a0StrtolbaseStr:
000000000000e320         db         "0 <= strtol_base && strtol_base <= 36", 0  ; DATA XREF=xstrtoimax+1693, xstrtol+1693, xstrtoumax+915
000000000000e346         align      8
                     switch_table_e348:        // switch_table
000000000000e348         dd         xstrtoimax.loc_a5d0-switch_table_e348, 2 dup (xstrtoimax.loc_a268-switch_table_e348), xstrtoimax.loc_a500-switch_table_e348, xstrtoimax.loc_a268-switch_table_e348 ; switch table used at 0xa29e containing 54 entries, DATA XREF=xstrtoimax+412
000000000000e35c         dd         xstrtoimax.loc_a4a0-switch_table_e348, 3 dup (xstrtoimax.loc_a268-switch_table_e348), xstrtoimax.loc_a460-switch_table_e348, xstrtoimax.loc_a268-switch_table_e348
000000000000e374         dd         xstrtoimax.loc_a2a0-switch_table_e348, 2 dup (xstrtoimax.loc_a268-switch_table_e348), xstrtoimax.loc_a568-switch_table_e348, 3 dup (xstrtoimax.loc_a268-switch_table_e348)
000000000000e390         dd         xstrtoimax.loc_a600-switch_table_e348, 4 dup (xstrtoimax.loc_a268-switch_table_e348), xstrtoimax.loc_a3f0-switch_table_e348, xstrtoimax.loc_a380-switch_table_e348
000000000000e3ac         dd         7 dup (xstrtoimax.loc_a268-switch_table_e348), xstrtoimax.loc_a350-switch_table_e348, xstrtoimax.loc_a300-switch_table_e348, 3 dup (xstrtoimax.loc_a268-switch_table_e348)
000000000000e3dc         dd         xstrtoimax.loc_a4a0-switch_table_e348, 3 dup (xstrtoimax.loc_a268-switch_table_e348), xstrtoimax.loc_a460-switch_table_e348, xstrtoimax.loc_a268-switch_table_e348
000000000000e3f4         dd         xstrtoimax.loc_a2a0-switch_table_e348, 6 dup (xstrtoimax.loc_a268-switch_table_e348), xstrtoimax.loc_a600-switch_table_e348, 2 dup (xstrtoimax.loc_a268-switch_table_e348)
000000000000e41c         dd         xstrtoimax.loc_a320-switch_table_e348
                     __PRETTY_FUNCTION__.4162:
000000000000e420         db         "xstrtoimax", 0                             ; DATA XREF=xstrtoimax+1679
000000000000e42b         align      16
                     switch_table_e430:        // switch_table
000000000000e430         dd         xstrtol.loc_ac90-switch_table_e430, 2 dup (xstrtol.loc_a928-switch_table_e430), xstrtol.loc_abc0-switch_table_e430, xstrtol.loc_a928-switch_table_e430 ; switch table used at 0xa95e containing 54 entries, DATA XREF=xstrtol+412
000000000000e444         dd         xstrtol.loc_ab60-switch_table_e430, 3 dup (xstrtol.loc_a928-switch_table_e430), xstrtol.loc_ab20-switch_table_e430, xstrtol.loc_a928-switch_table_e430
000000000000e45c         dd         xstrtol.loc_a960-switch_table_e430, 2 dup (xstrtol.loc_a928-switch_table_e430), xstrtol.loc_ac28-switch_table_e430, 3 dup (xstrtol.loc_a928-switch_table_e430)
000000000000e478         dd         xstrtol.loc_acc0-switch_table_e430, 4 dup (xstrtol.loc_a928-switch_table_e430), xstrtol.loc_aab0-switch_table_e430, xstrtol.loc_aa40-switch_table_e430
000000000000e494         dd         7 dup (xstrtol.loc_a928-switch_table_e430), xstrtol.loc_aa10-switch_table_e430, xstrtol.loc_a9c0-switch_table_e430, 3 dup (xstrtol.loc_a928-switch_table_e430)
000000000000e4c4         dd         xstrtol.loc_ab60-switch_table_e430, 3 dup (xstrtol.loc_a928-switch_table_e430), xstrtol.loc_ab20-switch_table_e430, xstrtol.loc_a928-switch_table_e430
000000000000e4dc         dd         xstrtol.loc_a960-switch_table_e430, 6 dup (xstrtol.loc_a928-switch_table_e430), xstrtol.loc_acc0-switch_table_e430, 2 dup (xstrtol.loc_a928-switch_table_e430)
000000000000e504         dd         xstrtol.loc_a9e0-switch_table_e430
                     __PRETTY_FUNCTION__.4162_e508:        // __PRETTY_FUNCTION__.4162
000000000000e508         db         "xstrtol", 0                                ; DATA XREF=xstrtol+1679
                     aInvalidSsArgum:
000000000000e510         db         "invalid %s%s argument '%s'", 0             ; DATA XREF=xstrtol_fatal+135
                     aSsArgumentSToo:
000000000000e52b         db         "%s%s argument '%s' too large", 0           ; DATA XREF=xstrtol_fatal+51
000000000000e548         db  0x2d ; '-'                                         ; DATA XREF=xstrtol_fatal+72, xstrtol_fatal+146
000000000000e549         db  0x2d ; '-'                                         ; DATA XREF=init_header+21, open_file+5
000000000000e54a         db  0x00 ; '.'
000000000000e54b         db  0x00 ; '.'
000000000000e54c         db  0x00 ; '.'
000000000000e54d         db  0x00 ; '.'
000000000000e54e         db  0x00 ; '.'
000000000000e54f         db  0x00 ; '.'
                     aInvalidSuffixI:
000000000000e550         db         "invalid suffix in %s%s argument '%s'", 0   ; DATA XREF=xstrtol_fatal+123
000000000000e575         align      8
                     switch_table_e578:        // switch_table
000000000000e578         dd         xstrtoumax.loc_b246-switch_table_e578, 2 dup (xstrtoumax.loc_b13c-switch_table_e578), xstrtoumax.loc_b223-switch_table_e578, xstrtoumax.loc_b13c-switch_table_e578 ; switch table used at 0xb0f6 containing 54 entries, DATA XREF=xstrtoumax+452
000000000000e58c         dd         xstrtoumax.loc_b25c-switch_table_e578, 3 dup (xstrtoumax.loc_b13c-switch_table_e578), xstrtoumax.loc_b1df-switch_table_e578, xstrtoumax.loc_b13c-switch_table_e578
000000000000e5a4         dd         xstrtoumax.loc_b0f8-switch_table_e578, 2 dup (xstrtoumax.loc_b13c-switch_table_e578), xstrtoumax.loc_b200-switch_table_e578, 3 dup (xstrtoumax.loc_b13c-switch_table_e578)
000000000000e5c0         dd         xstrtoumax.loc_b1bf-switch_table_e578, 4 dup (xstrtoumax.loc_b13c-switch_table_e578), xstrtoumax.loc_b19a-switch_table_e578, xstrtoumax.loc_b174-switch_table_e578
000000000000e5dc         dd         7 dup (xstrtoumax.loc_b13c-switch_table_e578), xstrtoumax.loc_b15d-switch_table_e578, xstrtoumax.loc_b120-switch_table_e578, 3 dup (xstrtoumax.loc_b13c-switch_table_e578)
000000000000e60c         dd         xstrtoumax.loc_b25c-switch_table_e578, 3 dup (xstrtoumax.loc_b13c-switch_table_e578), xstrtoumax.loc_b1df-switch_table_e578, xstrtoumax.loc_b13c-switch_table_e578
000000000000e624         dd         xstrtoumax.loc_b0f8-switch_table_e578, 6 dup (xstrtoumax.loc_b13c-switch_table_e578), xstrtoumax.loc_b1bf-switch_table_e578, 2 dup (xstrtoumax.loc_b13c-switch_table_e578)
000000000000e64c         dd         xstrtoumax.loc_b147-switch_table_e578
                     __PRETTY_FUNCTION__.4162_e650:        // __PRETTY_FUNCTION__.4162
000000000000e650         db         "xstrtoumax", 0                             ; DATA XREF=xstrtoumax+901
                     aAscii:
000000000000e65b         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000e661         db  0x00 ; '.'
000000000000e662         db  0x00 ; '.'
000000000000e663         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0xe664; 0xea50[ (1004 bytes)
        ; File offset : [58980; 59984[ (1004 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000e664         db  0x01 ; '.'
000000000000e665         db  0x1b ; '.'
000000000000e666         db  0x03 ; '.'
000000000000e667         db  0x3b ; ';'
000000000000e668         db  0xe8 ; '.'
000000000000e669         db  0x03 ; '.'
000000000000e66a         db  0x00 ; '.'
000000000000e66b         db  0x00 ; '.'
000000000000e66c         db  0x7c ; '|'
000000000000e66d         db  0x00 ; '.'
000000000000e66e         db  0x00 ; '.'
000000000000e66f         db  0x00 ; '.'
000000000000e670         db  0xec ; '.'
000000000000e671         db  0x34 ; '4'
000000000000e672         db  0xff ; '.'
000000000000e673         db  0xff ; '.'
000000000000e674         db  0x34 ; '4'
000000000000e675         db  0x04 ; '.'
000000000000e676         db  0x00 ; '.'
000000000000e677         db  0x00 ; '.'
000000000000e678         db  0x4c ; 'L'
000000000000e679         db  0x39 ; '9'
000000000000e67a         db  0xff ; '.'
000000000000e67b         db  0xff ; '.'
000000000000e67c         db  0x5c ; '\'
000000000000e67d         db  0x04 ; '.'
000000000000e67e         db  0x00 ; '.'
000000000000e67f         db  0x00 ; '.'
000000000000e680         db  0x5c ; '\'
000000000000e681         db  0x39 ; '9'
000000000000e682         db  0xff ; '.'
000000000000e683         db  0xff ; '.'
000000000000e684         db  0xd4 ; '.'
000000000000e685         db  0x09 ; '.'
000000000000e686         db  0x00 ; '.'
000000000000e687         db  0x00 ; '.'
000000000000e688         db  0xac ; '.'
000000000000e689         db  0x42 ; 'B'
000000000000e68a         db  0xff ; '.'
000000000000e68b         db  0xff ; '.'
000000000000e68c         db  0x04 ; '.'
000000000000e68d         db  0x04 ; '.'
000000000000e68e         db  0x00 ; '.'
000000000000e68f         db  0x00 ; '.'
000000000000e690         db  0xbc ; '.'
000000000000e691         db  0x43 ; 'C'
000000000000e692         db  0xff ; '.'
000000000000e693         db  0xff ; '.'
000000000000e694         db  0x74 ; 't'
000000000000e695         db  0x04 ; '.'
000000000000e696         db  0x00 ; '.'
000000000000e697         db  0x00 ; '.'
000000000000e698         db  0x1c ; '.'
000000000000e699         db  0x44 ; 'D'
000000000000e69a         db  0xff ; '.'
000000000000e69b         db  0xff ; '.'
000000000000e69c         db  0x88 ; '.'
000000000000e69d         db  0x04 ; '.'
000000000000e69e         db  0x00 ; '.'
000000000000e69f         db  0x00 ; '.'
000000000000e6a0         db  0x9c ; '.'
000000000000e6a1         db  0x44 ; 'D'
000000000000e6a2         db  0xff ; '.'
000000000000e6a3         db  0xff ; '.'
000000000000e6a4         db  0x9c ; '.'
000000000000e6a5         db  0x04 ; '.'
000000000000e6a6         db  0x00 ; '.'
000000000000e6a7         db  0x00 ; '.'
000000000000e6a8         db  0xec ; '.'
000000000000e6a9         db  0x44 ; 'D'
000000000000e6aa         db  0xff ; '.'
000000000000e6ab         db  0xff ; '.'
000000000000e6ac         db  0xb8 ; '.'
000000000000e6ad         db  0x04 ; '.'
000000000000e6ae         db  0x00 ; '.'
000000000000e6af         db  0x00 ; '.'
000000000000e6b0         db  0x1c ; '.'
000000000000e6b1         db  0x45 ; 'E'
000000000000e6b2         db  0xff ; '.'
000000000000e6b3         db  0xff ; '.'
000000000000e6b4         db  0xcc ; '.'
000000000000e6b5         db  0x04 ; '.'
000000000000e6b6         db  0x00 ; '.'
000000000000e6b7         db  0x00 ; '.'
000000000000e6b8         db  0x4c ; 'L'
000000000000e6b9         db  0x46 ; 'F'
000000000000e6ba         db  0xff ; '.'
000000000000e6bb         db  0xff ; '.'
000000000000e6bc         db  0x10 ; '.'
000000000000e6bd         db  0x05 ; '.'
000000000000e6be         db  0x00 ; '.'
000000000000e6bf         db  0x00 ; '.'
000000000000e6c0         db  0x7c ; '|'
000000000000e6c1         db  0x46 ; 'F'
000000000000e6c2         db  0xff ; '.'
000000000000e6c3         db  0xff ; '.'
000000000000e6c4         db  0x2c ; ','
000000000000e6c5         db  0x05 ; '.'
000000000000e6c6         db  0x00 ; '.'
000000000000e6c7         db  0x00 ; '.'
000000000000e6c8         db  0xcc ; '.'
000000000000e6c9         db  0x46 ; 'F'
000000000000e6ca         db  0xff ; '.'
000000000000e6cb         db  0xff ; '.'
000000000000e6cc         db  0x48 ; 'H'
000000000000e6cd         db  0x05 ; '.'
000000000000e6ce         db  0x00 ; '.'
000000000000e6cf         db  0x00 ; '.'
000000000000e6d0         db  0xec ; '.'
000000000000e6d1         db  0x48 ; 'H'
000000000000e6d2         db  0xff ; '.'
000000000000e6d3         db  0xff ; '.'
000000000000e6d4         db  0x98 ; '.'
000000000000e6d5         db  0x05 ; '.'
000000000000e6d6         db  0x00 ; '.'
000000000000e6d7         db  0x00 ; '.'
000000000000e6d8         db  0x5c ; '\'
000000000000e6d9         db  0x49 ; 'I'
000000000000e6da         db  0xff ; '.'
000000000000e6db         db  0xff ; '.'
000000000000e6dc         db  0xd0 ; '.'
000000000000e6dd         db  0x05 ; '.'
000000000000e6de         db  0x00 ; '.'
000000000000e6df         db  0x00 ; '.'
000000000000e6e0         db  0x2c ; ','
000000000000e6e1         db  0x4a ; 'J'
000000000000e6e2         db  0xff ; '.'
000000000000e6e3         db  0xff ; '.'
000000000000e6e4         db  0x00 ; '.'
000000000000e6e5         db  0x06 ; '.'
000000000000e6e6         db  0x00 ; '.'
000000000000e6e7         db  0x00 ; '.'
000000000000e6e8         db  0x3c ; '<'
000000000000e6e9         db  0x4b ; 'K'
000000000000e6ea         db  0xff ; '.'
000000000000e6eb         db  0xff ; '.'
000000000000e6ec         db  0x40 ; '@'
000000000000e6ed         db  0x06 ; '.'
000000000000e6ee         db  0x00 ; '.'
000000000000e6ef         db  0x00 ; '.'
000000000000e6f0         db  0x6c ; 'l'
000000000000e6f1         db  0x4c ; 'L'
000000000000e6f2         db  0xff ; '.'
000000000000e6f3         db  0xff ; '.'
000000000000e6f4         db  0x88 ; '.'
000000000000e6f5         db  0x06 ; '.'
000000000000e6f6         db  0x00 ; '.'
000000000000e6f7         db  0x00 ; '.'
000000000000e6f8         db  0x7c ; '|'
000000000000e6f9         db  0x4e ; 'N'
000000000000e6fa         db  0xff ; '.'
000000000000e6fb         db  0xff ; '.'
000000000000e6fc         db  0xbc ; '.'
000000000000e6fd         db  0x06 ; '.'
000000000000e6fe         db  0x00 ; '.'
000000000000e6ff         db  0x00 ; '.'
000000000000e700         db  0x2c ; ','
000000000000e701         db  0x4f ; 'O'
000000000000e702         db  0xff ; '.'
000000000000e703         db  0xff ; '.'
000000000000e704         db  0xfc ; '.'
000000000000e705         db  0x06 ; '.'
000000000000e706         db  0x00 ; '.'
000000000000e707         db  0x00 ; '.'
000000000000e708         db  0xbc ; '.'
000000000000e709         db  0x50 ; 'P'
000000000000e70a         db  0xff ; '.'
000000000000e70b         db  0xff ; '.'
000000000000e70c         db  0x48 ; 'H'
000000000000e70d         db  0x07 ; '.'
000000000000e70e         db  0x00 ; '.'
000000000000e70f         db  0x00 ; '.'
000000000000e710         db  0x4c ; 'L'
000000000000e711         db  0x51 ; 'Q'
000000000000e712         db  0xff ; '.'
000000000000e713         db  0xff ; '.'
000000000000e714         db  0x5c ; '\'
000000000000e715         db  0x07 ; '.'
000000000000e716         db  0x00 ; '.'
000000000000e717         db  0x00 ; '.'
000000000000e718         db  0x5c ; '\'
000000000000e719         db  0x52 ; 'R'
000000000000e71a         db  0xff ; '.'
000000000000e71b         db  0xff ; '.'
000000000000e71c         db  0x8c ; '.'
000000000000e71d         db  0x07 ; '.'
000000000000e71e         db  0x00 ; '.'
000000000000e71f         db  0x00 ; '.'
000000000000e720         db  0xcc ; '.'
000000000000e721         db  0x52 ; 'R'
000000000000e722         db  0xff ; '.'
000000000000e723         db  0xff ; '.'
000000000000e724         db  0xb0 ; '.'
000000000000e725         db  0x07 ; '.'
000000000000e726         db  0x00 ; '.'
000000000000e727         db  0x00 ; '.'
000000000000e728         db  0xcc ; '.'
000000000000e729         db  0x53 ; 'S'
000000000000e72a         db  0xff ; '.'
000000000000e72b         db  0xff ; '.'
000000000000e72c         db  0xd4 ; '.'
000000000000e72d         db  0x07 ; '.'
000000000000e72e         db  0x00 ; '.'
000000000000e72f         db  0x00 ; '.'
000000000000e730         db  0x1c ; '.'
000000000000e731         db  0x56 ; 'V'
000000000000e732         db  0xff ; '.'
000000000000e733         db  0xff ; '.'
000000000000e734         db  0x10 ; '.'
000000000000e735         db  0x08 ; '.'
000000000000e736         db  0x00 ; '.'
000000000000e737         db  0x00 ; '.'
000000000000e738         db  0xec ; '.'
000000000000e739         db  0x56 ; 'V'
000000000000e73a         db  0xff ; '.'
000000000000e73b         db  0xff ; '.'
000000000000e73c         db  0x54 ; 'T'
000000000000e73d         db  0x08 ; '.'
000000000000e73e         db  0x00 ; '.'
000000000000e73f         db  0x00 ; '.'
000000000000e740         db  0x7c ; '|'
000000000000e741         db  0x5b ; '['
000000000000e742         db  0xff ; '.'
000000000000e743         db  0xff ; '.'
000000000000e744         db  0xcc ; '.'
000000000000e745         db  0x08 ; '.'
000000000000e746         db  0x00 ; '.'
000000000000e747         db  0x00 ; '.'
000000000000e748         db  0x7c ; '|'
000000000000e749         db  0x5c ; '\'
000000000000e74a         db  0xff ; '.'
000000000000e74b         db  0xff ; '.'
000000000000e74c         db  0x0c ; '.'
000000000000e74d         db  0x09 ; '.'
000000000000e74e         db  0x00 ; '.'
000000000000e74f         db  0x00 ; '.'
000000000000e750         db  0x3c ; '<'
000000000000e751         db  0x6c ; 'l'
000000000000e752         db  0xff ; '.'
000000000000e753         db  0xff ; '.'
000000000000e754         db  0x74 ; 't'
000000000000e755         db  0x09 ; '.'
000000000000e756         db  0x00 ; '.'
000000000000e757         db  0x00 ; '.'
000000000000e758         db  0xac ; '.'
000000000000e759         db  0x71 ; 'q'
000000000000e75a         db  0xff ; '.'
000000000000e75b         db  0xff ; '.'
000000000000e75c         db  0xa0 ; '.'
000000000000e75d         db  0x09 ; '.'
000000000000e75e         db  0x00 ; '.'
000000000000e75f         db  0x00 ; '.'
000000000000e760         db  0x9c ; '.'
000000000000e761         db  0x72 ; 'r'
000000000000e762         db  0xff ; '.'
000000000000e763         db  0xff ; '.'
000000000000e764         db  0x34 ; '4'
000000000000e765         db  0x0a ; '.'
000000000000e766         db  0x00 ; '.'
000000000000e767         db  0x00 ; '.'
000000000000e768         db  0xac ; '.'
000000000000e769         db  0x72 ; 'r'
000000000000e76a         db  0xff ; '.'
000000000000e76b         db  0xff ; '.'
000000000000e76c         db  0x48 ; 'H'
000000000000e76d         db  0x0a ; '.'
000000000000e76e         db  0x00 ; '.'
000000000000e76f         db  0x00 ; '.'
000000000000e770         db  0xbc ; '.'
000000000000e771         db  0x72 ; 'r'
000000000000e772         db  0xff ; '.'
000000000000e773         db  0xff ; '.'
000000000000e774         db  0x5c ; '\'
000000000000e775         db  0x0a ; '.'
000000000000e776         db  0x00 ; '.'
000000000000e777         db  0x00 ; '.'
000000000000e778         db  0x6c ; 'l'
000000000000e779         db  0x73 ; 's'
000000000000e77a         db  0xff ; '.'
000000000000e77b         db  0xff ; '.'
000000000000e77c         db  0x8c ; '.'
000000000000e77d         db  0x0a ; '.'
000000000000e77e         db  0x00 ; '.'
000000000000e77f         db  0x00 ; '.'
000000000000e780         db  0x7c ; '|'
000000000000e781         db  0x73 ; 's'
000000000000e782         db  0xff ; '.'
000000000000e783         db  0xff ; '.'
000000000000e784         db  0xa0 ; '.'
000000000000e785         db  0x0a ; '.'
000000000000e786         db  0x00 ; '.'
000000000000e787         db  0x00 ; '.'
000000000000e788         db  0xac ; '.'
000000000000e789         db  0x73 ; 's'
000000000000e78a         db  0xff ; '.'
000000000000e78b         db  0xff ; '.'
000000000000e78c         db  0xbc ; '.'
000000000000e78d         db  0x0a ; '.'
000000000000e78e         db  0x00 ; '.'
000000000000e78f         db  0x00 ; '.'
000000000000e790         db  0x4c ; 'L'
000000000000e791         db  0x74 ; 't'
000000000000e792         db  0xff ; '.'
000000000000e793         db  0xff ; '.'
000000000000e794         db  0xec ; '.'
000000000000e795         db  0x0a ; '.'
000000000000e796         db  0x00 ; '.'
000000000000e797         db  0x00 ; '.'
000000000000e798         db  0x5c ; '\'
000000000000e799         db  0x74 ; 't'
000000000000e79a         db  0xff ; '.'
000000000000e79b         db  0xff ; '.'
000000000000e79c         db  0x00 ; '.'
000000000000e79d         db  0x0b ; '.'
000000000000e79e         db  0x00 ; '.'
000000000000e79f         db  0x00 ; '.'
000000000000e7a0         db  0xac ; '.'
000000000000e7a1         db  0x74 ; 't'
000000000000e7a2         db  0xff ; '.'
000000000000e7a3         db  0xff ; '.'
000000000000e7a4         db  0x1c ; '.'
000000000000e7a5         db  0x0b ; '.'
000000000000e7a6         db  0x00 ; '.'
000000000000e7a7         db  0x00 ; '.'
000000000000e7a8         db  0x0c ; '.'
000000000000e7a9         db  0x75 ; 'u'
000000000000e7aa         db  0xff ; '.'
000000000000e7ab         db  0xff ; '.'
000000000000e7ac         db  0x3c ; '<'
000000000000e7ad         db  0x0b ; '.'
000000000000e7ae         db  0x00 ; '.'
000000000000e7af         db  0x00 ; '.'
000000000000e7b0         db  0xac ; '.'
000000000000e7b1         db  0x75 ; 'u'
000000000000e7b2         db  0xff ; '.'
000000000000e7b3         db  0xff ; '.'
000000000000e7b4         db  0x54 ; 'T'
000000000000e7b5         db  0x0b ; '.'
000000000000e7b6         db  0x00 ; '.'
000000000000e7b7         db  0x00 ; '.'
000000000000e7b8         db  0x6c ; 'l'
000000000000e7b9         db  0x77 ; 'w'
000000000000e7ba         db  0xff ; '.'
000000000000e7bb         db  0xff ; '.'
000000000000e7bc         db  0xa0 ; '.'
000000000000e7bd         db  0x0b ; '.'
000000000000e7be         db  0x00 ; '.'
000000000000e7bf         db  0x00 ; '.'
000000000000e7c0         db  0x9c ; '.'
000000000000e7c1         db  0x77 ; 'w'
000000000000e7c2         db  0xff ; '.'
000000000000e7c3         db  0xff ; '.'
000000000000e7c4         db  0xcc ; '.'
000000000000e7c5         db  0x0b ; '.'
000000000000e7c6         db  0x00 ; '.'
000000000000e7c7         db  0x00 ; '.'
000000000000e7c8         db  0xec ; '.'
000000000000e7c9         db  0x77 ; 'w'
000000000000e7ca         db  0xff ; '.'
000000000000e7cb         db  0xff ; '.'
000000000000e7cc         db  0xf8 ; '.'
000000000000e7cd         db  0x0b ; '.'
000000000000e7ce         db  0x00 ; '.'
000000000000e7cf         db  0x00 ; '.'
000000000000e7d0         db  0x3c ; '<'
000000000000e7d1         db  0x78 ; 'x'
000000000000e7d2         db  0xff ; '.'
000000000000e7d3         db  0xff ; '.'
000000000000e7d4         db  0x24 ; '$'
000000000000e7d5         db  0x0c ; '.'
000000000000e7d6         db  0x00 ; '.'
000000000000e7d7         db  0x00 ; '.'
000000000000e7d8         db  0xfc ; '.'
000000000000e7d9         db  0x92 ; '.'
000000000000e7da         db  0xff ; '.'
000000000000e7db         db  0xff ; '.'
000000000000e7dc         db  0x9c ; '.'
000000000000e7dd         db  0x0c ; '.'
000000000000e7de         db  0x00 ; '.'
000000000000e7df         db  0x00 ; '.'
000000000000e7e0         db  0x4c ; 'L'
000000000000e7e1         db  0x93 ; '.'
000000000000e7e2         db  0xff ; '.'
000000000000e7e3         db  0xff ; '.'
000000000000e7e4         db  0xcc ; '.'
000000000000e7e5         db  0x0c ; '.'
000000000000e7e6         db  0x00 ; '.'
000000000000e7e7         db  0x00 ; '.'
000000000000e7e8         db  0xec ; '.'
000000000000e7e9         db  0x93 ; '.'
000000000000e7ea         db  0xff ; '.'
000000000000e7eb         db  0xff ; '.'
000000000000e7ec         db  0xec ; '.'
000000000000e7ed         db  0x0c ; '.'
000000000000e7ee         db  0x00 ; '.'
000000000000e7ef         db  0x00 ; '.'
000000000000e7f0         db  0xdc ; '.'
000000000000e7f1         db  0x94 ; '.'
000000000000e7f2         db  0xff ; '.'
000000000000e7f3         db  0xff ; '.'
000000000000e7f4         db  0x30 ; '0'
000000000000e7f5         db  0x0d ; '.'
000000000000e7f6         db  0x00 ; '.'
000000000000e7f7         db  0x00 ; '.'
000000000000e7f8         db  0x1c ; '.'
000000000000e7f9         db  0xa7 ; '.'
000000000000e7fa         db  0xff ; '.'
000000000000e7fb         db  0xff ; '.'
000000000000e7fc         db  0xa8 ; '.'
000000000000e7fd         db  0x0d ; '.'
000000000000e7fe         db  0x00 ; '.'
000000000000e7ff         db  0x00 ; '.'
000000000000e800         db  0xcc ; '.'
000000000000e801         db  0xa8 ; '.'
000000000000e802         db  0xff ; '.'
000000000000e803         db  0xff ; '.'
000000000000e804         db  0x14 ; '.'
000000000000e805         db  0x0e ; '.'
000000000000e806         db  0x00 ; '.'
000000000000e807         db  0x00 ; '.'
000000000000e808         db  0x0c ; '.'
000000000000e809         db  0xa9 ; '.'
000000000000e80a         db  0xff ; '.'
000000000000e80b         db  0xff ; '.'
000000000000e80c         db  0x40 ; '@'
000000000000e80d         db  0x0e ; '.'
000000000000e80e         db  0x00 ; '.'
000000000000e80f         db  0x00 ; '.'
000000000000e810         db  0x2c ; ','
000000000000e811         db  0xa9 ; '.'
000000000000e812         db  0xff ; '.'
000000000000e813         db  0xff ; '.'
000000000000e814         db  0x54 ; 'T'
000000000000e815         db  0x0e ; '.'
000000000000e816         db  0x00 ; '.'
000000000000e817         db  0x00 ; '.'
000000000000e818         db  0x4c ; 'L'
000000000000e819         db  0xa9 ; '.'
000000000000e81a         db  0xff ; '.'
000000000000e81b         db  0xff ; '.'
000000000000e81c         db  0x68 ; 'h'
000000000000e81d         db  0x0e ; '.'
000000000000e81e         db  0x00 ; '.'
000000000000e81f         db  0x00 ; '.'
000000000000e820         db  0x8c ; '.'
000000000000e821         db  0xa9 ; '.'
000000000000e822         db  0xff ; '.'
000000000000e823         db  0xff ; '.'
000000000000e824         db  0x7c ; '|'
000000000000e825         db  0x0e ; '.'
000000000000e826         db  0x00 ; '.'
000000000000e827         db  0x00 ; '.'
000000000000e828         db  0xac ; '.'
000000000000e829         db  0xa9 ; '.'
000000000000e82a         db  0xff ; '.'
000000000000e82b         db  0xff ; '.'
000000000000e82c         db  0x90 ; '.'
000000000000e82d         db  0x0e ; '.'
000000000000e82e         db  0x00 ; '.'
000000000000e82f         db  0x00 ; '.'
000000000000e830         db  0xdc ; '.'
000000000000e831         db  0xa9 ; '.'
000000000000e832         db  0xff ; '.'
000000000000e833         db  0xff ; '.'
000000000000e834         db  0xa4 ; '.'
000000000000e835         db  0x0e ; '.'
000000000000e836         db  0x00 ; '.'
000000000000e837         db  0x00 ; '.'
000000000000e838         db  0x5c ; '\'
000000000000e839         db  0xaa ; '.'
000000000000e83a         db  0xff ; '.'
000000000000e83b         db  0xff ; '.'
000000000000e83c         db  0xf8 ; '.'
000000000000e83d         db  0x0e ; '.'
000000000000e83e         db  0x00 ; '.'
000000000000e83f         db  0x00 ; '.'
000000000000e840         db  0x4c ; 'L'
000000000000e841         db  0xab ; '.'
000000000000e842         db  0xff ; '.'
000000000000e843         db  0xff ; '.'
000000000000e844         db  0x64 ; 'd'
000000000000e845         db  0x0f ; '.'
000000000000e846         db  0x00 ; '.'
000000000000e847         db  0x00 ; '.'
000000000000e848         db  0x5c ; '\'
000000000000e849         db  0xab ; '.'
000000000000e84a         db  0xff ; '.'
000000000000e84b         db  0xff ; '.'
000000000000e84c         db  0x78 ; 'x'
000000000000e84d         db  0x0f ; '.'
000000000000e84e         db  0x00 ; '.'
000000000000e84f         db  0x00 ; '.'
000000000000e850         db  0xfc ; '.'
000000000000e851         db  0xab ; '.'
000000000000e852         db  0xff ; '.'
000000000000e853         db  0xff ; '.'
000000000000e854         db  0xa4 ; '.'
000000000000e855         db  0x0f ; '.'
000000000000e856         db  0x00 ; '.'
000000000000e857         db  0x00 ; '.'
000000000000e858         db  0x1c ; '.'
000000000000e859         db  0xac ; '.'
000000000000e85a         db  0xff ; '.'
000000000000e85b         db  0xff ; '.'
000000000000e85c         db  0xb8 ; '.'
000000000000e85d         db  0x0f ; '.'
000000000000e85e         db  0x00 ; '.'
000000000000e85f         db  0x00 ; '.'
000000000000e860         db  0x2c ; ','
000000000000e861         db  0xac ; '.'
000000000000e862         db  0xff ; '.'
000000000000e863         db  0xff ; '.'
000000000000e864         db  0xcc ; '.'
000000000000e865         db  0x0f ; '.'
000000000000e866         db  0x00 ; '.'
000000000000e867         db  0x00 ; '.'
000000000000e868         db  0x4c ; 'L'
000000000000e869         db  0xac ; '.'
000000000000e86a         db  0xff ; '.'
000000000000e86b         db  0xff ; '.'
000000000000e86c         db  0xe0 ; '.'
000000000000e86d         db  0x0f ; '.'
000000000000e86e         db  0x00 ; '.'
000000000000e86f         db  0x00 ; '.'
000000000000e870         db  0x6c ; 'l'
000000000000e871         db  0xac ; '.'
000000000000e872         db  0xff ; '.'
000000000000e873         db  0xff ; '.'
000000000000e874         db  0xf4 ; '.'
000000000000e875         db  0x0f ; '.'
000000000000e876         db  0x00 ; '.'
000000000000e877         db  0x00 ; '.'
000000000000e878         db  0xfc ; '.'
000000000000e879         db  0xac ; '.'
000000000000e87a         db  0xff ; '.'
000000000000e87b         db  0xff ; '.'
000000000000e87c         db  0x10 ; '.'
000000000000e87d         db  0x10 ; '.'
000000000000e87e         db  0x00 ; '.'
000000000000e87f         db  0x00 ; '.'
000000000000e880         db  0x8c ; '.'
000000000000e881         db  0xad ; '.'
000000000000e882         db  0xff ; '.'
000000000000e883         db  0xff ; '.'
000000000000e884         db  0x2c ; ','
000000000000e885         db  0x10 ; '.'
000000000000e886         db  0x00 ; '.'
000000000000e887         db  0x00 ; '.'
000000000000e888         db  0x9c ; '.'
000000000000e889         db  0xad ; '.'
000000000000e88a         db  0xff ; '.'
000000000000e88b         db  0xff ; '.'
000000000000e88c         db  0x40 ; '@'
000000000000e88d         db  0x10 ; '.'
000000000000e88e         db  0x00 ; '.'
000000000000e88f         db  0x00 ; '.'
000000000000e890         db  0xac ; '.'
000000000000e891         db  0xad ; '.'
000000000000e892         db  0xff ; '.'
000000000000e893         db  0xff ; '.'
000000000000e894         db  0x54 ; 'T'
000000000000e895         db  0x10 ; '.'
000000000000e896         db  0x00 ; '.'
000000000000e897         db  0x00 ; '.'
000000000000e898         db  0x4c ; 'L'
000000000000e899         db  0xae ; '.'
000000000000e89a         db  0xff ; '.'
000000000000e89b         db  0xff ; '.'
000000000000e89c         db  0x70 ; 'p'
000000000000e89d         db  0x10 ; '.'
000000000000e89e         db  0x00 ; '.'
000000000000e89f         db  0x00 ; '.'
000000000000e8a0         db  0x5c ; '\'
000000000000e8a1         db  0xae ; '.'
000000000000e8a2         db  0xff ; '.'
000000000000e8a3         db  0xff ; '.'
000000000000e8a4         db  0x84 ; '.'
000000000000e8a5         db  0x10 ; '.'
000000000000e8a6         db  0x00 ; '.'
000000000000e8a7         db  0x00 ; '.'
000000000000e8a8         db  0x7c ; '|'
000000000000e8a9         db  0xae ; '.'
000000000000e8aa         db  0xff ; '.'
000000000000e8ab         db  0xff ; '.'
000000000000e8ac         db  0x98 ; '.'
000000000000e8ad         db  0x10 ; '.'
000000000000e8ae         db  0x00 ; '.'
000000000000e8af         db  0x00 ; '.'
000000000000e8b0         db  0x8c ; '.'
000000000000e8b1         db  0xae ; '.'
000000000000e8b2         db  0xff ; '.'
000000000000e8b3         db  0xff ; '.'
000000000000e8b4         db  0xac ; '.'
000000000000e8b5         db  0x10 ; '.'
000000000000e8b6         db  0x00 ; '.'
000000000000e8b7         db  0x00 ; '.'
000000000000e8b8         db  0x1c ; '.'
000000000000e8b9         db  0xaf ; '.'
000000000000e8ba         db  0xff ; '.'
000000000000e8bb         db  0xff ; '.'
000000000000e8bc         db  0xc8 ; '.'
000000000000e8bd         db  0x10 ; '.'
000000000000e8be         db  0x00 ; '.'
000000000000e8bf         db  0x00 ; '.'
000000000000e8c0         db  0xbc ; '.'
000000000000e8c1         db  0xaf ; '.'
000000000000e8c2         db  0xff ; '.'
000000000000e8c3         db  0xff ; '.'
000000000000e8c4         db  0xe4 ; '.'
000000000000e8c5         db  0x10 ; '.'
000000000000e8c6         db  0x00 ; '.'
000000000000e8c7         db  0x00 ; '.'
000000000000e8c8         db  0xcc ; '.'
000000000000e8c9         db  0xaf ; '.'
000000000000e8ca         db  0xff ; '.'
000000000000e8cb         db  0xff ; '.'
000000000000e8cc         db  0xf8 ; '.'
000000000000e8cd         db  0x10 ; '.'
000000000000e8ce         db  0x00 ; '.'
000000000000e8cf         db  0x00 ; '.'
000000000000e8d0         db  0xec ; '.'
000000000000e8d1         db  0xaf ; '.'
000000000000e8d2         db  0xff ; '.'
000000000000e8d3         db  0xff ; '.'
000000000000e8d4         db  0x0c ; '.'
000000000000e8d5         db  0x11 ; '.'
000000000000e8d6         db  0x00 ; '.'
000000000000e8d7         db  0x00 ; '.'
000000000000e8d8         db  0x0c ; '.'
000000000000e8d9         db  0xb0 ; '.'
000000000000e8da         db  0xff ; '.'
000000000000e8db         db  0xff ; '.'
000000000000e8dc         db  0x20 ; ' '
000000000000e8dd         db  0x11 ; '.'
000000000000e8de         db  0x00 ; '.'
000000000000e8df         db  0x00 ; '.'
000000000000e8e0         db  0x1c ; '.'
000000000000e8e1         db  0xb0 ; '.'
000000000000e8e2         db  0xff ; '.'
000000000000e8e3         db  0xff ; '.'
000000000000e8e4         db  0x34 ; '4'
000000000000e8e5         db  0x11 ; '.'
000000000000e8e6         db  0x00 ; '.'
000000000000e8e7         db  0x00 ; '.'
000000000000e8e8         db  0x3c ; '<'
000000000000e8e9         db  0xb0 ; '.'
000000000000e8ea         db  0xff ; '.'
000000000000e8eb         db  0xff ; '.'
000000000000e8ec         db  0x48 ; 'H'
000000000000e8ed         db  0x11 ; '.'
000000000000e8ee         db  0x00 ; '.'
000000000000e8ef         db  0x00 ; '.'
000000000000e8f0         db  0x5c ; '\'
000000000000e8f1         db  0xb0 ; '.'
000000000000e8f2         db  0xff ; '.'
000000000000e8f3         db  0xff ; '.'
000000000000e8f4         db  0x5c ; '\'
000000000000e8f5         db  0x11 ; '.'
000000000000e8f6         db  0x00 ; '.'
000000000000e8f7         db  0x00 ; '.'
000000000000e8f8         db  0x7c ; '|'
000000000000e8f9         db  0xb0 ; '.'
000000000000e8fa         db  0xff ; '.'
000000000000e8fb         db  0xff ; '.'
000000000000e8fc         db  0x74 ; 't'
000000000000e8fd         db  0x11 ; '.'
000000000000e8fe         db  0x00 ; '.'
000000000000e8ff         db  0x00 ; '.'
000000000000e900         db  0x8c ; '.'
000000000000e901         db  0xb0 ; '.'
000000000000e902         db  0xff ; '.'
000000000000e903         db  0xff ; '.'
000000000000e904         db  0x8c ; '.'
000000000000e905         db  0x11 ; '.'
000000000000e906         db  0x00 ; '.'
000000000000e907         db  0x00 ; '.'
000000000000e908         db  0xac ; '.'
000000000000e909         db  0xb4 ; '.'
000000000000e90a         db  0xff ; '.'
000000000000e90b         db  0xff ; '.'
000000000000e90c         db  0xa0 ; '.'
000000000000e90d         db  0x12 ; '.'
000000000000e90e         db  0x00 ; '.'
000000000000e90f         db  0x00 ; '.'
000000000000e910         db  0xcc ; '.'
000000000000e911         db  0xb4 ; '.'
000000000000e912         db  0xff ; '.'
000000000000e913         db  0xff ; '.'
000000000000e914         db  0xb4 ; '.'
000000000000e915         db  0x12 ; '.'
000000000000e916         db  0x00 ; '.'
000000000000e917         db  0x00 ; '.'
000000000000e918         db  0x4c ; 'L'
000000000000e919         db  0xb5 ; '.'
000000000000e91a         db  0xff ; '.'
000000000000e91b         db  0xff ; '.'
000000000000e91c         db  0xd0 ; '.'
000000000000e91d         db  0x12 ; '.'
000000000000e91e         db  0x00 ; '.'
000000000000e91f         db  0x00 ; '.'
000000000000e920         db  0x2c ; ','
000000000000e921         db  0xb6 ; '.'
000000000000e922         db  0xff ; '.'
000000000000e923         db  0xff ; '.'
000000000000e924         db  0xfc ; '.'
000000000000e925         db  0x12 ; '.'
000000000000e926         db  0x00 ; '.'
000000000000e927         db  0x00 ; '.'
000000000000e928         db  0xac ; '.'
000000000000e929         db  0xb6 ; '.'
000000000000e92a         db  0xff ; '.'
000000000000e92b         db  0xff ; '.'
000000000000e92c         db  0x1c ; '.'
000000000000e92d         db  0x13 ; '.'
000000000000e92e         db  0x00 ; '.'
000000000000e92f         db  0x00 ; '.'
000000000000e930         db  0xcc ; '.'
000000000000e931         db  0xb6 ; '.'
000000000000e932         db  0xff ; '.'
000000000000e933         db  0xff ; '.'
000000000000e934         db  0x38 ; '8'
000000000000e935         db  0x13 ; '.'
000000000000e936         db  0x00 ; '.'
000000000000e937         db  0x00 ; '.'
000000000000e938         db  0xfc ; '.'
000000000000e939         db  0xb6 ; '.'
000000000000e93a         db  0xff ; '.'
000000000000e93b         db  0xff ; '.'
000000000000e93c         db  0x4c ; 'L'
000000000000e93d         db  0x13 ; '.'
000000000000e93e         db  0x00 ; '.'
000000000000e93f         db  0x00 ; '.'
000000000000e940         db  0x0c ; '.'
000000000000e941         db  0xb7 ; '.'
000000000000e942         db  0xff ; '.'
000000000000e943         db  0xff ; '.'
000000000000e944         db  0x60 ; '`'
000000000000e945         db  0x13 ; '.'
000000000000e946         db  0x00 ; '.'
000000000000e947         db  0x00 ; '.'
000000000000e948         db  0x4c ; 'L'
000000000000e949         db  0xb7 ; '.'
000000000000e94a         db  0xff ; '.'
000000000000e94b         db  0xff ; '.'
000000000000e94c         db  0x84 ; '.'
000000000000e94d         db  0x13 ; '.'
000000000000e94e         db  0x00 ; '.'
000000000000e94f         db  0x00 ; '.'
000000000000e950         db  0x7c ; '|'
000000000000e951         db  0xb7 ; '.'
000000000000e952         db  0xff ; '.'
000000000000e953         db  0xff ; '.'
000000000000e954         db  0x98 ; '.'
000000000000e955         db  0x13 ; '.'
000000000000e956         db  0x00 ; '.'
000000000000e957         db  0x00 ; '.'
000000000000e958         db  0x0c ; '.'
000000000000e959         db  0xb8 ; '.'
000000000000e95a         db  0xff ; '.'
000000000000e95b         db  0xff ; '.'
000000000000e95c         db  0xb0 ; '.'
000000000000e95d         db  0x13 ; '.'
000000000000e95e         db  0x00 ; '.'
000000000000e95f         db  0x00 ; '.'
000000000000e960         db  0x5c ; '\'
000000000000e961         db  0xb8 ; '.'
000000000000e962         db  0xff ; '.'
000000000000e963         db  0xff ; '.'
000000000000e964         db  0xc8 ; '.'
000000000000e965         db  0x13 ; '.'
000000000000e966         db  0x00 ; '.'
000000000000e967         db  0x00 ; '.'
000000000000e968         db  0x7c ; '|'
000000000000e969         db  0xb8 ; '.'
000000000000e96a         db  0xff ; '.'
000000000000e96b         db  0xff ; '.'
000000000000e96c         db  0xe4 ; '.'
000000000000e96d         db  0x13 ; '.'
000000000000e96e         db  0x00 ; '.'
000000000000e96f         db  0x00 ; '.'
000000000000e970         db  0xac ; '.'
000000000000e971         db  0xb8 ; '.'
000000000000e972         db  0xff ; '.'
000000000000e973         db  0xff ; '.'
000000000000e974         db  0x00 ; '.'
000000000000e975         db  0x14 ; '.'
000000000000e976         db  0x00 ; '.'
000000000000e977         db  0x00 ; '.'
000000000000e978         db  0xdc ; '.'
000000000000e979         db  0xb8 ; '.'
000000000000e97a         db  0xff ; '.'
000000000000e97b         db  0xff ; '.'
000000000000e97c         db  0x28 ; '('
000000000000e97d         db  0x14 ; '.'
000000000000e97e         db  0x00 ; '.'
000000000000e97f         db  0x00 ; '.'
000000000000e980         db  0xfc ; '.'
000000000000e981         db  0xb8 ; '.'
000000000000e982         db  0xff ; '.'
000000000000e983         db  0xff ; '.'
000000000000e984         db  0x44 ; 'D'
000000000000e985         db  0x14 ; '.'
000000000000e986         db  0x00 ; '.'
000000000000e987         db  0x00 ; '.'
000000000000e988         db  0x3c ; '<'
000000000000e989         db  0xb9 ; '.'
000000000000e98a         db  0xff ; '.'
000000000000e98b         db  0xff ; '.'
000000000000e98c         db  0x5c ; '\'
000000000000e98d         db  0x14 ; '.'
000000000000e98e         db  0x00 ; '.'
000000000000e98f         db  0x00 ; '.'
000000000000e990         db  0x5c ; '\'
000000000000e991         db  0xba ; '.'
000000000000e992         db  0xff ; '.'
000000000000e993         db  0xff ; '.'
000000000000e994         db  0xa8 ; '.'
000000000000e995         db  0x14 ; '.'
000000000000e996         db  0x00 ; '.'
000000000000e997         db  0x00 ; '.'
000000000000e998         db  0x8c ; '.'
000000000000e999         db  0xba ; '.'
000000000000e99a         db  0xff ; '.'
000000000000e99b         db  0xff ; '.'
000000000000e99c         db  0xc4 ; '.'
000000000000e99d         db  0x14 ; '.'
000000000000e99e         db  0x00 ; '.'
000000000000e99f         db  0x00 ; '.'
000000000000e9a0         db  0x4c ; 'L'
000000000000e9a1         db  0xc1 ; '.'
000000000000e9a2         db  0xff ; '.'
000000000000e9a3         db  0xff ; '.'
000000000000e9a4         db  0x14 ; '.'
000000000000e9a5         db  0x15 ; '.'
000000000000e9a6         db  0x00 ; '.'
000000000000e9a7         db  0x00 ; '.'
000000000000e9a8         db  0x0c ; '.'
000000000000e9a9         db  0xc8 ; '.'
000000000000e9aa         db  0xff ; '.'
000000000000e9ab         db  0xff ; '.'
000000000000e9ac         db  0x64 ; 'd'
000000000000e9ad         db  0x15 ; '.'
000000000000e9ae         db  0x00 ; '.'
000000000000e9af         db  0x00 ; '.'
000000000000e9b0         db  0xbc ; '.'
000000000000e9b1         db  0xc8 ; '.'
000000000000e9b2         db  0xff ; '.'
000000000000e9b3         db  0xff ; '.'
000000000000e9b4         db  0x8c ; '.'
000000000000e9b5         db  0x15 ; '.'
000000000000e9b6         db  0x00 ; '.'
000000000000e9b7         db  0x00 ; '.'
000000000000e9b8         db  0xdc ; '.'
000000000000e9b9         db  0xcc ; '.'
000000000000e9ba         db  0xff ; '.'
000000000000e9bb         db  0xff ; '.'
000000000000e9bc         db  0xdc ; '.'
000000000000e9bd         db  0x15 ; '.'
000000000000e9be         db  0x00 ; '.'
000000000000e9bf         db  0x00 ; '.'
000000000000e9c0         db  0x5c ; '\'
000000000000e9c1         db  0xcd ; '.'
000000000000e9c2         db  0xff ; '.'
000000000000e9c3         db  0xff ; '.'
000000000000e9c4         db  0x14 ; '.'
000000000000e9c5         db  0x16 ; '.'
000000000000e9c6         db  0x00 ; '.'
000000000000e9c7         db  0x00 ; '.'
000000000000e9c8         db  0xdc ; '.'
000000000000e9c9         db  0xcf ; '.'
000000000000e9ca         db  0xff ; '.'
000000000000e9cb         db  0xff ; '.'
000000000000e9cc         db  0x4c ; 'L'
000000000000e9cd         db  0x16 ; '.'
000000000000e9ce         db  0x00 ; '.'
000000000000e9cf         db  0x00 ; '.'
000000000000e9d0         db  0x1c ; '.'
000000000000e9d1         db  0xd0 ; '.'
000000000000e9d2         db  0xff ; '.'
000000000000e9d3         db  0xff ; '.'
000000000000e9d4         db  0x6c ; 'l'
000000000000e9d5         db  0x16 ; '.'
000000000000e9d6         db  0x00 ; '.'
000000000000e9d7         db  0x00 ; '.'
000000000000e9d8         db  0x7c ; '|'
000000000000e9d9         db  0xd0 ; '.'
000000000000e9da         db  0xff ; '.'
000000000000e9db         db  0xff ; '.'
000000000000e9dc         db  0x9c ; '.'
000000000000e9dd         db  0x16 ; '.'
000000000000e9de         db  0x00 ; '.'
000000000000e9df         db  0x00 ; '.'
000000000000e9e0         db  0x0c ; '.'
000000000000e9e1         db  0xd1 ; '.'
000000000000e9e2         db  0xff ; '.'
000000000000e9e3         db  0xff ; '.'
000000000000e9e4         db  0xdc ; '.'
000000000000e9e5         db  0x16 ; '.'
000000000000e9e6         db  0x00 ; '.'
000000000000e9e7         db  0x00 ; '.'
000000000000e9e8         db  0x3c ; '<'
000000000000e9e9         db  0xd1 ; '.'
000000000000e9ea         db  0xff ; '.'
000000000000e9eb         db  0xff ; '.'
000000000000e9ec         db  0xf0 ; '.'
000000000000e9ed         db  0x16 ; '.'
000000000000e9ee         db  0x00 ; '.'
000000000000e9ef         db  0x00 ; '.'
000000000000e9f0         db  0x6c ; 'l'
000000000000e9f1         db  0xd1 ; '.'
000000000000e9f2         db  0xff ; '.'
000000000000e9f3         db  0xff ; '.'
000000000000e9f4         db  0x0c ; '.'
000000000000e9f5         db  0x17 ; '.'
000000000000e9f6         db  0x00 ; '.'
000000000000e9f7         db  0x00 ; '.'
000000000000e9f8         db  0xcc ; '.'
000000000000e9f9         db  0xd1 ; '.'
000000000000e9fa         db  0xff ; '.'
000000000000e9fb         db  0xff ; '.'
000000000000e9fc         db  0x48 ; 'H'
000000000000e9fd         db  0x17 ; '.'
000000000000e9fe         db  0x00 ; '.'
000000000000e9ff         db  0x00 ; '.'
000000000000ea00         db  0x5c ; '\'
000000000000ea01         db  0xd2 ; '.'
000000000000ea02         db  0xff ; '.'
000000000000ea03         db  0xff ; '.'
000000000000ea04         db  0x80 ; '.'
000000000000ea05         db  0x17 ; '.'
000000000000ea06         db  0x00 ; '.'
000000000000ea07         db  0x00 ; '.'
000000000000ea08         db  0x9c ; '.'
000000000000ea09         db  0xd3 ; '.'
000000000000ea0a         db  0xff ; '.'
000000000000ea0b         db  0xff ; '.'
000000000000ea0c         db  0xcc ; '.'
000000000000ea0d         db  0x17 ; '.'
000000000000ea0e         db  0x00 ; '.'
000000000000ea0f         db  0x00 ; '.'
000000000000ea10         db  0x7c ; '|'
000000000000ea11         db  0xd4 ; '.'
000000000000ea12         db  0xff ; '.'
000000000000ea13         db  0xff ; '.'
000000000000ea14         db  0x20 ; ' '
000000000000ea15         db  0x18 ; '.'
000000000000ea16         db  0x00 ; '.'
000000000000ea17         db  0x00 ; '.'
000000000000ea18         db  0x8c ; '.'
000000000000ea19         db  0xd4 ; '.'
000000000000ea1a         db  0xff ; '.'
000000000000ea1b         db  0xff ; '.'
000000000000ea1c         db  0x34 ; '4'
000000000000ea1d         db  0x18 ; '.'
000000000000ea1e         db  0x00 ; '.'
000000000000ea1f         db  0x00 ; '.'
000000000000ea20         db  0x3c ; '<'
000000000000ea21         db  0xd5 ; '.'
000000000000ea22         db  0xff ; '.'
000000000000ea23         db  0xff ; '.'
000000000000ea24         db  0x94 ; '.'
000000000000ea25         db  0x18 ; '.'
000000000000ea26         db  0x00 ; '.'
000000000000ea27         db  0x00 ; '.'
000000000000ea28         db  0x8c ; '.'
000000000000ea29         db  0xd6 ; '.'
000000000000ea2a         db  0xff ; '.'
000000000000ea2b         db  0xff ; '.'
000000000000ea2c         db  0xcc ; '.'
000000000000ea2d         db  0x18 ; '.'
000000000000ea2e         db  0x00 ; '.'
000000000000ea2f         db  0x00 ; '.'
000000000000ea30         db  0x0c ; '.'
000000000000ea31         db  0xd7 ; '.'
000000000000ea32         db  0xff ; '.'
000000000000ea33         db  0xff ; '.'
000000000000ea34         db  0x1c ; '.'
000000000000ea35         db  0x19 ; '.'
000000000000ea36         db  0x00 ; '.'
000000000000ea37         db  0x00 ; '.'
000000000000ea38         db  0x4c ; 'L'
000000000000ea39         db  0xd7 ; '.'
000000000000ea3a         db  0xff ; '.'
000000000000ea3b         db  0xff ; '.'
000000000000ea3c         db  0x3c ; '<'
000000000000ea3d         db  0x19 ; '.'
000000000000ea3e         db  0x00 ; '.'
000000000000ea3f         db  0x00 ; '.'
000000000000ea40         db  0xbc ; '.'
000000000000ea41         db  0xd7 ; '.'
000000000000ea42         db  0xff ; '.'
000000000000ea43         db  0xff ; '.'
000000000000ea44         db  0x84 ; '.'
000000000000ea45         db  0x19 ; '.'
000000000000ea46         db  0x00 ; '.'
000000000000ea47         db  0x00 ; '.'
000000000000ea48         db  0xcc ; '.'
000000000000ea49         db  0xd7 ; '.'
000000000000ea4a         db  0xff ; '.'
000000000000ea4b         db  0xff ; '.'
000000000000ea4c         db  0x9c ; '.'
000000000000ea4d         db  0x19 ; '.'
000000000000ea4e         db  0x00 ; '.'
000000000000ea4f         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xea50; 0x10018[ (5576 bytes)
        ; File offset : [59984; 65560[ (5576 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000ea50         dd         0x00000014                                  ; Length of the record
000000000000ea54         dd         0x00000000                                  ; CIE ID
000000000000ea58         db         0x01                                        ; Version
000000000000ea59         db         "zR", 0                                     ; Augmentation String
000000000000ea5c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000ea5d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000ea5e         db         0x10                                        ; Return address register
000000000000ea5f         db         0x01                                        ; Augmentation data length
000000000000ea60         db         0x1b                                        ; FDE encoding
000000000000ea61         db  0x0c ; '.'
000000000000ea62         db  0x07 ; '.'
000000000000ea63         db  0x08 ; '.'
000000000000ea64         db  0x90 ; '.'
000000000000ea65         db  0x01 ; '.'
000000000000ea66         db  0x07 ; '.'
000000000000ea67         db  0x10 ; '.'
000000000000ea68         dd         0x00000014                                  ; Length of the record
000000000000ea6c         dd         0x0000001c                                  ; FDE: parent CIE at 0xea50 (FDE encoding = 0x1B)
000000000000ea70         db         0xa0, 0x3e, 2 dup (0xff)                    ; begin 0x2910
000000000000ea74         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x293b)
000000000000ea78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ea79         align      128
000000000000ea80         dd         0x00000014                                  ; Length of the record
000000000000ea84         dd         0x00000000                                  ; CIE ID
000000000000ea88         db         0x01                                        ; Version
000000000000ea89         db         "zR", 0                                     ; Augmentation String
000000000000ea8c         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000ea8d         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000ea8e         db         0x10                                        ; Return address register
000000000000ea8f         db         0x01                                        ; Augmentation data length
000000000000ea90         db         0x1b                                        ; FDE encoding
000000000000ea91         db  0x0c ; '.'
000000000000ea92         db  0x07 ; '.'
000000000000ea93         db  0x08 ; '.'
000000000000ea94         db  0x90 ; '.'
000000000000ea95         db  0x01 ; '.'
000000000000ea96         db  0x00 ; '.'
000000000000ea97         db  0x00 ; '.'
000000000000ea98         dd         0x00000024                                  ; Length of the record
000000000000ea9c         dd         0x0000001c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eaa0         db         0xb0, 0x30, 2 dup (0xff)                    ; begin 0x1b50
000000000000eaa4         db         0x60, 0x04, 2 dup (0x00)                    ; length 0x460 (end at 0x1fb0)
000000000000eaa8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eaa9         db  0x0e ; '.'
000000000000eaaa         db  0x10 ; '.'
000000000000eaab         db  0x46 ; 'F'
000000000000eaac         db  0x0e ; '.'
000000000000eaad         db  0x18 ; '.'
000000000000eaae         db  0x4a ; 'J'
000000000000eaaf         db  0x0f ; '.'
000000000000eab0         db  0x0b ; '.'
000000000000eab1         db  0x77 ; 'w'
000000000000eab2         db  0x08 ; '.'
000000000000eab3         db  0x80 ; '.'
000000000000eab4         db  0x00 ; '.'
000000000000eab5         db  0x3f ; '?'
000000000000eab6         db  0x1a ; '.'
000000000000eab7         db  0x3b ; ';'
000000000000eab8         db  0x2a ; '*'
000000000000eab9         db  0x33 ; '3'
000000000000eaba         db  0x24 ; '$'
000000000000eabb         db  0x22 ; '"'
000000000000eabc         db  0x00 ; '.'
000000000000eabd         db  0x00 ; '.'
000000000000eabe         db  0x00 ; '.'
000000000000eabf         db  0x00 ; '.'
000000000000eac0         dd         0x00000014                                  ; Length of the record
000000000000eac4         dd         0x00000044                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eac8         db         0xe8, 0x34, 2 dup (0xff)                    ; begin 0x1fb0
000000000000eacc         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x1fb8)
000000000000ead0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ead1         align      8
000000000000ead8         dd         0x00000010                                  ; Length of the record
000000000000eadc         dd         0x0000005c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eae0         db         0x40, 0x3f, 2 dup (0xff)                    ; begin 0x2a20
000000000000eae4         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x2a78)
000000000000eae8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eae9         align      4
000000000000eaec         dd         0x00000010                                  ; Length of the record
000000000000eaf0         dd         0x00000070                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eaf4         db         0x8c, 0x3f, 2 dup (0xff)                    ; begin 0x2a80
000000000000eaf8         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x2af3)
000000000000eafc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eafd         align      256
000000000000eb00         dd         0x00000018                                  ; Length of the record
000000000000eb04         dd         0x00000084                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eb08         db         0xf8, 0x3f, 2 dup (0xff)                    ; begin 0x2b00
000000000000eb0c         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x2b49)
000000000000eb10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb11         db  0x47 ; 'G'
000000000000eb12         db  0x0e ; '.'
000000000000eb13         db  0x10 ; '.'
000000000000eb14         db  0x83 ; '.'
000000000000eb15         db  0x02 ; '.'
000000000000eb16         db  0x02 ; '.'
000000000000eb17         db  0x41 ; 'A'
000000000000eb18         db  0x0e ; '.'
000000000000eb19         db  0x08 ; '.'
000000000000eb1a         db  0x00 ; '.'
000000000000eb1b         db  0x00 ; '.'
000000000000eb1c         dd         0x00000010                                  ; Length of the record
000000000000eb20         dd         0x000000a0                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eb24         db         0x2c, 0x40, 2 dup (0xff)                    ; begin 0x2b50
000000000000eb28         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x2b78)
000000000000eb2c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb2d         db  0x52 ; 'R'
000000000000eb2e         db  0x0e ; '.'
000000000000eb2f         db  0x10 ; '.'
000000000000eb30         dd         0x00000040                                  ; Length of the record
000000000000eb34         dd         0x000000b4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eb38         db         0x48, 0x40, 2 dup (0xff)                    ; begin 0x2b80
000000000000eb3c         db         0x25, 0x01, 2 dup (0x00)                    ; length 0x125 (end at 0x2ca5)
000000000000eb40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb41         db  0x42 ; 'B'
000000000000eb42         db  0x0e ; '.'
000000000000eb43         db  0x10 ; '.'
000000000000eb44         db  0x8e ; '.'
000000000000eb45         db  0x02 ; '.'
000000000000eb46         db  0x42 ; 'B'
000000000000eb47         db  0x0e ; '.'
000000000000eb48         db  0x18 ; '.'
000000000000eb49         db  0x8d ; '.'
000000000000eb4a         db  0x03 ; '.'
000000000000eb4b         db  0x49 ; 'I'
000000000000eb4c         db  0x0e ; '.'
000000000000eb4d         db  0x20 ; ' '
000000000000eb4e         db  0x8c ; '.'
000000000000eb4f         db  0x04 ; '.'
000000000000eb50         db  0x41 ; 'A'
000000000000eb51         db  0x0e ; '.'
000000000000eb52         db  0x28 ; '('
000000000000eb53         db  0x86 ; '.'
000000000000eb54         db  0x05 ; '.'
000000000000eb55         db  0x44 ; 'D'
000000000000eb56         db  0x0e ; '.'
000000000000eb57         db  0x30 ; '0'
000000000000eb58         db  0x83 ; '.'
000000000000eb59         db  0x06 ; '.'
000000000000eb5a         db  0x52 ; 'R'
000000000000eb5b         db  0x0e ; '.'
000000000000eb5c         db  0x50 ; 'P'
000000000000eb5d         db  0x02 ; '.'
000000000000eb5e         db  0xca ; '.'
000000000000eb5f         db  0x0a ; '.'
000000000000eb60         db  0x0e ; '.'
000000000000eb61         db  0x30 ; '0'
000000000000eb62         db  0x41 ; 'A'
000000000000eb63         db  0x0e ; '.'
000000000000eb64         db  0x28 ; '('
000000000000eb65         db  0x41 ; 'A'
000000000000eb66         db  0x0e ; '.'
000000000000eb67         db  0x20 ; ' '
000000000000eb68         db  0x42 ; 'B'
000000000000eb69         db  0x0e ; '.'
000000000000eb6a         db  0x18 ; '.'
000000000000eb6b         db  0x42 ; 'B'
000000000000eb6c         db  0x0e ; '.'
000000000000eb6d         db  0x10 ; '.'
000000000000eb6e         db  0x42 ; 'B'
000000000000eb6f         db  0x0e ; '.'
000000000000eb70         db  0x08 ; '.'
000000000000eb71         db  0x4a ; 'J'
000000000000eb72         db  0x0b ; '.'
000000000000eb73         db  0x00 ; '.'
000000000000eb74         dd         0x00000018                                  ; Length of the record
000000000000eb78         dd         0x000000f8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eb7c         db         0x34, 0x41, 2 dup (0xff)                    ; begin 0x2cb0
000000000000eb80         db         0x25, 3 dup (0x00)                          ; length 0x25 (end at 0x2cd5)
000000000000eb84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eb85         db  0x41 ; 'A'
000000000000eb86         db  0x0e ; '.'
000000000000eb87         db  0x10 ; '.'
000000000000eb88         db  0x83 ; '.'
000000000000eb89         db  0x02 ; '.'
000000000000eb8a         db  0x5e ; '^'
000000000000eb8b         db  0x0a ; '.'
000000000000eb8c         db  0x0e ; '.'
000000000000eb8d         db  0x08 ; '.'
000000000000eb8e         db  0x41 ; 'A'
000000000000eb8f         db  0x0b ; '.'
000000000000eb90         dd         0x00000018                                  ; Length of the record
000000000000eb94         dd         0x00000114                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eb98         db         0x48, 0x41, 2 dup (0xff)                    ; begin 0x2ce0
000000000000eb9c         db         0x45, 3 dup (0x00)                          ; length 0x45 (end at 0x2d25)
000000000000eba0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eba1         db  0x41 ; 'A'
000000000000eba2         db  0x0e ; '.'
000000000000eba3         db  0x10 ; '.'
000000000000eba4         db  0x83 ; '.'
000000000000eba5         db  0x02 ; '.'
000000000000eba6         db  0x02 ; '.'
000000000000eba7         db  0x43 ; 'C'
000000000000eba8         db  0x0e ; '.'
000000000000eba9         db  0x08 ; '.'
000000000000ebaa         db  0x00 ; '.'
000000000000ebab         db  0x00 ; '.'
000000000000ebac         dd         0x0000004c                                  ; Length of the record
000000000000ebb0         dd         0x00000130                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ebb4         db         0x7c, 0x41, 2 dup (0xff)                    ; begin 0x2d30
000000000000ebb8         db         0x19, 0x02, 2 dup (0x00)                    ; length 0x219 (end at 0x2f49)
000000000000ebbc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ebbd         db  0x42 ; 'B'
000000000000ebbe         db  0x0e ; '.'
000000000000ebbf         db  0x10 ; '.'
000000000000ebc0         db  0x8f ; '.'
000000000000ebc1         db  0x02 ; '.'
000000000000ebc2         db  0x42 ; 'B'
000000000000ebc3         db  0x0e ; '.'
000000000000ebc4         db  0x18 ; '.'
000000000000ebc5         db  0x8e ; '.'
000000000000ebc6         db  0x03 ; '.'
000000000000ebc7         db  0x47 ; 'G'
000000000000ebc8         db  0x0e ; '.'
000000000000ebc9         db  0x20 ; ' '
000000000000ebca         db  0x8d ; '.'
000000000000ebcb         db  0x04 ; '.'
000000000000ebcc         db  0x42 ; 'B'
000000000000ebcd         db  0x0e ; '.'
000000000000ebce         db  0x28 ; '('
000000000000ebcf         db  0x8c ; '.'
000000000000ebd0         db  0x05 ; '.'
000000000000ebd1         db  0x44 ; 'D'
000000000000ebd2         db  0x0e ; '.'
000000000000ebd3         db  0x30 ; '0'
000000000000ebd4         db  0x86 ; '.'
000000000000ebd5         db  0x06 ; '.'
000000000000ebd6         db  0x41 ; 'A'
000000000000ebd7         db  0x0e ; '.'
000000000000ebd8         db  0x38 ; '8'
000000000000ebd9         db  0x83 ; '.'
000000000000ebda         db  0x07 ; '.'
000000000000ebdb         db  0x54 ; 'T'
000000000000ebdc         db  0x0e ; '.'
000000000000ebdd         db  0xc0 ; '.'
000000000000ebde         db  0x02 ; '.'
000000000000ebdf         db  0x03 ; '.'
000000000000ebe0         db  0x34 ; '4'
000000000000ebe1         db  0x01 ; '.'
000000000000ebe2         db  0x0a ; '.'
000000000000ebe3         db  0x0e ; '.'
000000000000ebe4         db  0x38 ; '8'
000000000000ebe5         db  0x41 ; 'A'
000000000000ebe6         db  0x0e ; '.'
000000000000ebe7         db  0x30 ; '0'
000000000000ebe8         db  0x41 ; 'A'
000000000000ebe9         db  0x0e ; '.'
000000000000ebea         db  0x28 ; '('
000000000000ebeb         db  0x42 ; 'B'
000000000000ebec         db  0x0e ; '.'
000000000000ebed         db  0x20 ; ' '
000000000000ebee         db  0x42 ; 'B'
000000000000ebef         db  0x0e ; '.'
000000000000ebf0         db  0x18 ; '.'
000000000000ebf1         db  0x42 ; 'B'
000000000000ebf2         db  0x0e ; '.'
000000000000ebf3         db  0x10 ; '.'
000000000000ebf4         db  0x42 ; 'B'
000000000000ebf5         db  0x0e ; '.'
000000000000ebf6         db  0x08 ; '.'
000000000000ebf7         db  0x44 ; 'D'
000000000000ebf8         db  0x0b ; '.'
000000000000ebf9         db  0x00 ; '.'
000000000000ebfa         db  0x00 ; '.'
000000000000ebfb         db  0x00 ; '.'
000000000000ebfc         dd         0x00000034                                  ; Length of the record
000000000000ec00         dd         0x00000180                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ec04         db         0x4c, 0x43, 2 dup (0xff)                    ; begin 0x2f50
000000000000ec08         db         0x6c, 3 dup (0x00)                          ; length 0x6c (end at 0x2fbc)
000000000000ec0c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec0d         db  0x41 ; 'A'
000000000000ec0e         db  0x0e ; '.'
000000000000ec0f         db  0x10 ; '.'
000000000000ec10         db  0x86 ; '.'
000000000000ec11         db  0x02 ; '.'
000000000000ec12         db  0x41 ; 'A'
000000000000ec13         db  0x0e ; '.'
000000000000ec14         db  0x18 ; '.'
000000000000ec15         db  0x83 ; '.'
000000000000ec16         db  0x03 ; '.'
000000000000ec17         db  0x46 ; 'F'
000000000000ec18         db  0x0e ; '.'
000000000000ec19         db  0x20 ; ' '
000000000000ec1a         db  0x02 ; '.'
000000000000ec1b         db  0x43 ; 'C'
000000000000ec1c         db  0x0a ; '.'
000000000000ec1d         db  0x0e ; '.'
000000000000ec1e         db  0x18 ; '.'
000000000000ec1f         db  0x41 ; 'A'
000000000000ec20         db  0x0e ; '.'
000000000000ec21         db  0x10 ; '.'
000000000000ec22         db  0x41 ; 'A'
000000000000ec23         db  0x0e ; '.'
000000000000ec24         db  0x08 ; '.'
000000000000ec25         db  0x43 ; 'C'
000000000000ec26         db  0x0b ; '.'
000000000000ec27         db  0x4c ; 'L'
000000000000ec28         db  0x0a ; '.'
000000000000ec29         db  0x0e ; '.'
000000000000ec2a         db  0x18 ; '.'
000000000000ec2b         db  0x41 ; 'A'
000000000000ec2c         db  0x0e ; '.'
000000000000ec2d         db  0x10 ; '.'
000000000000ec2e         db  0x41 ; 'A'
000000000000ec2f         db  0x0e ; '.'
000000000000ec30         db  0x08 ; '.'
000000000000ec31         db  0x42 ; 'B'
000000000000ec32         db  0x0b ; '.'
000000000000ec33         db  0x00 ; '.'
000000000000ec34         dd         0x0000002c                                  ; Length of the record
000000000000ec38         dd         0x000001b8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ec3c         db         0x84, 0x43, 2 dup (0xff)                    ; begin 0x2fc0
000000000000ec40         db         0xcc, 3 dup (0x00)                          ; length 0xcc (end at 0x308c)
000000000000ec44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec45         db  0x42 ; 'B'
000000000000ec46         db  0x0e ; '.'
000000000000ec47         db  0x10 ; '.'
000000000000ec48         db  0x8c ; '.'
000000000000ec49         db  0x02 ; '.'
000000000000ec4a         db  0x48 ; 'H'
000000000000ec4b         db  0x0e ; '.'
000000000000ec4c         db  0x18 ; '.'
000000000000ec4d         db  0x86 ; '.'
000000000000ec4e         db  0x03 ; '.'
000000000000ec4f         db  0x47 ; 'G'
000000000000ec50         db  0x0e ; '.'
000000000000ec51         db  0x20 ; ' '
000000000000ec52         db  0x83 ; '.'
000000000000ec53         db  0x04 ; '.'
000000000000ec54         db  0x02 ; '.'
000000000000ec55         db  0x80 ; '.'
000000000000ec56         db  0x0a ; '.'
000000000000ec57         db  0x0e ; '.'
000000000000ec58         db  0x18 ; '.'
000000000000ec59         db  0x52 ; 'R'
000000000000ec5a         db  0x0e ; '.'
000000000000ec5b         db  0x10 ; '.'
000000000000ec5c         db  0x42 ; 'B'
000000000000ec5d         db  0x0e ; '.'
000000000000ec5e         db  0x08 ; '.'
000000000000ec5f         db  0x4b ; 'K'
000000000000ec60         db  0x0b ; '.'
000000000000ec61         db  0x00 ; '.'
000000000000ec62         db  0x00 ; '.'
000000000000ec63         db  0x00 ; '.'
000000000000ec64         dd         0x0000003c                                  ; Length of the record
000000000000ec68         dd         0x000001e8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ec6c         db         0x24, 0x44, 2 dup (0xff)                    ; begin 0x3090
000000000000ec70         db         0x0b, 0x01, 2 dup (0x00)                    ; length 0x10b (end at 0x319b)
000000000000ec74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ec75         db  0x56 ; 'V'
000000000000ec76         db  0x0e ; '.'
000000000000ec77         db  0x10 ; '.'
000000000000ec78         db  0x8e ; '.'
000000000000ec79         db  0x02 ; '.'
000000000000ec7a         db  0x42 ; 'B'
000000000000ec7b         db  0x0e ; '.'
000000000000ec7c         db  0x18 ; '.'
000000000000ec7d         db  0x8d ; '.'
000000000000ec7e         db  0x03 ; '.'
000000000000ec7f         db  0x45 ; 'E'
000000000000ec80         db  0x0e ; '.'
000000000000ec81         db  0x20 ; ' '
000000000000ec82         db  0x8c ; '.'
000000000000ec83         db  0x04 ; '.'
000000000000ec84         db  0x48 ; 'H'
000000000000ec85         db  0x0e ; '.'
000000000000ec86         db  0x28 ; '('
000000000000ec87         db  0x86 ; '.'
000000000000ec88         db  0x05 ; '.'
000000000000ec89         db  0x47 ; 'G'
000000000000ec8a         db  0x0e ; '.'
000000000000ec8b         db  0x30 ; '0'
000000000000ec8c         db  0x83 ; '.'
000000000000ec8d         db  0x06 ; '.'
000000000000ec8e         db  0x02 ; '.'
000000000000ec8f         db  0xc5 ; '.'
000000000000ec90         db  0x0e ; '.'
000000000000ec91         db  0x28 ; '('
000000000000ec92         db  0x41 ; 'A'
000000000000ec93         db  0x0e ; '.'
000000000000ec94         db  0x20 ; ' '
000000000000ec95         db  0x42 ; 'B'
000000000000ec96         db  0x0e ; '.'
000000000000ec97         db  0x18 ; '.'
000000000000ec98         db  0x42 ; 'B'
000000000000ec99         db  0x0e ; '.'
000000000000ec9a         db  0x10 ; '.'
000000000000ec9b         db  0x42 ; 'B'
000000000000ec9c         db  0x0e ; '.'
000000000000ec9d         db  0x08 ; '.'
000000000000ec9e         db  0x48 ; 'H'
000000000000ec9f         db  0xc3 ; '.'
000000000000eca0         db  0xc6 ; '.'
000000000000eca1         db  0xcc ; '.'
000000000000eca2         db  0xcd ; '.'
000000000000eca3         db  0xce ; '.'
000000000000eca4         dd         0x00000044                                  ; Length of the record
000000000000eca8         dd         0x00000228                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ecac         db         0xf4, 0x44, 2 dup (0xff)                    ; begin 0x31a0
000000000000ecb0         db         0x2b, 0x01, 2 dup (0x00)                    ; length 0x12b (end at 0x32cb)
000000000000ecb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ecb5         db  0x41 ; 'A'
000000000000ecb6         db  0x0e ; '.'
000000000000ecb7         db  0x10 ; '.'
000000000000ecb8         db  0x86 ; '.'
000000000000ecb9         db  0x02 ; '.'
000000000000ecba         db  0x41 ; 'A'
000000000000ecbb         db  0x0e ; '.'
000000000000ecbc         db  0x18 ; '.'
000000000000ecbd         db  0x83 ; '.'
000000000000ecbe         db  0x03 ; '.'
000000000000ecbf         db  0x47 ; 'G'
000000000000ecc0         db  0x0e ; '.'
000000000000ecc1         db  0xc0 ; '.'
000000000000ecc2         db  0x02 ; '.'
000000000000ecc3         db  0x02 ; '.'
000000000000ecc4         db  0xad ; '.'
000000000000ecc5         db  0x0e ; '.'
000000000000ecc6         db  0xc8 ; '.'
000000000000ecc7         db  0x02 ; '.'
000000000000ecc8         db  0x44 ; 'D'
000000000000ecc9         db  0x0e ; '.'
000000000000ecca         db  0xd0 ; '.'
000000000000eccb         db  0x02 ; '.'
000000000000eccc         db  0x49 ; 'I'
000000000000eccd         db  0x0e ; '.'
000000000000ecce         db  0xd8 ; '.'
000000000000eccf         db  0x02 ; '.'
000000000000ecd0         db  0x44 ; 'D'
000000000000ecd1         db  0x0e ; '.'
000000000000ecd2         db  0xe0 ; '.'
000000000000ecd3         db  0x02 ; '.'
000000000000ecd4         db  0x46 ; 'F'
000000000000ecd5         db  0x0e ; '.'
000000000000ecd6         db  0xe8 ; '.'
000000000000ecd7         db  0x02 ; '.'
000000000000ecd8         db  0x41 ; 'A'
000000000000ecd9         db  0x0e ; '.'
000000000000ecda         db  0xf0 ; '.'
000000000000ecdb         db  0x02 ; '.'
000000000000ecdc         db  0x4b ; 'K'
000000000000ecdd         db  0x0e ; '.'
000000000000ecde         db  0xc0 ; '.'
000000000000ecdf         db  0x02 ; '.'
000000000000ece0         db  0x6b ; 'k'
000000000000ece1         db  0x0a ; '.'
000000000000ece2         db  0x0e ; '.'
000000000000ece3         db  0x18 ; '.'
000000000000ece4         db  0x41 ; 'A'
000000000000ece5         db  0x0e ; '.'
000000000000ece6         db  0x10 ; '.'
000000000000ece7         db  0x41 ; 'A'
000000000000ece8         db  0x0e ; '.'
000000000000ece9         db  0x08 ; '.'
000000000000ecea         db  0x41 ; 'A'
000000000000eceb         db  0x0b ; '.'
000000000000ecec         dd         0x00000030                                  ; Length of the record
000000000000ecf0         dd         0x00000270                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ecf4         db         0xdc, 0x45, 2 dup (0xff)                    ; begin 0x32d0
000000000000ecf8         db         0x0c, 0x02, 2 dup (0x00)                    ; length 0x20c (end at 0x34dc)
000000000000ecfc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ecfd         db  0x42 ; 'B'
000000000000ecfe         db  0x0e ; '.'
000000000000ecff         db  0x10 ; '.'
000000000000ed00         db  0x8c ; '.'
000000000000ed01         db  0x02 ; '.'
000000000000ed02         db  0x41 ; 'A'
000000000000ed03         db  0x0e ; '.'
000000000000ed04         db  0x18 ; '.'
000000000000ed05         db  0x86 ; '.'
000000000000ed06         db  0x03 ; '.'
000000000000ed07         db  0x43 ; 'C'
000000000000ed08         db  0x0e ; '.'
000000000000ed09         db  0x20 ; ' '
000000000000ed0a         db  0x83 ; '.'
000000000000ed0b         db  0x04 ; '.'
000000000000ed0c         db  0x44 ; 'D'
000000000000ed0d         db  0x0e ; '.'
000000000000ed0e         db  0x30 ; '0'
000000000000ed0f         db  0x02 ; '.'
000000000000ed10         db  0xd6 ; '.'
000000000000ed11         db  0x0a ; '.'
000000000000ed12         db  0x0e ; '.'
000000000000ed13         db  0x20 ; ' '
000000000000ed14         db  0x41 ; 'A'
000000000000ed15         db  0x0e ; '.'
000000000000ed16         db  0x18 ; '.'
000000000000ed17         db  0x41 ; 'A'
000000000000ed18         db  0x0e ; '.'
000000000000ed19         db  0x10 ; '.'
000000000000ed1a         db  0x42 ; 'B'
000000000000ed1b         db  0x0e ; '.'
000000000000ed1c         db  0x08 ; '.'
000000000000ed1d         db  0x44 ; 'D'
000000000000ed1e         db  0x0b ; '.'
000000000000ed1f         db  0x00 ; '.'
000000000000ed20         dd         0x0000003c                                  ; Length of the record
000000000000ed24         dd         0x000002a4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ed28         db         0xb8, 0x47, 2 dup (0xff)                    ; begin 0x34e0
000000000000ed2c         db         0xae, 3 dup (0x00)                          ; length 0xae (end at 0x358e)
000000000000ed30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed31         db  0x41 ; 'A'
000000000000ed32         db  0x0e ; '.'
000000000000ed33         db  0x10 ; '.'
000000000000ed34         db  0x86 ; '.'
000000000000ed35         db  0x02 ; '.'
000000000000ed36         db  0x41 ; 'A'
000000000000ed37         db  0x0e ; '.'
000000000000ed38         db  0x18 ; '.'
000000000000ed39         db  0x83 ; '.'
000000000000ed3a         db  0x03 ; '.'
000000000000ed3b         db  0x46 ; 'F'
000000000000ed3c         db  0x0e ; '.'
000000000000ed3d         db  0x20 ; ' '
000000000000ed3e         db  0x02 ; '.'
000000000000ed3f         db  0x57 ; 'W'
000000000000ed40         db  0x0a ; '.'
000000000000ed41         db  0x0e ; '.'
000000000000ed42         db  0x18 ; '.'
000000000000ed43         db  0x41 ; 'A'
000000000000ed44         db  0x0e ; '.'
000000000000ed45         db  0x10 ; '.'
000000000000ed46         db  0x41 ; 'A'
000000000000ed47         db  0x0e ; '.'
000000000000ed48         db  0x08 ; '.'
000000000000ed49         db  0x47 ; 'G'
000000000000ed4a         db  0x0b ; '.'
000000000000ed4b         db  0x75 ; 'u'
000000000000ed4c         db  0x0a ; '.'
000000000000ed4d         db  0x0e ; '.'
000000000000ed4e         db  0x18 ; '.'
000000000000ed4f         db  0x41 ; 'A'
000000000000ed50         db  0x0e ; '.'
000000000000ed51         db  0x10 ; '.'
000000000000ed52         db  0x41 ; 'A'
000000000000ed53         db  0x0e ; '.'
000000000000ed54         db  0x08 ; '.'
000000000000ed55         db  0x41 ; 'A'
000000000000ed56         db  0x0b ; '.'
000000000000ed57         db  0x44 ; 'D'
000000000000ed58         db  0x0e ; '.'
000000000000ed59         db  0x18 ; '.'
000000000000ed5a         db  0x44 ; 'D'
000000000000ed5b         db  0x0e ; '.'
000000000000ed5c         db  0x10 ; '.'
000000000000ed5d         db  0x41 ; 'A'
000000000000ed5e         db  0x0e ; '.'
000000000000ed5f         db  0x08 ; '.'
000000000000ed60         dd         0x00000048                                  ; Length of the record
000000000000ed64         dd         0x000002e4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ed68         db         0x28, 0x48, 2 dup (0xff)                    ; begin 0x3590
000000000000ed6c         db         0x88, 0x01, 2 dup (0x00)                    ; length 0x188 (end at 0x3718)
000000000000ed70         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ed71         db  0x42 ; 'B'
000000000000ed72         db  0x0e ; '.'
000000000000ed73         db  0x10 ; '.'
000000000000ed74         db  0x8d ; '.'
000000000000ed75         db  0x02 ; '.'
000000000000ed76         db  0x42 ; 'B'
000000000000ed77         db  0x0e ; '.'
000000000000ed78         db  0x18 ; '.'
000000000000ed79         db  0x8c ; '.'
000000000000ed7a         db  0x03 ; '.'
000000000000ed7b         db  0x44 ; 'D'
000000000000ed7c         db  0x0e ; '.'
000000000000ed7d         db  0x20 ; ' '
000000000000ed7e         db  0x86 ; '.'
000000000000ed7f         db  0x04 ; '.'
000000000000ed80         db  0x41 ; 'A'
000000000000ed81         db  0x0e ; '.'
000000000000ed82         db  0x28 ; '('
000000000000ed83         db  0x83 ; '.'
000000000000ed84         db  0x05 ; '.'
000000000000ed85         db  0x44 ; 'D'
000000000000ed86         db  0x0e ; '.'
000000000000ed87         db  0x30 ; '0'
000000000000ed88         db  0x02 ; '.'
000000000000ed89         db  0xc0 ; '.'
000000000000ed8a         db  0x0a ; '.'
000000000000ed8b         db  0x0e ; '.'
000000000000ed8c         db  0x28 ; '('
000000000000ed8d         db  0x46 ; 'F'
000000000000ed8e         db  0x0e ; '.'
000000000000ed8f         db  0x20 ; ' '
000000000000ed90         db  0x41 ; 'A'
000000000000ed91         db  0x0e ; '.'
000000000000ed92         db  0x18 ; '.'
000000000000ed93         db  0x42 ; 'B'
000000000000ed94         db  0x0e ; '.'
000000000000ed95         db  0x10 ; '.'
000000000000ed96         db  0x42 ; 'B'
000000000000ed97         db  0x0e ; '.'
000000000000ed98         db  0x08 ; '.'
000000000000ed99         db  0x48 ; 'H'
000000000000ed9a         db  0x0b ; '.'
000000000000ed9b         db  0x02 ; '.'
000000000000ed9c         db  0xa1 ; '.'
000000000000ed9d         db  0x0e ; '.'
000000000000ed9e         db  0x28 ; '('
000000000000ed9f         db  0x41 ; 'A'
000000000000eda0         db  0x0e ; '.'
000000000000eda1         db  0x20 ; ' '
000000000000eda2         db  0x41 ; 'A'
000000000000eda3         db  0x0e ; '.'
000000000000eda4         db  0x18 ; '.'
000000000000eda5         db  0x42 ; 'B'
000000000000eda6         db  0x0e ; '.'
000000000000eda7         db  0x10 ; '.'
000000000000eda8         db  0x42 ; 'B'
000000000000eda9         db  0x0e ; '.'
000000000000edaa         db  0x08 ; '.'
000000000000edab         db  0x00 ; '.'
000000000000edac         dd         0x00000010                                  ; Length of the record
000000000000edb0         dd         0x00000330                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000edb4         db         0x6c, 0x49, 2 dup (0xff)                    ; begin 0x3720
000000000000edb8         db         0x84, 3 dup (0x00)                          ; length 0x84 (end at 0x37a4)
000000000000edbc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000edbd         align      64
000000000000edc0         dd         0x0000002c                                  ; Length of the record
000000000000edc4         dd         0x00000344                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000edc8         db         0xe8, 0x49, 2 dup (0xff)                    ; begin 0x37b0
000000000000edcc         db         0x02, 0x01, 2 dup (0x00)                    ; length 0x102 (end at 0x38b2)
000000000000edd0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000edd1         db  0x42 ; 'B'
000000000000edd2         db  0x0e ; '.'
000000000000edd3         db  0x10 ; '.'
000000000000edd4         db  0x8c ; '.'
000000000000edd5         db  0x02 ; '.'
000000000000edd6         db  0x4f ; 'O'
000000000000edd7         db  0x0e ; '.'
000000000000edd8         db  0x18 ; '.'
000000000000edd9         db  0x86 ; '.'
000000000000edda         db  0x03 ; '.'
000000000000eddb         db  0x52 ; 'R'
000000000000eddc         db  0x0e ; '.'
000000000000eddd         db  0x20 ; ' '
000000000000edde         db  0x83 ; '.'
000000000000eddf         db  0x04 ; '.'
000000000000ede0         db  0x02 ; '.'
000000000000ede1         db  0xa3 ; '.'
000000000000ede2         db  0x0a ; '.'
000000000000ede3         db  0x0e ; '.'
000000000000ede4         db  0x18 ; '.'
000000000000ede5         db  0x41 ; 'A'
000000000000ede6         db  0x0e ; '.'
000000000000ede7         db  0x10 ; '.'
000000000000ede8         db  0x42 ; 'B'
000000000000ede9         db  0x0e ; '.'
000000000000edea         db  0x08 ; '.'
000000000000edeb         db  0x47 ; 'G'
000000000000edec         db  0x0b ; '.'
000000000000eded         db  0x00 ; '.'
000000000000edee         db  0x00 ; '.'
000000000000edef         db  0x00 ; '.'
000000000000edf0         dd         0x00000020                                  ; Length of the record
000000000000edf4         dd         0x00000374                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000edf8         db         0xc8, 0x4a, 2 dup (0xff)                    ; begin 0x38c0
000000000000edfc         db         0x63, 3 dup (0x00)                          ; length 0x63 (end at 0x3923)
000000000000ee00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee01         db  0x41 ; 'A'
000000000000ee02         db  0x0e ; '.'
000000000000ee03         db  0x10 ; '.'
000000000000ee04         db  0x83 ; '.'
000000000000ee05         db  0x02 ; '.'
000000000000ee06         db  0x66 ; 'f'
000000000000ee07         db  0x0a ; '.'
000000000000ee08         db  0x0e ; '.'
000000000000ee09         db  0x08 ; '.'
000000000000ee0a         db  0x49 ; 'I'
000000000000ee0b         db  0x0b ; '.'
000000000000ee0c         db  0x45 ; 'E'
000000000000ee0d         db  0x0a ; '.'
000000000000ee0e         db  0x0e ; '.'
000000000000ee0f         db  0x08 ; '.'
000000000000ee10         db  0x4b ; 'K'
000000000000ee11         db  0x0b ; '.'
000000000000ee12         db  0x00 ; '.'
000000000000ee13         db  0x00 ; '.'
000000000000ee14         dd         0x00000020                                  ; Length of the record
000000000000ee18         dd         0x00000398                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ee1c         db         0x14, 0x4b, 2 dup (0xff)                    ; begin 0x3930
000000000000ee20         db         0x00, 0x01, 2 dup (0x00)                    ; length 0x100 (end at 0x3a30)
000000000000ee24         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee25         db  0x41 ; 'A'
000000000000ee26         db  0x0e ; '.'
000000000000ee27         db  0x10 ; '.'
000000000000ee28         db  0x83 ; '.'
000000000000ee29         db  0x02 ; '.'
000000000000ee2a         db  0x02 ; '.'
000000000000ee2b         db  0x6c ; 'l'
000000000000ee2c         db  0x0a ; '.'
000000000000ee2d         db  0x0e ; '.'
000000000000ee2e         db  0x08 ; '.'
000000000000ee2f         db  0x43 ; 'C'
000000000000ee30         db  0x0b ; '.'
000000000000ee31         db  0x56 ; 'V'
000000000000ee32         db  0x0a ; '.'
000000000000ee33         db  0x0e ; '.'
000000000000ee34         db  0x08 ; '.'
000000000000ee35         db  0x4a ; 'J'
000000000000ee36         db  0x0b ; '.'
000000000000ee37         db  0x00 ; '.'
000000000000ee38         dd         0x00000038                                  ; Length of the record
000000000000ee3c         dd         0x000003bc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ee40         db         0xf0, 0x4b, 2 dup (0xff)                    ; begin 0x3a30
000000000000ee44         db         0x4d, 0x02, 2 dup (0x00)                    ; length 0x24d (end at 0x3c7d)
000000000000ee48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee49         db  0x42 ; 'B'
000000000000ee4a         db  0x0e ; '.'
000000000000ee4b         db  0x10 ; '.'
000000000000ee4c         db  0x8d ; '.'
000000000000ee4d         db  0x02 ; '.'
000000000000ee4e         db  0x42 ; 'B'
000000000000ee4f         db  0x0e ; '.'
000000000000ee50         db  0x18 ; '.'
000000000000ee51         db  0x8c ; '.'
000000000000ee52         db  0x03 ; '.'
000000000000ee53         db  0x44 ; 'D'
000000000000ee54         db  0x0e ; '.'
000000000000ee55         db  0x20 ; ' '
000000000000ee56         db  0x86 ; '.'
000000000000ee57         db  0x04 ; '.'
000000000000ee58         db  0x41 ; 'A'
000000000000ee59         db  0x0e ; '.'
000000000000ee5a         db  0x28 ; '('
000000000000ee5b         db  0x83 ; '.'
000000000000ee5c         db  0x05 ; '.'
000000000000ee5d         db  0x47 ; 'G'
000000000000ee5e         db  0x0e ; '.'
000000000000ee5f         db  0x30 ; '0'
000000000000ee60         db  0x02 ; '.'
000000000000ee61         db  0x8e ; '.'
000000000000ee62         db  0x0a ; '.'
000000000000ee63         db  0x0e ; '.'
000000000000ee64         db  0x28 ; '('
000000000000ee65         db  0x41 ; 'A'
000000000000ee66         db  0x0e ; '.'
000000000000ee67         db  0x20 ; ' '
000000000000ee68         db  0x41 ; 'A'
000000000000ee69         db  0x0e ; '.'
000000000000ee6a         db  0x18 ; '.'
000000000000ee6b         db  0x42 ; 'B'
000000000000ee6c         db  0x0e ; '.'
000000000000ee6d         db  0x10 ; '.'
000000000000ee6e         db  0x42 ; 'B'
000000000000ee6f         db  0x0e ; '.'
000000000000ee70         db  0x08 ; '.'
000000000000ee71         db  0x44 ; 'D'
000000000000ee72         db  0x0b ; '.'
000000000000ee73         db  0x00 ; '.'
000000000000ee74         dd         0x00000040                                  ; Length of the record
000000000000ee78         dd         0x000003f8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ee7c         db         0x04, 0x4e, 2 dup (0xff)                    ; begin 0x3c80
000000000000ee80         db         0xc7, 3 dup (0x00)                          ; length 0xc7 (end at 0x3d47)
000000000000ee84         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ee85         db  0x41 ; 'A'
000000000000ee86         db  0x0e ; '.'
000000000000ee87         db  0x10 ; '.'
000000000000ee88         db  0x86 ; '.'
000000000000ee89         db  0x02 ; '.'
000000000000ee8a         db  0x41 ; 'A'
000000000000ee8b         db  0x0e ; '.'
000000000000ee8c         db  0x18 ; '.'
000000000000ee8d         db  0x83 ; '.'
000000000000ee8e         db  0x03 ; '.'
000000000000ee8f         db  0x47 ; 'G'
000000000000ee90         db  0x0e ; '.'
000000000000ee91         db  0x20 ; ' '
000000000000ee92         db  0x7c ; '|'
000000000000ee93         db  0x0a ; '.'
000000000000ee94         db  0x0e ; '.'
000000000000ee95         db  0x18 ; '.'
000000000000ee96         db  0x41 ; 'A'
000000000000ee97         db  0x0e ; '.'
000000000000ee98         db  0x10 ; '.'
000000000000ee99         db  0x41 ; 'A'
000000000000ee9a         db  0x0e ; '.'
000000000000ee9b         db  0x08 ; '.'
000000000000ee9c         db  0x49 ; 'I'
000000000000ee9d         db  0x0b ; '.'
000000000000ee9e         db  0x6e ; 'n'
000000000000ee9f         db  0x0a ; '.'
000000000000eea0         db  0x0e ; '.'
000000000000eea1         db  0x18 ; '.'
000000000000eea2         db  0x49 ; 'I'
000000000000eea3         db  0x0e ; '.'
000000000000eea4         db  0x10 ; '.'
000000000000eea5         db  0x41 ; 'A'
000000000000eea6         db  0x0e ; '.'
000000000000eea7         db  0x08 ; '.'
000000000000eea8         db  0x48 ; 'H'
000000000000eea9         db  0x0b ; '.'
000000000000eeaa         db  0x4a ; 'J'
000000000000eeab         db  0x0a ; '.'
000000000000eeac         db  0x0e ; '.'
000000000000eead         db  0x18 ; '.'
000000000000eeae         db  0x44 ; 'D'
000000000000eeaf         db  0x0e ; '.'
000000000000eeb0         db  0x10 ; '.'
000000000000eeb1         db  0x41 ; 'A'
000000000000eeb2         db  0x0e ; '.'
000000000000eeb3         db  0x08 ; '.'
000000000000eeb4         db  0x49 ; 'I'
000000000000eeb5         db  0x0b ; '.'
000000000000eeb6         db  0x00 ; '.'
000000000000eeb7         db  0x00 ; '.'
000000000000eeb8         dd         0x00000074                                  ; Length of the record
000000000000eebc         dd         0x0000043c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000eec0         db         0x90, 0x4e, 2 dup (0xff)                    ; begin 0x3d50
000000000000eec4         db         0x84, 0x04, 2 dup (0x00)                    ; length 0x484 (end at 0x41d4)
000000000000eec8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000eec9         db  0x42 ; 'B'
000000000000eeca         db  0x0e ; '.'
000000000000eecb         db  0x10 ; '.'
000000000000eecc         db  0x8e ; '.'
000000000000eecd         db  0x02 ; '.'
000000000000eece         db  0x42 ; 'B'
000000000000eecf         db  0x0e ; '.'
000000000000eed0         db  0x18 ; '.'
000000000000eed1         db  0x8d ; '.'
000000000000eed2         db  0x03 ; '.'
000000000000eed3         db  0x42 ; 'B'
000000000000eed4         db  0x0e ; '.'
000000000000eed5         db  0x20 ; ' '
000000000000eed6         db  0x8c ; '.'
000000000000eed7         db  0x04 ; '.'
000000000000eed8         db  0x41 ; 'A'
000000000000eed9         db  0x0e ; '.'
000000000000eeda         db  0x28 ; '('
000000000000eedb         db  0x86 ; '.'
000000000000eedc         db  0x05 ; '.'
000000000000eedd         db  0x41 ; 'A'
000000000000eede         db  0x0e ; '.'
000000000000eedf         db  0x30 ; '0'
000000000000eee0         db  0x83 ; '.'
000000000000eee1         db  0x06 ; '.'
000000000000eee2         db  0x03 ; '.'
000000000000eee3         db  0x33 ; '3'
000000000000eee4         db  0x01 ; '.'
000000000000eee5         db  0x0a ; '.'
000000000000eee6         db  0x0e ; '.'
000000000000eee7         db  0x28 ; '('
000000000000eee8         db  0x4a ; 'J'
000000000000eee9         db  0x0e ; '.'
000000000000eeea         db  0x20 ; ' '
000000000000eeeb         db  0x42 ; 'B'
000000000000eeec         db  0x0e ; '.'
000000000000eeed         db  0x18 ; '.'
000000000000eeee         db  0x42 ; 'B'
000000000000eeef         db  0x0e ; '.'
000000000000eef0         db  0x10 ; '.'
000000000000eef1         db  0x42 ; 'B'
000000000000eef2         db  0x0e ; '.'
000000000000eef3         db  0x08 ; '.'
000000000000eef4         db  0x45 ; 'E'
000000000000eef5         db  0x0b ; '.'
000000000000eef6         db  0x50 ; 'P'
000000000000eef7         db  0x0a ; '.'
000000000000eef8         db  0x0e ; '.'
000000000000eef9         db  0x28 ; '('
000000000000eefa         db  0x41 ; 'A'
000000000000eefb         db  0x0e ; '.'
000000000000eefc         db  0x20 ; ' '
000000000000eefd         db  0x42 ; 'B'
000000000000eefe         db  0x0e ; '.'
000000000000eeff         db  0x18 ; '.'
000000000000ef00         db  0x42 ; 'B'
000000000000ef01         db  0x0e ; '.'
000000000000ef02         db  0x10 ; '.'
000000000000ef03         db  0x42 ; 'B'
000000000000ef04         db  0x0e ; '.'
000000000000ef05         db  0x08 ; '.'
000000000000ef06         db  0x49 ; 'I'
000000000000ef07         db  0x0b ; '.'
000000000000ef08         db  0x03 ; '.'
000000000000ef09         db  0x8f ; '.'
000000000000ef0a         db  0x01 ; '.'
000000000000ef0b         db  0x0a ; '.'
000000000000ef0c         db  0x0e ; '.'
000000000000ef0d         db  0x28 ; '('
000000000000ef0e         db  0x46 ; 'F'
000000000000ef0f         db  0x0e ; '.'
000000000000ef10         db  0x20 ; ' '
000000000000ef11         db  0x42 ; 'B'
000000000000ef12         db  0x0e ; '.'
000000000000ef13         db  0x18 ; '.'
000000000000ef14         db  0x42 ; 'B'
000000000000ef15         db  0x0e ; '.'
000000000000ef16         db  0x10 ; '.'
000000000000ef17         db  0x42 ; 'B'
000000000000ef18         db  0x0e ; '.'
000000000000ef19         db  0x08 ; '.'
000000000000ef1a         db  0x45 ; 'E'
000000000000ef1b         db  0x0b ; '.'
000000000000ef1c         db  0x49 ; 'I'
000000000000ef1d         db  0x0a ; '.'
000000000000ef1e         db  0x0e ; '.'
000000000000ef1f         db  0x28 ; '('
000000000000ef20         db  0x46 ; 'F'
000000000000ef21         db  0x0e ; '.'
000000000000ef22         db  0x20 ; ' '
000000000000ef23         db  0x42 ; 'B'
000000000000ef24         db  0x0e ; '.'
000000000000ef25         db  0x18 ; '.'
000000000000ef26         db  0x42 ; 'B'
000000000000ef27         db  0x0e ; '.'
000000000000ef28         db  0x10 ; '.'
000000000000ef29         db  0x42 ; 'B'
000000000000ef2a         db  0x0e ; '.'
000000000000ef2b         db  0x08 ; '.'
000000000000ef2c         db  0x4b ; 'K'
000000000000ef2d         db  0x0b ; '.'
000000000000ef2e         db  0x00 ; '.'
000000000000ef2f         db  0x00 ; '.'
000000000000ef30         dd         0x0000003c                                  ; Length of the record
000000000000ef34         dd         0x000004b4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ef38         db         0xa8, 0x52, 2 dup (0xff)                    ; begin 0x41e0
000000000000ef3c         db         0xf3, 3 dup (0x00)                          ; length 0xf3 (end at 0x42d3)
000000000000ef40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ef41         db  0x41 ; 'A'
000000000000ef42         db  0x0e ; '.'
000000000000ef43         db  0x10 ; '.'
000000000000ef44         db  0x86 ; '.'
000000000000ef45         db  0x02 ; '.'
000000000000ef46         db  0x41 ; 'A'
000000000000ef47         db  0x0e ; '.'
000000000000ef48         db  0x18 ; '.'
000000000000ef49         db  0x83 ; '.'
000000000000ef4a         db  0x03 ; '.'
000000000000ef4b         db  0x56 ; 'V'
000000000000ef4c         db  0x0e ; '.'
000000000000ef4d         db  0x20 ; ' '
000000000000ef4e         db  0x02 ; '.'
000000000000ef4f         db  0x60 ; '`'
000000000000ef50         db  0x0a ; '.'
000000000000ef51         db  0x0e ; '.'
000000000000ef52         db  0x18 ; '.'
000000000000ef53         db  0x43 ; 'C'
000000000000ef54         db  0x0e ; '.'
000000000000ef55         db  0x10 ; '.'
000000000000ef56         db  0x41 ; 'A'
000000000000ef57         db  0x0e ; '.'
000000000000ef58         db  0x08 ; '.'
000000000000ef59         db  0x44 ; 'D'
000000000000ef5a         db  0x0b ; '.'
000000000000ef5b         db  0x76 ; 'v'
000000000000ef5c         db  0x0a ; '.'
000000000000ef5d         db  0x0e ; '.'
000000000000ef5e         db  0x18 ; '.'
000000000000ef5f         db  0x43 ; 'C'
000000000000ef60         db  0x0e ; '.'
000000000000ef61         db  0x10 ; '.'
000000000000ef62         db  0x41 ; 'A'
000000000000ef63         db  0x0e ; '.'
000000000000ef64         db  0x08 ; '.'
000000000000ef65         db  0x46 ; 'F'
000000000000ef66         db  0x0b ; '.'
000000000000ef67         db  0x6e ; 'n'
000000000000ef68         db  0x0e ; '.'
000000000000ef69         db  0x18 ; '.'
000000000000ef6a         db  0x43 ; 'C'
000000000000ef6b         db  0x0e ; '.'
000000000000ef6c         db  0x10 ; '.'
000000000000ef6d         db  0x41 ; 'A'
000000000000ef6e         db  0x0e ; '.'
000000000000ef6f         db  0x08 ; '.'
000000000000ef70         dd         0x00000064                                  ; Length of the record
000000000000ef74         dd         0x000004f4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ef78         db         0x68, 0x53, 2 dup (0xff)                    ; begin 0x42e0
000000000000ef7c         db         0xb7, 0x0f, 2 dup (0x00)                    ; length 0xfb7 (end at 0x5297)
000000000000ef80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ef81         db  0x42 ; 'B'
000000000000ef82         db  0x0e ; '.'
000000000000ef83         db  0x10 ; '.'
000000000000ef84         db  0x8f ; '.'
000000000000ef85         db  0x02 ; '.'
000000000000ef86         db  0x42 ; 'B'
000000000000ef87         db  0x0e ; '.'
000000000000ef88         db  0x18 ; '.'
000000000000ef89         db  0x8e ; '.'
000000000000ef8a         db  0x03 ; '.'
000000000000ef8b         db  0x42 ; 'B'
000000000000ef8c         db  0x0e ; '.'
000000000000ef8d         db  0x20 ; ' '
000000000000ef8e         db  0x8d ; '.'
000000000000ef8f         db  0x04 ; '.'
000000000000ef90         db  0x42 ; 'B'
000000000000ef91         db  0x0e ; '.'
000000000000ef92         db  0x28 ; '('
000000000000ef93         db  0x8c ; '.'
000000000000ef94         db  0x05 ; '.'
000000000000ef95         db  0x44 ; 'D'
000000000000ef96         db  0x0e ; '.'
000000000000ef97         db  0x30 ; '0'
000000000000ef98         db  0x86 ; '.'
000000000000ef99         db  0x06 ; '.'
000000000000ef9a         db  0x41 ; 'A'
000000000000ef9b         db  0x0e ; '.'
000000000000ef9c         db  0x38 ; '8'
000000000000ef9d         db  0x83 ; '.'
000000000000ef9e         db  0x07 ; '.'
000000000000ef9f         db  0x47 ; 'G'
000000000000efa0         db  0x0e ; '.'
000000000000efa1         db  0x50 ; 'P'
000000000000efa2         db  0x03 ; '.'
000000000000efa3         db  0x58 ; 'X'
000000000000efa4         db  0x02 ; '.'
000000000000efa5         db  0x0a ; '.'
000000000000efa6         db  0x0e ; '.'
000000000000efa7         db  0x38 ; '8'
000000000000efa8         db  0x41 ; 'A'
000000000000efa9         db  0x0e ; '.'
000000000000efaa         db  0x30 ; '0'
000000000000efab         db  0x41 ; 'A'
000000000000efac         db  0x0e ; '.'
000000000000efad         db  0x28 ; '('
000000000000efae         db  0x42 ; 'B'
000000000000efaf         db  0x0e ; '.'
000000000000efb0         db  0x20 ; ' '
000000000000efb1         db  0x42 ; 'B'
000000000000efb2         db  0x0e ; '.'
000000000000efb3         db  0x18 ; '.'
000000000000efb4         db  0x42 ; 'B'
000000000000efb5         db  0x0e ; '.'
000000000000efb6         db  0x10 ; '.'
000000000000efb7         db  0x42 ; 'B'
000000000000efb8         db  0x0e ; '.'
000000000000efb9         db  0x08 ; '.'
000000000000efba         db  0x41 ; 'A'
000000000000efbb         db  0x0b ; '.'
000000000000efbc         db  0x03 ; '.'
000000000000efbd         db  0x5f ; '_'
000000000000efbe         db  0x0c ; '.'
000000000000efbf         db  0x0a ; '.'
000000000000efc0         db  0x0e ; '.'
000000000000efc1         db  0x38 ; '8'
000000000000efc2         db  0x41 ; 'A'
000000000000efc3         db  0x0e ; '.'
000000000000efc4         db  0x30 ; '0'
000000000000efc5         db  0x41 ; 'A'
000000000000efc6         db  0x0e ; '.'
000000000000efc7         db  0x28 ; '('
000000000000efc8         db  0x42 ; 'B'
000000000000efc9         db  0x0e ; '.'
000000000000efca         db  0x20 ; ' '
000000000000efcb         db  0x42 ; 'B'
000000000000efcc         db  0x0e ; '.'
000000000000efcd         db  0x18 ; '.'
000000000000efce         db  0x42 ; 'B'
000000000000efcf         db  0x0e ; '.'
000000000000efd0         db  0x10 ; '.'
000000000000efd1         db  0x42 ; 'B'
000000000000efd2         db  0x0e ; '.'
000000000000efd3         db  0x08 ; '.'
000000000000efd4         db  0x41 ; 'A'
000000000000efd5         db  0x0b ; '.'
000000000000efd6         db  0x00 ; '.'
000000000000efd7         db  0x00 ; '.'
000000000000efd8         dd         0x00000028                                  ; Length of the record
000000000000efdc         dd         0x0000055c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000efe0         db         0xc0, 0x62, 2 dup (0xff)                    ; begin 0x52a0
000000000000efe4         db         0x6a, 0x05, 2 dup (0x00)                    ; length 0x56a (end at 0x580a)
000000000000efe8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000efe9         db  0x42 ; 'B'
000000000000efea         db  0x0e ; '.'
000000000000efeb         db  0x10 ; '.'
000000000000efec         db  0x8d ; '.'
000000000000efed         db  0x02 ; '.'
000000000000efee         db  0x42 ; 'B'
000000000000efef         db  0x0e ; '.'
000000000000eff0         db  0x18 ; '.'
000000000000eff1         db  0x8c ; '.'
000000000000eff2         db  0x03 ; '.'
000000000000eff3         db  0x46 ; 'F'
000000000000eff4         db  0x0e ; '.'
000000000000eff5         db  0x20 ; ' '
000000000000eff6         db  0x86 ; '.'
000000000000eff7         db  0x04 ; '.'
000000000000eff8         db  0x41 ; 'A'
000000000000eff9         db  0x0e ; '.'
000000000000effa         db  0x28 ; '('
000000000000effb         db  0x83 ; '.'
000000000000effc         db  0x05 ; '.'
000000000000effd         db  0x49 ; 'I'
000000000000effe         db  0x0e ; '.'
000000000000efff         db  0xb0 ; '.'
000000000000f000         db  0x01 ; '.'
000000000000f001         db  0x00 ; '.'
000000000000f002         db  0x00 ; '.'
000000000000f003         db  0x00 ; '.'
000000000000f004         dd         0x00000030                                  ; Length of the record
000000000000f008         dd         0x00000588                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f00c         db         0x04, 0x68, 2 dup (0xff)                    ; begin 0x5810
000000000000f010         db         0xef, 3 dup (0x00)                          ; length 0xef (end at 0x58ff)
000000000000f014         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f015         db  0x42 ; 'B'
000000000000f016         db  0x0e ; '.'
000000000000f017         db  0x10 ; '.'
000000000000f018         db  0x8c ; '.'
000000000000f019         db  0x02 ; '.'
000000000000f01a         db  0x41 ; 'A'
000000000000f01b         db  0x0e ; '.'
000000000000f01c         db  0x18 ; '.'
000000000000f01d         db  0x86 ; '.'
000000000000f01e         db  0x03 ; '.'
000000000000f01f         db  0x44 ; 'D'
000000000000f020         db  0x0e ; '.'
000000000000f021         db  0x20 ; ' '
000000000000f022         db  0x83 ; '.'
000000000000f023         db  0x04 ; '.'
000000000000f024         db  0x4a ; 'J'
000000000000f025         db  0x0e ; '.'
000000000000f026         db  0x30 ; '0'
000000000000f027         db  0x02 ; '.'
000000000000f028         db  0x43 ; 'C'
000000000000f029         db  0x0a ; '.'
000000000000f02a         db  0x0e ; '.'
000000000000f02b         db  0x20 ; ' '
000000000000f02c         db  0x41 ; 'A'
000000000000f02d         db  0x0e ; '.'
000000000000f02e         db  0x18 ; '.'
000000000000f02f         db  0x41 ; 'A'
000000000000f030         db  0x0e ; '.'
000000000000f031         db  0x10 ; '.'
000000000000f032         db  0x42 ; 'B'
000000000000f033         db  0x0e ; '.'
000000000000f034         db  0x08 ; '.'
000000000000f035         db  0x48 ; 'H'
000000000000f036         db  0x0b ; '.'
000000000000f037         db  0x00 ; '.'
000000000000f038         dd         0x0000005c                                  ; Length of the record
000000000000f03c         dd         0x000005bc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f040         db         0x80, 0x2f, 2 dup (0xff)                    ; begin 0x1fc0
000000000000f044         db         0x42, 0x09, 2 dup (0x00)                    ; length 0x942 (end at 0x2902)
000000000000f048         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f049         db  0x42 ; 'B'
000000000000f04a         db  0x0e ; '.'
000000000000f04b         db  0x10 ; '.'
000000000000f04c         db  0x8f ; '.'
000000000000f04d         db  0x02 ; '.'
000000000000f04e         db  0x42 ; 'B'
000000000000f04f         db  0x0e ; '.'
000000000000f050         db  0x18 ; '.'
000000000000f051         db  0x8e ; '.'
000000000000f052         db  0x03 ; '.'
000000000000f053         db  0x42 ; 'B'
000000000000f054         db  0x0e ; '.'
000000000000f055         db  0x20 ; ' '
000000000000f056         db  0x8d ; '.'
000000000000f057         db  0x04 ; '.'
000000000000f058         db  0x42 ; 'B'
000000000000f059         db  0x0e ; '.'
000000000000f05a         db  0x28 ; '('
000000000000f05b         db  0x8c ; '.'
000000000000f05c         db  0x05 ; '.'
000000000000f05d         db  0x44 ; 'D'
000000000000f05e         db  0x0e ; '.'
000000000000f05f         db  0x30 ; '0'
000000000000f060         db  0x86 ; '.'
000000000000f061         db  0x06 ; '.'
000000000000f062         db  0x41 ; 'A'
000000000000f063         db  0x0e ; '.'
000000000000f064         db  0x38 ; '8'
000000000000f065         db  0x83 ; '.'
000000000000f066         db  0x07 ; '.'
000000000000f067         db  0x47 ; 'G'
000000000000f068         db  0x0e ; '.'
000000000000f069         db  0x90 ; '.'
000000000000f06a         db  0x01 ; '.'
000000000000f06b         db  0x03 ; '.'
000000000000f06c         db  0xfe ; '.'
000000000000f06d         db  0x02 ; '.'
000000000000f06e         db  0x0a ; '.'
000000000000f06f         db  0x0e ; '.'
000000000000f070         db  0x38 ; '8'
000000000000f071         db  0x41 ; 'A'
000000000000f072         db  0x0e ; '.'
000000000000f073         db  0x30 ; '0'
000000000000f074         db  0x41 ; 'A'
000000000000f075         db  0x0e ; '.'
000000000000f076         db  0x28 ; '('
000000000000f077         db  0x42 ; 'B'
000000000000f078         db  0x0e ; '.'
000000000000f079         db  0x20 ; ' '
000000000000f07a         db  0x42 ; 'B'
000000000000f07b         db  0x0e ; '.'
000000000000f07c         db  0x18 ; '.'
000000000000f07d         db  0x42 ; 'B'
000000000000f07e         db  0x0e ; '.'
000000000000f07f         db  0x10 ; '.'
000000000000f080         db  0x42 ; 'B'
000000000000f081         db  0x0e ; '.'
000000000000f082         db  0x08 ; '.'
000000000000f083         db  0x41 ; 'A'
000000000000f084         db  0x0b ; '.'
000000000000f085         db  0x03 ; '.'
000000000000f086         db  0x02 ; '.'
000000000000f087         db  0x04 ; '.'
000000000000f088         db  0x0a ; '.'
000000000000f089         db  0x0e ; '.'
000000000000f08a         db  0x98 ; '.'
000000000000f08b         db  0x01 ; '.'
000000000000f08c         db  0x50 ; 'P'
000000000000f08d         db  0x0e ; '.'
000000000000f08e         db  0xa0 ; '.'
000000000000f08f         db  0x01 ; '.'
000000000000f090         db  0x6a ; 'j'
000000000000f091         db  0x0b ; '.'
000000000000f092         db  0x00 ; '.'
000000000000f093         db  0x00 ; '.'
000000000000f094         db  0x00 ; '.'
000000000000f095         db  0x00 ; '.'
000000000000f096         db  0x00 ; '.'
000000000000f097         db  0x00 ; '.'
000000000000f098         dd         0x00000010                                  ; Length of the record
000000000000f09c         dd         0x0000061c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f0a0         db         0x60, 0x68, 2 dup (0xff)                    ; begin 0x5900
000000000000f0a4         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5908)
000000000000f0a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f0a9         align      4
000000000000f0ac         dd         0x00000010                                  ; Length of the record
000000000000f0b0         dd         0x00000630                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f0b4         db         0x5c, 0x68, 2 dup (0xff)                    ; begin 0x5910
000000000000f0b8         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x5918)
000000000000f0bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f0bd         align      64
000000000000f0c0         dd         0x0000002c                                  ; Length of the record
000000000000f0c4         dd         0x00000644                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f0c8         db         0x58, 0x68, 2 dup (0xff)                    ; begin 0x5920
000000000000f0cc         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x59c4)
000000000000f0d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f0d1         db  0x41 ; 'A'
000000000000f0d2         db  0x0e ; '.'
000000000000f0d3         db  0x10 ; '.'
000000000000f0d4         db  0x86 ; '.'
000000000000f0d5         db  0x02 ; '.'
000000000000f0d6         db  0x41 ; 'A'
000000000000f0d7         db  0x0e ; '.'
000000000000f0d8         db  0x18 ; '.'
000000000000f0d9         db  0x83 ; '.'
000000000000f0da         db  0x03 ; '.'
000000000000f0db         db  0x44 ; 'D'
000000000000f0dc         db  0x0e ; '.'
000000000000f0dd         db  0x20 ; ' '
000000000000f0de         db  0x7a ; 'z'
000000000000f0df         db  0x0a ; '.'
000000000000f0e0         db  0x0e ; '.'
000000000000f0e1         db  0x18 ; '.'
000000000000f0e2         db  0x41 ; 'A'
000000000000f0e3         db  0x0e ; '.'
000000000000f0e4         db  0x10 ; '.'
000000000000f0e5         db  0x41 ; 'A'
000000000000f0e6         db  0x0e ; '.'
000000000000f0e7         db  0x08 ; '.'
000000000000f0e8         db  0x41 ; 'A'
000000000000f0e9         db  0x0b ; '.'
000000000000f0ea         db  0x00 ; '.'
000000000000f0eb         db  0x00 ; '.'
000000000000f0ec         db  0x00 ; '.'
000000000000f0ed         db  0x00 ; '.'
000000000000f0ee         db  0x00 ; '.'
000000000000f0ef         db  0x00 ; '.'
000000000000f0f0         dd         0x00000010                                  ; Length of the record
000000000000f0f4         dd         0x00000674                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f0f8         db         0xd8, 0x68, 2 dup (0xff)                    ; begin 0x59d0
000000000000f0fc         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x59d5)
000000000000f100         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f101         align      4
000000000000f104         dd         0x00000018                                  ; Length of the record
000000000000f108         dd         0x00000688                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f10c         db         0xd4, 0x68, 2 dup (0xff)                    ; begin 0x59e0
000000000000f110         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x5a02)
000000000000f114         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f115         db  0x46 ; 'F'
000000000000f116         db  0x0e ; '.'
000000000000f117         db  0x10 ; '.'
000000000000f118         db  0x83 ; '.'
000000000000f119         db  0x02 ; '.'
000000000000f11a         db  0x4e ; 'N'
000000000000f11b         db  0xc3 ; '.'
000000000000f11c         db  0x0e ; '.'
000000000000f11d         db  0x08 ; '.'
000000000000f11e         db  0x00 ; '.'
000000000000f11f         db  0x00 ; '.'
000000000000f120         dd         0x0000002c                                  ; Length of the record
000000000000f124         dd         0x000006a4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f128         db         0xe8, 0x68, 2 dup (0xff)                    ; begin 0x5a10
000000000000f12c         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x5aa3)
000000000000f130         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f131         db  0x42 ; 'B'
000000000000f132         db  0x0e ; '.'
000000000000f133         db  0x10 ; '.'
000000000000f134         db  0x8c ; '.'
000000000000f135         db  0x02 ; '.'
000000000000f136         db  0x41 ; 'A'
000000000000f137         db  0x0e ; '.'
000000000000f138         db  0x18 ; '.'
000000000000f139         db  0x86 ; '.'
000000000000f13a         db  0x03 ; '.'
000000000000f13b         db  0x44 ; 'D'
000000000000f13c         db  0x0e ; '.'
000000000000f13d         db  0x20 ; ' '
000000000000f13e         db  0x83 ; '.'
000000000000f13f         db  0x04 ; '.'
000000000000f140         db  0x5e ; '^'
000000000000f141         db  0x0a ; '.'
000000000000f142         db  0x0e ; '.'
000000000000f143         db  0x18 ; '.'
000000000000f144         db  0x41 ; 'A'
000000000000f145         db  0x0e ; '.'
000000000000f146         db  0x10 ; '.'
000000000000f147         db  0x42 ; 'B'
000000000000f148         db  0x0e ; '.'
000000000000f149         db  0x08 ; '.'
000000000000f14a         db  0x48 ; 'H'
000000000000f14b         db  0x0b ; '.'
000000000000f14c         db  0x00 ; '.'
000000000000f14d         db  0x00 ; '.'
000000000000f14e         db  0x00 ; '.'
000000000000f14f         db  0x00 ; '.'
000000000000f150         dd         0x00000010                                  ; Length of the record
000000000000f154         dd         0x000006d4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f158         db         0x58, 0x69, 2 dup (0xff)                    ; begin 0x5ab0
000000000000f15c         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x5aba)
000000000000f160         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f161         align      4
000000000000f164         dd         0x00000018                                  ; Length of the record
000000000000f168         dd         0x000006e8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f16c         db         0x54, 0x69, 2 dup (0xff)                    ; begin 0x5ac0
000000000000f170         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x5b01)
000000000000f174         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f175         db  0x44 ; 'D'
000000000000f176         db  0x0e ; '.'
000000000000f177         db  0x30 ; '0'
000000000000f178         db  0x77 ; 'w'
000000000000f179         db  0x0a ; '.'
000000000000f17a         db  0x0e ; '.'
000000000000f17b         db  0x08 ; '.'
000000000000f17c         db  0x41 ; 'A'
000000000000f17d         db  0x0b ; '.'
000000000000f17e         db  0x00 ; '.'
000000000000f17f         db  0x00 ; '.'
000000000000f180         dd         0x0000001c                                  ; Length of the record
000000000000f184         dd         0x00000704                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f188         db         0x88, 0x69, 2 dup (0xff)                    ; begin 0x5b10
000000000000f18c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x5b70)
000000000000f190         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f191         db  0x44 ; 'D'
000000000000f192         db  0x0e ; '.'
000000000000f193         db  0x10 ; '.'
000000000000f194         db  0x75 ; 'u'
000000000000f195         db  0x0a ; '.'
000000000000f196         db  0x0e ; '.'
000000000000f197         db  0x08 ; '.'
000000000000f198         db  0x47 ; 'G'
000000000000f199         db  0x0b ; '.'
000000000000f19a         db  0x5f ; '_'
000000000000f19b         db  0x0e ; '.'
000000000000f19c         db  0x08 ; '.'
000000000000f19d         db  0x00 ; '.'
000000000000f19e         db  0x00 ; '.'
000000000000f19f         db  0x00 ; '.'
000000000000f1a0         dd         0x00000014                                  ; Length of the record
000000000000f1a4         dd         0x00000724                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f1a8         db         0xc8, 0x69, 2 dup (0xff)                    ; begin 0x5b70
000000000000f1ac         db         0x9c, 3 dup (0x00)                          ; length 0x9c (end at 0x5c0c)
000000000000f1b0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f1b1         align      8
000000000000f1b8         dd         0x00000048                                  ; Length of the record
000000000000f1bc         dd         0x0000073c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f1c0         db         0x50, 0x6a, 2 dup (0xff)                    ; begin 0x5c10
000000000000f1c4         db         0xbf, 0x01, 2 dup (0x00)                    ; length 0x1bf (end at 0x5dcf)
000000000000f1c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f1c9         db  0x42 ; 'B'
000000000000f1ca         db  0x0e ; '.'
000000000000f1cb         db  0x10 ; '.'
000000000000f1cc         db  0x8f ; '.'
000000000000f1cd         db  0x02 ; '.'
000000000000f1ce         db  0x42 ; 'B'
000000000000f1cf         db  0x0e ; '.'
000000000000f1d0         db  0x18 ; '.'
000000000000f1d1         db  0x8e ; '.'
000000000000f1d2         db  0x03 ; '.'
000000000000f1d3         db  0x42 ; 'B'
000000000000f1d4         db  0x0e ; '.'
000000000000f1d5         db  0x20 ; ' '
000000000000f1d6         db  0x8d ; '.'
000000000000f1d7         db  0x04 ; '.'
000000000000f1d8         db  0x42 ; 'B'
000000000000f1d9         db  0x0e ; '.'
000000000000f1da         db  0x28 ; '('
000000000000f1db         db  0x8c ; '.'
000000000000f1dc         db  0x05 ; '.'
000000000000f1dd         db  0x45 ; 'E'
000000000000f1de         db  0x0e ; '.'
000000000000f1df         db  0x30 ; '0'
000000000000f1e0         db  0x86 ; '.'
000000000000f1e1         db  0x06 ; '.'
000000000000f1e2         db  0x41 ; 'A'
000000000000f1e3         db  0x0e ; '.'
000000000000f1e4         db  0x38 ; '8'
000000000000f1e5         db  0x83 ; '.'
000000000000f1e6         db  0x07 ; '.'
000000000000f1e7         db  0x47 ; 'G'
000000000000f1e8         db  0x0e ; '.'
000000000000f1e9         db  0x70 ; 'p'
000000000000f1ea         db  0x03 ; '.'
000000000000f1eb         db  0x2e ; '.'
000000000000f1ec         db  0x01 ; '.'
000000000000f1ed         db  0x0a ; '.'
000000000000f1ee         db  0x0e ; '.'
000000000000f1ef         db  0x38 ; '8'
000000000000f1f0         db  0x41 ; 'A'
000000000000f1f1         db  0x0e ; '.'
000000000000f1f2         db  0x30 ; '0'
000000000000f1f3         db  0x41 ; 'A'
000000000000f1f4         db  0x0e ; '.'
000000000000f1f5         db  0x28 ; '('
000000000000f1f6         db  0x42 ; 'B'
000000000000f1f7         db  0x0e ; '.'
000000000000f1f8         db  0x20 ; ' '
000000000000f1f9         db  0x42 ; 'B'
000000000000f1fa         db  0x0e ; '.'
000000000000f1fb         db  0x18 ; '.'
000000000000f1fc         db  0x42 ; 'B'
000000000000f1fd         db  0x0e ; '.'
000000000000f1fe         db  0x10 ; '.'
000000000000f1ff         db  0x42 ; 'B'
000000000000f200         db  0x0e ; '.'
000000000000f201         db  0x08 ; '.'
000000000000f202         db  0x43 ; 'C'
000000000000f203         db  0x0b ; '.'
000000000000f204         dd         0x00000028                                  ; Length of the record
000000000000f208         dd         0x00000788                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f20c         db         0xc4, 0x6b, 2 dup (0xff)                    ; begin 0x5dd0
000000000000f210         db         0x23, 3 dup (0x00)                          ; length 0x23 (end at 0x5df3)
000000000000f214         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f215         db  0x41 ; 'A'
000000000000f216         db  0x0e ; '.'
000000000000f217         db  0x10 ; '.'
000000000000f218         db  0x86 ; '.'
000000000000f219         db  0x02 ; '.'
000000000000f21a         db  0x41 ; 'A'
000000000000f21b         db  0x0e ; '.'
000000000000f21c         db  0x18 ; '.'
000000000000f21d         db  0x83 ; '.'
000000000000f21e         db  0x03 ; '.'
000000000000f21f         db  0x49 ; 'I'
000000000000f220         db  0x0e ; '.'
000000000000f221         db  0x20 ; ' '
000000000000f222         db  0x49 ; 'I'
000000000000f223         db  0x0e ; '.'
000000000000f224         db  0x18 ; '.'
000000000000f225         db  0x46 ; 'F'
000000000000f226         db  0x0e ; '.'
000000000000f227         db  0x10 ; '.'
000000000000f228         db  0x41 ; 'A'
000000000000f229         db  0x0e ; '.'
000000000000f22a         db  0x08 ; '.'
000000000000f22b         db  0x00 ; '.'
000000000000f22c         db  0x00 ; '.'
000000000000f22d         db  0x00 ; '.'
000000000000f22e         db  0x00 ; '.'
000000000000f22f         db  0x00 ; '.'
000000000000f230         dd         0x00000028                                  ; Length of the record
000000000000f234         dd         0x000007b4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f238         db         0xc8, 0x6b, 2 dup (0xff)                    ; begin 0x5e00
000000000000f23c         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x5e41)
000000000000f240         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f241         db  0x45 ; 'E'
000000000000f242         db  0x0e ; '.'
000000000000f243         db  0x10 ; '.'
000000000000f244         db  0x8c ; '.'
000000000000f245         db  0x02 ; '.'
000000000000f246         db  0x41 ; 'A'
000000000000f247         db  0x0e ; '.'
000000000000f248         db  0x18 ; '.'
000000000000f249         db  0x86 ; '.'
000000000000f24a         db  0x03 ; '.'
000000000000f24b         db  0x44 ; 'D'
000000000000f24c         db  0x0e ; '.'
000000000000f24d         db  0x20 ; ' '
000000000000f24e         db  0x83 ; '.'
000000000000f24f         db  0x04 ; '.'
000000000000f250         db  0x73 ; 's'
000000000000f251         db  0x0e ; '.'
000000000000f252         db  0x18 ; '.'
000000000000f253         db  0x41 ; 'A'
000000000000f254         db  0x0e ; '.'
000000000000f255         db  0x10 ; '.'
000000000000f256         db  0x42 ; 'B'
000000000000f257         db  0x0e ; '.'
000000000000f258         db  0x08 ; '.'
000000000000f259         db  0x00 ; '.'
000000000000f25a         db  0x00 ; '.'
000000000000f25b         db  0x00 ; '.'
000000000000f25c         dd         0x00000028                                  ; Length of the record
000000000000f260         dd         0x000007e0                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f264         db         0xec, 0x6b, 2 dup (0xff)                    ; begin 0x5e50
000000000000f268         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x5e91)
000000000000f26c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f26d         db  0x45 ; 'E'
000000000000f26e         db  0x0e ; '.'
000000000000f26f         db  0x10 ; '.'
000000000000f270         db  0x8c ; '.'
000000000000f271         db  0x02 ; '.'
000000000000f272         db  0x41 ; 'A'
000000000000f273         db  0x0e ; '.'
000000000000f274         db  0x18 ; '.'
000000000000f275         db  0x86 ; '.'
000000000000f276         db  0x03 ; '.'
000000000000f277         db  0x44 ; 'D'
000000000000f278         db  0x0e ; '.'
000000000000f279         db  0x20 ; ' '
000000000000f27a         db  0x83 ; '.'
000000000000f27b         db  0x04 ; '.'
000000000000f27c         db  0x73 ; 's'
000000000000f27d         db  0x0e ; '.'
000000000000f27e         db  0x18 ; '.'
000000000000f27f         db  0x41 ; 'A'
000000000000f280         db  0x0e ; '.'
000000000000f281         db  0x10 ; '.'
000000000000f282         db  0x42 ; 'B'
000000000000f283         db  0x0e ; '.'
000000000000f284         db  0x08 ; '.'
000000000000f285         db  0x00 ; '.'
000000000000f286         db  0x00 ; '.'
000000000000f287         db  0x00 ; '.'
000000000000f288         dd         0x00000074                                  ; Length of the record
000000000000f28c         dd         0x0000080c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f290         db         0x10, 0x6c, 2 dup (0xff)                    ; begin 0x5ea0
000000000000f294         db         0xb2, 0x1a, 2 dup (0x00)                    ; length 0x1ab2 (end at 0x7952)
000000000000f298         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f299         db  0x42 ; 'B'
000000000000f29a         db  0x0e ; '.'
000000000000f29b         db  0x10 ; '.'
000000000000f29c         db  0x8f ; '.'
000000000000f29d         db  0x02 ; '.'
000000000000f29e         db  0x42 ; 'B'
000000000000f29f         db  0x0e ; '.'
000000000000f2a0         db  0x18 ; '.'
000000000000f2a1         db  0x8e ; '.'
000000000000f2a2         db  0x03 ; '.'
000000000000f2a3         db  0x45 ; 'E'
000000000000f2a4         db  0x0e ; '.'
000000000000f2a5         db  0x20 ; ' '
000000000000f2a6         db  0x8d ; '.'
000000000000f2a7         db  0x04 ; '.'
000000000000f2a8         db  0x42 ; 'B'
000000000000f2a9         db  0x0e ; '.'
000000000000f2aa         db  0x28 ; '('
000000000000f2ab         db  0x8c ; '.'
000000000000f2ac         db  0x05 ; '.'
000000000000f2ad         db  0x44 ; 'D'
000000000000f2ae         db  0x0e ; '.'
000000000000f2af         db  0x30 ; '0'
000000000000f2b0         db  0x86 ; '.'
000000000000f2b1         db  0x06 ; '.'
000000000000f2b2         db  0x41 ; 'A'
000000000000f2b3         db  0x0e ; '.'
000000000000f2b4         db  0x38 ; '8'
000000000000f2b5         db  0x83 ; '.'
000000000000f2b6         db  0x07 ; '.'
000000000000f2b7         db  0x4a ; 'J'
000000000000f2b8         db  0x0e ; '.'
000000000000f2b9         db  0x80 ; '.'
000000000000f2ba         db  0x0a ; '.'
000000000000f2bb         db  0x02 ; '.'
000000000000f2bc         db  0xd6 ; '.'
000000000000f2bd         db  0x0a ; '.'
000000000000f2be         db  0x0e ; '.'
000000000000f2bf         db  0x38 ; '8'
000000000000f2c0         db  0x41 ; 'A'
000000000000f2c1         db  0x0e ; '.'
000000000000f2c2         db  0x30 ; '0'
000000000000f2c3         db  0x41 ; 'A'
000000000000f2c4         db  0x0e ; '.'
000000000000f2c5         db  0x28 ; '('
000000000000f2c6         db  0x42 ; 'B'
000000000000f2c7         db  0x0e ; '.'
000000000000f2c8         db  0x20 ; ' '
000000000000f2c9         db  0x42 ; 'B'
000000000000f2ca         db  0x0e ; '.'
000000000000f2cb         db  0x18 ; '.'
000000000000f2cc         db  0x42 ; 'B'
000000000000f2cd         db  0x0e ; '.'
000000000000f2ce         db  0x10 ; '.'
000000000000f2cf         db  0x42 ; 'B'
000000000000f2d0         db  0x0e ; '.'
000000000000f2d1         db  0x08 ; '.'
000000000000f2d2         db  0x46 ; 'F'
000000000000f2d3         db  0x0b ; '.'
000000000000f2d4         db  0x03 ; '.'
000000000000f2d5         db  0x99 ; '.'
000000000000f2d6         db  0x05 ; '.'
000000000000f2d7         db  0x0e ; '.'
000000000000f2d8         db  0x88 ; '.'
000000000000f2d9         db  0x0a ; '.'
000000000000f2da         db  0x44 ; 'D'
000000000000f2db         db  0x0e ; '.'
000000000000f2dc         db  0x90 ; '.'
000000000000f2dd         db  0x0a ; '.'
000000000000f2de         db  0x44 ; 'D'
000000000000f2df         db  0x0e ; '.'
000000000000f2e0         db  0x98 ; '.'
000000000000f2e1         db  0x0a ; '.'
000000000000f2e2         db  0x45 ; 'E'
000000000000f2e3         db  0x0e ; '.'
000000000000f2e4         db  0xa0 ; '.'
000000000000f2e5         db  0x0a ; '.'
000000000000f2e6         db  0x4e ; 'N'
000000000000f2e7         db  0x0e ; '.'
000000000000f2e8         db  0x80 ; '.'
000000000000f2e9         db  0x0a ; '.'
000000000000f2ea         db  0x02 ; '.'
000000000000f2eb         db  0x98 ; '.'
000000000000f2ec         db  0x0e ; '.'
000000000000f2ed         db  0x88 ; '.'
000000000000f2ee         db  0x0a ; '.'
000000000000f2ef         db  0x44 ; 'D'
000000000000f2f0         db  0x0e ; '.'
000000000000f2f1         db  0x90 ; '.'
000000000000f2f2         db  0x0a ; '.'
000000000000f2f3         db  0x44 ; 'D'
000000000000f2f4         db  0x0e ; '.'
000000000000f2f5         db  0x98 ; '.'
000000000000f2f6         db  0x0a ; '.'
000000000000f2f7         db  0x45 ; 'E'
000000000000f2f8         db  0x0e ; '.'
000000000000f2f9         db  0xa0 ; '.'
000000000000f2fa         db  0x0a ; '.'
000000000000f2fb         db  0x5d ; ']'
000000000000f2fc         db  0x0e ; '.'
000000000000f2fd         db  0x80 ; '.'
000000000000f2fe         db  0x0a ; '.'
000000000000f2ff         db  0x00 ; '.'
000000000000f300         dd         0x0000002c                                  ; Length of the record
000000000000f304         dd         0x00000884                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f308         db         0x58, 0x86, 2 dup (0xff)                    ; begin 0x7960
000000000000f30c         db         0x4e, 3 dup (0x00)                          ; length 0x4e (end at 0x79ae)
000000000000f310         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f311         db  0x44 ; 'D'
000000000000f312         db  0x0e ; '.'
000000000000f313         db  0x20 ; ' '
000000000000f314         db  0x57 ; 'W'
000000000000f315         db  0x0e ; '.'
000000000000f316         db  0x28 ; '('
000000000000f317         db  0x45 ; 'E'
000000000000f318         db  0x0e ; '.'
000000000000f319         db  0x30 ; '0'
000000000000f31a         db  0x49 ; 'I'
000000000000f31b         db  0x0e ; '.'
000000000000f31c         db  0x38 ; '8'
000000000000f31d         db  0x42 ; 'B'
000000000000f31e         db  0x0e ; '.'
000000000000f31f         db  0x40 ; '@'
000000000000f320         db  0x49 ; 'I'
000000000000f321         db  0x0e ; '.'
000000000000f322         db  0x20 ; ' '
000000000000f323         db  0x54 ; 'T'
000000000000f324         db  0x0a ; '.'
000000000000f325         db  0x0e ; '.'
000000000000f326         db  0x08 ; '.'
000000000000f327         db  0x41 ; 'A'
000000000000f328         db  0x0b ; '.'
000000000000f329         db  0x00 ; '.'
000000000000f32a         db  0x00 ; '.'
000000000000f32b         db  0x00 ; '.'
000000000000f32c         db  0x00 ; '.'
000000000000f32d         db  0x00 ; '.'
000000000000f32e         db  0x00 ; '.'
000000000000f32f         db  0x00 ; '.'
000000000000f330         dd         0x0000001c                                  ; Length of the record
000000000000f334         dd         0x000008b4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f338         db         0x78, 0x86, 2 dup (0xff)                    ; begin 0x79b0
000000000000f33c         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x7a4f)
000000000000f340         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f341         db  0x44 ; 'D'
000000000000f342         db  0x0e ; '.'
000000000000f343         db  0x10 ; '.'
000000000000f344         db  0x83 ; '.'
000000000000f345         db  0x02 ; '.'
000000000000f346         db  0x02 ; '.'
000000000000f347         db  0x78 ; 'x'
000000000000f348         db  0x0a ; '.'
000000000000f349         db  0x0e ; '.'
000000000000f34a         db  0x08 ; '.'
000000000000f34b         db  0x41 ; 'A'
000000000000f34c         db  0x0b ; '.'
000000000000f34d         db  0x00 ; '.'
000000000000f34e         db  0x00 ; '.'
000000000000f34f         db  0x00 ; '.'
000000000000f350         dd         0x00000040                                  ; Length of the record
000000000000f354         dd         0x000008d4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f358         db         0xf8, 0x86, 2 dup (0xff)                    ; begin 0x7a50
000000000000f35c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x7b37)
000000000000f360         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f361         db  0x41 ; 'A'
000000000000f362         db  0x0e ; '.'
000000000000f363         db  0x10 ; '.'
000000000000f364         db  0x86 ; '.'
000000000000f365         db  0x02 ; '.'
000000000000f366         db  0x41 ; 'A'
000000000000f367         db  0x0e ; '.'
000000000000f368         db  0x18 ; '.'
000000000000f369         db  0x83 ; '.'
000000000000f36a         db  0x03 ; '.'
000000000000f36b         db  0x49 ; 'I'
000000000000f36c         db  0x0e ; '.'
000000000000f36d         db  0x20 ; ' '
000000000000f36e         db  0x6e ; 'n'
000000000000f36f         db  0x0a ; '.'
000000000000f370         db  0x0e ; '.'
000000000000f371         db  0x18 ; '.'
000000000000f372         db  0x41 ; 'A'
000000000000f373         db  0x0e ; '.'
000000000000f374         db  0x10 ; '.'
000000000000f375         db  0x41 ; 'A'
000000000000f376         db  0x0e ; '.'
000000000000f377         db  0x08 ; '.'
000000000000f378         db  0x45 ; 'E'
000000000000f379         db  0x0b ; '.'
000000000000f37a         db  0x02 ; '.'
000000000000f37b         db  0x4a ; 'J'
000000000000f37c         db  0x0a ; '.'
000000000000f37d         db  0x0e ; '.'
000000000000f37e         db  0x18 ; '.'
000000000000f37f         db  0x41 ; 'A'
000000000000f380         db  0x0e ; '.'
000000000000f381         db  0x10 ; '.'
000000000000f382         db  0x41 ; 'A'
000000000000f383         db  0x0e ; '.'
000000000000f384         db  0x08 ; '.'
000000000000f385         db  0x44 ; 'D'
000000000000f386         db  0x0b ; '.'
000000000000f387         db  0x02 ; '.'
000000000000f388         db  0x54 ; 'T'
000000000000f389         db  0x0e ; '.'
000000000000f38a         db  0x18 ; '.'
000000000000f38b         db  0x41 ; 'A'
000000000000f38c         db  0x0e ; '.'
000000000000f38d         db  0x10 ; '.'
000000000000f38e         db  0x41 ; 'A'
000000000000f38f         db  0x0e ; '.'
000000000000f390         db  0x08 ; '.'
000000000000f391         db  0x00 ; '.'
000000000000f392         db  0x00 ; '.'
000000000000f393         db  0x00 ; '.'
000000000000f394         dd         0x00000074                                  ; Length of the record
000000000000f398         dd         0x00000918                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f39c         db         0xa4, 0x87, 2 dup (0xff)                    ; begin 0x7b40
000000000000f3a0         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x8d74)
000000000000f3a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f3a5         db  0x42 ; 'B'
000000000000f3a6         db  0x0e ; '.'
000000000000f3a7         db  0x10 ; '.'
000000000000f3a8         db  0x8f ; '.'
000000000000f3a9         db  0x02 ; '.'
000000000000f3aa         db  0x42 ; 'B'
000000000000f3ab         db  0x0e ; '.'
000000000000f3ac         db  0x18 ; '.'
000000000000f3ad         db  0x8e ; '.'
000000000000f3ae         db  0x03 ; '.'
000000000000f3af         db  0x45 ; 'E'
000000000000f3b0         db  0x0e ; '.'
000000000000f3b1         db  0x20 ; ' '
000000000000f3b2         db  0x8d ; '.'
000000000000f3b3         db  0x04 ; '.'
000000000000f3b4         db  0x42 ; 'B'
000000000000f3b5         db  0x0e ; '.'
000000000000f3b6         db  0x28 ; '('
000000000000f3b7         db  0x8c ; '.'
000000000000f3b8         db  0x05 ; '.'
000000000000f3b9         db  0x44 ; 'D'
000000000000f3ba         db  0x0e ; '.'
000000000000f3bb         db  0x30 ; '0'
000000000000f3bc         db  0x86 ; '.'
000000000000f3bd         db  0x06 ; '.'
000000000000f3be         db  0x41 ; 'A'
000000000000f3bf         db  0x0e ; '.'
000000000000f3c0         db  0x38 ; '8'
000000000000f3c1         db  0x83 ; '.'
000000000000f3c2         db  0x07 ; '.'
000000000000f3c3         db  0x53 ; 'S'
000000000000f3c4         db  0x0e ; '.'
000000000000f3c5         db  0xf0 ; '.'
000000000000f3c6         db  0x01 ; '.'
000000000000f3c7         db  0x03 ; '.'
000000000000f3c8         db  0x81 ; '.'
000000000000f3c9         db  0x0b ; '.'
000000000000f3ca         db  0x0e ; '.'
000000000000f3cb         db  0xf8 ; '.'
000000000000f3cc         db  0x01 ; '.'
000000000000f3cd         db  0x4a ; 'J'
000000000000f3ce         db  0x0e ; '.'
000000000000f3cf         db  0x80 ; '.'
000000000000f3d0         db  0x02 ; '.'
000000000000f3d1         db  0x44 ; 'D'
000000000000f3d2         db  0x0e ; '.'
000000000000f3d3         db  0x88 ; '.'
000000000000f3d4         db  0x02 ; '.'
000000000000f3d5         db  0x45 ; 'E'
000000000000f3d6         db  0x0e ; '.'
000000000000f3d7         db  0x90 ; '.'
000000000000f3d8         db  0x02 ; '.'
000000000000f3d9         db  0x5f ; '_'
000000000000f3da         db  0x0e ; '.'
000000000000f3db         db  0xf0 ; '.'
000000000000f3dc         db  0x01 ; '.'
000000000000f3dd         db  0x64 ; 'd'
000000000000f3de         db  0x0a ; '.'
000000000000f3df         db  0x0e ; '.'
000000000000f3e0         db  0x38 ; '8'
000000000000f3e1         db  0x41 ; 'A'
000000000000f3e2         db  0x0e ; '.'
000000000000f3e3         db  0x30 ; '0'
000000000000f3e4         db  0x41 ; 'A'
000000000000f3e5         db  0x0e ; '.'
000000000000f3e6         db  0x28 ; '('
000000000000f3e7         db  0x42 ; 'B'
000000000000f3e8         db  0x0e ; '.'
000000000000f3e9         db  0x20 ; ' '
000000000000f3ea         db  0x42 ; 'B'
000000000000f3eb         db  0x0e ; '.'
000000000000f3ec         db  0x18 ; '.'
000000000000f3ed         db  0x42 ; 'B'
000000000000f3ee         db  0x0e ; '.'
000000000000f3ef         db  0x10 ; '.'
000000000000f3f0         db  0x42 ; 'B'
000000000000f3f1         db  0x0e ; '.'
000000000000f3f2         db  0x08 ; '.'
000000000000f3f3         db  0x44 ; 'D'
000000000000f3f4         db  0x0b ; '.'
000000000000f3f5         db  0x03 ; '.'
000000000000f3f6         db  0x99 ; '.'
000000000000f3f7         db  0x05 ; '.'
000000000000f3f8         db  0x0e ; '.'
000000000000f3f9         db  0xf8 ; '.'
000000000000f3fa         db  0x01 ; '.'
000000000000f3fb         db  0x4d ; 'M'
000000000000f3fc         db  0x0e ; '.'
000000000000f3fd         db  0x80 ; '.'
000000000000f3fe         db  0x02 ; '.'
000000000000f3ff         db  0x44 ; 'D'
000000000000f400         db  0x0e ; '.'
000000000000f401         db  0x88 ; '.'
000000000000f402         db  0x02 ; '.'
000000000000f403         db  0x47 ; 'G'
000000000000f404         db  0x0e ; '.'
000000000000f405         db  0x90 ; '.'
000000000000f406         db  0x02 ; '.'
000000000000f407         db  0x5b ; '['
000000000000f408         db  0x0e ; '.'
000000000000f409         db  0xf0 ; '.'
000000000000f40a         db  0x01 ; '.'
000000000000f40b         db  0x00 ; '.'
000000000000f40c         dd         0x00000068                                  ; Length of the record
000000000000f410         dd         0x00000990                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f414         db         0x6c, 0x99, 2 dup (0xff)                    ; begin 0x8d80
000000000000f418         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x8f2b)
000000000000f41c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f41d         db  0x42 ; 'B'
000000000000f41e         db  0x0e ; '.'
000000000000f41f         db  0x10 ; '.'
000000000000f420         db  0x8f ; '.'
000000000000f421         db  0x02 ; '.'
000000000000f422         db  0x42 ; 'B'
000000000000f423         db  0x0e ; '.'
000000000000f424         db  0x18 ; '.'
000000000000f425         db  0x8e ; '.'
000000000000f426         db  0x03 ; '.'
000000000000f427         db  0x45 ; 'E'
000000000000f428         db  0x0e ; '.'
000000000000f429         db  0x20 ; ' '
000000000000f42a         db  0x8d ; '.'
000000000000f42b         db  0x04 ; '.'
000000000000f42c         db  0x42 ; 'B'
000000000000f42d         db  0x0e ; '.'
000000000000f42e         db  0x28 ; '('
000000000000f42f         db  0x8c ; '.'
000000000000f430         db  0x05 ; '.'
000000000000f431         db  0x44 ; 'D'
000000000000f432         db  0x0e ; '.'
000000000000f433         db  0x30 ; '0'
000000000000f434         db  0x86 ; '.'
000000000000f435         db  0x06 ; '.'
000000000000f436         db  0x41 ; 'A'
000000000000f437         db  0x0e ; '.'
000000000000f438         db  0x38 ; '8'
000000000000f439         db  0x83 ; '.'
000000000000f43a         db  0x07 ; '.'
000000000000f43b         db  0x47 ; 'G'
000000000000f43c         db  0x0e ; '.'
000000000000f43d         db  0x60 ; '`'
000000000000f43e         db  0x02 ; '.'
000000000000f43f         db  0x99 ; '.'
000000000000f440         db  0x0e ; '.'
000000000000f441         db  0x68 ; 'h'
000000000000f442         db  0x5f ; '_'
000000000000f443         db  0x0e ; '.'
000000000000f444         db  0x70 ; 'p'
000000000000f445         db  0x46 ; 'F'
000000000000f446         db  0x0e ; '.'
000000000000f447         db  0x78 ; 'x'
000000000000f448         db  0x42 ; 'B'
000000000000f449         db  0x0e ; '.'
000000000000f44a         db  0x80 ; '.'
000000000000f44b         db  0x01 ; '.'
000000000000f44c         db  0x59 ; 'Y'
000000000000f44d         db  0x0e ; '.'
000000000000f44e         db  0x60 ; '`'
000000000000f44f         db  0x02 ; '.'
000000000000f450         db  0x40 ; '@'
000000000000f451         db  0x0e ; '.'
000000000000f452         db  0x68 ; 'h'
000000000000f453         db  0x4b ; 'K'
000000000000f454         db  0x0e ; '.'
000000000000f455         db  0x70 ; 'p'
000000000000f456         db  0x43 ; 'C'
000000000000f457         db  0x0e ; '.'
000000000000f458         db  0x78 ; 'x'
000000000000f459         db  0x45 ; 'E'
000000000000f45a         db  0x0e ; '.'
000000000000f45b         db  0x80 ; '.'
000000000000f45c         db  0x01 ; '.'
000000000000f45d         db  0x5e ; '^'
000000000000f45e         db  0x0e ; '.'
000000000000f45f         db  0x60 ; '`'
000000000000f460         db  0x4c ; 'L'
000000000000f461         db  0x0a ; '.'
000000000000f462         db  0x0e ; '.'
000000000000f463         db  0x38 ; '8'
000000000000f464         db  0x44 ; 'D'
000000000000f465         db  0x0e ; '.'
000000000000f466         db  0x30 ; '0'
000000000000f467         db  0x41 ; 'A'
000000000000f468         db  0x0e ; '.'
000000000000f469         db  0x28 ; '('
000000000000f46a         db  0x42 ; 'B'
000000000000f46b         db  0x0e ; '.'
000000000000f46c         db  0x20 ; ' '
000000000000f46d         db  0x42 ; 'B'
000000000000f46e         db  0x0e ; '.'
000000000000f46f         db  0x18 ; '.'
000000000000f470         db  0x42 ; 'B'
000000000000f471         db  0x0e ; '.'
000000000000f472         db  0x10 ; '.'
000000000000f473         db  0x42 ; 'B'
000000000000f474         db  0x0e ; '.'
000000000000f475         db  0x08 ; '.'
000000000000f476         db  0x46 ; 'F'
000000000000f477         db  0x0b ; '.'
000000000000f478         dd         0x00000028                                  ; Length of the record
000000000000f47c         dd         0x000009fc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f480         db         0xb0, 0x9a, 2 dup (0xff)                    ; begin 0x8f30
000000000000f484         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x8f66)
000000000000f488         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f489         db  0x42 ; 'B'
000000000000f48a         db  0x0e ; '.'
000000000000f48b         db  0x10 ; '.'
000000000000f48c         db  0x8c ; '.'
000000000000f48d         db  0x02 ; '.'
000000000000f48e         db  0x41 ; 'A'
000000000000f48f         db  0x0e ; '.'
000000000000f490         db  0x18 ; '.'
000000000000f491         db  0x86 ; '.'
000000000000f492         db  0x03 ; '.'
000000000000f493         db  0x41 ; 'A'
000000000000f494         db  0x0e ; '.'
000000000000f495         db  0x20 ; ' '
000000000000f496         db  0x83 ; '.'
000000000000f497         db  0x04 ; '.'
000000000000f498         db  0x6e ; 'n'
000000000000f499         db  0x0e ; '.'
000000000000f49a         db  0x18 ; '.'
000000000000f49b         db  0x41 ; 'A'
000000000000f49c         db  0x0e ; '.'
000000000000f49d         db  0x10 ; '.'
000000000000f49e         db  0x42 ; 'B'
000000000000f49f         db  0x0e ; '.'
000000000000f4a0         db  0x08 ; '.'
000000000000f4a1         db  0x00 ; '.'
000000000000f4a2         db  0x00 ; '.'
000000000000f4a3         db  0x00 ; '.'
000000000000f4a4         dd         0x00000010                                  ; Length of the record
000000000000f4a8         dd         0x00000a28                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f4ac         db         0xc4, 0x9a, 2 dup (0xff)                    ; begin 0x8f70
000000000000f4b0         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8f81)
000000000000f4b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f4b5         align      8
000000000000f4b8         dd         0x00000010                                  ; Length of the record
000000000000f4bc         dd         0x00000a3c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f4c0         db         0xd0, 0x9a, 2 dup (0xff)                    ; begin 0x8f90
000000000000f4c4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x8fa1)
000000000000f4c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f4c9         align      4
000000000000f4cc         dd         0x00000010                                  ; Length of the record
000000000000f4d0         dd         0x00000a50                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f4d4         db         0xdc, 0x9a, 2 dup (0xff)                    ; begin 0x8fb0
000000000000f4d8         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x8fe5)
000000000000f4dc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f4dd         align      32
000000000000f4e0         dd         0x00000010                                  ; Length of the record
000000000000f4e4         dd         0x00000a64                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f4e8         db         0x08, 0x9b, 2 dup (0xff)                    ; begin 0x8ff0
000000000000f4ec         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x9005)
000000000000f4f0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f4f1         align      4
000000000000f4f4         dd         0x00000010                                  ; Length of the record
000000000000f4f8         dd         0x00000a78                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f4fc         db         0x14, 0x9b, 2 dup (0xff)                    ; begin 0x9010
000000000000f500         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x9040)
000000000000f504         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f505         db  0x6b ; 'k'
000000000000f506         db  0x0e ; '.'
000000000000f507         db  0x10 ; '.'
000000000000f508         dd         0x00000050                                  ; Length of the record
000000000000f50c         dd         0x00000a8c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f510         db         0x30, 0x9b, 2 dup (0xff)                    ; begin 0x9040
000000000000f514         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x90b4)
000000000000f518         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f519         db  0x42 ; 'B'
000000000000f51a         db  0x0e ; '.'
000000000000f51b         db  0x10 ; '.'
000000000000f51c         db  0x8f ; '.'
000000000000f51d         db  0x02 ; '.'
000000000000f51e         db  0x42 ; 'B'
000000000000f51f         db  0x0e ; '.'
000000000000f520         db  0x18 ; '.'
000000000000f521         db  0x8e ; '.'
000000000000f522         db  0x03 ; '.'
000000000000f523         db  0x49 ; 'I'
000000000000f524         db  0x0e ; '.'
000000000000f525         db  0x20 ; ' '
000000000000f526         db  0x8d ; '.'
000000000000f527         db  0x04 ; '.'
000000000000f528         db  0x42 ; 'B'
000000000000f529         db  0x0e ; '.'
000000000000f52a         db  0x28 ; '('
000000000000f52b         db  0x8c ; '.'
000000000000f52c         db  0x05 ; '.'
000000000000f52d         db  0x44 ; 'D'
000000000000f52e         db  0x0e ; '.'
000000000000f52f         db  0x30 ; '0'
000000000000f530         db  0x86 ; '.'
000000000000f531         db  0x06 ; '.'
000000000000f532         db  0x41 ; 'A'
000000000000f533         db  0x0e ; '.'
000000000000f534         db  0x38 ; '8'
000000000000f535         db  0x83 ; '.'
000000000000f536         db  0x07 ; '.'
000000000000f537         db  0x4d ; 'M'
000000000000f538         db  0x0e ; '.'
000000000000f539         db  0x50 ; 'P'
000000000000f53a         db  0x5f ; '_'
000000000000f53b         db  0x0e ; '.'
000000000000f53c         db  0x58 ; 'X'
000000000000f53d         db  0x47 ; 'G'
000000000000f53e         db  0x0e ; '.'
000000000000f53f         db  0x60 ; '`'
000000000000f540         db  0x46 ; 'F'
000000000000f541         db  0x0e ; '.'
000000000000f542         db  0x68 ; 'h'
000000000000f543         db  0x44 ; 'D'
000000000000f544         db  0x0e ; '.'
000000000000f545         db  0x70 ; 'p'
000000000000f546         db  0x58 ; 'X'
000000000000f547         db  0x0e ; '.'
000000000000f548         db  0x38 ; '8'
000000000000f549         db  0x41 ; 'A'
000000000000f54a         db  0x0e ; '.'
000000000000f54b         db  0x30 ; '0'
000000000000f54c         db  0x41 ; 'A'
000000000000f54d         db  0x0e ; '.'
000000000000f54e         db  0x28 ; '('
000000000000f54f         db  0x42 ; 'B'
000000000000f550         db  0x0e ; '.'
000000000000f551         db  0x20 ; ' '
000000000000f552         db  0x42 ; 'B'
000000000000f553         db  0x0e ; '.'
000000000000f554         db  0x18 ; '.'
000000000000f555         db  0x42 ; 'B'
000000000000f556         db  0x0e ; '.'
000000000000f557         db  0x10 ; '.'
000000000000f558         db  0x42 ; 'B'
000000000000f559         db  0x0e ; '.'
000000000000f55a         db  0x08 ; '.'
000000000000f55b         db  0x00 ; '.'
000000000000f55c         dd         0x00000068                                  ; Length of the record
000000000000f560         dd         0x00000ae0                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f564         db         0x5c, 0x9b, 2 dup (0xff)                    ; begin 0x90c0
000000000000f568         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x91a3)
000000000000f56c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f56d         db  0x42 ; 'B'
000000000000f56e         db  0x0e ; '.'
000000000000f56f         db  0x10 ; '.'
000000000000f570         db  0x8f ; '.'
000000000000f571         db  0x02 ; '.'
000000000000f572         db  0x42 ; 'B'
000000000000f573         db  0x0e ; '.'
000000000000f574         db  0x18 ; '.'
000000000000f575         db  0x8e ; '.'
000000000000f576         db  0x03 ; '.'
000000000000f577         db  0x49 ; 'I'
000000000000f578         db  0x0e ; '.'
000000000000f579         db  0x20 ; ' '
000000000000f57a         db  0x8d ; '.'
000000000000f57b         db  0x04 ; '.'
000000000000f57c         db  0x42 ; 'B'
000000000000f57d         db  0x0e ; '.'
000000000000f57e         db  0x28 ; '('
000000000000f57f         db  0x8c ; '.'
000000000000f580         db  0x05 ; '.'
000000000000f581         db  0x44 ; 'D'
000000000000f582         db  0x0e ; '.'
000000000000f583         db  0x30 ; '0'
000000000000f584         db  0x86 ; '.'
000000000000f585         db  0x06 ; '.'
000000000000f586         db  0x41 ; 'A'
000000000000f587         db  0x0e ; '.'
000000000000f588         db  0x38 ; '8'
000000000000f589         db  0x83 ; '.'
000000000000f58a         db  0x07 ; '.'
000000000000f58b         db  0x4d ; 'M'
000000000000f58c         db  0x0e ; '.'
000000000000f58d         db  0x70 ; 'p'
000000000000f58e         db  0x65 ; 'e'
000000000000f58f         db  0x0e ; '.'
000000000000f590         db  0x78 ; 'x'
000000000000f591         db  0x4d ; 'M'
000000000000f592         db  0x0e ; '.'
000000000000f593         db  0x80 ; '.'
000000000000f594         db  0x01 ; '.'
000000000000f595         db  0x46 ; 'F'
000000000000f596         db  0x0e ; '.'
000000000000f597         db  0x88 ; '.'
000000000000f598         db  0x01 ; '.'
000000000000f599         db  0x42 ; 'B'
000000000000f59a         db  0x0e ; '.'
000000000000f59b         db  0x90 ; '.'
000000000000f59c         db  0x01 ; '.'
000000000000f59d         db  0x5e ; '^'
000000000000f59e         db  0x0e ; '.'
000000000000f59f         db  0x70 ; 'p'
000000000000f5a0         db  0x56 ; 'V'
000000000000f5a1         db  0x0e ; '.'
000000000000f5a2         db  0x78 ; 'x'
000000000000f5a3         db  0x43 ; 'C'
000000000000f5a4         db  0x0e ; '.'
000000000000f5a5         db  0x80 ; '.'
000000000000f5a6         db  0x01 ; '.'
000000000000f5a7         db  0x43 ; 'C'
000000000000f5a8         db  0x0e ; '.'
000000000000f5a9         db  0x88 ; '.'
000000000000f5aa         db  0x01 ; '.'
000000000000f5ab         db  0x56 ; 'V'
000000000000f5ac         db  0x0e ; '.'
000000000000f5ad         db  0x90 ; '.'
000000000000f5ae         db  0x01 ; '.'
000000000000f5af         db  0x52 ; 'R'
000000000000f5b0         db  0x0e ; '.'
000000000000f5b1         db  0x70 ; 'p'
000000000000f5b2         db  0x5b ; '['
000000000000f5b3         db  0x0e ; '.'
000000000000f5b4         db  0x38 ; '8'
000000000000f5b5         db  0x41 ; 'A'
000000000000f5b6         db  0x0e ; '.'
000000000000f5b7         db  0x30 ; '0'
000000000000f5b8         db  0x41 ; 'A'
000000000000f5b9         db  0x0e ; '.'
000000000000f5ba         db  0x28 ; '('
000000000000f5bb         db  0x42 ; 'B'
000000000000f5bc         db  0x0e ; '.'
000000000000f5bd         db  0x20 ; ' '
000000000000f5be         db  0x42 ; 'B'
000000000000f5bf         db  0x0e ; '.'
000000000000f5c0         db  0x18 ; '.'
000000000000f5c1         db  0x42 ; 'B'
000000000000f5c2         db  0x0e ; '.'
000000000000f5c3         db  0x10 ; '.'
000000000000f5c4         db  0x42 ; 'B'
000000000000f5c5         db  0x0e ; '.'
000000000000f5c6         db  0x08 ; '.'
000000000000f5c7         db  0x00 ; '.'
000000000000f5c8         dd         0x00000010                                  ; Length of the record
000000000000f5cc         dd         0x00000b4c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f5d0         db         0xe0, 0x9b, 2 dup (0xff)                    ; begin 0x91b0
000000000000f5d4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x91ba)
000000000000f5d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f5d9         align      4
000000000000f5dc         dd         0x00000028                                  ; Length of the record
000000000000f5e0         dd         0x00000b60                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f5e4         db         0xdc, 0x9b, 2 dup (0xff)                    ; begin 0x91c0
000000000000f5e8         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x9253)
000000000000f5ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f5ed         db  0x48 ; 'H'
000000000000f5ee         db  0x0e ; '.'
000000000000f5ef         db  0x10 ; '.'
000000000000f5f0         db  0x8c ; '.'
000000000000f5f1         db  0x02 ; '.'
000000000000f5f2         db  0x48 ; 'H'
000000000000f5f3         db  0x0e ; '.'
000000000000f5f4         db  0x18 ; '.'
000000000000f5f5         db  0x86 ; '.'
000000000000f5f6         db  0x03 ; '.'
000000000000f5f7         db  0x41 ; 'A'
000000000000f5f8         db  0x0e ; '.'
000000000000f5f9         db  0x20 ; ' '
000000000000f5fa         db  0x83 ; '.'
000000000000f5fb         db  0x04 ; '.'
000000000000f5fc         db  0x02 ; '.'
000000000000f5fd         db  0x74 ; 't'
000000000000f5fe         db  0x0e ; '.'
000000000000f5ff         db  0x18 ; '.'
000000000000f600         db  0x4b ; 'K'
000000000000f601         db  0x0e ; '.'
000000000000f602         db  0x10 ; '.'
000000000000f603         db  0x42 ; 'B'
000000000000f604         db  0x0e ; '.'
000000000000f605         db  0x08 ; '.'
000000000000f606         db  0x00 ; '.'
000000000000f607         db  0x00 ; '.'
000000000000f608         dd         0x00000010                                  ; Length of the record
000000000000f60c         dd         0x00000b8c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f610         db         0x50, 0x9c, 2 dup (0xff)                    ; begin 0x9260
000000000000f614         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9273)
000000000000f618         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f619         align      4
000000000000f61c         dd         0x00000010                                  ; Length of the record
000000000000f620         dd         0x00000ba0                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f624         db         0x5c, 0x9c, 2 dup (0xff)                    ; begin 0x9280
000000000000f628         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x928c)
000000000000f62c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f62d         align      16
000000000000f630         dd         0x00000010                                  ; Length of the record
000000000000f634         dd         0x00000bb4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f638         db         0x58, 0x9c, 2 dup (0xff)                    ; begin 0x9290
000000000000f63c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x92a8)
000000000000f640         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f641         align      4
000000000000f644         dd         0x00000010                                  ; Length of the record
000000000000f648         dd         0x00000bc8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f64c         db         0x64, 0x9c, 2 dup (0xff)                    ; begin 0x92b0
000000000000f650         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x92c4)
000000000000f654         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f655         align      8
000000000000f658         dd         0x00000018                                  ; Length of the record
000000000000f65c         dd         0x00000bdc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f660         db         0x70, 0x9c, 2 dup (0xff)                    ; begin 0x92d0
000000000000f664         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x935e)
000000000000f668         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f669         db  0x44 ; 'D'
000000000000f66a         db  0x0e ; '.'
000000000000f66b         db  0x50 ; 'P'
000000000000f66c         db  0x02 ; '.'
000000000000f66d         db  0x7f ; '.'
000000000000f66e         db  0x0a ; '.'
000000000000f66f         db  0x0e ; '.'
000000000000f670         db  0x08 ; '.'
000000000000f671         db  0x41 ; 'A'
000000000000f672         db  0x0b ; '.'
000000000000f673         db  0x00 ; '.'
000000000000f674         dd         0x00000018                                  ; Length of the record
000000000000f678         dd         0x00000bf8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f67c         db         0xe4, 0x9c, 2 dup (0xff)                    ; begin 0x9360
000000000000f680         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x93ea)
000000000000f684         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f685         db  0x44 ; 'D'
000000000000f686         db  0x0e ; '.'
000000000000f687         db  0x50 ; 'P'
000000000000f688         db  0x02 ; '.'
000000000000f689         db  0x7b ; '{'
000000000000f68a         db  0x0a ; '.'
000000000000f68b         db  0x0e ; '.'
000000000000f68c         db  0x08 ; '.'
000000000000f68d         db  0x41 ; 'A'
000000000000f68e         db  0x0b ; '.'
000000000000f68f         db  0x00 ; '.'
000000000000f690         dd         0x00000010                                  ; Length of the record
000000000000f694         dd         0x00000c14                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f698         db         0x58, 0x9d, 2 dup (0xff)                    ; begin 0x93f0
000000000000f69c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x93fc)
000000000000f6a0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f6a1         align      4
000000000000f6a4         dd         0x00000010                                  ; Length of the record
000000000000f6a8         dd         0x00000c28                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f6ac         db         0x54, 0x9d, 2 dup (0xff)                    ; begin 0x9400
000000000000f6b0         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x940f)
000000000000f6b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f6b5         align      8
000000000000f6b8         dd         0x00000018                                  ; Length of the record
000000000000f6bc         dd         0x00000c3c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f6c0         db         0x50, 0x9d, 2 dup (0xff)                    ; begin 0x9410
000000000000f6c4         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x94a8)
000000000000f6c8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f6c9         db  0x44 ; 'D'
000000000000f6ca         db  0x0e ; '.'
000000000000f6cb         db  0x50 ; 'P'
000000000000f6cc         db  0x02 ; '.'
000000000000f6cd         db  0x8e ; '.'
000000000000f6ce         db  0x0a ; '.'
000000000000f6cf         db  0x0e ; '.'
000000000000f6d0         db  0x08 ; '.'
000000000000f6d1         db  0x41 ; 'A'
000000000000f6d2         db  0x0b ; '.'
000000000000f6d3         db  0x00 ; '.'
000000000000f6d4         dd         0x00000010                                  ; Length of the record
000000000000f6d8         dd         0x00000c58                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f6dc         db         0xd4, 0x9d, 2 dup (0xff)                    ; begin 0x94b0
000000000000f6e0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x94c0)
000000000000f6e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f6e5         align      8
000000000000f6e8         dd         0x00000010                                  ; Length of the record
000000000000f6ec         dd         0x00000c6c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f6f0         db         0xd0, 0x9d, 2 dup (0xff)                    ; begin 0x94c0
000000000000f6f4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x94d1)
000000000000f6f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f6f9         align      4
000000000000f6fc         dd         0x00000010                                  ; Length of the record
000000000000f700         dd         0x00000c80                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f704         db         0xdc, 0x9d, 2 dup (0xff)                    ; begin 0x94e0
000000000000f708         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x94ea)
000000000000f70c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f70d         align      16
000000000000f710         dd         0x00000018                                  ; Length of the record
000000000000f714         dd         0x00000c94                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f718         db         0xd8, 0x9d, 2 dup (0xff)                    ; begin 0x94f0
000000000000f71c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x957e)
000000000000f720         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f721         db  0x44 ; 'D'
000000000000f722         db  0x0e ; '.'
000000000000f723         db  0x50 ; 'P'
000000000000f724         db  0x02 ; '.'
000000000000f725         db  0x7f ; '.'
000000000000f726         db  0x0a ; '.'
000000000000f727         db  0x0e ; '.'
000000000000f728         db  0x08 ; '.'
000000000000f729         db  0x41 ; 'A'
000000000000f72a         db  0x0b ; '.'
000000000000f72b         db  0x00 ; '.'
000000000000f72c         dd         0x00000018                                  ; Length of the record
000000000000f730         dd         0x00000cb0                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f734         db         0x4c, 0x9e, 2 dup (0xff)                    ; begin 0x9580
000000000000f738         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x9611)
000000000000f73c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f73d         db  0x44 ; 'D'
000000000000f73e         db  0x0e ; '.'
000000000000f73f         db  0x50 ; 'P'
000000000000f740         db  0x02 ; '.'
000000000000f741         db  0x82 ; '.'
000000000000f742         db  0x0a ; '.'
000000000000f743         db  0x0e ; '.'
000000000000f744         db  0x08 ; '.'
000000000000f745         db  0x41 ; 'A'
000000000000f746         db  0x0b ; '.'
000000000000f747         db  0x00 ; '.'
000000000000f748         dd         0x00000010                                  ; Length of the record
000000000000f74c         dd         0x00000ccc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f750         db         0xd0, 0x9e, 2 dup (0xff)                    ; begin 0x9620
000000000000f754         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x962c)
000000000000f758         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f759         align      4
000000000000f75c         dd         0x00000010                                  ; Length of the record
000000000000f760         dd         0x00000ce0                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f764         db         0xcc, 0x9e, 2 dup (0xff)                    ; begin 0x9630
000000000000f768         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x9647)
000000000000f76c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f76d         align      16
000000000000f770         dd         0x00000010                                  ; Length of the record
000000000000f774         dd         0x00000cf4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f778         db         0xd8, 0x9e, 2 dup (0xff)                    ; begin 0x9650
000000000000f77c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9663)
000000000000f780         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f781         align      4
000000000000f784         dd         0x00000010                                  ; Length of the record
000000000000f788         dd         0x00000d08                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f78c         db         0xe4, 0x9e, 2 dup (0xff)                    ; begin 0x9670
000000000000f790         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x967c)
000000000000f794         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f795         align      8
000000000000f798         dd         0x00000010                                  ; Length of the record
000000000000f79c         dd         0x00000d1c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f7a0         db         0xe0, 0x9e, 2 dup (0xff)                    ; begin 0x9680
000000000000f7a4         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x9694)
000000000000f7a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f7a9         align      4
000000000000f7ac         dd         0x00000010                                  ; Length of the record
000000000000f7b0         dd         0x00000d30                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f7b4         db         0xec, 0x9e, 2 dup (0xff)                    ; begin 0x96a0
000000000000f7b8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x96b3)
000000000000f7bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f7bd         align      64
000000000000f7c0         dd         0x00000014                                  ; Length of the record
000000000000f7c4         dd         0x00000d44                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f7c8         db         0xf8, 0x9e, 2 dup (0xff)                    ; begin 0x96c0
000000000000f7cc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x96d8)
000000000000f7d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f7d1         align      8
000000000000f7d8         dd         0x00000014                                  ; Length of the record
000000000000f7dc         dd         0x00000d5c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f7e0         db         0x00, 0x9f, 2 dup (0xff)                    ; begin 0x96e0
000000000000f7e4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0x96ee)
000000000000f7e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f7e9         align      16
000000000000f7f0         dd         0x00000110                                  ; Length of the record
000000000000f7f4         dd         0x00000d74                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f7f8         db         0xf8, 0x9e, 2 dup (0xff)                    ; begin 0x96f0
000000000000f7fc         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x9b07)
000000000000f800         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f801         db  0x42 ; 'B'
000000000000f802         db  0x0e ; '.'
000000000000f803         db  0x10 ; '.'
000000000000f804         db  0x8f ; '.'
000000000000f805         db  0x02 ; '.'
000000000000f806         db  0x42 ; 'B'
000000000000f807         db  0x0e ; '.'
000000000000f808         db  0x18 ; '.'
000000000000f809         db  0x8e ; '.'
000000000000f80a         db  0x03 ; '.'
000000000000f80b         db  0x42 ; 'B'
000000000000f80c         db  0x0e ; '.'
000000000000f80d         db  0x20 ; ' '
000000000000f80e         db  0x8d ; '.'
000000000000f80f         db  0x04 ; '.'
000000000000f810         db  0x42 ; 'B'
000000000000f811         db  0x0e ; '.'
000000000000f812         db  0x28 ; '('
000000000000f813         db  0x8c ; '.'
000000000000f814         db  0x05 ; '.'
000000000000f815         db  0x44 ; 'D'
000000000000f816         db  0x0e ; '.'
000000000000f817         db  0x30 ; '0'
000000000000f818         db  0x86 ; '.'
000000000000f819         db  0x06 ; '.'
000000000000f81a         db  0x41 ; 'A'
000000000000f81b         db  0x0e ; '.'
000000000000f81c         db  0x38 ; '8'
000000000000f81d         db  0x83 ; '.'
000000000000f81e         db  0x07 ; '.'
000000000000f81f         db  0x4a ; 'J'
000000000000f820         db  0x0e ; '.'
000000000000f821         db  0x60 ; '`'
000000000000f822         db  0x02 ; '.'
000000000000f823         db  0xdd ; '.'
000000000000f824         db  0x0e ; '.'
000000000000f825         db  0x68 ; 'h'
000000000000f826         db  0x57 ; 'W'
000000000000f827         db  0x0e ; '.'
000000000000f828         db  0x70 ; 'p'
000000000000f829         db  0x42 ; 'B'
000000000000f82a         db  0x0e ; '.'
000000000000f82b         db  0x78 ; 'x'
000000000000f82c         db  0x42 ; 'B'
000000000000f82d         db  0x0e ; '.'
000000000000f82e         db  0x80 ; '.'
000000000000f82f         db  0x01 ; '.'
000000000000f830         db  0x42 ; 'B'
000000000000f831         db  0x0e ; '.'
000000000000f832         db  0x88 ; '.'
000000000000f833         db  0x01 ; '.'
000000000000f834         db  0x42 ; 'B'
000000000000f835         db  0x0e ; '.'
000000000000f836         db  0x90 ; '.'
000000000000f837         db  0x01 ; '.'
000000000000f838         db  0x53 ; 'S'
000000000000f839         db  0x0e ; '.'
000000000000f83a         db  0x60 ; '`'
000000000000f83b         db  0x44 ; 'D'
000000000000f83c         db  0x0a ; '.'
000000000000f83d         db  0x0e ; '.'
000000000000f83e         db  0x38 ; '8'
000000000000f83f         db  0x41 ; 'A'
000000000000f840         db  0x0e ; '.'
000000000000f841         db  0x30 ; '0'
000000000000f842         db  0x41 ; 'A'
000000000000f843         db  0x0e ; '.'
000000000000f844         db  0x28 ; '('
000000000000f845         db  0x42 ; 'B'
000000000000f846         db  0x0e ; '.'
000000000000f847         db  0x20 ; ' '
000000000000f848         db  0x42 ; 'B'
000000000000f849         db  0x0e ; '.'
000000000000f84a         db  0x18 ; '.'
000000000000f84b         db  0x42 ; 'B'
000000000000f84c         db  0x0e ; '.'
000000000000f84d         db  0x10 ; '.'
000000000000f84e         db  0x42 ; 'B'
000000000000f84f         db  0x0e ; '.'
000000000000f850         db  0x08 ; '.'
000000000000f851         db  0x44 ; 'D'
000000000000f852         db  0x0b ; '.'
000000000000f853         db  0x02 ; '.'
000000000000f854         db  0x78 ; 'x'
000000000000f855         db  0x0a ; '.'
000000000000f856         db  0x0e ; '.'
000000000000f857         db  0x68 ; 'h'
000000000000f858         db  0x48 ; 'H'
000000000000f859         db  0x0b ; '.'
000000000000f85a         db  0x5a ; 'Z'
000000000000f85b         db  0x0a ; '.'
000000000000f85c         db  0x0e ; '.'
000000000000f85d         db  0x38 ; '8'
000000000000f85e         db  0x47 ; 'G'
000000000000f85f         db  0x0e ; '.'
000000000000f860         db  0x30 ; '0'
000000000000f861         db  0x41 ; 'A'
000000000000f862         db  0x0e ; '.'
000000000000f863         db  0x28 ; '('
000000000000f864         db  0x42 ; 'B'
000000000000f865         db  0x0e ; '.'
000000000000f866         db  0x20 ; ' '
000000000000f867         db  0x42 ; 'B'
000000000000f868         db  0x0e ; '.'
000000000000f869         db  0x18 ; '.'
000000000000f86a         db  0x42 ; 'B'
000000000000f86b         db  0x0e ; '.'
000000000000f86c         db  0x10 ; '.'
000000000000f86d         db  0x42 ; 'B'
000000000000f86e         db  0x0e ; '.'
000000000000f86f         db  0x08 ; '.'
000000000000f870         db  0x56 ; 'V'
000000000000f871         db  0x0b ; '.'
000000000000f872         db  0x5e ; '^'
000000000000f873         db  0x0a ; '.'
000000000000f874         db  0x0e ; '.'
000000000000f875         db  0x38 ; '8'
000000000000f876         db  0x52 ; 'R'
000000000000f877         db  0x0e ; '.'
000000000000f878         db  0x30 ; '0'
000000000000f879         db  0x41 ; 'A'
000000000000f87a         db  0x0e ; '.'
000000000000f87b         db  0x28 ; '('
000000000000f87c         db  0x42 ; 'B'
000000000000f87d         db  0x0e ; '.'
000000000000f87e         db  0x20 ; ' '
000000000000f87f         db  0x42 ; 'B'
000000000000f880         db  0x0e ; '.'
000000000000f881         db  0x18 ; '.'
000000000000f882         db  0x42 ; 'B'
000000000000f883         db  0x0e ; '.'
000000000000f884         db  0x10 ; '.'
000000000000f885         db  0x42 ; 'B'
000000000000f886         db  0x0e ; '.'
000000000000f887         db  0x08 ; '.'
000000000000f888         db  0x4f ; 'O'
000000000000f889         db  0x0b ; '.'
000000000000f88a         db  0x62 ; 'b'
000000000000f88b         db  0x0a ; '.'
000000000000f88c         db  0x0e ; '.'
000000000000f88d         db  0x38 ; '8'
000000000000f88e         db  0x50 ; 'P'
000000000000f88f         db  0x0e ; '.'
000000000000f890         db  0x30 ; '0'
000000000000f891         db  0x41 ; 'A'
000000000000f892         db  0x0e ; '.'
000000000000f893         db  0x28 ; '('
000000000000f894         db  0x42 ; 'B'
000000000000f895         db  0x0e ; '.'
000000000000f896         db  0x20 ; ' '
000000000000f897         db  0x42 ; 'B'
000000000000f898         db  0x0e ; '.'
000000000000f899         db  0x18 ; '.'
000000000000f89a         db  0x42 ; 'B'
000000000000f89b         db  0x0e ; '.'
000000000000f89c         db  0x10 ; '.'
000000000000f89d         db  0x42 ; 'B'
000000000000f89e         db  0x0e ; '.'
000000000000f89f         db  0x08 ; '.'
000000000000f8a0         db  0x55 ; 'U'
000000000000f8a1         db  0x0b ; '.'
000000000000f8a2         db  0x66 ; 'f'
000000000000f8a3         db  0x0e ; '.'
000000000000f8a4         db  0x68 ; 'h'
000000000000f8a5         db  0x42 ; 'B'
000000000000f8a6         db  0x0e ; '.'
000000000000f8a7         db  0x70 ; 'p'
000000000000f8a8         db  0x5c ; '\'
000000000000f8a9         db  0x0e ; '.'
000000000000f8aa         db  0x68 ; 'h'
000000000000f8ab         db  0x41 ; 'A'
000000000000f8ac         db  0x0e ; '.'
000000000000f8ad         db  0x60 ; '`'
000000000000f8ae         db  0x44 ; 'D'
000000000000f8af         db  0x0a ; '.'
000000000000f8b0         db  0x0e ; '.'
000000000000f8b1         db  0x38 ; '8'
000000000000f8b2         db  0x41 ; 'A'
000000000000f8b3         db  0x0e ; '.'
000000000000f8b4         db  0x30 ; '0'
000000000000f8b5         db  0x41 ; 'A'
000000000000f8b6         db  0x0e ; '.'
000000000000f8b7         db  0x28 ; '('
000000000000f8b8         db  0x42 ; 'B'
000000000000f8b9         db  0x0e ; '.'
000000000000f8ba         db  0x20 ; ' '
000000000000f8bb         db  0x42 ; 'B'
000000000000f8bc         db  0x0e ; '.'
000000000000f8bd         db  0x18 ; '.'
000000000000f8be         db  0x42 ; 'B'
000000000000f8bf         db  0x0e ; '.'
000000000000f8c0         db  0x10 ; '.'
000000000000f8c1         db  0x42 ; 'B'
000000000000f8c2         db  0x0e ; '.'
000000000000f8c3         db  0x08 ; '.'
000000000000f8c4         db  0x45 ; 'E'
000000000000f8c5         db  0x0b ; '.'
000000000000f8c6         db  0x68 ; 'h'
000000000000f8c7         db  0x0a ; '.'
000000000000f8c8         db  0x0e ; '.'
000000000000f8c9         db  0x68 ; 'h'
000000000000f8ca         db  0x48 ; 'H'
000000000000f8cb         db  0x0b ; '.'
000000000000f8cc         db  0x72 ; 'r'
000000000000f8cd         db  0x0e ; '.'
000000000000f8ce         db  0x68 ; 'h'
000000000000f8cf         db  0x45 ; 'E'
000000000000f8d0         db  0x0e ; '.'
000000000000f8d1         db  0x70 ; 'p'
000000000000f8d2         db  0x42 ; 'B'
000000000000f8d3         db  0x0e ; '.'
000000000000f8d4         db  0x78 ; 'x'
000000000000f8d5         db  0x42 ; 'B'
000000000000f8d6         db  0x0e ; '.'
000000000000f8d7         db  0x80 ; '.'
000000000000f8d8         db  0x01 ; '.'
000000000000f8d9         db  0x5e ; '^'
000000000000f8da         db  0x0e ; '.'
000000000000f8db         db  0x60 ; '`'
000000000000f8dc         db  0x44 ; 'D'
000000000000f8dd         db  0x0a ; '.'
000000000000f8de         db  0x0e ; '.'
000000000000f8df         db  0x38 ; '8'
000000000000f8e0         db  0x41 ; 'A'
000000000000f8e1         db  0x0e ; '.'
000000000000f8e2         db  0x30 ; '0'
000000000000f8e3         db  0x41 ; 'A'
000000000000f8e4         db  0x0e ; '.'
000000000000f8e5         db  0x28 ; '('
000000000000f8e6         db  0x42 ; 'B'
000000000000f8e7         db  0x0e ; '.'
000000000000f8e8         db  0x20 ; ' '
000000000000f8e9         db  0x42 ; 'B'
000000000000f8ea         db  0x0e ; '.'
000000000000f8eb         db  0x18 ; '.'
000000000000f8ec         db  0x42 ; 'B'
000000000000f8ed         db  0x0e ; '.'
000000000000f8ee         db  0x10 ; '.'
000000000000f8ef         db  0x42 ; 'B'
000000000000f8f0         db  0x0e ; '.'
000000000000f8f1         db  0x08 ; '.'
000000000000f8f2         db  0x41 ; 'A'
000000000000f8f3         db  0x0b ; '.'
000000000000f8f4         db  0x79 ; 'y'
000000000000f8f5         db  0x0a ; '.'
000000000000f8f6         db  0x0e ; '.'
000000000000f8f7         db  0x68 ; 'h'
000000000000f8f8         db  0x42 ; 'B'
000000000000f8f9         db  0x0e ; '.'
000000000000f8fa         db  0x70 ; 'p'
000000000000f8fb         db  0x42 ; 'B'
000000000000f8fc         db  0x0e ; '.'
000000000000f8fd         db  0x78 ; 'x'
000000000000f8fe         db  0x42 ; 'B'
000000000000f8ff         db  0x0e ; '.'
000000000000f900         db  0x80 ; '.'
000000000000f901         db  0x01 ; '.'
000000000000f902         db  0x51 ; 'Q'
000000000000f903         db  0x0b ; '.'
000000000000f904         dd         0x00000010                                  ; Length of the record
000000000000f908         dd         0x00000e88                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f90c         db         0x04, 0xa2, 2 dup (0xff)                    ; begin 0x9b10
000000000000f910         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x9b30)
000000000000f914         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f915         align      8
000000000000f918         dd         0x00000018                                  ; Length of the record
000000000000f91c         dd         0x00000e9c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f920         db         0x10, 0xa2, 2 dup (0xff)                    ; begin 0x9b30
000000000000f924         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x9ba8)
000000000000f928         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f929         db  0x44 ; 'D'
000000000000f92a         db  0x0e ; '.'
000000000000f92b         db  0x70 ; 'p'
000000000000f92c         db  0x02 ; '.'
000000000000f92d         db  0x60 ; '`'
000000000000f92e         db  0x0a ; '.'
000000000000f92f         db  0x0e ; '.'
000000000000f930         db  0x08 ; '.'
000000000000f931         db  0x41 ; 'A'
000000000000f932         db  0x0b ; '.'
000000000000f933         db  0x00 ; '.'
000000000000f934         dd         0x00000028                                  ; Length of the record
000000000000f938         dd         0x00000eb8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f93c         db         0x74, 0xa2, 2 dup (0xff)                    ; begin 0x9bb0
000000000000f940         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x9c85)
000000000000f944         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f945         db  0x41 ; 'A'
000000000000f946         db  0x0e ; '.'
000000000000f947         db  0x10 ; '.'
000000000000f948         db  0x86 ; '.'
000000000000f949         db  0x02 ; '.'
000000000000f94a         db  0x41 ; 'A'
000000000000f94b         db  0x0e ; '.'
000000000000f94c         db  0x18 ; '.'
000000000000f94d         db  0x83 ; '.'
000000000000f94e         db  0x03 ; '.'
000000000000f94f         db  0x50 ; 'P'
000000000000f950         db  0x0e ; '.'
000000000000f951         db  0xd0 ; '.'
000000000000f952         db  0x01 ; '.'
000000000000f953         db  0x02 ; '.'
000000000000f954         db  0xab ; '.'
000000000000f955         db  0x0a ; '.'
000000000000f956         db  0x0e ; '.'
000000000000f957         db  0x18 ; '.'
000000000000f958         db  0x41 ; 'A'
000000000000f959         db  0x0e ; '.'
000000000000f95a         db  0x10 ; '.'
000000000000f95b         db  0x41 ; 'A'
000000000000f95c         db  0x0e ; '.'
000000000000f95d         db  0x08 ; '.'
000000000000f95e         db  0x41 ; 'A'
000000000000f95f         db  0x0b ; '.'
000000000000f960         dd         0x0000001c                                  ; Length of the record
000000000000f964         dd         0x00000ee4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f968         db         0x28, 0xa3, 2 dup (0xff)                    ; begin 0x9c90
000000000000f96c         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x9d10)
000000000000f970         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f971         db  0x41 ; 'A'
000000000000f972         db  0x0e ; '.'
000000000000f973         db  0x10 ; '.'
000000000000f974         db  0x83 ; '.'
000000000000f975         db  0x02 ; '.'
000000000000f976         db  0x02 ; '.'
000000000000f977         db  0x7a ; 'z'
000000000000f978         db  0x0e ; '.'
000000000000f979         db  0x08 ; '.'
000000000000f97a         db  0x00 ; '.'
000000000000f97b         db  0x00 ; '.'
000000000000f97c         db  0x00 ; '.'
000000000000f97d         db  0x00 ; '.'
000000000000f97e         db  0x00 ; '.'
000000000000f97f         db  0x00 ; '.'
000000000000f980         dd         0x00000018                                  ; Length of the record
000000000000f984         dd         0x00000f04                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f988         db         0x88, 0xa3, 2 dup (0xff)                    ; begin 0x9d10
000000000000f98c         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x9d2a)
000000000000f990         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f991         db  0x41 ; 'A'
000000000000f992         db  0x0e ; '.'
000000000000f993         db  0x10 ; '.'
000000000000f994         db  0x83 ; '.'
000000000000f995         db  0x02 ; '.'
000000000000f996         db  0x53 ; 'S'
000000000000f997         db  0x0a ; '.'
000000000000f998         db  0x0e ; '.'
000000000000f999         db  0x08 ; '.'
000000000000f99a         db  0x41 ; 'A'
000000000000f99b         db  0x0b ; '.'
000000000000f99c         dd         0x00000010                                  ; Length of the record
000000000000f9a0         dd         0x00000f20                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f9a4         db         0x8c, 0xa3, 2 dup (0xff)                    ; begin 0x9d30
000000000000f9a8         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9d54)
000000000000f9ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f9ad         db  0x5f ; '_'
000000000000f9ae         db  0x0e ; '.'
000000000000f9af         db  0x10 ; '.'
000000000000f9b0         dd         0x00000010                                  ; Length of the record
000000000000f9b4         dd         0x00000f34                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f9b8         db         0xa8, 0xa3, 2 dup (0xff)                    ; begin 0x9d60
000000000000f9bc         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x9d62)
000000000000f9c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f9c1         align      4
000000000000f9c4         dd         0x00000020                                  ; Length of the record
000000000000f9c8         dd         0x00000f48                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f9cc         db         0xa4, 0xa3, 2 dup (0xff)                    ; begin 0x9d70
000000000000f9d0         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x9da6)
000000000000f9d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f9d5         db  0x44 ; 'D'
000000000000f9d6         db  0x0e ; '.'
000000000000f9d7         db  0x10 ; '.'
000000000000f9d8         db  0x83 ; '.'
000000000000f9d9         db  0x02 ; '.'
000000000000f9da         db  0x5d ; ']'
000000000000f9db         db  0x0a ; '.'
000000000000f9dc         db  0x0e ; '.'
000000000000f9dd         db  0x08 ; '.'
000000000000f9de         db  0x47 ; 'G'
000000000000f9df         db  0x0b ; '.'
000000000000f9e0         db  0x48 ; 'H'
000000000000f9e1         db  0x0a ; '.'
000000000000f9e2         db  0x0e ; '.'
000000000000f9e3         db  0x08 ; '.'
000000000000f9e4         db  0x41 ; 'A'
000000000000f9e5         db  0x0b ; '.'
000000000000f9e6         db  0x00 ; '.'
000000000000f9e7         db  0x00 ; '.'
000000000000f9e8         dd         0x00000010                                  ; Length of the record
000000000000f9ec         dd         0x00000f6c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000f9f0         db         0xc0, 0xa3, 2 dup (0xff)                    ; begin 0x9db0
000000000000f9f4         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x9dd4)
000000000000f9f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000f9f9         db  0x5f ; '_'
000000000000f9fa         db  0x0e ; '.'
000000000000f9fb         db  0x10 ; '.'
000000000000f9fc         dd         0x00000014                                  ; Length of the record
000000000000fa00         dd         0x00000f80                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fa04         db         0xdc, 0xa3, 2 dup (0xff)                    ; begin 0x9de0
000000000000fa08         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x9e62)
000000000000fa0c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa0d         db  0x02 ; '.'
000000000000fa0e         db  0x5f ; '_'
000000000000fa0f         db  0x0e ; '.'
000000000000fa10         db  0x10 ; '.'
000000000000fa11         db  0x49 ; 'I'
000000000000fa12         db  0x0e ; '.'
000000000000fa13         db  0x08 ; '.'
000000000000fa14         dd         0x00000014                                  ; Length of the record
000000000000fa18         dd         0x00000f98                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fa1c         db         0x54, 0xa4, 2 dup (0xff)                    ; begin 0x9e70
000000000000fa20         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x9eba)
000000000000fa24         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa25         db  0x02 ; '.'
000000000000fa26         db  0x45 ; 'E'
000000000000fa27         db  0x0e ; '.'
000000000000fa28         db  0x10 ; '.'
000000000000fa29         db  0x00 ; '.'
000000000000fa2a         db  0x00 ; '.'
000000000000fa2b         db  0x00 ; '.'
000000000000fa2c         dd         0x00000018                                  ; Length of the record
000000000000fa30         dd         0x00000fb0                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fa34         db         0x8c, 0xa4, 2 dup (0xff)                    ; begin 0x9ec0
000000000000fa38         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x9ed7)
000000000000fa3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa3d         db  0x41 ; 'A'
000000000000fa3e         db  0x0e ; '.'
000000000000fa3f         db  0x10 ; '.'
000000000000fa40         db  0x83 ; '.'
000000000000fa41         db  0x02 ; '.'
000000000000fa42         db  0x51 ; 'Q'
000000000000fa43         db  0x0e ; '.'
000000000000fa44         db  0x08 ; '.'
000000000000fa45         db  0x00 ; '.'
000000000000fa46         db  0x00 ; '.'
000000000000fa47         db  0x00 ; '.'
000000000000fa48         dd         0x00000018                                  ; Length of the record
000000000000fa4c         dd         0x00000fcc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fa50         db         0x90, 0xa4, 2 dup (0xff)                    ; begin 0x9ee0
000000000000fa54         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x9f0e)
000000000000fa58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa59         db  0x47 ; 'G'
000000000000fa5a         db  0x0e ; '.'
000000000000fa5b         db  0x10 ; '.'
000000000000fa5c         db  0x61 ; 'a'
000000000000fa5d         db  0x0a ; '.'
000000000000fa5e         db  0x0e ; '.'
000000000000fa5f         db  0x08 ; '.'
000000000000fa60         db  0x41 ; 'A'
000000000000fa61         db  0x0b ; '.'
000000000000fa62         db  0x00 ; '.'
000000000000fa63         db  0x00 ; '.'
000000000000fa64         dd         0x00000024                                  ; Length of the record
000000000000fa68         dd         0x00000fe8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fa6c         db         2 dup (0xa4), 2 dup (0xff)                  ; begin 0x9f10
000000000000fa70         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x9f38)
000000000000fa74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa75         db  0x41 ; 'A'
000000000000fa76         db  0x0e ; '.'
000000000000fa77         db  0x10 ; '.'
000000000000fa78         db  0x86 ; '.'
000000000000fa79         db  0x02 ; '.'
000000000000fa7a         db  0x41 ; 'A'
000000000000fa7b         db  0x0e ; '.'
000000000000fa7c         db  0x18 ; '.'
000000000000fa7d         db  0x83 ; '.'
000000000000fa7e         db  0x03 ; '.'
000000000000fa7f         db  0x4d ; 'M'
000000000000fa80         db  0x0e ; '.'
000000000000fa81         db  0x20 ; ' '
000000000000fa82         db  0x49 ; 'I'
000000000000fa83         db  0x0e ; '.'
000000000000fa84         db  0x18 ; '.'
000000000000fa85         db  0x47 ; 'G'
000000000000fa86         db  0x0e ; '.'
000000000000fa87         db  0x10 ; '.'
000000000000fa88         db  0x41 ; 'A'
000000000000fa89         db  0x0e ; '.'
000000000000fa8a         db  0x08 ; '.'
000000000000fa8b         db  0x00 ; '.'
000000000000fa8c         dd         0x00000018                                  ; Length of the record
000000000000fa90         dd         0x00001010                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fa94         db         0xac, 0xa4, 2 dup (0xff)                    ; begin 0x9f40
000000000000fa98         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x9f53)
000000000000fa9c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fa9d         db  0x41 ; 'A'
000000000000fa9e         db  0x0e ; '.'
000000000000fa9f         db  0x10 ; '.'
000000000000faa0         db  0x83 ; '.'
000000000000faa1         db  0x02 ; '.'
000000000000faa2         db  0x50 ; 'P'
000000000000faa3         db  0x0e ; '.'
000000000000faa4         db  0x08 ; '.'
000000000000faa5         db  0x00 ; '.'
000000000000faa6         db  0x00 ; '.'
000000000000faa7         db  0x00 ; '.'
000000000000faa8         dd         0x00000014                                  ; Length of the record
000000000000faac         dd         0x0000102c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fab0         db         0xb0, 0xa4, 2 dup (0xff)                    ; begin 0x9f60
000000000000fab4         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x9f95)
000000000000fab8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fab9         db  0x4b ; 'K'
000000000000faba         db  0x0e ; '.'
000000000000fabb         db  0x10 ; '.'
000000000000fabc         db  0x00 ; '.'
000000000000fabd         db  0x00 ; '.'
000000000000fabe         db  0x00 ; '.'
000000000000fabf         db  0x00 ; '.'
000000000000fac0         dd         0x00000048                                  ; Length of the record
000000000000fac4         dd         0x00001044                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fac8         db         0xd8, 0xa4, 2 dup (0xff)                    ; begin 0x9fa0
000000000000facc         db         0x11, 0x01, 2 dup (0x00)                    ; length 0x111 (end at 0xa0b1)
000000000000fad0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fad1         db  0x42 ; 'B'
000000000000fad2         db  0x0e ; '.'
000000000000fad3         db  0x10 ; '.'
000000000000fad4         db  0x8f ; '.'
000000000000fad5         db  0x02 ; '.'
000000000000fad6         db  0x42 ; 'B'
000000000000fad7         db  0x0e ; '.'
000000000000fad8         db  0x18 ; '.'
000000000000fad9         db  0x8e ; '.'
000000000000fada         db  0x03 ; '.'
000000000000fadb         db  0x45 ; 'E'
000000000000fadc         db  0x0e ; '.'
000000000000fadd         db  0x20 ; ' '
000000000000fade         db  0x8d ; '.'
000000000000fadf         db  0x04 ; '.'
000000000000fae0         db  0x42 ; 'B'
000000000000fae1         db  0x0e ; '.'
000000000000fae2         db  0x28 ; '('
000000000000fae3         db  0x8c ; '.'
000000000000fae4         db  0x05 ; '.'
000000000000fae5         db  0x44 ; 'D'
000000000000fae6         db  0x0e ; '.'
000000000000fae7         db  0x30 ; '0'
000000000000fae8         db  0x86 ; '.'
000000000000fae9         db  0x06 ; '.'
000000000000faea         db  0x41 ; 'A'
000000000000faeb         db  0x0e ; '.'
000000000000faec         db  0x38 ; '8'
000000000000faed         db  0x83 ; '.'
000000000000faee         db  0x07 ; '.'
000000000000faef         db  0x4e ; 'N'
000000000000faf0         db  0x0e ; '.'
000000000000faf1         db  0x50 ; 'P'
000000000000faf2         db  0x02 ; '.'
000000000000faf3         db  0x9f ; '.'
000000000000faf4         db  0x0a ; '.'
000000000000faf5         db  0x0e ; '.'
000000000000faf6         db  0x38 ; '8'
000000000000faf7         db  0x41 ; 'A'
000000000000faf8         db  0x0e ; '.'
000000000000faf9         db  0x30 ; '0'
000000000000fafa         db  0x41 ; 'A'
000000000000fafb         db  0x0e ; '.'
000000000000fafc         db  0x28 ; '('
000000000000fafd         db  0x42 ; 'B'
000000000000fafe         db  0x0e ; '.'
000000000000faff         db  0x20 ; ' '
000000000000fb00         db  0x42 ; 'B'
000000000000fb01         db  0x0e ; '.'
000000000000fb02         db  0x18 ; '.'
000000000000fb03         db  0x42 ; 'B'
000000000000fb04         db  0x0e ; '.'
000000000000fb05         db  0x10 ; '.'
000000000000fb06         db  0x42 ; 'B'
000000000000fb07         db  0x0e ; '.'
000000000000fb08         db  0x08 ; '.'
000000000000fb09         db  0x49 ; 'I'
000000000000fb0a         db  0x0b ; '.'
000000000000fb0b         db  0x00 ; '.'
000000000000fb0c         dd         0x00000018                                  ; Length of the record
000000000000fb10         dd         0x00001090                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fb14         db         0xac, 0xa5, 2 dup (0xff)                    ; begin 0xa0c0
000000000000fb18         db         0x21, 3 dup (0x00)                          ; length 0x21 (end at 0xa0e1)
000000000000fb1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fb1d         db  0x44 ; 'D'
000000000000fb1e         db  0x0e ; '.'
000000000000fb1f         db  0x18 ; '.'
000000000000fb20         db  0x42 ; 'B'
000000000000fb21         db  0x0e ; '.'
000000000000fb22         db  0x20 ; ' '
000000000000fb23         db  0x5a ; 'Z'
000000000000fb24         db  0x0e ; '.'
000000000000fb25         db  0x08 ; '.'
000000000000fb26         db  0x00 ; '.'
000000000000fb27         db  0x00 ; '.'
000000000000fb28         dd         0x0000004c                                  ; Length of the record
000000000000fb2c         dd         0x000010ac                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fb30         db         0xc0, 0xa5, 2 dup (0xff)                    ; begin 0xa0f0
000000000000fb34         db         0xb3, 0x06, 2 dup (0x00)                    ; length 0x6b3 (end at 0xa7a3)
000000000000fb38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fb39         db  0x42 ; 'B'
000000000000fb3a         db  0x0e ; '.'
000000000000fb3b         db  0x10 ; '.'
000000000000fb3c         db  0x8f ; '.'
000000000000fb3d         db  0x02 ; '.'
000000000000fb3e         db  0x42 ; 'B'
000000000000fb3f         db  0x0e ; '.'
000000000000fb40         db  0x18 ; '.'
000000000000fb41         db  0x8e ; '.'
000000000000fb42         db  0x03 ; '.'
000000000000fb43         db  0x42 ; 'B'
000000000000fb44         db  0x0e ; '.'
000000000000fb45         db  0x20 ; ' '
000000000000fb46         db  0x8d ; '.'
000000000000fb47         db  0x04 ; '.'
000000000000fb48         db  0x42 ; 'B'
000000000000fb49         db  0x0e ; '.'
000000000000fb4a         db  0x28 ; '('
000000000000fb4b         db  0x8c ; '.'
000000000000fb4c         db  0x05 ; '.'
000000000000fb4d         db  0x41 ; 'A'
000000000000fb4e         db  0x0e ; '.'
000000000000fb4f         db  0x30 ; '0'
000000000000fb50         db  0x86 ; '.'
000000000000fb51         db  0x06 ; '.'
000000000000fb52         db  0x41 ; 'A'
000000000000fb53         db  0x0e ; '.'
000000000000fb54         db  0x38 ; '8'
000000000000fb55         db  0x83 ; '.'
000000000000fb56         db  0x07 ; '.'
000000000000fb57         db  0x44 ; 'D'
000000000000fb58         db  0x0e ; '.'
000000000000fb59         db  0x60 ; '`'
000000000000fb5a         db  0x02 ; '.'
000000000000fb5b         db  0x96 ; '.'
000000000000fb5c         db  0x0a ; '.'
000000000000fb5d         db  0x0e ; '.'
000000000000fb5e         db  0x38 ; '8'
000000000000fb5f         db  0x41 ; 'A'
000000000000fb60         db  0x0e ; '.'
000000000000fb61         db  0x30 ; '0'
000000000000fb62         db  0x41 ; 'A'
000000000000fb63         db  0x0e ; '.'
000000000000fb64         db  0x28 ; '('
000000000000fb65         db  0x42 ; 'B'
000000000000fb66         db  0x0e ; '.'
000000000000fb67         db  0x20 ; ' '
000000000000fb68         db  0x42 ; 'B'
000000000000fb69         db  0x0e ; '.'
000000000000fb6a         db  0x18 ; '.'
000000000000fb6b         db  0x42 ; 'B'
000000000000fb6c         db  0x0e ; '.'
000000000000fb6d         db  0x10 ; '.'
000000000000fb6e         db  0x42 ; 'B'
000000000000fb6f         db  0x0e ; '.'
000000000000fb70         db  0x08 ; '.'
000000000000fb71         db  0x42 ; 'B'
000000000000fb72         db  0x0b ; '.'
000000000000fb73         db  0x00 ; '.'
000000000000fb74         db  0x00 ; '.'
000000000000fb75         db  0x00 ; '.'
000000000000fb76         db  0x00 ; '.'
000000000000fb77         db  0x00 ; '.'
000000000000fb78         dd         0x0000004c                                  ; Length of the record
000000000000fb7c         dd         0x000010fc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fb80         db         0x30, 0xac, 2 dup (0xff)                    ; begin 0xa7b0
000000000000fb84         db         0xb3, 0x06, 2 dup (0x00)                    ; length 0x6b3 (end at 0xae63)
000000000000fb88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fb89         db  0x42 ; 'B'
000000000000fb8a         db  0x0e ; '.'
000000000000fb8b         db  0x10 ; '.'
000000000000fb8c         db  0x8f ; '.'
000000000000fb8d         db  0x02 ; '.'
000000000000fb8e         db  0x42 ; 'B'
000000000000fb8f         db  0x0e ; '.'
000000000000fb90         db  0x18 ; '.'
000000000000fb91         db  0x8e ; '.'
000000000000fb92         db  0x03 ; '.'
000000000000fb93         db  0x42 ; 'B'
000000000000fb94         db  0x0e ; '.'
000000000000fb95         db  0x20 ; ' '
000000000000fb96         db  0x8d ; '.'
000000000000fb97         db  0x04 ; '.'
000000000000fb98         db  0x42 ; 'B'
000000000000fb99         db  0x0e ; '.'
000000000000fb9a         db  0x28 ; '('
000000000000fb9b         db  0x8c ; '.'
000000000000fb9c         db  0x05 ; '.'
000000000000fb9d         db  0x41 ; 'A'
000000000000fb9e         db  0x0e ; '.'
000000000000fb9f         db  0x30 ; '0'
000000000000fba0         db  0x86 ; '.'
000000000000fba1         db  0x06 ; '.'
000000000000fba2         db  0x41 ; 'A'
000000000000fba3         db  0x0e ; '.'
000000000000fba4         db  0x38 ; '8'
000000000000fba5         db  0x83 ; '.'
000000000000fba6         db  0x07 ; '.'
000000000000fba7         db  0x44 ; 'D'
000000000000fba8         db  0x0e ; '.'
000000000000fba9         db  0x60 ; '`'
000000000000fbaa         db  0x02 ; '.'
000000000000fbab         db  0x94 ; '.'
000000000000fbac         db  0x0a ; '.'
000000000000fbad         db  0x0e ; '.'
000000000000fbae         db  0x38 ; '8'
000000000000fbaf         db  0x41 ; 'A'
000000000000fbb0         db  0x0e ; '.'
000000000000fbb1         db  0x30 ; '0'
000000000000fbb2         db  0x41 ; 'A'
000000000000fbb3         db  0x0e ; '.'
000000000000fbb4         db  0x28 ; '('
000000000000fbb5         db  0x42 ; 'B'
000000000000fbb6         db  0x0e ; '.'
000000000000fbb7         db  0x20 ; ' '
000000000000fbb8         db  0x42 ; 'B'
000000000000fbb9         db  0x0e ; '.'
000000000000fbba         db  0x18 ; '.'
000000000000fbbb         db  0x42 ; 'B'
000000000000fbbc         db  0x0e ; '.'
000000000000fbbd         db  0x10 ; '.'
000000000000fbbe         db  0x42 ; 'B'
000000000000fbbf         db  0x0e ; '.'
000000000000fbc0         db  0x08 ; '.'
000000000000fbc1         db  0x44 ; 'D'
000000000000fbc2         db  0x0b ; '.'
000000000000fbc3         db  0x00 ; '.'
000000000000fbc4         db  0x00 ; '.'
000000000000fbc5         db  0x00 ; '.'
000000000000fbc6         db  0x00 ; '.'
000000000000fbc7         db  0x00 ; '.'
000000000000fbc8         dd         0x00000024                                  ; Length of the record
000000000000fbcc         dd         0x0000114c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fbd0         db         0xa0, 0xb2, 2 dup (0xff)                    ; begin 0xae70
000000000000fbd4         db         0xac, 3 dup (0x00)                          ; length 0xac (end at 0xaf1c)
000000000000fbd8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fbd9         db  0x42 ; 'B'
000000000000fbda         db  0x0e ; '.'
000000000000fbdb         db  0x10 ; '.'
000000000000fbdc         db  0x8d ; '.'
000000000000fbdd         db  0x02 ; '.'
000000000000fbde         db  0x42 ; 'B'
000000000000fbdf         db  0x0e ; '.'
000000000000fbe0         db  0x18 ; '.'
000000000000fbe1         db  0x8c ; '.'
000000000000fbe2         db  0x03 ; '.'
000000000000fbe3         db  0x44 ; 'D'
000000000000fbe4         db  0x0e ; '.'
000000000000fbe5         db  0x20 ; ' '
000000000000fbe6         db  0x86 ; '.'
000000000000fbe7         db  0x04 ; '.'
000000000000fbe8         db  0x41 ; 'A'
000000000000fbe9         db  0x0e ; '.'
000000000000fbea         db  0x28 ; '('
000000000000fbeb         db  0x83 ; '.'
000000000000fbec         db  0x05 ; '.'
000000000000fbed         db  0x47 ; 'G'
000000000000fbee         db  0x0e ; '.'
000000000000fbef         db  0x40 ; '@'
000000000000fbf0         dd         0x0000004c                                  ; Length of the record
000000000000fbf4         dd         0x00001174                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fbf8         db         0x28, 0xb3, 2 dup (0xff)                    ; begin 0xaf20
000000000000fbfc         db         0x1c, 0x04, 2 dup (0x00)                    ; length 0x41c (end at 0xb33c)
000000000000fc00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fc01         db  0x42 ; 'B'
000000000000fc02         db  0x0e ; '.'
000000000000fc03         db  0x10 ; '.'
000000000000fc04         db  0x8f ; '.'
000000000000fc05         db  0x02 ; '.'
000000000000fc06         db  0x42 ; 'B'
000000000000fc07         db  0x0e ; '.'
000000000000fc08         db  0x18 ; '.'
000000000000fc09         db  0x8e ; '.'
000000000000fc0a         db  0x03 ; '.'
000000000000fc0b         db  0x42 ; 'B'
000000000000fc0c         db  0x0e ; '.'
000000000000fc0d         db  0x20 ; ' '
000000000000fc0e         db  0x8d ; '.'
000000000000fc0f         db  0x04 ; '.'
000000000000fc10         db  0x42 ; 'B'
000000000000fc11         db  0x0e ; '.'
000000000000fc12         db  0x28 ; '('
000000000000fc13         db  0x8c ; '.'
000000000000fc14         db  0x05 ; '.'
000000000000fc15         db  0x41 ; 'A'
000000000000fc16         db  0x0e ; '.'
000000000000fc17         db  0x30 ; '0'
000000000000fc18         db  0x86 ; '.'
000000000000fc19         db  0x06 ; '.'
000000000000fc1a         db  0x41 ; 'A'
000000000000fc1b         db  0x0e ; '.'
000000000000fc1c         db  0x38 ; '8'
000000000000fc1d         db  0x83 ; '.'
000000000000fc1e         db  0x07 ; '.'
000000000000fc1f         db  0x44 ; 'D'
000000000000fc20         db  0x0e ; '.'
000000000000fc21         db  0x60 ; '`'
000000000000fc22         db  0x02 ; '.'
000000000000fc23         db  0xe9 ; '.'
000000000000fc24         db  0x0a ; '.'
000000000000fc25         db  0x0e ; '.'
000000000000fc26         db  0x38 ; '8'
000000000000fc27         db  0x41 ; 'A'
000000000000fc28         db  0x0e ; '.'
000000000000fc29         db  0x30 ; '0'
000000000000fc2a         db  0x41 ; 'A'
000000000000fc2b         db  0x0e ; '.'
000000000000fc2c         db  0x28 ; '('
000000000000fc2d         db  0x42 ; 'B'
000000000000fc2e         db  0x0e ; '.'
000000000000fc2f         db  0x20 ; ' '
000000000000fc30         db  0x42 ; 'B'
000000000000fc31         db  0x0e ; '.'
000000000000fc32         db  0x18 ; '.'
000000000000fc33         db  0x42 ; 'B'
000000000000fc34         db  0x0e ; '.'
000000000000fc35         db  0x10 ; '.'
000000000000fc36         db  0x42 ; 'B'
000000000000fc37         db  0x0e ; '.'
000000000000fc38         db  0x08 ; '.'
000000000000fc39         db  0x47 ; 'G'
000000000000fc3a         db  0x0b ; '.'
000000000000fc3b         db  0x00 ; '.'
000000000000fc3c         db  0x00 ; '.'
000000000000fc3d         db  0x00 ; '.'
000000000000fc3e         db  0x00 ; '.'
000000000000fc3f         db  0x00 ; '.'
000000000000fc40         dd         0x00000034                                  ; Length of the record
000000000000fc44         dd         0x000011c4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fc48         db         0xf8, 0xb6, 2 dup (0xff)                    ; begin 0xb340
000000000000fc4c         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xb3bb)
000000000000fc50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fc51         db  0x42 ; 'B'
000000000000fc52         db  0x0e ; '.'
000000000000fc53         db  0x10 ; '.'
000000000000fc54         db  0x8c ; '.'
000000000000fc55         db  0x02 ; '.'
000000000000fc56         db  0x41 ; 'A'
000000000000fc57         db  0x0e ; '.'
000000000000fc58         db  0x18 ; '.'
000000000000fc59         db  0x86 ; '.'
000000000000fc5a         db  0x03 ; '.'
000000000000fc5b         db  0x41 ; 'A'
000000000000fc5c         db  0x0e ; '.'
000000000000fc5d         db  0x20 ; ' '
000000000000fc5e         db  0x83 ; '.'
000000000000fc5f         db  0x04 ; '.'
000000000000fc60         db  0x7d ; '}'
000000000000fc61         db  0x0a ; '.'
000000000000fc62         db  0x0e ; '.'
000000000000fc63         db  0x18 ; '.'
000000000000fc64         db  0x41 ; 'A'
000000000000fc65         db  0x0e ; '.'
000000000000fc66         db  0x10 ; '.'
000000000000fc67         db  0x42 ; 'B'
000000000000fc68         db  0x0e ; '.'
000000000000fc69         db  0x08 ; '.'
000000000000fc6a         db  0x44 ; 'D'
000000000000fc6b         db  0x0b ; '.'
000000000000fc6c         db  0x60 ; '`'
000000000000fc6d         db  0x0a ; '.'
000000000000fc6e         db  0x0e ; '.'
000000000000fc6f         db  0x18 ; '.'
000000000000fc70         db  0x41 ; 'A'
000000000000fc71         db  0x0e ; '.'
000000000000fc72         db  0x10 ; '.'
000000000000fc73         db  0x42 ; 'B'
000000000000fc74         db  0x0e ; '.'
000000000000fc75         db  0x08 ; '.'
000000000000fc76         db  0x45 ; 'E'
000000000000fc77         db  0x0b ; '.'
000000000000fc78         dd         0x00000034                                  ; Length of the record
000000000000fc7c         dd         0x000011fc                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fc80         db         0x40, 0xb7, 2 dup (0xff)                    ; begin 0xb3c0
000000000000fc84         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0xb63e)
000000000000fc88         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fc89         db  0x42 ; 'B'
000000000000fc8a         db  0x0e ; '.'
000000000000fc8b         db  0x10 ; '.'
000000000000fc8c         db  0x8c ; '.'
000000000000fc8d         db  0x02 ; '.'
000000000000fc8e         db  0x41 ; 'A'
000000000000fc8f         db  0x0e ; '.'
000000000000fc90         db  0x18 ; '.'
000000000000fc91         db  0x86 ; '.'
000000000000fc92         db  0x03 ; '.'
000000000000fc93         db  0x43 ; 'C'
000000000000fc94         db  0x0e ; '.'
000000000000fc95         db  0x20 ; ' '
000000000000fc96         db  0x83 ; '.'
000000000000fc97         db  0x04 ; '.'
000000000000fc98         db  0x44 ; 'D'
000000000000fc99         db  0x0e ; '.'
000000000000fc9a         db  0x70 ; 'p'
000000000000fc9b         db  0x02 ; '.'
000000000000fc9c         db  0xf0 ; '.'
000000000000fc9d         db  0x0a ; '.'
000000000000fc9e         db  0x0e ; '.'
000000000000fc9f         db  0x20 ; ' '
000000000000fca0         db  0x41 ; 'A'
000000000000fca1         db  0x0e ; '.'
000000000000fca2         db  0x18 ; '.'
000000000000fca3         db  0x41 ; 'A'
000000000000fca4         db  0x0e ; '.'
000000000000fca5         db  0x10 ; '.'
000000000000fca6         db  0x42 ; 'B'
000000000000fca7         db  0x0e ; '.'
000000000000fca8         db  0x08 ; '.'
000000000000fca9         db  0x42 ; 'B'
000000000000fcaa         db  0x0b ; '.'
000000000000fcab         db  0x00 ; '.'
000000000000fcac         db  0x00 ; '.'
000000000000fcad         db  0x00 ; '.'
000000000000fcae         db  0x00 ; '.'
000000000000fcaf         db  0x00 ; '.'
000000000000fcb0         dd         0x0000001c                                  ; Length of the record
000000000000fcb4         dd         0x00001234                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fcb8         db         0x88, 0xb9, 2 dup (0xff)                    ; begin 0xb640
000000000000fcbc         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0xb680)
000000000000fcc0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fcc1         db  0x44 ; 'D'
000000000000fcc2         db  0x0e ; '.'
000000000000fcc3         db  0x10 ; '.'
000000000000fcc4         db  0x83 ; '.'
000000000000fcc5         db  0x02 ; '.'
000000000000fcc6         db  0x5a ; 'Z'
000000000000fcc7         db  0x0a ; '.'
000000000000fcc8         db  0x0e ; '.'
000000000000fcc9         db  0x08 ; '.'
000000000000fcca         db  0x4a ; 'J'
000000000000fccb         db  0x0b ; '.'
000000000000fccc         db  0x53 ; 'S'
000000000000fccd         db  0x0e ; '.'
000000000000fcce         db  0x08 ; '.'
000000000000fccf         db  0x00 ; '.'
000000000000fcd0         dd         0x0000002c                                  ; Length of the record
000000000000fcd4         dd         0x00001254                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fcd8         db         0xa8, 0xb9, 2 dup (0xff)                    ; begin 0xb680
000000000000fcdc         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0xb6d7)
000000000000fce0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fce1         db  0x63 ; 'c'
000000000000fce2         db  0x0e ; '.'
000000000000fce3         db  0x10 ; '.'
000000000000fce4         db  0x8c ; '.'
000000000000fce5         db  0x02 ; '.'
000000000000fce6         db  0x41 ; 'A'
000000000000fce7         db  0x0e ; '.'
000000000000fce8         db  0x18 ; '.'
000000000000fce9         db  0x86 ; '.'
000000000000fcea         db  0x03 ; '.'
000000000000fceb         db  0x44 ; 'D'
000000000000fcec         db  0x0e ; '.'
000000000000fced         db  0x20 ; ' '
000000000000fcee         db  0x83 ; '.'
000000000000fcef         db  0x04 ; '.'
000000000000fcf0         db  0x6b ; 'k'
000000000000fcf1         db  0x0e ; '.'
000000000000fcf2         db  0x18 ; '.'
000000000000fcf3         db  0x41 ; 'A'
000000000000fcf4         db  0x0e ; '.'
000000000000fcf5         db  0x10 ; '.'
000000000000fcf6         db  0x42 ; 'B'
000000000000fcf7         db  0x0e ; '.'
000000000000fcf8         db  0x08 ; '.'
000000000000fcf9         db  0x00 ; '.'
000000000000fcfa         db  0x00 ; '.'
000000000000fcfb         db  0x00 ; '.'
000000000000fcfc         db  0x00 ; '.'
000000000000fcfd         db  0x00 ; '.'
000000000000fcfe         db  0x00 ; '.'
000000000000fcff         db  0x00 ; '.'
000000000000fd00         dd         0x0000003c                                  ; Length of the record
000000000000fd04         dd         0x00001284                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fd08         db         0xd8, 0xb9, 2 dup (0xff)                    ; begin 0xb6e0
000000000000fd0c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0xb763)
000000000000fd10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd11         db  0x42 ; 'B'
000000000000fd12         db  0x0e ; '.'
000000000000fd13         db  0x10 ; '.'
000000000000fd14         db  0x8d ; '.'
000000000000fd15         db  0x02 ; '.'
000000000000fd16         db  0x42 ; 'B'
000000000000fd17         db  0x0e ; '.'
000000000000fd18         db  0x18 ; '.'
000000000000fd19         db  0x8c ; '.'
000000000000fd1a         db  0x03 ; '.'
000000000000fd1b         db  0x44 ; 'D'
000000000000fd1c         db  0x0e ; '.'
000000000000fd1d         db  0x20 ; ' '
000000000000fd1e         db  0x86 ; '.'
000000000000fd1f         db  0x04 ; '.'
000000000000fd20         db  0x41 ; 'A'
000000000000fd21         db  0x0e ; '.'
000000000000fd22         db  0x28 ; '('
000000000000fd23         db  0x83 ; '.'
000000000000fd24         db  0x05 ; '.'
000000000000fd25         db  0x4a ; 'J'
000000000000fd26         db  0x0e ; '.'
000000000000fd27         db  0x40 ; '@'
000000000000fd28         db  0x02 ; '.'
000000000000fd29         db  0x64 ; 'd'
000000000000fd2a         db  0x0a ; '.'
000000000000fd2b         db  0x0e ; '.'
000000000000fd2c         db  0x28 ; '('
000000000000fd2d         db  0x41 ; 'A'
000000000000fd2e         db  0x0e ; '.'
000000000000fd2f         db  0x20 ; ' '
000000000000fd30         db  0x41 ; 'A'
000000000000fd31         db  0x0e ; '.'
000000000000fd32         db  0x18 ; '.'
000000000000fd33         db  0x42 ; 'B'
000000000000fd34         db  0x0e ; '.'
000000000000fd35         db  0x10 ; '.'
000000000000fd36         db  0x42 ; 'B'
000000000000fd37         db  0x0e ; '.'
000000000000fd38         db  0x08 ; '.'
000000000000fd39         db  0x41 ; 'A'
000000000000fd3a         db  0x0b ; '.'
000000000000fd3b         db  0x00 ; '.'
000000000000fd3c         db  0x00 ; '.'
000000000000fd3d         db  0x00 ; '.'
000000000000fd3e         db  0x00 ; '.'
000000000000fd3f         db  0x00 ; '.'
000000000000fd40         dd         0x00000010                                  ; Length of the record
000000000000fd44         dd         0x000012c4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fd48         db         0x28, 0xba, 2 dup (0xff)                    ; begin 0xb770
000000000000fd4c         db         0x2c, 3 dup (0x00)                          ; length 0x2c (end at 0xb79c)
000000000000fd50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd51         align      4
000000000000fd54         dd         0x00000018                                  ; Length of the record
000000000000fd58         dd         0x000012d8                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fd5c         db         0x44, 0xba, 2 dup (0xff)                    ; begin 0xb7a0
000000000000fd60         db         0x2a, 3 dup (0x00)                          ; length 0x2a (end at 0xb7ca)
000000000000fd64         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd65         db  0x46 ; 'F'
000000000000fd66         db  0x0e ; '.'
000000000000fd67         db  0x10 ; '.'
000000000000fd68         db  0x83 ; '.'
000000000000fd69         db  0x02 ; '.'
000000000000fd6a         db  0x5b ; '['
000000000000fd6b         db  0x0e ; '.'
000000000000fd6c         db  0x08 ; '.'
000000000000fd6d         db  0x47 ; 'G'
000000000000fd6e         db  0xc3 ; '.'
000000000000fd6f         db  0x00 ; '.'
000000000000fd70         dd         0x00000038                                  ; Length of the record
000000000000fd74         dd         0x000012f4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fd78         db         0x58, 0xba, 2 dup (0xff)                    ; begin 0xb7d0
000000000000fd7c         db         0x5d, 3 dup (0x00)                          ; length 0x5d (end at 0xb82d)
000000000000fd80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fd81         db  0x42 ; 'B'
000000000000fd82         db  0x0e ; '.'
000000000000fd83         db  0x10 ; '.'
000000000000fd84         db  0x8d ; '.'
000000000000fd85         db  0x02 ; '.'
000000000000fd86         db  0x42 ; 'B'
000000000000fd87         db  0x0e ; '.'
000000000000fd88         db  0x18 ; '.'
000000000000fd89         db  0x8c ; '.'
000000000000fd8a         db  0x03 ; '.'
000000000000fd8b         db  0x41 ; 'A'
000000000000fd8c         db  0x0e ; '.'
000000000000fd8d         db  0x20 ; ' '
000000000000fd8e         db  0x86 ; '.'
000000000000fd8f         db  0x04 ; '.'
000000000000fd90         db  0x41 ; 'A'
000000000000fd91         db  0x0e ; '.'
000000000000fd92         db  0x28 ; '('
000000000000fd93         db  0x83 ; '.'
000000000000fd94         db  0x05 ; '.'
000000000000fd95         db  0x47 ; 'G'
000000000000fd96         db  0x0e ; '.'
000000000000fd97         db  0x30 ; '0'
000000000000fd98         db  0x75 ; 'u'
000000000000fd99         db  0x0a ; '.'
000000000000fd9a         db  0x0e ; '.'
000000000000fd9b         db  0x28 ; '('
000000000000fd9c         db  0x44 ; 'D'
000000000000fd9d         db  0x0e ; '.'
000000000000fd9e         db  0x20 ; ' '
000000000000fd9f         db  0x41 ; 'A'
000000000000fda0         db  0x0e ; '.'
000000000000fda1         db  0x18 ; '.'
000000000000fda2         db  0x42 ; 'B'
000000000000fda3         db  0x0e ; '.'
000000000000fda4         db  0x10 ; '.'
000000000000fda5         db  0x42 ; 'B'
000000000000fda6         db  0x0e ; '.'
000000000000fda7         db  0x08 ; '.'
000000000000fda8         db  0x45 ; 'E'
000000000000fda9         db  0x0b ; '.'
000000000000fdaa         db  0x00 ; '.'
000000000000fdab         db  0x00 ; '.'
000000000000fdac         dd         0x00000034                                  ; Length of the record
000000000000fdb0         dd         0x00001330                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fdb4         db         0x7c, 0xba, 2 dup (0xff)                    ; begin 0xb830
000000000000fdb8         db         0x8f, 3 dup (0x00)                          ; length 0x8f (end at 0xb8bf)
000000000000fdbc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fdbd         db  0x45 ; 'E'
000000000000fdbe         db  0x0e ; '.'
000000000000fdbf         db  0x10 ; '.'
000000000000fdc0         db  0x8c ; '.'
000000000000fdc1         db  0x02 ; '.'
000000000000fdc2         db  0x41 ; 'A'
000000000000fdc3         db  0x0e ; '.'
000000000000fdc4         db  0x18 ; '.'
000000000000fdc5         db  0x86 ; '.'
000000000000fdc6         db  0x03 ; '.'
000000000000fdc7         db  0x41 ; 'A'
000000000000fdc8         db  0x0e ; '.'
000000000000fdc9         db  0x20 ; ' '
000000000000fdca         db  0x83 ; '.'
000000000000fdcb         db  0x04 ; '.'
000000000000fdcc         db  0x02 ; '.'
000000000000fdcd         db  0x58 ; 'X'
000000000000fdce         db  0x0a ; '.'
000000000000fdcf         db  0x0e ; '.'
000000000000fdd0         db  0x18 ; '.'
000000000000fdd1         db  0x41 ; 'A'
000000000000fdd2         db  0x0e ; '.'
000000000000fdd3         db  0x10 ; '.'
000000000000fdd4         db  0x42 ; 'B'
000000000000fdd5         db  0x0e ; '.'
000000000000fdd6         db  0x08 ; '.'
000000000000fdd7         db  0x46 ; 'F'
000000000000fdd8         db  0x0b ; '.'
000000000000fdd9         db  0x63 ; 'c'
000000000000fdda         db  0x0e ; '.'
000000000000fddb         db  0x18 ; '.'
000000000000fddc         db  0x41 ; 'A'
000000000000fddd         db  0x0e ; '.'
000000000000fdde         db  0x10 ; '.'
000000000000fddf         db  0x42 ; 'B'
000000000000fde0         db  0x0e ; '.'
000000000000fde1         db  0x08 ; '.'
000000000000fde2         db  0x00 ; '.'
000000000000fde3         db  0x00 ; '.'
000000000000fde4         dd         0x00000048                                  ; Length of the record
000000000000fde8         dd         0x00001368                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fdec         db         0xd4, 0xba, 2 dup (0xff)                    ; begin 0xb8c0
000000000000fdf0         db         0x36, 0x01, 2 dup (0x00)                    ; length 0x136 (end at 0xb9f6)
000000000000fdf4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fdf5         db  0x42 ; 'B'
000000000000fdf6         db  0x0e ; '.'
000000000000fdf7         db  0x10 ; '.'
000000000000fdf8         db  0x8f ; '.'
000000000000fdf9         db  0x02 ; '.'
000000000000fdfa         db  0x42 ; 'B'
000000000000fdfb         db  0x0e ; '.'
000000000000fdfc         db  0x18 ; '.'
000000000000fdfd         db  0x8e ; '.'
000000000000fdfe         db  0x03 ; '.'
000000000000fdff         db  0x47 ; 'G'
000000000000fe00         db  0x0e ; '.'
000000000000fe01         db  0x20 ; ' '
000000000000fe02         db  0x8d ; '.'
000000000000fe03         db  0x04 ; '.'
000000000000fe04         db  0x42 ; 'B'
000000000000fe05         db  0x0e ; '.'
000000000000fe06         db  0x28 ; '('
000000000000fe07         db  0x8c ; '.'
000000000000fe08         db  0x05 ; '.'
000000000000fe09         db  0x41 ; 'A'
000000000000fe0a         db  0x0e ; '.'
000000000000fe0b         db  0x30 ; '0'
000000000000fe0c         db  0x86 ; '.'
000000000000fe0d         db  0x06 ; '.'
000000000000fe0e         db  0x41 ; 'A'
000000000000fe0f         db  0x0e ; '.'
000000000000fe10         db  0x38 ; '8'
000000000000fe11         db  0x83 ; '.'
000000000000fe12         db  0x07 ; '.'
000000000000fe13         db  0x44 ; 'D'
000000000000fe14         db  0x0e ; '.'
000000000000fe15         db  0x40 ; '@'
000000000000fe16         db  0x02 ; '.'
000000000000fe17         db  0xa1 ; '.'
000000000000fe18         db  0x0a ; '.'
000000000000fe19         db  0x0e ; '.'
000000000000fe1a         db  0x38 ; '8'
000000000000fe1b         db  0x41 ; 'A'
000000000000fe1c         db  0x0e ; '.'
000000000000fe1d         db  0x30 ; '0'
000000000000fe1e         db  0x41 ; 'A'
000000000000fe1f         db  0x0e ; '.'
000000000000fe20         db  0x28 ; '('
000000000000fe21         db  0x42 ; 'B'
000000000000fe22         db  0x0e ; '.'
000000000000fe23         db  0x20 ; ' '
000000000000fe24         db  0x42 ; 'B'
000000000000fe25         db  0x0e ; '.'
000000000000fe26         db  0x18 ; '.'
000000000000fe27         db  0x42 ; 'B'
000000000000fe28         db  0x0e ; '.'
000000000000fe29         db  0x10 ; '.'
000000000000fe2a         db  0x42 ; 'B'
000000000000fe2b         db  0x0e ; '.'
000000000000fe2c         db  0x08 ; '.'
000000000000fe2d         db  0x42 ; 'B'
000000000000fe2e         db  0x0b ; '.'
000000000000fe2f         db  0x00 ; '.'
000000000000fe30         dd         0x00000050                                  ; Length of the record
000000000000fe34         dd         0x000013b4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fe38         db         0xc8, 0xbb, 2 dup (0xff)                    ; begin 0xba00
000000000000fe3c         db         0xdf, 3 dup (0x00)                          ; length 0xdf (end at 0xbadf)
000000000000fe40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fe41         db  0x42 ; 'B'
000000000000fe42         db  0x0e ; '.'
000000000000fe43         db  0x10 ; '.'
000000000000fe44         db  0x8c ; '.'
000000000000fe45         db  0x02 ; '.'
000000000000fe46         db  0x41 ; 'A'
000000000000fe47         db  0x0e ; '.'
000000000000fe48         db  0x18 ; '.'
000000000000fe49         db  0x86 ; '.'
000000000000fe4a         db  0x03 ; '.'
000000000000fe4b         db  0x44 ; 'D'
000000000000fe4c         db  0x0e ; '.'
000000000000fe4d         db  0x20 ; ' '
000000000000fe4e         db  0x83 ; '.'
000000000000fe4f         db  0x04 ; '.'
000000000000fe50         db  0x4b ; 'K'
000000000000fe51         db  0x0e ; '.'
000000000000fe52         db  0x30 ; '0'
000000000000fe53         db  0x02 ; '.'
000000000000fe54         db  0x6f ; 'o'
000000000000fe55         db  0x0a ; '.'
000000000000fe56         db  0x0e ; '.'
000000000000fe57         db  0x20 ; ' '
000000000000fe58         db  0x44 ; 'D'
000000000000fe59         db  0x0e ; '.'
000000000000fe5a         db  0x18 ; '.'
000000000000fe5b         db  0x41 ; 'A'
000000000000fe5c         db  0x0e ; '.'
000000000000fe5d         db  0x10 ; '.'
000000000000fe5e         db  0x42 ; 'B'
000000000000fe5f         db  0x0e ; '.'
000000000000fe60         db  0x08 ; '.'
000000000000fe61         db  0x48 ; 'H'
000000000000fe62         db  0x0b ; '.'
000000000000fe63         db  0x5a ; 'Z'
000000000000fe64         db  0x0a ; '.'
000000000000fe65         db  0x0e ; '.'
000000000000fe66         db  0x20 ; ' '
000000000000fe67         db  0x44 ; 'D'
000000000000fe68         db  0x0e ; '.'
000000000000fe69         db  0x18 ; '.'
000000000000fe6a         db  0x41 ; 'A'
000000000000fe6b         db  0x0e ; '.'
000000000000fe6c         db  0x10 ; '.'
000000000000fe6d         db  0x42 ; 'B'
000000000000fe6e         db  0x0e ; '.'
000000000000fe6f         db  0x08 ; '.'
000000000000fe70         db  0x47 ; 'G'
000000000000fe71         db  0x0b ; '.'
000000000000fe72         db  0x54 ; 'T'
000000000000fe73         db  0x0a ; '.'
000000000000fe74         db  0x0e ; '.'
000000000000fe75         db  0x20 ; ' '
000000000000fe76         db  0x44 ; 'D'
000000000000fe77         db  0x0e ; '.'
000000000000fe78         db  0x18 ; '.'
000000000000fe79         db  0x41 ; 'A'
000000000000fe7a         db  0x0e ; '.'
000000000000fe7b         db  0x10 ; '.'
000000000000fe7c         db  0x42 ; 'B'
000000000000fe7d         db  0x0e ; '.'
000000000000fe7e         db  0x08 ; '.'
000000000000fe7f         db  0x45 ; 'E'
000000000000fe80         db  0x0b ; '.'
000000000000fe81         db  0x00 ; '.'
000000000000fe82         db  0x00 ; '.'
000000000000fe83         db  0x00 ; '.'
000000000000fe84         dd         0x00000010                                  ; Length of the record
000000000000fe88         dd         0x00001408                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fe8c         db         0x54, 0xbc, 2 dup (0xff)                    ; begin 0xbae0
000000000000fe90         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0xbaec)
000000000000fe94         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fe95         align      8
000000000000fe98         dd         0x0000005c                                  ; Length of the record
000000000000fe9c         dd         0x0000141c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fea0         db         0x50, 0xbc, 2 dup (0xff)                    ; begin 0xbaf0
000000000000fea4         db         0xa3, 3 dup (0x00)                          ; length 0xa3 (end at 0xbb93)
000000000000fea8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fea9         db  0x42 ; 'B'
000000000000feaa         db  0x0e ; '.'
000000000000feab         db  0x10 ; '.'
000000000000feac         db  0x8d ; '.'
000000000000fead         db  0x02 ; '.'
000000000000feae         db  0x42 ; 'B'
000000000000feaf         db  0x0e ; '.'
000000000000feb0         db  0x18 ; '.'
000000000000feb1         db  0x8c ; '.'
000000000000feb2         db  0x03 ; '.'
000000000000feb3         db  0x41 ; 'A'
000000000000feb4         db  0x0e ; '.'
000000000000feb5         db  0x20 ; ' '
000000000000feb6         db  0x86 ; '.'
000000000000feb7         db  0x04 ; '.'
000000000000feb8         db  0x41 ; 'A'
000000000000feb9         db  0x0e ; '.'
000000000000feba         db  0x28 ; '('
000000000000febb         db  0x83 ; '.'
000000000000febc         db  0x05 ; '.'
000000000000febd         db  0x47 ; 'G'
000000000000febe         db  0x0e ; '.'
000000000000febf         db  0x30 ; '0'
000000000000fec0         db  0x02 ; '.'
000000000000fec1         db  0x41 ; 'A'
000000000000fec2         db  0x0a ; '.'
000000000000fec3         db  0x0e ; '.'
000000000000fec4         db  0x28 ; '('
000000000000fec5         db  0x44 ; 'D'
000000000000fec6         db  0x0e ; '.'
000000000000fec7         db  0x20 ; ' '
000000000000fec8         db  0x41 ; 'A'
000000000000fec9         db  0x0e ; '.'
000000000000feca         db  0x18 ; '.'
000000000000fecb         db  0x42 ; 'B'
000000000000fecc         db  0x0e ; '.'
000000000000fecd         db  0x10 ; '.'
000000000000fece         db  0x42 ; 'B'
000000000000fecf         db  0x0e ; '.'
000000000000fed0         db  0x08 ; '.'
000000000000fed1         db  0x49 ; 'I'
000000000000fed2         db  0x0b ; '.'
000000000000fed3         db  0x52 ; 'R'
000000000000fed4         db  0x0a ; '.'
000000000000fed5         db  0x0e ; '.'
000000000000fed6         db  0x28 ; '('
000000000000fed7         db  0x43 ; 'C'
000000000000fed8         db  0x0e ; '.'
000000000000fed9         db  0x20 ; ' '
000000000000feda         db  0x41 ; 'A'
000000000000fedb         db  0x0e ; '.'
000000000000fedc         db  0x18 ; '.'
000000000000fedd         db  0x42 ; 'B'
000000000000fede         db  0x0e ; '.'
000000000000fedf         db  0x10 ; '.'
000000000000fee0         db  0x42 ; 'B'
000000000000fee1         db  0x0e ; '.'
000000000000fee2         db  0x08 ; '.'
000000000000fee3         db  0x46 ; 'F'
000000000000fee4         db  0x0b ; '.'
000000000000fee5         db  0x44 ; 'D'
000000000000fee6         db  0x0a ; '.'
000000000000fee7         db  0x0e ; '.'
000000000000fee8         db  0x28 ; '('
000000000000fee9         db  0x47 ; 'G'
000000000000feea         db  0x0e ; '.'
000000000000feeb         db  0x20 ; ' '
000000000000feec         db  0x41 ; 'A'
000000000000feed         db  0x0e ; '.'
000000000000feee         db  0x18 ; '.'
000000000000feef         db  0x42 ; 'B'
000000000000fef0         db  0x0e ; '.'
000000000000fef1         db  0x10 ; '.'
000000000000fef2         db  0x42 ; 'B'
000000000000fef3         db  0x0e ; '.'
000000000000fef4         db  0x08 ; '.'
000000000000fef5         db  0x45 ; 'E'
000000000000fef6         db  0x0b ; '.'
000000000000fef7         db  0x00 ; '.'
000000000000fef8         dd         0x00000034                                  ; Length of the record
000000000000fefc         dd         0x0000147c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ff00         db         0xa0, 0xbc, 2 dup (0xff)                    ; begin 0xbba0
000000000000ff04         db         0x41, 0x01, 2 dup (0x00)                    ; length 0x141 (end at 0xbce1)
000000000000ff08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff09         db  0x42 ; 'B'
000000000000ff0a         db  0x0e ; '.'
000000000000ff0b         db  0x10 ; '.'
000000000000ff0c         db  0x8c ; '.'
000000000000ff0d         db  0x02 ; '.'
000000000000ff0e         db  0x41 ; 'A'
000000000000ff0f         db  0x0e ; '.'
000000000000ff10         db  0x18 ; '.'
000000000000ff11         db  0x86 ; '.'
000000000000ff12         db  0x03 ; '.'
000000000000ff13         db  0x41 ; 'A'
000000000000ff14         db  0x0e ; '.'
000000000000ff15         db  0x20 ; ' '
000000000000ff16         db  0x83 ; '.'
000000000000ff17         db  0x04 ; '.'
000000000000ff18         db  0x47 ; 'G'
000000000000ff19         db  0x0e ; '.'
000000000000ff1a         db  0x70 ; 'p'
000000000000ff1b         db  0x02 ; '.'
000000000000ff1c         db  0x8b ; '.'
000000000000ff1d         db  0x0a ; '.'
000000000000ff1e         db  0x0e ; '.'
000000000000ff1f         db  0x20 ; ' '
000000000000ff20         db  0x41 ; 'A'
000000000000ff21         db  0x0e ; '.'
000000000000ff22         db  0x18 ; '.'
000000000000ff23         db  0x41 ; 'A'
000000000000ff24         db  0x0e ; '.'
000000000000ff25         db  0x10 ; '.'
000000000000ff26         db  0x42 ; 'B'
000000000000ff27         db  0x0e ; '.'
000000000000ff28         db  0x08 ; '.'
000000000000ff29         db  0x46 ; 'F'
000000000000ff2a         db  0x0b ; '.'
000000000000ff2b         db  0x00 ; '.'
000000000000ff2c         db  0x00 ; '.'
000000000000ff2d         db  0x00 ; '.'
000000000000ff2e         db  0x00 ; '.'
000000000000ff2f         db  0x00 ; '.'
000000000000ff30         dd         0x0000004c                                  ; Length of the record
000000000000ff34         dd         0x000014b4                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ff38         db         0xb8, 0xbd, 2 dup (0xff)                    ; begin 0xbcf0
000000000000ff3c         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0xbd6d)
000000000000ff40         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff41         db  0x42 ; 'B'
000000000000ff42         db  0x0e ; '.'
000000000000ff43         db  0x10 ; '.'
000000000000ff44         db  0x8c ; '.'
000000000000ff45         db  0x02 ; '.'
000000000000ff46         db  0x41 ; 'A'
000000000000ff47         db  0x0e ; '.'
000000000000ff48         db  0x18 ; '.'
000000000000ff49         db  0x86 ; '.'
000000000000ff4a         db  0x03 ; '.'
000000000000ff4b         db  0x44 ; 'D'
000000000000ff4c         db  0x0e ; '.'
000000000000ff4d         db  0x20 ; ' '
000000000000ff4e         db  0x83 ; '.'
000000000000ff4f         db  0x04 ; '.'
000000000000ff50         db  0x69 ; 'i'
000000000000ff51         db  0x0a ; '.'
000000000000ff52         db  0x0e ; '.'
000000000000ff53         db  0x18 ; '.'
000000000000ff54         db  0x41 ; 'A'
000000000000ff55         db  0x0e ; '.'
000000000000ff56         db  0x10 ; '.'
000000000000ff57         db  0x42 ; 'B'
000000000000ff58         db  0x0e ; '.'
000000000000ff59         db  0x08 ; '.'
000000000000ff5a         db  0x45 ; 'E'
000000000000ff5b         db  0x0b ; '.'
000000000000ff5c         db  0x55 ; 'U'
000000000000ff5d         db  0x0a ; '.'
000000000000ff5e         db  0x0e ; '.'
000000000000ff5f         db  0x18 ; '.'
000000000000ff60         db  0x41 ; 'A'
000000000000ff61         db  0x0e ; '.'
000000000000ff62         db  0x10 ; '.'
000000000000ff63         db  0x42 ; 'B'
000000000000ff64         db  0x0e ; '.'
000000000000ff65         db  0x08 ; '.'
000000000000ff66         db  0x48 ; 'H'
000000000000ff67         db  0x0b ; '.'
000000000000ff68         db  0x41 ; 'A'
000000000000ff69         db  0x0a ; '.'
000000000000ff6a         db  0x0e ; '.'
000000000000ff6b         db  0x18 ; '.'
000000000000ff6c         db  0x46 ; 'F'
000000000000ff6d         db  0x0e ; '.'
000000000000ff6e         db  0x10 ; '.'
000000000000ff6f         db  0x42 ; 'B'
000000000000ff70         db  0x0e ; '.'
000000000000ff71         db  0x08 ; '.'
000000000000ff72         db  0x47 ; 'G'
000000000000ff73         db  0x0b ; '.'
000000000000ff74         db  0x49 ; 'I'
000000000000ff75         db  0x0e ; '.'
000000000000ff76         db  0x18 ; '.'
000000000000ff77         db  0x41 ; 'A'
000000000000ff78         db  0x0e ; '.'
000000000000ff79         db  0x10 ; '.'
000000000000ff7a         db  0x42 ; 'B'
000000000000ff7b         db  0x0e ; '.'
000000000000ff7c         db  0x08 ; '.'
000000000000ff7d         db  0x00 ; '.'
000000000000ff7e         db  0x00 ; '.'
000000000000ff7f         db  0x00 ; '.'
000000000000ff80         dd         0x0000001c                                  ; Length of the record
000000000000ff84         dd         0x00001504                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ff88         db         0xe8, 0xbd, 2 dup (0xff)                    ; begin 0xbd70
000000000000ff8c         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0xbdac)
000000000000ff90         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ff91         db  0x44 ; 'D'
000000000000ff92         db  0x0e ; '.'
000000000000ff93         db  0x10 ; '.'
000000000000ff94         db  0x61 ; 'a'
000000000000ff95         db  0x0a ; '.'
000000000000ff96         db  0x0e ; '.'
000000000000ff97         db  0x08 ; '.'
000000000000ff98         db  0x4b ; 'K'
000000000000ff99         db  0x0b ; '.'
000000000000ff9a         db  0x4b ; 'K'
000000000000ff9b         db  0x0e ; '.'
000000000000ff9c         db  0x08 ; '.'
000000000000ff9d         db  0x00 ; '.'
000000000000ff9e         db  0x00 ; '.'
000000000000ff9f         db  0x00 ; '.'
000000000000ffa0         dd         0x00000044                                  ; Length of the record
000000000000ffa4         dd         0x00001524                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000ffa8         db         0x08, 0xbe, 2 dup (0xff)                    ; begin 0xbdb0
000000000000ffac         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xbe15)
000000000000ffb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ffb1         db  0x42 ; 'B'
000000000000ffb2         db  0x0e ; '.'
000000000000ffb3         db  0x10 ; '.'
000000000000ffb4         db  0x8f ; '.'
000000000000ffb5         db  0x02 ; '.'
000000000000ffb6         db  0x42 ; 'B'
000000000000ffb7         db  0x0e ; '.'
000000000000ffb8         db  0x18 ; '.'
000000000000ffb9         db  0x8e ; '.'
000000000000ffba         db  0x03 ; '.'
000000000000ffbb         db  0x45 ; 'E'
000000000000ffbc         db  0x0e ; '.'
000000000000ffbd         db  0x20 ; ' '
000000000000ffbe         db  0x8d ; '.'
000000000000ffbf         db  0x04 ; '.'
000000000000ffc0         db  0x42 ; 'B'
000000000000ffc1         db  0x0e ; '.'
000000000000ffc2         db  0x28 ; '('
000000000000ffc3         db  0x8c ; '.'
000000000000ffc4         db  0x05 ; '.'
000000000000ffc5         db  0x48 ; 'H'
000000000000ffc6         db  0x0e ; '.'
000000000000ffc7         db  0x30 ; '0'
000000000000ffc8         db  0x86 ; '.'
000000000000ffc9         db  0x06 ; '.'
000000000000ffca         db  0x48 ; 'H'
000000000000ffcb         db  0x0e ; '.'
000000000000ffcc         db  0x38 ; '8'
000000000000ffcd         db  0x83 ; '.'
000000000000ffce         db  0x07 ; '.'
000000000000ffcf         db  0x4d ; 'M'
000000000000ffd0         db  0x0e ; '.'
000000000000ffd1         db  0x40 ; '@'
000000000000ffd2         db  0x72 ; 'r'
000000000000ffd3         db  0x0e ; '.'
000000000000ffd4         db  0x38 ; '8'
000000000000ffd5         db  0x41 ; 'A'
000000000000ffd6         db  0x0e ; '.'
000000000000ffd7         db  0x30 ; '0'
000000000000ffd8         db  0x41 ; 'A'
000000000000ffd9         db  0x0e ; '.'
000000000000ffda         db  0x28 ; '('
000000000000ffdb         db  0x42 ; 'B'
000000000000ffdc         db  0x0e ; '.'
000000000000ffdd         db  0x20 ; ' '
000000000000ffde         db  0x42 ; 'B'
000000000000ffdf         db  0x0e ; '.'
000000000000ffe0         db  0x18 ; '.'
000000000000ffe1         db  0x42 ; 'B'
000000000000ffe2         db  0x0e ; '.'
000000000000ffe3         db  0x10 ; '.'
000000000000ffe4         db  0x42 ; 'B'
000000000000ffe5         db  0x0e ; '.'
000000000000ffe6         db  0x08 ; '.'
000000000000ffe7         db  0x00 ; '.'
000000000000ffe8         dd         0x00000014                                  ; Length of the record
000000000000ffec         dd         0x0000156c                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
000000000000fff0         db         0x30, 0xbe, 2 dup (0xff)                    ; begin 0xbe20
000000000000fff4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xbe22)
000000000000fff8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000fff9         align      65536
0000000000010000         dd         0x00000010                                  ; Length of the record
0000000000010004         dd         0x00001584                                  ; FDE: parent CIE at 0xea80 (FDE encoding = 0x1B)
0000000000010008         db         0x28, 0xbe, 2 dup (0xff)                    ; begin 0xbe30
000000000001000c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xbe3e)
0000000000010010         db         0x00                                        ; Augmentation length (LEB128=0)
0000000000010011         align      8


        ; Segment Segment 3
        ; Range: [0x2107d0; 0x2113a0[ (3024 bytes)
        ; File offset : [67536; 69856[ (2320 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x2107d0; 0x2107d8[ (8 bytes)
        ; File offset : [67536; 67544[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
00000000002107d0         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x2107d8; 0x2107e0[ (8 bytes)
        ; File offset : [67544; 67552[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
00000000002107d8         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x2107e0; 0x210b98[ (952 bytes)
        ; File offset : [67552; 68504[ (952 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     long_options:
00000000002107e0         db  0x1d ; '.'                                         ; DATA XREF=main+215, first_last_page+264
00000000002107e1         db  0xc0 ; '.'
00000000002107e2         db  0x00 ; '.'
00000000002107e3         db  0x00 ; '.'
00000000002107e4         db  0x00 ; '.'
00000000002107e5         db  0x00 ; '.'
00000000002107e6         db  0x00 ; '.'
00000000002107e7         db  0x00 ; '.'
00000000002107e8         db  0x01 ; '.'
00000000002107e9         db  0x00 ; '.'
00000000002107ea         db  0x00 ; '.'
00000000002107eb         db  0x00 ; '.'
00000000002107ec         db  0x00 ; '.'
00000000002107ed         db  0x00 ; '.'
00000000002107ee         db  0x00 ; '.'
00000000002107ef         db  0x00 ; '.'
00000000002107f0         db  0x00 ; '.'
00000000002107f1         db  0x00 ; '.'
00000000002107f2         db  0x00 ; '.'
00000000002107f3         db  0x00 ; '.'
00000000002107f4         db  0x00 ; '.'
00000000002107f5         db  0x00 ; '.'
00000000002107f6         db  0x00 ; '.'
00000000002107f7         db  0x00 ; '.'
00000000002107f8         db  0x81 ; '.'
00000000002107f9         db  0x00 ; '.'
00000000002107fa         db  0x00 ; '.'
00000000002107fb         db  0x00 ; '.'
00000000002107fc         db  0x00 ; '.'
00000000002107fd         db  0x00 ; '.'
00000000002107fe         db  0x00 ; '.'
00000000002107ff         db  0x00 ; '.'
0000000000210800         db  0x87 ; '.'
0000000000210801         db  0xbe ; '.'
0000000000210802         db  0x00 ; '.'
0000000000210803         db  0x00 ; '.'
0000000000210804         db  0x00 ; '.'
0000000000210805         db  0x00 ; '.'
0000000000210806         db  0x00 ; '.'
0000000000210807         db  0x00 ; '.'
0000000000210808         db  0x01 ; '.'
0000000000210809         db  0x00 ; '.'
000000000021080a         db  0x00 ; '.'
000000000021080b         db  0x00 ; '.'
000000000021080c         db  0x00 ; '.'
000000000021080d         db  0x00 ; '.'
000000000021080e         db  0x00 ; '.'
000000000021080f         db  0x00 ; '.'
0000000000210810         db  0x00 ; '.'
0000000000210811         db  0x00 ; '.'
0000000000210812         db  0x00 ; '.'
0000000000210813         db  0x00 ; '.'
0000000000210814         db  0x00 ; '.'
0000000000210815         db  0x00 ; '.'
0000000000210816         db  0x00 ; '.'
0000000000210817         db  0x00 ; '.'
0000000000210818         db  0x80 ; '.'
0000000000210819         db  0x00 ; '.'
000000000021081a         db  0x00 ; '.'
000000000021081b         db  0x00 ; '.'
000000000021081c         db  0x00 ; '.'
000000000021081d         db  0x00 ; '.'
000000000021081e         db  0x00 ; '.'
000000000021081f         db  0x00 ; '.'
0000000000210820         db  0x23 ; '#'
0000000000210821         db  0xc0 ; '.'
0000000000210822         db  0x00 ; '.'
0000000000210823         db  0x00 ; '.'
0000000000210824         db  0x00 ; '.'
0000000000210825         db  0x00 ; '.'
0000000000210826         db  0x00 ; '.'
0000000000210827         db  0x00 ; '.'
0000000000210828         db  0x00 ; '.'
0000000000210829         db  0x00 ; '.'
000000000021082a         db  0x00 ; '.'
000000000021082b         db  0x00 ; '.'
000000000021082c         db  0x00 ; '.'
000000000021082d         db  0x00 ; '.'
000000000021082e         db  0x00 ; '.'
000000000021082f         db  0x00 ; '.'
0000000000210830         db  0x00 ; '.'
0000000000210831         db  0x00 ; '.'
0000000000210832         db  0x00 ; '.'
0000000000210833         db  0x00 ; '.'
0000000000210834         db  0x00 ; '.'
0000000000210835         db  0x00 ; '.'
0000000000210836         db  0x00 ; '.'
0000000000210837         db  0x00 ; '.'
0000000000210838         db  0x61 ; 'a'
0000000000210839         db  0x00 ; '.'
000000000021083a         db  0x00 ; '.'
000000000021083b         db  0x00 ; '.'
000000000021083c         db  0x00 ; '.'
000000000021083d         db  0x00 ; '.'
000000000021083e         db  0x00 ; '.'
000000000021083f         db  0x00 ; '.'
0000000000210840         db  0x2a ; '*'
0000000000210841         db  0xc0 ; '.'
0000000000210842         db  0x00 ; '.'
0000000000210843         db  0x00 ; '.'
0000000000210844         db  0x00 ; '.'
0000000000210845         db  0x00 ; '.'
0000000000210846         db  0x00 ; '.'
0000000000210847         db  0x00 ; '.'
0000000000210848         db  0x00 ; '.'
0000000000210849         db  0x00 ; '.'
000000000021084a         db  0x00 ; '.'
000000000021084b         db  0x00 ; '.'
000000000021084c         db  0x00 ; '.'
000000000021084d         db  0x00 ; '.'
000000000021084e         db  0x00 ; '.'
000000000021084f         db  0x00 ; '.'
0000000000210850         db  0x00 ; '.'
0000000000210851         db  0x00 ; '.'
0000000000210852         db  0x00 ; '.'
0000000000210853         db  0x00 ; '.'
0000000000210854         db  0x00 ; '.'
0000000000210855         db  0x00 ; '.'
0000000000210856         db  0x00 ; '.'
0000000000210857         db  0x00 ; '.'
0000000000210858         db  0x63 ; 'c'
0000000000210859         db  0x00 ; '.'
000000000021085a         db  0x00 ; '.'
000000000021085b         db  0x00 ; '.'
000000000021085c         db  0x00 ; '.'
000000000021085d         db  0x00 ; '.'
000000000021085e         db  0x00 ; '.'
000000000021085f         db  0x00 ; '.'
0000000000210860         db  0x3d ; '='
0000000000210861         db  0xc0 ; '.'
0000000000210862         db  0x00 ; '.'
0000000000210863         db  0x00 ; '.'
0000000000210864         db  0x00 ; '.'
0000000000210865         db  0x00 ; '.'
0000000000210866         db  0x00 ; '.'
0000000000210867         db  0x00 ; '.'
0000000000210868         db  0x00 ; '.'
0000000000210869         db  0x00 ; '.'
000000000021086a         db  0x00 ; '.'
000000000021086b         db  0x00 ; '.'
000000000021086c         db  0x00 ; '.'
000000000021086d         db  0x00 ; '.'
000000000021086e         db  0x00 ; '.'
000000000021086f         db  0x00 ; '.'
0000000000210870         db  0x00 ; '.'
0000000000210871         db  0x00 ; '.'
0000000000210872         db  0x00 ; '.'
0000000000210873         db  0x00 ; '.'
0000000000210874         db  0x00 ; '.'
0000000000210875         db  0x00 ; '.'
0000000000210876         db  0x00 ; '.'
0000000000210877         db  0x00 ; '.'
0000000000210878         db  0x64 ; 'd'
0000000000210879         db  0x00 ; '.'
000000000021087a         db  0x00 ; '.'
000000000021087b         db  0x00 ; '.'
000000000021087c         db  0x00 ; '.'
000000000021087d         db  0x00 ; '.'
000000000021087e         db  0x00 ; '.'
000000000021087f         db  0x00 ; '.'
0000000000210880         db  0x4a ; 'J'
0000000000210881         db  0xc0 ; '.'
0000000000210882         db  0x00 ; '.'
0000000000210883         db  0x00 ; '.'
0000000000210884         db  0x00 ; '.'
0000000000210885         db  0x00 ; '.'
0000000000210886         db  0x00 ; '.'
0000000000210887         db  0x00 ; '.'
0000000000210888         db  0x01 ; '.'
0000000000210889         db  0x00 ; '.'
000000000021088a         db  0x00 ; '.'
000000000021088b         db  0x00 ; '.'
000000000021088c         db  0x00 ; '.'
000000000021088d         db  0x00 ; '.'
000000000021088e         db  0x00 ; '.'
000000000021088f         db  0x00 ; '.'
0000000000210890         db  0x00 ; '.'
0000000000210891         db  0x00 ; '.'
0000000000210892         db  0x00 ; '.'
0000000000210893         db  0x00 ; '.'
0000000000210894         db  0x00 ; '.'
0000000000210895         db  0x00 ; '.'
0000000000210896         db  0x00 ; '.'
0000000000210897         db  0x00 ; '.'
0000000000210898         db  0x44 ; 'D'
0000000000210899         db  0x00 ; '.'
000000000021089a         db  0x00 ; '.'
000000000021089b         db  0x00 ; '.'
000000000021089c         db  0x00 ; '.'
000000000021089d         db  0x00 ; '.'
000000000021089e         db  0x00 ; '.'
000000000021089f         db  0x00 ; '.'
00000000002108a0         db  0x56 ; 'V'
00000000002108a1         db  0xc0 ; '.'
00000000002108a2         db  0x00 ; '.'
00000000002108a3         db  0x00 ; '.'
00000000002108a4         db  0x00 ; '.'
00000000002108a5         db  0x00 ; '.'
00000000002108a6         db  0x00 ; '.'
00000000002108a7         db  0x00 ; '.'
00000000002108a8         db  0x02 ; '.'
00000000002108a9         db  0x00 ; '.'
00000000002108aa         db  0x00 ; '.'
00000000002108ab         db  0x00 ; '.'
00000000002108ac         db  0x00 ; '.'
00000000002108ad         db  0x00 ; '.'
00000000002108ae         db  0x00 ; '.'
00000000002108af         db  0x00 ; '.'
00000000002108b0         db  0x00 ; '.'
00000000002108b1         db  0x00 ; '.'
00000000002108b2         db  0x00 ; '.'
00000000002108b3         db  0x00 ; '.'
00000000002108b4         db  0x00 ; '.'
00000000002108b5         db  0x00 ; '.'
00000000002108b6         db  0x00 ; '.'
00000000002108b7         db  0x00 ; '.'
00000000002108b8         db  0x65 ; 'e'
00000000002108b9         db  0x00 ; '.'
00000000002108ba         db  0x00 ; '.'
00000000002108bb         db  0x00 ; '.'
00000000002108bc         db  0x00 ; '.'
00000000002108bd         db  0x00 ; '.'
00000000002108be         db  0x00 ; '.'
00000000002108bf         db  0x00 ; '.'
00000000002108c0         db  0x62 ; 'b'
00000000002108c1         db  0xc0 ; '.'
00000000002108c2         db  0x00 ; '.'
00000000002108c3         db  0x00 ; '.'
00000000002108c4         db  0x00 ; '.'
00000000002108c5         db  0x00 ; '.'
00000000002108c6         db  0x00 ; '.'
00000000002108c7         db  0x00 ; '.'
00000000002108c8         db  0x00 ; '.'
00000000002108c9         db  0x00 ; '.'
00000000002108ca         db  0x00 ; '.'
00000000002108cb         db  0x00 ; '.'
00000000002108cc         db  0x00 ; '.'
00000000002108cd         db  0x00 ; '.'
00000000002108ce         db  0x00 ; '.'
00000000002108cf         db  0x00 ; '.'
00000000002108d0         db  0x00 ; '.'
00000000002108d1         db  0x00 ; '.'
00000000002108d2         db  0x00 ; '.'
00000000002108d3         db  0x00 ; '.'
00000000002108d4         db  0x00 ; '.'
00000000002108d5         db  0x00 ; '.'
00000000002108d6         db  0x00 ; '.'
00000000002108d7         db  0x00 ; '.'
00000000002108d8         db  0x66 ; 'f'
00000000002108d9         db  0x00 ; '.'
00000000002108da         db  0x00 ; '.'
00000000002108db         db  0x00 ; '.'
00000000002108dc         db  0x00 ; '.'
00000000002108dd         db  0x00 ; '.'
00000000002108de         db  0x00 ; '.'
00000000002108df         db  0x00 ; '.'
00000000002108e0         db  0xe1 ; '.'
00000000002108e1         db  0xc0 ; '.'
00000000002108e2         db  0x00 ; '.'
00000000002108e3         db  0x00 ; '.'
00000000002108e4         db  0x00 ; '.'
00000000002108e5         db  0x00 ; '.'
00000000002108e6         db  0x00 ; '.'
00000000002108e7         db  0x00 ; '.'
00000000002108e8         db  0x01 ; '.'
00000000002108e9         db  0x00 ; '.'
00000000002108ea         db  0x00 ; '.'
00000000002108eb         db  0x00 ; '.'
00000000002108ec         db  0x00 ; '.'
00000000002108ed         db  0x00 ; '.'
00000000002108ee         db  0x00 ; '.'
00000000002108ef         db  0x00 ; '.'
00000000002108f0         db  0x00 ; '.'
00000000002108f1         db  0x00 ; '.'
00000000002108f2         db  0x00 ; '.'
00000000002108f3         db  0x00 ; '.'
00000000002108f4         db  0x00 ; '.'
00000000002108f5         db  0x00 ; '.'
00000000002108f6         db  0x00 ; '.'
00000000002108f7         db  0x00 ; '.'
00000000002108f8         db  0x68 ; 'h'
00000000002108f9         db  0x00 ; '.'
00000000002108fa         db  0x00 ; '.'
00000000002108fb         db  0x00 ; '.'
00000000002108fc         db  0x00 ; '.'
00000000002108fd         db  0x00 ; '.'
00000000002108fe         db  0x00 ; '.'
00000000002108ff         db  0x00 ; '.'
0000000000210900         db  0x6c ; 'l'
0000000000210901         db  0xc0 ; '.'
0000000000210902         db  0x00 ; '.'
0000000000210903         db  0x00 ; '.'
0000000000210904         db  0x00 ; '.'
0000000000210905         db  0x00 ; '.'
0000000000210906         db  0x00 ; '.'
0000000000210907         db  0x00 ; '.'
0000000000210908         db  0x02 ; '.'
0000000000210909         db  0x00 ; '.'
000000000021090a         db  0x00 ; '.'
000000000021090b         db  0x00 ; '.'
000000000021090c         db  0x00 ; '.'
000000000021090d         db  0x00 ; '.'
000000000021090e         db  0x00 ; '.'
000000000021090f         db  0x00 ; '.'
0000000000210910         db  0x00 ; '.'
0000000000210911         db  0x00 ; '.'
0000000000210912         db  0x00 ; '.'
0000000000210913         db  0x00 ; '.'
0000000000210914         db  0x00 ; '.'
0000000000210915         db  0x00 ; '.'
0000000000210916         db  0x00 ; '.'
0000000000210917         db  0x00 ; '.'
0000000000210918         db  0x69 ; 'i'
0000000000210919         db  0x00 ; '.'
000000000021091a         db  0x00 ; '.'
000000000021091b         db  0x00 ; '.'
000000000021091c         db  0x00 ; '.'
000000000021091d         db  0x00 ; '.'
000000000021091e         db  0x00 ; '.'
000000000021091f         db  0x00 ; '.'
0000000000210920         db  0x78 ; 'x'
0000000000210921         db  0xc0 ; '.'
0000000000210922         db  0x00 ; '.'
0000000000210923         db  0x00 ; '.'
0000000000210924         db  0x00 ; '.'
0000000000210925         db  0x00 ; '.'
0000000000210926         db  0x00 ; '.'
0000000000210927         db  0x00 ; '.'
0000000000210928         db  0x00 ; '.'
0000000000210929         db  0x00 ; '.'
000000000021092a         db  0x00 ; '.'
000000000021092b         db  0x00 ; '.'
000000000021092c         db  0x00 ; '.'
000000000021092d         db  0x00 ; '.'
000000000021092e         db  0x00 ; '.'
000000000021092f         db  0x00 ; '.'
0000000000210930         db  0x00 ; '.'
0000000000210931         db  0x00 ; '.'
0000000000210932         db  0x00 ; '.'
0000000000210933         db  0x00 ; '.'
0000000000210934         db  0x00 ; '.'
0000000000210935         db  0x00 ; '.'
0000000000210936         db  0x00 ; '.'
0000000000210937         db  0x00 ; '.'
0000000000210938         db  0x4a ; 'J'
0000000000210939         db  0x00 ; '.'
000000000021093a         db  0x00 ; '.'
000000000021093b         db  0x00 ; '.'
000000000021093c         db  0x00 ; '.'
000000000021093d         db  0x00 ; '.'
000000000021093e         db  0x00 ; '.'
000000000021093f         db  0x00 ; '.'
0000000000210940         db  0x83 ; '.'
0000000000210941         db  0xc0 ; '.'
0000000000210942         db  0x00 ; '.'
0000000000210943         db  0x00 ; '.'
0000000000210944         db  0x00 ; '.'
0000000000210945         db  0x00 ; '.'
0000000000210946         db  0x00 ; '.'
0000000000210947         db  0x00 ; '.'
0000000000210948         db  0x01 ; '.'
0000000000210949         db  0x00 ; '.'
000000000021094a         db  0x00 ; '.'
000000000021094b         db  0x00 ; '.'
000000000021094c         db  0x00 ; '.'
000000000021094d         db  0x00 ; '.'
000000000021094e         db  0x00 ; '.'
000000000021094f         db  0x00 ; '.'
0000000000210950         db  0x00 ; '.'
0000000000210951         db  0x00 ; '.'
0000000000210952         db  0x00 ; '.'
0000000000210953         db  0x00 ; '.'
0000000000210954         db  0x00 ; '.'
0000000000210955         db  0x00 ; '.'
0000000000210956         db  0x00 ; '.'
0000000000210957         db  0x00 ; '.'
0000000000210958         db  0x6c ; 'l'
0000000000210959         db  0x00 ; '.'
000000000021095a         db  0x00 ; '.'
000000000021095b         db  0x00 ; '.'
000000000021095c         db  0x00 ; '.'
000000000021095d         db  0x00 ; '.'
000000000021095e         db  0x00 ; '.'
000000000021095f         db  0x00 ; '.'
0000000000210960         db  0x8a ; '.'
0000000000210961         db  0xc0 ; '.'
0000000000210962         db  0x00 ; '.'
0000000000210963         db  0x00 ; '.'
0000000000210964         db  0x00 ; '.'
0000000000210965         db  0x00 ; '.'
0000000000210966         db  0x00 ; '.'
0000000000210967         db  0x00 ; '.'
0000000000210968         db  0x00 ; '.'
0000000000210969         db  0x00 ; '.'
000000000021096a         db  0x00 ; '.'
000000000021096b         db  0x00 ; '.'
000000000021096c         db  0x00 ; '.'
000000000021096d         db  0x00 ; '.'
000000000021096e         db  0x00 ; '.'
000000000021096f         db  0x00 ; '.'
0000000000210970         db  0x00 ; '.'
0000000000210971         db  0x00 ; '.'
0000000000210972         db  0x00 ; '.'
0000000000210973         db  0x00 ; '.'
0000000000210974         db  0x00 ; '.'
0000000000210975         db  0x00 ; '.'
0000000000210976         db  0x00 ; '.'
0000000000210977         db  0x00 ; '.'
0000000000210978         db  0x6d ; 'm'
0000000000210979         db  0x00 ; '.'
000000000021097a         db  0x00 ; '.'
000000000021097b         db  0x00 ; '.'
000000000021097c         db  0x00 ; '.'
000000000021097d         db  0x00 ; '.'
000000000021097e         db  0x00 ; '.'
000000000021097f         db  0x00 ; '.'
0000000000210980         db  0x90 ; '.'
0000000000210981         db  0xc0 ; '.'
0000000000210982         db  0x00 ; '.'
0000000000210983         db  0x00 ; '.'
0000000000210984         db  0x00 ; '.'
0000000000210985         db  0x00 ; '.'
0000000000210986         db  0x00 ; '.'
0000000000210987         db  0x00 ; '.'
0000000000210988         db  0x02 ; '.'
0000000000210989         db  0x00 ; '.'
000000000021098a         db  0x00 ; '.'
000000000021098b         db  0x00 ; '.'
000000000021098c         db  0x00 ; '.'
000000000021098d         db  0x00 ; '.'
000000000021098e         db  0x00 ; '.'
000000000021098f         db  0x00 ; '.'
0000000000210990         db  0x00 ; '.'
0000000000210991         db  0x00 ; '.'
0000000000210992         db  0x00 ; '.'
0000000000210993         db  0x00 ; '.'
0000000000210994         db  0x00 ; '.'
0000000000210995         db  0x00 ; '.'
0000000000210996         db  0x00 ; '.'
0000000000210997         db  0x00 ; '.'
0000000000210998         db  0x6e ; 'n'
0000000000210999         db  0x00 ; '.'
000000000021099a         db  0x00 ; '.'
000000000021099b         db  0x00 ; '.'
000000000021099c         db  0x00 ; '.'
000000000021099d         db  0x00 ; '.'
000000000021099e         db  0x00 ; '.'
000000000021099f         db  0x00 ; '.'
00000000002109a0         db  0x9d ; '.'
00000000002109a1         db  0xc0 ; '.'
00000000002109a2         db  0x00 ; '.'
00000000002109a3         db  0x00 ; '.'
00000000002109a4         db  0x00 ; '.'
00000000002109a5         db  0x00 ; '.'
00000000002109a6         db  0x00 ; '.'
00000000002109a7         db  0x00 ; '.'
00000000002109a8         db  0x01 ; '.'
00000000002109a9         db  0x00 ; '.'
00000000002109aa         db  0x00 ; '.'
00000000002109ab         db  0x00 ; '.'
00000000002109ac         db  0x00 ; '.'
00000000002109ad         db  0x00 ; '.'
00000000002109ae         db  0x00 ; '.'
00000000002109af         db  0x00 ; '.'
00000000002109b0         db  0x00 ; '.'
00000000002109b1         db  0x00 ; '.'
00000000002109b2         db  0x00 ; '.'
00000000002109b3         db  0x00 ; '.'
00000000002109b4         db  0x00 ; '.'
00000000002109b5         db  0x00 ; '.'
00000000002109b6         db  0x00 ; '.'
00000000002109b7         db  0x00 ; '.'
00000000002109b8         db  0x4e ; 'N'
00000000002109b9         db  0x00 ; '.'
00000000002109ba         db  0x00 ; '.'
00000000002109bb         db  0x00 ; '.'
00000000002109bc         db  0x00 ; '.'
00000000002109bd         db  0x00 ; '.'
00000000002109be         db  0x00 ; '.'
00000000002109bf         db  0x00 ; '.'
00000000002109c0         db  0xaf ; '.'
00000000002109c1         db  0xc0 ; '.'
00000000002109c2         db  0x00 ; '.'
00000000002109c3         db  0x00 ; '.'
00000000002109c4         db  0x00 ; '.'
00000000002109c5         db  0x00 ; '.'
00000000002109c6         db  0x00 ; '.'
00000000002109c7         db  0x00 ; '.'
00000000002109c8         db  0x01 ; '.'
00000000002109c9         db  0x00 ; '.'
00000000002109ca         db  0x00 ; '.'
00000000002109cb         db  0x00 ; '.'
00000000002109cc         db  0x00 ; '.'
00000000002109cd         db  0x00 ; '.'
00000000002109ce         db  0x00 ; '.'
00000000002109cf         db  0x00 ; '.'
00000000002109d0         db  0x00 ; '.'
00000000002109d1         db  0x00 ; '.'
00000000002109d2         db  0x00 ; '.'
00000000002109d3         db  0x00 ; '.'
00000000002109d4         db  0x00 ; '.'
00000000002109d5         db  0x00 ; '.'
00000000002109d6         db  0x00 ; '.'
00000000002109d7         db  0x00 ; '.'
00000000002109d8         db  0x6f ; 'o'
00000000002109d9         db  0x00 ; '.'
00000000002109da         db  0x00 ; '.'
00000000002109db         db  0x00 ; '.'
00000000002109dc         db  0x00 ; '.'
00000000002109dd         db  0x00 ; '.'
00000000002109de         db  0x00 ; '.'
00000000002109df         db  0x00 ; '.'
00000000002109e0         db  0xb6 ; '.'
00000000002109e1         db  0xc0 ; '.'
00000000002109e2         db  0x00 ; '.'
00000000002109e3         db  0x00 ; '.'
00000000002109e4         db  0x00 ; '.'
00000000002109e5         db  0x00 ; '.'
00000000002109e6         db  0x00 ; '.'
00000000002109e7         db  0x00 ; '.'
00000000002109e8         db  0x00 ; '.'
00000000002109e9         db  0x00 ; '.'
00000000002109ea         db  0x00 ; '.'
00000000002109eb         db  0x00 ; '.'
00000000002109ec         db  0x00 ; '.'
00000000002109ed         db  0x00 ; '.'
00000000002109ee         db  0x00 ; '.'
00000000002109ef         db  0x00 ; '.'
00000000002109f0         db  0x00 ; '.'
00000000002109f1         db  0x00 ; '.'
00000000002109f2         db  0x00 ; '.'
00000000002109f3         db  0x00 ; '.'
00000000002109f4         db  0x00 ; '.'
00000000002109f5         db  0x00 ; '.'
00000000002109f6         db  0x00 ; '.'
00000000002109f7         db  0x00 ; '.'
00000000002109f8         db  0x72 ; 'r'
00000000002109f9         db  0x00 ; '.'
00000000002109fa         db  0x00 ; '.'
00000000002109fb         db  0x00 ; '.'
00000000002109fc         db  0x00 ; '.'
00000000002109fd         db  0x00 ; '.'
00000000002109fe         db  0x00 ; '.'
00000000002109ff         db  0x00 ; '.'
0000000000210a00         db  0xc7 ; '.'
0000000000210a01         db  0xc0 ; '.'
0000000000210a02         db  0x00 ; '.'
0000000000210a03         db  0x00 ; '.'
0000000000210a04         db  0x00 ; '.'
0000000000210a05         db  0x00 ; '.'
0000000000210a06         db  0x00 ; '.'
0000000000210a07         db  0x00 ; '.'
0000000000210a08         db  0x02 ; '.'
0000000000210a09         db  0x00 ; '.'
0000000000210a0a         db  0x00 ; '.'
0000000000210a0b         db  0x00 ; '.'
0000000000210a0c         db  0x00 ; '.'
0000000000210a0d         db  0x00 ; '.'
0000000000210a0e         db  0x00 ; '.'
0000000000210a0f         db  0x00 ; '.'
0000000000210a10         db  0x00 ; '.'
0000000000210a11         db  0x00 ; '.'
0000000000210a12         db  0x00 ; '.'
0000000000210a13         db  0x00 ; '.'
0000000000210a14         db  0x00 ; '.'
0000000000210a15         db  0x00 ; '.'
0000000000210a16         db  0x00 ; '.'
0000000000210a17         db  0x00 ; '.'
0000000000210a18         db  0x73 ; 's'
0000000000210a19         db  0x00 ; '.'
0000000000210a1a         db  0x00 ; '.'
0000000000210a1b         db  0x00 ; '.'
0000000000210a1c         db  0x00 ; '.'
0000000000210a1d         db  0x00 ; '.'
0000000000210a1e         db  0x00 ; '.'
0000000000210a1f         db  0x00 ; '.'
0000000000210a20         db  0xd1 ; '.'
0000000000210a21         db  0xc0 ; '.'
0000000000210a22         db  0x00 ; '.'
0000000000210a23         db  0x00 ; '.'
0000000000210a24         db  0x00 ; '.'
0000000000210a25         db  0x00 ; '.'
0000000000210a26         db  0x00 ; '.'
0000000000210a27         db  0x00 ; '.'
0000000000210a28         db  0x02 ; '.'
0000000000210a29         db  0x00 ; '.'
0000000000210a2a         db  0x00 ; '.'
0000000000210a2b         db  0x00 ; '.'
0000000000210a2c         db  0x00 ; '.'
0000000000210a2d         db  0x00 ; '.'
0000000000210a2e         db  0x00 ; '.'
0000000000210a2f         db  0x00 ; '.'
0000000000210a30         db  0x00 ; '.'
0000000000210a31         db  0x00 ; '.'
0000000000210a32         db  0x00 ; '.'
0000000000210a33         db  0x00 ; '.'
0000000000210a34         db  0x00 ; '.'
0000000000210a35         db  0x00 ; '.'
0000000000210a36         db  0x00 ; '.'
0000000000210a37         db  0x00 ; '.'
0000000000210a38         db  0x53 ; 'S'
0000000000210a39         db  0x00 ; '.'
0000000000210a3a         db  0x00 ; '.'
0000000000210a3b         db  0x00 ; '.'
0000000000210a3c         db  0x00 ; '.'
0000000000210a3d         db  0x00 ; '.'
0000000000210a3e         db  0x00 ; '.'
0000000000210a3f         db  0x00 ; '.'
0000000000210a40         db  0xdc ; '.'
0000000000210a41         db  0xc0 ; '.'
0000000000210a42         db  0x00 ; '.'
0000000000210a43         db  0x00 ; '.'
0000000000210a44         db  0x00 ; '.'
0000000000210a45         db  0x00 ; '.'
0000000000210a46         db  0x00 ; '.'
0000000000210a47         db  0x00 ; '.'
0000000000210a48         db  0x00 ; '.'
0000000000210a49         db  0x00 ; '.'
0000000000210a4a         db  0x00 ; '.'
0000000000210a4b         db  0x00 ; '.'
0000000000210a4c         db  0x00 ; '.'
0000000000210a4d         db  0x00 ; '.'
0000000000210a4e         db  0x00 ; '.'
0000000000210a4f         db  0x00 ; '.'
0000000000210a50         db  0x00 ; '.'
0000000000210a51         db  0x00 ; '.'
0000000000210a52         db  0x00 ; '.'
0000000000210a53         db  0x00 ; '.'
0000000000210a54         db  0x00 ; '.'
0000000000210a55         db  0x00 ; '.'
0000000000210a56         db  0x00 ; '.'
0000000000210a57         db  0x00 ; '.'
0000000000210a58         db  0x74 ; 't'
0000000000210a59         db  0x00 ; '.'
0000000000210a5a         db  0x00 ; '.'
0000000000210a5b         db  0x00 ; '.'
0000000000210a5c         db  0x00 ; '.'
0000000000210a5d         db  0x00 ; '.'
0000000000210a5e         db  0x00 ; '.'
0000000000210a5f         db  0x00 ; '.'
0000000000210a60         db  0xe8 ; '.'
0000000000210a61         db  0xc0 ; '.'
0000000000210a62         db  0x00 ; '.'
0000000000210a63         db  0x00 ; '.'
0000000000210a64         db  0x00 ; '.'
0000000000210a65         db  0x00 ; '.'
0000000000210a66         db  0x00 ; '.'
0000000000210a67         db  0x00 ; '.'
0000000000210a68         db  0x00 ; '.'
0000000000210a69         db  0x00 ; '.'
0000000000210a6a         db  0x00 ; '.'
0000000000210a6b         db  0x00 ; '.'
0000000000210a6c         db  0x00 ; '.'
0000000000210a6d         db  0x00 ; '.'
0000000000210a6e         db  0x00 ; '.'
0000000000210a6f         db  0x00 ; '.'
0000000000210a70         db  0x00 ; '.'
0000000000210a71         db  0x00 ; '.'
0000000000210a72         db  0x00 ; '.'
0000000000210a73         db  0x00 ; '.'
0000000000210a74         db  0x00 ; '.'
0000000000210a75         db  0x00 ; '.'
0000000000210a76         db  0x00 ; '.'
0000000000210a77         db  0x00 ; '.'
0000000000210a78         db  0x54 ; 'T'
0000000000210a79         db  0x00 ; '.'
0000000000210a7a         db  0x00 ; '.'
0000000000210a7b         db  0x00 ; '.'
0000000000210a7c         db  0x00 ; '.'
0000000000210a7d         db  0x00 ; '.'
0000000000210a7e         db  0x00 ; '.'
0000000000210a7f         db  0x00 ; '.'
0000000000210a80         db  0xf8 ; '.'
0000000000210a81         db  0xc0 ; '.'
0000000000210a82         db  0x00 ; '.'
0000000000210a83         db  0x00 ; '.'
0000000000210a84         db  0x00 ; '.'
0000000000210a85         db  0x00 ; '.'
0000000000210a86         db  0x00 ; '.'
0000000000210a87         db  0x00 ; '.'
0000000000210a88         db  0x00 ; '.'
0000000000210a89         db  0x00 ; '.'
0000000000210a8a         db  0x00 ; '.'
0000000000210a8b         db  0x00 ; '.'
0000000000210a8c         db  0x00 ; '.'
0000000000210a8d         db  0x00 ; '.'
0000000000210a8e         db  0x00 ; '.'
0000000000210a8f         db  0x00 ; '.'
0000000000210a90         db  0x00 ; '.'
0000000000210a91         db  0x00 ; '.'
0000000000210a92         db  0x00 ; '.'
0000000000210a93         db  0x00 ; '.'
0000000000210a94         db  0x00 ; '.'
0000000000210a95         db  0x00 ; '.'
0000000000210a96         db  0x00 ; '.'
0000000000210a97         db  0x00 ; '.'
0000000000210a98         db  0x76 ; 'v'
0000000000210a99         db  0x00 ; '.'
0000000000210a9a         db  0x00 ; '.'
0000000000210a9b         db  0x00 ; '.'
0000000000210a9c         db  0x00 ; '.'
0000000000210a9d         db  0x00 ; '.'
0000000000210a9e         db  0x00 ; '.'
0000000000210a9f         db  0x00 ; '.'
0000000000210aa0         db  0x0e ; '.'
0000000000210aa1         db  0xc1 ; '.'
0000000000210aa2         db  0x00 ; '.'
0000000000210aa3         db  0x00 ; '.'
0000000000210aa4         db  0x00 ; '.'
0000000000210aa5         db  0x00 ; '.'
0000000000210aa6         db  0x00 ; '.'
0000000000210aa7         db  0x00 ; '.'
0000000000210aa8         db  0x01 ; '.'
0000000000210aa9         db  0x00 ; '.'
0000000000210aaa         db  0x00 ; '.'
0000000000210aab         db  0x00 ; '.'
0000000000210aac         db  0x00 ; '.'
0000000000210aad         db  0x00 ; '.'
0000000000210aae         db  0x00 ; '.'
0000000000210aaf         db  0x00 ; '.'
0000000000210ab0         db  0x00 ; '.'
0000000000210ab1         db  0x00 ; '.'
0000000000210ab2         db  0x00 ; '.'
0000000000210ab3         db  0x00 ; '.'
0000000000210ab4         db  0x00 ; '.'
0000000000210ab5         db  0x00 ; '.'
0000000000210ab6         db  0x00 ; '.'
0000000000210ab7         db  0x00 ; '.'
0000000000210ab8         db  0x77 ; 'w'
0000000000210ab9         db  0x00 ; '.'
0000000000210aba         db  0x00 ; '.'
0000000000210abb         db  0x00 ; '.'
0000000000210abc         db  0x00 ; '.'
0000000000210abd         db  0x00 ; '.'
0000000000210abe         db  0x00 ; '.'
0000000000210abf         db  0x00 ; '.'
0000000000210ac0         db  0x09 ; '.'
0000000000210ac1         db  0xc1 ; '.'
0000000000210ac2         db  0x00 ; '.'
0000000000210ac3         db  0x00 ; '.'
0000000000210ac4         db  0x00 ; '.'
0000000000210ac5         db  0x00 ; '.'
0000000000210ac6         db  0x00 ; '.'
0000000000210ac7         db  0x00 ; '.'
0000000000210ac8         db  0x01 ; '.'
0000000000210ac9         db  0x00 ; '.'
0000000000210aca         db  0x00 ; '.'
0000000000210acb         db  0x00 ; '.'
0000000000210acc         db  0x00 ; '.'
0000000000210acd         db  0x00 ; '.'
0000000000210ace         db  0x00 ; '.'
0000000000210acf         db  0x00 ; '.'
0000000000210ad0         db  0x00 ; '.'
0000000000210ad1         db  0x00 ; '.'
0000000000210ad2         db  0x00 ; '.'
0000000000210ad3         db  0x00 ; '.'
0000000000210ad4         db  0x00 ; '.'
0000000000210ad5         db  0x00 ; '.'
0000000000210ad6         db  0x00 ; '.'
0000000000210ad7         db  0x00 ; '.'
0000000000210ad8         db  0x57 ; 'W'
0000000000210ad9         db  0x00 ; '.'
0000000000210ada         db  0x00 ; '.'
0000000000210adb         db  0x00 ; '.'
0000000000210adc         db  0x00 ; '.'
0000000000210add         db  0x00 ; '.'
0000000000210ade         db  0x00 ; '.'
0000000000210adf         db  0x00 ; '.'
0000000000210ae0         db  0x14 ; '.'
0000000000210ae1         db  0xc1 ; '.'
0000000000210ae2         db  0x00 ; '.'
0000000000210ae3         db  0x00 ; '.'
0000000000210ae4         db  0x00 ; '.'
0000000000210ae5         db  0x00 ; '.'
0000000000210ae6         db  0x00 ; '.'
0000000000210ae7         db  0x00 ; '.'
0000000000210ae8         db  0x00 ; '.'
0000000000210ae9         db  0x00 ; '.'
0000000000210aea         db  0x00 ; '.'
0000000000210aeb         db  0x00 ; '.'
0000000000210aec         db  0x00 ; '.'
0000000000210aed         db  0x00 ; '.'
0000000000210aee         db  0x00 ; '.'
0000000000210aef         db  0x00 ; '.'
0000000000210af0         db  0x00 ; '.'
0000000000210af1         db  0x00 ; '.'
0000000000210af2         db  0x00 ; '.'
0000000000210af3         db  0x00 ; '.'
0000000000210af4         db  0x00 ; '.'
0000000000210af5         db  0x00 ; '.'
0000000000210af6         db  0x00 ; '.'
0000000000210af7         db  0x00 ; '.'
0000000000210af8         db  0x7e ; '~'
0000000000210af9         db  0xff ; '.'
0000000000210afa         db  0xff ; '.'
0000000000210afb         db  0xff ; '.'
0000000000210afc         db  0x00 ; '.'
0000000000210afd         db  0x00 ; '.'
0000000000210afe         db  0x00 ; '.'
0000000000210aff         db  0x00 ; '.'
0000000000210b00         db  0x19 ; '.'
0000000000210b01         db  0xc1 ; '.'
0000000000210b02         db  0x00 ; '.'
0000000000210b03         db  0x00 ; '.'
0000000000210b04         db  0x00 ; '.'
0000000000210b05         db  0x00 ; '.'
0000000000210b06         db  0x00 ; '.'
0000000000210b07         db  0x00 ; '.'
0000000000210b08         db  0x00 ; '.'
0000000000210b09         db  0x00 ; '.'
0000000000210b0a         db  0x00 ; '.'
0000000000210b0b         db  0x00 ; '.'
0000000000210b0c         db  0x00 ; '.'
0000000000210b0d         db  0x00 ; '.'
0000000000210b0e         db  0x00 ; '.'
0000000000210b0f         db  0x00 ; '.'
0000000000210b10         db  0x00 ; '.'
0000000000210b11         db  0x00 ; '.'
0000000000210b12         db  0x00 ; '.'
0000000000210b13         db  0x00 ; '.'
0000000000210b14         db  0x00 ; '.'
0000000000210b15         db  0x00 ; '.'
0000000000210b16         db  0x00 ; '.'
0000000000210b17         db  0x00 ; '.'
0000000000210b18         db  0x7d ; '}'
0000000000210b19         db  0xff ; '.'
0000000000210b1a         db  0xff ; '.'
0000000000210b1b         db  0xff ; '.'
0000000000210b1c         db  0x00 ; '.'
0000000000210b1d         db  0x00 ; '.'
0000000000210b1e         db  0x00 ; '.'
0000000000210b1f         db  0x00 ; '.'
0000000000210b20         db  0x00 ; '.'
0000000000210b21         db  0x00 ; '.'
0000000000210b22         db  0x00 ; '.'
0000000000210b23         db  0x00 ; '.'
0000000000210b24         db  0x00 ; '.'
0000000000210b25         db  0x00 ; '.'
0000000000210b26         db  0x00 ; '.'
0000000000210b27         db  0x00 ; '.'
0000000000210b28         db  0x00 ; '.'
0000000000210b29         db  0x00 ; '.'
0000000000210b2a         db  0x00 ; '.'
0000000000210b2b         db  0x00 ; '.'
0000000000210b2c         db  0x00 ; '.'
0000000000210b2d         db  0x00 ; '.'
0000000000210b2e         db  0x00 ; '.'
0000000000210b2f         db  0x00 ; '.'
0000000000210b30         db  0x00 ; '.'
0000000000210b31         db  0x00 ; '.'
0000000000210b32         db  0x00 ; '.'
0000000000210b33         db  0x00 ; '.'
0000000000210b34         db  0x00 ; '.'
0000000000210b35         db  0x00 ; '.'
0000000000210b36         db  0x00 ; '.'
0000000000210b37         db  0x00 ; '.'
0000000000210b38         db  0x00 ; '.'
0000000000210b39         db  0x00 ; '.'
0000000000210b3a         db  0x00 ; '.'
0000000000210b3b         db  0x00 ; '.'
0000000000210b3c         db  0x00 ; '.'
0000000000210b3d         db  0x00 ; '.'
0000000000210b3e         db  0x00 ; '.'
0000000000210b3f         db  0x00 ; '.'
                     quoting_style_args:
0000000000210b40         db  0xb7 ; '.'
0000000000210b41         db  0xda ; '.'
0000000000210b42         db  0x00 ; '.'
0000000000210b43         db  0x00 ; '.'
0000000000210b44         db  0x00 ; '.'
0000000000210b45         db  0x00 ; '.'
0000000000210b46         db  0x00 ; '.'
0000000000210b47         db  0x00 ; '.'
0000000000210b48         db  0xbf ; '.'
0000000000210b49         db  0xda ; '.'
0000000000210b4a         db  0x00 ; '.'
0000000000210b4b         db  0x00 ; '.'
0000000000210b4c         db  0x00 ; '.'
0000000000210b4d         db  0x00 ; '.'
0000000000210b4e         db  0x00 ; '.'
0000000000210b4f         db  0x00 ; '.'
0000000000210b50         db  0xc5 ; '.'
0000000000210b51         db  0xda ; '.'
0000000000210b52         db  0x00 ; '.'
0000000000210b53         db  0x00 ; '.'
0000000000210b54         db  0x00 ; '.'
0000000000210b55         db  0x00 ; '.'
0000000000210b56         db  0x00 ; '.'
0000000000210b57         db  0x00 ; '.'
0000000000210b58         db  0xd2 ; '.'
0000000000210b59         db  0xda ; '.'
0000000000210b5a         db  0x00 ; '.'
0000000000210b5b         db  0x00 ; '.'
0000000000210b5c         db  0x00 ; '.'
0000000000210b5d         db  0x00 ; '.'
0000000000210b5e         db  0x00 ; '.'
0000000000210b5f         db  0x00 ; '.'
0000000000210b60         db  0xdf ; '.'
0000000000210b61         db  0xda ; '.'
0000000000210b62         db  0x00 ; '.'
0000000000210b63         db  0x00 ; '.'
0000000000210b64         db  0x00 ; '.'
0000000000210b65         db  0x00 ; '.'
0000000000210b66         db  0x00 ; '.'
0000000000210b67         db  0x00 ; '.'
0000000000210b68         db  0xf3 ; '.'
0000000000210b69         db  0xda ; '.'
0000000000210b6a         db  0x00 ; '.'
0000000000210b6b         db  0x00 ; '.'
0000000000210b6c         db  0x00 ; '.'
0000000000210b6d         db  0x00 ; '.'
0000000000210b6e         db  0x00 ; '.'
0000000000210b6f         db  0x00 ; '.'
0000000000210b70         db  0xf5 ; '.'
0000000000210b71         db  0xda ; '.'
0000000000210b72         db  0x00 ; '.'
0000000000210b73         db  0x00 ; '.'
0000000000210b74         db  0x00 ; '.'
0000000000210b75         db  0x00 ; '.'
0000000000210b76         db  0x00 ; '.'
0000000000210b77         db  0x00 ; '.'
0000000000210b78         db  0xd8 ; '.'
0000000000210b79         db  0xda ; '.'
0000000000210b7a         db  0x00 ; '.'
0000000000210b7b         db  0x00 ; '.'
0000000000210b7c         db  0x00 ; '.'
0000000000210b7d         db  0x00 ; '.'
0000000000210b7e         db  0x00 ; '.'
0000000000210b7f         db  0x00 ; '.'
0000000000210b80         db  0xd1 ; '.'
0000000000210b81         db  0xbf ; '.'
0000000000210b82         db  0x00 ; '.'
0000000000210b83         db  0x00 ; '.'
0000000000210b84         db  0x00 ; '.'
0000000000210b85         db  0x00 ; '.'
0000000000210b86         db  0x00 ; '.'
0000000000210b87         db  0x00 ; '.'
0000000000210b88         db  0xfd ; '.'
0000000000210b89         db  0xda ; '.'
0000000000210b8a         db  0x00 ; '.'
0000000000210b8b         db  0x00 ; '.'
0000000000210b8c         db  0x00 ; '.'
0000000000210b8d         db  0x00 ; '.'
0000000000210b8e         db  0x00 ; '.'
0000000000210b8f         db  0x00 ; '.'
0000000000210b90         db  0x00 ; '.'
0000000000210b91         db  0x00 ; '.'
0000000000210b92         db  0x00 ; '.'
0000000000210b93         db  0x00 ; '.'
0000000000210b94         db  0x00 ; '.'
0000000000210b95         db  0x00 ; '.'
0000000000210b96         db  0x00 ; '.'
0000000000210b97         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x210b98; 0x210d88[ (496 bytes)
        ; File offset : [68504; 69000[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
0000000000210b98         db  0x01 ; '.'
0000000000210b99         db  0x00 ; '.'
0000000000210b9a         db  0x00 ; '.'
0000000000210b9b         db  0x00 ; '.'
0000000000210b9c         db  0x00 ; '.'
0000000000210b9d         db  0x00 ; '.'
0000000000210b9e         db  0x00 ; '.'
0000000000210b9f         db  0x00 ; '.'
0000000000210ba0         db  0x01 ; '.'
0000000000210ba1         db  0x00 ; '.'
0000000000210ba2         db  0x00 ; '.'
0000000000210ba3         db  0x00 ; '.'
0000000000210ba4         db  0x00 ; '.'
0000000000210ba5         db  0x00 ; '.'
0000000000210ba6         db  0x00 ; '.'
0000000000210ba7         db  0x00 ; '.'
0000000000210ba8         db  0x0c ; '.'
0000000000210ba9         db  0x00 ; '.'
0000000000210baa         db  0x00 ; '.'
0000000000210bab         db  0x00 ; '.'
0000000000210bac         db  0x00 ; '.'
0000000000210bad         db  0x00 ; '.'
0000000000210bae         db  0x00 ; '.'
0000000000210baf         db  0x00 ; '.'
0000000000210bb0         db  0x30 ; '0'
0000000000210bb1         db  0x1b ; '.'
0000000000210bb2         db  0x00 ; '.'
0000000000210bb3         db  0x00 ; '.'
0000000000210bb4         db  0x00 ; '.'
0000000000210bb5         db  0x00 ; '.'
0000000000210bb6         db  0x00 ; '.'
0000000000210bb7         db  0x00 ; '.'
0000000000210bb8         db  0x0d ; '.'
0000000000210bb9         db  0x00 ; '.'
0000000000210bba         db  0x00 ; '.'
0000000000210bbb         db  0x00 ; '.'
0000000000210bbc         db  0x00 ; '.'
0000000000210bbd         db  0x00 ; '.'
0000000000210bbe         db  0x00 ; '.'
0000000000210bbf         db  0x00 ; '.'
0000000000210bc0         db  0x40 ; '@'
0000000000210bc1         db  0xbe ; '.'
0000000000210bc2         db  0x00 ; '.'
0000000000210bc3         db  0x00 ; '.'
0000000000210bc4         db  0x00 ; '.'
0000000000210bc5         db  0x00 ; '.'
0000000000210bc6         db  0x00 ; '.'
0000000000210bc7         db  0x00 ; '.'
0000000000210bc8         db  0x19 ; '.'
0000000000210bc9         db  0x00 ; '.'
0000000000210bca         db  0x00 ; '.'
0000000000210bcb         db  0x00 ; '.'
0000000000210bcc         db  0x00 ; '.'
0000000000210bcd         db  0x00 ; '.'
0000000000210bce         db  0x00 ; '.'
0000000000210bcf         db  0x00 ; '.'
0000000000210bd0         db  0xd0 ; '.'
0000000000210bd1         db  0x07 ; '.'
0000000000210bd2         db  0x21 ; '!'
0000000000210bd3         db  0x00 ; '.'
0000000000210bd4         db  0x00 ; '.'
0000000000210bd5         db  0x00 ; '.'
0000000000210bd6         db  0x00 ; '.'
0000000000210bd7         db  0x00 ; '.'
0000000000210bd8         db  0x1b ; '.'
0000000000210bd9         db  0x00 ; '.'
0000000000210bda         db  0x00 ; '.'
0000000000210bdb         db  0x00 ; '.'
0000000000210bdc         db  0x00 ; '.'
0000000000210bdd         db  0x00 ; '.'
0000000000210bde         db  0x00 ; '.'
0000000000210bdf         db  0x00 ; '.'
0000000000210be0         db  0x08 ; '.'
0000000000210be1         db  0x00 ; '.'
0000000000210be2         db  0x00 ; '.'
0000000000210be3         db  0x00 ; '.'
0000000000210be4         db  0x00 ; '.'
0000000000210be5         db  0x00 ; '.'
0000000000210be6         db  0x00 ; '.'
0000000000210be7         db  0x00 ; '.'
0000000000210be8         db  0x1a ; '.'
0000000000210be9         db  0x00 ; '.'
0000000000210bea         db  0x00 ; '.'
0000000000210beb         db  0x00 ; '.'
0000000000210bec         db  0x00 ; '.'
0000000000210bed         db  0x00 ; '.'
0000000000210bee         db  0x00 ; '.'
0000000000210bef         db  0x00 ; '.'
0000000000210bf0         db  0xd8 ; '.'
0000000000210bf1         db  0x07 ; '.'
0000000000210bf2         db  0x21 ; '!'
0000000000210bf3         db  0x00 ; '.'
0000000000210bf4         db  0x00 ; '.'
0000000000210bf5         db  0x00 ; '.'
0000000000210bf6         db  0x00 ; '.'
0000000000210bf7         db  0x00 ; '.'
0000000000210bf8         db  0x1c ; '.'
0000000000210bf9         db  0x00 ; '.'
0000000000210bfa         db  0x00 ; '.'
0000000000210bfb         db  0x00 ; '.'
0000000000210bfc         db  0x00 ; '.'
0000000000210bfd         db  0x00 ; '.'
0000000000210bfe         db  0x00 ; '.'
0000000000210bff         db  0x00 ; '.'
0000000000210c00         db  0x08 ; '.'
0000000000210c01         db  0x00 ; '.'
0000000000210c02         db  0x00 ; '.'
0000000000210c03         db  0x00 ; '.'
0000000000210c04         db  0x00 ; '.'
0000000000210c05         db  0x00 ; '.'
0000000000210c06         db  0x00 ; '.'
0000000000210c07         db  0x00 ; '.'
0000000000210c08         db  0xf5 ; '.'
0000000000210c09         db  0xfe ; '.'
0000000000210c0a         db  0xff ; '.'
0000000000210c0b         db  0x6f ; 'o'
0000000000210c0c         db  0x00 ; '.'
0000000000210c0d         db  0x00 ; '.'
0000000000210c0e         db  0x00 ; '.'
0000000000210c0f         db  0x00 ; '.'
0000000000210c10         db  0x98 ; '.'
0000000000210c11         db  0x02 ; '.'
0000000000210c12         db  0x00 ; '.'
0000000000210c13         db  0x00 ; '.'
0000000000210c14         db  0x00 ; '.'
0000000000210c15         db  0x00 ; '.'
0000000000210c16         db  0x00 ; '.'
0000000000210c17         db  0x00 ; '.'
0000000000210c18         db  0x05 ; '.'
0000000000210c19         db  0x00 ; '.'
0000000000210c1a         db  0x00 ; '.'
0000000000210c1b         db  0x00 ; '.'
0000000000210c1c         db  0x00 ; '.'
0000000000210c1d         db  0x00 ; '.'
0000000000210c1e         db  0x00 ; '.'
0000000000210c1f         db  0x00 ; '.'
0000000000210c20         db  0xc0 ; '.'
0000000000210c21         db  0x0a ; '.'
0000000000210c22         db  0x00 ; '.'
0000000000210c23         db  0x00 ; '.'
0000000000210c24         db  0x00 ; '.'
0000000000210c25         db  0x00 ; '.'
0000000000210c26         db  0x00 ; '.'
0000000000210c27         db  0x00 ; '.'
0000000000210c28         db  0x06 ; '.'
0000000000210c29         db  0x00 ; '.'
0000000000210c2a         db  0x00 ; '.'
0000000000210c2b         db  0x00 ; '.'
0000000000210c2c         db  0x00 ; '.'
0000000000210c2d         db  0x00 ; '.'
0000000000210c2e         db  0x00 ; '.'
0000000000210c2f         db  0x00 ; '.'
0000000000210c30         db  0xe0 ; '.'
0000000000210c31         db  0x02 ; '.'
0000000000210c32         db  0x00 ; '.'
0000000000210c33         db  0x00 ; '.'
0000000000210c34         db  0x00 ; '.'
0000000000210c35         db  0x00 ; '.'
0000000000210c36         db  0x00 ; '.'
0000000000210c37         db  0x00 ; '.'
0000000000210c38         db  0x0a ; '.'
0000000000210c39         db  0x00 ; '.'
0000000000210c3a         db  0x00 ; '.'
0000000000210c3b         db  0x00 ; '.'
0000000000210c3c         db  0x00 ; '.'
0000000000210c3d         db  0x00 ; '.'
0000000000210c3e         db  0x00 ; '.'
0000000000210c3f         db  0x00 ; '.'
0000000000210c40         db  0xb3 ; '.'
0000000000210c41         db  0x03 ; '.'
0000000000210c42         db  0x00 ; '.'
0000000000210c43         db  0x00 ; '.'
0000000000210c44         db  0x00 ; '.'
0000000000210c45         db  0x00 ; '.'
0000000000210c46         db  0x00 ; '.'
0000000000210c47         db  0x00 ; '.'
0000000000210c48         db  0x0b ; '.'
0000000000210c49         db  0x00 ; '.'
0000000000210c4a         db  0x00 ; '.'
0000000000210c4b         db  0x00 ; '.'
0000000000210c4c         db  0x00 ; '.'
0000000000210c4d         db  0x00 ; '.'
0000000000210c4e         db  0x00 ; '.'
0000000000210c4f         db  0x00 ; '.'
0000000000210c50         db  0x18 ; '.'
0000000000210c51         db  0x00 ; '.'
0000000000210c52         db  0x00 ; '.'
0000000000210c53         db  0x00 ; '.'
0000000000210c54         db  0x00 ; '.'
0000000000210c55         db  0x00 ; '.'
0000000000210c56         db  0x00 ; '.'
0000000000210c57         db  0x00 ; '.'
0000000000210c58         db  0x15 ; '.'
0000000000210c59         db  0x00 ; '.'
0000000000210c5a         db  0x00 ; '.'
0000000000210c5b         db  0x00 ; '.'
0000000000210c5c         db  0x00 ; '.'
0000000000210c5d         db  0x00 ; '.'
0000000000210c5e         db  0x00 ; '.'
0000000000210c5f         db  0x00 ; '.'
0000000000210c60         db  0x00 ; '.'
0000000000210c61         db  0x00 ; '.'
0000000000210c62         db  0x00 ; '.'
0000000000210c63         db  0x00 ; '.'
0000000000210c64         db  0x00 ; '.'
0000000000210c65         db  0x00 ; '.'
0000000000210c66         db  0x00 ; '.'
0000000000210c67         db  0x00 ; '.'
0000000000210c68         db  0x03 ; '.'
0000000000210c69         db  0x00 ; '.'
0000000000210c6a         db  0x00 ; '.'
0000000000210c6b         db  0x00 ; '.'
0000000000210c6c         db  0x00 ; '.'
0000000000210c6d         db  0x00 ; '.'
0000000000210c6e         db  0x00 ; '.'
0000000000210c6f         db  0x00 ; '.'
0000000000210c70         db  0x88 ; '.'
0000000000210c71         db  0x0d ; '.'
0000000000210c72         db  0x21 ; '!'
0000000000210c73         db  0x00 ; '.'
0000000000210c74         db  0x00 ; '.'
0000000000210c75         db  0x00 ; '.'
0000000000210c76         db  0x00 ; '.'
0000000000210c77         db  0x00 ; '.'
0000000000210c78         db  0x02 ; '.'
0000000000210c79         db  0x00 ; '.'
0000000000210c7a         db  0x00 ; '.'
0000000000210c7b         db  0x00 ; '.'
0000000000210c7c         db  0x00 ; '.'
0000000000210c7d         db  0x00 ; '.'
0000000000210c7e         db  0x00 ; '.'
0000000000210c7f         db  0x00 ; '.'
0000000000210c80         db  0x78 ; 'x'
0000000000210c81         db  0x06 ; '.'
0000000000210c82         db  0x00 ; '.'
0000000000210c83         db  0x00 ; '.'
0000000000210c84         db  0x00 ; '.'
0000000000210c85         db  0x00 ; '.'
0000000000210c86         db  0x00 ; '.'
0000000000210c87         db  0x00 ; '.'
0000000000210c88         db  0x14 ; '.'
0000000000210c89         db  0x00 ; '.'
0000000000210c8a         db  0x00 ; '.'
0000000000210c8b         db  0x00 ; '.'
0000000000210c8c         db  0x00 ; '.'
0000000000210c8d         db  0x00 ; '.'
0000000000210c8e         db  0x00 ; '.'
0000000000210c8f         db  0x00 ; '.'
0000000000210c90         db  0x07 ; '.'
0000000000210c91         db  0x00 ; '.'
0000000000210c92         db  0x00 ; '.'
0000000000210c93         db  0x00 ; '.'
0000000000210c94         db  0x00 ; '.'
0000000000210c95         db  0x00 ; '.'
0000000000210c96         db  0x00 ; '.'
0000000000210c97         db  0x00 ; '.'
0000000000210c98         db  0x17 ; '.'
0000000000210c99         db  0x00 ; '.'
0000000000210c9a         db  0x00 ; '.'
0000000000210c9b         db  0x00 ; '.'
0000000000210c9c         db  0x00 ; '.'
0000000000210c9d         db  0x00 ; '.'
0000000000210c9e         db  0x00 ; '.'
0000000000210c9f         db  0x00 ; '.'
0000000000210ca0         db  0xb8 ; '.'
0000000000210ca1         db  0x14 ; '.'
0000000000210ca2         db  0x00 ; '.'
0000000000210ca3         db  0x00 ; '.'
0000000000210ca4         db  0x00 ; '.'
0000000000210ca5         db  0x00 ; '.'
0000000000210ca6         db  0x00 ; '.'
0000000000210ca7         db  0x00 ; '.'
0000000000210ca8         db  0x07 ; '.'
0000000000210ca9         db  0x00 ; '.'
0000000000210caa         db  0x00 ; '.'
0000000000210cab         db  0x00 ; '.'
0000000000210cac         db  0x00 ; '.'
0000000000210cad         db  0x00 ; '.'
0000000000210cae         db  0x00 ; '.'
0000000000210caf         db  0x00 ; '.'
0000000000210cb0         db  0x90 ; '.'
0000000000210cb1         db  0x0f ; '.'
0000000000210cb2         db  0x00 ; '.'
0000000000210cb3         db  0x00 ; '.'
0000000000210cb4         db  0x00 ; '.'
0000000000210cb5         db  0x00 ; '.'
0000000000210cb6         db  0x00 ; '.'
0000000000210cb7         db  0x00 ; '.'
0000000000210cb8         db  0x08 ; '.'
0000000000210cb9         db  0x00 ; '.'
0000000000210cba         db  0x00 ; '.'
0000000000210cbb         db  0x00 ; '.'
0000000000210cbc         db  0x00 ; '.'
0000000000210cbd         db  0x00 ; '.'
0000000000210cbe         db  0x00 ; '.'
0000000000210cbf         db  0x00 ; '.'
0000000000210cc0         db  0x28 ; '('
0000000000210cc1         db  0x05 ; '.'
0000000000210cc2         db  0x00 ; '.'
0000000000210cc3         db  0x00 ; '.'
0000000000210cc4         db  0x00 ; '.'
0000000000210cc5         db  0x00 ; '.'
0000000000210cc6         db  0x00 ; '.'
0000000000210cc7         db  0x00 ; '.'
0000000000210cc8         db  0x09 ; '.'
0000000000210cc9         db  0x00 ; '.'
0000000000210cca         db  0x00 ; '.'
0000000000210ccb         db  0x00 ; '.'
0000000000210ccc         db  0x00 ; '.'
0000000000210ccd         db  0x00 ; '.'
0000000000210cce         db  0x00 ; '.'
0000000000210ccf         db  0x00 ; '.'
0000000000210cd0         db  0x18 ; '.'
0000000000210cd1         db  0x00 ; '.'
0000000000210cd2         db  0x00 ; '.'
0000000000210cd3         db  0x00 ; '.'
0000000000210cd4         db  0x00 ; '.'
0000000000210cd5         db  0x00 ; '.'
0000000000210cd6         db  0x00 ; '.'
0000000000210cd7         db  0x00 ; '.'
0000000000210cd8         db  0x1e ; '.'
0000000000210cd9         db  0x00 ; '.'
0000000000210cda         db  0x00 ; '.'
0000000000210cdb         db  0x00 ; '.'
0000000000210cdc         db  0x00 ; '.'
0000000000210cdd         db  0x00 ; '.'
0000000000210cde         db  0x00 ; '.'
0000000000210cdf         db  0x00 ; '.'
0000000000210ce0         db  0x08 ; '.'
0000000000210ce1         db  0x00 ; '.'
0000000000210ce2         db  0x00 ; '.'
0000000000210ce3         db  0x00 ; '.'
0000000000210ce4         db  0x00 ; '.'
0000000000210ce5         db  0x00 ; '.'
0000000000210ce6         db  0x00 ; '.'
0000000000210ce7         db  0x00 ; '.'
0000000000210ce8         db  0xfb ; '.'
0000000000210ce9         db  0xff ; '.'
0000000000210cea         db  0xff ; '.'
0000000000210ceb         db  0x6f ; 'o'
0000000000210cec         db  0x00 ; '.'
0000000000210ced         db  0x00 ; '.'
0000000000210cee         db  0x00 ; '.'
0000000000210cef         db  0x00 ; '.'
0000000000210cf0         db  0x01 ; '.'
0000000000210cf1         db  0x00 ; '.'
0000000000210cf2         db  0x00 ; '.'
0000000000210cf3         db  0x08 ; '.'
0000000000210cf4         db  0x00 ; '.'
0000000000210cf5         db  0x00 ; '.'
0000000000210cf6         db  0x00 ; '.'
0000000000210cf7         db  0x00 ; '.'
0000000000210cf8         db  0xfe ; '.'
0000000000210cf9         db  0xff ; '.'
0000000000210cfa         db  0xff ; '.'
0000000000210cfb         db  0x6f ; 'o'
0000000000210cfc         db  0x00 ; '.'
0000000000210cfd         db  0x00 ; '.'
0000000000210cfe         db  0x00 ; '.'
0000000000210cff         db  0x00 ; '.'
0000000000210d00         db  0x20 ; ' '
0000000000210d01         db  0x0f ; '.'
0000000000210d02         db  0x00 ; '.'
0000000000210d03         db  0x00 ; '.'
0000000000210d04         db  0x00 ; '.'
0000000000210d05         db  0x00 ; '.'
0000000000210d06         db  0x00 ; '.'
0000000000210d07         db  0x00 ; '.'
0000000000210d08         db  0xff ; '.'
0000000000210d09         db  0xff ; '.'
0000000000210d0a         db  0xff ; '.'
0000000000210d0b         db  0x6f ; 'o'
0000000000210d0c         db  0x00 ; '.'
0000000000210d0d         db  0x00 ; '.'
0000000000210d0e         db  0x00 ; '.'
0000000000210d0f         db  0x00 ; '.'
0000000000210d10         db  0x01 ; '.'
0000000000210d11         db  0x00 ; '.'
0000000000210d12         db  0x00 ; '.'
0000000000210d13         db  0x00 ; '.'
0000000000210d14         db  0x00 ; '.'
0000000000210d15         db  0x00 ; '.'
0000000000210d16         db  0x00 ; '.'
0000000000210d17         db  0x00 ; '.'
0000000000210d18         db  0xf0 ; '.'
0000000000210d19         db  0xff ; '.'
0000000000210d1a         db  0xff ; '.'
0000000000210d1b         db  0x6f ; 'o'
0000000000210d1c         db  0x00 ; '.'
0000000000210d1d         db  0x00 ; '.'
0000000000210d1e         db  0x00 ; '.'
0000000000210d1f         db  0x00 ; '.'
0000000000210d20         db  0x74 ; 't'
0000000000210d21         db  0x0e ; '.'
0000000000210d22         db  0x00 ; '.'
0000000000210d23         db  0x00 ; '.'
0000000000210d24         db  0x00 ; '.'
0000000000210d25         db  0x00 ; '.'
0000000000210d26         db  0x00 ; '.'
0000000000210d27         db  0x00 ; '.'
0000000000210d28         db  0xf9 ; '.'
0000000000210d29         db  0xff ; '.'
0000000000210d2a         db  0xff ; '.'
0000000000210d2b         db  0x6f ; 'o'
0000000000210d2c         db  0x00 ; '.'
0000000000210d2d         db  0x00 ; '.'
0000000000210d2e         db  0x00 ; '.'
0000000000210d2f         db  0x00 ; '.'
0000000000210d30         db  0x2b ; '+'
0000000000210d31         db  0x00 ; '.'
0000000000210d32         db  0x00 ; '.'
0000000000210d33         db  0x00 ; '.'
0000000000210d34         db  0x00 ; '.'
0000000000210d35         db  0x00 ; '.'
0000000000210d36         db  0x00 ; '.'
0000000000210d37         db  0x00 ; '.'
0000000000210d38         db  0x00 ; '.'
0000000000210d39         db  0x00 ; '.'
0000000000210d3a         db  0x00 ; '.'
0000000000210d3b         db  0x00 ; '.'
0000000000210d3c         db  0x00 ; '.'
0000000000210d3d         db  0x00 ; '.'
0000000000210d3e         db  0x00 ; '.'
0000000000210d3f         db  0x00 ; '.'
0000000000210d40         db  0x00 ; '.'
0000000000210d41         db  0x00 ; '.'
0000000000210d42         db  0x00 ; '.'
0000000000210d43         db  0x00 ; '.'
0000000000210d44         db  0x00 ; '.'
0000000000210d45         db  0x00 ; '.'
0000000000210d46         db  0x00 ; '.'
0000000000210d47         db  0x00 ; '.'
0000000000210d48         db  0x00 ; '.'
0000000000210d49         db  0x00 ; '.'
0000000000210d4a         db  0x00 ; '.'
0000000000210d4b         db  0x00 ; '.'
0000000000210d4c         db  0x00 ; '.'
0000000000210d4d         db  0x00 ; '.'
0000000000210d4e         db  0x00 ; '.'
0000000000210d4f         db  0x00 ; '.'
0000000000210d50         db  0x00 ; '.'
0000000000210d51         db  0x00 ; '.'
0000000000210d52         db  0x00 ; '.'
0000000000210d53         db  0x00 ; '.'
0000000000210d54         db  0x00 ; '.'
0000000000210d55         db  0x00 ; '.'
0000000000210d56         db  0x00 ; '.'
0000000000210d57         db  0x00 ; '.'
0000000000210d58         db  0x00 ; '.'
0000000000210d59         db  0x00 ; '.'
0000000000210d5a         db  0x00 ; '.'
0000000000210d5b         db  0x00 ; '.'
0000000000210d5c         db  0x00 ; '.'
0000000000210d5d         db  0x00 ; '.'
0000000000210d5e         db  0x00 ; '.'
0000000000210d5f         db  0x00 ; '.'
0000000000210d60         db  0x00 ; '.'
0000000000210d61         db  0x00 ; '.'
0000000000210d62         db  0x00 ; '.'
0000000000210d63         db  0x00 ; '.'
0000000000210d64         db  0x00 ; '.'
0000000000210d65         db  0x00 ; '.'
0000000000210d66         db  0x00 ; '.'
0000000000210d67         db  0x00 ; '.'
0000000000210d68         db  0x00 ; '.'
0000000000210d69         db  0x00 ; '.'
0000000000210d6a         db  0x00 ; '.'
0000000000210d6b         db  0x00 ; '.'
0000000000210d6c         db  0x00 ; '.'
0000000000210d6d         db  0x00 ; '.'
0000000000210d6e         db  0x00 ; '.'
0000000000210d6f         db  0x00 ; '.'
0000000000210d70         db  0x00 ; '.'
0000000000210d71         db  0x00 ; '.'
0000000000210d72         db  0x00 ; '.'
0000000000210d73         db  0x00 ; '.'
0000000000210d74         db  0x00 ; '.'
0000000000210d75         db  0x00 ; '.'
0000000000210d76         db  0x00 ; '.'
0000000000210d77         db  0x00 ; '.'
0000000000210d78         db  0x00 ; '.'
0000000000210d79         db  0x00 ; '.'
0000000000210d7a         db  0x00 ; '.'
0000000000210d7b         db  0x00 ; '.'
0000000000210d7c         db  0x00 ; '.'
0000000000210d7d         db  0x00 ; '.'
0000000000210d7e         db  0x00 ; '.'
0000000000210d7f         db  0x00 ; '.'
0000000000210d80         db  0x00 ; '.'
0000000000210d81         db  0x00 ; '.'
0000000000210d82         db  0x00 ; '.'
0000000000210d83         db  0x00 ; '.'
0000000000210d84         db  0x00 ; '.'
0000000000210d85         db  0x00 ; '.'
0000000000210d86         db  0x00 ; '.'
0000000000210d87         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x210d88; 0x210ff0[ (616 bytes)
        ; File offset : [69000; 69616[ (616 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
0000000000210d88         db  0x98 ; '.'
0000000000210d89         db  0x0b ; '.'
0000000000210d8a         db  0x21 ; '!'
0000000000210d8b         db  0x00 ; '.'
0000000000210d8c         db  0x00 ; '.'
0000000000210d8d         db  0x00 ; '.'
0000000000210d8e         db  0x00 ; '.'
0000000000210d8f         db  0x00 ; '.'
                     qword_210d90:
0000000000210d90         dq         0x0000000000000000                          ; DATA XREF=0x1b50
0000000000210d98         db  0x00 ; '.'                                         ; DATA XREF=0x1b56
0000000000210d99         db  0x00 ; '.'
0000000000210d9a         db  0x00 ; '.'
0000000000210d9b         db  0x00 ; '.'
0000000000210d9c         db  0x00 ; '.'
0000000000210d9d         db  0x00 ; '.'
0000000000210d9e         db  0x00 ; '.'
0000000000210d9f         db  0x00 ; '.'
                     __ctype_toupper_loc@GOT:        // __ctype_toupper_loc
0000000000210da0         dq         0x00000000002113b0                          ; DATA XREF=j___ctype_toupper_loc
                     __uflow@GOT:        // __uflow
0000000000210da8         dq         0x00000000002113b8                          ; DATA XREF=j___uflow
                     getenv@GOT:        // getenv
0000000000210db0         dq         0x00000000002113c0                          ; DATA XREF=j_getenv
                     free@GOT:        // free
0000000000210db8         dq         0x00000000002113c8                          ; DATA XREF=j_free
                     abort@GOT:        // abort
0000000000210dc0         dq         0x00000000002113d0                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
0000000000210dc8         dq         0x00000000002113d8                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
0000000000210dd0         dq         0x00000000002113e0                          ; DATA XREF=j_strncmp
                     localtime_r@GOT:        // localtime_r
0000000000210dd8         dq         0x00000000002113f0                          ; DATA XREF=j_localtime_r
                     _exit@GOT:        // _exit
0000000000210de0         dq         0x00000000002113f8                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
0000000000210de8         dq         0x0000000000211400                          ; DATA XREF=j___fpending
                     iswcntrl@GOT:        // iswcntrl
0000000000210df0         dq         0x0000000000211408                          ; DATA XREF=j_iswcntrl
                     fcntl@GOT:        // fcntl
0000000000210df8         dq         0x0000000000211410                          ; DATA XREF=j_fcntl
                     clock_gettime@GOT:        // clock_gettime
0000000000210e00         dq         0x0000000000211418                          ; DATA XREF=j_clock_gettime
                     setenv@GOT:        // setenv
0000000000210e08         dq         0x0000000000211420                          ; DATA XREF=j_setenv
                     textdomain@GOT:        // textdomain
0000000000210e10         dq         0x0000000000211428                          ; DATA XREF=j_textdomain
                     __strtol_internal@GOT:        // __strtol_internal
0000000000210e18         dq         0x0000000000211430                          ; DATA XREF=j___strtol_internal
                     fclose@GOT:        // fclose
0000000000210e20         dq         0x0000000000211438                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
0000000000210e28         dq         0x0000000000211440                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
0000000000210e30         dq         0x0000000000211448                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
0000000000210e38         dq         0x0000000000211450                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
0000000000210e40         dq         0x0000000000211458                          ; DATA XREF=j_strlen
                     __stack_chk_fail@GOT:        // __stack_chk_fail
0000000000210e48         dq         0x0000000000211460                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
0000000000210e50         dq         0x0000000000211468                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
0000000000210e58         dq         0x0000000000211470                          ; DATA XREF=j_mbrtowc
                     strchr@GOT:        // strchr
0000000000210e60         dq         0x0000000000211478                          ; DATA XREF=j_strchr
                     __overflow@GOT:        // __overflow
0000000000210e68         dq         0x0000000000211480                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
0000000000210e70         dq         0x0000000000211488                          ; DATA XREF=j_strrchr
                     gmtime_r@GOT:        // gmtime_r
0000000000210e78         dq         0x0000000000211490                          ; DATA XREF=j_gmtime_r
                     lseek@GOT:        // lseek
0000000000210e80         dq         0x0000000000211498                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
0000000000210e88         dq         0x00000000002114a0                          ; DATA XREF=j___assert_fail
                     __strtoul_internal@GOT:        // __strtoul_internal
0000000000210e90         dq         0x00000000002114a8                          ; DATA XREF=j___strtoul_internal
                     memset@GOT:        // memset
0000000000210e98         dq         0x00000000002114b0                          ; DATA XREF=j_memset
                     close@GOT:        // close
0000000000210ea0         dq         0x00000000002114b8                          ; DATA XREF=j_close
                     posix_fadvise@GOT:        // posix_fadvise
0000000000210ea8         dq         0x00000000002114c0                          ; DATA XREF=j_posix_fadvise
                     memcmp@GOT:        // memcmp
0000000000210eb0         dq         0x00000000002114d0                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
0000000000210eb8         dq         0x00000000002114d8                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
0000000000210ec0         dq         0x00000000002114e0                          ; DATA XREF=j_calloc
                     strcmp@GOT:        // strcmp
0000000000210ec8         dq         0x00000000002114e8                          ; DATA XREF=j_strcmp
                     strtol@GOT:        // strtol
0000000000210ed0         dq         0x00000000002114f8                          ; DATA XREF=j_strtol
                     memcpy@GOT:        // memcpy
0000000000210ed8         dq         0x0000000000211500                          ; DATA XREF=j_memcpy
                     tzset@GOT:        // tzset
0000000000210ee0         dq         0x0000000000211508                          ; DATA XREF=j_tzset
                     fileno@GOT:        // fileno
0000000000210ee8         dq         0x0000000000211510                          ; DATA XREF=j_fileno
                     wcwidth@GOT:        // wcwidth
0000000000210ef0         dq         0x0000000000211518                          ; DATA XREF=j_wcwidth
                     malloc@GOT:        // malloc
0000000000210ef8         dq         0x0000000000211520                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
0000000000210f00         dq         0x0000000000211528                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
0000000000210f08         dq         0x0000000000211530                          ; DATA XREF=j_nl_langinfo
                     ungetc@GOT:        // ungetc
0000000000210f10         dq         0x0000000000211538                          ; DATA XREF=j_ungetc
                     __fxstat@GOT:        // __fxstat
0000000000210f18         dq         0x0000000000211540                          ; DATA XREF=j___fxstat
                     mktime@GOT:        // mktime
0000000000210f20         dq         0x0000000000211548                          ; DATA XREF=j_mktime
                     __freading@GOT:        // __freading
0000000000210f28         dq         0x0000000000211550                          ; DATA XREF=j___freading
                     realloc@GOT:        // realloc
0000000000210f30         dq         0x0000000000211558                          ; DATA XREF=j_realloc
                     fdopen@GOT:        // fdopen
0000000000210f38         dq         0x0000000000211560                          ; DATA XREF=j_fdopen
                     setlocale@GOT:        // setlocale
0000000000210f40         dq         0x0000000000211568                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
0000000000210f48         dq         0x0000000000211570                          ; DATA XREF=j___printf_chk
                     timegm@GOT:        // timegm
0000000000210f50         dq         0x0000000000211578                          ; DATA XREF=j_timegm
                     strftime@GOT:        // strftime
0000000000210f58         dq         0x0000000000211580                          ; DATA XREF=j_strftime
                     error@GOT:        // error
0000000000210f60         dq         0x0000000000211588                          ; DATA XREF=j_error
                     fseeko@GOT:        // fseeko
0000000000210f68         dq         0x0000000000211590                          ; DATA XREF=j_fseeko
                     fopen@GOT:        // fopen
0000000000210f70         dq         0x0000000000211598                          ; DATA XREF=j_fopen
                     unsetenv@GOT:        // unsetenv
0000000000210f78         dq         0x00000000002115a0                          ; DATA XREF=j_unsetenv
                     __cxa_atexit@GOT:        // __cxa_atexit
0000000000210f80         dq         0x00000000002115a8                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
0000000000210f88         dq         0x00000000002115b0                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
0000000000210f90         dq         0x00000000002115b8                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
0000000000210f98         dq         0x00000000002115c0                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
0000000000210fa0         dq         0x00000000002115d0                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
0000000000210fa8         dq         0x00000000002115d8                          ; DATA XREF=j_iswprint
                     __ctype_tolower_loc@GOT:        // __ctype_tolower_loc
0000000000210fb0         dq         0x00000000002115e8                          ; DATA XREF=j___ctype_tolower_loc
                     __ctype_b_loc@GOT:        // __ctype_b_loc
0000000000210fb8         dq         0x00000000002115f0                          ; DATA XREF=j___ctype_b_loc
                     __sprintf_chk@GOT:        // __sprintf_chk
0000000000210fc0         dq         0x00000000002115f8                          ; DATA XREF=j___sprintf_chk
                     qword_210fc8:
0000000000210fc8         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
0000000000210fd0         db  0x00 ; '.'                                         ; DATA XREF=_start+36
0000000000210fd1         db  0x00 ; '.'
0000000000210fd2         db  0x00 ; '.'
0000000000210fd3         db  0x00 ; '.'
0000000000210fd4         db  0x00 ; '.'
0000000000210fd5         db  0x00 ; '.'
0000000000210fd6         db  0x00 ; '.'
0000000000210fd7         db  0x00 ; '.'
                     qword_210fd8:
0000000000210fd8         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_210fe0:
0000000000210fe0         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_210fe8:
0000000000210fe8         dq         0x0000000000000000                          ; DATA XREF=j_qword_210fe8, __do_global_dtors_aux+9
0000000000210ff0         db  0x00 ; '.'
0000000000210ff1         db  0x00 ; '.'
0000000000210ff2         db  0x00 ; '.'
0000000000210ff3         db  0x00 ; '.'
0000000000210ff4         db  0x00 ; '.'
0000000000210ff5         db  0x00 ; '.'
0000000000210ff6         db  0x00 ; '.'
0000000000210ff7         db  0x00 ; '.'
0000000000210ff8         db  0x00 ; '.'
0000000000210ff9         db  0x00 ; '.'
0000000000210ffa         db  0x00 ; '.'
0000000000210ffb         db  0x00 ; '.'
0000000000210ffc         db  0x00 ; '.'
0000000000210ffd         db  0x00 ; '.'
0000000000210ffe         db  0x00 ; '.'
0000000000210fff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x211000; 0x2110e0[ (224 bytes)
        ; File offset : [69632; 69856[ (224 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

0000000000211000         db  0x00 ; '.'
0000000000211001         db  0x00 ; '.'
0000000000211002         db  0x00 ; '.'
0000000000211003         db  0x00 ; '.'
0000000000211004         db  0x00 ; '.'
0000000000211005         db  0x00 ; '.'
0000000000211006         db  0x00 ; '.'
0000000000211007         db  0x00 ; '.'
                     __dso_handle:
0000000000211008         dq         0x0000000000211008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     chars_per_number:
0000000000211010         dd         0x00000005                                  ; DATA XREF=main+1174, add_line_number.isra.2+17, add_line_number.isra.2+54, add_line_number.isra.2+225, print_files+257, print_files+359, print_files+371
                     start_line_num:
0000000000211014         dd         0x00000001                                  ; DATA XREF=main+1706, print_files+245
                     skip_count:
0000000000211018         db         0x01                                        ; DATA XREF=main+1655, skip_read+118
0000000000211019         align      4
                     line_count:
000000000021101c         dd         0x00000001                                  ; DATA XREF=skip_read+147, print_files+251, print_files+1342
                     number_separator:
0000000000211020         db         0x09                                        ; DATA XREF=main+1181, add_line_number.isra.2+119, add_line_number.isra.2+131, print_files+238
0000000000211021         align      8
                     last_page_number:
0000000000211028         dq         0xffffffffffffffff                          ; DATA XREF=first_last_page+133, print_files+2051
                     columns:
0000000000211030         dd         0x00000001                                  ; DATA XREF=cols_ready_to_print, reset_status, parse_column_count+61, print_stored+224, hold_file.isra.1+9, add_line_number.isra.2+112, close_file.part.4+34, skip_read+312, print_files+95, print_files+464, print_files+576
                     chars_per_output_tab:
0000000000211034         dd         0x00000008                                  ; DATA XREF=main+1305, print_white_space+32, add_line_number.isra.2+146
                     output_tab_char:
0000000000211038         db         0x09                                        ; DATA XREF=main+1312, print_white_space+60
0000000000211039         align      4
                     chars_per_input_tab:
000000000021103c         dd         0x00000008                                  ; DATA XREF=main+1376, char_to_clump+17, print_files+408, print_files+420
                     input_tab_char:
0000000000211040         db         0x09                                        ; DATA XREF=main+1383, char_to_clump+39
0000000000211041         align      4
                     chars_per_line:
0000000000211044         dd         0x00000048                                  ; DATA XREF=main+954, main+1545, init_header+271, print_files+309
                     lines_per_page:
0000000000211048         dd         0x00000042                                  ; DATA XREF=main+1282, print_files+20
                     storing_columns:
000000000021104c         db         0x01                                        ; DATA XREF=main+1212, main+1463, cols_ready_to_print+17, reset_status+81, hold_file.isra.1+29, read_line+140, read_line+724, print_files+108, print_files+890, print_files+1011, print_files+1194
                     extremities:
000000000021104d         db         0x01                                        ; DATA XREF=main+991, main+1556, print_stored+290, print_files+43, print_files+659, print_files+1448, print_files+1970, print_files+2536
000000000021104e         align      16
                     col_sep_string:
0000000000211050         dq         0x000000000000bee5                          ; DATA XREF=main+1613, separator_string+17, print_sep_string+29, print_files+168, print_files+707, print_files+730, print_files+1219
                     Version:
0000000000211058         dq         0x000000000000d835                          ; "8.31", DATA XREF=main+1830
                     exit_failure:
0000000000211060         dd         0x00000001                                  ; DATA XREF=close_stdout+130, xalloc_die+23, xstrtol_fatal+35
0000000000211064         db  0x00 ; '.'
0000000000211065         db  0x00 ; '.'
0000000000211066         db  0x00 ; '.'
0000000000211067         db  0x00 ; '.'
0000000000211068         db  0x00 ; '.'
0000000000211069         db  0x00 ; '.'
000000000021106a         db  0x00 ; '.'
000000000021106b         db  0x00 ; '.'
000000000021106c         db  0x00 ; '.'
000000000021106d         db  0x00 ; '.'
000000000021106e         db  0x00 ; '.'
000000000021106f         db  0x00 ; '.'
0000000000211070         db  0x00 ; '.'
0000000000211071         db  0x00 ; '.'
0000000000211072         db  0x00 ; '.'
0000000000211073         db  0x00 ; '.'
0000000000211074         db  0x00 ; '.'
0000000000211075         db  0x00 ; '.'
0000000000211076         db  0x00 ; '.'
0000000000211077         db  0x00 ; '.'
0000000000211078         db  0x00 ; '.'
0000000000211079         db  0x00 ; '.'
000000000021107a         db  0x00 ; '.'
000000000021107b         db  0x00 ; '.'
000000000021107c         db  0x00 ; '.'
000000000021107d         db  0x00 ; '.'
000000000021107e         db  0x00 ; '.'
000000000021107f         db  0x00 ; '.'
                     quote_quoting_options:
0000000000211080         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
0000000000211081         db  0x00 ; '.'
0000000000211082         db  0x00 ; '.'
0000000000211083         db  0x00 ; '.'
0000000000211084         db  0x00 ; '.'
0000000000211085         db  0x00 ; '.'
0000000000211086         db  0x00 ; '.'
0000000000211087         db  0x00 ; '.'
0000000000211088         db  0x00 ; '.'
0000000000211089         db  0x00 ; '.'
000000000021108a         db  0x00 ; '.'
000000000021108b         db  0x00 ; '.'
000000000021108c         db  0x00 ; '.'
000000000021108d         db  0x00 ; '.'
000000000021108e         db  0x00 ; '.'
000000000021108f         db  0x00 ; '.'
0000000000211090         db  0x00 ; '.'
0000000000211091         db  0x00 ; '.'
0000000000211092         db  0x00 ; '.'
0000000000211093         db  0x00 ; '.'
0000000000211094         db  0x00 ; '.'
0000000000211095         db  0x00 ; '.'
0000000000211096         db  0x00 ; '.'
0000000000211097         db  0x00 ; '.'
0000000000211098         db  0x00 ; '.'
0000000000211099         db  0x00 ; '.'
000000000021109a         db  0x00 ; '.'
000000000021109b         db  0x00 ; '.'
000000000021109c         db  0x00 ; '.'
000000000021109d         db  0x00 ; '.'
000000000021109e         db  0x00 ; '.'
000000000021109f         db  0x00 ; '.'
00000000002110a0         db  0x00 ; '.'
00000000002110a1         db  0x00 ; '.'
00000000002110a2         db  0x00 ; '.'
00000000002110a3         db  0x00 ; '.'
00000000002110a4         db  0x00 ; '.'
00000000002110a5         db  0x00 ; '.'
00000000002110a6         db  0x00 ; '.'
00000000002110a7         db  0x00 ; '.'
00000000002110a8         db  0x00 ; '.'
00000000002110a9         db  0x00 ; '.'
00000000002110aa         db  0x00 ; '.'
00000000002110ab         db  0x00 ; '.'
00000000002110ac         db  0x00 ; '.'
00000000002110ad         db  0x00 ; '.'
00000000002110ae         db  0x00 ; '.'
00000000002110af         db  0x00 ; '.'
00000000002110b0         db  0x00 ; '.'
00000000002110b1         db  0x00 ; '.'
00000000002110b2         db  0x00 ; '.'
00000000002110b3         db  0x00 ; '.'
00000000002110b4         db  0x00 ; '.'
00000000002110b5         db  0x00 ; '.'
00000000002110b6         db  0x00 ; '.'
00000000002110b7         db  0x00 ; '.'
                     nslots:
00000000002110b8         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
00000000002110bc         align      64
                     slotvec:
00000000002110c0         dq         0x00000000002110d0                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
00000000002110c8         db  0x00 ; '.'
00000000002110c9         db  0x00 ; '.'
00000000002110ca         db  0x00 ; '.'
00000000002110cb         db  0x00 ; '.'
00000000002110cc         db  0x00 ; '.'
00000000002110cd         db  0x00 ; '.'
00000000002110ce         db  0x00 ; '.'
00000000002110cf         db  0x00 ; '.'
                     slotvec0:
00000000002110d0         dq         1.26481e-321, 1.07083e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x2110e0; 0x2113a0[ (704 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
00000000002110e0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
00000000002110e1         db  0x00 ; '.'
00000000002110e2         db  0x00 ; '.'
00000000002110e3         db  0x00 ; '.'
00000000002110e4         db  0x00 ; '.'
00000000002110e5         db  0x00 ; '.'
00000000002110e6         db  0x00 ; '.'
00000000002110e7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
00000000002110e8         db  0x00 ; '.'                                         ; DATA XREF=main+1823, pad_across_to+30, print_white_space+53, print_white_space+108, print_sep_string+95, print_char+64, print_files+1784, print_files+1847, print_files+2001, print_files+2933, print_files+3809
00000000002110e9         db  0x00 ; '.'
00000000002110ea         db  0x00 ; '.'
00000000002110eb         db  0x00 ; '.'
00000000002110ec         db  0x00 ; '.'
00000000002110ed         db  0x00 ; '.'
00000000002110ee         db  0x00 ; '.'
00000000002110ef         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
00000000002110f0         db  0x00 ; '.'                                         ; DATA XREF=main+2090, open_file+57, print_files+3643
00000000002110f1         db  0x00 ; '.'
00000000002110f2         db  0x00 ; '.'
00000000002110f3         db  0x00 ; '.'
00000000002110f4         db  0x00 ; '.'
00000000002110f5         db  0x00 ; '.'
00000000002110f6         db  0x00 ; '.'
00000000002110f7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
00000000002110f8         db  0x00 ; '.'                                         ; DATA XREF=main+534, main+600
00000000002110f9         db  0x00 ; '.'
00000000002110fa         db  0x00 ; '.'
00000000002110fb         db  0x00 ; '.'
00000000002110fc         db  0x00 ; '.'
00000000002110fd         db  0x00 ; '.'
00000000002110fe         db  0x00 ; '.'
00000000002110ff         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
0000000000211100         db  0x00 ; '.'                                         ; DATA XREF=main+797, main+839, main+897, main+1035, main+1108, main+1151, main+1247, main+1293, main+1343, main+1364, main+1505
0000000000211101         db  0x00 ; '.'
0000000000211102         db  0x00 ; '.'
0000000000211103         db  0x00 ; '.'
0000000000211104         db  0x00 ; '.'
0000000000211105         db  0x00 ; '.'
0000000000211106         db  0x00 ; '.'
0000000000211107         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
0000000000211108         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
0000000000211109         db  0x00 ; '.'
000000000021110a         db  0x00 ; '.'
000000000021110b         db  0x00 ; '.'
000000000021110c         db  0x00 ; '.'
000000000021110d         db  0x00 ; '.'
000000000021110e         db  0x00 ; '.'
000000000021110f         db  0x00 ; '.'
0000000000211110         db  0x00 ; '.'
0000000000211111         db  0x00 ; '.'
0000000000211112         db  0x00 ; '.'
0000000000211113         db  0x00 ; '.'
0000000000211114         db  0x00 ; '.'
0000000000211115         db  0x00 ; '.'
0000000000211116         db  0x00 ; '.'
0000000000211117         db  0x00 ; '.'
0000000000211118         db  0x00 ; '.'
0000000000211119         db  0x00 ; '.'
000000000021111a         db  0x00 ; '.'
000000000021111b         db  0x00 ; '.'
000000000021111c         db  0x00 ; '.'
000000000021111d         db  0x00 ; '.'
000000000021111e         db  0x00 ; '.'
000000000021111f         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
0000000000211120         db  0x00 ; '.'                                         ; DATA XREF=usage+61, close_stdout+44, set_program_name+125
0000000000211121         db  0x00 ; '.'
0000000000211122         db  0x00 ; '.'
0000000000211123         db  0x00 ; '.'
0000000000211124         db  0x00 ; '.'
0000000000211125         db  0x00 ; '.'
0000000000211126         db  0x00 ; '.'
0000000000211127         db  0x00 ; '.'
                     completed.7697:
0000000000211128         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
0000000000211129         db  0x00 ; '.'
000000000021112a         db  0x00 ; '.'
000000000021112b         db  0x00 ; '.'
000000000021112c         db  0x00 ; '.'
000000000021112d         db  0x00 ; '.'
000000000021112e         db  0x00 ; '.'
000000000021112f         db  0x00 ; '.'
                     timespec.7349:
0000000000211130         db  0x00 ; '.'                                         ; DATA XREF=init_header+81, init_header+95, init_header+360, init_header+380
0000000000211131         db  0x00 ; '.'
0000000000211132         db  0x00 ; '.'
0000000000211133         db  0x00 ; '.'
0000000000211134         db  0x00 ; '.'
0000000000211135         db  0x00 ; '.'
0000000000211136         db  0x00 ; '.'
0000000000211137         db  0x00 ; '.'
0000000000211138         db  0x00 ; '.'
0000000000211139         db  0x00 ; '.'
000000000021113a         db  0x00 ; '.'
000000000021113b         db  0x00 ; '.'
000000000021113c         db  0x00 ; '.'
000000000021113d         db  0x00 ; '.'
000000000021113e         db  0x00 ; '.'
000000000021113f         db  0x00 ; '.'
                     last_line:
0000000000211140         db  0x00 ; '.'                                         ; DATA XREF=skip_read+60, skip_read+288, skip_read+416, print_files+3101, print_files+3240
0000000000211141         db  0x00 ; '.'
0000000000211142         db  0x00 ; '.'
0000000000211143         db  0x00 ; '.'
0000000000211144         db  0x00 ; '.'
0000000000211145         db  0x00 ; '.'
0000000000211146         db  0x00 ; '.'
0000000000211147         db  0x00 ; '.'
                     clump_buff:
0000000000211148         db  0x00 ; '.'                                         ; DATA XREF=main+682, char_to_clump+10, read_line+426, read_line+548, print_files+396, print_files+442
0000000000211149         db  0x00 ; '.'
000000000021114a         db  0x00 ; '.'
000000000021114b         db  0x00 ; '.'
000000000021114c         db  0x00 ; '.'
000000000021114d         db  0x00 ; '.'
000000000021114e         db  0x00 ; '.'
000000000021114f         db  0x00 ; '.'
                     header_width_available:
0000000000211150         db  0x00 ; '.'                                         ; DATA XREF=init_header+327, print_header+118
0000000000211151         db  0x00 ; '.'
0000000000211152         db  0x00 ; '.'
0000000000211153         db  0x00 ; '.'
0000000000211154         db  0x00 ; '.'
0000000000211155         db  0x00 ; '.'
0000000000211156         db  0x00 ; '.'
0000000000211157         db  0x00 ; '.'
                     file_text:
0000000000211158         db  0x00 ; '.'                                         ; DATA XREF=init_header+280, init_header+292, print_header+199
0000000000211159         db  0x00 ; '.'
000000000021115a         db  0x00 ; '.'
000000000021115b         db  0x00 ; '.'
000000000021115c         db  0x00 ; '.'
000000000021115d         db  0x00 ; '.'
000000000021115e         db  0x00 ; '.'
000000000021115f         db  0x00 ; '.'
                     date_text:
0000000000211160         db  0x00 ; '.'                                         ; DATA XREF=init_header+224, init_header+243, print_header+134
0000000000211161         db  0x00 ; '.'
0000000000211162         db  0x00 ; '.'
0000000000211163         db  0x00 ; '.'
0000000000211164         db  0x00 ; '.'
0000000000211165         db  0x00 ; '.'
0000000000211166         db  0x00 ; '.'
0000000000211167         db  0x00 ; '.'
                     localtz:
0000000000211168         db  0x00 ; '.'                                         ; DATA XREF=main+419, init_header+120, init_header+144, init_header+190
0000000000211169         db  0x00 ; '.'
000000000021116a         db  0x00 ; '.'
000000000021116b         db  0x00 ; '.'
000000000021116c         db  0x00 ; '.'
000000000021116d         db  0x00 ; '.'
000000000021116e         db  0x00 ; '.'
000000000021116f         db  0x00 ; '.'
                     date_format:
0000000000211170         db  0x00 ; '.'                                         ; DATA XREF=main+377, main+1754, main+2030, init_header+151, init_header+197
0000000000211171         db  0x00 ; '.'
0000000000211172         db  0x00 ; '.'
0000000000211173         db  0x00 ; '.'
0000000000211174         db  0x00 ; '.'
0000000000211175         db  0x00 ; '.'
0000000000211176         db  0x00 ; '.'
0000000000211177         db  0x00 ; '.'
                     custom_header:
0000000000211178         db  0x00 ; '.'                                         ; DATA XREF=main+1352, init_header+236
0000000000211179         db  0x00 ; '.'
000000000021117a         db  0x00 ; '.'
000000000021117b         db  0x00 ; '.'
000000000021117c         db  0x00 ; '.'
000000000021117d         db  0x00 ; '.'
000000000021117e         db  0x00 ; '.'
000000000021117f         db  0x00 ; '.'
                     pad_vertically:
0000000000211180         db  0x00 ; '.'                                         ; DATA XREF=print_stored+24, print_stored+299, read_line+131, read_line+1040, print_files+1471, print_files+1553, print_files+1737, print_files+1961, print_files+2512, print_files+3857
0000000000211181         db  0x00 ; '.'
0000000000211182         db  0x00 ; '.'
0000000000211183         db  0x00 ; '.'
                     padding_not_printed:
0000000000211184         db  0x00 ; '.'                                         ; DATA XREF=print_stored+91, print_stored+351, align_column+15, align_column+87, read_line+258, read_line+368, read_line+855, print_files+1717
0000000000211185         db  0x00 ; '.'
0000000000211186         db  0x00 ; '.'
0000000000211187         db  0x00 ; '.'
                     separators_not_printed:
0000000000211188         db  0x00 ; '.'                                         ; DATA XREF=print_sep_string, print_sep_string+173, print_sep_string+184, read_line+179, read_line+192, read_line+236, print_files+1543, print_files+1657
0000000000211189         db  0x00 ; '.'
000000000021118a         db  0x00 ; '.'
000000000021118b         db  0x00 ; '.'
                     col_sep_length:
000000000021118c         db  0x00 ; '.'                                         ; DATA XREF=main+1591, main+1950, separator_string+24, print_sep_string+37, print_stored+85, print_stored+167, align_column+1, read_line+374, print_files+175, print_files+686, print_files+998
000000000021118d         db  0x00 ; '.'
000000000021118e         db  0x00 ; '.'
000000000021118f         db  0x00 ; '.'
                     use_col_separator:
0000000000211190         db  0x00 ; '.'                                         ; DATA XREF=main+527, main+1012, main+1601, main+1895, print_stored+105, align_column+23, read_line+388, print_files+140, print_files+185, print_files+1648, print_files+3537
                     ignore_failed_opens:
0000000000211191         db  0x00 ; '.'                                         ; DATA XREF=main+1073, open_file+158
0000000000211192         db  0x00 ; '.'
0000000000211193         db  0x00 ; '.'
                     total_files:
0000000000211194         db  0x00 ; '.'                                         ; DATA XREF=open_file+109, print_files+449, print_files+897, print_files+3680
0000000000211195         db  0x00 ; '.'
0000000000211196         db  0x00 ; '.'
0000000000211197         db  0x00 ; '.'
                     double_space:
0000000000211198         db  0x00 ; '.'                                         ; DATA XREF=main+1414, print_files+56, print_files+1464, print_files+1833
                     use_cntrl_prefix:
0000000000211199         db  0x00 ; '.'                                         ; DATA XREF=main+1428, char_to_clump+91
                     use_esc_sequence:
000000000021119a         db  0x00 ; '.'                                         ; DATA XREF=main+977, char_to_clump+78
000000000021119b         db  0x00 ; '.'
000000000021119c         db  0x00 ; '.'
000000000021119d         db  0x00 ; '.'
000000000021119e         db  0x00 ; '.'
000000000021119f         db  0x00 ; '.'
                     number_buff:
00000000002111a0         db  0x00 ; '.'                                         ; DATA XREF=main+670, add_line_number.isra.2+27, add_line_number.isra.2+72, print_files+347, print_files+389
00000000002111a1         db  0x00 ; '.'
00000000002111a2         db  0x00 ; '.'
00000000002111a3         db  0x00 ; '.'
00000000002111a4         db  0x00 ; '.'
00000000002111a5         db  0x00 ; '.'
00000000002111a6         db  0x00 ; '.'
00000000002111a7         db  0x00 ; '.'
                     number_width:
00000000002111a8         db  0x00 ; '.'                                         ; DATA XREF=add_line_number.isra.2+185, add_line_number.isra.2+219, print_files+272, print_files+291, print_files+991, print_files+3730
00000000002111a9         db  0x00 ; '.'
00000000002111aa         db  0x00 ; '.'
00000000002111ab         db  0x00 ; '.'
                     numbered_lines:
00000000002111ac         db  0x00 ; '.'                                         ; DATA XREF=main+1158, print_files+222, print_files+982, print_files+1055, print_files+3874
00000000002111ad         db  0x00 ; '.'
00000000002111ae         db  0x00 ; '.'
00000000002111af         db  0x00 ; '.'
                     line_number:
00000000002111b0         db  0x00 ; '.'                                         ; DATA XREF=add_line_number.isra.2+2, add_line_number.isra.2+60, print_files+1351
00000000002111b1         db  0x00 ; '.'
00000000002111b2         db  0x00 ; '.'
00000000002111b3         db  0x00 ; '.'
00000000002111b4         db  0x00 ; '.'
00000000002111b5         db  0x00 ; '.'
00000000002111b6         db  0x00 ; '.'
00000000002111b7         db  0x00 ; '.'
                     page_number:
00000000002111b8         db  0x00 ; '.'                                         ; DATA XREF=print_header+54, print_files+932, print_files+2040, print_files+2058, print_files+3276
00000000002111b9         db  0x00 ; '.'
00000000002111ba         db  0x00 ; '.'
00000000002111bb         db  0x00 ; '.'
00000000002111bc         db  0x00 ; '.'
00000000002111bd         db  0x00 ; '.'
00000000002111be         db  0x00 ; '.'
00000000002111bf         db  0x00 ; '.'
                     files_ready_to_read:
00000000002111c0         db  0x00 ; '.'                                         ; DATA XREF=reset_status+20, reset_status+99, reset_status+107, hold_file.isra.1+96, hold_file.isra.1+118, close_file.part.4+101, close_file.part.4+126, print_files+903, print_files+2183, print_files+2245, print_files+2383
00000000002111c1         db  0x00 ; '.'
00000000002111c2         db  0x00 ; '.'
00000000002111c3         db  0x00 ; '.'
00000000002111c4         db  0x00 ; '.'
00000000002111c5         db  0x00 ; '.'
00000000002111c6         db  0x00 ; '.'
00000000002111c7         db  0x00 ; '.'
                     first_page_number:
00000000002111c8         db  0x00 ; '.'                                         ; DATA XREF=main+411, main+428, main+1766, first_last_page+121, print_files+915, print_files+3269
00000000002111c9         db  0x00 ; '.'
00000000002111ca         db  0x00 ; '.'
00000000002111cb         db  0x00 ; '.'
00000000002111cc         db  0x00 ; '.'
00000000002111cd         db  0x00 ; '.'
00000000002111ce         db  0x00 ; '.'
00000000002111cf         db  0x00 ; '.'
                     failed_opens:
00000000002111d0         db  0x00 ; '.'                                         ; DATA XREF=main+769, open_file+165
00000000002111d1         db  0x00 ; '.'
00000000002111d2         db  0x00 ; '.'
00000000002111d3         db  0x00 ; '.'
                     input_position:
00000000002111d4         db  0x00 ; '.'                                         ; DATA XREF=char_to_clump+119, char_to_clump+149, char_to_clump+194, char_to_clump+287, char_to_clump+307, char_to_clump+336, char_to_clump+401, char_to_clump+452, add_line_number.isra.2+191, read_line+42, read_line+302
00000000002111d5         db  0x00 ; '.'
00000000002111d6         db  0x00 ; '.'
00000000002111d7         db  0x00 ; '.'
                     output_position:
00000000002111d8         db  0x00 ; '.'                                         ; DATA XREF=pad_across_to+15, pad_across_to+65, print_white_space+10, print_white_space+145, print_sep_string+126, print_header+15, print_header+224, print_char+57, print_char+104, print_stored+189, print_stored+375
00000000002111d9         db  0x00 ; '.'
00000000002111da         db  0x00 ; '.'
00000000002111db         db  0x00 ; '.'
                     chars_per_margin:
00000000002111dc         db  0x00 ; '.'                                         ; DATA XREF=main+1140, print_header+9, print_header+141, print_stored+181, print_files+953
00000000002111dd         db  0x00 ; '.'
00000000002111de         db  0x00 ; '.'
00000000002111df         db  0x00 ; '.'
                     spaces_not_printed:
00000000002111e0         db  0x00 ; '.'                                         ; DATA XREF=pad_across_to+82, print_white_space+2, print_white_space+152, print_sep_string+6, print_sep_string+133, print_sep_string+192, print_sep_string+211, print_char+21, print_char+147, print_stored+146, read_line+276
00000000002111e1         db  0x00 ; '.'
00000000002111e2         db  0x00 ; '.'
00000000002111e3         db  0x00 ; '.'
                     tabify_output:
00000000002111e4         db  0x00 ; '.'                                         ; DATA XREF=main+1329, pad_across_to+8, print_char+8, print_files+204
                     untabify_input:
00000000002111e5         db  0x00 ; '.'                                         ; DATA XREF=main+1400, char_to_clump+162
00000000002111e6         db  0x00 ; '.'
00000000002111e7         db  0x00 ; '.'
                     chars_per_column:
00000000002111e8         db  0x00 ; '.'                                         ; DATA XREF=read_line+270, read_line+296, read_line+1008, print_files+330, print_files+963, print_files+1067, print_files+3354, print_files+3951
00000000002111e9         db  0x00 ; '.'
00000000002111ea         db  0x00 ; '.'
00000000002111eb         db  0x00 ; '.'
                     join_lines:
00000000002111ec         db  0x00 ; '.'                                         ; DATA XREF=main+1717, main+1957, main+2174, print_files+127
                     truncate_lines:
00000000002111ed         db  0x00 ; '.'                                         ; DATA XREF=main+518, main+932, main+1491, main+1937, add_line_number.isra.2+167, read_line+94, read_line+248, read_line+533, print_files+197, print_files+215, print_files+943
00000000002111ee         db  0x00 ; '.'
00000000002111ef         db  0x00 ; '.'
                     lines_per_body:
00000000002111f0         db  0x00 ; '.'                                         ; DATA XREF=print_files+31, print_files+65, print_files+80, print_files+673, print_files+1372, print_files+1478, print_files+2216, print_files+2828, print_files+2984, print_files+3090, print_files+3322
00000000002111f1         db  0x00 ; '.'
00000000002111f2         db  0x00 ; '.'
00000000002111f3         db  0x00 ; '.'
                     balance_columns:
00000000002111f4         db  0x00 ; '.'                                         ; DATA XREF=main+1442, print_files+117, print_files+1275, print_files+2108, print_files+2411, print_files+2599
                     print_across_flag:
00000000002111f5         db  0x00 ; '.'                                         ; DATA XREF=main+464, main+1456
                     have_read_stdin:
00000000002111f6         db  0x00 ; '.'                                         ; DATA XREF=main+742, open_file+68, print_files+3673
                     use_form_feed:
00000000002111f7         db  0x00 ; '.'                                         ; DATA XREF=main+1731, print_files+2884
                     print_a_header:
00000000002111f8         db  0x00 ; '.'                                         ; DATA XREF=print_header+217, print_stored+61, read_line+124, read_line+708, read_line+824, print_files+1457
                     print_a_FF:
00000000002111f9         db  0x00 ; '.'                                         ; DATA XREF=read_rest_of_line+115, read_line+746, print_files+1992, print_files+2033
                     keep_FF:
00000000002111fa         db  0x00 ; '.'                                         ; DATA XREF=main+998, main+1563, read_rest_of_line+106, read_rest_of_line+176, read_line+737, print_files+666, print_files+1983
                     explicit_columns:
00000000002111fb         db  0x00 ; '.'                                         ; DATA XREF=main+451, main+500, main+1924, parse_column_count+54
                     FF_only:
00000000002111fc         db  0x00 ; '.'                                         ; DATA XREF=read_line+715, read_line+831, print_files+1707, print_files+2560
                     empty_line:
00000000002111fd         db  0x00 ; '.'                                         ; DATA XREF=read_line+414, print_files+1569, print_files+1616, print_files+2487
                     align_empty_cols:
00000000002111fe         db  0x00 ; '.'                                         ; DATA XREF=read_line+166, read_line+282, print_files+1560, print_files+2448
                     parallel_files:
00000000002111ff         db  0x00 ; '.'                                         ; DATA XREF=main+439, main+1205, hold_file.isra.1, add_line_number.isra.2+176, close_file.part.4+25, skip_read+127, skip_read+299, read_line+153, print_files+101, print_files+278, print_files+517
                     end_vector:
0000000000211200         db  0x00 ; '.'                                         ; DATA XREF=main+718, print_stored+156, print_files+2341, print_files+3446, print_files+3525
0000000000211201         db  0x00 ; '.'
0000000000211202         db  0x00 ; '.'
0000000000211203         db  0x00 ; '.'
0000000000211204         db  0x00 ; '.'
0000000000211205         db  0x00 ; '.'
0000000000211206         db  0x00 ; '.'
0000000000211207         db  0x00 ; '.'
                     line_vector:
0000000000211208         db  0x00 ; '.'                                         ; DATA XREF=main+706, print_stored+39, print_files+2310, print_files+2628, print_files+3378, print_files+3453
0000000000211209         db  0x00 ; '.'
000000000021120a         db  0x00 ; '.'
000000000021120b         db  0x00 ; '.'
000000000021120c         db  0x00 ; '.'
000000000021120d         db  0x00 ; '.'
000000000021120e         db  0x00 ; '.'
000000000021120f         db  0x00 ; '.'
                     buff_allocated:
0000000000211210         db  0x00 ; '.'                                         ; DATA XREF=store_char+9, store_char+28, print_files+3608
0000000000211211         db  0x00 ; '.'
0000000000211212         db  0x00 ; '.'
0000000000211213         db  0x00 ; '.'
0000000000211214         db  0x00 ; '.'
0000000000211215         db  0x00 ; '.'
0000000000211216         db  0x00 ; '.'
0000000000211217         db  0x00 ; '.'
                     buff_current:
0000000000211218         db  0x00 ; '.'                                         ; DATA XREF=store_char, store_char+43, store_char+65, print_files+2119, print_files+2295
0000000000211219         db  0x00 ; '.'
000000000021121a         db  0x00 ; '.'
000000000021121b         db  0x00 ; '.'
000000000021121c         db  0x00 ; '.'
000000000021121d         db  0x00 ; '.'
000000000021121e         db  0x00 ; '.'
000000000021121f         db  0x00 ; '.'
                     buff:
0000000000211220         db  0x00 ; '.'                                         ; DATA XREF=main+730, store_char+16, store_char+49, print_stored+17, print_files+3518, print_files+3586
0000000000211221         db  0x00 ; '.'
0000000000211222         db  0x00 ; '.'
0000000000211223         db  0x00 ; '.'
0000000000211224         db  0x00 ; '.'
0000000000211225         db  0x00 ; '.'
0000000000211226         db  0x00 ; '.'
0000000000211227         db  0x00 ; '.'
                     column_vector:
0000000000211228         db  0x00 ; '.'                                         ; DATA XREF=main+694, cols_ready_to_print+6, reset_status+6, print_stored+230, hold_file.isra.1+15, close_file.part.4+40, skip_read+318, read_line+185, print_files+435, print_files+527, print_files+1019
0000000000211229         db  0x00 ; '.'
000000000021122a         db  0x00 ; '.'
000000000021122b         db  0x00 ; '.'
000000000021122c         db  0x00 ; '.'
000000000021122d         db  0x00 ; '.'
000000000021122e         db  0x00 ; '.'
000000000021122f         db  0x00 ; '.'
                     ignore_EPIPE:
0000000000211230         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
0000000000211231         db  0x00 ; '.'
0000000000211232         db  0x00 ; '.'
0000000000211233         db  0x00 ; '.'
0000000000211234         db  0x00 ; '.'
0000000000211235         db  0x00 ; '.'
0000000000211236         db  0x00 ; '.'
0000000000211237         db  0x00 ; '.'
                     file_name:
0000000000211238         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
0000000000211239         db  0x00 ; '.'
000000000021123a         db  0x00 ; '.'
000000000021123b         db  0x00 ; '.'
000000000021123c         db  0x00 ; '.'
000000000021123d         db  0x00 ; '.'
000000000021123e         db  0x00 ; '.'
000000000021123f         db  0x00 ; '.'
                     program_name:
0000000000211240         db  0x00 ; '.'                                         ; DATA XREF=usage+20, set_program_name+109
0000000000211241         db  0x00 ; '.'
0000000000211242         db  0x00 ; '.'
0000000000211243         db  0x00 ; '.'
0000000000211244         db  0x00 ; '.'
0000000000211245         db  0x00 ; '.'
0000000000211246         db  0x00 ; '.'
0000000000211247         db  0x00 ; '.'
0000000000211248         db  0x00 ; '.'
0000000000211249         db  0x00 ; '.'
000000000021124a         db  0x00 ; '.'
000000000021124b         db  0x00 ; '.'
000000000021124c         db  0x00 ; '.'
000000000021124d         db  0x00 ; '.'
000000000021124e         db  0x00 ; '.'
000000000021124f         db  0x00 ; '.'
0000000000211250         db  0x00 ; '.'
0000000000211251         db  0x00 ; '.'
0000000000211252         db  0x00 ; '.'
0000000000211253         db  0x00 ; '.'
0000000000211254         db  0x00 ; '.'
0000000000211255         db  0x00 ; '.'
0000000000211256         db  0x00 ; '.'
0000000000211257         db  0x00 ; '.'
0000000000211258         db  0x00 ; '.'
0000000000211259         db  0x00 ; '.'
000000000021125a         db  0x00 ; '.'
000000000021125b         db  0x00 ; '.'
000000000021125c         db  0x00 ; '.'
000000000021125d         db  0x00 ; '.'
000000000021125e         db  0x00 ; '.'
000000000021125f         db  0x00 ; '.'
                     slot0:
0000000000211260         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
0000000000211261         db  0x00 ; '.'
0000000000211262         db  0x00 ; '.'
0000000000211263         db  0x00 ; '.'
0000000000211264         db  0x00 ; '.'
0000000000211265         db  0x00 ; '.'
0000000000211266         db  0x00 ; '.'
0000000000211267         db  0x00 ; '.'
0000000000211268         db  0x00 ; '.'
0000000000211269         db  0x00 ; '.'
000000000021126a         db  0x00 ; '.'
000000000021126b         db  0x00 ; '.'
000000000021126c         db  0x00 ; '.'
000000000021126d         db  0x00 ; '.'
000000000021126e         db  0x00 ; '.'
000000000021126f         db  0x00 ; '.'
0000000000211270         db  0x00 ; '.'
0000000000211271         db  0x00 ; '.'
0000000000211272         db  0x00 ; '.'
0000000000211273         db  0x00 ; '.'
0000000000211274         db  0x00 ; '.'
0000000000211275         db  0x00 ; '.'
0000000000211276         db  0x00 ; '.'
0000000000211277         db  0x00 ; '.'
0000000000211278         db  0x00 ; '.'
0000000000211279         db  0x00 ; '.'
000000000021127a         db  0x00 ; '.'
000000000021127b         db  0x00 ; '.'
000000000021127c         db  0x00 ; '.'
000000000021127d         db  0x00 ; '.'
000000000021127e         db  0x00 ; '.'
000000000021127f         db  0x00 ; '.'
0000000000211280         db  0x00 ; '.'
0000000000211281         db  0x00 ; '.'
0000000000211282         db  0x00 ; '.'
0000000000211283         db  0x00 ; '.'
0000000000211284         db  0x00 ; '.'
0000000000211285         db  0x00 ; '.'
0000000000211286         db  0x00 ; '.'
0000000000211287         db  0x00 ; '.'
0000000000211288         db  0x00 ; '.'
0000000000211289         db  0x00 ; '.'
000000000021128a         db  0x00 ; '.'
000000000021128b         db  0x00 ; '.'
000000000021128c         db  0x00 ; '.'
000000000021128d         db  0x00 ; '.'
000000000021128e         db  0x00 ; '.'
000000000021128f         db  0x00 ; '.'
0000000000211290         db  0x00 ; '.'
0000000000211291         db  0x00 ; '.'
0000000000211292         db  0x00 ; '.'
0000000000211293         db  0x00 ; '.'
0000000000211294         db  0x00 ; '.'
0000000000211295         db  0x00 ; '.'
0000000000211296         db  0x00 ; '.'
0000000000211297         db  0x00 ; '.'
0000000000211298         db  0x00 ; '.'
0000000000211299         db  0x00 ; '.'
000000000021129a         db  0x00 ; '.'
000000000021129b         db  0x00 ; '.'
000000000021129c         db  0x00 ; '.'
000000000021129d         db  0x00 ; '.'
000000000021129e         db  0x00 ; '.'
000000000021129f         db  0x00 ; '.'
00000000002112a0         db  0x00 ; '.'
00000000002112a1         db  0x00 ; '.'
00000000002112a2         db  0x00 ; '.'
00000000002112a3         db  0x00 ; '.'
00000000002112a4         db  0x00 ; '.'
00000000002112a5         db  0x00 ; '.'
00000000002112a6         db  0x00 ; '.'
00000000002112a7         db  0x00 ; '.'
00000000002112a8         db  0x00 ; '.'
00000000002112a9         db  0x00 ; '.'
00000000002112aa         db  0x00 ; '.'
00000000002112ab         db  0x00 ; '.'
00000000002112ac         db  0x00 ; '.'
00000000002112ad         db  0x00 ; '.'
00000000002112ae         db  0x00 ; '.'
00000000002112af         db  0x00 ; '.'
00000000002112b0         db  0x00 ; '.'
00000000002112b1         db  0x00 ; '.'
00000000002112b2         db  0x00 ; '.'
00000000002112b3         db  0x00 ; '.'
00000000002112b4         db  0x00 ; '.'
00000000002112b5         db  0x00 ; '.'
00000000002112b6         db  0x00 ; '.'
00000000002112b7         db  0x00 ; '.'
00000000002112b8         db  0x00 ; '.'
00000000002112b9         db  0x00 ; '.'
00000000002112ba         db  0x00 ; '.'
00000000002112bb         db  0x00 ; '.'
00000000002112bc         db  0x00 ; '.'
00000000002112bd         db  0x00 ; '.'
00000000002112be         db  0x00 ; '.'
00000000002112bf         db  0x00 ; '.'
00000000002112c0         db  0x00 ; '.'
00000000002112c1         db  0x00 ; '.'
00000000002112c2         db  0x00 ; '.'
00000000002112c3         db  0x00 ; '.'
00000000002112c4         db  0x00 ; '.'
00000000002112c5         db  0x00 ; '.'
00000000002112c6         db  0x00 ; '.'
00000000002112c7         db  0x00 ; '.'
00000000002112c8         db  0x00 ; '.'
00000000002112c9         db  0x00 ; '.'
00000000002112ca         db  0x00 ; '.'
00000000002112cb         db  0x00 ; '.'
00000000002112cc         db  0x00 ; '.'
00000000002112cd         db  0x00 ; '.'
00000000002112ce         db  0x00 ; '.'
00000000002112cf         db  0x00 ; '.'
00000000002112d0         db  0x00 ; '.'
00000000002112d1         db  0x00 ; '.'
00000000002112d2         db  0x00 ; '.'
00000000002112d3         db  0x00 ; '.'
00000000002112d4         db  0x00 ; '.'
00000000002112d5         db  0x00 ; '.'
00000000002112d6         db  0x00 ; '.'
00000000002112d7         db  0x00 ; '.'
00000000002112d8         db  0x00 ; '.'
00000000002112d9         db  0x00 ; '.'
00000000002112da         db  0x00 ; '.'
00000000002112db         db  0x00 ; '.'
00000000002112dc         db  0x00 ; '.'
00000000002112dd         db  0x00 ; '.'
00000000002112de         db  0x00 ; '.'
00000000002112df         db  0x00 ; '.'
00000000002112e0         db  0x00 ; '.'
00000000002112e1         db  0x00 ; '.'
00000000002112e2         db  0x00 ; '.'
00000000002112e3         db  0x00 ; '.'
00000000002112e4         db  0x00 ; '.'
00000000002112e5         db  0x00 ; '.'
00000000002112e6         db  0x00 ; '.'
00000000002112e7         db  0x00 ; '.'
00000000002112e8         db  0x00 ; '.'
00000000002112e9         db  0x00 ; '.'
00000000002112ea         db  0x00 ; '.'
00000000002112eb         db  0x00 ; '.'
00000000002112ec         db  0x00 ; '.'
00000000002112ed         db  0x00 ; '.'
00000000002112ee         db  0x00 ; '.'
00000000002112ef         db  0x00 ; '.'
00000000002112f0         db  0x00 ; '.'
00000000002112f1         db  0x00 ; '.'
00000000002112f2         db  0x00 ; '.'
00000000002112f3         db  0x00 ; '.'
00000000002112f4         db  0x00 ; '.'
00000000002112f5         db  0x00 ; '.'
00000000002112f6         db  0x00 ; '.'
00000000002112f7         db  0x00 ; '.'
00000000002112f8         db  0x00 ; '.'
00000000002112f9         db  0x00 ; '.'
00000000002112fa         db  0x00 ; '.'
00000000002112fb         db  0x00 ; '.'
00000000002112fc         db  0x00 ; '.'
00000000002112fd         db  0x00 ; '.'
00000000002112fe         db  0x00 ; '.'
00000000002112ff         db  0x00 ; '.'
0000000000211300         db  0x00 ; '.'
0000000000211301         db  0x00 ; '.'
0000000000211302         db  0x00 ; '.'
0000000000211303         db  0x00 ; '.'
0000000000211304         db  0x00 ; '.'
0000000000211305         db  0x00 ; '.'
0000000000211306         db  0x00 ; '.'
0000000000211307         db  0x00 ; '.'
0000000000211308         db  0x00 ; '.'
0000000000211309         db  0x00 ; '.'
000000000021130a         db  0x00 ; '.'
000000000021130b         db  0x00 ; '.'
000000000021130c         db  0x00 ; '.'
000000000021130d         db  0x00 ; '.'
000000000021130e         db  0x00 ; '.'
000000000021130f         db  0x00 ; '.'
0000000000211310         db  0x00 ; '.'
0000000000211311         db  0x00 ; '.'
0000000000211312         db  0x00 ; '.'
0000000000211313         db  0x00 ; '.'
0000000000211314         db  0x00 ; '.'
0000000000211315         db  0x00 ; '.'
0000000000211316         db  0x00 ; '.'
0000000000211317         db  0x00 ; '.'
0000000000211318         db  0x00 ; '.'
0000000000211319         db  0x00 ; '.'
000000000021131a         db  0x00 ; '.'
000000000021131b         db  0x00 ; '.'
000000000021131c         db  0x00 ; '.'
000000000021131d         db  0x00 ; '.'
000000000021131e         db  0x00 ; '.'
000000000021131f         db  0x00 ; '.'
0000000000211320         db  0x00 ; '.'
0000000000211321         db  0x00 ; '.'
0000000000211322         db  0x00 ; '.'
0000000000211323         db  0x00 ; '.'
0000000000211324         db  0x00 ; '.'
0000000000211325         db  0x00 ; '.'
0000000000211326         db  0x00 ; '.'
0000000000211327         db  0x00 ; '.'
0000000000211328         db  0x00 ; '.'
0000000000211329         db  0x00 ; '.'
000000000021132a         db  0x00 ; '.'
000000000021132b         db  0x00 ; '.'
000000000021132c         db  0x00 ; '.'
000000000021132d         db  0x00 ; '.'
000000000021132e         db  0x00 ; '.'
000000000021132f         db  0x00 ; '.'
0000000000211330         db  0x00 ; '.'
0000000000211331         db  0x00 ; '.'
0000000000211332         db  0x00 ; '.'
0000000000211333         db  0x00 ; '.'
0000000000211334         db  0x00 ; '.'
0000000000211335         db  0x00 ; '.'
0000000000211336         db  0x00 ; '.'
0000000000211337         db  0x00 ; '.'
0000000000211338         db  0x00 ; '.'
0000000000211339         db  0x00 ; '.'
000000000021133a         db  0x00 ; '.'
000000000021133b         db  0x00 ; '.'
000000000021133c         db  0x00 ; '.'
000000000021133d         db  0x00 ; '.'
000000000021133e         db  0x00 ; '.'
000000000021133f         db  0x00 ; '.'
0000000000211340         db  0x00 ; '.'
0000000000211341         db  0x00 ; '.'
0000000000211342         db  0x00 ; '.'
0000000000211343         db  0x00 ; '.'
0000000000211344         db  0x00 ; '.'
0000000000211345         db  0x00 ; '.'
0000000000211346         db  0x00 ; '.'
0000000000211347         db  0x00 ; '.'
0000000000211348         db  0x00 ; '.'
0000000000211349         db  0x00 ; '.'
000000000021134a         db  0x00 ; '.'
000000000021134b         db  0x00 ; '.'
000000000021134c         db  0x00 ; '.'
000000000021134d         db  0x00 ; '.'
000000000021134e         db  0x00 ; '.'
000000000021134f         db  0x00 ; '.'
0000000000211350         db  0x00 ; '.'
0000000000211351         db  0x00 ; '.'
0000000000211352         db  0x00 ; '.'
0000000000211353         db  0x00 ; '.'
0000000000211354         db  0x00 ; '.'
0000000000211355         db  0x00 ; '.'
0000000000211356         db  0x00 ; '.'
0000000000211357         db  0x00 ; '.'
0000000000211358         db  0x00 ; '.'
0000000000211359         db  0x00 ; '.'
000000000021135a         db  0x00 ; '.'
000000000021135b         db  0x00 ; '.'
000000000021135c         db  0x00 ; '.'
000000000021135d         db  0x00 ; '.'
000000000021135e         db  0x00 ; '.'
000000000021135f         db  0x00 ; '.'
                     default_quoting_options:
0000000000211360         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
0000000000211361         db  0x00 ; '.'
0000000000211362         db  0x00 ; '.'
0000000000211363         db  0x00 ; '.'
0000000000211364         db  0x00 ; '.'
0000000000211365         db  0x00 ; '.'
0000000000211366         db  0x00 ; '.'
0000000000211367         db  0x00 ; '.'
0000000000211368         db  0x00 ; '.'
0000000000211369         db  0x00 ; '.'
000000000021136a         db  0x00 ; '.'
000000000021136b         db  0x00 ; '.'
000000000021136c         db  0x00 ; '.'
000000000021136d         db  0x00 ; '.'
000000000021136e         db  0x00 ; '.'
000000000021136f         db  0x00 ; '.'
0000000000211370         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
0000000000211371         db  0x00 ; '.'
0000000000211372         db  0x00 ; '.'
0000000000211373         db  0x00 ; '.'
0000000000211374         db  0x00 ; '.'
0000000000211375         db  0x00 ; '.'
0000000000211376         db  0x00 ; '.'
0000000000211377         db  0x00 ; '.'
0000000000211378         db  0x00 ; '.'
0000000000211379         db  0x00 ; '.'
000000000021137a         db  0x00 ; '.'
000000000021137b         db  0x00 ; '.'
000000000021137c         db  0x00 ; '.'
000000000021137d         db  0x00 ; '.'
000000000021137e         db  0x00 ; '.'
000000000021137f         db  0x00 ; '.'
0000000000211380         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
0000000000211381         db  0x00 ; '.'
0000000000211382         db  0x00 ; '.'
0000000000211383         db  0x00 ; '.'
0000000000211384         db  0x00 ; '.'
0000000000211385         db  0x00 ; '.'
0000000000211386         db  0x00 ; '.'
0000000000211387         db  0x00 ; '.'
0000000000211388         db  0x00 ; '.'
0000000000211389         db  0x00 ; '.'
000000000021138a         db  0x00 ; '.'
000000000021138b         db  0x00 ; '.'
000000000021138c         db  0x00 ; '.'
000000000021138d         db  0x00 ; '.'
000000000021138e         db  0x00 ; '.'
000000000021138f         db  0x00 ; '.'
                     qword_211390:
0000000000211390         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
0000000000211391         db  0x00 ; '.'
0000000000211392         db  0x00 ; '.'
0000000000211393         db  0x00 ; '.'
0000000000211394         db  0x00 ; '.'
0000000000211395         db  0x00 ; '.'
0000000000211396         db  0x00 ; '.'
0000000000211397         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
0000000000211398         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
0000000000211399         db  0x00 ; '.'
000000000021139a         db  0x00 ; '.'
000000000021139b         db  0x00 ; '.'
000000000021139c         db  0x00 ; '.'
000000000021139d         db  0x00 ; '.'
000000000021139e         db  0x00 ; '.'
000000000021139f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x2113b0; 0x211850[ (1184 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x2113b0; 0x422c00[ (2168912 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     __ctype_toupper_loc:
00000000002113b0         extern function code                                   ; DATA XREF=__ctype_toupper_loc@GOT
                     __uflow:
00000000002113b8         extern function code                                   ; DATA XREF=__uflow@GOT
                     getenv:
00000000002113c0         extern function code                                   ; DATA XREF=getenv@GOT
                     free:
00000000002113c8         extern function code                                   ; DATA XREF=free@GOT
                     abort:
00000000002113d0         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
00000000002113d8         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
00000000002113e0         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
00000000002113e8         extern function code
                     localtime_r:
00000000002113f0         extern function code                                   ; DATA XREF=localtime_r@GOT
                     _exit:
00000000002113f8         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
0000000000211400         extern function code                                   ; DATA XREF=__fpending@GOT
                     iswcntrl:
0000000000211408         extern function code                                   ; DATA XREF=iswcntrl@GOT
                     fcntl:
0000000000211410         extern function code                                   ; DATA XREF=fcntl@GOT
                     clock_gettime:
0000000000211418         extern function code                                   ; DATA XREF=clock_gettime@GOT
                     setenv:
0000000000211420         extern function code                                   ; DATA XREF=setenv@GOT
                     textdomain:
0000000000211428         extern function code                                   ; DATA XREF=textdomain@GOT
                     __strtol_internal:
0000000000211430         extern function code                                   ; DATA XREF=__strtol_internal@GOT
                     fclose:
0000000000211438         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
0000000000211440         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
0000000000211448         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
0000000000211450         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
0000000000211458         extern function code                                   ; DATA XREF=strlen@GOT
                     __stack_chk_fail:
0000000000211460         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
0000000000211468         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
0000000000211470         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     strchr:
0000000000211478         extern function code                                   ; DATA XREF=strchr@GOT
                     __overflow:
0000000000211480         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
0000000000211488         extern function code                                   ; DATA XREF=strrchr@GOT
                     gmtime_r:
0000000000211490         extern function code                                   ; DATA XREF=gmtime_r@GOT
                     lseek:
0000000000211498         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
00000000002114a0         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     __strtoul_internal:
00000000002114a8         extern function code                                   ; DATA XREF=__strtoul_internal@GOT
                     memset:
00000000002114b0         extern function code                                   ; DATA XREF=memset@GOT
                     close:
00000000002114b8         extern function code                                   ; DATA XREF=close@GOT
                     posix_fadvise:
00000000002114c0         extern function code                                   ; DATA XREF=posix_fadvise@GOT
                     __libc_start_main:
00000000002114c8         extern function code
                     memcmp:
00000000002114d0         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
00000000002114d8         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
00000000002114e0         extern function code                                   ; DATA XREF=calloc@GOT
                     strcmp:
00000000002114e8         extern function code                                   ; DATA XREF=strcmp@GOT
                     __gmon_start__:
00000000002114f0         extern function code
                     strtol:
00000000002114f8         extern function code                                   ; DATA XREF=strtol@GOT
                     memcpy:
0000000000211500         extern function code                                   ; DATA XREF=memcpy@GOT
                     tzset:
0000000000211508         extern function code                                   ; DATA XREF=tzset@GOT
                     fileno:
0000000000211510         extern function code                                   ; DATA XREF=fileno@GOT
                     wcwidth:
0000000000211518         extern function code                                   ; DATA XREF=wcwidth@GOT
                     malloc:
0000000000211520         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
0000000000211528         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
0000000000211530         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     ungetc:
0000000000211538         extern function code                                   ; DATA XREF=ungetc@GOT
                     __fxstat:
0000000000211540         extern function code                                   ; DATA XREF=__fxstat@GOT
                     mktime:
0000000000211548         extern function code                                   ; DATA XREF=mktime@GOT
                     __freading:
0000000000211550         extern function code                                   ; DATA XREF=__freading@GOT
                     realloc:
0000000000211558         extern function code                                   ; DATA XREF=realloc@GOT
                     fdopen:
0000000000211560         extern function code                                   ; DATA XREF=fdopen@GOT
                     setlocale:
0000000000211568         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
0000000000211570         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     timegm:
0000000000211578         extern function code                                   ; DATA XREF=timegm@GOT
                     strftime:
0000000000211580         extern function code                                   ; DATA XREF=strftime@GOT
                     error:
0000000000211588         extern function code                                   ; DATA XREF=error@GOT
                     fseeko:
0000000000211590         extern function code                                   ; DATA XREF=fseeko@GOT
                     fopen:
0000000000211598         extern function code                                   ; DATA XREF=fopen@GOT
                     unsetenv:
00000000002115a0         extern function code                                   ; DATA XREF=unsetenv@GOT
                     __cxa_atexit:
00000000002115a8         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
00000000002115b0         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
00000000002115b8         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
00000000002115c0         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
00000000002115c8         extern function code
                     mbsinit:
00000000002115d0         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
00000000002115d8         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
00000000002115e0         extern function code
                     __ctype_tolower_loc:
00000000002115e8         extern function code                                   ; DATA XREF=__ctype_tolower_loc@GOT
                     __ctype_b_loc:
00000000002115f0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     __sprintf_chk:
00000000002115f8         extern function code                                   ; DATA XREF=__sprintf_chk@GOT
                     __ctype_toupper_loc@@GLIBC_2.3:
0000000000211600         extern function code
                     __uflow@@GLIBC_2.2.5:
0000000000211608         extern function code
                     getenv@@GLIBC_2.2.5:
0000000000211610         extern function code
                     free@@GLIBC_2.2.5:
0000000000211618         extern function code
                     abort@@GLIBC_2.2.5:
0000000000211620         extern function code
                     __errno_location@@GLIBC_2.2.5:
0000000000211628         extern function code
                     strncmp@@GLIBC_2.2.5:
0000000000211630         extern function code
                     _ITM_deregisterTMCloneTable_211638:        // _ITM_deregisterTMCloneTable
0000000000211638         extern function code
                     localtime_r@@GLIBC_2.2.5:
0000000000211640         extern function code
                     _exit@@GLIBC_2.2.5:
0000000000211648         extern function code
                     __fpending@@GLIBC_2.2.5:
0000000000211650         extern function code
                     iswcntrl@@GLIBC_2.2.5:
0000000000211658         extern function code
                     fcntl@@GLIBC_2.2.5:
0000000000211660         extern function code
                     clock_gettime@@GLIBC_2.17:
0000000000211668         extern function code
                     setenv@@GLIBC_2.2.5:
0000000000211670         extern function code
                     textdomain@@GLIBC_2.2.5:
0000000000211678         extern function code
                     __strtol_internal@@GLIBC_2.2.5:
0000000000211680         extern function code
                     fclose@@GLIBC_2.2.5:
0000000000211688         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
0000000000211690         extern function code
                     dcgettext@@GLIBC_2.2.5:
0000000000211698         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
00000000002116a0         extern function code
                     strlen@@GLIBC_2.2.5:
00000000002116a8         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
00000000002116b0         extern function code
                     getopt_long@@GLIBC_2.2.5:
00000000002116b8         extern function code
                     mbrtowc@@GLIBC_2.2.5:
00000000002116c0         extern function code
                     strchr@@GLIBC_2.2.5:
00000000002116c8         extern function code
                     __overflow@@GLIBC_2.2.5:
00000000002116d0         extern function code
                     strrchr@@GLIBC_2.2.5:
00000000002116d8         extern function code
                     gmtime_r@@GLIBC_2.2.5:
00000000002116e0         extern function code
                     lseek@@GLIBC_2.2.5:
00000000002116e8         extern function code
                     __assert_fail@@GLIBC_2.2.5:
00000000002116f0         extern function code
                     __strtoul_internal@@GLIBC_2.2.5:
00000000002116f8         extern function code
                     memset@@GLIBC_2.2.5:
0000000000211700         extern function code
                     close@@GLIBC_2.2.5:
0000000000211708         extern function code
                     posix_fadvise@@GLIBC_2.2.5:
0000000000211710         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
0000000000211718         extern function code
                     memcmp@@GLIBC_2.2.5:
0000000000211720         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
0000000000211728         extern function code
                     calloc@@GLIBC_2.2.5:
0000000000211730         extern function code
                     strcmp@@GLIBC_2.2.5:
0000000000211738         extern function code
                     __gmon_start___211740:        // __gmon_start__
0000000000211740         extern function code
                     strtol@@GLIBC_2.2.5:
0000000000211748         extern function code
                     memcpy@@GLIBC_2.14:
0000000000211750         extern function code
                     tzset@@GLIBC_2.2.5:
0000000000211758         extern function code
                     fileno@@GLIBC_2.2.5:
0000000000211760         extern function code
                     wcwidth@@GLIBC_2.2.5:
0000000000211768         extern function code
                     malloc@@GLIBC_2.2.5:
0000000000211770         extern function code
                     fflush@@GLIBC_2.2.5:
0000000000211778         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
0000000000211780         extern function code
                     ungetc@@GLIBC_2.2.5:
0000000000211788         extern function code
                     __fxstat@@GLIBC_2.2.5:
0000000000211790         extern function code
                     mktime@@GLIBC_2.2.5:
0000000000211798         extern function code
                     __freading@@GLIBC_2.2.5:
00000000002117a0         extern function code
                     realloc@@GLIBC_2.2.5:
00000000002117a8         extern function code
                     fdopen@@GLIBC_2.2.5:
00000000002117b0         extern function code
                     setlocale@@GLIBC_2.2.5:
00000000002117b8         extern function code
                     __printf_chk@@GLIBC_2.3.4:
00000000002117c0         extern function code
                     timegm@@GLIBC_2.2.5:
00000000002117c8         extern function code
                     strftime@@GLIBC_2.2.5:
00000000002117d0         extern function code
                     error@@GLIBC_2.2.5:
00000000002117d8         extern function code
                     fseeko@@GLIBC_2.2.5:
00000000002117e0         extern function code
                     fopen@@GLIBC_2.2.5:
00000000002117e8         extern function code
                     unsetenv@@GLIBC_2.2.5:
00000000002117f0         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
00000000002117f8         extern function code
                     exit@@GLIBC_2.2.5:
0000000000211800         extern function code
                     fwrite@@GLIBC_2.2.5:
0000000000211808         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
0000000000211810         extern function code
                     _ITM_registerTMCloneTable_211818:        // _ITM_registerTMCloneTable
0000000000211818         extern function code
                     mbsinit@@GLIBC_2.2.5:
0000000000211820         extern function code
                     iswprint@@GLIBC_2.2.5:
0000000000211828         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
0000000000211830         extern function code
                     __ctype_tolower_loc@@GLIBC_2.3:
0000000000211838         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
0000000000211840         extern function code
                     __sprintf_chk@@GLIBC_2.3.4:
0000000000211848         extern function code
