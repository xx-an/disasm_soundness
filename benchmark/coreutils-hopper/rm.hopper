
/*
--------------------------------------------------------------------------------

        File: /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/rm
        UUID: 86E1A17D-CAF0-9E27-C491-271E526879AE
        Analysis version 58
        ELF file
        CPU: intel/x86_64
        64 bits addresses (Little Endian)

--------------------------------------------------------------------------------
*/



        ; Segment Segment 2
        ; Range: [0x0; 0xe200[ (57856 bytes)
        ; File offset : [0; 57856[ (57856 bytes)
        ; Permissions: readable / executable
        ; Flags: 0x5

0000000000000000         db  0x7f ; '.'
0000000000000001         db  0x45 ; 'E'
0000000000000002         db  0x4c ; 'L'
0000000000000003         db  0x46 ; 'F'
0000000000000004         db  0x02 ; '.'
0000000000000005         db  0x01 ; '.'
0000000000000006         db  0x01 ; '.'
0000000000000007         db  0x00 ; '.'
0000000000000008         db  0x00 ; '.'
0000000000000009         db  0x00 ; '.'
000000000000000a         db  0x00 ; '.'
000000000000000b         db  0x00 ; '.'
000000000000000c         db  0x00 ; '.'
000000000000000d         db  0x00 ; '.'
000000000000000e         db  0x00 ; '.'
000000000000000f         db  0x00 ; '.'
0000000000000010         db  0x03 ; '.'
0000000000000011         db  0x00 ; '.'
0000000000000012         db  0x3e ; '>'
0000000000000013         db  0x00 ; '.'
0000000000000014         db  0x01 ; '.'
0000000000000015         db  0x00 ; '.'
0000000000000016         db  0x00 ; '.'
0000000000000017         db  0x00 ; '.'
0000000000000018         db  0x90 ; '.'
0000000000000019         db  0x23 ; '#'
000000000000001a         db  0x00 ; '.'
000000000000001b         db  0x00 ; '.'
000000000000001c         db  0x00 ; '.'
000000000000001d         db  0x00 ; '.'
000000000000001e         db  0x00 ; '.'
000000000000001f         db  0x00 ; '.'
0000000000000020         db  0x40 ; '@'
0000000000000021         db  0x00 ; '.'
0000000000000022         db  0x00 ; '.'
0000000000000023         db  0x00 ; '.'
0000000000000024         db  0x00 ; '.'
0000000000000025         db  0x00 ; '.'
0000000000000026         db  0x00 ; '.'
0000000000000027         db  0x00 ; '.'
0000000000000028         db  0xb8 ; '.'
0000000000000029         db  0xb0 ; '.'
000000000000002a         db  0x04 ; '.'
000000000000002b         db  0x00 ; '.'
000000000000002c         db  0x00 ; '.'
000000000000002d         db  0x00 ; '.'
000000000000002e         db  0x00 ; '.'
000000000000002f         db  0x00 ; '.'
0000000000000030         db  0x00 ; '.'
0000000000000031         db  0x00 ; '.'
0000000000000032         db  0x00 ; '.'
0000000000000033         db  0x00 ; '.'
0000000000000034         db  0x40 ; '@'
0000000000000035         db  0x00 ; '.'
0000000000000036         db  0x38 ; '8'
0000000000000037         db  0x00 ; '.'
0000000000000038         db  0x09 ; '.'
0000000000000039         db  0x00 ; '.'
000000000000003a         db  0x40 ; '@'
000000000000003b         db  0x00 ; '.'
000000000000003c         db  0x25 ; '%'
000000000000003d         db  0x00 ; '.'
000000000000003e         db  0x24 ; '$'
000000000000003f         db  0x00 ; '.'
0000000000000040         db  0x06 ; '.'
0000000000000041         db  0x00 ; '.'
0000000000000042         db  0x00 ; '.'
0000000000000043         db  0x00 ; '.'
0000000000000044         db  0x04 ; '.'
0000000000000045         db  0x00 ; '.'
0000000000000046         db  0x00 ; '.'
0000000000000047         db  0x00 ; '.'
0000000000000048         db  0x40 ; '@'
0000000000000049         db  0x00 ; '.'
000000000000004a         db  0x00 ; '.'
000000000000004b         db  0x00 ; '.'
000000000000004c         db  0x00 ; '.'
000000000000004d         db  0x00 ; '.'
000000000000004e         db  0x00 ; '.'
000000000000004f         db  0x00 ; '.'
0000000000000050         db  0x40 ; '@'
0000000000000051         db  0x00 ; '.'
0000000000000052         db  0x00 ; '.'
0000000000000053         db  0x00 ; '.'
0000000000000054         db  0x00 ; '.'
0000000000000055         db  0x00 ; '.'
0000000000000056         db  0x00 ; '.'
0000000000000057         db  0x00 ; '.'
0000000000000058         db  0x40 ; '@'
0000000000000059         db  0x00 ; '.'
000000000000005a         db  0x00 ; '.'
000000000000005b         db  0x00 ; '.'
000000000000005c         db  0x00 ; '.'
000000000000005d         db  0x00 ; '.'
000000000000005e         db  0x00 ; '.'
000000000000005f         db  0x00 ; '.'
0000000000000060         db  0xf8 ; '.'
0000000000000061         db  0x01 ; '.'
0000000000000062         db  0x00 ; '.'
0000000000000063         db  0x00 ; '.'
0000000000000064         db  0x00 ; '.'
0000000000000065         db  0x00 ; '.'
0000000000000066         db  0x00 ; '.'
0000000000000067         db  0x00 ; '.'
0000000000000068         db  0xf8 ; '.'
0000000000000069         db  0x01 ; '.'
000000000000006a         db  0x00 ; '.'
000000000000006b         db  0x00 ; '.'
000000000000006c         db  0x00 ; '.'
000000000000006d         db  0x00 ; '.'
000000000000006e         db  0x00 ; '.'
000000000000006f         db  0x00 ; '.'
0000000000000070         db  0x08 ; '.'
0000000000000071         db  0x00 ; '.'
0000000000000072         db  0x00 ; '.'
0000000000000073         db  0x00 ; '.'
0000000000000074         db  0x00 ; '.'
0000000000000075         db  0x00 ; '.'
0000000000000076         db  0x00 ; '.'
0000000000000077         db  0x00 ; '.'
0000000000000078         db  0x03 ; '.'
0000000000000079         db  0x00 ; '.'
000000000000007a         db  0x00 ; '.'
000000000000007b         db  0x00 ; '.'
000000000000007c         db  0x04 ; '.'
000000000000007d         db  0x00 ; '.'
000000000000007e         db  0x00 ; '.'
000000000000007f         db  0x00 ; '.'
0000000000000080         db  0x38 ; '8'
0000000000000081         db  0x02 ; '.'
0000000000000082         db  0x00 ; '.'
0000000000000083         db  0x00 ; '.'
0000000000000084         db  0x00 ; '.'
0000000000000085         db  0x00 ; '.'
0000000000000086         db  0x00 ; '.'
0000000000000087         db  0x00 ; '.'
0000000000000088         db  0x38 ; '8'
0000000000000089         db  0x02 ; '.'
000000000000008a         db  0x00 ; '.'
000000000000008b         db  0x00 ; '.'
000000000000008c         db  0x00 ; '.'
000000000000008d         db  0x00 ; '.'
000000000000008e         db  0x00 ; '.'
000000000000008f         db  0x00 ; '.'
0000000000000090         db  0x38 ; '8'
0000000000000091         db  0x02 ; '.'
0000000000000092         db  0x00 ; '.'
0000000000000093         db  0x00 ; '.'
0000000000000094         db  0x00 ; '.'
0000000000000095         db  0x00 ; '.'
0000000000000096         db  0x00 ; '.'
0000000000000097         db  0x00 ; '.'
0000000000000098         db  0x1c ; '.'
0000000000000099         db  0x00 ; '.'
000000000000009a         db  0x00 ; '.'
000000000000009b         db  0x00 ; '.'
000000000000009c         db  0x00 ; '.'
000000000000009d         db  0x00 ; '.'
000000000000009e         db  0x00 ; '.'
000000000000009f         db  0x00 ; '.'
00000000000000a0         db  0x1c ; '.'
00000000000000a1         db  0x00 ; '.'
00000000000000a2         db  0x00 ; '.'
00000000000000a3         db  0x00 ; '.'
00000000000000a4         db  0x00 ; '.'
00000000000000a5         db  0x00 ; '.'
00000000000000a6         db  0x00 ; '.'
00000000000000a7         db  0x00 ; '.'
00000000000000a8         db  0x01 ; '.'
00000000000000a9         db  0x00 ; '.'
00000000000000aa         db  0x00 ; '.'
00000000000000ab         db  0x00 ; '.'
00000000000000ac         db  0x00 ; '.'
00000000000000ad         db  0x00 ; '.'
00000000000000ae         db  0x00 ; '.'
00000000000000af         db  0x00 ; '.'
00000000000000b0         db  0x01 ; '.'
00000000000000b1         db  0x00 ; '.'
00000000000000b2         db  0x00 ; '.'
00000000000000b3         db  0x00 ; '.'
00000000000000b4         db  0x05 ; '.'
00000000000000b5         db  0x00 ; '.'
00000000000000b6         db  0x00 ; '.'
00000000000000b7         db  0x00 ; '.'
00000000000000b8         db  0x00 ; '.'
00000000000000b9         db  0x00 ; '.'
00000000000000ba         db  0x00 ; '.'
00000000000000bb         db  0x00 ; '.'
00000000000000bc         db  0x00 ; '.'
00000000000000bd         db  0x00 ; '.'
00000000000000be         db  0x00 ; '.'
00000000000000bf         db  0x00 ; '.'
00000000000000c0         db  0x00 ; '.'
00000000000000c1         db  0x00 ; '.'
00000000000000c2         db  0x00 ; '.'
00000000000000c3         db  0x00 ; '.'
00000000000000c4         db  0x00 ; '.'
00000000000000c5         db  0x00 ; '.'
00000000000000c6         db  0x00 ; '.'
00000000000000c7         db  0x00 ; '.'
00000000000000c8         db  0x00 ; '.'
00000000000000c9         db  0x00 ; '.'
00000000000000ca         db  0x00 ; '.'
00000000000000cb         db  0x00 ; '.'
00000000000000cc         db  0x00 ; '.'
00000000000000cd         db  0x00 ; '.'
00000000000000ce         db  0x00 ; '.'
00000000000000cf         db  0x00 ; '.'
00000000000000d0         db  0x00 ; '.'
00000000000000d1         db  0xe2 ; '.'
00000000000000d2         db  0x00 ; '.'
00000000000000d3         db  0x00 ; '.'
00000000000000d4         db  0x00 ; '.'
00000000000000d5         db  0x00 ; '.'
00000000000000d6         db  0x00 ; '.'
00000000000000d7         db  0x00 ; '.'
00000000000000d8         db  0x00 ; '.'
00000000000000d9         db  0xe2 ; '.'
00000000000000da         db  0x00 ; '.'
00000000000000db         db  0x00 ; '.'
00000000000000dc         db  0x00 ; '.'
00000000000000dd         db  0x00 ; '.'
00000000000000de         db  0x00 ; '.'
00000000000000df         db  0x00 ; '.'
00000000000000e0         db  0x00 ; '.'
00000000000000e1         db  0x00 ; '.'
00000000000000e2         db  0x20 ; ' '
00000000000000e3         db  0x00 ; '.'
00000000000000e4         db  0x00 ; '.'
00000000000000e5         db  0x00 ; '.'
00000000000000e6         db  0x00 ; '.'
00000000000000e7         db  0x00 ; '.'
00000000000000e8         db  0x01 ; '.'
00000000000000e9         db  0x00 ; '.'
00000000000000ea         db  0x00 ; '.'
00000000000000eb         db  0x00 ; '.'
00000000000000ec         db  0x06 ; '.'
00000000000000ed         db  0x00 ; '.'
00000000000000ee         db  0x00 ; '.'
00000000000000ef         db  0x00 ; '.'
00000000000000f0         db  0x90 ; '.'
00000000000000f1         db  0xe9 ; '.'
00000000000000f2         db  0x00 ; '.'
00000000000000f3         db  0x00 ; '.'
00000000000000f4         db  0x00 ; '.'
00000000000000f5         db  0x00 ; '.'
00000000000000f6         db  0x00 ; '.'
00000000000000f7         db  0x00 ; '.'
00000000000000f8         db  0x90 ; '.'
00000000000000f9         db  0xe9 ; '.'
00000000000000fa         db  0x20 ; ' '
00000000000000fb         db  0x00 ; '.'
00000000000000fc         db  0x00 ; '.'
00000000000000fd         db  0x00 ; '.'
00000000000000fe         db  0x00 ; '.'
00000000000000ff         db  0x00 ; '.'
0000000000000100         db  0x90 ; '.'                                         ; DATA XREF=excise+404, cache_fstatat.constprop.3+35, quotearg_free+87, rpl_fflush+18, freadahead+20, fts_stat+144, fts_build+1222, slotvec0
0000000000000101         db  0xe9 ; '.'
0000000000000102         db  0x20 ; ' '                                         ; DATA XREF=setup_dir.isra.4, enter_dir.isra.10, leave_dir.isra.12+23, rpl_fts_close+159, rpl_fts_read+688
0000000000000103         db  0x00 ; '.'
0000000000000104         db  0x00 ; '.'
0000000000000105         db  0x00 ; '.'
0000000000000106         db  0x00 ; '.'
0000000000000107         db  0x00 ; '.'
0000000000000108         db  0x10 ; '.'
0000000000000109         db  0x07 ; '.'
000000000000010a         db  0x00 ; '.'
000000000000010b         db  0x00 ; '.'
000000000000010c         db  0x00 ; '.'
000000000000010d         db  0x00 ; '.'
000000000000010e         db  0x00 ; '.'
000000000000010f         db  0x00 ; '.'
0000000000000110         db  0xd0 ; '.'
0000000000000111         db  0x08 ; '.'
0000000000000112         db  0x00 ; '.'
0000000000000113         db  0x00 ; '.'
0000000000000114         db  0x00 ; '.'
0000000000000115         db  0x00 ; '.'
0000000000000116         db  0x00 ; '.'
0000000000000117         db  0x00 ; '.'
0000000000000118         db  0x00 ; '.'
0000000000000119         db  0x00 ; '.'
000000000000011a         db  0x20 ; ' '
000000000000011b         db  0x00 ; '.'
000000000000011c         db  0x00 ; '.'
000000000000011d         db  0x00 ; '.'
000000000000011e         db  0x00 ; '.'
000000000000011f         db  0x00 ; '.'
0000000000000120         db  0x02 ; '.'
0000000000000121         db  0x00 ; '.'
0000000000000122         db  0x00 ; '.'
0000000000000123         db  0x00 ; '.'
0000000000000124         db  0x06 ; '.'
0000000000000125         db  0x00 ; '.'
0000000000000126         db  0x00 ; '.'
0000000000000127         db  0x00 ; '.'
0000000000000128         db  0xb8 ; '.'
0000000000000129         db  0xeb ; '.'
000000000000012a         db  0x00 ; '.'
000000000000012b         db  0x00 ; '.'
000000000000012c         db  0x00 ; '.'
000000000000012d         db  0x00 ; '.'
000000000000012e         db  0x00 ; '.'
000000000000012f         db  0x00 ; '.'
0000000000000130         db  0xb8 ; '.'
0000000000000131         db  0xeb ; '.'
0000000000000132         db  0x20 ; ' '
0000000000000133         db  0x00 ; '.'
0000000000000134         db  0x00 ; '.'
0000000000000135         db  0x00 ; '.'
0000000000000136         db  0x00 ; '.'
0000000000000137         db  0x00 ; '.'
0000000000000138         db  0xb8 ; '.'
0000000000000139         db  0xeb ; '.'
000000000000013a         db  0x20 ; ' '
000000000000013b         db  0x00 ; '.'
000000000000013c         db  0x00 ; '.'
000000000000013d         db  0x00 ; '.'
000000000000013e         db  0x00 ; '.'
000000000000013f         db  0x00 ; '.'
0000000000000140         db  0xf0 ; '.'
0000000000000141         db  0x01 ; '.'
0000000000000142         db  0x00 ; '.'
0000000000000143         db  0x00 ; '.'
0000000000000144         db  0x00 ; '.'
0000000000000145         db  0x00 ; '.'
0000000000000146         db  0x00 ; '.'
0000000000000147         db  0x00 ; '.'
0000000000000148         db  0xf0 ; '.'
0000000000000149         db  0x01 ; '.'
000000000000014a         db  0x00 ; '.'
000000000000014b         db  0x00 ; '.'
000000000000014c         db  0x00 ; '.'
000000000000014d         db  0x00 ; '.'
000000000000014e         db  0x00 ; '.'
000000000000014f         db  0x00 ; '.'
0000000000000150         db  0x08 ; '.'
0000000000000151         db  0x00 ; '.'
0000000000000152         db  0x00 ; '.'
0000000000000153         db  0x00 ; '.'
0000000000000154         db  0x00 ; '.'
0000000000000155         db  0x00 ; '.'
0000000000000156         db  0x00 ; '.'
0000000000000157         db  0x00 ; '.'
0000000000000158         db  0x04 ; '.'
0000000000000159         db  0x00 ; '.'
000000000000015a         db  0x00 ; '.'
000000000000015b         db  0x00 ; '.'
000000000000015c         db  0x04 ; '.'
000000000000015d         db  0x00 ; '.'
000000000000015e         db  0x00 ; '.'
000000000000015f         db  0x00 ; '.'
0000000000000160         db  0x54 ; 'T'
0000000000000161         db  0x02 ; '.'
0000000000000162         db  0x00 ; '.'
0000000000000163         db  0x00 ; '.'
0000000000000164         db  0x00 ; '.'
0000000000000165         db  0x00 ; '.'
0000000000000166         db  0x00 ; '.'
0000000000000167         db  0x00 ; '.'
0000000000000168         db  0x54 ; 'T'
0000000000000169         db  0x02 ; '.'
000000000000016a         db  0x00 ; '.'
000000000000016b         db  0x00 ; '.'
000000000000016c         db  0x00 ; '.'
000000000000016d         db  0x00 ; '.'
000000000000016e         db  0x00 ; '.'
000000000000016f         db  0x00 ; '.'
0000000000000170         db  0x54 ; 'T'
0000000000000171         db  0x02 ; '.'
0000000000000172         db  0x00 ; '.'
0000000000000173         db  0x00 ; '.'                                         ; DATA XREF=main+971
0000000000000174         db  0x00 ; '.'
0000000000000175         db  0x00 ; '.'
0000000000000176         db  0x00 ; '.'
0000000000000177         db  0x00 ; '.'
0000000000000178         db  0x44 ; 'D'
0000000000000179         db  0x00 ; '.'
000000000000017a         db  0x00 ; '.'
000000000000017b         db  0x00 ; '.'
000000000000017c         db  0x00 ; '.'
000000000000017d         db  0x00 ; '.'
000000000000017e         db  0x00 ; '.'
000000000000017f         db  0x00 ; '.'
0000000000000180         db  0x44 ; 'D'
0000000000000181         db  0x00 ; '.'
0000000000000182         db  0x00 ; '.'
0000000000000183         db  0x00 ; '.'
0000000000000184         db  0x00 ; '.'
0000000000000185         db  0x00 ; '.'
0000000000000186         db  0x00 ; '.'
0000000000000187         db  0x00 ; '.'
0000000000000188         db  0x04 ; '.'
0000000000000189         db  0x00 ; '.'
000000000000018a         db  0x00 ; '.'
000000000000018b         db  0x00 ; '.'
000000000000018c         db  0x00 ; '.'
000000000000018d         db  0x00 ; '.'
000000000000018e         db  0x00 ; '.'
000000000000018f         db  0x00 ; '.'
0000000000000190         db  0x50 ; 'P'
0000000000000191         db  0xe5 ; '.'
0000000000000192         db  0x74 ; 't'
0000000000000193         db  0x64 ; 'd'
0000000000000194         db  0x04 ; '.'
0000000000000195         db  0x00 ; '.'
0000000000000196         db  0x00 ; '.'
0000000000000197         db  0x00 ; '.'
0000000000000198         db  0x28 ; '('
0000000000000199         db  0xc3 ; '.'
000000000000019a         db  0x00 ; '.'
000000000000019b         db  0x00 ; '.'
000000000000019c         db  0x00 ; '.'
000000000000019d         db  0x00 ; '.'
000000000000019e         db  0x00 ; '.'
000000000000019f         db  0x00 ; '.'
00000000000001a0         db  0x28 ; '('
00000000000001a1         db  0xc3 ; '.'
00000000000001a2         db  0x00 ; '.'
00000000000001a3         db  0x00 ; '.'
00000000000001a4         db  0x00 ; '.'
00000000000001a5         db  0x00 ; '.'
00000000000001a6         db  0x00 ; '.'
00000000000001a7         db  0x00 ; '.'
00000000000001a8         db  0x28 ; '('
00000000000001a9         db  0xc3 ; '.'
00000000000001aa         db  0x00 ; '.'
00000000000001ab         db  0x00 ; '.'
00000000000001ac         db  0x00 ; '.'
00000000000001ad         db  0x00 ; '.'
00000000000001ae         db  0x00 ; '.'
00000000000001af         db  0x00 ; '.'
00000000000001b0         db  0xfc ; '.'
00000000000001b1         db  0x04 ; '.'
00000000000001b2         db  0x00 ; '.'
00000000000001b3         db  0x00 ; '.'
00000000000001b4         db  0x00 ; '.'
00000000000001b5         db  0x00 ; '.'
00000000000001b6         db  0x00 ; '.'
00000000000001b7         db  0x00 ; '.'
00000000000001b8         db  0xfc ; '.'
00000000000001b9         db  0x04 ; '.'
00000000000001ba         db  0x00 ; '.'
00000000000001bb         db  0x00 ; '.'
00000000000001bc         db  0x00 ; '.'
00000000000001bd         db  0x00 ; '.'
00000000000001be         db  0x00 ; '.'
00000000000001bf         db  0x00 ; '.'
00000000000001c0         db  0x04 ; '.'
00000000000001c1         db  0x00 ; '.'
00000000000001c2         db  0x00 ; '.'
00000000000001c3         db  0x00 ; '.'
00000000000001c4         db  0x00 ; '.'
00000000000001c5         db  0x00 ; '.'
00000000000001c6         db  0x00 ; '.'
00000000000001c7         db  0x00 ; '.'
00000000000001c8         db  0x51 ; 'Q'
00000000000001c9         db  0xe5 ; '.'
00000000000001ca         db  0x74 ; 't'
00000000000001cb         db  0x64 ; 'd'
00000000000001cc         db  0x06 ; '.'
00000000000001cd         db  0x00 ; '.'
00000000000001ce         db  0x00 ; '.'
00000000000001cf         db  0x00 ; '.'
00000000000001d0         db  0x00 ; '.'
00000000000001d1         db  0x00 ; '.'
00000000000001d2         db  0x00 ; '.'
00000000000001d3         db  0x00 ; '.'
00000000000001d4         db  0x00 ; '.'
00000000000001d5         db  0x00 ; '.'
00000000000001d6         db  0x00 ; '.'
00000000000001d7         db  0x00 ; '.'
00000000000001d8         db  0x00 ; '.'
00000000000001d9         db  0x00 ; '.'
00000000000001da         db  0x00 ; '.'
00000000000001db         db  0x00 ; '.'
00000000000001dc         db  0x00 ; '.'
00000000000001dd         db  0x00 ; '.'
00000000000001de         db  0x00 ; '.'
00000000000001df         db  0x00 ; '.'
00000000000001e0         db  0x00 ; '.'
00000000000001e1         db  0x00 ; '.'
00000000000001e2         db  0x00 ; '.'
00000000000001e3         db  0x00 ; '.'
00000000000001e4         db  0x00 ; '.'
00000000000001e5         db  0x00 ; '.'
00000000000001e6         db  0x00 ; '.'
00000000000001e7         db  0x00 ; '.'
00000000000001e8         db  0x00 ; '.'
00000000000001e9         db  0x00 ; '.'
00000000000001ea         db  0x00 ; '.'
00000000000001eb         db  0x00 ; '.'
00000000000001ec         db  0x00 ; '.'
00000000000001ed         db  0x00 ; '.'
00000000000001ee         db  0x00 ; '.'
00000000000001ef         db  0x00 ; '.'
00000000000001f0         db  0x00 ; '.'
00000000000001f1         db  0x00 ; '.'
00000000000001f2         db  0x00 ; '.'
00000000000001f3         db  0x00 ; '.'
00000000000001f4         db  0x00 ; '.'
00000000000001f5         db  0x00 ; '.'
00000000000001f6         db  0x00 ; '.'
00000000000001f7         db  0x00 ; '.'
00000000000001f8         db  0x10 ; '.'
00000000000001f9         db  0x00 ; '.'
00000000000001fa         db  0x00 ; '.'
00000000000001fb         db  0x00 ; '.'
00000000000001fc         db  0x00 ; '.'
00000000000001fd         db  0x00 ; '.'
00000000000001fe         db  0x00 ; '.'
00000000000001ff         db  0x00 ; '.'
0000000000000200         db  0x52 ; 'R'                                         ; DATA XREF=prompt+1052, xfts_open+4, diropen.isra.6+20, fts_build+1173, fts_build+1365
0000000000000201         db  0xe5 ; '.'
0000000000000202         db  0x74 ; 't'
0000000000000203         db  0x64 ; 'd'
0000000000000204         db  0x04 ; '.'                                         ; DATA XREF=fts_build+1159, rpl_fts_open+30, rpl_fts_open+35, rpl_fts_open+629
0000000000000205         db  0x00 ; '.'
0000000000000206         db  0x00 ; '.'
0000000000000207         db  0x00 ; '.'
0000000000000208         db  0x90 ; '.'
0000000000000209         db  0xe9 ; '.'
000000000000020a         db  0x00 ; '.'
000000000000020b         db  0x00 ; '.'
000000000000020c         db  0x00 ; '.'
000000000000020d         db  0x00 ; '.'
000000000000020e         db  0x00 ; '.'
000000000000020f         db  0x00 ; '.'
0000000000000210         db  0x90 ; '.'
0000000000000211         db  0xe9 ; '.'
0000000000000212         db  0x20 ; ' '
0000000000000213         db  0x00 ; '.'
0000000000000214         db  0x00 ; '.'
0000000000000215         db  0x00 ; '.'
0000000000000216         db  0x00 ; '.'
0000000000000217         db  0x00 ; '.'
0000000000000218         db  0x90 ; '.'
0000000000000219         db  0xe9 ; '.'
000000000000021a         db  0x20 ; ' '
000000000000021b         db  0x00 ; '.'
000000000000021c         db  0x00 ; '.'
000000000000021d         db  0x00 ; '.'
000000000000021e         db  0x00 ; '.'
000000000000021f         db  0x00 ; '.'
0000000000000220         db  0x70 ; 'p'
0000000000000221         db  0x06 ; '.'
0000000000000222         db  0x00 ; '.'
0000000000000223         db  0x00 ; '.'
0000000000000224         db  0x00 ; '.'
0000000000000225         db  0x00 ; '.'
0000000000000226         db  0x00 ; '.'
0000000000000227         db  0x00 ; '.'
0000000000000228         db  0x70 ; 'p'
0000000000000229         db  0x06 ; '.'
000000000000022a         db  0x00 ; '.'
000000000000022b         db  0x00 ; '.'
000000000000022c         db  0x00 ; '.'
000000000000022d         db  0x00 ; '.'
000000000000022e         db  0x00 ; '.'
000000000000022f         db  0x00 ; '.'
0000000000000230         db  0x01 ; '.'
0000000000000231         db  0x00 ; '.'
0000000000000232         db  0x00 ; '.'
0000000000000233         db  0x00 ; '.'
0000000000000234         db  0x00 ; '.'
0000000000000235         db  0x00 ; '.'
0000000000000236         db  0x00 ; '.'
0000000000000237         db  0x00 ; '.'


        ; Section .interp
        ; Range: [0x238; 0x254[ (28 bytes)
        ; File offset : [568; 596[ (28 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     aLib64ldlinuxx8:
0000000000000238         db         "/lib64/ld-linux-x86-64.so.2", 0


        ; Section .note.ABI-tag
        ; Range: [0x254; 0x274[ (32 bytes)
        ; File offset : [596; 628[ (32 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000254         db  0x04 ; '.'
0000000000000255         db  0x00 ; '.'
0000000000000256         db  0x00 ; '.'
0000000000000257         db  0x00 ; '.'
0000000000000258         db  0x10 ; '.'                                         ; DATA XREF=rm+72
0000000000000259         db  0x00 ; '.'
000000000000025a         db  0x00 ; '.'
000000000000025b         db  0x00 ; '.'
000000000000025c         db  0x01 ; '.'
000000000000025d         db  0x00 ; '.'
000000000000025e         db  0x00 ; '.'
000000000000025f         db  0x00 ; '.'
0000000000000260         db  0x47 ; 'G'
0000000000000261         db  0x4e ; 'N'                                         ; DATA XREF=sub_3510+966
0000000000000262         db  0x55 ; 'U'
0000000000000263         db  0x00 ; '.'
0000000000000264         db  0x00 ; '.'
0000000000000265         db  0x00 ; '.'
0000000000000266         db  0x00 ; '.'
0000000000000267         db  0x00 ; '.'
0000000000000268         db  0x03 ; '.'
0000000000000269         db  0x00 ; '.'
000000000000026a         db  0x00 ; '.'
000000000000026b         db  0x00 ; '.'
000000000000026c         db  0x02 ; '.'
000000000000026d         db  0x00 ; '.'
000000000000026e         db  0x00 ; '.'
000000000000026f         db  0x00 ; '.'
0000000000000270         db  0x00 ; '.'
0000000000000271         db  0x00 ; '.'
0000000000000272         db  0x00 ; '.'
0000000000000273         db  0x00 ; '.'


        ; Section .note.gnu.build-id
        ; Range: [0x274; 0x298[ (36 bytes)
        ; File offset : [628; 664[ (36 bytes)
        ; Flags: 0x2
        ;   SHT_NOTE
        ;   SHF_ALLOC

0000000000000274         db  0x04 ; '.'
0000000000000275         db  0x00 ; '.'
0000000000000276         db  0x00 ; '.'
0000000000000277         db  0x00 ; '.'
0000000000000278         db  0x14 ; '.'
0000000000000279         db  0x00 ; '.'
000000000000027a         db  0x00 ; '.'
000000000000027b         db  0x00 ; '.'
000000000000027c         db  0x03 ; '.'
000000000000027d         db  0x00 ; '.'
000000000000027e         db  0x00 ; '.'
000000000000027f         db  0x00 ; '.'
0000000000000280         db  0x47 ; 'G'
0000000000000281         db  0x4e ; 'N'
0000000000000282         db  0x55 ; 'U'
0000000000000283         db  0x00 ; '.'
0000000000000284         db  0x86 ; '.'
0000000000000285         db  0xe1 ; '.'
0000000000000286         db  0xa1 ; '.'
0000000000000287         db  0x7d ; '}'
0000000000000288         db  0xca ; '.'
0000000000000289         db  0xf0 ; '.'
000000000000028a         db  0x9e ; '.'
000000000000028b         db  0x27 ; '''
000000000000028c         db  0xc4 ; '.'
000000000000028d         db  0x91 ; '.'
000000000000028e         db  0x27 ; '''
000000000000028f         db  0x1e ; '.'
0000000000000290         db  0x52 ; 'R'
0000000000000291         db  0x68 ; 'h'
0000000000000292         db  0x79 ; 'y'
0000000000000293         db  0xae ; '.'
0000000000000294         db  0xca ; '.'
0000000000000295         db  0xb2 ; '.'
0000000000000296         db  0xf9 ; '.'
0000000000000297         db  0xa9 ; '.'


        ; Section .gnu.hash
        ; Range: [0x298; 0x2e0[ (72 bytes)
        ; File offset : [664; 736[ (72 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000298         db  0x03 ; '.'
0000000000000299         db  0x00 ; '.'
000000000000029a         db  0x00 ; '.'
000000000000029b         db  0x00 ; '.'
000000000000029c         db  0x48 ; 'H'
000000000000029d         db  0x00 ; '.'
000000000000029e         db  0x00 ; '.'
000000000000029f         db  0x00 ; '.'
00000000000002a0         db  0x01 ; '.'
00000000000002a1         db  0x00 ; '.'
00000000000002a2         db  0x00 ; '.'
00000000000002a3         db  0x00 ; '.'
00000000000002a4         db  0x06 ; '.'
00000000000002a5         db  0x00 ; '.'
00000000000002a6         db  0x00 ; '.'
00000000000002a7         db  0x00 ; '.'
00000000000002a8         db  0x04 ; '.'
00000000000002a9         db  0x4d ; 'M'
00000000000002aa         db  0x61 ; 'a'
00000000000002ab         db  0x00 ; '.'
00000000000002ac         db  0xa0 ; '.'
00000000000002ad         db  0x01 ; '.'
00000000000002ae         db  0x1c ; '.'
00000000000002af         db  0x12 ; '.'
00000000000002b0         db  0x48 ; 'H'
00000000000002b1         db  0x00 ; '.'
00000000000002b2         db  0x00 ; '.'
00000000000002b3         db  0x00 ; '.'
00000000000002b4         db  0x49 ; 'I'
00000000000002b5         db  0x00 ; '.'
00000000000002b6         db  0x00 ; '.'
00000000000002b7         db  0x00 ; '.'
00000000000002b8         db  0x4f ; 'O'
00000000000002b9         db  0x00 ; '.'
00000000000002ba         db  0x00 ; '.'
00000000000002bb         db  0x00 ; '.'
00000000000002bc         db  0x29 ; ')'
00000000000002bd         db  0x1d ; '.'
00000000000002be         db  0x8c ; '.'
00000000000002bf         db  0x1c ; '.'
00000000000002c0         db  0xbc ; '.'
00000000000002c1         db  0x50 ; 'P'
00000000000002c2         db  0x76 ; 'v'
00000000000002c3         db  0x9e ; '.'
00000000000002c4         db  0x66 ; 'f'
00000000000002c5         db  0x55 ; 'U'
00000000000002c6         db  0x61 ; 'a'
00000000000002c7         db  0x10 ; '.'
00000000000002c8         db  0x96 ; '.'
00000000000002c9         db  0xa0 ; '.'
00000000000002ca         db  0x89 ; '.'
00000000000002cb         db  0x97 ; '.'
00000000000002cc         db  0xce ; '.'
00000000000002cd         db  0x2c ; ','
00000000000002ce         db  0x63 ; 'c'
00000000000002cf         db  0x72 ; 'r'
00000000000002d0         db  0xe4 ; '.'
00000000000002d1         db  0x62 ; 'b'
00000000000002d2         db  0x41 ; 'A'
00000000000002d3         db  0xf5 ; '.'
00000000000002d4         db  0x39 ; '9'
00000000000002d5         db  0xf2 ; '.'
00000000000002d6         db  0x8b ; '.'
00000000000002d7         db  0x1c ; '.'
00000000000002d8         db  0x32 ; '2'
00000000000002d9         db  0xc4 ; '.'
00000000000002da         db  0xf7 ; '.'
00000000000002db         db  0x12 ; '.'
00000000000002dc         db  0xb3 ; '.'
00000000000002dd         db  0xa2 ; '.'
00000000000002de         db  0xf7 ; '.'
00000000000002df         db  0x12 ; '.'


        ; Section .dynsym
        ; Range: [0x2e0; 0xa78[ (1944 bytes)
        ; File offset : [736; 2680[ (1944 bytes)
        ; Flags: 0x2
        ;   SHT_DYNSYM
        ;   SHF_ALLOC

00000000000002e0         db  0x00 ; '.'
00000000000002e1         db  0x00 ; '.'
00000000000002e2         db  0x00 ; '.'
00000000000002e3         db  0x00 ; '.'
00000000000002e4         db  0x00 ; '.'
00000000000002e5         db  0x00 ; '.'
00000000000002e6         db  0x00 ; '.'
00000000000002e7         db  0x00 ; '.'
00000000000002e8         db  0x00 ; '.'
00000000000002e9         db  0x00 ; '.'
00000000000002ea         db  0x00 ; '.'
00000000000002eb         db  0x00 ; '.'
00000000000002ec         db  0x00 ; '.'
00000000000002ed         db  0x00 ; '.'
00000000000002ee         db  0x00 ; '.'
00000000000002ef         db  0x00 ; '.'
00000000000002f0         db  0x00 ; '.'
00000000000002f1         db  0x00 ; '.'
00000000000002f2         db  0x00 ; '.'
00000000000002f3         db  0x00 ; '.'
00000000000002f4         db  0x00 ; '.'
00000000000002f5         db  0x00 ; '.'
00000000000002f6         db  0x00 ; '.'
00000000000002f7         db  0x00 ; '.'
00000000000002f8         db  0xb9 ; '.'
00000000000002f9         db  0x02 ; '.'
00000000000002fa         db  0x00 ; '.'
00000000000002fb         db  0x00 ; '.'
00000000000002fc         db  0x12 ; '.'
00000000000002fd         db  0x00 ; '.'
00000000000002fe         db  0x00 ; '.'
00000000000002ff         db  0x00 ; '.'
0000000000000300         db  0x00 ; '.'
0000000000000301         db  0x00 ; '.'
0000000000000302         db  0x00 ; '.'
0000000000000303         db  0x00 ; '.'
0000000000000304         db  0x00 ; '.'
0000000000000305         db  0x00 ; '.'
0000000000000306         db  0x00 ; '.'
0000000000000307         db  0x00 ; '.'
0000000000000308         db  0x00 ; '.'
0000000000000309         db  0x00 ; '.'
000000000000030a         db  0x00 ; '.'
000000000000030b         db  0x00 ; '.'
000000000000030c         db  0x00 ; '.'
000000000000030d         db  0x00 ; '.'
000000000000030e         db  0x00 ; '.'
000000000000030f         db  0x00 ; '.'
0000000000000310         db  0xbf ; '.'
0000000000000311         db  0x00 ; '.'
0000000000000312         db  0x00 ; '.'
0000000000000313         db  0x00 ; '.'
0000000000000314         db  0x12 ; '.'
0000000000000315         db  0x00 ; '.'
0000000000000316         db  0x00 ; '.'
0000000000000317         db  0x00 ; '.'
0000000000000318         db  0x00 ; '.'
0000000000000319         db  0x00 ; '.'
000000000000031a         db  0x00 ; '.'
000000000000031b         db  0x00 ; '.'
000000000000031c         db  0x00 ; '.'
000000000000031d         db  0x00 ; '.'
000000000000031e         db  0x00 ; '.'
000000000000031f         db  0x00 ; '.'
0000000000000320         db  0x00 ; '.'
0000000000000321         db  0x00 ; '.'
0000000000000322         db  0x00 ; '.'
0000000000000323         db  0x00 ; '.'
0000000000000324         db  0x00 ; '.'
0000000000000325         db  0x00 ; '.'
0000000000000326         db  0x00 ; '.'
0000000000000327         db  0x00 ; '.'
0000000000000328         db  0x2a ; '*'
0000000000000329         db  0x01 ; '.'
000000000000032a         db  0x00 ; '.'
000000000000032b         db  0x00 ; '.'
000000000000032c         db  0x12 ; '.'
000000000000032d         db  0x00 ; '.'
000000000000032e         db  0x00 ; '.'
000000000000032f         db  0x00 ; '.'
0000000000000330         db  0x00 ; '.'
0000000000000331         db  0x00 ; '.'
0000000000000332         db  0x00 ; '.'
0000000000000333         db  0x00 ; '.'
0000000000000334         db  0x00 ; '.'
0000000000000335         db  0x00 ; '.'
0000000000000336         db  0x00 ; '.'
0000000000000337         db  0x00 ; '.'
0000000000000338         db  0x00 ; '.'
0000000000000339         db  0x00 ; '.'
000000000000033a         db  0x00 ; '.'
000000000000033b         db  0x00 ; '.'
000000000000033c         db  0x00 ; '.'
000000000000033d         db  0x00 ; '.'
000000000000033e         db  0x00 ; '.'
000000000000033f         db  0x00 ; '.'
0000000000000340         db  0x39 ; '9'
0000000000000341         db  0x00 ; '.'
0000000000000342         db  0x00 ; '.'
0000000000000343         db  0x00 ; '.'
0000000000000344         db  0x12 ; '.'
0000000000000345         db  0x00 ; '.'
0000000000000346         db  0x00 ; '.'
0000000000000347         db  0x00 ; '.'
0000000000000348         db  0x00 ; '.'
0000000000000349         db  0x00 ; '.'
000000000000034a         db  0x00 ; '.'
000000000000034b         db  0x00 ; '.'
000000000000034c         db  0x00 ; '.'
000000000000034d         db  0x00 ; '.'
000000000000034e         db  0x00 ; '.'
000000000000034f         db  0x00 ; '.'
0000000000000350         db  0x00 ; '.'
0000000000000351         db  0x00 ; '.'
0000000000000352         db  0x00 ; '.'
0000000000000353         db  0x00 ; '.'
0000000000000354         db  0x00 ; '.'
0000000000000355         db  0x00 ; '.'
0000000000000356         db  0x00 ; '.'
0000000000000357         db  0x00 ; '.'
0000000000000358         db  0x1d ; '.'
0000000000000359         db  0x03 ; '.'
000000000000035a         db  0x00 ; '.'
000000000000035b         db  0x00 ; '.'
000000000000035c         db  0x20 ; ' '
000000000000035d         db  0x00 ; '.'
000000000000035e         db  0x00 ; '.'
000000000000035f         db  0x00 ; '.'
0000000000000360         db  0x00 ; '.'
0000000000000361         db  0x00 ; '.'
0000000000000362         db  0x00 ; '.'
0000000000000363         db  0x00 ; '.'
0000000000000364         db  0x00 ; '.'
0000000000000365         db  0x00 ; '.'
0000000000000366         db  0x00 ; '.'
0000000000000367         db  0x00 ; '.'
0000000000000368         db  0x00 ; '.'
0000000000000369         db  0x00 ; '.'
000000000000036a         db  0x00 ; '.'
000000000000036b         db  0x00 ; '.'
000000000000036c         db  0x00 ; '.'
000000000000036d         db  0x00 ; '.'
000000000000036e         db  0x00 ; '.'
000000000000036f         db  0x00 ; '.'
0000000000000370         db  0xcb ; '.'
0000000000000371         db  0x00 ; '.'
0000000000000372         db  0x00 ; '.'
0000000000000373         db  0x00 ; '.'
0000000000000374         db  0x12 ; '.'
0000000000000375         db  0x00 ; '.'
0000000000000376         db  0x00 ; '.'
0000000000000377         db  0x00 ; '.'
0000000000000378         db  0x00 ; '.'
0000000000000379         db  0x00 ; '.'
000000000000037a         db  0x00 ; '.'
000000000000037b         db  0x00 ; '.'
000000000000037c         db  0x00 ; '.'
000000000000037d         db  0x00 ; '.'
000000000000037e         db  0x00 ; '.'
000000000000037f         db  0x00 ; '.'
0000000000000380         db  0x00 ; '.'
0000000000000381         db  0x00 ; '.'
0000000000000382         db  0x00 ; '.'
0000000000000383         db  0x00 ; '.'
0000000000000384         db  0x00 ; '.'
0000000000000385         db  0x00 ; '.'
0000000000000386         db  0x00 ; '.'
0000000000000387         db  0x00 ; '.'
0000000000000388         db  0xf5 ; '.'
0000000000000389         db  0x01 ; '.'
000000000000038a         db  0x00 ; '.'
000000000000038b         db  0x00 ; '.'
000000000000038c         db  0x12 ; '.'
000000000000038d         db  0x00 ; '.'
000000000000038e         db  0x00 ; '.'
000000000000038f         db  0x00 ; '.'
0000000000000390         db  0x00 ; '.'
0000000000000391         db  0x00 ; '.'
0000000000000392         db  0x00 ; '.'
0000000000000393         db  0x00 ; '.'
0000000000000394         db  0x00 ; '.'
0000000000000395         db  0x00 ; '.'
0000000000000396         db  0x00 ; '.'
0000000000000397         db  0x00 ; '.'
0000000000000398         db  0x00 ; '.'
0000000000000399         db  0x00 ; '.'
000000000000039a         db  0x00 ; '.'
000000000000039b         db  0x00 ; '.'
000000000000039c         db  0x00 ; '.'
000000000000039d         db  0x00 ; '.'
000000000000039e         db  0x00 ; '.'
000000000000039f         db  0x00 ; '.'
00000000000003a0         db  0x6d ; 'm'
00000000000003a1         db  0x00 ; '.'
00000000000003a2         db  0x00 ; '.'
00000000000003a3         db  0x00 ; '.'
00000000000003a4         db  0x12 ; '.'
00000000000003a5         db  0x00 ; '.'
00000000000003a6         db  0x00 ; '.'
00000000000003a7         db  0x00 ; '.'
00000000000003a8         db  0x00 ; '.'
00000000000003a9         db  0x00 ; '.'
00000000000003aa         db  0x00 ; '.'
00000000000003ab         db  0x00 ; '.'
00000000000003ac         db  0x00 ; '.'
00000000000003ad         db  0x00 ; '.'
00000000000003ae         db  0x00 ; '.'
00000000000003af         db  0x00 ; '.'
00000000000003b0         db  0x00 ; '.'
00000000000003b1         db  0x00 ; '.'
00000000000003b2         db  0x00 ; '.'
00000000000003b3         db  0x00 ; '.'
00000000000003b4         db  0x00 ; '.'
00000000000003b5         db  0x00 ; '.'
00000000000003b6         db  0x00 ; '.'
00000000000003b7         db  0x00 ; '.'
00000000000003b8         db  0x23 ; '#'
00000000000003b9         db  0x02 ; '.'
00000000000003ba         db  0x00 ; '.'
00000000000003bb         db  0x00 ; '.'
00000000000003bc         db  0x12 ; '.'
00000000000003bd         db  0x00 ; '.'
00000000000003be         db  0x00 ; '.'
00000000000003bf         db  0x00 ; '.'
00000000000003c0         db  0x00 ; '.'
00000000000003c1         db  0x00 ; '.'
00000000000003c2         db  0x00 ; '.'
00000000000003c3         db  0x00 ; '.'
00000000000003c4         db  0x00 ; '.'
00000000000003c5         db  0x00 ; '.'
00000000000003c6         db  0x00 ; '.'
00000000000003c7         db  0x00 ; '.'
00000000000003c8         db  0x00 ; '.'
00000000000003c9         db  0x00 ; '.'
00000000000003ca         db  0x00 ; '.'
00000000000003cb         db  0x00 ; '.'
00000000000003cc         db  0x00 ; '.'
00000000000003cd         db  0x00 ; '.'
00000000000003ce         db  0x00 ; '.'
00000000000003cf         db  0x00 ; '.'
00000000000003d0         db  0x0e ; '.'
00000000000003d1         db  0x01 ; '.'
00000000000003d2         db  0x00 ; '.'
00000000000003d3         db  0x00 ; '.'
00000000000003d4         db  0x12 ; '.'
00000000000003d5         db  0x00 ; '.'
00000000000003d6         db  0x00 ; '.'
00000000000003d7         db  0x00 ; '.'
00000000000003d8         db  0x00 ; '.'
00000000000003d9         db  0x00 ; '.'
00000000000003da         db  0x00 ; '.'
00000000000003db         db  0x00 ; '.'
00000000000003dc         db  0x00 ; '.'
00000000000003dd         db  0x00 ; '.'
00000000000003de         db  0x00 ; '.'
00000000000003df         db  0x00 ; '.'
00000000000003e0         db  0x00 ; '.'
00000000000003e1         db  0x00 ; '.'
00000000000003e2         db  0x00 ; '.'
00000000000003e3         db  0x00 ; '.'
00000000000003e4         db  0x00 ; '.'
00000000000003e5         db  0x00 ; '.'
00000000000003e6         db  0x00 ; '.'
00000000000003e7         db  0x00 ; '.'
00000000000003e8         db  0x6f ; 'o'
00000000000003e9         db  0x02 ; '.'
00000000000003ea         db  0x00 ; '.'
00000000000003eb         db  0x00 ; '.'
00000000000003ec         db  0x12 ; '.'
00000000000003ed         db  0x00 ; '.'
00000000000003ee         db  0x00 ; '.'
00000000000003ef         db  0x00 ; '.'
00000000000003f0         db  0x00 ; '.'
00000000000003f1         db  0x00 ; '.'
00000000000003f2         db  0x00 ; '.'
00000000000003f3         db  0x00 ; '.'
00000000000003f4         db  0x00 ; '.'
00000000000003f5         db  0x00 ; '.'
00000000000003f6         db  0x00 ; '.'
00000000000003f7         db  0x00 ; '.'
00000000000003f8         db  0x00 ; '.'
00000000000003f9         db  0x00 ; '.'
00000000000003fa         db  0x00 ; '.'
00000000000003fb         db  0x00 ; '.'
00000000000003fc         db  0x00 ; '.'
00000000000003fd         db  0x00 ; '.'
00000000000003fe         db  0x00 ; '.'
00000000000003ff         db  0x00 ; '.'
0000000000000400         db  0x38 ; '8'                                         ; DATA XREF=rpl_fcntl+288
0000000000000401         db  0x02 ; '.'                                         ; DATA XREF=rpl_fcntl+272
0000000000000402         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+280
0000000000000403         db  0x00 ; '.'
0000000000000404         db  0x12 ; '.'
0000000000000405         db  0x00 ; '.'
0000000000000406         db  0x00 ; '.'                                         ; DATA XREF=fts_build+2307, rpl_fcntl+81, rpl_fcntl+123, rpl_fcntl+264
0000000000000407         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+256
0000000000000408         db  0x00 ; '.'
0000000000000409         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+336
000000000000040a         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+350
000000000000040b         db  0x00 ; '.'
000000000000040c         db  0x00 ; '.'
000000000000040d         db  0x00 ; '.'
000000000000040e         db  0x00 ; '.'
000000000000040f         db  0x00 ; '.'
0000000000000410         db  0x00 ; '.'
0000000000000411         db  0x00 ; '.'
0000000000000412         db  0x00 ; '.'
0000000000000413         db  0x00 ; '.'
0000000000000414         db  0x00 ; '.'
0000000000000415         db  0x00 ; '.'
0000000000000416         db  0x00 ; '.'
0000000000000417         db  0x00 ; '.'
0000000000000418         db  0x59 ; 'Y'
0000000000000419         db  0x02 ; '.'
000000000000041a         db  0x00 ; '.'
000000000000041b         db  0x00 ; '.'
000000000000041c         db  0x12 ; '.'
000000000000041d         db  0x00 ; '.'
000000000000041e         db  0x00 ; '.'
000000000000041f         db  0x00 ; '.'
0000000000000420         db  0x00 ; '.'
0000000000000421         db  0x00 ; '.'
0000000000000422         db  0x00 ; '.'
0000000000000423         db  0x00 ; '.'
0000000000000424         db  0x00 ; '.'
0000000000000425         db  0x00 ; '.'
0000000000000426         db  0x00 ; '.'
0000000000000427         db  0x00 ; '.'
0000000000000428         db  0x00 ; '.'
0000000000000429         db  0x00 ; '.'
000000000000042a         db  0x00 ; '.'
000000000000042b         db  0x00 ; '.'
000000000000042c         db  0x00 ; '.'
000000000000042d         db  0x00 ; '.'
000000000000042e         db  0x00 ; '.'
000000000000042f         db  0x00 ; '.'
0000000000000430         db  0x6c ; 'l'
0000000000000431         db  0x01 ; '.'
0000000000000432         db  0x00 ; '.'
0000000000000433         db  0x00 ; '.'
0000000000000434         db  0x12 ; '.'
0000000000000435         db  0x00 ; '.'
0000000000000436         db  0x00 ; '.'
0000000000000437         db  0x00 ; '.'
0000000000000438         db  0x00 ; '.'
0000000000000439         db  0x00 ; '.'
000000000000043a         db  0x00 ; '.'
000000000000043b         db  0x00 ; '.'
000000000000043c         db  0x00 ; '.'
000000000000043d         db  0x00 ; '.'
000000000000043e         db  0x00 ; '.'
000000000000043f         db  0x00 ; '.'
0000000000000440         db  0x00 ; '.'
0000000000000441         db  0x00 ; '.'
0000000000000442         db  0x00 ; '.'
0000000000000443         db  0x00 ; '.'
0000000000000444         db  0x00 ; '.'
0000000000000445         db  0x00 ; '.'
0000000000000446         db  0x00 ; '.'
0000000000000447         db  0x00 ; '.'
0000000000000448         db  0x55 ; 'U'
0000000000000449         db  0x02 ; '.'
000000000000044a         db  0x00 ; '.'
000000000000044b         db  0x00 ; '.'
000000000000044c         db  0x12 ; '.'
000000000000044d         db  0x00 ; '.'
000000000000044e         db  0x00 ; '.'
000000000000044f         db  0x00 ; '.'
0000000000000450         db  0x00 ; '.'
0000000000000451         db  0x00 ; '.'
0000000000000452         db  0x00 ; '.'
0000000000000453         db  0x00 ; '.'
0000000000000454         db  0x00 ; '.'
0000000000000455         db  0x00 ; '.'
0000000000000456         db  0x00 ; '.'
0000000000000457         db  0x00 ; '.'
0000000000000458         db  0x00 ; '.'
0000000000000459         db  0x00 ; '.'
000000000000045a         db  0x00 ; '.'
000000000000045b         db  0x00 ; '.'
000000000000045c         db  0x00 ; '.'
000000000000045d         db  0x00 ; '.'
000000000000045e         db  0x00 ; '.'
000000000000045f         db  0x00 ; '.'
0000000000000460         db  0x63 ; 'c'
0000000000000461         db  0x00 ; '.'
0000000000000462         db  0x00 ; '.'
0000000000000463         db  0x00 ; '.'
0000000000000464         db  0x12 ; '.'
0000000000000465         db  0x00 ; '.'
0000000000000466         db  0x00 ; '.'
0000000000000467         db  0x00 ; '.'
0000000000000468         db  0x00 ; '.'
0000000000000469         db  0x00 ; '.'
000000000000046a         db  0x00 ; '.'
000000000000046b         db  0x00 ; '.'
000000000000046c         db  0x00 ; '.'
000000000000046d         db  0x00 ; '.'
000000000000046e         db  0x00 ; '.'
000000000000046f         db  0x00 ; '.'
0000000000000470         db  0x00 ; '.'
0000000000000471         db  0x00 ; '.'
0000000000000472         db  0x00 ; '.'
0000000000000473         db  0x00 ; '.'
0000000000000474         db  0x00 ; '.'
0000000000000475         db  0x00 ; '.'
0000000000000476         db  0x00 ; '.'
0000000000000477         db  0x00 ; '.'
0000000000000478         db  0xf7 ; '.'
0000000000000479         db  0x00 ; '.'
000000000000047a         db  0x00 ; '.'
000000000000047b         db  0x00 ; '.'
000000000000047c         db  0x12 ; '.'
000000000000047d         db  0x00 ; '.'
000000000000047e         db  0x00 ; '.'
000000000000047f         db  0x00 ; '.'
0000000000000480         db  0x00 ; '.'
0000000000000481         db  0x00 ; '.'
0000000000000482         db  0x00 ; '.'
0000000000000483         db  0x00 ; '.'
0000000000000484         db  0x00 ; '.'
0000000000000485         db  0x00 ; '.'
0000000000000486         db  0x00 ; '.'
0000000000000487         db  0x00 ; '.'
0000000000000488         db  0x00 ; '.'
0000000000000489         db  0x00 ; '.'
000000000000048a         db  0x00 ; '.'
000000000000048b         db  0x00 ; '.'
000000000000048c         db  0x00 ; '.'
000000000000048d         db  0x00 ; '.'
000000000000048e         db  0x00 ; '.'
000000000000048f         db  0x00 ; '.'
0000000000000490         db  0x1c ; '.'
0000000000000491         db  0x01 ; '.'
0000000000000492         db  0x00 ; '.'
0000000000000493         db  0x00 ; '.'
0000000000000494         db  0x12 ; '.'
0000000000000495         db  0x00 ; '.'
0000000000000496         db  0x00 ; '.'
0000000000000497         db  0x00 ; '.'
0000000000000498         db  0x00 ; '.'
0000000000000499         db  0x00 ; '.'
000000000000049a         db  0x00 ; '.'
000000000000049b         db  0x00 ; '.'
000000000000049c         db  0x00 ; '.'
000000000000049d         db  0x00 ; '.'
000000000000049e         db  0x00 ; '.'
000000000000049f         db  0x00 ; '.'
00000000000004a0         db  0x00 ; '.'
00000000000004a1         db  0x00 ; '.'
00000000000004a2         db  0x00 ; '.'
00000000000004a3         db  0x00 ; '.'
00000000000004a4         db  0x00 ; '.'
00000000000004a5         db  0x00 ; '.'
00000000000004a6         db  0x00 ; '.'
00000000000004a7         db  0x00 ; '.'
00000000000004a8         db  0x9d ; '.'
00000000000004a9         db  0x00 ; '.'
00000000000004aa         db  0x00 ; '.'
00000000000004ab         db  0x00 ; '.'
00000000000004ac         db  0x12 ; '.'
00000000000004ad         db  0x00 ; '.'
00000000000004ae         db  0x00 ; '.'
00000000000004af         db  0x00 ; '.'
00000000000004b0         db  0x00 ; '.'
00000000000004b1         db  0x00 ; '.'
00000000000004b2         db  0x00 ; '.'
00000000000004b3         db  0x00 ; '.'
00000000000004b4         db  0x00 ; '.'
00000000000004b5         db  0x00 ; '.'
00000000000004b6         db  0x00 ; '.'
00000000000004b7         db  0x00 ; '.'
00000000000004b8         db  0x00 ; '.'
00000000000004b9         db  0x00 ; '.'
00000000000004ba         db  0x00 ; '.'
00000000000004bb         db  0x00 ; '.'
00000000000004bc         db  0x00 ; '.'
00000000000004bd         db  0x00 ; '.'
00000000000004be         db  0x00 ; '.'
00000000000004bf         db  0x00 ; '.'
00000000000004c0         db  0x3e ; '>'
00000000000004c1         db  0x02 ; '.'
00000000000004c2         db  0x00 ; '.'
00000000000004c3         db  0x00 ; '.'
00000000000004c4         db  0x12 ; '.'
00000000000004c5         db  0x00 ; '.'
00000000000004c6         db  0x00 ; '.'
00000000000004c7         db  0x00 ; '.'
00000000000004c8         db  0x00 ; '.'
00000000000004c9         db  0x00 ; '.'
00000000000004ca         db  0x00 ; '.'
00000000000004cb         db  0x00 ; '.'
00000000000004cc         db  0x00 ; '.'
00000000000004cd         db  0x00 ; '.'
00000000000004ce         db  0x00 ; '.'
00000000000004cf         db  0x00 ; '.'
00000000000004d0         db  0x00 ; '.'
00000000000004d1         db  0x00 ; '.'
00000000000004d2         db  0x00 ; '.'
00000000000004d3         db  0x00 ; '.'
00000000000004d4         db  0x00 ; '.'
00000000000004d5         db  0x00 ; '.'
00000000000004d6         db  0x00 ; '.'
00000000000004d7         db  0x00 ; '.'
00000000000004d8         db  0x8c ; '.'
00000000000004d9         db  0x00 ; '.'
00000000000004da         db  0x00 ; '.'
00000000000004db         db  0x00 ; '.'
00000000000004dc         db  0x12 ; '.'
00000000000004dd         db  0x00 ; '.'
00000000000004de         db  0x00 ; '.'
00000000000004df         db  0x00 ; '.'
00000000000004e0         db  0x00 ; '.'
00000000000004e1         db  0x00 ; '.'
00000000000004e2         db  0x00 ; '.'
00000000000004e3         db  0x00 ; '.'
00000000000004e4         db  0x00 ; '.'
00000000000004e5         db  0x00 ; '.'
00000000000004e6         db  0x00 ; '.'
00000000000004e7         db  0x00 ; '.'
00000000000004e8         db  0x00 ; '.'
00000000000004e9         db  0x00 ; '.'
00000000000004ea         db  0x00 ; '.'
00000000000004eb         db  0x00 ; '.'
00000000000004ec         db  0x00 ; '.'
00000000000004ed         db  0x00 ; '.'
00000000000004ee         db  0x00 ; '.'
00000000000004ef         db  0x00 ; '.'
00000000000004f0         db  0xbf ; '.'
00000000000004f1         db  0x01 ; '.'
00000000000004f2         db  0x00 ; '.'
00000000000004f3         db  0x00 ; '.'
00000000000004f4         db  0x12 ; '.'
00000000000004f5         db  0x00 ; '.'
00000000000004f6         db  0x00 ; '.'
00000000000004f7         db  0x00 ; '.'
00000000000004f8         db  0x00 ; '.'
00000000000004f9         db  0x00 ; '.'
00000000000004fa         db  0x00 ; '.'
00000000000004fb         db  0x00 ; '.'
00000000000004fc         db  0x00 ; '.'
00000000000004fd         db  0x00 ; '.'
00000000000004fe         db  0x00 ; '.'
00000000000004ff         db  0x00 ; '.'
0000000000000500         db  0x00 ; '.'
0000000000000501         db  0x00 ; '.'
0000000000000502         db  0x00 ; '.'
0000000000000503         db  0x00 ; '.'
0000000000000504         db  0x00 ; '.'
0000000000000505         db  0x00 ; '.'
0000000000000506         db  0x00 ; '.'
0000000000000507         db  0x00 ; '.'
0000000000000508         db  0x31 ; '1'
0000000000000509         db  0x00 ; '.'
000000000000050a         db  0x00 ; '.'
000000000000050b         db  0x00 ; '.'
000000000000050c         db  0x12 ; '.'
000000000000050d         db  0x00 ; '.'
000000000000050e         db  0x00 ; '.'
000000000000050f         db  0x00 ; '.'
0000000000000510         db  0x00 ; '.'
0000000000000511         db  0x00 ; '.'
0000000000000512         db  0x00 ; '.'
0000000000000513         db  0x00 ; '.'
0000000000000514         db  0x00 ; '.'
0000000000000515         db  0x00 ; '.'
0000000000000516         db  0x00 ; '.'
0000000000000517         db  0x00 ; '.'
0000000000000518         db  0x00 ; '.'
0000000000000519         db  0x00 ; '.'
000000000000051a         db  0x00 ; '.'
000000000000051b         db  0x00 ; '.'
000000000000051c         db  0x00 ; '.'
000000000000051d         db  0x00 ; '.'
000000000000051e         db  0x00 ; '.'
000000000000051f         db  0x00 ; '.'
0000000000000520         db  0x64 ; 'd'
0000000000000521         db  0x02 ; '.'
0000000000000522         db  0x00 ; '.'
0000000000000523         db  0x00 ; '.'
0000000000000524         db  0x12 ; '.'
0000000000000525         db  0x00 ; '.'
0000000000000526         db  0x00 ; '.'
0000000000000527         db  0x00 ; '.'
0000000000000528         db  0x00 ; '.'
0000000000000529         db  0x00 ; '.'
000000000000052a         db  0x00 ; '.'
000000000000052b         db  0x00 ; '.'
000000000000052c         db  0x00 ; '.'
000000000000052d         db  0x00 ; '.'
000000000000052e         db  0x00 ; '.'
000000000000052f         db  0x00 ; '.'
0000000000000530         db  0x00 ; '.'
0000000000000531         db  0x00 ; '.'
0000000000000532         db  0x00 ; '.'
0000000000000533         db  0x00 ; '.'
0000000000000534         db  0x00 ; '.'
0000000000000535         db  0x00 ; '.'
0000000000000536         db  0x00 ; '.'
0000000000000537         db  0x00 ; '.'
0000000000000538         db  0x9f ; '.'
0000000000000539         db  0x02 ; '.'
000000000000053a         db  0x00 ; '.'
000000000000053b         db  0x00 ; '.'
000000000000053c         db  0x12 ; '.'
000000000000053d         db  0x00 ; '.'
000000000000053e         db  0x00 ; '.'
000000000000053f         db  0x00 ; '.'
0000000000000540         db  0x00 ; '.'
0000000000000541         db  0x00 ; '.'
0000000000000542         db  0x00 ; '.'
0000000000000543         db  0x00 ; '.'
0000000000000544         db  0x00 ; '.'
0000000000000545         db  0x00 ; '.'
0000000000000546         db  0x00 ; '.'
0000000000000547         db  0x00 ; '.'
0000000000000548         db  0x00 ; '.'
0000000000000549         db  0x00 ; '.'
000000000000054a         db  0x00 ; '.'
000000000000054b         db  0x00 ; '.'
000000000000054c         db  0x00 ; '.'
000000000000054d         db  0x00 ; '.'
000000000000054e         db  0x00 ; '.'
000000000000054f         db  0x00 ; '.'
0000000000000550         db  0x53 ; 'S'
0000000000000551         db  0x00 ; '.'
0000000000000552         db  0x00 ; '.'
0000000000000553         db  0x00 ; '.'
0000000000000554         db  0x12 ; '.'
0000000000000555         db  0x00 ; '.'
0000000000000556         db  0x00 ; '.'
0000000000000557         db  0x00 ; '.'
0000000000000558         db  0x00 ; '.'
0000000000000559         db  0x00 ; '.'
000000000000055a         db  0x00 ; '.'
000000000000055b         db  0x00 ; '.'
000000000000055c         db  0x00 ; '.'
000000000000055d         db  0x00 ; '.'
000000000000055e         db  0x00 ; '.'
000000000000055f         db  0x00 ; '.'
0000000000000560         db  0x00 ; '.'
0000000000000561         db  0x00 ; '.'
0000000000000562         db  0x00 ; '.'
0000000000000563         db  0x00 ; '.'
0000000000000564         db  0x00 ; '.'
0000000000000565         db  0x00 ; '.'
0000000000000566         db  0x00 ; '.'
0000000000000567         db  0x00 ; '.'
0000000000000568         db  0x5f ; '_'
0000000000000569         db  0x01 ; '.'
000000000000056a         db  0x00 ; '.'
000000000000056b         db  0x00 ; '.'
000000000000056c         db  0x12 ; '.'
000000000000056d         db  0x00 ; '.'
000000000000056e         db  0x00 ; '.'
000000000000056f         db  0x00 ; '.'
0000000000000570         db  0x00 ; '.'
0000000000000571         db  0x00 ; '.'
0000000000000572         db  0x00 ; '.'
0000000000000573         db  0x00 ; '.'
0000000000000574         db  0x00 ; '.'
0000000000000575         db  0x00 ; '.'
0000000000000576         db  0x00 ; '.'
0000000000000577         db  0x00 ; '.'
0000000000000578         db  0x00 ; '.'
0000000000000579         db  0x00 ; '.'
000000000000057a         db  0x00 ; '.'
000000000000057b         db  0x00 ; '.'
000000000000057c         db  0x00 ; '.'
000000000000057d         db  0x00 ; '.'
000000000000057e         db  0x00 ; '.'
000000000000057f         db  0x00 ; '.'
0000000000000580         db  0xe9 ; '.'
0000000000000581         db  0x00 ; '.'
0000000000000582         db  0x00 ; '.'
0000000000000583         db  0x00 ; '.'
0000000000000584         db  0x12 ; '.'
0000000000000585         db  0x00 ; '.'
0000000000000586         db  0x00 ; '.'
0000000000000587         db  0x00 ; '.'
0000000000000588         db  0x00 ; '.'
0000000000000589         db  0x00 ; '.'
000000000000058a         db  0x00 ; '.'
000000000000058b         db  0x00 ; '.'
000000000000058c         db  0x00 ; '.'
000000000000058d         db  0x00 ; '.'
000000000000058e         db  0x00 ; '.'
000000000000058f         db  0x00 ; '.'
0000000000000590         db  0x00 ; '.'
0000000000000591         db  0x00 ; '.'
0000000000000592         db  0x00 ; '.'
0000000000000593         db  0x00 ; '.'
0000000000000594         db  0x00 ; '.'
0000000000000595         db  0x00 ; '.'
0000000000000596         db  0x00 ; '.'
0000000000000597         db  0x00 ; '.'
0000000000000598         db  0x23 ; '#'
0000000000000599         db  0x01 ; '.'
000000000000059a         db  0x00 ; '.'
000000000000059b         db  0x00 ; '.'
000000000000059c         db  0x12 ; '.'
000000000000059d         db  0x00 ; '.'
000000000000059e         db  0x00 ; '.'
000000000000059f         db  0x00 ; '.'
00000000000005a0         db  0x00 ; '.'
00000000000005a1         db  0x00 ; '.'
00000000000005a2         db  0x00 ; '.'
00000000000005a3         db  0x00 ; '.'
00000000000005a4         db  0x00 ; '.'
00000000000005a5         db  0x00 ; '.'
00000000000005a6         db  0x00 ; '.'
00000000000005a7         db  0x00 ; '.'
00000000000005a8         db  0x00 ; '.'
00000000000005a9         db  0x00 ; '.'
00000000000005aa         db  0x00 ; '.'
00000000000005ab         db  0x00 ; '.'
00000000000005ac         db  0x00 ; '.'
00000000000005ad         db  0x00 ; '.'
00000000000005ae         db  0x00 ; '.'
00000000000005af         db  0x00 ; '.'
00000000000005b0         db  0xed ; '.'
00000000000005b1         db  0x01 ; '.'
00000000000005b2         db  0x00 ; '.'
00000000000005b3         db  0x00 ; '.'
00000000000005b4         db  0x12 ; '.'
00000000000005b5         db  0x00 ; '.'
00000000000005b6         db  0x00 ; '.'
00000000000005b7         db  0x00 ; '.'
00000000000005b8         db  0x00 ; '.'
00000000000005b9         db  0x00 ; '.'
00000000000005ba         db  0x00 ; '.'
00000000000005bb         db  0x00 ; '.'
00000000000005bc         db  0x00 ; '.'
00000000000005bd         db  0x00 ; '.'
00000000000005be         db  0x00 ; '.'
00000000000005bf         db  0x00 ; '.'
00000000000005c0         db  0x00 ; '.'
00000000000005c1         db  0x00 ; '.'
00000000000005c2         db  0x00 ; '.'
00000000000005c3         db  0x00 ; '.'
00000000000005c4         db  0x00 ; '.'
00000000000005c5         db  0x00 ; '.'
00000000000005c6         db  0x00 ; '.'
00000000000005c7         db  0x00 ; '.'
00000000000005c8         db  0x6d ; 'm'
00000000000005c9         db  0x01 ; '.'
00000000000005ca         db  0x00 ; '.'
00000000000005cb         db  0x00 ; '.'
00000000000005cc         db  0x12 ; '.'
00000000000005cd         db  0x00 ; '.'
00000000000005ce         db  0x00 ; '.'
00000000000005cf         db  0x00 ; '.'
00000000000005d0         db  0x00 ; '.'
00000000000005d1         db  0x00 ; '.'
00000000000005d2         db  0x00 ; '.'
00000000000005d3         db  0x00 ; '.'
00000000000005d4         db  0x00 ; '.'
00000000000005d5         db  0x00 ; '.'
00000000000005d6         db  0x00 ; '.'
00000000000005d7         db  0x00 ; '.'
00000000000005d8         db  0x00 ; '.'
00000000000005d9         db  0x00 ; '.'
00000000000005da         db  0x00 ; '.'
00000000000005db         db  0x00 ; '.'
00000000000005dc         db  0x00 ; '.'
00000000000005dd         db  0x00 ; '.'
00000000000005de         db  0x00 ; '.'
00000000000005df         db  0x00 ; '.'
00000000000005e0         db  0x76 ; 'v'
00000000000005e1         db  0x00 ; '.'
00000000000005e2         db  0x00 ; '.'
00000000000005e3         db  0x00 ; '.'
00000000000005e4         db  0x12 ; '.'
00000000000005e5         db  0x00 ; '.'
00000000000005e6         db  0x00 ; '.'
00000000000005e7         db  0x00 ; '.'
00000000000005e8         db  0x00 ; '.'
00000000000005e9         db  0x00 ; '.'
00000000000005ea         db  0x00 ; '.'
00000000000005eb         db  0x00 ; '.'
00000000000005ec         db  0x00 ; '.'
00000000000005ed         db  0x00 ; '.'
00000000000005ee         db  0x00 ; '.'
00000000000005ef         db  0x00 ; '.'
00000000000005f0         db  0x00 ; '.'
00000000000005f1         db  0x00 ; '.'
00000000000005f2         db  0x00 ; '.'
00000000000005f3         db  0x00 ; '.'
00000000000005f4         db  0x00 ; '.'
00000000000005f5         db  0x00 ; '.'
00000000000005f6         db  0x00 ; '.'
00000000000005f7         db  0x00 ; '.'
00000000000005f8         db  0x80 ; '.'
00000000000005f9         db  0x02 ; '.'
00000000000005fa         db  0x00 ; '.'
00000000000005fb         db  0x00 ; '.'
00000000000005fc         db  0x12 ; '.'
00000000000005fd         db  0x00 ; '.'
00000000000005fe         db  0x00 ; '.'
00000000000005ff         db  0x00 ; '.'
0000000000000600         db  0x00 ; '.'
0000000000000601         db  0x00 ; '.'
0000000000000602         db  0x00 ; '.'
0000000000000603         db  0x00 ; '.'
0000000000000604         db  0x00 ; '.'
0000000000000605         db  0x00 ; '.'
0000000000000606         db  0x00 ; '.'
0000000000000607         db  0x00 ; '.'
0000000000000608         db  0x00 ; '.'
0000000000000609         db  0x00 ; '.'
000000000000060a         db  0x00 ; '.'
000000000000060b         db  0x00 ; '.'
000000000000060c         db  0x00 ; '.'
000000000000060d         db  0x00 ; '.'
000000000000060e         db  0x00 ; '.'
000000000000060f         db  0x00 ; '.'
0000000000000610         db  0x3b ; ';'
0000000000000611         db  0x01 ; '.'
0000000000000612         db  0x00 ; '.'
0000000000000613         db  0x00 ; '.'
0000000000000614         db  0x12 ; '.'
0000000000000615         db  0x00 ; '.'
0000000000000616         db  0x00 ; '.'
0000000000000617         db  0x00 ; '.'
0000000000000618         db  0x00 ; '.'
0000000000000619         db  0x00 ; '.'
000000000000061a         db  0x00 ; '.'
000000000000061b         db  0x00 ; '.'
000000000000061c         db  0x00 ; '.'
000000000000061d         db  0x00 ; '.'
000000000000061e         db  0x00 ; '.'
000000000000061f         db  0x00 ; '.'
0000000000000620         db  0x00 ; '.'
0000000000000621         db  0x00 ; '.'
0000000000000622         db  0x00 ; '.'
0000000000000623         db  0x00 ; '.'
0000000000000624         db  0x00 ; '.'
0000000000000625         db  0x00 ; '.'
0000000000000626         db  0x00 ; '.'
0000000000000627         db  0x00 ; '.'
0000000000000628         db  0xaa ; '.'
0000000000000629         db  0x02 ; '.'
000000000000062a         db  0x00 ; '.'
000000000000062b         db  0x00 ; '.'
000000000000062c         db  0x12 ; '.'
000000000000062d         db  0x00 ; '.'
000000000000062e         db  0x00 ; '.'
000000000000062f         db  0x00 ; '.'
0000000000000630         db  0x00 ; '.'
0000000000000631         db  0x00 ; '.'
0000000000000632         db  0x00 ; '.'
0000000000000633         db  0x00 ; '.'
0000000000000634         db  0x00 ; '.'
0000000000000635         db  0x00 ; '.'
0000000000000636         db  0x00 ; '.'
0000000000000637         db  0x00 ; '.'
0000000000000638         db  0x00 ; '.'
0000000000000639         db  0x00 ; '.'
000000000000063a         db  0x00 ; '.'
000000000000063b         db  0x00 ; '.'
000000000000063c         db  0x00 ; '.'
000000000000063d         db  0x00 ; '.'
000000000000063e         db  0x00 ; '.'
000000000000063f         db  0x00 ; '.'
0000000000000640         db  0x15 ; '.'
0000000000000641         db  0x01 ; '.'
0000000000000642         db  0x00 ; '.'
0000000000000643         db  0x00 ; '.'
0000000000000644         db  0x12 ; '.'
0000000000000645         db  0x00 ; '.'
0000000000000646         db  0x00 ; '.'
0000000000000647         db  0x00 ; '.'
0000000000000648         db  0x00 ; '.'
0000000000000649         db  0x00 ; '.'
000000000000064a         db  0x00 ; '.'
000000000000064b         db  0x00 ; '.'
000000000000064c         db  0x00 ; '.'
000000000000064d         db  0x00 ; '.'
000000000000064e         db  0x00 ; '.'
000000000000064f         db  0x00 ; '.'
0000000000000650         db  0x00 ; '.'
0000000000000651         db  0x00 ; '.'
0000000000000652         db  0x00 ; '.'
0000000000000653         db  0x00 ; '.'
0000000000000654         db  0x00 ; '.'
0000000000000655         db  0x00 ; '.'
0000000000000656         db  0x00 ; '.'
0000000000000657         db  0x00 ; '.'
0000000000000658         db  0xdb ; '.'
0000000000000659         db  0x01 ; '.'
000000000000065a         db  0x00 ; '.'
000000000000065b         db  0x00 ; '.'
000000000000065c         db  0x12 ; '.'
000000000000065d         db  0x00 ; '.'
000000000000065e         db  0x00 ; '.'
000000000000065f         db  0x00 ; '.'
0000000000000660         db  0x00 ; '.'
0000000000000661         db  0x00 ; '.'
0000000000000662         db  0x00 ; '.'
0000000000000663         db  0x00 ; '.'
0000000000000664         db  0x00 ; '.'
0000000000000665         db  0x00 ; '.'
0000000000000666         db  0x00 ; '.'
0000000000000667         db  0x00 ; '.'
0000000000000668         db  0x00 ; '.'
0000000000000669         db  0x00 ; '.'
000000000000066a         db  0x00 ; '.'
000000000000066b         db  0x00 ; '.'
000000000000066c         db  0x00 ; '.'
000000000000066d         db  0x00 ; '.'
000000000000066e         db  0x00 ; '.'
000000000000066f         db  0x00 ; '.'
0000000000000670         db  0x79 ; 'y'
0000000000000671         db  0x02 ; '.'
0000000000000672         db  0x00 ; '.'
0000000000000673         db  0x00 ; '.'
0000000000000674         db  0x12 ; '.'
0000000000000675         db  0x00 ; '.'
0000000000000676         db  0x00 ; '.'
0000000000000677         db  0x00 ; '.'
0000000000000678         db  0x00 ; '.'
0000000000000679         db  0x00 ; '.'
000000000000067a         db  0x00 ; '.'
000000000000067b         db  0x00 ; '.'
000000000000067c         db  0x00 ; '.'
000000000000067d         db  0x00 ; '.'
000000000000067e         db  0x00 ; '.'
000000000000067f         db  0x00 ; '.'
0000000000000680         db  0x00 ; '.'
0000000000000681         db  0x00 ; '.'
0000000000000682         db  0x00 ; '.'
0000000000000683         db  0x00 ; '.'
0000000000000684         db  0x00 ; '.'
0000000000000685         db  0x00 ; '.'
0000000000000686         db  0x00 ; '.'
0000000000000687         db  0x00 ; '.'
0000000000000688         db  0x92 ; '.'
0000000000000689         db  0x02 ; '.'
000000000000068a         db  0x00 ; '.'
000000000000068b         db  0x00 ; '.'
000000000000068c         db  0x12 ; '.'
000000000000068d         db  0x00 ; '.'
000000000000068e         db  0x00 ; '.'
000000000000068f         db  0x00 ; '.'
0000000000000690         db  0x00 ; '.'
0000000000000691         db  0x00 ; '.'
0000000000000692         db  0x00 ; '.'
0000000000000693         db  0x00 ; '.'
0000000000000694         db  0x00 ; '.'
0000000000000695         db  0x00 ; '.'
0000000000000696         db  0x00 ; '.'
0000000000000697         db  0x00 ; '.'
0000000000000698         db  0x00 ; '.'
0000000000000699         db  0x00 ; '.'
000000000000069a         db  0x00 ; '.'
000000000000069b         db  0x00 ; '.'
000000000000069c         db  0x00 ; '.'
000000000000069d         db  0x00 ; '.'
000000000000069e         db  0x00 ; '.'
000000000000069f         db  0x00 ; '.'
00000000000006a0         db  0x5b ; '['
00000000000006a1         db  0x00 ; '.'
00000000000006a2         db  0x00 ; '.'
00000000000006a3         db  0x00 ; '.'
00000000000006a4         db  0x12 ; '.'
00000000000006a5         db  0x00 ; '.'
00000000000006a6         db  0x00 ; '.'
00000000000006a7         db  0x00 ; '.'
00000000000006a8         db  0x00 ; '.'
00000000000006a9         db  0x00 ; '.'
00000000000006aa         db  0x00 ; '.'
00000000000006ab         db  0x00 ; '.'
00000000000006ac         db  0x00 ; '.'
00000000000006ad         db  0x00 ; '.'
00000000000006ae         db  0x00 ; '.'
00000000000006af         db  0x00 ; '.'
00000000000006b0         db  0x00 ; '.'
00000000000006b1         db  0x00 ; '.'
00000000000006b2         db  0x00 ; '.'
00000000000006b3         db  0x00 ; '.'
00000000000006b4         db  0x00 ; '.'
00000000000006b5         db  0x00 ; '.'
00000000000006b6         db  0x00 ; '.'
00000000000006b7         db  0x00 ; '.'
00000000000006b8         db  0x39 ; '9'
00000000000006b9         db  0x03 ; '.'
00000000000006ba         db  0x00 ; '.'
00000000000006bb         db  0x00 ; '.'
00000000000006bc         db  0x20 ; ' '
00000000000006bd         db  0x00 ; '.'
00000000000006be         db  0x00 ; '.'
00000000000006bf         db  0x00 ; '.'
00000000000006c0         db  0x00 ; '.'
00000000000006c1         db  0x00 ; '.'
00000000000006c2         db  0x00 ; '.'
00000000000006c3         db  0x00 ; '.'
00000000000006c4         db  0x00 ; '.'
00000000000006c5         db  0x00 ; '.'
00000000000006c6         db  0x00 ; '.'
00000000000006c7         db  0x00 ; '.'
00000000000006c8         db  0x00 ; '.'
00000000000006c9         db  0x00 ; '.'
00000000000006ca         db  0x00 ; '.'
00000000000006cb         db  0x00 ; '.'
00000000000006cc         db  0x00 ; '.'
00000000000006cd         db  0x00 ; '.'
00000000000006ce         db  0x00 ; '.'
00000000000006cf         db  0x00 ; '.'
00000000000006d0         db  0x65 ; 'e'
00000000000006d1         db  0x01 ; '.'
00000000000006d2         db  0x00 ; '.'
00000000000006d3         db  0x00 ; '.'
00000000000006d4         db  0x12 ; '.'
00000000000006d5         db  0x00 ; '.'
00000000000006d6         db  0x00 ; '.'
00000000000006d7         db  0x00 ; '.'
00000000000006d8         db  0x00 ; '.'
00000000000006d9         db  0x00 ; '.'
00000000000006da         db  0x00 ; '.'
00000000000006db         db  0x00 ; '.'
00000000000006dc         db  0x00 ; '.'
00000000000006dd         db  0x00 ; '.'
00000000000006de         db  0x00 ; '.'
00000000000006df         db  0x00 ; '.'
00000000000006e0         db  0x00 ; '.'
00000000000006e1         db  0x00 ; '.'
00000000000006e2         db  0x00 ; '.'
00000000000006e3         db  0x00 ; '.'
00000000000006e4         db  0x00 ; '.'
00000000000006e5         db  0x00 ; '.'
00000000000006e6         db  0x00 ; '.'
00000000000006e7         db  0x00 ; '.'
00000000000006e8         db  0xd4 ; '.'
00000000000006e9         db  0x01 ; '.'
00000000000006ea         db  0x00 ; '.'
00000000000006eb         db  0x00 ; '.'
00000000000006ec         db  0x12 ; '.'
00000000000006ed         db  0x00 ; '.'
00000000000006ee         db  0x00 ; '.'
00000000000006ef         db  0x00 ; '.'
00000000000006f0         db  0x00 ; '.'
00000000000006f1         db  0x00 ; '.'
00000000000006f2         db  0x00 ; '.'
00000000000006f3         db  0x00 ; '.'
00000000000006f4         db  0x00 ; '.'
00000000000006f5         db  0x00 ; '.'
00000000000006f6         db  0x00 ; '.'
00000000000006f7         db  0x00 ; '.'
00000000000006f8         db  0x00 ; '.'
00000000000006f9         db  0x00 ; '.'
00000000000006fa         db  0x00 ; '.'
00000000000006fb         db  0x00 ; '.'
00000000000006fc         db  0x00 ; '.'
00000000000006fd         db  0x00 ; '.'
00000000000006fe         db  0x00 ; '.'
00000000000006ff         db  0x00 ; '.'
0000000000000700         db  0x45 ; 'E'
0000000000000701         db  0x02 ; '.'
0000000000000702         db  0x00 ; '.'
0000000000000703         db  0x00 ; '.'
0000000000000704         db  0x12 ; '.'
0000000000000705         db  0x00 ; '.'
0000000000000706         db  0x00 ; '.'
0000000000000707         db  0x00 ; '.'
0000000000000708         db  0x00 ; '.'
0000000000000709         db  0x00 ; '.'
000000000000070a         db  0x00 ; '.'
000000000000070b         db  0x00 ; '.'
000000000000070c         db  0x00 ; '.'
000000000000070d         db  0x00 ; '.'
000000000000070e         db  0x00 ; '.'
000000000000070f         db  0x00 ; '.'
0000000000000710         db  0x00 ; '.'
0000000000000711         db  0x00 ; '.'
0000000000000712         db  0x00 ; '.'
0000000000000713         db  0x00 ; '.'
0000000000000714         db  0x00 ; '.'
0000000000000715         db  0x00 ; '.'
0000000000000716         db  0x00 ; '.'
0000000000000717         db  0x00 ; '.'
0000000000000718         db  0x1f ; '.'
0000000000000719         db  0x00 ; '.'
000000000000071a         db  0x00 ; '.'
000000000000071b         db  0x00 ; '.'
000000000000071c         db  0x12 ; '.'
000000000000071d         db  0x00 ; '.'
000000000000071e         db  0x00 ; '.'
000000000000071f         db  0x00 ; '.'
0000000000000720         db  0x00 ; '.'
0000000000000721         db  0x00 ; '.'
0000000000000722         db  0x00 ; '.'
0000000000000723         db  0x00 ; '.'
0000000000000724         db  0x00 ; '.'
0000000000000725         db  0x00 ; '.'
0000000000000726         db  0x00 ; '.'
0000000000000727         db  0x00 ; '.'
0000000000000728         db  0x00 ; '.'
0000000000000729         db  0x00 ; '.'
000000000000072a         db  0x00 ; '.'
000000000000072b         db  0x00 ; '.'
000000000000072c         db  0x00 ; '.'
000000000000072d         db  0x00 ; '.'
000000000000072e         db  0x00 ; '.'
000000000000072f         db  0x00 ; '.'
0000000000000730         db  0x73 ; 's'
0000000000000731         db  0x01 ; '.'
0000000000000732         db  0x00 ; '.'
0000000000000733         db  0x00 ; '.'
0000000000000734         db  0x12 ; '.'
0000000000000735         db  0x00 ; '.'
0000000000000736         db  0x00 ; '.'
0000000000000737         db  0x00 ; '.'
0000000000000738         db  0x00 ; '.'
0000000000000739         db  0x00 ; '.'
000000000000073a         db  0x00 ; '.'
000000000000073b         db  0x00 ; '.'
000000000000073c         db  0x00 ; '.'
000000000000073d         db  0x00 ; '.'
000000000000073e         db  0x00 ; '.'
000000000000073f         db  0x00 ; '.'
0000000000000740         db  0x00 ; '.'
0000000000000741         db  0x00 ; '.'
0000000000000742         db  0x00 ; '.'
0000000000000743         db  0x00 ; '.'
0000000000000744         db  0x00 ; '.'
0000000000000745         db  0x00 ; '.'
0000000000000746         db  0x00 ; '.'
0000000000000747         db  0x00 ; '.'
0000000000000748         db  0x0b ; '.'
0000000000000749         db  0x00 ; '.'
000000000000074a         db  0x00 ; '.'
000000000000074b         db  0x00 ; '.'
000000000000074c         db  0x12 ; '.'
000000000000074d         db  0x00 ; '.'
000000000000074e         db  0x00 ; '.'
000000000000074f         db  0x00 ; '.'
0000000000000750         db  0x00 ; '.'
0000000000000751         db  0x00 ; '.'
0000000000000752         db  0x00 ; '.'
0000000000000753         db  0x00 ; '.'
0000000000000754         db  0x00 ; '.'
0000000000000755         db  0x00 ; '.'
0000000000000756         db  0x00 ; '.'
0000000000000757         db  0x00 ; '.'
0000000000000758         db  0x00 ; '.'
0000000000000759         db  0x00 ; '.'
000000000000075a         db  0x00 ; '.'
000000000000075b         db  0x00 ; '.'
000000000000075c         db  0x00 ; '.'
000000000000075d         db  0x00 ; '.'
000000000000075e         db  0x00 ; '.'
000000000000075f         db  0x00 ; '.'
0000000000000760         db  0x8c ; '.'
0000000000000761         db  0x01 ; '.'
0000000000000762         db  0x00 ; '.'
0000000000000763         db  0x00 ; '.'
0000000000000764         db  0x12 ; '.'
0000000000000765         db  0x00 ; '.'
0000000000000766         db  0x00 ; '.'
0000000000000767         db  0x00 ; '.'
0000000000000768         db  0x00 ; '.'
0000000000000769         db  0x00 ; '.'
000000000000076a         db  0x00 ; '.'
000000000000076b         db  0x00 ; '.'
000000000000076c         db  0x00 ; '.'
000000000000076d         db  0x00 ; '.'
000000000000076e         db  0x00 ; '.'
000000000000076f         db  0x00 ; '.'
0000000000000770         db  0x00 ; '.'
0000000000000771         db  0x00 ; '.'
0000000000000772         db  0x00 ; '.'
0000000000000773         db  0x00 ; '.'
0000000000000774         db  0x00 ; '.'
0000000000000775         db  0x00 ; '.'
0000000000000776         db  0x00 ; '.'
0000000000000777         db  0x00 ; '.'
0000000000000778         db  0xcb ; '.'
0000000000000779         db  0x01 ; '.'
000000000000077a         db  0x00 ; '.'
000000000000077b         db  0x00 ; '.'
000000000000077c         db  0x12 ; '.'
000000000000077d         db  0x00 ; '.'
000000000000077e         db  0x00 ; '.'
000000000000077f         db  0x00 ; '.'
0000000000000780         db  0x00 ; '.'
0000000000000781         db  0x00 ; '.'
0000000000000782         db  0x00 ; '.'
0000000000000783         db  0x00 ; '.'
0000000000000784         db  0x00 ; '.'
0000000000000785         db  0x00 ; '.'
0000000000000786         db  0x00 ; '.'
0000000000000787         db  0x00 ; '.'
0000000000000788         db  0x00 ; '.'
0000000000000789         db  0x00 ; '.'
000000000000078a         db  0x00 ; '.'
000000000000078b         db  0x00 ; '.'
000000000000078c         db  0x00 ; '.'
000000000000078d         db  0x00 ; '.'
000000000000078e         db  0x00 ; '.'
000000000000078f         db  0x00 ; '.'
0000000000000790         db  0xad ; '.'
0000000000000791         db  0x01 ; '.'
0000000000000792         db  0x00 ; '.'
0000000000000793         db  0x00 ; '.'
0000000000000794         db  0x12 ; '.'
0000000000000795         db  0x00 ; '.'
0000000000000796         db  0x00 ; '.'
0000000000000797         db  0x00 ; '.'
0000000000000798         db  0x00 ; '.'
0000000000000799         db  0x00 ; '.'
000000000000079a         db  0x00 ; '.'
000000000000079b         db  0x00 ; '.'
000000000000079c         db  0x00 ; '.'
000000000000079d         db  0x00 ; '.'
000000000000079e         db  0x00 ; '.'
000000000000079f         db  0x00 ; '.'
00000000000007a0         db  0x00 ; '.'
00000000000007a1         db  0x00 ; '.'
00000000000007a2         db  0x00 ; '.'
00000000000007a3         db  0x00 ; '.'
00000000000007a4         db  0x00 ; '.'
00000000000007a5         db  0x00 ; '.'
00000000000007a6         db  0x00 ; '.'
00000000000007a7         db  0x00 ; '.'
00000000000007a8         db  0x7f ; '.'
00000000000007a9         db  0x00 ; '.'
00000000000007aa         db  0x00 ; '.'
00000000000007ab         db  0x00 ; '.'
00000000000007ac         db  0x12 ; '.'
00000000000007ad         db  0x00 ; '.'
00000000000007ae         db  0x00 ; '.'
00000000000007af         db  0x00 ; '.'
00000000000007b0         db  0x00 ; '.'
00000000000007b1         db  0x00 ; '.'
00000000000007b2         db  0x00 ; '.'
00000000000007b3         db  0x00 ; '.'
00000000000007b4         db  0x00 ; '.'
00000000000007b5         db  0x00 ; '.'
00000000000007b6         db  0x00 ; '.'
00000000000007b7         db  0x00 ; '.'
00000000000007b8         db  0x00 ; '.'
00000000000007b9         db  0x00 ; '.'
00000000000007ba         db  0x00 ; '.'
00000000000007bb         db  0x00 ; '.'
00000000000007bc         db  0x00 ; '.'
00000000000007bd         db  0x00 ; '.'
00000000000007be         db  0x00 ; '.'
00000000000007bf         db  0x00 ; '.'
00000000000007c0         db  0xaf ; '.'
00000000000007c1         db  0x00 ; '.'
00000000000007c2         db  0x00 ; '.'
00000000000007c3         db  0x00 ; '.'
00000000000007c4         db  0x12 ; '.'
00000000000007c5         db  0x00 ; '.'
00000000000007c6         db  0x00 ; '.'
00000000000007c7         db  0x00 ; '.'
00000000000007c8         db  0x00 ; '.'
00000000000007c9         db  0x00 ; '.'
00000000000007ca         db  0x00 ; '.'
00000000000007cb         db  0x00 ; '.'
00000000000007cc         db  0x00 ; '.'
00000000000007cd         db  0x00 ; '.'
00000000000007ce         db  0x00 ; '.'
00000000000007cf         db  0x00 ; '.'
00000000000007d0         db  0x00 ; '.'
00000000000007d1         db  0x00 ; '.'
00000000000007d2         db  0x00 ; '.'
00000000000007d3         db  0x00 ; '.'
00000000000007d4         db  0x00 ; '.'
00000000000007d5         db  0x00 ; '.'
00000000000007d6         db  0x00 ; '.'
00000000000007d7         db  0x00 ; '.'
00000000000007d8         db  0x27 ; '''
00000000000007d9         db  0x00 ; '.'
00000000000007da         db  0x00 ; '.'
00000000000007db         db  0x00 ; '.'
00000000000007dc         db  0x12 ; '.'
00000000000007dd         db  0x00 ; '.'
00000000000007de         db  0x00 ; '.'
00000000000007df         db  0x00 ; '.'
00000000000007e0         db  0x00 ; '.'
00000000000007e1         db  0x00 ; '.'
00000000000007e2         db  0x00 ; '.'
00000000000007e3         db  0x00 ; '.'                                         ; DATA XREF=version_etc_arn+89
00000000000007e4         db  0x00 ; '.'
00000000000007e5         db  0x00 ; '.'
00000000000007e6         db  0x00 ; '.'
00000000000007e7         db  0x00 ; '.'
00000000000007e8         db  0x00 ; '.'
00000000000007e9         db  0x00 ; '.'
00000000000007ea         db  0x00 ; '.'
00000000000007eb         db  0x00 ; '.'
00000000000007ec         db  0x00 ; '.'
00000000000007ed         db  0x00 ; '.'
00000000000007ee         db  0x00 ; '.'
00000000000007ef         db  0x00 ; '.'
00000000000007f0         db  0x12 ; '.'
00000000000007f1         db  0x00 ; '.'
00000000000007f2         db  0x00 ; '.'
00000000000007f3         db  0x00 ; '.'
00000000000007f4         db  0x12 ; '.'
00000000000007f5         db  0x00 ; '.'
00000000000007f6         db  0x00 ; '.'
00000000000007f7         db  0x00 ; '.'
00000000000007f8         db  0x00 ; '.'
00000000000007f9         db  0x00 ; '.'
00000000000007fa         db  0x00 ; '.'
00000000000007fb         db  0x00 ; '.'
00000000000007fc         db  0x00 ; '.'
00000000000007fd         db  0x00 ; '.'
00000000000007fe         db  0x00 ; '.'
00000000000007ff         db  0x00 ; '.'
0000000000000800         db  0x00 ; '.'
0000000000000801         db  0x00 ; '.'
0000000000000802         db  0x00 ; '.'
0000000000000803         db  0x00 ; '.'
0000000000000804         db  0x00 ; '.'
0000000000000805         db  0x00 ; '.'
0000000000000806         db  0x00 ; '.'
0000000000000807         db  0x00 ; '.'
0000000000000808         db  0x42 ; 'B'
0000000000000809         db  0x01 ; '.'
000000000000080a         db  0x00 ; '.'
000000000000080b         db  0x00 ; '.'
000000000000080c         db  0x12 ; '.'
000000000000080d         db  0x00 ; '.'
000000000000080e         db  0x00 ; '.'
000000000000080f         db  0x00 ; '.'
0000000000000810         db  0x00 ; '.'
0000000000000811         db  0x00 ; '.'
0000000000000812         db  0x00 ; '.'
0000000000000813         db  0x00 ; '.'
0000000000000814         db  0x00 ; '.'
0000000000000815         db  0x00 ; '.'
0000000000000816         db  0x00 ; '.'
0000000000000817         db  0x00 ; '.'
0000000000000818         db  0x00 ; '.'
0000000000000819         db  0x00 ; '.'
000000000000081a         db  0x00 ; '.'
000000000000081b         db  0x00 ; '.'
000000000000081c         db  0x00 ; '.'
000000000000081d         db  0x00 ; '.'
000000000000081e         db  0x00 ; '.'
000000000000081f         db  0x00 ; '.'
0000000000000820         db  0x4d ; 'M'
0000000000000821         db  0x02 ; '.'
0000000000000822         db  0x00 ; '.'
0000000000000823         db  0x00 ; '.'
0000000000000824         db  0x12 ; '.'
0000000000000825         db  0x00 ; '.'
0000000000000826         db  0x00 ; '.'
0000000000000827         db  0x00 ; '.'
0000000000000828         db  0x00 ; '.'
0000000000000829         db  0x00 ; '.'
000000000000082a         db  0x00 ; '.'
000000000000082b         db  0x00 ; '.'
000000000000082c         db  0x00 ; '.'
000000000000082d         db  0x00 ; '.'
000000000000082e         db  0x00 ; '.'
000000000000082f         db  0x00 ; '.'
0000000000000830         db  0x00 ; '.'
0000000000000831         db  0x00 ; '.'
0000000000000832         db  0x00 ; '.'
0000000000000833         db  0x00 ; '.'
0000000000000834         db  0x00 ; '.'
0000000000000835         db  0x00 ; '.'
0000000000000836         db  0x00 ; '.'
0000000000000837         db  0x00 ; '.'
0000000000000838         db  0x86 ; '.'
0000000000000839         db  0x00 ; '.'
000000000000083a         db  0x00 ; '.'
000000000000083b         db  0x00 ; '.'
000000000000083c         db  0x12 ; '.'
000000000000083d         db  0x00 ; '.'
000000000000083e         db  0x00 ; '.'
000000000000083f         db  0x00 ; '.'
0000000000000840         db  0x00 ; '.'
0000000000000841         db  0x00 ; '.'
0000000000000842         db  0x00 ; '.'
0000000000000843         db  0x00 ; '.'
0000000000000844         db  0x00 ; '.'
0000000000000845         db  0x00 ; '.'
0000000000000846         db  0x00 ; '.'
0000000000000847         db  0x00 ; '.'
0000000000000848         db  0x00 ; '.'
0000000000000849         db  0x00 ; '.'
000000000000084a         db  0x00 ; '.'
000000000000084b         db  0x00 ; '.'
000000000000084c         db  0x00 ; '.'
000000000000084d         db  0x00 ; '.'
000000000000084e         db  0x00 ; '.'
000000000000084f         db  0x00 ; '.'
0000000000000850         db  0x00 ; '.'
0000000000000851         db  0x02 ; '.'
0000000000000852         db  0x00 ; '.'
0000000000000853         db  0x00 ; '.'
0000000000000854         db  0x12 ; '.'
0000000000000855         db  0x00 ; '.'
0000000000000856         db  0x00 ; '.'
0000000000000857         db  0x00 ; '.'
0000000000000858         db  0x00 ; '.'
0000000000000859         db  0x00 ; '.'
000000000000085a         db  0x00 ; '.'
000000000000085b         db  0x00 ; '.'
000000000000085c         db  0x00 ; '.'
000000000000085d         db  0x00 ; '.'
000000000000085e         db  0x00 ; '.'
000000000000085f         db  0x00 ; '.'
0000000000000860         db  0x00 ; '.'
0000000000000861         db  0x00 ; '.'
0000000000000862         db  0x00 ; '.'
0000000000000863         db  0x00 ; '.'
0000000000000864         db  0x00 ; '.'
0000000000000865         db  0x00 ; '.'
0000000000000866         db  0x00 ; '.'
0000000000000867         db  0x00 ; '.'
0000000000000868         db  0x98 ; '.'
0000000000000869         db  0x02 ; '.'
000000000000086a         db  0x00 ; '.'
000000000000086b         db  0x00 ; '.'
000000000000086c         db  0x12 ; '.'
000000000000086d         db  0x00 ; '.'
000000000000086e         db  0x00 ; '.'
000000000000086f         db  0x00 ; '.'
0000000000000870         db  0x00 ; '.'
0000000000000871         db  0x00 ; '.'
0000000000000872         db  0x00 ; '.'
0000000000000873         db  0x00 ; '.'
0000000000000874         db  0x00 ; '.'
0000000000000875         db  0x00 ; '.'
0000000000000876         db  0x00 ; '.'
0000000000000877         db  0x00 ; '.'
0000000000000878         db  0x00 ; '.'
0000000000000879         db  0x00 ; '.'
000000000000087a         db  0x00 ; '.'
000000000000087b         db  0x00 ; '.'
000000000000087c         db  0x00 ; '.'
000000000000087d         db  0x00 ; '.'
000000000000087e         db  0x00 ; '.'
000000000000087f         db  0x00 ; '.'
0000000000000880         db  0x41 ; 'A'
0000000000000881         db  0x00 ; '.'
0000000000000882         db  0x00 ; '.'
0000000000000883         db  0x00 ; '.'
0000000000000884         db  0x12 ; '.'
0000000000000885         db  0x00 ; '.'
0000000000000886         db  0x00 ; '.'
0000000000000887         db  0x00 ; '.'
0000000000000888         db  0x00 ; '.'
0000000000000889         db  0x00 ; '.'
000000000000088a         db  0x00 ; '.'
000000000000088b         db  0x00 ; '.'
000000000000088c         db  0x00 ; '.'
000000000000088d         db  0x00 ; '.'
000000000000088e         db  0x00 ; '.'
000000000000088f         db  0x00 ; '.'
0000000000000890         db  0x00 ; '.'
0000000000000891         db  0x00 ; '.'
0000000000000892         db  0x00 ; '.'
0000000000000893         db  0x00 ; '.'
0000000000000894         db  0x00 ; '.'
0000000000000895         db  0x00 ; '.'
0000000000000896         db  0x00 ; '.'
0000000000000897         db  0x00 ; '.'
0000000000000898         db  0x7a ; 'z'
0000000000000899         db  0x01 ; '.'
000000000000089a         db  0x00 ; '.'
000000000000089b         db  0x00 ; '.'
000000000000089c         db  0x12 ; '.'
000000000000089d         db  0x00 ; '.'
000000000000089e         db  0x00 ; '.'
000000000000089f         db  0x00 ; '.'
00000000000008a0         db  0x00 ; '.'
00000000000008a1         db  0x00 ; '.'
00000000000008a2         db  0x00 ; '.'
00000000000008a3         db  0x00 ; '.'
00000000000008a4         db  0x00 ; '.'
00000000000008a5         db  0x00 ; '.'
00000000000008a6         db  0x00 ; '.'
00000000000008a7         db  0x00 ; '.'
00000000000008a8         db  0x00 ; '.'
00000000000008a9         db  0x00 ; '.'
00000000000008aa         db  0x00 ; '.'
00000000000008ab         db  0x00 ; '.'
00000000000008ac         db  0x00 ; '.'
00000000000008ad         db  0x00 ; '.'
00000000000008ae         db  0x00 ; '.'
00000000000008af         db  0x00 ; '.'
00000000000008b0         db  0xb7 ; '.'
00000000000008b1         db  0x00 ; '.'
00000000000008b2         db  0x00 ; '.'
00000000000008b3         db  0x00 ; '.'
00000000000008b4         db  0x12 ; '.'
00000000000008b5         db  0x00 ; '.'
00000000000008b6         db  0x00 ; '.'
00000000000008b7         db  0x00 ; '.'
00000000000008b8         db  0x00 ; '.'
00000000000008b9         db  0x00 ; '.'
00000000000008ba         db  0x00 ; '.'
00000000000008bb         db  0x00 ; '.'
00000000000008bc         db  0x00 ; '.'
00000000000008bd         db  0x00 ; '.'
00000000000008be         db  0x00 ; '.'
00000000000008bf         db  0x00 ; '.'
00000000000008c0         db  0x00 ; '.'
00000000000008c1         db  0x00 ; '.'
00000000000008c2         db  0x00 ; '.'
00000000000008c3         db  0x00 ; '.'
00000000000008c4         db  0x00 ; '.'
00000000000008c5         db  0x00 ; '.'
00000000000008c6         db  0x00 ; '.'
00000000000008c7         db  0x00 ; '.'
00000000000008c8         db  0xd9 ; '.'
00000000000008c9         db  0x02 ; '.'
00000000000008ca         db  0x00 ; '.'
00000000000008cb         db  0x00 ; '.'
00000000000008cc         db  0x12 ; '.'
00000000000008cd         db  0x00 ; '.'
00000000000008ce         db  0x00 ; '.'
00000000000008cf         db  0x00 ; '.'
00000000000008d0         db  0x00 ; '.'
00000000000008d1         db  0x00 ; '.'
00000000000008d2         db  0x00 ; '.'
00000000000008d3         db  0x00 ; '.'
00000000000008d4         db  0x00 ; '.'
00000000000008d5         db  0x00 ; '.'
00000000000008d6         db  0x00 ; '.'
00000000000008d7         db  0x00 ; '.'
00000000000008d8         db  0x00 ; '.'
00000000000008d9         db  0x00 ; '.'
00000000000008da         db  0x00 ; '.'
00000000000008db         db  0x00 ; '.'
00000000000008dc         db  0x00 ; '.'
00000000000008dd         db  0x00 ; '.'
00000000000008de         db  0x00 ; '.'
00000000000008df         db  0x00 ; '.'
00000000000008e0         db  0xcc ; '.'
00000000000008e1         db  0x00 ; '.'
00000000000008e2         db  0x00 ; '.'
00000000000008e3         db  0x00 ; '.'
00000000000008e4         db  0x12 ; '.'
00000000000008e5         db  0x00 ; '.'
00000000000008e6         db  0x00 ; '.'
00000000000008e7         db  0x00 ; '.'
00000000000008e8         db  0x00 ; '.'
00000000000008e9         db  0x00 ; '.'
00000000000008ea         db  0x00 ; '.'
00000000000008eb         db  0x00 ; '.'
00000000000008ec         db  0x00 ; '.'
00000000000008ed         db  0x00 ; '.'
00000000000008ee         db  0x00 ; '.'
00000000000008ef         db  0x00 ; '.'
00000000000008f0         db  0x00 ; '.'
00000000000008f1         db  0x00 ; '.'
00000000000008f2         db  0x00 ; '.'
00000000000008f3         db  0x00 ; '.'
00000000000008f4         db  0x00 ; '.'
00000000000008f5         db  0x00 ; '.'
00000000000008f6         db  0x00 ; '.'
00000000000008f7         db  0x00 ; '.'
00000000000008f8         db  0xe6 ; '.'
00000000000008f9         db  0x01 ; '.'
00000000000008fa         db  0x00 ; '.'
00000000000008fb         db  0x00 ; '.'
00000000000008fc         db  0x12 ; '.'
00000000000008fd         db  0x00 ; '.'
00000000000008fe         db  0x00 ; '.'
00000000000008ff         db  0x00 ; '.'
0000000000000900         db  0x00 ; '.'
0000000000000901         db  0x00 ; '.'
0000000000000902         db  0x00 ; '.'
0000000000000903         db  0x00 ; '.'
0000000000000904         db  0x00 ; '.'
0000000000000905         db  0x00 ; '.'
0000000000000906         db  0x00 ; '.'
0000000000000907         db  0x00 ; '.'
0000000000000908         db  0x00 ; '.'
0000000000000909         db  0x00 ; '.'
000000000000090a         db  0x00 ; '.'
000000000000090b         db  0x00 ; '.'
000000000000090c         db  0x00 ; '.'
000000000000090d         db  0x00 ; '.'
000000000000090e         db  0x00 ; '.'
000000000000090f         db  0x00 ; '.'
0000000000000910         db  0x4a ; 'J'
0000000000000911         db  0x01 ; '.'
0000000000000912         db  0x00 ; '.'
0000000000000913         db  0x00 ; '.'
0000000000000914         db  0x12 ; '.'
0000000000000915         db  0x00 ; '.'
0000000000000916         db  0x00 ; '.'
0000000000000917         db  0x00 ; '.'
0000000000000918         db  0x00 ; '.'
0000000000000919         db  0x00 ; '.'
000000000000091a         db  0x00 ; '.'
000000000000091b         db  0x00 ; '.'
000000000000091c         db  0x00 ; '.'
000000000000091d         db  0x00 ; '.'
000000000000091e         db  0x00 ; '.'
000000000000091f         db  0x00 ; '.'
0000000000000920         db  0x00 ; '.'
0000000000000921         db  0x00 ; '.'
0000000000000922         db  0x00 ; '.'
0000000000000923         db  0x00 ; '.'
0000000000000924         db  0x00 ; '.'
0000000000000925         db  0x00 ; '.'
0000000000000926         db  0x00 ; '.'
0000000000000927         db  0x00 ; '.'
0000000000000928         db  0x48 ; 'H'
0000000000000929         db  0x03 ; '.'
000000000000092a         db  0x00 ; '.'
000000000000092b         db  0x00 ; '.'
000000000000092c         db  0x20 ; ' '
000000000000092d         db  0x00 ; '.'
000000000000092e         db  0x00 ; '.'
000000000000092f         db  0x00 ; '.'
0000000000000930         db  0x00 ; '.'
0000000000000931         db  0x00 ; '.'
0000000000000932         db  0x00 ; '.'
0000000000000933         db  0x00 ; '.'
0000000000000934         db  0x00 ; '.'
0000000000000935         db  0x00 ; '.'
0000000000000936         db  0x00 ; '.'
0000000000000937         db  0x00 ; '.'
0000000000000938         db  0x00 ; '.'
0000000000000939         db  0x00 ; '.'
000000000000093a         db  0x00 ; '.'
000000000000093b         db  0x00 ; '.'
000000000000093c         db  0x00 ; '.'
000000000000093d         db  0x00 ; '.'
000000000000093e         db  0x00 ; '.'
000000000000093f         db  0x00 ; '.'
0000000000000940         db  0x84 ; '.'
0000000000000941         db  0x01 ; '.'
0000000000000942         db  0x00 ; '.'
0000000000000943         db  0x00 ; '.'
0000000000000944         db  0x12 ; '.'
0000000000000945         db  0x00 ; '.'
0000000000000946         db  0x00 ; '.'
0000000000000947         db  0x00 ; '.'
0000000000000948         db  0x00 ; '.'
0000000000000949         db  0x00 ; '.'
000000000000094a         db  0x00 ; '.'
000000000000094b         db  0x00 ; '.'
000000000000094c         db  0x00 ; '.'
000000000000094d         db  0x00 ; '.'
000000000000094e         db  0x00 ; '.'
000000000000094f         db  0x00 ; '.'
0000000000000950         db  0x00 ; '.'
0000000000000951         db  0x00 ; '.'
0000000000000952         db  0x00 ; '.'
0000000000000953         db  0x00 ; '.'
0000000000000954         db  0x00 ; '.'
0000000000000955         db  0x00 ; '.'
0000000000000956         db  0x00 ; '.'
0000000000000957         db  0x00 ; '.'
0000000000000958         db  0xa6 ; '.'
0000000000000959         db  0x00 ; '.'
000000000000095a         db  0x00 ; '.'
000000000000095b         db  0x00 ; '.'
000000000000095c         db  0x12 ; '.'
000000000000095d         db  0x00 ; '.'
000000000000095e         db  0x00 ; '.'
000000000000095f         db  0x00 ; '.'
0000000000000960         db  0x00 ; '.'
0000000000000961         db  0x00 ; '.'
0000000000000962         db  0x00 ; '.'
0000000000000963         db  0x00 ; '.'
0000000000000964         db  0x00 ; '.'
0000000000000965         db  0x00 ; '.'
0000000000000966         db  0x00 ; '.'
0000000000000967         db  0x00 ; '.'
0000000000000968         db  0x00 ; '.'
0000000000000969         db  0x00 ; '.'
000000000000096a         db  0x00 ; '.'
000000000000096b         db  0x00 ; '.'
000000000000096c         db  0x00 ; '.'
000000000000096d         db  0x00 ; '.'
000000000000096e         db  0x00 ; '.'
000000000000096f         db  0x00 ; '.'
0000000000000970         db  0x29 ; ')'
0000000000000971         db  0x02 ; '.'
0000000000000972         db  0x00 ; '.'
0000000000000973         db  0x00 ; '.'
0000000000000974         db  0x22 ; '"'
0000000000000975         db  0x00 ; '.'
0000000000000976         db  0x00 ; '.'
0000000000000977         db  0x00 ; '.'
0000000000000978         db  0x00 ; '.'
0000000000000979         db  0x00 ; '.'
000000000000097a         db  0x00 ; '.'
000000000000097b         db  0x00 ; '.'
000000000000097c         db  0x00 ; '.'
000000000000097d         db  0x00 ; '.'
000000000000097e         db  0x00 ; '.'
000000000000097f         db  0x00 ; '.'
0000000000000980         db  0x00 ; '.'
0000000000000981         db  0x00 ; '.'
0000000000000982         db  0x00 ; '.'
0000000000000983         db  0x00 ; '.'
0000000000000984         db  0x00 ; '.'
0000000000000985         db  0x00 ; '.'
0000000000000986         db  0x00 ; '.'
0000000000000987         db  0x00 ; '.'
0000000000000988         db  0x98 ; '.'
0000000000000989         db  0x01 ; '.'
000000000000098a         db  0x00 ; '.'
000000000000098b         db  0x00 ; '.'
000000000000098c         db  0x12 ; '.'
000000000000098d         db  0x00 ; '.'
000000000000098e         db  0x00 ; '.'
000000000000098f         db  0x00 ; '.'
0000000000000990         db  0x00 ; '.'
0000000000000991         db  0x00 ; '.'
0000000000000992         db  0x00 ; '.'
0000000000000993         db  0x00 ; '.'
0000000000000994         db  0x00 ; '.'
0000000000000995         db  0x00 ; '.'
0000000000000996         db  0x00 ; '.'
0000000000000997         db  0x00 ; '.'
0000000000000998         db  0x00 ; '.'
0000000000000999         db  0x00 ; '.'
000000000000099a         db  0x00 ; '.'
000000000000099b         db  0x00 ; '.'
000000000000099c         db  0x00 ; '.'
000000000000099d         db  0x00 ; '.'
000000000000099e         db  0x00 ; '.'
000000000000099f         db  0x00 ; '.'
00000000000009a0         db  0x58 ; 'X'
00000000000009a1         db  0x01 ; '.'
00000000000009a2         db  0x00 ; '.'
00000000000009a3         db  0x00 ; '.'
00000000000009a4         db  0x11 ; '.'
00000000000009a5         db  0x00 ; '.'
00000000000009a6         db  0x19 ; '.'
00000000000009a7         db  0x00 ; '.'
00000000000009a8         db  0xa8 ; '.'
00000000000009a9         db  0xf0 ; '.'
00000000000009aa         db  0x20 ; ' '
00000000000009ab         db  0x00 ; '.'
00000000000009ac         db  0x00 ; '.'
00000000000009ad         db  0x00 ; '.'
00000000000009ae         db  0x00 ; '.'
00000000000009af         db  0x00 ; '.'
00000000000009b0         db  0x08 ; '.'
00000000000009b1         db  0x00 ; '.'
00000000000009b2         db  0x00 ; '.'
00000000000009b3         db  0x00 ; '.'
00000000000009b4         db  0x00 ; '.'
00000000000009b5         db  0x00 ; '.'
00000000000009b6         db  0x00 ; '.'
00000000000009b7         db  0x00 ; '.'
00000000000009b8         db  0xbe ; '.'
00000000000009b9         db  0x02 ; '.'
00000000000009ba         db  0x00 ; '.'
00000000000009bb         db  0x00 ; '.'
00000000000009bc         db  0x11 ; '.'
00000000000009bd         db  0x00 ; '.'
00000000000009be         db  0x19 ; '.'
00000000000009bf         db  0x00 ; '.'
00000000000009c0         db  0xa0 ; '.'
00000000000009c1         db  0xf0 ; '.'
00000000000009c2         db  0x20 ; ' '
00000000000009c3         db  0x00 ; '.'
00000000000009c4         db  0x00 ; '.'
00000000000009c5         db  0x00 ; '.'
00000000000009c6         db  0x00 ; '.'
00000000000009c7         db  0x00 ; '.'
00000000000009c8         db  0x08 ; '.'
00000000000009c9         db  0x00 ; '.'
00000000000009ca         db  0x00 ; '.'
00000000000009cb         db  0x00 ; '.'
00000000000009cc         db  0x00 ; '.'
00000000000009cd         db  0x00 ; '.'
00000000000009ce         db  0x00 ; '.'
00000000000009cf         db  0x00 ; '.'
00000000000009d0         db  0xc5 ; '.'
00000000000009d1         db  0x00 ; '.'
00000000000009d2         db  0x00 ; '.'
00000000000009d3         db  0x00 ; '.'
00000000000009d4         db  0x11 ; '.'
00000000000009d5         db  0x00 ; '.'
00000000000009d6         db  0x19 ; '.'
00000000000009d7         db  0x00 ; '.'
00000000000009d8         db  0xb0 ; '.'
00000000000009d9         db  0xf0 ; '.'
00000000000009da         db  0x20 ; ' '
00000000000009db         db  0x00 ; '.'
00000000000009dc         db  0x00 ; '.'
00000000000009dd         db  0x00 ; '.'
00000000000009de         db  0x00 ; '.'
00000000000009df         db  0x00 ; '.'
00000000000009e0         db  0x08 ; '.'
00000000000009e1         db  0x00 ; '.'
00000000000009e2         db  0x00 ; '.'
00000000000009e3         db  0x00 ; '.'
00000000000009e4         db  0x00 ; '.'
00000000000009e5         db  0x00 ; '.'
00000000000009e6         db  0x00 ; '.'
00000000000009e7         db  0x00 ; '.'
00000000000009e8         db  0xd1 ; '.'
00000000000009e9         db  0x00 ; '.'
00000000000009ea         db  0x00 ; '.'
00000000000009eb         db  0x00 ; '.'
00000000000009ec         db  0x21 ; '!'
00000000000009ed         db  0x00 ; '.'
00000000000009ee         db  0x19 ; '.'
00000000000009ef         db  0x00 ; '.'
00000000000009f0         db  0xc8 ; '.'
00000000000009f1         db  0xf0 ; '.'
00000000000009f2         db  0x20 ; ' '
00000000000009f3         db  0x00 ; '.'
00000000000009f4         db  0x00 ; '.'
00000000000009f5         db  0x00 ; '.'
00000000000009f6         db  0x00 ; '.'
00000000000009f7         db  0x00 ; '.'
00000000000009f8         db  0x08 ; '.'
00000000000009f9         db  0x00 ; '.'
00000000000009fa         db  0x00 ; '.'
00000000000009fb         db  0x00 ; '.'
00000000000009fc         db  0x00 ; '.'
00000000000009fd         db  0x00 ; '.'
00000000000009fe         db  0x00 ; '.'
00000000000009ff         db  0x00 ; '.'
0000000000000a00         db  0xc9 ; '.'
0000000000000a01         db  0x02 ; '.'
0000000000000a02         db  0x00 ; '.'
0000000000000a03         db  0x00 ; '.'
0000000000000a04         db  0x11 ; '.'
0000000000000a05         db  0x00 ; '.'
0000000000000a06         db  0x19 ; '.'
0000000000000a07         db  0x00 ; '.'
0000000000000a08         db  0xc8 ; '.'
0000000000000a09         db  0xf0 ; '.'
0000000000000a0a         db  0x20 ; ' '
0000000000000a0b         db  0x00 ; '.'
0000000000000a0c         db  0x00 ; '.'
0000000000000a0d         db  0x00 ; '.'
0000000000000a0e         db  0x00 ; '.'
0000000000000a0f         db  0x00 ; '.'
0000000000000a10         db  0x08 ; '.'
0000000000000a11         db  0x00 ; '.'
0000000000000a12         db  0x00 ; '.'
0000000000000a13         db  0x00 ; '.'
0000000000000a14         db  0x00 ; '.'
0000000000000a15         db  0x00 ; '.'
0000000000000a16         db  0x00 ; '.'
0000000000000a17         db  0x00 ; '.'
0000000000000a18         db  0x05 ; '.'
0000000000000a19         db  0x02 ; '.'
0000000000000a1a         db  0x00 ; '.'
0000000000000a1b         db  0x00 ; '.'
0000000000000a1c         db  0x21 ; '!'
0000000000000a1d         db  0x00 ; '.'
0000000000000a1e         db  0x19 ; '.'
0000000000000a1f         db  0x00 ; '.'
0000000000000a20         db  0xa0 ; '.'
0000000000000a21         db  0xf0 ; '.'
0000000000000a22         db  0x20 ; ' '
0000000000000a23         db  0x00 ; '.'
0000000000000a24         db  0x00 ; '.'
0000000000000a25         db  0x00 ; '.'
0000000000000a26         db  0x00 ; '.'
0000000000000a27         db  0x00 ; '.'
0000000000000a28         db  0x08 ; '.'
0000000000000a29         db  0x00 ; '.'
0000000000000a2a         db  0x00 ; '.'
0000000000000a2b         db  0x00 ; '.'
0000000000000a2c         db  0x00 ; '.'
0000000000000a2d         db  0x00 ; '.'
0000000000000a2e         db  0x00 ; '.'
0000000000000a2f         db  0x00 ; '.'
0000000000000a30         db  0xb8 ; '.'
0000000000000a31         db  0x01 ; '.'
0000000000000a32         db  0x00 ; '.'
0000000000000a33         db  0x00 ; '.'
0000000000000a34         db  0x11 ; '.'
0000000000000a35         db  0x00 ; '.'
0000000000000a36         db  0x19 ; '.'
0000000000000a37         db  0x00 ; '.'
0000000000000a38         db  0xe0 ; '.'
0000000000000a39         db  0xf0 ; '.'
0000000000000a3a         db  0x20 ; ' '
0000000000000a3b         db  0x00 ; '.'
0000000000000a3c         db  0x00 ; '.'
0000000000000a3d         db  0x00 ; '.'
0000000000000a3e         db  0x00 ; '.'
0000000000000a3f         db  0x00 ; '.'
0000000000000a40         db  0x08 ; '.'
0000000000000a41         db  0x00 ; '.'
0000000000000a42         db  0x00 ; '.'
0000000000000a43         db  0x00 ; '.'
0000000000000a44         db  0x00 ; '.'
0000000000000a45         db  0x00 ; '.'
0000000000000a46         db  0x00 ; '.'
0000000000000a47         db  0x00 ; '.'
0000000000000a48         db  0x4c ; 'L'
0000000000000a49         db  0x00 ; '.'
0000000000000a4a         db  0x00 ; '.'
0000000000000a4b         db  0x00 ; '.'
0000000000000a4c         db  0x11 ; '.'
0000000000000a4d         db  0x00 ; '.'
0000000000000a4e         db  0x19 ; '.'
0000000000000a4f         db  0x00 ; '.'
0000000000000a50         db  0xb8 ; '.'
0000000000000a51         db  0xf0 ; '.'
0000000000000a52         db  0x20 ; ' '
0000000000000a53         db  0x00 ; '.'
0000000000000a54         db  0x00 ; '.'
0000000000000a55         db  0x00 ; '.'
0000000000000a56         db  0x00 ; '.'
0000000000000a57         db  0x00 ; '.'
0000000000000a58         db  0x04 ; '.'
0000000000000a59         db  0x00 ; '.'
0000000000000a5a         db  0x00 ; '.'
0000000000000a5b         db  0x00 ; '.'
0000000000000a5c         db  0x00 ; '.'
0000000000000a5d         db  0x00 ; '.'
0000000000000a5e         db  0x00 ; '.'
0000000000000a5f         db  0x00 ; '.'
0000000000000a60         db  0xa6 ; '.'
0000000000000a61         db  0x01 ; '.'
0000000000000a62         db  0x00 ; '.'
0000000000000a63         db  0x00 ; '.'
0000000000000a64         db  0x11 ; '.'
0000000000000a65         db  0x00 ; '.'
0000000000000a66         db  0x19 ; '.'
0000000000000a67         db  0x00 ; '.'
0000000000000a68         db  0xc0 ; '.'
0000000000000a69         db  0xf0 ; '.'
0000000000000a6a         db  0x20 ; ' '
0000000000000a6b         db  0x00 ; '.'
0000000000000a6c         db  0x00 ; '.'
0000000000000a6d         db  0x00 ; '.'
0000000000000a6e         db  0x00 ; '.'
0000000000000a6f         db  0x00 ; '.'
0000000000000a70         db  0x08 ; '.'
0000000000000a71         db  0x00 ; '.'
0000000000000a72         db  0x00 ; '.'
0000000000000a73         db  0x00 ; '.'
0000000000000a74         db  0x00 ; '.'
0000000000000a75         db  0x00 ; '.'
0000000000000a76         db  0x00 ; '.'
0000000000000a77         db  0x00 ; '.'


        ; Section .dynstr
        ; Range: [0xa78; 0xdda[ (866 bytes)
        ; File offset : [2680; 3546[ (866 bytes)
        ; Flags: 0x2
        ;   SHT_STRTAB
        ;   SHF_ALLOC

0000000000000a78         db  0x00 ; '.'
0000000000000a79         db  0x6c ; 'l'
0000000000000a7a         db  0x69 ; 'i'
0000000000000a7b         db  0x62 ; 'b'
0000000000000a7c         db  0x63 ; 'c'
0000000000000a7d         db  0x2e ; '.'
0000000000000a7e         db  0x73 ; 's'
0000000000000a7f         db  0x6f ; 'o'
0000000000000a80         db  0x2e ; '.'
0000000000000a81         db  0x36 ; '6'
0000000000000a82         db  0x00 ; '.'
0000000000000a83         db  0x66 ; 'f'
0000000000000a84         db  0x66 ; 'f'
0000000000000a85         db  0x6c ; 'l'
0000000000000a86         db  0x75 ; 'u'
0000000000000a87         db  0x73 ; 's'
0000000000000a88         db  0x68 ; 'h'
0000000000000a89         db  0x00 ; '.'
0000000000000a8a         db  0x5f ; '_'
0000000000000a8b         db  0x5f ; '_'
0000000000000a8c         db  0x70 ; 'p'
0000000000000a8d         db  0x72 ; 'r'
0000000000000a8e         db  0x69 ; 'i'
0000000000000a8f         db  0x6e ; 'n'
0000000000000a90         db  0x74 ; 't'
0000000000000a91         db  0x66 ; 'f'
0000000000000a92         db  0x5f ; '_'
0000000000000a93         db  0x63 ; 'c'
0000000000000a94         db  0x68 ; 'h'
0000000000000a95         db  0x6b ; 'k'
0000000000000a96         db  0x00 ; '.'
0000000000000a97         db  0x72 ; 'r'
0000000000000a98         db  0x65 ; 'e'
0000000000000a99         db  0x61 ; 'a'
0000000000000a9a         db  0x64 ; 'd'
0000000000000a9b         db  0x64 ; 'd'
0000000000000a9c         db  0x69 ; 'i'
0000000000000a9d         db  0x72 ; 'r'
0000000000000a9e         db  0x00 ; '.'
0000000000000a9f         db  0x73 ; 's'
0000000000000aa0         db  0x65 ; 'e'
0000000000000aa1         db  0x74 ; 't'
0000000000000aa2         db  0x6c ; 'l'
0000000000000aa3         db  0x6f ; 'o'
0000000000000aa4         db  0x63 ; 'c'
0000000000000aa5         db  0x61 ; 'a'
0000000000000aa6         db  0x6c ; 'l'
0000000000000aa7         db  0x65 ; 'e'
0000000000000aa8         db  0x00 ; '.'
0000000000000aa9         db  0x6d ; 'm'
0000000000000aaa         db  0x62 ; 'b'
0000000000000aab         db  0x72 ; 'r'
0000000000000aac         db  0x74 ; 't'
0000000000000aad         db  0x6f ; 'o'
0000000000000aae         db  0x77 ; 'w'
0000000000000aaf         db  0x63 ; 'c'
0000000000000ab0         db  0x00 ; '.'
0000000000000ab1         db  0x73 ; 's'
0000000000000ab2         db  0x74 ; 't'
0000000000000ab3         db  0x72 ; 'r'
0000000000000ab4         db  0x6e ; 'n'
0000000000000ab5         db  0x63 ; 'c'
0000000000000ab6         db  0x6d ; 'm'
0000000000000ab7         db  0x70 ; 'p'
0000000000000ab8         db  0x00 ; '.'
0000000000000ab9         db  0x64 ; 'd'
0000000000000aba         db  0x63 ; 'c'
0000000000000abb         db  0x6e ; 'n'
0000000000000abc         db  0x67 ; 'g'
0000000000000abd         db  0x65 ; 'e'
0000000000000abe         db  0x74 ; 't'
0000000000000abf         db  0x74 ; 't'
0000000000000ac0         db  0x65 ; 'e'
0000000000000ac1         db  0x78 ; 'x'
0000000000000ac2         db  0x74 ; 't'
0000000000000ac3         db  0x00 ; '.'
0000000000000ac4         db  0x6f ; 'o'
0000000000000ac5         db  0x70 ; 'p'
0000000000000ac6         db  0x74 ; 't'
0000000000000ac7         db  0x69 ; 'i'
0000000000000ac8         db  0x6e ; 'n'
0000000000000ac9         db  0x64 ; 'd'
0000000000000aca         db  0x00 ; '.'
0000000000000acb         db  0x73 ; 's'
0000000000000acc         db  0x74 ; 't'
0000000000000acd         db  0x72 ; 'r'
0000000000000ace         db  0x72 ; 'r'
0000000000000acf         db  0x63 ; 'c'
0000000000000ad0         db  0x68 ; 'h'
0000000000000ad1         db  0x72 ; 'r'
0000000000000ad2         db  0x00 ; '.'
0000000000000ad3         db  0x72 ; 'r'
0000000000000ad4         db  0x70 ; 'p'
0000000000000ad5         db  0x6d ; 'm'
0000000000000ad6         db  0x61 ; 'a'
0000000000000ad7         db  0x74 ; 't'
0000000000000ad8         db  0x63 ; 'c'
0000000000000ad9         db  0x68 ; 'h'
0000000000000ada         db  0x00 ; '.'
0000000000000adb         db  0x64 ; 'd'
0000000000000adc         db  0x63 ; 'c'
0000000000000add         db  0x67 ; 'g'
0000000000000ade         db  0x65 ; 'e'
0000000000000adf         db  0x74 ; 't'
0000000000000ae0         db  0x74 ; 't'
0000000000000ae1         db  0x65 ; 'e'
0000000000000ae2         db  0x78 ; 'x'
0000000000000ae3         db  0x74 ; 't'
0000000000000ae4         db  0x00 ; '.'
0000000000000ae5         db  0x75 ; 'u'
0000000000000ae6         db  0x6e ; 'n'
0000000000000ae7         db  0x6c ; 'l'
0000000000000ae8         db  0x69 ; 'i'
0000000000000ae9         db  0x6e ; 'n'
0000000000000aea         db  0x6b ; 'k'
0000000000000aeb         db  0x61 ; 'a'
0000000000000aec         db  0x74 ; 't'
0000000000000aed         db  0x00 ; '.'
0000000000000aee         db  0x63 ; 'c'
0000000000000aef         db  0x6c ; 'l'
0000000000000af0         db  0x6f ; 'o'
0000000000000af1         db  0x73 ; 's'
0000000000000af2         db  0x65 ; 'e'
0000000000000af3         db  0x64 ; 'd'
0000000000000af4         db  0x69 ; 'i'
0000000000000af5         db  0x72 ; 'r'
0000000000000af6         db  0x00 ; '.'
0000000000000af7         db  0x66 ; 'f'
0000000000000af8         db  0x63 ; 'c'
0000000000000af9         db  0x68 ; 'h'
0000000000000afa         db  0x64 ; 'd'
0000000000000afb         db  0x69 ; 'i'
0000000000000afc         db  0x72 ; 'r'
0000000000000afd         db  0x00 ; '.'
0000000000000afe         db  0x65 ; 'e'
0000000000000aff         db  0x72 ; 'r'
0000000000000b00         db  0x72 ; 'r'
0000000000000b01         db  0x6f ; 'o'
0000000000000b02         db  0x72 ; 'r'
0000000000000b03         db  0x00 ; '.'
0000000000000b04         db  0x5f ; '_'
0000000000000b05         db  0x5f ; '_'
0000000000000b06         db  0x73 ; 's'
0000000000000b07         db  0x74 ; 't'
0000000000000b08         db  0x61 ; 'a'
0000000000000b09         db  0x63 ; 'c'
0000000000000b0a         db  0x6b ; 'k'
0000000000000b0b         db  0x5f ; '_'
0000000000000b0c         db  0x63 ; 'c'
0000000000000b0d         db  0x68 ; 'h'
0000000000000b0e         db  0x6b ; 'k'
0000000000000b0f         db  0x5f ; '_'
0000000000000b10         db  0x66 ; 'f'
0000000000000b11         db  0x61 ; 'a'
0000000000000b12         db  0x69 ; 'i'
0000000000000b13         db  0x6c ; 'l'
0000000000000b14         db  0x00 ; '.'
0000000000000b15         db  0x5f ; '_'
0000000000000b16         db  0x5f ; '_'
0000000000000b17         db  0x6c ; 'l'
0000000000000b18         db  0x78 ; 'x'
0000000000000b19         db  0x73 ; 's'
0000000000000b1a         db  0x74 ; 't'
0000000000000b1b         db  0x61 ; 'a'
0000000000000b1c         db  0x74 ; 't'
0000000000000b1d         db  0x00 ; '.'
0000000000000b1e         db  0x69 ; 'i'
0000000000000b1f         db  0x73 ; 's'
0000000000000b20         db  0x77 ; 'w'
0000000000000b21         db  0x70 ; 'p'
0000000000000b22         db  0x72 ; 'r'
0000000000000b23         db  0x69 ; 'i'
0000000000000b24         db  0x6e ; 'n'
0000000000000b25         db  0x74 ; 't'
0000000000000b26         db  0x00 ; '.'
0000000000000b27         db  0x72 ; 'r'
0000000000000b28         db  0x65 ; 'e'
0000000000000b29         db  0x61 ; 'a'
0000000000000b2a         db  0x6c ; 'l'
0000000000000b2b         db  0x6c ; 'l'
0000000000000b2c         db  0x6f ; 'o'
0000000000000b2d         db  0x63 ; 'c'
0000000000000b2e         db  0x00 ; '.'
0000000000000b2f         db  0x66 ; 'f'
0000000000000b30         db  0x73 ; 's'
0000000000000b31         db  0x74 ; 't'
0000000000000b32         db  0x61 ; 'a'
0000000000000b33         db  0x74 ; 't'
0000000000000b34         db  0x66 ; 'f'
0000000000000b35         db  0x73 ; 's'
0000000000000b36         db  0x00 ; '.'
0000000000000b37         db  0x61 ; 'a'
0000000000000b38         db  0x62 ; 'b'
0000000000000b39         db  0x6f ; 'o'
0000000000000b3a         db  0x72 ; 'r'
0000000000000b3b         db  0x74 ; 't'
0000000000000b3c         db  0x00 ; '.'
0000000000000b3d         db  0x73 ; 's'
0000000000000b3e         db  0x74 ; 't'
0000000000000b3f         db  0x64 ; 'd'
0000000000000b40         db  0x69 ; 'i'
0000000000000b41         db  0x6e ; 'n'
0000000000000b42         db  0x00 ; '.'
0000000000000b43         db  0x5f ; '_'
0000000000000b44         db  0x65 ; 'e'
0000000000000b45         db  0x78 ; 'x'
0000000000000b46         db  0x69 ; 'i'
0000000000000b47         db  0x74 ; 't'
0000000000000b48         db  0x00 ; '.'
0000000000000b49         db  0x70 ; 'p'
0000000000000b4a         db  0x72 ; 'r'
0000000000000b4b         db  0x6f ; 'o'
0000000000000b4c         db  0x67 ; 'g'
0000000000000b4d         db  0x72 ; 'r'
0000000000000b4e         db  0x61 ; 'a'
0000000000000b4f         db  0x6d ; 'm'
0000000000000b50         db  0x5f ; '_'
0000000000000b51         db  0x69 ; 'i'
0000000000000b52         db  0x6e ; 'n'
0000000000000b53         db  0x76 ; 'v'
0000000000000b54         db  0x6f ; 'o'
0000000000000b55         db  0x63 ; 'c'
0000000000000b56         db  0x61 ; 'a'
0000000000000b57         db  0x74 ; 't'
0000000000000b58         db  0x69 ; 'i'
0000000000000b59         db  0x6f ; 'o'
0000000000000b5a         db  0x6e ; 'n'
0000000000000b5b         db  0x5f ; '_'
0000000000000b5c         db  0x6e ; 'n'
0000000000000b5d         db  0x61 ; 'a'
0000000000000b5e         db  0x6d ; 'm'
0000000000000b5f         db  0x65 ; 'e'
0000000000000b60         db  0x00 ; '.'
0000000000000b61         db  0x5f ; '_'
0000000000000b62         db  0x5f ; '_'
0000000000000b63         db  0x61 ; 'a'
0000000000000b64         db  0x73 ; 's'
0000000000000b65         db  0x73 ; 's'
0000000000000b66         db  0x65 ; 'e'
0000000000000b67         db  0x72 ; 'r'
0000000000000b68         db  0x74 ; 't'
0000000000000b69         db  0x5f ; '_'
0000000000000b6a         db  0x66 ; 'f'
0000000000000b6b         db  0x61 ; 'a'
0000000000000b6c         db  0x69 ; 'i'
0000000000000b6d         db  0x6c ; 'l'
0000000000000b6e         db  0x00 ; '.'
0000000000000b6f         db  0x5f ; '_'
0000000000000b70         db  0x5f ; '_'
0000000000000b71         db  0x63 ; 'c'
0000000000000b72         db  0x74 ; 't'
0000000000000b73         db  0x79 ; 'y'
0000000000000b74         db  0x70 ; 'p'
0000000000000b75         db  0x65 ; 'e'
0000000000000b76         db  0x5f ; '_'
0000000000000b77         db  0x67 ; 'g'
0000000000000b78         db  0x65 ; 'e'
0000000000000b79         db  0x74 ; 't'
0000000000000b7a         db  0x5f ; '_'
0000000000000b7b         db  0x6d ; 'm'
0000000000000b7c         db  0x62 ; 'b'
0000000000000b7d         db  0x5f ; '_'
0000000000000b7e         db  0x63 ; 'c'
0000000000000b7f         db  0x75 ; 'u'
0000000000000b80         db  0x72 ; 'r'
0000000000000b81         db  0x5f ; '_'
0000000000000b82         db  0x6d ; 'm'
0000000000000b83         db  0x61 ; 'a'
0000000000000b84         db  0x78 ; 'x'
0000000000000b85         db  0x00 ; '.'
0000000000000b86         db  0x69 ; 'i'
0000000000000b87         db  0x73 ; 's'
0000000000000b88         db  0x61 ; 'a'
0000000000000b89         db  0x74 ; 't'
0000000000000b8a         db  0x74 ; 't'
0000000000000b8b         db  0x79 ; 'y'
0000000000000b8c         db  0x00 ; '.'
0000000000000b8d         db  0x63 ; 'c'
0000000000000b8e         db  0x61 ; 'a'
0000000000000b8f         db  0x6c ; 'l'
0000000000000b90         db  0x6c ; 'l'
0000000000000b91         db  0x6f ; 'o'
0000000000000b92         db  0x63 ; 'c'
0000000000000b93         db  0x00 ; '.'
0000000000000b94         db  0x73 ; 's'
0000000000000b95         db  0x74 ; 't'
0000000000000b96         db  0x72 ; 'r'
0000000000000b97         db  0x6c ; 'l'
0000000000000b98         db  0x65 ; 'e'
0000000000000b99         db  0x6e ; 'n'
0000000000000b9a         db  0x00 ; '.'
0000000000000b9b         db  0x6d ; 'm'
0000000000000b9c         db  0x65 ; 'e'
0000000000000b9d         db  0x6d ; 'm'
0000000000000b9e         db  0x73 ; 's'
0000000000000b9f         db  0x65 ; 'e'
0000000000000ba0         db  0x74 ; 't'
0000000000000ba1         db  0x00 ; '.'
0000000000000ba2         db  0x5f ; '_'
0000000000000ba3         db  0x5f ; '_'
0000000000000ba4         db  0x65 ; 'e'
0000000000000ba5         db  0x72 ; 'r'
0000000000000ba6         db  0x72 ; 'r'
0000000000000ba7         db  0x6e ; 'n'
0000000000000ba8         db  0x6f ; 'o'
0000000000000ba9         db  0x5f ; '_'
0000000000000baa         db  0x6c ; 'l'
0000000000000bab         db  0x6f ; 'o'
0000000000000bac         db  0x63 ; 'c'
0000000000000bad         db  0x61 ; 'a'
0000000000000bae         db  0x74 ; 't'
0000000000000baf         db  0x69 ; 'i'
0000000000000bb0         db  0x6f ; 'o'
0000000000000bb1         db  0x6e ; 'n'
0000000000000bb2         db  0x00 ; '.'
0000000000000bb3         db  0x6d ; 'm'
0000000000000bb4         db  0x65 ; 'e'
0000000000000bb5         db  0x6d ; 'm'
0000000000000bb6         db  0x63 ; 'c'
0000000000000bb7         db  0x6d ; 'm'
0000000000000bb8         db  0x70 ; 'p'
0000000000000bb9         db  0x00 ; '.'
0000000000000bba         db  0x6d ; 'm'
0000000000000bbb         db  0x65 ; 'e'
0000000000000bbc         db  0x6d ; 'm'
0000000000000bbd         db  0x70 ; 'p'
0000000000000bbe         db  0x63 ; 'c'
0000000000000bbf         db  0x70 ; 'p'
0000000000000bc0         db  0x79 ; 'y'
0000000000000bc1         db  0x00 ; '.'
0000000000000bc2         db  0x5f ; '_'
0000000000000bc3         db  0x5f ; '_'
0000000000000bc4         db  0x66 ; 'f'
0000000000000bc5         db  0x70 ; 'p'
0000000000000bc6         db  0x72 ; 'r'
0000000000000bc7         db  0x69 ; 'i'
0000000000000bc8         db  0x6e ; 'n'
0000000000000bc9         db  0x74 ; 't'
0000000000000bca         db  0x66 ; 'f'
0000000000000bcb         db  0x5f ; '_'
0000000000000bcc         db  0x63 ; 'c'
0000000000000bcd         db  0x68 ; 'h'
0000000000000bce         db  0x6b ; 'k'
0000000000000bcf         db  0x00 ; '.'
0000000000000bd0         db  0x73 ; 's'
0000000000000bd1         db  0x74 ; 't'
0000000000000bd2         db  0x64 ; 'd'
0000000000000bd3         db  0x6f ; 'o'
0000000000000bd4         db  0x75 ; 'u'
0000000000000bd5         db  0x74 ; 't'
0000000000000bd6         db  0x00 ; '.'
0000000000000bd7         db  0x6c ; 'l'
0000000000000bd8         db  0x73 ; 's'
0000000000000bd9         db  0x65 ; 'e'
0000000000000bda         db  0x65 ; 'e'
0000000000000bdb         db  0x6b ; 'k'
0000000000000bdc         db  0x00 ; '.'
0000000000000bdd         db  0x6d ; 'm'
0000000000000bde         db  0x65 ; 'e'
0000000000000bdf         db  0x6d ; 'm'
0000000000000be0         db  0x63 ; 'c'
0000000000000be1         db  0x70 ; 'p'
0000000000000be2         db  0x79 ; 'y'
0000000000000be3         db  0x00 ; '.'
0000000000000be4         db  0x66 ; 'f'
0000000000000be5         db  0x63 ; 'c'
0000000000000be6         db  0x6c ; 'l'
0000000000000be7         db  0x6f ; 'o'
0000000000000be8         db  0x73 ; 's'
0000000000000be9         db  0x65 ; 'e'
0000000000000bea         db  0x00 ; '.'
0000000000000beb         db  0x6d ; 'm'
0000000000000bec         db  0x61 ; 'a'
0000000000000bed         db  0x6c ; 'l'
0000000000000bee         db  0x6c ; 'l'
0000000000000bef         db  0x6f ; 'o'
0000000000000bf0         db  0x63 ; 'c'
0000000000000bf1         db  0x00 ; '.'
0000000000000bf2         db  0x66 ; 'f'
0000000000000bf3         db  0x64 ; 'd'
0000000000000bf4         db  0x6f ; 'o'
0000000000000bf5         db  0x70 ; 'p'
0000000000000bf6         db  0x65 ; 'e'
0000000000000bf7         db  0x6e ; 'n'
0000000000000bf8         db  0x64 ; 'd'
0000000000000bf9         db  0x69 ; 'i'
0000000000000bfa         db  0x72 ; 'r'
0000000000000bfb         db  0x00 ; '.'
0000000000000bfc         db  0x6d ; 'm'
0000000000000bfd         db  0x62 ; 'b'
0000000000000bfe         db  0x73 ; 's'
0000000000000bff         db  0x69 ; 'i'
0000000000000c00         db  0x6e ; 'n'
0000000000000c01         db  0x69 ; 'i'
0000000000000c02         db  0x74 ; 't'
0000000000000c03         db  0x00 ; '.'
0000000000000c04         db  0x6e ; 'n'
0000000000000c05         db  0x6c ; 'l'
0000000000000c06         db  0x5f ; '_'
0000000000000c07         db  0x6c ; 'l'
0000000000000c08         db  0x61 ; 'a'
0000000000000c09         db  0x6e ; 'n'
0000000000000c0a         db  0x67 ; 'g'
0000000000000c0b         db  0x69 ; 'i'
0000000000000c0c         db  0x6e ; 'n'
0000000000000c0d         db  0x66 ; 'f'
0000000000000c0e         db  0x6f ; 'o'
0000000000000c0f         db  0x00 ; '.'
0000000000000c10         db  0x5f ; '_'
0000000000000c11         db  0x5f ; '_'
0000000000000c12         db  0x63 ; 'c'
0000000000000c13         db  0x74 ; 't'
0000000000000c14         db  0x79 ; 'y'
0000000000000c15         db  0x70 ; 'p'
0000000000000c16         db  0x65 ; 'e'
0000000000000c17         db  0x5f ; '_'
0000000000000c18         db  0x62 ; 'b'
0000000000000c19         db  0x5f ; '_'
0000000000000c1a         db  0x6c ; 'l'
0000000000000c1b         db  0x6f ; 'o'
0000000000000c1c         db  0x63 ; 'c'
0000000000000c1d         db  0x00 ; '.'
0000000000000c1e         db  0x6f ; 'o'
0000000000000c1f         db  0x70 ; 'p'
0000000000000c20         db  0x74 ; 't'
0000000000000c21         db  0x61 ; 'a'
0000000000000c22         db  0x72 ; 'r'
0000000000000c23         db  0x67 ; 'g'
0000000000000c24         db  0x00 ; '.'
0000000000000c25         db  0x5f ; '_'
0000000000000c26         db  0x5f ; '_'
0000000000000c27         db  0x66 ; 'f'
0000000000000c28         db  0x72 ; 'r'
0000000000000c29         db  0x65 ; 'e'
0000000000000c2a         db  0x61 ; 'a'
0000000000000c2b         db  0x64 ; 'd'
0000000000000c2c         db  0x69 ; 'i'
0000000000000c2d         db  0x6e ; 'n'
0000000000000c2e         db  0x67 ; 'g'
0000000000000c2f         db  0x00 ; '.'
0000000000000c30         db  0x73 ; 's'
0000000000000c31         db  0x74 ; 't'
0000000000000c32         db  0x64 ; 'd'
0000000000000c33         db  0x65 ; 'e'
0000000000000c34         db  0x72 ; 'r'
0000000000000c35         db  0x72 ; 'r'
0000000000000c36         db  0x00 ; '.'
0000000000000c37         db  0x67 ; 'g'
0000000000000c38         db  0x65 ; 'e'
0000000000000c39         db  0x74 ; 't'
0000000000000c3a         db  0x6f ; 'o'
0000000000000c3b         db  0x70 ; 'p'
0000000000000c3c         db  0x74 ; 't'
0000000000000c3d         db  0x5f ; '_'
0000000000000c3e         db  0x6c ; 'l'
0000000000000c3f         db  0x6f ; 'o'
0000000000000c40         db  0x6e ; 'n'
0000000000000c41         db  0x67 ; 'g'
0000000000000c42         db  0x00 ; '.'
0000000000000c43         db  0x5f ; '_'
0000000000000c44         db  0x5f ; '_'
0000000000000c45         db  0x66 ; 'f'
0000000000000c46         db  0x78 ; 'x'
0000000000000c47         db  0x73 ; 's'
0000000000000c48         db  0x74 ; 't'
0000000000000c49         db  0x61 ; 'a'
0000000000000c4a         db  0x74 ; 't'
0000000000000c4b         db  0x00 ; '.'
0000000000000c4c         db  0x66 ; 'f'
0000000000000c4d         db  0x69 ; 'i'
0000000000000c4e         db  0x6c ; 'l'
0000000000000c4f         db  0x65 ; 'e'
0000000000000c50         db  0x6e ; 'n'
0000000000000c51         db  0x6f ; 'o'
0000000000000c52         db  0x00 ; '.'
0000000000000c53         db  0x5f ; '_'
0000000000000c54         db  0x5f ; '_'
0000000000000c55         db  0x67 ; 'g'
0000000000000c56         db  0x65 ; 'e'
0000000000000c57         db  0x74 ; 't'
0000000000000c58         db  0x64 ; 'd'
0000000000000c59         db  0x65 ; 'e'
0000000000000c5a         db  0x6c ; 'l'
0000000000000c5b         db  0x69 ; 'i'
0000000000000c5c         db  0x6d ; 'm'
0000000000000c5d         db  0x00 ; '.'
0000000000000c5e         db  0x66 ; 'f'
0000000000000c5f         db  0x77 ; 'w'
0000000000000c60         db  0x72 ; 'r'
0000000000000c61         db  0x69 ; 'i'
0000000000000c62         db  0x74 ; 't'
0000000000000c63         db  0x65 ; 'e'
0000000000000c64         db  0x00 ; '.'
0000000000000c65         db  0x67 ; 'g'
0000000000000c66         db  0x65 ; 'e'
0000000000000c67         db  0x74 ; 't'
0000000000000c68         db  0x65 ; 'e'
0000000000000c69         db  0x75 ; 'u'
0000000000000c6a         db  0x69 ; 'i'
0000000000000c6b         db  0x64 ; 'd'
0000000000000c6c         db  0x00 ; '.'
0000000000000c6d         db  0x5f ; '_'
0000000000000c6e         db  0x5f ; '_'
0000000000000c6f         db  0x66 ; 'f'
0000000000000c70         db  0x70 ; 'p'
0000000000000c71         db  0x65 ; 'e'
0000000000000c72         db  0x6e ; 'n'
0000000000000c73         db  0x64 ; 'd'
0000000000000c74         db  0x69 ; 'i'
0000000000000c75         db  0x6e ; 'n'
0000000000000c76         db  0x67 ; 'g'
0000000000000c77         db  0x00 ; '.'
0000000000000c78         db  0x6f ; 'o'
0000000000000c79         db  0x70 ; 'p'
0000000000000c7a         db  0x65 ; 'e'
0000000000000c7b         db  0x6e ; 'n'
0000000000000c7c         db  0x00 ; '.'
0000000000000c7d         db  0x70 ; 'p'
0000000000000c7e         db  0x72 ; 'r'
0000000000000c7f         db  0x6f ; 'o'
0000000000000c80         db  0x67 ; 'g'
0000000000000c81         db  0x72 ; 'r'
0000000000000c82         db  0x61 ; 'a'
0000000000000c83         db  0x6d ; 'm'
0000000000000c84         db  0x5f ; '_'
0000000000000c85         db  0x69 ; 'i'
0000000000000c86         db  0x6e ; 'n'
0000000000000c87         db  0x76 ; 'v'
0000000000000c88         db  0x6f ; 'o'
0000000000000c89         db  0x63 ; 'c'
0000000000000c8a         db  0x61 ; 'a'
0000000000000c8b         db  0x74 ; 't'
0000000000000c8c         db  0x69 ; 'i'
0000000000000c8d         db  0x6f ; 'o'
0000000000000c8e         db  0x6e ; 'n'
0000000000000c8f         db  0x5f ; '_'
0000000000000c90         db  0x73 ; 's'
0000000000000c91         db  0x68 ; 'h'
0000000000000c92         db  0x6f ; 'o'
0000000000000c93         db  0x72 ; 'r'
0000000000000c94         db  0x74 ; 't'
0000000000000c95         db  0x5f ; '_'
0000000000000c96         db  0x6e ; 'n'
0000000000000c97         db  0x61 ; 'a'
0000000000000c98         db  0x6d ; 'm'
0000000000000c99         db  0x65 ; 'e'
0000000000000c9a         db  0x00 ; '.'
0000000000000c9b         db  0x71 ; 'q'
0000000000000c9c         db  0x73 ; 's'
0000000000000c9d         db  0x6f ; 'o'
0000000000000c9e         db  0x72 ; 'r'
0000000000000c9f         db  0x74 ; 't'
0000000000000ca0         db  0x00 ; '.'
0000000000000ca1         db  0x5f ; '_'
0000000000000ca2         db  0x5f ; '_'
0000000000000ca3         db  0x63 ; 'c'
0000000000000ca4         db  0x78 ; 'x'
0000000000000ca5         db  0x61 ; 'a'
0000000000000ca6         db  0x5f ; '_'
0000000000000ca7         db  0x66 ; 'f'
0000000000000ca8         db  0x69 ; 'i'
0000000000000ca9         db  0x6e ; 'n'
0000000000000caa         db  0x61 ; 'a'
0000000000000cab         db  0x6c ; 'l'
0000000000000cac         db  0x69 ; 'i'
0000000000000cad         db  0x7a ; 'z'
0000000000000cae         db  0x65 ; 'e'
0000000000000caf         db  0x00 ; '.'
0000000000000cb0         db  0x66 ; 'f'
0000000000000cb1         db  0x63 ; 'c'
0000000000000cb2         db  0x6e ; 'n'
0000000000000cb3         db  0x74 ; 't'
0000000000000cb4         db  0x6c ; 'l'
0000000000000cb5         db  0x00 ; '.'
0000000000000cb6         db  0x6f ; 'o'
0000000000000cb7         db  0x70 ; 'p'
0000000000000cb8         db  0x65 ; 'e'
0000000000000cb9         db  0x6e ; 'n'
0000000000000cba         db  0x61 ; 'a'
0000000000000cbb         db  0x74 ; 't'
0000000000000cbc         db  0x00 ; '.'
0000000000000cbd         db  0x5f ; '_'
0000000000000cbe         db  0x5f ; '_'
0000000000000cbf         db  0x78 ; 'x'
0000000000000cc0         db  0x73 ; 's'
0000000000000cc1         db  0x74 ; 't'
0000000000000cc2         db  0x61 ; 'a'
0000000000000cc3         db  0x74 ; 't'
0000000000000cc4         db  0x00 ; '.'
0000000000000cc5         db  0x6d ; 'm'
0000000000000cc6         db  0x65 ; 'e'
0000000000000cc7         db  0x6d ; 'm'
0000000000000cc8         db  0x6d ; 'm'
0000000000000cc9         db  0x6f ; 'o'
0000000000000cca         db  0x76 ; 'v'
0000000000000ccb         db  0x65 ; 'e'
0000000000000ccc         db  0x00 ; '.'
0000000000000ccd         db  0x62 ; 'b'
0000000000000cce         db  0x69 ; 'i'
0000000000000ccf         db  0x6e ; 'n'
0000000000000cd0         db  0x64 ; 'd'
0000000000000cd1         db  0x74 ; 't'
0000000000000cd2         db  0x65 ; 'e'
0000000000000cd3         db  0x78 ; 'x'
0000000000000cd4         db  0x74 ; 't'
0000000000000cd5         db  0x64 ; 'd'
0000000000000cd6         db  0x6f ; 'o'
0000000000000cd7         db  0x6d ; 'm'
0000000000000cd8         db  0x61 ; 'a'
0000000000000cd9         db  0x69 ; 'i'
0000000000000cda         db  0x6e ; 'n'
0000000000000cdb         db  0x00 ; '.'
0000000000000cdc         db  0x5f ; '_'
0000000000000cdd         db  0x5f ; '_'
0000000000000cde         db  0x66 ; 'f'
0000000000000cdf         db  0x78 ; 'x'
0000000000000ce0         db  0x73 ; 's'
0000000000000ce1         db  0x74 ; 't'
0000000000000ce2         db  0x61 ; 'a'
0000000000000ce3         db  0x74 ; 't'
0000000000000ce4         db  0x61 ; 'a'
0000000000000ce5         db  0x74 ; 't'
0000000000000ce6         db  0x00 ; '.'
0000000000000ce7         db  0x66 ; 'f'
0000000000000ce8         db  0x61 ; 'a'
0000000000000ce9         db  0x63 ; 'c'
0000000000000cea         db  0x63 ; 'c'
0000000000000ceb         db  0x65 ; 'e'
0000000000000cec         db  0x73 ; 's'
0000000000000ced         db  0x73 ; 's'
0000000000000cee         db  0x61 ; 'a'
0000000000000cef         db  0x74 ; 't'
0000000000000cf0         db  0x00 ; '.'
0000000000000cf1         db  0x73 ; 's'
0000000000000cf2         db  0x74 ; 't'
0000000000000cf3         db  0x72 ; 'r'
0000000000000cf4         db  0x63 ; 'c'
0000000000000cf5         db  0x6d ; 'm'
0000000000000cf6         db  0x70 ; 'p'
0000000000000cf7         db  0x00 ; '.'
0000000000000cf8         db  0x5f ; '_'
0000000000000cf9         db  0x5f ; '_'
0000000000000cfa         db  0x6c ; 'l'
0000000000000cfb         db  0x69 ; 'i'
0000000000000cfc         db  0x62 ; 'b'
0000000000000cfd         db  0x63 ; 'c'
0000000000000cfe         db  0x5f ; '_'
0000000000000cff         db  0x73 ; 's'
                     aTartmain:
0000000000000d00         db         "tart_main", 0
0000000000000d0a         db  0x64 ; 'd'
0000000000000d0b         db  0x69 ; 'i'
0000000000000d0c         db  0x72 ; 'r'
0000000000000d0d         db  0x66 ; 'f'
0000000000000d0e         db  0x64 ; 'd'
0000000000000d0f         db  0x00 ; '.'
0000000000000d10         db  0x66 ; 'f'
0000000000000d11         db  0x73 ; 's'
0000000000000d12         db  0x65 ; 'e'
0000000000000d13         db  0x65 ; 'e'
0000000000000d14         db  0x6b ; 'k'
0000000000000d15         db  0x6f ; 'o'
0000000000000d16         db  0x00 ; '.'
0000000000000d17         db  0x5f ; '_'
0000000000000d18         db  0x5f ; '_'
0000000000000d19         db  0x6f ; 'o'
0000000000000d1a         db  0x76 ; 'v'
0000000000000d1b         db  0x65 ; 'e'
0000000000000d1c         db  0x72 ; 'r'
0000000000000d1d         db  0x66 ; 'f'
0000000000000d1e         db  0x6c ; 'l'
0000000000000d1f         db  0x6f ; 'o'
0000000000000d20         db  0x77 ; 'w'
0000000000000d21         db  0x00 ; '.'
0000000000000d22         db  0x66 ; 'f'
0000000000000d23         db  0x70 ; 'p'
0000000000000d24         db  0x75 ; 'u'
0000000000000d25         db  0x74 ; 't'
0000000000000d26         db  0x73 ; 's'
0000000000000d27         db  0x5f ; '_'
0000000000000d28         db  0x75 ; 'u'
0000000000000d29         db  0x6e ; 'n'
0000000000000d2a         db  0x6c ; 'l'
0000000000000d2b         db  0x6f ; 'o'
0000000000000d2c         db  0x63 ; 'c'
0000000000000d2d         db  0x6b ; 'k'
0000000000000d2e         db  0x65 ; 'e'
0000000000000d2f         db  0x64 ; 'd'
0000000000000d30         db  0x00 ; '.'
0000000000000d31         db  0x66 ; 'f'
0000000000000d32         db  0x72 ; 'r'
0000000000000d33         db  0x65 ; 'e'
0000000000000d34         db  0x65 ; 'e'
0000000000000d35         db  0x00 ; '.'
0000000000000d36         db  0x5f ; '_'
0000000000000d37         db  0x5f ; '_'
0000000000000d38         db  0x70 ; 'p'
0000000000000d39         db  0x72 ; 'r'
0000000000000d3a         db  0x6f ; 'o'
0000000000000d3b         db  0x67 ; 'g'
0000000000000d3c         db  0x6e ; 'n'
0000000000000d3d         db  0x61 ; 'a'
0000000000000d3e         db  0x6d ; 'm'
0000000000000d3f         db  0x65 ; 'e'
0000000000000d40         db  0x00 ; '.'
0000000000000d41         db  0x5f ; '_'
0000000000000d42         db  0x5f ; '_'
0000000000000d43         db  0x70 ; 'p'
0000000000000d44         db  0x72 ; 'r'
0000000000000d45         db  0x6f ; 'o'
0000000000000d46         db  0x67 ; 'g'
0000000000000d47         db  0x6e ; 'n'
0000000000000d48         db  0x61 ; 'a'
0000000000000d49         db  0x6d ; 'm'
0000000000000d4a         db  0x65 ; 'e'
0000000000000d4b         db  0x5f ; '_'
0000000000000d4c         db  0x66 ; 'f'
0000000000000d4d         db  0x75 ; 'u'
0000000000000d4e         db  0x6c ; 'l'
0000000000000d4f         db  0x6c ; 'l'
0000000000000d50         db  0x00 ; '.'
0000000000000d51         db  0x5f ; '_'
0000000000000d52         db  0x5f ; '_'
0000000000000d53         db  0x63 ; 'c'
0000000000000d54         db  0x78 ; 'x'
0000000000000d55         db  0x61 ; 'a'
0000000000000d56         db  0x5f ; '_'
0000000000000d57         db  0x61 ; 'a'
0000000000000d58         db  0x74 ; 't'
0000000000000d59         db  0x65 ; 'e'
0000000000000d5a         db  0x78 ; 'x'
0000000000000d5b         db  0x69 ; 'i'
0000000000000d5c         db  0x74 ; 't'
0000000000000d5d         db  0x00 ; '.'
0000000000000d5e         db  0x47 ; 'G'
0000000000000d5f         db  0x4c ; 'L'
0000000000000d60         db  0x49 ; 'I'
0000000000000d61         db  0x42 ; 'B'
0000000000000d62         db  0x43 ; 'C'
0000000000000d63         db  0x5f ; '_'
0000000000000d64         db  0x32 ; '2'
0000000000000d65         db  0x2e ; '.'
0000000000000d66         db  0x33 ; '3'
0000000000000d67         db  0x00 ; '.'
0000000000000d68         db  0x47 ; 'G'
0000000000000d69         db  0x4c ; 'L'
0000000000000d6a         db  0x49 ; 'I'
0000000000000d6b         db  0x42 ; 'B'
0000000000000d6c         db  0x43 ; 'C'
0000000000000d6d         db  0x5f ; '_'
0000000000000d6e         db  0x32 ; '2'
0000000000000d6f         db  0x2e ; '.'
0000000000000d70         db  0x33 ; '3'
0000000000000d71         db  0x2e ; '.'
0000000000000d72         db  0x34 ; '4'
0000000000000d73         db  0x00 ; '.'
0000000000000d74         db  0x47 ; 'G'
0000000000000d75         db  0x4c ; 'L'
0000000000000d76         db  0x49 ; 'I'
0000000000000d77         db  0x42 ; 'B'
0000000000000d78         db  0x43 ; 'C'
0000000000000d79         db  0x5f ; '_'
0000000000000d7a         db  0x32 ; '2'
0000000000000d7b         db  0x2e ; '.'
0000000000000d7c         db  0x31 ; '1'
0000000000000d7d         db  0x34 ; '4'
0000000000000d7e         db  0x00 ; '.'
0000000000000d7f         db  0x47 ; 'G'
0000000000000d80         db  0x4c ; 'L'
0000000000000d81         db  0x49 ; 'I'
0000000000000d82         db  0x42 ; 'B'
0000000000000d83         db  0x43 ; 'C'
0000000000000d84         db  0x5f ; '_'
0000000000000d85         db  0x32 ; '2'
0000000000000d86         db  0x2e ; '.'
0000000000000d87         db  0x34 ; '4'
0000000000000d88         db  0x00 ; '.'
0000000000000d89         db  0x47 ; 'G'
0000000000000d8a         db  0x4c ; 'L'
0000000000000d8b         db  0x49 ; 'I'
0000000000000d8c         db  0x42 ; 'B'
0000000000000d8d         db  0x43 ; 'C'
0000000000000d8e         db  0x5f ; '_'
0000000000000d8f         db  0x32 ; '2'
0000000000000d90         db  0x2e ; '.'
0000000000000d91         db  0x32 ; '2'
0000000000000d92         db  0x2e ; '.'
0000000000000d93         db  0x35 ; '5'
0000000000000d94         db  0x00 ; '.'
0000000000000d95         db  0x5f ; '_'
0000000000000d96         db  0x49 ; 'I'
0000000000000d97         db  0x54 ; 'T'
0000000000000d98         db  0x4d ; 'M'
0000000000000d99         db  0x5f ; '_'
0000000000000d9a         db  0x64 ; 'd'
0000000000000d9b         db  0x65 ; 'e'
0000000000000d9c         db  0x72 ; 'r'
0000000000000d9d         db  0x65 ; 'e'
0000000000000d9e         db  0x67 ; 'g'
0000000000000d9f         db  0x69 ; 'i'
0000000000000da0         db  0x73 ; 's'
0000000000000da1         db  0x74 ; 't'
0000000000000da2         db  0x65 ; 'e'
0000000000000da3         db  0x72 ; 'r'
0000000000000da4         db  0x54 ; 'T'
0000000000000da5         db  0x4d ; 'M'
0000000000000da6         db  0x43 ; 'C'
0000000000000da7         db  0x6c ; 'l'
0000000000000da8         db  0x6f ; 'o'
0000000000000da9         db  0x6e ; 'n'
0000000000000daa         db  0x65 ; 'e'
0000000000000dab         db  0x54 ; 'T'
0000000000000dac         db  0x61 ; 'a'
0000000000000dad         db  0x62 ; 'b'
0000000000000dae         db  0x6c ; 'l'
0000000000000daf         db  0x65 ; 'e'
0000000000000db0         db  0x00 ; '.'
0000000000000db1         db  0x5f ; '_'
0000000000000db2         db  0x5f ; '_'
0000000000000db3         db  0x67 ; 'g'
0000000000000db4         db  0x6d ; 'm'
0000000000000db5         db  0x6f ; 'o'
0000000000000db6         db  0x6e ; 'n'
0000000000000db7         db  0x5f ; '_'
0000000000000db8         db  0x73 ; 's'
0000000000000db9         db  0x74 ; 't'
0000000000000dba         db  0x61 ; 'a'
0000000000000dbb         db  0x72 ; 'r'
0000000000000dbc         db  0x74 ; 't'
0000000000000dbd         db  0x5f ; '_'
0000000000000dbe         db  0x5f ; '_'
0000000000000dbf         db  0x00 ; '.'
0000000000000dc0         db  0x5f ; '_'
0000000000000dc1         db  0x49 ; 'I'
0000000000000dc2         db  0x54 ; 'T'
0000000000000dc3         db  0x4d ; 'M'
0000000000000dc4         db  0x5f ; '_'
0000000000000dc5         db  0x72 ; 'r'
0000000000000dc6         db  0x65 ; 'e'
0000000000000dc7         db  0x67 ; 'g'
0000000000000dc8         db  0x69 ; 'i'
0000000000000dc9         db  0x73 ; 's'
0000000000000dca         db  0x74 ; 't'
0000000000000dcb         db  0x65 ; 'e'
0000000000000dcc         db  0x72 ; 'r'
0000000000000dcd         db  0x54 ; 'T'
0000000000000dce         db  0x4d ; 'M'
0000000000000dcf         db  0x43 ; 'C'
0000000000000dd0         db  0x6c ; 'l'
0000000000000dd1         db  0x6f ; 'o'
0000000000000dd2         db  0x6e ; 'n'
0000000000000dd3         db  0x65 ; 'e'
0000000000000dd4         db  0x54 ; 'T'
0000000000000dd5         db  0x61 ; 'a'
0000000000000dd6         db  0x62 ; 'b'
0000000000000dd7         db  0x6c ; 'l'
0000000000000dd8         db  0x65 ; 'e'
0000000000000dd9         db  0x00 ; '.'


        ; Section .gnu.version
        ; Range: [0xdda; 0xe7c[ (162 bytes)
        ; File offset : [3546; 3708[ (162 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000dda         db  0x00 ; '.'
0000000000000ddb         db  0x00 ; '.'
0000000000000ddc         db  0x02 ; '.'
0000000000000ddd         db  0x00 ; '.'
0000000000000dde         db  0x02 ; '.'
0000000000000ddf         db  0x00 ; '.'
0000000000000de0         db  0x02 ; '.'
0000000000000de1         db  0x00 ; '.'
0000000000000de2         db  0x02 ; '.'
0000000000000de3         db  0x00 ; '.'
0000000000000de4         db  0x00 ; '.'
0000000000000de5         db  0x00 ; '.'
0000000000000de6         db  0x02 ; '.'
0000000000000de7         db  0x00 ; '.'
0000000000000de8         db  0x02 ; '.'
0000000000000de9         db  0x00 ; '.'
0000000000000dea         db  0x03 ; '.'
0000000000000deb         db  0x00 ; '.'
0000000000000dec         db  0x02 ; '.'
0000000000000ded         db  0x00 ; '.'
0000000000000dee         db  0x02 ; '.'
0000000000000def         db  0x00 ; '.'
0000000000000df0         db  0x03 ; '.'
0000000000000df1         db  0x00 ; '.'
0000000000000df2         db  0x02 ; '.'
0000000000000df3         db  0x00 ; '.'
0000000000000df4         db  0x02 ; '.'
0000000000000df5         db  0x00 ; '.'
0000000000000df6         db  0x02 ; '.'
0000000000000df7         db  0x00 ; '.'
0000000000000df8         db  0x02 ; '.'
0000000000000df9         db  0x00 ; '.'
0000000000000dfa         db  0x02 ; '.'
0000000000000dfb         db  0x00 ; '.'
0000000000000dfc         db  0x02 ; '.'
0000000000000dfd         db  0x00 ; '.'
0000000000000dfe         db  0x02 ; '.'
0000000000000dff         db  0x00 ; '.'
0000000000000e00         db  0x02 ; '.'
0000000000000e01         db  0x00 ; '.'
0000000000000e02         db  0x03 ; '.'
0000000000000e03         db  0x00 ; '.'
0000000000000e04         db  0x03 ; '.'
0000000000000e05         db  0x00 ; '.'
0000000000000e06         db  0x02 ; '.'
0000000000000e07         db  0x00 ; '.'
0000000000000e08         db  0x02 ; '.'
0000000000000e09         db  0x00 ; '.'
0000000000000e0a         db  0x03 ; '.'
0000000000000e0b         db  0x00 ; '.'
0000000000000e0c         db  0x02 ; '.'
0000000000000e0d         db  0x00 ; '.'
0000000000000e0e         db  0x02 ; '.'
0000000000000e0f         db  0x00 ; '.'
0000000000000e10         db  0x02 ; '.'
0000000000000e11         db  0x00 ; '.'
0000000000000e12         db  0x02 ; '.'
0000000000000e13         db  0x00 ; '.'
0000000000000e14         db  0x02 ; '.'
0000000000000e15         db  0x00 ; '.'
0000000000000e16         db  0x02 ; '.'
0000000000000e17         db  0x00 ; '.'
0000000000000e18         db  0x02 ; '.'
0000000000000e19         db  0x00 ; '.'
0000000000000e1a         db  0x02 ; '.'
0000000000000e1b         db  0x00 ; '.'
0000000000000e1c         db  0x02 ; '.'
0000000000000e1d         db  0x00 ; '.'
0000000000000e1e         db  0x02 ; '.'
0000000000000e1f         db  0x00 ; '.'
0000000000000e20         db  0x02 ; '.'
0000000000000e21         db  0x00 ; '.'
0000000000000e22         db  0x02 ; '.'
0000000000000e23         db  0x00 ; '.'
0000000000000e24         db  0x02 ; '.'
0000000000000e25         db  0x00 ; '.'
0000000000000e26         db  0x02 ; '.'
0000000000000e27         db  0x00 ; '.'
0000000000000e28         db  0x02 ; '.'
0000000000000e29         db  0x00 ; '.'
0000000000000e2a         db  0x02 ; '.'
0000000000000e2b         db  0x00 ; '.'
0000000000000e2c         db  0x00 ; '.'
0000000000000e2d         db  0x00 ; '.'
0000000000000e2e         db  0x04 ; '.'
0000000000000e2f         db  0x00 ; '.'
0000000000000e30         db  0x02 ; '.'
0000000000000e31         db  0x00 ; '.'
0000000000000e32         db  0x02 ; '.'
0000000000000e33         db  0x00 ; '.'
0000000000000e34         db  0x02 ; '.'
0000000000000e35         db  0x00 ; '.'
0000000000000e36         db  0x02 ; '.'
0000000000000e37         db  0x00 ; '.'
0000000000000e38         db  0x02 ; '.'
0000000000000e39         db  0x00 ; '.'
0000000000000e3a         db  0x02 ; '.'
0000000000000e3b         db  0x00 ; '.'
0000000000000e3c         db  0x02 ; '.'
0000000000000e3d         db  0x00 ; '.'
0000000000000e3e         db  0x02 ; '.'
0000000000000e3f         db  0x00 ; '.'
0000000000000e40         db  0x02 ; '.'
0000000000000e41         db  0x00 ; '.'
0000000000000e42         db  0x02 ; '.'
0000000000000e43         db  0x00 ; '.'
0000000000000e44         db  0x02 ; '.'
0000000000000e45         db  0x00 ; '.'
0000000000000e46         db  0x05 ; '.'
0000000000000e47         db  0x00 ; '.'
0000000000000e48         db  0x02 ; '.'
0000000000000e49         db  0x00 ; '.'
0000000000000e4a         db  0x02 ; '.'
0000000000000e4b         db  0x00 ; '.'
0000000000000e4c         db  0x02 ; '.'
0000000000000e4d         db  0x00 ; '.'
0000000000000e4e         db  0x02 ; '.'
0000000000000e4f         db  0x00 ; '.'
0000000000000e50         db  0x02 ; '.'
0000000000000e51         db  0x00 ; '.'
0000000000000e52         db  0x02 ; '.'
0000000000000e53         db  0x00 ; '.'
0000000000000e54         db  0x03 ; '.'
0000000000000e55         db  0x00 ; '.'
0000000000000e56         db  0x02 ; '.'
0000000000000e57         db  0x00 ; '.'
0000000000000e58         db  0x02 ; '.'
0000000000000e59         db  0x00 ; '.'
0000000000000e5a         db  0x02 ; '.'
0000000000000e5b         db  0x00 ; '.'
0000000000000e5c         db  0x02 ; '.'
0000000000000e5d         db  0x00 ; '.'
0000000000000e5e         db  0x05 ; '.'
0000000000000e5f         db  0x00 ; '.'
0000000000000e60         db  0x00 ; '.'
0000000000000e61         db  0x00 ; '.'
0000000000000e62         db  0x02 ; '.'
0000000000000e63         db  0x00 ; '.'
0000000000000e64         db  0x02 ; '.'
0000000000000e65         db  0x00 ; '.'
0000000000000e66         db  0x02 ; '.'
0000000000000e67         db  0x00 ; '.'
0000000000000e68         db  0x06 ; '.'
0000000000000e69         db  0x00 ; '.'
0000000000000e6a         db  0x02 ; '.'
0000000000000e6b         db  0x00 ; '.'
0000000000000e6c         db  0x02 ; '.'
0000000000000e6d         db  0x00 ; '.'
0000000000000e6e         db  0x02 ; '.'
0000000000000e6f         db  0x00 ; '.'
0000000000000e70         db  0x02 ; '.'
0000000000000e71         db  0x00 ; '.'
0000000000000e72         db  0x02 ; '.'
0000000000000e73         db  0x00 ; '.'
0000000000000e74         db  0x02 ; '.'
0000000000000e75         db  0x00 ; '.'
0000000000000e76         db  0x02 ; '.'
0000000000000e77         db  0x00 ; '.'
0000000000000e78         db  0x02 ; '.'
0000000000000e79         db  0x00 ; '.'
0000000000000e7a         db  0x02 ; '.'
0000000000000e7b         db  0x00 ; '.'
0000000000000e7c         db  0x00 ; '.'
0000000000000e7d         db  0x00 ; '.'
0000000000000e7e         db  0x00 ; '.'
0000000000000e7f         db  0x00 ; '.'


        ; Section .gnu.version_r
        ; Range: [0xe80; 0xee0[ (96 bytes)
        ; File offset : [3712; 3808[ (96 bytes)
        ; Flags: 0x2
        ;   SHF_ALLOC

0000000000000e80         db  0x01 ; '.'
0000000000000e81         db  0x00 ; '.'
0000000000000e82         db  0x05 ; '.'
0000000000000e83         db  0x00 ; '.'
0000000000000e84         db  0x01 ; '.'
0000000000000e85         db  0x00 ; '.'
0000000000000e86         db  0x00 ; '.'
0000000000000e87         db  0x00 ; '.'
0000000000000e88         db  0x10 ; '.'
0000000000000e89         db  0x00 ; '.'
0000000000000e8a         db  0x00 ; '.'
0000000000000e8b         db  0x00 ; '.'
0000000000000e8c         db  0x00 ; '.'
0000000000000e8d         db  0x00 ; '.'
0000000000000e8e         db  0x00 ; '.'
0000000000000e8f         db  0x00 ; '.'
0000000000000e90         db  0x13 ; '.'
0000000000000e91         db  0x69 ; 'i'
0000000000000e92         db  0x69 ; 'i'
0000000000000e93         db  0x0d ; '.'
0000000000000e94         db  0x00 ; '.'
0000000000000e95         db  0x00 ; '.'
0000000000000e96         db  0x06 ; '.'
0000000000000e97         db  0x00 ; '.'
0000000000000e98         db  0xe6 ; '.'
0000000000000e99         db  0x02 ; '.'
0000000000000e9a         db  0x00 ; '.'
0000000000000e9b         db  0x00 ; '.'
0000000000000e9c         db  0x10 ; '.'
0000000000000e9d         db  0x00 ; '.'
0000000000000e9e         db  0x00 ; '.'
0000000000000e9f         db  0x00 ; '.'
0000000000000ea0         db  0x74 ; 't'
0000000000000ea1         db  0x19 ; '.'
0000000000000ea2         db  0x69 ; 'i'
0000000000000ea3         db  0x09 ; '.'
0000000000000ea4         db  0x00 ; '.'
0000000000000ea5         db  0x00 ; '.'
0000000000000ea6         db  0x05 ; '.'
0000000000000ea7         db  0x00 ; '.'
0000000000000ea8         db  0xf0 ; '.'
0000000000000ea9         db  0x02 ; '.'
0000000000000eaa         db  0x00 ; '.'
0000000000000eab         db  0x00 ; '.'
0000000000000eac         db  0x10 ; '.'
0000000000000ead         db  0x00 ; '.'
0000000000000eae         db  0x00 ; '.'
0000000000000eaf         db  0x00 ; '.'
0000000000000eb0         db  0x94 ; '.'
0000000000000eb1         db  0x91 ; '.'
0000000000000eb2         db  0x96 ; '.'
0000000000000eb3         db  0x06 ; '.'
0000000000000eb4         db  0x00 ; '.'
0000000000000eb5         db  0x00 ; '.'
0000000000000eb6         db  0x04 ; '.'
0000000000000eb7         db  0x00 ; '.'
0000000000000eb8         db  0xfc ; '.'
0000000000000eb9         db  0x02 ; '.'
0000000000000eba         db  0x00 ; '.'
0000000000000ebb         db  0x00 ; '.'
0000000000000ebc         db  0x10 ; '.'
0000000000000ebd         db  0x00 ; '.'
0000000000000ebe         db  0x00 ; '.'
0000000000000ebf         db  0x00 ; '.'
0000000000000ec0         db  0x14 ; '.'
0000000000000ec1         db  0x69 ; 'i'
0000000000000ec2         db  0x69 ; 'i'
0000000000000ec3         db  0x0d ; '.'
0000000000000ec4         db  0x00 ; '.'
0000000000000ec5         db  0x00 ; '.'
0000000000000ec6         db  0x03 ; '.'
0000000000000ec7         db  0x00 ; '.'
0000000000000ec8         db  0x07 ; '.'
0000000000000ec9         db  0x03 ; '.'
0000000000000eca         db  0x00 ; '.'
0000000000000ecb         db  0x00 ; '.'
0000000000000ecc         db  0x10 ; '.'
0000000000000ecd         db  0x00 ; '.'
0000000000000ece         db  0x00 ; '.'
0000000000000ecf         db  0x00 ; '.'
0000000000000ed0         db  0x75 ; 'u'
0000000000000ed1         db  0x1a ; '.'
0000000000000ed2         db  0x69 ; 'i'
0000000000000ed3         db  0x09 ; '.'
0000000000000ed4         db  0x00 ; '.'
0000000000000ed5         db  0x00 ; '.'
0000000000000ed6         db  0x02 ; '.'
0000000000000ed7         db  0x00 ; '.'
0000000000000ed8         db  0x11 ; '.'
0000000000000ed9         db  0x03 ; '.'
0000000000000eda         db  0x00 ; '.'
0000000000000edb         db  0x00 ; '.'
0000000000000edc         db  0x00 ; '.'
0000000000000edd         db  0x00 ; '.'
0000000000000ede         db  0x00 ; '.'
0000000000000edf         db  0x00 ; '.'


        ; Section .rela.dyn
        ; Range: [0xee0; 0x1348[ (1128 bytes)
        ; File offset : [3808; 4936[ (1128 bytes)
        ; Flags: 0x2
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000000ee0         db  0x90 ; '.'
0000000000000ee1         db  0xe9 ; '.'
0000000000000ee2         db  0x20 ; ' '
0000000000000ee3         db  0x00 ; '.'
0000000000000ee4         db  0x00 ; '.'
0000000000000ee5         db  0x00 ; '.'
0000000000000ee6         db  0x00 ; '.'
0000000000000ee7         db  0x00 ; '.'
0000000000000ee8         db  0x08 ; '.'
0000000000000ee9         db  0x00 ; '.'
0000000000000eea         db  0x00 ; '.'
0000000000000eeb         db  0x00 ; '.'
0000000000000eec         db  0x00 ; '.'
0000000000000eed         db  0x00 ; '.'
0000000000000eee         db  0x00 ; '.'
0000000000000eef         db  0x00 ; '.'
0000000000000ef0         db  0x90 ; '.'
0000000000000ef1         db  0x24 ; '$'
0000000000000ef2         db  0x00 ; '.'
0000000000000ef3         db  0x00 ; '.'
0000000000000ef4         db  0x00 ; '.'
0000000000000ef5         db  0x00 ; '.'
0000000000000ef6         db  0x00 ; '.'
0000000000000ef7         db  0x00 ; '.'
0000000000000ef8         db  0x98 ; '.'
0000000000000ef9         db  0xe9 ; '.'
0000000000000efa         db  0x20 ; ' '
0000000000000efb         db  0x00 ; '.'
0000000000000efc         db  0x00 ; '.'
0000000000000efd         db  0x00 ; '.'
0000000000000efe         db  0x00 ; '.'
0000000000000eff         db  0x00 ; '.'
0000000000000f00         db  0x08 ; '.'
0000000000000f01         db  0x00 ; '.'
0000000000000f02         db  0x00 ; '.'
0000000000000f03         db  0x00 ; '.'
0000000000000f04         db  0x00 ; '.'
0000000000000f05         db  0x00 ; '.'
0000000000000f06         db  0x00 ; '.'
0000000000000f07         db  0x00 ; '.'
0000000000000f08         db  0x50 ; 'P'
0000000000000f09         db  0x24 ; '$'
0000000000000f0a         db  0x00 ; '.'
0000000000000f0b         db  0x00 ; '.'
0000000000000f0c         db  0x00 ; '.'
0000000000000f0d         db  0x00 ; '.'
0000000000000f0e         db  0x00 ; '.'
0000000000000f0f         db  0x00 ; '.'
0000000000000f10         db  0xa0 ; '.'
0000000000000f11         db  0xe9 ; '.'
0000000000000f12         db  0x20 ; ' '
0000000000000f13         db  0x00 ; '.'
0000000000000f14         db  0x00 ; '.'
0000000000000f15         db  0x00 ; '.'
0000000000000f16         db  0x00 ; '.'
0000000000000f17         db  0x00 ; '.'
0000000000000f18         db  0x08 ; '.'
0000000000000f19         db  0x00 ; '.'
0000000000000f1a         db  0x00 ; '.'
0000000000000f1b         db  0x00 ; '.'
0000000000000f1c         db  0x00 ; '.'
0000000000000f1d         db  0x00 ; '.'
0000000000000f1e         db  0x00 ; '.'
0000000000000f1f         db  0x00 ; '.'
0000000000000f20         db  0xc1 ; '.'
0000000000000f21         db  0xaa ; '.'
0000000000000f22         db  0x00 ; '.'
0000000000000f23         db  0x00 ; '.'
0000000000000f24         db  0x00 ; '.'
0000000000000f25         db  0x00 ; '.'
0000000000000f26         db  0x00 ; '.'
0000000000000f27         db  0x00 ; '.'
0000000000000f28         db  0xa8 ; '.'
0000000000000f29         db  0xe9 ; '.'
0000000000000f2a         db  0x20 ; ' '
0000000000000f2b         db  0x00 ; '.'
0000000000000f2c         db  0x00 ; '.'
0000000000000f2d         db  0x00 ; '.'
0000000000000f2e         db  0x00 ; '.'
0000000000000f2f         db  0x00 ; '.'
0000000000000f30         db  0x08 ; '.'
0000000000000f31         db  0x00 ; '.'
0000000000000f32         db  0x00 ; '.'
0000000000000f33         db  0x00 ; '.'
0000000000000f34         db  0x00 ; '.'
0000000000000f35         db  0x00 ; '.'
0000000000000f36         db  0x00 ; '.'
0000000000000f37         db  0x00 ; '.'
0000000000000f38         db  0xc7 ; '.'
0000000000000f39         db  0xaa ; '.'
0000000000000f3a         db  0x00 ; '.'
0000000000000f3b         db  0x00 ; '.'
0000000000000f3c         db  0x00 ; '.'
0000000000000f3d         db  0x00 ; '.'
0000000000000f3e         db  0x00 ; '.'
0000000000000f3f         db  0x00 ; '.'
0000000000000f40         db  0xb0 ; '.'
0000000000000f41         db  0xe9 ; '.'
0000000000000f42         db  0x20 ; ' '
0000000000000f43         db  0x00 ; '.'
0000000000000f44         db  0x00 ; '.'
0000000000000f45         db  0x00 ; '.'
0000000000000f46         db  0x00 ; '.'
0000000000000f47         db  0x00 ; '.'
0000000000000f48         db  0x08 ; '.'
0000000000000f49         db  0x00 ; '.'
0000000000000f4a         db  0x00 ; '.'
0000000000000f4b         db  0x00 ; '.'
0000000000000f4c         db  0x00 ; '.'
0000000000000f4d         db  0x00 ; '.'
0000000000000f4e         db  0x00 ; '.'
0000000000000f4f         db  0x00 ; '.'
0000000000000f50         db  0xca ; '.'
0000000000000f51         db  0xaa ; '.'
0000000000000f52         db  0x00 ; '.'
0000000000000f53         db  0x00 ; '.'
0000000000000f54         db  0x00 ; '.'
0000000000000f55         db  0x00 ; '.'
0000000000000f56         db  0x00 ; '.'
0000000000000f57         db  0x00 ; '.'
0000000000000f58         db  0xb8 ; '.'
0000000000000f59         db  0xe9 ; '.'
0000000000000f5a         db  0x20 ; ' '
0000000000000f5b         db  0x00 ; '.'
0000000000000f5c         db  0x00 ; '.'
0000000000000f5d         db  0x00 ; '.'
0000000000000f5e         db  0x00 ; '.'
0000000000000f5f         db  0x00 ; '.'
0000000000000f60         db  0x08 ; '.'
0000000000000f61         db  0x00 ; '.'
0000000000000f62         db  0x00 ; '.'
0000000000000f63         db  0x00 ; '.'
0000000000000f64         db  0x00 ; '.'
0000000000000f65         db  0x00 ; '.'
0000000000000f66         db  0x00 ; '.'
0000000000000f67         db  0x00 ; '.'
0000000000000f68         db  0xcf ; '.'
0000000000000f69         db  0xaa ; '.'
0000000000000f6a         db  0x00 ; '.'
0000000000000f6b         db  0x00 ; '.'
0000000000000f6c         db  0x00 ; '.'
0000000000000f6d         db  0x00 ; '.'
0000000000000f6e         db  0x00 ; '.'
0000000000000f6f         db  0x00 ; '.'
0000000000000f70         db  0xc0 ; '.'
0000000000000f71         db  0xe9 ; '.'
0000000000000f72         db  0x20 ; ' '
0000000000000f73         db  0x00 ; '.'
0000000000000f74         db  0x00 ; '.'
0000000000000f75         db  0x00 ; '.'
0000000000000f76         db  0x00 ; '.'
0000000000000f77         db  0x00 ; '.'
0000000000000f78         db  0x08 ; '.'
0000000000000f79         db  0x00 ; '.'
0000000000000f7a         db  0x00 ; '.'
0000000000000f7b         db  0x00 ; '.'
0000000000000f7c         db  0x00 ; '.'
0000000000000f7d         db  0x00 ; '.'
0000000000000f7e         db  0x00 ; '.'
0000000000000f7f         db  0x00 ; '.'
0000000000000f80         db  0xc6 ; '.'
0000000000000f81         db  0xb9 ; '.'
0000000000000f82         db  0x00 ; '.'
0000000000000f83         db  0x00 ; '.'
0000000000000f84         db  0x00 ; '.'
0000000000000f85         db  0x00 ; '.'
0000000000000f86         db  0x00 ; '.'
0000000000000f87         db  0x00 ; '.'
0000000000000f88         db  0xc8 ; '.'
0000000000000f89         db  0xe9 ; '.'
0000000000000f8a         db  0x20 ; ' '
0000000000000f8b         db  0x00 ; '.'
0000000000000f8c         db  0x00 ; '.'
0000000000000f8d         db  0x00 ; '.'
0000000000000f8e         db  0x00 ; '.'
0000000000000f8f         db  0x00 ; '.'
0000000000000f90         db  0x08 ; '.'
0000000000000f91         db  0x00 ; '.'
0000000000000f92         db  0x00 ; '.'
0000000000000f93         db  0x00 ; '.'
0000000000000f94         db  0x00 ; '.'
0000000000000f95         db  0x00 ; '.'
0000000000000f96         db  0x00 ; '.'
0000000000000f97         db  0x00 ; '.'
0000000000000f98         db  0xd4 ; '.'
0000000000000f99         db  0xaa ; '.'
0000000000000f9a         db  0x00 ; '.'
0000000000000f9b         db  0x00 ; '.'
0000000000000f9c         db  0x00 ; '.'
0000000000000f9d         db  0x00 ; '.'
0000000000000f9e         db  0x00 ; '.'
0000000000000f9f         db  0x00 ; '.'
0000000000000fa0         db  0xe0 ; '.'
0000000000000fa1         db  0xe9 ; '.'
0000000000000fa2         db  0x20 ; ' '
0000000000000fa3         db  0x00 ; '.'
0000000000000fa4         db  0x00 ; '.'
0000000000000fa5         db  0x00 ; '.'
0000000000000fa6         db  0x00 ; '.'
0000000000000fa7         db  0x00 ; '.'
0000000000000fa8         db  0x08 ; '.'
0000000000000fa9         db  0x00 ; '.'
0000000000000faa         db  0x00 ; '.'
0000000000000fab         db  0x00 ; '.'
0000000000000fac         db  0x00 ; '.'
0000000000000fad         db  0x00 ; '.'
0000000000000fae         db  0x00 ; '.'
0000000000000faf         db  0x00 ; '.'
0000000000000fb0         db  0xd8 ; '.'
0000000000000fb1         db  0xaa ; '.'
0000000000000fb2         db  0x00 ; '.'
0000000000000fb3         db  0x00 ; '.'
0000000000000fb4         db  0x00 ; '.'
0000000000000fb5         db  0x00 ; '.'
0000000000000fb6         db  0x00 ; '.'
0000000000000fb7         db  0x00 ; '.'
0000000000000fb8         db  0x00 ; '.'
0000000000000fb9         db  0xea ; '.'
0000000000000fba         db  0x20 ; ' '
0000000000000fbb         db  0x00 ; '.'
0000000000000fbc         db  0x00 ; '.'
0000000000000fbd         db  0x00 ; '.'
0000000000000fbe         db  0x00 ; '.'
0000000000000fbf         db  0x00 ; '.'
0000000000000fc0         db  0x08 ; '.'
0000000000000fc1         db  0x00 ; '.'
0000000000000fc2         db  0x00 ; '.'
0000000000000fc3         db  0x00 ; '.'
0000000000000fc4         db  0x00 ; '.'
0000000000000fc5         db  0x00 ; '.'
0000000000000fc6         db  0x00 ; '.'
0000000000000fc7         db  0x00 ; '.'
0000000000000fc8         db  0xe4 ; '.'
0000000000000fc9         db  0xa9 ; '.'
0000000000000fca         db  0x00 ; '.'
0000000000000fcb         db  0x00 ; '.'
0000000000000fcc         db  0x00 ; '.'
0000000000000fcd         db  0x00 ; '.'
0000000000000fce         db  0x00 ; '.'
0000000000000fcf         db  0x00 ; '.'
0000000000000fd0         db  0x20 ; ' '
0000000000000fd1         db  0xea ; '.'
0000000000000fd2         db  0x20 ; ' '
0000000000000fd3         db  0x00 ; '.'
0000000000000fd4         db  0x00 ; '.'
0000000000000fd5         db  0x00 ; '.'
0000000000000fd6         db  0x00 ; '.'
0000000000000fd7         db  0x00 ; '.'
0000000000000fd8         db  0x08 ; '.'
0000000000000fd9         db  0x00 ; '.'
0000000000000fda         db  0x00 ; '.'
0000000000000fdb         db  0x00 ; '.'
0000000000000fdc         db  0x00 ; '.'
0000000000000fdd         db  0x00 ; '.'
0000000000000fde         db  0x00 ; '.'
0000000000000fdf         db  0x00 ; '.'
0000000000000fe0         db  0xde ; '.'
0000000000000fe1         db  0xaa ; '.'
0000000000000fe2         db  0x00 ; '.'
0000000000000fe3         db  0x00 ; '.'
0000000000000fe4         db  0x00 ; '.'
0000000000000fe5         db  0x00 ; '.'
0000000000000fe6         db  0x00 ; '.'
0000000000000fe7         db  0x00 ; '.'
0000000000000fe8         db  0x40 ; '@'
0000000000000fe9         db  0xea ; '.'
0000000000000fea         db  0x20 ; ' '
0000000000000feb         db  0x00 ; '.'
0000000000000fec         db  0x00 ; '.'
0000000000000fed         db  0x00 ; '.'
0000000000000fee         db  0x00 ; '.'
0000000000000fef         db  0x00 ; '.'
0000000000000ff0         db  0x08 ; '.'
0000000000000ff1         db  0x00 ; '.'
0000000000000ff2         db  0x00 ; '.'
0000000000000ff3         db  0x00 ; '.'
0000000000000ff4         db  0x00 ; '.'
0000000000000ff5         db  0x00 ; '.'
0000000000000ff6         db  0x00 ; '.'
0000000000000ff7         db  0x00 ; '.'
0000000000000ff8         db  0xf2 ; '.'
0000000000000ff9         db  0xa9 ; '.'
0000000000000ffa         db  0x00 ; '.'
0000000000000ffb         db  0x00 ; '.'
0000000000000ffc         db  0x00 ; '.'
0000000000000ffd         db  0x00 ; '.'
0000000000000ffe         db  0x00 ; '.'
0000000000000fff         db  0x00 ; '.'
0000000000001000         db  0x60 ; '`'                                         ; DATA XREF=file_type+60, rpl_fts_open+165, rpl_fts_open+170, rpl_fts_open+735, rpl_fts_children+80, rpl_fts_children+95
0000000000001001         db  0xea ; '.'
0000000000001002         db  0x20 ; ' '
0000000000001003         db  0x00 ; '.'
0000000000001004         db  0x00 ; '.'
0000000000001005         db  0x00 ; '.'
0000000000001006         db  0x00 ; '.'
0000000000001007         db  0x00 ; '.'
0000000000001008         db  0x08 ; '.'
0000000000001009         db  0x00 ; '.'
000000000000100a         db  0x00 ; '.'
000000000000100b         db  0x00 ; '.'
000000000000100c         db  0x00 ; '.'
000000000000100d         db  0x00 ; '.'
000000000000100e         db  0x00 ; '.'
000000000000100f         db  0x00 ; '.'
0000000000001010         db  0xf5 ; '.'
0000000000001011         db  0xa9 ; '.'
0000000000001012         db  0x00 ; '.'
0000000000001013         db  0x00 ; '.'
0000000000001014         db  0x00 ; '.'
0000000000001015         db  0x00 ; '.'
0000000000001016         db  0x00 ; '.'
0000000000001017         db  0x00 ; '.'
0000000000001018         db  0x80 ; '.'
0000000000001019         db  0xea ; '.'
000000000000101a         db  0x20 ; ' '
000000000000101b         db  0x00 ; '.'
000000000000101c         db  0x00 ; '.'
000000000000101d         db  0x00 ; '.'
000000000000101e         db  0x00 ; '.'
000000000000101f         db  0x00 ; '.'
0000000000001020         db  0x08 ; '.'
0000000000001021         db  0x00 ; '.'
0000000000001022         db  0x00 ; '.'
0000000000001023         db  0x00 ; '.'
0000000000001024         db  0x00 ; '.'
0000000000001025         db  0x00 ; '.'
0000000000001026         db  0x00 ; '.'
0000000000001027         db  0x00 ; '.'
0000000000001028         db  0xee ; '.'
0000000000001029         db  0xaa ; '.'
000000000000102a         db  0x00 ; '.'
000000000000102b         db  0x00 ; '.'
000000000000102c         db  0x00 ; '.'
000000000000102d         db  0x00 ; '.'
000000000000102e         db  0x00 ; '.'
000000000000102f         db  0x00 ; '.'
0000000000001030         db  0xa0 ; '.'
0000000000001031         db  0xea ; '.'
0000000000001032         db  0x20 ; ' '
0000000000001033         db  0x00 ; '.'
0000000000001034         db  0x00 ; '.'
0000000000001035         db  0x00 ; '.'
0000000000001036         db  0x00 ; '.'
0000000000001037         db  0x00 ; '.'
0000000000001038         db  0x08 ; '.'
0000000000001039         db  0x00 ; '.'
000000000000103a         db  0x00 ; '.'
000000000000103b         db  0x00 ; '.'
000000000000103c         db  0x00 ; '.'
000000000000103d         db  0x00 ; '.'
000000000000103e         db  0x00 ; '.'
000000000000103f         db  0x00 ; '.'
0000000000001040         db  0x01 ; '.'
0000000000001041         db  0xab ; '.'
0000000000001042         db  0x00 ; '.'
0000000000001043         db  0x00 ; '.'
0000000000001044         db  0x00 ; '.'
0000000000001045         db  0x00 ; '.'
0000000000001046         db  0x00 ; '.'
0000000000001047         db  0x00 ; '.'
0000000000001048         db  0xc0 ; '.'
0000000000001049         db  0xea ; '.'
000000000000104a         db  0x20 ; ' '
000000000000104b         db  0x00 ; '.'
000000000000104c         db  0x00 ; '.'
000000000000104d         db  0x00 ; '.'
000000000000104e         db  0x00 ; '.'
000000000000104f         db  0x00 ; '.'
0000000000001050         db  0x08 ; '.'
0000000000001051         db  0x00 ; '.'
0000000000001052         db  0x00 ; '.'
0000000000001053         db  0x00 ; '.'
0000000000001054         db  0x00 ; '.'
0000000000001055         db  0x00 ; '.'
0000000000001056         db  0x00 ; '.'
0000000000001057         db  0x00 ; '.'
0000000000001058         db  0x0b ; '.'
0000000000001059         db  0xab ; '.'
000000000000105a         db  0x00 ; '.'
000000000000105b         db  0x00 ; '.'
000000000000105c         db  0x00 ; '.'
000000000000105d         db  0x00 ; '.'
000000000000105e         db  0x00 ; '.'
000000000000105f         db  0x00 ; '.'
0000000000001060         db  0xe0 ; '.'
0000000000001061         db  0xea ; '.'
0000000000001062         db  0x20 ; ' '
0000000000001063         db  0x00 ; '.'
0000000000001064         db  0x00 ; '.'
0000000000001065         db  0x00 ; '.'
0000000000001066         db  0x00 ; '.'
0000000000001067         db  0x00 ; '.'
0000000000001068         db  0x08 ; '.'
0000000000001069         db  0x00 ; '.'
000000000000106a         db  0x00 ; '.'
000000000000106b         db  0x00 ; '.'
000000000000106c         db  0x00 ; '.'
000000000000106d         db  0x00 ; '.'
000000000000106e         db  0x00 ; '.'
000000000000106f         db  0x00 ; '.'
0000000000001070         db  0x0f ; '.'
0000000000001071         db  0xab ; '.'
0000000000001072         db  0x00 ; '.'
0000000000001073         db  0x00 ; '.'
0000000000001074         db  0x00 ; '.'
0000000000001075         db  0x00 ; '.'
0000000000001076         db  0x00 ; '.'
0000000000001077         db  0x00 ; '.'
0000000000001078         db  0x00 ; '.'
0000000000001079         db  0xeb ; '.'
000000000000107a         db  0x20 ; ' '
000000000000107b         db  0x00 ; '.'
000000000000107c         db  0x00 ; '.'
000000000000107d         db  0x00 ; '.'
000000000000107e         db  0x00 ; '.'
000000000000107f         db  0x00 ; '.'
0000000000001080         db  0x08 ; '.'
0000000000001081         db  0x00 ; '.'
0000000000001082         db  0x00 ; '.'
0000000000001083         db  0x00 ; '.'
0000000000001084         db  0x00 ; '.'
0000000000001085         db  0x00 ; '.'
0000000000001086         db  0x00 ; '.'
0000000000001087         db  0x00 ; '.'
0000000000001088         db  0x17 ; '.'
0000000000001089         db  0xab ; '.'
000000000000108a         db  0x00 ; '.'
000000000000108b         db  0x00 ; '.'
000000000000108c         db  0x00 ; '.'
000000000000108d         db  0x00 ; '.'
000000000000108e         db  0x00 ; '.'
000000000000108f         db  0x00 ; '.'
0000000000001090         db  0x20 ; ' '
0000000000001091         db  0xeb ; '.'
0000000000001092         db  0x20 ; ' '
0000000000001093         db  0x00 ; '.'
0000000000001094         db  0x00 ; '.'
0000000000001095         db  0x00 ; '.'
0000000000001096         db  0x00 ; '.'
0000000000001097         db  0x00 ; '.'
0000000000001098         db  0x08 ; '.'
0000000000001099         db  0x00 ; '.'
000000000000109a         db  0x00 ; '.'
000000000000109b         db  0x00 ; '.'
000000000000109c         db  0x00 ; '.'
000000000000109d         db  0x00 ; '.'
000000000000109e         db  0x00 ; '.'
000000000000109f         db  0x00 ; '.'
00000000000010a0         db  0x1c ; '.'
00000000000010a1         db  0xab ; '.'
00000000000010a2         db  0x00 ; '.'
00000000000010a3         db  0x00 ; '.'
00000000000010a4         db  0x00 ; '.'
00000000000010a5         db  0x00 ; '.'
00000000000010a6         db  0x00 ; '.'
00000000000010a7         db  0x00 ; '.'
00000000000010a8         db  0x60 ; '`'
00000000000010a9         db  0xeb ; '.'
00000000000010aa         db  0x20 ; ' '
00000000000010ab         db  0x00 ; '.'
00000000000010ac         db  0x00 ; '.'
00000000000010ad         db  0x00 ; '.'
00000000000010ae         db  0x00 ; '.'
00000000000010af         db  0x00 ; '.'
00000000000010b0         db  0x08 ; '.'
00000000000010b1         db  0x00 ; '.'
00000000000010b2         db  0x00 ; '.'
00000000000010b3         db  0x00 ; '.'
00000000000010b4         db  0x00 ; '.'
00000000000010b5         db  0x00 ; '.'
00000000000010b6         db  0x00 ; '.'
00000000000010b7         db  0x00 ; '.'
00000000000010b8         db  0x91 ; '.'
00000000000010b9         db  0xb9 ; '.'
00000000000010ba         db  0x00 ; '.'
00000000000010bb         db  0x00 ; '.'
00000000000010bc         db  0x00 ; '.'
00000000000010bd         db  0x00 ; '.'
00000000000010be         db  0x00 ; '.'
00000000000010bf         db  0x00 ; '.'
00000000000010c0         db  0x68 ; 'h'
00000000000010c1         db  0xeb ; '.'
00000000000010c2         db  0x20 ; ' '
00000000000010c3         db  0x00 ; '.'
00000000000010c4         db  0x00 ; '.'
00000000000010c5         db  0x00 ; '.'
00000000000010c6         db  0x00 ; '.'
00000000000010c7         db  0x00 ; '.'
00000000000010c8         db  0x08 ; '.'
00000000000010c9         db  0x00 ; '.'
00000000000010ca         db  0x00 ; '.'
00000000000010cb         db  0x00 ; '.'
00000000000010cc         db  0x00 ; '.'
00000000000010cd         db  0x00 ; '.'
00000000000010ce         db  0x00 ; '.'
00000000000010cf         db  0x00 ; '.'
00000000000010d0         db  0x99 ; '.'
00000000000010d1         db  0xb9 ; '.'
00000000000010d2         db  0x00 ; '.'
00000000000010d3         db  0x00 ; '.'
00000000000010d4         db  0x00 ; '.'
00000000000010d5         db  0x00 ; '.'
00000000000010d6         db  0x00 ; '.'
00000000000010d7         db  0x00 ; '.'
00000000000010d8         db  0x70 ; 'p'
00000000000010d9         db  0xeb ; '.'
00000000000010da         db  0x20 ; ' '
00000000000010db         db  0x00 ; '.'
00000000000010dc         db  0x00 ; '.'
00000000000010dd         db  0x00 ; '.'
00000000000010de         db  0x00 ; '.'
00000000000010df         db  0x00 ; '.'
00000000000010e0         db  0x08 ; '.'
00000000000010e1         db  0x00 ; '.'
00000000000010e2         db  0x00 ; '.'
00000000000010e3         db  0x00 ; '.'
00000000000010e4         db  0x00 ; '.'
00000000000010e5         db  0x00 ; '.'
00000000000010e6         db  0x00 ; '.'
00000000000010e7         db  0x00 ; '.'
00000000000010e8         db  0x9f ; '.'
00000000000010e9         db  0xb9 ; '.'
00000000000010ea         db  0x00 ; '.'
00000000000010eb         db  0x00 ; '.'
00000000000010ec         db  0x00 ; '.'
00000000000010ed         db  0x00 ; '.'
00000000000010ee         db  0x00 ; '.'
00000000000010ef         db  0x00 ; '.'
00000000000010f0         db  0x78 ; 'x'
00000000000010f1         db  0xeb ; '.'
00000000000010f2         db  0x20 ; ' '
00000000000010f3         db  0x00 ; '.'
00000000000010f4         db  0x00 ; '.'
00000000000010f5         db  0x00 ; '.'
00000000000010f6         db  0x00 ; '.'
00000000000010f7         db  0x00 ; '.'
00000000000010f8         db  0x08 ; '.'
00000000000010f9         db  0x00 ; '.'
00000000000010fa         db  0x00 ; '.'
00000000000010fb         db  0x00 ; '.'
00000000000010fc         db  0x00 ; '.'
00000000000010fd         db  0x00 ; '.'
00000000000010fe         db  0x00 ; '.'
00000000000010ff         db  0x00 ; '.'
0000000000001100         db  0xac ; '.'
0000000000001101         db  0xb9 ; '.'
0000000000001102         db  0x00 ; '.'
0000000000001103         db  0x00 ; '.'
0000000000001104         db  0x00 ; '.'
0000000000001105         db  0x00 ; '.'
0000000000001106         db  0x00 ; '.'
0000000000001107         db  0x00 ; '.'
0000000000001108         db  0x80 ; '.'
0000000000001109         db  0xeb ; '.'
000000000000110a         db  0x20 ; ' '
000000000000110b         db  0x00 ; '.'
000000000000110c         db  0x00 ; '.'
000000000000110d         db  0x00 ; '.'
000000000000110e         db  0x00 ; '.'
000000000000110f         db  0x00 ; '.'
0000000000001110         db  0x08 ; '.'
0000000000001111         db  0x00 ; '.'
0000000000001112         db  0x00 ; '.'
0000000000001113         db  0x00 ; '.'
0000000000001114         db  0x00 ; '.'
0000000000001115         db  0x00 ; '.'
0000000000001116         db  0x00 ; '.'
0000000000001117         db  0x00 ; '.'
0000000000001118         db  0xb9 ; '.'
0000000000001119         db  0xb9 ; '.'
000000000000111a         db  0x00 ; '.'
000000000000111b         db  0x00 ; '.'
000000000000111c         db  0x00 ; '.'
000000000000111d         db  0x00 ; '.'
000000000000111e         db  0x00 ; '.'
000000000000111f         db  0x00 ; '.'
0000000000001120         db  0x88 ; '.'
0000000000001121         db  0xeb ; '.'
0000000000001122         db  0x20 ; ' '
0000000000001123         db  0x00 ; '.'
0000000000001124         db  0x00 ; '.'
0000000000001125         db  0x00 ; '.'
0000000000001126         db  0x00 ; '.'
0000000000001127         db  0x00 ; '.'
0000000000001128         db  0x08 ; '.'
0000000000001129         db  0x00 ; '.'
000000000000112a         db  0x00 ; '.'
000000000000112b         db  0x00 ; '.'
000000000000112c         db  0x00 ; '.'
000000000000112d         db  0x00 ; '.'
000000000000112e         db  0x00 ; '.'
000000000000112f         db  0x00 ; '.'
0000000000001130         db  0x74 ; 't'
0000000000001131         db  0xaa ; '.'
0000000000001132         db  0x00 ; '.'
0000000000001133         db  0x00 ; '.'
0000000000001134         db  0x00 ; '.'
0000000000001135         db  0x00 ; '.'
0000000000001136         db  0x00 ; '.'
0000000000001137         db  0x00 ; '.'
0000000000001138         db  0x90 ; '.'
0000000000001139         db  0xeb ; '.'
000000000000113a         db  0x20 ; ' '
000000000000113b         db  0x00 ; '.'
000000000000113c         db  0x00 ; '.'
000000000000113d         db  0x00 ; '.'
000000000000113e         db  0x00 ; '.'
000000000000113f         db  0x00 ; '.'
0000000000001140         db  0x08 ; '.'
0000000000001141         db  0x00 ; '.'
0000000000001142         db  0x00 ; '.'
0000000000001143         db  0x00 ; '.'
0000000000001144         db  0x00 ; '.'
0000000000001145         db  0x00 ; '.'
0000000000001146         db  0x00 ; '.'
0000000000001147         db  0x00 ; '.'
0000000000001148         db  0xcd ; '.'
0000000000001149         db  0xb9 ; '.'
000000000000114a         db  0x00 ; '.'
000000000000114b         db  0x00 ; '.'
000000000000114c         db  0x00 ; '.'
000000000000114d         db  0x00 ; '.'
000000000000114e         db  0x00 ; '.'
000000000000114f         db  0x00 ; '.'
0000000000001150         db  0x98 ; '.'
0000000000001151         db  0xeb ; '.'
0000000000001152         db  0x20 ; ' '
0000000000001153         db  0x00 ; '.'
0000000000001154         db  0x00 ; '.'
0000000000001155         db  0x00 ; '.'
0000000000001156         db  0x00 ; '.'
0000000000001157         db  0x00 ; '.'
0000000000001158         db  0x08 ; '.'
0000000000001159         db  0x00 ; '.'
000000000000115a         db  0x00 ; '.'
000000000000115b         db  0x00 ; '.'
000000000000115c         db  0x00 ; '.'
000000000000115d         db  0x00 ; '.'
000000000000115e         db  0x00 ; '.'
000000000000115f         db  0x00 ; '.'
0000000000001160         db  0xb2 ; '.'
0000000000001161         db  0xb9 ; '.'
0000000000001162         db  0x00 ; '.'
0000000000001163         db  0x00 ; '.'
0000000000001164         db  0x00 ; '.'
0000000000001165         db  0x00 ; '.'
0000000000001166         db  0x00 ; '.'
0000000000001167         db  0x00 ; '.'
0000000000001168         db  0xa0 ; '.'
0000000000001169         db  0xeb ; '.'
000000000000116a         db  0x20 ; ' '
000000000000116b         db  0x00 ; '.'
000000000000116c         db  0x00 ; '.'
000000000000116d         db  0x00 ; '.'
000000000000116e         db  0x00 ; '.'
000000000000116f         db  0x00 ; '.'
0000000000001170         db  0x08 ; '.'
0000000000001171         db  0x00 ; '.'
0000000000001172         db  0x00 ; '.'
0000000000001173         db  0x00 ; '.'
0000000000001174         db  0x00 ; '.'
0000000000001175         db  0x00 ; '.'
0000000000001176         db  0x00 ; '.'
0000000000001177         db  0x00 ; '.'
0000000000001178         db  0xdb ; '.'
0000000000001179         db  0xa9 ; '.'
000000000000117a         db  0x00 ; '.'
000000000000117b         db  0x00 ; '.'
000000000000117c         db  0x00 ; '.'
000000000000117d         db  0x00 ; '.'
000000000000117e         db  0x00 ; '.'
000000000000117f         db  0x00 ; '.'
0000000000001180         db  0xa8 ; '.'
0000000000001181         db  0xeb ; '.'
0000000000001182         db  0x20 ; ' '
0000000000001183         db  0x00 ; '.'
0000000000001184         db  0x00 ; '.'
0000000000001185         db  0x00 ; '.'
0000000000001186         db  0x00 ; '.'
0000000000001187         db  0x00 ; '.'
0000000000001188         db  0x08 ; '.'
0000000000001189         db  0x00 ; '.'
000000000000118a         db  0x00 ; '.'
000000000000118b         db  0x00 ; '.'
000000000000118c         db  0x00 ; '.'
000000000000118d         db  0x00 ; '.'
000000000000118e         db  0x00 ; '.'
000000000000118f         db  0x00 ; '.'
0000000000001190         db  0xd5 ; '.'
0000000000001191         db  0xb9 ; '.'
0000000000001192         db  0x00 ; '.'
0000000000001193         db  0x00 ; '.'
0000000000001194         db  0x00 ; '.'
0000000000001195         db  0x00 ; '.'
0000000000001196         db  0x00 ; '.'
0000000000001197         db  0x00 ; '.'
0000000000001198         db  0x08 ; '.'
0000000000001199         db  0xf0 ; '.'
000000000000119a         db  0x20 ; ' '
000000000000119b         db  0x00 ; '.'
000000000000119c         db  0x00 ; '.'
000000000000119d         db  0x00 ; '.'
000000000000119e         db  0x00 ; '.'
000000000000119f         db  0x00 ; '.'
00000000000011a0         db  0x08 ; '.'
00000000000011a1         db  0x00 ; '.'
00000000000011a2         db  0x00 ; '.'
00000000000011a3         db  0x00 ; '.'
00000000000011a4         db  0x00 ; '.'
00000000000011a5         db  0x00 ; '.'
00000000000011a6         db  0x00 ; '.'
00000000000011a7         db  0x00 ; '.'
00000000000011a8         db  0x08 ; '.'
00000000000011a9         db  0xf0 ; '.'
00000000000011aa         db  0x20 ; ' '
00000000000011ab         db  0x00 ; '.'
00000000000011ac         db  0x00 ; '.'
00000000000011ad         db  0x00 ; '.'
00000000000011ae         db  0x00 ; '.'
00000000000011af         db  0x00 ; '.'
00000000000011b0         db  0x10 ; '.'
00000000000011b1         db  0xf0 ; '.'
00000000000011b2         db  0x20 ; ' '
00000000000011b3         db  0x00 ; '.'
00000000000011b4         db  0x00 ; '.'
00000000000011b5         db  0x00 ; '.'
00000000000011b6         db  0x00 ; '.'
00000000000011b7         db  0x00 ; '.'
00000000000011b8         db  0x08 ; '.'
00000000000011b9         db  0x00 ; '.'
00000000000011ba         db  0x00 ; '.'
00000000000011bb         db  0x00 ; '.'
00000000000011bc         db  0x00 ; '.'
00000000000011bd         db  0x00 ; '.'
00000000000011be         db  0x00 ; '.'
00000000000011bf         db  0x00 ; '.'
00000000000011c0         db  0x33 ; '3'
00000000000011c1         db  0xb8 ; '.'
00000000000011c2         db  0x00 ; '.'
00000000000011c3         db  0x00 ; '.'
00000000000011c4         db  0x00 ; '.'
00000000000011c5         db  0x00 ; '.'
00000000000011c6         db  0x00 ; '.'
00000000000011c7         db  0x00 ; '.'
00000000000011c8         db  0x18 ; '.'
00000000000011c9         db  0xf0 ; '.'
00000000000011ca         db  0x20 ; ' '
00000000000011cb         db  0x00 ; '.'
00000000000011cc         db  0x00 ; '.'
00000000000011cd         db  0x00 ; '.'
00000000000011ce         db  0x00 ; '.'
00000000000011cf         db  0x00 ; '.'
00000000000011d0         db  0x08 ; '.'
00000000000011d1         db  0x00 ; '.'
00000000000011d2         db  0x00 ; '.'
00000000000011d3         db  0x00 ; '.'
00000000000011d4         db  0x00 ; '.'
00000000000011d5         db  0x00 ; '.'
00000000000011d6         db  0x00 ; '.'
00000000000011d7         db  0x00 ; '.'
00000000000011d8         db  0xf0 ; '.'
00000000000011d9         db  0x38 ; '8'
00000000000011da         db  0x00 ; '.'
00000000000011db         db  0x00 ; '.'
00000000000011dc         db  0x00 ; '.'
00000000000011dd         db  0x00 ; '.'
00000000000011de         db  0x00 ; '.'
00000000000011df         db  0x00 ; '.'
00000000000011e0         db  0x80 ; '.'
00000000000011e1         db  0xf0 ; '.'
00000000000011e2         db  0x20 ; ' '
00000000000011e3         db  0x00 ; '.'
00000000000011e4         db  0x00 ; '.'
00000000000011e5         db  0x00 ; '.'
00000000000011e6         db  0x00 ; '.'
00000000000011e7         db  0x00 ; '.'
00000000000011e8         db  0x08 ; '.'
00000000000011e9         db  0x00 ; '.'
00000000000011ea         db  0x00 ; '.'
00000000000011eb         db  0x00 ; '.'
00000000000011ec         db  0x00 ; '.'
00000000000011ed         db  0x00 ; '.'
00000000000011ee         db  0x00 ; '.'
00000000000011ef         db  0x00 ; '.'
00000000000011f0         db  0x90 ; '.'
00000000000011f1         db  0xf0 ; '.'
00000000000011f2         db  0x20 ; ' '
00000000000011f3         db  0x00 ; '.'
00000000000011f4         db  0x00 ; '.'
00000000000011f5         db  0x00 ; '.'
00000000000011f6         db  0x00 ; '.'
00000000000011f7         db  0x00 ; '.'
00000000000011f8         db  0x98 ; '.'
00000000000011f9         db  0xf0 ; '.'
00000000000011fa         db  0x20 ; ' '
00000000000011fb         db  0x00 ; '.'
00000000000011fc         db  0x00 ; '.'
00000000000011fd         db  0x00 ; '.'
00000000000011fe         db  0x00 ; '.'
00000000000011ff         db  0x00 ; '.'
0000000000001200         db  0x08 ; '.'
0000000000001201         db  0x00 ; '.'
0000000000001202         db  0x00 ; '.'
0000000000001203         db  0x00 ; '.'
0000000000001204         db  0x00 ; '.'
0000000000001205         db  0x00 ; '.'
0000000000001206         db  0x00 ; '.'
0000000000001207         db  0x00 ; '.'
0000000000001208         db  0x20 ; ' '
0000000000001209         db  0xf1 ; '.'
000000000000120a         db  0x20 ; ' '
000000000000120b         db  0x00 ; '.'
000000000000120c         db  0x00 ; '.'
000000000000120d         db  0x00 ; '.'
000000000000120e         db  0x00 ; '.'
000000000000120f         db  0x00 ; '.'
0000000000001210         db  0xc8 ; '.'
0000000000001211         db  0xef ; '.'
0000000000001212         db  0x20 ; ' '
0000000000001213         db  0x00 ; '.'
0000000000001214         db  0x00 ; '.'
0000000000001215         db  0x00 ; '.'
0000000000001216         db  0x00 ; '.'
0000000000001217         db  0x00 ; '.'
0000000000001218         db  0x06 ; '.'
0000000000001219         db  0x00 ; '.'
000000000000121a         db  0x00 ; '.'
000000000000121b         db  0x00 ; '.'
000000000000121c         db  0x01 ; '.'
000000000000121d         db  0x00 ; '.'
000000000000121e         db  0x00 ; '.'
000000000000121f         db  0x00 ; '.'
0000000000001220         db  0x00 ; '.'
0000000000001221         db  0x00 ; '.'
0000000000001222         db  0x00 ; '.'
0000000000001223         db  0x00 ; '.'
0000000000001224         db  0x00 ; '.'
0000000000001225         db  0x00 ; '.'
0000000000001226         db  0x00 ; '.'
0000000000001227         db  0x00 ; '.'
0000000000001228         db  0xd0 ; '.'
0000000000001229         db  0xef ; '.'
000000000000122a         db  0x20 ; ' '
000000000000122b         db  0x00 ; '.'
000000000000122c         db  0x00 ; '.'
000000000000122d         db  0x00 ; '.'
000000000000122e         db  0x00 ; '.'
000000000000122f         db  0x00 ; '.'
0000000000001230         db  0x06 ; '.'
0000000000001231         db  0x00 ; '.'
0000000000001232         db  0x00 ; '.'
0000000000001233         db  0x00 ; '.'
0000000000001234         db  0x05 ; '.'
0000000000001235         db  0x00 ; '.'
0000000000001236         db  0x00 ; '.'
0000000000001237         db  0x00 ; '.'
0000000000001238         db  0x00 ; '.'
0000000000001239         db  0x00 ; '.'
000000000000123a         db  0x00 ; '.'
000000000000123b         db  0x00 ; '.'
000000000000123c         db  0x00 ; '.'
000000000000123d         db  0x00 ; '.'
000000000000123e         db  0x00 ; '.'
000000000000123f         db  0x00 ; '.'
0000000000001240         db  0xd8 ; '.'
0000000000001241         db  0xef ; '.'
0000000000001242         db  0x20 ; ' '
0000000000001243         db  0x00 ; '.'
0000000000001244         db  0x00 ; '.'
0000000000001245         db  0x00 ; '.'
0000000000001246         db  0x00 ; '.'
0000000000001247         db  0x00 ; '.'
0000000000001248         db  0x06 ; '.'
0000000000001249         db  0x00 ; '.'
000000000000124a         db  0x00 ; '.'
000000000000124b         db  0x00 ; '.'
000000000000124c         db  0x21 ; '!'
000000000000124d         db  0x00 ; '.'
000000000000124e         db  0x00 ; '.'
000000000000124f         db  0x00 ; '.'
0000000000001250         db  0x00 ; '.'
0000000000001251         db  0x00 ; '.'
0000000000001252         db  0x00 ; '.'
0000000000001253         db  0x00 ; '.'
0000000000001254         db  0x00 ; '.'
0000000000001255         db  0x00 ; '.'
0000000000001256         db  0x00 ; '.'
0000000000001257         db  0x00 ; '.'
0000000000001258         db  0xe0 ; '.'
0000000000001259         db  0xef ; '.'
000000000000125a         db  0x20 ; ' '
000000000000125b         db  0x00 ; '.'
000000000000125c         db  0x00 ; '.'
000000000000125d         db  0x00 ; '.'
000000000000125e         db  0x00 ; '.'
000000000000125f         db  0x00 ; '.'
0000000000001260         db  0x06 ; '.'
0000000000001261         db  0x00 ; '.'
0000000000001262         db  0x00 ; '.'
0000000000001263         db  0x00 ; '.'
0000000000001264         db  0x29 ; ')'
0000000000001265         db  0x00 ; '.'
0000000000001266         db  0x00 ; '.'
0000000000001267         db  0x00 ; '.'
0000000000001268         db  0x00 ; '.'
0000000000001269         db  0x00 ; '.'
000000000000126a         db  0x00 ; '.'
000000000000126b         db  0x00 ; '.'
000000000000126c         db  0x00 ; '.'
000000000000126d         db  0x00 ; '.'
000000000000126e         db  0x00 ; '.'
000000000000126f         db  0x00 ; '.'
0000000000001270         db  0xe8 ; '.'
0000000000001271         db  0xef ; '.'
0000000000001272         db  0x20 ; ' '
0000000000001273         db  0x00 ; '.'
0000000000001274         db  0x00 ; '.'
0000000000001275         db  0x00 ; '.'
0000000000001276         db  0x00 ; '.'
0000000000001277         db  0x00 ; '.'
0000000000001278         db  0x06 ; '.'
0000000000001279         db  0x00 ; '.'
000000000000127a         db  0x00 ; '.'
000000000000127b         db  0x00 ; '.'
000000000000127c         db  0x43 ; 'C'
000000000000127d         db  0x00 ; '.'
000000000000127e         db  0x00 ; '.'
000000000000127f         db  0x00 ; '.'
0000000000001280         db  0x00 ; '.'
0000000000001281         db  0x00 ; '.'
0000000000001282         db  0x00 ; '.'
0000000000001283         db  0x00 ; '.'
0000000000001284         db  0x00 ; '.'
0000000000001285         db  0x00 ; '.'
0000000000001286         db  0x00 ; '.'
0000000000001287         db  0x00 ; '.'
0000000000001288         db  0xf0 ; '.'
0000000000001289         db  0xef ; '.'
000000000000128a         db  0x20 ; ' '
000000000000128b         db  0x00 ; '.'
000000000000128c         db  0x00 ; '.'
000000000000128d         db  0x00 ; '.'
000000000000128e         db  0x00 ; '.'
000000000000128f         db  0x00 ; '.'
0000000000001290         db  0x06 ; '.'
0000000000001291         db  0x00 ; '.'
0000000000001292         db  0x00 ; '.'
0000000000001293         db  0x00 ; '.'
0000000000001294         db  0x46 ; 'F'
0000000000001295         db  0x00 ; '.'
0000000000001296         db  0x00 ; '.'
0000000000001297         db  0x00 ; '.'
0000000000001298         db  0x00 ; '.'
0000000000001299         db  0x00 ; '.'
000000000000129a         db  0x00 ; '.'
000000000000129b         db  0x00 ; '.'
000000000000129c         db  0x00 ; '.'
000000000000129d         db  0x00 ; '.'
000000000000129e         db  0x00 ; '.'
000000000000129f         db  0x00 ; '.'
00000000000012a0         db  0xa0 ; '.'
00000000000012a1         db  0xf0 ; '.'
00000000000012a2         db  0x20 ; ' '
00000000000012a3         db  0x00 ; '.'
00000000000012a4         db  0x00 ; '.'
00000000000012a5         db  0x00 ; '.'
00000000000012a6         db  0x00 ; '.'
00000000000012a7         db  0x00 ; '.'
00000000000012a8         db  0x05 ; '.'
00000000000012a9         db  0x00 ; '.'
00000000000012aa         db  0x00 ; '.'
00000000000012ab         db  0x00 ; '.'
00000000000012ac         db  0x49 ; 'I'
00000000000012ad         db  0x00 ; '.'
00000000000012ae         db  0x00 ; '.'
00000000000012af         db  0x00 ; '.'
00000000000012b0         db  0x00 ; '.'
00000000000012b1         db  0x00 ; '.'
00000000000012b2         db  0x00 ; '.'
00000000000012b3         db  0x00 ; '.'
00000000000012b4         db  0x00 ; '.'
00000000000012b5         db  0x00 ; '.'
00000000000012b6         db  0x00 ; '.'
00000000000012b7         db  0x00 ; '.'
00000000000012b8         db  0xa8 ; '.'
00000000000012b9         db  0xf0 ; '.'
00000000000012ba         db  0x20 ; ' '
00000000000012bb         db  0x00 ; '.'
00000000000012bc         db  0x00 ; '.'
00000000000012bd         db  0x00 ; '.'
00000000000012be         db  0x00 ; '.'
00000000000012bf         db  0x00 ; '.'
00000000000012c0         db  0x05 ; '.'
00000000000012c1         db  0x00 ; '.'
00000000000012c2         db  0x00 ; '.'
00000000000012c3         db  0x00 ; '.'
00000000000012c4         db  0x48 ; 'H'
00000000000012c5         db  0x00 ; '.'
00000000000012c6         db  0x00 ; '.'
00000000000012c7         db  0x00 ; '.'
00000000000012c8         db  0x00 ; '.'
00000000000012c9         db  0x00 ; '.'
00000000000012ca         db  0x00 ; '.'
00000000000012cb         db  0x00 ; '.'
00000000000012cc         db  0x00 ; '.'
00000000000012cd         db  0x00 ; '.'
00000000000012ce         db  0x00 ; '.'
00000000000012cf         db  0x00 ; '.'
00000000000012d0         db  0xb0 ; '.'
00000000000012d1         db  0xf0 ; '.'
00000000000012d2         db  0x20 ; ' '
00000000000012d3         db  0x00 ; '.'
00000000000012d4         db  0x00 ; '.'
00000000000012d5         db  0x00 ; '.'
00000000000012d6         db  0x00 ; '.'
00000000000012d7         db  0x00 ; '.'
00000000000012d8         db  0x05 ; '.'
00000000000012d9         db  0x00 ; '.'
00000000000012da         db  0x00 ; '.'
00000000000012db         db  0x00 ; '.'
00000000000012dc         db  0x4a ; 'J'
00000000000012dd         db  0x00 ; '.'
00000000000012de         db  0x00 ; '.'
00000000000012df         db  0x00 ; '.'
00000000000012e0         db  0x00 ; '.'
00000000000012e1         db  0x00 ; '.'
00000000000012e2         db  0x00 ; '.'
00000000000012e3         db  0x00 ; '.'
00000000000012e4         db  0x00 ; '.'
00000000000012e5         db  0x00 ; '.'
00000000000012e6         db  0x00 ; '.'
00000000000012e7         db  0x00 ; '.'
00000000000012e8         db  0xb8 ; '.'
00000000000012e9         db  0xf0 ; '.'
00000000000012ea         db  0x20 ; ' '
00000000000012eb         db  0x00 ; '.'
00000000000012ec         db  0x00 ; '.'
00000000000012ed         db  0x00 ; '.'
00000000000012ee         db  0x00 ; '.'
00000000000012ef         db  0x00 ; '.'
00000000000012f0         db  0x05 ; '.'
00000000000012f1         db  0x00 ; '.'
00000000000012f2         db  0x00 ; '.'
00000000000012f3         db  0x00 ; '.'
00000000000012f4         db  0x4f ; 'O'
00000000000012f5         db  0x00 ; '.'
00000000000012f6         db  0x00 ; '.'
00000000000012f7         db  0x00 ; '.'
00000000000012f8         db  0x00 ; '.'
00000000000012f9         db  0x00 ; '.'
00000000000012fa         db  0x00 ; '.'
00000000000012fb         db  0x00 ; '.'
00000000000012fc         db  0x00 ; '.'
00000000000012fd         db  0x00 ; '.'
00000000000012fe         db  0x00 ; '.'
00000000000012ff         db  0x00 ; '.'
0000000000001300         db  0xc0 ; '.'
0000000000001301         db  0xf0 ; '.'
0000000000001302         db  0x20 ; ' '
0000000000001303         db  0x00 ; '.'
0000000000001304         db  0x00 ; '.'
0000000000001305         db  0x00 ; '.'
0000000000001306         db  0x00 ; '.'
0000000000001307         db  0x00 ; '.'
0000000000001308         db  0x05 ; '.'
0000000000001309         db  0x00 ; '.'
000000000000130a         db  0x00 ; '.'
000000000000130b         db  0x00 ; '.'
000000000000130c         db  0x50 ; 'P'
000000000000130d         db  0x00 ; '.'
000000000000130e         db  0x00 ; '.'
000000000000130f         db  0x00 ; '.'
0000000000001310         db  0x00 ; '.'
0000000000001311         db  0x00 ; '.'
0000000000001312         db  0x00 ; '.'
0000000000001313         db  0x00 ; '.'
0000000000001314         db  0x00 ; '.'
0000000000001315         db  0x00 ; '.'
0000000000001316         db  0x00 ; '.'
0000000000001317         db  0x00 ; '.'
0000000000001318         db  0xc8 ; '.'
0000000000001319         db  0xf0 ; '.'
000000000000131a         db  0x20 ; ' '
000000000000131b         db  0x00 ; '.'
000000000000131c         db  0x00 ; '.'
000000000000131d         db  0x00 ; '.'
000000000000131e         db  0x00 ; '.'
000000000000131f         db  0x00 ; '.'
0000000000001320         db  0x05 ; '.'
0000000000001321         db  0x00 ; '.'
0000000000001322         db  0x00 ; '.'
0000000000001323         db  0x00 ; '.'
0000000000001324         db  0x4c ; 'L'
0000000000001325         db  0x00 ; '.'
0000000000001326         db  0x00 ; '.'
0000000000001327         db  0x00 ; '.'
0000000000001328         db  0x00 ; '.'
0000000000001329         db  0x00 ; '.'
000000000000132a         db  0x00 ; '.'
000000000000132b         db  0x00 ; '.'
000000000000132c         db  0x00 ; '.'
000000000000132d         db  0x00 ; '.'
000000000000132e         db  0x00 ; '.'
000000000000132f         db  0x00 ; '.'
0000000000001330         db  0xe0 ; '.'
0000000000001331         db  0xf0 ; '.'
0000000000001332         db  0x20 ; ' '
0000000000001333         db  0x00 ; '.'
0000000000001334         db  0x00 ; '.'
0000000000001335         db  0x00 ; '.'
0000000000001336         db  0x00 ; '.'
0000000000001337         db  0x00 ; '.'
0000000000001338         db  0x05 ; '.'
0000000000001339         db  0x00 ; '.'
000000000000133a         db  0x00 ; '.'
000000000000133b         db  0x00 ; '.'
000000000000133c         db  0x4e ; 'N'
000000000000133d         db  0x00 ; '.'
000000000000133e         db  0x00 ; '.'
000000000000133f         db  0x00 ; '.'
0000000000001340         db  0x00 ; '.'
0000000000001341         db  0x00 ; '.'
0000000000001342         db  0x00 ; '.'
0000000000001343         db  0x00 ; '.'
0000000000001344         db  0x00 ; '.'
0000000000001345         db  0x00 ; '.'
0000000000001346         db  0x00 ; '.'
0000000000001347         db  0x00 ; '.'


        ; Section .rela.plt
        ; Range: [0x1348; 0x1960[ (1560 bytes)
        ; File offset : [4936; 6496[ (1560 bytes)
        ; Flags: 0x42
        ;   SHT_RELA
        ;   SHF_ALLOC

0000000000001348         db  0xc0 ; '.'
0000000000001349         db  0xed ; '.'
000000000000134a         db  0x20 ; ' '
000000000000134b         db  0x00 ; '.'
000000000000134c         db  0x00 ; '.'
000000000000134d         db  0x00 ; '.'
000000000000134e         db  0x00 ; '.'
000000000000134f         db  0x00 ; '.'
0000000000001350         db  0x07 ; '.'
0000000000001351         db  0x00 ; '.'
0000000000001352         db  0x00 ; '.'
0000000000001353         db  0x00 ; '.'
0000000000001354         db  0x02 ; '.'
0000000000001355         db  0x00 ; '.'
0000000000001356         db  0x00 ; '.'
0000000000001357         db  0x00 ; '.'
0000000000001358         db  0x00 ; '.'
0000000000001359         db  0x00 ; '.'
000000000000135a         db  0x00 ; '.'
000000000000135b         db  0x00 ; '.'
000000000000135c         db  0x00 ; '.'
000000000000135d         db  0x00 ; '.'
000000000000135e         db  0x00 ; '.'
000000000000135f         db  0x00 ; '.'
0000000000001360         db  0xc8 ; '.'
0000000000001361         db  0xed ; '.'
0000000000001362         db  0x20 ; ' '
0000000000001363         db  0x00 ; '.'
0000000000001364         db  0x00 ; '.'
0000000000001365         db  0x00 ; '.'
0000000000001366         db  0x00 ; '.'
0000000000001367         db  0x00 ; '.'
0000000000001368         db  0x07 ; '.'
0000000000001369         db  0x00 ; '.'
000000000000136a         db  0x00 ; '.'
000000000000136b         db  0x00 ; '.'
000000000000136c         db  0x03 ; '.'
000000000000136d         db  0x00 ; '.'
000000000000136e         db  0x00 ; '.'
000000000000136f         db  0x00 ; '.'
0000000000001370         db  0x00 ; '.'
0000000000001371         db  0x00 ; '.'
0000000000001372         db  0x00 ; '.'
0000000000001373         db  0x00 ; '.'
0000000000001374         db  0x00 ; '.'
0000000000001375         db  0x00 ; '.'
0000000000001376         db  0x00 ; '.'
0000000000001377         db  0x00 ; '.'
0000000000001378         db  0xd0 ; '.'
0000000000001379         db  0xed ; '.'
000000000000137a         db  0x20 ; ' '
000000000000137b         db  0x00 ; '.'
000000000000137c         db  0x00 ; '.'
000000000000137d         db  0x00 ; '.'
000000000000137e         db  0x00 ; '.'
000000000000137f         db  0x00 ; '.'
0000000000001380         db  0x07 ; '.'
0000000000001381         db  0x00 ; '.'
0000000000001382         db  0x00 ; '.'
0000000000001383         db  0x00 ; '.'
0000000000001384         db  0x04 ; '.'
0000000000001385         db  0x00 ; '.'
0000000000001386         db  0x00 ; '.'
0000000000001387         db  0x00 ; '.'
0000000000001388         db  0x00 ; '.'
0000000000001389         db  0x00 ; '.'
000000000000138a         db  0x00 ; '.'
000000000000138b         db  0x00 ; '.'
000000000000138c         db  0x00 ; '.'
000000000000138d         db  0x00 ; '.'
000000000000138e         db  0x00 ; '.'
000000000000138f         db  0x00 ; '.'
0000000000001390         db  0xd8 ; '.'
0000000000001391         db  0xed ; '.'
0000000000001392         db  0x20 ; ' '
0000000000001393         db  0x00 ; '.'
0000000000001394         db  0x00 ; '.'
0000000000001395         db  0x00 ; '.'
0000000000001396         db  0x00 ; '.'
0000000000001397         db  0x00 ; '.'
0000000000001398         db  0x07 ; '.'
0000000000001399         db  0x00 ; '.'
000000000000139a         db  0x00 ; '.'
000000000000139b         db  0x00 ; '.'
000000000000139c         db  0x06 ; '.'
000000000000139d         db  0x00 ; '.'
000000000000139e         db  0x00 ; '.'
000000000000139f         db  0x00 ; '.'
00000000000013a0         db  0x00 ; '.'
00000000000013a1         db  0x00 ; '.'
00000000000013a2         db  0x00 ; '.'
00000000000013a3         db  0x00 ; '.'
00000000000013a4         db  0x00 ; '.'
00000000000013a5         db  0x00 ; '.'
00000000000013a6         db  0x00 ; '.'
00000000000013a7         db  0x00 ; '.'
00000000000013a8         db  0xe0 ; '.'
00000000000013a9         db  0xed ; '.'
00000000000013aa         db  0x20 ; ' '
00000000000013ab         db  0x00 ; '.'
00000000000013ac         db  0x00 ; '.'
00000000000013ad         db  0x00 ; '.'
00000000000013ae         db  0x00 ; '.'
00000000000013af         db  0x00 ; '.'
00000000000013b0         db  0x07 ; '.'
00000000000013b1         db  0x00 ; '.'
00000000000013b2         db  0x00 ; '.'
00000000000013b3         db  0x00 ; '.'
00000000000013b4         db  0x07 ; '.'
00000000000013b5         db  0x00 ; '.'
00000000000013b6         db  0x00 ; '.'
00000000000013b7         db  0x00 ; '.'
00000000000013b8         db  0x00 ; '.'
00000000000013b9         db  0x00 ; '.'
00000000000013ba         db  0x00 ; '.'
00000000000013bb         db  0x00 ; '.'
00000000000013bc         db  0x00 ; '.'
00000000000013bd         db  0x00 ; '.'
00000000000013be         db  0x00 ; '.'
00000000000013bf         db  0x00 ; '.'
00000000000013c0         db  0xe8 ; '.'
00000000000013c1         db  0xed ; '.'
00000000000013c2         db  0x20 ; ' '
00000000000013c3         db  0x00 ; '.'
00000000000013c4         db  0x00 ; '.'
00000000000013c5         db  0x00 ; '.'
00000000000013c6         db  0x00 ; '.'
00000000000013c7         db  0x00 ; '.'
00000000000013c8         db  0x07 ; '.'
00000000000013c9         db  0x00 ; '.'
00000000000013ca         db  0x00 ; '.'
00000000000013cb         db  0x00 ; '.'
00000000000013cc         db  0x08 ; '.'
00000000000013cd         db  0x00 ; '.'
00000000000013ce         db  0x00 ; '.'
00000000000013cf         db  0x00 ; '.'
00000000000013d0         db  0x00 ; '.'
00000000000013d1         db  0x00 ; '.'
00000000000013d2         db  0x00 ; '.'
00000000000013d3         db  0x00 ; '.'
00000000000013d4         db  0x00 ; '.'
00000000000013d5         db  0x00 ; '.'
00000000000013d6         db  0x00 ; '.'
00000000000013d7         db  0x00 ; '.'
00000000000013d8         db  0xf0 ; '.'
00000000000013d9         db  0xed ; '.'
00000000000013da         db  0x20 ; ' '
00000000000013db         db  0x00 ; '.'
00000000000013dc         db  0x00 ; '.'
00000000000013dd         db  0x00 ; '.'
00000000000013de         db  0x00 ; '.'
00000000000013df         db  0x00 ; '.'
00000000000013e0         db  0x07 ; '.'
00000000000013e1         db  0x00 ; '.'
00000000000013e2         db  0x00 ; '.'
00000000000013e3         db  0x00 ; '.'
00000000000013e4         db  0x09 ; '.'
00000000000013e5         db  0x00 ; '.'
00000000000013e6         db  0x00 ; '.'
00000000000013e7         db  0x00 ; '.'
00000000000013e8         db  0x00 ; '.'
00000000000013e9         db  0x00 ; '.'
00000000000013ea         db  0x00 ; '.'
00000000000013eb         db  0x00 ; '.'
00000000000013ec         db  0x00 ; '.'
00000000000013ed         db  0x00 ; '.'
00000000000013ee         db  0x00 ; '.'
00000000000013ef         db  0x00 ; '.'
00000000000013f0         db  0xf8 ; '.'
00000000000013f1         db  0xed ; '.'
00000000000013f2         db  0x20 ; ' '
00000000000013f3         db  0x00 ; '.'
00000000000013f4         db  0x00 ; '.'
00000000000013f5         db  0x00 ; '.'
00000000000013f6         db  0x00 ; '.'
00000000000013f7         db  0x00 ; '.'
00000000000013f8         db  0x07 ; '.'
00000000000013f9         db  0x00 ; '.'
00000000000013fa         db  0x00 ; '.'
00000000000013fb         db  0x00 ; '.'
00000000000013fc         db  0x0a ; '.'
00000000000013fd         db  0x00 ; '.'
00000000000013fe         db  0x00 ; '.'
00000000000013ff         db  0x00 ; '.'
0000000000001400         db  0x00 ; '.'
0000000000001401         db  0x00 ; '.'
0000000000001402         db  0x00 ; '.'
0000000000001403         db  0x00 ; '.'
0000000000001404         db  0x00 ; '.'
0000000000001405         db  0x00 ; '.'
0000000000001406         db  0x00 ; '.'
0000000000001407         db  0x00 ; '.'
0000000000001408         db  0x00 ; '.'
0000000000001409         db  0xee ; '.'
000000000000140a         db  0x20 ; ' '
000000000000140b         db  0x00 ; '.'
000000000000140c         db  0x00 ; '.'
000000000000140d         db  0x00 ; '.'
000000000000140e         db  0x00 ; '.'
000000000000140f         db  0x00 ; '.'
0000000000001410         db  0x07 ; '.'
0000000000001411         db  0x00 ; '.'
0000000000001412         db  0x00 ; '.'
0000000000001413         db  0x00 ; '.'
0000000000001414         db  0x0b ; '.'
0000000000001415         db  0x00 ; '.'
0000000000001416         db  0x00 ; '.'
0000000000001417         db  0x00 ; '.'
0000000000001418         db  0x00 ; '.'
0000000000001419         db  0x00 ; '.'
000000000000141a         db  0x00 ; '.'
000000000000141b         db  0x00 ; '.'
000000000000141c         db  0x00 ; '.'
000000000000141d         db  0x00 ; '.'
000000000000141e         db  0x00 ; '.'
000000000000141f         db  0x00 ; '.'
0000000000001420         db  0x08 ; '.'
0000000000001421         db  0xee ; '.'
0000000000001422         db  0x20 ; ' '
0000000000001423         db  0x00 ; '.'
0000000000001424         db  0x00 ; '.'
0000000000001425         db  0x00 ; '.'
0000000000001426         db  0x00 ; '.'
0000000000001427         db  0x00 ; '.'
0000000000001428         db  0x07 ; '.'
0000000000001429         db  0x00 ; '.'
000000000000142a         db  0x00 ; '.'
000000000000142b         db  0x00 ; '.'
000000000000142c         db  0x0c ; '.'
000000000000142d         db  0x00 ; '.'
000000000000142e         db  0x00 ; '.'
000000000000142f         db  0x00 ; '.'
0000000000001430         db  0x00 ; '.'
0000000000001431         db  0x00 ; '.'
0000000000001432         db  0x00 ; '.'
0000000000001433         db  0x00 ; '.'
0000000000001434         db  0x00 ; '.'
0000000000001435         db  0x00 ; '.'
0000000000001436         db  0x00 ; '.'
0000000000001437         db  0x00 ; '.'
0000000000001438         db  0x10 ; '.'
0000000000001439         db  0xee ; '.'
000000000000143a         db  0x20 ; ' '
000000000000143b         db  0x00 ; '.'
000000000000143c         db  0x00 ; '.'
000000000000143d         db  0x00 ; '.'
000000000000143e         db  0x00 ; '.'
000000000000143f         db  0x00 ; '.'
0000000000001440         db  0x07 ; '.'
0000000000001441         db  0x00 ; '.'
0000000000001442         db  0x00 ; '.'
0000000000001443         db  0x00 ; '.'
0000000000001444         db  0x0d ; '.'
0000000000001445         db  0x00 ; '.'
0000000000001446         db  0x00 ; '.'
0000000000001447         db  0x00 ; '.'
0000000000001448         db  0x00 ; '.'
0000000000001449         db  0x00 ; '.'
000000000000144a         db  0x00 ; '.'
000000000000144b         db  0x00 ; '.'
000000000000144c         db  0x00 ; '.'
000000000000144d         db  0x00 ; '.'
000000000000144e         db  0x00 ; '.'
000000000000144f         db  0x00 ; '.'
0000000000001450         db  0x18 ; '.'
0000000000001451         db  0xee ; '.'
0000000000001452         db  0x20 ; ' '
0000000000001453         db  0x00 ; '.'
0000000000001454         db  0x00 ; '.'
0000000000001455         db  0x00 ; '.'
0000000000001456         db  0x00 ; '.'
0000000000001457         db  0x00 ; '.'
0000000000001458         db  0x07 ; '.'
0000000000001459         db  0x00 ; '.'
000000000000145a         db  0x00 ; '.'
000000000000145b         db  0x00 ; '.'
000000000000145c         db  0x0e ; '.'
000000000000145d         db  0x00 ; '.'
000000000000145e         db  0x00 ; '.'
000000000000145f         db  0x00 ; '.'
0000000000001460         db  0x00 ; '.'
0000000000001461         db  0x00 ; '.'
0000000000001462         db  0x00 ; '.'
0000000000001463         db  0x00 ; '.'
0000000000001464         db  0x00 ; '.'
0000000000001465         db  0x00 ; '.'
0000000000001466         db  0x00 ; '.'
0000000000001467         db  0x00 ; '.'
0000000000001468         db  0x20 ; ' '
0000000000001469         db  0xee ; '.'
000000000000146a         db  0x20 ; ' '
000000000000146b         db  0x00 ; '.'
000000000000146c         db  0x00 ; '.'
000000000000146d         db  0x00 ; '.'
000000000000146e         db  0x00 ; '.'
000000000000146f         db  0x00 ; '.'
0000000000001470         db  0x07 ; '.'
0000000000001471         db  0x00 ; '.'
0000000000001472         db  0x00 ; '.'
0000000000001473         db  0x00 ; '.'
0000000000001474         db  0x0f ; '.'
0000000000001475         db  0x00 ; '.'
0000000000001476         db  0x00 ; '.'
0000000000001477         db  0x00 ; '.'
0000000000001478         db  0x00 ; '.'
0000000000001479         db  0x00 ; '.'
000000000000147a         db  0x00 ; '.'
000000000000147b         db  0x00 ; '.'
000000000000147c         db  0x00 ; '.'
000000000000147d         db  0x00 ; '.'
000000000000147e         db  0x00 ; '.'
000000000000147f         db  0x00 ; '.'
0000000000001480         db  0x28 ; '('
0000000000001481         db  0xee ; '.'
0000000000001482         db  0x20 ; ' '
0000000000001483         db  0x00 ; '.'
0000000000001484         db  0x00 ; '.'
0000000000001485         db  0x00 ; '.'
0000000000001486         db  0x00 ; '.'
0000000000001487         db  0x00 ; '.'
0000000000001488         db  0x07 ; '.'
0000000000001489         db  0x00 ; '.'
000000000000148a         db  0x00 ; '.'
000000000000148b         db  0x00 ; '.'
000000000000148c         db  0x10 ; '.'
000000000000148d         db  0x00 ; '.'
000000000000148e         db  0x00 ; '.'
000000000000148f         db  0x00 ; '.'
0000000000001490         db  0x00 ; '.'
0000000000001491         db  0x00 ; '.'
0000000000001492         db  0x00 ; '.'
0000000000001493         db  0x00 ; '.'
0000000000001494         db  0x00 ; '.'
0000000000001495         db  0x00 ; '.'
0000000000001496         db  0x00 ; '.'
0000000000001497         db  0x00 ; '.'
0000000000001498         db  0x30 ; '0'
0000000000001499         db  0xee ; '.'
000000000000149a         db  0x20 ; ' '
000000000000149b         db  0x00 ; '.'
000000000000149c         db  0x00 ; '.'
000000000000149d         db  0x00 ; '.'
000000000000149e         db  0x00 ; '.'
000000000000149f         db  0x00 ; '.'
00000000000014a0         db  0x07 ; '.'
00000000000014a1         db  0x00 ; '.'
00000000000014a2         db  0x00 ; '.'
00000000000014a3         db  0x00 ; '.'
00000000000014a4         db  0x11 ; '.'
00000000000014a5         db  0x00 ; '.'
00000000000014a6         db  0x00 ; '.'
00000000000014a7         db  0x00 ; '.'
00000000000014a8         db  0x00 ; '.'
00000000000014a9         db  0x00 ; '.'
00000000000014aa         db  0x00 ; '.'
00000000000014ab         db  0x00 ; '.'
00000000000014ac         db  0x00 ; '.'
00000000000014ad         db  0x00 ; '.'
00000000000014ae         db  0x00 ; '.'
00000000000014af         db  0x00 ; '.'
00000000000014b0         db  0x38 ; '8'
00000000000014b1         db  0xee ; '.'
00000000000014b2         db  0x20 ; ' '
00000000000014b3         db  0x00 ; '.'
00000000000014b4         db  0x00 ; '.'
00000000000014b5         db  0x00 ; '.'
00000000000014b6         db  0x00 ; '.'
00000000000014b7         db  0x00 ; '.'
00000000000014b8         db  0x07 ; '.'
00000000000014b9         db  0x00 ; '.'
00000000000014ba         db  0x00 ; '.'
00000000000014bb         db  0x00 ; '.'
00000000000014bc         db  0x12 ; '.'
00000000000014bd         db  0x00 ; '.'
00000000000014be         db  0x00 ; '.'
00000000000014bf         db  0x00 ; '.'
00000000000014c0         db  0x00 ; '.'
00000000000014c1         db  0x00 ; '.'
00000000000014c2         db  0x00 ; '.'
00000000000014c3         db  0x00 ; '.'
00000000000014c4         db  0x00 ; '.'
00000000000014c5         db  0x00 ; '.'
00000000000014c6         db  0x00 ; '.'
00000000000014c7         db  0x00 ; '.'
00000000000014c8         db  0x40 ; '@'
00000000000014c9         db  0xee ; '.'
00000000000014ca         db  0x20 ; ' '
00000000000014cb         db  0x00 ; '.'
00000000000014cc         db  0x00 ; '.'
00000000000014cd         db  0x00 ; '.'
00000000000014ce         db  0x00 ; '.'
00000000000014cf         db  0x00 ; '.'
00000000000014d0         db  0x07 ; '.'
00000000000014d1         db  0x00 ; '.'
00000000000014d2         db  0x00 ; '.'
00000000000014d3         db  0x00 ; '.'
00000000000014d4         db  0x13 ; '.'
00000000000014d5         db  0x00 ; '.'
00000000000014d6         db  0x00 ; '.'
00000000000014d7         db  0x00 ; '.'
00000000000014d8         db  0x00 ; '.'
00000000000014d9         db  0x00 ; '.'
00000000000014da         db  0x00 ; '.'
00000000000014db         db  0x00 ; '.'
00000000000014dc         db  0x00 ; '.'
00000000000014dd         db  0x00 ; '.'
00000000000014de         db  0x00 ; '.'
00000000000014df         db  0x00 ; '.'
00000000000014e0         db  0x48 ; 'H'
00000000000014e1         db  0xee ; '.'
00000000000014e2         db  0x20 ; ' '
00000000000014e3         db  0x00 ; '.'
00000000000014e4         db  0x00 ; '.'
00000000000014e5         db  0x00 ; '.'
00000000000014e6         db  0x00 ; '.'
00000000000014e7         db  0x00 ; '.'
00000000000014e8         db  0x07 ; '.'
00000000000014e9         db  0x00 ; '.'
00000000000014ea         db  0x00 ; '.'
00000000000014eb         db  0x00 ; '.'
00000000000014ec         db  0x14 ; '.'
00000000000014ed         db  0x00 ; '.'
00000000000014ee         db  0x00 ; '.'
00000000000014ef         db  0x00 ; '.'
00000000000014f0         db  0x00 ; '.'
00000000000014f1         db  0x00 ; '.'
00000000000014f2         db  0x00 ; '.'
00000000000014f3         db  0x00 ; '.'
00000000000014f4         db  0x00 ; '.'
00000000000014f5         db  0x00 ; '.'
00000000000014f6         db  0x00 ; '.'
00000000000014f7         db  0x00 ; '.'
00000000000014f8         db  0x50 ; 'P'
00000000000014f9         db  0xee ; '.'
00000000000014fa         db  0x20 ; ' '
00000000000014fb         db  0x00 ; '.'
00000000000014fc         db  0x00 ; '.'
00000000000014fd         db  0x00 ; '.'
00000000000014fe         db  0x00 ; '.'
00000000000014ff         db  0x00 ; '.'
0000000000001500         db  0x07 ; '.'
0000000000001501         db  0x00 ; '.'
0000000000001502         db  0x00 ; '.'
0000000000001503         db  0x00 ; '.'
0000000000001504         db  0x15 ; '.'
0000000000001505         db  0x00 ; '.'
0000000000001506         db  0x00 ; '.'
0000000000001507         db  0x00 ; '.'
0000000000001508         db  0x00 ; '.'
0000000000001509         db  0x00 ; '.'
000000000000150a         db  0x00 ; '.'
000000000000150b         db  0x00 ; '.'
000000000000150c         db  0x00 ; '.'
000000000000150d         db  0x00 ; '.'
000000000000150e         db  0x00 ; '.'
000000000000150f         db  0x00 ; '.'
0000000000001510         db  0x58 ; 'X'
0000000000001511         db  0xee ; '.'
0000000000001512         db  0x20 ; ' '
0000000000001513         db  0x00 ; '.'
0000000000001514         db  0x00 ; '.'
0000000000001515         db  0x00 ; '.'
0000000000001516         db  0x00 ; '.'
0000000000001517         db  0x00 ; '.'
0000000000001518         db  0x07 ; '.'
0000000000001519         db  0x00 ; '.'
000000000000151a         db  0x00 ; '.'
000000000000151b         db  0x00 ; '.'
000000000000151c         db  0x16 ; '.'
000000000000151d         db  0x00 ; '.'
000000000000151e         db  0x00 ; '.'
000000000000151f         db  0x00 ; '.'
0000000000001520         db  0x00 ; '.'
0000000000001521         db  0x00 ; '.'
0000000000001522         db  0x00 ; '.'
0000000000001523         db  0x00 ; '.'
0000000000001524         db  0x00 ; '.'
0000000000001525         db  0x00 ; '.'
0000000000001526         db  0x00 ; '.'
0000000000001527         db  0x00 ; '.'
0000000000001528         db  0x60 ; '`'
0000000000001529         db  0xee ; '.'
000000000000152a         db  0x20 ; ' '
000000000000152b         db  0x00 ; '.'
000000000000152c         db  0x00 ; '.'
000000000000152d         db  0x00 ; '.'
000000000000152e         db  0x00 ; '.'
000000000000152f         db  0x00 ; '.'
0000000000001530         db  0x07 ; '.'
0000000000001531         db  0x00 ; '.'
0000000000001532         db  0x00 ; '.'
0000000000001533         db  0x00 ; '.'
0000000000001534         db  0x17 ; '.'
0000000000001535         db  0x00 ; '.'
0000000000001536         db  0x00 ; '.'
0000000000001537         db  0x00 ; '.'
0000000000001538         db  0x00 ; '.'
0000000000001539         db  0x00 ; '.'
000000000000153a         db  0x00 ; '.'
000000000000153b         db  0x00 ; '.'
000000000000153c         db  0x00 ; '.'
000000000000153d         db  0x00 ; '.'
000000000000153e         db  0x00 ; '.'
000000000000153f         db  0x00 ; '.'
0000000000001540         db  0x68 ; 'h'
0000000000001541         db  0xee ; '.'
0000000000001542         db  0x20 ; ' '
0000000000001543         db  0x00 ; '.'
0000000000001544         db  0x00 ; '.'
0000000000001545         db  0x00 ; '.'
0000000000001546         db  0x00 ; '.'
0000000000001547         db  0x00 ; '.'
0000000000001548         db  0x07 ; '.'
0000000000001549         db  0x00 ; '.'
000000000000154a         db  0x00 ; '.'
000000000000154b         db  0x00 ; '.'
000000000000154c         db  0x18 ; '.'
000000000000154d         db  0x00 ; '.'
000000000000154e         db  0x00 ; '.'
000000000000154f         db  0x00 ; '.'
0000000000001550         db  0x00 ; '.'
0000000000001551         db  0x00 ; '.'
0000000000001552         db  0x00 ; '.'
0000000000001553         db  0x00 ; '.'
0000000000001554         db  0x00 ; '.'
0000000000001555         db  0x00 ; '.'
0000000000001556         db  0x00 ; '.'
0000000000001557         db  0x00 ; '.'
0000000000001558         db  0x70 ; 'p'
0000000000001559         db  0xee ; '.'
000000000000155a         db  0x20 ; ' '
000000000000155b         db  0x00 ; '.'
000000000000155c         db  0x00 ; '.'
000000000000155d         db  0x00 ; '.'
000000000000155e         db  0x00 ; '.'
000000000000155f         db  0x00 ; '.'
0000000000001560         db  0x07 ; '.'
0000000000001561         db  0x00 ; '.'
0000000000001562         db  0x00 ; '.'
0000000000001563         db  0x00 ; '.'
0000000000001564         db  0x19 ; '.'
0000000000001565         db  0x00 ; '.'
0000000000001566         db  0x00 ; '.'
0000000000001567         db  0x00 ; '.'
0000000000001568         db  0x00 ; '.'
0000000000001569         db  0x00 ; '.'
000000000000156a         db  0x00 ; '.'
000000000000156b         db  0x00 ; '.'
000000000000156c         db  0x00 ; '.'
000000000000156d         db  0x00 ; '.'
000000000000156e         db  0x00 ; '.'
000000000000156f         db  0x00 ; '.'
0000000000001570         db  0x78 ; 'x'
0000000000001571         db  0xee ; '.'
0000000000001572         db  0x20 ; ' '
0000000000001573         db  0x00 ; '.'
0000000000001574         db  0x00 ; '.'
0000000000001575         db  0x00 ; '.'
0000000000001576         db  0x00 ; '.'
0000000000001577         db  0x00 ; '.'
0000000000001578         db  0x07 ; '.'
0000000000001579         db  0x00 ; '.'
000000000000157a         db  0x00 ; '.'
000000000000157b         db  0x00 ; '.'
000000000000157c         db  0x1a ; '.'
000000000000157d         db  0x00 ; '.'
000000000000157e         db  0x00 ; '.'
000000000000157f         db  0x00 ; '.'
0000000000001580         db  0x00 ; '.'
0000000000001581         db  0x00 ; '.'
0000000000001582         db  0x00 ; '.'
0000000000001583         db  0x00 ; '.'
0000000000001584         db  0x00 ; '.'
0000000000001585         db  0x00 ; '.'
0000000000001586         db  0x00 ; '.'
0000000000001587         db  0x00 ; '.'
0000000000001588         db  0x80 ; '.'
0000000000001589         db  0xee ; '.'
000000000000158a         db  0x20 ; ' '
000000000000158b         db  0x00 ; '.'
000000000000158c         db  0x00 ; '.'
000000000000158d         db  0x00 ; '.'
000000000000158e         db  0x00 ; '.'
000000000000158f         db  0x00 ; '.'
0000000000001590         db  0x07 ; '.'
0000000000001591         db  0x00 ; '.'
0000000000001592         db  0x00 ; '.'
0000000000001593         db  0x00 ; '.'
0000000000001594         db  0x1b ; '.'
0000000000001595         db  0x00 ; '.'
0000000000001596         db  0x00 ; '.'
0000000000001597         db  0x00 ; '.'
0000000000001598         db  0x00 ; '.'
0000000000001599         db  0x00 ; '.'
000000000000159a         db  0x00 ; '.'
000000000000159b         db  0x00 ; '.'
000000000000159c         db  0x00 ; '.'
000000000000159d         db  0x00 ; '.'
000000000000159e         db  0x00 ; '.'
000000000000159f         db  0x00 ; '.'
00000000000015a0         db  0x88 ; '.'
00000000000015a1         db  0xee ; '.'
00000000000015a2         db  0x20 ; ' '
00000000000015a3         db  0x00 ; '.'
00000000000015a4         db  0x00 ; '.'
00000000000015a5         db  0x00 ; '.'
00000000000015a6         db  0x00 ; '.'
00000000000015a7         db  0x00 ; '.'
00000000000015a8         db  0x07 ; '.'
00000000000015a9         db  0x00 ; '.'
00000000000015aa         db  0x00 ; '.'
00000000000015ab         db  0x00 ; '.'
00000000000015ac         db  0x1c ; '.'
00000000000015ad         db  0x00 ; '.'
00000000000015ae         db  0x00 ; '.'
00000000000015af         db  0x00 ; '.'
00000000000015b0         db  0x00 ; '.'
00000000000015b1         db  0x00 ; '.'
00000000000015b2         db  0x00 ; '.'
00000000000015b3         db  0x00 ; '.'
00000000000015b4         db  0x00 ; '.'
00000000000015b5         db  0x00 ; '.'
00000000000015b6         db  0x00 ; '.'
00000000000015b7         db  0x00 ; '.'
00000000000015b8         db  0x90 ; '.'
00000000000015b9         db  0xee ; '.'
00000000000015ba         db  0x20 ; ' '
00000000000015bb         db  0x00 ; '.'
00000000000015bc         db  0x00 ; '.'
00000000000015bd         db  0x00 ; '.'
00000000000015be         db  0x00 ; '.'
00000000000015bf         db  0x00 ; '.'
00000000000015c0         db  0x07 ; '.'
00000000000015c1         db  0x00 ; '.'
00000000000015c2         db  0x00 ; '.'
00000000000015c3         db  0x00 ; '.'
00000000000015c4         db  0x1d ; '.'
00000000000015c5         db  0x00 ; '.'
00000000000015c6         db  0x00 ; '.'
00000000000015c7         db  0x00 ; '.'
00000000000015c8         db  0x00 ; '.'
00000000000015c9         db  0x00 ; '.'
00000000000015ca         db  0x00 ; '.'
00000000000015cb         db  0x00 ; '.'
00000000000015cc         db  0x00 ; '.'
00000000000015cd         db  0x00 ; '.'
00000000000015ce         db  0x00 ; '.'
00000000000015cf         db  0x00 ; '.'
00000000000015d0         db  0x98 ; '.'
00000000000015d1         db  0xee ; '.'
00000000000015d2         db  0x20 ; ' '
00000000000015d3         db  0x00 ; '.'
00000000000015d4         db  0x00 ; '.'
00000000000015d5         db  0x00 ; '.'
00000000000015d6         db  0x00 ; '.'
00000000000015d7         db  0x00 ; '.'
00000000000015d8         db  0x07 ; '.'
00000000000015d9         db  0x00 ; '.'
00000000000015da         db  0x00 ; '.'
00000000000015db         db  0x00 ; '.'
00000000000015dc         db  0x1e ; '.'
00000000000015dd         db  0x00 ; '.'
00000000000015de         db  0x00 ; '.'
00000000000015df         db  0x00 ; '.'
00000000000015e0         db  0x00 ; '.'
00000000000015e1         db  0x00 ; '.'
00000000000015e2         db  0x00 ; '.'
00000000000015e3         db  0x00 ; '.'
00000000000015e4         db  0x00 ; '.'
00000000000015e5         db  0x00 ; '.'
00000000000015e6         db  0x00 ; '.'
00000000000015e7         db  0x00 ; '.'
00000000000015e8         db  0xa0 ; '.'
00000000000015e9         db  0xee ; '.'
00000000000015ea         db  0x20 ; ' '
00000000000015eb         db  0x00 ; '.'
00000000000015ec         db  0x00 ; '.'
00000000000015ed         db  0x00 ; '.'
00000000000015ee         db  0x00 ; '.'
00000000000015ef         db  0x00 ; '.'
00000000000015f0         db  0x07 ; '.'
00000000000015f1         db  0x00 ; '.'
00000000000015f2         db  0x00 ; '.'
00000000000015f3         db  0x00 ; '.'
00000000000015f4         db  0x1f ; '.'
00000000000015f5         db  0x00 ; '.'
00000000000015f6         db  0x00 ; '.'
00000000000015f7         db  0x00 ; '.'
00000000000015f8         db  0x00 ; '.'
00000000000015f9         db  0x00 ; '.'
00000000000015fa         db  0x00 ; '.'
00000000000015fb         db  0x00 ; '.'
00000000000015fc         db  0x00 ; '.'
00000000000015fd         db  0x00 ; '.'
00000000000015fe         db  0x00 ; '.'
00000000000015ff         db  0x00 ; '.'
0000000000001600         db  0xa8 ; '.'
0000000000001601         db  0xee ; '.'
0000000000001602         db  0x20 ; ' '
0000000000001603         db  0x00 ; '.'
0000000000001604         db  0x00 ; '.'
0000000000001605         db  0x00 ; '.'
0000000000001606         db  0x00 ; '.'
0000000000001607         db  0x00 ; '.'
0000000000001608         db  0x07 ; '.'
0000000000001609         db  0x00 ; '.'
000000000000160a         db  0x00 ; '.'
000000000000160b         db  0x00 ; '.'
000000000000160c         db  0x20 ; ' '
000000000000160d         db  0x00 ; '.'
000000000000160e         db  0x00 ; '.'
000000000000160f         db  0x00 ; '.'
0000000000001610         db  0x00 ; '.'
0000000000001611         db  0x00 ; '.'
0000000000001612         db  0x00 ; '.'
0000000000001613         db  0x00 ; '.'
0000000000001614         db  0x00 ; '.'
0000000000001615         db  0x00 ; '.'
0000000000001616         db  0x00 ; '.'
0000000000001617         db  0x00 ; '.'
0000000000001618         db  0xb0 ; '.'
0000000000001619         db  0xee ; '.'
000000000000161a         db  0x20 ; ' '
000000000000161b         db  0x00 ; '.'
000000000000161c         db  0x00 ; '.'
000000000000161d         db  0x00 ; '.'
000000000000161e         db  0x00 ; '.'
000000000000161f         db  0x00 ; '.'
0000000000001620         db  0x07 ; '.'
0000000000001621         db  0x00 ; '.'
0000000000001622         db  0x00 ; '.'
0000000000001623         db  0x00 ; '.'
0000000000001624         db  0x22 ; '"'
0000000000001625         db  0x00 ; '.'
0000000000001626         db  0x00 ; '.'
0000000000001627         db  0x00 ; '.'
0000000000001628         db  0x00 ; '.'
0000000000001629         db  0x00 ; '.'
000000000000162a         db  0x00 ; '.'
000000000000162b         db  0x00 ; '.'
000000000000162c         db  0x00 ; '.'
000000000000162d         db  0x00 ; '.'
000000000000162e         db  0x00 ; '.'
000000000000162f         db  0x00 ; '.'
0000000000001630         db  0xb8 ; '.'
0000000000001631         db  0xee ; '.'
0000000000001632         db  0x20 ; ' '
0000000000001633         db  0x00 ; '.'
0000000000001634         db  0x00 ; '.'
0000000000001635         db  0x00 ; '.'
0000000000001636         db  0x00 ; '.'
0000000000001637         db  0x00 ; '.'
0000000000001638         db  0x07 ; '.'
0000000000001639         db  0x00 ; '.'
000000000000163a         db  0x00 ; '.'
000000000000163b         db  0x00 ; '.'
000000000000163c         db  0x23 ; '#'
000000000000163d         db  0x00 ; '.'
000000000000163e         db  0x00 ; '.'
000000000000163f         db  0x00 ; '.'
0000000000001640         db  0x00 ; '.'
0000000000001641         db  0x00 ; '.'
0000000000001642         db  0x00 ; '.'
0000000000001643         db  0x00 ; '.'
0000000000001644         db  0x00 ; '.'
0000000000001645         db  0x00 ; '.'
0000000000001646         db  0x00 ; '.'
0000000000001647         db  0x00 ; '.'
0000000000001648         db  0xc0 ; '.'
0000000000001649         db  0xee ; '.'
000000000000164a         db  0x20 ; ' '
000000000000164b         db  0x00 ; '.'
000000000000164c         db  0x00 ; '.'
000000000000164d         db  0x00 ; '.'
000000000000164e         db  0x00 ; '.'
000000000000164f         db  0x00 ; '.'
0000000000001650         db  0x07 ; '.'
0000000000001651         db  0x00 ; '.'
0000000000001652         db  0x00 ; '.'
0000000000001653         db  0x00 ; '.'
0000000000001654         db  0x24 ; '$'
0000000000001655         db  0x00 ; '.'
0000000000001656         db  0x00 ; '.'
0000000000001657         db  0x00 ; '.'
0000000000001658         db  0x00 ; '.'
0000000000001659         db  0x00 ; '.'
000000000000165a         db  0x00 ; '.'
000000000000165b         db  0x00 ; '.'
000000000000165c         db  0x00 ; '.'
000000000000165d         db  0x00 ; '.'
000000000000165e         db  0x00 ; '.'
000000000000165f         db  0x00 ; '.'
0000000000001660         db  0xc8 ; '.'
0000000000001661         db  0xee ; '.'
0000000000001662         db  0x20 ; ' '
0000000000001663         db  0x00 ; '.'
0000000000001664         db  0x00 ; '.'
0000000000001665         db  0x00 ; '.'
0000000000001666         db  0x00 ; '.'
0000000000001667         db  0x00 ; '.'
0000000000001668         db  0x07 ; '.'
0000000000001669         db  0x00 ; '.'
000000000000166a         db  0x00 ; '.'
000000000000166b         db  0x00 ; '.'
000000000000166c         db  0x25 ; '%'
000000000000166d         db  0x00 ; '.'
000000000000166e         db  0x00 ; '.'
000000000000166f         db  0x00 ; '.'
0000000000001670         db  0x00 ; '.'
0000000000001671         db  0x00 ; '.'
0000000000001672         db  0x00 ; '.'
0000000000001673         db  0x00 ; '.'
0000000000001674         db  0x00 ; '.'
0000000000001675         db  0x00 ; '.'
0000000000001676         db  0x00 ; '.'
0000000000001677         db  0x00 ; '.'
0000000000001678         db  0xd0 ; '.'
0000000000001679         db  0xee ; '.'
000000000000167a         db  0x20 ; ' '
000000000000167b         db  0x00 ; '.'
000000000000167c         db  0x00 ; '.'
000000000000167d         db  0x00 ; '.'
000000000000167e         db  0x00 ; '.'
000000000000167f         db  0x00 ; '.'
0000000000001680         db  0x07 ; '.'
0000000000001681         db  0x00 ; '.'
0000000000001682         db  0x00 ; '.'
0000000000001683         db  0x00 ; '.'
0000000000001684         db  0x26 ; '&'
0000000000001685         db  0x00 ; '.'
0000000000001686         db  0x00 ; '.'
0000000000001687         db  0x00 ; '.'
0000000000001688         db  0x00 ; '.'
0000000000001689         db  0x00 ; '.'
000000000000168a         db  0x00 ; '.'
000000000000168b         db  0x00 ; '.'
000000000000168c         db  0x00 ; '.'
000000000000168d         db  0x00 ; '.'
000000000000168e         db  0x00 ; '.'
000000000000168f         db  0x00 ; '.'
0000000000001690         db  0xd8 ; '.'
0000000000001691         db  0xee ; '.'
0000000000001692         db  0x20 ; ' '
0000000000001693         db  0x00 ; '.'
0000000000001694         db  0x00 ; '.'
0000000000001695         db  0x00 ; '.'
0000000000001696         db  0x00 ; '.'
0000000000001697         db  0x00 ; '.'
0000000000001698         db  0x07 ; '.'
0000000000001699         db  0x00 ; '.'
000000000000169a         db  0x00 ; '.'
000000000000169b         db  0x00 ; '.'
000000000000169c         db  0x27 ; '''
000000000000169d         db  0x00 ; '.'
000000000000169e         db  0x00 ; '.'
000000000000169f         db  0x00 ; '.'
00000000000016a0         db  0x00 ; '.'
00000000000016a1         db  0x00 ; '.'
00000000000016a2         db  0x00 ; '.'
00000000000016a3         db  0x00 ; '.'
00000000000016a4         db  0x00 ; '.'
00000000000016a5         db  0x00 ; '.'
00000000000016a6         db  0x00 ; '.'
00000000000016a7         db  0x00 ; '.'
00000000000016a8         db  0xe0 ; '.'
00000000000016a9         db  0xee ; '.'
00000000000016aa         db  0x20 ; ' '
00000000000016ab         db  0x00 ; '.'
00000000000016ac         db  0x00 ; '.'
00000000000016ad         db  0x00 ; '.'
00000000000016ae         db  0x00 ; '.'
00000000000016af         db  0x00 ; '.'
00000000000016b0         db  0x07 ; '.'
00000000000016b1         db  0x00 ; '.'
00000000000016b2         db  0x00 ; '.'
00000000000016b3         db  0x00 ; '.'
00000000000016b4         db  0x28 ; '('
00000000000016b5         db  0x00 ; '.'
00000000000016b6         db  0x00 ; '.'
00000000000016b7         db  0x00 ; '.'
00000000000016b8         db  0x00 ; '.'
00000000000016b9         db  0x00 ; '.'
00000000000016ba         db  0x00 ; '.'
00000000000016bb         db  0x00 ; '.'
00000000000016bc         db  0x00 ; '.'
00000000000016bd         db  0x00 ; '.'
00000000000016be         db  0x00 ; '.'
00000000000016bf         db  0x00 ; '.'
00000000000016c0         db  0xe8 ; '.'
00000000000016c1         db  0xee ; '.'
00000000000016c2         db  0x20 ; ' '
00000000000016c3         db  0x00 ; '.'
00000000000016c4         db  0x00 ; '.'
00000000000016c5         db  0x00 ; '.'
00000000000016c6         db  0x00 ; '.'
00000000000016c7         db  0x00 ; '.'
00000000000016c8         db  0x07 ; '.'
00000000000016c9         db  0x00 ; '.'
00000000000016ca         db  0x00 ; '.'
00000000000016cb         db  0x00 ; '.'
00000000000016cc         db  0x2a ; '*'
00000000000016cd         db  0x00 ; '.'
00000000000016ce         db  0x00 ; '.'
00000000000016cf         db  0x00 ; '.'
00000000000016d0         db  0x00 ; '.'
00000000000016d1         db  0x00 ; '.'
00000000000016d2         db  0x00 ; '.'
00000000000016d3         db  0x00 ; '.'
00000000000016d4         db  0x00 ; '.'
00000000000016d5         db  0x00 ; '.'
00000000000016d6         db  0x00 ; '.'
00000000000016d7         db  0x00 ; '.'
00000000000016d8         db  0xf0 ; '.'
00000000000016d9         db  0xee ; '.'
00000000000016da         db  0x20 ; ' '
00000000000016db         db  0x00 ; '.'
00000000000016dc         db  0x00 ; '.'
00000000000016dd         db  0x00 ; '.'
00000000000016de         db  0x00 ; '.'
00000000000016df         db  0x00 ; '.'
00000000000016e0         db  0x07 ; '.'
00000000000016e1         db  0x00 ; '.'
00000000000016e2         db  0x00 ; '.'
00000000000016e3         db  0x00 ; '.'
00000000000016e4         db  0x2b ; '+'
00000000000016e5         db  0x00 ; '.'
00000000000016e6         db  0x00 ; '.'
00000000000016e7         db  0x00 ; '.'
00000000000016e8         db  0x00 ; '.'
00000000000016e9         db  0x00 ; '.'
00000000000016ea         db  0x00 ; '.'
00000000000016eb         db  0x00 ; '.'
00000000000016ec         db  0x00 ; '.'
00000000000016ed         db  0x00 ; '.'
00000000000016ee         db  0x00 ; '.'
00000000000016ef         db  0x00 ; '.'
00000000000016f0         db  0xf8 ; '.'
00000000000016f1         db  0xee ; '.'
00000000000016f2         db  0x20 ; ' '
00000000000016f3         db  0x00 ; '.'
00000000000016f4         db  0x00 ; '.'
00000000000016f5         db  0x00 ; '.'
00000000000016f6         db  0x00 ; '.'
00000000000016f7         db  0x00 ; '.'
00000000000016f8         db  0x07 ; '.'
00000000000016f9         db  0x00 ; '.'
00000000000016fa         db  0x00 ; '.'
00000000000016fb         db  0x00 ; '.'
00000000000016fc         db  0x2c ; ','
00000000000016fd         db  0x00 ; '.'
00000000000016fe         db  0x00 ; '.'
00000000000016ff         db  0x00 ; '.'
0000000000001700         db  0x00 ; '.'
0000000000001701         db  0x00 ; '.'
0000000000001702         db  0x00 ; '.'
0000000000001703         db  0x00 ; '.'
0000000000001704         db  0x00 ; '.'
0000000000001705         db  0x00 ; '.'
0000000000001706         db  0x00 ; '.'
0000000000001707         db  0x00 ; '.'
0000000000001708         db  0x00 ; '.'
0000000000001709         db  0xef ; '.'
000000000000170a         db  0x20 ; ' '
000000000000170b         db  0x00 ; '.'
000000000000170c         db  0x00 ; '.'
000000000000170d         db  0x00 ; '.'
000000000000170e         db  0x00 ; '.'
000000000000170f         db  0x00 ; '.'
0000000000001710         db  0x07 ; '.'
0000000000001711         db  0x00 ; '.'
0000000000001712         db  0x00 ; '.'
0000000000001713         db  0x00 ; '.'
0000000000001714         db  0x2d ; '-'
0000000000001715         db  0x00 ; '.'
0000000000001716         db  0x00 ; '.'
0000000000001717         db  0x00 ; '.'
0000000000001718         db  0x00 ; '.'
0000000000001719         db  0x00 ; '.'
000000000000171a         db  0x00 ; '.'
000000000000171b         db  0x00 ; '.'
000000000000171c         db  0x00 ; '.'
000000000000171d         db  0x00 ; '.'
000000000000171e         db  0x00 ; '.'
000000000000171f         db  0x00 ; '.'
0000000000001720         db  0x08 ; '.'
0000000000001721         db  0xef ; '.'
0000000000001722         db  0x20 ; ' '
0000000000001723         db  0x00 ; '.'
0000000000001724         db  0x00 ; '.'
0000000000001725         db  0x00 ; '.'
0000000000001726         db  0x00 ; '.'
0000000000001727         db  0x00 ; '.'
0000000000001728         db  0x07 ; '.'
0000000000001729         db  0x00 ; '.'
000000000000172a         db  0x00 ; '.'
000000000000172b         db  0x00 ; '.'
000000000000172c         db  0x2e ; '.'
000000000000172d         db  0x00 ; '.'
000000000000172e         db  0x00 ; '.'
000000000000172f         db  0x00 ; '.'
0000000000001730         db  0x00 ; '.'
0000000000001731         db  0x00 ; '.'
0000000000001732         db  0x00 ; '.'
0000000000001733         db  0x00 ; '.'
0000000000001734         db  0x00 ; '.'
0000000000001735         db  0x00 ; '.'
0000000000001736         db  0x00 ; '.'
0000000000001737         db  0x00 ; '.'
0000000000001738         db  0x10 ; '.'
0000000000001739         db  0xef ; '.'
000000000000173a         db  0x20 ; ' '
000000000000173b         db  0x00 ; '.'
000000000000173c         db  0x00 ; '.'
000000000000173d         db  0x00 ; '.'
000000000000173e         db  0x00 ; '.'
000000000000173f         db  0x00 ; '.'
0000000000001740         db  0x07 ; '.'
0000000000001741         db  0x00 ; '.'
0000000000001742         db  0x00 ; '.'
0000000000001743         db  0x00 ; '.'
0000000000001744         db  0x2f ; '/'
0000000000001745         db  0x00 ; '.'
0000000000001746         db  0x00 ; '.'
0000000000001747         db  0x00 ; '.'
0000000000001748         db  0x00 ; '.'
0000000000001749         db  0x00 ; '.'
000000000000174a         db  0x00 ; '.'
000000000000174b         db  0x00 ; '.'
000000000000174c         db  0x00 ; '.'
000000000000174d         db  0x00 ; '.'
000000000000174e         db  0x00 ; '.'
000000000000174f         db  0x00 ; '.'
0000000000001750         db  0x18 ; '.'
0000000000001751         db  0xef ; '.'
0000000000001752         db  0x20 ; ' '
0000000000001753         db  0x00 ; '.'
0000000000001754         db  0x00 ; '.'
0000000000001755         db  0x00 ; '.'
0000000000001756         db  0x00 ; '.'
0000000000001757         db  0x00 ; '.'
0000000000001758         db  0x07 ; '.'
0000000000001759         db  0x00 ; '.'
000000000000175a         db  0x00 ; '.'
000000000000175b         db  0x00 ; '.'
000000000000175c         db  0x30 ; '0'
000000000000175d         db  0x00 ; '.'
000000000000175e         db  0x00 ; '.'
000000000000175f         db  0x00 ; '.'
0000000000001760         db  0x00 ; '.'
0000000000001761         db  0x00 ; '.'
0000000000001762         db  0x00 ; '.'
0000000000001763         db  0x00 ; '.'
0000000000001764         db  0x00 ; '.'
0000000000001765         db  0x00 ; '.'
0000000000001766         db  0x00 ; '.'
0000000000001767         db  0x00 ; '.'
0000000000001768         db  0x20 ; ' '
0000000000001769         db  0xef ; '.'
000000000000176a         db  0x20 ; ' '
000000000000176b         db  0x00 ; '.'
000000000000176c         db  0x00 ; '.'
000000000000176d         db  0x00 ; '.'
000000000000176e         db  0x00 ; '.'
000000000000176f         db  0x00 ; '.'
0000000000001770         db  0x07 ; '.'
0000000000001771         db  0x00 ; '.'
0000000000001772         db  0x00 ; '.'
0000000000001773         db  0x00 ; '.'
0000000000001774         db  0x31 ; '1'
0000000000001775         db  0x00 ; '.'
0000000000001776         db  0x00 ; '.'
0000000000001777         db  0x00 ; '.'
0000000000001778         db  0x00 ; '.'
0000000000001779         db  0x00 ; '.'
000000000000177a         db  0x00 ; '.'
000000000000177b         db  0x00 ; '.'
000000000000177c         db  0x00 ; '.'
000000000000177d         db  0x00 ; '.'
000000000000177e         db  0x00 ; '.'
000000000000177f         db  0x00 ; '.'
0000000000001780         db  0x28 ; '('
0000000000001781         db  0xef ; '.'
0000000000001782         db  0x20 ; ' '
0000000000001783         db  0x00 ; '.'
0000000000001784         db  0x00 ; '.'
0000000000001785         db  0x00 ; '.'
0000000000001786         db  0x00 ; '.'
0000000000001787         db  0x00 ; '.'
0000000000001788         db  0x07 ; '.'
0000000000001789         db  0x00 ; '.'
000000000000178a         db  0x00 ; '.'
000000000000178b         db  0x00 ; '.'
000000000000178c         db  0x32 ; '2'
000000000000178d         db  0x00 ; '.'
000000000000178e         db  0x00 ; '.'
000000000000178f         db  0x00 ; '.'
0000000000001790         db  0x00 ; '.'
0000000000001791         db  0x00 ; '.'
0000000000001792         db  0x00 ; '.'
0000000000001793         db  0x00 ; '.'
0000000000001794         db  0x00 ; '.'
0000000000001795         db  0x00 ; '.'
0000000000001796         db  0x00 ; '.'
0000000000001797         db  0x00 ; '.'
0000000000001798         db  0x30 ; '0'
0000000000001799         db  0xef ; '.'
000000000000179a         db  0x20 ; ' '
000000000000179b         db  0x00 ; '.'
000000000000179c         db  0x00 ; '.'
000000000000179d         db  0x00 ; '.'
000000000000179e         db  0x00 ; '.'
000000000000179f         db  0x00 ; '.'
00000000000017a0         db  0x07 ; '.'
00000000000017a1         db  0x00 ; '.'
00000000000017a2         db  0x00 ; '.'
00000000000017a3         db  0x00 ; '.'
00000000000017a4         db  0x33 ; '3'
00000000000017a5         db  0x00 ; '.'
00000000000017a6         db  0x00 ; '.'
00000000000017a7         db  0x00 ; '.'
00000000000017a8         db  0x00 ; '.'
00000000000017a9         db  0x00 ; '.'
00000000000017aa         db  0x00 ; '.'
00000000000017ab         db  0x00 ; '.'
00000000000017ac         db  0x00 ; '.'
00000000000017ad         db  0x00 ; '.'
00000000000017ae         db  0x00 ; '.'
00000000000017af         db  0x00 ; '.'
00000000000017b0         db  0x38 ; '8'
00000000000017b1         db  0xef ; '.'
00000000000017b2         db  0x20 ; ' '
00000000000017b3         db  0x00 ; '.'
00000000000017b4         db  0x00 ; '.'
00000000000017b5         db  0x00 ; '.'
00000000000017b6         db  0x00 ; '.'
00000000000017b7         db  0x00 ; '.'
00000000000017b8         db  0x07 ; '.'
00000000000017b9         db  0x00 ; '.'
00000000000017ba         db  0x00 ; '.'
00000000000017bb         db  0x00 ; '.'
00000000000017bc         db  0x34 ; '4'
00000000000017bd         db  0x00 ; '.'
00000000000017be         db  0x00 ; '.'
00000000000017bf         db  0x00 ; '.'
00000000000017c0         db  0x00 ; '.'
00000000000017c1         db  0x00 ; '.'
00000000000017c2         db  0x00 ; '.'
00000000000017c3         db  0x00 ; '.'
00000000000017c4         db  0x00 ; '.'
00000000000017c5         db  0x00 ; '.'
00000000000017c6         db  0x00 ; '.'
00000000000017c7         db  0x00 ; '.'
00000000000017c8         db  0x40 ; '@'
00000000000017c9         db  0xef ; '.'
00000000000017ca         db  0x20 ; ' '
00000000000017cb         db  0x00 ; '.'
00000000000017cc         db  0x00 ; '.'
00000000000017cd         db  0x00 ; '.'
00000000000017ce         db  0x00 ; '.'
00000000000017cf         db  0x00 ; '.'
00000000000017d0         db  0x07 ; '.'
00000000000017d1         db  0x00 ; '.'
00000000000017d2         db  0x00 ; '.'
00000000000017d3         db  0x00 ; '.'
00000000000017d4         db  0x35 ; '5'
00000000000017d5         db  0x00 ; '.'
00000000000017d6         db  0x00 ; '.'
00000000000017d7         db  0x00 ; '.'
00000000000017d8         db  0x00 ; '.'
00000000000017d9         db  0x00 ; '.'
00000000000017da         db  0x00 ; '.'
00000000000017db         db  0x00 ; '.'
00000000000017dc         db  0x00 ; '.'
00000000000017dd         db  0x00 ; '.'
00000000000017de         db  0x00 ; '.'
00000000000017df         db  0x00 ; '.'
00000000000017e0         db  0x48 ; 'H'
00000000000017e1         db  0xef ; '.'
00000000000017e2         db  0x20 ; ' '
00000000000017e3         db  0x00 ; '.'
00000000000017e4         db  0x00 ; '.'
00000000000017e5         db  0x00 ; '.'
00000000000017e6         db  0x00 ; '.'
00000000000017e7         db  0x00 ; '.'
00000000000017e8         db  0x07 ; '.'
00000000000017e9         db  0x00 ; '.'
00000000000017ea         db  0x00 ; '.'
00000000000017eb         db  0x00 ; '.'
00000000000017ec         db  0x36 ; '6'
00000000000017ed         db  0x00 ; '.'
00000000000017ee         db  0x00 ; '.'
00000000000017ef         db  0x00 ; '.'
00000000000017f0         db  0x00 ; '.'
00000000000017f1         db  0x00 ; '.'
00000000000017f2         db  0x00 ; '.'
00000000000017f3         db  0x00 ; '.'
00000000000017f4         db  0x00 ; '.'
00000000000017f5         db  0x00 ; '.'
00000000000017f6         db  0x00 ; '.'
00000000000017f7         db  0x00 ; '.'
00000000000017f8         db  0x50 ; 'P'
00000000000017f9         db  0xef ; '.'
00000000000017fa         db  0x20 ; ' '
00000000000017fb         db  0x00 ; '.'
00000000000017fc         db  0x00 ; '.'
00000000000017fd         db  0x00 ; '.'
00000000000017fe         db  0x00 ; '.'
00000000000017ff         db  0x00 ; '.'
0000000000001800         db  0x07 ; '.'
0000000000001801         db  0x00 ; '.'
0000000000001802         db  0x00 ; '.'
0000000000001803         db  0x00 ; '.'
0000000000001804         db  0x37 ; '7'
0000000000001805         db  0x00 ; '.'
0000000000001806         db  0x00 ; '.'
0000000000001807         db  0x00 ; '.'
0000000000001808         db  0x00 ; '.'
0000000000001809         db  0x00 ; '.'
000000000000180a         db  0x00 ; '.'
000000000000180b         db  0x00 ; '.'
000000000000180c         db  0x00 ; '.'
000000000000180d         db  0x00 ; '.'
000000000000180e         db  0x00 ; '.'
000000000000180f         db  0x00 ; '.'
0000000000001810         db  0x58 ; 'X'
0000000000001811         db  0xef ; '.'
0000000000001812         db  0x20 ; ' '
0000000000001813         db  0x00 ; '.'
0000000000001814         db  0x00 ; '.'
0000000000001815         db  0x00 ; '.'
0000000000001816         db  0x00 ; '.'
0000000000001817         db  0x00 ; '.'
0000000000001818         db  0x07 ; '.'
0000000000001819         db  0x00 ; '.'
000000000000181a         db  0x00 ; '.'
000000000000181b         db  0x00 ; '.'
000000000000181c         db  0x38 ; '8'
000000000000181d         db  0x00 ; '.'
000000000000181e         db  0x00 ; '.'
000000000000181f         db  0x00 ; '.'
0000000000001820         db  0x00 ; '.'
0000000000001821         db  0x00 ; '.'
0000000000001822         db  0x00 ; '.'
0000000000001823         db  0x00 ; '.'
0000000000001824         db  0x00 ; '.'
0000000000001825         db  0x00 ; '.'
0000000000001826         db  0x00 ; '.'
0000000000001827         db  0x00 ; '.'
0000000000001828         db  0x60 ; '`'
0000000000001829         db  0xef ; '.'
000000000000182a         db  0x20 ; ' '
000000000000182b         db  0x00 ; '.'
000000000000182c         db  0x00 ; '.'
000000000000182d         db  0x00 ; '.'
000000000000182e         db  0x00 ; '.'
000000000000182f         db  0x00 ; '.'
0000000000001830         db  0x07 ; '.'
0000000000001831         db  0x00 ; '.'
0000000000001832         db  0x00 ; '.'
0000000000001833         db  0x00 ; '.'
0000000000001834         db  0x39 ; '9'
0000000000001835         db  0x00 ; '.'
0000000000001836         db  0x00 ; '.'
0000000000001837         db  0x00 ; '.'
0000000000001838         db  0x00 ; '.'
0000000000001839         db  0x00 ; '.'
000000000000183a         db  0x00 ; '.'
000000000000183b         db  0x00 ; '.'
000000000000183c         db  0x00 ; '.'
000000000000183d         db  0x00 ; '.'
000000000000183e         db  0x00 ; '.'
000000000000183f         db  0x00 ; '.'
0000000000001840         db  0x68 ; 'h'
0000000000001841         db  0xef ; '.'
0000000000001842         db  0x20 ; ' '
0000000000001843         db  0x00 ; '.'
0000000000001844         db  0x00 ; '.'
0000000000001845         db  0x00 ; '.'
0000000000001846         db  0x00 ; '.'
0000000000001847         db  0x00 ; '.'
0000000000001848         db  0x07 ; '.'
0000000000001849         db  0x00 ; '.'
000000000000184a         db  0x00 ; '.'
000000000000184b         db  0x00 ; '.'
000000000000184c         db  0x3a ; ':'
000000000000184d         db  0x00 ; '.'
000000000000184e         db  0x00 ; '.'
000000000000184f         db  0x00 ; '.'
0000000000001850         db  0x00 ; '.'
0000000000001851         db  0x00 ; '.'
0000000000001852         db  0x00 ; '.'
0000000000001853         db  0x00 ; '.'
0000000000001854         db  0x00 ; '.'
0000000000001855         db  0x00 ; '.'
0000000000001856         db  0x00 ; '.'
0000000000001857         db  0x00 ; '.'
0000000000001858         db  0x70 ; 'p'
0000000000001859         db  0xef ; '.'
000000000000185a         db  0x20 ; ' '
000000000000185b         db  0x00 ; '.'
000000000000185c         db  0x00 ; '.'
000000000000185d         db  0x00 ; '.'
000000000000185e         db  0x00 ; '.'
000000000000185f         db  0x00 ; '.'
0000000000001860         db  0x07 ; '.'
0000000000001861         db  0x00 ; '.'
0000000000001862         db  0x00 ; '.'
0000000000001863         db  0x00 ; '.'
0000000000001864         db  0x3b ; ';'
0000000000001865         db  0x00 ; '.'
0000000000001866         db  0x00 ; '.'
0000000000001867         db  0x00 ; '.'
0000000000001868         db  0x00 ; '.'
0000000000001869         db  0x00 ; '.'
000000000000186a         db  0x00 ; '.'
000000000000186b         db  0x00 ; '.'
000000000000186c         db  0x00 ; '.'
000000000000186d         db  0x00 ; '.'
000000000000186e         db  0x00 ; '.'
000000000000186f         db  0x00 ; '.'
0000000000001870         db  0x78 ; 'x'
0000000000001871         db  0xef ; '.'
0000000000001872         db  0x20 ; ' '
0000000000001873         db  0x00 ; '.'
0000000000001874         db  0x00 ; '.'
0000000000001875         db  0x00 ; '.'
0000000000001876         db  0x00 ; '.'
0000000000001877         db  0x00 ; '.'
0000000000001878         db  0x07 ; '.'
0000000000001879         db  0x00 ; '.'
000000000000187a         db  0x00 ; '.'
000000000000187b         db  0x00 ; '.'
000000000000187c         db  0x3c ; '<'
000000000000187d         db  0x00 ; '.'
000000000000187e         db  0x00 ; '.'
000000000000187f         db  0x00 ; '.'
0000000000001880         db  0x00 ; '.'
0000000000001881         db  0x00 ; '.'
0000000000001882         db  0x00 ; '.'
0000000000001883         db  0x00 ; '.'
0000000000001884         db  0x00 ; '.'
0000000000001885         db  0x00 ; '.'
0000000000001886         db  0x00 ; '.'
0000000000001887         db  0x00 ; '.'
0000000000001888         db  0x80 ; '.'
0000000000001889         db  0xef ; '.'
000000000000188a         db  0x20 ; ' '
000000000000188b         db  0x00 ; '.'
000000000000188c         db  0x00 ; '.'
000000000000188d         db  0x00 ; '.'
000000000000188e         db  0x00 ; '.'
000000000000188f         db  0x00 ; '.'
0000000000001890         db  0x07 ; '.'
0000000000001891         db  0x00 ; '.'
0000000000001892         db  0x00 ; '.'
0000000000001893         db  0x00 ; '.'
0000000000001894         db  0x3d ; '='
0000000000001895         db  0x00 ; '.'
0000000000001896         db  0x00 ; '.'
0000000000001897         db  0x00 ; '.'
0000000000001898         db  0x00 ; '.'
0000000000001899         db  0x00 ; '.'
000000000000189a         db  0x00 ; '.'
000000000000189b         db  0x00 ; '.'
000000000000189c         db  0x00 ; '.'
000000000000189d         db  0x00 ; '.'
000000000000189e         db  0x00 ; '.'
000000000000189f         db  0x00 ; '.'
00000000000018a0         db  0x88 ; '.'
00000000000018a1         db  0xef ; '.'
00000000000018a2         db  0x20 ; ' '
00000000000018a3         db  0x00 ; '.'
00000000000018a4         db  0x00 ; '.'
00000000000018a5         db  0x00 ; '.'
00000000000018a6         db  0x00 ; '.'
00000000000018a7         db  0x00 ; '.'
00000000000018a8         db  0x07 ; '.'
00000000000018a9         db  0x00 ; '.'
00000000000018aa         db  0x00 ; '.'
00000000000018ab         db  0x00 ; '.'
00000000000018ac         db  0x3e ; '>'
00000000000018ad         db  0x00 ; '.'
00000000000018ae         db  0x00 ; '.'
00000000000018af         db  0x00 ; '.'
00000000000018b0         db  0x00 ; '.'
00000000000018b1         db  0x00 ; '.'
00000000000018b2         db  0x00 ; '.'
00000000000018b3         db  0x00 ; '.'
00000000000018b4         db  0x00 ; '.'
00000000000018b5         db  0x00 ; '.'
00000000000018b6         db  0x00 ; '.'
00000000000018b7         db  0x00 ; '.'
00000000000018b8         db  0x90 ; '.'
00000000000018b9         db  0xef ; '.'
00000000000018ba         db  0x20 ; ' '
00000000000018bb         db  0x00 ; '.'
00000000000018bc         db  0x00 ; '.'
00000000000018bd         db  0x00 ; '.'
00000000000018be         db  0x00 ; '.'
00000000000018bf         db  0x00 ; '.'
00000000000018c0         db  0x07 ; '.'
00000000000018c1         db  0x00 ; '.'
00000000000018c2         db  0x00 ; '.'
00000000000018c3         db  0x00 ; '.'
00000000000018c4         db  0x3f ; '?'
00000000000018c5         db  0x00 ; '.'
00000000000018c6         db  0x00 ; '.'
00000000000018c7         db  0x00 ; '.'
00000000000018c8         db  0x00 ; '.'
00000000000018c9         db  0x00 ; '.'
00000000000018ca         db  0x00 ; '.'
00000000000018cb         db  0x00 ; '.'
00000000000018cc         db  0x00 ; '.'
00000000000018cd         db  0x00 ; '.'
00000000000018ce         db  0x00 ; '.'
00000000000018cf         db  0x00 ; '.'
00000000000018d0         db  0x98 ; '.'
00000000000018d1         db  0xef ; '.'
00000000000018d2         db  0x20 ; ' '
00000000000018d3         db  0x00 ; '.'
00000000000018d4         db  0x00 ; '.'
00000000000018d5         db  0x00 ; '.'
00000000000018d6         db  0x00 ; '.'
00000000000018d7         db  0x00 ; '.'
00000000000018d8         db  0x07 ; '.'
00000000000018d9         db  0x00 ; '.'
00000000000018da         db  0x00 ; '.'
00000000000018db         db  0x00 ; '.'
00000000000018dc         db  0x40 ; '@'
00000000000018dd         db  0x00 ; '.'
00000000000018de         db  0x00 ; '.'
00000000000018df         db  0x00 ; '.'
00000000000018e0         db  0x00 ; '.'
00000000000018e1         db  0x00 ; '.'
00000000000018e2         db  0x00 ; '.'
00000000000018e3         db  0x00 ; '.'
00000000000018e4         db  0x00 ; '.'
00000000000018e5         db  0x00 ; '.'
00000000000018e6         db  0x00 ; '.'
00000000000018e7         db  0x00 ; '.'
00000000000018e8         db  0xa0 ; '.'
00000000000018e9         db  0xef ; '.'
00000000000018ea         db  0x20 ; ' '
00000000000018eb         db  0x00 ; '.'
00000000000018ec         db  0x00 ; '.'
00000000000018ed         db  0x00 ; '.'
00000000000018ee         db  0x00 ; '.'
00000000000018ef         db  0x00 ; '.'
00000000000018f0         db  0x07 ; '.'
00000000000018f1         db  0x00 ; '.'
00000000000018f2         db  0x00 ; '.'
00000000000018f3         db  0x00 ; '.'
00000000000018f4         db  0x41 ; 'A'
00000000000018f5         db  0x00 ; '.'
00000000000018f6         db  0x00 ; '.'
00000000000018f7         db  0x00 ; '.'
00000000000018f8         db  0x00 ; '.'
00000000000018f9         db  0x00 ; '.'
00000000000018fa         db  0x00 ; '.'
00000000000018fb         db  0x00 ; '.'
00000000000018fc         db  0x00 ; '.'
00000000000018fd         db  0x00 ; '.'
00000000000018fe         db  0x00 ; '.'
00000000000018ff         db  0x00 ; '.'
0000000000001900         db  0xa8 ; '.'
0000000000001901         db  0xef ; '.'
0000000000001902         db  0x20 ; ' '
0000000000001903         db  0x00 ; '.'
0000000000001904         db  0x00 ; '.'
0000000000001905         db  0x00 ; '.'
0000000000001906         db  0x00 ; '.'
0000000000001907         db  0x00 ; '.'
0000000000001908         db  0x07 ; '.'
0000000000001909         db  0x00 ; '.'
000000000000190a         db  0x00 ; '.'
000000000000190b         db  0x00 ; '.'
000000000000190c         db  0x42 ; 'B'
000000000000190d         db  0x00 ; '.'
000000000000190e         db  0x00 ; '.'
000000000000190f         db  0x00 ; '.'
0000000000001910         db  0x00 ; '.'
0000000000001911         db  0x00 ; '.'
0000000000001912         db  0x00 ; '.'
0000000000001913         db  0x00 ; '.'
0000000000001914         db  0x00 ; '.'
0000000000001915         db  0x00 ; '.'
0000000000001916         db  0x00 ; '.'
0000000000001917         db  0x00 ; '.'
0000000000001918         db  0xb0 ; '.'
0000000000001919         db  0xef ; '.'
000000000000191a         db  0x20 ; ' '
000000000000191b         db  0x00 ; '.'
000000000000191c         db  0x00 ; '.'
000000000000191d         db  0x00 ; '.'
000000000000191e         db  0x00 ; '.'
000000000000191f         db  0x00 ; '.'
0000000000001920         db  0x07 ; '.'
0000000000001921         db  0x00 ; '.'
0000000000001922         db  0x00 ; '.'
0000000000001923         db  0x00 ; '.'
0000000000001924         db  0x44 ; 'D'
0000000000001925         db  0x00 ; '.'
0000000000001926         db  0x00 ; '.'
0000000000001927         db  0x00 ; '.'
0000000000001928         db  0x00 ; '.'
0000000000001929         db  0x00 ; '.'
000000000000192a         db  0x00 ; '.'
000000000000192b         db  0x00 ; '.'
000000000000192c         db  0x00 ; '.'
000000000000192d         db  0x00 ; '.'
000000000000192e         db  0x00 ; '.'
000000000000192f         db  0x00 ; '.'
0000000000001930         db  0xb8 ; '.'
0000000000001931         db  0xef ; '.'
0000000000001932         db  0x20 ; ' '
0000000000001933         db  0x00 ; '.'
0000000000001934         db  0x00 ; '.'
0000000000001935         db  0x00 ; '.'
0000000000001936         db  0x00 ; '.'
0000000000001937         db  0x00 ; '.'
0000000000001938         db  0x07 ; '.'
0000000000001939         db  0x00 ; '.'
000000000000193a         db  0x00 ; '.'
000000000000193b         db  0x00 ; '.'
000000000000193c         db  0x45 ; 'E'
000000000000193d         db  0x00 ; '.'
000000000000193e         db  0x00 ; '.'
000000000000193f         db  0x00 ; '.'
0000000000001940         db  0x00 ; '.'
0000000000001941         db  0x00 ; '.'
0000000000001942         db  0x00 ; '.'
0000000000001943         db  0x00 ; '.'
0000000000001944         db  0x00 ; '.'
0000000000001945         db  0x00 ; '.'
0000000000001946         db  0x00 ; '.'
0000000000001947         db  0x00 ; '.'
0000000000001948         db  0xc0 ; '.'
0000000000001949         db  0xef ; '.'
000000000000194a         db  0x20 ; ' '
000000000000194b         db  0x00 ; '.'
000000000000194c         db  0x00 ; '.'
000000000000194d         db  0x00 ; '.'
000000000000194e         db  0x00 ; '.'
000000000000194f         db  0x00 ; '.'
0000000000001950         db  0x07 ; '.'
0000000000001951         db  0x00 ; '.'
0000000000001952         db  0x00 ; '.'
0000000000001953         db  0x00 ; '.'
0000000000001954         db  0x47 ; 'G'
0000000000001955         db  0x00 ; '.'
0000000000001956         db  0x00 ; '.'
0000000000001957         db  0x00 ; '.'
0000000000001958         db  0x00 ; '.'
0000000000001959         db  0x00 ; '.'
000000000000195a         db  0x00 ; '.'
000000000000195b         db  0x00 ; '.'
000000000000195c         db  0x00 ; '.'
000000000000195d         db  0x00 ; '.'
000000000000195e         db  0x00 ; '.'
000000000000195f         db  0x00 ; '.'


        ; Section .init
        ; Range: [0x1960; 0x1977[ (23 bytes)
        ; File offset : [6496; 6519[ (23 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _init:
0000000000001960         sub        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+44
0000000000001964         mov        rax, qword [qword_20efe0]                   ; qword_20efe0
000000000000196b         test       rax, rax
000000000000196e         je         loc_1972

0000000000001970         call       rax

                     loc_1972:
0000000000001972         add        rsp, 0x8                                    ; CODE XREF=_init+14
0000000000001976         ret
                        ; endp
0000000000001977         db  0x00 ; '.'
0000000000001978         db  0x00 ; '.'
0000000000001979         db  0x00 ; '.'
000000000000197a         db  0x00 ; '.'
000000000000197b         db  0x00 ; '.'
000000000000197c         db  0x00 ; '.'
000000000000197d         db  0x00 ; '.'
000000000000197e         db  0x00 ; '.'
000000000000197f         db  0x00 ; '.'


        ; Section .plt
        ; Range: [0x1980; 0x1da0[ (1056 bytes)
        ; File offset : [6528; 7584[ (1056 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR


                     loc_1980:
0000000000001980         push       qword [qword_20edb0]                        ; Begin of unwind block (FDE at 0xc874), qword_20edb0, CODE XREF=sub_1996+5
0000000000001986         jmp        qword [qword_20edb0+8]                      ; 0x20edb8
                        ; endp
000000000000198c         nop        dword [rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_abort:        // abort
0000000000001990         jmp        qword [abort@GOT]                           ; abort, abort@GOT, CODE XREF=sub_3510+940, set_program_name+154, sub_4a00+2799, quotearg_n_options+417, set_custom_quoting+43, quotearg_n_style+132, quotearg_n_style_mem+128, quotearg_n_style_colon+132, quotearg_n_custom_mem+135, xalloc_die+48, filesystem_type+295
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1996:
0000000000001996         push       0x0
000000000000199b         jmp        loc_1980


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___errno_location:        // __errno_location
00000000000019a0         jmp        qword [__errno_location@GOT]                ; __errno_location, __errno_location@GOT, CODE XREF=main+1320, excise+128, cache_fstatat.constprop.3+68, cache_fstatat.constprop.3+102, prompt+152, prompt+832, prompt+1078, prompt+1158, sub_3130+106, sub_32f0+16, close_stdin+117
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19a6:
00000000000019a6         push       0x1
00000000000019ab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strncmp:        // strncmp
00000000000019b0         jmp        qword [strncmp@GOT]                         ; strncmp, strncmp@GOT, CODE XREF=usage+780, usage+973, argmatch+162
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19b6:
00000000000019b6         push       0x2
00000000000019bb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j__exit:        // _exit
00000000000019c0         jmp        qword [_exit@GOT]                           ; _exit, _exit@GOT, CODE XREF=close_stdin+174, close_stdout+136
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19c6:
00000000000019c6         push       0x3
00000000000019cb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fpending:        // __fpending
00000000000019d0         jmp        qword [__fpending@GOT]                      ; __fpending, __fpending@GOT, CODE XREF=close_stream+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19d6:
00000000000019d6         push       0x4
00000000000019db         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_unlinkat:        // unlinkat
00000000000019e0         jmp        qword [unlinkat@GOT]                        ; unlinkat, unlinkat@GOT, CODE XREF=excise+60
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19e6:
00000000000019e6         push       0x5
00000000000019eb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qsort:        // qsort
00000000000019f0         jmp        qword [qsort@GOT]                           ; qsort, qsort@GOT, CODE XREF=fts_sort+124
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_19f6:
00000000000019f6         push       0x6
00000000000019fb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_isatty:        // isatty
0000000000001a00         jmp        qword [isatty@GOT]                          ; isatty, isatty@GOT, CODE XREF=main+163
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a06:
0000000000001a06         push       0x7
0000000000001a0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_faccessat:        // faccessat
0000000000001a10         jmp        qword [faccessat@GOT]                       ; faccessat, faccessat@GOT, CODE XREF=prompt+1065
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a16:
0000000000001a16         push       0x8
0000000000001a1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fcntl:        // fcntl
0000000000001a20         jmp        qword [fcntl@GOT]                           ; fcntl, fcntl@GOT, CODE XREF=rpl_fcntl+128, rpl_fcntl+212, rpl_fcntl+320, rpl_fcntl+407, rpl_fcntl+423, rpl_fcntl+460, rpl_fcntl+483, rpl_fcntl+559, rpl_fcntl+606
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a26:
0000000000001a26         push       0x9
0000000000001a2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_textdomain:        // textdomain
0000000000001a30         jmp        qword [textdomain@GOT]                      ; textdomain, textdomain@GOT, CODE XREF=main+103
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a36:
0000000000001a36         push       0xa
0000000000001a3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fclose:        // fclose
0000000000001a40         jmp        qword [fclose@GOT]                          ; fclose, fclose@GOT, CODE XREF=rpl_fclose+54, rpl_fclose+107
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a46:
0000000000001a46         push       0xb
0000000000001a4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_bindtextdomain:        // bindtextdomain
0000000000001a50         jmp        qword [bindtextdomain@GOT]                  ; bindtextdomain, bindtextdomain@GOT, CODE XREF=main+91
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a56:
0000000000001a56         push       0xc
0000000000001a5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcgettext:        // dcgettext
0000000000001a60         jmp        qword [dcgettext@GOT]                       ; dcgettext, dcgettext@GOT, CODE XREF=main+1164, main+1312, main+1382, main+1436, main+1475, usage+56, usage+102, usage+146, usage+183, usage+220, usage+257
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a66:
0000000000001a66         push       0xd
0000000000001a6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_get_mb_cur_max:        // __ctype_get_mb_cur_max
0000000000001a70         jmp        qword [__ctype_get_mb_cur_max@GOT]          ; __ctype_get_mb_cur_max, __ctype_get_mb_cur_max@GOT, CODE XREF=quotearg_buffer_restyled+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a76:
0000000000001a76         push       0xe
0000000000001a7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strlen:        // strlen
0000000000001a80         jmp        qword [strlen@GOT]                          ; strlen, strlen@GOT, CODE XREF=argmatch+33, argmatch+174, base_len+4, mfile_name_concat+51, quotearg_buffer_restyled+343, sub_4a00+411, sub_4a00+1742, xstrdup+4, fts_build+539, rpl_fts_open+136, rpl_fts_open+452
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a86:
0000000000001a86         push       0xf
0000000000001a8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___lxstat:        // __lxstat
0000000000001a90         jmp        qword [__lxstat@GOT]                        ; __lxstat, __lxstat@GOT, CODE XREF=main+1101, sub_3510+190, get_root_dev_ino+45, fts_stat+348
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1a96:
0000000000001a96         push       0x10
0000000000001a9b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_openat:        // openat
0000000000001aa0         jmp        qword [openat@GOT]                          ; openat, openat@GOT, CODE XREF=prompt+116, sub_3280+92, openat_safer+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1aa6:
0000000000001aa6         push       0x11
0000000000001aab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___stack_chk_fail:        // __stack_chk_fail
0000000000001ab0         jmp        qword [__stack_chk_fail@GOT]                ; __stack_chk_fail, __stack_chk_fail@GOT, CODE XREF=main+1363, excise+584, prompt+1219, sub_3510+976, sub_4a00+2739, quotearg_n_style+137, quotearg_n_style_mem+133, quotearg_char_mem+147, quotearg_n_style_colon+137, quotearg_n_custom_mem+140, get_root_dev_ino+108
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ab6:
0000000000001ab6         push       0x12
0000000000001abb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_getopt_long:        // getopt_long
0000000000001ac0         jmp        qword [getopt_long@GOT]                     ; getopt_long, getopt_long@GOT, CODE XREF=main+214
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ac6:
0000000000001ac6         push       0x13
0000000000001acb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbrtowc:        // mbrtowc
0000000000001ad0         jmp        qword [mbrtowc@GOT]                         ; mbrtowc, mbrtowc@GOT, CODE XREF=rpl_mbrtowc+50
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ad6:
0000000000001ad6         push       0x14
0000000000001adb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstatat:        // __fxstatat
0000000000001ae0         jmp        qword [__fxstatat@GOT]                      ; __fxstatat, __fxstatat@GOT, CODE XREF=excise+415, cache_fstatat.constprop.3+51, fts_stat+158
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ae6:
0000000000001ae6         push       0x15
0000000000001aeb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___overflow:        // __overflow
0000000000001af0         jmp        qword [__overflow@GOT]                      ; __overflow, __overflow@GOT, CODE XREF=argmatch_valid+283
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1af6:
0000000000001af6         push       0x16
0000000000001afb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strrchr:        // strrchr
0000000000001b00         jmp        qword [strrchr@GOT]                         ; strrchr, strrchr@GOT, CODE XREF=set_program_name+14, rpl_fts_read+758
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b06:
0000000000001b06         push       0x17
0000000000001b0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_lseek:        // lseek
0000000000001b10         jmp        qword [lseek@GOT]                           ; lseek, lseek@GOT, CODE XREF=j_j_fseeko+49, rpl_fclose+89
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b16:
0000000000001b16         push       0x18
0000000000001b1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___assert_fail:        // __assert_fail
0000000000001b20         jmp        qword [__assert_fail@GOT]                   ; __assert_fail, __assert_fail@GOT, CODE XREF=main+976, sub_3510+971, sub_67ff+27, cycle_check+133
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b26:
0000000000001b26         push       0x19
0000000000001b2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memset:        // memset
0000000000001b30         jmp        qword [memset@GOT]                          ; memset, memset@GOT, CODE XREF=quotearg_n_options+153, xzalloc+18
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b36:
0000000000001b36         push       0x1a
0000000000001b3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_geteuid:        // geteuid
0000000000001b40         jmp        qword [geteuid@GOT]                         ; geteuid, geteuid@GOT, CODE XREF=can_write_any_file+28
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b46:
0000000000001b46         push       0x1b
0000000000001b4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_close:        // close
0000000000001b50         jmp        qword [close@GOT]                           ; close, close@GOT, CODE XREF=prompt+754, sub_3510+804, fd_ring_clear+50, cwd_advance_fd+63, cwd_advance_fd+82, fts_safe_changedir+226, fts_safe_changedir+437, fts_build+1383, rpl_fts_close+243, rpl_fts_close+272, rpl_fts_close+333
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b56:
0000000000001b56         push       0x1c
0000000000001b5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_closedir:        // closedir
0000000000001b60         jmp        qword [closedir@GOT]                        ; closedir, closedir@GOT, CODE XREF=prompt+224, prompt+790, sub_32f0+76, sub_32f0+116, fts_lfree+29, fts_build+1348, fts_build+1444, fts_build+1647, fts_build+1979, fts_build+2427
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b66:
0000000000001b66         push       0x1d
0000000000001b6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcmp:        // memcmp
0000000000001b70         jmp        qword [memcmp@GOT]                          ; memcmp, memcmp@GOT, CODE XREF=argmatch+111, argmatch_valid+150, argmatch_to_argument+56, quotearg_buffer_restyled+410
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b76:
0000000000001b76         push       0x1e
0000000000001b7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fputs_unlocked:        // fputs_unlocked
0000000000001b80         jmp        qword [fputs_unlocked@GOT]                  ; fputs_unlocked, fputs_unlocked@GOT, CODE XREF=usage+157, usage+194, usage+231, usage+268, usage+305, usage+342, usage+379, usage+416, usage+507, usage+1088, argmatch_valid+55
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b86:
0000000000001b86         push       0x1f
0000000000001b8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_calloc:        // calloc
0000000000001b90         jmp        qword [calloc@GOT]                          ; calloc, calloc@GOT, CODE XREF=xcalloc+26, rpl_fts_open+72, hash_initialize+177, hash_rehash+198
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1b96:
0000000000001b96         push       0x20
0000000000001b9b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___getdelim:        // __getdelim
0000000000001ba0         jmp        qword [__getdelim@GOT]                      ; __getdelim, __getdelim@GOT, CODE XREF=yesno+63
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ba6:
0000000000001ba6         push       0x21
0000000000001bab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_strcmp:        // strcmp
0000000000001bb0         jmp        qword [strcmp@GOT]                          ; strcmp, strcmp@GOT, CODE XREF=main+682
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bb6:
0000000000001bb6         push       0x22
0000000000001bbb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dirfd:        // dirfd
0000000000001bc0         jmp        qword [dirfd@GOT]                           ; dirfd, dirfd@GOT, CODE XREF=fts_build+61
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bc6:
0000000000001bc6         push       0x23
0000000000001bcb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_rpmatch:        // rpmatch
0000000000001bd0         jmp        qword [rpmatch@GOT]                         ; rpmatch, rpmatch@GOT, CODE XREF=yesno+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bd6:
0000000000001bd6         push       0x24
0000000000001bdb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memcpy:        // memcpy
0000000000001be0         jmp        qword [memcpy@GOT]                          ; memcpy, memcpy@GOT, CODE XREF=xmemdup+35, fts_alloc+56
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1be6:
0000000000001be6         push       0x25
0000000000001beb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fileno:        // fileno
0000000000001bf0         jmp        qword [fileno@GOT]                          ; fileno, fileno@GOT, CODE XREF=j_j_fseeko+36, rpl_fclose+7, rpl_fclose+75
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1bf6:
0000000000001bf6         push       0x26
0000000000001bfb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___xstat:        // __xstat
0000000000001c00         jmp        qword [__xstat@GOT]                         ; __xstat, __xstat@GOT, CODE XREF=fts_stat+40
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c06:
0000000000001c06         push       0x27
0000000000001c0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_readdir:        // readdir
0000000000001c10         jmp        qword [readdir@GOT]                         ; readdir, readdir@GOT, CODE XREF=prompt+179, sub_32f0+35, fts_build+498
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c16:
0000000000001c16         push       0x28
0000000000001c1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_malloc:        // malloc
0000000000001c20         jmp        qword [malloc@GOT]                          ; malloc, malloc@GOT, CODE XREF=mfile_name_concat+151, xmalloc+4, fts_alloc+30, filesystem_type+224, setup_dir.isra.4+69, enter_dir.isra.10+23, transfer_entries+293, hash_initialize+62, hash_insert_if_absent+517
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c26:
0000000000001c26         push       0x29
0000000000001c2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fflush:        // fflush
0000000000001c30         jmp        qword [fflush@GOT]                          ; fflush, fflush@GOT, CODE XREF=rpl_fflush+30, rpl_fflush+59
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c36:
0000000000001c36         push       0x2a
0000000000001c3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_nl_langinfo:        // nl_langinfo
0000000000001c40         jmp        qword [nl_langinfo@GOT]                     ; nl_langinfo, nl_langinfo@GOT, CODE XREF=locale_charset+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c46:
0000000000001c46         push       0x2b
0000000000001c4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fxstat:        // __fxstat
0000000000001c50         jmp        qword [__fxstat@GOT]                        ; __fxstat, __fxstat@GOT, CODE XREF=fts_safe_changedir+189
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c56:
0000000000001c56         push       0x2c
0000000000001c5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___freading:        // __freading
0000000000001c60         jmp        qword [__freading@GOT]                      ; __freading, __freading@GOT, CODE XREF=rpl_fflush+9, rpl_fclose+19
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c66:
0000000000001c66         push       0x2d
0000000000001c6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fchdir:        // fchdir
0000000000001c70         jmp        qword [fchdir@GOT]                          ; fchdir, fchdir@GOT, CODE XREF=restore_initial_cwd+29, fts_safe_changedir+380, rpl_fts_close+231, rpl_fts_read+1677, rpl_fts_children+236
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c76:
0000000000001c76         push       0x2e
0000000000001c7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_realloc:        // realloc
0000000000001c80         jmp        qword [realloc@GOT]                         ; realloc, realloc@GOT, CODE XREF=xrealloc+17, fts_sort+64, fts_palloc.isra.2+29
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c86:
0000000000001c86         push       0x2f
0000000000001c8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_setlocale:        // setlocale
0000000000001c90         jmp        qword [setlocale@GOT]                       ; setlocale, setlocale@GOT, CODE XREF=main+72, usage+755, usage+948, hard_locale+6
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1c96:
0000000000001c96         push       0x30
0000000000001c9b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___printf_chk:        // __printf_chk
0000000000001ca0         jmp        qword [__printf_chk@GOT]                    ; __printf_chk, __printf_chk@GOT, CODE XREF=usage+120, usage+463, usage+743, usage+836, usage+897, usage+936, usage+1039, excise+370, emit_bug_reporting_address+37, emit_bug_reporting_address+85
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ca6:
0000000000001ca6         push       0x31
0000000000001cab         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mempcpy:        // mempcpy
0000000000001cb0         jmp        qword [mempcpy@GOT]                         ; mempcpy, mempcpy@GOT, CODE XREF=mfile_name_concat+173, mfile_name_concat+206
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cb6:
0000000000001cb6         push       0x32
0000000000001cbb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_memmove:        // memmove
0000000000001cc0         jmp        qword [memmove@GOT]                         ; memmove, memmove@GOT, CODE XREF=fts_build+949, rpl_fts_read+745, rpl_fts_read+802, rpl_fts_read+998
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cc6:
0000000000001cc6         push       0x33
0000000000001ccb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_error:        // error
0000000000001cd0         jmp        qword [error@GOT]                           ; error, error@GOT, CODE XREF=main+1340, main+1396, main+1456, main+1492, excise+252, prompt+888, prompt+1175, sub_3130+52, sub_32f0+373, sub_3510+136, sub_3510+277
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cd6:
0000000000001cd6         push       0x34
0000000000001cdb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_open:        // open
0000000000001ce0         jmp        qword [open@GOT]                            ; open, open@GOT, CODE XREF=open_safer+35
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1ce6:
0000000000001ce6         push       0x35
0000000000001ceb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fseeko:        // fseeko
0000000000001cf0         jmp        qword [fseeko@GOT]                          ; fseeko, fseeko@GOT, CODE XREF=j_j_fseeko
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1cf6:
0000000000001cf6         push       0x36
0000000000001cfb         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_dcngettext:        // dcngettext
0000000000001d00         jmp        qword [dcngettext@GOT]                      ; dcngettext, dcngettext@GOT, CODE XREF=main+880, main+1242
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d06:
0000000000001d06         push       0x37
0000000000001d0b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fdopendir:        // fdopendir
0000000000001d10         jmp        qword [fdopendir@GOT]                       ; fdopendir, fdopendir@GOT, CODE XREF=prompt+131, sub_3280+107, opendirat+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d16:
0000000000001d16         push       0x38
0000000000001d1b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fstatfs:        // fstatfs
0000000000001d20         jmp        qword [fstatfs@GOT]                         ; fstatfs, fstatfs@GOT, CODE XREF=filesystem_type+200
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d26:
0000000000001d26         push       0x39
0000000000001d2b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___cxa_atexit:        // __cxa_atexit
0000000000001d30         jmp        qword [__cxa_atexit@GOT]                    ; __cxa_atexit, __cxa_atexit@GOT, CODE XREF=atexit+9
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d36:
0000000000001d36         push       0x3a
0000000000001d3b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_exit:        // exit
0000000000001d40         jmp        qword [exit@GOT]                            ; exit, exit@GOT, CODE XREF=main+584, usage+88
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d46:
0000000000001d46         push       0x3b
0000000000001d4b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_fwrite:        // fwrite
0000000000001d50         jmp        qword [fwrite@GOT]                          ; fwrite, fwrite@GOT, CODE XREF=set_program_name+149
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d56:
0000000000001d56         push       0x3c
0000000000001d5b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___fprintf_chk:        // __fprintf_chk
0000000000001d60         jmp        qword [__fprintf_chk@GOT]                   ; __fprintf_chk, __fprintf_chk@GOT, CODE XREF=main+908, main+1195, usage+81, prompt+524, prompt+735, argmatch_valid+122, argmatch_valid+198, version_etc_arn+55, version_etc_arn+105, version_etc_arn+285, version_etc_arn+332
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d66:
0000000000001d66         push       0x3d
0000000000001d6b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_mbsinit:        // mbsinit
0000000000001d70         jmp        qword [mbsinit@GOT]                         ; mbsinit, mbsinit@GOT, CODE XREF=sub_4a00+616
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d76:
0000000000001d76         push       0x3e
0000000000001d7b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_iswprint:        // iswprint
0000000000001d80         jmp        qword [iswprint@GOT]                        ; iswprint, iswprint@GOT, CODE XREF=sub_4a00+592
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d86:
0000000000001d86         push       0x3f
0000000000001d8b         jmp        0x1980
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j___ctype_b_loc:        // __ctype_b_loc
0000000000001d90         jmp        qword [__ctype_b_loc@GOT]                   ; __ctype_b_loc, __ctype_b_loc@GOT, CODE XREF=sub_47a0+51
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1d96:
0000000000001d96         push       0x40
0000000000001d9b         jmp        0x1980
                        ; endp


        ; Section .plt.got
        ; Range: [0x1da0; 0x1db0[ (16 bytes)
        ; File offset : [7584; 7600[ (16 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_1da0:
0000000000001da0         jmp        qword [qword_20efc8]                        ; qword, End of unwind block (FDE at 0xc874), Begin of unwind block (FDE at 0xc89c), qword_20efc8, CODE XREF=sub_3510+285, sub_3510+307, quotearg_n_options+277, quotearg_free+55, quotearg_free+82, quotearg_free+120, xrealloc+40, yesno+103, fts_sort+212, fts_lfree+40, filesystem_type+283
                        ; endp
0000000000001da6         align      8


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     j_qword_20eff0:        // qword_20eff0
0000000000001da8         jmp        qword [qword_20eff0]                        ; qword, qword_20eff0, CODE XREF=__do_global_dtors_aux+30
                        ; endp
0000000000001dae         align      16


        ; Section .text
        ; Range: [0x1db0; 0xa8fe[ (35662 bytes)
        ; File offset : [7600; 43262[ (35662 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_C8: int8_t, -200
        ;    var_CD: int8_t, -205
        ;    var_CE: int8_t, -206
        ;    var_CF: int8_t, -207
        ;    var_D0: int8_t, -208
        ;    var_D8: int64_t, -216
        ;    var_DE: int8_t, -222
        ;    var_DF: int8_t, -223
        ;    var_E0: int8_t, -224
        ;    var_E4: int32_t, -228
        ;    var_E8: int8_t, -232


                     main:
0000000000001db0         push       r14                                         ; End of unwind block (FDE at 0xc89c), Begin of unwind block (FDE at 0xc8e0), DATA XREF=_start+29
0000000000001db2         push       r13
0000000000001db4         lea        r13, qword [aNopreserveroot_a9f0]           ; "--no-preserve-root"
0000000000001dbb         push       r12
0000000000001dbd         push       rbp
0000000000001dbe         mov        ebp, edi
0000000000001dc0         push       rbx
0000000000001dc1         mov        rbx, rsi
0000000000001dc4         mov        r14d, 0x1
0000000000001dca         sub        rsp, 0xc0
0000000000001dd1         mov        rdi, qword [rsi]
0000000000001dd4         mov        rax, qword [fs:0x28]
0000000000001ddd         mov        qword [rsp+0xe8+var_30], rax
0000000000001de5         xor        eax, eax
0000000000001de7         call       set_program_name                            ; set_program_name
0000000000001dec         lea        rsi, qword [aWrittenBySSAnd+27]             ; argument "__locale" for method j_setlocale, 0xbea1
0000000000001df3         mov        edi, 0x6                                    ; argument "__category" for method j_setlocale
0000000000001df8         call       j_setlocale                                 ; setlocale
0000000000001dfd         lea        rsi, qword [aUsrlocalsharel]                ; argument "__dirname" for method j_bindtextdomain, "/usr/local/share/locale"
0000000000001e04         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_bindtextdomain, "coreutils"
0000000000001e0b         call       j_bindtextdomain                            ; bindtextdomain
0000000000001e10         lea        rdi, qword [aCoreutils]                     ; argument "__domainname" for method j_textdomain, "coreutils"
0000000000001e17         call       j_textdomain                                ; textdomain
0000000000001e1c         lea        rdi, qword [close_stdin]                    ; argument "__func" for method atexit, close_stdin
0000000000001e23         call       atexit                                      ; atexit
0000000000001e28         xor        edi, edi                                    ; argument "__fd" for method j_isatty
0000000000001e2a         mov        byte [rsp+0xe8+var_E8], 0x0
0000000000001e2e         mov        dword [rsp+0xe8+var_E4], 0x4
0000000000001e36         mov        byte [rsp+0xe8+var_E0], 0x0
0000000000001e3b         mov        byte [rsp+0xe8+var_DE], 0x0
0000000000001e40         mov        byte [rsp+0xe8+var_DF], 0x0
0000000000001e45         mov        qword [rsp+0xe8+var_D8], 0x0
0000000000001e4e         mov        byte [rsp+0xe8+var_D0], 0x0
0000000000001e53         call       j_isatty                                    ; isatty
0000000000001e58         test       eax, eax
0000000000001e5a         mov        byte [rsp+0xe8+var_CE], 0x0
0000000000001e5f         mov        byte [rsp+0xe8+var_CD], 0x0
0000000000001e64         setne      byte [rsp+0xe8+var_CF]
0000000000001e69         xor        r12d, r12d
0000000000001e6c         nop        dword [rax]

                     loc_1e70:
0000000000001e70         lea        rcx, qword [long_opts]                      ; argument "__longopts" for method j_getopt_long, long_opts, CODE XREF=main+285, main+336, main+439, main+463, main+490, main+597, main+646, main+706, main+725, main+741, main+777
0000000000001e77         lea        rdx, qword [aDfirvir]                       ; argument "__shortopts" for method j_getopt_long, "dfirvIR"
0000000000001e7e         xor        r8d, r8d                                    ; argument "__longind" for method j_getopt_long
0000000000001e81         mov        rsi, rbx                                    ; argument "___argv" for method j_getopt_long
0000000000001e84         mov        edi, ebp                                    ; argument "___argc" for method j_getopt_long
0000000000001e86         call       j_getopt_long                               ; getopt_long
0000000000001e8b         cmp        eax, 0xffffffff
0000000000001e8e         je         loc_20be

0000000000001e94         cmp        eax, 0x69
0000000000001e97         je         loc_1f70

0000000000001e9d         jle        loc_1ed0

0000000000001e9f         cmp        eax, 0x81
0000000000001ea4         je         loc_2080

0000000000001eaa         jle        loc_1f08

0000000000001eac         cmp        eax, 0x83
0000000000001eb1         je         loc_2040

0000000000001eb7         jl         loc_2010

0000000000001ebd         cmp        eax, 0x84
0000000000001ec2         jne        loc_209f

0000000000001ec8         mov        byte [rsp+0xe8+var_CF], 0x1
0000000000001ecd         jmp        loc_1e70
0000000000001ecf         align      16

                     loc_1ed0:
0000000000001ed0         cmp        eax, 0x49                                   ; CODE XREF=main+237
0000000000001ed3         je         loc_1f88

0000000000001ed9         jle        loc_1fa0

0000000000001edf         cmp        eax, 0x64
0000000000001ee2         je         loc_2090

0000000000001ee8         cmp        eax, 0x66
0000000000001eeb         jne        loc_20af

0000000000001ef1         mov        dword [rsp+0xe8+var_E4], 0x5
0000000000001ef9         mov        byte [rsp+0xe8+var_E8], 0x1
0000000000001efd         xor        r12d, r12d
0000000000001f00         jmp        loc_1e70
0000000000001f05         align      8

                     loc_1f08:
0000000000001f08         cmp        eax, 0x76                                   ; CODE XREF=main+250
0000000000001f0b         je         loc_2000

0000000000001f11         cmp        eax, 0x80
0000000000001f16         jne        loc_209a

0000000000001f1c         mov        rsi, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5
0000000000001f23         test       rsi, rsi
0000000000001f26         je         loc_1f70

0000000000001f28         mov        r9, qword [argmatch_die]                    ; argmatch_die
0000000000001f2f         lea        rdx, qword [interactive_args]               ; interactive_args
0000000000001f36         lea        rcx, qword [interactive_types]              ; interactive_types
0000000000001f3d         lea        rdi, qword [aInteractive]                   ; "--interactive"
0000000000001f44         mov        r8d, 0x4
0000000000001f4a         call       __xargmatch_internal                        ; __xargmatch_internal
0000000000001f4f         lea        rdx, qword [interactive_types]              ; interactive_types
0000000000001f56         mov        eax, dword [rdx+rax*4]
0000000000001f59         cmp        eax, 0x1
0000000000001f5c         je         loc_1f88

0000000000001f5e         jb         loc_21c3

0000000000001f64         cmp        eax, 0x2
0000000000001f67         jne        loc_1e70

0000000000001f6d         nop        dword [rax]

                     loc_1f70:
0000000000001f70         mov        dword [rsp+0xe8+var_E4], 0x3                ; CODE XREF=main+231, main+374
0000000000001f78         mov        byte [rsp+0xe8+var_E8], 0x0
0000000000001f7c         xor        r12d, r12d
0000000000001f7f         jmp        loc_1e70
0000000000001f84         align      8

                     loc_1f88:
0000000000001f88         mov        dword [rsp+0xe8+var_E4], 0x4                ; CODE XREF=main+291, main+428
0000000000001f90         mov        byte [rsp+0xe8+var_E8], 0x0
0000000000001f94         mov        r12d, 0x1
0000000000001f9a         jmp        loc_1e70
0000000000001f9f         align      32

                     loc_1fa0:
0000000000001fa0         cmp        eax, 0xffffff7d                             ; CODE XREF=main+297
0000000000001fa5         jne        loc_22f1

0000000000001fab         lea        rax, qword [aJimMeyering]                   ; "Jim Meyering"
0000000000001fb2         sub        rsp, 0x8
0000000000001fb6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000001fbd         push       0x0
0000000000001fbf         mov        rcx, qword [Version]                        ; Version
0000000000001fc6         lea        r9, qword [aDavidMackenzie]                 ; "David MacKenzie"
0000000000001fcd         push       rax
0000000000001fce         lea        rax, qword [aRichardMStallm]                ; "Richard M. Stallman"
0000000000001fd5         lea        r8, qword [aPaulRubin]                      ; "Paul Rubin"
0000000000001fdc         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xa99d
0000000000001fe3         lea        rsi, qword [_IO_stdin_used+4]               ; 0xa924
0000000000001fea         push       rax
0000000000001feb         xor        eax, eax
0000000000001fed         call       version_etc                                 ; version_etc
0000000000001ff2         add        rsp, 0x20
0000000000001ff6         xor        edi, edi                                    ; argument "__status" for method j_exit
0000000000001ff8         call       j_exit                                      ; exit
                        ; endp
0000000000001ffd         align      8192

                     loc_2000:
0000000000002000         mov        byte [rsp+0xe8+var_CE], 0x1                 ; CODE XREF=main+347, DATA XREF=file_type+49, fts_build+1680, fts_build+2268, fts_build+2460, rpl_fts_read+275, rpl_fts_read+1148, rpl_fts_read+1321, rpl_fts_read+1696, rpl_fts_read+1713
0000000000002005         jmp        loc_1e70
000000000000200a         align      16

                     loc_2010:
0000000000002010         movsxd     rax, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+263
0000000000002017         mov        ecx, 0x13
000000000000201c         mov        rdi, r13
000000000000201f         mov        rsi, qword [rbx+rax*8-8]
0000000000002024         rep  cmpsb byte [rsi], byte [rdi]
0000000000002026         seta       al
0000000000002029         sbb        al, 0x0
000000000000202b         test       al, al
000000000000202d         jne        loc_2365

0000000000002033         xor        r14d, r14d
0000000000002036         jmp        loc_1e70
000000000000203b         align      64

                     loc_2040:
0000000000002040         mov        r14, qword [optarg@@GLIBC_2.2.5]            ; optarg@@GLIBC_2.2.5, CODE XREF=main+257
0000000000002047         test       r14, r14
000000000000204a         je         loc_2185

0000000000002050         lea        rsi, qword [aNopreserveroot_a9f0+19]        ; argument "__s2" for method j_strcmp, 0xaa03
0000000000002057         mov        rdi, r14                                    ; argument "__s1" for method j_strcmp
000000000000205a         call       j_strcmp                                    ; strcmp
000000000000205f         test       eax, eax
0000000000002061         jne        loc_232e

0000000000002067         mov        byte [rsp+0xe8+var_D0], 0x1
000000000000206c         mov        r14d, 0x1
0000000000002072         jmp        loc_1e70
0000000000002077         align      128

                     loc_2080:
0000000000002080         mov        byte [rsp+0xe8+var_E0], 0x1                 ; CODE XREF=main+244
0000000000002085         jmp        loc_1e70
000000000000208a         align      16

                     loc_2090:
0000000000002090         mov        byte [rsp+0xe8+var_DE], 0x1                 ; CODE XREF=main+306
0000000000002095         jmp        loc_1e70

                     loc_209a:
000000000000209a         cmp        eax, 0x72                                   ; CODE XREF=main+358
000000000000209d         je         loc_20b4

                     loc_209f:
000000000000209f         mov        r12d, 0x1                                   ; CODE XREF=main+274, main+770, main+1350
00000000000020a5         lea        r14, qword [rsp+0xe8+var_C8]
00000000000020aa         jmp        loc_21d7

                     loc_20af:
00000000000020af         cmp        eax, 0x52                                   ; CODE XREF=main+315
00000000000020b2         jne        loc_209f

                     loc_20b4:
00000000000020b4         mov        byte [rsp+0xe8+var_DF], 0x1                 ; CODE XREF=main+749
00000000000020b9         jmp        loc_1e70

                     loc_20be:
00000000000020be         cmp        dword [optind@@GLIBC_2.2.5], ebp            ; optind@@GLIBC_2.2.5, CODE XREF=main+222
00000000000020c4         jge        loc_2190

00000000000020ca         cmp        byte [rsp+0xe8+var_DF], 0x0
00000000000020cf         je         loc_20da

00000000000020d1         test       r14b, r14b
00000000000020d4         jne        loc_2294

                     loc_20da:
00000000000020da         movsxd     rdx, dword [optind@@GLIBC_2.2.5]            ; optind@@GLIBC_2.2.5, CODE XREF=main+799, main+1272
00000000000020e1         test       r12b, r12b
00000000000020e4         lea        r13, qword [rbx+rdx*8]
00000000000020e8         je         loc_214a

00000000000020ea         sub        ebp, edx
00000000000020ec         cmp        byte [rsp+0xe8+var_DF], 0x0
00000000000020f1         movsxd     rbx, ebp
00000000000020f4         jne        loc_226a

00000000000020fa         cmp        rbx, 0x3
00000000000020fe         jbe        loc_214a

0000000000002100         lea        rdx, qword [aSRemoveLuArgum_aa8c]           ; argument "__msgid2" for method j_dcngettext, "%s: remove %lu arguments? "
0000000000002107         lea        rsi, qword [aSRemoveLuArgum_aaa7]           ; argument "__msgid1" for method j_dcngettext, "%s: remove %lu argument? "
000000000000210e         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
0000000000002114         mov        rcx, rbx                                    ; argument "__n" for method j_dcngettext
0000000000002117         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
0000000000002119         mov        rbp, qword [program_name]                   ; program_name
0000000000002120         call       j_dcngettext                                ; dcngettext

                     loc_2125:
0000000000002125         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=main+1247
000000000000212c         mov        rdx, rax
000000000000212f         mov        r8, rbx
0000000000002132         mov        rcx, rbp
0000000000002135         mov        esi, 0x1
000000000000213a         xor        eax, eax
000000000000213c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000002141         call       yesno                                       ; yesno
0000000000002146         test       al, al
0000000000002148         je         loc_219a

                     loc_214a:
000000000000214a         mov        rsi, rsp                                    ; CODE XREF=main+824, main+846
000000000000214d         mov        rdi, r13                                    ; argument "e" for method rm
0000000000002150         call       rm                                          ; rm
0000000000002155         lea        edx, dword [rax-2]
0000000000002158         cmp        eax, 0x4
000000000000215b         sete       al
000000000000215e         cmp        edx, 0x2
0000000000002161         movzx      eax, al
0000000000002164         jbe        loc_219c

0000000000002166         lea        rcx, qword [__PRETTY_FUNCTION__.6977]       ; argument "__function" for method j___assert_fail, __PRETTY_FUNCTION__.6977
000000000000216d         lea        rsi, qword [aCoreutils831sr]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/rm.c"
0000000000002174         lea        rdi, qword [aValidstatusSta]                ; argument "__assertion" for method j___assert_fail, "VALID_STATUS (status)"
000000000000217b         mov        edx, 0x173                                  ; argument "__line" for method j___assert_fail
0000000000002180         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_2185:
0000000000002185         mov        r14d, 0x1                                   ; CODE XREF=main+666
000000000000218b         jmp        loc_1e70

                     loc_2190:
0000000000002190         cmp        byte [rsp+0xe8+var_E8], 0x0                 ; CODE XREF=main+788
0000000000002194         je         loc_2308

                     loc_219a:
000000000000219a         xor        eax, eax                                    ; CODE XREF=main+920

                     loc_219c:
000000000000219c         mov        rdx, qword [rsp+0xe8+var_30]                ; CODE XREF=main+948
00000000000021a4         xor        rdx, qword [fs:0x28]
00000000000021ad         jne        loc_2303

00000000000021b3         add        rsp, 0xc0
00000000000021ba         pop        rbx
00000000000021bb         pop        rbp
00000000000021bc         pop        r12
00000000000021be         pop        r13
00000000000021c0         pop        r14
00000000000021c2         ret
                        ; endp

                     loc_21c3:
00000000000021c3         mov        dword [rsp+0xe8+var_E4], 0x5                ; CODE XREF=main+430
00000000000021cb         xor        r12d, r12d
00000000000021ce         jmp        loc_1e70

                     loc_21d3:
00000000000021d3         add        r12, 0x1                                    ; CODE XREF=main+1081, main+1088, main+1108

                     loc_21d7:
00000000000021d7         cmp        ebp, r12d                                   ; CODE XREF=main+762
00000000000021da         jle        loc_2260

00000000000021e0         mov        r13, qword [rbx+r12*8]
00000000000021e4         cmp        byte [r13], 0x2d
00000000000021e9         jne        loc_21d3

00000000000021eb         cmp        byte [r13+1], 0x0
00000000000021f0         je         loc_21d3

00000000000021f2         mov        rdx, r14                                    ; argument "__stat_buf" for method j___lxstat
00000000000021f5         mov        rsi, r13                                    ; argument "__filename" for method j___lxstat
00000000000021f8         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
00000000000021fd         call       j___lxstat                                  ; __lxstat
0000000000002202         test       eax, eax
0000000000002204         jne        loc_21d3

0000000000002206         mov        rsi, r13
0000000000002209         mov        edi, 0x4
000000000000220e         call       quotearg_style                              ; quotearg_style
0000000000002213         mov        rdx, r13
0000000000002216         mov        esi, 0x3
000000000000221b         mov        edi, 0x1
0000000000002220         mov        r12, rax
0000000000002223         call       quotearg_n_style                            ; quotearg_n_style
0000000000002228         lea        rsi, qword [aTrySSToRemoveT]                ; argument "msgid" for method j_dcgettext, "Try '%s ./%s' to remove the file %s.\\n"
000000000000222f         mov        rbx, qword [rbx]
0000000000002232         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002237         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002239         mov        rbp, rax
000000000000223c         call       j_dcgettext                                 ; dcgettext
0000000000002241         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000002248         mov        rdx, rax
000000000000224b         mov        r9, r12
000000000000224e         mov        r8, rbp
0000000000002251         mov        rcx, rbx
0000000000002254         mov        esi, 0x1
0000000000002259         xor        eax, eax
000000000000225b         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2260:
0000000000002260         mov        edi, 0x1                                    ; argument #1 for method usage, CODE XREF=main+1066, main+1401
0000000000002265         call       usage                                       ; usage

                     loc_226a:
000000000000226a         lea        rdx, qword [aSRemoveLuArgum]                ; argument "__msgid2" for method j_dcngettext, "%s: remove %lu arguments recursively? ", CODE XREF=main+836
0000000000002271         lea        rsi, qword [aSRemoveLuArgum_b410]           ; argument "__msgid1" for method j_dcngettext, "%s: remove %lu argument recursively? "
0000000000002278         mov        r8d, 0x5                                    ; argument "__category" for method j_dcngettext
000000000000227e         mov        rcx, rbx                                    ; argument "__n" for method j_dcngettext
0000000000002281         xor        edi, edi                                    ; argument "__domainname" for method j_dcngettext
0000000000002283         mov        rbp, qword [program_name]                   ; program_name
000000000000228a         call       j_dcngettext                                ; dcngettext
000000000000228f         jmp        loc_2125

                     loc_2294:
0000000000002294         lea        rdi, qword [dev_ino_buf.6971]               ; dev_ino_buf.6971, CODE XREF=main+804
000000000000229b         call       get_root_dev_ino                            ; get_root_dev_ino
00000000000022a0         test       rax, rax
00000000000022a3         mov        qword [rsp+0xe8+var_D8], rax
00000000000022a8         jne        loc_20da

00000000000022ae         lea        rsi, qword [aLibs+6]                        ; 0xb976
00000000000022b5         mov        edi, 0x4
00000000000022ba         call       quotearg_style                              ; quotearg_style
00000000000022bf         lea        rsi, qword [aFailedToGetAtt]                ; argument "msgid" for method j_dcgettext, "failed to get attributes of %s"
00000000000022c6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000022cb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000022cd         mov        rbp, rax
00000000000022d0         call       j_dcgettext                                 ; dcgettext
00000000000022d5         mov        rbx, rax
00000000000022d8         call       j___errno_location                          ; __errno_location
00000000000022dd         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
00000000000022df         mov        rcx, rbp
00000000000022e2         mov        rdx, rbx                                    ; argument "__format" for method j_error
00000000000022e5         mov        edi, 0x1                                    ; argument "__status" for method j_error
00000000000022ea         xor        eax, eax
00000000000022ec         call       j_error                                     ; error

                     loc_22f1:
00000000000022f1         cmp        eax, 0xffffff7e                             ; CODE XREF=main+501
00000000000022f6         jne        loc_209f

00000000000022fc         xor        edi, edi                                    ; argument #1 for method usage
00000000000022fe         call       usage                                       ; usage

                     loc_2303:
0000000000002303         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=main+1021
                        ; endp

                     loc_2308:
0000000000002308         lea        rsi, qword [aMissingOperand]                ; argument "msgid" for method j_dcgettext, "missing operand", CODE XREF=main+996
000000000000230f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002311         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002316         call       j_dcgettext                                 ; dcgettext
000000000000231b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000231d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002320         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002322         xor        eax, eax
0000000000002324         call       j_error                                     ; error
0000000000002329         jmp        loc_2260

                     loc_232e:
000000000000232e         mov        rsi, r14                                    ; CODE XREF=main+689
0000000000002331         mov        edi, 0x4
0000000000002336         call       quotearg_style                              ; quotearg_style
000000000000233b         lea        rsi, qword [aUnrecognizedPr]                ; argument "msgid" for method j_dcgettext, "unrecognized --preserve-root argument: %s"
0000000000002342         mov        rbx, rax
0000000000002345         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000234a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000234c         call       j_dcgettext                                 ; dcgettext
0000000000002351         mov        rcx, rbx
0000000000002354         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002357         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000002359         mov        edi, 0x1                                    ; argument "__status" for method j_error
000000000000235e         xor        eax, eax
0000000000002360         call       j_error                                     ; error

                     loc_2365:
0000000000002365         lea        rsi, qword [aYouMayNotAbbre]                ; argument "msgid" for method j_dcgettext, "you may not abbreviate the --no-preserve-root option", CODE XREF=main+637
000000000000236c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002371         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002373         call       j_dcgettext                                 ; dcgettext
0000000000002378         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000237a         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000237d         mov        edi, 0x1                                    ; argument "__status" for method j_error
0000000000002382         xor        eax, eax
0000000000002384         call       j_error                                     ; error
0000000000002389         nop        dword [rax]                                 ; End of unwind block (FDE at 0xc8e0)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _start:
0000000000002390         xor        ebp, ebp                                    ; Begin of unwind block (FDE at 0xc844)
0000000000002392         mov        r9, rdx
0000000000002395         pop        rsi
0000000000002396         mov        rdx, rsp
0000000000002399         and        rsp, 0xfffffffffffffff0
000000000000239d         push       rax
000000000000239e         push       rsp
000000000000239f         lea        r8, qword [__libc_csu_fini]                 ; __libc_csu_fini
00000000000023a6         lea        rcx, qword [__libc_csu_init]                ; __libc_csu_init
00000000000023ad         lea        rdi, qword [main]                           ; main
00000000000023b4         call       qword [qword_20efd0+8]                      ; 0x20efd8
00000000000023ba         hlt
                        ; endp
00000000000023bb         align      64                                          ; End of unwind block (FDE at 0xc844)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     deregister_tm_clones:
00000000000023c0         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=__do_global_dtors_aux+35
00000000000023c7         push       rbp
00000000000023c8         lea        rax, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
00000000000023cf         cmp        rax, rdi
00000000000023d2         mov        rbp, rsp
00000000000023d5         je         loc_23f0

00000000000023d7         mov        rax, qword [qword_20efd0]                   ; qword_20efd0
00000000000023de         test       rax, rax
00000000000023e1         je         loc_23f0

00000000000023e3         pop        rbp
00000000000023e4         jmp        rax
                        ; endp
00000000000023e6         align      16

                     loc_23f0:
00000000000023f0         pop        rbp                                         ; CODE XREF=deregister_tm_clones+21, deregister_tm_clones+33
00000000000023f1         ret
                        ; endp
00000000000023f2         align      1024

                     register_tm_clones:
0000000000002400         lea        rdi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5, CODE XREF=frame_dummy+5
0000000000002407         lea        rsi, qword [program_invocation_short_name@@GLIBC_2.2.5] ; program_invocation_short_name@@GLIBC_2.2.5
000000000000240e         push       rbp
000000000000240f         sub        rsi, rdi
0000000000002412         mov        rbp, rsp
0000000000002415         sar        rsi, 0x3
0000000000002419         mov        rax, rsi
000000000000241c         shr        rax, 0x3f
0000000000002420         add        rsi, rax
0000000000002423         sar        rsi, 0x1
0000000000002426         je         loc_2440

0000000000002428         mov        rax, qword [qword_20efe8]                   ; qword_20efe8
000000000000242f         test       rax, rax
0000000000002432         je         loc_2440

0000000000002434         pop        rbp
0000000000002435         jmp        rax
                        ; endp
0000000000002437         align      64

                     loc_2440:
0000000000002440         pop        rbp                                         ; CODE XREF=register_tm_clones+38, register_tm_clones+50
0000000000002441         ret
                        ; endp
0000000000002442         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __do_global_dtors_aux:
0000000000002450         cmp        byte [completed.7697], 0x0                  ; completed.7697, DATA XREF=__do_global_dtors_aux_fini_array_entry
0000000000002457         jne        loc_2488

0000000000002459         cmp        qword [qword_20eff0], 0x0                   ; qword_20eff0
0000000000002461         push       rbp
0000000000002462         mov        rbp, rsp
0000000000002465         je         loc_2473

0000000000002467         mov        rdi, qword [__dso_handle]                   ; __dso_handle
000000000000246e         call       j_qword_20eff0                              ; qword_20eff0

                     loc_2473:
0000000000002473         call       deregister_tm_clones                        ; deregister_tm_clones, CODE XREF=__do_global_dtors_aux+21
0000000000002478         mov        byte [completed.7697], 0x1                  ; completed.7697
000000000000247f         pop        rbp
0000000000002480         ret
                        ; endp
0000000000002481         align      8

                     loc_2488:
0000000000002488         ret                                                    ; CODE XREF=__do_global_dtors_aux+7
                        ; endp
000000000000248a         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     frame_dummy:
0000000000002490         push       rbp                                         ; DATA XREF=__frame_dummy_init_array_entry
0000000000002491         mov        rbp, rsp
0000000000002494         pop        rbp
0000000000002495         jmp        register_tm_clones                          ; register_tm_clones
000000000000249a         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     usage:
00000000000024a0         push       r13                                         ; Begin of unwind block (FDE at 0xc8b4), CODE XREF=main+1205, main+1358, __argmatch_die+5
00000000000024a2         push       r12
00000000000024a4         mov        edx, 0x5
00000000000024a9         push       rbp
00000000000024aa         push       rbx
00000000000024ab         mov        ebp, edi
00000000000024ad         sub        rsp, 0x88
00000000000024b4         mov        rbx, qword [program_name]                   ; program_name
00000000000024bb         mov        rax, qword [fs:0x28]
00000000000024c4         mov        qword [rsp+0xa8+var_30], rax
00000000000024c9         xor        eax, eax
00000000000024cb         test       edi, edi
00000000000024cd         je         loc_24fd

00000000000024cf         lea        rsi, qword [aTrySHelpForMor]                ; argument "msgid" for method j_dcgettext, "Try '%s --help' for more information.\\n"
00000000000024d6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000024d8         call       j_dcgettext                                 ; dcgettext
00000000000024dd         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
00000000000024e4         mov        rdx, rax
00000000000024e7         mov        rcx, rbx
00000000000024ea         mov        esi, 0x1
00000000000024ef         xor        eax, eax
00000000000024f1         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_24f6:
00000000000024f6         mov        edi, ebp                                    ; argument "__status" for method j_exit, CODE XREF=usage+902
00000000000024f8         call       j_exit                                      ; exit
                        ; endp

                     loc_24fd:
00000000000024fd         lea        rsi, qword [aUsageSOptionFi]                ; argument "msgid" for method j_dcgettext, "Usage: %s [OPTION]... [FILE]...\\n", CODE XREF=usage+45
0000000000002504         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002506         call       j_dcgettext                                 ; dcgettext
000000000000250b         mov        rdx, rbx
000000000000250e         mov        rsi, rax
0000000000002511         mov        edi, 0x1
0000000000002516         xor        eax, eax
0000000000002518         call       j___printf_chk                              ; __printf_chk
000000000000251d         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002524         lea        rsi, qword [aRemoveUnlinkTh]                ; argument "msgid" for method j_dcgettext, "Remove (unlink) the FILE(s).\\n\\n  -f, --force           ignore nonexistent files and arguments, never prompt\\n  -i                    prompt before every removal\\n"
000000000000252b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002530         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002532         call       j_dcgettext                                 ; dcgettext
0000000000002537         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000253a         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000253d         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002542         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002549         lea        rsi, qword [aIPromptOnceBef]                ; argument "msgid" for method j_dcgettext, "  -I                    prompt once before removing more than three files, or\\n                          when removing recursively; less intrusive than -i,\\n                          while still giving protection against most mistakes\\n      --interactive[=WH…"
0000000000002550         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002555         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002557         call       j_dcgettext                                 ; dcgettext
000000000000255c         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000255f         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002562         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002567         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000256e         lea        rsi, qword [aOnefilesystemW]                ; argument "msgid" for method j_dcgettext, "      --one-file-system  when removing a hierarchy recursively, skip any\\n                          directory that is on a file system different from\\n                          that of the corresponding command line argument\\n"
0000000000002575         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000257a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000257c         call       j_dcgettext                                 ; dcgettext
0000000000002581         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002584         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002587         call       j_fputs_unlocked                            ; fputs_unlocked
000000000000258c         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002593         lea        rsi, qword [aNopreserveroot]                ; argument "msgid" for method j_dcgettext, "      --no-preserve-root  do not treat '/' specially\\n      --preserve-root[=all]  do not remove '/' (default);\\n                              with 'all', reject any command line argument\\n                              on a separate device from its parent\\n"
000000000000259a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000259f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000025a1         call       j_dcgettext                                 ; dcgettext
00000000000025a6         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000025a9         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000025ac         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000025b1         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000025b8         lea        rsi, qword [aRRRecursiveRem]                ; argument "msgid" for method j_dcgettext, "  -r, -R, --recursive   remove directories and their contents recursively\\n  -d, --dir             remove empty directories\\n  -v, --verbose         explain what is being done\\n"
00000000000025bf         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000025c4         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000025c6         call       j_dcgettext                                 ; dcgettext
00000000000025cb         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000025ce         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000025d1         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000025d6         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000025dd         lea        rsi, qword [aHelpDisplayThi]                ; argument "msgid" for method j_dcgettext, "      --help     display this help and exit\\n"
00000000000025e4         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000025e9         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000025eb         call       j_dcgettext                                 ; dcgettext
00000000000025f0         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000025f3         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000025f6         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000025fb         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002602         lea        rsi, qword [aVersionOutputV]                ; argument "msgid" for method j_dcgettext, "      --version  output version information and exit\\n"
0000000000002609         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000260e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002610         call       j_dcgettext                                 ; dcgettext
0000000000002615         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002618         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
000000000000261b         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002620         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000002627         lea        rsi, qword [aNbyDefaultRmDo]                ; argument "msgid" for method j_dcgettext, "\\nBy default, rm does not remove directories.  Use the --recursive (-r or -R)\\noption to remove each listed directory, too, along with all of its contents.\\n"
000000000000262e         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002633         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002635         call       j_dcgettext                                 ; dcgettext
000000000000263a         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
000000000000263d         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002640         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000002645         mov        rbx, qword [program_name]                   ; program_name
000000000000264c         lea        rsi, qword [aNtoRemoveAFile]                ; argument "msgid" for method j_dcgettext, "\\nTo remove a file whose name starts with a '-', for example '-foo',\\nuse one of these commands:\\n  %s -- -foo\\n\\n  %s ./-foo\\n"
0000000000002653         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002655         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000265a         call       j_dcgettext                                 ; dcgettext
000000000000265f         mov        rcx, rbx
0000000000002662         mov        rdx, rbx
0000000000002665         mov        rsi, rax
0000000000002668         mov        edi, 0x1
000000000000266d         xor        eax, eax
000000000000266f         call       j___printf_chk                              ; __printf_chk
0000000000002674         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
000000000000267b         lea        rsi, qword [aNnoteThatIfYou]                ; argument "msgid" for method j_dcgettext, "\\nNote that if you use rm to remove a file, it might be possible to recover\\nsome of its contents, given sufficient expertise and/or time.  For greater\\nassurance that the contents are truly unrecoverable, consider using shred.\\n"
0000000000002682         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002687         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002689         call       j_dcgettext                                 ; dcgettext
000000000000268e         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000002691         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000002694         lea        rbx, qword [_IO_stdin_used+4]               ; 0xa924
000000000000269b         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000026a0         lea        rax, qword [_IO_stdin_used+7]               ; 0xa927
00000000000026a7         lea        rcx, qword [aSha256sum]                     ; "sha256sum"
00000000000026ae         mov        qword [rsp+0xa8+var_48], 0x0
00000000000026b7         mov        qword [rsp+0xa8+var_40], 0x0
00000000000026c0         mov        rdx, rsp
00000000000026c3         mov        qword [rsp+0xa8+var_A8], rax
00000000000026c7         lea        rax, qword [aTestInvocation]                ; "test invocation"
00000000000026ce         mov        qword [rsp+0xa8+var_78], rcx
00000000000026d3         lea        rcx, qword [aSha384sum]                     ; "sha384sum"
00000000000026da         mov        qword [rsp+0xa8+var_A0], rax
00000000000026df         lea        rax, qword [aCoreutils]                     ; "coreutils"
00000000000026e6         mov        qword [rsp+0xa8+var_68], rcx
00000000000026eb         lea        rcx, qword [aSha512sum]                     ; "sha512sum"
00000000000026f2         mov        qword [rsp+0xa8+var_98], rax
00000000000026f7         lea        rax, qword [aMulticallInvoc]                ; "Multi-call invocation"
00000000000026fe         mov        qword [rsp+0xa8+var_58], rcx
0000000000002703         mov        qword [rsp+0xa8+var_90], rax
0000000000002708         lea        rax, qword [aSha224sum]                     ; "sha224sum"
000000000000270f         mov        qword [rsp+0xa8+var_88], rax
0000000000002714         lea        rax, qword [aSha2Utilities]                 ; "sha2 utilities"
000000000000271b         mov        qword [rsp+0xa8+var_80], rax
0000000000002720         mov        qword [rsp+0xa8+var_70], rax
0000000000002725         mov        qword [rsp+0xa8+var_60], rax
000000000000272a         mov        qword [rsp+0xa8+var_50], rax
000000000000272f         nop

                     loc_2730:
0000000000002730         add        rdx, 0x10                                   ; CODE XREF=usage+685
0000000000002734         mov        rdi, qword [rdx]
0000000000002737         test       rdi, rdi
000000000000273a         je         loc_274f

000000000000273c         mov        ecx, 0x3
0000000000002741         mov        rsi, rbx
0000000000002744         rep  cmpsb byte [rsi], byte [rdi]
0000000000002746         seta       al
0000000000002749         sbb        al, 0x0
000000000000274b         test       al, al
000000000000274d         jne        loc_2730

                     loc_274f:
000000000000274f         mov        r12, qword [rdx+8]                          ; CODE XREF=usage+666
0000000000002753         xor        edi, edi
0000000000002755         mov        edx, 0x5
000000000000275a         lea        rsi, qword [aNsOnlineHelpSn]                ; "\\n%s online help: <%s>\\n"
0000000000002761         test       r12, r12
0000000000002764         je         loc_282b

000000000000276a         call       j_dcgettext                                 ; dcgettext
000000000000276f         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002776         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xa99d
000000000000277d         mov        rsi, rax
0000000000002780         mov        edi, 0x1
0000000000002785         xor        eax, eax
0000000000002787         call       j___printf_chk                              ; __printf_chk
000000000000278c         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000278e         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002793         call       j_setlocale                                 ; setlocale
0000000000002798         test       rax, rax
000000000000279b         je         loc_27b9

000000000000279d         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xa9ab
00000000000027a4         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
00000000000027a9         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
00000000000027ac         call       j_strncmp                                   ; strncmp
00000000000027b1         test       eax, eax
00000000000027b3         jne        loc_28c0

                     loc_27b9:
00000000000027b9         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+763, usage+1093
00000000000027c0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000027c2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000027c7         call       j_dcgettext                                 ; dcgettext
00000000000027cc         lea        rcx, qword [_IO_stdin_used+4]               ; 0xa924
00000000000027d3         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000027da         mov        rsi, rax
00000000000027dd         mov        edi, 0x1
00000000000027e2         xor        eax, eax
00000000000027e4         call       j___printf_chk                              ; __printf_chk
00000000000027e9         cmp        r12, rbx
00000000000027ec         lea        rcx, qword [aMulticallInvoc+10]             ; 0xa943
00000000000027f3         lea        rbx, qword [aWrittenBySSAnd+27]             ; 0xbea1
00000000000027fa         cmove      rbx, rcx

                     loc_27fe:
00000000000027fe         lea        rsi, qword [aOrAvailableLoc]                ; argument "msgid" for method j_dcgettext, "or available locally via: info '(coreutils) %s%s'\\n", CODE XREF=usage+1044
0000000000002805         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002807         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000280c         call       j_dcgettext                                 ; dcgettext
0000000000002811         mov        rcx, rbx
0000000000002814         mov        rsi, rax
0000000000002817         mov        rdx, r12
000000000000281a         mov        edi, 0x1
000000000000281f         xor        eax, eax
0000000000002821         call       j___printf_chk                              ; __printf_chk
0000000000002826         jmp        loc_24f6

                     loc_282b:
000000000000282b         call       j_dcgettext                                 ; dcgettext, CODE XREF=usage+708
0000000000002830         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
0000000000002837         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xa99d
000000000000283e         mov        rsi, rax
0000000000002841         mov        edi, 0x1
0000000000002846         xor        eax, eax
0000000000002848         call       j___printf_chk                              ; __printf_chk
000000000000284d         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
000000000000284f         mov        edi, 0x5                                    ; argument "__category" for method j_setlocale
0000000000002854         call       j_setlocale                                 ; setlocale
0000000000002859         test       rax, rax
000000000000285c         je         loc_2876

000000000000285e         lea        rsi, qword [aCoreutils+10]                  ; argument "__s2" for method j_strncmp, 0xa9ab
0000000000002865         mov        edx, 0x3                                    ; argument "__n" for method j_strncmp
000000000000286a         mov        rdi, rax                                    ; argument "__s1" for method j_strncmp
000000000000286d         call       j_strncmp                                   ; strncmp
0000000000002872         test       eax, eax
0000000000002874         jne        loc_28b9

                     loc_2876:
0000000000002876         lea        rsi, qword [aFullDocumentat]                ; argument "msgid" for method j_dcgettext, "Full documentation <%s%s>\\n", CODE XREF=usage+956
000000000000287d         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002882         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002884         lea        r12, qword [_IO_stdin_used+4]               ; 0xa924
000000000000288b         lea        rbx, qword [aMulticallInvoc+10]             ; 0xa943
0000000000002892         call       j_dcgettext                                 ; dcgettext
0000000000002897         lea        rcx, qword [_IO_stdin_used+4]               ; 0xa924
000000000000289e         lea        rdx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000028a5         mov        rsi, rax
00000000000028a8         mov        edi, 0x1
00000000000028ad         xor        eax, eax
00000000000028af         call       j___printf_chk                              ; __printf_chk
00000000000028b4         jmp        loc_27fe

                     loc_28b9:
00000000000028b9         lea        r12, qword [_IO_stdin_used+4]               ; 0xa924, CODE XREF=usage+980

                     loc_28c0:
00000000000028c0         mov        r13, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5, CODE XREF=usage+787
00000000000028c7         lea        rsi, qword [aReportAnyTrans]                ; argument "msgid" for method j_dcgettext, "Report any translation bugs to <https://translationproject.org/team/>\\n"
00000000000028ce         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000028d0         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000028d5         call       j_dcgettext                                 ; dcgettext
00000000000028da         mov        rsi, r13                                    ; argument "__stream" for method j_fputs_unlocked
00000000000028dd         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000028e0         call       j_fputs_unlocked                            ; fputs_unlocked
00000000000028e5         jmp        loc_27b9
00000000000028ea         align      16                                          ; End of unwind block (FDE at 0xc8b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48


                     excise:
00000000000028f0         push       r13                                         ; Begin of unwind block (FDE at 0xc93c), CODE XREF=sub_32f0+452, sub_34c0+25
00000000000028f2         push       r12
00000000000028f4         mov        r13, rdx
00000000000028f7         push       rbp
00000000000028f8         push       rbx
00000000000028f9         xor        edx, edx
00000000000028fb         mov        r12, rdi
00000000000028fe         mov        rbx, rsi
0000000000002901         mov        ebp, ecx
0000000000002903         sub        rsp, 0xa8
000000000000290a         mov        rsi, qword [rsi+0x30]                       ; argument "__name" for method j_unlinkat
000000000000290e         mov        edi, dword [rdi+0x2c]                       ; argument "__fd" for method j_unlinkat
0000000000002911         mov        rax, qword [fs:0x28]
000000000000291a         mov        qword [rsp+0xc8+var_30], rax
0000000000002922         xor        eax, eax
0000000000002924         test       cl, cl
0000000000002926         setne      dl
0000000000002929         shl        edx, 0x9                                    ; argument "__flag" for method j_unlinkat
000000000000292c         call       j_unlinkat                                  ; unlinkat
0000000000002931         test       eax, eax
0000000000002933         jne        loc_2970

0000000000002935         cmp        byte [r13+0x1a], 0x0
000000000000293a         mov        eax, 0x2
000000000000293f         jne        loc_2a28

                     loc_2945:
0000000000002945         mov        rcx, qword [rsp+0xc8+var_30]                ; CODE XREF=excise+303, excise+380, excise+526, excise+565
000000000000294d         xor        rcx, qword [fs:0x28]
0000000000002956         jne        loc_2b38

000000000000295c         add        rsp, 0xa8
0000000000002963         pop        rbx
0000000000002964         pop        rbp
0000000000002965         pop        r12
0000000000002967         pop        r13
0000000000002969         ret
                        ; endp
000000000000296a         align      16

                     loc_2970:
0000000000002970         call       j___errno_location                          ; __errno_location, CODE XREF=excise+67
0000000000002975         mov        edx, dword [rax]
0000000000002977         mov        rbp, rax
000000000000297a         cmp        edx, 0x1e
000000000000297d         je         loc_2a78

0000000000002983         cmp        byte [r13], 0x0
0000000000002988         je         loc_29b0

000000000000298a         cmp        edx, 0x14
000000000000298d         je         loc_2af9

0000000000002993         jle        loc_2af0

0000000000002999         cmp        edx, 0x16
000000000000299c         je         loc_2af9

00000000000029a2         cmp        edx, 0x54
00000000000029a5         je         loc_2af9

00000000000029ab         nop        dword [rax+rax]

                     loc_29b0:
00000000000029b0         cmp        word [rbx+0x70], 0x4                        ; CODE XREF=excise+152, excise+515
00000000000029b5         je         loc_2ab0

                     loc_29bb:
00000000000029bb         mov        rsi, qword [rbx+0x38]                       ; CODE XREF=excise+439, excise+451, excise+471, excise+488, excise+497, excise+576
00000000000029bf         mov        edi, 0x4
00000000000029c4         call       quotearg_style                              ; quotearg_style
00000000000029c9         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s"
00000000000029d0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000029d2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000029d7         mov        r12, rax
00000000000029da         call       j_dcgettext                                 ; dcgettext
00000000000029df         mov        esi, dword [rbp]                            ; argument "__errnum" for method j_error
00000000000029e2         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000029e5         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000029e7         xor        eax, eax
00000000000029e9         mov        rcx, r12
00000000000029ec         call       j_error                                     ; error
00000000000029f1         mov        rax, qword [rbx+8]
00000000000029f5         cmp        qword [rax+0x58], 0x0
00000000000029fa         jns        loc_2a13

00000000000029fc         jmp        loc_2a1a
00000000000029fe         align      512

                     loc_2a00:
0000000000002a00         mov        qword [rax+0x20], 0x1                       ; CODE XREF=excise+296
0000000000002a08         mov        rax, qword [rax+8]
0000000000002a0c         cmp        qword [rax+0x58], 0x0
0000000000002a11         js         loc_2a1a

                     loc_2a13:
0000000000002a13         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=excise+266
0000000000002a18         je         loc_2a00

                     loc_2a1a:
0000000000002a1a         mov        eax, 0x4                                    ; CODE XREF=excise+268, excise+289
0000000000002a1f         jmp        loc_2945
0000000000002a24         align      8

                     loc_2a28:
0000000000002a28         mov        rsi, qword [rbx+0x38]                       ; CODE XREF=excise+79
0000000000002a2c         mov        edi, 0x4
0000000000002a31         call       quotearg_style                              ; quotearg_style
0000000000002a36         test       bpl, bpl
0000000000002a39         mov        rbx, rax
0000000000002a3c         mov        edx, 0x5
0000000000002a41         je         loc_2b08

0000000000002a47         lea        rsi, qword [aRemovedDirecto]                ; argument "msgid" for method j_dcgettext, "removed directory %s\\n"
0000000000002a4e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002a50         call       j_dcgettext                                 ; dcgettext

                     loc_2a55:
0000000000002a55         mov        rsi, rax                                    ; CODE XREF=excise+550
0000000000002a58         mov        rdx, rbx
0000000000002a5b         mov        edi, 0x1
0000000000002a60         xor        eax, eax
0000000000002a62         call       j___printf_chk                              ; __printf_chk
0000000000002a67         mov        eax, 0x2
0000000000002a6c         jmp        loc_2945
0000000000002a71         align      8

                     loc_2a78:
0000000000002a78         mov        rdx, qword [rbx+0x30]                       ; argument "__filename" for method j___fxstatat, CODE XREF=excise+141
0000000000002a7c         mov        esi, dword [r12+0x2c]                       ; argument "__fildes" for method j___fxstatat
0000000000002a81         mov        rcx, rsp                                    ; argument "__stat_buf" for method j___fxstatat
0000000000002a84         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
0000000000002a8a         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000002a8f         call       j___fxstatat                                ; __fxstatat
0000000000002a94         test       eax, eax
0000000000002a96         je         loc_2aa0

0000000000002a98         mov        edx, dword [rbp]
0000000000002a9b         cmp        edx, 0x2
0000000000002a9e         je         loc_2b1b

                     loc_2aa0:
0000000000002aa0         mov        dword [rbp], 0x1e                           ; CODE XREF=excise+422
0000000000002aa7         jmp        loc_29bb
0000000000002aac         align      16

                     loc_2ab0:
0000000000002ab0         cmp        edx, 0x27                                   ; CODE XREF=excise+197
0000000000002ab3         ja         loc_29bb

                     loc_2ab9:
0000000000002ab9         movabs     rax, 0x8000320000                           ; CODE XREF=excise+582
0000000000002ac3         bt         rax, rdx
0000000000002ac7         jae        loc_29bb

0000000000002acd         mov        eax, dword [rbx+0x40]
0000000000002ad0         cmp        eax, 0x1
0000000000002ad3         je         loc_2ade

0000000000002ad5         cmp        eax, 0xd
0000000000002ad8         jne        loc_29bb

                     loc_2ade:
0000000000002ade         mov        dword [rbp], eax                            ; CODE XREF=excise+483
0000000000002ae1         jmp        loc_29bb
0000000000002ae6         align      16

                     loc_2af0:
0000000000002af0         cmp        edx, 0x2                                    ; CODE XREF=excise+163
0000000000002af3         jne        loc_29b0

                     loc_2af9:
0000000000002af9         mov        eax, 0x2                                    ; CODE XREF=excise+157, excise+172, excise+181
0000000000002afe         jmp        loc_2945
0000000000002b03         align      8

                     loc_2b08:
0000000000002b08         lea        rsi, qword [aRemovedSn]                     ; argument "msgid" for method j_dcgettext, "removed %s\\n", CODE XREF=excise+337
0000000000002b0f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002b11         call       j_dcgettext                                 ; dcgettext
0000000000002b16         jmp        loc_2a55

                     loc_2b1b:
0000000000002b1b         cmp        byte [r13], 0x0                             ; CODE XREF=excise+430
0000000000002b20         mov        eax, 0x2
0000000000002b25         jne        loc_2945

0000000000002b2b         cmp        word [rbx+0x70], 0x4
0000000000002b30         jne        loc_29bb

0000000000002b36         jmp        loc_2ab9

                     loc_2b38:
0000000000002b38         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=excise+102
                        ; endp
0000000000002b3d         align      64                                          ; End of unwind block (FDE at 0xc93c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cache_fstatat.constprop.3:
0000000000002b40         push       rbx                                         ; Begin of unwind block (FDE at 0xc978), CODE XREF=prompt+367, prompt+439, prompt+1015
0000000000002b41         mov        rax, qword [rdx+0x30]
0000000000002b45         mov        rbx, rdx
0000000000002b48         cmp        rax, 0xffffffffffffffff
0000000000002b4c         je         loc_2b60

                     loc_2b4e:
0000000000002b4e         test       rax, rax                                    ; CODE XREF=cache_fstatat.constprop.3+100
0000000000002b51         js         loc_2ba6

0000000000002b53         xor        eax, eax
0000000000002b55         pop        rbx
0000000000002b56         ret
                        ; endp
0000000000002b57         align      32

                     loc_2b60:
0000000000002b60         mov        rcx, rdx                                    ; argument "__stat_buf" for method j___fxstatat, CODE XREF=cache_fstatat.constprop.3+12
0000000000002b63         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
0000000000002b69         mov        rdx, rsi                                    ; argument "__filename" for method j___fxstatat
0000000000002b6c         mov        esi, edi                                    ; argument "__fildes" for method j___fxstatat
0000000000002b6e         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000002b73         call       j___fxstatat                                ; __fxstatat
0000000000002b78         test       eax, eax
0000000000002b7a         je         loc_2ba0

0000000000002b7c         mov        qword [rbx+0x30], 0xfffffffffffffffe
0000000000002b84         call       j___errno_location                          ; __errno_location
0000000000002b89         movsxd     rdx, dword [rax]
0000000000002b8c         mov        qword [rbx+8], rdx

                     loc_2b90:
0000000000002b90         mov        dword [rax], edx                            ; CODE XREF=cache_fstatat.constprop.3+111
0000000000002b92         mov        eax, 0xffffffff
0000000000002b97         pop        rbx
0000000000002b98         ret
                        ; endp
0000000000002b99         align      32

                     loc_2ba0:
0000000000002ba0         mov        rax, qword [rbx+0x30]                       ; CODE XREF=cache_fstatat.constprop.3+58
0000000000002ba4         jmp        loc_2b4e

                     loc_2ba6:
0000000000002ba6         call       j___errno_location                          ; __errno_location, CODE XREF=cache_fstatat.constprop.3+17
0000000000002bab         mov        rdx, qword [rbx+8]
0000000000002baf         jmp        loc_2b90
0000000000002bb1         align      64                                          ; End of unwind block (FDE at 0xc978)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_A8: int64_t, -168
        ;    var_C0: int32_t, -192
        ;    var_D8: int8_t, -216
        ;    var_E0: int64_t, -224
        ;    var_E4: int32_t, -228
        ;    var_E8: int32_t, -232
        ;    var_F0: int64_t, -240


                     prompt:
0000000000002bc0         push       r15                                         ; Begin of unwind block (FDE at 0xc99c), CODE XREF=sub_31f0+75, sub_32f0+225
0000000000002bc2         push       r14
0000000000002bc4         push       r13
0000000000002bc6         push       r12
0000000000002bc8         mov        r13, rcx
0000000000002bcb         push       rbp
0000000000002bcc         push       rbx
0000000000002bcd         mov        rbx, rsi
0000000000002bd0         sub        rsp, 0xc8
0000000000002bd7         mov        edi, dword [rdi+0x2c]
0000000000002bda         mov        r15, qword [rsi+0x30]
0000000000002bde         mov        rax, qword [fs:0x28]
0000000000002be7         mov        qword [rsp+0xf8+var_40], rax
0000000000002bef         xor        eax, eax
0000000000002bf1         mov        rax, qword [rsi+0x38]
0000000000002bf5         test       r9, r9
0000000000002bf8         mov        dword [rsp+0xf8+var_E4], r8d
0000000000002bfd         mov        dword [rsp+0xf8+var_E8], edi
0000000000002c01         mov        qword [rsp+0xf8+var_F0], rax
0000000000002c06         je         loc_2df0

0000000000002c0c         xor        ebp, ebp
0000000000002c0e         test       dl, dl
0000000000002c10         mov        dword [r9], 0x2
0000000000002c17         setne      bpl
0000000000002c1b         mov        edx, 0x30900                                ; argument "__oflag" for method j_openat
0000000000002c20         xor        eax, eax
0000000000002c22         mov        rsi, r15                                    ; argument "__file" for method j_openat
0000000000002c25         mov        r12, r9
0000000000002c28         mov        qword [rsp+0xf8+var_A8], 0xffffffffffffffff
0000000000002c31         shl        ebp, 0x2
0000000000002c34         call       j_openat                                    ; openat
0000000000002c39         test       eax, eax
0000000000002c3b         js         loc_2ca5

0000000000002c3d         mov        edi, eax                                    ; argument "__fd" for method j_fdopendir
0000000000002c3f         mov        dword [rsp+0xf8+var_E0], eax
0000000000002c43         call       j_fdopendir                                 ; fdopendir
0000000000002c48         test       rax, rax
0000000000002c4b         mov        r14, rax
0000000000002c4e         mov        edx, dword [rsp+0xf8+var_E0]
0000000000002c52         je         loc_2eb0

0000000000002c58         call       j___errno_location                          ; __errno_location
0000000000002c5d         mov        qword [rsp+0xf8+var_E0], rax
0000000000002c62         mov        dword [rax], 0x0
0000000000002c68         nop        dword [rax+rax]

                     loc_2c70:
0000000000002c70         mov        rdi, r14                                    ; argument "__dirp" for method j_readdir, CODE XREF=prompt+215, prompt+219
0000000000002c73         call       j_readdir                                   ; readdir
0000000000002c78         test       rax, rax
0000000000002c7b         je         loc_2ec8

0000000000002c81         cmp        byte [rax+0x13], 0x2e
0000000000002c85         jne        loc_2c9d

0000000000002c87         xor        edx, edx
0000000000002c89         cmp        byte [rax+0x14], 0x2e
0000000000002c8d         sete       dl
0000000000002c90         movzx      eax, byte [rax+rdx+0x14]
0000000000002c95         test       al, al
0000000000002c97         je         loc_2c70

0000000000002c99         cmp        al, 0x2f
0000000000002c9b         je         loc_2c70

                     loc_2c9d:
0000000000002c9d         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir, CODE XREF=prompt+197
0000000000002ca0         call       j_closedir                                  ; closedir

                     loc_2ca5:
0000000000002ca5         xor        r14d, r14d                                  ; CODE XREF=prompt+123, prompt+801
0000000000002ca8         mov        eax, 0x3

                     loc_2cad:
0000000000002cad         mov        dword [r12], eax                            ; CODE XREF=prompt+764, prompt+818

                     loc_2cb1:
0000000000002cb1         cmp        qword [rbx+0x20], 0x0                       ; CODE XREF=prompt+593
0000000000002cb6         jne        loc_2de0

0000000000002cbc         mov        eax, dword [r13+4]
0000000000002cc0         cmp        eax, 0x5
0000000000002cc3         je         loc_2cf2

0000000000002cc5         cmp        byte [r13], 0x0
0000000000002cca         jne        loc_2ce9

0000000000002ccc         cmp        eax, 0x3
0000000000002ccf         je         loc_2cd8

0000000000002cd1         cmp        byte [r13+0x19], 0x0
0000000000002cd6         je         loc_2cf2

                     loc_2cd8:
0000000000002cd8         call       can_write_any_file                          ; can_write_any_file, CODE XREF=prompt+271
0000000000002cdd         test       al, al
0000000000002cdf         je         loc_2fa8

                     loc_2ce5:
0000000000002ce5         mov        eax, dword [r13+4]                          ; CODE XREF=prompt+1042, prompt+1072

                     loc_2ce9:
0000000000002ce9         cmp        eax, 0x3                                    ; CODE XREF=prompt+266
0000000000002cec         je         loc_2e20

                     loc_2cf2:
0000000000002cf2         mov        eax, 0x2                                    ; CODE XREF=prompt+259, prompt+278, prompt+536, prompt+985

                     loc_2cf7:
0000000000002cf7         mov        rcx, qword [rsp+0xf8+var_40]                ; CODE XREF=prompt+549, prompt+898, prompt+1185
0000000000002cff         xor        rcx, qword [fs:0x28]
0000000000002d08         jne        loc_3083

0000000000002d0e         add        rsp, 0xc8
0000000000002d15         pop        rbx
0000000000002d16         pop        rbp
0000000000002d17         pop        r12
0000000000002d19         pop        r13
0000000000002d1b         pop        r14
0000000000002d1d         pop        r15
0000000000002d1f         ret
                        ; endp

                     loc_2d20:
0000000000002d20         lea        rbx, qword [rsp+0xf8+var_D8]                ; CODE XREF=prompt+613
0000000000002d25         mov        edi, dword [rsp+0xf8+var_E8]
0000000000002d29         mov        rsi, r15
0000000000002d2c         mov        rdx, rbx
0000000000002d2f         call       cache_fstatat.constprop.3                   ; cache_fstatat.constprop.3
0000000000002d34         test       eax, eax
0000000000002d36         jne        loc_2f00

0000000000002d3c         mov        eax, dword [rsp+0xf8+var_C0]
0000000000002d40         and        eax, 0xf000
0000000000002d45         cmp        eax, 0xa000
0000000000002d4a         je         loc_2f94

0000000000002d50         cmp        eax, 0x4000
0000000000002d55         je         loc_2e34

                     loc_2d5b:
0000000000002d5b         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+991
0000000000002d60         mov        edi, 0x4
0000000000002d65         call       quotearg_style                              ; quotearg_style
0000000000002d6a         mov        rbp, rax

                     loc_2d6d:
0000000000002d6d         mov        edi, dword [rsp+0xf8+var_E8]                ; CODE XREF=prompt+975
0000000000002d71         mov        rdx, rbx
0000000000002d74         mov        rsi, r15
0000000000002d77         call       cache_fstatat.constprop.3                   ; cache_fstatat.constprop.3
0000000000002d7c         test       eax, eax
0000000000002d7e         jne        loc_3030

0000000000002d84         mov        rdi, rbx
0000000000002d87         call       file_type                                   ; file_type
0000000000002d8c         test       r12d, r12d
0000000000002d8f         mov        r13, rax
0000000000002d92         mov        rbx, qword [program_name]                   ; program_name
0000000000002d99         mov        edx, 0x5
0000000000002d9e         je         loc_3018

0000000000002da4         lea        rsi, qword [aSRemoveWritepr]                ; argument "msgid" for method j_dcgettext, "%s: remove write-protected %s %s? "
0000000000002dab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002dad         call       j_dcgettext                                 ; dcgettext

                     loc_2db2:
0000000000002db2         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=prompt+1126
0000000000002db9         mov        rdx, rax
0000000000002dbc         mov        r9, rbp
0000000000002dbf         mov        r8, r13
0000000000002dc2         mov        rcx, rbx
0000000000002dc5         mov        esi, 0x1
0000000000002dca         xor        eax, eax
0000000000002dcc         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_2dd1:
0000000000002dd1         call       yesno                                       ; yesno, CODE XREF=prompt+740
0000000000002dd6         test       al, al
0000000000002dd8         jne        loc_2cf2

0000000000002dde         nop

                     loc_2de0:
0000000000002de0         mov        eax, 0x3                                    ; CODE XREF=prompt+246
0000000000002de5         jmp        loc_2cf7
0000000000002dea         align      16

                     loc_2df0:
0000000000002df0         cmp        dl, 0x1                                     ; CODE XREF=prompt+70
0000000000002df3         mov        r14d, edx
0000000000002df6         mov        eax, 0x0
0000000000002dfb         sbb        ebp, ebp
0000000000002dfd         mov        qword [rsp+0xf8+var_A8], 0xffffffffffffffff
0000000000002e06         not        ebp
0000000000002e08         and        ebp, 0x4
0000000000002e0b         test       dl, dl
0000000000002e0d         cmovne     r14d, eax
0000000000002e11         jmp        loc_2cb1
0000000000002e16         align      32

                     loc_2e20:
0000000000002e20         xor        r12d, r12d                                  ; CODE XREF=prompt+300

                     loc_2e23:
0000000000002e23         test       ebp, ebp                                    ; CODE XREF=prompt+1094
0000000000002e25         je         loc_2d20

0000000000002e2b         cmp        ebp, 0x4
0000000000002e2e         jne        loc_2f78

                     loc_2e34:
0000000000002e34         cmp        byte [r13+9], 0x0                           ; CODE XREF=prompt+405
0000000000002e39         je         loc_2f50

0000000000002e3f         mov        rsi, qword [rsp+0xf8+var_F0]
0000000000002e44         mov        edi, 0x4
0000000000002e49         call       quotearg_style                              ; quotearg_style
0000000000002e4e         cmp        dword [rsp+0xf8+var_E4], 0x2
0000000000002e53         mov        rbp, rax
0000000000002e56         jne        loc_2f8a

0000000000002e5c         test       r14b, r14b
0000000000002e5f         jne        loc_2f8a

0000000000002e65         test       r12d, r12d
0000000000002e68         mov        rbx, qword [program_name]                   ; program_name
0000000000002e6f         mov        edx, 0x5
0000000000002e74         je         loc_3070

0000000000002e7a         lea        rsi, qword [aSDescendIntoWr]                ; argument "msgid" for method j_dcgettext, "%s: descend into write-protected directory %s? "
0000000000002e81         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002e83         call       j_dcgettext                                 ; dcgettext

                     loc_2e88:
0000000000002e88         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=prompt+1214
0000000000002e8f         mov        rdx, rax
0000000000002e92         mov        r8, rbp
0000000000002e95         mov        rcx, rbx
0000000000002e98         mov        esi, 0x1
0000000000002e9d         xor        eax, eax
0000000000002e9f         call       j___fprintf_chk                             ; __fprintf_chk
0000000000002ea4         jmp        loc_2dd1
0000000000002ea9         align      16

                     loc_2eb0:
0000000000002eb0         mov        edi, edx                                    ; argument "__fd" for method j_close, CODE XREF=prompt+146
0000000000002eb2         call       j_close                                     ; close
0000000000002eb7         mov        eax, 0x3
0000000000002ebc         jmp        loc_2cad
0000000000002ec1         align      8

                     loc_2ec8:
0000000000002ec8         mov        rax, qword [rsp+0xf8+var_E0]                ; CODE XREF=prompt+187
0000000000002ecd         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir
0000000000002ed0         mov        edx, dword [rax]
0000000000002ed2         mov        dword [rsp+0xf8+var_E0], edx
0000000000002ed6         call       j_closedir                                  ; closedir
0000000000002edb         mov        edx, dword [rsp+0xf8+var_E0]
0000000000002edf         test       edx, edx
0000000000002ee1         jne        loc_2ca5

0000000000002ee7         mov        r14d, 0x1
0000000000002eed         mov        eax, 0x4
0000000000002ef2         jmp        loc_2cad
0000000000002ef7         align      256

                     loc_2f00:
0000000000002f00         call       j___errno_location                          ; __errno_location, CODE XREF=prompt+374, prompt+1022
0000000000002f05         mov        ebx, dword [rax]

                     loc_2f07:
0000000000002f07         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+1100
0000000000002f0c         mov        edi, 0x4
0000000000002f11         call       quotearg_style                              ; quotearg_style
0000000000002f16         mov        rbp, rax

                     loc_2f19:
0000000000002f19         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s", CODE XREF=prompt+947
0000000000002f20         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000002f25         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000002f27         call       j_dcgettext                                 ; dcgettext
0000000000002f2c         mov        rcx, rbp
0000000000002f2f         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000002f32         mov        esi, ebx                                    ; argument "__errnum" for method j_error
0000000000002f34         xor        eax, eax
0000000000002f36         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000002f38         call       j_error                                     ; error
0000000000002f3d         mov        eax, 0x4
0000000000002f42         jmp        loc_2cf7
0000000000002f47         align      16

                     loc_2f50:
0000000000002f50         cmp        byte [r13+0xa], 0x0                         ; CODE XREF=prompt+633
0000000000002f55         je         loc_2f5c

0000000000002f57         test       r14b, r14b
0000000000002f5a         jne        loc_2f78

                     loc_2f5c:
0000000000002f5c         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+917
0000000000002f61         mov        edi, 0x4
0000000000002f66         mov        ebx, 0x15
0000000000002f6b         call       quotearg_style                              ; quotearg_style
0000000000002f70         mov        rbp, rax
0000000000002f73         jmp        loc_2f19
0000000000002f75         align      8

                     loc_2f78:
0000000000002f78         mov        rsi, qword [rsp+0xf8+var_F0]                ; CODE XREF=prompt+622, prompt+922
0000000000002f7d         mov        edi, 0x4
0000000000002f82         call       quotearg_style                              ; quotearg_style
0000000000002f87         mov        rbp, rax

                     loc_2f8a:
0000000000002f8a         lea        rbx, qword [rsp+0xf8+var_D8]                ; CODE XREF=prompt+662, prompt+671
0000000000002f8f         jmp        loc_2d6d

                     loc_2f94:
0000000000002f94         cmp        dword [r13+4], 0x3                          ; CODE XREF=prompt+394
0000000000002f99         jne        loc_2cf2

0000000000002f9f         jmp        loc_2d5b
0000000000002fa4         align      8

                     loc_2fa8:
0000000000002fa8         lea        rbx, qword [rsp+0xf8+var_D8]                ; CODE XREF=prompt+287
0000000000002fad         mov        edi, dword [rsp+0xf8+var_E8]
0000000000002fb1         mov        rsi, r15
0000000000002fb4         mov        rdx, rbx
0000000000002fb7         call       cache_fstatat.constprop.3                   ; cache_fstatat.constprop.3
0000000000002fbc         test       eax, eax
0000000000002fbe         jne        loc_2f00

0000000000002fc4         mov        eax, dword [rsp+0xf8+var_C0]
0000000000002fc8         and        eax, 0xf000
0000000000002fcd         cmp        eax, 0xa000
0000000000002fd2         je         loc_2ce5

0000000000002fd8         mov        edi, dword [rsp+0xf8+var_E8]                ; argument "__fd" for method j_faccessat
0000000000002fdc         mov        ecx, 0x200                                  ; argument "__flag" for method j_faccessat
0000000000002fe1         mov        edx, 0x2                                    ; argument "__type" for method j_faccessat
0000000000002fe6         mov        rsi, r15                                    ; argument "__file" for method j_faccessat
0000000000002fe9         call       j_faccessat                                 ; faccessat
0000000000002fee         test       eax, eax
0000000000002ff0         je         loc_2ce5

0000000000002ff6         call       j___errno_location                          ; __errno_location
0000000000002ffb         mov        ebx, dword [rax]
0000000000002ffd         mov        r12d, 0x1
0000000000003003         cmp        ebx, 0xd
0000000000003006         je         loc_2e23

000000000000300c         jmp        loc_2f07
0000000000003011         align      8

                     loc_3018:
0000000000003018         lea        rsi, qword [aSRemoveSS]                     ; argument "msgid" for method j_dcgettext, "%s: remove %s %s? ", CODE XREF=prompt+478
000000000000301f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003021         call       j_dcgettext                                 ; dcgettext
0000000000003026         jmp        loc_2db2
000000000000302b         align      16

                     loc_3030:
0000000000003030         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s", CODE XREF=prompt+446
0000000000003037         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000303c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000303e         call       j_dcgettext                                 ; dcgettext
0000000000003043         mov        rbx, rax
0000000000003046         call       j___errno_location                          ; __errno_location
000000000000304b         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error
000000000000304d         mov        rcx, rbp
0000000000003050         xor        eax, eax
0000000000003052         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000003055         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003057         call       j_error                                     ; error
000000000000305c         mov        eax, 0x4
0000000000003061         jmp        loc_2cf7
0000000000003066         align      16

                     loc_3070:
0000000000003070         lea        rsi, qword [aSDescendIntoDi]                ; argument "msgid" for method j_dcgettext, "%s: descend into directory %s? ", CODE XREF=prompt+692
0000000000003077         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003079         call       j_dcgettext                                 ; dcgettext
000000000000307e         jmp        loc_2e88

                     loc_3083:
0000000000003083         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=prompt+328
                        ; endp
0000000000003088         align      16                                          ; End of unwind block (FDE at 0xc99c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D8: int8_t, -216
        ;    var_DC: int8_t, -220
        ;    var_F0: int64_t, -240
        ;    var_F8: int64_t, -248


                     rm:
0000000000003090         push       r15                                         ; Begin of unwind block (FDE at 0xc9ec), CODE XREF=main+928
0000000000003092         push       r14
0000000000003094         push       r13
0000000000003096         push       r12
0000000000003098         push       rbp
0000000000003099         push       rbx
000000000000309a         sub        rsp, 0xd8
00000000000030a1         mov        rax, qword [fs:0x28]
00000000000030aa         mov        qword [rsp+0x108+var_40], rax
00000000000030b2         xor        eax, eax
00000000000030b4         cmp        qword [rdi], 0x0
00000000000030b8         je         loc_3828

00000000000030be         cmp        byte [rsi+8], 0x1
00000000000030c2         mov        r13, rsi
00000000000030c5         lea        r12, qword [aAndPreserveroo+40]             ; 0xb7f8
00000000000030cc         mov        ebp, 0x2
00000000000030d1         sbb        esi, esi
00000000000030d3         xor        edx, edx
00000000000030d5         and        esi, 0xffffffc0
00000000000030d8         add        esi, 0x258
00000000000030de         call       xfts_open                                   ; xfts_open
00000000000030e3         mov        rbx, rax
00000000000030e6         lea        rax, qword [rsp+0x108+var_DC]
00000000000030eb         mov        qword [rsp+0x108+var_F8], rax
00000000000030f0         lea        rax, qword [rsp+0x108+var_D8]
00000000000030f5         mov        qword [rsp+0x108+var_F0], rax
00000000000030fa         nop        word [rax+rax]
0000000000003100         mov        rdi, rbx
0000000000003103         call       rpl_fts_read                                ; rpl_fts_read
0000000000003108         test       rax, rax
000000000000310b         mov        r15, rax
000000000000310e         je         loc_319a

0000000000003114         movzx      edx, word [rax+0x70]
0000000000003118         cmp        dx, 0xd
000000000000311c         ja         loc_3877

0000000000003122         movzx      eax, dx
0000000000003125         movsxd     rax, dword [r12+rax*4]
0000000000003129         add        rax, r12
000000000000312c         jmp        rax
                        ; endp
000000000000312e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3130:
0000000000003130         mov        rdx, qword [r15+0x38]
0000000000003134         mov        esi, 0x3
0000000000003139         xor        edi, edi
000000000000313b         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003140         lea        rsi, qword [aTraversalFaile]                ; argument "msgid" for method j_dcgettext, "traversal failed: %s"
0000000000003147         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000314c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000314e         mov        rbp, rax
0000000000003151         call       j_dcgettext                                 ; dcgettext
0000000000003156         mov        esi, dword [r15+0x40]                       ; argument "__errnum" for method j_error
000000000000315a         mov        rcx, rbp
000000000000315d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003160         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003162         xor        eax, eax
0000000000003164         call       j_error                                     ; error
0000000000003169         mov        rsi, r15
000000000000316c         mov        edx, 0x4
0000000000003171         mov        rdi, rbx
0000000000003174         call       rpl_fts_set                                 ; rpl_fts_set
0000000000003179         mov        rdi, rbx
000000000000317c         mov        ebp, 0x4
0000000000003181         call       rpl_fts_read                                ; rpl_fts_read
0000000000003186         mov        rdi, rbx
0000000000003189         call       rpl_fts_read                                ; rpl_fts_read
000000000000318e         test       rax, rax
0000000000003191         mov        r15, rax
0000000000003194         jne        rm+132
                        ; endp

                     loc_319a:
000000000000319a         call       j___errno_location                          ; __errno_location, CODE XREF=rm+126
000000000000319f         mov        r12, rax
00000000000031a2         mov        eax, dword [rax]
00000000000031a4         test       eax, eax
00000000000031a6         jne        loc_36b8

00000000000031ac         mov        rdi, rbx
00000000000031af         call       rpl_fts_close                               ; rpl_fts_close
00000000000031b4         test       eax, eax
00000000000031b6         jne        loc_36f0

                     loc_31bc:
00000000000031bc         mov        rbx, qword [rsp+0x108+var_40]               ; CODE XREF=sub_3510+474, sub_3510+520, sub_3510+797
00000000000031c4         xor        rbx, qword [fs:0x28]
00000000000031cd         mov        eax, ebp
00000000000031cf         jne        loc_38e0

00000000000031d5         add        rsp, 0xd8
00000000000031dc         pop        rbx
00000000000031dd         pop        rbp
00000000000031de         pop        r12
00000000000031e0         pop        r13
00000000000031e2         pop        r14
00000000000031e4         pop        r15
00000000000031e6         ret
                        ; endp
00000000000031e7         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_31f0:
00000000000031f0         cmp        dx, 0x6
00000000000031f4         jne        loc_3218

00000000000031f6         cmp        byte [r13+8], 0x0
00000000000031fb         je         loc_3218

00000000000031fd         cmp        qword [r15+0x58], 0x0
0000000000003202         jle        loc_3218

0000000000003204         mov        rax, qword [rbx+0x18]
0000000000003208         cmp        qword [r15+0x78], rax
000000000000320c         jne        loc_37b8

0000000000003212         nop        word [rax+rax]

                     loc_3218:
0000000000003218         and        edx, 0xfffffffd                             ; CODE XREF=sub_31f0+4, sub_31f0+11, sub_31f0+18
000000000000321b         xor        r14d, r14d
000000000000321e         mov        rcx, r13
0000000000003221         cmp        dx, 0x4
0000000000003225         mov        r8d, 0x3
000000000000322b         mov        rsi, r15
000000000000322e         sete       r14b
0000000000003232         mov        rdi, rbx
0000000000003235         xor        r9d, r9d
0000000000003238         mov        edx, r14d
000000000000323b         call       prompt                                      ; prompt
0000000000003240         cmp        eax, 0x2
0000000000003243         mov        ecx, eax
0000000000003245         je         loc_34a8

                     loc_324b:
000000000000324b         lea        eax, dword [rcx-2]                          ; CODE XREF=sub_32f0+459
000000000000324e         cmp        eax, 0x2
0000000000003251         ja         loc_38c1

0000000000003257         cmp        ecx, 0x4
000000000000325a         je         loc_38e5

0000000000003260         cmp        ecx, 0x3
0000000000003263         jne        rm+112

0000000000003269         cmp        ebp, 0x2
000000000000326c         mov        eax, 0x3
0000000000003271         cmove      ebp, eax
0000000000003274         jmp        rm+112
                        ; endp
0000000000003279         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_3280:
0000000000003280         mov        rdx, qword [r15+0x38]
0000000000003284         mov        esi, 0x3
0000000000003289         xor        edi, edi
000000000000328b         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003290         lea        rsi, qword [aWarningCircula]                ; argument "msgid" for method j_dcgettext, "WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n"
0000000000003297         mov        rbp, rax
000000000000329a         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000329f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000032a1         call       j_dcgettext                                 ; dcgettext
00000000000032a6         mov        rcx, rbp
00000000000032a9         mov        rdx, rax
00000000000032ac         xor        esi, esi
00000000000032ae         jmp        sub_3130+48
                        ; endp
00000000000032b3         nop        dword [rax+rax]
00000000000032b8         cmp        byte [r13+9], 0x0
00000000000032bd         jne        sub_32f0+136
00000000000032c3         cmp        byte [r13+0xa], 0x0
00000000000032c8         je         sub_32f0+320
00000000000032ce         mov        rsi, qword [r15+0x30]
00000000000032d2         mov        edi, dword [rbx+0x2c]
00000000000032d5         xor        eax, eax
00000000000032d7         mov        edx, 0x30900
00000000000032dc         call       j_openat                                    ; openat
00000000000032e1         test       eax, eax
00000000000032e3         js         sub_32f0+81
00000000000032e5         mov        edi, eax
00000000000032e7         mov        dword [rsp+8], eax
00000000000032eb         call       j_fdopendir                                 ; fdopendir


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_32f0:
00000000000032f0         test       rax, rax
00000000000032f3         mov        r14, rax
00000000000032f6         mov        edx, dword [rsp+8]
00000000000032fa         je         loc_3832

0000000000003300         call       j___errno_location                          ; __errno_location
0000000000003305         mov        qword [rsp+8], rax
000000000000330a         mov        dword [rax], 0x0

                     loc_3310:
0000000000003310         mov        rdi, r14                                    ; argument "__dirp" for method j_readdir, CODE XREF=sub_32f0+67, sub_32f0+71
0000000000003313         call       j_readdir                                   ; readdir
0000000000003318         test       rax, rax
000000000000331b         je         loc_3356

000000000000331d         cmp        byte [rax+0x13], 0x2e
0000000000003321         jne        loc_3339

0000000000003323         xor        edx, edx
0000000000003325         cmp        byte [rax+0x14], 0x2e
0000000000003329         sete       dl
000000000000332c         movzx      eax, byte [rax+rdx+0x14]
0000000000003331         test       al, al
0000000000003333         je         loc_3310

0000000000003335         cmp        al, 0x2f
0000000000003337         je         loc_3310

                     loc_3339:
0000000000003339         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir, CODE XREF=sub_32f0+49
000000000000333c         call       j_closedir                                  ; closedir

                     loc_3341:
0000000000003341         cmp        byte [r13+0xa], 0x0                         ; CODE XREF=sub_3280+99, sub_32f0+127, sub_3510+809
0000000000003346         je         loc_3430

000000000000334c         mov        ebp, 0x27
0000000000003351         jmp        loc_3435

                     loc_3356:
0000000000003356         mov        rax, qword [rsp+8]                          ; CODE XREF=sub_32f0+43
000000000000335b         mov        rdi, r14                                    ; argument "__dirp" for method j_closedir
000000000000335e         mov        edx, dword [rax]
0000000000003360         mov        dword [rsp+8], edx
0000000000003364         call       j_closedir                                  ; closedir
0000000000003369         mov        edx, dword [rsp+8]
000000000000336d         test       edx, edx
000000000000336f         jne        loc_3341

0000000000003371         nop        dword [rax]
0000000000003378         cmp        qword [r15+0x58], 0x0                       ; CODE XREF=sub_3280+61
000000000000337d         jne        sub_32f0+200

000000000000337f         mov        r14, qword [r15+0x30]
0000000000003383         mov        rdi, r14                                    ; argument #1 for method last_component
0000000000003386         call       last_component                              ; last_component
000000000000338b         cmp        byte [rax], 0x2e
000000000000338e         je         sub_3510                                    ; sub_3510
                        ; endp

                     loc_3394:
0000000000003394         mov        rax, qword [r13+0x10]                       ; CODE XREF=sub_3510+20
0000000000003398         test       rax, rax
000000000000339b         je         loc_33ad

000000000000339d         mov        rcx, qword [rax]
00000000000033a0         cmp        qword [r15+0x80], rcx
00000000000033a7         je         loc_3720

                     loc_33ad:
00000000000033ad         cmp        byte [r13+0x18], 0x0                        ; CODE XREF=sub_32f0+171, sub_3510+536
00000000000033b2         jne        loc_35a8

                     loc_33b8:
00000000000033b8         mov        r9, qword [rsp+arg_8]                       ; CODE XREF=sub_3510+321
00000000000033bd         mov        rcx, r13
00000000000033c0         mov        r8d, 0x2
00000000000033c6         mov        edx, 0x1
00000000000033cb         mov        rsi, r15
00000000000033ce         mov        rdi, rbx
00000000000033d1         call       prompt                                      ; prompt
00000000000033d6         cmp        eax, 0x2
00000000000033d9         mov        ecx, eax
00000000000033db         je         sub_34c0                                    ; sub_34c0
                        ; endp

                     loc_33e1:
00000000000033e1         mov        rax, qword [r15+8]                          ; CODE XREF=sub_34c0+71
00000000000033e5         cmp        qword [rax+0x58], 0x0
00000000000033ea         jns        loc_3403

00000000000033ec         jmp        loc_340a
00000000000033ee         align      16

                     loc_33f0:
00000000000033f0         mov        qword [rax+0x20], 0x1                       ; CODE XREF=sub_32f0+280
00000000000033f8         mov        rax, qword [rax+8]
00000000000033fc         cmp        qword [rax+0x58], 0x0
0000000000003401         js         loc_340a

                     loc_3403:
0000000000003403         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=sub_32f0+250
0000000000003408         je         loc_33f0

                     loc_340a:
000000000000340a         mov        edx, 0x4                                    ; CODE XREF=sub_32f0+252, sub_32f0+273
000000000000340f         mov        rsi, r15
0000000000003412         mov        rdi, rbx
0000000000003415         mov        dword [rsp+arg_0], ecx
0000000000003419         call       rpl_fts_set                                 ; rpl_fts_set
000000000000341e         mov        rdi, rbx
0000000000003421         call       rpl_fts_read                                ; rpl_fts_read
0000000000003426         mov        ecx, dword [rsp+arg_0]
000000000000342a         jmp        sub_31f0+91
                        ; endp
000000000000342f         nop

                     loc_3430:
0000000000003430         mov        ebp, 0x15                                   ; CODE XREF=sub_3280+72, sub_32f0+86

                     loc_3435:
0000000000003435         mov        rsi, qword [r15+0x38]                       ; argument #2 for method quotearg_style, CODE XREF=sub_32f0+97
0000000000003439         mov        edi, 0x4                                    ; argument #1 for method quotearg_style
000000000000343e         call       quotearg_style                              ; quotearg_style
0000000000003443         lea        rsi, qword [aCannotRemoveS]                 ; argument "msgid" for method j_dcgettext, "cannot remove %s"
000000000000344a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000344c         mov        r14, rax
000000000000344f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003454         call       j_dcgettext                                 ; dcgettext
0000000000003459         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000345b         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000345e         mov        rcx, r14
0000000000003461         xor        eax, eax
0000000000003463         mov        esi, ebp                                    ; argument "__errnum" for method j_error
0000000000003465         call       j_error                                     ; error
000000000000346a         mov        rax, qword [r15+8]
000000000000346e         cmp        qword [rax+0x58], 0x0
0000000000003473         jns        loc_3497

0000000000003475         jmp        sub_3130+57
                        ; endp
000000000000347a         nop        word [rax+rax]

                     loc_3480:
0000000000003480         mov        qword [rax+0x20], 0x1                       ; CODE XREF=sub_32f0+428
0000000000003488         mov        rax, qword [rax+8]
000000000000348c         cmp        qword [rax+0x58], 0x0
0000000000003491         js         sub_3130+57

                     loc_3497:
0000000000003497         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=sub_32f0+387
000000000000349c         je         loc_3480

000000000000349e         jmp        sub_3130+57
                        ; endp
00000000000034a3         nop        dword [rax+rax]

                     loc_34a8:
00000000000034a8         mov        ecx, r14d                                   ; CODE XREF=sub_31f0+85
00000000000034ab         mov        rdx, r13
00000000000034ae         mov        rsi, r15
00000000000034b1         mov        rdi, rbx
00000000000034b4         call       excise                                      ; excise
00000000000034b9         mov        ecx, eax
00000000000034bb         jmp        loc_324b


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_24: int32_t, 44
        ;    arg_0: int, 8


                     sub_34c0:
00000000000034c0         cmp        dword [rsp+arg_24], 0x4
00000000000034c5         jne        rm+112

00000000000034cb         mov        ecx, 0x1
00000000000034d0         mov        rdx, r13
00000000000034d3         mov        rsi, r15
00000000000034d6         mov        rdi, rbx
00000000000034d9         call       excise                                      ; excise
00000000000034de         mov        edx, 0x4
00000000000034e3         mov        rsi, r15
00000000000034e6         mov        rdi, rbx
00000000000034e9         mov        dword [rsp+arg_0], eax
00000000000034ed         call       rpl_fts_set                                 ; rpl_fts_set
00000000000034f2         mov        rdi, rbx
00000000000034f5         call       rpl_fts_read                                ; rpl_fts_read
00000000000034fa         mov        ecx, dword [rsp+arg_0]
00000000000034fe         cmp        ecx, 0x2
0000000000003501         je         rm+112

0000000000003507         jmp        loc_33e1
000000000000350c         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8


                     sub_3510:
0000000000003510         xor        edx, edx
0000000000003512         cmp        byte [rax+1], 0x2e
0000000000003516         sete       dl
0000000000003519         movzx      eax, byte [rax+rdx+1]
000000000000351e         test       al, al
0000000000003520         je         loc_352a

0000000000003522         cmp        al, 0x2f
0000000000003524         jne        loc_3394

                     loc_352a:
000000000000352a         mov        rdx, qword [r15+0x38]                       ; CODE XREF=sub_3510+16
000000000000352e         mov        esi, 0x4
0000000000003533         mov        edi, 0x2
0000000000003538         call       quotearg_n_style                            ; quotearg_n_style
000000000000353d         lea        rdx, qword [aFtsreadFailed+16]              ; 0xb4be
0000000000003544         mov        esi, 0x4
0000000000003549         mov        edi, 0x1
000000000000354e         mov        rbp, rax
0000000000003551         call       quotearg_n_style                            ; quotearg_n_style
0000000000003556         lea        rdx, qword [aFtsreadFailed+17]              ; 0xb4bf
000000000000355d         xor        edi, edi
000000000000355f         mov        esi, 0x4
0000000000003564         mov        r14, rax
0000000000003567         call       quotearg_n_style                            ; quotearg_n_style
000000000000356c         lea        rsi, qword [aRefusingToRemo]                ; argument "msgid" for method j_dcgettext, "refusing to remove %s or %s directory: skipping %s"
0000000000003573         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003575         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000357a         mov        qword [rsp+arg_0], rax
000000000000357f         call       j_dcgettext                                 ; dcgettext
0000000000003584         mov        rcx, qword [rsp+arg_0]
0000000000003589         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000358c         mov        r9, rbp
000000000000358f         mov        r8, r14
0000000000003592         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003594         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003596         xor        eax, eax
0000000000003598         call       j_error                                     ; error
000000000000359d         jmp        sub_3130+57
                        ; endp
00000000000035a2         align      8

                     loc_35a8:
00000000000035a8         lea        rsi, qword [aFtsreadFailed+16]              ; 0xb4be, CODE XREF=sub_32f0+194
00000000000035af         xor        edx, edx
00000000000035b1         mov        rdi, r14
00000000000035b4         call       file_name_concat                            ; file_name_concat
00000000000035b9         test       rax, rax
00000000000035bc         mov        r14, rax
00000000000035bf         je         loc_35d7

00000000000035c1         mov        rdx, qword [rsp+arg_10]                     ; argument "__stat_buf" for method j___lxstat
00000000000035c6         mov        rsi, rax                                    ; argument "__filename" for method j___lxstat
00000000000035c9         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
00000000000035ce         call       j___lxstat                                  ; __lxstat
00000000000035d3         test       eax, eax
00000000000035d5         je         loc_3640

                     loc_35d7:
00000000000035d7         mov        rdx, qword [r15+0x30]                       ; CODE XREF=sub_3510+175
00000000000035db         mov        esi, 0x4
00000000000035e0         mov        edi, 0x1
00000000000035e5         call       quotearg_n_style                            ; quotearg_n_style
00000000000035ea         mov        rdx, r14
00000000000035ed         xor        edi, edi
00000000000035ef         mov        esi, 0x4
00000000000035f4         mov        rbp, rax
00000000000035f7         call       quotearg_n_style                            ; quotearg_n_style
00000000000035fc         lea        rsi, qword [aFailedToStatSS]                ; argument "msgid" for method j_dcgettext, "failed to stat %s: skipping %s"
0000000000003603         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003605         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000360a         mov        qword [rsp+arg_0], rax
000000000000360f         call       j_dcgettext                                 ; dcgettext
0000000000003614         mov        rcx, qword [rsp+arg_0]
0000000000003619         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000361c         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000361e         mov        r8, rbp
0000000000003621         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003623         xor        eax, eax
0000000000003625         call       j_error                                     ; error
000000000000362a         mov        rdi, r14
000000000000362d         call       sub_1da0                                    ; sub_1da0
0000000000003632         jmp        sub_3130+57
                        ; endp
0000000000003637         align      64

                     loc_3640:
0000000000003640         mov        rdi, r14                                    ; CODE XREF=sub_3510+197
0000000000003643         call       sub_1da0                                    ; sub_1da0
0000000000003648         mov        rax, qword [rsp+arg_28]
000000000000364d         cmp        qword [rbx+0x18], rax
0000000000003651         je         loc_33b8

0000000000003657         mov        rsi, qword [r15+0x38]
000000000000365b         mov        edi, 0x4
0000000000003660         call       quotearg_style                              ; quotearg_style
0000000000003665         lea        rsi, qword [aSkippingSSince]                ; argument "msgid" for method j_dcgettext, "skipping %s, since it's on a different device"
000000000000366c         mov        rbp, rax
000000000000366f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003674         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003676         call       j_dcgettext                                 ; dcgettext
000000000000367b         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000367d         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003680         mov        rcx, rbp
0000000000003683         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003685         xor        eax, eax
0000000000003687         call       j_error                                     ; error
000000000000368c         lea        rsi, qword [aAndPreserveroo]                ; "and --preserve-root=all is in effect"
0000000000003693         mov        edx, 0x5

                     loc_3698:
0000000000003698         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=sub_3510+671
000000000000369a         call       j_dcgettext                                 ; dcgettext
000000000000369f         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000036a1         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000036a4         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000036a6         xor        eax, eax
00000000000036a8         call       j_error                                     ; error
00000000000036ad         jmp        sub_3130+57
                        ; endp
00000000000036b2         align      8

                     loc_36b8:
00000000000036b8         lea        rsi, qword [aFtsreadFailed]                 ; argument "msgid" for method j_dcgettext, "fts_read failed", CODE XREF=sub_3130+118
00000000000036bf         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000036c1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000036c6         mov        ebp, 0x4
00000000000036cb         call       j_dcgettext                                 ; dcgettext
00000000000036d0         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
00000000000036d4         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000036d7         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000036d9         xor        eax, eax
00000000000036db         call       j_error                                     ; error
00000000000036e0         mov        rdi, rbx
00000000000036e3         call       rpl_fts_close                               ; rpl_fts_close
00000000000036e8         test       eax, eax
00000000000036ea         je         loc_31bc

                     loc_36f0:
00000000000036f0         lea        rsi, qword [aFtscloseFailed]                ; argument "msgid" for method j_dcgettext, "fts_close failed", CODE XREF=sub_3130+134
00000000000036f7         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000036fc         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000036fe         mov        ebp, 0x4
0000000000003703         call       j_dcgettext                                 ; dcgettext
0000000000003708         mov        esi, dword [r12]                            ; argument "__errnum" for method j_error
000000000000370c         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000370f         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003711         xor        eax, eax
0000000000003713         call       j_error                                     ; error
0000000000003718         jmp        loc_31bc
000000000000371d         align      32

                     loc_3720:
0000000000003720         mov        rax, qword [rax+8]                          ; CODE XREF=sub_32f0+183
0000000000003724         cmp        qword [r15+0x78], rax
0000000000003728         jne        loc_33ad

000000000000372e         mov        rdx, qword [r15+0x38]
0000000000003732         lea        rdi, qword [aLibs+6]                        ; 0xb976
0000000000003739         mov        ecx, 0x2
000000000000373e         mov        rsi, rdx
0000000000003741         rep  cmpsb byte [rsi], byte [rdi]
0000000000003743         seta       al
0000000000003746         sbb        al, 0x0
0000000000003748         test       al, al
000000000000374a         je         loc_383e

0000000000003750         lea        rdx, qword [aLibs+6]                        ; 0xb976
0000000000003757         mov        esi, 0x4
000000000000375c         mov        edi, 0x1
0000000000003761         call       quotearg_n_style                            ; quotearg_n_style
0000000000003766         mov        rdx, qword [r15+0x38]
000000000000376a         mov        esi, 0x4
000000000000376f         xor        edi, edi
0000000000003771         mov        rbp, rax
0000000000003774         call       quotearg_n_style                            ; quotearg_n_style
0000000000003779         lea        rsi, qword [aItIsDangerousT]                ; argument "msgid" for method j_dcgettext, "it is dangerous to operate recursively on %s (same as %s)"
0000000000003780         mov        r14, rax
0000000000003783         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003788         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000378a         call       j_dcgettext                                 ; dcgettext
000000000000378f         mov        r8, rbp
0000000000003792         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003795         mov        rcx, r14
0000000000003798         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000379a         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000379c         xor        eax, eax
000000000000379e         call       j_error                                     ; error

                     loc_37a3:
00000000000037a3         mov        edx, 0x5                                    ; CODE XREF=sub_3510+866
00000000000037a8         lea        rsi, qword [aUseNopreserver]                ; "use --no-preserve-root to override this failsafe"
00000000000037af         jmp        loc_3698
00000000000037b4         align      8

                     loc_37b8:
00000000000037b8         mov        rax, qword [r15+8]                          ; CODE XREF=sub_31f0+28
00000000000037bc         cmp        qword [rax+0x58], 0x0
00000000000037c1         jns        loc_37db

00000000000037c3         jmp        loc_37e2
00000000000037c5         align      8

                     loc_37c8:
00000000000037c8         mov        qword [rax+0x20], 0x1                       ; CODE XREF=sub_3510+720
00000000000037d0         mov        rax, qword [rax+8]
00000000000037d4         cmp        qword [rax+0x58], 0x0
00000000000037d9         js         loc_37e2

                     loc_37db:
00000000000037db         cmp        qword [rax+0x20], 0x0                       ; CODE XREF=sub_3510+689
00000000000037e0         je         loc_37c8

                     loc_37e2:
00000000000037e2         mov        rsi, qword [r15+0x38]                       ; CODE XREF=sub_3510+691, sub_3510+713
00000000000037e6         mov        edi, 0x4
00000000000037eb         call       quotearg_style                              ; quotearg_style
00000000000037f0         lea        rsi, qword [aSkippingSSince]                ; argument "msgid" for method j_dcgettext, "skipping %s, since it's on a different device"
00000000000037f7         mov        rbp, rax
00000000000037fa         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000037ff         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003801         call       j_dcgettext                                 ; dcgettext
0000000000003806         mov        rcx, rbp
0000000000003809         mov        rdx, rax                                    ; argument "__format" for method j_error
000000000000380c         xor        esi, esi                                    ; argument "__errnum" for method j_error
000000000000380e         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003810         xor        eax, eax
0000000000003812         mov        ebp, 0x4
0000000000003817         call       j_error                                     ; error
000000000000381c         jmp        rm+112
                        ; endp
0000000000003821         align      8

                     loc_3828:
0000000000003828         mov        ebp, 0x2                                    ; CODE XREF=rm+40
000000000000382d         jmp        loc_31bc

                     loc_3832:
0000000000003832         mov        edi, edx                                    ; argument "__fd" for method j_close, CODE XREF=sub_32f0+10
0000000000003834         call       j_close                                     ; close
0000000000003839         jmp        loc_3341

                     loc_383e:
000000000000383e         mov        rsi, rdx                                    ; CODE XREF=sub_3510+570
0000000000003841         mov        edi, 0x4
0000000000003846         call       quotearg_style                              ; quotearg_style
000000000000384b         lea        rsi, qword [aItIsDangerousT_b5c0]           ; argument "msgid" for method j_dcgettext, "it is dangerous to operate recursively on %s"
0000000000003852         mov        rbp, rax
0000000000003855         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003857         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000385c         call       j_dcgettext                                 ; dcgettext
0000000000003861         mov        rcx, rbp
0000000000003864         mov        rdx, rax                                    ; argument "__format" for method j_error
0000000000003867         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003869         xor        edi, edi                                    ; argument "__status" for method j_error
000000000000386b         xor        eax, eax
000000000000386d         call       j_error                                     ; error
0000000000003872         jmp        loc_37a3

                     loc_3877:
0000000000003877         mov        rdx, qword [r15+0x38]                       ; CODE XREF=rm+140
000000000000387b         mov        esi, 0x3
0000000000003880         xor        edi, edi
0000000000003882         call       quotearg_n_style_colon                      ; quotearg_n_style_colon
0000000000003887         movzx      ebx, word [r15+0x70]
000000000000388c         lea        rsi, qword [aUnexpectedFail]                ; argument "msgid" for method j_dcgettext, "unexpected failure: fts_info=%d: %s\\nplease report to %s"
0000000000003893         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003898         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000389a         mov        rbp, rax
000000000000389d         call       j_dcgettext                                 ; dcgettext
00000000000038a2         lea        r9, qword [aBugcoreutilsgn]                 ; "bug-coreutils@gnu.org"
00000000000038a9         mov        rdx, rax                                    ; argument "__format" for method j_error
00000000000038ac         mov        r8, rbp
00000000000038af         mov        ecx, ebx
00000000000038b1         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000038b3         xor        edi, edi                                    ; argument "__status" for method j_error
00000000000038b5         xor        eax, eax
00000000000038b7         call       j_error                                     ; error
00000000000038bc         call       j_abort                                     ; abort
                        ; endp

                     loc_38c1:
00000000000038c1         lea        rcx, qword [__PRETTY_FUNCTION__.7067]       ; argument "__function" for method j___assert_fail, __PRETTY_FUNCTION__.7067, CODE XREF=sub_31f0+97
00000000000038c8         lea        rsi, qword [aCoreutils831sr_b7b0]           ; argument "__file" for method j___assert_fail, "../coreutils-8.31/src/remove.c"
00000000000038cf         lea        rdi, qword [aValidstatusS]                  ; argument "__assertion" for method j___assert_fail, "VALID_STATUS (s)"
00000000000038d6         mov        edx, 0x261                                  ; argument "__line" for method j___assert_fail
00000000000038db         call       j___assert_fail                             ; __assert_fail
                        ; endp

                     loc_38e0:
00000000000038e0         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_3130+159
                        ; endp

                     loc_38e5:
00000000000038e5         mov        ebp, 0x4                                    ; CODE XREF=sub_31f0+106
00000000000038ea         jmp        rm+112
                        ; endp
00000000000038ef         align      16                                          ; End of unwind block (FDE at 0xc9ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __argmatch_die:
00000000000038f0         mov        edi, 0x1                                    ; Begin of unwind block (FDE at 0xca3c), argument #1 for method usage, DATA XREF=argmatch_die
00000000000038f5         jmp        usage                                       ; usage
                        ; endp
00000000000038fa         align      256                                         ; End of unwind block (FDE at 0xca3c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     argmatch:
0000000000003900         push       r15                                         ; Begin of unwind block (FDE at 0xca50), CODE XREF=__xargmatch_internal+44
0000000000003902         push       r14
0000000000003904         mov        r15, rsi
0000000000003907         push       r13
0000000000003909         push       r12
000000000000390b         mov        r13, rcx
000000000000390e         push       rbp
000000000000390f         push       rbx
0000000000003910         mov        rbp, rdx
0000000000003913         sub        rsp, 0x28
0000000000003917         mov        qword [rsp+0x58+var_50], rdi
000000000000391c         mov        qword [rsp+0x58+var_40], rdx
0000000000003921         call       j_strlen                                    ; strlen
0000000000003926         mov        r14, qword [r15]
0000000000003929         mov        qword [rsp+0x58+var_58], 0xffffffffffffffff
0000000000003931         test       r14, r14
0000000000003934         je         loc_39ed

000000000000393a         mov        r12, rax
000000000000393d         mov        byte [rsp+0x58+var_41], 0x0
0000000000003942         xor        ebx, ebx
0000000000003944         jmp        loc_3997
0000000000003946         align      16

                     loc_3950:
0000000000003950         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=argmatch+189
0000000000003955         test       rax, rax
0000000000003958         je         loc_3a00

000000000000395e         mov        rdi, qword [rsp+0x58+var_58]
0000000000003962         mov        rdx, r13                                    ; argument "__n" for method j_memcmp
0000000000003965         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000003968         imul       rdi, r13
000000000000396c         add        rdi, rax                                    ; argument "__s1" for method j_memcmp
000000000000396f         call       j_memcmp                                    ; memcmp
0000000000003974         test       eax, eax
0000000000003976         movzx      eax, byte [rsp+0x58+var_41]
000000000000397b         mov        ecx, 0x1
0000000000003980         cmovne     eax, ecx
0000000000003983         mov        byte [rsp+0x58+var_41], al

                     loc_3987:
0000000000003987         add        rbx, 0x1                                    ; CODE XREF=argmatch+169, argmatch+261
000000000000398b         add        rbp, r13
000000000000398e         mov        r14, qword [r15+rbx*8]
0000000000003992         test       r14, r14
0000000000003995         je         loc_39d8

                     loc_3997:
0000000000003997         mov        rsi, qword [rsp+0x58+var_50]                ; argument "__s2" for method j_strncmp, CODE XREF=argmatch+68, argmatch+209
000000000000399c         mov        rdx, r12                                    ; argument "__n" for method j_strncmp
000000000000399f         mov        rdi, r14                                    ; argument "__s1" for method j_strncmp
00000000000039a2         call       j_strncmp                                   ; strncmp
00000000000039a7         test       eax, eax
00000000000039a9         jne        loc_3987

00000000000039ab         mov        rdi, r14                                    ; argument "__s" for method j_strlen
00000000000039ae         call       j_strlen                                    ; strlen
00000000000039b3         cmp        rax, r12
00000000000039b6         je         loc_3a10

00000000000039b8         cmp        qword [rsp+0x58+var_58], 0xffffffffffffffff
00000000000039bd         jne        loc_3950

00000000000039bf         mov        qword [rsp+0x58+var_58], rbx
00000000000039c3         add        rbx, 0x1
00000000000039c7         add        rbp, r13
00000000000039ca         mov        r14, qword [r15+rbx*8]
00000000000039ce         test       r14, r14
00000000000039d1         jne        loc_3997

00000000000039d3         nop        dword [rax+rax]

                     loc_39d8:
00000000000039d8         cmp        byte [rsp+0x58+var_41], 0x0                 ; CODE XREF=argmatch+149
00000000000039dd         mov        rax, 0xfffffffffffffffe
00000000000039e4         cmove      rax, qword [rsp+0x58+var_58]
00000000000039e9         mov        qword [rsp+0x58+var_58], rax

                     loc_39ed:
00000000000039ed         mov        rax, qword [rsp+0x58+var_58]                ; CODE XREF=argmatch+52, argmatch+276
00000000000039f1         add        rsp, 0x28
00000000000039f5         pop        rbx
00000000000039f6         pop        rbp
00000000000039f7         pop        r12
00000000000039f9         pop        r13
00000000000039fb         pop        r14
00000000000039fd         pop        r15
00000000000039ff         ret
                        ; endp

                     loc_3a00:
0000000000003a00         mov        byte [rsp+0x58+var_41], 0x1                 ; CODE XREF=argmatch+88
0000000000003a05         jmp        loc_3987
0000000000003a07         align      16

                     loc_3a10:
0000000000003a10         mov        qword [rsp+0x58+var_58], rbx                ; CODE XREF=argmatch+182
0000000000003a14         jmp        loc_39ed
0000000000003a16         align      32                                          ; End of unwind block (FDE at 0xca50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_invalid:
0000000000003a20         cmp        rdx, 0xffffffffffffffff                     ; Begin of unwind block (FDE at 0xca9c), CODE XREF=__xargmatch_internal+78
0000000000003a24         push       r12
0000000000003a26         mov        edx, 0x5
0000000000003a2b         push       rbp
0000000000003a2c         mov        r12, rsi
0000000000003a2f         push       rbx
0000000000003a30         mov        rbp, rdi
0000000000003a33         je         loc_3a80

0000000000003a35         lea        rsi, qword [aAmbiguousArgum]                ; argument "msgid" for method j_dcgettext, "ambiguous argument %s for %s"
0000000000003a3c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a3e         call       j_dcgettext                                 ; dcgettext
0000000000003a43         mov        rbx, rax

                     loc_3a46:
0000000000003a46         mov        rsi, rbp                                    ; CODE XREF=argmatch_invalid+113
0000000000003a49         mov        edi, 0x1
0000000000003a4e         call       quote_n                                     ; quote_n
0000000000003a53         mov        rdx, r12
0000000000003a56         mov        rbp, rax
0000000000003a59         mov        esi, 0x8
0000000000003a5e         xor        edi, edi
0000000000003a60         call       quotearg_n_style                            ; quotearg_n_style
0000000000003a65         mov        r8, rbp
0000000000003a68         mov        rdx, rbx                                    ; argument "__format" for method j_error
0000000000003a6b         mov        rcx, rax
0000000000003a6e         pop        rbx
0000000000003a6f         pop        rbp
0000000000003a70         pop        r12
0000000000003a72         xor        esi, esi                                    ; argument "__errnum" for method j_error
0000000000003a74         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003a76         xor        eax, eax
0000000000003a78         jmp        j_error                                     ; error
                        ; endp
0000000000003a7d         align      128

                     loc_3a80:
0000000000003a80         lea        rsi, qword [aInvalidArgumen]                ; argument "msgid" for method j_dcgettext, "invalid argument %s for %s", CODE XREF=argmatch_invalid+19
0000000000003a87         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003a89         call       j_dcgettext                                 ; dcgettext
0000000000003a8e         mov        rbx, rax
0000000000003a91         jmp        loc_3a46
0000000000003a93         align      32                                          ; End of unwind block (FDE at 0xca9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_valid:
0000000000003aa0         push       r15                                         ; Begin of unwind block (FDE at 0xcac8), CODE XREF=__xargmatch_internal+92
0000000000003aa2         push       r14
0000000000003aa4         mov        r14, rdi
0000000000003aa7         push       r13
0000000000003aa9         push       r12
0000000000003aab         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003aad         push       rbp
0000000000003aae         push       rbx
0000000000003aaf         mov        rbp, rsi
0000000000003ab2         lea        rsi, qword [aValidArguments]                ; argument "msgid" for method j_dcgettext, "Valid arguments are:"
0000000000003ab9         mov        r12, rdx
0000000000003abc         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003ac1         sub        rsp, 0x8
0000000000003ac5         mov        rbx, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003acc         call       j_dcgettext                                 ; dcgettext
0000000000003ad1         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000003ad4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
0000000000003ad7         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000003adc         mov        r15, qword [r14]
0000000000003adf         test       r15, r15
0000000000003ae2         je         loc_3b78

0000000000003ae8         xor        r13d, r13d
0000000000003aeb         xor        ebx, ebx
0000000000003aed         jmp        loc_3b28
0000000000003aef         align      16

                     loc_3af0:
0000000000003af0         mov        rdi, r15                                    ; CODE XREF=argmatch_valid+139, argmatch_valid+157
0000000000003af3         add        rbx, 0x1
0000000000003af7         mov        r13, rbp
0000000000003afa         call       quote                                       ; quote
0000000000003aff         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003b06         lea        rdx, qword [aNS]                            ; "\\n  - %s"
0000000000003b0d         mov        rcx, rax
0000000000003b10         mov        esi, 0x1
0000000000003b15         xor        eax, eax
0000000000003b17         add        rbp, r12
0000000000003b1a         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003b1f         mov        r15, qword [r14+rbx*8]
0000000000003b23         test       r15, r15
0000000000003b26         je         loc_3b78

                     loc_3b28:
0000000000003b28         test       rbx, rbx                                    ; CODE XREF=argmatch_valid+77, argmatch_valid+210
0000000000003b2b         je         loc_3af0

0000000000003b2d         mov        rdx, r12                                    ; argument "__n" for method j_memcmp
0000000000003b30         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000003b33         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000003b36         call       j_memcmp                                    ; memcmp
0000000000003b3b         test       eax, eax
0000000000003b3d         jne        loc_3af0

0000000000003b3f         mov        rdi, r15
0000000000003b42         add        rbx, 0x1
0000000000003b46         add        rbp, r12
0000000000003b49         call       quote                                       ; quote
0000000000003b4e         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5
0000000000003b55         lea        rdx, qword [aNS+8]                          ; 0xb88d
0000000000003b5c         mov        rcx, rax
0000000000003b5f         mov        esi, 0x1
0000000000003b64         xor        eax, eax
0000000000003b66         call       j___fprintf_chk                             ; __fprintf_chk
0000000000003b6b         mov        r15, qword [r14+rbx*8]
0000000000003b6f         test       r15, r15
0000000000003b72         jne        loc_3b28

0000000000003b74         nop        dword [rax]

                     loc_3b78:
0000000000003b78         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=argmatch_valid+66, argmatch_valid+134
0000000000003b7f         mov        rax, qword [rdi+0x28]
0000000000003b83         cmp        rax, qword [rdi+0x30]
0000000000003b87         jae        loc_3ba8

0000000000003b89         lea        rdx, qword [rax+1]
0000000000003b8d         mov        qword [rdi+0x28], rdx
0000000000003b91         mov        byte [rax], 0xa
0000000000003b94         add        rsp, 0x8
0000000000003b98         pop        rbx
0000000000003b99         pop        rbp
0000000000003b9a         pop        r12
0000000000003b9c         pop        r13
0000000000003b9e         pop        r14
0000000000003ba0         pop        r15
0000000000003ba2         ret
                        ; endp
0000000000003ba3         align      8

                     loc_3ba8:
0000000000003ba8         add        rsp, 0x8                                    ; CODE XREF=argmatch_valid+231
0000000000003bac         mov        esi, 0xa                                    ; argument #2 for method j___overflow
0000000000003bb1         pop        rbx
0000000000003bb2         pop        rbp
0000000000003bb3         pop        r12
0000000000003bb5         pop        r13
0000000000003bb7         pop        r14
0000000000003bb9         pop        r15
0000000000003bbb         jmp        j___overflow                                ; __overflow
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __xargmatch_internal:
0000000000003bc0         push       r15                                         ; End of unwind block (FDE at 0xcac8), Begin of unwind block (FDE at 0xcb28), CODE XREF=main+410
0000000000003bc2         push       r14
0000000000003bc4         mov        r14, rdi
0000000000003bc7         push       r13
0000000000003bc9         push       r12
0000000000003bcb         mov        r12, rsi
0000000000003bce         push       rbp
0000000000003bcf         push       rbx
0000000000003bd0         mov        rbp, rcx
0000000000003bd3         mov        rbx, rdx
0000000000003bd6         mov        rcx, r8
0000000000003bd9         mov        rdx, rbp
0000000000003bdc         sub        rsp, 0x8
0000000000003be0         mov        rsi, rbx
0000000000003be3         mov        rdi, r12
0000000000003be6         mov        r15, r8
0000000000003be9         mov        r13, r9
0000000000003bec         call       argmatch                                    ; argmatch
0000000000003bf1         test       rax, rax
0000000000003bf4         js         loc_3c05

                     loc_3bf6:
0000000000003bf6         add        rsp, 0x8                                    ; CODE XREF=__xargmatch_internal+107
0000000000003bfa         pop        rbx
0000000000003bfb         pop        rbp
0000000000003bfc         pop        r12
0000000000003bfe         pop        r13
0000000000003c00         pop        r14
0000000000003c02         pop        r15
0000000000003c04         ret
                        ; endp

                     loc_3c05:
0000000000003c05         mov        rdx, rax                                    ; CODE XREF=__xargmatch_internal+52
0000000000003c08         mov        rsi, r12
0000000000003c0b         mov        rdi, r14
0000000000003c0e         call       argmatch_invalid                            ; argmatch_invalid
0000000000003c13         mov        rdx, r15
0000000000003c16         mov        rsi, rbp
0000000000003c19         mov        rdi, rbx
0000000000003c1c         call       argmatch_valid                              ; argmatch_valid
0000000000003c21         call       r13
0000000000003c24         mov        rax, 0xffffffffffffffff
0000000000003c2b         jmp        loc_3bf6
0000000000003c2d         align      16                                          ; End of unwind block (FDE at 0xcb28)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     argmatch_to_argument:
0000000000003c30         push       r14                                         ; Begin of unwind block (FDE at 0xcb74)
0000000000003c32         push       r13
0000000000003c34         push       r12
0000000000003c36         push       rbp
0000000000003c37         push       rbx
0000000000003c38         mov        r14, qword [rsi]
0000000000003c3b         test       r14, r14
0000000000003c3e         je         loc_3c71

0000000000003c40         mov        r12, rcx
0000000000003c43         mov        r13, rdi
0000000000003c46         mov        rbp, rdx
0000000000003c49         lea        rbx, qword [rsi+8]
0000000000003c4d         jmp        loc_3c5f
0000000000003c4f         align      16

                     loc_3c50:
0000000000003c50         mov        r14, qword [rbx]                            ; CODE XREF=argmatch_to_argument+63
0000000000003c53         add        rbp, r12
0000000000003c56         add        rbx, 0x8
0000000000003c5a         test       r14, r14
0000000000003c5d         je         loc_3c71

                     loc_3c5f:
0000000000003c5f         mov        rdx, r12                                    ; argument "__n" for method j_memcmp, CODE XREF=argmatch_to_argument+29
0000000000003c62         mov        rsi, rbp                                    ; argument "__s2" for method j_memcmp
0000000000003c65         mov        rdi, r13                                    ; argument "__s1" for method j_memcmp
0000000000003c68         call       j_memcmp                                    ; memcmp
0000000000003c6d         test       eax, eax
0000000000003c6f         jne        loc_3c50

                     loc_3c71:
0000000000003c71         pop        rbx                                         ; CODE XREF=argmatch_to_argument+14, argmatch_to_argument+45
0000000000003c72         mov        rax, r14
0000000000003c75         pop        rbp
0000000000003c76         pop        r12
0000000000003c78         pop        r13
0000000000003c7a         pop        r14
0000000000003c7c         ret
                        ; endp
0000000000003c7d         align      128                                         ; End of unwind block (FDE at 0xcb74)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdin_set_file_name:
0000000000003c80         mov        qword [file_name], rdi                      ; Begin of unwind block (FDE at 0xcbb4), file_name
0000000000003c87         ret
                        ; endp
0000000000003c88         align      16                                          ; End of unwind block (FDE at 0xcbb4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdin:
0000000000003c90         push       r12                                         ; Begin of unwind block (FDE at 0xcbc8), DATA XREF=main+108
0000000000003c92         push       rbp
0000000000003c93         push       rbx
0000000000003c94         mov        rbx, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000003c9b         mov        rdi, rbx
0000000000003c9e         call       freadahead                                  ; freadahead
0000000000003ca3         test       rax, rax
0000000000003ca6         jne        loc_3d48

0000000000003cac         mov        rdi, rbx
0000000000003caf         call       close_stream                                ; close_stream
0000000000003cb4         test       eax, eax
0000000000003cb6         jne        loc_3ce8

0000000000003cb8         pop        rbx
0000000000003cb9         pop        rbp
0000000000003cba         pop        r12
0000000000003cbc         jmp        close_stdout                                ; close_stdout
                        ; endp
0000000000003cc1         align      8

                     loc_3cc8:
0000000000003cc8         call       rpl_fflush                                  ; rpl_fflush, CODE XREF=close_stdin+208
0000000000003ccd         test       eax, eax
0000000000003ccf         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000003cd6         je         loc_3d66

0000000000003cdc         call       close_stream                                ; close_stream
0000000000003ce1         nop        dword [rax]

                     loc_3ce8:
0000000000003ce8         lea        rsi, qword [aErrorClosingFi]                ; argument "msgid" for method j_dcgettext, "error closing file", CODE XREF=close_stdin+38, close_stdin+221
0000000000003cef         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003cf1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003cf6         call       j_dcgettext                                 ; dcgettext
0000000000003cfb         mov        rbx, qword [file_name]                      ; file_name
0000000000003d02         mov        r12, rax
0000000000003d05         call       j___errno_location                          ; __errno_location
0000000000003d0a         mov        rbp, rax
0000000000003d0d         test       rbx, rbx
0000000000003d10         je         loc_3d80

0000000000003d12         mov        rdi, rbx
0000000000003d15         call       quotearg_colon                              ; quotearg_colon
0000000000003d1a         mov        esi, dword [rbp]                            ; argument "__errnum" for method j_error
0000000000003d1d         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003d24         mov        rcx, rax
0000000000003d27         mov        r8, r12
0000000000003d2a         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003d2c         xor        eax, eax
0000000000003d2e         call       j_error                                     ; error

                     loc_3d33:
0000000000003d33         call       close_stdout                                ; close_stdout, CODE XREF=close_stdin+261
0000000000003d38         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure
0000000000003d3e         call       j__exit                                     ; _exit
                        ; endp
0000000000003d43         align      8

                     loc_3d48:
0000000000003d48         xor        esi, esi                                    ; CODE XREF=close_stdin+22
0000000000003d4a         mov        rdi, rbx
0000000000003d4d         mov        edx, 0x1
0000000000003d52         call       rpl_fseeko                                  ; rpl_fseeko
0000000000003d57         test       eax, eax
0000000000003d59         mov        rdi, qword [stdin@@GLIBC_2.2.5]             ; stdin@@GLIBC_2.2.5
0000000000003d60         je         loc_3cc8

                     loc_3d66:
0000000000003d66         call       close_stream                                ; close_stream, CODE XREF=close_stdin+70
0000000000003d6b         test       eax, eax
0000000000003d6d         jne        loc_3ce8

0000000000003d73         pop        rbx
0000000000003d74         pop        rbp
0000000000003d75         pop        r12
0000000000003d77         jmp        close_stdout                                ; close_stdout
                        ; endp
0000000000003d7c         align      128

                     loc_3d80:
0000000000003d80         mov        esi, dword [rax]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdin+128
0000000000003d82         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xb88f
0000000000003d89         mov        rcx, r12
0000000000003d8c         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003d8e         xor        eax, eax
0000000000003d90         call       j_error                                     ; error
0000000000003d95         jmp        loc_3d33
0000000000003d97         align      32                                          ; End of unwind block (FDE at 0xcbc8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_file_name:
0000000000003da0         mov        qword [file_name_20f110], rdi               ; Begin of unwind block (FDE at 0xcc04), file_name_20f110
0000000000003da7         ret
                        ; endp
0000000000003da8         align      16                                          ; End of unwind block (FDE at 0xcc04)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout_set_ignore_EPIPE:
0000000000003db0         mov        byte [ignore_EPIPE], dil                    ; Begin of unwind block (FDE at 0xcc18), ignore_EPIPE
0000000000003db7         ret
                        ; endp
0000000000003db8         align      64                                          ; End of unwind block (FDE at 0xcc18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stdout:
0000000000003dc0         push       rbp                                         ; Begin of unwind block (FDE at 0xcc2c), CODE XREF=close_stdin+44, close_stdin+163, close_stdin+231
0000000000003dc1         push       rbx
0000000000003dc2         sub        rsp, 0x8
0000000000003dc6         mov        rdi, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
0000000000003dcd         call       close_stream                                ; close_stream
0000000000003dd2         test       eax, eax
0000000000003dd4         je         loc_3dec

0000000000003dd6         call       j___errno_location                          ; __errno_location
0000000000003ddb         cmp        byte [ignore_EPIPE], 0x0                    ; ignore_EPIPE
0000000000003de2         mov        rbx, rax
0000000000003de5         je         loc_3e03

0000000000003de7         cmp        dword [rax], 0x20
0000000000003dea         jne        loc_3e03

                     loc_3dec:
0000000000003dec         mov        rdi, qword [stderr@@GLIBC_2.2.5]            ; stderr@@GLIBC_2.2.5, CODE XREF=close_stdout+20
0000000000003df3         call       close_stream                                ; close_stream
0000000000003df8         test       eax, eax
0000000000003dfa         jne        loc_3e42

0000000000003dfc         add        rsp, 0x8
0000000000003e00         pop        rbx
0000000000003e01         pop        rbp
0000000000003e02         ret
                        ; endp

                     loc_3e03:
0000000000003e03         lea        rsi, qword [aWriteError]                    ; argument "msgid" for method j_dcgettext, "write error", CODE XREF=close_stdout+37, close_stdout+42
0000000000003e0a         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003e0c         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000003e11         call       j_dcgettext                                 ; dcgettext
0000000000003e16         mov        rdi, qword [file_name_20f110]               ; file_name_20f110
0000000000003e1d         mov        rbp, rax
0000000000003e20         test       rdi, rdi
0000000000003e23         je         loc_3e4d

0000000000003e25         call       quotearg_colon                              ; quotearg_colon
0000000000003e2a         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error
0000000000003e2c         lea        rdx, qword [aSS]                            ; argument "__format" for method j_error, "%s: %s"
0000000000003e33         mov        rcx, rax
0000000000003e36         mov        r8, rbp
0000000000003e39         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003e3b         xor        eax, eax
0000000000003e3d         call       j_error                                     ; error

                     loc_3e42:
0000000000003e42         mov        edi, dword [exit_failure]                   ; argument "__status" for method j__exit, exit_failure, CODE XREF=close_stdout+58, close_stdout+162
0000000000003e48         call       j__exit                                     ; _exit
                        ; endp

                     loc_3e4d:
0000000000003e4d         mov        esi, dword [rbx]                            ; argument "__errnum" for method j_error, CODE XREF=close_stdout+99
0000000000003e4f         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xb88f
0000000000003e56         mov        rcx, rax
0000000000003e59         xor        edi, edi                                    ; argument "__status" for method j_error
0000000000003e5b         xor        eax, eax
0000000000003e5d         call       j_error                                     ; error
0000000000003e62         jmp        loc_3e42
0000000000003e64         align      16                                          ; End of unwind block (FDE at 0xcc2c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     last_component:
0000000000003e70         movzx      edx, byte [rdi]                             ; Begin of unwind block (FDE at 0xcc5c), CODE XREF=sub_32f0+150, mfile_name_concat+23
0000000000003e73         mov        rax, rdi
0000000000003e76         cmp        dl, 0x2f
0000000000003e79         jne        loc_3e8c

0000000000003e7b         nop        dword [rax+rax]

                     loc_3e80:
0000000000003e80         add        rax, 0x1                                    ; CODE XREF=last_component+26
0000000000003e84         movzx      edx, byte [rax]
0000000000003e87         cmp        dl, 0x2f
0000000000003e8a         je         loc_3e80

                     loc_3e8c:
0000000000003e8c         test       dl, dl                                      ; CODE XREF=last_component+9
0000000000003e8e         je         loc_3eca

0000000000003e90         mov        rcx, rax
0000000000003e93         xor        esi, esi
0000000000003e95         jmp        loc_3eb5
0000000000003e97         align      32

                     loc_3ea0:
0000000000003ea0         test       sil, sil                                    ; CODE XREF=last_component+72
0000000000003ea3         je         loc_3eaa

0000000000003ea5         mov        rax, rcx
0000000000003ea8         xor        esi, esi

                     loc_3eaa:
0000000000003eaa         add        rcx, 0x1                                    ; CODE XREF=last_component+51
0000000000003eae         movzx      edx, byte [rcx]
0000000000003eb1         test       dl, dl
0000000000003eb3         je         loc_3eca

                     loc_3eb5:
0000000000003eb5         cmp        dl, 0x2f                                    ; CODE XREF=last_component+37, last_component+88
0000000000003eb8         jne        loc_3ea0

0000000000003eba         add        rcx, 0x1
0000000000003ebe         movzx      edx, byte [rcx]
0000000000003ec1         mov        esi, 0x1
0000000000003ec6         test       dl, dl
0000000000003ec8         jne        loc_3eb5

                     loc_3eca:
0000000000003eca         ret                                                    ; CODE XREF=last_component+30, last_component+67
                        ; endp
0000000000003ecc         align      16                                          ; End of unwind block (FDE at 0xcc5c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     base_len:
0000000000003ed0         push       rbx                                         ; Begin of unwind block (FDE at 0xcc70), CODE XREF=mfile_name_concat+34
0000000000003ed1         mov        rbx, rdi
0000000000003ed4         call       j_strlen                                    ; strlen
0000000000003ed9         cmp        rax, 0x1
0000000000003edd         jbe        loc_3eea

0000000000003edf         cmp        byte [rbx+rax-1], 0x2f
0000000000003ee4         lea        rdx, qword [rax-1]
0000000000003ee8         je         loc_3ef8

                     loc_3eea:
0000000000003eea         pop        rbx                                         ; CODE XREF=base_len+13
0000000000003eeb         ret
                        ; endp
0000000000003eec         align      16

                     loc_3ef0:
0000000000003ef0         mov        rdx, rax                                    ; CODE XREF=base_len+55
0000000000003ef3         nop        dword [rax+rax]

                     loc_3ef8:
0000000000003ef8         cmp        rdx, 0x1                                    ; CODE XREF=base_len+24
0000000000003efc         je         loc_3f10

0000000000003efe         cmp        byte [rbx+rdx-1], 0x2f
0000000000003f03         lea        rax, qword [rdx-1]
0000000000003f07         je         loc_3ef0

0000000000003f09         mov        rax, rdx
0000000000003f0c         pop        rbx
0000000000003f0d         ret
                        ; endp
0000000000003f0e         align      16

                     loc_3f10:
0000000000003f10         mov        eax, 0x1                                    ; CODE XREF=base_len+44
0000000000003f15         pop        rbx
0000000000003f16         ret
                        ; endp
0000000000003f17         align      32                                          ; End of unwind block (FDE at 0xcc70)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     file_type:
0000000000003f20         mov        eax, dword [rdi+0x18]                       ; Begin of unwind block (FDE at 0xcc9c), CODE XREF=prompt+455
0000000000003f23         mov        edx, 0x5
0000000000003f28         and        eax, 0xf000
0000000000003f2d         cmp        eax, 0x8000
0000000000003f32         je         loc_3f80

0000000000003f34         cmp        eax, 0x4000
0000000000003f39         je         loc_3fd0

0000000000003f3f         cmp        eax, 0xa000
0000000000003f44         je         loc_3fb0

0000000000003f46         cmp        eax, 0x6000
0000000000003f4b         je         loc_3fe0

0000000000003f51         cmp        eax, 0x2000
0000000000003f56         je         loc_3ff0

0000000000003f5c         cmp        eax, 0x1000
0000000000003f61         je         loc_4000

0000000000003f67         cmp        eax, aSSAndSn                               ; "s, %s, and %s.\\n"
0000000000003f6c         je         loc_3fc0

0000000000003f6e         lea        rsi, qword [aWeirdFile]                     ; argument "msgid" for method j_dcgettext, "weird file"
0000000000003f75         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f77         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003f7c         align      128

                     loc_3f80:
0000000000003f80         cmp        qword [rdi+0x30], 0x0                       ; CODE XREF=file_type+18
0000000000003f85         jne        loc_3f98

0000000000003f87         lea        rsi, qword [aRegularEmptyFi]                ; argument "msgid" for method j_dcgettext, "regular empty file"
0000000000003f8e         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003f90         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003f95         align      8

                     loc_3f98:
0000000000003f98         lea        rsi, qword [aRegularFile]                   ; argument "msgid" for method j_dcgettext, "regular file", CODE XREF=file_type+101
0000000000003f9f         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fa1         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003fa6         align      16

                     loc_3fb0:
0000000000003fb0         lea        rsi, qword [aSymbolicLink]                  ; argument "msgid" for method j_dcgettext, "symbolic link", CODE XREF=file_type+36
0000000000003fb7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fb9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003fbe         align      64

                     loc_3fc0:
0000000000003fc0         lea        rsi, qword [aSocket]                        ; argument "msgid" for method j_dcgettext, "socket", CODE XREF=file_type+76
0000000000003fc7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fc9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003fce         align      16

                     loc_3fd0:
0000000000003fd0         lea        rsi, qword [aDirectory]                     ; argument "msgid" for method j_dcgettext, "directory", CODE XREF=file_type+25
0000000000003fd7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fd9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003fde         align      32

                     loc_3fe0:
0000000000003fe0         lea        rsi, qword [aBlockSpecialFi]                ; argument "msgid" for method j_dcgettext, "block special file", CODE XREF=file_type+43
0000000000003fe7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003fe9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003fee         align      16

                     loc_3ff0:
0000000000003ff0         lea        rsi, qword [aCharacterSpeci]                ; argument "msgid" for method j_dcgettext, "character special file", CODE XREF=file_type+54
0000000000003ff7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000003ff9         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
0000000000003ffe         align      16384

                     loc_4000:
0000000000004000         lea        rsi, qword [aCharacterSpeci+23]             ; argument "msgid" for method j_dcgettext, 0xb91a, CODE XREF=file_type+65, DATA XREF=prompt+400, file_type+20, sub_47a0+88, fts_stat+182, rpl_fts_read+1473
0000000000004007         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000004009         jmp        j_dcgettext                                 ; dcgettext
                        ; endp
000000000000400e         align      16                                          ; End of unwind block (FDE at 0xcc9c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     file_name_concat:
0000000000004010         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xccb4), CODE XREF=sub_3510+164
0000000000004014         call       mfile_name_concat                           ; mfile_name_concat
0000000000004019         test       rax, rax
000000000000401c         je         loc_4023

000000000000401e         add        rsp, 0x8
0000000000004022         ret
                        ; endp

                     loc_4023:
0000000000004023         call       xalloc_die                                  ; xalloc_die, CODE XREF=file_name_concat+12
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4028:
0000000000004028         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xccb4)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_39: int8_t, -57
        ;    var_48: int64_t, -72


                     mfile_name_concat:
0000000000004030         push       r15                                         ; Begin of unwind block (FDE at 0xccd4), CODE XREF=file_name_concat+4
0000000000004032         push       r14
0000000000004034         mov        r15, rdx
0000000000004037         push       r13
0000000000004039         push       r12
000000000000403b         mov        r12, rdi
000000000000403e         push       rbp
000000000000403f         push       rbx
0000000000004040         mov        rbp, rsi
0000000000004043         sub        rsp, 0x18
0000000000004047         call       last_component                              ; last_component
000000000000404c         mov        rbx, rax
000000000000404f         mov        rdi, rax
0000000000004052         call       base_len                                    ; base_len
0000000000004057         sub        rbx, r12
000000000000405a         mov        r13, rax
000000000000405d         mov        rdi, rbp                                    ; argument "__s" for method j_strlen
0000000000004060         add        rbx, rax
0000000000004063         call       j_strlen                                    ; strlen
0000000000004068         test       r13, r13
000000000000406b         mov        r14, rax
000000000000406e         je         loc_40a0

0000000000004070         cmp        byte [r12+rbx-1], 0x2f
0000000000004076         je         loc_4120

000000000000407c         xor        eax, eax
000000000000407e         cmp        byte [rbp], 0x2f
0000000000004082         mov        edx, 0x0
0000000000004087         setne      al
000000000000408a         mov        qword [rsp+0x48+var_48], rax
000000000000408e         mov        eax, 0x2f
0000000000004093         cmove      eax, edx
0000000000004096         mov        byte [rsp+0x48+var_39], al
000000000000409a         jmp        loc_40be
000000000000409c         align      32

                     loc_40a0:
00000000000040a0         xor        eax, eax                                    ; CODE XREF=mfile_name_concat+62
00000000000040a2         cmp        byte [rbp], 0x2f
00000000000040a6         mov        edx, 0x0
00000000000040ab         sete       al
00000000000040ae         mov        qword [rsp+0x48+var_48], rax
00000000000040b2         mov        eax, 0x2e
00000000000040b7         cmovne     eax, edx
00000000000040ba         mov        byte [rsp+0x48+var_39], al

                     loc_40be:
00000000000040be         lea        rdi, qword [rbx+r14+1]                      ; CODE XREF=mfile_name_concat+106, mfile_name_concat+253
00000000000040c3         add        rdi, qword [rsp+0x48+var_48]                ; argument "__size" for method j_malloc
00000000000040c7         call       j_malloc                                    ; malloc
00000000000040cc         test       rax, rax
00000000000040cf         mov        r13, rax
00000000000040d2         je         loc_4106

00000000000040d4         mov        rdi, rax                                    ; argument "__dest" for method j_mempcpy
00000000000040d7         mov        rdx, rbx                                    ; argument "__n" for method j_mempcpy
00000000000040da         mov        rsi, r12                                    ; argument "__src" for method j_mempcpy
00000000000040dd         call       j_mempcpy                                   ; mempcpy
00000000000040e2         movzx      ecx, byte [rsp+0x48+var_39]
00000000000040e7         mov        rdi, qword [rsp+0x48+var_48]
00000000000040eb         add        rdi, rax
00000000000040ee         test       r15, r15
00000000000040f1         mov        byte [rax], cl
00000000000040f3         je         loc_40f8

00000000000040f5         mov        qword [r15], rdi

                     loc_40f8:
00000000000040f8         mov        rdx, r14                                    ; argument "__n" for method j_mempcpy, CODE XREF=mfile_name_concat+195
00000000000040fb         mov        rsi, rbp                                    ; argument "__src" for method j_mempcpy
00000000000040fe         call       j_mempcpy                                   ; mempcpy
0000000000004103         mov        byte [rax], 0x0

                     loc_4106:
0000000000004106         add        rsp, 0x18                                   ; CODE XREF=mfile_name_concat+162
000000000000410a         mov        rax, r13
000000000000410d         pop        rbx
000000000000410e         pop        rbp
000000000000410f         pop        r12
0000000000004111         pop        r13
0000000000004113         pop        r14
0000000000004115         pop        r15
0000000000004117         ret
                        ; endp
0000000000004118         align      32

                     loc_4120:
0000000000004120         mov        qword [rsp+0x48+var_48], 0x0                ; CODE XREF=mfile_name_concat+70
0000000000004128         mov        byte [rsp+0x48+var_39], 0x0
000000000000412d         jmp        loc_40be
000000000000412f         align      16                                          ; End of unwind block (FDE at 0xccd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_program_name:
0000000000004130         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xcd24), CODE XREF=main+55
0000000000004133         push       rbx
0000000000004134         je         loc_41ad

0000000000004136         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
000000000000413b         mov        rbx, rdi
000000000000413e         call       j_strrchr                                   ; strrchr
0000000000004143         test       rax, rax
0000000000004146         je         loc_419d

0000000000004148         lea        r8, qword [rax+1]
000000000000414c         mov        rdx, r8
000000000000414f         sub        rdx, rbx
0000000000004152         cmp        rdx, 0x6
0000000000004156         jle        loc_419d

0000000000004158         lea        rsi, qword [rax-6]
000000000000415c         lea        rdi, qword [aLibs]                          ; "/.libs/"
0000000000004163         mov        ecx, 0x7
0000000000004168         rep  cmpsb byte [rsi], byte [rdi]
000000000000416a         seta       dl
000000000000416d         sbb        dl, 0x0
0000000000004170         test       dl, dl
0000000000004172         jne        loc_419d

0000000000004174         lea        rdi, qword [aLibs+8]                        ; 0xb978
000000000000417b         mov        ecx, 0x3
0000000000004180         mov        rsi, r8
0000000000004183         mov        rbx, r8
0000000000004186         rep  cmpsb byte [rsi], byte [rdi]
0000000000004188         seta       dl
000000000000418b         sbb        dl, 0x0
000000000000418e         test       dl, dl
0000000000004190         jne        loc_419d

0000000000004192         lea        rbx, qword [rax+4]
0000000000004196         mov        qword [program_invocation_short_name@@GLIBC_2.2.5], rbx ; program_invocation_short_name@@GLIBC_2.2.5

                     loc_419d:
000000000000419d         mov        qword [program_name], rbx                   ; program_name, CODE XREF=set_program_name+22, set_program_name+38, set_program_name+66, set_program_name+96
00000000000041a4         mov        qword [__progname_full@@GLIBC_2.2.5], rbx   ; __progname_full@@GLIBC_2.2.5
00000000000041ab         pop        rbx
00000000000041ac         ret
                        ; endp

                     loc_41ad:
00000000000041ad         mov        rcx, qword [stderr@@GLIBC_2.2.5]            ; argument "__s" for method j_fwrite, stderr@@GLIBC_2.2.5, CODE XREF=set_program_name+4
00000000000041b4         lea        rdi, qword [aANullArgv0WasP]                ; argument "__ptr" for method j_fwrite, "A NULL argv[0] was passed through an exec system call.\\n"
00000000000041bb         mov        edx, 0x37                                   ; argument "__n" for method j_fwrite
00000000000041c0         mov        esi, 0x1                                    ; argument "__size" for method j_fwrite
00000000000041c5         call       j_fwrite                                    ; fwrite
00000000000041ca         call       j_abort                                     ; abort
                        ; endp
00000000000041cf         align      16                                          ; End of unwind block (FDE at 0xcd24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     gettext_quote.part.1:
00000000000041d0         push       rbp                                         ; Begin of unwind block (FDE at 0xcd44), CODE XREF=sub_4a00+2597, sub_4a00+2619
00000000000041d1         push       rbx
00000000000041d2         mov        rbp, rdi
00000000000041d5         mov        ebx, esi
00000000000041d7         sub        rsp, 0x8
00000000000041db         call       locale_charset                              ; locale_charset
00000000000041e0         movzx      edx, byte [rax]
00000000000041e3         and        edx, 0xffffffdf
00000000000041e6         cmp        dl, 0x55
00000000000041e9         je         loc_4260

00000000000041eb         cmp        dl, 0x47
00000000000041ee         je         loc_4210

                     loc_41f0:
00000000000041f0         lea        rax, qword [aLibs+27]                       ; 0xb98b, CODE XREF=gettext_quote.part.1+74, gettext_quote.part.1+80, gettext_quote.part.1+86, gettext_quote.part.1+92, gettext_quote.part.1+98, gettext_quote.part.1+104, gettext_quote.part.1+110, gettext_quote.part.1+154, gettext_quote.part.1+166, gettext_quote.part.1+176, gettext_quote.part.1+186
00000000000041f7         lea        rdx, qword [aLibs+29]                       ; 0xb98d
00000000000041fe         cmp        ebx, 0x9
0000000000004201         cmovne     rax, rdx
0000000000004205         add        rsp, 0x8
0000000000004209         pop        rbx
000000000000420a         pop        rbp
000000000000420b         ret
                        ; endp
000000000000420c         align      16

                     loc_4210:
0000000000004210         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+30
0000000000004214         and        edx, 0xffffffdf
0000000000004217         cmp        dl, 0x42
000000000000421a         jne        loc_41f0

000000000000421c         cmp        byte [rax+2], 0x31
0000000000004220         jne        loc_41f0

0000000000004222         cmp        byte [rax+3], 0x38
0000000000004226         jne        loc_41f0

0000000000004228         cmp        byte [rax+4], 0x30
000000000000422c         jne        loc_41f0

000000000000422e         cmp        byte [rax+5], 0x33
0000000000004232         jne        loc_41f0

0000000000004234         cmp        byte [rax+6], 0x30
0000000000004238         jne        loc_41f0

000000000000423a         cmp        byte [rax+7], 0x0
000000000000423e         jne        loc_41f0

0000000000004240         cmp        byte [rbp], 0x60
0000000000004244         lea        rax, qword [aLibs+20]                       ; 0xb984
000000000000424b         lea        rdx, qword [aLibs+24]                       ; 0xb988
0000000000004252         cmovne     rax, rdx
0000000000004256         add        rsp, 0x8
000000000000425a         pop        rbx
000000000000425b         pop        rbp
000000000000425c         ret
                        ; endp
000000000000425d         align      32

                     loc_4260:
0000000000004260         movzx      edx, byte [rax+1]                           ; CODE XREF=gettext_quote.part.1+25
0000000000004264         and        edx, 0xffffffdf
0000000000004267         cmp        dl, 0x54
000000000000426a         jne        loc_41f0

000000000000426c         movzx      edx, byte [rax+2]
0000000000004270         and        edx, 0xffffffdf
0000000000004273         cmp        dl, 0x46
0000000000004276         jne        loc_41f0

000000000000427c         cmp        byte [rax+3], 0x2d
0000000000004280         jne        loc_41f0

0000000000004286         cmp        byte [rax+4], 0x38
000000000000428a         jne        loc_41f0

0000000000004290         cmp        byte [rax+5], 0x0
0000000000004294         jne        loc_41f0

000000000000429a         cmp        byte [rbp], 0x60
000000000000429e         lea        rax, qword [aLibs+12]                       ; 0xb97c
00000000000042a5         lea        rdx, qword [aLibs+16]                       ; 0xb980
00000000000042ac         cmovne     rax, rdx
00000000000042b0         add        rsp, 0x8
00000000000042b4         pop        rbx
00000000000042b5         pop        rbp
00000000000042b6         ret
                        ; endp
00000000000042b7         align      64                                          ; End of unwind block (FDE at 0xcd44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_0: int, 8
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_4C: int32_t, -76
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_69: int8_t, -105
        ;    var_6A: int8_t, -106
        ;    var_6B: int8_t, -107
        ;    var_6C: int8_t, -108
        ;    var_70: int32_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int64_t, -192
        ;    var_C8: int64_t, -200
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217
        ;    var_DA: int8_t, -218
        ;    var_DB: int8_t, -219
        ;    var_E0: int32_t, -224


                     quotearg_buffer_restyled:
00000000000042c0         push       r15                                         ; Begin of unwind block (FDE at 0xcd88), CODE XREF=sub_4a00+1165, sub_4a00+2699, quotearg_n_options+231, quotearg_n_options+344, quotearg_buffer+92, quotearg_alloc_mem+103, quotearg_alloc_mem+176
00000000000042c2         push       r14
00000000000042c4         mov        r15d, r8d
00000000000042c7         push       r13
00000000000042c9         push       r12
00000000000042cb         mov        r14, rdi
00000000000042ce         push       rbp
00000000000042cf         push       rbx
00000000000042d0         mov        ebx, r9d
00000000000042d3         mov        r13, rsi
00000000000042d6         mov        rbp, rcx
00000000000042d9         and        ebx, 0x2
00000000000042dc         sub        rsp, 0xb8
00000000000042e3         mov        rax, qword [rsp+0xe8+arg_0]
00000000000042eb         mov        qword [rsp+0xe8+var_D8], rdx
00000000000042f0         mov        dword [rsp+0xe8+var_E0], r8d
00000000000042f5         mov        dword [rsp+0xe8+var_70], r9d
00000000000042fa         mov        qword [rsp+0xe8+var_C8], rax
00000000000042ff         mov        rax, qword [rsp+0xe8+arg_8]
0000000000004307         mov        qword [rsp+0xe8+var_80], rax
000000000000430c         mov        rax, qword [rsp+0xe8+arg_10]
0000000000004314         mov        qword [rsp+0xe8+var_88], rax
0000000000004319         mov        rax, qword [fs:0x28]
0000000000004322         mov        qword [rsp+0xe8+var_40], rax
000000000000432a         xor        eax, eax
000000000000432c         call       j___ctype_get_mb_cur_max                    ; __ctype_get_mb_cur_max
0000000000004331         cmp        r15d, 0xa
0000000000004335         mov        qword [rsp+0xe8+var_90], rax
000000000000433a         ja         loc_54ef

0000000000004340         lea        rcx, qword [switch_table_b9e0]              ; switch_table_b9e0
0000000000004347         mov        edx, r15d
000000000000434a         movsxd     rax, dword [rcx+rdx*4]
000000000000434e         add        rax, rcx
0000000000004351         jmp        rax                                         ; switch statement using table at 0xb9e0, with 11 cases, 0x4353,0x4f24,0x4f80,0x4fd5,0x501a,0x5054,0x50fa,0x5134,0x5328

                     loc_4353:
0000000000004353         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 1, CODE XREF=quotearg_buffer_restyled+145, sub_4a00+1318
0000000000004358         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000435d         xor        r12d, r12d
0000000000004360         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004369         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000436e         mov        byte [rsp+0xe8+var_DB], 0x0

                     loc_4373:
0000000000004373         lea        rax, qword [aLibs+29]                       ; 0xb98d, CODE XREF=sub_4a00+1876
000000000000437a         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004383         xor        r15d, r15d
0000000000004386         mov        dword [rsp+0xe8+var_E0], 0x2
000000000000438e         mov        qword [rsp+0xe8+var_A0], rax

                     loc_4393:
0000000000004393         xor        r11d, r11d                                  ; CODE XREF=sub_4a00+180, sub_4a00+1400, sub_4a00+1488, sub_4a00+1557, sub_4a00+1615, sub_4a00+1781, sub_4a00+1839, sub_4a00+2408, sub_4a00+2485
0000000000004396         mov        rax, rbp
0000000000004399         mov        r8d, r12d
000000000000439c         mov        rbp, r11
000000000000439f         mov        r11, rax
00000000000043a2         nop        word [rax+rax]

                     loc_43a8:
00000000000043a8         cmp        r11, rbp                                    ; CODE XREF=sub_44b0+194
00000000000043ab         setne      r12b
00000000000043af         cmp        r11, 0xffffffffffffffff
00000000000043b3         jne        loc_43c2

00000000000043b5         mov        rax, qword [rsp+0xe8+var_D8]
00000000000043ba         cmp        byte [rax+rbp], 0x0
00000000000043be         setne      r12b

                     loc_43c2:
00000000000043c2         test       r12b, r12b                                  ; CODE XREF=quotearg_buffer_restyled+243
00000000000043c5         je         loc_4a20

00000000000043cb         cmp        dword [rsp+0xe8+var_E0], 0x2
00000000000043d0         mov        rdi, qword [rsp+0xe8+var_D8]
00000000000043d5         lea        r9, qword [rdi+rbp]
00000000000043d9         setne      al
00000000000043dc         and        al, byte [rsp+0xe8+var_DB]
00000000000043e0         mov        r10d, eax
00000000000043e3         je         loc_4490

00000000000043e9         mov        rax, qword [rsp+0xe8+var_D0]
00000000000043ee         test       rax, rax
00000000000043f1         je         loc_4820

00000000000043f7         cmp        r11, 0xffffffffffffffff
00000000000043fb         lea        rbx, qword [rbp+rax]
0000000000004400         jne        loc_4430

0000000000004402         cmp        rax, 0x1
0000000000004406         jbe        loc_4430

0000000000004408         mov        byte [rsp+0xe8+var_B0], r8b
000000000000440d         mov        byte [rsp+0xe8+var_B8], r10b
0000000000004412         mov        qword [rsp+0xe8+var_C0], r9
0000000000004417         call       j_strlen                                    ; strlen
000000000000441c         movzx      r8d, byte [rsp+0xe8+var_B0]
0000000000004422         movzx      r10d, byte [rsp+0xe8+var_B8]
0000000000004428         mov        r11, rax
000000000000442b         mov        r9, qword [rsp+0xe8+var_C0]

                     loc_4430:
0000000000004430         cmp        rbx, r11                                    ; CODE XREF=quotearg_buffer_restyled+320, quotearg_buffer_restyled+326
0000000000004433         mov        byte [rsp+0xe8+var_C0], r10b
0000000000004438         ja         loc_49f0

000000000000443e         mov        rdx, qword [rsp+0xe8+var_D0]                ; argument "__n" for method j_memcmp
0000000000004443         mov        rsi, qword [rsp+0xe8+var_A0]                ; argument "__s2" for method j_memcmp
0000000000004448         mov        rdi, r9                                     ; argument "__s1" for method j_memcmp
000000000000444b         mov        qword [rsp+0xe8+var_A8], r11
0000000000004450         mov        byte [rsp+0xe8+var_B0], r8b
0000000000004455         mov        qword [rsp+0xe8+var_B8], r9
000000000000445a         call       j_memcmp                                    ; memcmp
000000000000445f         test       eax, eax
0000000000004461         mov        r9, qword [rsp+0xe8+var_B8]
0000000000004466         movzx      r8d, byte [rsp+0xe8+var_B0]
000000000000446c         mov        r11, qword [rsp+0xe8+var_A8]
0000000000004471         jne        loc_49f0

0000000000004477         cmp        byte [rsp+0xe8+var_D9], 0x0
000000000000447c         movzx      r10d, byte [rsp+0xe8+var_C0]
0000000000004482         jne        loc_5405

0000000000004488         nop        dword [rax+rax]

                     loc_4490:
0000000000004490         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+291, sub_49e0+19
0000000000004494         cmp        bl, 0x7e
0000000000004497         ja         loc_47b8

000000000000449d         lea        rcx, qword [switch_table_b9e0+44]           ; 0xba0c
00000000000044a4         movzx      edx, bl
00000000000044a7         movsxd     rax, dword [rcx+rdx*4]
00000000000044ab         add        rax, rcx
00000000000044ae         jmp        rax
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_44b0:
00000000000044b0         xor        r10d, r10d
00000000000044b3         cmp        r11, 0x1
00000000000044b7         setne      al
00000000000044ba         cmp        r11, 0xffffffffffffffff
00000000000044be         jne        loc_44cc

00000000000044c0         mov        rax, qword [rsp+arg_8]
00000000000044c5         cmp        byte [rax+1], 0x0
00000000000044c9         setne      al

                     loc_44cc:
00000000000044cc         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_44b0+14
00000000000044d1         sete       dl
00000000000044d4         test       al, al
00000000000044d6         je         loc_4728

                     loc_44dc:
00000000000044dc         xor        r12d, r12d                                  ; CODE XREF=sub_4720+11
00000000000044df         xor        eax, eax
00000000000044e1         nop        dword [rax]
                        ; endp

                     loc_44e8:
00000000000044e8         cmp        byte [rsp+0xe8+var_DB], 0x1                 ; CODE XREF=sub_46d0+50, sub_47a0+119
00000000000044ed         jne        loc_4602

00000000000044f3         test       dl, dl
00000000000044f5         jne        loc_4602

                     loc_44fb:
00000000000044fb         mov        rsi, qword [rsp+0xe8+var_C8]                ; CODE XREF=sub_45b0+87
0000000000004500         test       rsi, rsi
0000000000004503         je         loc_4519

0000000000004505         mov        edx, ebx
0000000000004507         shr        dl, 0x5
000000000000450a         movzx      edx, dl
000000000000450d         mov        edx, dword [rsi+rdx*4]
0000000000004510         bt         edx, ebx
0000000000004513         jb         loc_4663

                     loc_4519:
0000000000004519         test       r10b, r10b                                  ; CODE XREF=sub_44b0+83, sub_45b0+93
000000000000451c         jne        loc_4663

0000000000004522         xor        eax, 0x1
0000000000004525         add        rbp, 0x1
0000000000004529         and        eax, r8d

                     loc_452c:
000000000000452c         test       al, al                                      ; CODE XREF=sub_4a00+936
000000000000452e         je         loc_4550

0000000000004530         cmp        r13, r15
0000000000004533         jbe        loc_453a

0000000000004535         mov        byte [r14+r15], 0x27

                     loc_453a:
000000000000453a         lea        rax, qword [r15+1]                          ; CODE XREF=sub_44b0+131
000000000000453e         cmp        r13, rax
0000000000004541         jbe        loc_4549

0000000000004543         mov        byte [r14+r15+1], 0x27

                     loc_4549:
0000000000004549         add        r15, 0x2                                    ; CODE XREF=sub_44b0+145
000000000000454d         xor        r8d, r8d

                     loc_4550:
0000000000004550         cmp        r15, r13                                    ; CODE XREF=sub_44b0+126, sub_45b0+275, sub_4a00+869
0000000000004553         jae        loc_4559

0000000000004555         mov        byte [r14+r15], bl

                     loc_4559:
0000000000004559         movzx      edi, byte [rsp+0xe8+var_DA]                 ; CODE XREF=sub_44b0+163
000000000000455e         add        r15, 0x1
0000000000004562         mov        eax, 0x0
0000000000004567         test       r12b, r12b
000000000000456a         cmove      edi, eax
000000000000456d         mov        byte [rsp+0xe8+var_DA], dil
0000000000004572         jmp        loc_43a8
0000000000004577         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_4580:
0000000000004580         xor        r10d, r10d
0000000000004583         mov        eax, dword [rsp+arg_0]
0000000000004587         cmp        eax, 0x2
000000000000458a         je         loc_4b48

0000000000004590         cmp        eax, 0x5
0000000000004593         je         loc_4b08

0000000000004599         cmp        eax, 0x2
000000000000459c         mov        ebx, 0x3f
00000000000045a1         sete       dl
00000000000045a4         xor        r12d, r12d
00000000000045a7         xor        eax, eax
00000000000045a9         jmp        sub_44b0+56
                        ; endp
00000000000045ae         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_74: int8_t, 124
        ;    arg_48: int, 80
        ;    arg_40: int, 72
        ;    arg_38: int, 64
        ;    arg_30: int, 56
        ;    arg_28: int, 48
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_0: int, 8


                     sub_45b0:
00000000000045b0         xor        r10d, r10d
00000000000045b3         cmp        dword [rsp+arg_0], 0x2
00000000000045b8         je         loc_4ac0

00000000000045be         mov        byte [rsp+arg_74], r12b
00000000000045c3         xor        edx, edx
00000000000045c5         xor        eax, eax
00000000000045c7         mov        ebx, 0x27
00000000000045cc         jmp        sub_44b0+56
                        ; endp
00000000000045d1         nop        dword [rax]
00000000000045d8         mov        edx, 0x9
00000000000045dd         mov        ebx, 0x74

                     loc_45e2:
00000000000045e2         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_4770+10, sub_4860+37, sub_49a0+53
00000000000045e7         sete       al
00000000000045ea         and        al, byte [rsp+arg_7]
00000000000045ee         jne        sub_4720+30

00000000000045f4         cmp        byte [rsp+arg_5], 0x0                       ; CODE XREF=sub_45b0+114
00000000000045f9         jne        loc_4660

                     loc_45fb:
00000000000045fb         mov        ebx, edx                                    ; CODE XREF=sub_46d0+18
00000000000045fd         xor        r12d, r12d
0000000000004600         xor        eax, eax
                        ; endp

                     loc_4602:
0000000000004602         cmp        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=sub_44b0+61, sub_44b0+69
0000000000004607         jne        loc_44fb

000000000000460d         jmp        loc_4519
0000000000004612         nop        word [rax+rax]
0000000000004618         mov        edx, 0x8
000000000000461d         mov        ebx, 0x62
0000000000004622         jmp        sub_45b0+68
0000000000004624         nop        dword [rax]
0000000000004628         cmp        dword [rsp+8], 0x2
000000000000462d         je         sub_4a00                                    ; sub_4a00
0000000000004633         cmp        byte [rsp+0xd], 0x0
0000000000004638         je         sub_4840+16

                     loc_463e:
000000000000463e         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_4840+8
0000000000004643         je         loc_4850

0000000000004649         cmp        qword [rsp+arg_10], 0x0
000000000000464f         jne        sub_4a00+11

0000000000004655         mov        ebx, 0x5c
000000000000465a         nop        word [rax+rax]
                        ; endp

                     loc_4660:
0000000000004660         xor        r12d, r12d                                  ; CODE XREF=sub_45b0+73, sub_49a0+29
                        ; endp

                     loc_4663:
0000000000004663         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_44b0+99, sub_44b0+108
0000000000004668         sete       dl
000000000000466b         cmp        byte [rsp+0xe8+var_D9], 0x0
0000000000004670         mov        eax, edx
0000000000004672         jne        loc_4ec8

0000000000004678         mov        eax, r8d
000000000000467b         xor        eax, 0x1
000000000000467e         and        al, dl
0000000000004680         je         loc_46b1

0000000000004682         cmp        r13, r15
0000000000004685         jbe        loc_468c

0000000000004687         mov        byte [r14+r15], 0x27

                     loc_468c:
000000000000468c         lea        rdx, qword [r15+1]                          ; CODE XREF=sub_45b0+213
0000000000004690         cmp        r13, rdx
0000000000004693         jbe        loc_469b

0000000000004695         mov        byte [r14+r15+1], 0x24

                     loc_469b:
000000000000469b         lea        rdx, qword [r15+2]                          ; CODE XREF=sub_45b0+227
000000000000469f         cmp        r13, rdx
00000000000046a2         jbe        loc_46aa

00000000000046a4         mov        byte [r14+r15+2], 0x27

                     loc_46aa:
00000000000046aa         add        r15, 0x3                                    ; CODE XREF=sub_45b0+242
00000000000046ae         mov        r8d, eax

                     loc_46b1:
00000000000046b1         cmp        r13, r15                                    ; CODE XREF=sub_45b0+208
00000000000046b4         jbe        loc_46bb

00000000000046b6         mov        byte [r14+r15], 0x5c

                     loc_46bb:
00000000000046bb         add        r15, 0x1                                    ; CODE XREF=sub_45b0+260
00000000000046bf         add        rbp, 0x1
00000000000046c3         jmp        loc_4550
00000000000046c8         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_70: int8_t, 120
        ;    arg_20: int, 40
        ;    arg_18: int, 32
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_46d0:
00000000000046d0         cmp        byte [rsp+arg_5], 0x0
00000000000046d5         jne        loc_48a3

00000000000046db         xor        edx, edx
00000000000046dd         test       byte [rsp+arg_70], 0x1
00000000000046e2         je         loc_45fb

00000000000046e8         add        rbp, 0x1
00000000000046ec         jmp        quotearg_buffer_restyled+232
                        ; endp
00000000000046f1         nop        dword [rax]
00000000000046f8         cmp        dword [rsp+8], 0x2
00000000000046fd         sete       dl
0000000000004700         xor        eax, eax
0000000000004702         jmp        sub_44b0+56
0000000000004707         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4710:
0000000000004710         mov        edx, 0x7
0000000000004715         mov        ebx, 0x61
000000000000471a         jmp        sub_45b0+68
                        ; endp
000000000000471f         nop


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4720:
0000000000004720         cmp        dword [rsp+8], 0x2
0000000000004725         sete       dl
                        ; endp

                     loc_4728:
0000000000004728         test       rbp, rbp                                    ; CODE XREF=sub_44b0+38, sub_4940+35
000000000000472b         jne        loc_44dc

0000000000004731         movzx      eax, byte [rsp+arg_7]                       ; CODE XREF=sub_4970+43
0000000000004736         and        al, dl
0000000000004738         je         sub_44b0+56

000000000000473e         mov        rbp, r11
0000000000004741         mov        dword [rsp+arg_0], 0x2
0000000000004749         jmp        sub_4a00+1097
                        ; endp
000000000000474e         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4750:
0000000000004750         cmp        dword [rsp+arg_0], 0x2
0000000000004755         sete       dl
0000000000004758         xor        r12d, r12d
000000000000475b         jmp        sub_4720+17
                        ; endp
000000000000475d         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4760:
0000000000004760         cmp        dword [rsp+arg_0], 0x2
0000000000004765         mov        ebx, 0x20
000000000000476a         sete       dl
000000000000476d         jmp        sub_4720+17
                        ; endp
000000000000476f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4770:
0000000000004770         mov        edx, 0xd
0000000000004775         mov        ebx, 0x72
000000000000477a         jmp        loc_45e2
000000000000477f         align      128


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4780:
0000000000004780         mov        edx, 0xc
0000000000004785         mov        ebx, 0x66
000000000000478a         jmp        sub_45b0+68
                        ; endp
000000000000478f         align      16


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4790:
0000000000004790         mov        edx, 0xb
0000000000004795         mov        ebx, 0x76
000000000000479a         jmp        sub_45b0+68
                        ; endp
000000000000479f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_47a0:
00000000000047a0         mov        edx, 0xa
00000000000047a5         mov        ebx, 0x6e
00000000000047aa         jmp        sub_45b0+50
                        ; endp
00000000000047af         align      16

                     loc_47b0:
00000000000047b0         xor        r10d, r10d                                  ; CODE XREF=sub_47a0+135
00000000000047b3         nop        dword [rax+rax]

                     loc_47b8:
00000000000047b8         cmp        qword [rsp+0xe8+var_90], 0x1                ; CODE XREF=quotearg_buffer_restyled+471
00000000000047be         jne        loc_4b68

00000000000047c4         mov        qword [rsp+0xe8+var_B0], r11
00000000000047c9         mov        byte [rsp+0xe8+var_B8], r8b
00000000000047ce         mov        byte [rsp+0xe8+var_C0], r10b
00000000000047d3         call       j___ctype_b_loc                             ; __ctype_b_loc
00000000000047d8         mov        rcx, qword [rax]
00000000000047db         movzx      edx, bl
00000000000047de         movzx      r10d, byte [rsp+0xe8+var_C0]
00000000000047e4         movzx      r8d, byte [rsp+0xe8+var_B8]
00000000000047ea         mov        r11, qword [rsp+0xe8+var_B0]
00000000000047ef         mov        edi, 0x1
00000000000047f4         movzx      eax, word [rcx+rdx*2]
00000000000047f8         and        ax, 0x4000
00000000000047fc         setne      r12b
0000000000004800         sete       al
0000000000004803         and        al, byte [rsp+0xe8+var_DB]

                     loc_4807:
0000000000004807         test       al, al                                      ; CODE XREF=sub_4a00+2221
0000000000004809         jne        loc_51a1

000000000000480f         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000004814         sete       dl
0000000000004817         jmp        loc_44e8
000000000000481c         align      32

                     loc_4820:
0000000000004820         movzx      ebx, byte [r9]                              ; CODE XREF=quotearg_buffer_restyled+305
0000000000004824         cmp        bl, 0x7e
0000000000004827         ja         loc_47b0

0000000000004829         lea        rcx, qword [switch_table_b9e0+552]          ; 0xbc08
0000000000004830         movzx      edx, bl
0000000000004833         movsxd     rax, dword [rcx+rdx*4]
0000000000004837         add        rax, rcx
000000000000483a         jmp        rax
                        ; endp
000000000000483c         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_10: int, 24
        ;    arg_8: int, 16
        ;    arg_7: int8_t, 15
        ;    arg_5: int8_t, 13
        ;    arg_0: int, 8


                     sub_4840:
0000000000004840         xor        r10d, r10d
0000000000004843         cmp        byte [rsp+arg_5], 0x0
0000000000004848         jne        loc_463e

000000000000484e         nop

                     loc_4850:
0000000000004850         mov        edx, 0x5c                                   ; CODE XREF=sub_45b0+136, sub_45b0+147
0000000000004855         mov        ebx, 0x5c
000000000000485a         jmp        sub_45b0+68
                        ; endp
000000000000485f         align      32


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4860:
0000000000004860         mov        edx, 0xc
0000000000004865         xor        r10d, r10d
0000000000004868         mov        ebx, 0x66
000000000000486d         jmp        sub_45b0+68
                        ; endp
0000000000004872         nop        word [rax+rax]
0000000000004878         mov        edx, 0xa
000000000000487d         xor        r10d, r10d
0000000000004880         mov        ebx, 0x6e
0000000000004885         jmp        sub_45b0+50
000000000000488a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4890:
0000000000004890         mov        ebx, 0x61
0000000000004895         jmp        sub_45b0+176
                        ; endp
000000000000489a         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_48a0:
00000000000048a0         xor        r10d, r10d
                        ; endp

                     loc_48a3:
00000000000048a3         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_46d0+5
00000000000048a8         sete       dl
00000000000048ab         cmp        byte [rsp+arg_7], 0x0
00000000000048b0         jne        loc_544a

00000000000048b6         mov        eax, r8d
00000000000048b9         mov        rcx, r15
00000000000048bc         xor        eax, 0x1
00000000000048bf         and        al, dl
00000000000048c1         je         loc_48f0

00000000000048c3         cmp        r13, r15
00000000000048c6         jbe        loc_48cd

00000000000048c8         mov        byte [r14+r15], 0x27

                     loc_48cd:
00000000000048cd         lea        rcx, qword [r15+1]                          ; CODE XREF=sub_48a0+38
00000000000048d1         cmp        r13, rcx
00000000000048d4         jbe        loc_48dc

00000000000048d6         mov        byte [r14+r15+1], 0x24

                     loc_48dc:
00000000000048dc         lea        rcx, qword [r15+2]                          ; CODE XREF=sub_48a0+52
00000000000048e0         cmp        r13, rcx
00000000000048e3         ja         loc_4f19

                     loc_48e9:
00000000000048e9         lea        rcx, qword [r15+3]                          ; CODE XREF=sub_4a00+1311
00000000000048ed         mov        r8d, eax

                     loc_48f0:
00000000000048f0         cmp        r13, rcx                                    ; CODE XREF=sub_48a0+33
00000000000048f3         jbe        loc_48fa

00000000000048f5         mov        byte [r14+rcx], 0x5c

                     loc_48fa:
00000000000048fa         cmp        dword [rsp+arg_0], 0x2                      ; CODE XREF=sub_48a0+83
00000000000048ff         lea        r15, qword [rcx+1]
0000000000004903         je         loc_4f09

0000000000004909         lea        rax, qword [rbp+1]
000000000000490d         cmp        rax, r11
0000000000004910         jae        loc_492b

0000000000004912         mov        rax, qword [rsp+arg_8]
0000000000004917         movzx      eax, byte [rax+rbp+1]
000000000000491c         mov        byte [rsp+arg_20], al
0000000000004920         sub        eax, 0x30
0000000000004923         cmp        al, 0x9
0000000000004925         jbe        loc_5159

                     loc_492b:
000000000000492b         mov        eax, r12d                                   ; CODE XREF=sub_48a0+112
000000000000492e         mov        ebx, 0x30
0000000000004933         xor        r12d, r12d
0000000000004936         jmp        sub_44b0+56
                        ; endp
000000000000493b         align      64


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8


                     sub_4940:
0000000000004940         cmp        dword [rsp+arg_0], 0x2
0000000000004945         mov        r12d, r10d
0000000000004948         sete       dl
000000000000494b         xor        r10d, r10d
000000000000494e         xor        eax, eax
0000000000004950         jmp        sub_44b0+56
                        ; endp
0000000000004955         nop        dword [rax]
0000000000004958         cmp        dword [rsp+8], 0x2
000000000000495d         sete       dl
0000000000004960         xor        r10d, r10d
0000000000004963         jmp        sub_4720+8
0000000000004968         nop        dword [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_4970:
0000000000004970         cmp        dword [rsp+8], 0x2
0000000000004975         sete       dl
0000000000004978         xor        r10d, r10d
000000000000497b         xor        r12d, r12d
000000000000497e         jmp        sub_4720+17
                        ; endp
0000000000004983         nop        dword [rax+rax]
0000000000004988         cmp        dword [rsp+8], 0x2
000000000000498d         mov        r12d, r10d
0000000000004990         mov        ebx, 0x20
0000000000004995         sete       dl
0000000000004998         xor        r10d, r10d
000000000000499b         jmp        sub_4720+17


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_49a0:
00000000000049a0         mov        edx, 0xd
00000000000049a5         xor        r10d, r10d
00000000000049a8         mov        ebx, 0x72
00000000000049ad         jmp        sub_45b0+50
                        ; endp
00000000000049b2         nop        word [rax+rax]
00000000000049b8         mov        ebx, 0x76
00000000000049bd         jmp        sub_45b0+176
00000000000049c2         nop        word [rax+rax]
00000000000049c8         mov        edx, 0x9
00000000000049cd         xor        r10d, r10d
00000000000049d0         mov        ebx, 0x74
00000000000049d5         jmp        sub_45b0+50
00000000000049da         nop        word [rax+rax]


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_49e0:
00000000000049e0         mov        ebx, 0x62
00000000000049e5         jmp        sub_45b0+176
                        ; endp
00000000000049ea         nop        word [rax+rax]

                     loc_49f0:
00000000000049f0         xor        r10d, r10d                                  ; CODE XREF=quotearg_buffer_restyled+376, quotearg_buffer_restyled+433
00000000000049f3         jmp        loc_4490
00000000000049f8         align      512


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_7: int8_t, 15


                     sub_4a00:
0000000000004a00         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_45b0+125
0000000000004a05         jne        loc_5370

0000000000004a0b         add        rbp, 0x1
0000000000004a0f         mov        eax, r8d
0000000000004a12         xor        r12d, r12d
0000000000004a15         mov        ebx, 0x5c
0000000000004a1a         jmp        sub_44b0+124
                        ; endp
0000000000004a1f         align      32

                     loc_4a20:
0000000000004a20         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+261
0000000000004a25         movzx      ebx, byte [rsp+0xe8+var_D9]
0000000000004a2a         mov        r12d, r8d
0000000000004a2d         mov        rbp, r11
0000000000004a30         sete       dl
0000000000004a33         mov        eax, ebx
0000000000004a35         test       r15, r15
0000000000004a38         sete       cl
0000000000004a3b         and        eax, edx
0000000000004a3d         and        al, cl
0000000000004a3f         jne        loc_54a6

0000000000004a45         mov        eax, ebx
0000000000004a47         xor        eax, 0x1
0000000000004a4a         and        dl, al
0000000000004a4c         je         loc_53bc

0000000000004a52         cmp        byte [rsp+0xe8+var_6C], 0x0
0000000000004a57         je         loc_53ba

0000000000004a5d         cmp        byte [rsp+0xe8+var_DA], 0x0
0000000000004a62         jne        loc_545d

0000000000004a68         test       r13, r13
0000000000004a6b         sete       al
0000000000004a6e         cmp        qword [rsp+0xe8+var_98], 0x0
0000000000004a74         setne      dl
0000000000004a77         and        al, dl
0000000000004a79         je         loc_549c

0000000000004a7f         mov        r13, qword [rsp+0xe8+var_98]

                     loc_4a84:
0000000000004a84         lea        rbx, qword [aLibs+29]                       ; 0xb98d, CODE XREF=sub_4a00+2781
0000000000004a8b         mov        byte [r14], 0x27
0000000000004a8f         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000004a97         mov        r15d, 0x1
0000000000004a9d         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004aa6         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004aab         mov        qword [rsp+0xe8+var_A0], rbx
0000000000004ab0         mov        byte [rsp+0xe8+var_6C], al
0000000000004ab4         jmp        loc_4393
0000000000004ab9         align      64

                     loc_4ac0:
0000000000004ac0         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_45b0+8
0000000000004ac5         jne        sub_4a00+2416

0000000000004acb         test       r13, r13
0000000000004ace         je         loc_4ed0

0000000000004ad4         xor        edx, edx
0000000000004ad6         cmp        qword [rsp+arg_48], 0x0
0000000000004adc         jne        loc_4ed0

                     loc_4ae2:
0000000000004ae2         mov        qword [rsp+arg_48], r13                     ; CODE XREF=sub_4a00+1284, sub_4a00+2794
0000000000004ae7         add        r15, 0x3
0000000000004aeb         xor        eax, eax
0000000000004aed         mov        byte [rsp+arg_74], r12b
0000000000004af2         xor        r8d, r8d
0000000000004af5         mov        r13, rdx
0000000000004af8         mov        ebx, 0x27
0000000000004afd         jmp        sub_44b0+105
                        ; endp
0000000000004b02         align      8

                     loc_4b08:
0000000000004b08         test       byte [rsp+arg_70], 0x4                      ; CODE XREF=sub_4580+19
0000000000004b0d         je         loc_4b30

0000000000004b0f         lea        rcx, qword [rbp+2]
0000000000004b13         cmp        rcx, r11
0000000000004b16         jae        loc_4b30

0000000000004b18         mov        rax, qword [rsp+arg_8]
0000000000004b1d         cmp        byte [rax+rbp+1], 0x3f
0000000000004b22         je         loc_52b2

0000000000004b28         nop        dword [rax+rax]

                     loc_4b30:
0000000000004b30         xor        edx, edx                                    ; CODE XREF=sub_4a00+269, sub_4a00+278, sub_4a00+2233, sub_4a00+2253
0000000000004b32         xor        r12d, r12d
0000000000004b35         xor        eax, eax
0000000000004b37         mov        ebx, 0x3f
0000000000004b3c         jmp        sub_44b0+56
                        ; endp
0000000000004b41         align      8

                     loc_4b48:
0000000000004b48         cmp        byte [rsp+arg_7], 0x0                       ; CODE XREF=sub_4580+10
0000000000004b4d         jne        sub_4a00+2416

0000000000004b53         xor        r12d, r12d
0000000000004b56         xor        eax, eax
0000000000004b58         mov        ebx, 0x3f
0000000000004b5d         jmp        sub_44b0+105
                        ; endp
0000000000004b62         align      8

                     loc_4b68:
0000000000004b68         lea        rax, qword [rsp+0xe8+var_48]                ; CODE XREF=sub_47a0+30
0000000000004b70         cmp        r11, 0xffffffffffffffff
0000000000004b74         mov        qword [rsp+0xe8+var_48], 0x0
0000000000004b80         mov        qword [rsp+0xe8+var_C0], rax
0000000000004b85         jne        loc_4bb4

0000000000004b87         mov        rdi, qword [rsp+0xe8+var_D8]                ; argument "__s" for method j_strlen
0000000000004b8c         mov        byte [rsp+0xe8+var_A8], r8b
0000000000004b91         mov        byte [rsp+0xe8+var_B0], r10b
0000000000004b96         mov        qword [rsp+0xe8+var_B8], r9
0000000000004b9b         call       j_strlen                                    ; strlen
0000000000004ba0         movzx      r8d, byte [rsp+0xe8+var_A8]
0000000000004ba6         movzx      r10d, byte [rsp+0xe8+var_B0]
0000000000004bac         mov        r11, rax
0000000000004baf         mov        r9, qword [rsp+0xe8+var_B8]

                     loc_4bb4:
0000000000004bb4         lea        rax, qword [rsp+0xe8+var_4C]                ; CODE XREF=sub_4a00+389
0000000000004bbc         xor        ecx, ecx
0000000000004bbe         mov        byte [rsp+0xe8+var_6A], bl
0000000000004bc2         mov        byte [rsp+0xe8+var_6B], r8b
0000000000004bc7         mov        rbx, rcx
0000000000004bca         mov        qword [rsp+0xe8+var_60], r9
0000000000004bd2         mov        qword [rsp+0xe8+var_B0], rax
0000000000004bd7         mov        byte [rsp+0xe8+var_69], r10b
0000000000004bdc         mov        qword [rsp+0xe8+var_68], r15
0000000000004be4         mov        qword [rsp+0xe8+var_A8], r14
0000000000004be9         mov        qword [rsp+0xe8+var_78], r13
0000000000004bee         mov        qword [rsp+0xe8+var_B8], r11

                     loc_4bf3:
0000000000004bf3         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=sub_4a00+623
0000000000004bf8         lea        r14, qword [rbp+rbx]
0000000000004bfd         mov        rdx, qword [rsp+0xe8+var_B8]
0000000000004c02         mov        rcx, qword [rsp+0xe8+var_C0]
0000000000004c07         mov        rdi, qword [rsp+0xe8+var_B0]
0000000000004c0c         lea        r13, qword [rax+r14]
0000000000004c10         sub        rdx, r14
0000000000004c13         mov        rsi, r13
0000000000004c16         call       rpl_mbrtowc                                 ; rpl_mbrtowc
0000000000004c1b         test       rax, rax
0000000000004c1e         mov        r15, rax
0000000000004c21         je         loc_4c71

0000000000004c23         cmp        rax, 0xffffffffffffffff
0000000000004c27         je         loc_5245

0000000000004c2d         cmp        rax, 0xfffffffffffffffe
0000000000004c31         je         loc_51d1

0000000000004c37         cmp        dword [rsp+0xe8+var_E0], 0x2
0000000000004c3c         sete       al
0000000000004c3f         and        al, byte [rsp+0xe8+var_D9]
0000000000004c43         jne        loc_4de0

                     loc_4c49:
0000000000004c49         mov        edi, dword [rsp+0xe8+var_4C]                ; argument "__wc" for method j_iswprint, CODE XREF=sub_4a00+996, sub_4a00+1031
0000000000004c50         call       j_iswprint                                  ; iswprint
0000000000004c55         mov        rdi, qword [rsp+0xe8+var_C0]                ; argument "__ps" for method j_mbsinit
0000000000004c5a         test       eax, eax
0000000000004c5c         mov        eax, 0x0
0000000000004c61         cmove      r12d, eax
0000000000004c65         add        rbx, r15
0000000000004c68         call       j_mbsinit                                   ; mbsinit
0000000000004c6d         test       eax, eax
0000000000004c6f         je         loc_4bf3

                     loc_4c71:
0000000000004c71         mov        edx, r12d                                   ; CODE XREF=sub_4a00+545
0000000000004c74         mov        rdi, rbx
0000000000004c77         movzx      r8d, byte [rsp+0xe8+var_6B]
0000000000004c7d         xor        edx, 0x1
0000000000004c80         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000004c85         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000004c8b         and        dl, byte [rsp+0xe8+var_DB]
0000000000004c8f         mov        r15, qword [rsp+0xe8+var_68]
0000000000004c97         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004c9c         mov        r13, qword [rsp+0xe8+var_78]
0000000000004ca1         mov        r11, qword [rsp+0xe8+var_B8]

                     loc_4ca6:
0000000000004ca6         cmp        rdi, 0x1                                    ; CODE XREF=sub_4a00+2112, sub_4a00+2168
0000000000004caa         jbe        loc_52ab

                     loc_4cb0:
0000000000004cb0         mov        rcx, rdi                                    ; CODE XREF=sub_4a00+1961
0000000000004cb3         xor        esi, esi
0000000000004cb5         movzx      r9d, byte [rsp+0xe8+var_D9]
0000000000004cbb         add        rcx, rbp
0000000000004cbe         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000004cc3         jmp        loc_4d7e
0000000000004cc8         align      16

                     loc_4cd0:
0000000000004cd0         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_4a00+896
0000000000004cd5         sete       al
0000000000004cd8         test       r9b, r9b
0000000000004cdb         jne        loc_5190

0000000000004ce1         mov        esi, r8d
0000000000004ce4         xor        esi, 0x1
0000000000004ce7         and        al, sil
0000000000004cea         je         loc_4d1b

0000000000004cec         cmp        r13, r15
0000000000004cef         jbe        loc_4cf6

0000000000004cf1         mov        byte [r14+r15], 0x27

                     loc_4cf6:
0000000000004cf6         lea        rsi, qword [r15+1]                          ; CODE XREF=sub_4a00+751
0000000000004cfa         cmp        r13, rsi
0000000000004cfd         jbe        loc_4d05

0000000000004cff         mov        byte [r14+r15+1], 0x24

                     loc_4d05:
0000000000004d05         lea        rsi, qword [r15+2]                          ; CODE XREF=sub_4a00+765
0000000000004d09         cmp        r13, rsi
0000000000004d0c         jbe        loc_4d14

0000000000004d0e         mov        byte [r14+r15+2], 0x27

                     loc_4d14:
0000000000004d14         add        r15, 0x3                                    ; CODE XREF=sub_4a00+780
0000000000004d18         mov        r8d, eax

                     loc_4d1b:
0000000000004d1b         cmp        r13, r15                                    ; CODE XREF=sub_4a00+746
0000000000004d1e         jbe        loc_4d25

0000000000004d20         mov        byte [r14+r15], 0x5c

                     loc_4d25:
0000000000004d25         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4a00+798
0000000000004d29         cmp        r13, rax
0000000000004d2c         jbe        loc_4d3b

0000000000004d2e         mov        eax, ebx
0000000000004d30         shr        al, 0x6
0000000000004d33         add        eax, 0x30
0000000000004d36         mov        byte [r14+r15+1], al

                     loc_4d3b:
0000000000004d3b         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4a00+812
0000000000004d3f         cmp        r13, rax
0000000000004d42         jbe        loc_4d54

0000000000004d44         mov        eax, ebx
0000000000004d46         shr        al, 0x3
0000000000004d49         and        eax, 0x7
0000000000004d4c         add        eax, 0x30
0000000000004d4f         mov        byte [r14+r15+2], al

                     loc_4d54:
0000000000004d54         and        ebx, 0x7                                    ; CODE XREF=sub_4a00+834
0000000000004d57         add        rbp, 0x1
0000000000004d5b         add        r15, 0x3
0000000000004d5f         add        ebx, 0x30
0000000000004d62         cmp        rbp, rcx
0000000000004d65         jae        loc_4550

0000000000004d6b         mov        esi, edx

                     loc_4d6d:
0000000000004d6d         cmp        r13, r15                                    ; CODE XREF=sub_4a00+985, sub_4a00+1969
0000000000004d70         jbe        loc_4d76

0000000000004d72         mov        byte [r14+r15], bl

                     loc_4d76:
0000000000004d76         movzx      ebx, byte [rdi+rbp]                         ; CODE XREF=sub_4a00+880
0000000000004d7a         add        r15, 0x1

                     loc_4d7e:
0000000000004d7e         test       dl, dl                                      ; CODE XREF=sub_4a00+707
0000000000004d80         jne        loc_4cd0

0000000000004d86         mov        eax, esi
0000000000004d88         xor        eax, 0x1
0000000000004d8b         and        eax, r8d
0000000000004d8e         test       r10b, r10b
0000000000004d91         je         loc_4da1

0000000000004d93         cmp        r13, r15
0000000000004d96         jbe        loc_4d9d

0000000000004d98         mov        byte [r14+r15], 0x5c

                     loc_4d9d:
0000000000004d9d         add        r15, 0x1                                    ; CODE XREF=sub_4a00+918

                     loc_4da1:
0000000000004da1         add        rbp, 0x1                                    ; CODE XREF=sub_4a00+913
0000000000004da5         cmp        rbp, rcx
0000000000004da8         jae        loc_452c

0000000000004dae         test       al, al
0000000000004db0         je         loc_51ae

0000000000004db6         cmp        r13, r15
0000000000004db9         jbe        loc_4dc0

0000000000004dbb         mov        byte [r14+r15], 0x27

                     loc_4dc0:
0000000000004dc0         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4a00+953
0000000000004dc4         cmp        r13, rax
0000000000004dc7         jbe        loc_4dcf

0000000000004dc9         mov        byte [r14+r15+1], 0x27

                     loc_4dcf:
0000000000004dcf         add        r15, 0x2                                    ; CODE XREF=sub_4a00+967
0000000000004dd3         xor        r10d, r10d
0000000000004dd6         xor        r8d, r8d
0000000000004dd9         jmp        loc_4d6d
0000000000004ddb         align      32

                     loc_4de0:
0000000000004de0         cmp        r15, 0x1                                    ; CODE XREF=sub_4a00+579
0000000000004de4         je         loc_4c49

0000000000004dea         mov        rdi, qword [rsp+0xe8+var_D8]
0000000000004def         lea        rcx, qword [rdi+r15]
0000000000004df3         lea        rdx, qword [rdi+r14+1]
0000000000004df8         lea        r8, qword [rcx+r14]
0000000000004dfc         jmp        loc_4e0d
0000000000004dfe         align      512

                     loc_4e00:
0000000000004e00         add        rdx, 0x1                                    ; CODE XREF=sub_4a00+1046, sub_4a00+1072
0000000000004e04         cmp        r8, rdx
0000000000004e07         je         loc_4c49

                     loc_4e0d:
0000000000004e0d         movzx      ecx, byte [rdx]                             ; CODE XREF=sub_4a00+1020
0000000000004e10         sub        ecx, 0x5b
0000000000004e13         cmp        cl, 0x21
0000000000004e16         ja         loc_4e00

0000000000004e18         mov        esi, 0x1
0000000000004e1d         shl        rsi, cl
0000000000004e20         mov        rcx, rsi
0000000000004e23         movabs     rsi, 0x20000002b
0000000000004e2d         test       rcx, rsi
0000000000004e30         je         loc_4e00

0000000000004e32         mov        r14, qword [rsp+0xe8+var_A8]
0000000000004e37         mov        r13, qword [rsp+0xe8+var_78]
0000000000004e3c         mov        rbp, qword [rsp+0xe8+var_B8]
0000000000004e41         mov        dword [rsp+0xe8+var_E0], 0x2

                     loc_4e49:
0000000000004e49         cmp        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_4a00+1227, sub_4a00+1948, sub_4a00+2585, sub_4a00+2734
0000000000004e4e         je         loc_4e60

0000000000004e50         test       al, al
0000000000004e52         mov        eax, 0x4
0000000000004e57         cmove      eax, dword [rsp+0xe8+var_E0]
0000000000004e5c         mov        dword [rsp+0xe8+var_E0], eax

                     loc_4e60:
0000000000004e60         sub        rsp, 0x8                                    ; CODE XREF=sub_4a00+1102
0000000000004e64         mov        rcx, rbp
0000000000004e67         mov        rsi, r13
0000000000004e6a         push       qword [rsp+0xf0+var_88]
0000000000004e6e         push       qword [rsp+0xf8+var_80]
0000000000004e72         mov        rdi, r14
0000000000004e75         push       0x0
0000000000004e77         mov        r9d, dword [rsp+0x108+var_70]
0000000000004e7f         mov        r8d, dword [rsp+0x108+var_E0]
0000000000004e84         mov        rdx, qword [rsp+0x108+var_D8]
0000000000004e89         and        r9d, 0xfffffffd
0000000000004e8d         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000004e92         add        rsp, 0x20
0000000000004e96         mov        r15, rax

                     loc_4e99:
0000000000004e99         mov        rbx, qword [rsp+0xe8+var_40]                ; CODE XREF=sub_4a00+2549, sub_4a00+2560, sub_4a00+2711
0000000000004ea1         xor        rbx, qword [fs:0x28]
0000000000004eaa         mov        rax, r15
0000000000004ead         jne        loc_54b3

0000000000004eb3         add        rsp, 0xb8
0000000000004eba         pop        rbx
0000000000004ebb         pop        rbp
0000000000004ebc         pop        r12
0000000000004ebe         pop        r13
0000000000004ec0         pop        r14
0000000000004ec2         pop        r15
0000000000004ec4         ret
                        ; endp
0000000000004ec5         align      8

                     loc_4ec8:
0000000000004ec8         mov        rbp, r11                                    ; CODE XREF=sub_45b0+194
0000000000004ecb         jmp        loc_4e49

                     loc_4ed0:
0000000000004ed0         cmp        r13, r15                                    ; CODE XREF=sub_4a00+206, sub_4a00+220
0000000000004ed3         jbe        loc_4eda

0000000000004ed5         mov        byte [r14+r15], 0x27

                     loc_4eda:
0000000000004eda         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4a00+1235
0000000000004ede         cmp        r13, rax
0000000000004ee1         jbe        loc_4ee9

0000000000004ee3         mov        byte [r14+r15+1], 0x5c

                     loc_4ee9:
0000000000004ee9         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4a00+1249
0000000000004eed         cmp        r13, rax
0000000000004ef0         jbe        loc_54e2

0000000000004ef6         mov        rdx, r13
0000000000004ef9         mov        byte [r14+r15+2], 0x27
0000000000004eff         mov        r13, qword [rsp+arg_48]
0000000000004f04         jmp        loc_4ae2

                     loc_4f09:
0000000000004f09         mov        eax, r12d                                   ; CODE XREF=sub_48a0+99
0000000000004f0c         mov        ebx, 0x30
0000000000004f11         xor        r12d, r12d
0000000000004f14         jmp        sub_44b0+105
                        ; endp

                     loc_4f19:
0000000000004f19         mov        byte [r14+r15+2], 0x27                      ; CODE XREF=sub_48a0+67
0000000000004f1f         jmp        loc_48e9

                     loc_4f24:
0000000000004f24         test       ebx, ebx                                    ; case 4, CODE XREF=quotearg_buffer_restyled+145
0000000000004f26         jne        loc_4353

0000000000004f2c         mov        byte [rsp+0xe8+var_DB], 0x1

                     loc_4f31:
0000000000004f31         test       r13, r13                                    ; CODE XREF=sub_4a00+2749
0000000000004f34         jne        loc_54ca

0000000000004f3a         lea        rax, qword [aLibs+29]                       ; 0xb98d
0000000000004f41         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004f4a         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004f4f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004f54         xor        r12d, r12d
0000000000004f57         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004f5c         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004f65         mov        qword [rsp+0xe8+var_A0], rax
0000000000004f6a         mov        r15d, 0x1
0000000000004f70         mov        dword [rsp+0xe8+var_E0], 0x2
0000000000004f78         jmp        loc_4393
0000000000004f7d         align      128

                     loc_4f80:
0000000000004f80         test       ebx, ebx                                    ; case 5, CODE XREF=quotearg_buffer_restyled+145
0000000000004f82         jne        loc_537d

0000000000004f88         test       r13, r13
0000000000004f8b         je         loc_51b6

0000000000004f91         mov        byte [r14], 0x22
0000000000004f95         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004f9a         xor        r12d, r12d
0000000000004f9d         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004fa2         mov        qword [rsp+0xe8+var_98], 0x0

                     loc_4fab:
0000000000004fab         lea        rax, qword [aLibs+27]                       ; 0xb98b, CODE XREF=sub_4a00+1996
0000000000004fb2         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000004fb7         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004fbc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000004fc5         mov        r15d, 0x1
0000000000004fcb         mov        qword [rsp+0xe8+var_A0], rax
0000000000004fd0         jmp        loc_4393

                     loc_4fd5:
0000000000004fd5         lea        rax, qword [aLibs+27]                       ; case 6, 0xb98b, CODE XREF=quotearg_buffer_restyled+145
0000000000004fdc         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000004fe1         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000004fe6         xor        r12d, r12d
0000000000004fe9         mov        qword [rsp+0xe8+var_98], 0x0
0000000000004ff2         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000004ff7         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000004ffc         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005005         xor        r15d, r15d
0000000000005008         mov        qword [rsp+0xe8+var_A0], rax
000000000000500d         mov        dword [rsp+0xe8+var_E0], 0x5
0000000000005015         jmp        loc_4393

                     loc_501a:
000000000000501a         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 7, CODE XREF=quotearg_buffer_restyled+145
000000000000501f         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005024         xor        r12d, r12d
0000000000005027         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005030         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000005035         xor        r15d, r15d
0000000000005038         mov        byte [rsp+0xe8+var_DB], 0x1
000000000000503d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000005046         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000504f         jmp        loc_4393

                     loc_5054:
0000000000005054         cmp        dword [rsp+0xe8+var_E0], 0xa                ; case 10, CODE XREF=quotearg_buffer_restyled+145
0000000000005059         je         loc_50b1

000000000000505b         lea        rsi, qword [aLibs+31]                       ; argument "msgid" for method j_dcgettext, 0xb98f
0000000000005062         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005064         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005069         call       j_dcgettext                                 ; dcgettext
000000000000506e         mov        rcx, rax
0000000000005071         mov        qword [rsp+0xe8+var_80], rax
0000000000005076         lea        rax, qword [aLibs+31]                       ; 0xb98f
000000000000507d         cmp        rcx, rax
0000000000005080         je         loc_541e

                     loc_5086:
0000000000005086         lea        rsi, qword [aLibs+29]                       ; argument "msgid" for method j_dcgettext, 0xb98d, CODE XREF=sub_4a00+2607
000000000000508d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000508f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005094         call       j_dcgettext                                 ; dcgettext
0000000000005099         mov        rcx, rax
000000000000509c         mov        qword [rsp+0xe8+var_88], rax
00000000000050a1         lea        rax, qword [aLibs+29]                       ; 0xb98d
00000000000050a8         cmp        rcx, rax
00000000000050ab         je         loc_5434

                     loc_50b1:
00000000000050b1         xor        r15d, r15d                                  ; CODE XREF=sub_4a00+1625, sub_4a00+2629
00000000000050b4         test       ebx, ebx
00000000000050b6         je         loc_527d

                     loc_50bc:
00000000000050bc         test       ebx, ebx                                    ; CODE XREF=sub_4a00+2183, sub_4a00+2214
00000000000050be         mov        rbx, qword [rsp+0xe8+var_88]
00000000000050c3         setne      byte [rsp+0xe8+var_D9]
00000000000050c8         xor        r12d, r12d
00000000000050cb         mov        rdi, rbx                                    ; argument "__s" for method j_strlen
00000000000050ce         call       j_strlen                                    ; strlen
00000000000050d3         mov        qword [rsp+0xe8+var_A0], rbx
00000000000050d8         mov        qword [rsp+0xe8+var_D0], rax
00000000000050dd         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000050e2         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000050e7         mov        qword [rsp+0xe8+var_98], 0x0
00000000000050f0         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000050f5         jmp        loc_4393

                     loc_50fa:
00000000000050fa         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 0, CODE XREF=quotearg_buffer_restyled+145
00000000000050ff         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005104         xor        r12d, r12d
0000000000005107         mov        qword [rsp+0xe8+var_98], 0x0
0000000000005110         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000005115         xor        r15d, r15d
0000000000005118         mov        byte [rsp+0xe8+var_DB], 0x0
000000000000511d         mov        qword [rsp+0xe8+var_D0], 0x0
0000000000005126         mov        qword [rsp+0xe8+var_A0], 0x0
000000000000512f         jmp        loc_4393

                     loc_5134:
0000000000005134         mov        byte [rsp+0xe8+var_DA], 0x1                 ; case 3, CODE XREF=quotearg_buffer_restyled+145
0000000000005139         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000513e         xor        r12d, r12d
0000000000005141         mov        qword [rsp+0xe8+var_98], 0x0
000000000000514a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000514f         mov        byte [rsp+0xe8+var_DB], 0x1
0000000000005154         jmp        loc_4373

                     loc_5159:
0000000000005159         cmp        r13, r15                                    ; CODE XREF=sub_48a0+133
000000000000515c         jbe        loc_5163

000000000000515e         mov        byte [r14+r15], 0x30

                     loc_5163:
0000000000005163         lea        rax, qword [rcx+2]                          ; CODE XREF=sub_4a00+1884
0000000000005167         cmp        r13, rax
000000000000516a         jbe        loc_5172

000000000000516c         mov        byte [r14+rcx+2], 0x30

                     loc_5172:
0000000000005172         mov        eax, r12d                                   ; CODE XREF=sub_4a00+1898
0000000000005175         lea        r15, qword [rcx+3]
0000000000005179         xor        r12d, r12d
000000000000517c         mov        ebx, 0x30
0000000000005181         jmp        sub_44b0+56
                        ; endp
0000000000005186         align      16

                     loc_5190:
0000000000005190         movzx      ebx, byte [rsp+0xe8+var_D9]                 ; CODE XREF=sub_4a00+731
0000000000005195         mov        rbp, r11
0000000000005198         mov        byte [rsp+0xe8+var_DB], bl
000000000000519c         jmp        loc_4e49

                     loc_51a1:
00000000000051a1         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_47a0+105
00000000000051a6         xor        r12d, r12d
00000000000051a9         jmp        loc_4cb0

                     loc_51ae:
00000000000051ae         xor        r10d, r10d                                  ; CODE XREF=sub_4a00+944
00000000000051b1         jmp        loc_4d6d

                     loc_51b6:
00000000000051b6         mov        qword [rsp+0xe8+var_98], 0x0                ; CODE XREF=sub_4a00+1419
00000000000051bf         mov        byte [rsp+0xe8+var_DA], 0x1
00000000000051c4         xor        r12d, r12d
00000000000051c7         mov        byte [rsp+0xe8+var_6C], 0x0
00000000000051cc         jmp        loc_4fab

                     loc_51d1:
00000000000051d1         mov        r11, qword [rsp+0xe8+var_B8]                ; CODE XREF=sub_4a00+561
00000000000051d6         mov        rsi, r14
00000000000051d9         mov        rcx, r13
00000000000051dc         mov        rax, rbx
00000000000051df         mov        rdi, rbx
00000000000051e2         movzx      r8d, byte [rsp+0xe8+var_6B]
00000000000051e8         movzx      ebx, byte [rsp+0xe8+var_6A]
00000000000051ed         mov        r9, qword [rsp+0xe8+var_60]
00000000000051f5         cmp        rsi, r11
00000000000051f8         movzx      r10d, byte [rsp+0xe8+var_69]
00000000000051fe         mov        r15, qword [rsp+0xe8+var_68]
0000000000005206         mov        r14, qword [rsp+0xe8+var_A8]
000000000000520b         mov        r13, qword [rsp+0xe8+var_78]
0000000000005210         jae        loc_5238

0000000000005212         cmp        byte [rcx], 0x0
0000000000005215         jne        loc_5227

0000000000005217         jmp        loc_5238
0000000000005219         align      32

                     loc_5220:
0000000000005220         cmp        byte [r9+rax], 0x0                          ; CODE XREF=sub_4a00+2099
0000000000005225         je         loc_5235

                     loc_5227:
0000000000005227         add        rax, 0x1                                    ; CODE XREF=sub_4a00+2069
000000000000522b         lea        rdx, qword [rbp+rax]
0000000000005230         cmp        r11, rdx
0000000000005233         ja         loc_5220

                     loc_5235:
0000000000005235         mov        rdi, rax                                    ; CODE XREF=sub_4a00+2085

                     loc_5238:
0000000000005238         movzx      edx, byte [rsp+0xe8+var_DB]                 ; CODE XREF=sub_4a00+2064, sub_4a00+2071
000000000000523d         xor        r12d, r12d
0000000000005240         jmp        loc_4ca6

                     loc_5245:
0000000000005245         mov        rdi, rbx                                    ; CODE XREF=sub_4a00+551
0000000000005248         movzx      r8d, byte [rsp+0xe8+var_6B]
000000000000524e         movzx      ebx, byte [rsp+0xe8+var_6A]
0000000000005253         movzx      r10d, byte [rsp+0xe8+var_69]
0000000000005259         mov        r15, qword [rsp+0xe8+var_68]
0000000000005261         xor        r12d, r12d
0000000000005264         mov        r14, qword [rsp+0xe8+var_A8]
0000000000005269         mov        r13, qword [rsp+0xe8+var_78]
000000000000526e         mov        r11, qword [rsp+0xe8+var_B8]
0000000000005273         movzx      edx, byte [rsp+0xe8+var_DB]
0000000000005278         jmp        loc_4ca6

                     loc_527d:
000000000000527d         mov        rdx, qword [rsp+0xe8+var_80]                ; CODE XREF=sub_4a00+1718
0000000000005282         movzx      eax, byte [rdx]
0000000000005285         test       al, al
0000000000005287         je         loc_50bc

000000000000528d         nop        dword [rax]

                     loc_5290:
0000000000005290         cmp        r13, r15                                    ; CODE XREF=sub_4a00+2212
0000000000005293         jbe        loc_5299

0000000000005295         mov        byte [r14+r15], al

                     loc_5299:
0000000000005299         add        r15, 0x1                                    ; CODE XREF=sub_4a00+2195
000000000000529d         movzx      eax, byte [rdx+r15]
00000000000052a2         test       al, al
00000000000052a4         jne        loc_5290

00000000000052a6         jmp        loc_50bc

                     loc_52ab:
00000000000052ab         mov        eax, edx                                    ; CODE XREF=sub_4a00+682
00000000000052ad         jmp        loc_4807

                     loc_52b2:
00000000000052b2         movzx      ebx, byte [rax+rcx]                         ; CODE XREF=sub_4a00+290
00000000000052b6         cmp        bl, 0x3e
00000000000052b9         ja         loc_4b30

00000000000052bf         movabs     rax, 0x7000a38200000000
00000000000052c9         bt         rax, rbx
00000000000052cd         jae        loc_4b30

00000000000052d3         cmp        byte [rsp+arg_7], 0x0
00000000000052d8         jne        loc_54c2

00000000000052de         cmp        r13, r15
00000000000052e1         jbe        loc_52e8

00000000000052e3         mov        byte [r14+r15], 0x3f

                     loc_52e8:
00000000000052e8         lea        rax, qword [r15+1]                          ; CODE XREF=sub_4a00+2273
00000000000052ec         cmp        r13, rax
00000000000052ef         jbe        loc_52f7

00000000000052f1         mov        byte [r14+r15+1], 0x22

                     loc_52f7:
00000000000052f7         lea        rax, qword [r15+2]                          ; CODE XREF=sub_4a00+2287
00000000000052fb         cmp        r13, rax
00000000000052fe         jbe        loc_5306

0000000000005300         mov        byte [r14+r15+2], 0x22

                     loc_5306:
0000000000005306         lea        rax, qword [r15+3]                          ; CODE XREF=sub_4a00+2302
000000000000530a         cmp        r13, rax
000000000000530d         jbe        loc_5315

000000000000530f         mov        byte [r14+r15+3], 0x3f

                     loc_5315:
0000000000005315         add        r15, 0x4                                    ; CODE XREF=sub_4a00+2317
0000000000005319         xor        edx, edx
000000000000531b         xor        r12d, r12d
000000000000531e         xor        eax, eax
0000000000005320         mov        rbp, rcx
0000000000005323         jmp        sub_44b0+56
                        ; endp

                     loc_5328:
0000000000005328         test       ebx, ebx                                    ; case 2, CODE XREF=quotearg_buffer_restyled+145
000000000000532a         je         loc_54b8

0000000000005330         lea        rax, qword [aLibs+29]                       ; 0xb98d
0000000000005337         mov        byte [rsp+0xe8+var_DA], 0x1
000000000000533c         mov        byte [rsp+0xe8+var_6C], 0x0
0000000000005341         xor        r12d, r12d
0000000000005344         mov        qword [rsp+0xe8+var_98], 0x0
000000000000534d         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000005352         mov        byte [rsp+0xe8+var_DB], 0x0
0000000000005357         mov        qword [rsp+0xe8+var_D0], 0x1
0000000000005360         xor        r15d, r15d
0000000000005363         mov        qword [rsp+0xe8+var_A0], rax
0000000000005368         jmp        loc_4393
000000000000536d         align      16

                     loc_5370:
0000000000005370         mov        rbp, r11                                    ; CODE XREF=sub_4a00+5
0000000000005373         movzx      eax, byte [rsp+arg_7]
0000000000005378         jmp        sub_4a00+1097
                        ; endp

                     loc_537d:
000000000000537d         lea        rax, qword [aLibs+27]                       ; 0xb98b, CODE XREF=sub_4a00+1410
0000000000005384         mov        byte [rsp+0xe8+var_DA], 0x1
0000000000005389         mov        byte [rsp+0xe8+var_6C], 0x0
000000000000538e         xor        r12d, r12d
0000000000005391         mov        qword [rsp+0xe8+var_98], 0x0
000000000000539a         mov        byte [rsp+0xe8+var_D9], 0x1
000000000000539f         mov        byte [rsp+0xe8+var_DB], 0x1
00000000000053a4         mov        qword [rsp+0xe8+var_D0], 0x1
00000000000053ad         xor        r15d, r15d
00000000000053b0         mov        qword [rsp+0xe8+var_A0], rax
00000000000053b5         jmp        loc_4393

                     loc_53ba:
00000000000053ba         mov        eax, edx                                    ; CODE XREF=sub_4a00+87

                     loc_53bc:
00000000000053bc         mov        rbx, qword [rsp+0xe8+var_A0]                ; CODE XREF=sub_4a00+76, sub_4a00+2721
00000000000053c1         test       rbx, rbx
00000000000053c4         je         loc_53f2

00000000000053c6         test       al, al
00000000000053c8         je         loc_53f2

00000000000053ca         movzx      ecx, byte [rbx]
00000000000053cd         mov        rax, rbx
00000000000053d0         test       cl, cl
00000000000053d2         je         loc_53f2

00000000000053d4         mov        rdx, r15
00000000000053d7         sub        rax, r15

                     loc_53da:
00000000000053da         cmp        r13, rdx                                    ; CODE XREF=sub_4a00+2541
00000000000053dd         jbe        loc_53e3

00000000000053df         mov        byte [r14+rdx], cl

                     loc_53e3:
00000000000053e3         add        rdx, 0x1                                    ; CODE XREF=sub_4a00+2525
00000000000053e7         movzx      ecx, byte [rax+rdx]
00000000000053eb         test       cl, cl
00000000000053ed         jne        loc_53da

00000000000053ef         mov        r15, rdx

                     loc_53f2:
00000000000053f2         cmp        r13, r15                                    ; CODE XREF=sub_4a00+2500, sub_4a00+2504, sub_4a00+2514
00000000000053f5         jbe        loc_4e99

00000000000053fb         mov        byte [r14+r15], 0x0
0000000000005400         jmp        loc_4e99

                     loc_5405:
0000000000005405         cmp        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=quotearg_buffer_restyled+450
000000000000540a         movzx      ebx, byte [rsp+0xe8+var_D9]
000000000000540f         mov        rbp, r11
0000000000005412         sete       al
0000000000005415         mov        byte [rsp+0xe8+var_DB], bl
0000000000005419         jmp        loc_4e49

                     loc_541e:
000000000000541e         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4a00+1664
0000000000005422         mov        rdi, rcx
0000000000005425         call       gettext_quote.part.1                        ; gettext_quote.part.1
000000000000542a         mov        qword [rsp+0xe8+var_80], rax
000000000000542f         jmp        loc_5086

                     loc_5434:
0000000000005434         mov        esi, dword [rsp+0xe8+var_E0]                ; CODE XREF=sub_4a00+1707
0000000000005438         mov        rdi, rcx
000000000000543b         call       gettext_quote.part.1                        ; gettext_quote.part.1
0000000000005440         mov        qword [rsp+0xe8+var_88], rax
0000000000005445         jmp        loc_50b1

                     loc_544a:
000000000000544a         movzx      ebx, byte [rsp+arg_7]                       ; CODE XREF=sub_48a0+16
000000000000544f         mov        rbp, r11
0000000000005452         mov        eax, edx
0000000000005454         mov        byte [rsp+arg_5], bl
0000000000005458         jmp        sub_4a00+1097
                        ; endp

                     loc_545d:
000000000000545d         sub        rsp, 0x8                                    ; CODE XREF=sub_4a00+98
0000000000005461         mov        r8d, 0x5
0000000000005467         mov        rcx, r11
000000000000546a         push       qword [rsp+0xf0+var_88]
000000000000546e         push       qword [rsp+0xf8+var_80]
0000000000005472         mov        rdi, r14
0000000000005475         push       qword [rsp+0x100+var_C8]
0000000000005479         mov        r9d, dword [rsp+0x108+var_70]
0000000000005481         mov        rdx, qword [rsp+0x108+var_D8]
0000000000005486         mov        rsi, qword [rsp+0x108+var_98]
000000000000548b         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005490         add        rsp, 0x20
0000000000005494         mov        r15, rax
0000000000005497         jmp        loc_4e99

                     loc_549c:
000000000000549c         movzx      eax, byte [rsp+0xe8+var_6C]                 ; CODE XREF=sub_4a00+121
00000000000054a1         jmp        loc_53bc

                     loc_54a6:
00000000000054a6         mov        dword [rsp+0xe8+var_E0], 0x2                ; CODE XREF=sub_4a00+63
00000000000054ae         jmp        loc_4e49

                     loc_54b3:
00000000000054b3         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=sub_4a00+1197
                        ; endp

                     loc_54b8:
00000000000054b8         mov        byte [rsp+0xe8+var_DB], 0x0                 ; CODE XREF=sub_4a00+2346
00000000000054bd         jmp        loc_4f31

                     loc_54c2:
00000000000054c2         mov        rbp, r11                                    ; CODE XREF=sub_4a00+2264
00000000000054c5         jmp        sub_4a00+1120
                        ; endp

                     loc_54ca:
00000000000054ca         mov        byte [rsp+0xe8+var_DA], 0x1                 ; CODE XREF=sub_4a00+1332
00000000000054cf         xor        eax, eax
00000000000054d1         xor        r12d, r12d
00000000000054d4         mov        qword [rsp+0xe8+var_98], 0x0
00000000000054dd         jmp        loc_4a84

                     loc_54e2:
00000000000054e2         mov        rdx, r13                                    ; CODE XREF=sub_4a00+1264
00000000000054e5         mov        r13, qword [rsp+arg_48]
00000000000054ea         jmp        loc_4ae2

                     loc_54ef:
00000000000054ef         call       j_abort                                     ; abort, CODE XREF=quotearg_buffer_restyled+122
                        ; endp
00000000000054f4         align      256                                         ; End of unwind block (FDE at 0xcd88)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_3C: int32_t, -60
        ;    var_40: int32_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80


                     quotearg_n_options:
0000000000005500         push       r15                                         ; Begin of unwind block (FDE at 0xce00), CODE XREF=quotearg_n+14, quotearg_n_mem+7, quotearg+19, quotearg_mem+15, quotearg_n_style+106, quotearg_n_style_mem+102, quotearg_char_mem+121, quotearg_n_style_colon+106, quotearg_n_custom_mem+109, quote_n_mem+7, quote_mem+15
0000000000005502         push       r14
0000000000005504         movsxd     r15, edi
0000000000005507         push       r13
0000000000005509         push       r12
000000000000550b         mov        r14, rdx
000000000000550e         push       rbp
000000000000550f         push       rbx
0000000000005510         mov        rbp, rcx
0000000000005513         sub        rsp, 0x28
0000000000005517         mov        qword [rsp+0x58+var_50], rsi
000000000000551c         call       j___errno_location                          ; __errno_location
0000000000005521         mov        r13, rax
0000000000005524         mov        eax, dword [rax]
0000000000005526         test       r15d, r15d
0000000000005529         mov        rbx, qword [slotvec]                        ; slotvec
0000000000005530         mov        dword [rsp+0x58+var_40], eax
0000000000005534         js         loc_56a1

000000000000553a         cmp        dword [nslots], r15d                        ; nslots
0000000000005541         jg         loc_55a5

0000000000005543         cmp        r15d, 0x7fffffff
000000000000554a         je         loc_56a6

0000000000005550         lea        r12d, dword [r15+1]
0000000000005554         lea        rax, qword [slotvec0]                       ; slotvec0
000000000000555b         movsxd     rsi, r12d
000000000000555e         shl        rsi, 0x4
0000000000005562         cmp        rbx, rax
0000000000005565         je         loc_5680

000000000000556b         mov        rdi, rbx                                    ; argument #1 for method xrealloc
000000000000556e         call       xrealloc                                    ; xrealloc
0000000000005573         mov        rbx, rax
0000000000005576         mov        qword [slotvec], rax                        ; slotvec

                     loc_557d:
000000000000557d         movsxd     rdi, dword [nslots]                         ; nslots, CODE XREF=quotearg_n_options+412
0000000000005584         mov        edx, r12d
0000000000005587         xor        esi, esi                                    ; argument "__c" for method j_memset
0000000000005589         sub        edx, edi
000000000000558b         shl        rdi, 0x4
000000000000558f         movsxd     rdx, edx
0000000000005592         add        rdi, rbx                                    ; argument "__s" for method j_memset
0000000000005595         shl        rdx, 0x4                                    ; argument "__n" for method j_memset
0000000000005599         call       j_memset                                    ; memset
000000000000559e         mov        dword [nslots], r12d                        ; nslots

                     loc_55a5:
00000000000055a5         mov        eax, dword [rbp+4]                          ; CODE XREF=quotearg_n_options+65
00000000000055a8         shl        r15, 0x4
00000000000055ac         sub        rsp, 0x8
00000000000055b0         add        rbx, r15
00000000000055b3         lea        r15, qword [rbp+8]
00000000000055b7         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
00000000000055bb         mov        r11, qword [rbx]
00000000000055be         mov        r12, qword [rbx+8]
00000000000055c2         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
00000000000055c5         or         eax, 0x1
00000000000055c8         mov        dword [rsp+0x60+var_3C], eax
00000000000055cc         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
00000000000055cf         mov        r9d, eax                                    ; argument #6 for method quotearg_buffer_restyled
00000000000055d2         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
00000000000055d5         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
00000000000055d7         mov        rsi, r11                                    ; argument #2 for method quotearg_buffer_restyled
00000000000055da         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
00000000000055df         mov        rdi, r12                                    ; argument #1 for method quotearg_buffer_restyled
00000000000055e2         mov        qword [rsp+0x78+var_48], r11
00000000000055e7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000055ec         add        rsp, 0x20
00000000000055f0         mov        r11, qword [rsp+0x58+var_48]
00000000000055f5         cmp        r11, rax
00000000000055f8         ja         loc_5661

00000000000055fa         lea        rsi, qword [rax+1]
00000000000055fe         lea        rax, qword [slot0]                          ; slot0
0000000000005605         cmp        r12, rax
0000000000005608         mov        qword [rbx], rsi
000000000000560b         je         loc_561f

000000000000560d         mov        rdi, r12
0000000000005610         mov        qword [rsp+0x58+var_48], rsi
0000000000005615         call       sub_1da0                                    ; sub_1da0
000000000000561a         mov        rsi, qword [rsp+0x58+var_48]

                     loc_561f:
000000000000561f         mov        rdi, rsi                                    ; argument #1 for method xmalloc, CODE XREF=quotearg_n_options+267
0000000000005622         mov        qword [rsp+0x58+var_48], rsi
0000000000005627         call       xmalloc                                     ; xmalloc
000000000000562c         sub        rsp, 0x8
0000000000005630         mov        qword [rbx+8], rax
0000000000005634         mov        r8d, dword [rbp]                            ; argument #5 for method quotearg_buffer_restyled
0000000000005638         push       qword [rbp+0x30]                            ; argument #9 for method quotearg_buffer_restyled
000000000000563b         push       qword [rbp+0x28]                            ; argument #8 for method quotearg_buffer_restyled
000000000000563e         mov        rcx, r14                                    ; argument #4 for method quotearg_buffer_restyled
0000000000005641         push       r15                                         ; argument #7 for method quotearg_buffer_restyled
0000000000005643         mov        r9d, dword [rsp+0x78+var_3C]                ; argument #6 for method quotearg_buffer_restyled
0000000000005648         mov        rdi, rax                                    ; argument #1 for method quotearg_buffer_restyled
000000000000564b         mov        rdx, qword [rsp+0x78+var_50]                ; argument #3 for method quotearg_buffer_restyled
0000000000005650         mov        rsi, qword [rsp+0x78+var_48]                ; argument #2 for method quotearg_buffer_restyled
0000000000005655         mov        r12, rax
0000000000005658         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
000000000000565d         add        rsp, 0x20

                     loc_5661:
0000000000005661         mov        eax, dword [rsp+0x58+var_40]                ; CODE XREF=quotearg_n_options+248
0000000000005665         mov        dword [r13], eax
0000000000005669         add        rsp, 0x28
000000000000566d         mov        rax, r12
0000000000005670         pop        rbx
0000000000005671         pop        rbp
0000000000005672         pop        r12
0000000000005674         pop        r13
0000000000005676         pop        r14
0000000000005678         pop        r15
000000000000567a         ret
                        ; endp
000000000000567b         align      128

                     loc_5680:
0000000000005680         xor        edi, edi                                    ; argument #1 for method xrealloc, CODE XREF=quotearg_n_options+101
0000000000005682         call       xrealloc                                    ; xrealloc
0000000000005687         movdqa     xmm0, xmmword [slotvec0]                    ; slotvec0
000000000000568f         mov        rbx, rax
0000000000005692         mov        qword [slotvec], rax                        ; slotvec
0000000000005699         movups     xmmword [rax], xmm0
000000000000569c         jmp        loc_557d

                     loc_56a1:
00000000000056a1         call       j_abort                                     ; abort, CODE XREF=quotearg_n_options+52
                        ; endp

                     loc_56a6:
00000000000056a6         call       xalloc_die                                  ; xalloc_die, CODE XREF=quotearg_n_options+74
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_56ab:
00000000000056ab         nop        dword [rax+rax]                             ; End of unwind block (FDE at 0xce00)
                     clone_quoting_options:
00000000000056b0         push       r12                                         ; Begin of unwind block (FDE at 0xce6c)
00000000000056b2         push       rbp
00000000000056b3         push       rbx
00000000000056b4         mov        rbx, rdi
00000000000056b7         call       j___errno_location                          ; __errno_location
00000000000056bc         mov        r12d, dword [rax]
00000000000056bf         mov        rbp, rax
00000000000056c2         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000056c9         test       rbx, rbx
00000000000056cc         mov        esi, 0x38                                   ; argument #2 for method xmemdup
00000000000056d1         cmove      rbx, rax
00000000000056d5         mov        rdi, rbx                                    ; argument #1 for method xmemdup
00000000000056d8         call       xmemdup                                     ; xmemdup
00000000000056dd         mov        dword [rbp], r12d
00000000000056e1         pop        rbx
00000000000056e2         pop        rbp
00000000000056e3         pop        r12
00000000000056e5         ret
                        ; endp
00000000000056e6         align      16                                          ; End of unwind block (FDE at 0xce6c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     get_quoting_style:
00000000000056f0         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xce98), default_quoting_options
00000000000056f7         test       rdi, rdi
00000000000056fa         cmove      rdi, rax
00000000000056fe         mov        eax, dword [rdi]
0000000000005700         ret
                        ; endp
0000000000005701         align      16                                          ; End of unwind block (FDE at 0xce98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_style:
0000000000005710         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xceac), default_quoting_options
0000000000005717         test       rdi, rdi
000000000000571a         cmove      rdi, rax
000000000000571e         mov        dword [rdi], esi
0000000000005720         ret
                        ; endp
0000000000005721         align      16                                          ; End of unwind block (FDE at 0xceac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_char_quoting:
0000000000005730         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcec0), default_quoting_options
0000000000005737         test       rdi, rdi
000000000000573a         mov        ecx, esi
000000000000573c         cmove      rdi, rax
0000000000005740         mov        eax, esi
0000000000005742         and        ecx, 0x1f
0000000000005745         shr        al, 0x5
0000000000005748         movzx      eax, al
000000000000574b         lea        rdi, qword [rdi+rax*4+8]
0000000000005750         mov        esi, dword [rdi]
0000000000005752         mov        eax, esi
0000000000005754         shr        eax, cl
0000000000005756         xor        edx, eax
0000000000005758         and        eax, 0x1
000000000000575b         and        edx, 0x1
000000000000575e         shl        edx, cl
0000000000005760         xor        edx, esi
0000000000005762         mov        dword [rdi], edx
0000000000005764         ret
                        ; endp
0000000000005765         align      16                                          ; End of unwind block (FDE at 0xcec0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_quoting_flags:
0000000000005770         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xced4), default_quoting_options
0000000000005777         test       rdi, rdi
000000000000577a         cmove      rdi, rax
000000000000577e         mov        eax, dword [rdi+4]
0000000000005781         mov        dword [rdi+4], esi
0000000000005784         ret
                        ; endp
0000000000005785         align      16                                          ; End of unwind block (FDE at 0xced4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     set_custom_quoting:
0000000000005790         lea        rax, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcee8), default_quoting_options
0000000000005797         test       rdi, rdi
000000000000579a         cmove      rdi, rax
000000000000579e         test       rsi, rsi
00000000000057a1         mov        dword [rdi], 0xa
00000000000057a7         je         loc_57b7

00000000000057a9         test       rdx, rdx
00000000000057ac         je         loc_57b7

00000000000057ae         mov        qword [rdi+0x28], rsi
00000000000057b2         mov        qword [rdi+0x30], rdx
00000000000057b6         ret
                        ; endp

                     loc_57b7:
00000000000057b7         sub        rsp, 0x8                                    ; CODE XREF=set_custom_quoting+23, set_custom_quoting+28
00000000000057bb         call       j_abort                                     ; abort
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64


                     quotearg_buffer:
00000000000057c0         push       r15                                         ; End of unwind block (FDE at 0xcee8), Begin of unwind block (FDE at 0xcefc)
00000000000057c2         push       r14
00000000000057c4         lea        rax, qword [default_quoting_options]        ; default_quoting_options
00000000000057cb         push       r13
00000000000057cd         push       r12
00000000000057cf         mov        r13, rdi
00000000000057d2         push       rbp
00000000000057d3         push       rbx
00000000000057d4         mov        rbx, r8
00000000000057d7         mov        r14, rsi
00000000000057da         mov        r15, rdx
00000000000057dd         sub        rsp, 0x18
00000000000057e1         test       r8, r8
00000000000057e4         cmove      rbx, rax
00000000000057e8         mov        qword [rsp+0x48+var_40], rcx
00000000000057ed         call       j___errno_location                          ; __errno_location
00000000000057f2         mov        r12d, dword [rax]
00000000000057f5         mov        rbp, rax
00000000000057f8         lea        rax, qword [rbx+8]
00000000000057fc         sub        rsp, 0x8
0000000000005800         mov        r9d, dword [rbx+4]
0000000000005804         push       qword [rbx+0x30]
0000000000005807         mov        r8d, dword [rbx]
000000000000580a         push       qword [rbx+0x28]
000000000000580d         mov        rdx, r15
0000000000005810         push       rax
0000000000005811         mov        rcx, qword [rsp+0x68+var_40]
0000000000005816         mov        rsi, r14
0000000000005819         mov        rdi, r13
000000000000581c         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
0000000000005821         mov        dword [rbp], r12d
0000000000005825         add        rsp, 0x38
0000000000005829         pop        rbx
000000000000582a         pop        rbp
000000000000582b         pop        r12
000000000000582d         pop        r13
000000000000582f         pop        r14
0000000000005831         pop        r15
0000000000005833         ret
                        ; endp
0000000000005834         align      64                                          ; End of unwind block (FDE at 0xcefc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_5C: int32_t, -92


                     quotearg_alloc_mem:
0000000000005840         push       r15                                         ; Begin of unwind block (FDE at 0xcf50), CODE XREF=quotearg_alloc+5
0000000000005842         push       r14
0000000000005844         lea        rax, qword [default_quoting_options]        ; default_quoting_options
000000000000584b         push       r13
000000000000584d         push       r12
000000000000584f         mov        r12, rdx
0000000000005852         push       rbp
0000000000005853         push       rbx
0000000000005854         mov        rbx, rcx
0000000000005857         mov        r14, rdi
000000000000585a         mov        r15, rsi
000000000000585d         sub        rsp, 0x38
0000000000005861         test       rcx, rcx
0000000000005864         cmove      rbx, rax
0000000000005868         xor        ebp, ebp
000000000000586a         call       j___errno_location                          ; __errno_location
000000000000586f         test       r12, r12
0000000000005872         mov        r13, rax
0000000000005875         mov        eax, dword [rax]
0000000000005877         sete       bpl
000000000000587b         or         ebp, dword [rbx+4]
000000000000587e         lea        r10, qword [rbx+8]
0000000000005882         sub        rsp, 0x8
0000000000005886         mov        r8d, dword [rbx]
0000000000005889         mov        rcx, r15
000000000000588c         mov        dword [rsp+0x70+var_5C], eax
0000000000005890         push       qword [rbx+0x30]
0000000000005893         mov        rdx, r14
0000000000005896         push       qword [rbx+0x28]
0000000000005899         push       r10
000000000000589b         xor        esi, esi
000000000000589d         mov        r9d, ebp
00000000000058a0         xor        edi, edi
00000000000058a2         mov        qword [rsp+0x88+var_48], r10
00000000000058a7         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000058ac         lea        rsi, qword [rax+1]
00000000000058b0         mov        qword [rsp+0x88+var_40], rax
00000000000058b5         add        rsp, 0x20
00000000000058b9         mov        rdi, rsi
00000000000058bc         mov        qword [rsp+0x68+var_50], rsi
00000000000058c1         call       xmalloc                                     ; xmalloc
00000000000058c6         mov        qword [rsp+0x68+var_58], rax
00000000000058cb         sub        rsp, 0x8
00000000000058cf         push       qword [rbx+0x30]
00000000000058d2         push       qword [rbx+0x28]
00000000000058d5         mov        r10, qword [rsp+0x80+var_48]
00000000000058da         mov        r9d, ebp
00000000000058dd         mov        r8d, dword [rbx]
00000000000058e0         mov        rcx, r15
00000000000058e3         mov        rdx, r14
00000000000058e6         mov        rdi, rax
00000000000058e9         push       r10
00000000000058eb         mov        rsi, qword [rsp+0x88+var_50]
00000000000058f0         call       quotearg_buffer_restyled                    ; quotearg_buffer_restyled
00000000000058f5         mov        eax, dword [rsp+0x88+var_5C]
00000000000058f9         add        rsp, 0x20
00000000000058fd         test       r12, r12
0000000000005900         mov        dword [r13], eax
0000000000005904         je         loc_590f

0000000000005906         mov        r11, qword [rsp+0x68+var_40]
000000000000590b         mov        qword [r12], r11

                     loc_590f:
000000000000590f         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=quotearg_alloc_mem+196
0000000000005914         add        rsp, 0x38
0000000000005918         pop        rbx
0000000000005919         pop        rbp
000000000000591a         pop        r12
000000000000591c         pop        r13
000000000000591e         pop        r14
0000000000005920         pop        r15
0000000000005922         ret
                        ; endp
0000000000005923         align      16                                          ; End of unwind block (FDE at 0xcf50)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_alloc:
0000000000005930         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xcfbc)
0000000000005933         xor        edx, edx
0000000000005935         jmp        quotearg_alloc_mem                          ; quotearg_alloc_mem
                        ; endp
000000000000593a         align      64                                          ; End of unwind block (FDE at 0xcfbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_free:
0000000000005940         mov        eax, dword [nslots]                         ; Begin of unwind block (FDE at 0xcfd0), nslots
0000000000005946         push       r12
0000000000005948         mov        r12, qword [slotvec]                        ; slotvec
000000000000594f         push       rbp
0000000000005950         push       rbx
0000000000005951         cmp        eax, 0x1
0000000000005954         jle        loc_5981

0000000000005956         sub        eax, 0x2
0000000000005959         lea        rbx, qword [r12+0x18]
000000000000595e         shl        rax, 0x4
0000000000005962         lea        rbp, qword [r12+rax+0x28]
0000000000005967         nop        word [rax+rax]

                     loc_5970:
0000000000005970         mov        rdi, qword [rbx]                            ; CODE XREF=quotearg_free+63
0000000000005973         add        rbx, 0x10
0000000000005977         call       sub_1da0                                    ; sub_1da0
000000000000597c         cmp        rbx, rbp
000000000000597f         jne        loc_5970

                     loc_5981:
0000000000005981         mov        rdi, qword [r12+8]                          ; CODE XREF=quotearg_free+20
0000000000005986         lea        rbx, qword [slot0]                          ; slot0
000000000000598d         cmp        rdi, rbx
0000000000005990         je         loc_59a9

0000000000005992         call       sub_1da0                                    ; sub_1da0
0000000000005997         mov        qword [slotvec0], 0x100                     ; slotvec0
00000000000059a2         mov        qword [slotvec0+8], rbx                     ; 0x20f098

                     loc_59a9:
00000000000059a9         lea        rbx, qword [slotvec0]                       ; slotvec0, CODE XREF=quotearg_free+80
00000000000059b0         cmp        r12, rbx
00000000000059b3         je         loc_59c4

00000000000059b5         mov        rdi, r12
00000000000059b8         call       sub_1da0                                    ; sub_1da0
00000000000059bd         mov        qword [slotvec], rbx                        ; slotvec

                     loc_59c4:
00000000000059c4         pop        rbx                                         ; CODE XREF=quotearg_free+115
00000000000059c5         mov        dword [nslots], 0x1                         ; nslots
00000000000059cf         pop        rbp
00000000000059d0         pop        r12
00000000000059d2         ret
                        ; endp
00000000000059d3         align      32                                          ; End of unwind block (FDE at 0xcfd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n:
00000000000059e0         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xcffc), default_quoting_options
00000000000059e7         mov        rdx, 0xffffffffffffffff
00000000000059ee         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
00000000000059f3         align      512                                         ; End of unwind block (FDE at 0xcffc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_mem:
0000000000005a00         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xd010), default_quoting_options
0000000000005a07         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005a0c         align      16                                          ; End of unwind block (FDE at 0xd010)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg:
0000000000005a10         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xd024), default_quoting_options
0000000000005a17         mov        rsi, rdi
0000000000005a1a         mov        rdx, 0xffffffffffffffff
0000000000005a21         xor        edi, edi
0000000000005a23         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005a28         align      16                                          ; End of unwind block (FDE at 0xd024)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_mem:
0000000000005a30         lea        rcx, qword [default_quoting_options]        ; Begin of unwind block (FDE at 0xd038), default_quoting_options
0000000000005a37         mov        rdx, rsi
0000000000005a3a         mov        rsi, rdi
0000000000005a3d         xor        edi, edi
0000000000005a3f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005a44         align      16                                          ; End of unwind block (FDE at 0xd038)

                     quotearg_n_style:
0000000000005a50         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd04c), CODE XREF=main+1139, sub_3510+40, sub_3510+65, sub_3510+87, sub_3510+213, sub_3510+231, sub_3510+593, sub_3510+612, argmatch_invalid+64, quotearg_style+7
0000000000005a54         mov        rax, rdx
0000000000005a57         mov        rdx, qword [fs:0x28]
0000000000005a60         mov        qword [rsp+0x48+var_10], rdx
0000000000005a65         xor        edx, edx
0000000000005a67         cmp        esi, 0xa
0000000000005a6a         je         loc_5ad4

0000000000005a6c         mov        dword [rsp+0x48+var_48], esi
0000000000005a6f         mov        rcx, rsp
0000000000005a72         mov        rdx, 0xffffffffffffffff
0000000000005a79         mov        rsi, rax
0000000000005a7c         mov        qword [rsp+0x48+var_44], 0x0
0000000000005a85         mov        qword [rsp+0x48+var_3C], 0x0
0000000000005a8e         mov        qword [rsp+0x48+var_34], 0x0
0000000000005a97         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005aa0         mov        qword [rsp+0x48+var_24], 0x0
0000000000005aa9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005ab2         mov        dword [rsp+0x48+var_14], 0x0
0000000000005aba         call       quotearg_n_options                          ; quotearg_n_options
0000000000005abf         mov        rcx, qword [rsp+0x48+var_10]
0000000000005ac4         xor        rcx, qword [fs:0x28]
0000000000005acd         jne        loc_5ad9

0000000000005acf         add        rsp, 0x48
0000000000005ad3         ret
                        ; endp

                     loc_5ad4:
0000000000005ad4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style+26
                        ; endp

                     loc_5ad9:
0000000000005ad9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style+125
                        ; endp
0000000000005ade         align      32                                          ; End of unwind block (FDE at 0xd04c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_mem:
0000000000005ae0         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd068), CODE XREF=quotearg_style_mem+10
0000000000005ae4         mov        rax, rdx
0000000000005ae7         mov        rdx, rcx
0000000000005aea         mov        rcx, qword [fs:0x28]
0000000000005af3         mov        qword [rsp+0x48+var_10], rcx
0000000000005af8         xor        ecx, ecx
0000000000005afa         cmp        esi, 0xa
0000000000005afd         je         loc_5b60

0000000000005aff         mov        dword [rsp+0x48+var_48], esi
0000000000005b02         mov        rcx, rsp
0000000000005b05         mov        rsi, rax
0000000000005b08         mov        qword [rsp+0x48+var_44], 0x0
0000000000005b11         mov        qword [rsp+0x48+var_3C], 0x0
0000000000005b1a         mov        qword [rsp+0x48+var_34], 0x0
0000000000005b23         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005b2c         mov        qword [rsp+0x48+var_24], 0x0
0000000000005b35         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005b3e         mov        dword [rsp+0x48+var_14], 0x0
0000000000005b46         call       quotearg_n_options                          ; quotearg_n_options
0000000000005b4b         mov        rdx, qword [rsp+0x48+var_10]
0000000000005b50         xor        rdx, qword [fs:0x28]
0000000000005b59         jne        loc_5b65

0000000000005b5b         add        rsp, 0x48
0000000000005b5f         ret
                        ; endp

                     loc_5b60:
0000000000005b60         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_mem+29
                        ; endp

                     loc_5b65:
0000000000005b65         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_mem+121
                        ; endp
0000000000005b6a         align      16                                          ; End of unwind block (FDE at 0xd068)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_style:
0000000000005b70         mov        rdx, rsi                                    ; Begin of unwind block (FDE at 0xd084), CODE XREF=main+1118, main+1290, main+1414, excise+212, excise+321, prompt+421, prompt+649, prompt+849, prompt+939, prompt+962, sub_32f0+334
0000000000005b73         mov        esi, edi
0000000000005b75         xor        edi, edi
0000000000005b77         jmp        quotearg_n_style                            ; quotearg_n_style
0000000000005b7c         align      128                                         ; End of unwind block (FDE at 0xd084)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_style_mem:
0000000000005b80         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xd098)
0000000000005b83         mov        rdx, rsi
0000000000005b86         mov        esi, edi
0000000000005b88         xor        edi, edi
0000000000005b8a         jmp        quotearg_n_style_mem                        ; quotearg_n_style_mem
                        ; endp
0000000000005b8f         align      16                                          ; End of unwind block (FDE at 0xd098)

                     quotearg_char_mem:
0000000000005b90         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd0ac), CODE XREF=quotearg_char+11
0000000000005b94         mov        ecx, edx
0000000000005b96         mov        rax, qword [fs:0x28]
0000000000005b9f         mov        qword [rsp+0x48+var_10], rax
0000000000005ba4         xor        eax, eax
0000000000005ba6         mov        rax, qword [qword_20f250]                   ; qword_20f250
0000000000005bad         mov        r8, rsp
0000000000005bb0         and        ecx, 0x1f
0000000000005bb3         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000005bbb         mov        qword [rsp+0x48+var_18], rax
0000000000005bc0         mov        eax, edx
0000000000005bc2         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000005bc6         shr        al, 0x5
0000000000005bc9         movzx      eax, al
0000000000005bcc         lea        r9, qword [r8+rax*4+8]
0000000000005bd1         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20f230
0000000000005bd9         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000005bde         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20f240
0000000000005be6         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000005beb         mov        edx, dword [r9]
0000000000005bee         mov        eax, edx
0000000000005bf0         shr        eax, cl
0000000000005bf2         not        eax
0000000000005bf4         and        eax, 0x1
0000000000005bf7         shl        eax, cl
0000000000005bf9         mov        rcx, r8
0000000000005bfc         xor        eax, edx
0000000000005bfe         mov        rdx, rsi
0000000000005c01         mov        rsi, rdi
0000000000005c04         mov        dword [r9], eax
0000000000005c07         xor        edi, edi
0000000000005c09         call       quotearg_n_options                          ; quotearg_n_options
0000000000005c0e         mov        rsi, qword [rsp+0x48+var_10]
0000000000005c13         xor        rsi, qword [fs:0x28]
0000000000005c1c         jne        loc_5c23

0000000000005c1e         add        rsp, 0x48
0000000000005c22         ret
                        ; endp

                     loc_5c23:
0000000000005c23         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_char_mem+140
                        ; endp
0000000000005c28         align      16                                          ; End of unwind block (FDE at 0xd0ac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: -72


                     quotearg_char:
0000000000005c30         movsx      edx, sil                                    ; Begin of unwind block (FDE at 0xd0c8)
0000000000005c34         mov        rsi, 0xffffffffffffffff
0000000000005c3b         jmp        quotearg_char_mem                           ; quotearg_char_mem


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon:
0000000000005c40         mov        edx, 0x3a                                   ; End of unwind block (FDE at 0xd0c8), Begin of unwind block (FDE at 0xd0dc), CODE XREF=close_stdin+133, close_stdout+101
0000000000005c45         mov        rsi, 0xffffffffffffffff
0000000000005c4c         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000005c51         align      32                                          ; End of unwind block (FDE at 0xd0dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_colon_mem:
0000000000005c60         mov        edx, 0x3a                                   ; Begin of unwind block (FDE at 0xd0f0)
0000000000005c65         jmp        quotearg_char_mem                           ; quotearg_char_mem
                        ; endp
0000000000005c6a         align      16                                          ; End of unwind block (FDE at 0xd0f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_14: int32_t, -20
        ;    var_1C: int64_t, -28
        ;    var_24: int64_t, -36
        ;    var_2C: int64_t, -44
        ;    var_34: int64_t, -52
        ;    var_3C: int64_t, -60
        ;    var_44: int64_t, -68
        ;    var_48: int32_t, -72


                     quotearg_n_style_colon:
0000000000005c70         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd104), CODE XREF=sub_3130+11, sub_3280+11, sub_3510+882
0000000000005c74         mov        rax, rdx
0000000000005c77         mov        rdx, qword [fs:0x28]
0000000000005c80         mov        qword [rsp+0x48+var_10], rdx
0000000000005c85         xor        edx, edx
0000000000005c87         cmp        esi, 0xa
0000000000005c8a         je         loc_5cf4

0000000000005c8c         mov        dword [rsp+0x48+var_48], esi
0000000000005c8f         mov        rcx, rsp
0000000000005c92         mov        rdx, 0xffffffffffffffff
0000000000005c99         mov        rsi, rax
0000000000005c9c         mov        qword [rsp+0x48+var_44], 0x0
0000000000005ca5         mov        qword [rsp+0x48+var_3C], 0x4000000
0000000000005cae         mov        qword [rsp+0x48+var_34], 0x0
0000000000005cb7         mov        qword [rsp+0x48+var_2C], 0x0
0000000000005cc0         mov        qword [rsp+0x48+var_24], 0x0
0000000000005cc9         mov        qword [rsp+0x48+var_1C], 0x0
0000000000005cd2         mov        dword [rsp+0x48+var_14], 0x0
0000000000005cda         call       quotearg_n_options                          ; quotearg_n_options
0000000000005cdf         mov        rcx, qword [rsp+0x48+var_10]
0000000000005ce4         xor        rcx, qword [fs:0x28]
0000000000005ced         jne        loc_5cf9

0000000000005cef         add        rsp, 0x48
0000000000005cf3         ret
                        ; endp

                     loc_5cf4:
0000000000005cf4         call       j_abort                                     ; abort, CODE XREF=quotearg_n_style_colon+26
                        ; endp

                     loc_5cf9:
0000000000005cf9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_style_colon+125
                        ; endp
0000000000005cfe         align      256                                         ; End of unwind block (FDE at 0xd104)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32
        ;    var_28: -40
        ;    var_38: -56
        ;    var_48: int32_t, -72


                     quotearg_n_custom_mem:
0000000000005d00         sub        rsp, 0x48                                   ; Begin of unwind block (FDE at 0xd120), CODE XREF=quotearg_n_custom+7, quotearg_custom+18, quotearg_custom_mem+14
0000000000005d04         mov        r9, rcx
0000000000005d07         mov        rcx, qword [qword_20f250]                   ; qword_20f250
0000000000005d0e         movdqa     xmm0, xmmword [default_quoting_options]     ; default_quoting_options
0000000000005d16         mov        rax, qword [fs:0x28]
0000000000005d1f         mov        qword [rsp+0x48+var_10], rax
0000000000005d24         xor        eax, eax
0000000000005d26         movaps     xmmword [rsp+0x48+var_48], xmm0
0000000000005d2a         test       rsi, rsi
0000000000005d2d         mov        qword [rsp+0x48+var_18], rcx
0000000000005d32         mov        dword [rsp+0x48+var_48], 0xa
0000000000005d39         movdqa     xmm0, xmmword [default_quoting_options+16]  ; 0x20f230
0000000000005d41         movaps     xmmword [rsp+0x48+var_38], xmm0
0000000000005d46         movdqa     xmm0, xmmword [default_quoting_options+32]  ; 0x20f240
0000000000005d4e         movaps     xmmword [rsp+0x48+var_28], xmm0
0000000000005d53         je         loc_5d87

0000000000005d55         test       rdx, rdx
0000000000005d58         je         loc_5d87

0000000000005d5a         mov        qword [rsp+0x48+var_20], rsi
0000000000005d5f         mov        qword [rsp+0x48+var_18], rdx
0000000000005d64         mov        rcx, rsp
0000000000005d67         mov        rdx, r8
0000000000005d6a         mov        rsi, r9
0000000000005d6d         call       quotearg_n_options                          ; quotearg_n_options
0000000000005d72         mov        rdi, qword [rsp+0x48+var_10]
0000000000005d77         xor        rdi, qword [fs:0x28]
0000000000005d80         jne        loc_5d8c

0000000000005d82         add        rsp, 0x48
0000000000005d86         ret
                        ; endp

                     loc_5d87:
0000000000005d87         call       j_abort                                     ; abort, CODE XREF=quotearg_n_custom_mem+83, quotearg_n_custom_mem+88
                        ; endp

                     loc_5d8c:
0000000000005d8c         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=quotearg_n_custom_mem+128
                        ; endp
0000000000005d91         align      32                                          ; End of unwind block (FDE at 0xd120)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_n_custom:
0000000000005da0         mov        r8, 0xffffffffffffffff                      ; Begin of unwind block (FDE at 0xd13c)
0000000000005da7         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005dac         align      16                                          ; End of unwind block (FDE at 0xd13c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom:
0000000000005db0         mov        rcx, rdx                                    ; Begin of unwind block (FDE at 0xd150)
0000000000005db3         mov        r8, 0xffffffffffffffff
0000000000005dba         mov        rdx, rsi
0000000000005dbd         mov        rsi, rdi
0000000000005dc0         xor        edi, edi
0000000000005dc2         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005dc7         align      16                                          ; End of unwind block (FDE at 0xd150)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quotearg_custom_mem:
0000000000005dd0         mov        r8, rcx                                     ; Begin of unwind block (FDE at 0xd164)
0000000000005dd3         mov        rcx, rdx
0000000000005dd6         mov        rdx, rsi
0000000000005dd9         mov        rsi, rdi
0000000000005ddc         xor        edi, edi
0000000000005dde         jmp        quotearg_n_custom_mem                       ; quotearg_n_custom_mem
                        ; endp
0000000000005de3         align      16                                          ; End of unwind block (FDE at 0xd164)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n_mem:
0000000000005df0         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd178), quote_quoting_options
0000000000005df7         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005dfc         align      512                                         ; End of unwind block (FDE at 0xd178)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_mem:
0000000000005e00         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd18c), quote_quoting_options
0000000000005e07         mov        rdx, rsi
0000000000005e0a         mov        rsi, rdi
0000000000005e0d         xor        edi, edi
0000000000005e0f         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005e14         align      32                                          ; End of unwind block (FDE at 0xd18c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote_n:
0000000000005e20         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd1a0), quote_quoting_options, CODE XREF=argmatch_invalid+46
0000000000005e27         mov        rdx, 0xffffffffffffffff
0000000000005e2e         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005e33         align      64                                          ; End of unwind block (FDE at 0xd1a0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     quote:
0000000000005e40         lea        rcx, qword [quote_quoting_options]          ; Begin of unwind block (FDE at 0xd1b4), quote_quoting_options, CODE XREF=argmatch_valid+90, argmatch_valid+169
0000000000005e47         mov        rsi, rdi
0000000000005e4a         mov        rdx, 0xffffffffffffffff
0000000000005e51         xor        edi, edi
0000000000005e53         jmp        quotearg_n_options                          ; quotearg_n_options
                        ; endp
0000000000005e58         align      32                                          ; End of unwind block (FDE at 0xd1b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_A0: int64_t, -160
        ;    var_A8: int64_t, -168


                     get_root_dev_ino:
0000000000005e60         push       rbx                                         ; Begin of unwind block (FDE at 0xd1cc), CODE XREF=main+1259
0000000000005e61         lea        rsi, qword [aLibs+6]                        ; argument "__filename" for method j___lxstat, 0xb976
0000000000005e68         mov        rbx, rdi
0000000000005e6b         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000005e70         sub        rsp, 0xa0
0000000000005e77         mov        rdx, rsp                                    ; argument "__stat_buf" for method j___lxstat
0000000000005e7a         mov        rax, qword [fs:0x28]
0000000000005e83         mov        qword [rsp+0xa8+var_10], rax
0000000000005e8b         xor        eax, eax
0000000000005e8d         call       j___lxstat                                  ; __lxstat
0000000000005e92         test       eax, eax
0000000000005e94         jne        loc_5ec8

0000000000005e96         mov        rax, qword [rsp+0xa8+var_A0]
0000000000005e9b         mov        qword [rbx], rax
0000000000005e9e         mov        rax, qword [rsp+0xa8+var_A8]
0000000000005ea2         mov        qword [rbx+8], rax
0000000000005ea6         mov        rax, rbx

                     loc_5ea9:
0000000000005ea9         mov        rcx, qword [rsp+0xa8+var_10]                ; CODE XREF=get_root_dev_ino+106
0000000000005eb1         xor        rcx, qword [fs:0x28]
0000000000005eba         jne        loc_5ecc

0000000000005ebc         add        rsp, 0xa0
0000000000005ec3         pop        rbx
0000000000005ec4         ret
                        ; endp
0000000000005ec5         align      8

                     loc_5ec8:
0000000000005ec8         xor        eax, eax                                    ; CODE XREF=get_root_dev_ino+52
0000000000005eca         jmp        loc_5ea9

                     loc_5ecc:
0000000000005ecc         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=get_root_dev_ino+90
                        ; endp
0000000000005ed1         align      32                                          ; End of unwind block (FDE at 0xd1cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88


                     version_etc_arn:
0000000000005ee0         push       r15                                         ; Begin of unwind block (FDE at 0xd1f4), CODE XREF=version_etc_va+75, version_etc+161
0000000000005ee2         push       r14
0000000000005ee4         push       r13
0000000000005ee6         push       r12
0000000000005ee8         mov        r12, r9
0000000000005eeb         push       rbp
0000000000005eec         push       rbx
0000000000005eed         mov        rbp, rdi
0000000000005ef0         mov        rbx, r8
0000000000005ef3         sub        rsp, 0x28
0000000000005ef7         test       rsi, rsi
0000000000005efa         je         loc_6018

0000000000005f00         mov        r8, rdx
0000000000005f03         lea        rdx, qword [aSSSn]                          ; "%s (%s) %s\\n"
0000000000005f0a         mov        r9, rcx
0000000000005f0d         xor        eax, eax
0000000000005f0f         mov        rcx, rsi
0000000000005f12         mov        esi, 0x1
0000000000005f17         call       j___fprintf_chk                             ; __fprintf_chk

                     loc_5f1c:
0000000000005f1c         lea        rsi, qword [aSSn+7]                         ; argument "msgid" for method j_dcgettext, 0xbe5b, CODE XREF=version_etc_arn+337
0000000000005f23         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005f25         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005f2a         call       j_dcgettext                                 ; dcgettext
0000000000005f2f         lea        rdx, qword [version_etc_copyright]          ; "Copyright %s %d Free Software Foundation, Inc."
0000000000005f36         mov        rcx, rax
0000000000005f39         mov        r8d, 0x7e3
0000000000005f3f         mov        esi, 0x1
0000000000005f44         mov        rdi, rbp
0000000000005f47         xor        eax, eax
0000000000005f49         call       j___fprintf_chk                             ; __fprintf_chk
0000000000005f4e         lea        rsi, qword [aNlicenseGplv3G]                ; argument "msgid" for method j_dcgettext, "\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n"
0000000000005f55         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005f57         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005f5c         call       j_dcgettext                                 ; dcgettext
0000000000005f61         mov        rsi, rbp                                    ; argument "__stream" for method j_fputs_unlocked
0000000000005f64         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
0000000000005f67         call       j_fputs_unlocked                            ; fputs_unlocked
0000000000005f6c         cmp        r12, 0x9
0000000000005f70         ja         loc_62b0

0000000000005f76         lea        rdx, qword [switch_table_c12c]              ; switch_table_c12c
0000000000005f7d         movsxd     rax, dword [rdx+r12*4]
0000000000005f81         add        rax, rdx
0000000000005f84         jmp        rax                                         ; switch statement using table at 0xc12c, with 10 cases, 0x5f90,0x6006,0x6040,0x6098,0x60d8,0x6120,0x6170,0x61c8,0x61f8,0x6260
0000000000005f86         align      16

                     loc_5f90:
0000000000005f90         mov        r9, qword [rbx+0x38]                        ; case 8, CODE XREF=version_etc_arn+164
0000000000005f94         mov        rax, qword [rbx+0x10]
0000000000005f98         lea        rsi, qword [aWrittenBySSSns_c040]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n"
0000000000005f9f         mov        r8, qword [rbx+8]
0000000000005fa3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000005fa8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000005faa         mov        r13, qword [rbx+0x30]
0000000000005fae         mov        r12, qword [rbx+0x28]
0000000000005fb2         mov        qword [rsp+0x58+var_48], r9
0000000000005fb7         mov        r15, qword [rbx+0x20]
0000000000005fbb         mov        r14, qword [rbx+0x18]
0000000000005fbf         mov        qword [rsp+0x58+var_58], rax
0000000000005fc3         mov        qword [rsp+0x58+var_50], r8
0000000000005fc8         mov        rbx, qword [rbx]
0000000000005fcb         call       j_dcgettext                                 ; dcgettext
0000000000005fd0         sub        rsp, 0x8

                     loc_5fd4:
0000000000005fd4         mov        r9, qword [rsp+0x60+var_48]                 ; CODE XREF=version_etc_arn+432
0000000000005fd9         mov        rdx, rax
0000000000005fdc         mov        rcx, rbx
0000000000005fdf         mov        esi, 0x1
0000000000005fe4         mov        rdi, rbp
0000000000005fe7         xor        eax, eax
0000000000005fe9         push       r9
0000000000005feb         push       r13
0000000000005fed         push       r12
0000000000005fef         push       r15
0000000000005ff1         push       r14
0000000000005ff3         mov        r9, qword [rsp+0x88+var_58]
0000000000005ff8         mov        r8, qword [rsp+0x88+var_50]
0000000000005ffd         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006002         add        rsp, 0x30

                     loc_6006:
0000000000006006         add        rsp, 0x28                                   ; case 0, CODE XREF=version_etc_arn+164
000000000000600a         pop        rbx
000000000000600b         pop        rbp
000000000000600c         pop        r12
000000000000600e         pop        r13
0000000000006010         pop        r14
0000000000006012         pop        r15
0000000000006014         ret
                        ; endp
0000000000006015         align      8

                     loc_6018:
0000000000006018         mov        r8, rcx                                     ; CODE XREF=version_etc_arn+26
000000000000601b         mov        rcx, rdx
000000000000601e         lea        rdx, qword [aSSn]                           ; "%s %s\\n"
0000000000006025         mov        esi, 0x1
000000000000602a         xor        eax, eax
000000000000602c         call       j___fprintf_chk                             ; __fprintf_chk
0000000000006031         jmp        loc_5f1c
0000000000006036         align      64

                     loc_6040:
0000000000006040         mov        r10, qword [rbx+0x40]                       ; case 9, CODE XREF=version_etc_arn+164
0000000000006044         mov        r9, qword [rbx+0x38]
0000000000006048         lea        rsi, qword [aWrittenBySSSns]                ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n"
000000000000604f         mov        rax, qword [rbx+0x10]
0000000000006053         mov        r8, qword [rbx+8]
0000000000006057         mov        edx, 0x5
000000000000605c         mov        r13, qword [rbx+0x30]
0000000000006060         mov        r12, qword [rbx+0x28]
0000000000006064         mov        r15, qword [rbx+0x20]
0000000000006068         mov        r14, qword [rbx+0x18]
000000000000606c         mov        rbx, qword [rbx]
000000000000606f         mov        qword [rsp+0x58+var_40], r10
0000000000006074         mov        qword [rsp+0x58+var_48], r9
0000000000006079         mov        qword [rsp+0x58+var_58], rax
000000000000607d         mov        qword [rsp+0x58+var_50], r8

                     loc_6082:
0000000000006082         xor        edi, edi                                    ; argument "domain" for method j_dcgettext, CODE XREF=version_etc_arn+1042
0000000000006084         call       j_dcgettext                                 ; dcgettext
0000000000006089         mov        r10, qword [rsp+0x58+var_40]
000000000000608e         push       r10
0000000000006090         jmp        loc_5fd4
0000000000006095         align      8

                     loc_6098:
0000000000006098         mov        rbx, qword [rbx]                            ; case 1, CODE XREF=version_etc_arn+164
000000000000609b         lea        rsi, qword [aWrittenBySn]                   ; argument "msgid" for method j_dcgettext, "Written by %s.\\n"
00000000000060a2         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000060a7         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000060a9         call       j_dcgettext                                 ; dcgettext
00000000000060ae         add        rsp, 0x28
00000000000060b2         mov        rcx, rbx
00000000000060b5         mov        rdi, rbp
00000000000060b8         pop        rbx
00000000000060b9         pop        rbp
00000000000060ba         pop        r12
00000000000060bc         pop        r13
00000000000060be         pop        r14
00000000000060c0         pop        r15
00000000000060c2         mov        rdx, rax
00000000000060c5         mov        esi, 0x1
00000000000060ca         xor        eax, eax
00000000000060cc         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
00000000000060d1         align      8

                     loc_60d8:
00000000000060d8         mov        r12, qword [rbx+8]                          ; case 2, CODE XREF=version_etc_arn+164
00000000000060dc         lea        rsi, qword [aWrittenBySAndS]                ; argument "msgid" for method j_dcgettext, "Written by %s and %s.\\n"
00000000000060e3         mov        rbx, qword [rbx]
00000000000060e6         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000060eb         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000060ed         call       j_dcgettext                                 ; dcgettext
00000000000060f2         add        rsp, 0x28
00000000000060f6         mov        r8, r12
00000000000060f9         mov        rcx, rbx
00000000000060fc         mov        rdi, rbp
00000000000060ff         mov        rdx, rax
0000000000006102         mov        esi, 0x1
0000000000006107         pop        rbx
0000000000006108         pop        rbp
0000000000006109         pop        r12
000000000000610b         pop        r13
000000000000610d         pop        r14
000000000000610f         pop        r15
0000000000006111         xor        eax, eax
0000000000006113         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006118         align      32

                     loc_6120:
0000000000006120         mov        r13, qword [rbx+0x10]                       ; case 3, CODE XREF=version_etc_arn+164
0000000000006124         mov        r12, qword [rbx+8]
0000000000006128         lea        rsi, qword [aWrittenBySSAnd]                ; argument "msgid" for method j_dcgettext, "Written by %s, %s, and %s.\\n"
000000000000612f         mov        rbx, qword [rbx]
0000000000006132         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006137         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006139         call       j_dcgettext                                 ; dcgettext
000000000000613e         add        rsp, 0x28
0000000000006142         mov        r9, r13
0000000000006145         mov        r8, r12
0000000000006148         mov        rcx, rbx
000000000000614b         mov        rdi, rbp
000000000000614e         mov        rdx, rax
0000000000006151         pop        rbx
0000000000006152         pop        rbp
0000000000006153         pop        r12
0000000000006155         pop        r13
0000000000006157         pop        r14
0000000000006159         pop        r15
000000000000615b         mov        esi, 0x1
0000000000006160         xor        eax, eax
0000000000006162         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
0000000000006167         align      16

                     loc_6170:
0000000000006170         lea        rsi, qword [aWrittenBySSSna]                ; case 4, argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\nand %s.\\n", CODE XREF=version_etc_arn+164
0000000000006177         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000617c         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000617e         mov        r14, qword [rbx+0x18]
0000000000006182         mov        r13, qword [rbx+0x10]
0000000000006186         mov        r12, qword [rbx+8]
000000000000618a         mov        rbx, qword [rbx]
000000000000618d         call       j_dcgettext                                 ; dcgettext
0000000000006192         sub        rsp, 0x8

                     loc_6196:
0000000000006196         push       r14                                         ; CODE XREF=version_etc_arn+784
0000000000006198         mov        rdx, rax
000000000000619b         mov        r9, r13
000000000000619e         mov        r8, r12
00000000000061a1         mov        rcx, rbx
00000000000061a4         mov        rdi, rbp
00000000000061a7         mov        esi, 0x1
00000000000061ac         xor        eax, eax
00000000000061ae         call       j___fprintf_chk                             ; __fprintf_chk
00000000000061b3         pop        rax
00000000000061b4         pop        rdx
00000000000061b5         add        rsp, 0x28
00000000000061b9         pop        rbx
00000000000061ba         pop        rbp
00000000000061bb         pop        r12
00000000000061bd         pop        r13
00000000000061bf         pop        r14
00000000000061c1         pop        r15
00000000000061c3         ret
                        ; endp
00000000000061c4         align      8

                     loc_61c8:
00000000000061c8         mov        r15, qword [rbx+0x20]                       ; case 5, CODE XREF=version_etc_arn+164
00000000000061cc         lea        rsi, qword [aWrittenBySSSns_bfc0]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, and %s.\\n"
00000000000061d3         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000061d8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000061da         mov        r14, qword [rbx+0x18]
00000000000061de         mov        r13, qword [rbx+0x10]
00000000000061e2         mov        r12, qword [rbx+8]
00000000000061e6         mov        rbx, qword [rbx]
00000000000061e9         call       j_dcgettext                                 ; dcgettext
00000000000061ee         push       r15
00000000000061f0         jmp        loc_6196
00000000000061f2         align      8

                     loc_61f8:
00000000000061f8         mov        r8, qword [rbx+8]                           ; case 6, CODE XREF=version_etc_arn+164
00000000000061fc         mov        r12, qword [rbx+0x28]
0000000000006200         lea        rsi, qword [aWrittenBySSSns_bfc0+40]        ; argument "msgid" for method j_dcgettext, 0xbfe8
0000000000006207         mov        r15, qword [rbx+0x20]
000000000000620b         mov        r14, qword [rbx+0x18]
000000000000620f         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
0000000000006214         mov        r13, qword [rbx+0x10]
0000000000006218         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000621a         mov        rbx, qword [rbx]
000000000000621d         mov        qword [rsp+0x58+var_58], r8
0000000000006221         call       j_dcgettext                                 ; dcgettext
0000000000006226         sub        rsp, 0x8
000000000000622a         mov        r9, r13
000000000000622d         push       r12
000000000000622f         push       r15
0000000000006231         push       r14

                     loc_6233:
0000000000006233         mov        r8, qword [rsp+0x78+var_58]                 ; CODE XREF=version_etc_arn+964
0000000000006238         mov        rcx, rbx
000000000000623b         mov        rdx, rax
000000000000623e         mov        rdi, rbp
0000000000006241         mov        esi, 0x1
0000000000006246         xor        eax, eax
0000000000006248         call       j___fprintf_chk                             ; __fprintf_chk
000000000000624d         add        rsp, 0x20
0000000000006251         add        rsp, 0x28
0000000000006255         pop        rbx
0000000000006256         pop        rbp
0000000000006257         pop        r12
0000000000006259         pop        r13
000000000000625b         pop        r14
000000000000625d         pop        r15
000000000000625f         ret
                        ; endp

                     loc_6260:
0000000000006260         mov        r9, qword [rbx+0x10]                        ; case 7, CODE XREF=version_etc_arn+164
0000000000006264         mov        r13, qword [rbx+0x30]
0000000000006268         lea        rsi, qword [aWrittenBySSSns_c010]           ; argument "msgid" for method j_dcgettext, "Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n"
000000000000626f         mov        r12, qword [rbx+0x28]
0000000000006273         mov        r15, qword [rbx+0x20]
0000000000006277         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000627c         mov        r14, qword [rbx+0x18]
0000000000006280         mov        r8, qword [rbx+8]
0000000000006284         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
0000000000006286         mov        qword [rsp+0x58+var_50], r9
000000000000628b         mov        rbx, qword [rbx]
000000000000628e         mov        qword [rsp+0x58+var_58], r8
0000000000006292         call       j_dcgettext                                 ; dcgettext
0000000000006297         push       r13
0000000000006299         push       r12
000000000000629b         push       r15
000000000000629d         push       r14
000000000000629f         mov        r9, qword [rsp+0x78+var_50]
00000000000062a4         jmp        loc_6233
00000000000062a6         align      16

                     loc_62b0:
00000000000062b0         mov        r10, qword [rbx+0x40]                       ; CODE XREF=version_etc_arn+144
00000000000062b4         mov        r9, qword [rbx+0x38]
00000000000062b8         mov        edx, 0x5
00000000000062bd         mov        rax, qword [rbx+0x10]
00000000000062c1         mov        r8, qword [rbx+8]
00000000000062c5         lea        rsi, qword [aWrittenBySSSns_c0a8]           ; "Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n"
00000000000062cc         mov        r13, qword [rbx+0x30]
00000000000062d0         mov        r12, qword [rbx+0x28]
00000000000062d4         mov        r15, qword [rbx+0x20]
00000000000062d8         mov        r14, qword [rbx+0x18]
00000000000062dc         mov        qword [rsp+0x58+var_40], r10
00000000000062e1         mov        qword [rsp+0x58+var_48], r9
00000000000062e6         mov        qword [rsp+0x58+var_58], rax
00000000000062ea         mov        qword [rsp+0x58+var_50], r8
00000000000062ef         mov        rbx, qword [rbx]
00000000000062f2         jmp        loc_6082
00000000000062f7         align      256                                         ; End of unwind block (FDE at 0xd1f4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     version_etc_ar:
0000000000006300         xor        r9d, r9d                                    ; Begin of unwind block (FDE at 0xd308)
0000000000006303         cmp        qword [r8], 0x0
0000000000006307         je         j_version_etc_arn                           ; version_etc_arn

0000000000006309         nop        dword [rax]

                     loc_6310:
0000000000006310         add        r9, 0x1                                     ; CODE XREF=version_etc_ar+25
0000000000006314         cmp        qword [r8+r9*8], 0x0
0000000000006319         jne        loc_6310

                     j_version_etc_arn:        // version_etc_arn
000000000000631b         jmp        version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_ar+7
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16


                     version_etc_va:
0000000000006320         sub        rsp, 0x68                                   ; End of unwind block (FDE at 0xd308), Begin of unwind block (FDE at 0xd31c)
0000000000006324         mov        r10, r8
0000000000006327         xor        r9d, r9d
000000000000632a         mov        rax, qword [fs:0x28]
0000000000006333         mov        qword [rsp+0x68+var_10], rax
0000000000006338         xor        eax, eax
000000000000633a         mov        r8, rsp
000000000000633d         nop        dword [rax]

                     loc_6340:
0000000000006340         mov        eax, dword [r10]                            ; CODE XREF=version_etc_va+73
0000000000006343         cmp        eax, 0x2f
0000000000006346         ja         loc_638a

0000000000006348         mov        r11d, eax
000000000000634b         add        r11, qword [r10+0x10]
000000000000634f         add        eax, 0x8
0000000000006352         mov        dword [r10], eax

                     loc_6355:
0000000000006355         mov        rax, qword [r11]                            ; CODE XREF=version_etc_va+118
0000000000006358         test       rax, rax
000000000000635b         mov        qword [r8+r9*8], rax
000000000000635f         je         loc_636b

0000000000006361         add        r9, 0x1
0000000000006365         cmp        r9, 0xa
0000000000006369         jne        loc_6340

                     loc_636b:
000000000000636b         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc_va+63
0000000000006370         mov        rax, qword [rsp+0x68+var_10]
0000000000006375         xor        rax, qword [fs:0x28]
000000000000637e         jne        loc_6385

0000000000006380         add        rsp, 0x68
0000000000006384         ret
                        ; endp

                     loc_6385:
0000000000006385         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc_va+94
                        ; endp

                     loc_638a:
000000000000638a         mov        r11, qword [r10+8]                          ; CODE XREF=version_etc_va+38
000000000000638e         lea        rax, qword [r11+8]
0000000000006392         mov        qword [r10+8], rax
0000000000006396         jmp        loc_6355
0000000000006398         align      32                                          ; End of unwind block (FDE at 0xd31c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_A8: int8_t, -168
        ;    var_B0: int64_t, -176
        ;    var_B8: int64_t, -184
        ;    var_C0: int32_t, -192


                     version_etc:
00000000000063a0         push       rbp                                         ; Begin of unwind block (FDE at 0xd338), CODE XREF=main+573
00000000000063a1         push       rbx
00000000000063a2         mov        r10d, 0x20
00000000000063a8         xor        r11d, r11d
00000000000063ab         sub        rsp, 0xb8
00000000000063b2         mov        rax, qword [fs:0x28]
00000000000063bb         mov        qword [rsp+0xc8+var_50], rax
00000000000063c0         xor        eax, eax
00000000000063c2         lea        rax, qword [rsp+0xc8+arg_0]
00000000000063ca         mov        qword [rsp+0xc8+var_28], r8
00000000000063d2         lea        rbx, qword [rsp+0xc8+arg_0]
00000000000063da         lea        r8, qword [rsp+0xc8+var_A8]
00000000000063df         mov        qword [rsp+0xc8+var_20], r9
00000000000063e7         mov        dword [rsp+0xc8+var_C0], 0x20
00000000000063ef         mov        qword [rsp+0xc8+var_B8], rax
00000000000063f4         lea        rax, qword [rsp+0xc8+var_48]
00000000000063fc         xor        r9d, r9d
00000000000063ff         mov        qword [rsp+0xc8+var_B0], rax
0000000000006404         mov        rbp, rax
0000000000006407         nop        word [rax+rax]

                     loc_6410:
0000000000006410         cmp        r10d, 0x2f                                  ; CODE XREF=version_etc+154
0000000000006414         ja         loc_646c

0000000000006416         mov        eax, r10d
0000000000006419         mov        r11d, 0x1
000000000000641f         add        r10d, 0x8
0000000000006423         add        rax, rbp

                     loc_6426:
0000000000006426         mov        rax, qword [rax]                            ; CODE XREF=version_etc+211
0000000000006429         test       rax, rax
000000000000642c         mov        qword [r8+r9*8], rax
0000000000006430         je         loc_643c

0000000000006432         add        r9, 0x1
0000000000006436         cmp        r9, 0xa
000000000000643a         jne        loc_6410

                     loc_643c:
000000000000643c         test       r11b, r11b                                  ; CODE XREF=version_etc+144
000000000000643f         jne        loc_6465

                     loc_6441:
0000000000006441         call       version_etc_arn                             ; version_etc_arn, CODE XREF=version_etc+202
0000000000006446         mov        rax, qword [rsp+0xc8+var_50]
000000000000644b         xor        rax, qword [fs:0x28]
0000000000006454         jne        loc_6460

0000000000006456         add        rsp, 0xb8
000000000000645d         pop        rbx
000000000000645e         pop        rbp
000000000000645f         ret
                        ; endp

                     loc_6460:
0000000000006460         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=version_etc+180
                        ; endp

                     loc_6465:
0000000000006465         mov        dword [rsp+0xc8+var_C0], r10d               ; CODE XREF=version_etc+159
000000000000646a         jmp        loc_6441

                     loc_646c:
000000000000646c         mov        rax, rbx                                    ; CODE XREF=version_etc+116
000000000000646f         add        rbx, 0x8
0000000000006473         jmp        loc_6426
0000000000006475         align      128                                         ; End of unwind block (FDE at 0xd338)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     emit_bug_reporting_address:
0000000000006480         push       rbx                                         ; Begin of unwind block (FDE at 0xd364)
0000000000006481         lea        rsi, qword [aNreportBugsToS]                ; argument "msgid" for method j_dcgettext, "\\nReport bugs to: %s\\n"
0000000000006488         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
000000000000648d         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
000000000000648f         call       j_dcgettext                                 ; dcgettext
0000000000006494         lea        rdx, qword [aBugcoreutilsgn]                ; "bug-coreutils@gnu.org"
000000000000649b         mov        rsi, rax
000000000000649e         mov        edi, 0x1
00000000000064a3         xor        eax, eax
00000000000064a5         call       j___printf_chk                              ; __printf_chk
00000000000064aa         lea        rsi, qword [aSHomePageSn]                   ; argument "msgid" for method j_dcgettext, "%s home page: <%s>\\n"
00000000000064b1         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000064b6         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000064b8         call       j_dcgettext                                 ; dcgettext
00000000000064bd         lea        rcx, qword [aHttpswwwgnuorg]                ; "https://www.gnu.org/software/coreutils/"
00000000000064c4         lea        rdx, qword [aNsOnlineHelpSn+23]             ; 0xa99d
00000000000064cb         mov        rsi, rax
00000000000064ce         mov        edi, 0x1
00000000000064d3         xor        eax, eax
00000000000064d5         call       j___printf_chk                              ; __printf_chk
00000000000064da         mov        rbx, qword [stdout@@GLIBC_2.2.5]            ; stdout@@GLIBC_2.2.5
00000000000064e1         lea        rsi, qword [aGeneralHelpUsi]                ; argument "msgid" for method j_dcgettext, "General help using GNU software: <https://www.gnu.org/gethelp/>\\n"
00000000000064e8         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000064ea         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000064ef         call       j_dcgettext                                 ; dcgettext
00000000000064f4         mov        rsi, rbx                                    ; argument "__stream" for method j_fputs_unlocked
00000000000064f7         mov        rdi, rax                                    ; argument "__s" for method j_fputs_unlocked
00000000000064fa         pop        rbx
00000000000064fb         jmp        j_fputs_unlocked                            ; fputs_unlocked
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     can_write_any_file:
0000000000006500         cmp        byte [initialized.3064], 0x0                ; End of unwind block (FDE at 0xd364), Begin of unwind block (FDE at 0xd384), initialized.3064, CODE XREF=prompt+280
0000000000006507         je         loc_6518

0000000000006509         movzx      eax, byte [can_write.3065]                  ; can_write.3065
0000000000006510         ret
                        ; endp
0000000000006511         align      8

                     loc_6518:
0000000000006518         sub        rsp, 0x8                                    ; CODE XREF=can_write_any_file+7
000000000000651c         call       j_geteuid                                   ; geteuid
0000000000006521         test       eax, eax
0000000000006523         mov        byte [initialized.3064], 0x1                ; initialized.3064
000000000000652a         sete       al
000000000000652d         mov        byte [can_write.3065], al                   ; can_write.3065
0000000000006533         add        rsp, 0x8
0000000000006537         ret
                        ; endp
0000000000006538         align      64                                          ; End of unwind block (FDE at 0xd384)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmalloc:
0000000000006540         push       rbx                                         ; Begin of unwind block (FDE at 0xd39c), CODE XREF=quotearg_n_options+295, quotearg_alloc_mem+129, xnmalloc+25, xcharalloc, xzalloc+4, xmemdup+15
0000000000006541         mov        rbx, rdi
0000000000006544         call       j_malloc                                    ; malloc
0000000000006549         test       rax, rax
000000000000654c         jne        loc_6553

000000000000654e         test       rbx, rbx
0000000000006551         jne        loc_6555

                     loc_6553:
0000000000006553         pop        rbx                                         ; CODE XREF=xmalloc+12
0000000000006554         ret
                        ; endp

                     loc_6555:
0000000000006555         call       xalloc_die                                  ; xalloc_die, CODE XREF=xmalloc+17
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_655a:
000000000000655a         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xd39c)
                     xnmalloc:
0000000000006560         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xd3b8)
0000000000006563         mul        rsi
0000000000006566         mov        rdi, rax
0000000000006569         seto       al
000000000000656c         test       rdi, rdi
000000000000656f         js         loc_657b

0000000000006571         movzx      eax, al
0000000000006574         test       rax, rax
0000000000006577         jne        loc_657b

0000000000006579         jmp        xmalloc                                     ; xmalloc
                        ; endp

                     loc_657b:
000000000000657b         sub        rsp, 0x8                                    ; CODE XREF=xnmalloc+15, xnmalloc+23
000000000000657f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6584:
0000000000006584         nop                                                    ; End of unwind block (FDE at 0xd3b8)
0000000000006586         nop        word [cs:rax+rax]
                     xcharalloc:
0000000000006590         jmp        xmalloc                                     ; xmalloc, Begin of unwind block (FDE at 0xd3cc)
                        ; endp
0000000000006592         align      32                                          ; End of unwind block (FDE at 0xd3cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xrealloc:
00000000000065a0         test       rsi, rsi                                    ; Begin of unwind block (FDE at 0xd3e0), CODE XREF=quotearg_n_options+110, quotearg_n_options+386, xnrealloc+25, x2nrealloc+52, x2realloc+40
00000000000065a3         push       rbx
00000000000065a4         mov        rbx, rsi
00000000000065a7         jne        loc_65ae

00000000000065a9         test       rdi, rdi
00000000000065ac         jne        loc_65c8

                     loc_65ae:
00000000000065ae         mov        rsi, rbx                                    ; argument "__size" for method j_realloc, CODE XREF=xrealloc+7
00000000000065b1         call       j_realloc                                   ; realloc
00000000000065b6         test       rax, rax
00000000000065b9         jne        loc_65c0

00000000000065bb         test       rbx, rbx
00000000000065be         jne        loc_65d1

                     loc_65c0:
00000000000065c0         pop        rbx                                         ; CODE XREF=xrealloc+25
00000000000065c1         ret
                        ; endp
00000000000065c2         align      8

                     loc_65c8:
00000000000065c8         call       sub_1da0                                    ; sub_1da0, CODE XREF=xrealloc+12
00000000000065cd         xor        eax, eax
00000000000065cf         pop        rbx
00000000000065d0         ret
                        ; endp

                     loc_65d1:
00000000000065d1         call       xalloc_die                                  ; xalloc_die, CODE XREF=xrealloc+30
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_65d6:
00000000000065d6         nop        word [cs:rax+rax]                           ; End of unwind block (FDE at 0xd3e0)
                     xnrealloc:
00000000000065e0         mov        rax, rsi                                    ; Begin of unwind block (FDE at 0xd404)
00000000000065e3         mul        rdx
00000000000065e6         mov        rsi, rax
00000000000065e9         seto       al
00000000000065ec         test       rsi, rsi
00000000000065ef         js         loc_65fb

00000000000065f1         movzx      eax, al
00000000000065f4         test       rax, rax
00000000000065f7         jne        loc_65fb

00000000000065f9         jmp        xrealloc                                    ; xrealloc
                        ; endp

                     loc_65fb:
00000000000065fb         sub        rsp, 0x8                                    ; CODE XREF=xnrealloc+15, xnrealloc+23
00000000000065ff         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6604:
0000000000006604         nop                                                    ; End of unwind block (FDE at 0xd404)
0000000000006606         nop        word [cs:rax+rax]
                     x2nrealloc:
0000000000006610         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd418)
0000000000006613         mov        r9, rdx
0000000000006616         mov        rcx, qword [rsi]
0000000000006619         je         loc_6650

000000000000661b         xor        edx, edx
000000000000661d         movabs     rax, 0x5555555555555554
0000000000006627         div        r9
000000000000662a         cmp        rax, rcx
000000000000662d         jbe        loc_666b

000000000000662f         mov        rax, rcx
0000000000006632         shr        rax, 0x1
0000000000006635         lea        rcx, qword [rax+rcx+1]

                     loc_663a:
000000000000663a         mov        qword [rsi], rcx                            ; CODE XREF=x2nrealloc+89
000000000000663d         imul       rcx, r9                                     ; argument #4 for method xrealloc
0000000000006641         mov        rsi, rcx                                    ; argument #2 for method xrealloc
0000000000006644         jmp        xrealloc                                    ; xrealloc
                        ; endp
0000000000006649         align      16

                     loc_6650:
0000000000006650         test       rcx, rcx                                    ; CODE XREF=x2nrealloc+9
0000000000006653         je         loc_6678

                     loc_6655:
0000000000006655         mov        rax, rcx                                    ; CODE XREF=sub_6674+28
0000000000006658         mul        r9
000000000000665b         seto       dl
000000000000665e         test       rax, rax
0000000000006661         movzx      edx, dl
0000000000006664         js         loc_666b

0000000000006666         test       rdx, rdx
0000000000006669         je         loc_663a

                     loc_666b:
000000000000666b         sub        rsp, 0x8                                    ; CODE XREF=x2nrealloc+29, x2nrealloc+84
000000000000666f         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_6674:
0000000000006674         nop        dword [rax]
                        ; endp

                     loc_6678:
0000000000006678         xor        edx, edx                                    ; CODE XREF=x2nrealloc+67
000000000000667a         mov        eax, 0x80
000000000000667f         xor        r8d, r8d
0000000000006682         div        r9
0000000000006685         test       rax, rax
0000000000006688         sete       r8b
000000000000668c         lea        rcx, qword [r8+rax]
0000000000006690         jmp        loc_6655
0000000000006692         align      32                                          ; End of unwind block (FDE at 0xd418)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     x2realloc:
00000000000066a0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd430)
00000000000066a3         mov        rax, qword [rsi]
00000000000066a6         je         loc_66d0

00000000000066a8         movabs     rdx, 0x5555555555555553
00000000000066b2         cmp        rax, rdx
00000000000066b5         ja         loc_66e1

00000000000066b7         mov        rdx, rax
00000000000066ba         shr        rdx, 0x1
00000000000066bd         lea        rax, qword [rdx+rax+1]

                     loc_66c2:
00000000000066c2         mov        qword [rsi], rax                            ; CODE XREF=x2realloc+63
00000000000066c5         mov        rsi, rax                                    ; argument #2 for method xrealloc
00000000000066c8         jmp        xrealloc                                    ; xrealloc
                        ; endp
00000000000066cd         align      16

                     loc_66d0:
00000000000066d0         test       rax, rax                                    ; CODE XREF=x2realloc+6
00000000000066d3         mov        edx, 0x80
00000000000066d8         cmove      rax, rdx
00000000000066dc         test       rax, rax
00000000000066df         jns        loc_66c2

                     loc_66e1:
00000000000066e1         sub        rsp, 0x8                                    ; CODE XREF=x2realloc+21
00000000000066e5         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_66ea:
00000000000066ea         nop        word [rax+rax]                              ; End of unwind block (FDE at 0xd430)
                     xzalloc:
00000000000066f0         push       rbx                                         ; Begin of unwind block (FDE at 0xd448)
00000000000066f1         mov        rbx, rdi
00000000000066f4         call       xmalloc                                     ; xmalloc
00000000000066f9         mov        rdx, rbx                                    ; argument "__n" for method j_memset
00000000000066fc         xor        esi, esi                                    ; argument "__c" for method j_memset
00000000000066fe         mov        rdi, rax                                    ; argument "__s" for method j_memset
0000000000006701         pop        rbx
0000000000006702         jmp        j_memset                                    ; memset
                        ; endp
0000000000006707         align      16                                          ; End of unwind block (FDE at 0xd448)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xcalloc:
0000000000006710         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xd464)
0000000000006713         sub        rsp, 0x8
0000000000006717         mul        rsi
000000000000671a         seto       dl
000000000000671d         test       rax, rax
0000000000006720         js         loc_6739

0000000000006722         movzx      edx, dl
0000000000006725         test       rdx, rdx
0000000000006728         jne        loc_6739

000000000000672a         call       j_calloc                                    ; calloc
000000000000672f         test       rax, rax
0000000000006732         je         loc_6739

0000000000006734         add        rsp, 0x8
0000000000006738         ret
                        ; endp

                     loc_6739:
0000000000006739         call       xalloc_die                                  ; xalloc_die, CODE XREF=xcalloc+16, xcalloc+24, xcalloc+34
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_673e:
000000000000673e         nop                                                    ; End of unwind block (FDE at 0xd464)
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xmemdup:
0000000000006740         push       rbp                                         ; Begin of unwind block (FDE at 0xd480), CODE XREF=clone_quoting_options+40
0000000000006741         push       rbx
0000000000006742         mov        rbp, rdi
0000000000006745         mov        rdi, rsi
0000000000006748         mov        rbx, rsi
000000000000674b         sub        rsp, 0x8
000000000000674f         call       xmalloc                                     ; xmalloc
0000000000006754         add        rsp, 0x8
0000000000006758         mov        rdx, rbx                                    ; argument "__n" for method j_memcpy
000000000000675b         mov        rsi, rbp                                    ; argument "__src" for method j_memcpy
000000000000675e         pop        rbx
000000000000675f         pop        rbp
0000000000006760         mov        rdi, rax                                    ; argument "__dest" for method j_memcpy
0000000000006763         jmp        j_memcpy                                    ; memcpy
                        ; endp
0000000000006768         align      16                                          ; End of unwind block (FDE at 0xd480)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xstrdup:
0000000000006770         push       rbx                                         ; Begin of unwind block (FDE at 0xd4a8)
0000000000006771         mov        rbx, rdi
0000000000006774         call       j_strlen                                    ; strlen
0000000000006779         mov        rdi, rbx
000000000000677c         lea        rsi, qword [rax+1]
0000000000006780         pop        rbx
0000000000006781         jmp        xmemdup                                     ; xmemdup
                        ; endp
0000000000006783         align      16                                          ; End of unwind block (FDE at 0xd4a8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xalloc_die:
0000000000006790         lea        rsi, qword [aMemoryExhauste]                ; Begin of unwind block (FDE at 0xd4c4), argument "msgid" for method j_dcgettext, "memory exhausted", CODE XREF=file_name_concat+19, quotearg_n_options+422, xmalloc+21, xnmalloc+31, xrealloc+49, xnrealloc+31, x2nrealloc+95, x2realloc+69, xcalloc+41, xfts_open+42
0000000000006797         sub        rsp, 0x8
000000000000679b         mov        edx, 0x5                                    ; argument "category" for method j_dcgettext
00000000000067a0         xor        edi, edi                                    ; argument "domain" for method j_dcgettext
00000000000067a2         call       j_dcgettext                                 ; dcgettext
00000000000067a7         mov        edi, dword [exit_failure]                   ; argument "__status" for method j_error, exit_failure
00000000000067ad         lea        rdx, qword [aNS+10]                         ; argument "__format" for method j_error, 0xb88f
00000000000067b4         mov        rcx, rax
00000000000067b7         xor        esi, esi                                    ; argument "__errnum" for method j_error
00000000000067b9         xor        eax, eax
00000000000067bb         call       j_error                                     ; error
00000000000067c0         call       j_abort                                     ; abort
                        ; endp
00000000000067c5         align      16                                          ; End of unwind block (FDE at 0xd4c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     xfts_open:
00000000000067d0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xd4dc), CODE XREF=rm+78
00000000000067d4         or         esi, 0x200
00000000000067da         call       rpl_fts_open                                ; rpl_fts_open
00000000000067df         test       rax, rax
00000000000067e2         je         loc_67f0

00000000000067e4         add        rsp, 0x8
00000000000067e8         ret
                        ; endp
00000000000067e9         align      16

                     loc_67f0:
00000000000067f0         call       j___errno_location                          ; __errno_location, CODE XREF=xfts_open+18
00000000000067f5         cmp        dword [rax], 0x16
00000000000067f8         je         loc_6800

00000000000067fa         call       xalloc_die                                  ; xalloc_die
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     sub_67ff:
00000000000067ff         nop
                        ; endp

                     loc_6800:
0000000000006800         lea        rcx, qword [__PRETTY_FUNCTION__.3434]       ; argument "__function" for method j___assert_fail, "xfts_open", CODE XREF=xfts_open+40
0000000000006807         lea        rsi, qword [aCoreutils831li_c1a0]           ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/xfts.c"
000000000000680e         lea        rdi, qword [aErrnoEinval]                   ; argument "__assertion" for method j___assert_fail, "errno != EINVAL"
0000000000006815         mov        edx, 0x29                                   ; argument "__line" for method j___assert_fail
000000000000681a         call       j___assert_fail                             ; __assert_fail
                        ; endp
000000000000681f         align      32                                          ; End of unwind block (FDE at 0xd4dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_warning_required:
0000000000006820         mov        edx, dword [rdi+0x48]                       ; Begin of unwind block (FDE at 0xd4f8)
0000000000006823         mov        eax, 0x1
0000000000006828         and        edx, 0x11
000000000000682b         cmp        edx, 0x10
000000000000682e         je         loc_6837

0000000000006830         xor        eax, eax
0000000000006832         cmp        edx, 0x11
0000000000006835         je         loc_6840

                     loc_6837:
0000000000006837         ret                                                    ; CODE XREF=cycle_warning_required+14
                        ; endp
0000000000006839         align      64

                     loc_6840:
0000000000006840         cmp        qword [rsi+0x58], 0x0                       ; CODE XREF=cycle_warning_required+21
0000000000006845         setne      al
0000000000006848         ret
                        ; endp
0000000000006849         align      16                                          ; End of unwind block (FDE at 0xd4f8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24
        ;    var_20: int64_t, -32


                     yesno:
0000000000006850         push       rbx                                         ; Begin of unwind block (FDE at 0xd50c), CODE XREF=main+913, prompt+529
0000000000006851         mov        edx, 0xa                                    ; argument "__delimiter" for method j___getdelim
0000000000006856         xor        ebx, ebx
0000000000006858         sub        rsp, 0x20
000000000000685c         mov        rcx, qword [stdin@@GLIBC_2.2.5]             ; argument "__stream" for method j___getdelim, stdin@@GLIBC_2.2.5
0000000000006863         lea        rsi, qword [rsp+0x28+var_18]                ; argument "__n" for method j___getdelim
0000000000006868         lea        rdi, qword [rsp+0x28+var_20]                ; argument "__lineptr" for method j___getdelim
000000000000686d         mov        qword [rsp+0x28+var_20], 0x0
0000000000006876         mov        rax, qword [fs:0x28]
000000000000687f         mov        qword [rsp+0x28+var_10], rax
0000000000006884         xor        eax, eax
0000000000006886         mov        qword [rsp+0x28+var_18], 0x0
000000000000688f         call       j___getdelim                                ; __getdelim
0000000000006894         test       rax, rax
0000000000006897         jle        loc_68b2

0000000000006899         mov        rdi, qword [rsp+0x28+var_20]
000000000000689e         lea        rax, qword [rdi+rax-1]
00000000000068a3         cmp        byte [rax], 0xa
00000000000068a6         je         loc_68d8

                     loc_68a8:
00000000000068a8         call       j_rpmatch                                   ; rpmatch, CODE XREF=yesno+144
00000000000068ad         test       eax, eax
00000000000068af         setg       bl

                     loc_68b2:
00000000000068b2         mov        rdi, qword [rsp+0x28+var_20]                ; CODE XREF=yesno+71
00000000000068b7         call       sub_1da0                                    ; sub_1da0
00000000000068bc         mov        rdx, qword [rsp+0x28+var_10]
00000000000068c1         xor        rdx, qword [fs:0x28]
00000000000068ca         mov        eax, ebx
00000000000068cc         jne        loc_68e2

00000000000068ce         add        rsp, 0x20
00000000000068d2         pop        rbx
00000000000068d3         ret
                        ; endp
00000000000068d4         align      8

                     loc_68d8:
00000000000068d8         mov        byte [rax], 0x0                             ; CODE XREF=yesno+86
00000000000068db         mov        rdi, qword [rsp+0x28+var_20]
00000000000068e0         jmp        loc_68a8

                     loc_68e2:
00000000000068e2         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=yesno+124
                        ; endp
00000000000068e7         align      16                                          ; End of unwind block (FDE at 0xd50c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fflush:
00000000000068f0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd534), CODE XREF=close_stdin+56, rpl_fclose+31
00000000000068f3         push       rbx
00000000000068f4         mov        rbx, rdi
00000000000068f7         je         loc_690a

00000000000068f9         call       j___freading                                ; __freading
00000000000068fe         test       eax, eax
0000000000006900         je         loc_690a

0000000000006902         test       dword [rbx], 0x100
0000000000006908         jne        loc_6918

                     loc_690a:
000000000000690a         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush, CODE XREF=rpl_fflush+7, rpl_fflush+16
000000000000690d         pop        rbx
000000000000690e         jmp        j_fflush                                    ; fflush
                        ; endp
0000000000006913         align      8

                     loc_6918:
0000000000006918         mov        rdi, rbx                                    ; CODE XREF=rpl_fflush+24
000000000000691b         mov        edx, 0x1
0000000000006920         xor        esi, esi
0000000000006922         call       rpl_fseeko                                  ; rpl_fseeko
0000000000006927         mov        rdi, rbx                                    ; argument "__stream" for method j_fflush
000000000000692a         pop        rbx
000000000000692b         jmp        j_fflush                                    ; fflush
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     freadahead:
0000000000006930         xor        eax, eax                                    ; End of unwind block (FDE at 0xd534), Begin of unwind block (FDE at 0xd554), CODE XREF=close_stdin+14
0000000000006932         mov        rcx, qword [rdi+0x20]
0000000000006936         cmp        qword [rdi+0x28], rcx
000000000000693a         ja         loc_6957

000000000000693c         mov        rax, qword [rdi+0x10]
0000000000006940         sub        rax, qword [rdi+8]
0000000000006944         test       dword [rdi], 0x100
000000000000694a         je         loc_6957

000000000000694c         mov        rdx, qword [rdi+0x58]
0000000000006950         sub        rdx, qword [rdi+0x48]
0000000000006954         add        rax, rdx

                     loc_6957:
0000000000006957         ret                                                    ; CODE XREF=freadahead+10, freadahead+26
                        ; endp
0000000000006959         align      32                                          ; End of unwind block (FDE at 0xd554)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fseeko:
0000000000006960         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0xd56c), CODE XREF=close_stdin+194, rpl_fflush+50
0000000000006964         cmp        qword [rdi+0x10], rax
0000000000006968         je         loc_6970

                     j_j_fseeko:        // fseeko
000000000000696a         jmp        j_fseeko                                    ; fseeko, CODE XREF=j_j_fseeko+14, j_j_fseeko+21
                        ; endp
000000000000696f         align      16

                     loc_6970:
0000000000006970         mov        rax, qword [rdi+0x20]                       ; CODE XREF=rpl_fseeko+8
0000000000006974         cmp        qword [rdi+0x28], rax
0000000000006978         jne        j_j_fseeko                                  ; fseeko

000000000000697a         cmp        qword [rdi+0x48], 0x0
000000000000697f         jne        j_j_fseeko                                  ; fseeko

0000000000006981         push       r12
0000000000006983         push       rbp
0000000000006984         mov        r12d, edx
0000000000006987         push       rbx
0000000000006988         mov        rbp, rsi
000000000000698b         mov        rbx, rdi
000000000000698e         call       j_fileno                                    ; fileno
0000000000006993         mov        edx, r12d                                   ; argument "__whence" for method j_lseek
0000000000006996         mov        rsi, rbp                                    ; argument "__offset" for method j_lseek
0000000000006999         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000699b         call       j_lseek                                     ; lseek
00000000000069a0         cmp        rax, 0xffffffffffffffff
00000000000069a4         je         loc_69b2

00000000000069a6         and        dword [rbx], 0xffffffef
00000000000069a9         mov        qword [rbx+0x90], rax
00000000000069b0         xor        eax, eax

                     loc_69b2:
00000000000069b2         pop        rbx                                         ; CODE XREF=j_j_fseeko+58
00000000000069b3         pop        rbp
00000000000069b4         pop        r12
00000000000069b6         ret
                        ; endp
00000000000069b7         align      64                                          ; End of unwind block (FDE at 0xd56c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_compare:
00000000000069c0         xor        eax, eax                                    ; Begin of unwind block (FDE at 0xd59c), DATA XREF=setup_dir.isra.4+19
00000000000069c2         mov        rdx, qword [rsi+8]
00000000000069c6         cmp        qword [rdi+8], rdx
00000000000069ca         je         loc_69d0

00000000000069cc         ret
                        ; endp
00000000000069ce         align      16

                     loc_69d0:
00000000000069d0         mov        rax, qword [rsi]                            ; CODE XREF=AD_compare+10
00000000000069d3         cmp        qword [rdi], rax
00000000000069d6         sete       al
00000000000069d9         ret
                        ; endp
00000000000069da         align      32                                          ; End of unwind block (FDE at 0xd59c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     AD_hash:
00000000000069e0         mov        rax, qword [rdi+8]                          ; Begin of unwind block (FDE at 0xd5b0), DATA XREF=setup_dir.isra.4+26
00000000000069e4         xor        edx, edx
00000000000069e6         div        rsi
00000000000069e9         mov        rax, rdx
00000000000069ec         ret
                        ; endp
00000000000069ed         align      16                                          ; End of unwind block (FDE at 0xd5b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_hash:
00000000000069f0         mov        rax, qword [rdi]                            ; Begin of unwind block (FDE at 0xd5c4), DATA XREF=filesystem_type+110
00000000000069f3         xor        edx, edx
00000000000069f5         div        rsi
00000000000069f8         mov        rax, rdx
00000000000069fb         ret
                        ; endp
00000000000069fc         align      512                                         ; End of unwind block (FDE at 0xd5c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     dev_type_compare:
0000000000006a00         mov        rax, qword [rsi]                            ; Begin of unwind block (FDE at 0xd5d8), DATA XREF=filesystem_type+103
0000000000006a03         cmp        qword [rdi], rax
0000000000006a06         sete       al
0000000000006a09         ret
                        ; endp
0000000000006a0a         align      16                                          ; End of unwind block (FDE at 0xd5d8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_compare_ino:
0000000000006a10         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0xd5ec), DATA XREF=fts_build+2040
0000000000006a13         mov        rax, qword [rsi]
0000000000006a16         mov        rax, qword [rax+0x80]
0000000000006a1d         cmp        qword [rdx+0x80], rax
0000000000006a24         jb         loc_6a30

0000000000006a26         seta       al
0000000000006a29         movzx      eax, al
0000000000006a2c         ret
                        ; endp
0000000000006a2d         align      16

                     loc_6a30:
0000000000006a30         mov        eax, 0xffffffff                             ; CODE XREF=fts_compare_ino+20
0000000000006a35         ret
                        ; endp
0000000000006a36         align      64                                          ; End of unwind block (FDE at 0xd5ec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_stat:
0000000000006a40         push       r12                                         ; Begin of unwind block (FDE at 0xd600), CODE XREF=fts_build+1104, fts_build+1543, fts_build+2136, rpl_fts_open+765, rpl_fts_read+440, rpl_fts_read+645, rpl_fts_read+1452, rpl_fts_read+1624
0000000000006a42         push       rbp
0000000000006a43         mov        rbp, rsi
0000000000006a46         push       rbx
0000000000006a47         cmp        qword [rbp+0x58], 0x0
0000000000006a4c         lea        rbx, qword [rsi+0x78]
0000000000006a50         mov        r12, rdi
0000000000006a53         mov        eax, dword [rdi+0x48]
0000000000006a56         mov        rsi, qword [rsi+0x30]
0000000000006a5a         jne        loc_6ac0

0000000000006a5c         test       al, 0x1
0000000000006a5e         je         loc_6ac0

                     loc_6a60:
0000000000006a60         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___xstat, CODE XREF=fts_stat+130, fts_stat+134
0000000000006a63         mov        edi, 0x1                                    ; argument "__ver" for method j___xstat
0000000000006a68         call       j___xstat                                   ; __xstat
0000000000006a6d         test       eax, eax
0000000000006a6f         je         loc_6aeb

0000000000006a71         call       j___errno_location                          ; __errno_location
0000000000006a76         mov        r12, rax
0000000000006a79         mov        eax, dword [rax]
0000000000006a7b         cmp        eax, 0x2
0000000000006a7e         je         loc_6b90

                     loc_6a84:
0000000000006a84         lea        rdi, qword [rbx+8]                          ; CODE XREF=fts_stat+327, fts_stat+361
0000000000006a88         mov        dword [rbp+0x40], eax
0000000000006a8b         mov        qword [rbp+0x78], 0x0
0000000000006a93         mov        qword [rbx+0x88], 0x0
0000000000006a9e         xor        eax, eax
0000000000006aa0         and        rdi, 0xfffffffffffffff8
0000000000006aa4         sub        rbx, rdi
0000000000006aa7         lea        ecx, dword [rbx+0x90]
0000000000006aad         shr        ecx, 0x3
0000000000006ab0         rep stosq  qword [rdi], rax
0000000000006ab3         mov        eax, 0xa

                     loc_6ab8:
0000000000006ab8         pop        rbx                                         ; CODE XREF=fts_stat+278, fts_stat+310, fts_stat+397, fts_stat+413, fts_stat+442
0000000000006ab9         pop        rbp
0000000000006aba         pop        r12
0000000000006abc         ret
                        ; endp
0000000000006abd         align      64

                     loc_6ac0:
0000000000006ac0         test       al, 0x2                                     ; CODE XREF=fts_stat+26, fts_stat+30
0000000000006ac2         jne        loc_6a60

0000000000006ac4         test       dl, dl
0000000000006ac6         jne        loc_6a60

0000000000006ac8         mov        rdx, rsi                                    ; argument "__filename" for method j___fxstatat
0000000000006acb         mov        esi, dword [r12+0x2c]                       ; argument "__fildes" for method j___fxstatat
0000000000006ad0         mov        r8d, 0x100                                  ; argument "__flag" for method j___fxstatat
0000000000006ad6         mov        rcx, rbx                                    ; argument "__stat_buf" for method j___fxstatat
0000000000006ad9         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstatat
0000000000006ade         call       j___fxstatat                                ; __fxstatat
0000000000006ae3         test       eax, eax
0000000000006ae5         jne        loc_6b80

                     loc_6aeb:
0000000000006aeb         mov        eax, dword [rbp+0x90]                       ; CODE XREF=fts_stat+47
0000000000006af1         and        eax, 0xf000
0000000000006af6         cmp        eax, 0x4000
0000000000006afb         je         loc_6b20

0000000000006afd         cmp        eax, 0xa000
0000000000006b02         je         loc_6bd8

0000000000006b08         cmp        eax, 0x8000
0000000000006b0d         sete       al
0000000000006b10         movzx      eax, al
0000000000006b13         pop        rbx
0000000000006b14         lea        eax, dword [rax+rax*4+3]
0000000000006b18         pop        rbp
0000000000006b19         pop        r12
0000000000006b1b         ret
                        ; endp
0000000000006b1c         align      32

                     loc_6b20:
0000000000006b20         mov        rax, qword [rbp+0x88]                       ; CODE XREF=fts_stat+187
0000000000006b27         cmp        rax, 0x1
0000000000006b2b         jbe        loc_6bb0

0000000000006b31         cmp        qword [rbp+0x58], 0x0
0000000000006b36         jle        loc_6bb0

0000000000006b38         test       byte [r12+0x48], 0x20
0000000000006b3e         lea        rdx, qword [rax-2]
0000000000006b42         cmove      rax, rdx

                     loc_6b46:
0000000000006b46         cmp        byte [rbp+0x108], 0x2e                      ; CODE XREF=fts_stat+375
0000000000006b4d         mov        qword [rbp+0x68], rax
0000000000006b51         mov        eax, 0x1
0000000000006b56         jne        loc_6ab8

0000000000006b5c         cmp        byte [rbp+0x109], 0x0
0000000000006b63         jne        loc_6be8

                     loc_6b69:
0000000000006b69         cmp        qword [rbp+0x58], 0x1                       ; CODE XREF=fts_stat+448
0000000000006b6e         sbb        eax, eax
0000000000006b70         and        eax, 0xfffffffc
0000000000006b73         add        eax, 0x5
0000000000006b76         jmp        loc_6ab8
0000000000006b7b         align      128

                     loc_6b80:
0000000000006b80         call       j___errno_location                          ; __errno_location, CODE XREF=fts_stat+165
0000000000006b85         mov        eax, dword [rax]
0000000000006b87         jmp        loc_6a84
0000000000006b8c         align      16

                     loc_6b90:
0000000000006b90         mov        rsi, qword [rbp+0x30]                       ; argument "__filename" for method j___lxstat, CODE XREF=fts_stat+62
0000000000006b94         mov        rdx, rbx                                    ; argument "__stat_buf" for method j___lxstat
0000000000006b97         mov        edi, 0x1                                    ; argument "__ver" for method j___lxstat
0000000000006b9c         call       j___lxstat                                  ; __lxstat
0000000000006ba1         test       eax, eax
0000000000006ba3         je         loc_6bc0

0000000000006ba5         mov        eax, dword [r12]
0000000000006ba9         jmp        loc_6a84
0000000000006bae         align      16

                     loc_6bb0:
0000000000006bb0         mov        rax, 0xffffffffffffffff                     ; CODE XREF=fts_stat+235, fts_stat+246
0000000000006bb7         jmp        loc_6b46
0000000000006bb9         align      64

                     loc_6bc0:
0000000000006bc0         mov        dword [r12], 0x0                            ; CODE XREF=fts_stat+355
0000000000006bc8         mov        eax, 0xd
0000000000006bcd         jmp        loc_6ab8
0000000000006bd2         align      8

                     loc_6bd8:
0000000000006bd8         mov        eax, 0xc                                    ; CODE XREF=fts_stat+194
0000000000006bdd         jmp        loc_6ab8
0000000000006be2         align      8

                     loc_6be8:
0000000000006be8         mov        edx, dword [rbp+0x108]                      ; CODE XREF=fts_stat+291
0000000000006bee         and        edx, 0xffff00
0000000000006bf4         cmp        edx, 0x2e00
0000000000006bfa         jne        loc_6ab8

0000000000006c00         jmp        loc_6b69
0000000000006c05         align      16                                          ; End of unwind block (FDE at 0xd600)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_sort:
0000000000006c10         push       r13                                         ; Begin of unwind block (FDE at 0xd63c), CODE XREF=fts_build+1825, fts_build+2062, rpl_fts_open+548
0000000000006c12         push       r12
0000000000006c14         mov        r12, rdx
0000000000006c17         push       rbp
0000000000006c18         push       rbx
0000000000006c19         mov        rbp, rdi
0000000000006c1c         mov        rbx, rsi
0000000000006c1f         sub        rsp, 0x8
0000000000006c23         cmp        qword [rbp+0x38], rdx
0000000000006c27         mov        r13, qword [rdi+0x40]
0000000000006c2b         mov        rdi, qword [rdi+0x10]
0000000000006c2f         jae        loc_6c65

0000000000006c31         lea        rsi, qword [rdx+0x28]
0000000000006c35         movabs     rax, 0x1fffffffffffffff
0000000000006c3f         cmp        rsi, rax
0000000000006c42         mov        qword [rbp+0x38], rsi
0000000000006c46         ja         loc_6ce4

0000000000006c4c         shl        rsi, 0x3                                    ; argument "__size" for method j_realloc
0000000000006c50         call       j_realloc                                   ; realloc
0000000000006c55         test       rax, rax
0000000000006c58         mov        rdi, rax
0000000000006c5b         je         loc_6ce0

0000000000006c61         mov        qword [rbp+0x10], rax

                     loc_6c65:
0000000000006c65         test       rbx, rbx                                    ; CODE XREF=fts_sort+31
0000000000006c68         je         loc_6c81

0000000000006c6a         mov        rdx, rdi
0000000000006c6d         nop        dword [rax]

                     loc_6c70:
0000000000006c70         add        rdx, 0x8                                    ; CODE XREF=fts_sort+111
0000000000006c74         mov        qword [rdx-8], rbx
0000000000006c78         mov        rbx, qword [rbx+0x10]
0000000000006c7c         test       rbx, rbx
0000000000006c7f         jne        loc_6c70

                     loc_6c81:
0000000000006c81         mov        rcx, r13                                    ; argument "__compar" for method j_qsort, CODE XREF=fts_sort+88
0000000000006c84         mov        edx, 0x8                                    ; argument "__size" for method j_qsort
0000000000006c89         mov        rsi, r12                                    ; argument "__nmemb" for method j_qsort
0000000000006c8c         call       j_qsort                                     ; qsort
0000000000006c91         mov        r8, qword [rbp+0x10]
0000000000006c95         mov        rcx, r12
0000000000006c98         sub        rcx, 0x1
0000000000006c9c         mov        rax, qword [r8]
0000000000006c9f         je         loc_6d10

0000000000006ca1         mov        rdi, rax
0000000000006ca4         mov        rdx, r8
0000000000006ca7         jmp        loc_6cb3
0000000000006ca9         align      16

                     loc_6cb0:
0000000000006cb0         mov        rdi, qword [rdx]                            ; CODE XREF=fts_sort+179

                     loc_6cb3:
0000000000006cb3         mov        rsi, qword [rdx+8]                          ; CODE XREF=fts_sort+151
0000000000006cb7         add        rdx, 0x8
0000000000006cbb         sub        rcx, 0x1
0000000000006cbf         mov        qword [rdi+0x10], rsi
0000000000006cc3         jne        loc_6cb0

0000000000006cc5         mov        rdx, qword [r8+r12*8-8]

                     loc_6cca:
0000000000006cca         mov        qword [rdx+0x10], 0x0                       ; CODE XREF=fts_sort+259
0000000000006cd2         add        rsp, 0x8
0000000000006cd6         pop        rbx
0000000000006cd7         pop        rbp
0000000000006cd8         pop        r12
0000000000006cda         pop        r13
0000000000006cdc         ret
                        ; endp
0000000000006cdd         align      32

                     loc_6ce0:
0000000000006ce0         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=fts_sort+75

                     loc_6ce4:
0000000000006ce4         call       sub_1da0                                    ; sub_1da0, CODE XREF=fts_sort+54
0000000000006ce9         mov        qword [rbp+0x10], 0x0
0000000000006cf1         mov        qword [rbp+0x38], 0x0
0000000000006cf9         add        rsp, 0x8
0000000000006cfd         mov        rax, rbx
0000000000006d00         pop        rbx
0000000000006d01         pop        rbp
0000000000006d02         pop        r12
0000000000006d04         pop        r13
0000000000006d06         ret
                        ; endp
0000000000006d07         align      16

                     loc_6d10:
0000000000006d10         mov        rdx, rax                                    ; CODE XREF=fts_sort+143
0000000000006d13         jmp        loc_6cca
0000000000006d15         align      32                                          ; End of unwind block (FDE at 0xd63c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_alloc:
0000000000006d20         push       r13                                         ; Begin of unwind block (FDE at 0xd68c), CODE XREF=fts_build+556, rpl_fts_open+231, rpl_fts_open+334, rpl_fts_open+568
0000000000006d22         push       r12
0000000000006d24         mov        r12, rdi
0000000000006d27         push       rbp
0000000000006d28         lea        rdi, qword [rdx+0x110]
0000000000006d2f         push       rbx
0000000000006d30         mov        r13, rsi
0000000000006d33         mov        rbp, rdx
0000000000006d36         sub        rsp, 0x8
0000000000006d3a         and        rdi, 0xfffffffffffffff8                     ; argument "__size" for method j_malloc
0000000000006d3e         call       j_malloc                                    ; malloc
0000000000006d43         test       rax, rax
0000000000006d46         mov        rbx, rax
0000000000006d49         je         loc_6d9c

0000000000006d4b         lea        rdi, qword [rax+0x108]                      ; argument "__dest" for method j_memcpy
0000000000006d52         mov        rdx, rbp                                    ; argument "__n" for method j_memcpy
0000000000006d55         mov        rsi, r13                                    ; argument "__src" for method j_memcpy
0000000000006d58         call       j_memcpy                                    ; memcpy
0000000000006d5d         mov        rax, qword [r12+0x20]
0000000000006d62         mov        byte [rbx+rbp+0x108], 0x0
0000000000006d6a         mov        qword [rbx+0x60], rbp
0000000000006d6e         mov        qword [rbx+0x50], r12
0000000000006d72         mov        dword [rbx+0x40], 0x0
0000000000006d79         mov        qword [rbx+0x18], 0x0
0000000000006d81         mov        qword [rbx+0x38], rax
0000000000006d85         mov        dword [rbx+0x72], 0x30000
0000000000006d8c         mov        qword [rbx+0x20], 0x0
0000000000006d94         mov        qword [rbx+0x28], 0x0

                     loc_6d9c:
0000000000006d9c         add        rsp, 0x8                                    ; CODE XREF=fts_alloc+41
0000000000006da0         mov        rax, rbx
0000000000006da3         pop        rbx
0000000000006da4         pop        rbp
0000000000006da5         pop        r12
0000000000006da7         pop        r13
0000000000006da9         ret
                        ; endp
0000000000006daa         align      16                                          ; End of unwind block (FDE at 0xd68c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_lfree:
0000000000006db0         test       rdi, rdi                                    ; Begin of unwind block (FDE at 0xd6c4), CODE XREF=fts_build+1638, fts_build+1893, fts_build+2281, fts_build+2418, rpl_fts_open+851, rpl_fts_close+92, rpl_fts_read+367, rpl_fts_read+1034, rpl_fts_children+75
0000000000006db3         je         loc_6df0

0000000000006db5         push       rbp
0000000000006db6         push       rbx
0000000000006db7         mov        rbx, rdi
0000000000006dba         sub        rsp, 0x8
0000000000006dbe         nop

                     loc_6dc0:
0000000000006dc0         mov        rdi, qword [rbx+0x18]                       ; CODE XREF=fts_lfree+48
0000000000006dc4         mov        rbp, qword [rbx+0x10]
0000000000006dc8         test       rdi, rdi
0000000000006dcb         je         loc_6dd2

0000000000006dcd         call       j_closedir                                  ; closedir

                     loc_6dd2:
0000000000006dd2         mov        rdi, rbx                                    ; CODE XREF=fts_lfree+27
0000000000006dd5         mov        rbx, rbp
0000000000006dd8         call       sub_1da0                                    ; sub_1da0
0000000000006ddd         test       rbp, rbp
0000000000006de0         jne        loc_6dc0

0000000000006de2         add        rsp, 0x8
0000000000006de6         pop        rbx
0000000000006de7         pop        rbp
0000000000006de8         ret
                        ; endp
0000000000006de9         align      16

                     loc_6df0:
0000000000006df0         ret                                                    ; CODE XREF=fts_lfree+3
                        ; endp
0000000000006df2         align      512                                         ; End of unwind block (FDE at 0xd6c4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_ring_clear:
0000000000006e00         push       rbx                                         ; Begin of unwind block (FDE at 0xd6f0), CODE XREF=restore_initial_cwd+44, rpl_fts_close+140
0000000000006e01         mov        rbx, rdi
0000000000006e04         jmp        loc_6e1c
0000000000006e06         align      16

                     loc_6e10:
0000000000006e10         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+38
0000000000006e13         call       i_ring_pop                                  ; i_ring_pop
0000000000006e18         test       eax, eax
0000000000006e1a         jns        loc_6e30

                     loc_6e1c:
0000000000006e1c         mov        rdi, rbx                                    ; CODE XREF=fd_ring_clear+4, fd_ring_clear+55
0000000000006e1f         call       i_ring_empty                                ; i_ring_empty
0000000000006e24         test       al, al
0000000000006e26         je         loc_6e10

0000000000006e28         pop        rbx
0000000000006e29         ret
                        ; endp
0000000000006e2a         align      16

                     loc_6e30:
0000000000006e30         mov        edi, eax                                    ; argument "__fd" for method j_close, CODE XREF=fd_ring_clear+26
0000000000006e32         call       j_close                                     ; close
0000000000006e37         jmp        loc_6e1c
0000000000006e39         align      64                                          ; End of unwind block (FDE at 0xd6f0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_A8: int64_t, -168
        ;    var_B8: int64_t, -184


                     filesystem_type:
0000000000006e40         push       r13                                         ; Begin of unwind block (FDE at 0xd70c), CODE XREF=leaf_optimization+4, fts_build+708
0000000000006e42         push       r12
0000000000006e44         push       rbp
0000000000006e45         push       rbx
0000000000006e46         sub        rsp, 0x98
0000000000006e4d         mov        rbx, qword [rdi+0x50]
0000000000006e51         mov        rax, qword [fs:0x28]
0000000000006e5a         mov        qword [rsp+0xb8+var_30], rax
0000000000006e62         xor        eax, eax
0000000000006e64         test       byte [rbx+0x49], 0x2
0000000000006e68         je         loc_6ed2

0000000000006e6a         mov        r12, qword [rbx+0x50]
0000000000006e6e         mov        rbp, rdi
0000000000006e71         mov        r13d, esi
0000000000006e74         test       r12, r12
0000000000006e77         je         loc_6ea0

                     loc_6e79:
0000000000006e79         mov        rax, qword [rbp+0x78]                       ; CODE XREF=filesystem_type+139
0000000000006e7d         mov        rsi, rsp
0000000000006e80         mov        rdi, r12
0000000000006e83         mov        qword [rsp+0xb8+var_B8], rax
0000000000006e87         call       hash_lookup                                 ; hash_lookup
0000000000006e8c         test       rax, rax
0000000000006e8f         je         loc_6ecd

0000000000006e91         mov        rbx, qword [rax+8]
0000000000006e95         jmp        loc_6ed4
0000000000006e97         align      32

                     loc_6ea0:
0000000000006ea0         mov        r8, qword [qword_20efc8]                    ; qword_20efc8, CODE XREF=filesystem_type+55
0000000000006ea7         lea        rcx, qword [dev_type_compare]               ; dev_type_compare
0000000000006eae         lea        rdx, qword [dev_type_hash]                  ; dev_type_hash
0000000000006eb5         xor        esi, esi
0000000000006eb7         mov        edi, 0xd
0000000000006ebc         call       hash_initialize                             ; hash_initialize
0000000000006ec1         test       rax, rax
0000000000006ec4         mov        r12, rax
0000000000006ec7         mov        qword [rbx+0x50], rax
0000000000006ecb         jne        loc_6e79

                     loc_6ecd:
0000000000006ecd         test       r13d, r13d                                  ; CODE XREF=filesystem_type+79
0000000000006ed0         jns        loc_6f00

                     loc_6ed2:
0000000000006ed2         xor        ebx, ebx                                    ; CODE XREF=filesystem_type+40, filesystem_type+207

                     loc_6ed4:
0000000000006ed4         mov        rdx, qword [rsp+0xb8+var_30]                ; CODE XREF=filesystem_type+85, filesystem_type+217, filesystem_type+235, filesystem_type+275
0000000000006edc         xor        rdx, qword [fs:0x28]
0000000000006ee5         mov        rax, rbx
0000000000006ee8         jne        loc_6f62

0000000000006eea         add        rsp, 0x98
0000000000006ef1         pop        rbx
0000000000006ef2         pop        rbp
0000000000006ef3         pop        r12
0000000000006ef5         pop        r13
0000000000006ef7         ret
                        ; endp
0000000000006ef8         align      256

                     loc_6f00:
0000000000006f00         lea        rsi, qword [rsp+0xb8+var_A8]                ; argument "__buf" for method j_fstatfs, CODE XREF=filesystem_type+144
0000000000006f05         mov        edi, r13d                                   ; argument "__fildes" for method j_fstatfs
0000000000006f08         call       j_fstatfs                                   ; fstatfs
0000000000006f0d         test       eax, eax
0000000000006f0f         jne        loc_6ed2

0000000000006f11         test       r12, r12
0000000000006f14         mov        rbx, qword [rsp+0xb8+var_A8]
0000000000006f19         je         loc_6ed4

0000000000006f1b         mov        edi, 0x10                                   ; argument "__size" for method j_malloc
0000000000006f20         call       j_malloc                                    ; malloc
0000000000006f25         test       rax, rax
0000000000006f28         mov        r13, rax
0000000000006f2b         je         loc_6ed4

0000000000006f2d         mov        rax, qword [rbp+0x78]
0000000000006f31         mov        qword [r13+8], rbx
0000000000006f35         mov        rsi, r13
0000000000006f38         mov        rdi, r12
0000000000006f3b         mov        qword [r13], rax
0000000000006f3f         call       hash_insert                                 ; hash_insert
0000000000006f44         test       rax, rax
0000000000006f47         je         loc_6f58

0000000000006f49         cmp        r13, rax
0000000000006f4c         jne        loc_6f67

                     loc_6f4e:
0000000000006f4e         mov        rbx, qword [rsp+0xb8+var_A8]                ; CODE XREF=filesystem_type+288
0000000000006f53         jmp        loc_6ed4

                     loc_6f58:
0000000000006f58         mov        rdi, r13                                    ; CODE XREF=filesystem_type+263
0000000000006f5b         call       sub_1da0                                    ; sub_1da0
0000000000006f60         jmp        loc_6f4e

                     loc_6f62:
0000000000006f62         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=filesystem_type+168
                        ; endp

                     loc_6f67:
0000000000006f67         call       j_abort                                     ; abort, CODE XREF=filesystem_type+268
                        ; endp
0000000000006f6c         align      16                                          ; End of unwind block (FDE at 0xd70c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     leaf_optimization:
0000000000006f70         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xd748), CODE XREF=fts_build+2231, rpl_fts_read+1797
0000000000006f74         call       filesystem_type                             ; filesystem_type
0000000000006f79         cmp        rax, 0x52654973
0000000000006f7f         je         loc_6fd0

0000000000006f81         jle        loc_6fb0

0000000000006f83         cmp        rax, 0x58465342
0000000000006f89         je         loc_6fd0

0000000000006f8b         mov        edx, 0xff534d42
0000000000006f90         cmp        rax, rdx
0000000000006f93         je         loc_6fc5

0000000000006f95         cmp        rax, 0x5346414f
0000000000006f9b         je         loc_6fc5

                     loc_6f9d:
0000000000006f9d         mov        eax, 0x1                                    ; CODE XREF=leaf_optimization+83
0000000000006fa2         add        rsp, 0x8
0000000000006fa6         ret
                        ; endp
0000000000006fa7         align      16

                     loc_6fb0:
0000000000006fb0         cmp        rax, 0x6969                                 ; CODE XREF=leaf_optimization+17
0000000000006fb6         je         loc_6fc5

0000000000006fb8         cmp        rax, 0x9fa0
0000000000006fbe         je         loc_6fc5

0000000000006fc0         test       rax, rax
0000000000006fc3         jne        loc_6f9d

                     loc_6fc5:
0000000000006fc5         xor        eax, eax                                    ; CODE XREF=leaf_optimization+35, leaf_optimization+43, leaf_optimization+70, leaf_optimization+78
0000000000006fc7         add        rsp, 0x8
0000000000006fcb         ret
                        ; endp
0000000000006fcc         align      16

                     loc_6fd0:
0000000000006fd0         mov        eax, 0x2                                    ; CODE XREF=leaf_optimization+15, leaf_optimization+25
0000000000006fd5         add        rsp, 0x8
0000000000006fd9         ret
                        ; endp
0000000000006fda         align      32                                          ; End of unwind block (FDE at 0xd748)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cwd_advance_fd:
0000000000006fe0         push       rbp                                         ; Begin of unwind block (FDE at 0xd76c), CODE XREF=restore_initial_cwd+74, fts_safe_changedir+542, rpl_fts_read+1279, rpl_fts_children+290
0000000000006fe1         push       rbx
0000000000006fe2         mov        ebp, esi
0000000000006fe4         mov        rbx, rdi
0000000000006fe7         sub        rsp, 0x8
0000000000006feb         mov        esi, dword [rdi+0x2c]
0000000000006fee         cmp        esi, ebp
0000000000006ff0         jne        loc_6ff7

0000000000006ff2         cmp        esi, 0xffffff9c
0000000000006ff5         jne        loc_7041

                     loc_6ff7:
0000000000006ff7         test       dl, dl                                      ; CODE XREF=cwd_advance_fd+16
0000000000006ff9         jne        loc_7010

0000000000006ffb         test       byte [rbx+0x48], 0x4
0000000000006fff         jne        loc_7005

0000000000007001         test       esi, esi
0000000000007003         jns        loc_7030

                     loc_7005:
0000000000007005         mov        dword [rbx+0x2c], ebp                       ; CODE XREF=cwd_advance_fd+31, cwd_advance_fd+59
0000000000007008         add        rsp, 0x8
000000000000700c         pop        rbx
000000000000700d         pop        rbp
000000000000700e         ret
                        ; endp
000000000000700f         align      16

                     loc_7010:
0000000000007010         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=cwd_advance_fd+25
0000000000007014         call       i_ring_push                                 ; i_ring_push
0000000000007019         test       eax, eax
000000000000701b         js         loc_7005

000000000000701d         mov        edi, eax                                    ; argument "__fd" for method j_close
000000000000701f         call       j_close                                     ; close
0000000000007024         mov        dword [rbx+0x2c], ebp
0000000000007027         add        rsp, 0x8
000000000000702b         pop        rbx
000000000000702c         pop        rbp
000000000000702d         ret
                        ; endp
000000000000702e         align      16

                     loc_7030:
0000000000007030         mov        edi, esi                                    ; argument "__fd" for method j_close, CODE XREF=cwd_advance_fd+35
0000000000007032         call       j_close                                     ; close
0000000000007037         mov        dword [rbx+0x2c], ebp
000000000000703a         add        rsp, 0x8
000000000000703e         pop        rbx
000000000000703f         pop        rbp
0000000000007040         ret
                        ; endp

                     loc_7041:
0000000000007041         call       j_abort                                     ; abort, CODE XREF=cwd_advance_fd+21
                        ; endp
0000000000007046         align      16                                          ; End of unwind block (FDE at 0xd76c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     restore_initial_cwd:
0000000000007050         push       rbp                                         ; Begin of unwind block (FDE at 0xd7b0), CODE XREF=fts_build+1854, rpl_fts_read+675, rpl_fts_read+1171
0000000000007051         push       rbx
0000000000007052         mov        rbx, rdi
0000000000007055         sub        rsp, 0x8
0000000000007059         mov        edx, dword [rdi+0x48]
000000000000705c         mov        ebp, edx
000000000000705e         and        ebp, 0x4
0000000000007061         jne        loc_70a8

0000000000007063         and        dh, 0x2
0000000000007066         jne        loc_7090

0000000000007068         mov        edi, dword [rdi+0x28]                       ; argument "__fd" for method j_fchdir
000000000000706b         xor        ebp, ebp
000000000000706d         call       j_fchdir                                    ; fchdir
0000000000007072         test       eax, eax
0000000000007074         setne      bpl

                     loc_7078:
0000000000007078         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=restore_initial_cwd+79, restore_initial_cwd+90
000000000000707c         call       fd_ring_clear                               ; fd_ring_clear
0000000000007081         add        rsp, 0x8
0000000000007085         mov        eax, ebp
0000000000007087         pop        rbx
0000000000007088         pop        rbp
0000000000007089         ret
                        ; endp
000000000000708a         align      16

                     loc_7090:
0000000000007090         mov        edx, 0x1                                    ; CODE XREF=restore_initial_cwd+22
0000000000007095         mov        esi, 0xffffff9c
000000000000709a         call       cwd_advance_fd                              ; cwd_advance_fd
000000000000709f         jmp        loc_7078
00000000000070a1         align      8

                     loc_70a8:
00000000000070a8         xor        ebp, ebp                                    ; CODE XREF=restore_initial_cwd+17
00000000000070aa         jmp        loc_7078
00000000000070ac         align      16                                          ; End of unwind block (FDE at 0xd7b0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fts_palloc.isra.2:
00000000000070b0         push       rbx                                         ; Begin of unwind block (FDE at 0xd7dc), CODE XREF=fts_build+611, rpl_fts_open+189
00000000000070b1         mov        rcx, qword [rsi]
00000000000070b4         mov        rbx, rdi
00000000000070b7         mov        rdi, qword [rdi]
00000000000070ba         lea        rax, qword [rcx+rdx+0x100]
00000000000070c2         cmp        rcx, rax
00000000000070c5         ja         loc_70e8

00000000000070c7         mov        qword [rsi], rax
00000000000070ca         mov        rsi, rax                                    ; argument "__size" for method j_realloc
00000000000070cd         call       j_realloc                                   ; realloc
00000000000070d2         test       rax, rax
00000000000070d5         je         loc_7108

00000000000070d7         mov        qword [rbx], rax
00000000000070da         mov        eax, 0x1
00000000000070df         pop        rbx
00000000000070e0         ret
                        ; endp
00000000000070e1         align      8

                     loc_70e8:
00000000000070e8         call       sub_1da0                                    ; sub_1da0, CODE XREF=fts_palloc.isra.2+21
00000000000070ed         mov        qword [rbx], 0x0
00000000000070f4         call       j___errno_location                          ; __errno_location
00000000000070f9         mov        dword [rax], 0x24
00000000000070ff         xor        eax, eax
0000000000007101         pop        rbx
0000000000007102         ret
                        ; endp
0000000000007103         align      8

                     loc_7108:
0000000000007108         mov        rdi, qword [rbx]                            ; CODE XREF=fts_palloc.isra.2+37
000000000000710b         call       sub_1da0                                    ; sub_1da0
0000000000007110         mov        qword [rbx], 0x0
0000000000007117         xor        eax, eax
0000000000007119         pop        rbx
000000000000711a         ret
                        ; endp
000000000000711b         align      32                                          ; End of unwind block (FDE at 0xd7dc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     setup_dir.isra.4:
0000000000007120         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0xd804), CODE XREF=rpl_fts_open+613, rpl_fts_read+837
0000000000007126         push       rbx
0000000000007127         mov        rbx, rsi
000000000000712a         je         loc_7160

000000000000712c         mov        r8, qword [qword_20efc8]                    ; qword_20efc8
0000000000007133         lea        rcx, qword [AD_compare]                     ; AD_compare
000000000000713a         lea        rdx, qword [AD_hash]                        ; AD_hash
0000000000007141         xor        esi, esi
0000000000007143         mov        edi, 0x1f
0000000000007148         call       hash_initialize                             ; hash_initialize
000000000000714d         test       rax, rax
0000000000007150         mov        qword [rbx], rax
0000000000007153         setne      al

                     loc_7156:
0000000000007156         pop        rbx                                         ; CODE XREF=setup_dir.isra.4+85
0000000000007157         ret
                        ; endp
0000000000007158         align      32

                     loc_7160:
0000000000007160         mov        edi, 0x20                                   ; argument "__size" for method j_malloc, CODE XREF=setup_dir.isra.4+10
0000000000007165         call       j_malloc                                    ; malloc
000000000000716a         mov        rdi, rax
000000000000716d         mov        qword [rbx], rax
0000000000007170         xor        eax, eax
0000000000007172         test       rdi, rdi
0000000000007175         je         loc_7156

0000000000007177         call       cycle_check_init                            ; cycle_check_init
000000000000717c         mov        eax, 0x1
0000000000007181         pop        rbx
0000000000007182         ret
                        ; endp
0000000000007183         align      16                                          ; End of unwind block (FDE at 0xd804)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_38: int8_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int32_t, -88


                     diropen.isra.6:
0000000000007190         mov        rax, rdx                                    ; Begin of unwind block (FDE at 0xd824), CODE XREF=fts_safe_changedir+141, rpl_fts_open+647, rpl_fts_read+1752, rpl_fts_read+1832, rpl_fts_children+202
0000000000007193         mov        edx, esi
0000000000007195         shl        edx, 0xd
0000000000007198         and        edx, 0x20000
000000000000719e         or         edx, 0x90900
00000000000071a4         and        esi, 0x200
00000000000071aa         jne        loc_71c0

00000000000071ac         mov        rdi, rax
00000000000071af         mov        esi, edx
00000000000071b1         xor        eax, eax
00000000000071b3         jmp        open_safer                                  ; open_safer
00000000000071b8         align      64

                     loc_71c0:
00000000000071c0         mov        rsi, rax                                    ; CODE XREF=diropen.isra.6+26
00000000000071c3         xor        eax, eax
00000000000071c5         jmp        openat_safer                                ; openat_safer
00000000000071ca         align      16                                          ; End of unwind block (FDE at 0xd824)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_D0: int64_t, -208
        ;    var_D8: int64_t, -216
        ;    var_D9: int8_t, -217


                     fts_safe_changedir:
00000000000071d0         push       r15                                         ; Begin of unwind block (FDE at 0xd838), CODE XREF=fts_build+2169, fts_build+2194, rpl_fts_read+542, rpl_fts_read+1123
00000000000071d2         push       r14
00000000000071d4         mov        r14, rsi
00000000000071d7         push       r13
00000000000071d9         push       r12
00000000000071db         mov        r13, rdi
00000000000071de         push       rbp
00000000000071df         push       rbx
00000000000071e0         mov        r12d, edx
00000000000071e3         mov        rbp, rcx
00000000000071e6         sub        rsp, 0xb8
00000000000071ed         mov        ebx, dword [rdi+0x48]
00000000000071f0         mov        rax, qword [fs:0x28]
00000000000071f9         mov        qword [rsp+0xe8+var_40], rax
0000000000007201         xor        eax, eax
0000000000007203         mov        r9d, ebx
0000000000007206         and        r9d, 0x4
000000000000720a         test       rcx, rcx
000000000000720d         je         loc_72c0

0000000000007213         lea        rdx, qword [aFtsreadFailed+16]              ; 0xb4be
000000000000721a         mov        ecx, 0x3
000000000000721f         mov        rsi, rbp
0000000000007222         mov        rdi, rdx
0000000000007225         rep  cmpsb byte [rsi], byte [rdi]
0000000000007227         seta       al
000000000000722a         sbb        al, 0x0
000000000000722c         test       al, al
000000000000722e         jne        loc_72c0

0000000000007234         test       r9d, r9d
0000000000007237         jne        loc_72c5

000000000000723d         test       r12d, r12d
0000000000007240         jns        loc_742a

0000000000007246         test       bh, 0x2
0000000000007249         jne        loc_7390

                     loc_724f:
000000000000724f         mov        byte [rsp+0xe8+var_D9], 0x1                 ; CODE XREF=fts_safe_changedir+489

                     loc_7254:
0000000000007254         mov        edi, dword [r13+0x2c]                       ; CODE XREF=fts_safe_changedir+466, fts_safe_changedir+629
0000000000007258         mov        rdx, rbp
000000000000725b         mov        esi, ebx
000000000000725d         call       diropen.isra.6                              ; diropen.isra.6
0000000000007262         test       eax, eax
0000000000007264         mov        r15d, eax
0000000000007267         js         loc_741b

000000000000726d         mov        ebx, dword [r13+0x48]
0000000000007271         test       bl, 0x2
0000000000007274         je         loc_731a

000000000000727a         nop        word [rax+rax]

                     loc_7280:
0000000000007280         lea        rdx, qword [rsp+0xe8+var_D8]                ; argument "__stat_buf" for method j___fxstat, CODE XREF=fts_safe_changedir+324, fts_safe_changedir+362, fts_safe_changedir+512, fts_safe_changedir+619
0000000000007285         mov        esi, r15d                                   ; argument "__fildes" for method j___fxstat
0000000000007288         mov        edi, 0x1                                    ; argument "__ver" for method j___fxstat
000000000000728d         call       j___fxstat                                  ; __fxstat
0000000000007292         test       eax, eax
0000000000007294         je         loc_7360

                     loc_729a:
000000000000729a         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+426

                     loc_729f:
000000000000729f         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+387
00000000000072a2         jns        loc_72d5

00000000000072a4         call       j___errno_location                          ; __errno_location
00000000000072a9         mov        r12d, dword [rax]
00000000000072ac         mov        rbp, rax
00000000000072af         mov        edi, r15d                                   ; argument "__fd" for method j_close
00000000000072b2         call       j_close                                     ; close
00000000000072b7         mov        dword [rbp], r12d
00000000000072bb         jmp        loc_72d5
00000000000072bd         align      64

                     loc_72c0:
00000000000072c0         test       r9d, r9d                                    ; CODE XREF=fts_safe_changedir+61, fts_safe_changedir+94
00000000000072c3         je         loc_7300

                     loc_72c5:
00000000000072c5         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+103
00000000000072c8         je         loc_72d3

00000000000072ca         test       r12d, r12d
00000000000072cd         jns        loc_7380

                     loc_72d3:
00000000000072d3         xor        ebx, ebx                                    ; CODE XREF=fts_safe_changedir+248

                     loc_72d5:
00000000000072d5         mov        rcx, qword [rsp+0xe8+var_40]                ; CODE XREF=fts_safe_changedir+210, fts_safe_changedir+235, fts_safe_changedir+442, fts_safe_changedir+547, fts_safe_changedir+592
00000000000072dd         xor        rcx, qword [fs:0x28]
00000000000072e6         mov        eax, ebx
00000000000072e8         jne        loc_7425

00000000000072ee         add        rsp, 0xb8
00000000000072f5         pop        rbx
00000000000072f6         pop        rbp
00000000000072f7         pop        r12
00000000000072f9         pop        r13
00000000000072fb         pop        r14
00000000000072fd         pop        r15
00000000000072ff         ret
                        ; endp

                     loc_7300:
0000000000007300         test       r12d, r12d                                  ; CODE XREF=fts_safe_changedir+243
0000000000007303         js         loc_7440

0000000000007309         test       bl, 0x2
000000000000730c         mov        r15d, r12d
000000000000730f         mov        byte [rsp+0xe8+var_D9], 0x0
0000000000007314         jne        loc_7280

                     loc_731a:
000000000000731a         test       rbp, rbp                                    ; CODE XREF=fts_safe_changedir+164
000000000000731d         je         loc_7340

000000000000731f         lea        rdx, qword [aFtsreadFailed+16]              ; 0xb4be

                     loc_7326:
0000000000007326         mov        ecx, 0x3                                    ; CODE XREF=fts_safe_changedir+613
000000000000732b         mov        rsi, rbp
000000000000732e         mov        rdi, rdx
0000000000007331         rep  cmpsb byte [rsi], byte [rdi]
0000000000007333         seta       al
0000000000007336         sbb        al, 0x0
0000000000007338         test       al, al
000000000000733a         je         loc_7280

                     loc_7340:
0000000000007340         and        bh, 0x2                                     ; CODE XREF=fts_safe_changedir+333, fts_safe_changedir+506, fts_safe_changedir+582
0000000000007343         jne        loc_73d8

0000000000007349         mov        edi, r15d                                   ; argument "__fd" for method j_fchdir
000000000000734c         call       j_fchdir                                    ; fchdir
0000000000007351         mov        ebx, eax
0000000000007353         jmp        loc_729f
0000000000007358         align      32

                     loc_7360:
0000000000007360         mov        rax, qword [rsp+0xe8+var_D8]                ; CODE XREF=fts_safe_changedir+196
0000000000007365         cmp        qword [r14+0x78], rax
0000000000007369         je         loc_7400

                     loc_736f:
000000000000736f         call       j___errno_location                          ; __errno_location, CODE XREF=fts_safe_changedir+572
0000000000007374         mov        dword [rax], 0x2
000000000000737a         jmp        loc_729a
000000000000737f         align      128

                     loc_7380:
0000000000007380         mov        edi, r12d                                   ; argument "__fd" for method j_close, CODE XREF=fts_safe_changedir+253
0000000000007383         xor        ebx, ebx
0000000000007385         call       j_close                                     ; close
000000000000738a         jmp        loc_72d5
000000000000738f         align      16

                     loc_7390:
0000000000007390         lea        r15, qword [r13+0x60]                       ; CODE XREF=fts_safe_changedir+121
0000000000007394         mov        rdi, r15
0000000000007397         call       i_ring_empty                                ; i_ring_empty
000000000000739c         test       al, al
000000000000739e         mov        byte [rsp+0xe8+var_D9], al
00000000000073a2         jne        loc_7254

00000000000073a8         mov        rdi, r15
00000000000073ab         call       i_ring_pop                                  ; i_ring_pop
00000000000073b0         test       eax, eax
00000000000073b2         mov        r15d, eax
00000000000073b5         mov        ebx, dword [r13+0x48]
00000000000073b9         js         loc_724f

00000000000073bf         test       bl, 0x2
00000000000073c2         mov        r12d, eax
00000000000073c5         mov        byte [rsp+0xe8+var_D9], 0x1
00000000000073ca         je         loc_7340

00000000000073d0         jmp        loc_7280
00000000000073d5         align      8

                     loc_73d8:
00000000000073d8         movzx      r14d, byte [rsp+0xe8+var_D9]                ; CODE XREF=fts_safe_changedir+371
00000000000073de         mov        esi, r15d
00000000000073e1         mov        rdi, r13
00000000000073e4         xor        ebx, ebx
00000000000073e6         xor        r14d, 0x1
00000000000073ea         movzx      edx, r14b
00000000000073ee         call       cwd_advance_fd                              ; cwd_advance_fd
00000000000073f3         jmp        loc_72d5
00000000000073f8         align      1024

                     loc_7400:
0000000000007400         mov        rax, qword [rsp+0xe8+var_D0]                ; CODE XREF=fts_safe_changedir+409
0000000000007405         cmp        qword [r14+0x80], rax
000000000000740c         jne        loc_736f

0000000000007412         mov        ebx, dword [r13+0x48]
0000000000007416         jmp        loc_7340

                     loc_741b:
000000000000741b         mov        ebx, 0xffffffff                             ; CODE XREF=fts_safe_changedir+151
0000000000007420         jmp        loc_72d5

                     loc_7425:
0000000000007425         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_safe_changedir+280
                        ; endp

                     loc_742a:
000000000000742a         test       bl, 0x2                                     ; CODE XREF=fts_safe_changedir+112
000000000000742d         mov        r15d, r12d
0000000000007430         mov        byte [rsp+0xe8+var_D9], 0x1
0000000000007435         je         loc_7326

000000000000743b         jmp        loc_7280

                     loc_7440:
0000000000007440         mov        byte [rsp+0xe8+var_D9], 0x0                 ; CODE XREF=fts_safe_changedir+307
0000000000007445         jmp        loc_7254
000000000000744a         align      16                                          ; End of unwind block (FDE at 0xd838)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     enter_dir.isra.10:
0000000000007450         and        edi, 0x102                                  ; Begin of unwind block (FDE at 0xd888), CODE XREF=fts_build+1558, rpl_fts_read+899
0000000000007456         push       r12
0000000000007458         mov        r12, rsi
000000000000745b         push       rbp
000000000000745c         push       rbx
000000000000745d         mov        rbx, rdx
0000000000007460         je         loc_74d0

0000000000007462         mov        edi, 0x18                                   ; argument "__size" for method j_malloc
0000000000007467         call       j_malloc                                    ; malloc
000000000000746c         test       rax, rax
000000000000746f         mov        rbp, rax
0000000000007472         je         loc_74f8

0000000000007478         mov        rax, qword [rbx+0x78]
000000000000747c         mov        rdi, qword [r12]
0000000000007480         mov        rsi, rbp
0000000000007483         mov        qword [rbp+0x10], rbx
0000000000007487         mov        qword [rbp], rax
000000000000748b         mov        rax, qword [rbx+0x80]
0000000000007492         mov        qword [rbp+8], rax
0000000000007496         call       hash_insert                                 ; hash_insert
000000000000749b         cmp        rbp, rax
000000000000749e         mov        r12, rax
00000000000074a1         je         loc_74c1

00000000000074a3         mov        rdi, rbp
00000000000074a6         call       sub_1da0                                    ; sub_1da0
00000000000074ab         test       r12, r12
00000000000074ae         je         loc_74f8

00000000000074b0         mov        rax, qword [r12+0x10]
00000000000074b5         mov        ecx, 0x2
00000000000074ba         mov        word [rbx+0x70], cx
00000000000074be         mov        qword [rbx], rax

                     loc_74c1:
00000000000074c1         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+81, enter_dir.isra.10+143
00000000000074c2         mov        eax, 0x1
00000000000074c7         pop        rbp
00000000000074c8         pop        r12
00000000000074ca         ret
                        ; endp
00000000000074cb         align      16

                     loc_74d0:
00000000000074d0         mov        rdi, qword [r12]                            ; CODE XREF=enter_dir.isra.10+16
00000000000074d4         lea        rsi, qword [rdx+0x78]
00000000000074d8         call       cycle_check                                 ; cycle_check
00000000000074dd         test       al, al
00000000000074df         je         loc_74c1

00000000000074e1         mov        edx, 0x2
00000000000074e6         mov        qword [rbx], rbx
00000000000074e9         mov        word [rbx+0x70], dx
00000000000074ed         pop        rbx
00000000000074ee         pop        rbp
00000000000074ef         pop        r12
00000000000074f1         ret
                        ; endp
00000000000074f2         align      8

                     loc_74f8:
00000000000074f8         pop        rbx                                         ; CODE XREF=enter_dir.isra.10+34, enter_dir.isra.10+94
00000000000074f9         xor        eax, eax
00000000000074fb         pop        rbp
00000000000074fc         pop        r12
00000000000074fe         ret
                        ; endp
00000000000074ff         align      256                                         ; End of unwind block (FDE at 0xd888)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     leave_dir.isra.12:
0000000000007500         sub        rsp, 0x28                                   ; Begin of unwind block (FDE at 0xd8cc), CODE XREF=fts_build+1530, rpl_fts_read+405, rpl_fts_read+1209, rpl_fts_read+1368
0000000000007504         mov        rcx, rsi
0000000000007507         mov        rax, qword [fs:0x28]
0000000000007510         mov        qword [rsp+0x28+var_10], rax
0000000000007515         xor        eax, eax
0000000000007517         and        edi, 0x102
000000000000751d         jne        loc_7560

000000000000751f         mov        rax, qword [rdx+8]
0000000000007523         test       rax, rax
0000000000007526         je         loc_7545

0000000000007528         cmp        qword [rax+0x58], 0x0
000000000000752d         js         loc_7545

000000000000752f         mov        rcx, qword [rsi]
0000000000007532         cmp        qword [rcx+0x10], 0x0
0000000000007537         je         loc_75b3

0000000000007539         mov        rsi, qword [rdx+0x80]
0000000000007540         cmp        qword [rcx], rsi
0000000000007543         je         loc_7590

                     loc_7545:
0000000000007545         mov        rax, qword [rsp+0x28+var_10]                ; CODE XREF=leave_dir.isra.12+38, leave_dir.isra.12+45, leave_dir.isra.12+140, leave_dir.isra.12+152, leave_dir.isra.12+172
000000000000754a         xor        rax, qword [fs:0x28]
0000000000007553         jne        loc_75ae

0000000000007555         add        rsp, 0x28
0000000000007559         ret
                        ; endp
000000000000755a         align      32

                     loc_7560:
0000000000007560         mov        rax, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+29
0000000000007564         mov        rdi, qword [rcx]
0000000000007567         mov        rsi, rsp
000000000000756a         mov        qword [rsp+0x28+var_28], rax
000000000000756e         mov        rax, qword [rdx+0x80]
0000000000007575         mov        qword [rsp+0x28+var_20], rax
000000000000757a         call       hash_delete                                 ; hash_delete
000000000000757f         test       rax, rax
0000000000007582         je         loc_75b3

0000000000007584         mov        rdi, rax
0000000000007587         call       sub_1da0                                    ; sub_1da0
000000000000758c         jmp        loc_7545
000000000000758e         align      16

                     loc_7590:
0000000000007590         mov        rsi, qword [rdx+0x78]                       ; CODE XREF=leave_dir.isra.12+67
0000000000007594         cmp        qword [rcx+8], rsi
0000000000007598         jne        loc_7545

000000000000759a         mov        rdx, qword [rax+0x78]
000000000000759e         mov        rax, qword [rax+0x80]
00000000000075a5         mov        qword [rcx+8], rdx
00000000000075a9         mov        qword [rcx], rax
00000000000075ac         jmp        loc_7545

                     loc_75ae:
00000000000075ae         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=leave_dir.isra.12+83
                        ; endp

                     loc_75b3:
00000000000075b3         call       j_abort                                     ; abort, CODE XREF=leave_dir.isra.12+55, leave_dir.isra.12+130
                        ; endp
00000000000075b8         align      64                                          ; End of unwind block (FDE at 0xd8cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_44: int32_t, -68
        ;    var_49: int8_t, -73
        ;    var_4A: int8_t, -74
        ;    var_4B: int8_t, -75
        ;    var_50: int32_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120
        ;    var_80: int64_t, -128
        ;    var_88: int64_t, -136
        ;    var_90: int64_t, -144
        ;    var_98: int64_t, -152
        ;    var_A0: int64_t, -160


                     fts_build:
00000000000075c0         push       r15                                         ; Begin of unwind block (FDE at 0xd8e8), CODE XREF=rpl_fts_read+1056, rpl_fts_read+1561, rpl_fts_children+139, rpl_fts_children+219
00000000000075c2         push       r14
00000000000075c4         mov        r15, rdi
00000000000075c7         push       r13
00000000000075c9         push       r12
00000000000075cb         push       rbp
00000000000075cc         push       rbx
00000000000075cd         sub        rsp, 0x78
00000000000075d1         mov        rbp, qword [rdi]
00000000000075d4         mov        rax, qword [fs:0x28]
00000000000075dd         mov        qword [rsp+0xa8+var_40], rax
00000000000075e2         xor        eax, eax
00000000000075e4         mov        dword [rsp+0xa8+var_50], esi
00000000000075e8         mov        rax, qword [rbp+0x18]
00000000000075ec         test       rax, rax
00000000000075ef         mov        qword [rsp+0xa8+var_58], rax
00000000000075f4         je         loc_7a30

00000000000075fa         mov        rdi, rax                                    ; argument "__dirp" for method j_dirfd
00000000000075fd         call       j_dirfd                                     ; dirfd
0000000000007602         test       eax, eax
0000000000007604         mov        dword [rsp+0xa8+var_44], eax
0000000000007608         js         loc_7b60

000000000000760e         cmp        qword [r15+0x40], 0x0
0000000000007613         je         loc_7de8

0000000000007619         mov        qword [rsp+0xa8+var_70], 0xffffffffffffffff

                     loc_7622:
0000000000007622         mov        edi, dword [r15+0x48]                       ; CODE XREF=fts_build+2207
0000000000007626         mov        byte [rsp+0xa8+var_49], 0x1

                     loc_762b:
000000000000762b         mov        rcx, qword [rbp+0x48]                       ; CODE XREF=fts_build+1405, fts_build+2106, fts_build+2121
000000000000762f         mov        rdx, qword [rbp+0x38]
0000000000007633         mov        qword [rsp+0xa8+var_68], 0x0
000000000000763c         cmp        byte [rdx+rcx-1], 0x2f
0000000000007641         lea        rax, qword [rcx-1]
0000000000007645         cmovne     rax, rcx
0000000000007649         and        edi, 0x4
000000000000764c         mov        qword [rsp+0xa8+var_60], rax
0000000000007651         je         loc_7663

0000000000007653         add        rax, qword [r15+0x20]
0000000000007657         lea        rbx, qword [rax+1]
000000000000765b         mov        byte [rax], 0x2f
000000000000765e         mov        qword [rsp+0xa8+var_68], rbx

                     loc_7663:
0000000000007663         mov        rax, qword [rsp+0xa8+var_60]                ; CODE XREF=fts_build+145
0000000000007668         mov        rbx, qword [r15+0x30]
000000000000766c         mov        byte [rsp+0xa8+var_4A], 0x0
0000000000007671         mov        byte [rsp+0xa8+var_4B], 0x0
0000000000007676         mov        qword [rsp+0xa8+var_A0], 0x0
000000000000767f         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007688         add        rax, 0x1
000000000000768c         mov        qword [rsp+0xa8+var_88], rbp
0000000000007691         sub        rbx, rax
0000000000007694         mov        qword [rsp+0xa8+var_90], rax
0000000000007699         mov        rax, qword [rbp+0x58]
000000000000769d         mov        qword [rsp+0xa8+var_80], rbx
00000000000076a2         xor        ebx, ebx
00000000000076a4         add        rax, 0x1
00000000000076a8         mov        qword [rsp+0xa8+var_78], rax
00000000000076ad         jmp        loc_778f
00000000000076b2         align      8

                     loc_76b8:
00000000000076b8         mov        r9, r14                                     ; CODE XREF=fts_build+578, fts_build+678
00000000000076bb         add        r9, qword [rsp+0xa8+var_90]
00000000000076c0         jb         loc_7f20

00000000000076c6         mov        rax, qword [rsp+0xa8+var_78]
00000000000076cb         lea        rsi, qword [r13+0x108]
00000000000076d2         mov        qword [r13+0x58], rax
00000000000076d6         mov        rax, qword [r15]
00000000000076d9         mov        qword [r13+0x48], r9
00000000000076dd         mov        qword [r13+8], rax
00000000000076e1         mov        rax, qword [rbp]
00000000000076e5         mov        qword [r13+0x80], rax
00000000000076ec         mov        eax, dword [r15+0x48]
00000000000076f0         test       al, 0x4
00000000000076f2         jne        loc_7960

00000000000076f8         mov        qword [r13+0x30], rsi

                     loc_76fc:
00000000000076fc         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+958
0000000000007701         je         loc_770c

0000000000007703         test       ah, 0x4
0000000000007706         je         loc_7a08

                     loc_770c:
000000000000770c         movzx      edx, byte [rbp+0x12]                        ; CODE XREF=fts_build+321
0000000000007710         and        eax, 0x18
0000000000007713         mov        esi, edx
0000000000007715         sub        edx, 0x1
0000000000007718         cmp        eax, 0x18
000000000000771b         je         loc_79d0

                     loc_7721:
0000000000007721         mov        ecx, 0xb                                    ; CODE XREF=fts_build+1046
0000000000007726         cmp        edx, 0xb
0000000000007729         mov        word [r13+0x70], cx
000000000000772e         ja         loc_7998

0000000000007734         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53
000000000000773b         mov        eax, dword [rax+rdx*4]
000000000000773e         mov        dword [r13+0x90], eax
0000000000007745         mov        eax, 0x2

                     loc_774a:
000000000000774a         mov        qword [r13+0xa8], rax                       ; CODE XREF=fts_build+1000, fts_build+1087, fts_build+2508

                     loc_7751:
0000000000007751         cmp        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+1114
0000000000007757         mov        qword [r13+0x10], 0x0
000000000000775f         je         loc_7988

0000000000007765         mov        rax, qword [rsp+0xa8+var_A0]
000000000000776a         mov        qword [rax+0x10], r13

                     loc_776e:
000000000000776e         cmp        rbx, 0x2710                                 ; CODE XREF=fts_build+973
0000000000007775         je         loc_7870

                     loc_777b:
000000000000777b         add        rbx, 0x1                                    ; CODE XREF=fts_build+693, fts_build+1605
000000000000777f         cmp        rbx, qword [rsp+0xa8+var_70]
0000000000007784         jae        loc_78c8

                     loc_778a:
000000000000778a         mov        qword [rsp+0xa8+var_A0], r13                ; CODE XREF=fts_build+765, fts_build+1030

                     loc_778f:
000000000000778f         mov        rax, qword [rsp+0xa8+var_88]                ; CODE XREF=fts_build+237
0000000000007794         mov        r13, qword [rax+0x18]
0000000000007798         test       r13, r13
000000000000779b         je         loc_7c68

00000000000077a1         call       j___errno_location                          ; __errno_location
00000000000077a6         mov        rdi, r13                                    ; argument "__dirp" for method j_readdir
00000000000077a9         mov        dword [rax], 0x0
00000000000077af         mov        r12, rax
00000000000077b2         call       j_readdir                                   ; readdir
00000000000077b7         test       rax, rax
00000000000077ba         mov        rbp, rax
00000000000077bd         je         loc_7d40

00000000000077c3         test       byte [r15+0x48], 0x20
00000000000077c8         jne        loc_77d4

00000000000077ca         cmp        byte [rax+0x13], 0x2e
00000000000077ce         je         loc_79b0

                     loc_77d4:
00000000000077d4         lea        r13, qword [rbp+0x13]                       ; CODE XREF=fts_build+520, fts_build+1019
00000000000077d8         mov        rdi, r13                                    ; argument "__s" for method j_strlen
00000000000077db         call       j_strlen                                    ; strlen
00000000000077e0         mov        rsi, r13
00000000000077e3         mov        rdx, rax
00000000000077e6         mov        rdi, r15
00000000000077e9         mov        r14, rax
00000000000077ec         call       fts_alloc                                   ; fts_alloc
00000000000077f1         test       rax, rax
00000000000077f4         mov        r13, rax
00000000000077f7         je         loc_7c10

00000000000077fd         cmp        qword [rsp+0xa8+var_80], r14
0000000000007802         ja         loc_76b8

0000000000007808         mov        rax, qword [r15+0x20]
000000000000780c         lea        rsi, qword [r15+0x30]
0000000000007810         lea        rdi, qword [r15+0x20]
0000000000007814         mov        qword [rsp+0xa8+var_80], rax
0000000000007819         mov        rax, qword [rsp+0xa8+var_60]
000000000000781e         lea        rdx, qword [rax+r14+2]
0000000000007823         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
0000000000007828         test       al, al
000000000000782a         je         loc_7c10

0000000000007830         mov        rdx, qword [r15+0x20]
0000000000007834         cmp        rdx, qword [rsp+0xa8+var_80]
0000000000007839         je         loc_7a20

000000000000783f         add        rdx, qword [rsp+0xa8+var_90]
0000000000007844         test       byte [r15+0x48], 0x4
0000000000007849         cmove      rdx, qword [rsp+0xa8+var_68]
000000000000784f         mov        qword [rsp+0xa8+var_68], rdx

                     loc_7854:
0000000000007854         mov        rcx, qword [r15+0x30]                       ; CODE XREF=fts_build+1125
0000000000007858         sub        rcx, qword [rsp+0xa8+var_90]
000000000000785d         mov        byte [rsp+0xa8+var_4B], al
0000000000007861         mov        qword [rsp+0xa8+var_80], rcx
0000000000007866         jmp        loc_76b8
000000000000786b         align      16

                     loc_7870:
0000000000007870         cmp        qword [r15+0x40], 0x0                       ; CODE XREF=fts_build+437
0000000000007875         jne        loc_777b

000000000000787b         mov        esi, dword [rsp+0xa8+var_44]
000000000000787f         mov        rdi, qword [rsp+0xa8+var_88]
0000000000007884         call       filesystem_type                             ; filesystem_type
0000000000007889         cmp        rax, 0x1021994
000000000000788f         je         loc_7c00

0000000000007895         mov        ecx, 0xff534d42
000000000000789a         cmp        rax, rcx
000000000000789d         je         loc_7c00

00000000000078a3         cmp        rax, 0x6969
00000000000078a9         je         loc_7c00

00000000000078af         add        rbx, 0x1
00000000000078b3         cmp        rbx, qword [rsp+0xa8+var_70]
00000000000078b8         mov        byte [rsp+0xa8+var_4A], 0x1
00000000000078bd         jb         loc_778a

00000000000078c3         nop        dword [rax+rax]

                     loc_78c8:
00000000000078c8         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+452
00000000000078cd         mov        rbp, qword [rsp+0xa8+var_88]
00000000000078d2         je         loc_7c76

                     loc_78d8:
00000000000078d8         mov        rax, qword [r15+8]                          ; CODE XREF=fts_build+1712
00000000000078dc         mov        rcx, qword [r15+0x20]
00000000000078e0         test       rax, rax
00000000000078e3         je         loc_7910

00000000000078e5         nop        dword [rax]

                     loc_78e8:
00000000000078e8         mov        rdx, qword [rax+0x30]                       ; CODE XREF=fts_build+846
00000000000078ec         lea        rsi, qword [rax+0x108]
00000000000078f3         cmp        rdx, rsi
00000000000078f6         je         loc_7903

00000000000078f8         sub        rdx, qword [rax+0x38]
00000000000078fc         add        rdx, rcx
00000000000078ff         mov        qword [rax+0x30], rdx

                     loc_7903:
0000000000007903         mov        qword [rax+0x38], rcx                       ; CODE XREF=fts_build+822
0000000000007907         mov        rax, qword [rax+0x10]
000000000000790b         test       rax, rax
000000000000790e         jne        loc_78e8

                     loc_7910:
0000000000007910         mov        rax, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+803
0000000000007915         jmp        loc_7923
0000000000007917         align      32

                     loc_7920:
0000000000007920         mov        rax, rdx                                    ; CODE XREF=fts_build+916, fts_build+922

                     loc_7923:
0000000000007923         cmp        qword [rax+0x58], 0x0                       ; CODE XREF=fts_build+853
0000000000007928         js         loc_7c76

000000000000792e         mov        rdx, qword [rax+0x30]
0000000000007932         lea        rsi, qword [rax+0x108]
0000000000007939         cmp        rdx, rsi
000000000000793c         je         loc_7949

000000000000793e         sub        rdx, qword [rax+0x38]
0000000000007942         add        rdx, rcx
0000000000007945         mov        qword [rax+0x30], rdx

                     loc_7949:
0000000000007949         mov        rdx, qword [rax+0x10]                       ; CODE XREF=fts_build+892
000000000000794d         mov        qword [rax+0x38], rcx
0000000000007951         test       rdx, rdx
0000000000007954         jne        loc_7920

0000000000007956         mov        rdx, qword [rax+8]
000000000000795a         jmp        loc_7920
000000000000795c         align      32

                     loc_7960:
0000000000007960         mov        rax, qword [r13+0x38]                       ; CODE XREF=fts_build+306
0000000000007964         mov        rdi, qword [rsp+0xa8+var_68]                ; argument "__dest" for method j_memmove
0000000000007969         mov        qword [r13+0x30], rax
000000000000796d         mov        rax, qword [r13+0x60]
0000000000007971         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
0000000000007975         call       j_memmove                                   ; memmove
000000000000797a         mov        eax, dword [r15+0x48]
000000000000797e         jmp        loc_76fc
0000000000007983         align      8

                     loc_7988:
0000000000007988         mov        qword [rsp+0xa8+var_98], r13                ; CODE XREF=fts_build+415
000000000000798d         jmp        loc_776e
0000000000007992         align      8

                     loc_7998:
0000000000007998         mov        dword [r13+0x90], 0x0                       ; CODE XREF=fts_build+366
00000000000079a3         mov        eax, 0x2
00000000000079a8         jmp        loc_774a
00000000000079ad         align      16

                     loc_79b0:
00000000000079b0         cmp        byte [rax+0x14], 0x0                        ; CODE XREF=fts_build+526
00000000000079b4         je         loc_79c1

00000000000079b6         cmp        word [rax+0x14], 0x2e
00000000000079bb         jne        loc_77d4

                     loc_79c1:
00000000000079c1         mov        r13, qword [rsp+0xa8+var_A0]                ; CODE XREF=fts_build+1012
00000000000079c6         jmp        loc_778a
00000000000079cb         align      16

                     loc_79d0:
00000000000079d0         and        esi, 0xfb                                   ; CODE XREF=fts_build+347
00000000000079d6         je         loc_7721

00000000000079dc         mov        eax, 0xb
00000000000079e1         cmp        edx, 0xb
00000000000079e4         mov        word [r13+0x70], ax
00000000000079e9         jbe        loc_7f76

00000000000079ef         mov        dword [r13+0x90], 0x0
00000000000079fa         mov        eax, 0x1
00000000000079ff         jmp        loc_774a
0000000000007a04         align      8

                     loc_7a08:
0000000000007a08         xor        edx, edx                                    ; CODE XREF=fts_build+326
0000000000007a0a         mov        rsi, r13
0000000000007a0d         mov        rdi, r15
0000000000007a10         call       fts_stat                                    ; fts_stat
0000000000007a15         mov        word [r13+0x70], ax
0000000000007a1a         jmp        loc_7751
0000000000007a1f         align      32

                     loc_7a20:
0000000000007a20         movzx      eax, byte [rsp+0xa8+var_4B]                 ; CODE XREF=fts_build+633
0000000000007a25         jmp        loc_7854
0000000000007a2a         align      16

                     loc_7a30:
0000000000007a30         mov        eax, dword [rdi+0x48]                       ; CODE XREF=fts_build+52
0000000000007a33         mov        edx, eax
0000000000007a35         and        edx, 0x10
0000000000007a38         je         loc_7a47

0000000000007a3a         test       al, 0x1
0000000000007a3c         mov        edx, 0x20000
0000000000007a41         jne        loc_7b48

                     loc_7a47:
0000000000007a47         and        eax, 0x204                                  ; CODE XREF=fts_build+1144, fts_build+1429
0000000000007a4c         mov        rsi, qword [rbp+0x30]
0000000000007a50         mov        edi, 0xffffff9c
0000000000007a55         cmp        eax, 0x200
0000000000007a5a         jne        loc_7a60

0000000000007a5c         mov        edi, dword [r15+0x2c]

                     loc_7a60:
0000000000007a60         lea        rcx, qword [rsp+0xa8+var_44]                ; CODE XREF=fts_build+1178
0000000000007a65         call       opendirat                                   ; opendirat
0000000000007a6a         test       rax, rax
0000000000007a6d         mov        qword [rbp+0x18], rax
0000000000007a71         je         loc_7d90

0000000000007a77         cmp        word [rbp+0x70], 0xb
0000000000007a7c         je         loc_7e10

0000000000007a82         mov        edi, dword [r15+0x48]
0000000000007a86         test       edi, 0x100
0000000000007a8c         jne        loc_7bb0

                     loc_7a92:
0000000000007a92         cmp        qword [r15+0x40], 0x1                       ; CODE XREF=fts_build+1565, fts_build+2145
0000000000007a97         sbb        rax, rax
0000000000007a9a         and        eax, 0x186a1
0000000000007a9f         sub        rax, 0x1
0000000000007aa3         cmp        dword [rsp+0xa8+var_50], 0x2
0000000000007aa8         mov        qword [rsp+0xa8+var_70], rax
0000000000007aad         je         loc_7e00

0000000000007ab3         mov        edx, dword [r15+0x48]
0000000000007ab7         mov        eax, dword [rsp+0xa8+var_44]
0000000000007abb         and        edx, 0x38
0000000000007abe         cmp        edx, 0x18
0000000000007ac1         je         loc_7e64

                     loc_7ac7:
0000000000007ac7         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2220, fts_build+2244
0000000000007acc         mov        r12d, 0x1
0000000000007ad2         sete       bl

                     loc_7ad5:
0000000000007ad5         test       byte [r15+0x49], 0x2                        ; CODE XREF=fts_build+2389
0000000000007ada         jne        loc_7ebc

                     loc_7ae0:
0000000000007ae0         test       eax, eax                                    ; CODE XREF=fts_build+2323
0000000000007ae2         jns        loc_7e48

                     loc_7ae8:
0000000000007ae8         test       bl, bl                                      ; CODE XREF=fts_build+2201
0000000000007aea         je         loc_7afb

0000000000007aec         test       r12b, r12b
0000000000007aef         je         loc_7afb

0000000000007af1         call       j___errno_location                          ; __errno_location
0000000000007af6         mov        eax, dword [rax]
0000000000007af8         mov        dword [rbp+0x40], eax

                     loc_7afb:
0000000000007afb         or         word [rbp+0x72], 0x1                        ; CODE XREF=fts_build+1322, fts_build+1327
0000000000007b00         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
0000000000007b04         call       j_closedir                                  ; closedir
0000000000007b09         mov        edi, dword [r15+0x48]
0000000000007b0d         mov        qword [rbp+0x18], 0x0
0000000000007b15         test       edi, 0x200
0000000000007b1b         je         loc_7b30

0000000000007b1d         mov        eax, dword [rsp+0xa8+var_44]
0000000000007b21         test       eax, eax
0000000000007b23         js         loc_7b30

0000000000007b25         mov        edi, eax                                    ; argument "__fd" for method j_close
0000000000007b27         call       j_close                                     ; close
0000000000007b2c         mov        edi, dword [r15+0x48]

                     loc_7b30:
0000000000007b30         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=fts_build+1371, fts_build+1379
0000000000007b38         mov        byte [rsp+0xa8+var_49], 0x0
0000000000007b3d         jmp        loc_762b
0000000000007b42         align      8

                     loc_7b48:
0000000000007b48         xor        edx, edx                                    ; CODE XREF=fts_build+1153
0000000000007b4a         cmp        qword [rbp+0x58], 0x0
0000000000007b4f         setne      dl
0000000000007b52         shl        edx, 0x11
0000000000007b55         jmp        loc_7a47
0000000000007b5a         align      32

                     loc_7b60:
0000000000007b60         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir, CODE XREF=fts_build+72
0000000000007b64         call       j_closedir                                  ; closedir
0000000000007b69         cmp        dword [rsp+0xa8+var_50], 0x3
0000000000007b6e         mov        qword [rbp+0x18], 0x0
0000000000007b76         je         loc_7d9b

                     loc_7b7c:
0000000000007b7c         mov        qword [rsp+0xa8+var_98], 0x0                ; CODE XREF=fts_build+2005, fts_build+2032

                     loc_7b85:
0000000000007b85         mov        rbx, qword [rsp+0xa8+var_40]                ; CODE XREF=fts_build+1591, fts_build+1692, fts_build+1798, fts_build+1808, fts_build+1835, fts_build+1907, fts_build+2080, fts_build+2295, fts_build+2476
0000000000007b8a         xor        rbx, qword [fs:0x28]
0000000000007b93         mov        rax, qword [rsp+0xa8+var_98]
0000000000007b98         jne        loc_7f71

0000000000007b9e         add        rsp, 0x78
0000000000007ba2         pop        rbx
0000000000007ba3         pop        rbp
0000000000007ba4         pop        r12
0000000000007ba6         pop        r13
0000000000007ba8         pop        r14
0000000000007baa         pop        r15
0000000000007bac         ret
                        ; endp
0000000000007bad         align      16

                     loc_7bb0:
0000000000007bb0         lea        rbx, qword [r15+0x58]                       ; CODE XREF=fts_build+1228
0000000000007bb4         mov        rdx, rbp
0000000000007bb7         mov        rsi, rbx
0000000000007bba         call       leave_dir.isra.12                           ; leave_dir.isra.12
0000000000007bbf         xor        edx, edx
0000000000007bc1         mov        rsi, rbp
0000000000007bc4         mov        rdi, r15
0000000000007bc7         call       fts_stat                                    ; fts_stat
0000000000007bcc         mov        edi, dword [r15+0x48]
0000000000007bd0         mov        rdx, rbp
0000000000007bd3         mov        rsi, rbx
0000000000007bd6         call       enter_dir.isra.10                           ; enter_dir.isra.10
0000000000007bdb         test       al, al
0000000000007bdd         jne        loc_7a92

0000000000007be3         call       j___errno_location                          ; __errno_location
0000000000007be8         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007bf1         mov        dword [rax], 0xc
0000000000007bf7         jmp        loc_7b85
0000000000007bf9         align      1024

                     loc_7c00:
0000000000007c00         mov        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+719, fts_build+733, fts_build+745
0000000000007c05         jmp        loc_777b
0000000000007c0a         align      16

                     loc_7c10:
0000000000007c10         mov        rdi, r13                                    ; CODE XREF=fts_build+567, fts_build+618
0000000000007c13         mov        rbp, qword [rsp+0xa8+var_88]
0000000000007c18         mov        ebx, dword [r12]
0000000000007c1c         call       sub_1da0                                    ; sub_1da0
0000000000007c21         mov        rdi, qword [rsp+0xa8+var_98]
0000000000007c26         call       fts_lfree                                   ; fts_lfree
0000000000007c2b         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
0000000000007c2f         call       j_closedir                                  ; closedir
0000000000007c34         mov        r9d, 0x7
0000000000007c3a         mov        qword [rbp+0x18], 0x0
0000000000007c42         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007c4b         mov        word [rbp+0x70], r9w
0000000000007c50         or         dword [r15+0x48], 0x2000
0000000000007c58         mov        dword [r12], ebx
0000000000007c5c         jmp        loc_7b85
0000000000007c61         align      8

                     loc_7c68:
0000000000007c68         mov        rbp, rax                                    ; CODE XREF=fts_build+475

                     loc_7c6b:
0000000000007c6b         cmp        byte [rsp+0xa8+var_4B], 0x0                 ; CODE XREF=fts_build+1973, fts_build+1992
0000000000007c70         jne        loc_78d8

                     loc_7c76:
0000000000007c76         test       byte [r15+0x48], 0x4                        ; CODE XREF=fts_build+786, fts_build+872
0000000000007c7b         je         loc_7c9b

0000000000007c7d         mov        rax, qword [rsp+0xa8+var_90]
0000000000007c82         cmp        qword [r15+0x30], rax
0000000000007c86         je         loc_7c8d

0000000000007c88         test       rbx, rbx
0000000000007c8b         jne        loc_7c93

                     loc_7c8d:
0000000000007c8d         sub        qword [rsp+0xa8+var_68], 0x1                ; CODE XREF=fts_build+1734

                     loc_7c93:
0000000000007c93         mov        rax, qword [rsp+0xa8+var_68]                ; CODE XREF=fts_build+1739
0000000000007c98         mov        byte [rax], 0x0

                     loc_7c9b:
0000000000007c9b         cmp        qword [rsp+0xa8+var_58], 0x0                ; CODE XREF=fts_build+1723
0000000000007ca1         jne        loc_7d10

0000000000007ca3         cmp        byte [rsp+0xa8+var_49], 0x0
0000000000007ca8         je         loc_7d10

0000000000007caa         cmp        dword [rsp+0xa8+var_50], 0x1
0000000000007caf         je         loc_7cf0

0000000000007cb1         test       rbx, rbx
0000000000007cb4         je         loc_7cf0

                     loc_7cb6:
0000000000007cb6         cmp        byte [rsp+0xa8+var_4A], 0x0                 ; CODE XREF=fts_build+1875
0000000000007cbb         jne        loc_7db8

0000000000007cc1         cmp        qword [r15+0x40], 0x0
0000000000007cc6         je         loc_7b85

0000000000007ccc         cmp        rbx, 0x1
0000000000007cd0         je         loc_7b85

0000000000007cd6         mov        rsi, qword [rsp+0xa8+var_98]
0000000000007cdb         mov        rdx, rbx
0000000000007cde         mov        rdi, r15
0000000000007ce1         call       fts_sort                                    ; fts_sort
0000000000007ce6         mov        qword [rsp+0xa8+var_98], rax
0000000000007ceb         jmp        loc_7b85

                     loc_7cf0:
0000000000007cf0         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=fts_build+1775, fts_build+1780
0000000000007cf5         jne        loc_7e26

0000000000007cfb         mov        rdi, r15
0000000000007cfe         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000007d03         test       eax, eax
0000000000007d05         setne      al

                     loc_7d08:
0000000000007d08         test       al, al                                      ; CODE XREF=fts_build+2179
0000000000007d0a         jne        loc_7e93

                     loc_7d10:
0000000000007d10         test       rbx, rbx                                    ; CODE XREF=fts_build+1761, fts_build+1768
0000000000007d13         jne        loc_7cb6

0000000000007d15         cmp        dword [rsp+0xa8+var_50], 0x3
0000000000007d1a         je         loc_7ed8

                     loc_7d20:
0000000000007d20         mov        rdi, qword [rsp+0xa8+var_98]                ; CODE XREF=fts_build+2336, fts_build+2346, fts_build+2361
0000000000007d25         call       fts_lfree                                   ; fts_lfree
0000000000007d2a         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007d33         jmp        loc_7b85
0000000000007d38         align      64

                     loc_7d40:
0000000000007d40         mov        eax, dword [r12]                            ; CODE XREF=fts_build+509
0000000000007d44         mov        rbp, qword [rsp+0xa8+var_88]
0000000000007d49         test       eax, eax
0000000000007d4b         je         loc_7d6e

0000000000007d4d         test       rbx, rbx
0000000000007d50         mov        dword [rbp+0x40], eax
0000000000007d53         jne        loc_7e89

0000000000007d59         cmp        qword [rsp+0xa8+var_58], 0x0
0000000000007d5f         mov        eax, 0x4
0000000000007d64         jne        loc_7e89

                     loc_7d6a:
0000000000007d6a         mov        word [rbp+0x70], ax                         ; CODE XREF=fts_build+2254

                     loc_7d6e:
0000000000007d6e         mov        rdi, qword [rbp+0x18]                       ; CODE XREF=fts_build+1931
0000000000007d72         test       rdi, rdi
0000000000007d75         je         loc_7c6b

0000000000007d7b         call       j_closedir                                  ; closedir
0000000000007d80         mov        qword [rbp+0x18], 0x0
0000000000007d88         jmp        loc_7c6b
0000000000007d8d         align      16

                     loc_7d90:
0000000000007d90         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+1201
0000000000007d95         jne        loc_7b7c

                     loc_7d9b:
0000000000007d9b         mov        r10d, 0x4                                   ; CODE XREF=fts_build+1462
0000000000007da1         mov        word [rbp+0x70], r10w
0000000000007da6         call       j___errno_location                          ; __errno_location
0000000000007dab         mov        eax, dword [rax]
0000000000007dad         mov        dword [rbp+0x40], eax
0000000000007db0         jmp        loc_7b7c
0000000000007db5         align      8

                     loc_7db8:
0000000000007db8         lea        rax, qword [fts_compare_ino]                ; fts_compare_ino, CODE XREF=fts_build+1787
0000000000007dbf         mov        rsi, qword [rsp+0xa8+var_98]
0000000000007dc4         mov        rdx, rbx
0000000000007dc7         mov        rdi, r15
0000000000007dca         mov        qword [r15+0x40], rax
0000000000007dce         call       fts_sort                                    ; fts_sort
0000000000007dd3         mov        qword [r15+0x40], 0x0
0000000000007ddb         mov        qword [rsp+0xa8+var_98], rax
0000000000007de0         jmp        loc_7b85
0000000000007de5         align      8

                     loc_7de8:
0000000000007de8         mov        qword [rsp+0xa8+var_70], 0x186a0            ; CODE XREF=fts_build+83
0000000000007df1         mov        byte [rsp+0xa8+var_49], 0x1
0000000000007df6         mov        edi, dword [r15+0x48]
0000000000007dfa         jmp        loc_762b
0000000000007dff         align      512

                     loc_7e00:
0000000000007e00         mov        byte [rsp+0xa8+var_49], 0x0                 ; CODE XREF=fts_build+1261, fts_build+2371
0000000000007e05         mov        edi, dword [r15+0x48]
0000000000007e09         jmp        loc_762b
0000000000007e0e         align      16

                     loc_7e10:
0000000000007e10         xor        edx, edx                                    ; CODE XREF=fts_build+1212
0000000000007e12         mov        rsi, rbp
0000000000007e15         mov        rdi, r15
0000000000007e18         call       fts_stat                                    ; fts_stat
0000000000007e1d         mov        word [rbp+0x70], ax
0000000000007e21         jmp        loc_7a92

                     loc_7e26:
0000000000007e26         mov        rsi, qword [rbp+8]                          ; CODE XREF=fts_build+1845
0000000000007e2a         lea        rcx, qword [aFtsreadFailed+16]              ; 0xb4be
0000000000007e31         mov        edx, 0xffffffff
0000000000007e36         mov        rdi, r15
0000000000007e39         call       fts_safe_changedir                          ; fts_safe_changedir
0000000000007e3e         test       eax, eax
0000000000007e40         setne      al
0000000000007e43         jmp        loc_7d08

                     loc_7e48:
0000000000007e48         xor        ecx, ecx                                    ; CODE XREF=fts_build+1314
0000000000007e4a         mov        edx, eax
0000000000007e4c         mov        rsi, rbp
0000000000007e4f         mov        rdi, r15
0000000000007e52         call       fts_safe_changedir                          ; fts_safe_changedir
0000000000007e57         test       eax, eax
0000000000007e59         jne        loc_7ae8

0000000000007e5f         jmp        loc_7622

                     loc_7e64:
0000000000007e64         cmp        qword [rbp+0x88], 0x2                       ; CODE XREF=fts_build+1281
0000000000007e6c         jne        loc_7ac7

0000000000007e72         mov        esi, eax
0000000000007e74         mov        rdi, rbp
0000000000007e77         call       leaf_optimization                           ; leaf_optimization
0000000000007e7c         test       eax, eax
0000000000007e7e         jne        loc_7efe

0000000000007e80         mov        eax, dword [rsp+0xa8+var_44]
0000000000007e84         jmp        loc_7ac7

                     loc_7e89:
0000000000007e89         mov        eax, 0x7                                    ; CODE XREF=fts_build+1939, fts_build+1956
0000000000007e8e         jmp        loc_7d6a

                     loc_7e93:
0000000000007e93         mov        edi, 0x7                                    ; CODE XREF=fts_build+1866
0000000000007e98         mov        word [rbp+0x70], di
0000000000007e9c         or         dword [r15+0x48], 0x2000
0000000000007ea4         mov        rdi, qword [rsp+0xa8+var_98]
0000000000007ea9         call       fts_lfree                                   ; fts_lfree
0000000000007eae         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007eb7         jmp        loc_7b85

                     loc_7ebc:
0000000000007ebc         mov        edi, eax                                    ; CODE XREF=fts_build+1306
0000000000007ebe         mov        edx, 0x3
0000000000007ec3         mov        esi, 0x406
0000000000007ec8         xor        eax, eax
0000000000007eca         call       rpl_fcntl                                   ; rpl_fcntl
0000000000007ecf         mov        dword [rsp+0xa8+var_44], eax
0000000000007ed3         jmp        loc_7ae0

                     loc_7ed8:
0000000000007ed8         movzx      eax, word [rbp+0x70]                        ; CODE XREF=fts_build+1882
0000000000007edc         cmp        ax, 0x7
0000000000007ee0         je         loc_7d20

0000000000007ee6         cmp        ax, 0x4
0000000000007eea         je         loc_7d20

0000000000007ef0         mov        esi, 0x6
0000000000007ef5         mov        word [rbp+0x70], si
0000000000007ef9         jmp        loc_7d20

                     loc_7efe:
0000000000007efe         cmp        dword [rsp+0xa8+var_50], 0x3                ; CODE XREF=fts_build+2238
0000000000007f03         jne        loc_7e00

0000000000007f09         mov        eax, dword [rsp+0xa8+var_44]
0000000000007f0d         xor        r12d, r12d
0000000000007f10         mov        ebx, 0x1
0000000000007f15         jmp        loc_7ad5
0000000000007f1a         align      32

                     loc_7f20:
0000000000007f20         mov        rdi, r13                                    ; CODE XREF=fts_build+256
0000000000007f23         mov        rbp, qword [rsp+0xa8+var_88]
0000000000007f28         call       sub_1da0                                    ; sub_1da0
0000000000007f2d         mov        rdi, qword [rsp+0xa8+var_98]
0000000000007f32         call       fts_lfree                                   ; fts_lfree
0000000000007f37         mov        rdi, qword [rbp+0x18]                       ; argument "__dirp" for method j_closedir
0000000000007f3b         call       j_closedir                                  ; closedir
0000000000007f40         mov        r8d, 0x7
0000000000007f46         mov        qword [rbp+0x18], 0x0
0000000000007f4e         mov        qword [rsp+0xa8+var_98], 0x0
0000000000007f57         mov        word [rbp+0x70], r8w
0000000000007f5c         or         dword [r15+0x48], 0x2000
0000000000007f64         mov        dword [r12], 0x24
0000000000007f6c         jmp        loc_7b85

                     loc_7f71:
0000000000007f71         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=fts_build+1496
                        ; endp

                     loc_7f76:
0000000000007f76         lea        rax, qword [CSWTCH.53]                      ; CSWTCH.53, CODE XREF=fts_build+1065
0000000000007f7d         mov        eax, dword [rax+rdx*4]
0000000000007f80         mov        dword [r13+0x90], eax
0000000000007f87         mov        eax, 0x1
0000000000007f8c         jmp        loc_774a
0000000000007f91         align      32                                          ; End of unwind block (FDE at 0xd8e8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_40: int64_t, -64
        ;    var_41: int8_t, -65
        ;    var_42: int8_t, -66
        ;    var_50: int64_t, -80


                     rpl_fts_open:
0000000000007fa0         push       r15                                         ; Begin of unwind block (FDE at 0xd938), CODE XREF=xfts_open+10
0000000000007fa2         push       r14
0000000000007fa4         push       r13
0000000000007fa6         push       r12
0000000000007fa8         push       rbp
0000000000007fa9         push       rbx
0000000000007faa         sub        rsp, 0x28
0000000000007fae         test       esi, 0xfffff000
0000000000007fb4         jne        loc_8338

0000000000007fba         mov        eax, esi
0000000000007fbc         mov        ebp, esi
0000000000007fbe         and        eax, 0x204
0000000000007fc3         cmp        eax, 0x204
0000000000007fc8         je         loc_8338

0000000000007fce         test       sil, 0x12
0000000000007fd2         je         loc_8338

0000000000007fd8         mov        r13, rdi
0000000000007fdb         mov        esi, 0x1                                    ; argument "__size" for method j_calloc
0000000000007fe0         mov        edi, 0x80                                   ; argument "__nmemb" for method j_calloc
0000000000007fe5         mov        r14, rdx
0000000000007fe8         call       j_calloc                                    ; calloc
0000000000007fed         test       rax, rax
0000000000007ff0         mov        rbx, rax
0000000000007ff3         je         loc_824e

0000000000007ff9         test       bpl, 0x2
0000000000007ffd         mov        qword [rax+0x40], r14
0000000000008001         jne        loc_8260

0000000000008007         mov        rdi, qword [r13]
000000000000800b         mov        dword [rax+0x48], ebp
000000000000800e         mov        dword [rbx+0x2c], 0xffffff9c
0000000000008015         test       rdi, rdi
0000000000008018         je         loc_827f

                     loc_801e:
000000000000801e         mov        r15, r13                                    ; CODE XREF=rpl_fts_open+729
0000000000008021         xor        r12d, r12d
0000000000008024         nop        dword [rax]

                     loc_8028:
0000000000008028         call       j_strlen                                    ; strlen, CODE XREF=rpl_fts_open+158
000000000000802d         cmp        r12, rax
0000000000008030         cmovb      r12, rax
0000000000008034         add        r15, 0x8
0000000000008038         mov        rdi, qword [r15]
000000000000803b         test       rdi, rdi
000000000000803e         jne        loc_8028

0000000000008040         lea        rdx, qword [r12+1]
0000000000008045         mov        eax, 0x1000
000000000000804a         cmp        rdx, 0x1000
0000000000008051         cmovb      rdx, rax

                     loc_8055:
0000000000008055         lea        rsi, qword [rbx+0x30]                       ; CODE XREF=rpl_fts_open+740
0000000000008059         lea        rdi, qword [rbx+0x20]
000000000000805d         call       fts_palloc.isra.2                           ; fts_palloc.isra.2
0000000000008062         test       al, al
0000000000008064         mov        byte [rsp+0x58+var_42], al
0000000000008068         je         loc_8309

000000000000806e         mov        rsi, qword [r13]
0000000000008072         test       rsi, rsi
0000000000008075         je         loc_8320

000000000000807b         lea        rsi, qword [aWrittenBySSAnd+27]             ; 0xbea1
0000000000008082         xor        edx, edx
0000000000008084         mov        rdi, rbx
0000000000008087         call       fts_alloc                                   ; fts_alloc
000000000000808c         test       rax, rax
000000000000808f         mov        r15, rax
0000000000008092         je         loc_8300

0000000000008098         mov        rax, 0xffffffffffffffff
000000000000809f         test       r14, r14
00000000000080a2         mov        rsi, qword [r13]
00000000000080a6         mov        qword [r15+0x58], rax
00000000000080aa         mov        qword [r15+0x68], rax
00000000000080ae         je         loc_80bd

                     loc_80b0:
00000000000080b0         mov        eax, dword [rbx+0x48]                       ; CODE XREF=rpl_fts_open+902
00000000000080b3         shr        eax, 0xa
00000000000080b6         and        eax, 0x1
00000000000080b9         mov        byte [rsp+0x58+var_42], al

                     loc_80bd:
00000000000080bd         test       rsi, rsi                                    ; CODE XREF=rpl_fts_open+270
00000000000080c0         je         loc_832c

00000000000080c6         shr        ebp, 0xb
00000000000080c9         mov        qword [rsp+0x58+var_40], 0x0
00000000000080d2         xor        r12d, r12d
00000000000080d5         xor        ebp, 0x1
00000000000080d8         mov        eax, ebp
00000000000080da         xor        ebp, ebp
00000000000080dc         and        eax, 0x1
00000000000080df         mov        byte [rsp+0x58+var_41], al
00000000000080e3         jmp        loc_815c
00000000000080e5         align      8

                     loc_80e8:
00000000000080e8         mov        rdx, rax                                    ; CODE XREF=rpl_fts_open+466, rpl_fts_open+477, rpl_fts_open+488, rpl_fts_open+501, rpl_fts_open+517
00000000000080eb         mov        rdi, rbx
00000000000080ee         call       fts_alloc                                   ; fts_alloc
00000000000080f3         test       rax, rax
00000000000080f6         mov        rcx, rax
00000000000080f9         je         loc_82f0

00000000000080ff         mov        qword [rax+0x58], 0x0
0000000000008107         mov        qword [rax+8], r15
000000000000810b         lea        rax, qword [rax+0x108]
0000000000008112         test       r12, r12
0000000000008115         mov        qword [rcx+0x30], rax
0000000000008119         je         loc_8290

000000000000811f         cmp        byte [rsp+0x58+var_42], 0x0
0000000000008124         je         loc_8290

000000000000812a         mov        esi, 0xb
000000000000812f         test       r14, r14
0000000000008132         mov        qword [rcx+0xa8], 0x2
000000000000813d         mov        word [rcx+0x70], si
0000000000008141         je         loc_82d0

                     loc_8147:
0000000000008147         mov        qword [rcx+0x10], r12                       ; CODE XREF=rpl_fts_open+782
000000000000814b         mov        r12, rcx

                     loc_814e:
000000000000814e         add        rbp, 0x1                                    ; CODE XREF=rpl_fts_open+809, rpl_fts_open+838
0000000000008152         mov        rsi, qword [r13+rbp*8]
0000000000008157         test       rsi, rsi
000000000000815a         je         loc_81b0

                     loc_815c:
000000000000815c         mov        rdi, rsi                                    ; argument "__s" for method j_strlen, CODE XREF=rpl_fts_open+323
000000000000815f         mov        qword [rsp+0x58+var_50], rsi
0000000000008164         call       j_strlen                                    ; strlen
0000000000008169         cmp        rax, 0x2
000000000000816d         mov        rsi, qword [rsp+0x58+var_50]
0000000000008172         jbe        loc_80e8

0000000000008178         cmp        byte [rsp+0x58+var_41], 0x0
000000000000817d         je         loc_80e8

0000000000008183         cmp        byte [rsi+rax-1], 0x2f
0000000000008188         jne        loc_80e8

000000000000818e         nop

                     loc_8190:
0000000000008190         cmp        byte [rsi+rax-2], 0x2f                      ; CODE XREF=rpl_fts_open+515
0000000000008195         jne        loc_80e8

000000000000819b         sub        rax, 0x1
000000000000819f         cmp        rax, 0x1
00000000000081a3         jne        loc_8190

00000000000081a5         jmp        loc_80e8
00000000000081aa         align      16

                     loc_81b0:
00000000000081b0         test       r14, r14                                    ; CODE XREF=rpl_fts_open+442
00000000000081b3         je         loc_81cc

00000000000081b5         cmp        rbp, 0x1
00000000000081b9         jbe        loc_81cc

00000000000081bb         mov        rsi, r12
00000000000081be         mov        rdx, rbp
00000000000081c1         mov        rdi, rbx
00000000000081c4         call       fts_sort                                    ; fts_sort
00000000000081c9         mov        r12, rax

                     loc_81cc:
00000000000081cc         lea        rsi, qword [aWrittenBySSAnd+27]             ; 0xbea1, CODE XREF=rpl_fts_open+531, rpl_fts_open+537, rpl_fts_open+911
00000000000081d3         xor        edx, edx
00000000000081d5         mov        rdi, rbx
00000000000081d8         call       fts_alloc                                   ; fts_alloc
00000000000081dd         test       rax, rax
00000000000081e0         mov        qword [rbx], rax
00000000000081e3         je         loc_82f0

00000000000081e9         mov        edi, dword [rbx+0x48]
00000000000081ec         mov        edx, 0x9
00000000000081f1         lea        rsi, qword [rbx+0x58]
00000000000081f5         mov        qword [rax+0x10], r12
00000000000081f9         mov        word [rax+0x70], dx
00000000000081fd         mov        qword [rax+0x58], 0x1
0000000000008205         call       setup_dir.isra.4                            ; setup_dir.isra.4
000000000000820a         test       al, al
000000000000820c         je         loc_82f0

0000000000008212         mov        esi, dword [rbx+0x48]
0000000000008215         test       esi, 0x204
000000000000821b         jne        loc_8240

000000000000821d         mov        edi, dword [rbx+0x2c]
0000000000008220         lea        rdx, qword [aFtsreadFailed+17]              ; 0xb4bf
0000000000008227         call       diropen.isra.6                              ; diropen.isra.6
000000000000822c         test       eax, eax
000000000000822e         mov        dword [rbx+0x28], eax
0000000000008231         jns        loc_8240

0000000000008233         or         dword [rbx+0x48], 0x4
0000000000008237         nop        word [rax+rax]

                     loc_8240:
0000000000008240         lea        rdi, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_open+635, rpl_fts_open+657
0000000000008244         mov        esi, 0xffffffff
0000000000008249         call       i_ring_init                                 ; i_ring_init

                     loc_824e:
000000000000824e         add        rsp, 0x28                                   ; CODE XREF=rpl_fts_open+83, rpl_fts_open+883, rpl_fts_open+933
0000000000008252         mov        rax, rbx
0000000000008255         pop        rbx
0000000000008256         pop        rbp
0000000000008257         pop        r12
0000000000008259         pop        r13
000000000000825b         pop        r14
000000000000825d         pop        r15
000000000000825f         ret
                        ; endp

                     loc_8260:
0000000000008260         mov        rdi, qword [r13]                            ; CODE XREF=rpl_fts_open+97
0000000000008264         mov        eax, ebp
0000000000008266         mov        dword [rbx+0x2c], 0xffffff9c
000000000000826d         and        ah, 0xfd
0000000000008270         or         eax, 0x4
0000000000008273         test       rdi, rdi
0000000000008276         mov        dword [rbx+0x48], eax
0000000000008279         jne        loc_801e

                     loc_827f:
000000000000827f         mov        edx, 0x1000                                 ; CODE XREF=rpl_fts_open+120
0000000000008284         jmp        loc_8055
0000000000008289         align      16

                     loc_8290:
0000000000008290         xor        edx, edx                                    ; CODE XREF=rpl_fts_open+377, rpl_fts_open+388
0000000000008292         mov        rsi, rcx
0000000000008295         mov        rdi, rbx
0000000000008298         mov        qword [rsp+0x58+var_50], rcx
000000000000829d         call       fts_stat                                    ; fts_stat
00000000000082a2         mov        rcx, qword [rsp+0x58+var_50]
00000000000082a7         test       r14, r14
00000000000082aa         mov        word [rcx+0x70], ax
00000000000082ae         jne        loc_8147

00000000000082b4         test       r12, r12
00000000000082b7         mov        qword [rcx+0x10], 0x0
00000000000082bf         jne        loc_82d8

00000000000082c1         mov        qword [rsp+0x58+var_40], rcx
00000000000082c6         mov        r12, rcx
00000000000082c9         jmp        loc_814e
00000000000082ce         align      16

                     loc_82d0:
00000000000082d0         mov        qword [rcx+0x10], 0x0                       ; CODE XREF=rpl_fts_open+417

                     loc_82d8:
00000000000082d8         mov        rax, qword [rsp+0x58+var_40]                ; CODE XREF=rpl_fts_open+799
00000000000082dd         mov        qword [rsp+0x58+var_40], rcx
00000000000082e2         mov        qword [rax+0x10], rcx
00000000000082e6         jmp        loc_814e
00000000000082eb         align      16

                     loc_82f0:
00000000000082f0         mov        rdi, r12                                    ; CODE XREF=rpl_fts_open+345, rpl_fts_open+579, rpl_fts_open+620
00000000000082f3         call       fts_lfree                                   ; fts_lfree
00000000000082f8         mov        rdi, r15
00000000000082fb         call       sub_1da0                                    ; sub_1da0

                     loc_8300:
0000000000008300         mov        rdi, qword [rbx+0x20]                       ; CODE XREF=rpl_fts_open+242
0000000000008304         call       sub_1da0                                    ; sub_1da0

                     loc_8309:
0000000000008309         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_open+200
000000000000830c         xor        ebx, ebx
000000000000830e         call       sub_1da0                                    ; sub_1da0
0000000000008313         jmp        loc_824e
0000000000008318         align      32

                     loc_8320:
0000000000008320         xor        r15d, r15d                                  ; CODE XREF=rpl_fts_open+213
0000000000008323         test       r14, r14
0000000000008326         jne        loc_80b0

                     loc_832c:
000000000000832c         xor        r12d, r12d                                  ; CODE XREF=rpl_fts_open+288
000000000000832f         jmp        loc_81cc
0000000000008334         align      8

                     loc_8338:
0000000000008338         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_open+20, rpl_fts_open+40, rpl_fts_open+50
000000000000833d         xor        ebx, ebx
000000000000833f         mov        dword [rax], 0x16
0000000000008345         jmp        loc_824e
000000000000834a         align      16                                          ; End of unwind block (FDE at 0xd938)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_close:
0000000000008350         push       r12                                         ; Begin of unwind block (FDE at 0xd984), CODE XREF=sub_3130+127, sub_3510+467
0000000000008352         push       rbp
0000000000008353         mov        rbp, rdi
0000000000008356         push       rbx
0000000000008357         mov        rdi, qword [rdi]
000000000000835a         test       rdi, rdi
000000000000835d         je         loc_83a3

000000000000835f         cmp        qword [rdi+0x58], 0x0
0000000000008364         jns        loc_837f

0000000000008366         jmp        loc_8480
000000000000836b         align      16

                     loc_8370:
0000000000008370         call       sub_1da0                                    ; sub_1da0, CODE XREF=rpl_fts_close+54
0000000000008375         cmp        qword [rbx+0x58], 0x0
000000000000837a         mov        rdi, rbx
000000000000837d         js         loc_839b

                     loc_837f:
000000000000837f         mov        rbx, qword [rdi+0x10]                       ; CODE XREF=rpl_fts_close+20, rpl_fts_close+73
0000000000008383         test       rbx, rbx
0000000000008386         jne        loc_8370

0000000000008388         mov        rbx, qword [rdi+8]
000000000000838c         call       sub_1da0                                    ; sub_1da0
0000000000008391         cmp        qword [rbx+0x58], 0x0
0000000000008396         mov        rdi, rbx
0000000000008399         jns        loc_837f

                     loc_839b:
000000000000839b         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_close+45
000000000000839e         call       sub_1da0                                    ; sub_1da0

                     loc_83a3:
00000000000083a3         mov        rdi, qword [rbp+8]                          ; CODE XREF=rpl_fts_close+13, rpl_fts_close+315
00000000000083a7         test       rdi, rdi
00000000000083aa         je         loc_83b1

00000000000083ac         call       fts_lfree                                   ; fts_lfree

                     loc_83b1:
00000000000083b1         mov        rdi, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_close+90
00000000000083b5         call       sub_1da0                                    ; sub_1da0
00000000000083ba         mov        rdi, qword [rbp+0x20]
00000000000083be         call       sub_1da0                                    ; sub_1da0
00000000000083c3         mov        eax, dword [rbp+0x48]
00000000000083c6         test       ah, 0x2
00000000000083c9         je         loc_8430

00000000000083cb         mov        edi, dword [rbp+0x2c]
00000000000083ce         test       edi, edi
00000000000083d0         jns        loc_8460

                     loc_83d6:
00000000000083d6         xor        ebx, ebx                                    ; CODE XREF=rpl_fts_close+226, rpl_fts_close+250, rpl_fts_close+279

                     loc_83d8:
00000000000083d8         lea        rdi, qword [rbp+0x60]                       ; CODE XREF=rpl_fts_close+292, rpl_fts_close+340, rpl_fts_close+348, rpl_fts_close+364
00000000000083dc         call       fd_ring_clear                               ; fd_ring_clear
00000000000083e1         mov        rdi, qword [rbp+0x50]
00000000000083e5         test       rdi, rdi
00000000000083e8         je         loc_83ef

00000000000083ea         call       hash_free                                   ; hash_free

                     loc_83ef:
00000000000083ef         test       dword [rbp+0x48], 0x102                     ; CODE XREF=rpl_fts_close+152
00000000000083f6         mov        rdi, qword [rbp+0x58]
00000000000083fa         je         loc_8420

00000000000083fc         test       rdi, rdi
00000000000083ff         je         loc_8406

0000000000008401         call       hash_free                                   ; hash_free

                     loc_8406:
0000000000008406         mov        rdi, rbp                                    ; CODE XREF=rpl_fts_close+175, rpl_fts_close+213
0000000000008409         call       sub_1da0                                    ; sub_1da0
000000000000840e         test       ebx, ebx
0000000000008410         jne        loc_84c1

                     loc_8416:
0000000000008416         mov        eax, ebx                                    ; CODE XREF=rpl_fts_close+381
0000000000008418         pop        rbx
0000000000008419         pop        rbp
000000000000841a         pop        r12
000000000000841c         ret
                        ; endp
000000000000841d         align      32

                     loc_8420:
0000000000008420         call       sub_1da0                                    ; sub_1da0, CODE XREF=rpl_fts_close+170
0000000000008425         jmp        loc_8406
0000000000008427         align      16

                     loc_8430:
0000000000008430         test       al, 0x4                                     ; CODE XREF=rpl_fts_close+121
0000000000008432         jne        loc_83d6

0000000000008434         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_fchdir
0000000000008437         call       j_fchdir                                    ; fchdir
000000000000843c         test       eax, eax
000000000000843e         jne        loc_8490

0000000000008440         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
0000000000008443         call       j_close                                     ; close
0000000000008448         test       eax, eax
000000000000844a         je         loc_83d6

000000000000844c         call       j___errno_location                          ; __errno_location
0000000000008451         mov        r12, rax
0000000000008454         jmp        loc_84b8
0000000000008456         align      32

                     loc_8460:
0000000000008460         call       j_close                                     ; close, CODE XREF=rpl_fts_close+128
0000000000008465         test       eax, eax
0000000000008467         je         loc_83d6

000000000000846d         call       j___errno_location                          ; __errno_location
0000000000008472         mov        ebx, dword [rax]
0000000000008474         jmp        loc_83d8
0000000000008479         align      128

                     loc_8480:
0000000000008480         mov        rbx, rdi                                    ; CODE XREF=rpl_fts_close+22
0000000000008483         mov        rdi, rbx
0000000000008486         call       sub_1da0                                    ; sub_1da0
000000000000848b         jmp        loc_83a3

                     loc_8490:
0000000000008490         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+238
0000000000008495         mov        edi, dword [rbp+0x28]                       ; argument "__fd" for method j_close
0000000000008498         mov        r12, rax
000000000000849b         mov        ebx, dword [rax]
000000000000849d         call       j_close                                     ; close
00000000000084a2         test       eax, eax
00000000000084a4         je         loc_83d8

00000000000084aa         test       ebx, ebx
00000000000084ac         jne        loc_83d8

00000000000084b2         nop        word [rax+rax]

                     loc_84b8:
00000000000084b8         mov        ebx, dword [r12]                            ; CODE XREF=rpl_fts_close+260
00000000000084bc         jmp        loc_83d8

                     loc_84c1:
00000000000084c1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_close+192
00000000000084c6         mov        dword [rax], ebx
00000000000084c8         mov        ebx, 0xffffffff
00000000000084cd         jmp        loc_8416
00000000000084d2         align      32                                          ; End of unwind block (FDE at 0xd984)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_read:
00000000000084e0         push       r14                                         ; Begin of unwind block (FDE at 0xd9b4), CODE XREF=rm+115, sub_3130+81, sub_3130+89, sub_32f0+305, sub_34c0+53
00000000000084e2         push       r13
00000000000084e4         push       r12
00000000000084e6         push       rbp
00000000000084e7         push       rbx
00000000000084e8         mov        rbp, qword [rdi]
00000000000084eb         test       rbp, rbp
00000000000084ee         je         loc_85fe

00000000000084f4         mov        edx, dword [rdi+0x48]
00000000000084f7         test       dh, 0x20
00000000000084fa         jne        loc_85fe

0000000000008500         movzx      eax, word [rbp+0x74]
0000000000008504         mov        ebx, 0x3
0000000000008509         mov        r12, rdi
000000000000850c         mov        word [rbp+0x74], bx
0000000000008510         cmp        ax, 0x1
0000000000008514         je         loc_8760

000000000000851a         cmp        ax, 0x2
000000000000851e         movzx      ecx, word [rbp+0x70]
0000000000008522         je         loc_8610

0000000000008528         cmp        cx, 0x1
000000000000852c         jne        loc_8560

000000000000852e         jmp        loc_8750
0000000000008533         align      8

                     loc_8538:
0000000000008538         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+135
000000000000853c         mov        rdi, rbp
000000000000853f         call       sub_1da0                                    ; sub_1da0
0000000000008544         cmp        qword [rbx+0x58], 0x0
0000000000008549         je         loc_8780

000000000000854f         movzx      eax, word [rbx+0x74]
0000000000008553         mov        rbp, rbx
0000000000008556         cmp        ax, 0x4
000000000000855a         jne        loc_8888

                     loc_8560:
0000000000008560         mov        rbx, qword [rbp+0x10]                       ; CODE XREF=rpl_fts_read+76, rpl_fts_read+317
0000000000008564         test       rbx, rbx
0000000000008567         jne        loc_8538

0000000000008569         mov        rbx, qword [rbp+8]
000000000000856d         cmp        qword [rbx+0x18], 0x0
0000000000008572         jne        loc_8ae0

                     loc_8578:
0000000000008578         mov        qword [r12], rbx                            ; CODE XREF=rpl_fts_read+1672
000000000000857c         mov        rdi, rbp
000000000000857f         call       sub_1da0                                    ; sub_1da0
0000000000008584         cmp        qword [rbx+0x58], 0xffffffffffffffff
0000000000008589         je         loc_8a42

000000000000858f         cmp        word [rbx+0x70], 0xb
0000000000008594         je         loc_86cf

000000000000859a         mov        rdx, qword [r12+0x20]
000000000000859f         mov        rax, qword [rbx+0x48]
00000000000085a3         mov        byte [rdx+rax], 0x0
00000000000085a7         cmp        qword [rbx+0x58], 0x0
00000000000085ac         je         loc_8970

00000000000085b2         movzx      eax, word [rbx+0x72]
00000000000085b6         test       al, 0x2
00000000000085b8         je         loc_8928

00000000000085be         mov        eax, dword [r12+0x48]
00000000000085c3         mov        edi, dword [rbx+0x44]
00000000000085c6         test       al, 0x4
00000000000085c8         je         loc_89cc

                     loc_85ce:
00000000000085ce         call       j_close                                     ; close, CODE XREF=rpl_fts_read+1287, rpl_fts_read+1708

                     loc_85d3:
00000000000085d3         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1098, rpl_fts_read+1130, rpl_fts_read+1180

                     loc_85d8:
00000000000085d8         cmp        word [rbx+0x70], 0x2                        ; CODE XREF=rpl_fts_read+1162
00000000000085dd         je         loc_85f3

00000000000085df         mov        ecx, dword [rbx+0x40]
00000000000085e2         test       ecx, ecx
00000000000085e4         je         loc_8988

00000000000085ea         mov        edx, 0x7
00000000000085ef         mov        word [rbx+0x70], dx

                     loc_85f3:
00000000000085f3         and        edi, 0x2000                                 ; CODE XREF=rpl_fts_read+253, rpl_fts_read+1219
00000000000085f9         mov        rbp, rbx
00000000000085fc         je         loc_867a

                     loc_85fe:
00000000000085fe         xor        ebp, ebp                                    ; CODE XREF=rpl_fts_read+14, rpl_fts_read+26, rpl_fts_read+1327, rpl_fts_read+1662
0000000000008600         pop        rbx
0000000000008601         mov        rax, rbp
0000000000008604         pop        rbp
0000000000008605         pop        r12
0000000000008607         pop        r13
0000000000008609         pop        r14
000000000000860b         ret
                        ; endp
000000000000860c         align      16

                     loc_8610:
0000000000008610         lea        eax, dword [rcx-0xc]                        ; CODE XREF=rpl_fts_read+66
0000000000008613         cmp        ax, 0x1
0000000000008617         jbe        loc_8690

0000000000008619         cmp        cx, 0x1
000000000000861d         jne        loc_8560

                     loc_8623:
0000000000008623         test       dl, 0x40                                    ; CODE XREF=rpl_fts_read+628
0000000000008626         je         loc_86d8

000000000000862c         mov        rax, qword [r12+0x18]
0000000000008631         cmp        qword [rbp+0x78], rax
0000000000008635         je         loc_86d8

                     loc_863b:
000000000000863b         test       byte [rbp+0x72], 0x2                        ; CODE XREF=rpl_fts_read+634
000000000000863f         jne        loc_8b20

                     loc_8645:
0000000000008645         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+1608
000000000000864a         test       rdi, rdi
000000000000864d         je         loc_865d

000000000000864f         call       fts_lfree                                   ; fts_lfree
0000000000008654         mov        qword [r12+8], 0x0

                     loc_865d:
000000000000865d         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+365
0000000000008662         mov        r10d, 0x6
0000000000008668         lea        rsi, qword [r12+0x58]
000000000000866d         mov        word [rbp+0x70], r10w
0000000000008672         mov        rdx, rbp
0000000000008675         call       leave_dir.isra.12                           ; leave_dir.isra.12

                     loc_867a:
000000000000867a         pop        rbx                                         ; CODE XREF=rpl_fts_read+284, rpl_fts_read+467, rpl_fts_read+493, rpl_fts_read+864, rpl_fts_read+906, rpl_fts_read+925, rpl_fts_read+1373, rpl_fts_read+1407, rpl_fts_read+1518, rpl_fts_read+1724, rpl_fts_read+1778
000000000000867b         mov        rax, rbp
000000000000867e         pop        rbp
000000000000867f         pop        r12
0000000000008681         pop        r13
0000000000008683         pop        r14
0000000000008685         ret
                        ; endp
0000000000008686         align      16

                     loc_8690:
0000000000008690         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+311
0000000000008695         mov        rsi, rbp
0000000000008698         call       fts_stat                                    ; fts_stat
000000000000869d         cmp        ax, 0x1
00000000000086a1         mov        word [rbp+0x70], ax
00000000000086a5         je         loc_89ec

00000000000086ab         cmp        ax, 0xb
00000000000086af         mov        qword [r12], rbp
00000000000086b3         jne        loc_867a

00000000000086b5         nop        dword [rax]

                     loc_86b8:
00000000000086b8         mov        rax, qword [rbp+0xa8]                       ; CODE XREF=rpl_fts_read+854
00000000000086bf         cmp        rax, 0x2
00000000000086c3         je         loc_8a68

00000000000086c9         cmp        rax, 0x1
00000000000086cd         je         loc_867a

                     loc_86cf:
00000000000086cf         call       j_abort                                     ; abort, CODE XREF=rpl_fts_read+180
                        ; endp
00000000000086d4         align      8

                     loc_86d8:
00000000000086d8         mov        rdi, qword [r12+8]                          ; CODE XREF=rpl_fts_read+326, rpl_fts_read+341
00000000000086dd         test       rdi, rdi
00000000000086e0         je         loc_88f8

00000000000086e6         test       dh, 0x10
00000000000086e9         jne        loc_88e2

00000000000086ef         mov        rcx, qword [rbp+0x30]
00000000000086f3         mov        edx, 0xffffffff
00000000000086f8         mov        rsi, rbp
00000000000086fb         mov        rdi, r12
00000000000086fe         call       fts_safe_changedir                          ; fts_safe_changedir
0000000000008703         test       eax, eax
0000000000008705         je         loc_89c2

000000000000870b         call       j___errno_location                          ; __errno_location
0000000000008710         mov        eax, dword [rax]
0000000000008712         or         word [rbp+0x72], 0x1
0000000000008717         mov        dword [rbp+0x40], eax
000000000000871a         mov        rbp, qword [r12+8]
000000000000871f         test       rbp, rbp
0000000000008722         je         loc_8916

0000000000008728         mov        rax, rbp
000000000000872b         nop        dword [rax+rax]

                     loc_8730:
0000000000008730         mov        rdx, qword [rax+8]                          ; CODE XREF=rpl_fts_read+611
0000000000008734         mov        rdx, qword [rdx+0x30]
0000000000008738         mov        qword [rax+0x30], rdx
000000000000873c         mov        rax, qword [rax+0x10]
0000000000008740         test       rax, rax
0000000000008743         jne        loc_8730

0000000000008745         jmp        loc_8916
000000000000874a         align      16

                     loc_8750:
0000000000008750         cmp        ax, 0x4                                     ; CODE XREF=rpl_fts_read+78
0000000000008754         jne        loc_8623

000000000000875a         jmp        loc_863b
000000000000875f         align      32

                     loc_8760:
0000000000008760         mov        rsi, rbp                                    ; CODE XREF=rpl_fts_read+52
0000000000008763         xor        edx, edx
0000000000008765         call       fts_stat                                    ; fts_stat
000000000000876a         mov        word [rbp+0x70], ax
000000000000876e         mov        rax, rbp
0000000000008771         pop        rbx
0000000000008772         pop        rbp
0000000000008773         pop        r12
0000000000008775         pop        r13
0000000000008777         pop        r14
0000000000008779         ret
                        ; endp
000000000000877a         align      128

                     loc_8780:
0000000000008780         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+105
0000000000008783         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000008788         test       eax, eax
000000000000878a         jne        loc_8b91

0000000000008790         test       dword [r12+0x48], 0x102
0000000000008799         mov        rdi, qword [r12+0x58]
000000000000879e         je         loc_88d8

00000000000087a4         test       rdi, rdi
00000000000087a7         je         loc_87ae

00000000000087a9         call       hash_free                                   ; hash_free

                     loc_87ae:
00000000000087ae         mov        rdx, qword [rbx+0x60]                       ; CODE XREF=rpl_fts_read+711, rpl_fts_read+1021
00000000000087b2         lea        rbp, qword [rbx+0x108]
00000000000087b9         mov        rdi, qword [r12+0x20]                       ; argument "__dest" for method j_memmove
00000000000087be         mov        rsi, rbp                                    ; argument "__src" for method j_memmove
00000000000087c1         mov        qword [rbx+0x48], rdx
00000000000087c5         add        rdx, 0x1                                    ; argument "__n" for method j_memmove
00000000000087c9         call       j_memmove                                   ; memmove
00000000000087ce         mov        esi, 0x2f                                   ; argument "__c" for method j_strrchr
00000000000087d3         mov        rdi, rbp                                    ; argument "__s" for method j_strrchr
00000000000087d6         call       j_strrchr                                   ; strrchr
00000000000087db         test       rax, rax
00000000000087de         je         loc_880b

00000000000087e0         cmp        rbp, rax
00000000000087e3         je         loc_89b0

                     loc_87e9:
00000000000087e9         lea        r13, qword [rax+1]                          ; CODE XREF=rpl_fts_read+1239
00000000000087ed         mov        rdi, r13                                    ; argument "__s" for method j_strlen
00000000000087f0         call       j_strlen                                    ; strlen
00000000000087f5         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
00000000000087f9         mov        r14, rax
00000000000087fc         mov        rsi, r13                                    ; argument "__src" for method j_memmove
00000000000087ff         mov        rdi, rbp                                    ; argument "__dest" for method j_memmove
0000000000008802         call       j_memmove                                   ; memmove
0000000000008807         mov        qword [rbx+0x60], r14

                     loc_880b:
000000000000880b         mov        rax, qword [r12+0x20]                       ; CODE XREF=rpl_fts_read+766, rpl_fts_read+1245
0000000000008810         mov        edi, dword [r12+0x48]
0000000000008815         lea        rsi, qword [r12+0x58]
000000000000881a         mov        rbp, rbx
000000000000881d         mov        qword [rbx+0x38], rax
0000000000008821         mov        qword [rbx+0x30], rax
0000000000008825         call       setup_dir.isra.4                            ; setup_dir.isra.4
000000000000882a         movzx      eax, word [rbx+0x70]

                     loc_882e:
000000000000882e         cmp        ax, 0xb                                     ; CODE XREF=rpl_fts_read+1007, rpl_fts_read+1853
0000000000008832         mov        qword [r12], rbp
0000000000008836         je         loc_86b8

                     loc_883c:
000000000000883c         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1479, rpl_fts_read+1815
0000000000008840         jne        loc_867a

                     loc_8846:
0000000000008846         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_read+1311
000000000000884b         jne        loc_8856

                     loc_884d:
000000000000884d         mov        rax, qword [rbp+0x78]                       ; CODE XREF=rpl_fts_read+1784
0000000000008851         mov        qword [r12+0x18], rax

                     loc_8856:
0000000000008856         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+875, rpl_fts_read+1524
000000000000885b         lea        rsi, qword [r12+0x58]
0000000000008860         mov        rdx, rbp
0000000000008863         call       enter_dir.isra.10                           ; enter_dir.isra.10
0000000000008868         test       al, al
000000000000886a         jne        loc_867a

0000000000008870         call       j___errno_location                          ; __errno_location
0000000000008875         xor        ebp, ebp
0000000000008877         mov        dword [rax], 0xc
000000000000887d         jmp        loc_867a
0000000000008882         align      8

                     loc_8888:
0000000000008888         cmp        ax, 0x2                                     ; CODE XREF=rpl_fts_read+122
000000000000888c         je         loc_8b2d

                     loc_8892:
0000000000008892         mov        rax, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+1087, rpl_fts_read+1585, rpl_fts_read+1651
0000000000008896         lea        rsi, qword [rbp+0x108]                      ; argument "__src" for method j_memmove
000000000000889d         mov        rdi, qword [rax+0x48]
00000000000088a1         mov        rax, qword [rax+0x38]
00000000000088a5         cmp        byte [rax+rdi-1], 0x2f
00000000000088aa         lea        rdx, qword [rdi-1]
00000000000088ae         cmove      rdi, rdx
00000000000088b2         add        rdi, qword [r12+0x20]
00000000000088b7         mov        byte [rdi], 0x2f
00000000000088ba         mov        rax, qword [rbp+0x60]
00000000000088be         add        rdi, 0x1                                    ; argument "__dest" for method j_memmove
00000000000088c2         lea        rdx, qword [rax+1]                          ; argument "__n" for method j_memmove
00000000000088c6         call       j_memmove                                   ; memmove
00000000000088cb         movzx      eax, word [rbp+0x70]
00000000000088cf         jmp        loc_882e
00000000000088d4         align      8

                     loc_88d8:
00000000000088d8         call       sub_1da0                                    ; sub_1da0, CODE XREF=rpl_fts_read+702
00000000000088dd         jmp        loc_87ae

                     loc_88e2:
00000000000088e2         and        dh, 0xef                                    ; CODE XREF=rpl_fts_read+521
00000000000088e5         mov        dword [r12+0x48], edx
00000000000088ea         call       fts_lfree                                   ; fts_lfree
00000000000088ef         mov        qword [r12+8], 0x0

                     loc_88f8:
00000000000088f8         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+512
00000000000088fd         mov        rdi, r12
0000000000008900         call       fts_build                                   ; fts_build
0000000000008905         test       rax, rax
0000000000008908         mov        qword [r12+8], rax
000000000000890d         je         loc_8a04

0000000000008913         mov        rbp, rax

                     loc_8916:
0000000000008916         mov        qword [r12+8], 0x0                          ; CODE XREF=rpl_fts_read+578, rpl_fts_read+613, rpl_fts_read+1255
000000000000891f         jmp        loc_8892
0000000000008924         align      8

                     loc_8928:
0000000000008928         test       al, 0x1                                     ; CODE XREF=rpl_fts_read+216
000000000000892a         jne        loc_85d3

0000000000008930         mov        rsi, qword [rbx+8]
0000000000008934         lea        rcx, qword [aFtsreadFailed+16]              ; 0xb4be
000000000000893b         mov        edx, 0xffffffff
0000000000008940         mov        rdi, r12
0000000000008943         call       fts_safe_changedir                          ; fts_safe_changedir
0000000000008948         test       eax, eax
000000000000894a         je         loc_85d3

                     loc_8950:
0000000000008950         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1178
0000000000008955         mov        edi, dword [r12+0x48]
000000000000895a         mov        eax, dword [rax]
000000000000895c         or         edi, 0x2000
0000000000008962         mov        dword [rbx+0x40], eax
0000000000008965         mov        dword [r12+0x48], edi
000000000000896a         jmp        loc_85d8
000000000000896f         align      16

                     loc_8970:
0000000000008970         mov        rdi, r12                                    ; CODE XREF=rpl_fts_read+204
0000000000008973         call       restore_initial_cwd                         ; restore_initial_cwd
0000000000008978         test       eax, eax
000000000000897a         jne        loc_8950

000000000000897c         jmp        loc_85d3
0000000000008981         align      8

                     loc_8988:
0000000000008988         mov        eax, 0x6                                    ; CODE XREF=rpl_fts_read+260
000000000000898d         lea        rsi, qword [r12+0x58]
0000000000008992         mov        rdx, rbx
0000000000008995         mov        word [rbx+0x70], ax
0000000000008999         call       leave_dir.isra.12                           ; leave_dir.isra.12
000000000000899e         mov        edi, dword [r12+0x48]
00000000000089a3         jmp        loc_85f3
00000000000089a8         align      16

                     loc_89b0:
00000000000089b0         cmp        byte [rbx+0x109], 0x0                       ; CODE XREF=rpl_fts_read+771
00000000000089b7         jne        loc_87e9

00000000000089bd         jmp        loc_880b

                     loc_89c2:
00000000000089c2         mov        rbp, qword [r12+8]                          ; CODE XREF=rpl_fts_read+549
00000000000089c7         jmp        loc_8916

                     loc_89cc:
00000000000089cc         test       ah, 0x2                                     ; CODE XREF=rpl_fts_read+232
00000000000089cf         je         loc_8b6d

00000000000089d5         mov        esi, edi
00000000000089d7         mov        edx, 0x1
00000000000089dc         mov        rdi, r12
00000000000089df         call       cwd_advance_fd                              ; cwd_advance_fd
00000000000089e4         mov        edi, dword [rbx+0x44]
00000000000089e7         jmp        loc_85ce

                     loc_89ec:
00000000000089ec         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+453
00000000000089f1         test       sil, 0x4
00000000000089f5         je         loc_8bfc

00000000000089fb         mov        qword [r12], rbp
00000000000089ff         jmp        loc_8846

                     loc_8a04:
0000000000008a04         mov        edi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1069
0000000000008a09         test       edi, 0x2000
0000000000008a0f         jne        loc_85fe

0000000000008a15         mov        r9d, dword [rbp+0x40]
0000000000008a19         test       r9d, r9d
0000000000008a1c         je         loc_8a30

0000000000008a1e         cmp        word [rbp+0x70], 0x4
0000000000008a23         je         loc_8a30

0000000000008a25         mov        r8d, 0x7
0000000000008a2b         mov        word [rbp+0x70], r8w

                     loc_8a30:
0000000000008a30         lea        rsi, qword [r12+0x58]                       ; CODE XREF=rpl_fts_read+1340, rpl_fts_read+1347
0000000000008a35         mov        rdx, rbp
0000000000008a38         call       leave_dir.isra.12                           ; leave_dir.isra.12
0000000000008a3d         jmp        loc_867a

                     loc_8a42:
0000000000008a42         mov        rdi, rbx                                    ; CODE XREF=rpl_fts_read+169
0000000000008a45         xor        ebp, ebp
0000000000008a47         call       sub_1da0                                    ; sub_1da0
0000000000008a4c         call       j___errno_location                          ; __errno_location
0000000000008a51         mov        dword [rax], 0x0
0000000000008a57         mov        qword [r12], 0x0
0000000000008a5f         jmp        loc_867a
0000000000008a64         align      8

                     loc_8a68:
0000000000008a68         mov        rbx, qword [rbp+8]                          ; CODE XREF=rpl_fts_read+483
0000000000008a6c         cmp        qword [rbx+0x68], 0x0
0000000000008a71         jne        loc_8a84

0000000000008a73         mov        eax, dword [r12+0x48]
0000000000008a78         and        eax, 0x18
0000000000008a7b         cmp        eax, 0x18
0000000000008a7e         je         loc_8bdd

                     loc_8a84:
0000000000008a84         xor        edx, edx                                    ; CODE XREF=rpl_fts_read+1425, rpl_fts_read+1805
0000000000008a86         mov        rsi, rbp
0000000000008a89         mov        rdi, r12
0000000000008a8c         call       fts_stat                                    ; fts_stat
0000000000008a91         mov        edx, dword [rbp+0x90]
0000000000008a97         mov        word [rbp+0x70], ax
0000000000008a9b         and        edx, 0xf000
0000000000008aa1         cmp        edx, 0x4000
0000000000008aa7         jne        loc_883c

0000000000008aad         cmp        qword [rbp+0x58], 0x0
0000000000008ab2         je         loc_8bce

0000000000008ab8         mov        rcx, qword [rbx+0x68]
0000000000008abc         lea        rdx, qword [rcx-1]
0000000000008ac0         cmp        rdx, 0xfffffffffffffffd
0000000000008ac4         ja         loc_8aca

0000000000008ac6         mov        qword [rbx+0x68], rdx

                     loc_8aca:
0000000000008aca         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1508
0000000000008ace         jne        loc_867a

0000000000008ad4         jmp        loc_8856
0000000000008ad9         align      32

                     loc_8ae0:
0000000000008ae0         mov        rax, qword [rbx+0x48]                       ; CODE XREF=rpl_fts_read+146
0000000000008ae4         mov        rdx, qword [r12+0x20]
0000000000008ae9         mov        esi, 0x3
0000000000008aee         mov        qword [r12], rbx
0000000000008af2         mov        rdi, r12
0000000000008af5         mov        byte [rdx+rax], 0x0
0000000000008af9         call       fts_build                                   ; fts_build
0000000000008afe         test       rax, rax
0000000000008b01         mov        rbx, rax
0000000000008b04         je         loc_8b58

0000000000008b06         mov        rdi, rbp
0000000000008b09         mov        rbp, rbx
0000000000008b0c         call       sub_1da0                                    ; sub_1da0
0000000000008b11         jmp        loc_8892
0000000000008b16         align      32

                     loc_8b20:
0000000000008b20         mov        edi, dword [rbp+0x44]                       ; argument "__fd" for method j_close, CODE XREF=rpl_fts_read+351
0000000000008b23         call       j_close                                     ; close
0000000000008b28         jmp        loc_8645

                     loc_8b2d:
0000000000008b2d         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_read+940
0000000000008b32         mov        rsi, rbx
0000000000008b35         mov        rdi, r12
0000000000008b38         call       fts_stat                                    ; fts_stat
0000000000008b3d         cmp        ax, 0x1
0000000000008b41         mov        word [rbx+0x70], ax
0000000000008b45         je         loc_8ba1

                     loc_8b47:
0000000000008b47         mov        esi, 0x3                                    ; CODE XREF=rpl_fts_read+1738, rpl_fts_read+1769, rpl_fts_read+1907
0000000000008b4c         mov        rbp, rbx
0000000000008b4f         mov        word [rbx+0x74], si
0000000000008b53         jmp        loc_8892

                     loc_8b58:
0000000000008b58         test       byte [r12+0x49], 0x20                       ; CODE XREF=rpl_fts_read+1572
0000000000008b5e         jne        loc_85fe

0000000000008b64         mov        rbx, qword [rbp+8]
0000000000008b68         jmp        loc_8578

                     loc_8b6d:
0000000000008b6d         call       j_fchdir                                    ; fchdir, CODE XREF=rpl_fts_read+1263
0000000000008b72         test       eax, eax
0000000000008b74         je         loc_8b89

0000000000008b76         call       j___errno_location                          ; __errno_location
0000000000008b7b         mov        eax, dword [rax]
0000000000008b7d         mov        dword [rbx+0x40], eax
0000000000008b80         or         dword [r12+0x48], 0x2000

                     loc_8b89:
0000000000008b89         mov        edi, dword [rbx+0x44]                       ; CODE XREF=rpl_fts_read+1684
0000000000008b8c         jmp        loc_85ce

                     loc_8b91:
0000000000008b91         or         dword [r12+0x48], 0x2000                    ; CODE XREF=rpl_fts_read+682
0000000000008b9a         xor        ebp, ebp
0000000000008b9c         jmp        loc_867a

                     loc_8ba1:
0000000000008ba1         mov        esi, dword [r12+0x48]                       ; CODE XREF=rpl_fts_read+1637
0000000000008ba6         test       sil, 0x4
0000000000008baa         jne        loc_8b47

0000000000008bac         mov        edi, dword [r12+0x2c]
0000000000008bb1         lea        rdx, qword [aFtsreadFailed+17]              ; 0xb4bf
0000000000008bb8         call       diropen.isra.6                              ; diropen.isra.6
0000000000008bbd         test       eax, eax
0000000000008bbf         mov        dword [rbx+0x44], eax
0000000000008bc2         js         loc_8c40

0000000000008bc4         or         word [rbx+0x72], 0x2
0000000000008bc9         jmp        loc_8b47

                     loc_8bce:
0000000000008bce         cmp        ax, 0x1                                     ; CODE XREF=rpl_fts_read+1490
0000000000008bd2         jne        loc_867a

0000000000008bd8         jmp        loc_884d

                     loc_8bdd:
0000000000008bdd         mov        esi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1438
0000000000008be2         mov        rdi, rbx
0000000000008be5         call       leaf_optimization                           ; leaf_optimization
0000000000008bea         cmp        eax, 0x2
0000000000008bed         jne        loc_8a84

0000000000008bf3         movzx      eax, word [rbp+0x70]
0000000000008bf7         jmp        loc_883c

                     loc_8bfc:
0000000000008bfc         mov        edi, dword [r12+0x2c]                       ; CODE XREF=rpl_fts_read+1301
0000000000008c01         lea        rdx, qword [aFtsreadFailed+17]              ; 0xb4bf
0000000000008c08         call       diropen.isra.6                              ; diropen.isra.6
0000000000008c0d         test       eax, eax
0000000000008c0f         mov        dword [rbp+0x44], eax
0000000000008c12         js         loc_8c22

0000000000008c14         or         word [rbp+0x72], 0x2
0000000000008c19         movzx      eax, word [rbp+0x70]
0000000000008c1d         jmp        loc_882e

                     loc_8c22:
0000000000008c22         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1842
0000000000008c27         mov        eax, dword [rax]
0000000000008c29         mov        r11d, 0x7
0000000000008c2f         mov        word [rbp+0x70], r11w
0000000000008c34         mov        dword [rbp+0x40], eax
0000000000008c37         mov        qword [r12], rbp
0000000000008c3b         jmp        loc_867a

                     loc_8c40:
0000000000008c40         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fts_read+1762
0000000000008c45         mov        eax, dword [rax]
0000000000008c47         mov        edi, 0x7
0000000000008c4c         mov        word [rbx+0x70], di
0000000000008c50         mov        dword [rbx+0x40], eax
0000000000008c53         jmp        loc_8b47
0000000000008c58         align      32                                          ; End of unwind block (FDE at 0xd9b4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_set:
0000000000008c60         cmp        edx, 0x4                                    ; Begin of unwind block (FDE at 0xda18), CODE XREF=sub_3130+68, sub_32f0+297, sub_34c0+45
0000000000008c63         ja         loc_8c70

0000000000008c65         mov        word [rsi+0x74], dx
0000000000008c69         xor        eax, eax
0000000000008c6b         ret
                        ; endp
0000000000008c6c         align      16

                     loc_8c70:
0000000000008c70         sub        rsp, 0x8                                    ; CODE XREF=rpl_fts_set+3
0000000000008c74         call       j___errno_location                          ; __errno_location
0000000000008c79         mov        dword [rax], 0x16
0000000000008c7f         mov        eax, 0x1
0000000000008c84         add        rsp, 0x8
0000000000008c88         ret
                        ; endp
0000000000008c89         align      16                                          ; End of unwind block (FDE at 0xda18)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fts_children:
0000000000008c90         push       r14                                         ; Begin of unwind block (FDE at 0xda30)
0000000000008c92         push       r13
0000000000008c94         push       r12
0000000000008c96         push       rbp
0000000000008c97         mov        r12d, esi
0000000000008c9a         push       rbx
0000000000008c9b         mov        rbx, rdi
0000000000008c9e         call       j___errno_location                          ; __errno_location
0000000000008ca3         test       r12d, 0xffffefff
0000000000008caa         mov        r13, rax
0000000000008cad         jne        loc_8d98

0000000000008cb3         mov        rbp, qword [rbx]
0000000000008cb6         mov        dword [rax], 0x0
0000000000008cbc         test       byte [rbx+0x49], 0x20
0000000000008cc0         jne        loc_8d40

0000000000008cc2         movzx      eax, word [rbp+0x70]
0000000000008cc6         cmp        ax, 0x9
0000000000008cca         je         loc_8d30

0000000000008ccc         cmp        ax, 0x1
0000000000008cd0         jne        loc_8d40

0000000000008cd2         mov        rdi, qword [rbx+8]
0000000000008cd6         test       rdi, rdi
0000000000008cd9         je         loc_8ce0

0000000000008cdb         call       fts_lfree                                   ; fts_lfree

                     loc_8ce0:
0000000000008ce0         cmp        r12d, 0x1000                                ; CODE XREF=rpl_fts_children+73
0000000000008ce7         mov        r14d, 0x1
0000000000008ced         jne        loc_8cfc

0000000000008cef         or         dword [rbx+0x48], 0x1000
0000000000008cf6         mov        r14d, 0x2

                     loc_8cfc:
0000000000008cfc         cmp        qword [rbp+0x58], 0x0                       ; CODE XREF=rpl_fts_children+93
0000000000008d01         jne        loc_8d15

0000000000008d03         mov        rax, qword [rbp+0x30]
0000000000008d07         cmp        byte [rax], 0x2f
0000000000008d0a         je         loc_8d15

0000000000008d0c         mov        esi, dword [rbx+0x48]
0000000000008d0f         test       sil, 0x4
0000000000008d13         je         loc_8d50

                     loc_8d15:
0000000000008d15         mov        esi, r14d                                   ; CODE XREF=rpl_fts_children+113, rpl_fts_children+122
0000000000008d18         mov        rdi, rbx
0000000000008d1b         call       fts_build                                   ; fts_build
0000000000008d20         mov        qword [rbx+8], rax

                     loc_8d24:
0000000000008d24         pop        rbx                                         ; CODE XREF=rpl_fts_children+256, rpl_fts_children+272, rpl_fts_children+307, rpl_fts_children+329
0000000000008d25         pop        rbp
0000000000008d26         pop        r12
0000000000008d28         pop        r13
0000000000008d2a         pop        r14
0000000000008d2c         ret
                        ; endp
0000000000008d2d         align      16

                     loc_8d30:
0000000000008d30         pop        rbx                                         ; CODE XREF=rpl_fts_children+58
0000000000008d31         mov        rax, qword [rbp+0x10]
0000000000008d35         pop        rbp
0000000000008d36         pop        r12
0000000000008d38         pop        r13
0000000000008d3a         pop        r14
0000000000008d3c         ret
                        ; endp
0000000000008d3d         align      64

                     loc_8d40:
0000000000008d40         pop        rbx                                         ; CODE XREF=rpl_fts_children+48, rpl_fts_children+64
0000000000008d41         xor        eax, eax
0000000000008d43         pop        rbp
0000000000008d44         pop        r12
0000000000008d46         pop        r13
0000000000008d48         pop        r14
0000000000008d4a         ret
                        ; endp
0000000000008d4b         align      16

                     loc_8d50:
0000000000008d50         mov        edi, dword [rbx+0x2c]                       ; CODE XREF=rpl_fts_children+131
0000000000008d53         lea        rdx, qword [aFtsreadFailed+17]              ; 0xb4bf
0000000000008d5a         call       diropen.isra.6                              ; diropen.isra.6
0000000000008d5f         test       eax, eax
0000000000008d61         mov        ebp, eax
0000000000008d63         js         loc_8db9

0000000000008d65         mov        esi, r14d
0000000000008d68         mov        rdi, rbx
0000000000008d6b         call       fts_build                                   ; fts_build
0000000000008d70         test       byte [rbx+0x49], 0x2
0000000000008d74         mov        qword [rbx+8], rax
0000000000008d78         jne        loc_8da8

0000000000008d7a         mov        edi, ebp                                    ; argument "__fd" for method j_fchdir
0000000000008d7c         call       j_fchdir                                    ; fchdir
0000000000008d81         test       eax, eax
0000000000008d83         jne        loc_8dc8

0000000000008d85         mov        edi, ebp                                    ; argument "__fd" for method j_close
0000000000008d87         call       j_close                                     ; close

                     loc_8d8c:
0000000000008d8c         mov        rax, qword [rbx+8]                          ; CODE XREF=rpl_fts_children+295
0000000000008d90         jmp        loc_8d24
0000000000008d92         align      8

                     loc_8d98:
0000000000008d98         mov        dword [rax], 0x16                           ; CODE XREF=rpl_fts_children+29
0000000000008d9e         xor        eax, eax
0000000000008da0         jmp        loc_8d24
0000000000008da5         align      8

                     loc_8da8:
0000000000008da8         mov        edx, 0x1                                    ; CODE XREF=rpl_fts_children+232
0000000000008dad         mov        esi, ebp
0000000000008daf         mov        rdi, rbx
0000000000008db2         call       cwd_advance_fd                              ; cwd_advance_fd
0000000000008db7         jmp        loc_8d8c

                     loc_8db9:
0000000000008db9         mov        qword [rbx+8], 0x0                          ; CODE XREF=rpl_fts_children+211
0000000000008dc1         xor        eax, eax
0000000000008dc3         jmp        loc_8d24

                     loc_8dc8:
0000000000008dc8         mov        ebx, dword [r13]                            ; CODE XREF=rpl_fts_children+243
0000000000008dcc         mov        edi, ebp                                    ; argument "__fd" for method j_close
0000000000008dce         call       j_close                                     ; close
0000000000008dd3         xor        eax, eax
0000000000008dd5         mov        dword [r13], ebx
0000000000008dd9         jmp        loc_8d24
0000000000008dde         align      32                                          ; End of unwind block (FDE at 0xda30)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_34: int8_t, -52


                     rpl_mbrtowc:
0000000000008de0         push       r13                                         ; Begin of unwind block (FDE at 0xda94), CODE XREF=sub_4a00+534
0000000000008de2         push       r12
0000000000008de4         mov        r13, rsi
0000000000008de7         push       rbp
0000000000008de8         push       rbx
0000000000008de9         mov        rbx, rdi
0000000000008dec         mov        r12, rdx
0000000000008def         sub        rsp, 0x18
0000000000008df3         mov        rax, qword [fs:0x28]
0000000000008dfc         mov        qword [rsp+0x38+var_30], rax
0000000000008e01         xor        eax, eax
0000000000008e03         lea        rax, qword [rsp+0x38+var_34]
0000000000008e08         test       rdi, rdi
0000000000008e0b         cmove      rbx, rax
0000000000008e0f         mov        rdi, rbx                                    ; argument "__pwc" for method j_mbrtowc
0000000000008e12         call       j_mbrtowc                                   ; mbrtowc
0000000000008e17         cmp        rax, 0xfffffffffffffffd
0000000000008e1b         mov        rbp, rax
0000000000008e1e         jbe        loc_8e40

0000000000008e20         test       r12, r12
0000000000008e23         je         loc_8e40

0000000000008e25         xor        edi, edi
0000000000008e27         call       hard_locale                                 ; hard_locale
0000000000008e2c         test       al, al
0000000000008e2e         jne        loc_8e40

0000000000008e30         movzx      eax, byte [r13]
0000000000008e35         mov        ebp, 0x1
0000000000008e3a         mov        dword [rbx], eax
0000000000008e3c         nop        dword [rax]

                     loc_8e40:
0000000000008e40         mov        rdx, qword [rsp+0x38+var_30]                ; CODE XREF=rpl_mbrtowc+62, rpl_mbrtowc+67, rpl_mbrtowc+78
0000000000008e45         xor        rdx, qword [fs:0x28]
0000000000008e4e         mov        rax, rbp
0000000000008e51         jne        loc_8e5e

0000000000008e53         add        rsp, 0x18
0000000000008e57         pop        rbx
0000000000008e58         pop        rbp
0000000000008e59         pop        r12
0000000000008e5b         pop        r13
0000000000008e5d         ret
                        ; endp

                     loc_8e5e:
0000000000008e5e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_mbrtowc+113
                        ; endp
0000000000008e63         align      16                                          ; End of unwind block (FDE at 0xda94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     close_stream:
0000000000008e70         push       r12                                         ; Begin of unwind block (FDE at 0xdad4), CODE XREF=close_stdin+31, close_stdin+76, close_stdin+214, close_stdout+13, close_stdout+51
0000000000008e72         push       rbp
0000000000008e73         mov        rbp, rdi
0000000000008e76         push       rbx
0000000000008e77         call       j___fpending                                ; __fpending
0000000000008e7c         mov        ebx, dword [rbp]
0000000000008e7f         mov        rdi, rbp
0000000000008e82         mov        r12, rax
0000000000008e85         call       rpl_fclose                                  ; rpl_fclose
0000000000008e8a         and        ebx, 0x20
0000000000008e8d         test       ebx, ebx
0000000000008e8f         jne        loc_8ea8

0000000000008e91         test       eax, eax
0000000000008e93         je         loc_8e9f

0000000000008e95         test       r12, r12
0000000000008e98         mov        eax, 0xffffffff
0000000000008e9d         je         loc_8ed8

                     loc_8e9f:
0000000000008e9f         pop        rbx                                         ; CODE XREF=close_stream+35
0000000000008ea0         pop        rbp
0000000000008ea1         pop        r12
0000000000008ea3         ret
                        ; endp
0000000000008ea4         align      8

                     loc_8ea8:
0000000000008ea8         test       eax, eax                                    ; CODE XREF=close_stream+31
0000000000008eaa         jne        loc_8ec8

0000000000008eac         call       j___errno_location                          ; __errno_location
0000000000008eb1         mov        dword [rax], 0x0
0000000000008eb7         mov        eax, 0xffffffff
0000000000008ebc         pop        rbx
0000000000008ebd         pop        rbp
0000000000008ebe         pop        r12
0000000000008ec0         ret
                        ; endp
0000000000008ec1         align      8

                     loc_8ec8:
0000000000008ec8         pop        rbx                                         ; CODE XREF=close_stream+58
0000000000008ec9         mov        eax, 0xffffffff
0000000000008ece         pop        rbp
0000000000008ecf         pop        r12
0000000000008ed1         ret
                        ; endp
0000000000008ed2         align      8

                     loc_8ed8:
0000000000008ed8         call       j___errno_location                          ; __errno_location, CODE XREF=close_stream+45
0000000000008edd         cmp        dword [rax], 0x9
0000000000008ee0         pop        rbx
0000000000008ee1         pop        rbp
0000000000008ee2         pop        r12
0000000000008ee4         setne      al
0000000000008ee7         movzx      eax, al
0000000000008eea         neg        eax
0000000000008eec         ret
                        ; endp
0000000000008eed         align      16                                          ; End of unwind block (FDE at 0xdad4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check_init:
0000000000008ef0         mov        qword [rdi+0x10], 0x0                       ; Begin of unwind block (FDE at 0xdb24), CODE XREF=setup_dir.isra.4+87
0000000000008ef8         mov        dword [rdi+0x18], 0x95f616
0000000000008eff         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     cycle_check:
0000000000008f00         cmp        dword [rdi+0x18], 0x95f616                  ; End of unwind block (FDE at 0xdb24), Begin of unwind block (FDE at 0xdb38), CODE XREF=enter_dir.isra.10+136
0000000000008f07         jne        loc_8f67

0000000000008f09         mov        rdx, qword [rdi+0x10]
0000000000008f0d         mov        rcx, qword [rsi+8]
0000000000008f11         test       rdx, rdx
0000000000008f14         je         loc_8f30

0000000000008f16         cmp        qword [rdi], rcx
0000000000008f19         je         loc_8f48

                     loc_8f1b:
0000000000008f1b         lea        r8, qword [rdx+1]                           ; CODE XREF=cycle_check+79
0000000000008f1f         xor        eax, eax
0000000000008f21         test       rdx, r8
0000000000008f24         mov        qword [rdi+0x10], r8
0000000000008f28         je         loc_8f60

0000000000008f2a         ret
                        ; endp
0000000000008f2c         align      16

                     loc_8f30:
0000000000008f30         mov        qword [rdi+0x10], 0x1                       ; CODE XREF=cycle_check+20

                     loc_8f38:
0000000000008f38         mov        rax, qword [rsi]                            ; CODE XREF=cycle_check+101
0000000000008f3b         mov        qword [rdi], rcx
0000000000008f3e         mov        qword [rdi+8], rax
0000000000008f42         xor        eax, eax
0000000000008f44         ret
                        ; endp
0000000000008f45         align      8

                     loc_8f48:
0000000000008f48         mov        rax, qword [rdi+8]                          ; CODE XREF=cycle_check+25
0000000000008f4c         cmp        qword [rsi], rax
0000000000008f4f         jne        loc_8f1b

                     loc_8f51:
0000000000008f51         mov        eax, 0x1                                    ; CODE XREF=cycle_check+99
0000000000008f56         ret
                        ; endp
0000000000008f57         align      32

                     loc_8f60:
0000000000008f60         test       r8, r8                                      ; CODE XREF=cycle_check+40
0000000000008f63         je         loc_8f51

0000000000008f65         jmp        loc_8f38

                     loc_8f67:
0000000000008f67         lea        rcx, qword [__PRETTY_FUNCTION__.3994]       ; argument "__function" for method j___assert_fail, "cycle_check", CODE XREF=cycle_check+7
0000000000008f6e         lea        rsi, qword [aCoreutils831li]                ; argument "__file" for method j___assert_fail, "../coreutils-8.31/lib/cycle-check.c"
0000000000008f75         lea        rdi, qword [aStatemagic9827]                ; argument "__assertion" for method j___assert_fail, "state->magic == 9827862"
0000000000008f7c         sub        rsp, 0x8
0000000000008f80         mov        edx, 0x3c                                   ; argument "__line" for method j___assert_fail
0000000000008f85         call       j___assert_fail                             ; __assert_fail
                        ; endp
0000000000008f8a         align      16                                          ; End of unwind block (FDE at 0xdb38)

                     open_safer:
0000000000008f90         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0xdb54), CODE XREF=diropen.isra.6+35
0000000000008f94         mov        qword [rsp+0x58+var_28], rdx
0000000000008f99         xor        edx, edx
0000000000008f9b         mov        rax, qword [fs:0x28]
0000000000008fa4         mov        qword [rsp+0x58+var_40], rax
0000000000008fa9         xor        eax, eax
0000000000008fab         test       sil, 0x40
0000000000008faf         jne        loc_8fd8

                     loc_8fb1:
0000000000008fb1         xor        eax, eax                                    ; CODE XREF=open_safer+103
0000000000008fb3         call       j_open                                      ; open
0000000000008fb8         mov        edi, eax
0000000000008fba         call       fd_safer                                    ; fd_safer
0000000000008fbf         mov        rcx, qword [rsp+0x58+var_40]
0000000000008fc4         xor        rcx, qword [fs:0x28]
0000000000008fcd         jne        loc_8ff9

0000000000008fcf         add        rsp, 0x58
0000000000008fd3         ret
                        ; endp
0000000000008fd4         align      8

                     loc_8fd8:
0000000000008fd8         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=open_safer+31
0000000000008fdd         mov        dword [rsp+0x58+var_58], 0x10
0000000000008fe4         mov        edx, dword [rsp+0x58+var_28]
0000000000008fe8         mov        qword [rsp+0x58+var_50], rax
0000000000008fed         lea        rax, qword [rsp+0x58+var_38]
0000000000008ff2         mov        qword [rsp+0x58+var_48], rax
0000000000008ff7         jmp        loc_8fb1

                     loc_8ff9:
0000000000008ff9         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=open_safer+61
                        ; endp
0000000000008ffe         align      4096                                        ; End of unwind block (FDE at 0xdb54)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hard_locale:
0000000000009000         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xdb74), CODE XREF=rpl_mbrtowc+71
0000000000009004         xor        esi, esi                                    ; argument "__locale" for method j_setlocale
0000000000009006         call       j_setlocale                                 ; setlocale
000000000000900b         mov        rdx, rax
000000000000900e         mov        eax, 0x1
0000000000009013         test       rdx, rdx
0000000000009016         je         loc_9035

0000000000009018         lea        rdi, qword [__PRETTY_FUNCTION__.3994+12]    ; 0xc25c
000000000000901f         mov        ecx, 0x2
0000000000009024         mov        rsi, rdx
0000000000009027         rep  cmpsb byte [rsi], byte [rdi]
0000000000009029         seta       cl
000000000000902c         sbb        cl, 0x0
000000000000902f         xor        eax, eax
0000000000009031         test       cl, cl
0000000000009033         jne        loc_9040

                     loc_9035:
0000000000009035         add        rsp, 0x8                                    ; CODE XREF=hard_locale+22
0000000000009039         ret
                        ; endp
000000000000903a         align      64

                     loc_9040:
0000000000009040         lea        rdi, qword [aPosix]                         ; "POSIX", CODE XREF=hard_locale+51
0000000000009047         mov        ecx, 0x6
000000000000904c         mov        rsi, rdx
000000000000904f         rep  cmpsb byte [rsi], byte [rdi]
0000000000009051         seta       al
0000000000009054         sbb        al, 0x0
0000000000009056         test       al, al
0000000000009058         setne      al
000000000000905b         add        rsp, 0x8
000000000000905f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     next_prime:
0000000000009060         cmp        rdi, 0xa                                    ; End of unwind block (FDE at 0xdb74), Begin of unwind block (FDE at 0xdb94), CODE XREF=hash_initialize+123, hash_rehash+123
0000000000009064         mov        eax, 0xa
0000000000009069         movabs     r9, 0xaaaaaaaaaaaaaaab
0000000000009073         cmovb      rdi, rax
0000000000009077         or         rdi, 0x1
000000000000907b         cmp        rdi, 0xffffffffffffffff
000000000000907f         je         loc_90ef

0000000000009081         nop        dword [rax]

                     loc_9088:
0000000000009088         mov        rax, rdi                                    ; CODE XREF=next_prime+141
000000000000908b         mov        rcx, rdi
000000000000908e         mul        r9
0000000000009091         mov        rax, rdx
0000000000009094         shr        rax, 0x1
0000000000009097         lea        rax, qword [rax+rax*2]
000000000000909b         sub        rcx, rax
000000000000909e         cmp        rdi, 0x9
00000000000090a2         mov        rax, rcx
00000000000090a5         jbe        loc_90e0

00000000000090a7         test       rcx, rcx
00000000000090aa         je         loc_90e5

00000000000090ac         mov        r8d, 0x10
00000000000090b2         mov        esi, 0x9
00000000000090b7         mov        ecx, 0x3
00000000000090bc         jmp        loc_90c9
00000000000090be         align      64

                     loc_90c0:
00000000000090c0         add        r8, 0x8                                     ; CODE XREF=next_prime+126
00000000000090c4         test       rdx, rdx
00000000000090c7         je         loc_90e5

                     loc_90c9:
00000000000090c9         add        rcx, 0x2                                    ; CODE XREF=next_prime+92
00000000000090cd         xor        edx, edx
00000000000090cf         mov        rax, rdi
00000000000090d2         div        rcx
00000000000090d5         add        rsi, r8
00000000000090d8         cmp        rsi, rdi
00000000000090db         mov        rax, rdx
00000000000090de         jb         loc_90c0

                     loc_90e0:
00000000000090e0         test       rax, rax                                    ; CODE XREF=next_prime+69
00000000000090e3         jne        loc_90ef

                     loc_90e5:
00000000000090e5         add        rdi, 0x2                                    ; CODE XREF=next_prime+74, next_prime+103
00000000000090e9         cmp        rdi, 0xffffffffffffffff
00000000000090ed         jne        loc_9088

                     loc_90ef:
00000000000090ef         mov        rax, rdi                                    ; CODE XREF=next_prime+31, next_prime+131
00000000000090f2         ret
                        ; endp
00000000000090f3         align      256                                         ; End of unwind block (FDE at 0xdb94)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_hasher:
0000000000009100         mov        rax, rdi                                    ; Begin of unwind block (FDE at 0xdba8), DATA XREF=hash_initialize+4
0000000000009103         xor        edx, edx
0000000000009105         ror        rax, 0x3
0000000000009109         div        rsi
000000000000910c         mov        rax, rdx
000000000000910f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     raw_comparator:
0000000000009110         cmp        rdi, rsi                                    ; End of unwind block (FDE at 0xdba8), Begin of unwind block (FDE at 0xdbbc), DATA XREF=hash_initialize+48
0000000000009113         sete       al
0000000000009116         ret
                        ; endp
0000000000009117         align      32                                          ; End of unwind block (FDE at 0xdbbc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     safe_hasher:
0000000000009120         push       rbx                                         ; Begin of unwind block (FDE at 0xdbd0), CODE XREF=hash_find_entry+20, transfer_entries+101, transfer_entries+175, hash_lookup+10, hash_get_next+12
0000000000009121         mov        rbx, rdi
0000000000009124         mov        rdi, rsi
0000000000009127         mov        rsi, qword [rbx+0x10]
000000000000912b         call       qword [rbx+0x30]
000000000000912e         cmp        qword [rbx+0x10], rax
0000000000009132         jbe        loc_913d

0000000000009134         shl        rax, 0x4
0000000000009138         add        rax, qword [rbx]
000000000000913b         pop        rbx
000000000000913c         ret
                        ; endp

                     loc_913d:
000000000000913d         call       j_abort                                     ; abort, CODE XREF=safe_hasher+18
                        ; endp
0000000000009142         align      16                                          ; End of unwind block (FDE at 0xdbd0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_find_entry:
0000000000009150         push       r14                                         ; Begin of unwind block (FDE at 0xdbec), CODE XREF=hash_insert_if_absent+52, hash_insert_if_absent+463, hash_delete+35
0000000000009152         push       r13
0000000000009154         mov        r14, rdx
0000000000009157         push       r12
0000000000009159         push       rbp
000000000000915a         mov        r12, rdi
000000000000915d         push       rbx
000000000000915e         mov        rbp, rsi
0000000000009161         mov        r13d, ecx
0000000000009164         call       safe_hasher                                 ; safe_hasher
0000000000009169         mov        qword [r14], rax
000000000000916c         mov        rsi, qword [rax]
000000000000916f         test       rsi, rsi
0000000000009172         je         loc_9260

0000000000009178         cmp        rsi, rbp
000000000000917b         mov        rbx, rax
000000000000917e         je         loc_9213

0000000000009184         mov        rdi, rbp
0000000000009187         call       qword [r12+0x38]
000000000000918c         test       al, al
000000000000918e         jne        loc_9210

0000000000009194         mov        rax, qword [rbx+8]
0000000000009198         test       rax, rax
000000000000919b         je         loc_9260

00000000000091a1         mov        rsi, qword [rax]
00000000000091a4         cmp        rbp, rsi
00000000000091a7         jne        loc_91c9

00000000000091a9         jmp        loc_91dc
00000000000091ab         align      16

                     loc_91b0:
00000000000091b0         mov        rbx, qword [rbx+8]                          ; CODE XREF=hash_find_entry+131
00000000000091b4         mov        rax, qword [rbx+8]
00000000000091b8         test       rax, rax
00000000000091bb         je         loc_9260

00000000000091c1         mov        rsi, qword [rax]
00000000000091c4         cmp        rsi, rbp
00000000000091c7         je         loc_91dc

                     loc_91c9:
00000000000091c9         mov        rdi, rbp                                    ; CODE XREF=hash_find_entry+87
00000000000091cc         call       qword [r12+0x38]
00000000000091d1         test       al, al
00000000000091d3         je         loc_91b0

00000000000091d5         mov        rax, qword [rbx+8]
00000000000091d9         mov        rsi, qword [rax]

                     loc_91dc:
00000000000091dc         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+89, hash_find_entry+119
00000000000091df         je         loc_91fe

00000000000091e1         mov        rdx, qword [rax+8]
00000000000091e5         mov        qword [rbx+8], rdx
00000000000091e9         mov        qword [rax], 0x0
00000000000091f0         mov        rdx, qword [r12+0x48]
00000000000091f5         mov        qword [rax+8], rdx
00000000000091f9         mov        qword [r12+0x48], rax

                     loc_91fe:
00000000000091fe         pop        rbx                                         ; CODE XREF=hash_find_entry+143, hash_find_entry+198, hash_find_entry+263
00000000000091ff         mov        rax, rsi
0000000000009202         pop        rbp
0000000000009203         pop        r12
0000000000009205         pop        r13
0000000000009207         pop        r14
0000000000009209         ret
                        ; endp
000000000000920a         align      16

                     loc_9210:
0000000000009210         mov        rsi, qword [rbx]                            ; CODE XREF=hash_find_entry+62

                     loc_9213:
0000000000009213         test       r13b, r13b                                  ; CODE XREF=hash_find_entry+46
0000000000009216         je         loc_91fe

0000000000009218         mov        rax, qword [rbx+8]
000000000000921c         test       rax, rax
000000000000921f         je         loc_9250

0000000000009221         movdqu     xmm0, xmmword [rax]
0000000000009225         movups     xmmword [rbx], xmm0
0000000000009228         mov        qword [rax], 0x0
000000000000922f         mov        rdx, qword [r12+0x48]
0000000000009234         mov        qword [rax+8], rdx
0000000000009238         mov        qword [r12+0x48], rax
000000000000923d         mov        rax, rsi
0000000000009240         pop        rbx
0000000000009241         pop        rbp
0000000000009242         pop        r12
0000000000009244         pop        r13
0000000000009246         pop        r14
0000000000009248         ret
                        ; endp
0000000000009249         align      16

                     loc_9250:
0000000000009250         mov        qword [rbx], 0x0                            ; CODE XREF=hash_find_entry+207
0000000000009257         jmp        loc_91fe
0000000000009259         align      32

                     loc_9260:
0000000000009260         xor        esi, esi                                    ; CODE XREF=hash_find_entry+34, hash_find_entry+75, hash_find_entry+107
0000000000009262         pop        rbx
0000000000009263         mov        rax, rsi
0000000000009266         pop        rbp
0000000000009267         pop        r12
0000000000009269         pop        r13
000000000000926b         pop        r14
000000000000926d         ret
                        ; endp
000000000000926e         align      16                                          ; End of unwind block (FDE at 0xdbec)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     check_tuning.isra.0:
0000000000009270         mov        rdx, qword [rdi]                            ; Begin of unwind block (FDE at 0xdc4c), CODE XREF=hash_initialize+96, hash_initialize+283, hash_insert_if_absent+324, hash_delete+165
0000000000009273         lea        rcx, qword [default_tuning]                 ; default_tuning
000000000000927a         mov        eax, 0x1
000000000000927f         cmp        rdx, rcx
0000000000009282         je         loc_92e5

0000000000009284         movss      xmm0, dword [rdx+8]
0000000000009289         ucomiss    xmm0, dword [float_c2f4]                    ; float_c2f4
0000000000009290         jbe        loc_92e0

0000000000009292         movss      xmm1, dword [float_c2f8]                    ; float_c2f8
000000000000929a         ucomiss    xmm1, xmm0
000000000000929d         jbe        loc_92e0

000000000000929f         movss      xmm1, dword [rdx+0xc]
00000000000092a4         ucomiss    xmm1, dword [float_c2fc]                    ; float_c2fc
00000000000092ab         jbe        loc_92e0

00000000000092ad         movss      xmm1, dword [rdx]
00000000000092b1         ucomiss    xmm1, dword [float_c300]                    ; float_c300
00000000000092b8         jb         loc_92e0

00000000000092ba         addss      xmm1, dword [float_c2f4]                    ; float_c2f4
00000000000092c2         movss      xmm2, dword [rdx+4]
00000000000092c7         ucomiss    xmm2, xmm1
00000000000092ca         jbe        loc_92e0

00000000000092cc         movss      xmm3, dword [float_c304]                    ; float_c304
00000000000092d4         ucomiss    xmm3, xmm2
00000000000092d7         jb         loc_92e0

00000000000092d9         ucomiss    xmm0, xmm1
00000000000092dc         ja         loc_92e5

00000000000092de         nop

                     loc_92e0:
00000000000092e0         mov        qword [rdi], rcx                            ; CODE XREF=check_tuning.isra.0+32, check_tuning.isra.0+45, check_tuning.isra.0+59, check_tuning.isra.0+72, check_tuning.isra.0+90, check_tuning.isra.0+103
00000000000092e3         xor        eax, eax

                     loc_92e5:
00000000000092e5         ret                                                    ; CODE XREF=check_tuning.isra.0+18, check_tuning.isra.0+108
                        ; endp
00000000000092e7         align      16                                          ; End of unwind block (FDE at 0xdc4c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     transfer_entries:
00000000000092f0         push       r15                                         ; Begin of unwind block (FDE at 0xdc60), CODE XREF=hash_rehash+303, hash_rehash+338, hash_rehash+359
00000000000092f2         push       r14
00000000000092f4         push       r13
00000000000092f6         push       r12
00000000000092f8         push       rbp
00000000000092f9         push       rbx
00000000000092fa         sub        rsp, 0x8
00000000000092fe         mov        r12, qword [rsi]
0000000000009301         cmp        r12, qword [rsi+8]
0000000000009305         jae        loc_93e8

000000000000930b         mov        rbp, rdi
000000000000930e         mov        r13, rsi
0000000000009311         mov        r14d, edx
0000000000009314         nop        dword [rax]

                     loc_9318:
0000000000009318         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+242
000000000000931c         test       r15, r15
000000000000931f         je         loc_93da

0000000000009325         mov        rbx, qword [r12+8]
000000000000932a         test       rbx, rbx
000000000000932d         jne        loc_934c

000000000000932f         jmp        loc_938b
0000000000009331         align      8

                     loc_9338:
0000000000009338         mov        rcx, qword [rax+8]                          ; CODE XREF=transfer_entries+114
000000000000933c         test       rdx, rdx
000000000000933f         mov        qword [rbx+8], rcx
0000000000009343         mov        qword [rax+8], rbx
0000000000009347         mov        rbx, rdx
000000000000934a         je         loc_9387

                     loc_934c:
000000000000934c         mov        r15, qword [rbx]                            ; CODE XREF=transfer_entries+61, transfer_entries+149
000000000000934f         mov        rdi, rbp
0000000000009352         mov        rsi, r15
0000000000009355         call       safe_hasher                                 ; safe_hasher
000000000000935a         cmp        qword [rax], 0x0
000000000000935e         mov        rdx, qword [rbx+8]
0000000000009362         jne        loc_9338

0000000000009364         mov        qword [rax], r15
0000000000009367         add        qword [rbp+0x18], 0x1
000000000000936c         test       rdx, rdx
000000000000936f         mov        qword [rbx], 0x0
0000000000009376         mov        rax, qword [rbp+0x48]
000000000000937a         mov        qword [rbx+8], rax
000000000000937e         mov        qword [rbp+0x48], rbx
0000000000009382         mov        rbx, rdx
0000000000009385         jne        loc_934c

                     loc_9387:
0000000000009387         mov        r15, qword [r12]                            ; CODE XREF=transfer_entries+90

                     loc_938b:
000000000000938b         test       r14b, r14b                                  ; CODE XREF=transfer_entries+63
000000000000938e         mov        qword [r12+8], 0x0
0000000000009397         jne        loc_93da

0000000000009399         mov        rsi, r15
000000000000939c         mov        rdi, rbp
000000000000939f         call       safe_hasher                                 ; safe_hasher
00000000000093a4         cmp        qword [rax], 0x0
00000000000093a8         mov        rbx, rax
00000000000093ab         je         loc_9400

00000000000093ad         mov        rax, qword [rbp+0x48]
00000000000093b1         test       rax, rax
00000000000093b4         je         loc_9410

00000000000093b6         mov        rdx, qword [rax+8]
00000000000093ba         mov        qword [rbp+0x48], rdx

                     loc_93be:
00000000000093be         mov        rdx, qword [rbx+8]                          ; CODE XREF=transfer_entries+301
00000000000093c2         mov        qword [rax], r15
00000000000093c5         mov        qword [rax+8], rdx
00000000000093c9         mov        qword [rbx+8], rax

                     loc_93cd:
00000000000093cd         mov        qword [r12], 0x0                            ; CODE XREF=transfer_entries+280
00000000000093d5         sub        qword [r13+0x18], 0x1

                     loc_93da:
00000000000093da         add        r12, 0x10                                   ; CODE XREF=transfer_entries+47, transfer_entries+167
00000000000093de         cmp        qword [r13+8], r12
00000000000093e2         ja         loc_9318

                     loc_93e8:
00000000000093e8         add        rsp, 0x8                                    ; CODE XREF=transfer_entries+21
00000000000093ec         mov        eax, 0x1
00000000000093f1         pop        rbx
00000000000093f2         pop        rbp
00000000000093f3         pop        r12
00000000000093f5         pop        r13
00000000000093f7         pop        r14
00000000000093f9         pop        r15
00000000000093fb         ret
                        ; endp
00000000000093fc         align      1024

                     loc_9400:
0000000000009400         mov        qword [rax], r15                            ; CODE XREF=transfer_entries+187
0000000000009403         add        qword [rbp+0x18], 0x1
0000000000009408         jmp        loc_93cd
000000000000940a         align      16

                     loc_9410:
0000000000009410         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=transfer_entries+196
0000000000009415         call       j_malloc                                    ; malloc
000000000000941a         test       rax, rax
000000000000941d         jne        loc_93be

000000000000941f         add        rsp, 0x8
0000000000009423         xor        eax, eax
0000000000009425         pop        rbx
0000000000009426         pop        rbp
0000000000009427         pop        r12
0000000000009429         pop        r13
000000000000942b         pop        r14
000000000000942d         pop        r15
000000000000942f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets:
0000000000009430         mov        rax, qword [rdi+0x10]                       ; End of unwind block (FDE at 0xdc60), Begin of unwind block (FDE at 0xdcc0)
0000000000009434         ret
                        ; endp
0000000000009435         align      64                                          ; End of unwind block (FDE at 0xdcc0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_buckets_used:
0000000000009440         mov        rax, qword [rdi+0x18]                       ; Begin of unwind block (FDE at 0xdcd4)
0000000000009444         ret
                        ; endp
0000000000009445         align      16                                          ; End of unwind block (FDE at 0xdcd4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_n_entries:
0000000000009450         mov        rax, qword [rdi+0x20]                       ; Begin of unwind block (FDE at 0xdce8)
0000000000009454         ret
                        ; endp
0000000000009455         align      32                                          ; End of unwind block (FDE at 0xdce8)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_max_bucket_length:
0000000000009460         mov        rsi, qword [rdi]                            ; Begin of unwind block (FDE at 0xdcfc)
0000000000009463         mov        rdi, qword [rdi+8]
0000000000009467         xor        eax, eax
0000000000009469         cmp        rsi, rdi
000000000000946c         jae        loc_94a7

000000000000946e         nop

                     loc_9470:
0000000000009470         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_get_max_bucket_length+67
0000000000009474         je         loc_949c

0000000000009476         mov        rdx, qword [rsi+8]
000000000000947a         mov        ecx, 0x1
000000000000947f         test       rdx, rdx
0000000000009482         je         loc_9495

0000000000009484         nop        dword [rax]

                     loc_9488:
0000000000009488         mov        rdx, qword [rdx+8]                          ; CODE XREF=hash_get_max_bucket_length+51
000000000000948c         add        rcx, 0x1
0000000000009490         test       rdx, rdx
0000000000009493         jne        loc_9488

                     loc_9495:
0000000000009495         cmp        rax, rcx                                    ; CODE XREF=hash_get_max_bucket_length+34
0000000000009498         cmovb      rax, rcx

                     loc_949c:
000000000000949c         add        rsi, 0x10                                   ; CODE XREF=hash_get_max_bucket_length+20
00000000000094a0         cmp        rsi, rdi
00000000000094a3         jb         loc_9470

00000000000094a5         ret
                        ; endp

                     loc_94a7:
00000000000094a7         ret                                                    ; CODE XREF=hash_get_max_bucket_length+12
                        ; endp
00000000000094a9         align      16                                          ; End of unwind block (FDE at 0xdcfc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_table_ok:
00000000000094b0         mov        rcx, qword [rdi]                            ; Begin of unwind block (FDE at 0xdd10)
00000000000094b3         mov        r8, qword [rdi+8]
00000000000094b7         xor        edx, edx
00000000000094b9         xor        esi, esi
00000000000094bb         cmp        rcx, r8
00000000000094be         jae        loc_94f6

                     loc_94c0:
00000000000094c0         cmp        qword [rcx], 0x0                            ; CODE XREF=hash_table_ok+68
00000000000094c4         je         loc_94ed

00000000000094c6         mov        rax, qword [rcx+8]
00000000000094ca         add        rsi, 0x1
00000000000094ce         add        rdx, 0x1
00000000000094d2         test       rax, rax
00000000000094d5         je         loc_94ed

00000000000094d7         nop        word [rax+rax]

                     loc_94e0:
00000000000094e0         mov        rax, qword [rax+8]                          ; CODE XREF=hash_table_ok+59
00000000000094e4         add        rdx, 0x1
00000000000094e8         test       rax, rax
00000000000094eb         jne        loc_94e0

                     loc_94ed:
00000000000094ed         add        rcx, 0x10                                   ; CODE XREF=hash_table_ok+20, hash_table_ok+37
00000000000094f1         cmp        rcx, r8
00000000000094f4         jb         loc_94c0

                     loc_94f6:
00000000000094f6         xor        eax, eax                                    ; CODE XREF=hash_table_ok+14
00000000000094f8         cmp        qword [rdi+0x18], rsi
00000000000094fc         je         loc_9500

00000000000094fe         ret
                        ; endp

                     loc_9500:
0000000000009500         cmp        qword [rdi+0x20], rdx                       ; CODE XREF=hash_table_ok+76
0000000000009504         sete       al
0000000000009507         ret
                        ; endp
0000000000009508         align      16                                          ; End of unwind block (FDE at 0xdd10)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_print_statistics:
0000000000009510         push       r13                                         ; Begin of unwind block (FDE at 0xdd24)
0000000000009512         push       r12
0000000000009514         mov        r12, rsi
0000000000009517         push       rbp
0000000000009518         push       rbx
0000000000009519         xor        ebx, ebx
000000000000951b         sub        rsp, 0x8
000000000000951f         mov        rsi, qword [rdi]
0000000000009522         mov        rcx, qword [rdi+0x20]
0000000000009526         mov        rbp, qword [rdi+0x10]
000000000000952a         mov        r13, qword [rdi+0x18]
000000000000952e         mov        rdi, qword [rdi+8]
0000000000009532         cmp        rsi, rdi
0000000000009535         jae        loc_9575

0000000000009537         nop        word [rax+rax]

                     loc_9540:
0000000000009540         cmp        qword [rsi], 0x0                            ; CODE XREF=hash_print_statistics+99
0000000000009544         je         loc_956c

0000000000009546         mov        rax, qword [rsi+8]
000000000000954a         mov        edx, 0x1
000000000000954f         test       rax, rax
0000000000009552         je         loc_9565

0000000000009554         nop        dword [rax]

                     loc_9558:
0000000000009558         mov        rax, qword [rax+8]                          ; CODE XREF=hash_print_statistics+83
000000000000955c         add        rdx, 0x1
0000000000009560         test       rax, rax
0000000000009563         jne        loc_9558

                     loc_9565:
0000000000009565         cmp        rbx, rdx                                    ; CODE XREF=hash_print_statistics+66
0000000000009568         cmovb      rbx, rdx

                     loc_956c:
000000000000956c         add        rsi, 0x10                                   ; CODE XREF=hash_print_statistics+52
0000000000009570         cmp        rsi, rdi
0000000000009573         jb         loc_9540

                     loc_9575:
0000000000009575         lea        rdx, qword [aEntriesLun]                    ; "# entries:         %lu\\n", CODE XREF=hash_print_statistics+37
000000000000957c         mov        esi, 0x1
0000000000009581         mov        rdi, r12
0000000000009584         xor        eax, eax
0000000000009586         call       j___fprintf_chk                             ; __fprintf_chk
000000000000958b         lea        rdx, qword [aBucketsLun]                    ; "# buckets:         %lu\\n"
0000000000009592         xor        eax, eax
0000000000009594         mov        rcx, rbp
0000000000009597         mov        esi, 0x1
000000000000959c         mov        rdi, r12
000000000000959f         call       j___fprintf_chk                             ; __fprintf_chk
00000000000095a4         test       r13, r13
00000000000095a7         js         loc_9610

00000000000095a9         pxor       xmm0, xmm0
00000000000095ad         test       rbp, rbp
00000000000095b0         cvtsi2sd   xmm0, r13
00000000000095b5         mulsd      xmm0, qword [float_c310+8]                  ; 0xc318
00000000000095bd         js         loc_9639

                     loc_95bf:
00000000000095bf         pxor       xmm1, xmm1                                  ; CODE XREF=hash_print_statistics+295
00000000000095c3         cvtsi2sd   xmm1, rbp

                     loc_95c8:
00000000000095c8         divsd      xmm0, xmm1                                  ; CODE XREF=hash_print_statistics+322
00000000000095cc         lea        rdx, qword [aBucketsUsedLu2]                ; "# buckets used:    %lu (%.2f%%)\\n"
00000000000095d3         mov        rcx, r13
00000000000095d6         mov        rdi, r12
00000000000095d9         mov        esi, 0x1
00000000000095de         mov        eax, 0x1
00000000000095e3         call       j___fprintf_chk                             ; __fprintf_chk
00000000000095e8         add        rsp, 0x8
00000000000095ec         mov        rcx, rbx
00000000000095ef         mov        rdi, r12
00000000000095f2         pop        rbx
00000000000095f3         pop        rbp
00000000000095f4         pop        r12
00000000000095f6         pop        r13
00000000000095f8         lea        rdx, qword [aMaxBucketLengt]                ; "max bucket length: %lu\\n"
00000000000095ff         mov        esi, 0x1
0000000000009604         xor        eax, eax
0000000000009606         jmp        j___fprintf_chk                             ; __fprintf_chk
                        ; endp
000000000000960b         align      16

                     loc_9610:
0000000000009610         mov        rax, r13                                    ; CODE XREF=hash_print_statistics+151
0000000000009613         mov        rdx, r13
0000000000009616         pxor       xmm0, xmm0
000000000000961a         shr        rax, 0x1
000000000000961d         and        edx, 0x1
0000000000009620         or         rax, rdx
0000000000009623         test       rbp, rbp
0000000000009626         cvtsi2sd   xmm0, rax
000000000000962b         addsd      xmm0, xmm0
000000000000962f         mulsd      xmm0, qword [float_c310+8]                  ; 0xc318
0000000000009637         jns        loc_95bf

                     loc_9639:
0000000000009639         mov        rax, rbp                                    ; CODE XREF=hash_print_statistics+173
000000000000963c         pxor       xmm1, xmm1
0000000000009640         shr        rax, 0x1
0000000000009643         and        ebp, 0x1
0000000000009646         or         rax, rbp
0000000000009649         cvtsi2sd   xmm1, rax
000000000000964e         addsd      xmm1, xmm1
0000000000009652         jmp        loc_95c8
0000000000009657         align      32                                          ; End of unwind block (FDE at 0xdd24)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_lookup:
0000000000009660         push       r12                                         ; Begin of unwind block (FDE at 0xdd60), CODE XREF=filesystem_type+71
0000000000009662         push       rbp
0000000000009663         mov        r12, rdi
0000000000009666         push       rbx
0000000000009667         mov        rbp, rsi
000000000000966a         call       safe_hasher                                 ; safe_hasher
000000000000966f         mov        rsi, qword [rax]
0000000000009672         test       rsi, rsi
0000000000009675         je         loc_969d

0000000000009677         mov        rbx, rax
000000000000967a         jmp        loc_9683
000000000000967c         align      128

                     loc_9680:
0000000000009680         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+59

                     loc_9683:
0000000000009683         cmp        rsi, rbp                                    ; CODE XREF=hash_lookup+26
0000000000009686         je         loc_969f

0000000000009688         mov        rdi, rbp
000000000000968b         call       qword [r12+0x38]
0000000000009690         test       al, al
0000000000009692         jne        loc_96b0

0000000000009694         mov        rbx, qword [rbx+8]
0000000000009698         test       rbx, rbx
000000000000969b         jne        loc_9680

                     loc_969d:
000000000000969d         xor        esi, esi                                    ; CODE XREF=hash_lookup+21

                     loc_969f:
000000000000969f         pop        rbx                                         ; CODE XREF=hash_lookup+38
00000000000096a0         mov        rax, rsi
00000000000096a3         pop        rbp
00000000000096a4         pop        r12
00000000000096a6         ret
                        ; endp
00000000000096a7         align      16

                     loc_96b0:
00000000000096b0         mov        rsi, qword [rbx]                            ; CODE XREF=hash_lookup+50
00000000000096b3         pop        rbx
00000000000096b4         pop        rbp
00000000000096b5         mov        rax, rsi
00000000000096b8         pop        r12
00000000000096ba         ret
                        ; endp
00000000000096bb         align      64                                          ; End of unwind block (FDE at 0xdd60)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_first:
00000000000096c0         cmp        qword [rdi+0x20], 0x0                       ; Begin of unwind block (FDE at 0xdd98)
00000000000096c5         je         loc_96f3

00000000000096c7         mov        rdx, qword [rdi]
00000000000096ca         mov        rcx, qword [rdi+8]
00000000000096ce         cmp        rdx, rcx
00000000000096d1         jae        loc_96f8

00000000000096d3         mov        rax, qword [rdx]
00000000000096d6         test       rax, rax
00000000000096d9         jne        loc_96f6

00000000000096db         nop        dword [rax+rax]

                     loc_96e0:
00000000000096e0         add        rdx, 0x10                                   ; CODE XREF=hash_get_first+47
00000000000096e4         cmp        rdx, rcx
00000000000096e7         jae        loc_96f8

00000000000096e9         mov        rax, qword [rdx]
00000000000096ec         test       rax, rax
00000000000096ef         je         loc_96e0

00000000000096f1         ret
                        ; endp

                     loc_96f3:
00000000000096f3         xor        eax, eax                                    ; CODE XREF=hash_get_first+5
00000000000096f5         ret
                        ; endp

                     loc_96f6:
00000000000096f6         ret                                                    ; CODE XREF=hash_get_first+25
                        ; endp

                     loc_96f8:
00000000000096f8         sub        rsp, 0x8                                    ; CODE XREF=hash_get_first+17, hash_get_first+39
00000000000096fc         call       j_abort                                     ; abort
                        ; endp
0000000000009701         align      16                                          ; End of unwind block (FDE at 0xdd98)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_next:
0000000000009710         push       rbp                                         ; Begin of unwind block (FDE at 0xddac)
0000000000009711         push       rbx
0000000000009712         mov        rbp, rdi
0000000000009715         mov        rbx, rsi
0000000000009718         sub        rsp, 0x8
000000000000971c         call       safe_hasher                                 ; safe_hasher
0000000000009721         mov        rdx, rax
0000000000009724         mov        rcx, rax
0000000000009727         mov        rax, qword [rdx]
000000000000972a         mov        rdx, qword [rdx+8]
000000000000972e         cmp        rax, rbx
0000000000009731         je         loc_9749

0000000000009733         nop        dword [rax+rax]

                     loc_9738:
0000000000009738         test       rdx, rdx                                    ; CODE XREF=hash_get_next+55
000000000000973b         je         loc_974e

000000000000973d         mov        rax, qword [rdx]
0000000000009740         mov        rdx, qword [rdx+8]
0000000000009744         cmp        rax, rbx
0000000000009747         jne        loc_9738

                     loc_9749:
0000000000009749         test       rdx, rdx                                    ; CODE XREF=hash_get_next+33
000000000000974c         jne        loc_9778

                     loc_974e:
000000000000974e         mov        rdx, qword [rbp+8]                          ; CODE XREF=hash_get_next+43
0000000000009752         jmp        loc_9760
0000000000009754         align      8

                     loc_9758:
0000000000009758         mov        rax, qword [rcx]                            ; CODE XREF=hash_get_next+87
000000000000975b         test       rax, rax
000000000000975e         jne        loc_976b

                     loc_9760:
0000000000009760         add        rcx, 0x10                                   ; CODE XREF=hash_get_next+66
0000000000009764         cmp        rdx, rcx
0000000000009767         ja         loc_9758

0000000000009769         xor        eax, eax

                     loc_976b:
000000000000976b         add        rsp, 0x8                                    ; CODE XREF=hash_get_next+78
000000000000976f         pop        rbx
0000000000009770         pop        rbp
0000000000009771         ret
                        ; endp
0000000000009772         align      8

                     loc_9778:
0000000000009778         mov        rax, qword [rdx]                            ; CODE XREF=hash_get_next+60
000000000000977b         add        rsp, 0x8
000000000000977f         pop        rbx
0000000000009780         pop        rbp
0000000000009781         ret
                        ; endp
0000000000009782         align      16                                          ; End of unwind block (FDE at 0xddac)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_get_entries:
0000000000009790         mov        r9, qword [rdi]                             ; Begin of unwind block (FDE at 0xdde0)
0000000000009793         cmp        qword [rdi+8], r9
0000000000009797         jbe        loc_97f2

0000000000009799         xor        r8d, r8d

                     loc_979c:
000000000000979c         mov        rcx, qword [r9]                             ; CODE XREF=hash_get_entries+85
000000000000979f         test       rcx, rcx
00000000000097a2         je         loc_97dd

00000000000097a4         cmp        rdx, r8
00000000000097a7         jbe        loc_97e7

00000000000097a9         mov        qword [rsi+r8*8], rcx
00000000000097ad         mov        rcx, qword [r9+8]
00000000000097b1         lea        rax, qword [r8+1]
00000000000097b5         test       rcx, rcx
00000000000097b8         je         loc_97da

00000000000097ba         nop        word [rax+rax]

                     loc_97c0:
00000000000097c0         cmp        rdx, rax                                    ; CODE XREF=hash_get_entries+72
00000000000097c3         je         loc_97f0

00000000000097c5         mov        r8, qword [rcx]
00000000000097c8         add        rax, 0x1
00000000000097cc         mov        qword [rsi+rax*8-8], r8
00000000000097d1         mov        rcx, qword [rcx+8]
00000000000097d5         test       rcx, rcx
00000000000097d8         jne        loc_97c0

                     loc_97da:
00000000000097da         mov        r8, rax                                     ; CODE XREF=hash_get_entries+40

                     loc_97dd:
00000000000097dd         add        r9, 0x10                                    ; CODE XREF=hash_get_entries+18
00000000000097e1         cmp        qword [rdi+8], r9
00000000000097e5         ja         loc_979c

                     loc_97e7:
00000000000097e7         mov        rax, r8                                     ; CODE XREF=hash_get_entries+23
00000000000097ea         ret
                        ; endp
00000000000097eb         align      16

                     loc_97f0:
00000000000097f0         ret                                                    ; CODE XREF=hash_get_entries+51
                        ; endp

                     loc_97f2:
00000000000097f2         xor        eax, eax                                    ; CODE XREF=hash_get_entries+7
00000000000097f4         ret
                        ; endp
00000000000097f5         align      2048                                        ; End of unwind block (FDE at 0xdde0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_do_for_each:
0000000000009800         push       r15                                         ; Begin of unwind block (FDE at 0xddf4)
0000000000009802         push       r14
0000000000009804         push       r13
0000000000009806         push       r12
0000000000009808         push       rbp
0000000000009809         push       rbx
000000000000980a         sub        rsp, 0x8
000000000000980e         mov        r14, qword [rdi]
0000000000009811         cmp        qword [rdi+8], r14
0000000000009815         jbe        loc_9866

0000000000009817         mov        r13, rdx
000000000000981a         mov        r12, rsi
000000000000981d         mov        r15, rdi
0000000000009820         xor        ebp, ebp

                     loc_9822:
0000000000009822         mov        rdi, qword [r14]                            ; CODE XREF=hash_do_for_each+82
0000000000009825         test       rdi, rdi
0000000000009828         je         loc_984a

000000000000982a         mov        rbx, r14
000000000000982d         jmp        loc_9833
000000000000982f         align      16

                     loc_9830:
0000000000009830         mov        rdi, qword [rbx]                            ; CODE XREF=hash_do_for_each+72

                     loc_9833:
0000000000009833         mov        rsi, r13                                    ; CODE XREF=hash_do_for_each+45
0000000000009836         call       r12
0000000000009839         test       al, al
000000000000983b         je         loc_9854

000000000000983d         mov        rbx, qword [rbx+8]
0000000000009841         add        rbp, 0x1
0000000000009845         test       rbx, rbx
0000000000009848         jne        loc_9830

                     loc_984a:
000000000000984a         add        r14, 0x10                                   ; CODE XREF=hash_do_for_each+40
000000000000984e         cmp        qword [r15+8], r14
0000000000009852         ja         loc_9822

                     loc_9854:
0000000000009854         add        rsp, 0x8                                    ; CODE XREF=hash_do_for_each+59, hash_do_for_each+104
0000000000009858         mov        rax, rbp
000000000000985b         pop        rbx
000000000000985c         pop        rbp
000000000000985d         pop        r12
000000000000985f         pop        r13
0000000000009861         pop        r14
0000000000009863         pop        r15
0000000000009865         ret
                        ; endp

                     loc_9866:
0000000000009866         xor        ebp, ebp                                    ; CODE XREF=hash_do_for_each+21
0000000000009868         jmp        loc_9854
000000000000986a         align      16                                          ; End of unwind block (FDE at 0xddf4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_string:
0000000000009870         movzx      ecx, byte [rdi]                             ; Begin of unwind block (FDE at 0xde40)
0000000000009873         xor        edx, edx
0000000000009875         test       cl, cl
0000000000009877         je         loc_989d

0000000000009879         nop        dword [rax]

                     loc_9880:
0000000000009880         mov        rax, rdx                                    ; CODE XREF=hash_string+43
0000000000009883         add        rdi, 0x1
0000000000009887         shl        rax, 0x5
000000000000988b         sub        rax, rdx
000000000000988e         xor        edx, edx
0000000000009890         add        rax, rcx
0000000000009893         movzx      ecx, byte [rdi]
0000000000009896         div        rsi
0000000000009899         test       cl, cl
000000000000989b         jne        loc_9880

                     loc_989d:
000000000000989d         mov        rax, rdx                                    ; CODE XREF=hash_string+7
00000000000098a0         ret
                        ; endp
00000000000098a1         align      16                                          ; End of unwind block (FDE at 0xde40)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_reset_tuning:
00000000000098b0         movabs     rax, 0x3f80000000000000                     ; Begin of unwind block (FDE at 0xde54)
00000000000098ba         mov        byte [rdi+0x10], 0x0
00000000000098be         mov        qword [rdi], rax
00000000000098c1         movabs     rax, 0x3fb4fdf43f4ccccd
00000000000098cb         mov        qword [rdi+8], rax
00000000000098cf         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_initialize:
00000000000098d0         push       r15                                         ; End of unwind block (FDE at 0xde54), Begin of unwind block (FDE at 0xde68), CODE XREF=filesystem_type+124, setup_dir.isra.4+40
00000000000098d2         push       r14
00000000000098d4         lea        rax, qword [raw_hasher]                     ; raw_hasher
00000000000098db         push       r13
00000000000098dd         push       r12
00000000000098df         mov        r12, rdx
00000000000098e2         push       rbp
00000000000098e3         push       rbx
00000000000098e4         mov        r13, rcx
00000000000098e7         mov        rbp, rdi
00000000000098ea         mov        edi, 0x50                                   ; argument "__size" for method j_malloc
00000000000098ef         mov        r15, rsi
00000000000098f2         sub        rsp, 0x8
00000000000098f6         test       rdx, rdx
00000000000098f9         mov        r14, r8
00000000000098fc         cmove      r12, rax
0000000000009900         lea        rax, qword [raw_comparator]                 ; raw_comparator
0000000000009907         test       rcx, rcx
000000000000990a         cmove      r13, rax
000000000000990e         call       j_malloc                                    ; malloc
0000000000009913         test       rax, rax
0000000000009916         mov        rbx, rax
0000000000009919         je         loc_99ca

000000000000991f         test       r15, r15
0000000000009922         lea        rdi, qword [rax+0x28]
0000000000009926         je         loc_99e0

000000000000992c         mov        qword [rax+0x28], r15
0000000000009930         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000009935         test       al, al
0000000000009937         je         loc_99c0

000000000000993d         cmp        byte [r15+0x10], 0x0
0000000000009942         je         loc_9a40

                     loc_9948:
0000000000009948         mov        rdi, rbp                                    ; CODE XREF=hash_initialize+362, hash_initialize+421
000000000000994b         call       next_prime                                  ; next_prime
0000000000009950         mov        edx, 0x8
0000000000009955         mov        rbp, rax
0000000000009958         xor        ecx, ecx
000000000000995a         mov        rax, rdx
000000000000995d         mul        rbp
0000000000009960         jo         loc_9a7a

                     loc_9966:
0000000000009966         test       rax, rax                                    ; CODE XREF=hash_initialize+431
0000000000009969         js         loc_99c0

000000000000996b         test       rcx, rcx
000000000000996e         jne        loc_99c0

0000000000009970         test       rbp, rbp
0000000000009973         mov        qword [rbx+0x10], rbp
0000000000009977         je         loc_99c0

0000000000009979         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
000000000000997e         mov        rdi, rbp                                    ; argument "__nmemb" for method j_calloc
0000000000009981         call       j_calloc                                    ; calloc
0000000000009986         test       rax, rax
0000000000009989         mov        qword [rbx], rax
000000000000998c         je         loc_99c0

000000000000998e         shl        rbp, 0x4
0000000000009992         mov        qword [rbx+0x18], 0x0
000000000000999a         mov        qword [rbx+0x20], 0x0
00000000000099a2         add        rbp, rax
00000000000099a5         mov        qword [rbx+0x30], r12
00000000000099a9         mov        qword [rbx+0x38], r13
00000000000099ad         mov        qword [rbx+8], rbp
00000000000099b1         mov        qword [rbx+0x40], r14
00000000000099b5         mov        qword [rbx+0x48], 0x0
00000000000099bd         jmp        loc_99ca
00000000000099bf         align      64

                     loc_99c0:
00000000000099c0         mov        rdi, rbx                                    ; CODE XREF=hash_initialize+103, hash_initialize+153, hash_initialize+158, hash_initialize+167, hash_initialize+188, hash_initialize+298, hash_initialize+325
00000000000099c3         xor        ebx, ebx
00000000000099c5         call       sub_1da0                                    ; sub_1da0

                     loc_99ca:
00000000000099ca         add        rsp, 0x8                                    ; CODE XREF=hash_initialize+73, hash_initialize+237
00000000000099ce         mov        rax, rbx
00000000000099d1         pop        rbx
00000000000099d2         pop        rbp
00000000000099d3         pop        r12
00000000000099d5         pop        r13
00000000000099d7         pop        r14
00000000000099d9         pop        r15
00000000000099db         ret
                        ; endp
00000000000099dc         align      32

                     loc_99e0:
00000000000099e0         lea        rax, qword [default_tuning]                 ; default_tuning, CODE XREF=hash_initialize+86
00000000000099e7         mov        qword [rbx+0x28], rax
00000000000099eb         call       check_tuning.isra.0                         ; check_tuning.isra.0
00000000000099f0         test       al, al
00000000000099f2         movss      xmm1, dword [float_c308]                    ; float_c308
00000000000099fa         je         loc_99c0

00000000000099fc         test       rbp, rbp
00000000000099ff         js         loc_9a4b

                     loc_9a01:
0000000000009a01         pxor       xmm0, xmm0                                  ; CODE XREF=hash_initialize+377
0000000000009a05         cvtsi2ss   xmm0, rbp

                     loc_9a0a:
0000000000009a0a         divss      xmm0, xmm1                                  ; CODE XREF=hash_initialize+404
0000000000009a0e         ucomiss    xmm0, dword [float_c30c]                    ; float_c30c
0000000000009a15         jae        loc_99c0

0000000000009a17         ucomiss    xmm0, dword [float_c310]                    ; float_c310
0000000000009a1e         jb         loc_9a70

0000000000009a20         subss      xmm0, dword [float_c310]                    ; float_c310
0000000000009a28         movabs     rax, 0x8000000000000000
0000000000009a32         cvttss2si  rbp, xmm0
0000000000009a37         xor        rbp, rax
0000000000009a3a         jmp        loc_9948
0000000000009a3f         align      64

                     loc_9a40:
0000000000009a40         test       rbp, rbp                                    ; CODE XREF=hash_initialize+114
0000000000009a43         movss      xmm1, dword [r15+8]
0000000000009a49         jns        loc_9a01

                     loc_9a4b:
0000000000009a4b         mov        rax, rbp                                    ; CODE XREF=hash_initialize+303
0000000000009a4e         pxor       xmm0, xmm0
0000000000009a52         shr        rax, 0x1
0000000000009a55         and        ebp, 0x1
0000000000009a58         or         rax, rbp
0000000000009a5b         cvtsi2ss   xmm0, rax
0000000000009a60         addss      xmm0, xmm0
0000000000009a64         jmp        loc_9a0a
0000000000009a66         align      16

                     loc_9a70:
0000000000009a70         cvttss2si  rbp, xmm0                                   ; CODE XREF=hash_initialize+334
0000000000009a75         jmp        loc_9948

                     loc_9a7a:
0000000000009a7a         mov        ecx, 0x1                                    ; CODE XREF=hash_initialize+144
0000000000009a7f         jmp        loc_9966
0000000000009a84         align      16                                          ; End of unwind block (FDE at 0xde68)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_clear:
0000000000009a90         push       r12                                         ; Begin of unwind block (FDE at 0xdeb4)
0000000000009a92         push       rbp
0000000000009a93         mov        rbp, rdi
0000000000009a96         push       rbx
0000000000009a97         mov        r12, qword [rdi]
0000000000009a9a         cmp        r12, qword [rdi+8]
0000000000009a9e         jae        loc_9b0b

                     loc_9aa0:
0000000000009aa0         cmp        qword [r12], 0x0                            ; CODE XREF=hash_clear+121
0000000000009aa5         je         loc_9b01

0000000000009aa7         mov        rbx, qword [r12+8]
0000000000009aac         mov        rax, qword [rbp+0x40]
0000000000009ab0         test       rbx, rbx
0000000000009ab3         je         loc_9ae5

0000000000009ab5         nop        dword [rax]

                     loc_9ab8:
0000000000009ab8         test       rax, rax                                    ; CODE XREF=hash_clear+83
0000000000009abb         je         loc_9ac6

0000000000009abd         mov        rdi, qword [rbx]
0000000000009ac0         call       rax
0000000000009ac2         mov        rax, qword [rbp+0x40]

                     loc_9ac6:
0000000000009ac6         mov        rdx, qword [rbx+8]                          ; CODE XREF=hash_clear+43
0000000000009aca         mov        rcx, qword [rbp+0x48]
0000000000009ace         mov        qword [rbx], 0x0
0000000000009ad5         test       rdx, rdx
0000000000009ad8         mov        qword [rbx+8], rcx
0000000000009adc         mov        qword [rbp+0x48], rbx
0000000000009ae0         mov        rbx, rdx
0000000000009ae3         jne        loc_9ab8

                     loc_9ae5:
0000000000009ae5         test       rax, rax                                    ; CODE XREF=hash_clear+35
0000000000009ae8         je         loc_9af0

0000000000009aea         mov        rdi, qword [r12]
0000000000009aee         call       rax

                     loc_9af0:
0000000000009af0         mov        qword [r12], 0x0                            ; CODE XREF=hash_clear+88
0000000000009af8         mov        qword [r12+8], 0x0

                     loc_9b01:
0000000000009b01         add        r12, 0x10                                   ; CODE XREF=hash_clear+21
0000000000009b05         cmp        qword [rbp+8], r12
0000000000009b09         ja         loc_9aa0

                     loc_9b0b:
0000000000009b0b         mov        qword [rbp+0x18], 0x0                       ; CODE XREF=hash_clear+14
0000000000009b13         mov        qword [rbp+0x20], 0x0
0000000000009b1b         pop        rbx
0000000000009b1c         pop        rbp
0000000000009b1d         pop        r12
0000000000009b1f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     hash_free:
0000000000009b20         push       r12                                         ; End of unwind block (FDE at 0xdeb4), Begin of unwind block (FDE at 0xdee0), CODE XREF=rpl_fts_close+154, rpl_fts_close+177, rpl_fts_read+713
0000000000009b22         push       rbp
0000000000009b23         mov        r12, rdi
0000000000009b26         push       rbx
0000000000009b27         cmp        qword [rdi+0x40], 0x0
0000000000009b2c         mov        rbp, qword [rdi]
0000000000009b2f         mov        rax, qword [rdi+8]
0000000000009b33         je         loc_9b83

0000000000009b35         cmp        qword [rdi+0x20], 0x0
0000000000009b3a         je         loc_9b83

0000000000009b3c         cmp        rbp, rax
0000000000009b3f         jae        loc_9bbc

0000000000009b41         nop        dword [rax]

                     loc_9b48:
0000000000009b48         mov        rdi, qword [rbp]                            ; CODE XREF=hash_free+93
0000000000009b4c         test       rdi, rdi
0000000000009b4f         je         loc_9b76

0000000000009b51         mov        rbx, rbp
0000000000009b54         jmp        loc_9b63
0000000000009b56         align      32

                     loc_9b60:
0000000000009b60         mov        rdi, qword [rbx]                            ; CODE XREF=hash_free+79

                     loc_9b63:
0000000000009b63         call       qword [r12+0x40]                            ; CODE XREF=hash_free+52
0000000000009b68         mov        rbx, qword [rbx+8]
0000000000009b6c         test       rbx, rbx
0000000000009b6f         jne        loc_9b60

0000000000009b71         mov        rax, qword [r12+8]

                     loc_9b76:
0000000000009b76         add        rbp, 0x10                                   ; CODE XREF=hash_free+47
0000000000009b7a         cmp        rax, rbp
0000000000009b7d         ja         loc_9b48

0000000000009b7f         mov        rbp, qword [r12]

                     loc_9b83:
0000000000009b83         cmp        rbp, rax                                    ; CODE XREF=hash_free+19, hash_free+26
0000000000009b86         jae        loc_9bbc

0000000000009b88         nop        dword [rax+rax]

                     loc_9b90:
0000000000009b90         mov        rdi, qword [rbp+8]                          ; CODE XREF=hash_free+154
0000000000009b94         test       rdi, rdi
0000000000009b97         je         loc_9bb1

0000000000009b99         nop        dword [rax]

                     loc_9ba0:
0000000000009ba0         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+143
0000000000009ba4         call       sub_1da0                                    ; sub_1da0
0000000000009ba9         test       rbx, rbx
0000000000009bac         mov        rdi, rbx
0000000000009baf         jne        loc_9ba0

                     loc_9bb1:
0000000000009bb1         add        rbp, 0x10                                   ; CODE XREF=hash_free+119
0000000000009bb5         cmp        qword [r12+8], rbp
0000000000009bba         ja         loc_9b90

                     loc_9bbc:
0000000000009bbc         mov        rdi, qword [r12+0x48]                       ; CODE XREF=hash_free+31, hash_free+102
0000000000009bc1         test       rdi, rdi
0000000000009bc4         je         loc_9be1

0000000000009bc6         nop        word [cs:rax+rax]

                     loc_9bd0:
0000000000009bd0         mov        rbx, qword [rdi+8]                          ; CODE XREF=hash_free+191
0000000000009bd4         call       sub_1da0                                    ; sub_1da0
0000000000009bd9         test       rbx, rbx
0000000000009bdc         mov        rdi, rbx
0000000000009bdf         jne        loc_9bd0

                     loc_9be1:
0000000000009be1         mov        rdi, qword [r12]                            ; CODE XREF=hash_free+164
0000000000009be5         call       sub_1da0                                    ; sub_1da0
0000000000009bea         pop        rbx
0000000000009beb         mov        rdi, r12
0000000000009bee         pop        rbp
0000000000009bef         pop        r12
0000000000009bf1         jmp        sub_1da0                                    ; sub_1da0
                        ; endp
0000000000009bf6         align      1024                                        ; End of unwind block (FDE at 0xdee0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_40: int64_t, -64
        ;    var_48: int64_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int64_t, -104
        ;    var_70: int64_t, -112
        ;    var_78: int64_t, -120


                     hash_rehash:
0000000000009c00         push       r12                                         ; Begin of unwind block (FDE at 0xdf0c), CODE XREF=hash_insert_if_absent+443, hash_delete+271
0000000000009c02         push       rbp
0000000000009c03         mov        rbp, rdi
0000000000009c06         push       rbx
0000000000009c07         sub        rsp, 0x60
0000000000009c0b         mov        r12, qword [rdi+0x28]
0000000000009c0f         mov        rax, qword [fs:0x28]
0000000000009c18         mov        qword [rsp+0x78+var_20], rax
0000000000009c1d         xor        eax, eax
0000000000009c1f         cmp        byte [r12+0x10], 0x0
0000000000009c25         jne        loc_9c78

0000000000009c27         test       rsi, rsi
0000000000009c2a         js         loc_9da8

0000000000009c30         pxor       xmm0, xmm0
0000000000009c34         cvtsi2ss   xmm0, rsi

                     loc_9c39:
0000000000009c39         divss      xmm0, dword [r12+8]                         ; CODE XREF=hash_rehash+449
0000000000009c40         ucomiss    xmm0, dword [float_c30c]                    ; float_c30c
0000000000009c47         jae        loc_9d80

0000000000009c4d         ucomiss    xmm0, dword [float_c310]                    ; float_c310
0000000000009c54         jb         loc_9dd0

0000000000009c5a         subss      xmm0, dword [float_c310]                    ; float_c310
0000000000009c62         movabs     rax, 0x8000000000000000
0000000000009c6c         cvttss2si  rsi, xmm0
0000000000009c71         xor        rsi, rax
0000000000009c74         nop        dword [rax]

                     loc_9c78:
0000000000009c78         mov        rdi, rsi                                    ; CODE XREF=hash_rehash+37, hash_rehash+469
0000000000009c7b         call       next_prime                                  ; next_prime
0000000000009c80         mov        edx, 0x8
0000000000009c85         mov        rbx, rax
0000000000009c88         xor        ecx, ecx
0000000000009c8a         mov        rax, rdx
0000000000009c8d         mul        rbx
0000000000009c90         jo         loc_9e2f

                     loc_9c96:
0000000000009c96         test       rax, rax                                    ; CODE XREF=hash_rehash+564
0000000000009c99         mov        eax, 0x1
0000000000009c9e         cmovs      rcx, rax
0000000000009ca2         test       rbx, rbx
0000000000009ca5         je         loc_9d80

0000000000009cab         and        ecx, 0x1
0000000000009cae         jne        loc_9d80

0000000000009cb4         cmp        qword [rbp+0x10], rbx
0000000000009cb8         je         loc_9de0

0000000000009cbe         mov        esi, 0x10                                   ; argument "__size" for method j_calloc
0000000000009cc3         mov        rdi, rbx                                    ; argument "__nmemb" for method j_calloc
0000000000009cc6         call       j_calloc                                    ; calloc
0000000000009ccb         test       rax, rax
0000000000009cce         mov        qword [rsp+0x78+var_78], rax
0000000000009cd2         je         loc_9d80

0000000000009cd8         mov        qword [rsp+0x78+var_68], rbx
0000000000009cdd         shl        rbx, 0x4
0000000000009ce1         mov        qword [rsp+0x78+var_50], r12
0000000000009ce6         add        rbx, rax
0000000000009ce9         mov        rax, qword [rbp+0x30]
0000000000009ced         mov        r12, rsp
0000000000009cf0         xor        edx, edx
0000000000009cf2         mov        rsi, rbp
0000000000009cf5         mov        rdi, r12
0000000000009cf8         mov        qword [rsp+0x78+var_70], rbx
0000000000009cfd         mov        qword [rsp+0x78+var_60], 0x0
0000000000009d06         mov        qword [rsp+0x78+var_48], rax
0000000000009d0b         mov        rax, qword [rbp+0x38]
0000000000009d0f         mov        qword [rsp+0x78+var_58], 0x0
0000000000009d18         mov        qword [rsp+0x78+var_40], rax
0000000000009d1d         mov        rax, qword [rbp+0x40]
0000000000009d21         mov        qword [rsp+0x78+var_38], rax
0000000000009d26         mov        rax, qword [rbp+0x48]
0000000000009d2a         mov        qword [rsp+0x78+var_30], rax
0000000000009d2f         call       transfer_entries                            ; transfer_entries
0000000000009d34         test       al, al
0000000000009d36         mov        ebx, eax
0000000000009d38         jne        loc_9df0

0000000000009d3e         mov        rax, qword [rsp+0x78+var_30]
0000000000009d43         mov        edx, 0x1
0000000000009d48         mov        rsi, r12
0000000000009d4b         mov        rdi, rbp
0000000000009d4e         mov        qword [rbp+0x48], rax
0000000000009d52         call       transfer_entries                            ; transfer_entries
0000000000009d57         test       al, al
0000000000009d59         je         loc_9e39

0000000000009d5f         xor        edx, edx
0000000000009d61         mov        rsi, r12
0000000000009d64         mov        rdi, rbp
0000000000009d67         call       transfer_entries                            ; transfer_entries
0000000000009d6c         test       al, al
0000000000009d6e         je         loc_9e39

0000000000009d74         mov        rdi, qword [rsp+0x78+var_78]
0000000000009d78         call       sub_1da0                                    ; sub_1da0
0000000000009d7d         jmp        loc_9d82
0000000000009d7f         align      128

                     loc_9d80:
0000000000009d80         xor        ebx, ebx                                    ; CODE XREF=hash_rehash+71, hash_rehash+165, hash_rehash+174, hash_rehash+210

                     loc_9d82:
0000000000009d82         mov        rcx, qword [rsp+0x78+var_20]                ; CODE XREF=hash_rehash+381, hash_rehash+485, hash_rehash+549
0000000000009d87         xor        rcx, qword [fs:0x28]
0000000000009d90         mov        eax, ebx
0000000000009d92         jne        loc_9e2a

0000000000009d98         add        rsp, 0x60
0000000000009d9c         pop        rbx
0000000000009d9d         pop        rbp
0000000000009d9e         pop        r12
0000000000009da0         ret
                        ; endp
0000000000009da1         align      8

                     loc_9da8:
0000000000009da8         mov        rax, rsi                                    ; CODE XREF=hash_rehash+42
0000000000009dab         pxor       xmm0, xmm0
0000000000009daf         shr        rax, 0x1
0000000000009db2         and        esi, 0x1
0000000000009db5         or         rax, rsi
0000000000009db8         cvtsi2ss   xmm0, rax
0000000000009dbd         addss      xmm0, xmm0
0000000000009dc1         jmp        loc_9c39
0000000000009dc6         align      16

                     loc_9dd0:
0000000000009dd0         cvttss2si  rsi, xmm0                                   ; CODE XREF=hash_rehash+84
0000000000009dd5         jmp        loc_9c78
0000000000009dda         align      32

                     loc_9de0:
0000000000009de0         mov        ebx, 0x1                                    ; CODE XREF=hash_rehash+184
0000000000009de5         jmp        loc_9d82
0000000000009de7         align      16

                     loc_9df0:
0000000000009df0         mov        rdi, qword [rbp]                            ; CODE XREF=hash_rehash+312
0000000000009df4         call       sub_1da0                                    ; sub_1da0
0000000000009df9         mov        rax, qword [rsp+0x78+var_78]
0000000000009dfd         mov        qword [rbp], rax
0000000000009e01         mov        rax, qword [rsp+0x78+var_70]
0000000000009e06         mov        qword [rbp+8], rax
0000000000009e0a         mov        rax, qword [rsp+0x78+var_68]
0000000000009e0f         mov        qword [rbp+0x10], rax
0000000000009e13         mov        rax, qword [rsp+0x78+var_60]
0000000000009e18         mov        qword [rbp+0x18], rax
0000000000009e1c         mov        rax, qword [rsp+0x78+var_30]
0000000000009e21         mov        qword [rbp+0x48], rax
0000000000009e25         jmp        loc_9d82

                     loc_9e2a:
0000000000009e2a         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_rehash+402
                        ; endp

                     loc_9e2f:
0000000000009e2f         mov        ecx, 0x1                                    ; CODE XREF=hash_rehash+144
0000000000009e34         jmp        loc_9c96

                     loc_9e39:
0000000000009e39         call       j_abort                                     ; abort, CODE XREF=hash_rehash+345, hash_rehash+366
                        ; endp
0000000000009e3e         align      64                                          ; End of unwind block (FDE at 0xdf0c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56


                     hash_insert_if_absent:
0000000000009e40         push       r13                                         ; Begin of unwind block (FDE at 0xdf44), CODE XREF=hash_insert+27
0000000000009e42         push       r12
0000000000009e44         push       rbp
0000000000009e45         push       rbx
0000000000009e46         sub        rsp, 0x18
0000000000009e4a         mov        rax, qword [fs:0x28]
0000000000009e53         mov        qword [rsp+0x38+var_30], rax
0000000000009e58         xor        eax, eax
0000000000009e5a         test       rsi, rsi
0000000000009e5d         je         loc_a01d

0000000000009e63         mov        r12, rsp
0000000000009e66         xor        ecx, ecx
0000000000009e68         mov        r13, rdx
0000000000009e6b         mov        rdx, r12
0000000000009e6e         mov        rbx, rdi
0000000000009e71         mov        rbp, rsi
0000000000009e74         call       hash_find_entry                             ; hash_find_entry
0000000000009e79         test       rax, rax
0000000000009e7c         mov        rdx, rax
0000000000009e7f         je         loc_9eb0

0000000000009e81         xor        eax, eax
0000000000009e83         test       r13, r13
0000000000009e86         je         loc_9e8c

0000000000009e88         mov        qword [r13], rdx

                     loc_9e8c:
0000000000009e8c         mov        rcx, qword [rsp+0x38+var_30]                ; CODE XREF=hash_insert_if_absent+70, hash_insert_if_absent+233, hash_insert_if_absent+507, hash_insert_if_absent+536
0000000000009e91         xor        rcx, qword [fs:0x28]
0000000000009e9a         jne        loc_a0bf

0000000000009ea0         add        rsp, 0x18
0000000000009ea4         pop        rbx
0000000000009ea5         pop        rbp
0000000000009ea6         pop        r12
0000000000009ea8         pop        r13
0000000000009eaa         ret
                        ; endp
0000000000009eab         align      16

                     loc_9eb0:
0000000000009eb0         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+63
0000000000009eb4         test       rax, rax
0000000000009eb7         js         loc_9f30

0000000000009eb9         pxor       xmm1, xmm1
0000000000009ebd         mov        rdx, qword [rbx+0x28]
0000000000009ec1         cvtsi2ss   xmm1, rax
0000000000009ec6         mov        rax, qword [rbx+0x10]
0000000000009eca         test       rax, rax
0000000000009ecd         js         loc_9f5a

                     loc_9ed3:
0000000000009ed3         pxor       xmm0, xmm0                                  ; CODE XREF=hash_insert_if_absent+276
0000000000009ed7         cvtsi2ss   xmm0, rax

                     loc_9edc:
0000000000009edc         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_insert_if_absent+307
0000000000009ee1         ucomiss    xmm1, xmm0
0000000000009ee4         ja         loc_9f80

                     loc_9eea:
0000000000009eea         mov        r12, qword [rsp+0x38+var_38]                ; CODE XREF=hash_insert_if_absent+392, hash_insert_if_absent+471
0000000000009eee         cmp        qword [r12], 0x0
0000000000009ef3         je         loc_a028

0000000000009ef9         mov        rax, qword [rbx+0x48]
0000000000009efd         test       rax, rax
0000000000009f00         je         loc_a040

0000000000009f06         mov        rdx, qword [rax+8]
0000000000009f0a         mov        qword [rbx+0x48], rdx

                     loc_9f0e:
0000000000009f0e         mov        rdx, qword [r12+8]                          ; CODE XREF=hash_insert_if_absent+525
0000000000009f13         mov        qword [rax], rbp
0000000000009f16         mov        qword [rax+8], rdx
0000000000009f1a         mov        qword [r12+8], rax
0000000000009f1f         mov        eax, 0x1
0000000000009f24         add        qword [rbx+0x20], 0x1
0000000000009f29         jmp        loc_9e8c
0000000000009f2e         align      16

                     loc_9f30:
0000000000009f30         mov        rdx, rax                                    ; CODE XREF=hash_insert_if_absent+119
0000000000009f33         pxor       xmm1, xmm1
0000000000009f37         and        eax, 0x1
0000000000009f3a         shr        rdx, 0x1
0000000000009f3d         or         rdx, rax
0000000000009f40         mov        rax, qword [rbx+0x10]
0000000000009f44         cvtsi2ss   xmm1, rdx
0000000000009f49         mov        rdx, qword [rbx+0x28]
0000000000009f4d         test       rax, rax
0000000000009f50         addss      xmm1, xmm1
0000000000009f54         jns        loc_9ed3

                     loc_9f5a:
0000000000009f5a         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+141
0000000000009f5d         pxor       xmm0, xmm0
0000000000009f61         shr        rcx, 0x1
0000000000009f64         and        eax, 0x1
0000000000009f67         or         rcx, rax
0000000000009f6a         cvtsi2ss   xmm0, rcx
0000000000009f6f         addss      xmm0, xmm0
0000000000009f73         jmp        loc_9edc
0000000000009f78         align      128

                     loc_9f80:
0000000000009f80         lea        rdi, qword [rbx+0x28]                       ; CODE XREF=hash_insert_if_absent+164
0000000000009f84         call       check_tuning.isra.0                         ; check_tuning.isra.0
0000000000009f89         mov        rax, qword [rbx+0x10]
0000000000009f8d         mov        rdx, qword [rbx+0x28]
0000000000009f91         test       rax, rax
0000000000009f94         movss      xmm2, dword [rdx+8]
0000000000009f99         js         loc_a060

0000000000009f9f         pxor       xmm0, xmm0
0000000000009fa3         cvtsi2ss   xmm0, rax

                     loc_9fa8:
0000000000009fa8         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_insert_if_absent+569
0000000000009fac         test       rax, rax
0000000000009faf         js         loc_a080

0000000000009fb5         pxor       xmm1, xmm1
0000000000009fb9         cvtsi2ss   xmm1, rax

                     loc_9fbe:
0000000000009fbe         movaps     xmm3, xmm2                                  ; CODE XREF=hash_insert_if_absent+601
0000000000009fc1         mulss      xmm3, xmm0
0000000000009fc5         ucomiss    xmm1, xmm3
0000000000009fc8         jbe        loc_9eea

0000000000009fce         cmp        byte [rdx+0x10], 0x0
0000000000009fd2         mulss      xmm0, dword [rdx+0xc]
0000000000009fd7         jne        loc_9fdd

0000000000009fd9         mulss      xmm0, xmm2

                     loc_9fdd:
0000000000009fdd         ucomiss    xmm0, dword [float_c30c]                    ; float_c30c, CODE XREF=hash_insert_if_absent+407
0000000000009fe4         jae        loc_a053

0000000000009fe6         ucomiss    xmm0, dword [float_c310]                    ; float_c310
0000000000009fed         jae        loc_a0a0

0000000000009ff3         cvttss2si  rsi, xmm0

                     loc_9ff8:
0000000000009ff8         mov        rdi, rbx                                    ; CODE XREF=hash_insert_if_absent+634
0000000000009ffb         call       hash_rehash                                 ; hash_rehash
000000000000a000         test       al, al                                      ; DATA XREF=prompt+389, prompt+1037, file_type+31, fts_stat+189
000000000000a002         je         loc_a053

000000000000a004         xor        ecx, ecx
000000000000a006         mov        rdx, r12
000000000000a009         mov        rsi, rbp
000000000000a00c         mov        rdi, rbx
000000000000a00f         call       hash_find_entry                             ; hash_find_entry
000000000000a014         test       rax, rax
000000000000a017         je         loc_9eea

                     loc_a01d:
000000000000a01d         call       j_abort                                     ; abort, CODE XREF=hash_insert_if_absent+29
                        ; endp
000000000000a022         align      8

                     loc_a028:
000000000000a028         mov        qword [r12], rbp                            ; CODE XREF=hash_insert_if_absent+179
000000000000a02c         mov        eax, 0x1
000000000000a031         add        qword [rbx+0x20], 0x1
000000000000a036         add        qword [rbx+0x18], 0x1
000000000000a03b         jmp        loc_9e8c

                     loc_a040:
000000000000a040         mov        edi, 0x10                                   ; argument "__size" for method j_malloc, CODE XREF=hash_insert_if_absent+192
000000000000a045         call       j_malloc                                    ; malloc
000000000000a04a         test       rax, rax
000000000000a04d         jne        loc_9f0e

                     loc_a053:
000000000000a053         mov        eax, 0xffffffff                             ; CODE XREF=hash_insert_if_absent+420, hash_insert_if_absent+450
000000000000a058         jmp        loc_9e8c
000000000000a05d         align      32

                     loc_a060:
000000000000a060         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+345
000000000000a063         pxor       xmm0, xmm0
000000000000a067         shr        rcx, 0x1
000000000000a06a         and        eax, 0x1
000000000000a06d         or         rcx, rax
000000000000a070         cvtsi2ss   xmm0, rcx
000000000000a075         addss      xmm0, xmm0
000000000000a079         jmp        loc_9fa8
000000000000a07e         align      128

                     loc_a080:
000000000000a080         mov        rcx, rax                                    ; CODE XREF=hash_insert_if_absent+367
000000000000a083         pxor       xmm1, xmm1
000000000000a087         shr        rcx, 0x1
000000000000a08a         and        eax, 0x1
000000000000a08d         or         rcx, rax
000000000000a090         cvtsi2ss   xmm1, rcx
000000000000a095         addss      xmm1, xmm1
000000000000a099         jmp        loc_9fbe
000000000000a09e         align      32

                     loc_a0a0:
000000000000a0a0         subss      xmm0, dword [float_c310]                    ; float_c310, CODE XREF=hash_insert_if_absent+429
000000000000a0a8         movabs     rax, 0x8000000000000000
000000000000a0b2         cvttss2si  rsi, xmm0
000000000000a0b7         xor        rsi, rax
000000000000a0ba         jmp        loc_9ff8

                     loc_a0bf:
000000000000a0bf         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert_if_absent+90
                        ; endp
000000000000a0c4         align      16                                          ; End of unwind block (FDE at 0xdf44)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_10: int64_t, -16
        ;    var_18: int64_t, -24


                     hash_insert:
000000000000a0d0         push       rbx                                         ; Begin of unwind block (FDE at 0xdf80), CODE XREF=filesystem_type+255, enter_dir.isra.10+70
000000000000a0d1         mov        rbx, rsi
000000000000a0d4         sub        rsp, 0x10
000000000000a0d8         mov        rdx, rsp
000000000000a0db         mov        rax, qword [fs:0x28]
000000000000a0e4         mov        qword [rsp+0x18+var_10], rax
000000000000a0e9         xor        eax, eax
000000000000a0eb         call       hash_insert_if_absent                       ; hash_insert_if_absent
000000000000a0f0         cmp        eax, 0xffffffff
000000000000a0f3         je         loc_a120

000000000000a0f5         test       eax, eax
000000000000a0f7         jne        loc_a0fd

000000000000a0f9         mov        rbx, qword [rsp+0x18+var_18]

                     loc_a0fd:
000000000000a0fd         mov        rcx, qword [rsp+0x18+var_10]                ; CODE XREF=hash_insert+39, hash_insert+82
000000000000a102         xor        rcx, qword [fs:0x28]
000000000000a10b         mov        rax, rbx
000000000000a10e         jne        loc_a124

000000000000a110         add        rsp, 0x10
000000000000a114         pop        rbx
000000000000a115         ret
                        ; endp
000000000000a116         align      32

                     loc_a120:
000000000000a120         xor        ebx, ebx                                    ; CODE XREF=hash_insert+35
000000000000a122         jmp        loc_a0fd

                     loc_a124:
000000000000a124         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_insert+62
                        ; endp
000000000000a129         align      16                                          ; End of unwind block (FDE at 0xdf80)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40


                     hash_delete:
000000000000a130         push       r12                                         ; Begin of unwind block (FDE at 0xdfa4), CODE XREF=leave_dir.isra.12+122
000000000000a132         push       rbp
000000000000a133         mov        ecx, 0x1
000000000000a138         push       rbx
000000000000a139         mov        rbx, rdi
000000000000a13c         sub        rsp, 0x10
000000000000a140         mov        rdx, rsp
000000000000a143         mov        rax, qword [fs:0x28]
000000000000a14c         mov        qword [rsp+0x28+var_20], rax
000000000000a151         xor        eax, eax
000000000000a153         call       hash_find_entry                             ; hash_find_entry
000000000000a158         test       rax, rax
000000000000a15b         mov        rbp, rax
000000000000a15e         je         loc_a16f

000000000000a160         mov        rax, qword [rsp+0x28+var_28]
000000000000a164         sub        qword [rbx+0x20], 0x1
000000000000a169         cmp        qword [rax], 0x0
000000000000a16d         je         loc_a190

                     loc_a16f:
000000000000a16f         mov        rcx, qword [rsp+0x28+var_20]                ; CODE XREF=hash_delete+46, hash_delete+159, hash_delete+229, hash_delete+278, hash_delete+321
000000000000a174         xor        rcx, qword [fs:0x28]
000000000000a17d         mov        rax, rbp
000000000000a180         jne        loc_a32e

000000000000a186         add        rsp, 0x10
000000000000a18a         pop        rbx
000000000000a18b         pop        rbp
000000000000a18c         pop        r12
000000000000a18e         ret
                        ; endp
000000000000a18f         align      16

                     loc_a190:
000000000000a190         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+61
000000000000a194         sub        rax, 0x1
000000000000a198         test       rax, rax
000000000000a19b         mov        qword [rbx+0x18], rax
000000000000a19f         js         loc_a2a0

000000000000a1a5         pxor       xmm0, xmm0
000000000000a1a9         cvtsi2ss   xmm0, rax

                     loc_a1ae:
000000000000a1ae         mov        rax, qword [rbx+0x10]                       ; CODE XREF=hash_delete+393
000000000000a1b2         mov        rdx, qword [rbx+0x28]
000000000000a1b6         test       rax, rax
000000000000a1b9         js         loc_a280

000000000000a1bf         pxor       xmm1, xmm1
000000000000a1c3         cvtsi2ss   xmm1, rax

                     loc_a1c8:
000000000000a1c8         mulss      xmm1, dword [rdx]                           ; CODE XREF=hash_delete+361
000000000000a1cc         ucomiss    xmm1, xmm0
000000000000a1cf         jbe        loc_a16f

000000000000a1d1         lea        rdi, qword [rbx+0x28]
000000000000a1d5         call       check_tuning.isra.0                         ; check_tuning.isra.0
000000000000a1da         mov        rax, qword [rbx+0x10]
000000000000a1de         mov        rdx, qword [rbx+0x28]
000000000000a1e2         test       rax, rax
000000000000a1e5         js         loc_a310

000000000000a1eb         pxor       xmm0, xmm0
000000000000a1ef         cvtsi2ss   xmm0, rax

                     loc_a1f4:
000000000000a1f4         mov        rax, qword [rbx+0x18]                       ; CODE XREF=hash_delete+505
000000000000a1f8         test       rax, rax
000000000000a1fb         js         loc_a2f0

000000000000a201         pxor       xmm1, xmm1
000000000000a205         cvtsi2ss   xmm1, rax

                     loc_a20a:
000000000000a20a         movss      xmm2, dword [rdx]                           ; CODE XREF=hash_delete+473
000000000000a20e         mulss      xmm2, xmm0
000000000000a212         ucomiss    xmm2, xmm1
000000000000a215         jbe        loc_a16f

000000000000a21b         cmp        byte [rdx+0x10], 0x0
000000000000a21f         mulss      xmm0, dword [rdx+4]
000000000000a224         je         loc_a2e0

                     loc_a22a:
000000000000a22a         ucomiss    xmm0, dword [float_c310]                    ; float_c310, CODE XREF=hash_delete+437
000000000000a231         jae        loc_a2c0

000000000000a237         cvttss2si  rsi, xmm0

                     loc_a23c:
000000000000a23c         mov        rdi, rbx                                    ; CODE XREF=hash_delete+426
000000000000a23f         call       hash_rehash                                 ; hash_rehash
000000000000a244         test       al, al
000000000000a246         jne        loc_a16f

000000000000a24c         mov        rdi, qword [rbx+0x48]
000000000000a250         test       rdi, rdi
000000000000a253         je         loc_a269

000000000000a255         nop        dword [rax]

                     loc_a258:
000000000000a258         mov        r12, qword [rdi+8]                          ; CODE XREF=hash_delete+311
000000000000a25c         call       sub_1da0                                    ; sub_1da0
000000000000a261         test       r12, r12
000000000000a264         mov        rdi, r12
000000000000a267         jne        loc_a258

                     loc_a269:
000000000000a269         mov        qword [rbx+0x48], 0x0                       ; CODE XREF=hash_delete+291
000000000000a271         jmp        loc_a16f
000000000000a276         align      128

                     loc_a280:
000000000000a280         mov        rcx, rax                                    ; CODE XREF=hash_delete+137
000000000000a283         pxor       xmm1, xmm1
000000000000a287         shr        rcx, 0x1
000000000000a28a         and        eax, 0x1
000000000000a28d         or         rcx, rax
000000000000a290         cvtsi2ss   xmm1, rcx
000000000000a295         addss      xmm1, xmm1
000000000000a299         jmp        loc_a1c8
000000000000a29e         align      32

                     loc_a2a0:
000000000000a2a0         mov        rdx, rax                                    ; CODE XREF=hash_delete+111
000000000000a2a3         pxor       xmm0, xmm0
000000000000a2a7         shr        rdx, 0x1
000000000000a2aa         and        eax, 0x1
000000000000a2ad         or         rdx, rax
000000000000a2b0         cvtsi2ss   xmm0, rdx
000000000000a2b5         addss      xmm0, xmm0
000000000000a2b9         jmp        loc_a1ae
000000000000a2be         align      64

                     loc_a2c0:
000000000000a2c0         subss      xmm0, dword [float_c310]                    ; float_c310, CODE XREF=hash_delete+257
000000000000a2c8         movabs     rax, 0x8000000000000000
000000000000a2d2         cvttss2si  rsi, xmm0
000000000000a2d7         xor        rsi, rax
000000000000a2da         jmp        loc_a23c
000000000000a2df         align      32

                     loc_a2e0:
000000000000a2e0         mulss      xmm0, dword [rdx+8]                         ; CODE XREF=hash_delete+244
000000000000a2e5         jmp        loc_a22a
000000000000a2ea         align      16

                     loc_a2f0:
000000000000a2f0         mov        rcx, rax                                    ; CODE XREF=hash_delete+203
000000000000a2f3         pxor       xmm1, xmm1
000000000000a2f7         shr        rcx, 0x1
000000000000a2fa         and        eax, 0x1
000000000000a2fd         or         rcx, rax
000000000000a300         cvtsi2ss   xmm1, rcx
000000000000a305         addss      xmm1, xmm1
000000000000a309         jmp        loc_a20a
000000000000a30e         align      16

                     loc_a310:
000000000000a310         mov        rcx, rax                                    ; CODE XREF=hash_delete+181
000000000000a313         pxor       xmm0, xmm0
000000000000a317         shr        rcx, 0x1
000000000000a31a         and        eax, 0x1
000000000000a31d         or         rcx, rax
000000000000a320         cvtsi2ss   xmm0, rcx
000000000000a325         addss      xmm0, xmm0
000000000000a329         jmp        loc_a1f4

                     loc_a32e:
000000000000a32e         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=hash_delete+80
                        ; endp
000000000000a333         align      64                                          ; End of unwind block (FDE at 0xdfa4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_init:
000000000000a340         mov        byte [rdi+0x1c], 0x1                        ; Begin of unwind block (FDE at 0xdfdc), CODE XREF=rpl_fts_open+681
000000000000a344         mov        qword [rdi+0x14], 0x0
000000000000a34c         mov        dword [rdi], esi
000000000000a34e         mov        dword [rdi+4], esi
000000000000a351         mov        dword [rdi+8], esi
000000000000a354         mov        dword [rdi+0xc], esi
000000000000a357         mov        dword [rdi+0x10], esi
000000000000a35a         ret
                        ; endp
000000000000a35b         align      32                                          ; End of unwind block (FDE at 0xdfdc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_empty:
000000000000a360         movzx      eax, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0xdff0), CODE XREF=fd_ring_clear+31, fts_safe_changedir+455
000000000000a364         ret
                        ; endp
000000000000a365         align      16                                          ; End of unwind block (FDE at 0xdff0)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_push:
000000000000a370         movzx      edx, byte [rdi+0x1c]                        ; Begin of unwind block (FDE at 0xe004), CODE XREF=cwd_advance_fd+52
000000000000a374         mov        ecx, dword [rdi+0x14]
000000000000a377         xor        edx, 0x1
000000000000a37a         movzx      edx, dl
000000000000a37d         add        ecx, edx
000000000000a37f         and        ecx, 0x3
000000000000a382         mov        eax, ecx
000000000000a384         lea        r8, qword [rdi+rax*4]
000000000000a388         mov        eax, dword [r8]
000000000000a38b         mov        dword [r8], esi
000000000000a38e         mov        esi, dword [rdi+0x18]
000000000000a391         mov        dword [rdi+0x14], ecx
000000000000a394         cmp        esi, ecx
000000000000a396         jne        loc_a3a0

000000000000a398         add        edx, esi
000000000000a39a         and        edx, 0x3
000000000000a39d         mov        dword [rdi+0x18], edx

                     loc_a3a0:
000000000000a3a0         mov        byte [rdi+0x1c], 0x0                        ; CODE XREF=i_ring_push+38
000000000000a3a4         ret
                        ; endp
000000000000a3a5         align      16                                          ; End of unwind block (FDE at 0xe004)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     i_ring_pop:
000000000000a3b0         cmp        byte [rdi+0x1c], 0x0                        ; Begin of unwind block (FDE at 0xe018), CODE XREF=fd_ring_clear+19, fts_safe_changedir+475
000000000000a3b4         jne        loc_a3e5

000000000000a3b6         mov        eax, dword [rdi+0x14]
000000000000a3b9         mov        esi, dword [rdi+0x10]
000000000000a3bc         lea        rcx, qword [rdi+rax*4]
000000000000a3c0         mov        rdx, rax
000000000000a3c3         mov        eax, dword [rcx]
000000000000a3c5         mov        dword [rcx], esi
000000000000a3c7         cmp        edx, dword [rdi+0x18]
000000000000a3ca         je         loc_a3e0

000000000000a3cc         add        edx, 0x3
000000000000a3cf         and        edx, 0x3
000000000000a3d2         mov        dword [rdi+0x14], edx
000000000000a3d5         ret
                        ; endp
000000000000a3d6         align      32

                     loc_a3e0:
000000000000a3e0         mov        byte [rdi+0x1c], 0x1                        ; CODE XREF=i_ring_pop+26
000000000000a3e4         ret
                        ; endp

                     loc_a3e5:
000000000000a3e5         sub        rsp, 0x8                                    ; CODE XREF=i_ring_pop+4
000000000000a3e9         call       j_abort                                     ; abort
                        ; endp
000000000000a3ee         align      16                                          ; End of unwind block (FDE at 0xe018)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     locale_charset:
000000000000a3f0         sub        rsp, 0x8                                    ; Begin of unwind block (FDE at 0xe02c), CODE XREF=gettext_quote.part.1+11
000000000000a3f4         mov        edi, 0xe                                    ; argument "__item" for method j_nl_langinfo
000000000000a3f9         call       j_nl_langinfo                               ; nl_langinfo
000000000000a3fe         test       rax, rax
000000000000a401         je         loc_a420

000000000000a403         cmp        byte [rax], 0x0
000000000000a406         lea        rdx, qword [aAscii]                         ; "ASCII"
000000000000a40d         cmove      rax, rdx
000000000000a411         add        rsp, 0x8
000000000000a415         ret
                        ; endp
000000000000a416         align      32

                     loc_a420:
000000000000a420         lea        rax, qword [aAscii]                         ; "ASCII", CODE XREF=locale_charset+17
000000000000a427         add        rsp, 0x8
000000000000a42b         ret
                        ; endp
000000000000a42c         align      16                                          ; End of unwind block (FDE at 0xe02c)

                     openat_safer:
000000000000a430         sub        rsp, 0x58                                   ; Begin of unwind block (FDE at 0xe04c), CODE XREF=diropen.isra.6+53, opendirat+21
000000000000a434         mov        qword [rsp+0x58+var_20], rcx
000000000000a439         xor        ecx, ecx
000000000000a43b         mov        rax, qword [fs:0x28]
000000000000a444         mov        qword [rsp+0x58+var_40], rax
000000000000a449         xor        eax, eax
000000000000a44b         test       dl, 0x40
000000000000a44e         jne        loc_a478

                     loc_a450:
000000000000a450         xor        eax, eax                                    ; CODE XREF=openat_safer+103
000000000000a452         call       j_openat                                    ; openat
000000000000a457         mov        edi, eax
000000000000a459         call       fd_safer                                    ; fd_safer
000000000000a45e         mov        rsi, qword [rsp+0x58+var_40]
000000000000a463         xor        rsi, qword [fs:0x28]
000000000000a46c         jne        loc_a499

000000000000a46e         add        rsp, 0x58
000000000000a472         ret
                        ; endp
000000000000a473         align      8

                     loc_a478:
000000000000a478         lea        rax, qword [rsp+0x58+arg_0]                 ; CODE XREF=openat_safer+30
000000000000a47d         mov        dword [rsp+0x58+var_58], 0x18
000000000000a484         mov        ecx, dword [rsp+0x58+var_20]
000000000000a488         mov        qword [rsp+0x58+var_50], rax
000000000000a48d         lea        rax, qword [rsp+0x58+var_38]
000000000000a492         mov        qword [rsp+0x58+var_48], rax
000000000000a497         jmp        loc_a450

                     loc_a499:
000000000000a499         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=openat_safer+60
                        ; endp
000000000000a49e         align      32                                          ; End of unwind block (FDE at 0xe04c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     opendirat:
000000000000a4a0         push       r13                                         ; Begin of unwind block (FDE at 0xe06c), CODE XREF=fts_build+1189
000000000000a4a2         push       r12
000000000000a4a4         or         edx, 0x90900
000000000000a4aa         push       rbp
000000000000a4ab         push       rbx
000000000000a4ac         xor        eax, eax
000000000000a4ae         mov        r12, rcx
000000000000a4b1         sub        rsp, 0x8
000000000000a4b5         call       openat_safer                                ; openat_safer
000000000000a4ba         test       eax, eax
000000000000a4bc         js         loc_a510

000000000000a4be         mov        edi, eax                                    ; argument "__fd" for method j_fdopendir
000000000000a4c0         mov        ebx, eax
000000000000a4c2         call       j_fdopendir                                 ; fdopendir
000000000000a4c7         test       rax, rax
000000000000a4ca         mov        rbp, rax
000000000000a4cd         je         loc_a4e8

000000000000a4cf         mov        dword [r12], ebx
000000000000a4d3         add        rsp, 0x8
000000000000a4d7         mov        rax, rbp
000000000000a4da         pop        rbx
000000000000a4db         pop        rbp
000000000000a4dc         pop        r12
000000000000a4de         pop        r13
000000000000a4e0         ret
                        ; endp
000000000000a4e1         align      8

                     loc_a4e8:
000000000000a4e8         call       j___errno_location                          ; __errno_location, CODE XREF=opendirat+45
000000000000a4ed         mov        r13d, dword [rax]
000000000000a4f0         mov        r12, rax
000000000000a4f3         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000a4f5         call       j_close                                     ; close
000000000000a4fa         mov        rax, rbp
000000000000a4fd         mov        dword [r12], r13d
000000000000a501         add        rsp, 0x8
000000000000a505         pop        rbx
000000000000a506         pop        rbp
000000000000a507         pop        r12
000000000000a509         pop        r13
000000000000a50b         ret
                        ; endp
000000000000a50c         align      16

                     loc_a510:
000000000000a510         add        rsp, 0x8                                    ; CODE XREF=opendirat+28
000000000000a514         xor        ebp, ebp
000000000000a516         pop        rbx
000000000000a517         mov        rax, rbp
000000000000a51a         pop        rbp
000000000000a51b         pop        r12
000000000000a51d         pop        r13
000000000000a51f         ret
                        ; endp


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     fd_safer:
000000000000a520         push       r13                                         ; End of unwind block (FDE at 0xe06c), Begin of unwind block (FDE at 0xe0cc), CODE XREF=open_safer+42, openat_safer+41
000000000000a522         push       r12
000000000000a524         push       rbp
000000000000a525         push       rbx
000000000000a526         mov        ebx, edi
000000000000a528         sub        rsp, 0x8
000000000000a52c         cmp        edi, 0x2
000000000000a52f         ja         loc_a552

000000000000a531         call       dup_safer                                   ; dup_safer
000000000000a536         mov        r12d, eax
000000000000a539         call       j___errno_location                          ; __errno_location
000000000000a53e         mov        r13d, dword [rax]
000000000000a541         mov        rbp, rax
000000000000a544         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000a546         call       j_close                                     ; close
000000000000a54b         mov        ebx, r12d
000000000000a54e         mov        dword [rbp], r13d

                     loc_a552:
000000000000a552         add        rsp, 0x8                                    ; CODE XREF=fd_safer+15
000000000000a556         mov        eax, ebx
000000000000a558         pop        rbx
000000000000a559         pop        rbp
000000000000a55a         pop        r12
000000000000a55c         pop        r13
000000000000a55e         ret
                        ; endp
000000000000a55f         align      32                                          ; End of unwind block (FDE at 0xe0cc)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     rpl_fclose:
000000000000a560         push       r12                                         ; Begin of unwind block (FDE at 0xe104), CODE XREF=close_stream+21
000000000000a562         push       rbp
000000000000a563         push       rbx
000000000000a564         mov        rbx, rdi
000000000000a567         call       j_fileno                                    ; fileno
000000000000a56c         test       eax, eax
000000000000a56e         mov        rdi, rbx
000000000000a571         js         loc_a5c7

000000000000a573         call       j___freading                                ; __freading
000000000000a578         test       eax, eax
000000000000a57a         jne        loc_a5a8

                     loc_a57c:
000000000000a57c         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+98
000000000000a57f         call       rpl_fflush                                  ; rpl_fflush
000000000000a584         test       eax, eax
000000000000a586         je         loc_a5c4

000000000000a588         call       j___errno_location                          ; __errno_location
000000000000a58d         mov        r12d, dword [rax]
000000000000a590         mov        rdi, rbx                                    ; argument "__stream" for method j_fclose
000000000000a593         mov        rbp, rax
000000000000a596         call       j_fclose                                    ; fclose
000000000000a59b         test       r12d, r12d
000000000000a59e         jne        loc_a5d0

                     loc_a5a0:
000000000000a5a0         pop        rbx                                         ; CODE XREF=rpl_fclose+121
000000000000a5a1         pop        rbp
000000000000a5a2         pop        r12
000000000000a5a4         ret
                        ; endp
000000000000a5a5         align      8

                     loc_a5a8:
000000000000a5a8         mov        rdi, rbx                                    ; argument "__stream" for method j_fileno, CODE XREF=rpl_fclose+26
000000000000a5ab         call       j_fileno                                    ; fileno
000000000000a5b0         xor        esi, esi                                    ; argument "__offset" for method j_lseek
000000000000a5b2         mov        edx, 0x1                                    ; argument "__whence" for method j_lseek
000000000000a5b7         mov        edi, eax                                    ; argument "__fd" for method j_lseek
000000000000a5b9         call       j_lseek                                     ; lseek
000000000000a5be         cmp        rax, 0xffffffffffffffff
000000000000a5c2         jne        loc_a57c

                     loc_a5c4:
000000000000a5c4         mov        rdi, rbx                                    ; CODE XREF=rpl_fclose+38

                     loc_a5c7:
000000000000a5c7         pop        rbx                                         ; CODE XREF=rpl_fclose+17
000000000000a5c8         pop        rbp
000000000000a5c9         pop        r12
000000000000a5cb         jmp        j_fclose                                    ; fclose
                        ; endp

                     loc_a5d0:
000000000000a5d0         mov        dword [rbp], r12d                           ; CODE XREF=rpl_fclose+62
000000000000a5d4         mov        eax, 0xffffffff
000000000000a5d9         jmp        loc_a5a0
000000000000a5db         align      32                                          ; End of unwind block (FDE at 0xe104)

                     rpl_fcntl:
000000000000a5e0         push       r12                                         ; Begin of unwind block (FDE at 0xe13c), CODE XREF=fts_build+2314, dup_safer+9
000000000000a5e2         push       rbp
000000000000a5e3         mov        ebp, edi
000000000000a5e5         push       rbx
000000000000a5e6         sub        rsp, 0x50
000000000000a5ea         mov        rax, qword [fs:0x28]
000000000000a5f3         mov        qword [rsp+0x68+var_50], rax
000000000000a5f8         xor        eax, eax
000000000000a5fa         lea        rax, qword [rsp+0x68+arg_0]
000000000000a5ff         test       esi, esi
000000000000a601         mov        qword [rsp+0x68+var_38], rdx
000000000000a606         mov        qword [rsp+0x68+var_30], rcx
000000000000a60b         mov        qword [rsp+0x68+var_28], r8
000000000000a610         mov        qword [rsp+0x68+var_60], rax
000000000000a615         lea        rax, qword [rsp+0x68+var_48]
000000000000a61a         mov        qword [rsp+0x68+var_20], r9
000000000000a61f         mov        dword [rsp+0x68+var_68], 0x10
000000000000a626         mov        qword [rsp+0x68+var_58], rax
000000000000a62b         je         loc_a832

000000000000a631         cmp        esi, 0x406
000000000000a637         jne        loc_a680

000000000000a639         mov        rax, qword [rsp+0x68+var_58]
000000000000a63e         cmp        dword [have_dupfd_cloexec.3326], 0x0        ; have_dupfd_cloexec.3326
000000000000a645         mov        dword [rsp+0x68+var_68], 0x18
000000000000a64c         mov        r12d, dword [rax+0x10]
000000000000a650         mov        edx, r12d
000000000000a653         js         loc_a783

000000000000a659         xor        eax, eax
000000000000a65b         mov        esi, 0x406                                  ; argument "__cmd" for method j_fcntl
000000000000a660         call       j_fcntl                                     ; fcntl
000000000000a665         test       eax, eax
000000000000a667         mov        ebx, eax
000000000000a669         js         loc_a7f8

                     loc_a66f:
000000000000a66f         mov        dword [have_dupfd_cloexec.3326], 0x1        ; have_dupfd_cloexec.3326, CODE XREF=rpl_fcntl+544
000000000000a679         jmp        loc_a6c0
000000000000a67b         align      128

                     loc_a680:
000000000000a680         cmp        esi, 0xb                                    ; CODE XREF=rpl_fcntl+87
000000000000a683         je         loc_a6b0

000000000000a685         jg         loc_a6e0

000000000000a687         cmp        esi, 0x4
000000000000a68a         je         loc_a760

000000000000a690         jg         loc_a750

000000000000a696         cmp        esi, 0x2
000000000000a699         je         loc_a760

000000000000a69f         jg         loc_a6b0

000000000000a6a1         cmp        esi, 0x1
000000000000a6a4         jne        loc_a708

000000000000a6a6         nop        word [cs:rax+rax]

                     loc_a6b0:
000000000000a6b0         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl, CODE XREF=rpl_fcntl+163, rpl_fcntl+191, rpl_fcntl+278, rpl_fcntl+344, rpl_fcntl+358, rpl_fcntl+371
000000000000a6b2         xor        eax, eax
000000000000a6b4         call       j_fcntl                                     ; fcntl
000000000000a6b9         mov        ebx, eax
000000000000a6bb         nop        dword [rax+rax]

                     loc_a6c0:
000000000000a6c0         mov        rcx, qword [rsp+0x68+var_50]                ; CODE XREF=rpl_fcntl+153, rpl_fcntl+327, rpl_fcntl+414, rpl_fcntl+432, rpl_fcntl+445, rpl_fcntl+491, rpl_fcntl+524, rpl_fcntl+568, rpl_fcntl+613
000000000000a6c5         xor        rcx, qword [fs:0x28]
000000000000a6ce         mov        eax, ebx
000000000000a6d0         jne        loc_a82d

000000000000a6d6         add        rsp, 0x50
000000000000a6da         pop        rbx
000000000000a6db         pop        rbp
000000000000a6dc         pop        r12
000000000000a6de         ret
                        ; endp
000000000000a6df         align      32

                     loc_a6e0:
000000000000a6e0         cmp        esi, 0x407                                  ; CODE XREF=rpl_fcntl+165
000000000000a6e6         jg         loc_a730

000000000000a6e8         cmp        esi, 0x406
000000000000a6ee         jge        loc_a760

000000000000a6f0         cmp        esi, 0x401
000000000000a6f6         je         loc_a6b0

000000000000a6f8         cmp        esi, 0x402
000000000000a6fe         je         loc_a760

000000000000a700         cmp        esi, 0x400
000000000000a706         je         loc_a760

                     loc_a708:
000000000000a708         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+196, rpl_fcntl+356, rpl_fcntl+382
000000000000a70b         cmp        eax, 0x2f
000000000000a70e         ja         loc_a84a

000000000000a714         add        rax, qword [rsp+0x68+var_58]

                     loc_a719:
000000000000a719         mov        rdx, qword [rax]                            ; CODE XREF=rpl_fcntl+623
000000000000a71c         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000a71e         xor        eax, eax
000000000000a720         call       j_fcntl                                     ; fcntl
000000000000a725         mov        ebx, eax
000000000000a727         jmp        loc_a6c0
000000000000a729         align      16

                     loc_a730:
000000000000a730         cmp        esi, 0x409                                  ; CODE XREF=rpl_fcntl+262
000000000000a736         je         loc_a760

000000000000a738         jl         loc_a6b0

000000000000a73e         cmp        esi, 0x40a
000000000000a744         jne        loc_a708

000000000000a746         jmp        loc_a6b0
000000000000a74b         align      16

                     loc_a750:
000000000000a750         cmp        esi, 0x9                                    ; CODE XREF=rpl_fcntl+176
000000000000a753         je         loc_a6b0

000000000000a759         jg         loc_a760

000000000000a75b         cmp        esi, 0x8
000000000000a75e         jne        loc_a708

                     loc_a760:
000000000000a760         mov        eax, dword [rsp+0x68+var_68]                ; CODE XREF=rpl_fcntl+170, rpl_fcntl+185, rpl_fcntl+270, rpl_fcntl+286, rpl_fcntl+294, rpl_fcntl+342, rpl_fcntl+377
000000000000a763         cmp        eax, 0x2f
000000000000a766         ja         loc_a854

000000000000a76c         add        rax, qword [rsp+0x68+var_58]

                     loc_a771:
000000000000a771         mov        edx, dword [rax]                            ; CODE XREF=rpl_fcntl+633
000000000000a773         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000a775         xor        eax, eax
000000000000a777         call       j_fcntl                                     ; fcntl
000000000000a77c         mov        ebx, eax
000000000000a77e         jmp        loc_a6c0

                     loc_a783:
000000000000a783         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl, CODE XREF=rpl_fcntl+115
000000000000a785         xor        eax, eax
000000000000a787         call       j_fcntl                                     ; fcntl
000000000000a78c         test       eax, eax
000000000000a78e         mov        ebx, eax
000000000000a790         js         loc_a6c0

000000000000a796         cmp        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000a79d         jne        loc_a6c0

                     loc_a7a3:
000000000000a7a3         xor        eax, eax                                    ; CODE XREF=rpl_fcntl+584
000000000000a7a5         mov        esi, 0x1                                    ; argument "__cmd" for method j_fcntl
000000000000a7aa         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000a7ac         call       j_fcntl                                     ; fcntl
000000000000a7b1         test       eax, eax
000000000000a7b3         js         loc_a7d1

000000000000a7b5         or         eax, 0x1
000000000000a7b8         mov        esi, 0x2                                    ; argument "__cmd" for method j_fcntl
000000000000a7bd         mov        edi, ebx                                    ; argument "__fd" for method j_fcntl
000000000000a7bf         mov        edx, eax
000000000000a7c1         xor        eax, eax
000000000000a7c3         call       j_fcntl                                     ; fcntl
000000000000a7c8         cmp        eax, 0xffffffff
000000000000a7cb         jne        loc_a6c0

                     loc_a7d1:
000000000000a7d1         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+467
000000000000a7d6         mov        r12d, dword [rax]
000000000000a7d9         mov        rbp, rax
000000000000a7dc         mov        edi, ebx                                    ; argument "__fd" for method j_close
000000000000a7de         call       j_close                                     ; close
000000000000a7e3         mov        ebx, 0xffffffff
000000000000a7e8         mov        dword [rbp], r12d
000000000000a7ec         jmp        loc_a6c0
000000000000a7f1         align      8

                     loc_a7f8:
000000000000a7f8         call       j___errno_location                          ; __errno_location, CODE XREF=rpl_fcntl+137
000000000000a7fd         cmp        dword [rax], 0x16
000000000000a800         jne        loc_a66f

000000000000a806         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000a808         xor        eax, eax
000000000000a80a         mov        edx, r12d
000000000000a80d         mov        edi, ebp                                    ; argument "__fd" for method j_fcntl
000000000000a80f         call       j_fcntl                                     ; fcntl
000000000000a814         test       eax, eax
000000000000a816         mov        ebx, eax
000000000000a818         js         loc_a6c0

000000000000a81e         mov        dword [have_dupfd_cloexec.3326], 0xffffffff ; have_dupfd_cloexec.3326
000000000000a828         jmp        loc_a7a3

                     loc_a82d:
000000000000a82d         call       j___stack_chk_fail                          ; __stack_chk_fail, CODE XREF=rpl_fcntl+240
                        ; endp

                     loc_a832:
000000000000a832         mov        rax, qword [rsp+0x68+var_58]                ; CODE XREF=rpl_fcntl+75
000000000000a837         xor        esi, esi                                    ; argument "__cmd" for method j_fcntl
000000000000a839         mov        edx, dword [rax+0x10]
000000000000a83c         xor        eax, eax
000000000000a83e         call       j_fcntl                                     ; fcntl
000000000000a843         mov        ebx, eax
000000000000a845         jmp        loc_a6c0

                     loc_a84a:
000000000000a84a         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+302
000000000000a84f         jmp        loc_a719

                     loc_a854:
000000000000a854         mov        rax, qword [rsp+0x68+var_60]                ; CODE XREF=rpl_fcntl+390
000000000000a859         jmp        loc_a771
000000000000a85e         align      32                                          ; End of unwind block (FDE at 0xe13c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================

        ; Variables:
        ;    arg_0: int, 8
        ;    var_20: int64_t, -32
        ;    var_28: int64_t, -40
        ;    var_30: int64_t, -48
        ;    var_38: int64_t, -56
        ;    var_48: int8_t, -72
        ;    var_50: int64_t, -80
        ;    var_58: int64_t, -88
        ;    var_60: int64_t, -96
        ;    var_68: int32_t, -104


                     dup_safer:
000000000000a860         mov        edx, 0x3                                    ; Begin of unwind block (FDE at 0xe174), CODE XREF=fd_safer+17
000000000000a865         xor        esi, esi
000000000000a867         xor        eax, eax
000000000000a869         jmp        rpl_fcntl                                   ; rpl_fcntl
000000000000a86e         align      16                                          ; End of unwind block (FDE at 0xe174)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_init:
000000000000a870         push       r15                                         ; Begin of unwind block (FDE at 0xe18c), DATA XREF=_start+22
000000000000a872         push       r14
000000000000a874         mov        r15, rdx
000000000000a877         push       r13
000000000000a879         push       r12
000000000000a87b         lea        r12, qword [__frame_dummy_init_array_entry] ; __frame_dummy_init_array_entry
000000000000a882         push       rbp
000000000000a883         lea        rbp, qword [__do_global_dtors_aux_fini_array_entry] ; __do_global_dtors_aux_fini_array_entry
000000000000a88a         push       rbx
000000000000a88b         mov        r13d, edi
000000000000a88e         mov        r14, rsi
000000000000a891         sub        rbp, r12
000000000000a894         sub        rsp, 0x8
000000000000a898         sar        rbp, 0x3
000000000000a89c         call       _init                                       ; _init
000000000000a8a1         test       rbp, rbp
000000000000a8a4         je         loc_a8c6

000000000000a8a6         xor        ebx, ebx
000000000000a8a8         nop        dword [rax+rax]

                     loc_a8b0:
000000000000a8b0         mov        rdx, r15                                    ; CODE XREF=__libc_csu_init+84
000000000000a8b3         mov        rsi, r14
000000000000a8b6         mov        edi, r13d
000000000000a8b9         call       qword [r12+rbx*8]
000000000000a8bd         add        rbx, 0x1
000000000000a8c1         cmp        rbp, rbx
000000000000a8c4         jne        loc_a8b0

                     loc_a8c6:
000000000000a8c6         add        rsp, 0x8                                    ; CODE XREF=__libc_csu_init+52
000000000000a8ca         pop        rbx
000000000000a8cb         pop        rbp
000000000000a8cc         pop        r12
000000000000a8ce         pop        r13
000000000000a8d0         pop        r14
000000000000a8d2         pop        r15
000000000000a8d4         ret
                        ; endp
000000000000a8d5         align      32                                          ; End of unwind block (FDE at 0xe18c)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     __libc_csu_fini:
000000000000a8e0         ret                                                    ; Begin of unwind block (FDE at 0xe1d4), DATA XREF=_start+15
                        ; endp
000000000000a8e2         align      16                                          ; End of unwind block (FDE at 0xe1d4)


        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     atexit:
000000000000a8f0         mov        rdx, qword [__dso_handle]                   ; Begin of unwind block (FDE at 0xe1ec), __dso_handle, CODE XREF=main+115
000000000000a8f7         xor        esi, esi
000000000000a8f9         jmp        j___cxa_atexit                              ; __cxa_atexit
                        ; endp
000000000000a8fe         db  0x00 ; '.'                                         ; End of unwind block (FDE at 0xe1ec)
000000000000a8ff         db  0x00 ; '.'


        ; Section .fini
        ; Range: [0xa900; 0xa909[ (9 bytes)
        ; File offset : [43264; 43273[ (9 bytes)
        ; Flags: 0x6
        ;   SHT_PROGBITS
        ;   SHF_ALLOC
        ;   SHF_EXECINSTR



        ; ================ B E G I N N I N G   O F   P R O C E D U R E ================


                     _fini:
000000000000a900         sub        rsp, 0x8
000000000000a904         add        rsp, 0x8
000000000000a908         ret
                        ; endp
000000000000a909         db  0x00 ; '.'
000000000000a90a         db  0x00 ; '.'
000000000000a90b         db  0x00 ; '.'
000000000000a90c         db  0x00 ; '.'
000000000000a90d         db  0x00 ; '.'
000000000000a90e         db  0x00 ; '.'
000000000000a90f         db  0x00 ; '.'
000000000000a910         db  0x00 ; '.'
000000000000a911         db  0x00 ; '.'
000000000000a912         db  0x00 ; '.'
000000000000a913         db  0x00 ; '.'
000000000000a914         db  0x00 ; '.'
000000000000a915         db  0x00 ; '.'
000000000000a916         db  0x00 ; '.'
000000000000a917         db  0x00 ; '.'
000000000000a918         db  0x00 ; '.'
000000000000a919         db  0x00 ; '.'
000000000000a91a         db  0x00 ; '.'
000000000000a91b         db  0x00 ; '.'
000000000000a91c         db  0x00 ; '.'
000000000000a91d         db  0x00 ; '.'
000000000000a91e         db  0x00 ; '.'
000000000000a91f         db  0x00 ; '.'


        ; Section .rodata
        ; Range: [0xa920; 0xc326[ (6662 bytes)
        ; File offset : [43296; 49958[ (6662 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

                     _IO_stdin_used:
000000000000a920         db  0x01 ; '.'
000000000000a921         db  0x00 ; '.'
000000000000a922         db  0x02 ; '.'
000000000000a923         db  0x00 ; '.'
000000000000a924         db  0x72 ; 'r'                                         ; DATA XREF=main+563, usage+500, usage+812, usage+996, usage+1015, usage+1049
000000000000a925         db  0x6d ; 'm'
000000000000a926         db  0x00 ; '.'
000000000000a927         db  0x5b ; '['                                         ; DATA XREF=usage+512
000000000000a928         db  0x00 ; '.'
                     aTestInvocation:
000000000000a929         db         "test invocation", 0                        ; DATA XREF=usage+551
                     aMulticallInvoc:
000000000000a939         db         "Multi-call invocation", 0                  ; DATA XREF=usage+599
                     aSha224sum:
000000000000a94f         db         "sha224sum", 0                              ; DATA XREF=usage+616
                     aSha2Utilities:
000000000000a959         db         "sha2 utilities", 0                         ; DATA XREF=usage+628
                     aSha256sum:
000000000000a968         db         "sha256sum", 0                              ; DATA XREF=usage+519
                     aSha384sum:
000000000000a972         db         "sha384sum", 0                              ; DATA XREF=usage+563
                     aSha512sum:
000000000000a97c         db         "sha512sum", 0                              ; DATA XREF=usage+587
                     aNsOnlineHelpSn:
000000000000a986         db         "\n%s online help: <%s>\n", 0               ; DATA XREF=usage+698
000000000000a99d         db  0x47 ; 'G'                                         ; DATA XREF=main+556, usage+726, usage+919, emit_bug_reporting_address+68
000000000000a99e         db  0x4e ; 'N'
000000000000a99f         db  0x55 ; 'U'
000000000000a9a0         db  0x20 ; ' '
                     aCoreutils:
000000000000a9a1         db         "coreutils", 0                              ; DATA XREF=main+84, main+96, usage+575
000000000000a9ab         db  0x65 ; 'e'                                         ; DATA XREF=usage+765, usage+958
000000000000a9ac         db  0x6e ; 'n'
000000000000a9ad         db  0x5f ; '_'
000000000000a9ae         db  0x00 ; '.'
                     aFullDocumentat:
000000000000a9af         db         "Full documentation <%s%s>\n", 0            ; DATA XREF=usage+793, usage+982
                     aUsrlocalsharel:
000000000000a9ca         db         "/usr/local/share/locale", 0                ; DATA XREF=main+77
                     aInteractive:
000000000000a9e2         db         "--interactive", 0                          ; DATA XREF=main+397
                     aNopreserveroot_a9f0:        // aNopreserveroot
000000000000a9f0         db         "--no-preserve-root", 0                     ; DATA XREF=main+4
000000000000aa03         db  0x61 ; 'a'                                         ; DATA XREF=main+672
000000000000aa04         db  0x6c ; 'l'
000000000000aa05         db  0x6c ; 'l'
000000000000aa06         db  0x00 ; '.'
                     aDavidMackenzie:
000000000000aa07         db         "David MacKenzie", 0                        ; DATA XREF=main+534
                     aPaulRubin:
000000000000aa17         db         "Paul Rubin", 0                             ; DATA XREF=main+549
                     aJimMeyering:
000000000000aa22         db         "Jim Meyering", 0                           ; DATA XREF=main+507
                     aRichardMStallm:
000000000000aa2f         db         "Richard M. Stallman", 0                    ; DATA XREF=main+542
                     aDfirvir:
000000000000aa43         db         "dfirvIR", 0                                ; DATA XREF=main+199
                     aMissingOperand:
000000000000aa4b         db         "missing operand", 0                        ; DATA XREF=main+1368
                     aCoreutils831sr:
000000000000aa5b         db         "../coreutils-8.31/src/rm.c", 0             ; DATA XREF=main+957
                     aValidstatusSta:
000000000000aa76         db         "VALID_STATUS (status)", 0                  ; DATA XREF=main+964
                     aSRemoveLuArgum_aa8c:        // aSRemoveLuArgum
000000000000aa8c         db         "%s: remove %lu arguments? ", 0             ; DATA XREF=main+848
                     aSRemoveLuArgum_aaa7:        // aSRemoveLuArgum
000000000000aaa7         db         "%s: remove %lu argument? ", 0              ; DATA XREF=main+855
                     aNever:
000000000000aac1         db         "never", 0
000000000000aac7         db  0x6e ; 'n'
000000000000aac8         db  0x6f ; 'o'
000000000000aac9         db  0x00 ; '.'
                     aNone:
000000000000aaca         db         "none", 0
                     aOnce:
000000000000aacf         db         "once", 0
000000000000aad4         db  0x79 ; 'y'
000000000000aad5         db  0x65 ; 'e'
000000000000aad6         db  0x73 ; 's'
000000000000aad7         db  0x00 ; '.'
                     aForce:
000000000000aad8         db         "force", 0
                     aOnefilesystem:
000000000000aade         db         "one-file-system", 0
                     aPresumeinputtt:
000000000000aaee         db         "-presume-input-tty", 0
                     aRecursive:
000000000000ab01         db         "recursive", 0
000000000000ab0b         db  0x64 ; 'd'
000000000000ab0c         db  0x69 ; 'i'
000000000000ab0d         db  0x72 ; 'r'
000000000000ab0e         db  0x00 ; '.'
                     aVerbose:
000000000000ab0f         db         "verbose", 0
                     aHelp:
000000000000ab17         db         "help", 0
                     aVersion:
000000000000ab1c         db         "version", 0
000000000000ab24         align      8
                     aTrySHelpForMor:
000000000000ab28         db         "Try '%s --help' for more information.\n", 0 ; DATA XREF=usage+47
000000000000ab4f         align      16
                     aUsageSOptionFi:
000000000000ab50         db         "Usage: %s [OPTION]... [FILE]...\n", 0      ; DATA XREF=usage+93
000000000000ab71         align      8
                     aRemoveUnlinkTh:
000000000000ab78         db         "Remove (unlink) the FILE(s).\n\n  -f, --force           ignore nonexistent files and arguments, never prompt\n  -i                    prompt before every removal\n", 0 ; DATA XREF=usage+132
                     aIPromptOnceBef:
000000000000ac18         db         "  -I                    prompt once before removing more than three files, or\n                          when removing recursively; less intrusive than -i,\n                          while still giving protection against most mistakes\n      --interactive[=WH" ; DATA XREF=usage+169
000000000000ad18         db         "EN]  prompt according to WHEN: never, once (-I), or\n                          always (-i); without WHEN, prompt always\n", 0
                     aOnefilesystemW:
000000000000ad90         db         "      --one-file-system  when removing a hierarchy recursively, skip any\n                          directory that is on a file system different from\n                          that of the corresponding command line argument\n", 0 ; DATA XREF=usage+206
                     aNopreserveroot:
000000000000ae70         db         "      --no-preserve-root  do not treat '/' specially\n      --preserve-root[=all]  do not remove '/' (default);\n                              with 'all', reject any command line argument\n                              on a separate device from its parent\n", 0 ; DATA XREF=usage+243
000000000000af6e         align      16
                     aRRRecursiveRem:
000000000000af70         db         "  -r, -R, --recursive   remove directories and their contents recursively\n  -d, --dir             remove empty directories\n  -v, --verbose         explain what is being done\n", 0 ; DATA XREF=usage+280
000000000000b01f         align      32
                     aHelpDisplayThi:
000000000000b020         db         "      --help     display this help and exit\n", 0 ; DATA XREF=usage+317
000000000000b04d         align      16
                     aVersionOutputV:
000000000000b050         db         "      --version  output version information and exit\n", 0 ; DATA XREF=usage+354
000000000000b086         align      8
                     aNbyDefaultRmDo:
000000000000b088         db         "\nBy default, rm does not remove directories.  Use the --recursive (-r or -R)\noption to remove each listed directory, too, along with all of its contents.\n", 0 ; DATA XREF=usage+391
000000000000b123         align      8
                     aNtoRemoveAFile:
000000000000b128         db         "\nTo remove a file whose name starts with a '-', for example '-foo',\nuse one of these commands:\n  %s -- -foo\n\n  %s ./-foo\n", 0 ; DATA XREF=usage+428
000000000000b1a2         align      8
                     aNnoteThatIfYou:
000000000000b1a8         db         "\nNote that if you use rm to remove a file, it might be possible to recover\nsome of its contents, given sufficient expertise and/or time.  For greater\nassurance that the contents are truly unrecoverable, consider using shred.\n", 0 ; DATA XREF=usage+475
000000000000b28a         align      16
                     aHttpswwwgnuorg:
000000000000b290         db         "https://www.gnu.org/software/coreutils/", 0 ; DATA XREF=usage+719, usage+819, usage+912, usage+1022, emit_bug_reporting_address+61
                     aReportAnyTrans:
000000000000b2b8         db         "Report any translation bugs to <https://translationproject.org/team/>\n", 0 ; DATA XREF=usage+1063
000000000000b2ff         align      256
                     aOrAvailableLoc:
000000000000b300         db         "or available locally via: info '(coreutils) %s%s'\n", 0 ; DATA XREF=usage+862
000000000000b333         align      8
                     aYouMayNotAbbre:
000000000000b338         db         "you may not abbreviate the --no-preserve-root option", 0 ; DATA XREF=main+1461
000000000000b36d         align      16
                     aUnrecognizedPr:
000000000000b370         db         "unrecognized --preserve-root argument: %s", 0 ; DATA XREF=main+1419
000000000000b39a         align      32
                     aTrySSToRemoveT:
000000000000b3a0         db         "Try '%s ./%s' to remove the file %s.\n", 0 ; DATA XREF=main+1144
000000000000b3c6         align      8
                     aFailedToGetAtt:
000000000000b3c8         db         "failed to get attributes of %s", 0         ; DATA XREF=main+1295
000000000000b3e7         align      8
                     aSRemoveLuArgum:
000000000000b3e8         db         "%s: remove %lu arguments recursively? ", 0 ; DATA XREF=main+1210
000000000000b40f         align      16
                     aSRemoveLuArgum_b410:        // aSRemoveLuArgum
000000000000b410         db         "%s: remove %lu argument recursively? ", 0  ; DATA XREF=main+1217
000000000000b436         db  0x00 ; '.'
000000000000b437         db  0x00 ; '.'
000000000000b438         db  0x00 ; '.'
000000000000b439         db  0x00 ; '.'
000000000000b43a         db  0x00 ; '.'
000000000000b43b         db  0x00 ; '.'
000000000000b43c         db  0x00 ; '.'
000000000000b43d         db  0x00 ; '.'
000000000000b43e         db  0x00 ; '.'
000000000000b43f         db  0x00 ; '.'
                     __PRETTY_FUNCTION__.6977:
000000000000b440         db  0x6d ; 'm'                                         ; DATA XREF=main+950
000000000000b441         db  0x61 ; 'a'
000000000000b442         db  0x69 ; 'i'
000000000000b443         db  0x6e ; 'n'
000000000000b444         db  0x00 ; '.'
000000000000b445         db  0x00 ; '.'
000000000000b446         db  0x00 ; '.'
000000000000b447         db  0x00 ; '.'
000000000000b448         db  0x00 ; '.'
000000000000b449         db  0x00 ; '.'
000000000000b44a         db  0x00 ; '.'
000000000000b44b         db  0x00 ; '.'
000000000000b44c         db  0x00 ; '.'
000000000000b44d         db  0x00 ; '.'
000000000000b44e         db  0x00 ; '.'
000000000000b44f         db  0x00 ; '.'
                     interactive_types:
000000000000b450         db  0x00 ; '.'                                         ; DATA XREF=main+390, main+415
000000000000b451         db  0x00 ; '.'
000000000000b452         db  0x00 ; '.'
000000000000b453         db  0x00 ; '.'
000000000000b454         db  0x00 ; '.'
000000000000b455         db  0x00 ; '.'
000000000000b456         db  0x00 ; '.'
000000000000b457         db  0x00 ; '.'
000000000000b458         db  0x00 ; '.'
000000000000b459         db  0x00 ; '.'
000000000000b45a         db  0x00 ; '.'
000000000000b45b         db  0x00 ; '.'
000000000000b45c         db  0x01 ; '.'
000000000000b45d         db  0x00 ; '.'
000000000000b45e         db  0x00 ; '.'
000000000000b45f         db  0x00 ; '.'
000000000000b460         db  0x02 ; '.'
000000000000b461         db  0x00 ; '.'
000000000000b462         db  0x00 ; '.'
000000000000b463         db  0x00 ; '.'
000000000000b464         db  0x02 ; '.'
000000000000b465         db  0x00 ; '.'
000000000000b466         db  0x00 ; '.'
000000000000b467         db  0x00 ; '.'
                     aRemovedDirecto:
000000000000b468         db         "removed directory %s\n", 0                 ; DATA XREF=excise+343
                     aRemovedSn:
000000000000b47e         db         "removed %s\n", 0                           ; DATA XREF=excise+536
                     aCannotRemoveS:
000000000000b48a         db         "cannot remove %s", 0                       ; DATA XREF=excise+217, prompt+857, prompt+1136, sub_32f0+339
                     aSRemoveSS:
000000000000b49b         db         "%s: remove %s %s? ", 0                     ; DATA XREF=prompt+1112
                     aFtsreadFailed:
000000000000b4ae         db         "fts_read failed", 0                        ; DATA XREF=sub_3510+424
000000000000b4be         db  0x2e ; '.'                                         ; DATA XREF=sub_3510+45, sub_3510+152, fts_safe_changedir+67, fts_safe_changedir+335, fts_build+2154, rpl_fts_read+1108
000000000000b4bf         db  0x2e ; '.'                                         ; DATA XREF=sub_3510+70, rpl_fts_open+640, rpl_fts_read+1745, rpl_fts_read+1825, rpl_fts_children+195
000000000000b4c0         db  0x00 ; '.'
                     aTraversalFaile:
000000000000b4c1         db         "traversal failed: %s", 0                   ; DATA XREF=sub_3130+16
                     aBugcoreutilsgn:
000000000000b4d6         db         "bug-coreutils@gnu.org", 0                  ; DATA XREF=sub_3510+914, emit_bug_reporting_address+20
                     aValidstatusS:
000000000000b4ec         db         "VALID_STATUS (s)", 0                       ; DATA XREF=sub_3510+959
                     aFtscloseFailed:
000000000000b4fd         db         "fts_close failed", 0                       ; DATA XREF=sub_3510+480
000000000000b50e         align      16
                     aSDescendIntoWr:
000000000000b510         db         "%s: descend into write-protected directory %s? ", 0 ; DATA XREF=prompt+698
                     aSDescendIntoDi:
000000000000b540         db         "%s: descend into directory %s? ", 0        ; DATA XREF=prompt+1200
                     aSRemoveWritepr:
000000000000b560         db         "%s: remove write-protected %s %s? ", 0     ; DATA XREF=prompt+484
000000000000b583         align      8
                     aRefusingToRemo:
000000000000b588         db         "refusing to remove %s or %s directory: skipping %s", 0 ; DATA XREF=sub_3510+92
000000000000b5bb         align      64
                     aItIsDangerousT_b5c0:        // aItIsDangerousT
000000000000b5c0         db         "it is dangerous to operate recursively on %s", 0 ; DATA XREF=sub_3510+827
000000000000b5ed         align      16
                     aItIsDangerousT:
000000000000b5f0         db         "it is dangerous to operate recursively on %s (same as %s)", 0 ; DATA XREF=sub_3510+617
000000000000b62a         align      16
                     aUseNopreserver:
000000000000b630         db         "use --no-preserve-root to override this failsafe", 0 ; DATA XREF=sub_3510+664
000000000000b661         align      8
                     aFailedToStatSS:
000000000000b668         db         "failed to stat %s: skipping %s", 0         ; DATA XREF=sub_3510+236
000000000000b687         align      8
                     aSkippingSSince:
000000000000b688         db         "skipping %s, since it's on a different device", 0 ; DATA XREF=sub_3510+341, sub_3510+736
000000000000b6b6         align      8
                     aWarningCircula:
000000000000b6b8         db         "WARNING: Circular directory structure.\nThis almost certainly means that you have a corrupted file system.\nNOTIFY YOUR SYSTEM MANAGER.\nThe following directory is part of the cycle:\n  %s\n", 0 ; DATA XREF=sub_3280+16
000000000000b772         align      8
                     aUnexpectedFail:
000000000000b778         db         "unexpected failure: fts_info=%d: %s\nplease report to %s", 0 ; DATA XREF=sub_3510+892
                     aCoreutils831sr_b7b0:        // aCoreutils831sr
000000000000b7b0         db         "../coreutils-8.31/src/remove.c", 0         ; DATA XREF=sub_3510+952
000000000000b7cf         align      16
                     aAndPreserveroo:
000000000000b7d0         db         "and --preserve-root=all is in effect", 0   ; DATA XREF=sub_3510+380
000000000000b7f5         db  0x00 ; '.'
000000000000b7f6         db  0x00 ; '.'
000000000000b7f7         db  0x00 ; '.'
000000000000b7f8         db  0x7f ; '.'                                         ; DATA XREF=rm+53
000000000000b7f9         db  0x80 ; '.'
000000000000b7fa         db  0xff ; '.'
000000000000b7fb         db  0xff ; '.'
000000000000b7fc         db  0xc0 ; '.'
000000000000b7fd         db  0x7a ; 'z'
000000000000b7fe         db  0xff ; '.'
000000000000b7ff         db  0xff ; '.'
000000000000b800         db  0x88 ; '.'
000000000000b801         db  0x7a ; 'z'
000000000000b802         db  0xff ; '.'
000000000000b803         db  0xff ; '.'
000000000000b804         db  0xf8 ; '.'
000000000000b805         db  0x79 ; 'y'
000000000000b806         db  0xff ; '.'
000000000000b807         db  0xff ; '.'
000000000000b808         db  0xf8 ; '.'
000000000000b809         db  0x79 ; 'y'
000000000000b80a         db  0xff ; '.'
000000000000b80b         db  0xff ; '.'
000000000000b80c         db  0x7f ; '.'
000000000000b80d         db  0x80 ; '.'
000000000000b80e         db  0xff ; '.'
000000000000b80f         db  0xff ; '.'
000000000000b810         db  0xf8 ; '.'
000000000000b811         db  0x79 ; 'y'
000000000000b812         db  0xff ; '.'
000000000000b813         db  0xff ; '.'
000000000000b814         db  0x38 ; '8'
000000000000b815         db  0x79 ; 'y'
000000000000b816         db  0xff ; '.'
000000000000b817         db  0xff ; '.'
000000000000b818         db  0xf8 ; '.'
000000000000b819         db  0x79 ; 'y'
000000000000b81a         db  0xff ; '.'
000000000000b81b         db  0xff ; '.'
000000000000b81c         db  0x7f ; '.'
000000000000b81d         db  0x80 ; '.'
000000000000b81e         db  0xff ; '.'
000000000000b81f         db  0xff ; '.'
000000000000b820         db  0xf8 ; '.'
000000000000b821         db  0x79 ; 'y'
000000000000b822         db  0xff ; '.'
000000000000b823         db  0xff ; '.'
000000000000b824         db  0xf8 ; '.'
000000000000b825         db  0x79 ; 'y'
000000000000b826         db  0xff ; '.'
000000000000b827         db  0xff ; '.'
000000000000b828         db  0xf8 ; '.'
000000000000b829         db  0x79 ; 'y'
000000000000b82a         db  0xff ; '.'
000000000000b82b         db  0xff ; '.'
000000000000b82c         db  0xf8 ; '.'
000000000000b82d         db  0x79 ; 'y'
000000000000b82e         db  0xff ; '.'
000000000000b82f         db  0xff ; '.'
                     __PRETTY_FUNCTION__.7067:
000000000000b830         db  0x72 ; 'r'                                         ; DATA XREF=sub_3510+945
000000000000b831         db  0x6d ; 'm'
000000000000b832         db  0x00 ; '.'
                     a831:
000000000000b833         db         "8.31", 0                                   ; DATA XREF=Version
                     aInvalidArgumen:
000000000000b838         db         "invalid argument %s for %s", 0             ; DATA XREF=argmatch_invalid+96
                     aAmbiguousArgum:
000000000000b853         db         "ambiguous argument %s for %s", 0           ; DATA XREF=argmatch_invalid+21
                     aValidArguments:
000000000000b870         db         "Valid arguments are:", 0                   ; DATA XREF=argmatch_valid+18
                     aNS:
000000000000b885         db         "\n  - %s", 0                               ; DATA XREF=argmatch_valid+102
000000000000b88d         db  0x2c ; ','                                         ; DATA XREF=argmatch_valid+181
000000000000b88e         db  0x20 ; ' '
000000000000b88f         db  0x25 ; '%'                                         ; DATA XREF=close_stdin+242, close_stdout+143, xalloc_die+29
000000000000b890         db  0x73 ; 's'
000000000000b891         db  0x00 ; '.'
                     aErrorClosingFi:
000000000000b892         db         "error closing file", 0                     ; DATA XREF=close_stdin+88
                     aSS:
000000000000b8a5         db         "%s: %s", 0                                 ; DATA XREF=close_stdin+141, close_stdout+108
                     aWriteError:
000000000000b8ac         db         "write error", 0                            ; DATA XREF=close_stdout+67
                     aRegularEmptyFi:
000000000000b8b8         db         "regular empty file", 0                     ; DATA XREF=file_type+103
                     aRegularFile:
000000000000b8cb         db         "regular file", 0                           ; DATA XREF=file_type+120
                     aDirectory:
000000000000b8d8         db         "directory", 0                              ; DATA XREF=file_type+176
                     aSymbolicLink:
000000000000b8e2         db         "symbolic link", 0                          ; DATA XREF=file_type+144
                     aBlockSpecialFi:
000000000000b8f0         db         "block special file", 0                     ; DATA XREF=file_type+192
                     aCharacterSpeci:
000000000000b903         db         "character special file", 0                 ; DATA XREF=file_type+208
000000000000b91a         db  0x66 ; 'f'                                         ; DATA XREF=file_type+224
000000000000b91b         db  0x69 ; 'i'
000000000000b91c         db  0x66 ; 'f'
000000000000b91d         db  0x6f ; 'o'
000000000000b91e         db  0x00 ; '.'
                     aSocket:
000000000000b91f         db         "socket", 0                                 ; DATA XREF=file_type+160
                     aWeirdFile:
000000000000b926         db         "weird file", 0                             ; DATA XREF=file_type+78
000000000000b931         align      8
                     aANullArgv0WasP:
000000000000b938         db         "A NULL argv[0] was passed through an exec system call.\n", 0 ; DATA XREF=set_program_name+132
                     aLibs:
000000000000b970         db         "/.libs/", 0                                ; DATA XREF=set_program_name+44
000000000000b978         db  0x6c ; 'l'                                         ; DATA XREF=set_program_name+68
000000000000b979         db  0x74 ; 't'
000000000000b97a         db  0x2d ; '-'
000000000000b97b         db  0x00 ; '.'
000000000000b97c         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+206
000000000000b97d         db  0x80 ; '.'
000000000000b97e         db  0x98 ; '.'
000000000000b97f         db  0x00 ; '.'
000000000000b980         db  0xe2 ; '.'                                         ; DATA XREF=gettext_quote.part.1+213
000000000000b981         db  0x80 ; '.'
000000000000b982         db  0x99 ; '.'
000000000000b983         db  0x00 ; '.'
000000000000b984         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+116
000000000000b985         db  0x07 ; '.'
000000000000b986         db  0x65 ; 'e'
000000000000b987         db  0x00 ; '.'
000000000000b988         db  0xa1 ; '.'                                         ; DATA XREF=gettext_quote.part.1+123
000000000000b989         db  0xaf ; '.'
000000000000b98a         db  0x00 ; '.'
000000000000b98b         db  0x22 ; '"'                                         ; DATA XREF=gettext_quote.part.1+32, sub_4a00+1451, sub_4a00+1493, sub_4a00+2429
000000000000b98c         db  0x00 ; '.'
000000000000b98d         db  0x27 ; '''                                         ; DATA XREF=gettext_quote.part.1+39, quotearg_buffer_restyled+179, sub_4a00+132, sub_4a00+1338, sub_4a00+1670, sub_4a00+1697, sub_4a00+2352
000000000000b98e         db  0x00 ; '.'
000000000000b98f         db  0x60 ; '`'                                         ; DATA XREF=sub_4a00+1627, sub_4a00+1654
000000000000b990         db  0x00 ; '.'
                     aLiteral:
000000000000b991         db         "literal", 0
                     aShell:
000000000000b999         db         "shell", 0
                     aShellalways:
000000000000b99f         db         "shell-always", 0
000000000000b9ac         db  0x73 ; 's'
000000000000b9ad         db  0x68 ; 'h'
000000000000b9ae         db  0x65 ; 'e'
000000000000b9af         db  0x6c ; 'l'
000000000000b9b0         db  0x6c ; 'l'
000000000000b9b1         db  0x2d ; '-'
                     aEscape:
000000000000b9b2         db         "escape", 0
000000000000b9b9         db  0x73 ; 's'
000000000000b9ba         db  0x68 ; 'h'
000000000000b9bb         db  0x65 ; 'e'
000000000000b9bc         db  0x6c ; 'l'
000000000000b9bd         db  0x6c ; 'l'
000000000000b9be         db  0x2d ; '-'
000000000000b9bf         db  0x65 ; 'e'
000000000000b9c0         db  0x73 ; 's'
000000000000b9c1         db  0x63 ; 'c'
000000000000b9c2         db  0x61 ; 'a'
000000000000b9c3         db  0x70 ; 'p'
000000000000b9c4         db  0x65 ; 'e'
000000000000b9c5         db  0x2d ; '-'
                     aAlways:
000000000000b9c6         db         "always", 0
                     aCmaybe:
000000000000b9cd         db         "c-maybe", 0
                     aClocale:
000000000000b9d5         db         "clocale", 0
000000000000b9dd         align      32
                     switch_table_b9e0:        // switch_table
000000000000b9e0         dd         quotearg_buffer_restyled.loc_50fa-switch_table_b9e0, quotearg_buffer_restyled.loc_4353-switch_table_b9e0, quotearg_buffer_restyled.loc_5328-switch_table_b9e0, quotearg_buffer_restyled.loc_5134-switch_table_b9e0 ; switch table used at 0x4351 containing 11 entries, DATA XREF=quotearg_buffer_restyled+128
000000000000b9f0         dd         quotearg_buffer_restyled.loc_4f24-switch_table_b9e0, quotearg_buffer_restyled.loc_4f80-switch_table_b9e0, quotearg_buffer_restyled.loc_4fd5-switch_table_b9e0, quotearg_buffer_restyled.loc_501a-switch_table_b9e0
000000000000ba00         dd         3 dup (quotearg_buffer_restyled.loc_5054-switch_table_b9e0)
000000000000ba0c         db  0xc4 ; '.'                                         ; DATA XREF=quotearg_buffer_restyled+477
000000000000ba0d         db  0x8c ; '.'
000000000000ba0e         db  0xff ; '.'
000000000000ba0f         db  0xff ; '.'
000000000000ba10         db  0xac ; '.'
000000000000ba11         db  0x8d ; '.'
000000000000ba12         db  0xff ; '.'
000000000000ba13         db  0xff ; '.'
000000000000ba14         db  0xac ; '.'
000000000000ba15         db  0x8d ; '.'
000000000000ba16         db  0xff ; '.'
000000000000ba17         db  0xff ; '.'
000000000000ba18         db  0xac ; '.'
000000000000ba19         db  0x8d ; '.'
000000000000ba1a         db  0xff ; '.'
000000000000ba1b         db  0xff ; '.'
000000000000ba1c         db  0xac ; '.'
000000000000ba1d         db  0x8d ; '.'
000000000000ba1e         db  0xff ; '.'
000000000000ba1f         db  0xff ; '.'
000000000000ba20         db  0xac ; '.'
000000000000ba21         db  0x8d ; '.'
000000000000ba22         db  0xff ; '.'
000000000000ba23         db  0xff ; '.'
000000000000ba24         db  0xac ; '.'
000000000000ba25         db  0x8d ; '.'
000000000000ba26         db  0xff ; '.'
000000000000ba27         db  0xff ; '.'
000000000000ba28         db  0x04 ; '.'
000000000000ba29         db  0x8d ; '.'
000000000000ba2a         db  0xff ; '.'
000000000000ba2b         db  0xff ; '.'
000000000000ba2c         db  0x0c ; '.'
000000000000ba2d         db  0x8c ; '.'
000000000000ba2e         db  0xff ; '.'
000000000000ba2f         db  0xff ; '.'
000000000000ba30         db  0xcc ; '.'
000000000000ba31         db  0x8b ; '.'
000000000000ba32         db  0xff ; '.'
000000000000ba33         db  0xff ; '.'
000000000000ba34         db  0x94 ; '.'
000000000000ba35         db  0x8d ; '.'
000000000000ba36         db  0xff ; '.'
000000000000ba37         db  0xff ; '.'
000000000000ba38         db  0x84 ; '.'
000000000000ba39         db  0x8d ; '.'
000000000000ba3a         db  0xff ; '.'
000000000000ba3b         db  0xff ; '.'
000000000000ba3c         db  0x74 ; 't'
000000000000ba3d         db  0x8d ; '.'
000000000000ba3e         db  0xff ; '.'
000000000000ba3f         db  0xff ; '.'
000000000000ba40         db  0x64 ; 'd'
000000000000ba41         db  0x8d ; '.'
000000000000ba42         db  0xff ; '.'
000000000000ba43         db  0xff ; '.'
000000000000ba44         db  0xac ; '.'
000000000000ba45         db  0x8d ; '.'
000000000000ba46         db  0xff ; '.'
000000000000ba47         db  0xff ; '.'
000000000000ba48         db  0xac ; '.'
000000000000ba49         db  0x8d ; '.'
000000000000ba4a         db  0xff ; '.'
000000000000ba4b         db  0xff ; '.'
000000000000ba4c         db  0xac ; '.'
000000000000ba4d         db  0x8d ; '.'
000000000000ba4e         db  0xff ; '.'
000000000000ba4f         db  0xff ; '.'
000000000000ba50         db  0xac ; '.'
000000000000ba51         db  0x8d ; '.'
000000000000ba52         db  0xff ; '.'
000000000000ba53         db  0xff ; '.'
000000000000ba54         db  0xac ; '.'
000000000000ba55         db  0x8d ; '.'
000000000000ba56         db  0xff ; '.'
000000000000ba57         db  0xff ; '.'
000000000000ba58         db  0xac ; '.'
000000000000ba59         db  0x8d ; '.'
000000000000ba5a         db  0xff ; '.'
000000000000ba5b         db  0xff ; '.'
000000000000ba5c         db  0xac ; '.'
000000000000ba5d         db  0x8d ; '.'
000000000000ba5e         db  0xff ; '.'
000000000000ba5f         db  0xff ; '.'
000000000000ba60         db  0xac ; '.'
000000000000ba61         db  0x8d ; '.'
000000000000ba62         db  0xff ; '.'
000000000000ba63         db  0xff ; '.'
000000000000ba64         db  0xac ; '.'
000000000000ba65         db  0x8d ; '.'
000000000000ba66         db  0xff ; '.'
000000000000ba67         db  0xff ; '.'
000000000000ba68         db  0xac ; '.'
000000000000ba69         db  0x8d ; '.'
000000000000ba6a         db  0xff ; '.'
000000000000ba6b         db  0xff ; '.'
000000000000ba6c         db  0xac ; '.'
000000000000ba6d         db  0x8d ; '.'
000000000000ba6e         db  0xff ; '.'
000000000000ba6f         db  0xff ; '.'
000000000000ba70         db  0xac ; '.'
000000000000ba71         db  0x8d ; '.'
000000000000ba72         db  0xff ; '.'
000000000000ba73         db  0xff ; '.'
000000000000ba74         db  0xac ; '.'
000000000000ba75         db  0x8d ; '.'
000000000000ba76         db  0xff ; '.'
000000000000ba77         db  0xff ; '.'
000000000000ba78         db  0xac ; '.'
000000000000ba79         db  0x8d ; '.'
000000000000ba7a         db  0xff ; '.'
000000000000ba7b         db  0xff ; '.'
000000000000ba7c         db  0xac ; '.'
000000000000ba7d         db  0x8d ; '.'
000000000000ba7e         db  0xff ; '.'
000000000000ba7f         db  0xff ; '.'
000000000000ba80         db  0xac ; '.'
000000000000ba81         db  0x8d ; '.'
000000000000ba82         db  0xff ; '.'
000000000000ba83         db  0xff ; '.'
000000000000ba84         db  0xac ; '.'
000000000000ba85         db  0x8d ; '.'
000000000000ba86         db  0xff ; '.'
000000000000ba87         db  0xff ; '.'
000000000000ba88         db  0xac ; '.'
000000000000ba89         db  0x8d ; '.'
000000000000ba8a         db  0xff ; '.'
000000000000ba8b         db  0xff ; '.'
000000000000ba8c         db  0x54 ; 'T'
000000000000ba8d         db  0x8d ; '.'
000000000000ba8e         db  0xff ; '.'
000000000000ba8f         db  0xff ; '.'
000000000000ba90         db  0x44 ; 'D'
000000000000ba91         db  0x8d ; '.'
000000000000ba92         db  0xff ; '.'
000000000000ba93         db  0xff ; '.'
000000000000ba94         db  0x44 ; 'D'
000000000000ba95         db  0x8d ; '.'
000000000000ba96         db  0xff ; '.'
000000000000ba97         db  0xff ; '.'
000000000000ba98         db  0x14 ; '.'
000000000000ba99         db  0x8d ; '.'
000000000000ba9a         db  0xff ; '.'
000000000000ba9b         db  0xff ; '.'
000000000000ba9c         db  0x44 ; 'D'
000000000000ba9d         db  0x8d ; '.'
000000000000ba9e         db  0xff ; '.'
000000000000ba9f         db  0xff ; '.'
000000000000baa0         db  0xec ; '.'
000000000000baa1         db  0x8c ; '.'
000000000000baa2         db  0xff ; '.'
000000000000baa3         db  0xff ; '.'
000000000000baa4         db  0x44 ; 'D'
000000000000baa5         db  0x8d ; '.'
000000000000baa6         db  0xff ; '.'
000000000000baa7         db  0xff ; '.'
000000000000baa8         db  0xa7 ; '.'
000000000000baa9         db  0x8b ; '.'
000000000000baaa         db  0xff ; '.'
000000000000baab         db  0xff ; '.'
000000000000baac         db  0x44 ; 'D'
000000000000baad         db  0x8d ; '.'
000000000000baae         db  0xff ; '.'
000000000000baaf         db  0xff ; '.'
000000000000bab0         db  0x44 ; 'D'
000000000000bab1         db  0x8d ; '.'
000000000000bab2         db  0xff ; '.'
000000000000bab3         db  0xff ; '.'
000000000000bab4         db  0x44 ; 'D'
000000000000bab5         db  0x8d ; '.'
000000000000bab6         db  0xff ; '.'
000000000000bab7         db  0xff ; '.'
000000000000bab8         db  0xec ; '.'
000000000000bab9         db  0x8c ; '.'
000000000000baba         db  0xff ; '.'
000000000000babb         db  0xff ; '.'
000000000000babc         db  0xec ; '.'
000000000000babd         db  0x8c ; '.'
000000000000babe         db  0xff ; '.'
000000000000babf         db  0xff ; '.'
000000000000bac0         db  0xec ; '.'
000000000000bac1         db  0x8c ; '.'
000000000000bac2         db  0xff ; '.'
000000000000bac3         db  0xff ; '.'
000000000000bac4         db  0xec ; '.'
000000000000bac5         db  0x8c ; '.'
000000000000bac6         db  0xff ; '.'
000000000000bac7         db  0xff ; '.'
000000000000bac8         db  0xec ; '.'
000000000000bac9         db  0x8c ; '.'
000000000000baca         db  0xff ; '.'
000000000000bacb         db  0xff ; '.'
000000000000bacc         db  0xec ; '.'
000000000000bacd         db  0x8c ; '.'
000000000000bace         db  0xff ; '.'
000000000000bacf         db  0xff ; '.'
000000000000bad0         db  0xec ; '.'
000000000000bad1         db  0x8c ; '.'
000000000000bad2         db  0xff ; '.'
000000000000bad3         db  0xff ; '.'
000000000000bad4         db  0xec ; '.'
000000000000bad5         db  0x8c ; '.'
000000000000bad6         db  0xff ; '.'
000000000000bad7         db  0xff ; '.'
000000000000bad8         db  0xec ; '.'
000000000000bad9         db  0x8c ; '.'
000000000000bada         db  0xff ; '.'
000000000000badb         db  0xff ; '.'
000000000000badc         db  0xec ; '.'
000000000000badd         db  0x8c ; '.'
000000000000bade         db  0xff ; '.'
000000000000badf         db  0xff ; '.'
000000000000bae0         db  0xec ; '.'
000000000000bae1         db  0x8c ; '.'
000000000000bae2         db  0xff ; '.'
000000000000bae3         db  0xff ; '.'
000000000000bae4         db  0xec ; '.'
000000000000bae5         db  0x8c ; '.'
000000000000bae6         db  0xff ; '.'
000000000000bae7         db  0xff ; '.'
000000000000bae8         db  0xec ; '.'
000000000000bae9         db  0x8c ; '.'
000000000000baea         db  0xff ; '.'
000000000000baeb         db  0xff ; '.'
000000000000baec         db  0xec ; '.'
000000000000baed         db  0x8c ; '.'
000000000000baee         db  0xff ; '.'
000000000000baef         db  0xff ; '.'
000000000000baf0         db  0xec ; '.'
000000000000baf1         db  0x8c ; '.'
000000000000baf2         db  0xff ; '.'
000000000000baf3         db  0xff ; '.'
000000000000baf4         db  0xec ; '.'
000000000000baf5         db  0x8c ; '.'
000000000000baf6         db  0xff ; '.'
000000000000baf7         db  0xff ; '.'
000000000000baf8         db  0x44 ; 'D'
000000000000baf9         db  0x8d ; '.'
000000000000bafa         db  0xff ; '.'
000000000000bafb         db  0xff ; '.'
000000000000bafc         db  0x44 ; 'D'
000000000000bafd         db  0x8d ; '.'
000000000000bafe         db  0xff ; '.'
000000000000baff         db  0xff ; '.'
000000000000bb00         db  0x44 ; 'D'
000000000000bb01         db  0x8d ; '.'
000000000000bb02         db  0xff ; '.'
000000000000bb03         db  0xff ; '.'
000000000000bb04         db  0x44 ; 'D'
000000000000bb05         db  0x8d ; '.'
000000000000bb06         db  0xff ; '.'
000000000000bb07         db  0xff ; '.'
000000000000bb08         db  0x77 ; 'w'
000000000000bb09         db  0x8b ; '.'
000000000000bb0a         db  0xff ; '.'
000000000000bb0b         db  0xff ; '.'
000000000000bb0c         db  0xac ; '.'
000000000000bb0d         db  0x8d ; '.'
000000000000bb0e         db  0xff ; '.'
000000000000bb0f         db  0xff ; '.'
000000000000bb10         db  0xec ; '.'
000000000000bb11         db  0x8c ; '.'
000000000000bb12         db  0xff ; '.'
000000000000bb13         db  0xff ; '.'
000000000000bb14         db  0xec ; '.'
000000000000bb15         db  0x8c ; '.'
000000000000bb16         db  0xff ; '.'
000000000000bb17         db  0xff ; '.'
000000000000bb18         db  0xec ; '.'
000000000000bb19         db  0x8c ; '.'
000000000000bb1a         db  0xff ; '.'
000000000000bb1b         db  0xff ; '.'
000000000000bb1c         db  0xec ; '.'
000000000000bb1d         db  0x8c ; '.'
000000000000bb1e         db  0xff ; '.'
000000000000bb1f         db  0xff ; '.'
000000000000bb20         db  0xec ; '.'
000000000000bb21         db  0x8c ; '.'
000000000000bb22         db  0xff ; '.'
000000000000bb23         db  0xff ; '.'
000000000000bb24         db  0xec ; '.'
000000000000bb25         db  0x8c ; '.'
000000000000bb26         db  0xff ; '.'
000000000000bb27         db  0xff ; '.'
000000000000bb28         db  0xec ; '.'
000000000000bb29         db  0x8c ; '.'
000000000000bb2a         db  0xff ; '.'
000000000000bb2b         db  0xff ; '.'
000000000000bb2c         db  0xec ; '.'
000000000000bb2d         db  0x8c ; '.'
000000000000bb2e         db  0xff ; '.'
000000000000bb2f         db  0xff ; '.'
000000000000bb30         db  0xec ; '.'
000000000000bb31         db  0x8c ; '.'
000000000000bb32         db  0xff ; '.'
000000000000bb33         db  0xff ; '.'
000000000000bb34         db  0xec ; '.'
000000000000bb35         db  0x8c ; '.'
000000000000bb36         db  0xff ; '.'
000000000000bb37         db  0xff ; '.'
000000000000bb38         db  0xec ; '.'
000000000000bb39         db  0x8c ; '.'
000000000000bb3a         db  0xff ; '.'
000000000000bb3b         db  0xff ; '.'
000000000000bb3c         db  0xec ; '.'
000000000000bb3d         db  0x8c ; '.'
000000000000bb3e         db  0xff ; '.'
000000000000bb3f         db  0xff ; '.'
000000000000bb40         db  0xec ; '.'
000000000000bb41         db  0x8c ; '.'
000000000000bb42         db  0xff ; '.'
000000000000bb43         db  0xff ; '.'
000000000000bb44         db  0xec ; '.'
000000000000bb45         db  0x8c ; '.'
000000000000bb46         db  0xff ; '.'
000000000000bb47         db  0xff ; '.'
000000000000bb48         db  0xec ; '.'
000000000000bb49         db  0x8c ; '.'
000000000000bb4a         db  0xff ; '.'
000000000000bb4b         db  0xff ; '.'
000000000000bb4c         db  0xec ; '.'
000000000000bb4d         db  0x8c ; '.'
000000000000bb4e         db  0xff ; '.'
000000000000bb4f         db  0xff ; '.'
000000000000bb50         db  0xec ; '.'
000000000000bb51         db  0x8c ; '.'
000000000000bb52         db  0xff ; '.'
000000000000bb53         db  0xff ; '.'
000000000000bb54         db  0xec ; '.'
000000000000bb55         db  0x8c ; '.'
000000000000bb56         db  0xff ; '.'
000000000000bb57         db  0xff ; '.'
000000000000bb58         db  0xec ; '.'
000000000000bb59         db  0x8c ; '.'
000000000000bb5a         db  0xff ; '.'
000000000000bb5b         db  0xff ; '.'
000000000000bb5c         db  0xec ; '.'
000000000000bb5d         db  0x8c ; '.'
000000000000bb5e         db  0xff ; '.'
000000000000bb5f         db  0xff ; '.'
000000000000bb60         db  0xec ; '.'
000000000000bb61         db  0x8c ; '.'
000000000000bb62         db  0xff ; '.'
000000000000bb63         db  0xff ; '.'
000000000000bb64         db  0xec ; '.'
000000000000bb65         db  0x8c ; '.'
000000000000bb66         db  0xff ; '.'
000000000000bb67         db  0xff ; '.'
000000000000bb68         db  0xec ; '.'
000000000000bb69         db  0x8c ; '.'
000000000000bb6a         db  0xff ; '.'
000000000000bb6b         db  0xff ; '.'
000000000000bb6c         db  0xec ; '.'
000000000000bb6d         db  0x8c ; '.'
000000000000bb6e         db  0xff ; '.'
000000000000bb6f         db  0xff ; '.'
000000000000bb70         db  0xec ; '.'
000000000000bb71         db  0x8c ; '.'
000000000000bb72         db  0xff ; '.'
000000000000bb73         db  0xff ; '.'
000000000000bb74         db  0xec ; '.'
000000000000bb75         db  0x8c ; '.'
000000000000bb76         db  0xff ; '.'
000000000000bb77         db  0xff ; '.'
000000000000bb78         db  0x44 ; 'D'
000000000000bb79         db  0x8d ; '.'
000000000000bb7a         db  0xff ; '.'
000000000000bb7b         db  0xff ; '.'
000000000000bb7c         db  0x1c ; '.'
000000000000bb7d         db  0x8c ; '.'
000000000000bb7e         db  0xff ; '.'
000000000000bb7f         db  0xff ; '.'
000000000000bb80         db  0xec ; '.'
000000000000bb81         db  0x8c ; '.'
000000000000bb82         db  0xff ; '.'
000000000000bb83         db  0xff ; '.'
000000000000bb84         db  0x44 ; 'D'
000000000000bb85         db  0x8d ; '.'
000000000000bb86         db  0xff ; '.'
000000000000bb87         db  0xff ; '.'
000000000000bb88         db  0xec ; '.'
000000000000bb89         db  0x8c ; '.'
000000000000bb8a         db  0xff ; '.'
000000000000bb8b         db  0xff ; '.'
000000000000bb8c         db  0x44 ; 'D'
000000000000bb8d         db  0x8d ; '.'
000000000000bb8e         db  0xff ; '.'
000000000000bb8f         db  0xff ; '.'
000000000000bb90         db  0xec ; '.'
000000000000bb91         db  0x8c ; '.'
000000000000bb92         db  0xff ; '.'
000000000000bb93         db  0xff ; '.'
000000000000bb94         db  0xec ; '.'
000000000000bb95         db  0x8c ; '.'
000000000000bb96         db  0xff ; '.'
000000000000bb97         db  0xff ; '.'
000000000000bb98         db  0xec ; '.'
000000000000bb99         db  0x8c ; '.'
000000000000bb9a         db  0xff ; '.'
000000000000bb9b         db  0xff ; '.'
000000000000bb9c         db  0xec ; '.'
000000000000bb9d         db  0x8c ; '.'
000000000000bb9e         db  0xff ; '.'
000000000000bb9f         db  0xff ; '.'
000000000000bba0         db  0xec ; '.'
000000000000bba1         db  0x8c ; '.'
000000000000bba2         db  0xff ; '.'
000000000000bba3         db  0xff ; '.'
000000000000bba4         db  0xec ; '.'
000000000000bba5         db  0x8c ; '.'
000000000000bba6         db  0xff ; '.'
000000000000bba7         db  0xff ; '.'
000000000000bba8         db  0xec ; '.'
000000000000bba9         db  0x8c ; '.'
000000000000bbaa         db  0xff ; '.'
000000000000bbab         db  0xff ; '.'
000000000000bbac         db  0xec ; '.'
000000000000bbad         db  0x8c ; '.'
000000000000bbae         db  0xff ; '.'
000000000000bbaf         db  0xff ; '.'
000000000000bbb0         db  0xec ; '.'
000000000000bbb1         db  0x8c ; '.'
000000000000bbb2         db  0xff ; '.'
000000000000bbb3         db  0xff ; '.'
000000000000bbb4         db  0xec ; '.'
000000000000bbb5         db  0x8c ; '.'
000000000000bbb6         db  0xff ; '.'
000000000000bbb7         db  0xff ; '.'
000000000000bbb8         db  0xec ; '.'
000000000000bbb9         db  0x8c ; '.'
000000000000bbba         db  0xff ; '.'
000000000000bbbb         db  0xff ; '.'
000000000000bbbc         db  0xec ; '.'
000000000000bbbd         db  0x8c ; '.'
000000000000bbbe         db  0xff ; '.'
000000000000bbbf         db  0xff ; '.'
000000000000bbc0         db  0xec ; '.'
000000000000bbc1         db  0x8c ; '.'
000000000000bbc2         db  0xff ; '.'
000000000000bbc3         db  0xff ; '.'
000000000000bbc4         db  0xec ; '.'
000000000000bbc5         db  0x8c ; '.'
000000000000bbc6         db  0xff ; '.'
000000000000bbc7         db  0xff ; '.'
000000000000bbc8         db  0xec ; '.'
000000000000bbc9         db  0x8c ; '.'
000000000000bbca         db  0xff ; '.'
000000000000bbcb         db  0xff ; '.'
000000000000bbcc         db  0xec ; '.'
000000000000bbcd         db  0x8c ; '.'
000000000000bbce         db  0xff ; '.'
000000000000bbcf         db  0xff ; '.'
000000000000bbd0         db  0xec ; '.'
000000000000bbd1         db  0x8c ; '.'
000000000000bbd2         db  0xff ; '.'
000000000000bbd3         db  0xff ; '.'
000000000000bbd4         db  0xec ; '.'
000000000000bbd5         db  0x8c ; '.'
000000000000bbd6         db  0xff ; '.'
000000000000bbd7         db  0xff ; '.'
000000000000bbd8         db  0xec ; '.'
000000000000bbd9         db  0x8c ; '.'
000000000000bbda         db  0xff ; '.'
000000000000bbdb         db  0xff ; '.'
000000000000bbdc         db  0xec ; '.'
000000000000bbdd         db  0x8c ; '.'
000000000000bbde         db  0xff ; '.'
000000000000bbdf         db  0xff ; '.'
000000000000bbe0         db  0xec ; '.'
000000000000bbe1         db  0x8c ; '.'
000000000000bbe2         db  0xff ; '.'
000000000000bbe3         db  0xff ; '.'
000000000000bbe4         db  0xec ; '.'
000000000000bbe5         db  0x8c ; '.'
000000000000bbe6         db  0xff ; '.'
000000000000bbe7         db  0xff ; '.'
000000000000bbe8         db  0xec ; '.'
000000000000bbe9         db  0x8c ; '.'
000000000000bbea         db  0xff ; '.'
000000000000bbeb         db  0xff ; '.'
000000000000bbec         db  0xec ; '.'
000000000000bbed         db  0x8c ; '.'
000000000000bbee         db  0xff ; '.'
000000000000bbef         db  0xff ; '.'
000000000000bbf0         db  0xec ; '.'
000000000000bbf1         db  0x8c ; '.'
000000000000bbf2         db  0xff ; '.'
000000000000bbf3         db  0xff ; '.'
000000000000bbf4         db  0xec ; '.'
000000000000bbf5         db  0x8c ; '.'
000000000000bbf6         db  0xff ; '.'
000000000000bbf7         db  0xff ; '.'
000000000000bbf8         db  0xa7 ; '.'
000000000000bbf9         db  0x8a ; '.'
000000000000bbfa         db  0xff ; '.'
000000000000bbfb         db  0xff ; '.'
000000000000bbfc         db  0x44 ; 'D'
000000000000bbfd         db  0x8d ; '.'
000000000000bbfe         db  0xff ; '.'
000000000000bbff         db  0xff ; '.'
000000000000bc00         db  0xa7 ; '.'
000000000000bc01         db  0x8a ; '.'
000000000000bc02         db  0xff ; '.'
000000000000bc03         db  0xff ; '.'
000000000000bc04         db  0x14 ; '.'
000000000000bc05         db  0x8d ; '.'
000000000000bc06         db  0xff ; '.'
000000000000bc07         db  0xff ; '.'
000000000000bc08         db  0x98 ; '.'                                         ; DATA XREF=sub_47a0+137
000000000000bc09         db  0x8c ; '.'
000000000000bc0a         db  0xff ; '.'
000000000000bc0b         db  0xff ; '.'
000000000000bc0c         db  0xa8 ; '.'
000000000000bc0d         db  0x8b ; '.'
000000000000bc0e         db  0xff ; '.'
000000000000bc0f         db  0xff ; '.'
000000000000bc10         db  0xa8 ; '.'
000000000000bc11         db  0x8b ; '.'
000000000000bc12         db  0xff ; '.'
000000000000bc13         db  0xff ; '.'
000000000000bc14         db  0xa8 ; '.'
000000000000bc15         db  0x8b ; '.'
000000000000bc16         db  0xff ; '.'
000000000000bc17         db  0xff ; '.'
000000000000bc18         db  0xa8 ; '.'
000000000000bc19         db  0x8b ; '.'
000000000000bc1a         db  0xff ; '.'
000000000000bc1b         db  0xff ; '.'
000000000000bc1c         db  0xa8 ; '.'
000000000000bc1d         db  0x8b ; '.'
000000000000bc1e         db  0xff ; '.'
000000000000bc1f         db  0xff ; '.'
000000000000bc20         db  0xa8 ; '.'
000000000000bc21         db  0x8b ; '.'
000000000000bc22         db  0xff ; '.'
000000000000bc23         db  0xff ; '.'
000000000000bc24         db  0x88 ; '.'
000000000000bc25         db  0x8c ; '.'
000000000000bc26         db  0xff ; '.'
000000000000bc27         db  0xff ; '.'
000000000000bc28         db  0xd8 ; '.'
000000000000bc29         db  0x8d ; '.'
000000000000bc2a         db  0xff ; '.'
000000000000bc2b         db  0xff ; '.'
000000000000bc2c         db  0xc0 ; '.'
000000000000bc2d         db  0x8d ; '.'
000000000000bc2e         db  0xff ; '.'
000000000000bc2f         db  0xff ; '.'
000000000000bc30         db  0x70 ; 'p'
000000000000bc31         db  0x8c ; '.'
000000000000bc32         db  0xff ; '.'
000000000000bc33         db  0xff ; '.'
000000000000bc34         db  0xb0 ; '.'
000000000000bc35         db  0x8d ; '.'
000000000000bc36         db  0xff ; '.'
000000000000bc37         db  0xff ; '.'
000000000000bc38         db  0x58 ; 'X'
000000000000bc39         db  0x8c ; '.'
000000000000bc3a         db  0xff ; '.'
000000000000bc3b         db  0xff ; '.'
000000000000bc3c         db  0x98 ; '.'
000000000000bc3d         db  0x8d ; '.'
000000000000bc3e         db  0xff ; '.'
000000000000bc3f         db  0xff ; '.'
000000000000bc40         db  0xa8 ; '.'
000000000000bc41         db  0x8b ; '.'
000000000000bc42         db  0xff ; '.'
000000000000bc43         db  0xff ; '.'
000000000000bc44         db  0xa8 ; '.'
000000000000bc45         db  0x8b ; '.'
000000000000bc46         db  0xff ; '.'
000000000000bc47         db  0xff ; '.'
000000000000bc48         db  0xa8 ; '.'
000000000000bc49         db  0x8b ; '.'
000000000000bc4a         db  0xff ; '.'
000000000000bc4b         db  0xff ; '.'
000000000000bc4c         db  0xa8 ; '.'
000000000000bc4d         db  0x8b ; '.'
000000000000bc4e         db  0xff ; '.'
000000000000bc4f         db  0xff ; '.'
000000000000bc50         db  0xa8 ; '.'
000000000000bc51         db  0x8b ; '.'
000000000000bc52         db  0xff ; '.'
000000000000bc53         db  0xff ; '.'
000000000000bc54         db  0xa8 ; '.'
000000000000bc55         db  0x8b ; '.'
000000000000bc56         db  0xff ; '.'
000000000000bc57         db  0xff ; '.'
000000000000bc58         db  0xa8 ; '.'
000000000000bc59         db  0x8b ; '.'
000000000000bc5a         db  0xff ; '.'
000000000000bc5b         db  0xff ; '.'
000000000000bc5c         db  0xa8 ; '.'
000000000000bc5d         db  0x8b ; '.'
000000000000bc5e         db  0xff ; '.'
000000000000bc5f         db  0xff ; '.'
000000000000bc60         db  0xa8 ; '.'
000000000000bc61         db  0x8b ; '.'
000000000000bc62         db  0xff ; '.'
000000000000bc63         db  0xff ; '.'
000000000000bc64         db  0xa8 ; '.'
000000000000bc65         db  0x8b ; '.'
000000000000bc66         db  0xff ; '.'
000000000000bc67         db  0xff ; '.'
000000000000bc68         db  0xa8 ; '.'
000000000000bc69         db  0x8b ; '.'
000000000000bc6a         db  0xff ; '.'
000000000000bc6b         db  0xff ; '.'
000000000000bc6c         db  0xa8 ; '.'
000000000000bc6d         db  0x8b ; '.'
000000000000bc6e         db  0xff ; '.'
000000000000bc6f         db  0xff ; '.'
000000000000bc70         db  0xa8 ; '.'
000000000000bc71         db  0x8b ; '.'
000000000000bc72         db  0xff ; '.'
000000000000bc73         db  0xff ; '.'
000000000000bc74         db  0xa8 ; '.'
000000000000bc75         db  0x8b ; '.'
000000000000bc76         db  0xff ; '.'
000000000000bc77         db  0xff ; '.'
000000000000bc78         db  0xa8 ; '.'
000000000000bc79         db  0x8b ; '.'
000000000000bc7a         db  0xff ; '.'
000000000000bc7b         db  0xff ; '.'
000000000000bc7c         db  0xa8 ; '.'
000000000000bc7d         db  0x8b ; '.'
000000000000bc7e         db  0xff ; '.'
000000000000bc7f         db  0xff ; '.'
000000000000bc80         db  0xa8 ; '.'
000000000000bc81         db  0x8b ; '.'
000000000000bc82         db  0xff ; '.'
000000000000bc83         db  0xff ; '.'
000000000000bc84         db  0xa8 ; '.'
000000000000bc85         db  0x8b ; '.'
000000000000bc86         db  0xff ; '.'
000000000000bc87         db  0xff ; '.'
000000000000bc88         db  0x80 ; '.'
000000000000bc89         db  0x8d ; '.'
000000000000bc8a         db  0xff ; '.'
000000000000bc8b         db  0xff ; '.'
000000000000bc8c         db  0x68 ; 'h'
000000000000bc8d         db  0x8d ; '.'
000000000000bc8e         db  0xff ; '.'
000000000000bc8f         db  0xff ; '.'
000000000000bc90         db  0x68 ; 'h'
000000000000bc91         db  0x8d ; '.'
000000000000bc92         db  0xff ; '.'
000000000000bc93         db  0xff ; '.'
000000000000bc94         db  0x50 ; 'P'
000000000000bc95         db  0x8d ; '.'
000000000000bc96         db  0xff ; '.'
000000000000bc97         db  0xff ; '.'
000000000000bc98         db  0x68 ; 'h'
000000000000bc99         db  0x8d ; '.'
000000000000bc9a         db  0xff ; '.'
000000000000bc9b         db  0xff ; '.'
000000000000bc9c         db  0x38 ; '8'
000000000000bc9d         db  0x8d ; '.'
000000000000bc9e         db  0xff ; '.'
000000000000bc9f         db  0xff ; '.'
000000000000bca0         db  0x68 ; 'h'
000000000000bca1         db  0x8d ; '.'
000000000000bca2         db  0xff ; '.'
000000000000bca3         db  0xff ; '.'
000000000000bca4         db  0xa8 ; '.'
000000000000bca5         db  0x89 ; '.'
000000000000bca6         db  0xff ; '.'
000000000000bca7         db  0xff ; '.'
000000000000bca8         db  0x68 ; 'h'
000000000000bca9         db  0x8d ; '.'
000000000000bcaa         db  0xff ; '.'
000000000000bcab         db  0xff ; '.'
000000000000bcac         db  0x68 ; 'h'
000000000000bcad         db  0x8d ; '.'
000000000000bcae         db  0xff ; '.'
000000000000bcaf         db  0xff ; '.'
000000000000bcb0         db  0x68 ; 'h'
000000000000bcb1         db  0x8d ; '.'
000000000000bcb2         db  0xff ; '.'
000000000000bcb3         db  0xff ; '.'
000000000000bcb4         db  0x38 ; '8'
000000000000bcb5         db  0x8d ; '.'
000000000000bcb6         db  0xff ; '.'
000000000000bcb7         db  0xff ; '.'
000000000000bcb8         db  0x38 ; '8'
000000000000bcb9         db  0x8d ; '.'
000000000000bcba         db  0xff ; '.'
000000000000bcbb         db  0xff ; '.'
000000000000bcbc         db  0x38 ; '8'
000000000000bcbd         db  0x8d ; '.'
000000000000bcbe         db  0xff ; '.'
000000000000bcbf         db  0xff ; '.'
000000000000bcc0         db  0x38 ; '8'
000000000000bcc1         db  0x8d ; '.'
000000000000bcc2         db  0xff ; '.'
000000000000bcc3         db  0xff ; '.'
000000000000bcc4         db  0x38 ; '8'
000000000000bcc5         db  0x8d ; '.'
000000000000bcc6         db  0xff ; '.'
000000000000bcc7         db  0xff ; '.'
000000000000bcc8         db  0x38 ; '8'
000000000000bcc9         db  0x8d ; '.'
000000000000bcca         db  0xff ; '.'
000000000000bccb         db  0xff ; '.'
000000000000bccc         db  0x38 ; '8'
000000000000bccd         db  0x8d ; '.'
000000000000bcce         db  0xff ; '.'
000000000000bccf         db  0xff ; '.'
000000000000bcd0         db  0x38 ; '8'
000000000000bcd1         db  0x8d ; '.'
000000000000bcd2         db  0xff ; '.'
000000000000bcd3         db  0xff ; '.'
000000000000bcd4         db  0x38 ; '8'
000000000000bcd5         db  0x8d ; '.'
000000000000bcd6         db  0xff ; '.'
000000000000bcd7         db  0xff ; '.'
000000000000bcd8         db  0x38 ; '8'
000000000000bcd9         db  0x8d ; '.'
000000000000bcda         db  0xff ; '.'
000000000000bcdb         db  0xff ; '.'
000000000000bcdc         db  0x38 ; '8'
000000000000bcdd         db  0x8d ; '.'
000000000000bcde         db  0xff ; '.'
000000000000bcdf         db  0xff ; '.'
000000000000bce0         db  0x38 ; '8'
000000000000bce1         db  0x8d ; '.'
000000000000bce2         db  0xff ; '.'
000000000000bce3         db  0xff ; '.'
000000000000bce4         db  0x38 ; '8'
000000000000bce5         db  0x8d ; '.'
000000000000bce6         db  0xff ; '.'
000000000000bce7         db  0xff ; '.'
000000000000bce8         db  0x38 ; '8'
000000000000bce9         db  0x8d ; '.'
000000000000bcea         db  0xff ; '.'
000000000000bceb         db  0xff ; '.'
000000000000bcec         db  0x38 ; '8'
000000000000bced         db  0x8d ; '.'
000000000000bcee         db  0xff ; '.'
000000000000bcef         db  0xff ; '.'
000000000000bcf0         db  0x38 ; '8'
000000000000bcf1         db  0x8d ; '.'
000000000000bcf2         db  0xff ; '.'
000000000000bcf3         db  0xff ; '.'
000000000000bcf4         db  0x68 ; 'h'
000000000000bcf5         db  0x8d ; '.'
000000000000bcf6         db  0xff ; '.'
000000000000bcf7         db  0xff ; '.'
000000000000bcf8         db  0x68 ; 'h'
000000000000bcf9         db  0x8d ; '.'
000000000000bcfa         db  0xff ; '.'
000000000000bcfb         db  0xff ; '.'
000000000000bcfc         db  0x68 ; 'h'
000000000000bcfd         db  0x8d ; '.'
000000000000bcfe         db  0xff ; '.'
000000000000bcff         db  0xff ; '.'
000000000000bd00         db  0x68 ; 'h'
000000000000bd01         db  0x8d ; '.'
000000000000bd02         db  0xff ; '.'
000000000000bd03         db  0xff ; '.'
000000000000bd04         db  0x78 ; 'x'
000000000000bd05         db  0x89 ; '.'
000000000000bd06         db  0xff ; '.'
000000000000bd07         db  0xff ; '.'
000000000000bd08         db  0xa8 ; '.'
000000000000bd09         db  0x8b ; '.'
000000000000bd0a         db  0xff ; '.'
000000000000bd0b         db  0xff ; '.'
000000000000bd0c         db  0x38 ; '8'
000000000000bd0d         db  0x8d ; '.'
000000000000bd0e         db  0xff ; '.'
000000000000bd0f         db  0xff ; '.'
000000000000bd10         db  0x38 ; '8'
000000000000bd11         db  0x8d ; '.'
000000000000bd12         db  0xff ; '.'
000000000000bd13         db  0xff ; '.'
000000000000bd14         db  0x38 ; '8'
000000000000bd15         db  0x8d ; '.'
000000000000bd16         db  0xff ; '.'
000000000000bd17         db  0xff ; '.'
000000000000bd18         db  0x38 ; '8'
000000000000bd19         db  0x8d ; '.'
000000000000bd1a         db  0xff ; '.'
000000000000bd1b         db  0xff ; '.'
000000000000bd1c         db  0x38 ; '8'
000000000000bd1d         db  0x8d ; '.'
000000000000bd1e         db  0xff ; '.'
000000000000bd1f         db  0xff ; '.'
000000000000bd20         db  0x38 ; '8'
000000000000bd21         db  0x8d ; '.'
000000000000bd22         db  0xff ; '.'
000000000000bd23         db  0xff ; '.'
000000000000bd24         db  0x38 ; '8'
000000000000bd25         db  0x8d ; '.'
000000000000bd26         db  0xff ; '.'
000000000000bd27         db  0xff ; '.'
000000000000bd28         db  0x38 ; '8'
000000000000bd29         db  0x8d ; '.'
000000000000bd2a         db  0xff ; '.'
000000000000bd2b         db  0xff ; '.'
000000000000bd2c         db  0x38 ; '8'
000000000000bd2d         db  0x8d ; '.'
000000000000bd2e         db  0xff ; '.'
000000000000bd2f         db  0xff ; '.'
000000000000bd30         db  0x38 ; '8'
000000000000bd31         db  0x8d ; '.'
000000000000bd32         db  0xff ; '.'
000000000000bd33         db  0xff ; '.'
000000000000bd34         db  0x38 ; '8'
000000000000bd35         db  0x8d ; '.'
000000000000bd36         db  0xff ; '.'
000000000000bd37         db  0xff ; '.'
000000000000bd38         db  0x38 ; '8'
000000000000bd39         db  0x8d ; '.'
000000000000bd3a         db  0xff ; '.'
000000000000bd3b         db  0xff ; '.'
000000000000bd3c         db  0x38 ; '8'
000000000000bd3d         db  0x8d ; '.'
000000000000bd3e         db  0xff ; '.'
000000000000bd3f         db  0xff ; '.'
000000000000bd40         db  0x38 ; '8'
000000000000bd41         db  0x8d ; '.'
000000000000bd42         db  0xff ; '.'
000000000000bd43         db  0xff ; '.'
000000000000bd44         db  0x38 ; '8'
000000000000bd45         db  0x8d ; '.'
000000000000bd46         db  0xff ; '.'
000000000000bd47         db  0xff ; '.'
000000000000bd48         db  0x38 ; '8'
000000000000bd49         db  0x8d ; '.'
000000000000bd4a         db  0xff ; '.'
000000000000bd4b         db  0xff ; '.'
000000000000bd4c         db  0x38 ; '8'
000000000000bd4d         db  0x8d ; '.'
000000000000bd4e         db  0xff ; '.'
000000000000bd4f         db  0xff ; '.'
000000000000bd50         db  0x38 ; '8'
000000000000bd51         db  0x8d ; '.'
000000000000bd52         db  0xff ; '.'
000000000000bd53         db  0xff ; '.'
000000000000bd54         db  0x38 ; '8'
000000000000bd55         db  0x8d ; '.'
000000000000bd56         db  0xff ; '.'
000000000000bd57         db  0xff ; '.'
000000000000bd58         db  0x38 ; '8'
000000000000bd59         db  0x8d ; '.'
000000000000bd5a         db  0xff ; '.'
000000000000bd5b         db  0xff ; '.'
000000000000bd5c         db  0x38 ; '8'
000000000000bd5d         db  0x8d ; '.'
000000000000bd5e         db  0xff ; '.'
000000000000bd5f         db  0xff ; '.'
000000000000bd60         db  0x38 ; '8'
000000000000bd61         db  0x8d ; '.'
000000000000bd62         db  0xff ; '.'
000000000000bd63         db  0xff ; '.'
000000000000bd64         db  0x38 ; '8'
000000000000bd65         db  0x8d ; '.'
000000000000bd66         db  0xff ; '.'
000000000000bd67         db  0xff ; '.'
000000000000bd68         db  0x38 ; '8'
000000000000bd69         db  0x8d ; '.'
000000000000bd6a         db  0xff ; '.'
000000000000bd6b         db  0xff ; '.'
000000000000bd6c         db  0x38 ; '8'
000000000000bd6d         db  0x8d ; '.'
000000000000bd6e         db  0xff ; '.'
000000000000bd6f         db  0xff ; '.'
000000000000bd70         db  0x38 ; '8'
000000000000bd71         db  0x8d ; '.'
000000000000bd72         db  0xff ; '.'
000000000000bd73         db  0xff ; '.'
000000000000bd74         db  0x68 ; 'h'
000000000000bd75         db  0x8d ; '.'
000000000000bd76         db  0xff ; '.'
000000000000bd77         db  0xff ; '.'
000000000000bd78         db  0x38 ; '8'
000000000000bd79         db  0x8c ; '.'
000000000000bd7a         db  0xff ; '.'
000000000000bd7b         db  0xff ; '.'
000000000000bd7c         db  0x38 ; '8'
000000000000bd7d         db  0x8d ; '.'
000000000000bd7e         db  0xff ; '.'
000000000000bd7f         db  0xff ; '.'
000000000000bd80         db  0x68 ; 'h'
000000000000bd81         db  0x8d ; '.'
000000000000bd82         db  0xff ; '.'
000000000000bd83         db  0xff ; '.'
000000000000bd84         db  0x38 ; '8'
000000000000bd85         db  0x8d ; '.'
000000000000bd86         db  0xff ; '.'
000000000000bd87         db  0xff ; '.'
000000000000bd88         db  0x68 ; 'h'
000000000000bd89         db  0x8d ; '.'
000000000000bd8a         db  0xff ; '.'
000000000000bd8b         db  0xff ; '.'
000000000000bd8c         db  0x38 ; '8'
000000000000bd8d         db  0x8d ; '.'
000000000000bd8e         db  0xff ; '.'
000000000000bd8f         db  0xff ; '.'
000000000000bd90         db  0x38 ; '8'
000000000000bd91         db  0x8d ; '.'
000000000000bd92         db  0xff ; '.'
000000000000bd93         db  0xff ; '.'
000000000000bd94         db  0x38 ; '8'
000000000000bd95         db  0x8d ; '.'
000000000000bd96         db  0xff ; '.'
000000000000bd97         db  0xff ; '.'
000000000000bd98         db  0x38 ; '8'
000000000000bd99         db  0x8d ; '.'
000000000000bd9a         db  0xff ; '.'
000000000000bd9b         db  0xff ; '.'
000000000000bd9c         db  0x38 ; '8'
000000000000bd9d         db  0x8d ; '.'
000000000000bd9e         db  0xff ; '.'
000000000000bd9f         db  0xff ; '.'
000000000000bda0         db  0x38 ; '8'
000000000000bda1         db  0x8d ; '.'
000000000000bda2         db  0xff ; '.'
000000000000bda3         db  0xff ; '.'
000000000000bda4         db  0x38 ; '8'
000000000000bda5         db  0x8d ; '.'
000000000000bda6         db  0xff ; '.'
000000000000bda7         db  0xff ; '.'
000000000000bda8         db  0x38 ; '8'
000000000000bda9         db  0x8d ; '.'
000000000000bdaa         db  0xff ; '.'
000000000000bdab         db  0xff ; '.'
000000000000bdac         db  0x38 ; '8'
000000000000bdad         db  0x8d ; '.'
000000000000bdae         db  0xff ; '.'
000000000000bdaf         db  0xff ; '.'
000000000000bdb0         db  0x38 ; '8'
000000000000bdb1         db  0x8d ; '.'
000000000000bdb2         db  0xff ; '.'
000000000000bdb3         db  0xff ; '.'
000000000000bdb4         db  0x38 ; '8'
000000000000bdb5         db  0x8d ; '.'
000000000000bdb6         db  0xff ; '.'
000000000000bdb7         db  0xff ; '.'
000000000000bdb8         db  0x38 ; '8'
000000000000bdb9         db  0x8d ; '.'
000000000000bdba         db  0xff ; '.'
000000000000bdbb         db  0xff ; '.'
000000000000bdbc         db  0x38 ; '8'
000000000000bdbd         db  0x8d ; '.'
000000000000bdbe         db  0xff ; '.'
000000000000bdbf         db  0xff ; '.'
000000000000bdc0         db  0x38 ; '8'
000000000000bdc1         db  0x8d ; '.'
000000000000bdc2         db  0xff ; '.'
000000000000bdc3         db  0xff ; '.'
000000000000bdc4         db  0x38 ; '8'
000000000000bdc5         db  0x8d ; '.'
000000000000bdc6         db  0xff ; '.'
000000000000bdc7         db  0xff ; '.'
000000000000bdc8         db  0x38 ; '8'
000000000000bdc9         db  0x8d ; '.'
000000000000bdca         db  0xff ; '.'
000000000000bdcb         db  0xff ; '.'
000000000000bdcc         db  0x38 ; '8'
000000000000bdcd         db  0x8d ; '.'
000000000000bdce         db  0xff ; '.'
000000000000bdcf         db  0xff ; '.'
000000000000bdd0         db  0x38 ; '8'
000000000000bdd1         db  0x8d ; '.'
000000000000bdd2         db  0xff ; '.'
000000000000bdd3         db  0xff ; '.'
000000000000bdd4         db  0x38 ; '8'
000000000000bdd5         db  0x8d ; '.'
000000000000bdd6         db  0xff ; '.'
000000000000bdd7         db  0xff ; '.'
000000000000bdd8         db  0x38 ; '8'
000000000000bdd9         db  0x8d ; '.'
000000000000bdda         db  0xff ; '.'
000000000000bddb         db  0xff ; '.'
000000000000bddc         db  0x38 ; '8'
000000000000bddd         db  0x8d ; '.'
000000000000bdde         db  0xff ; '.'
000000000000bddf         db  0xff ; '.'
000000000000bde0         db  0x38 ; '8'
000000000000bde1         db  0x8d ; '.'
000000000000bde2         db  0xff ; '.'
000000000000bde3         db  0xff ; '.'
000000000000bde4         db  0x38 ; '8'
000000000000bde5         db  0x8d ; '.'
000000000000bde6         db  0xff ; '.'
000000000000bde7         db  0xff ; '.'
000000000000bde8         db  0x38 ; '8'
000000000000bde9         db  0x8d ; '.'
000000000000bdea         db  0xff ; '.'
000000000000bdeb         db  0xff ; '.'
000000000000bdec         db  0x38 ; '8'
000000000000bded         db  0x8d ; '.'
000000000000bdee         db  0xff ; '.'
000000000000bdef         db  0xff ; '.'
000000000000bdf0         db  0x38 ; '8'
000000000000bdf1         db  0x8d ; '.'
000000000000bdf2         db  0xff ; '.'
000000000000bdf3         db  0xff ; '.'
000000000000bdf4         db  0xa8 ; '.'
000000000000bdf5         db  0x88 ; '.'
000000000000bdf6         db  0xff ; '.'
000000000000bdf7         db  0xff ; '.'
000000000000bdf8         db  0x68 ; 'h'
000000000000bdf9         db  0x8d ; '.'
000000000000bdfa         db  0xff ; '.'
000000000000bdfb         db  0xff ; '.'
000000000000bdfc         db  0xa8 ; '.'
000000000000bdfd         db  0x88 ; '.'
000000000000bdfe         db  0xff ; '.'
000000000000bdff         db  0xff ; '.'
000000000000be00         db  0x50 ; 'P'
000000000000be01         db  0x8d ; '.'
000000000000be02         db  0xff ; '.'
000000000000be03         db  0xff ; '.'
000000000000be04         db  0x00 ; '.'
000000000000be05         db  0x00 ; '.'
000000000000be06         db  0x00 ; '.'
000000000000be07         db  0x00 ; '.'
000000000000be08         db  0x00 ; '.'
000000000000be09         db  0x00 ; '.'
000000000000be0a         db  0x00 ; '.'
000000000000be0b         db  0x00 ; '.'
000000000000be0c         db  0x00 ; '.'
000000000000be0d         db  0x00 ; '.'
000000000000be0e         db  0x00 ; '.'
000000000000be0f         db  0x00 ; '.'
000000000000be10         db  0x00 ; '.'
000000000000be11         db  0x00 ; '.'
000000000000be12         db  0x00 ; '.'
000000000000be13         db  0x00 ; '.'
000000000000be14         db  0x00 ; '.'
000000000000be15         db  0x00 ; '.'
000000000000be16         db  0x00 ; '.'
000000000000be17         db  0x00 ; '.'
000000000000be18         db  0x00 ; '.'
000000000000be19         db  0x00 ; '.'
000000000000be1a         db  0x00 ; '.'
000000000000be1b         db  0x00 ; '.'
000000000000be1c         db  0x00 ; '.'
000000000000be1d         db  0x00 ; '.'
000000000000be1e         db  0x00 ; '.'
000000000000be1f         db  0x00 ; '.'
                     quoting_style_vals:
000000000000be20         db  0x00 ; '.'
000000000000be21         db  0x00 ; '.'
000000000000be22         db  0x00 ; '.'
000000000000be23         db  0x00 ; '.'
000000000000be24         db  0x01 ; '.'
000000000000be25         db  0x00 ; '.'
000000000000be26         db  0x00 ; '.'
000000000000be27         db  0x00 ; '.'
000000000000be28         db  0x02 ; '.'
000000000000be29         db  0x00 ; '.'
000000000000be2a         db  0x00 ; '.'
000000000000be2b         db  0x00 ; '.'
000000000000be2c         db  0x03 ; '.'
000000000000be2d         db  0x00 ; '.'
000000000000be2e         db  0x00 ; '.'
000000000000be2f         db  0x00 ; '.'
000000000000be30         db  0x04 ; '.'
000000000000be31         db  0x00 ; '.'
000000000000be32         db  0x00 ; '.'
000000000000be33         db  0x00 ; '.'
000000000000be34         db  0x05 ; '.'
000000000000be35         db  0x00 ; '.'
000000000000be36         db  0x00 ; '.'
000000000000be37         db  0x00 ; '.'
000000000000be38         db  0x06 ; '.'
000000000000be39         db  0x00 ; '.'
000000000000be3a         db  0x00 ; '.'
000000000000be3b         db  0x00 ; '.'
000000000000be3c         db  0x07 ; '.'
000000000000be3d         db  0x00 ; '.'
000000000000be3e         db  0x00 ; '.'
000000000000be3f         db  0x00 ; '.'
000000000000be40         db  0x08 ; '.'
000000000000be41         db  0x00 ; '.'
000000000000be42         db  0x00 ; '.'
000000000000be43         db  0x00 ; '.'
000000000000be44         db  0x09 ; '.'
000000000000be45         db  0x00 ; '.'
000000000000be46         db  0x00 ; '.'
000000000000be47         db  0x00 ; '.'
                     aSSSn:
000000000000be48         db         "%s (%s) %s\n", 0                           ; DATA XREF=version_etc_arn+35
                     aSSn:
000000000000be54         db         "%s %s\n", 0                                ; DATA XREF=version_etc_arn+318
000000000000be5b         db  0x28 ; '('                                         ; DATA XREF=version_etc_arn+60
000000000000be5c         db  0x43 ; 'C'
000000000000be5d         db  0x29 ; ')'
000000000000be5e         db  0x00 ; '.'
                     aWrittenBySn:
000000000000be5f         db         "Written by %s.\n", 0                       ; DATA XREF=version_etc_arn+443
                     aWrittenBySAndS:
000000000000be6f         db         "Written by %s and %s.\n", 0                ; DATA XREF=version_etc_arn+508
                     aWrittenBySSAnd:
000000000000be86         db         "Written by %s, %s, and %s.\n", 0           ; DATA XREF=version_etc_arn+584
                     aNreportBugsToS:
000000000000bea2         db         "\nReport bugs to: %s\n", 0                 ; DATA XREF=emit_bug_reporting_address+1
                     aSHomePageSn:
000000000000beb7         db         "%s home page: <%s>\n", 0                   ; DATA XREF=emit_bug_reporting_address+42
000000000000becb         align      16
                     aNlicenseGplv3G:
000000000000bed0         db         "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n", 0 ; DATA XREF=version_etc_arn+110
000000000000bf9c         align      32
                     aWrittenBySSSna:
000000000000bfa0         db         "Written by %s, %s, %s,\nand %s.\n", 0      ; DATA XREF=version_etc_arn+656
                     aWrittenBySSSns_bfc0:        // aWrittenBySSSns
000000000000bfc0         db         "Written by %s, %s, %s,\n%s, and %s.\n", 0  ; DATA XREF=version_etc_arn+748
000000000000bfe4         db  0x00 ; '.'
000000000000bfe5         db  0x00 ; '.'
000000000000bfe6         db  0x00 ; '.'
000000000000bfe7         db  0x00 ; '.'
000000000000bfe8         db  0x57 ; 'W'                                         ; DATA XREF=version_etc_arn+800
000000000000bfe9         db  0x72 ; 'r'
000000000000bfea         db  0x69 ; 'i'
000000000000bfeb         db  0x74 ; 't'
000000000000bfec         db  0x74 ; 't'
000000000000bfed         db  0x65 ; 'e'
000000000000bfee         db  0x6e ; 'n'
000000000000bfef         db  0x20 ; ' '
000000000000bff0         db  0x62 ; 'b'
000000000000bff1         db  0x79 ; 'y'
000000000000bff2         db  0x20 ; ' '
000000000000bff3         db  0x25 ; '%'
000000000000bff4         db  0x73 ; 's'
000000000000bff5         db  0x2c ; ','
000000000000bff6         db  0x20 ; ' '
000000000000bff7         db  0x25 ; '%'
000000000000bff8         db  0x73 ; 's'
000000000000bff9         db  0x2c ; ','
000000000000bffa         db  0x20 ; ' '
000000000000bffb         db  0x25 ; '%'
000000000000bffc         db  0x73 ; 's'
000000000000bffd         db  0x2c ; ','
000000000000bffe         db  0x0a ; '.'
000000000000bfff         db  0x25 ; '%'
                     aSSAndSn:
000000000000c000         db         "s, %s, and %s.\n", 0                       ; DATA XREF=file_type+71
                     aWrittenBySSSns_c010:        // aWrittenBySSSns
000000000000c010         db         "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n", 0 ; DATA XREF=version_etc_arn+904
000000000000c03c         align      64
                     aWrittenBySSSns_c040:        // aWrittenBySSSns
000000000000c040         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n", 0 ; DATA XREF=version_etc_arn+184
                     aWrittenBySSSns:
000000000000c070         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n", 0 ; DATA XREF=version_etc_arn+360
000000000000c0a4         align      8
                     aWrittenBySSSns_c0a8:        // aWrittenBySSSns
000000000000c0a8         db         "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n", 0 ; DATA XREF=version_etc_arn+997
000000000000c0e4         align      8
                     aGeneralHelpUsi:
000000000000c0e8         db         "General help using GNU software: <https://www.gnu.org/gethelp/>\n", 0 ; DATA XREF=emit_bug_reporting_address+97
000000000000c129         align      4
                     switch_table_c12c:        // switch_table
000000000000c12c         dd         version_etc_arn.loc_6006-switch_table_c12c, version_etc_arn.loc_6098-switch_table_c12c, version_etc_arn.loc_60d8-switch_table_c12c, version_etc_arn.loc_6120-switch_table_c12c ; switch table used at 0x5f84 containing 10 entries, DATA XREF=version_etc_arn+150
000000000000c13c         dd         version_etc_arn.loc_6170-switch_table_c12c, version_etc_arn.loc_61c8-switch_table_c12c, version_etc_arn.loc_61f8-switch_table_c12c, version_etc_arn.loc_6260-switch_table_c12c
000000000000c14c         dd         version_etc_arn.loc_5f90-switch_table_c12c, version_etc_arn.loc_6040-switch_table_c12c
000000000000c154         align      32
                     version_etc_copyright:
000000000000c160         db         "Copyright %s %d Free Software Foundation, Inc.", 0 ; DATA XREF=version_etc_arn+79
                     aMemoryExhauste:
000000000000c18f         db         "memory exhausted", 0                       ; DATA XREF=xalloc_die
                     aCoreutils831li_c1a0:        // aCoreutils831li
000000000000c1a0         db         "../coreutils-8.31/lib/xfts.c", 0           ; DATA XREF=sub_67ff+8
                     aErrnoEinval:
000000000000c1bd         db         "errno != EINVAL", 0                        ; DATA XREF=sub_67ff+15
000000000000c1cd         align      16
                     __PRETTY_FUNCTION__.3434:
000000000000c1d0         db         "xfts_open", 0                              ; DATA XREF=sub_67ff+1
000000000000c1da         db  0x00 ; '.'
000000000000c1db         db  0x00 ; '.'
000000000000c1dc         db  0x00 ; '.'
000000000000c1dd         db  0x00 ; '.'
000000000000c1de         db  0x00 ; '.'
000000000000c1df         db  0x00 ; '.'
                     CSWTCH.53:
000000000000c1e0         db  0x00 ; '.'                                         ; DATA XREF=fts_build+372, fts_build+2486
000000000000c1e1         db  0x10 ; '.'
000000000000c1e2         db  0x00 ; '.'
000000000000c1e3         db  0x00 ; '.'
000000000000c1e4         db  0x00 ; '.'
000000000000c1e5         db  0x20 ; ' '
000000000000c1e6         db  0x00 ; '.'
000000000000c1e7         db  0x00 ; '.'
000000000000c1e8         db  0x00 ; '.'
000000000000c1e9         db  0x00 ; '.'
000000000000c1ea         db  0x00 ; '.'
000000000000c1eb         db  0x00 ; '.'
000000000000c1ec         db  0x00 ; '.'
000000000000c1ed         db  0x40 ; '@'
000000000000c1ee         db  0x00 ; '.'
000000000000c1ef         db  0x00 ; '.'
000000000000c1f0         db  0x00 ; '.'
000000000000c1f1         db  0x00 ; '.'
000000000000c1f2         db  0x00 ; '.'
000000000000c1f3         db  0x00 ; '.'
000000000000c1f4         db  0x00 ; '.'
000000000000c1f5         db  0x60 ; '`'
000000000000c1f6         db  0x00 ; '.'
000000000000c1f7         db  0x00 ; '.'
000000000000c1f8         db  0x00 ; '.'
000000000000c1f9         db  0x00 ; '.'
000000000000c1fa         db  0x00 ; '.'
000000000000c1fb         db  0x00 ; '.'
000000000000c1fc         db  0x00 ; '.'
000000000000c1fd         db  0x80 ; '.'
000000000000c1fe         db  0x00 ; '.'
000000000000c1ff         db  0x00 ; '.'
000000000000c200         db  0x00 ; '.'
000000000000c201         db  0x00 ; '.'
000000000000c202         db  0x00 ; '.'
000000000000c203         db  0x00 ; '.'
000000000000c204         db  0x00 ; '.'
000000000000c205         db  0xa0 ; '.'
000000000000c206         db  0x00 ; '.'
000000000000c207         db  0x00 ; '.'
000000000000c208         db  0x00 ; '.'
000000000000c209         db  0x00 ; '.'
000000000000c20a         db  0x00 ; '.'
000000000000c20b         db  0x00 ; '.'
000000000000c20c         db  0x00 ; '.'
000000000000c20d         db  0xc0 ; '.'
000000000000c20e         db  0x00 ; '.'
000000000000c20f         db  0x00 ; '.'
                     aCoreutils831li:
000000000000c210         db         "../coreutils-8.31/lib/cycle-check.c", 0    ; DATA XREF=cycle_check+110
                     aStatemagic9827:
000000000000c234         db         "state->magic == 9827862", 0                ; DATA XREF=cycle_check+117
000000000000c24c         align      16
                     __PRETTY_FUNCTION__.3994:
000000000000c250         db         "cycle_check", 0                            ; DATA XREF=cycle_check+103
000000000000c25c         db  0x43 ; 'C'                                         ; DATA XREF=hard_locale+24
000000000000c25d         db  0x00 ; '.'
                     aPosix:
000000000000c25e         db         "POSIX", 0                                  ; DATA XREF=hard_locale+64
                     aEntriesLun:
000000000000c264         db         "# entries:         %lu\n", 0               ; DATA XREF=hash_print_statistics+101
                     aBucketsLun:
000000000000c27c         db         "# buckets:         %lu\n", 0               ; DATA XREF=hash_print_statistics+123
                     aMaxBucketLengt:
000000000000c294         db         "max bucket length: %lu\n", 0               ; DATA XREF=hash_print_statistics+232
000000000000c2ac         align      16
                     aBucketsUsedLu2:
000000000000c2b0         db         "# buckets used:    %lu (%.2f%%)\n", 0      ; DATA XREF=hash_print_statistics+188
000000000000c2d1         db  0x00 ; '.'
000000000000c2d2         db  0x00 ; '.'
000000000000c2d3         db  0x00 ; '.'
000000000000c2d4         db  0x00 ; '.'
000000000000c2d5         db  0x00 ; '.'
000000000000c2d6         db  0x00 ; '.'
000000000000c2d7         db  0x00 ; '.'
000000000000c2d8         db  0x00 ; '.'
000000000000c2d9         db  0x00 ; '.'
000000000000c2da         db  0x00 ; '.'
000000000000c2db         db  0x00 ; '.'
000000000000c2dc         db  0x00 ; '.'
000000000000c2dd         db  0x00 ; '.'
000000000000c2de         db  0x00 ; '.'
000000000000c2df         db  0x00 ; '.'
                     default_tuning:
000000000000c2e0         db  0x00 ; '.'                                         ; DATA XREF=check_tuning.isra.0+3, hash_initialize+272
000000000000c2e1         db  0x00 ; '.'
000000000000c2e2         db  0x00 ; '.'
000000000000c2e3         db  0x00 ; '.'
000000000000c2e4         db  0x00 ; '.'
000000000000c2e5         db  0x00 ; '.'
000000000000c2e6         db  0x80 ; '.'
000000000000c2e7         db  0x3f ; '?'
000000000000c2e8         db  0xcd ; '.'
000000000000c2e9         db  0xcc ; '.'
000000000000c2ea         db  0x4c ; 'L'
000000000000c2eb         db  0x3f ; '?'
000000000000c2ec         db  0xf4 ; '.'
000000000000c2ed         db  0xfd ; '.'
000000000000c2ee         db  0xb4 ; '.'
000000000000c2ef         db  0x3f ; '?'
000000000000c2f0         db  0x00 ; '.'
000000000000c2f1         db  0x00 ; '.'
000000000000c2f2         db  0x00 ; '.'
000000000000c2f3         db  0x00 ; '.'
                     float_c2f4:        // float
000000000000c2f4         dd         0.1f                                        ; DATA XREF=check_tuning.isra.0+25, check_tuning.isra.0+74
                     float_c2f8:        // float
000000000000c2f8         dd         0.9f                                        ; DATA XREF=check_tuning.isra.0+34
                     float_c2fc:        // float
000000000000c2fc         dd         1.1f                                        ; DATA XREF=check_tuning.isra.0+52
                     float_c300:        // float
000000000000c300         dd         0.0f                                        ; DATA XREF=check_tuning.isra.0+65
                     float_c304:        // float
000000000000c304         dd         1.0f                                        ; DATA XREF=check_tuning.isra.0+92
                     float_c308:        // float
000000000000c308         dd         0.8f                                        ; DATA XREF=hash_initialize+290
                     float_c30c:        // float
000000000000c30c         dd         1.84467e+19f                                ; DATA XREF=hash_initialize+318, hash_rehash+64, hash_insert_if_absent+413
                     float_c310:        // float
000000000000c310         dd         9.22337e+18f                                ; DATA XREF=hash_initialize+327, hash_initialize+336, hash_rehash+77, hash_rehash+90, hash_insert_if_absent+422, hash_insert_if_absent+608, hash_delete+250, hash_delete+400
000000000000c314         align      2
000000000000c31e         db  0x59 ; 'Y'
000000000000c31f         db  0x40 ; '@'
                     aAscii:
000000000000c320         db         "ASCII", 0                                  ; DATA XREF=locale_charset+22, locale_charset+48
000000000000c326         db  0x00 ; '.'
000000000000c327         db  0x00 ; '.'


        ; Section .eh_frame_hdr
        ; Range: [0xc328; 0xc824[ (1276 bytes)
        ; File offset : [49960; 51236[ (1276 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000c328         db  0x01 ; '.'
000000000000c329         db  0x1b ; '.'
000000000000c32a         db  0x03 ; '.'
000000000000c32b         db  0x3b ; ';'
000000000000c32c         db  0xfc ; '.'
000000000000c32d         db  0x04 ; '.'
000000000000c32e         db  0x00 ; '.'
000000000000c32f         db  0x00 ; '.'
000000000000c330         db  0x9e ; '.'
000000000000c331         db  0x00 ; '.'
000000000000c332         db  0x00 ; '.'
000000000000c333         db  0x00 ; '.'
000000000000c334         db  0x58 ; 'X'
000000000000c335         db  0x56 ; 'V'
000000000000c336         db  0xff ; '.'
000000000000c337         db  0xff ; '.'
000000000000c338         db  0x48 ; 'H'
000000000000c339         db  0x05 ; '.'
000000000000c33a         db  0x00 ; '.'
000000000000c33b         db  0x00 ; '.'
000000000000c33c         db  0x78 ; 'x'
000000000000c33d         db  0x5a ; 'Z'
000000000000c33e         db  0xff ; '.'
000000000000c33f         db  0xff ; '.'
000000000000c340         db  0x70 ; 'p'
000000000000c341         db  0x05 ; '.'
000000000000c342         db  0x00 ; '.'
000000000000c343         db  0x00 ; '.'
000000000000c344         db  0x88 ; '.'
000000000000c345         db  0x5a ; 'Z'
000000000000c346         db  0xff ; '.'
000000000000c347         db  0xff ; '.'
000000000000c348         db  0xb4 ; '.'
000000000000c349         db  0x05 ; '.'
000000000000c34a         db  0x00 ; '.'
000000000000c34b         db  0x00 ; '.'
000000000000c34c         db  0x68 ; 'h'
000000000000c34d         db  0x60 ; '`'
000000000000c34e         db  0xff ; '.'
000000000000c34f         db  0xff ; '.'
000000000000c350         db  0x18 ; '.'
000000000000c351         db  0x05 ; '.'
000000000000c352         db  0x00 ; '.'
000000000000c353         db  0x00 ; '.'
000000000000c354         db  0x78 ; 'x'
000000000000c355         db  0x61 ; 'a'
000000000000c356         db  0xff ; '.'
000000000000c357         db  0xff ; '.'
000000000000c358         db  0x88 ; '.'
000000000000c359         db  0x05 ; '.'
000000000000c35a         db  0x00 ; '.'
000000000000c35b         db  0x00 ; '.'
000000000000c35c         db  0xc8 ; '.'
000000000000c35d         db  0x65 ; 'e'
000000000000c35e         db  0xff ; '.'
000000000000c35f         db  0xff ; '.'
000000000000c360         db  0x10 ; '.'
000000000000c361         db  0x06 ; '.'
000000000000c362         db  0x00 ; '.'
000000000000c363         db  0x00 ; '.'
000000000000c364         db  0x18 ; '.'
000000000000c365         db  0x68 ; 'h'
000000000000c366         db  0xff ; '.'
000000000000c367         db  0xff ; '.'
000000000000c368         db  0x4c ; 'L'
000000000000c369         db  0x06 ; '.'
000000000000c36a         db  0x00 ; '.'
000000000000c36b         db  0x00 ; '.'
000000000000c36c         db  0x98 ; '.'
000000000000c36d         db  0x68 ; 'h'
000000000000c36e         db  0xff ; '.'
000000000000c36f         db  0xff ; '.'
000000000000c370         db  0x70 ; 'p'
000000000000c371         db  0x06 ; '.'
000000000000c372         db  0x00 ; '.'
000000000000c373         db  0x00 ; '.'
000000000000c374         db  0x68 ; 'h'
000000000000c375         db  0x6d ; 'm'
000000000000c376         db  0xff ; '.'
000000000000c377         db  0xff ; '.'
000000000000c378         db  0xc0 ; '.'
000000000000c379         db  0x06 ; '.'
000000000000c37a         db  0x00 ; '.'
000000000000c37b         db  0x00 ; '.'
000000000000c37c         db  0xc8 ; '.'
000000000000c37d         db  0x75 ; 'u'
000000000000c37e         db  0xff ; '.'
000000000000c37f         db  0xff ; '.'
000000000000c380         db  0x10 ; '.'
000000000000c381         db  0x07 ; '.'
000000000000c382         db  0x00 ; '.'
000000000000c383         db  0x00 ; '.'
000000000000c384         db  0xd8 ; '.'
000000000000c385         db  0x75 ; 'u'
000000000000c386         db  0xff ; '.'
000000000000c387         db  0xff ; '.'
000000000000c388         db  0x24 ; '$'
000000000000c389         db  0x07 ; '.'
000000000000c38a         db  0x00 ; '.'
000000000000c38b         db  0x00 ; '.'
000000000000c38c         db  0xf8 ; '.'
000000000000c38d         db  0x76 ; 'v'
000000000000c38e         db  0xff ; '.'
000000000000c38f         db  0xff ; '.'
000000000000c390         db  0x70 ; 'p'
000000000000c391         db  0x07 ; '.'
000000000000c392         db  0x00 ; '.'
000000000000c393         db  0x00 ; '.'
000000000000c394         db  0x78 ; 'x'
000000000000c395         db  0x77 ; 'w'
000000000000c396         db  0xff ; '.'
000000000000c397         db  0xff ; '.'
000000000000c398         db  0x9c ; '.'
000000000000c399         db  0x07 ; '.'
000000000000c39a         db  0x00 ; '.'
000000000000c39b         db  0x00 ; '.'
000000000000c39c         db  0x98 ; '.'
000000000000c39d         db  0x78 ; 'x'
000000000000c39e         db  0xff ; '.'
000000000000c39f         db  0xff ; '.'
000000000000c3a0         db  0xfc ; '.'
000000000000c3a1         db  0x07 ; '.'
000000000000c3a2         db  0x00 ; '.'
000000000000c3a3         db  0x00 ; '.'
000000000000c3a4         db  0x08 ; '.'
000000000000c3a5         db  0x79 ; 'y'
000000000000c3a6         db  0xff ; '.'
000000000000c3a7         db  0xff ; '.'
000000000000c3a8         db  0x48 ; 'H'
000000000000c3a9         db  0x08 ; '.'
000000000000c3aa         db  0x00 ; '.'
000000000000c3ab         db  0x00 ; '.'
000000000000c3ac         db  0x58 ; 'X'
000000000000c3ad         db  0x79 ; 'y'
000000000000c3ae         db  0xff ; '.'
000000000000c3af         db  0xff ; '.'
000000000000c3b0         db  0x88 ; '.'
000000000000c3b1         db  0x08 ; '.'
000000000000c3b2         db  0x00 ; '.'
000000000000c3b3         db  0x00 ; '.'
000000000000c3b4         db  0x68 ; 'h'
000000000000c3b5         db  0x79 ; 'y'
000000000000c3b6         db  0xff ; '.'
000000000000c3b7         db  0xff ; '.'
000000000000c3b8         db  0x9c ; '.'
000000000000c3b9         db  0x08 ; '.'
000000000000c3ba         db  0x00 ; '.'
000000000000c3bb         db  0x00 ; '.'
000000000000c3bc         db  0x78 ; 'x'
000000000000c3bd         db  0x7a ; 'z'
000000000000c3be         db  0xff ; '.'
000000000000c3bf         db  0xff ; '.'
000000000000c3c0         db  0xd8 ; '.'
000000000000c3c1         db  0x08 ; '.'
000000000000c3c2         db  0x00 ; '.'
000000000000c3c3         db  0x00 ; '.'
000000000000c3c4         db  0x88 ; '.'
000000000000c3c5         db  0x7a ; 'z'
000000000000c3c6         db  0xff ; '.'
000000000000c3c7         db  0xff ; '.'
000000000000c3c8         db  0xec ; '.'
000000000000c3c9         db  0x08 ; '.'
000000000000c3ca         db  0x00 ; '.'
000000000000c3cb         db  0x00 ; '.'
000000000000c3cc         db  0x98 ; '.'
000000000000c3cd         db  0x7a ; 'z'
000000000000c3ce         db  0xff ; '.'
000000000000c3cf         db  0xff ; '.'
000000000000c3d0         db  0x00 ; '.'
000000000000c3d1         db  0x09 ; '.'
000000000000c3d2         db  0x00 ; '.'
000000000000c3d3         db  0x00 ; '.'
000000000000c3d4         db  0x48 ; 'H'
000000000000c3d5         db  0x7b ; '{'
000000000000c3d6         db  0xff ; '.'
000000000000c3d7         db  0xff ; '.'
000000000000c3d8         db  0x30 ; '0'
000000000000c3d9         db  0x09 ; '.'
000000000000c3da         db  0x00 ; '.'
000000000000c3db         db  0x00 ; '.'
000000000000c3dc         db  0xa8 ; '.'
000000000000c3dd         db  0x7b ; '{'
000000000000c3de         db  0xff ; '.'
000000000000c3df         db  0xff ; '.'
000000000000c3e0         db  0x44 ; 'D'
000000000000c3e1         db  0x09 ; '.'
000000000000c3e2         db  0x00 ; '.'
000000000000c3e3         db  0x00 ; '.'
000000000000c3e4         db  0xf8 ; '.'
000000000000c3e5         db  0x7b ; '{'
000000000000c3e6         db  0xff ; '.'
000000000000c3e7         db  0xff ; '.'
000000000000c3e8         db  0x70 ; 'p'
000000000000c3e9         db  0x09 ; '.'
000000000000c3ea         db  0x00 ; '.'
000000000000c3eb         db  0x00 ; '.'
000000000000c3ec         db  0xe8 ; '.'
000000000000c3ed         db  0x7c ; '|'
000000000000c3ee         db  0xff ; '.'
000000000000c3ef         db  0xff ; '.'
000000000000c3f0         db  0x88 ; '.'
000000000000c3f1         db  0x09 ; '.'
000000000000c3f2         db  0x00 ; '.'
000000000000c3f3         db  0x00 ; '.'
000000000000c3f4         db  0x08 ; '.'
000000000000c3f5         db  0x7d ; '}'
000000000000c3f6         db  0xff ; '.'
000000000000c3f7         db  0xff ; '.'
000000000000c3f8         db  0xa8 ; '.'
000000000000c3f9         db  0x09 ; '.'
000000000000c3fa         db  0x00 ; '.'
000000000000c3fb         db  0x00 ; '.'
000000000000c3fc         db  0x08 ; '.'
000000000000c3fd         db  0x7e ; '~'
000000000000c3fe         db  0xff ; '.'
000000000000c3ff         db  0xff ; '.'
000000000000c400         db  0xf8 ; '.'
000000000000c401         db  0x09 ; '.'
000000000000c402         db  0x00 ; '.'
000000000000c403         db  0x00 ; '.'
000000000000c404         db  0xa8 ; '.'
000000000000c405         db  0x7e ; '~'
000000000000c406         db  0xff ; '.'
000000000000c407         db  0xff ; '.'
000000000000c408         db  0x18 ; '.'
000000000000c409         db  0x0a ; '.'
000000000000c40a         db  0x00 ; '.'
000000000000c40b         db  0x00 ; '.'
000000000000c40c         db  0x98 ; '.'
000000000000c40d         db  0x7f ; '.'
000000000000c40e         db  0xff ; '.'
000000000000c40f         db  0xff ; '.'
000000000000c410         db  0x5c ; '\'
000000000000c411         db  0x0a ; '.'
000000000000c412         db  0x00 ; '.'
000000000000c413         db  0x00 ; '.'
000000000000c414         db  0xd8 ; '.'
000000000000c415         db  0x91 ; '.'
000000000000c416         db  0xff ; '.'
000000000000c417         db  0xff ; '.'
000000000000c418         db  0xd4 ; '.'
000000000000c419         db  0x0a ; '.'
000000000000c41a         db  0x00 ; '.'
000000000000c41b         db  0x00 ; '.'
000000000000c41c         db  0x88 ; '.'
000000000000c41d         db  0x93 ; '.'
000000000000c41e         db  0xff ; '.'
000000000000c41f         db  0xff ; '.'
000000000000c420         db  0x40 ; '@'
000000000000c421         db  0x0b ; '.'
000000000000c422         db  0x00 ; '.'
000000000000c423         db  0x00 ; '.'
000000000000c424         db  0xc8 ; '.'
000000000000c425         db  0x93 ; '.'
000000000000c426         db  0xff ; '.'
000000000000c427         db  0xff ; '.'
000000000000c428         db  0x6c ; 'l'
000000000000c429         db  0x0b ; '.'
000000000000c42a         db  0x00 ; '.'
000000000000c42b         db  0x00 ; '.'
000000000000c42c         db  0xe8 ; '.'
000000000000c42d         db  0x93 ; '.'
000000000000c42e         db  0xff ; '.'
000000000000c42f         db  0xff ; '.'
000000000000c430         db  0x80 ; '.'
000000000000c431         db  0x0b ; '.'
000000000000c432         db  0x00 ; '.'
000000000000c433         db  0x00 ; '.'
000000000000c434         db  0x08 ; '.'
000000000000c435         db  0x94 ; '.'
000000000000c436         db  0xff ; '.'
000000000000c437         db  0xff ; '.'
000000000000c438         db  0x94 ; '.'
000000000000c439         db  0x0b ; '.'
000000000000c43a         db  0x00 ; '.'
000000000000c43b         db  0x00 ; '.'
000000000000c43c         db  0x48 ; 'H'
000000000000c43d         db  0x94 ; '.'
000000000000c43e         db  0xff ; '.'
000000000000c43f         db  0xff ; '.'
000000000000c440         db  0xa8 ; '.'
000000000000c441         db  0x0b ; '.'
000000000000c442         db  0x00 ; '.'
000000000000c443         db  0x00 ; '.'
000000000000c444         db  0x68 ; 'h'
000000000000c445         db  0x94 ; '.'
000000000000c446         db  0xff ; '.'
000000000000c447         db  0xff ; '.'
000000000000c448         db  0xbc ; '.'
000000000000c449         db  0x0b ; '.'
000000000000c44a         db  0x00 ; '.'
000000000000c44b         db  0x00 ; '.'
000000000000c44c         db  0x98 ; '.'
000000000000c44d         db  0x94 ; '.'
000000000000c44e         db  0xff ; '.'
000000000000c44f         db  0xff ; '.'
000000000000c450         db  0xd0 ; '.'
000000000000c451         db  0x0b ; '.'
000000000000c452         db  0x00 ; '.'
000000000000c453         db  0x00 ; '.'
000000000000c454         db  0x18 ; '.'
000000000000c455         db  0x95 ; '.'
000000000000c456         db  0xff ; '.'
000000000000c457         db  0xff ; '.'
000000000000c458         db  0x24 ; '$'
000000000000c459         db  0x0c ; '.'
000000000000c45a         db  0x00 ; '.'
000000000000c45b         db  0x00 ; '.'
000000000000c45c         db  0x08 ; '.'
000000000000c45d         db  0x96 ; '.'
000000000000c45e         db  0xff ; '.'
000000000000c45f         db  0xff ; '.'
000000000000c460         db  0x90 ; '.'
000000000000c461         db  0x0c ; '.'
000000000000c462         db  0x00 ; '.'
000000000000c463         db  0x00 ; '.'
000000000000c464         db  0x18 ; '.'
000000000000c465         db  0x96 ; '.'
000000000000c466         db  0xff ; '.'
000000000000c467         db  0xff ; '.'
000000000000c468         db  0xa4 ; '.'
000000000000c469         db  0x0c ; '.'
000000000000c46a         db  0x00 ; '.'
000000000000c46b         db  0x00 ; '.'
000000000000c46c         db  0xb8 ; '.'
000000000000c46d         db  0x96 ; '.'
000000000000c46e         db  0xff ; '.'
000000000000c46f         db  0xff ; '.'
000000000000c470         db  0xd0 ; '.'
000000000000c471         db  0x0c ; '.'
000000000000c472         db  0x00 ; '.'
000000000000c473         db  0x00 ; '.'
000000000000c474         db  0xd8 ; '.'
000000000000c475         db  0x96 ; '.'
000000000000c476         db  0xff ; '.'
000000000000c477         db  0xff ; '.'
000000000000c478         db  0xe4 ; '.'
000000000000c479         db  0x0c ; '.'
000000000000c47a         db  0x00 ; '.'
000000000000c47b         db  0x00 ; '.'
000000000000c47c         db  0xe8 ; '.'
000000000000c47d         db  0x96 ; '.'
000000000000c47e         db  0xff ; '.'
000000000000c47f         db  0xff ; '.'
000000000000c480         db  0xf8 ; '.'
000000000000c481         db  0x0c ; '.'
000000000000c482         db  0x00 ; '.'
000000000000c483         db  0x00 ; '.'
000000000000c484         db  0x08 ; '.'
000000000000c485         db  0x97 ; '.'
000000000000c486         db  0xff ; '.'
000000000000c487         db  0xff ; '.'
000000000000c488         db  0x0c ; '.'
000000000000c489         db  0x0d ; '.'
000000000000c48a         db  0x00 ; '.'
000000000000c48b         db  0x00 ; '.'
000000000000c48c         db  0x28 ; '('
000000000000c48d         db  0x97 ; '.'
000000000000c48e         db  0xff ; '.'
000000000000c48f         db  0xff ; '.'
000000000000c490         db  0x20 ; ' '
000000000000c491         db  0x0d ; '.'
000000000000c492         db  0x00 ; '.'
000000000000c493         db  0x00 ; '.'
000000000000c494         db  0xb8 ; '.'
000000000000c495         db  0x97 ; '.'
000000000000c496         db  0xff ; '.'
000000000000c497         db  0xff ; '.'
000000000000c498         db  0x3c ; '<'
000000000000c499         db  0x0d ; '.'
000000000000c49a         db  0x00 ; '.'
000000000000c49b         db  0x00 ; '.'
000000000000c49c         db  0x48 ; 'H'
000000000000c49d         db  0x98 ; '.'
000000000000c49e         db  0xff ; '.'
000000000000c49f         db  0xff ; '.'
000000000000c4a0         db  0x58 ; 'X'
000000000000c4a1         db  0x0d ; '.'
000000000000c4a2         db  0x00 ; '.'
000000000000c4a3         db  0x00 ; '.'
000000000000c4a4         db  0x58 ; 'X'
000000000000c4a5         db  0x98 ; '.'
000000000000c4a6         db  0xff ; '.'
000000000000c4a7         db  0xff ; '.'
000000000000c4a8         db  0x6c ; 'l'
000000000000c4a9         db  0x0d ; '.'
000000000000c4aa         db  0x00 ; '.'
000000000000c4ab         db  0x00 ; '.'
000000000000c4ac         db  0x68 ; 'h'
000000000000c4ad         db  0x98 ; '.'
000000000000c4ae         db  0xff ; '.'
000000000000c4af         db  0xff ; '.'
000000000000c4b0         db  0x80 ; '.'
000000000000c4b1         db  0x0d ; '.'
000000000000c4b2         db  0x00 ; '.'
000000000000c4b3         db  0x00 ; '.'
000000000000c4b4         db  0x08 ; '.'
000000000000c4b5         db  0x99 ; '.'
000000000000c4b6         db  0xff ; '.'
000000000000c4b7         db  0xff ; '.'
000000000000c4b8         db  0x9c ; '.'
000000000000c4b9         db  0x0d ; '.'
000000000000c4ba         db  0x00 ; '.'
000000000000c4bb         db  0x00 ; '.'
000000000000c4bc         db  0x18 ; '.'
000000000000c4bd         db  0x99 ; '.'
000000000000c4be         db  0xff ; '.'
000000000000c4bf         db  0xff ; '.'
000000000000c4c0         db  0xb0 ; '.'
000000000000c4c1         db  0x0d ; '.'
000000000000c4c2         db  0x00 ; '.'
000000000000c4c3         db  0x00 ; '.'
000000000000c4c4         db  0x38 ; '8'
000000000000c4c5         db  0x99 ; '.'
000000000000c4c6         db  0xff ; '.'
000000000000c4c7         db  0xff ; '.'
000000000000c4c8         db  0xc4 ; '.'
000000000000c4c9         db  0x0d ; '.'
000000000000c4ca         db  0x00 ; '.'
000000000000c4cb         db  0x00 ; '.'
000000000000c4cc         db  0x48 ; 'H'
000000000000c4cd         db  0x99 ; '.'
000000000000c4ce         db  0xff ; '.'
000000000000c4cf         db  0xff ; '.'
000000000000c4d0         db  0xd8 ; '.'
000000000000c4d1         db  0x0d ; '.'
000000000000c4d2         db  0x00 ; '.'
000000000000c4d3         db  0x00 ; '.'
000000000000c4d4         db  0xd8 ; '.'
000000000000c4d5         db  0x99 ; '.'
000000000000c4d6         db  0xff ; '.'
000000000000c4d7         db  0xff ; '.'
000000000000c4d8         db  0xf4 ; '.'
000000000000c4d9         db  0x0d ; '.'
000000000000c4da         db  0x00 ; '.'
000000000000c4db         db  0x00 ; '.'
000000000000c4dc         db  0x78 ; 'x'
000000000000c4dd         db  0x9a ; '.'
000000000000c4de         db  0xff ; '.'
000000000000c4df         db  0xff ; '.'
000000000000c4e0         db  0x10 ; '.'
000000000000c4e1         db  0x0e ; '.'
000000000000c4e2         db  0x00 ; '.'
000000000000c4e3         db  0x00 ; '.'
000000000000c4e4         db  0x88 ; '.'
000000000000c4e5         db  0x9a ; '.'
000000000000c4e6         db  0xff ; '.'
000000000000c4e7         db  0xff ; '.'
000000000000c4e8         db  0x24 ; '$'
000000000000c4e9         db  0x0e ; '.'
000000000000c4ea         db  0x00 ; '.'
000000000000c4eb         db  0x00 ; '.'
000000000000c4ec         db  0xa8 ; '.'
000000000000c4ed         db  0x9a ; '.'
000000000000c4ee         db  0xff ; '.'
000000000000c4ef         db  0xff ; '.'
000000000000c4f0         db  0x38 ; '8'
000000000000c4f1         db  0x0e ; '.'
000000000000c4f2         db  0x00 ; '.'
000000000000c4f3         db  0x00 ; '.'
000000000000c4f4         db  0xc8 ; '.'
000000000000c4f5         db  0x9a ; '.'
000000000000c4f6         db  0xff ; '.'
000000000000c4f7         db  0xff ; '.'
000000000000c4f8         db  0x4c ; 'L'
000000000000c4f9         db  0x0e ; '.'
000000000000c4fa         db  0x00 ; '.'
000000000000c4fb         db  0x00 ; '.'
000000000000c4fc         db  0xd8 ; '.'
000000000000c4fd         db  0x9a ; '.'
000000000000c4fe         db  0xff ; '.'
000000000000c4ff         db  0xff ; '.'
000000000000c500         db  0x60 ; '`'
000000000000c501         db  0x0e ; '.'
000000000000c502         db  0x00 ; '.'
000000000000c503         db  0x00 ; '.'
000000000000c504         db  0xf8 ; '.'
000000000000c505         db  0x9a ; '.'
000000000000c506         db  0xff ; '.'
000000000000c507         db  0xff ; '.'
000000000000c508         db  0x74 ; 't'
000000000000c509         db  0x0e ; '.'
000000000000c50a         db  0x00 ; '.'
000000000000c50b         db  0x00 ; '.'
000000000000c50c         db  0x18 ; '.'
000000000000c50d         db  0x9b ; '.'
000000000000c50e         db  0xff ; '.'
000000000000c50f         db  0xff ; '.'
000000000000c510         db  0x88 ; '.'
000000000000c511         db  0x0e ; '.'
000000000000c512         db  0x00 ; '.'
000000000000c513         db  0x00 ; '.'
000000000000c514         db  0x38 ; '8'
000000000000c515         db  0x9b ; '.'
000000000000c516         db  0xff ; '.'
000000000000c517         db  0xff ; '.'
000000000000c518         db  0xa0 ; '.'
000000000000c519         db  0x0e ; '.'
000000000000c51a         db  0x00 ; '.'
000000000000c51b         db  0x00 ; '.'
000000000000c51c         db  0xb8 ; '.'
000000000000c51d         db  0x9b ; '.'
000000000000c51e         db  0xff ; '.'
000000000000c51f         db  0xff ; '.'
000000000000c520         db  0xc8 ; '.'
000000000000c521         db  0x0e ; '.'
000000000000c522         db  0x00 ; '.'
000000000000c523         db  0x00 ; '.'
000000000000c524         db  0xd8 ; '.'
000000000000c525         db  0x9f ; '.'
000000000000c526         db  0xff ; '.'
000000000000c527         db  0xff ; '.'
000000000000c528         db  0xdc ; '.'
000000000000c529         db  0x0f ; '.'
000000000000c52a         db  0x00 ; '.'
000000000000c52b         db  0x00 ; '.'
000000000000c52c         db  0xf8 ; '.'
000000000000c52d         db  0x9f ; '.'
000000000000c52e         db  0xff ; '.'
000000000000c52f         db  0xff ; '.'
000000000000c530         db  0xf0 ; '.'
000000000000c531         db  0x0f ; '.'
000000000000c532         db  0x00 ; '.'
000000000000c533         db  0x00 ; '.'
000000000000c534         db  0x78 ; 'x'
000000000000c535         db  0xa0 ; '.'
000000000000c536         db  0xff ; '.'
000000000000c537         db  0xff ; '.'
000000000000c538         db  0x0c ; '.'
000000000000c539         db  0x10 ; '.'
000000000000c53a         db  0x00 ; '.'
000000000000c53b         db  0x00 ; '.'
000000000000c53c         db  0x58 ; 'X'
000000000000c53d         db  0xa1 ; '.'
000000000000c53e         db  0xff ; '.'
000000000000c53f         db  0xff ; '.'
000000000000c540         db  0x38 ; '8'
000000000000c541         db  0x10 ; '.'
000000000000c542         db  0x00 ; '.'
000000000000c543         db  0x00 ; '.'
000000000000c544         db  0xd8 ; '.'
000000000000c545         db  0xa1 ; '.'
000000000000c546         db  0xff ; '.'
000000000000c547         db  0xff ; '.'
000000000000c548         db  0x58 ; 'X'
000000000000c549         db  0x10 ; '.'
000000000000c54a         db  0x00 ; '.'
000000000000c54b         db  0x00 ; '.'
000000000000c54c         db  0x18 ; '.'
000000000000c54d         db  0xa2 ; '.'
000000000000c54e         db  0xff ; '.'
000000000000c54f         db  0xff ; '.'
000000000000c550         db  0x70 ; 'p'
000000000000c551         db  0x10 ; '.'
000000000000c552         db  0x00 ; '.'
000000000000c553         db  0x00 ; '.'
000000000000c554         db  0x38 ; '8'
000000000000c555         db  0xa2 ; '.'
000000000000c556         db  0xff ; '.'
000000000000c557         db  0xff ; '.'
000000000000c558         db  0x8c ; '.'
000000000000c559         db  0x10 ; '.'
000000000000c55a         db  0x00 ; '.'
000000000000c55b         db  0x00 ; '.'
000000000000c55c         db  0x68 ; 'h'
000000000000c55d         db  0xa2 ; '.'
000000000000c55e         db  0xff ; '.'
000000000000c55f         db  0xff ; '.'
000000000000c560         db  0xa0 ; '.'
000000000000c561         db  0x10 ; '.'
000000000000c562         db  0x00 ; '.'
000000000000c563         db  0x00 ; '.'
000000000000c564         db  0x78 ; 'x'
000000000000c565         db  0xa2 ; '.'
000000000000c566         db  0xff ; '.'
000000000000c567         db  0xff ; '.'
000000000000c568         db  0xb4 ; '.'
000000000000c569         db  0x10 ; '.'
000000000000c56a         db  0x00 ; '.'
000000000000c56b         db  0x00 ; '.'
000000000000c56c         db  0xb8 ; '.'
000000000000c56d         db  0xa2 ; '.'
000000000000c56e         db  0xff ; '.'
000000000000c56f         db  0xff ; '.'
000000000000c570         db  0xd8 ; '.'
000000000000c571         db  0x10 ; '.'
000000000000c572         db  0x00 ; '.'
000000000000c573         db  0x00 ; '.'
000000000000c574         db  0xe8 ; '.'
000000000000c575         db  0xa2 ; '.'
000000000000c576         db  0xff ; '.'
000000000000c577         db  0xff ; '.'
000000000000c578         db  0xec ; '.'
000000000000c579         db  0x10 ; '.'
000000000000c57a         db  0x00 ; '.'
000000000000c57b         db  0x00 ; '.'
000000000000c57c         db  0x78 ; 'x'
000000000000c57d         db  0xa3 ; '.'
000000000000c57e         db  0xff ; '.'
000000000000c57f         db  0xff ; '.'
000000000000c580         db  0x04 ; '.'
000000000000c581         db  0x11 ; '.'
000000000000c582         db  0x00 ; '.'
000000000000c583         db  0x00 ; '.'
000000000000c584         db  0xc8 ; '.'
000000000000c585         db  0xa3 ; '.'
000000000000c586         db  0xff ; '.'
000000000000c587         db  0xff ; '.'
000000000000c588         db  0x1c ; '.'
000000000000c589         db  0x11 ; '.'
000000000000c58a         db  0x00 ; '.'
000000000000c58b         db  0x00 ; '.'
000000000000c58c         db  0xe8 ; '.'
000000000000c58d         db  0xa3 ; '.'
000000000000c58e         db  0xff ; '.'
000000000000c58f         db  0xff ; '.'
000000000000c590         db  0x38 ; '8'
000000000000c591         db  0x11 ; '.'
000000000000c592         db  0x00 ; '.'
000000000000c593         db  0x00 ; '.'
000000000000c594         db  0x18 ; '.'
000000000000c595         db  0xa4 ; '.'
000000000000c596         db  0xff ; '.'
000000000000c597         db  0xff ; '.'
000000000000c598         db  0x54 ; 'T'
000000000000c599         db  0x11 ; '.'
000000000000c59a         db  0x00 ; '.'
000000000000c59b         db  0x00 ; '.'
000000000000c59c         db  0x48 ; 'H'
000000000000c59d         db  0xa4 ; '.'
000000000000c59e         db  0xff ; '.'
000000000000c59f         db  0xff ; '.'
000000000000c5a0         db  0x7c ; '|'
000000000000c5a1         db  0x11 ; '.'
000000000000c5a2         db  0x00 ; '.'
000000000000c5a3         db  0x00 ; '.'
000000000000c5a4         db  0x68 ; 'h'
000000000000c5a5         db  0xa4 ; '.'
000000000000c5a6         db  0xff ; '.'
000000000000c5a7         db  0xff ; '.'
000000000000c5a8         db  0x98 ; '.'
000000000000c5a9         db  0x11 ; '.'
000000000000c5aa         db  0x00 ; '.'
000000000000c5ab         db  0x00 ; '.'
000000000000c5ac         db  0xa8 ; '.'
000000000000c5ad         db  0xa4 ; '.'
000000000000c5ae         db  0xff ; '.'
000000000000c5af         db  0xff ; '.'
000000000000c5b0         db  0xb0 ; '.'
000000000000c5b1         db  0x11 ; '.'
000000000000c5b2         db  0x00 ; '.'
000000000000c5b3         db  0x00 ; '.'
000000000000c5b4         db  0xf8 ; '.'
000000000000c5b5         db  0xa4 ; '.'
000000000000c5b6         db  0xff ; '.'
000000000000c5b7         db  0xff ; '.'
000000000000c5b8         db  0xcc ; '.'
000000000000c5b9         db  0x11 ; '.'
000000000000c5ba         db  0x00 ; '.'
000000000000c5bb         db  0x00 ; '.'
000000000000c5bc         db  0x28 ; '('
000000000000c5bd         db  0xa5 ; '.'
000000000000c5be         db  0xff ; '.'
000000000000c5bf         db  0xff ; '.'
000000000000c5c0         db  0xe0 ; '.'
000000000000c5c1         db  0x11 ; '.'
000000000000c5c2         db  0x00 ; '.'
000000000000c5c3         db  0x00 ; '.'
000000000000c5c4         db  0xc8 ; '.'
000000000000c5c5         db  0xa5 ; '.'
000000000000c5c6         db  0xff ; '.'
000000000000c5c7         db  0xff ; '.'
000000000000c5c8         db  0x08 ; '.'
000000000000c5c9         db  0x12 ; '.'
000000000000c5ca         db  0x00 ; '.'
000000000000c5cb         db  0x00 ; '.'
000000000000c5cc         db  0x08 ; '.'
000000000000c5cd         db  0xa6 ; '.'
000000000000c5ce         db  0xff ; '.'
000000000000c5cf         db  0xff ; '.'
000000000000c5d0         db  0x28 ; '('
000000000000c5d1         db  0x12 ; '.'
000000000000c5d2         db  0x00 ; '.'
000000000000c5d3         db  0x00 ; '.'
000000000000c5d4         db  0x38 ; '8'
000000000000c5d5         db  0xa6 ; '.'
000000000000c5d6         db  0xff ; '.'
000000000000c5d7         db  0xff ; '.'
000000000000c5d8         db  0x40 ; '@'
000000000000c5d9         db  0x12 ; '.'
000000000000c5da         db  0x00 ; '.'
000000000000c5db         db  0x00 ; '.'
000000000000c5dc         db  0x98 ; '.'
000000000000c5dd         db  0xa6 ; '.'
000000000000c5de         db  0xff ; '.'
000000000000c5df         db  0xff ; '.'
000000000000c5e0         db  0x70 ; 'p'
000000000000c5e1         db  0x12 ; '.'
000000000000c5e2         db  0x00 ; '.'
000000000000c5e3         db  0x00 ; '.'
000000000000c5e4         db  0xb8 ; '.'
000000000000c5e5         db  0xa6 ; '.'
000000000000c5e6         db  0xff ; '.'
000000000000c5e7         db  0xff ; '.'
000000000000c5e8         db  0x84 ; '.'
000000000000c5e9         db  0x12 ; '.'
000000000000c5ea         db  0x00 ; '.'
000000000000c5eb         db  0x00 ; '.'
000000000000c5ec         db  0xc8 ; '.'
000000000000c5ed         db  0xa6 ; '.'
000000000000c5ee         db  0xff ; '.'
000000000000c5ef         db  0xff ; '.'
000000000000c5f0         db  0x98 ; '.'
000000000000c5f1         db  0x12 ; '.'
000000000000c5f2         db  0x00 ; '.'
000000000000c5f3         db  0x00 ; '.'
000000000000c5f4         db  0xd8 ; '.'
000000000000c5f5         db  0xa6 ; '.'
000000000000c5f6         db  0xff ; '.'
000000000000c5f7         db  0xff ; '.'
000000000000c5f8         db  0xac ; '.'
000000000000c5f9         db  0x12 ; '.'
000000000000c5fa         db  0x00 ; '.'
000000000000c5fb         db  0x00 ; '.'
000000000000c5fc         db  0xe8 ; '.'
000000000000c5fd         db  0xa6 ; '.'
000000000000c5fe         db  0xff ; '.'
000000000000c5ff         db  0xff ; '.'
000000000000c600         db  0xc0 ; '.'
000000000000c601         db  0x12 ; '.'
000000000000c602         db  0x00 ; '.'
000000000000c603         db  0x00 ; '.'
000000000000c604         db  0x18 ; '.'
000000000000c605         db  0xa7 ; '.'
000000000000c606         db  0xff ; '.'
000000000000c607         db  0xff ; '.'
000000000000c608         db  0xd4 ; '.'
000000000000c609         db  0x12 ; '.'
000000000000c60a         db  0x00 ; '.'
000000000000c60b         db  0x00 ; '.'
000000000000c60c         db  0xe8 ; '.'
000000000000c60d         db  0xa8 ; '.'
000000000000c60e         db  0xff ; '.'
000000000000c60f         db  0xff ; '.'
000000000000c610         db  0x10 ; '.'
000000000000c611         db  0x13 ; '.'
000000000000c612         db  0x00 ; '.'
000000000000c613         db  0x00 ; '.'
000000000000c614         db  0xf8 ; '.'
000000000000c615         db  0xa9 ; '.'
000000000000c616         db  0xff ; '.'
000000000000c617         db  0xff ; '.'
000000000000c618         db  0x60 ; '`'
000000000000c619         db  0x13 ; '.'
000000000000c61a         db  0x00 ; '.'
000000000000c61b         db  0x00 ; '.'
000000000000c61c         db  0x88 ; '.'
000000000000c61d         db  0xaa ; '.'
000000000000c61e         db  0xff ; '.'
000000000000c61f         db  0xff ; '.'
000000000000c620         db  0x98 ; '.'
000000000000c621         db  0x13 ; '.'
000000000000c622         db  0x00 ; '.'
000000000000c623         db  0x00 ; '.'
000000000000c624         db  0xd8 ; '.'
000000000000c625         db  0xaa ; '.'
000000000000c626         db  0xff ; '.'
000000000000c627         db  0xff ; '.'
000000000000c628         db  0xc4 ; '.'
000000000000c629         db  0x13 ; '.'
000000000000c62a         db  0x00 ; '.'
000000000000c62b         db  0x00 ; '.'
000000000000c62c         db  0x18 ; '.'
000000000000c62d         db  0xab ; '.'
000000000000c62e         db  0xff ; '.'
000000000000c62f         db  0xff ; '.'
000000000000c630         db  0xe0 ; '.'
000000000000c631         db  0x13 ; '.'
000000000000c632         db  0x00 ; '.'
000000000000c633         db  0x00 ; '.'
000000000000c634         db  0x48 ; 'H'
000000000000c635         db  0xac ; '.'
000000000000c636         db  0xff ; '.'
000000000000c637         db  0xff ; '.'
000000000000c638         db  0x1c ; '.'
000000000000c639         db  0x14 ; '.'
000000000000c63a         db  0x00 ; '.'
000000000000c63b         db  0x00 ; '.'
000000000000c63c         db  0xb8 ; '.'
000000000000c63d         db  0xac ; '.'
000000000000c63e         db  0xff ; '.'
000000000000c63f         db  0xff ; '.'
000000000000c640         db  0x40 ; '@'
000000000000c641         db  0x14 ; '.'
000000000000c642         db  0x00 ; '.'
000000000000c643         db  0x00 ; '.'
000000000000c644         db  0x28 ; '('
000000000000c645         db  0xad ; '.'
000000000000c646         db  0xff ; '.'
000000000000c647         db  0xff ; '.'
000000000000c648         db  0x84 ; '.'
000000000000c649         db  0x14 ; '.'
000000000000c64a         db  0x00 ; '.'
000000000000c64b         db  0x00 ; '.'
000000000000c64c         db  0x88 ; '.'
000000000000c64d         db  0xad ; '.'
000000000000c64e         db  0xff ; '.'
000000000000c64f         db  0xff ; '.'
000000000000c650         db  0xb0 ; '.'
000000000000c651         db  0x14 ; '.'
000000000000c652         db  0x00 ; '.'
000000000000c653         db  0x00 ; '.'
000000000000c654         db  0xf8 ; '.'
000000000000c655         db  0xad ; '.'
000000000000c656         db  0xff ; '.'
000000000000c657         db  0xff ; '.'
000000000000c658         db  0xd8 ; '.'
000000000000c659         db  0x14 ; '.'
000000000000c65a         db  0x00 ; '.'
000000000000c65b         db  0x00 ; '.'
000000000000c65c         db  0x68 ; 'h'
000000000000c65d         db  0xae ; '.'
000000000000c65e         db  0xff ; '.'
000000000000c65f         db  0xff ; '.'
000000000000c660         db  0xf8 ; '.'
000000000000c661         db  0x14 ; '.'
000000000000c662         db  0x00 ; '.'
000000000000c663         db  0x00 ; '.'
000000000000c664         db  0xa8 ; '.'
000000000000c665         db  0xae ; '.'
000000000000c666         db  0xff ; '.'
000000000000c667         db  0xff ; '.'
000000000000c668         db  0x0c ; '.'
000000000000c669         db  0x15 ; '.'
000000000000c66a         db  0x00 ; '.'
000000000000c66b         db  0x00 ; '.'
000000000000c66c         db  0x28 ; '('
000000000000c66d         db  0xb1 ; '.'
000000000000c66e         db  0xff ; '.'
000000000000c66f         db  0xff ; '.'
000000000000c670         db  0x5c ; '\'
000000000000c671         db  0x15 ; '.'
000000000000c672         db  0x00 ; '.'
000000000000c673         db  0x00 ; '.'
000000000000c674         db  0xd8 ; '.'
000000000000c675         db  0xb1 ; '.'
000000000000c676         db  0xff ; '.'
000000000000c677         db  0xff ; '.'
000000000000c678         db  0xa0 ; '.'
000000000000c679         db  0x15 ; '.'
000000000000c67a         db  0x00 ; '.'
000000000000c67b         db  0x00 ; '.'
000000000000c67c         db  0x98 ; '.'
000000000000c67d         db  0xb2 ; '.'
000000000000c67e         db  0xff ; '.'
000000000000c67f         db  0xff ; '.'
000000000000c680         db  0xbc ; '.'
000000000000c681         db  0x15 ; '.'
000000000000c682         db  0x00 ; '.'
000000000000c683         db  0x00 ; '.'
000000000000c684         db  0x78 ; 'x'
000000000000c685         db  0xbc ; '.'
000000000000c686         db  0xff ; '.'
000000000000c687         db  0xff ; '.'
000000000000c688         db  0x0c ; '.'
000000000000c689         db  0x16 ; '.'
000000000000c68a         db  0x00 ; '.'
000000000000c68b         db  0x00 ; '.'
000000000000c68c         db  0x28 ; '('
000000000000c68d         db  0xc0 ; '.'
000000000000c68e         db  0xff ; '.'
000000000000c68f         db  0xff ; '.'
000000000000c690         db  0x58 ; 'X'
000000000000c691         db  0x16 ; '.'
000000000000c692         db  0x00 ; '.'
000000000000c693         db  0x00 ; '.'
000000000000c694         db  0xb8 ; '.'
000000000000c695         db  0xc1 ; '.'
000000000000c696         db  0xff ; '.'
000000000000c697         db  0xff ; '.'
000000000000c698         db  0x88 ; '.'
000000000000c699         db  0x16 ; '.'
000000000000c69a         db  0x00 ; '.'
000000000000c69b         db  0x00 ; '.'
000000000000c69c         db  0x38 ; '8'
000000000000c69d         db  0xc9 ; '.'
000000000000c69e         db  0xff ; '.'
000000000000c69f         db  0xff ; '.'
000000000000c6a0         db  0xec ; '.'
000000000000c6a1         db  0x16 ; '.'
000000000000c6a2         db  0x00 ; '.'
000000000000c6a3         db  0x00 ; '.'
000000000000c6a4         db  0x68 ; 'h'
000000000000c6a5         db  0xc9 ; '.'
000000000000c6a6         db  0xff ; '.'
000000000000c6a7         db  0xff ; '.'
000000000000c6a8         db  0x04 ; '.'
000000000000c6a9         db  0x17 ; '.'
000000000000c6aa         db  0x00 ; '.'
000000000000c6ab         db  0x00 ; '.'
000000000000c6ac         db  0xb8 ; '.'
000000000000c6ad         db  0xca ; '.'
000000000000c6ae         db  0xff ; '.'
000000000000c6af         db  0xff ; '.'
000000000000c6b0         db  0x68 ; 'h'
000000000000c6b1         db  0x17 ; '.'
000000000000c6b2         db  0x00 ; '.'
000000000000c6b3         db  0x00 ; '.'
000000000000c6b4         db  0x48 ; 'H'
000000000000c6b5         db  0xcb ; '.'
000000000000c6b6         db  0xff ; '.'
000000000000c6b7         db  0xff ; '.'
000000000000c6b8         db  0xa8 ; '.'
000000000000c6b9         db  0x17 ; '.'
000000000000c6ba         db  0x00 ; '.'
000000000000c6bb         db  0x00 ; '.'
000000000000c6bc         db  0xc8 ; '.'
000000000000c6bd         db  0xcb ; '.'
000000000000c6be         db  0xff ; '.'
000000000000c6bf         db  0xff ; '.'
000000000000c6c0         db  0xf8 ; '.'
000000000000c6c1         db  0x17 ; '.'
000000000000c6c2         db  0x00 ; '.'
000000000000c6c3         db  0x00 ; '.'
000000000000c6c4         db  0xd8 ; '.'
000000000000c6c5         db  0xcb ; '.'
000000000000c6c6         db  0xff ; '.'
000000000000c6c7         db  0xff ; '.'
000000000000c6c8         db  0x0c ; '.'
000000000000c6c9         db  0x18 ; '.'
000000000000c6ca         db  0x00 ; '.'
000000000000c6cb         db  0x00 ; '.'
000000000000c6cc         db  0x68 ; 'h'
000000000000c6cd         db  0xcc ; '.'
000000000000c6ce         db  0xff ; '.'
000000000000c6cf         db  0xff ; '.'
000000000000c6d0         db  0x28 ; '('
000000000000c6d1         db  0x18 ; '.'
000000000000c6d2         db  0x00 ; '.'
000000000000c6d3         db  0x00 ; '.'
000000000000c6d4         db  0xd8 ; '.'
000000000000c6d5         db  0xcc ; '.'
000000000000c6d6         db  0xff ; '.'
000000000000c6d7         db  0xff ; '.'
000000000000c6d8         db  0x48 ; 'H'
000000000000c6d9         db  0x18 ; '.'
000000000000c6da         db  0x00 ; '.'
000000000000c6db         db  0x00 ; '.'
000000000000c6dc         db  0x38 ; '8'
000000000000c6dd         db  0xcd ; '.'
000000000000c6de         db  0xff ; '.'
000000000000c6df         db  0xff ; '.'
000000000000c6e0         db  0x68 ; 'h'
000000000000c6e1         db  0x18 ; '.'
000000000000c6e2         db  0x00 ; '.'
000000000000c6e3         db  0x00 ; '.'
000000000000c6e4         db  0xd8 ; '.'
000000000000c6e5         db  0xcd ; '.'
000000000000c6e6         db  0xff ; '.'
000000000000c6e7         db  0xff ; '.'
000000000000c6e8         db  0x7c ; '|'
000000000000c6e9         db  0x18 ; '.'
000000000000c6ea         db  0x00 ; '.'
000000000000c6eb         db  0x00 ; '.'
000000000000c6ec         db  0xe8 ; '.'
000000000000c6ed         db  0xcd ; '.'
000000000000c6ee         db  0xff ; '.'
000000000000c6ef         db  0xff ; '.'
000000000000c6f0         db  0x90 ; '.'
000000000000c6f1         db  0x18 ; '.'
000000000000c6f2         db  0x00 ; '.'
000000000000c6f3         db  0x00 ; '.'
000000000000c6f4         db  0xf8 ; '.'
000000000000c6f5         db  0xcd ; '.'
000000000000c6f6         db  0xff ; '.'
000000000000c6f7         db  0xff ; '.'
000000000000c6f8         db  0xa4 ; '.'
000000000000c6f9         db  0x18 ; '.'
000000000000c6fa         db  0x00 ; '.'
000000000000c6fb         db  0x00 ; '.'
000000000000c6fc         db  0x28 ; '('
000000000000c6fd         db  0xce ; '.'
000000000000c6fe         db  0xff ; '.'
000000000000c6ff         db  0xff ; '.'
000000000000c700         db  0xc0 ; '.'
000000000000c701         db  0x18 ; '.'
000000000000c702         db  0x00 ; '.'
000000000000c703         db  0x00 ; '.'
000000000000c704         db  0x48 ; 'H'
000000000000c705         db  0xcf ; '.'
000000000000c706         db  0xff ; '.'
000000000000c707         db  0xff ; '.'
000000000000c708         db  0x20 ; ' '
000000000000c709         db  0x19 ; '.'
000000000000c70a         db  0x00 ; '.'
000000000000c70b         db  0x00 ; '.'
000000000000c70c         db  0xc8 ; '.'
000000000000c70d         db  0xcf ; '.'
000000000000c70e         db  0xff ; '.'
000000000000c70f         db  0xff ; '.'
000000000000c710         db  0x34 ; '4'
000000000000c711         db  0x19 ; '.'
000000000000c712         db  0x00 ; '.'
000000000000c713         db  0x00 ; '.'
000000000000c714         db  0x08 ; '.'
000000000000c715         db  0xd1 ; '.'
000000000000c716         db  0xff ; '.'
000000000000c717         db  0xff ; '.'
000000000000c718         db  0x94 ; '.'
000000000000c719         db  0x19 ; '.'
000000000000c71a         db  0x00 ; '.'
000000000000c71b         db  0x00 ; '.'
000000000000c71c         db  0x18 ; '.'
000000000000c71d         db  0xd1 ; '.'
000000000000c71e         db  0xff ; '.'
000000000000c71f         db  0xff ; '.'
000000000000c720         db  0xa8 ; '.'
000000000000c721         db  0x19 ; '.'
000000000000c722         db  0x00 ; '.'
000000000000c723         db  0x00 ; '.'
000000000000c724         db  0x28 ; '('
000000000000c725         db  0xd1 ; '.'
000000000000c726         db  0xff ; '.'
000000000000c727         db  0xff ; '.'
000000000000c728         db  0xbc ; '.'
000000000000c729         db  0x19 ; '.'
000000000000c72a         db  0x00 ; '.'
000000000000c72b         db  0x00 ; '.'
000000000000c72c         db  0x38 ; '8'
000000000000c72d         db  0xd1 ; '.'
000000000000c72e         db  0xff ; '.'
000000000000c72f         db  0xff ; '.'
000000000000c730         db  0xd0 ; '.'
000000000000c731         db  0x19 ; '.'
000000000000c732         db  0x00 ; '.'
000000000000c733         db  0x00 ; '.'
000000000000c734         db  0x88 ; '.'
000000000000c735         db  0xd1 ; '.'
000000000000c736         db  0xff ; '.'
000000000000c737         db  0xff ; '.'
000000000000c738         db  0xe4 ; '.'
000000000000c739         db  0x19 ; '.'
000000000000c73a         db  0x00 ; '.'
000000000000c73b         db  0x00 ; '.'
000000000000c73c         db  0xe8 ; '.'
000000000000c73d         db  0xd1 ; '.'
000000000000c73e         db  0xff ; '.'
000000000000c73f         db  0xff ; '.'
000000000000c740         db  0xf8 ; '.'
000000000000c741         db  0x19 ; '.'
000000000000c742         db  0x00 ; '.'
000000000000c743         db  0x00 ; '.'
000000000000c744         db  0x38 ; '8'
000000000000c745         db  0xd3 ; '.'
000000000000c746         db  0xff ; '.'
000000000000c747         db  0xff ; '.'
000000000000c748         db  0x34 ; '4'
000000000000c749         db  0x1a ; '.'
000000000000c74a         db  0x00 ; '.'
000000000000c74b         db  0x00 ; '.'
000000000000c74c         db  0x98 ; '.'
000000000000c74d         db  0xd3 ; '.'
000000000000c74e         db  0xff ; '.'
000000000000c74f         db  0xff ; '.'
000000000000c750         db  0x6c ; 'l'
000000000000c751         db  0x1a ; '.'
000000000000c752         db  0x00 ; '.'
000000000000c753         db  0x00 ; '.'
000000000000c754         db  0xe8 ; '.'
000000000000c755         db  0xd3 ; '.'
000000000000c756         db  0xff ; '.'
000000000000c757         db  0xff ; '.'
000000000000c758         db  0x80 ; '.'
000000000000c759         db  0x1a ; '.'
000000000000c75a         db  0x00 ; '.'
000000000000c75b         db  0x00 ; '.'
000000000000c75c         db  0x68 ; 'h'
000000000000c75d         db  0xd4 ; '.'
000000000000c75e         db  0xff ; '.'
000000000000c75f         db  0xff ; '.'
000000000000c760         db  0xb4 ; '.'
000000000000c761         db  0x1a ; '.'
000000000000c762         db  0x00 ; '.'
000000000000c763         db  0x00 ; '.'
000000000000c764         db  0xd8 ; '.'
000000000000c765         db  0xd4 ; '.'
000000000000c766         db  0xff ; '.'
000000000000c767         db  0xff ; '.'
000000000000c768         db  0xc8 ; '.'
000000000000c769         db  0x1a ; '.'
000000000000c76a         db  0x00 ; '.'
000000000000c76b         db  0x00 ; '.'
000000000000c76c         db  0x48 ; 'H'
000000000000c76d         db  0xd5 ; '.'
000000000000c76e         db  0xff ; '.'
000000000000c76f         db  0xff ; '.'
000000000000c770         db  0x14 ; '.'
000000000000c771         db  0x1b ; '.'
000000000000c772         db  0x00 ; '.'
000000000000c773         db  0x00 ; '.'
000000000000c774         db  0x88 ; '.'
000000000000c775         db  0xd5 ; '.'
000000000000c776         db  0xff ; '.'
000000000000c777         db  0xff ; '.'
000000000000c778         db  0x28 ; '('
000000000000c779         db  0x1b ; '.'
000000000000c77a         db  0x00 ; '.'
000000000000c77b         db  0x00 ; '.'
000000000000c77c         db  0xa8 ; '.'
000000000000c77d         db  0xd5 ; '.'
000000000000c77e         db  0xff ; '.'
000000000000c77f         db  0xff ; '.'
000000000000c780         db  0x3c ; '<'
000000000000c781         db  0x1b ; '.'
000000000000c782         db  0x00 ; '.'
000000000000c783         db  0x00 ; '.'
000000000000c784         db  0x68 ; 'h'
000000000000c785         db  0xd7 ; '.'
000000000000c786         db  0xff ; '.'
000000000000c787         db  0xff ; '.'
000000000000c788         db  0x88 ; '.'
000000000000c789         db  0x1b ; '.'
000000000000c78a         db  0x00 ; '.'
000000000000c78b         db  0x00 ; '.'
000000000000c78c         db  0xf8 ; '.'
000000000000c78d         db  0xd7 ; '.'
000000000000c78e         db  0xff ; '.'
000000000000c78f         db  0xff ; '.'
000000000000c790         db  0xb4 ; '.'
000000000000c791         db  0x1b ; '.'
000000000000c792         db  0x00 ; '.'
000000000000c793         db  0x00 ; '.'
000000000000c794         db  0xd8 ; '.'
000000000000c795         db  0xd8 ; '.'
000000000000c796         db  0xff ; '.'
000000000000c797         db  0xff ; '.'
000000000000c798         db  0xe0 ; '.'
000000000000c799         db  0x1b ; '.'
000000000000c79a         db  0x00 ; '.'
000000000000c79b         db  0x00 ; '.'
000000000000c79c         db  0x18 ; '.'
000000000000c79d         db  0xdb ; '.'
000000000000c79e         db  0xff ; '.'
000000000000c79f         db  0xff ; '.'
000000000000c7a0         db  0x18 ; '.'
000000000000c7a1         db  0x1c ; '.'
000000000000c7a2         db  0x00 ; '.'
000000000000c7a3         db  0x00 ; '.'
000000000000c7a4         db  0xa8 ; '.'
000000000000c7a5         db  0xdd ; '.'
000000000000c7a6         db  0xff ; '.'
000000000000c7a7         db  0xff ; '.'
000000000000c7a8         db  0x54 ; 'T'
000000000000c7a9         db  0x1c ; '.'
000000000000c7aa         db  0x00 ; '.'
000000000000c7ab         db  0x00 ; '.'
000000000000c7ac         db  0x08 ; '.'
000000000000c7ad         db  0xde ; '.'
000000000000c7ae         db  0xff ; '.'
000000000000c7af         db  0xff ; '.'
000000000000c7b0         db  0x78 ; 'x'
000000000000c7b1         db  0x1c ; '.'
000000000000c7b2         db  0x00 ; '.'
000000000000c7b3         db  0x00 ; '.'
000000000000c7b4         db  0x18 ; '.'
000000000000c7b5         db  0xe0 ; '.'
000000000000c7b6         db  0xff ; '.'
000000000000c7b7         db  0xff ; '.'
000000000000c7b8         db  0xb0 ; '.'
000000000000c7b9         db  0x1c ; '.'
000000000000c7ba         db  0x00 ; '.'
000000000000c7bb         db  0x00 ; '.'
000000000000c7bc         db  0x38 ; '8'
000000000000c7bd         db  0xe0 ; '.'
000000000000c7be         db  0xff ; '.'
000000000000c7bf         db  0xff ; '.'
000000000000c7c0         db  0xc4 ; '.'
000000000000c7c1         db  0x1c ; '.'
000000000000c7c2         db  0x00 ; '.'
000000000000c7c3         db  0x00 ; '.'
000000000000c7c4         db  0x48 ; 'H'
000000000000c7c5         db  0xe0 ; '.'
000000000000c7c6         db  0xff ; '.'
000000000000c7c7         db  0xff ; '.'
000000000000c7c8         db  0xd8 ; '.'
000000000000c7c9         db  0x1c ; '.'
000000000000c7ca         db  0x00 ; '.'
000000000000c7cb         db  0x00 ; '.'
000000000000c7cc         db  0x88 ; '.'
000000000000c7cd         db  0xe0 ; '.'
000000000000c7ce         db  0xff ; '.'
000000000000c7cf         db  0xff ; '.'
000000000000c7d0         db  0xec ; '.'
000000000000c7d1         db  0x1c ; '.'
000000000000c7d2         db  0x00 ; '.'
000000000000c7d3         db  0x00 ; '.'
000000000000c7d4         db  0xc8 ; '.'
000000000000c7d5         db  0xe0 ; '.'
000000000000c7d6         db  0xff ; '.'
000000000000c7d7         db  0xff ; '.'
000000000000c7d8         db  0x00 ; '.'
000000000000c7d9         db  0x1d ; '.'
000000000000c7da         db  0x00 ; '.'
000000000000c7db         db  0x00 ; '.'
000000000000c7dc         db  0x08 ; '.'
000000000000c7dd         db  0xe1 ; '.'
000000000000c7de         db  0xff ; '.'
000000000000c7df         db  0xff ; '.'
000000000000c7e0         db  0x20 ; ' '
000000000000c7e1         db  0x1d ; '.'
000000000000c7e2         db  0x00 ; '.'
000000000000c7e3         db  0x00 ; '.'
000000000000c7e4         db  0x78 ; 'x'
000000000000c7e5         db  0xe1 ; '.'
000000000000c7e6         db  0xff ; '.'
000000000000c7e7         db  0xff ; '.'
000000000000c7e8         db  0x40 ; '@'
000000000000c7e9         db  0x1d ; '.'
000000000000c7ea         db  0x00 ; '.'
000000000000c7eb         db  0x00 ; '.'
000000000000c7ec         db  0xf8 ; '.'
000000000000c7ed         db  0xe1 ; '.'
000000000000c7ee         db  0xff ; '.'
000000000000c7ef         db  0xff ; '.'
000000000000c7f0         db  0xa0 ; '.'
000000000000c7f1         db  0x1d ; '.'
000000000000c7f2         db  0x00 ; '.'
000000000000c7f3         db  0x00 ; '.'
000000000000c7f4         db  0x38 ; '8'
000000000000c7f5         db  0xe2 ; '.'
000000000000c7f6         db  0xff ; '.'
000000000000c7f7         db  0xff ; '.'
000000000000c7f8         db  0xd8 ; '.'
000000000000c7f9         db  0x1d ; '.'
000000000000c7fa         db  0x00 ; '.'
000000000000c7fb         db  0x00 ; '.'
000000000000c7fc         db  0xb8 ; '.'
000000000000c7fd         db  0xe2 ; '.'
000000000000c7fe         db  0xff ; '.'
000000000000c7ff         db  0xff ; '.'
000000000000c800         db  0x10 ; '.'
000000000000c801         db  0x1e ; '.'
000000000000c802         db  0x00 ; '.'
000000000000c803         db  0x00 ; '.'
000000000000c804         db  0x38 ; '8'
000000000000c805         db  0xe5 ; '.'
000000000000c806         db  0xff ; '.'
000000000000c807         db  0xff ; '.'
000000000000c808         db  0x48 ; 'H'
000000000000c809         db  0x1e ; '.'
000000000000c80a         db  0x00 ; '.'
000000000000c80b         db  0x00 ; '.'
000000000000c80c         db  0x48 ; 'H'
000000000000c80d         db  0xe5 ; '.'
000000000000c80e         db  0xff ; '.'
000000000000c80f         db  0xff ; '.'
000000000000c810         db  0x60 ; '`'
000000000000c811         db  0x1e ; '.'
000000000000c812         db  0x00 ; '.'
000000000000c813         db  0x00 ; '.'
000000000000c814         db  0xb8 ; '.'
000000000000c815         db  0xe5 ; '.'
000000000000c816         db  0xff ; '.'
000000000000c817         db  0xff ; '.'
000000000000c818         db  0xa8 ; '.'
000000000000c819         db  0x1e ; '.'
000000000000c81a         db  0x00 ; '.'
000000000000c81b         db  0x00 ; '.'
000000000000c81c         db  0xc8 ; '.'
000000000000c81d         db  0xe5 ; '.'
000000000000c81e         db  0xff ; '.'
000000000000c81f         db  0xff ; '.'
000000000000c820         db  0xc0 ; '.'
000000000000c821         db  0x1e ; '.'
000000000000c822         db  0x00 ; '.'
000000000000c823         db  0x00 ; '.'
000000000000c824         db  0x00 ; '.'
000000000000c825         db  0x00 ; '.'
000000000000c826         db  0x00 ; '.'
000000000000c827         db  0x00 ; '.'


        ; Section .eh_frame
        ; Range: [0xc828; 0xe200[ (6616 bytes)
        ; File offset : [51240; 57856[ (6616 bytes)
        ; Flags: 0x2
        ;   SHT_PROGBITS
        ;   SHF_ALLOC

000000000000c828         dd         0x00000014                                  ; Length of the record
000000000000c82c         dd         0x00000000                                  ; CIE ID
000000000000c830         db         0x01                                        ; Version
000000000000c831         db         "zR", 0                                     ; Augmentation String
000000000000c834         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000c835         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000c836         db         0x10                                        ; Return address register
000000000000c837         db         0x01                                        ; Augmentation data length
000000000000c838         db         0x1b                                        ; FDE encoding
000000000000c839         db  0x0c ; '.'
000000000000c83a         db  0x07 ; '.'
000000000000c83b         db  0x08 ; '.'
000000000000c83c         db  0x90 ; '.'
000000000000c83d         db  0x01 ; '.'
000000000000c83e         db  0x07 ; '.'
000000000000c83f         db  0x10 ; '.'
000000000000c840         dd         0x00000014                                  ; Length of the record
000000000000c844         dd         0x0000001c                                  ; FDE: parent CIE at 0xc828 (FDE encoding = 0x1B)
000000000000c848         db         0x48, 0x5b, 2 dup (0xff)                    ; begin 0x2390
000000000000c84c         db         0x2b, 3 dup (0x00)                          ; length 0x2b (end at 0x23bb)
000000000000c850         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c851         align      8
000000000000c858         dd         0x00000014                                  ; Length of the record
000000000000c85c         dd         0x00000000                                  ; CIE ID
000000000000c860         db         0x01                                        ; Version
000000000000c861         db         "zR", 0                                     ; Augmentation String
000000000000c864         db         0x01                                        ; Code Alignment Factor (unsigned LEB128=1)
000000000000c865         db         0x78                                        ; Data Alignment Factor (signed LEB128=-8)
000000000000c866         db         0x10                                        ; Return address register
000000000000c867         db         0x01                                        ; Augmentation data length
000000000000c868         db         0x1b                                        ; FDE encoding
000000000000c869         db  0x0c ; '.'
000000000000c86a         db  0x07 ; '.'
000000000000c86b         db  0x08 ; '.'
000000000000c86c         db  0x90 ; '.'
000000000000c86d         db  0x01 ; '.'
000000000000c86e         db  0x00 ; '.'
000000000000c86f         db  0x00 ; '.'
000000000000c870         dd         0x00000024                                  ; Length of the record
000000000000c874         dd         0x0000001c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c878         db         0x08, 0x51, 2 dup (0xff)                    ; begin 0x1980
000000000000c87c         db         0x20, 0x04, 2 dup (0x00)                    ; length 0x420 (end at 0x1da0)
000000000000c880         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c881         db  0x0e ; '.'
000000000000c882         db  0x10 ; '.'
000000000000c883         db  0x46 ; 'F'
000000000000c884         db  0x0e ; '.'
000000000000c885         db  0x18 ; '.'
000000000000c886         db  0x4a ; 'J'
000000000000c887         db  0x0f ; '.'
000000000000c888         db  0x0b ; '.'
000000000000c889         db  0x77 ; 'w'
000000000000c88a         db  0x08 ; '.'
000000000000c88b         db  0x80 ; '.'
000000000000c88c         db  0x00 ; '.'
000000000000c88d         db  0x3f ; '?'
000000000000c88e         db  0x1a ; '.'
000000000000c88f         db  0x3b ; ';'
000000000000c890         db  0x2a ; '*'
000000000000c891         db  0x33 ; '3'
000000000000c892         db  0x24 ; '$'
000000000000c893         db  0x22 ; '"'
000000000000c894         db  0x00 ; '.'
000000000000c895         db  0x00 ; '.'
000000000000c896         db  0x00 ; '.'
000000000000c897         db  0x00 ; '.'
000000000000c898         dd         0x00000014                                  ; Length of the record
000000000000c89c         dd         0x00000044                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c8a0         db         0x00, 0x55, 2 dup (0xff)                    ; begin 0x1da0
000000000000c8a4         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x1db0)
000000000000c8a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c8a9         align      16
000000000000c8b0         dd         0x00000028                                  ; Length of the record
000000000000c8b4         dd         0x0000005c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c8b8         db         0xe8, 0x5b, 2 dup (0xff)                    ; begin 0x24a0
000000000000c8bc         db         0x4a, 0x04, 2 dup (0x00)                    ; length 0x44a (end at 0x28ea)
000000000000c8c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c8c1         db  0x42 ; 'B'
000000000000c8c2         db  0x0e ; '.'
000000000000c8c3         db  0x10 ; '.'
000000000000c8c4         db  0x8d ; '.'
000000000000c8c5         db  0x02 ; '.'
000000000000c8c6         db  0x42 ; 'B'
000000000000c8c7         db  0x0e ; '.'
000000000000c8c8         db  0x18 ; '.'
000000000000c8c9         db  0x8c ; '.'
000000000000c8ca         db  0x03 ; '.'
000000000000c8cb         db  0x46 ; 'F'
000000000000c8cc         db  0x0e ; '.'
000000000000c8cd         db  0x20 ; ' '
000000000000c8ce         db  0x86 ; '.'
000000000000c8cf         db  0x04 ; '.'
000000000000c8d0         db  0x41 ; 'A'
000000000000c8d1         db  0x0e ; '.'
000000000000c8d2         db  0x28 ; '('
000000000000c8d3         db  0x83 ; '.'
000000000000c8d4         db  0x05 ; '.'
000000000000c8d5         db  0x49 ; 'I'
000000000000c8d6         db  0x0e ; '.'
000000000000c8d7         db  0xb0 ; '.'
000000000000c8d8         db  0x01 ; '.'
000000000000c8d9         db  0x00 ; '.'
000000000000c8da         db  0x00 ; '.'
000000000000c8db         db  0x00 ; '.'
000000000000c8dc         dd         0x00000058                                  ; Length of the record
000000000000c8e0         dd         0x00000088                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c8e4         db         0xcc, 0x54, 2 dup (0xff)                    ; begin 0x1db0
000000000000c8e8         db         0xd9, 0x05, 2 dup (0x00)                    ; length 0x5d9 (end at 0x2389)
000000000000c8ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c8ed         db  0x42 ; 'B'
000000000000c8ee         db  0x0e ; '.'
000000000000c8ef         db  0x10 ; '.'
000000000000c8f0         db  0x8e ; '.'
000000000000c8f1         db  0x02 ; '.'
000000000000c8f2         db  0x42 ; 'B'
000000000000c8f3         db  0x0e ; '.'
000000000000c8f4         db  0x18 ; '.'
000000000000c8f5         db  0x8d ; '.'
000000000000c8f6         db  0x03 ; '.'
000000000000c8f7         db  0x49 ; 'I'
000000000000c8f8         db  0x0e ; '.'
000000000000c8f9         db  0x20 ; ' '
000000000000c8fa         db  0x8c ; '.'
000000000000c8fb         db  0x04 ; '.'
000000000000c8fc         db  0x41 ; 'A'
000000000000c8fd         db  0x0e ; '.'
000000000000c8fe         db  0x28 ; '('
000000000000c8ff         db  0x86 ; '.'
000000000000c900         db  0x05 ; '.'
000000000000c901         db  0x43 ; 'C'
000000000000c902         db  0x0e ; '.'
000000000000c903         db  0x30 ; '0'
000000000000c904         db  0x83 ; '.'
000000000000c905         db  0x06 ; '.'
000000000000c906         db  0x50 ; 'P'
000000000000c907         db  0x0e ; '.'
000000000000c908         db  0xf0 ; '.'
000000000000c909         db  0x01 ; '.'
000000000000c90a         db  0x03 ; '.'
000000000000c90b         db  0xe5 ; '.'
000000000000c90c         db  0x01 ; '.'
000000000000c90d         db  0x0e ; '.'
000000000000c90e         db  0xf8 ; '.'
000000000000c90f         db  0x01 ; '.'
000000000000c910         db  0x49 ; 'I'
000000000000c911         db  0x0e ; '.'
000000000000c912         db  0x80 ; '.'
000000000000c913         db  0x02 ; '.'
000000000000c914         db  0x4f ; 'O'
000000000000c915         db  0x0e ; '.'
000000000000c916         db  0x88 ; '.'
000000000000c917         db  0x02 ; '.'
000000000000c918         db  0x5d ; ']'
000000000000c919         db  0x0e ; '.'
000000000000c91a         db  0x90 ; '.'
000000000000c91b         db  0x02 ; '.'
000000000000c91c         db  0x4b ; 'K'
000000000000c91d         db  0x0e ; '.'
000000000000c91e         db  0xf0 ; '.'
000000000000c91f         db  0x01 ; '.'
000000000000c920         db  0x03 ; '.'
000000000000c921         db  0xc4 ; '.'
000000000000c922         db  0x01 ; '.'
000000000000c923         db  0x0a ; '.'
000000000000c924         db  0x0e ; '.'
000000000000c925         db  0x30 ; '0'
000000000000c926         db  0x41 ; 'A'
000000000000c927         db  0x0e ; '.'
000000000000c928         db  0x28 ; '('
000000000000c929         db  0x41 ; 'A'
000000000000c92a         db  0x0e ; '.'
000000000000c92b         db  0x20 ; ' '
000000000000c92c         db  0x42 ; 'B'
000000000000c92d         db  0x0e ; '.'
000000000000c92e         db  0x18 ; '.'
000000000000c92f         db  0x42 ; 'B'
000000000000c930         db  0x0e ; '.'
000000000000c931         db  0x10 ; '.'
000000000000c932         db  0x42 ; 'B'
000000000000c933         db  0x0e ; '.'
000000000000c934         db  0x08 ; '.'
000000000000c935         db  0x41 ; 'A'
000000000000c936         db  0x0b ; '.'
000000000000c937         db  0x00 ; '.'
000000000000c938         dd         0x00000038                                  ; Length of the record
000000000000c93c         dd         0x000000e4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c940         db         0xb0, 0x5f, 2 dup (0xff)                    ; begin 0x28f0
000000000000c944         db         0x4d, 0x02, 2 dup (0x00)                    ; length 0x24d (end at 0x2b3d)
000000000000c948         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c949         db  0x42 ; 'B'
000000000000c94a         db  0x0e ; '.'
000000000000c94b         db  0x10 ; '.'
000000000000c94c         db  0x8d ; '.'
000000000000c94d         db  0x02 ; '.'
000000000000c94e         db  0x42 ; 'B'
000000000000c94f         db  0x0e ; '.'
000000000000c950         db  0x18 ; '.'
000000000000c951         db  0x8c ; '.'
000000000000c952         db  0x03 ; '.'
000000000000c953         db  0x44 ; 'D'
000000000000c954         db  0x0e ; '.'
000000000000c955         db  0x20 ; ' '
000000000000c956         db  0x86 ; '.'
000000000000c957         db  0x04 ; '.'
000000000000c958         db  0x41 ; 'A'
000000000000c959         db  0x0e ; '.'
000000000000c95a         db  0x28 ; '('
000000000000c95b         db  0x83 ; '.'
000000000000c95c         db  0x05 ; '.'
000000000000c95d         db  0x51 ; 'Q'
000000000000c95e         db  0x0e ; '.'
000000000000c95f         db  0xd0 ; '.'
000000000000c960         db  0x01 ; '.'
000000000000c961         db  0x02 ; '.'
000000000000c962         db  0x59 ; 'Y'
000000000000c963         db  0x0a ; '.'
000000000000c964         db  0x0e ; '.'
000000000000c965         db  0x28 ; '('
000000000000c966         db  0x41 ; 'A'
000000000000c967         db  0x0e ; '.'
000000000000c968         db  0x20 ; ' '
000000000000c969         db  0x41 ; 'A'
000000000000c96a         db  0x0e ; '.'
000000000000c96b         db  0x18 ; '.'
000000000000c96c         db  0x42 ; 'B'
000000000000c96d         db  0x0e ; '.'
000000000000c96e         db  0x10 ; '.'
000000000000c96f         db  0x42 ; 'B'
000000000000c970         db  0x0e ; '.'
000000000000c971         db  0x08 ; '.'
000000000000c972         db  0x47 ; 'G'
000000000000c973         db  0x0b ; '.'
000000000000c974         dd         0x00000020                                  ; Length of the record
000000000000c978         dd         0x00000120                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c97c         db         0xc4, 0x61, 2 dup (0xff)                    ; begin 0x2b40
000000000000c980         db         0x71, 3 dup (0x00)                          ; length 0x71 (end at 0x2bb1)
000000000000c984         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c985         db  0x41 ; 'A'
000000000000c986         db  0x0e ; '.'
000000000000c987         db  0x10 ; '.'
000000000000c988         db  0x83 ; '.'
000000000000c989         db  0x02 ; '.'
000000000000c98a         db  0x55 ; 'U'
000000000000c98b         db  0x0a ; '.'
000000000000c98c         db  0x0e ; '.'
000000000000c98d         db  0x08 ; '.'
000000000000c98e         db  0x4a ; 'J'
000000000000c98f         db  0x0b ; '.'
000000000000c990         db  0x78 ; 'x'
000000000000c991         db  0x0a ; '.'
000000000000c992         db  0x0e ; '.'
000000000000c993         db  0x08 ; '.'
000000000000c994         db  0x48 ; 'H'
000000000000c995         db  0x0b ; '.'
000000000000c996         db  0x00 ; '.'
000000000000c997         db  0x00 ; '.'
000000000000c998         dd         0x0000004c                                  ; Length of the record
000000000000c99c         dd         0x00000144                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c9a0         db         0x20, 0x62, 2 dup (0xff)                    ; begin 0x2bc0
000000000000c9a4         db         0xc8, 0x04, 2 dup (0x00)                    ; length 0x4c8 (end at 0x3088)
000000000000c9a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c9a9         db  0x42 ; 'B'
000000000000c9aa         db  0x0e ; '.'
000000000000c9ab         db  0x10 ; '.'
000000000000c9ac         db  0x8f ; '.'
000000000000c9ad         db  0x02 ; '.'
000000000000c9ae         db  0x42 ; 'B'
000000000000c9af         db  0x0e ; '.'
000000000000c9b0         db  0x18 ; '.'
000000000000c9b1         db  0x8e ; '.'
000000000000c9b2         db  0x03 ; '.'
000000000000c9b3         db  0x42 ; 'B'
000000000000c9b4         db  0x0e ; '.'
000000000000c9b5         db  0x20 ; ' '
000000000000c9b6         db  0x8d ; '.'
000000000000c9b7         db  0x04 ; '.'
000000000000c9b8         db  0x42 ; 'B'
000000000000c9b9         db  0x0e ; '.'
000000000000c9ba         db  0x28 ; '('
000000000000c9bb         db  0x8c ; '.'
000000000000c9bc         db  0x05 ; '.'
000000000000c9bd         db  0x44 ; 'D'
000000000000c9be         db  0x0e ; '.'
000000000000c9bf         db  0x30 ; '0'
000000000000c9c0         db  0x86 ; '.'
000000000000c9c1         db  0x06 ; '.'
000000000000c9c2         db  0x41 ; 'A'
000000000000c9c3         db  0x0e ; '.'
000000000000c9c4         db  0x38 ; '8'
000000000000c9c5         db  0x83 ; '.'
000000000000c9c6         db  0x07 ; '.'
000000000000c9c7         db  0x4a ; 'J'
000000000000c9c8         db  0x0e ; '.'
000000000000c9c9         db  0x80 ; '.'
000000000000c9ca         db  0x02 ; '.'
000000000000c9cb         db  0x03 ; '.'
000000000000c9cc         db  0x3e ; '>'
000000000000c9cd         db  0x01 ; '.'
000000000000c9ce         db  0x0a ; '.'
000000000000c9cf         db  0x0e ; '.'
000000000000c9d0         db  0x38 ; '8'
000000000000c9d1         db  0x41 ; 'A'
000000000000c9d2         db  0x0e ; '.'
000000000000c9d3         db  0x30 ; '0'
000000000000c9d4         db  0x41 ; 'A'
000000000000c9d5         db  0x0e ; '.'
000000000000c9d6         db  0x28 ; '('
000000000000c9d7         db  0x42 ; 'B'
000000000000c9d8         db  0x0e ; '.'
000000000000c9d9         db  0x20 ; ' '
000000000000c9da         db  0x42 ; 'B'
000000000000c9db         db  0x0e ; '.'
000000000000c9dc         db  0x18 ; '.'
000000000000c9dd         db  0x42 ; 'B'
000000000000c9de         db  0x0e ; '.'
000000000000c9df         db  0x10 ; '.'
000000000000c9e0         db  0x42 ; 'B'
000000000000c9e1         db  0x0e ; '.'
000000000000c9e2         db  0x08 ; '.'
000000000000c9e3         db  0x41 ; 'A'
000000000000c9e4         db  0x0b ; '.'
000000000000c9e5         db  0x00 ; '.'
000000000000c9e6         db  0x00 ; '.'
000000000000c9e7         db  0x00 ; '.'
000000000000c9e8         dd         0x0000004c                                  ; Length of the record
000000000000c9ec         dd         0x00000194                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000c9f0         db         0xa0, 0x66, 2 dup (0xff)                    ; begin 0x3090
000000000000c9f4         db         0x5f, 0x08, 2 dup (0x00)                    ; length 0x85f (end at 0x38ef)
000000000000c9f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000c9f9         db  0x42 ; 'B'
000000000000c9fa         db  0x0e ; '.'
000000000000c9fb         db  0x10 ; '.'
000000000000c9fc         db  0x8f ; '.'
000000000000c9fd         db  0x02 ; '.'
000000000000c9fe         db  0x42 ; 'B'
000000000000c9ff         db  0x0e ; '.'
000000000000ca00         db  0x18 ; '.'
000000000000ca01         db  0x8e ; '.'
000000000000ca02         db  0x03 ; '.'
000000000000ca03         db  0x42 ; 'B'
000000000000ca04         db  0x0e ; '.'
000000000000ca05         db  0x20 ; ' '
000000000000ca06         db  0x8d ; '.'
000000000000ca07         db  0x04 ; '.'
000000000000ca08         db  0x42 ; 'B'
000000000000ca09         db  0x0e ; '.'
000000000000ca0a         db  0x28 ; '('
000000000000ca0b         db  0x8c ; '.'
000000000000ca0c         db  0x05 ; '.'
000000000000ca0d         db  0x41 ; 'A'
000000000000ca0e         db  0x0e ; '.'
000000000000ca0f         db  0x30 ; '0'
000000000000ca10         db  0x86 ; '.'
000000000000ca11         db  0x06 ; '.'
000000000000ca12         db  0x41 ; 'A'
000000000000ca13         db  0x0e ; '.'
000000000000ca14         db  0x38 ; '8'
000000000000ca15         db  0x83 ; '.'
000000000000ca16         db  0x07 ; '.'
000000000000ca17         db  0x47 ; 'G'
000000000000ca18         db  0x0e ; '.'
000000000000ca19         db  0x90 ; '.'
000000000000ca1a         db  0x02 ; '.'
000000000000ca1b         db  0x03 ; '.'
000000000000ca1c         db  0x3b ; ';'
000000000000ca1d         db  0x01 ; '.'
000000000000ca1e         db  0x0a ; '.'
000000000000ca1f         db  0x0e ; '.'
000000000000ca20         db  0x38 ; '8'
000000000000ca21         db  0x41 ; 'A'
000000000000ca22         db  0x0e ; '.'
000000000000ca23         db  0x30 ; '0'
000000000000ca24         db  0x41 ; 'A'
000000000000ca25         db  0x0e ; '.'
000000000000ca26         db  0x28 ; '('
000000000000ca27         db  0x42 ; 'B'
000000000000ca28         db  0x0e ; '.'
000000000000ca29         db  0x20 ; ' '
000000000000ca2a         db  0x42 ; 'B'
000000000000ca2b         db  0x0e ; '.'
000000000000ca2c         db  0x18 ; '.'
000000000000ca2d         db  0x42 ; 'B'
000000000000ca2e         db  0x0e ; '.'
000000000000ca2f         db  0x10 ; '.'
000000000000ca30         db  0x42 ; 'B'
000000000000ca31         db  0x0e ; '.'
000000000000ca32         db  0x08 ; '.'
000000000000ca33         db  0x4a ; 'J'
000000000000ca34         db  0x0b ; '.'
000000000000ca35         db  0x00 ; '.'
000000000000ca36         db  0x00 ; '.'
000000000000ca37         db  0x00 ; '.'
000000000000ca38         dd         0x00000010                                  ; Length of the record
000000000000ca3c         dd         0x000001e4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ca40         db         0xb0, 0x6e, 2 dup (0xff)                    ; begin 0x38f0
000000000000ca44         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x38fa)
000000000000ca48         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ca49         align      4
000000000000ca4c         dd         0x00000048                                  ; Length of the record
000000000000ca50         dd         0x000001f8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ca54         db         0xac, 0x6e, 2 dup (0xff)                    ; begin 0x3900
000000000000ca58         db         0x16, 0x01, 2 dup (0x00)                    ; length 0x116 (end at 0x3a16)
000000000000ca5c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ca5d         db  0x42 ; 'B'
000000000000ca5e         db  0x0e ; '.'
000000000000ca5f         db  0x10 ; '.'
000000000000ca60         db  0x8f ; '.'
000000000000ca61         db  0x02 ; '.'
000000000000ca62         db  0x42 ; 'B'
000000000000ca63         db  0x0e ; '.'
000000000000ca64         db  0x18 ; '.'
000000000000ca65         db  0x8e ; '.'
000000000000ca66         db  0x03 ; '.'
000000000000ca67         db  0x45 ; 'E'
000000000000ca68         db  0x0e ; '.'
000000000000ca69         db  0x20 ; ' '
000000000000ca6a         db  0x8d ; '.'
000000000000ca6b         db  0x04 ; '.'
000000000000ca6c         db  0x42 ; 'B'
000000000000ca6d         db  0x0e ; '.'
000000000000ca6e         db  0x28 ; '('
000000000000ca6f         db  0x8c ; '.'
000000000000ca70         db  0x05 ; '.'
000000000000ca71         db  0x44 ; 'D'
000000000000ca72         db  0x0e ; '.'
000000000000ca73         db  0x30 ; '0'
000000000000ca74         db  0x86 ; '.'
000000000000ca75         db  0x06 ; '.'
000000000000ca76         db  0x41 ; 'A'
000000000000ca77         db  0x0e ; '.'
000000000000ca78         db  0x38 ; '8'
000000000000ca79         db  0x83 ; '.'
000000000000ca7a         db  0x07 ; '.'
000000000000ca7b         db  0x47 ; 'G'
000000000000ca7c         db  0x0e ; '.'
000000000000ca7d         db  0x60 ; '`'
000000000000ca7e         db  0x02 ; '.'
000000000000ca7f         db  0xde ; '.'
000000000000ca80         db  0x0a ; '.'
000000000000ca81         db  0x0e ; '.'
000000000000ca82         db  0x38 ; '8'
000000000000ca83         db  0x41 ; 'A'
000000000000ca84         db  0x0e ; '.'
000000000000ca85         db  0x30 ; '0'
000000000000ca86         db  0x41 ; 'A'
000000000000ca87         db  0x0e ; '.'
000000000000ca88         db  0x28 ; '('
000000000000ca89         db  0x42 ; 'B'
000000000000ca8a         db  0x0e ; '.'
000000000000ca8b         db  0x20 ; ' '
000000000000ca8c         db  0x42 ; 'B'
000000000000ca8d         db  0x0e ; '.'
000000000000ca8e         db  0x18 ; '.'
000000000000ca8f         db  0x42 ; 'B'
000000000000ca90         db  0x0e ; '.'
000000000000ca91         db  0x10 ; '.'
000000000000ca92         db  0x42 ; 'B'
000000000000ca93         db  0x0e ; '.'
000000000000ca94         db  0x08 ; '.'
000000000000ca95         db  0x41 ; 'A'
000000000000ca96         db  0x0b ; '.'
000000000000ca97         db  0x00 ; '.'
000000000000ca98         dd         0x00000028                                  ; Length of the record
000000000000ca9c         dd         0x00000244                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000caa0         db         0x80, 0x6f, 2 dup (0xff)                    ; begin 0x3a20
000000000000caa4         db         0x73, 3 dup (0x00)                          ; length 0x73 (end at 0x3a93)
000000000000caa8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000caa9         db  0x46 ; 'F'
000000000000caaa         db  0x0e ; '.'
000000000000caab         db  0x10 ; '.'
000000000000caac         db  0x8c ; '.'
000000000000caad         db  0x02 ; '.'
000000000000caae         db  0x46 ; 'F'
000000000000caaf         db  0x0e ; '.'
000000000000cab0         db  0x18 ; '.'
000000000000cab1         db  0x86 ; '.'
000000000000cab2         db  0x03 ; '.'
000000000000cab3         db  0x44 ; 'D'
000000000000cab4         db  0x0e ; '.'
000000000000cab5         db  0x20 ; ' '
000000000000cab6         db  0x83 ; '.'
000000000000cab7         db  0x04 ; '.'
000000000000cab8         db  0x7f ; '.'
000000000000cab9         db  0x0a ; '.'
000000000000caba         db  0x0e ; '.'
000000000000cabb         db  0x18 ; '.'
000000000000cabc         db  0x41 ; 'A'
000000000000cabd         db  0x0e ; '.'
000000000000cabe         db  0x10 ; '.'
000000000000cabf         db  0x42 ; 'B'
000000000000cac0         db  0x0e ; '.'
000000000000cac1         db  0x08 ; '.'
000000000000cac2         db  0x4e ; 'N'
000000000000cac3         db  0x0b ; '.'
000000000000cac4         dd         0x0000005c                                  ; Length of the record
000000000000cac8         dd         0x00000270                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cacc         db         0xd4, 0x6f, 2 dup (0xff)                    ; begin 0x3aa0
000000000000cad0         db         0x20, 0x01, 2 dup (0x00)                    ; length 0x120 (end at 0x3bc0)
000000000000cad4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cad5         db  0x42 ; 'B'
000000000000cad6         db  0x0e ; '.'
000000000000cad7         db  0x10 ; '.'
000000000000cad8         db  0x8f ; '.'
000000000000cad9         db  0x02 ; '.'
000000000000cada         db  0x42 ; 'B'
000000000000cadb         db  0x0e ; '.'
000000000000cadc         db  0x18 ; '.'
000000000000cadd         db  0x8e ; '.'
000000000000cade         db  0x03 ; '.'
000000000000cadf         db  0x45 ; 'E'
000000000000cae0         db  0x0e ; '.'
000000000000cae1         db  0x20 ; ' '
000000000000cae2         db  0x8d ; '.'
000000000000cae3         db  0x04 ; '.'
000000000000cae4         db  0x42 ; 'B'
000000000000cae5         db  0x0e ; '.'
000000000000cae6         db  0x28 ; '('
000000000000cae7         db  0x8c ; '.'
000000000000cae8         db  0x05 ; '.'
000000000000cae9         db  0x43 ; 'C'
000000000000caea         db  0x0e ; '.'
000000000000caeb         db  0x30 ; '0'
000000000000caec         db  0x86 ; '.'
000000000000caed         db  0x06 ; '.'
000000000000caee         db  0x41 ; 'A'
000000000000caef         db  0x0e ; '.'
000000000000caf0         db  0x38 ; '8'
000000000000caf1         db  0x83 ; '.'
000000000000caf2         db  0x07 ; '.'
000000000000caf3         db  0x56 ; 'V'
000000000000caf4         db  0x0e ; '.'
000000000000caf5         db  0x40 ; '@'
000000000000caf6         db  0x02 ; '.'
000000000000caf7         db  0xd3 ; '.'
000000000000caf8         db  0x0a ; '.'
000000000000caf9         db  0x0e ; '.'
000000000000cafa         db  0x38 ; '8'
000000000000cafb         db  0x41 ; 'A'
000000000000cafc         db  0x0e ; '.'
000000000000cafd         db  0x30 ; '0'
000000000000cafe         db  0x41 ; 'A'
000000000000caff         db  0x0e ; '.'
000000000000cb00         db  0x28 ; '('
000000000000cb01         db  0x42 ; 'B'
000000000000cb02         db  0x0e ; '.'
000000000000cb03         db  0x20 ; ' '
000000000000cb04         db  0x42 ; 'B'
000000000000cb05         db  0x0e ; '.'
000000000000cb06         db  0x18 ; '.'
000000000000cb07         db  0x42 ; 'B'
000000000000cb08         db  0x0e ; '.'
000000000000cb09         db  0x10 ; '.'
000000000000cb0a         db  0x42 ; 'B'
000000000000cb0b         db  0x0e ; '.'
000000000000cb0c         db  0x08 ; '.'
000000000000cb0d         db  0x46 ; 'F'
000000000000cb0e         db  0x0b ; '.'
000000000000cb0f         db  0x44 ; 'D'
000000000000cb10         db  0x0e ; '.'
000000000000cb11         db  0x38 ; '8'
000000000000cb12         db  0x46 ; 'F'
000000000000cb13         db  0x0e ; '.'
000000000000cb14         db  0x30 ; '0'
000000000000cb15         db  0x41 ; 'A'
000000000000cb16         db  0x0e ; '.'
000000000000cb17         db  0x28 ; '('
000000000000cb18         db  0x42 ; 'B'
000000000000cb19         db  0x0e ; '.'
000000000000cb1a         db  0x20 ; ' '
000000000000cb1b         db  0x42 ; 'B'
000000000000cb1c         db  0x0e ; '.'
000000000000cb1d         db  0x18 ; '.'
000000000000cb1e         db  0x42 ; 'B'
000000000000cb1f         db  0x0e ; '.'
000000000000cb20         db  0x10 ; '.'
000000000000cb21         db  0x42 ; 'B'
000000000000cb22         db  0x0e ; '.'
000000000000cb23         db  0x08 ; '.'
000000000000cb24         dd         0x00000048                                  ; Length of the record
000000000000cb28         dd         0x000002d0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cb2c         db         0x94, 0x70, 2 dup (0xff)                    ; begin 0x3bc0
000000000000cb30         db         0x6d, 3 dup (0x00)                          ; length 0x6d (end at 0x3c2d)
000000000000cb34         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb35         db  0x42 ; 'B'
000000000000cb36         db  0x0e ; '.'
000000000000cb37         db  0x10 ; '.'
000000000000cb38         db  0x8f ; '.'
000000000000cb39         db  0x02 ; '.'
000000000000cb3a         db  0x42 ; 'B'
000000000000cb3b         db  0x0e ; '.'
000000000000cb3c         db  0x18 ; '.'
000000000000cb3d         db  0x8e ; '.'
000000000000cb3e         db  0x03 ; '.'
000000000000cb3f         db  0x45 ; 'E'
000000000000cb40         db  0x0e ; '.'
000000000000cb41         db  0x20 ; ' '
000000000000cb42         db  0x8d ; '.'
000000000000cb43         db  0x04 ; '.'
000000000000cb44         db  0x42 ; 'B'
000000000000cb45         db  0x0e ; '.'
000000000000cb46         db  0x28 ; '('
000000000000cb47         db  0x8c ; '.'
000000000000cb48         db  0x05 ; '.'
000000000000cb49         db  0x44 ; 'D'
000000000000cb4a         db  0x0e ; '.'
000000000000cb4b         db  0x30 ; '0'
000000000000cb4c         db  0x86 ; '.'
000000000000cb4d         db  0x06 ; '.'
000000000000cb4e         db  0x41 ; 'A'
000000000000cb4f         db  0x0e ; '.'
000000000000cb50         db  0x38 ; '8'
000000000000cb51         db  0x83 ; '.'
000000000000cb52         db  0x07 ; '.'
000000000000cb53         db  0x50 ; 'P'
000000000000cb54         db  0x0e ; '.'
000000000000cb55         db  0x40 ; '@'
000000000000cb56         db  0x5a ; 'Z'
000000000000cb57         db  0x0a ; '.'
000000000000cb58         db  0x0e ; '.'
000000000000cb59         db  0x38 ; '8'
000000000000cb5a         db  0x41 ; 'A'
000000000000cb5b         db  0x0e ; '.'
000000000000cb5c         db  0x30 ; '0'
000000000000cb5d         db  0x41 ; 'A'
000000000000cb5e         db  0x0e ; '.'
000000000000cb5f         db  0x28 ; '('
000000000000cb60         db  0x42 ; 'B'
000000000000cb61         db  0x0e ; '.'
000000000000cb62         db  0x20 ; ' '
000000000000cb63         db  0x42 ; 'B'
000000000000cb64         db  0x0e ; '.'
000000000000cb65         db  0x18 ; '.'
000000000000cb66         db  0x42 ; 'B'
000000000000cb67         db  0x0e ; '.'
000000000000cb68         db  0x10 ; '.'
000000000000cb69         db  0x42 ; 'B'
000000000000cb6a         db  0x0e ; '.'
000000000000cb6b         db  0x08 ; '.'
000000000000cb6c         db  0x41 ; 'A'
000000000000cb6d         db  0x0b ; '.'
000000000000cb6e         db  0x00 ; '.'
000000000000cb6f         db  0x00 ; '.'
000000000000cb70         dd         0x0000003c                                  ; Length of the record
000000000000cb74         dd         0x0000031c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cb78         db         0xb8, 0x70, 2 dup (0xff)                    ; begin 0x3c30
000000000000cb7c         db         0x4d, 3 dup (0x00)                          ; length 0x4d (end at 0x3c7d)
000000000000cb80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cb81         db  0x42 ; 'B'
000000000000cb82         db  0x0e ; '.'
000000000000cb83         db  0x10 ; '.'
000000000000cb84         db  0x8e ; '.'
000000000000cb85         db  0x02 ; '.'
000000000000cb86         db  0x42 ; 'B'
000000000000cb87         db  0x0e ; '.'
000000000000cb88         db  0x18 ; '.'
000000000000cb89         db  0x8d ; '.'
000000000000cb8a         db  0x03 ; '.'
000000000000cb8b         db  0x42 ; 'B'
000000000000cb8c         db  0x0e ; '.'
000000000000cb8d         db  0x20 ; ' '
000000000000cb8e         db  0x8c ; '.'
000000000000cb8f         db  0x04 ; '.'
000000000000cb90         db  0x41 ; 'A'
000000000000cb91         db  0x0e ; '.'
000000000000cb92         db  0x28 ; '('
000000000000cb93         db  0x86 ; '.'
000000000000cb94         db  0x05 ; '.'
000000000000cb95         db  0x41 ; 'A'
000000000000cb96         db  0x0e ; '.'
000000000000cb97         db  0x30 ; '0'
000000000000cb98         db  0x83 ; '.'
000000000000cb99         db  0x06 ; '.'
000000000000cb9a         db  0x7a ; 'z'
000000000000cb9b         db  0x0e ; '.'
000000000000cb9c         db  0x28 ; '('
000000000000cb9d         db  0x44 ; 'D'
000000000000cb9e         db  0x0e ; '.'
000000000000cb9f         db  0x20 ; ' '
000000000000cba0         db  0x42 ; 'B'
000000000000cba1         db  0x0e ; '.'
000000000000cba2         db  0x18 ; '.'
000000000000cba3         db  0x42 ; 'B'
000000000000cba4         db  0x0e ; '.'
000000000000cba5         db  0x10 ; '.'
000000000000cba6         db  0x42 ; 'B'
000000000000cba7         db  0x0e ; '.'
000000000000cba8         db  0x08 ; '.'
000000000000cba9         db  0x00 ; '.'
000000000000cbaa         db  0x00 ; '.'
000000000000cbab         db  0x00 ; '.'
000000000000cbac         db  0x00 ; '.'
000000000000cbad         db  0x00 ; '.'
000000000000cbae         db  0x00 ; '.'
000000000000cbaf         db  0x00 ; '.'
000000000000cbb0         dd         0x00000010                                  ; Length of the record
000000000000cbb4         dd         0x0000035c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cbb8         db         0xc8, 0x70, 2 dup (0xff)                    ; begin 0x3c80
000000000000cbbc         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3c88)
000000000000cbc0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cbc1         align      4
000000000000cbc4         dd         0x00000038                                  ; Length of the record
000000000000cbc8         dd         0x00000370                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cbcc         db         0xc4, 0x70, 2 dup (0xff)                    ; begin 0x3c90
000000000000cbd0         db         0x07, 0x01, 2 dup (0x00)                    ; length 0x107 (end at 0x3d97)
000000000000cbd4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cbd5         db  0x42 ; 'B'
000000000000cbd6         db  0x0e ; '.'
000000000000cbd7         db  0x10 ; '.'
000000000000cbd8         db  0x8c ; '.'
000000000000cbd9         db  0x02 ; '.'
000000000000cbda         db  0x41 ; 'A'
000000000000cbdb         db  0x0e ; '.'
000000000000cbdc         db  0x18 ; '.'
000000000000cbdd         db  0x86 ; '.'
000000000000cbde         db  0x03 ; '.'
000000000000cbdf         db  0x41 ; 'A'
000000000000cbe0         db  0x0e ; '.'
000000000000cbe1         db  0x20 ; ' '
000000000000cbe2         db  0x83 ; '.'
000000000000cbe3         db  0x04 ; '.'
000000000000cbe4         db  0x65 ; 'e'
000000000000cbe5         db  0x0a ; '.'
000000000000cbe6         db  0x0e ; '.'
000000000000cbe7         db  0x18 ; '.'
000000000000cbe8         db  0x41 ; 'A'
000000000000cbe9         db  0x0e ; '.'
000000000000cbea         db  0x10 ; '.'
000000000000cbeb         db  0x42 ; 'B'
000000000000cbec         db  0x0e ; '.'
000000000000cbed         db  0x08 ; '.'
000000000000cbee         db  0x4c ; 'L'
000000000000cbef         db  0x0b ; '.'
000000000000cbf0         db  0x02 ; '.'
000000000000cbf1         db  0xac ; '.'
000000000000cbf2         db  0x0a ; '.'
000000000000cbf3         db  0x0e ; '.'
000000000000cbf4         db  0x18 ; '.'
000000000000cbf5         db  0x41 ; 'A'
000000000000cbf6         db  0x0e ; '.'
000000000000cbf7         db  0x10 ; '.'
000000000000cbf8         db  0x42 ; 'B'
000000000000cbf9         db  0x0e ; '.'
000000000000cbfa         db  0x08 ; '.'
000000000000cbfb         db  0x49 ; 'I'
000000000000cbfc         db  0x0b ; '.'
000000000000cbfd         db  0x00 ; '.'
000000000000cbfe         db  0x00 ; '.'
000000000000cbff         db  0x00 ; '.'
000000000000cc00         dd         0x00000010                                  ; Length of the record
000000000000cc04         dd         0x000003ac                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cc08         db         0x98, 0x71, 2 dup (0xff)                    ; begin 0x3da0
000000000000cc0c         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3da8)
000000000000cc10         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc11         align      4
000000000000cc14         dd         0x00000010                                  ; Length of the record
000000000000cc18         dd         0x000003c0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cc1c         db         0x94, 0x71, 2 dup (0xff)                    ; begin 0x3db0
000000000000cc20         db         0x08, 3 dup (0x00)                          ; length 0x8 (end at 0x3db8)
000000000000cc24         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc25         align      8
000000000000cc28         dd         0x0000002c                                  ; Length of the record
000000000000cc2c         dd         0x000003d4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cc30         db         0x90, 0x71, 2 dup (0xff)                    ; begin 0x3dc0
000000000000cc34         db         0xa4, 3 dup (0x00)                          ; length 0xa4 (end at 0x3e64)
000000000000cc38         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc39         db  0x41 ; 'A'
000000000000cc3a         db  0x0e ; '.'
000000000000cc3b         db  0x10 ; '.'
000000000000cc3c         db  0x86 ; '.'
000000000000cc3d         db  0x02 ; '.'
000000000000cc3e         db  0x41 ; 'A'
000000000000cc3f         db  0x0e ; '.'
000000000000cc40         db  0x18 ; '.'
000000000000cc41         db  0x83 ; '.'
000000000000cc42         db  0x03 ; '.'
000000000000cc43         db  0x44 ; 'D'
000000000000cc44         db  0x0e ; '.'
000000000000cc45         db  0x20 ; ' '
000000000000cc46         db  0x7a ; 'z'
000000000000cc47         db  0x0a ; '.'
000000000000cc48         db  0x0e ; '.'
000000000000cc49         db  0x18 ; '.'
000000000000cc4a         db  0x41 ; 'A'
000000000000cc4b         db  0x0e ; '.'
000000000000cc4c         db  0x10 ; '.'
000000000000cc4d         db  0x41 ; 'A'
000000000000cc4e         db  0x0e ; '.'
000000000000cc4f         db  0x08 ; '.'
000000000000cc50         db  0x41 ; 'A'
000000000000cc51         db  0x0b ; '.'
000000000000cc52         db  0x00 ; '.'
000000000000cc53         db  0x00 ; '.'
000000000000cc54         db  0x00 ; '.'
000000000000cc55         db  0x00 ; '.'
000000000000cc56         db  0x00 ; '.'
000000000000cc57         db  0x00 ; '.'
000000000000cc58         dd         0x00000010                                  ; Length of the record
000000000000cc5c         dd         0x00000404                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cc60         db         0x10, 0x72, 2 dup (0xff)                    ; begin 0x3e70
000000000000cc64         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x3ecc)
000000000000cc68         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc69         align      4
000000000000cc6c         dd         0x00000028                                  ; Length of the record
000000000000cc70         dd         0x00000418                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cc74         db         0x5c, 0x72, 2 dup (0xff)                    ; begin 0x3ed0
000000000000cc78         db         0x47, 3 dup (0x00)                          ; length 0x47 (end at 0x3f17)
000000000000cc7c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cc7d         db  0x41 ; 'A'
000000000000cc7e         db  0x0e ; '.'
000000000000cc7f         db  0x10 ; '.'
000000000000cc80         db  0x83 ; '.'
000000000000cc81         db  0x02 ; '.'
000000000000cc82         db  0x5a ; 'Z'
000000000000cc83         db  0x0a ; '.'
000000000000cc84         db  0x0e ; '.'
000000000000cc85         db  0x08 ; '.'
000000000000cc86         db  0x45 ; 'E'
000000000000cc87         db  0x0b ; '.'
000000000000cc88         db  0x5d ; ']'
000000000000cc89         db  0x0a ; '.'
000000000000cc8a         db  0x0e ; '.'
000000000000cc8b         db  0x08 ; '.'
000000000000cc8c         db  0x43 ; 'C'
000000000000cc8d         db  0x0b ; '.'
000000000000cc8e         db  0x46 ; 'F'
000000000000cc8f         db  0x0e ; '.'
000000000000cc90         db  0x08 ; '.'
000000000000cc91         db  0x00 ; '.'
000000000000cc92         db  0x00 ; '.'
000000000000cc93         db  0x00 ; '.'
000000000000cc94         db  0x00 ; '.'
000000000000cc95         db  0x00 ; '.'
000000000000cc96         db  0x00 ; '.'
000000000000cc97         db  0x00 ; '.'
000000000000cc98         dd         0x00000014                                  ; Length of the record
000000000000cc9c         dd         0x00000444                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cca0         db         0x80, 0x72, 2 dup (0xff)                    ; begin 0x3f20
000000000000cca4         db         0xee, 3 dup (0x00)                          ; length 0xee (end at 0x400e)
000000000000cca8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cca9         align      16
000000000000ccb0         dd         0x0000001c                                  ; Length of the record
000000000000ccb4         dd         0x0000045c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ccb8         db         0x58, 0x73, 2 dup (0xff)                    ; begin 0x4010
000000000000ccbc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x4028)
000000000000ccc0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ccc1         db  0x44 ; 'D'
000000000000ccc2         db  0x0e ; '.'
000000000000ccc3         db  0x10 ; '.'
000000000000ccc4         db  0x4e ; 'N'
000000000000ccc5         db  0x0a ; '.'
000000000000ccc6         db  0x0e ; '.'
000000000000ccc7         db  0x08 ; '.'
000000000000ccc8         db  0x41 ; 'A'
000000000000ccc9         db  0x0b ; '.'
000000000000ccca         db  0x00 ; '.'
000000000000cccb         db  0x00 ; '.'
000000000000cccc         db  0x00 ; '.'
000000000000cccd         db  0x00 ; '.'
000000000000ccce         db  0x00 ; '.'
000000000000cccf         db  0x00 ; '.'
000000000000ccd0         dd         0x0000004c                                  ; Length of the record
000000000000ccd4         dd         0x0000047c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ccd8         db         0x58, 0x73, 2 dup (0xff)                    ; begin 0x4030
000000000000ccdc         db         0xff, 3 dup (0x00)                          ; length 0xff (end at 0x412f)
000000000000cce0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cce1         db  0x42 ; 'B'
000000000000cce2         db  0x0e ; '.'
000000000000cce3         db  0x10 ; '.'
000000000000cce4         db  0x8f ; '.'
000000000000cce5         db  0x02 ; '.'
000000000000cce6         db  0x42 ; 'B'
000000000000cce7         db  0x0e ; '.'
000000000000cce8         db  0x18 ; '.'
000000000000cce9         db  0x8e ; '.'
000000000000ccea         db  0x03 ; '.'
000000000000cceb         db  0x45 ; 'E'
000000000000ccec         db  0x0e ; '.'
000000000000cced         db  0x20 ; ' '
000000000000ccee         db  0x8d ; '.'
000000000000ccef         db  0x04 ; '.'
000000000000ccf0         db  0x42 ; 'B'
000000000000ccf1         db  0x0e ; '.'
000000000000ccf2         db  0x28 ; '('
000000000000ccf3         db  0x8c ; '.'
000000000000ccf4         db  0x05 ; '.'
000000000000ccf5         db  0x44 ; 'D'
000000000000ccf6         db  0x0e ; '.'
000000000000ccf7         db  0x30 ; '0'
000000000000ccf8         db  0x86 ; '.'
000000000000ccf9         db  0x06 ; '.'
000000000000ccfa         db  0x41 ; 'A'
000000000000ccfb         db  0x0e ; '.'
000000000000ccfc         db  0x38 ; '8'
000000000000ccfd         db  0x83 ; '.'
000000000000ccfe         db  0x07 ; '.'
000000000000ccff         db  0x47 ; 'G'
000000000000cd00         db  0x0e ; '.'
000000000000cd01         db  0x50 ; 'P'
000000000000cd02         db  0x02 ; '.'
000000000000cd03         db  0xc3 ; '.'
000000000000cd04         db  0x0a ; '.'
000000000000cd05         db  0x0e ; '.'
000000000000cd06         db  0x38 ; '8'
000000000000cd07         db  0x44 ; 'D'
000000000000cd08         db  0x0e ; '.'
000000000000cd09         db  0x30 ; '0'
000000000000cd0a         db  0x41 ; 'A'
000000000000cd0b         db  0x0e ; '.'
000000000000cd0c         db  0x28 ; '('
000000000000cd0d         db  0x42 ; 'B'
000000000000cd0e         db  0x0e ; '.'
000000000000cd0f         db  0x20 ; ' '
000000000000cd10         db  0x42 ; 'B'
000000000000cd11         db  0x0e ; '.'
000000000000cd12         db  0x18 ; '.'
000000000000cd13         db  0x42 ; 'B'
000000000000cd14         db  0x0e ; '.'
000000000000cd15         db  0x10 ; '.'
000000000000cd16         db  0x42 ; 'B'
000000000000cd17         db  0x0e ; '.'
000000000000cd18         db  0x08 ; '.'
000000000000cd19         db  0x49 ; 'I'
000000000000cd1a         db  0x0b ; '.'
000000000000cd1b         db  0x00 ; '.'
000000000000cd1c         db  0x00 ; '.'
000000000000cd1d         db  0x00 ; '.'
000000000000cd1e         db  0x00 ; '.'
000000000000cd1f         db  0x00 ; '.'
000000000000cd20         dd         0x0000001c                                  ; Length of the record
000000000000cd24         dd         0x000004cc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cd28         db         0x08, 0x74, 2 dup (0xff)                    ; begin 0x4130
000000000000cd2c         db         0x9f, 3 dup (0x00)                          ; length 0x9f (end at 0x41cf)
000000000000cd30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd31         db  0x44 ; 'D'
000000000000cd32         db  0x0e ; '.'
000000000000cd33         db  0x10 ; '.'
000000000000cd34         db  0x83 ; '.'
000000000000cd35         db  0x02 ; '.'
000000000000cd36         db  0x02 ; '.'
000000000000cd37         db  0x78 ; 'x'
000000000000cd38         db  0x0a ; '.'
000000000000cd39         db  0x0e ; '.'
000000000000cd3a         db  0x08 ; '.'
000000000000cd3b         db  0x41 ; 'A'
000000000000cd3c         db  0x0b ; '.'
000000000000cd3d         db  0x00 ; '.'
000000000000cd3e         db  0x00 ; '.'
000000000000cd3f         db  0x00 ; '.'
000000000000cd40         dd         0x00000040                                  ; Length of the record
000000000000cd44         dd         0x000004ec                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cd48         db         0x88, 0x74, 2 dup (0xff)                    ; begin 0x41d0
000000000000cd4c         db         0xe7, 3 dup (0x00)                          ; length 0xe7 (end at 0x42b7)
000000000000cd50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd51         db  0x41 ; 'A'
000000000000cd52         db  0x0e ; '.'
000000000000cd53         db  0x10 ; '.'
000000000000cd54         db  0x86 ; '.'
000000000000cd55         db  0x02 ; '.'
000000000000cd56         db  0x41 ; 'A'
000000000000cd57         db  0x0e ; '.'
000000000000cd58         db  0x18 ; '.'
000000000000cd59         db  0x83 ; '.'
000000000000cd5a         db  0x03 ; '.'
000000000000cd5b         db  0x49 ; 'I'
000000000000cd5c         db  0x0e ; '.'
000000000000cd5d         db  0x20 ; ' '
000000000000cd5e         db  0x6e ; 'n'
000000000000cd5f         db  0x0a ; '.'
000000000000cd60         db  0x0e ; '.'
000000000000cd61         db  0x18 ; '.'
000000000000cd62         db  0x41 ; 'A'
000000000000cd63         db  0x0e ; '.'
000000000000cd64         db  0x10 ; '.'
000000000000cd65         db  0x41 ; 'A'
000000000000cd66         db  0x0e ; '.'
000000000000cd67         db  0x08 ; '.'
000000000000cd68         db  0x45 ; 'E'
000000000000cd69         db  0x0b ; '.'
000000000000cd6a         db  0x02 ; '.'
000000000000cd6b         db  0x4a ; 'J'
000000000000cd6c         db  0x0a ; '.'
000000000000cd6d         db  0x0e ; '.'
000000000000cd6e         db  0x18 ; '.'
000000000000cd6f         db  0x41 ; 'A'
000000000000cd70         db  0x0e ; '.'
000000000000cd71         db  0x10 ; '.'
000000000000cd72         db  0x41 ; 'A'
000000000000cd73         db  0x0e ; '.'
000000000000cd74         db  0x08 ; '.'
000000000000cd75         db  0x44 ; 'D'
000000000000cd76         db  0x0b ; '.'
000000000000cd77         db  0x02 ; '.'
000000000000cd78         db  0x54 ; 'T'
000000000000cd79         db  0x0e ; '.'
000000000000cd7a         db  0x18 ; '.'
000000000000cd7b         db  0x41 ; 'A'
000000000000cd7c         db  0x0e ; '.'
000000000000cd7d         db  0x10 ; '.'
000000000000cd7e         db  0x41 ; 'A'
000000000000cd7f         db  0x0e ; '.'
000000000000cd80         db  0x08 ; '.'
000000000000cd81         db  0x00 ; '.'
000000000000cd82         db  0x00 ; '.'
000000000000cd83         db  0x00 ; '.'
000000000000cd84         dd         0x00000074                                  ; Length of the record
000000000000cd88         dd         0x00000530                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cd8c         db         0x34, 0x75, 2 dup (0xff)                    ; begin 0x42c0
000000000000cd90         db         0x34, 0x12, 2 dup (0x00)                    ; length 0x1234 (end at 0x54f4)
000000000000cd94         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cd95         db  0x42 ; 'B'
000000000000cd96         db  0x0e ; '.'
000000000000cd97         db  0x10 ; '.'
000000000000cd98         db  0x8f ; '.'
000000000000cd99         db  0x02 ; '.'
000000000000cd9a         db  0x42 ; 'B'
000000000000cd9b         db  0x0e ; '.'
000000000000cd9c         db  0x18 ; '.'
000000000000cd9d         db  0x8e ; '.'
000000000000cd9e         db  0x03 ; '.'
000000000000cd9f         db  0x45 ; 'E'
000000000000cda0         db  0x0e ; '.'
000000000000cda1         db  0x20 ; ' '
000000000000cda2         db  0x8d ; '.'
000000000000cda3         db  0x04 ; '.'
000000000000cda4         db  0x42 ; 'B'
000000000000cda5         db  0x0e ; '.'
000000000000cda6         db  0x28 ; '('
000000000000cda7         db  0x8c ; '.'
000000000000cda8         db  0x05 ; '.'
000000000000cda9         db  0x44 ; 'D'
000000000000cdaa         db  0x0e ; '.'
000000000000cdab         db  0x30 ; '0'
000000000000cdac         db  0x86 ; '.'
000000000000cdad         db  0x06 ; '.'
000000000000cdae         db  0x41 ; 'A'
000000000000cdaf         db  0x0e ; '.'
000000000000cdb0         db  0x38 ; '8'
000000000000cdb1         db  0x83 ; '.'
000000000000cdb2         db  0x07 ; '.'
000000000000cdb3         db  0x53 ; 'S'
000000000000cdb4         db  0x0e ; '.'
000000000000cdb5         db  0xf0 ; '.'
000000000000cdb6         db  0x01 ; '.'
000000000000cdb7         db  0x03 ; '.'
000000000000cdb8         db  0x81 ; '.'
000000000000cdb9         db  0x0b ; '.'
000000000000cdba         db  0x0e ; '.'
000000000000cdbb         db  0xf8 ; '.'
000000000000cdbc         db  0x01 ; '.'
000000000000cdbd         db  0x4a ; 'J'
000000000000cdbe         db  0x0e ; '.'
000000000000cdbf         db  0x80 ; '.'
000000000000cdc0         db  0x02 ; '.'
000000000000cdc1         db  0x44 ; 'D'
000000000000cdc2         db  0x0e ; '.'
000000000000cdc3         db  0x88 ; '.'
000000000000cdc4         db  0x02 ; '.'
000000000000cdc5         db  0x45 ; 'E'
000000000000cdc6         db  0x0e ; '.'
000000000000cdc7         db  0x90 ; '.'
000000000000cdc8         db  0x02 ; '.'
000000000000cdc9         db  0x5f ; '_'
000000000000cdca         db  0x0e ; '.'
000000000000cdcb         db  0xf0 ; '.'
000000000000cdcc         db  0x01 ; '.'
000000000000cdcd         db  0x64 ; 'd'
000000000000cdce         db  0x0a ; '.'
000000000000cdcf         db  0x0e ; '.'
000000000000cdd0         db  0x38 ; '8'
000000000000cdd1         db  0x41 ; 'A'
000000000000cdd2         db  0x0e ; '.'
000000000000cdd3         db  0x30 ; '0'
000000000000cdd4         db  0x41 ; 'A'
000000000000cdd5         db  0x0e ; '.'
000000000000cdd6         db  0x28 ; '('
000000000000cdd7         db  0x42 ; 'B'
000000000000cdd8         db  0x0e ; '.'
000000000000cdd9         db  0x20 ; ' '
000000000000cdda         db  0x42 ; 'B'
000000000000cddb         db  0x0e ; '.'
000000000000cddc         db  0x18 ; '.'
000000000000cddd         db  0x42 ; 'B'
000000000000cdde         db  0x0e ; '.'
000000000000cddf         db  0x10 ; '.'
000000000000cde0         db  0x42 ; 'B'
000000000000cde1         db  0x0e ; '.'
000000000000cde2         db  0x08 ; '.'
000000000000cde3         db  0x44 ; 'D'
000000000000cde4         db  0x0b ; '.'
000000000000cde5         db  0x03 ; '.'
000000000000cde6         db  0x99 ; '.'
000000000000cde7         db  0x05 ; '.'
000000000000cde8         db  0x0e ; '.'
000000000000cde9         db  0xf8 ; '.'
000000000000cdea         db  0x01 ; '.'
000000000000cdeb         db  0x4d ; 'M'
000000000000cdec         db  0x0e ; '.'
000000000000cded         db  0x80 ; '.'
000000000000cdee         db  0x02 ; '.'
000000000000cdef         db  0x44 ; 'D'
000000000000cdf0         db  0x0e ; '.'
000000000000cdf1         db  0x88 ; '.'
000000000000cdf2         db  0x02 ; '.'
000000000000cdf3         db  0x47 ; 'G'
000000000000cdf4         db  0x0e ; '.'
000000000000cdf5         db  0x90 ; '.'
000000000000cdf6         db  0x02 ; '.'
000000000000cdf7         db  0x5b ; '['
000000000000cdf8         db  0x0e ; '.'
000000000000cdf9         db  0xf0 ; '.'
000000000000cdfa         db  0x01 ; '.'
000000000000cdfb         db  0x00 ; '.'
000000000000cdfc         dd         0x00000068                                  ; Length of the record
000000000000ce00         dd         0x000005a8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ce04         db         0xfc, 0x86, 2 dup (0xff)                    ; begin 0x5500
000000000000ce08         db         0xab, 0x01, 2 dup (0x00)                    ; length 0x1ab (end at 0x56ab)
000000000000ce0c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce0d         db  0x42 ; 'B'
000000000000ce0e         db  0x0e ; '.'
000000000000ce0f         db  0x10 ; '.'
000000000000ce10         db  0x8f ; '.'
000000000000ce11         db  0x02 ; '.'
000000000000ce12         db  0x42 ; 'B'
000000000000ce13         db  0x0e ; '.'
000000000000ce14         db  0x18 ; '.'
000000000000ce15         db  0x8e ; '.'
000000000000ce16         db  0x03 ; '.'
000000000000ce17         db  0x45 ; 'E'
000000000000ce18         db  0x0e ; '.'
000000000000ce19         db  0x20 ; ' '
000000000000ce1a         db  0x8d ; '.'
000000000000ce1b         db  0x04 ; '.'
000000000000ce1c         db  0x42 ; 'B'
000000000000ce1d         db  0x0e ; '.'
000000000000ce1e         db  0x28 ; '('
000000000000ce1f         db  0x8c ; '.'
000000000000ce20         db  0x05 ; '.'
000000000000ce21         db  0x44 ; 'D'
000000000000ce22         db  0x0e ; '.'
000000000000ce23         db  0x30 ; '0'
000000000000ce24         db  0x86 ; '.'
000000000000ce25         db  0x06 ; '.'
000000000000ce26         db  0x41 ; 'A'
000000000000ce27         db  0x0e ; '.'
000000000000ce28         db  0x38 ; '8'
000000000000ce29         db  0x83 ; '.'
000000000000ce2a         db  0x07 ; '.'
000000000000ce2b         db  0x47 ; 'G'
000000000000ce2c         db  0x0e ; '.'
000000000000ce2d         db  0x60 ; '`'
000000000000ce2e         db  0x02 ; '.'
000000000000ce2f         db  0x99 ; '.'
000000000000ce30         db  0x0e ; '.'
000000000000ce31         db  0x68 ; 'h'
000000000000ce32         db  0x5f ; '_'
000000000000ce33         db  0x0e ; '.'
000000000000ce34         db  0x70 ; 'p'
000000000000ce35         db  0x46 ; 'F'
000000000000ce36         db  0x0e ; '.'
000000000000ce37         db  0x78 ; 'x'
000000000000ce38         db  0x42 ; 'B'
000000000000ce39         db  0x0e ; '.'
000000000000ce3a         db  0x80 ; '.'
000000000000ce3b         db  0x01 ; '.'
000000000000ce3c         db  0x59 ; 'Y'
000000000000ce3d         db  0x0e ; '.'
000000000000ce3e         db  0x60 ; '`'
000000000000ce3f         db  0x02 ; '.'
000000000000ce40         db  0x40 ; '@'
000000000000ce41         db  0x0e ; '.'
000000000000ce42         db  0x68 ; 'h'
000000000000ce43         db  0x4b ; 'K'
000000000000ce44         db  0x0e ; '.'
000000000000ce45         db  0x70 ; 'p'
000000000000ce46         db  0x43 ; 'C'
000000000000ce47         db  0x0e ; '.'
000000000000ce48         db  0x78 ; 'x'
000000000000ce49         db  0x45 ; 'E'
000000000000ce4a         db  0x0e ; '.'
000000000000ce4b         db  0x80 ; '.'
000000000000ce4c         db  0x01 ; '.'
000000000000ce4d         db  0x5e ; '^'
000000000000ce4e         db  0x0e ; '.'
000000000000ce4f         db  0x60 ; '`'
000000000000ce50         db  0x4c ; 'L'
000000000000ce51         db  0x0a ; '.'
000000000000ce52         db  0x0e ; '.'
000000000000ce53         db  0x38 ; '8'
000000000000ce54         db  0x44 ; 'D'
000000000000ce55         db  0x0e ; '.'
000000000000ce56         db  0x30 ; '0'
000000000000ce57         db  0x41 ; 'A'
000000000000ce58         db  0x0e ; '.'
000000000000ce59         db  0x28 ; '('
000000000000ce5a         db  0x42 ; 'B'
000000000000ce5b         db  0x0e ; '.'
000000000000ce5c         db  0x20 ; ' '
000000000000ce5d         db  0x42 ; 'B'
000000000000ce5e         db  0x0e ; '.'
000000000000ce5f         db  0x18 ; '.'
000000000000ce60         db  0x42 ; 'B'
000000000000ce61         db  0x0e ; '.'
000000000000ce62         db  0x10 ; '.'
000000000000ce63         db  0x42 ; 'B'
000000000000ce64         db  0x0e ; '.'
000000000000ce65         db  0x08 ; '.'
000000000000ce66         db  0x46 ; 'F'
000000000000ce67         db  0x0b ; '.'
000000000000ce68         dd         0x00000028                                  ; Length of the record
000000000000ce6c         dd         0x00000614                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ce70         db         0x40, 0x88, 2 dup (0xff)                    ; begin 0x56b0
000000000000ce74         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x56e6)
000000000000ce78         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ce79         db  0x42 ; 'B'
000000000000ce7a         db  0x0e ; '.'
000000000000ce7b         db  0x10 ; '.'
000000000000ce7c         db  0x8c ; '.'
000000000000ce7d         db  0x02 ; '.'
000000000000ce7e         db  0x41 ; 'A'
000000000000ce7f         db  0x0e ; '.'
000000000000ce80         db  0x18 ; '.'
000000000000ce81         db  0x86 ; '.'
000000000000ce82         db  0x03 ; '.'
000000000000ce83         db  0x41 ; 'A'
000000000000ce84         db  0x0e ; '.'
000000000000ce85         db  0x20 ; ' '
000000000000ce86         db  0x83 ; '.'
000000000000ce87         db  0x04 ; '.'
000000000000ce88         db  0x6e ; 'n'
000000000000ce89         db  0x0e ; '.'
000000000000ce8a         db  0x18 ; '.'
000000000000ce8b         db  0x41 ; 'A'
000000000000ce8c         db  0x0e ; '.'
000000000000ce8d         db  0x10 ; '.'
000000000000ce8e         db  0x42 ; 'B'
000000000000ce8f         db  0x0e ; '.'
000000000000ce90         db  0x08 ; '.'
000000000000ce91         db  0x00 ; '.'
000000000000ce92         db  0x00 ; '.'
000000000000ce93         db  0x00 ; '.'
000000000000ce94         dd         0x00000010                                  ; Length of the record
000000000000ce98         dd         0x00000640                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ce9c         db         0x54, 0x88, 2 dup (0xff)                    ; begin 0x56f0
000000000000cea0         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5701)
000000000000cea4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cea5         align      8
000000000000cea8         dd         0x00000010                                  ; Length of the record
000000000000ceac         dd         0x00000654                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ceb0         db         0x60, 0x88, 2 dup (0xff)                    ; begin 0x5710
000000000000ceb4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5721)
000000000000ceb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ceb9         align      4
000000000000cebc         dd         0x00000010                                  ; Length of the record
000000000000cec0         dd         0x00000668                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cec4         db         0x6c, 0x88, 2 dup (0xff)                    ; begin 0x5730
000000000000cec8         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x5765)
000000000000cecc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cecd         align      16
000000000000ced0         dd         0x00000010                                  ; Length of the record
000000000000ced4         dd         0x0000067c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ced8         db         0x98, 0x88, 2 dup (0xff)                    ; begin 0x5770
000000000000cedc         db         0x15, 3 dup (0x00)                          ; length 0x15 (end at 0x5785)
000000000000cee0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cee1         align      4
000000000000cee4         dd         0x00000010                                  ; Length of the record
000000000000cee8         dd         0x00000690                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ceec         db         0xa4, 0x88, 2 dup (0xff)                    ; begin 0x5790
000000000000cef0         db         0x30, 3 dup (0x00)                          ; length 0x30 (end at 0x57c0)
000000000000cef4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cef5         db  0x6b ; 'k'
000000000000cef6         db  0x0e ; '.'
000000000000cef7         db  0x10 ; '.'
000000000000cef8         dd         0x00000050                                  ; Length of the record
000000000000cefc         dd         0x000006a4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cf00         db         0xc0, 0x88, 2 dup (0xff)                    ; begin 0x57c0
000000000000cf04         db         0x74, 3 dup (0x00)                          ; length 0x74 (end at 0x5834)
000000000000cf08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf09         db  0x42 ; 'B'
000000000000cf0a         db  0x0e ; '.'
000000000000cf0b         db  0x10 ; '.'
000000000000cf0c         db  0x8f ; '.'
000000000000cf0d         db  0x02 ; '.'
000000000000cf0e         db  0x42 ; 'B'
000000000000cf0f         db  0x0e ; '.'
000000000000cf10         db  0x18 ; '.'
000000000000cf11         db  0x8e ; '.'
000000000000cf12         db  0x03 ; '.'
000000000000cf13         db  0x49 ; 'I'
000000000000cf14         db  0x0e ; '.'
000000000000cf15         db  0x20 ; ' '
000000000000cf16         db  0x8d ; '.'
000000000000cf17         db  0x04 ; '.'
000000000000cf18         db  0x42 ; 'B'
000000000000cf19         db  0x0e ; '.'
000000000000cf1a         db  0x28 ; '('
000000000000cf1b         db  0x8c ; '.'
000000000000cf1c         db  0x05 ; '.'
000000000000cf1d         db  0x44 ; 'D'
000000000000cf1e         db  0x0e ; '.'
000000000000cf1f         db  0x30 ; '0'
000000000000cf20         db  0x86 ; '.'
000000000000cf21         db  0x06 ; '.'
000000000000cf22         db  0x41 ; 'A'
000000000000cf23         db  0x0e ; '.'
000000000000cf24         db  0x38 ; '8'
000000000000cf25         db  0x83 ; '.'
000000000000cf26         db  0x07 ; '.'
000000000000cf27         db  0x4d ; 'M'
000000000000cf28         db  0x0e ; '.'
000000000000cf29         db  0x50 ; 'P'
000000000000cf2a         db  0x5f ; '_'
000000000000cf2b         db  0x0e ; '.'
000000000000cf2c         db  0x58 ; 'X'
000000000000cf2d         db  0x47 ; 'G'
000000000000cf2e         db  0x0e ; '.'
000000000000cf2f         db  0x60 ; '`'
000000000000cf30         db  0x46 ; 'F'
000000000000cf31         db  0x0e ; '.'
000000000000cf32         db  0x68 ; 'h'
000000000000cf33         db  0x44 ; 'D'
000000000000cf34         db  0x0e ; '.'
000000000000cf35         db  0x70 ; 'p'
000000000000cf36         db  0x58 ; 'X'
000000000000cf37         db  0x0e ; '.'
000000000000cf38         db  0x38 ; '8'
000000000000cf39         db  0x41 ; 'A'
000000000000cf3a         db  0x0e ; '.'
000000000000cf3b         db  0x30 ; '0'
000000000000cf3c         db  0x41 ; 'A'
000000000000cf3d         db  0x0e ; '.'
000000000000cf3e         db  0x28 ; '('
000000000000cf3f         db  0x42 ; 'B'
000000000000cf40         db  0x0e ; '.'
000000000000cf41         db  0x20 ; ' '
000000000000cf42         db  0x42 ; 'B'
000000000000cf43         db  0x0e ; '.'
000000000000cf44         db  0x18 ; '.'
000000000000cf45         db  0x42 ; 'B'
000000000000cf46         db  0x0e ; '.'
000000000000cf47         db  0x10 ; '.'
000000000000cf48         db  0x42 ; 'B'
000000000000cf49         db  0x0e ; '.'
000000000000cf4a         db  0x08 ; '.'
000000000000cf4b         db  0x00 ; '.'
000000000000cf4c         dd         0x00000068                                  ; Length of the record
000000000000cf50         dd         0x000006f8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cf54         db         0xec, 0x88, 2 dup (0xff)                    ; begin 0x5840
000000000000cf58         db         0xe3, 3 dup (0x00)                          ; length 0xe3 (end at 0x5923)
000000000000cf5c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cf5d         db  0x42 ; 'B'
000000000000cf5e         db  0x0e ; '.'
000000000000cf5f         db  0x10 ; '.'
000000000000cf60         db  0x8f ; '.'
000000000000cf61         db  0x02 ; '.'
000000000000cf62         db  0x42 ; 'B'
000000000000cf63         db  0x0e ; '.'
000000000000cf64         db  0x18 ; '.'
000000000000cf65         db  0x8e ; '.'
000000000000cf66         db  0x03 ; '.'
000000000000cf67         db  0x49 ; 'I'
000000000000cf68         db  0x0e ; '.'
000000000000cf69         db  0x20 ; ' '
000000000000cf6a         db  0x8d ; '.'
000000000000cf6b         db  0x04 ; '.'
000000000000cf6c         db  0x42 ; 'B'
000000000000cf6d         db  0x0e ; '.'
000000000000cf6e         db  0x28 ; '('
000000000000cf6f         db  0x8c ; '.'
000000000000cf70         db  0x05 ; '.'
000000000000cf71         db  0x44 ; 'D'
000000000000cf72         db  0x0e ; '.'
000000000000cf73         db  0x30 ; '0'
000000000000cf74         db  0x86 ; '.'
000000000000cf75         db  0x06 ; '.'
000000000000cf76         db  0x41 ; 'A'
000000000000cf77         db  0x0e ; '.'
000000000000cf78         db  0x38 ; '8'
000000000000cf79         db  0x83 ; '.'
000000000000cf7a         db  0x07 ; '.'
000000000000cf7b         db  0x4d ; 'M'
000000000000cf7c         db  0x0e ; '.'
000000000000cf7d         db  0x70 ; 'p'
000000000000cf7e         db  0x65 ; 'e'
000000000000cf7f         db  0x0e ; '.'
000000000000cf80         db  0x78 ; 'x'
000000000000cf81         db  0x4d ; 'M'
000000000000cf82         db  0x0e ; '.'
000000000000cf83         db  0x80 ; '.'
000000000000cf84         db  0x01 ; '.'
000000000000cf85         db  0x46 ; 'F'
000000000000cf86         db  0x0e ; '.'
000000000000cf87         db  0x88 ; '.'
000000000000cf88         db  0x01 ; '.'
000000000000cf89         db  0x42 ; 'B'
000000000000cf8a         db  0x0e ; '.'
000000000000cf8b         db  0x90 ; '.'
000000000000cf8c         db  0x01 ; '.'
000000000000cf8d         db  0x5e ; '^'
000000000000cf8e         db  0x0e ; '.'
000000000000cf8f         db  0x70 ; 'p'
000000000000cf90         db  0x56 ; 'V'
000000000000cf91         db  0x0e ; '.'
000000000000cf92         db  0x78 ; 'x'
000000000000cf93         db  0x43 ; 'C'
000000000000cf94         db  0x0e ; '.'
000000000000cf95         db  0x80 ; '.'
000000000000cf96         db  0x01 ; '.'
000000000000cf97         db  0x43 ; 'C'
000000000000cf98         db  0x0e ; '.'
000000000000cf99         db  0x88 ; '.'
000000000000cf9a         db  0x01 ; '.'
000000000000cf9b         db  0x56 ; 'V'
000000000000cf9c         db  0x0e ; '.'
000000000000cf9d         db  0x90 ; '.'
000000000000cf9e         db  0x01 ; '.'
000000000000cf9f         db  0x52 ; 'R'
000000000000cfa0         db  0x0e ; '.'
000000000000cfa1         db  0x70 ; 'p'
000000000000cfa2         db  0x5b ; '['
000000000000cfa3         db  0x0e ; '.'
000000000000cfa4         db  0x38 ; '8'
000000000000cfa5         db  0x41 ; 'A'
000000000000cfa6         db  0x0e ; '.'
000000000000cfa7         db  0x30 ; '0'
000000000000cfa8         db  0x41 ; 'A'
000000000000cfa9         db  0x0e ; '.'
000000000000cfaa         db  0x28 ; '('
000000000000cfab         db  0x42 ; 'B'
000000000000cfac         db  0x0e ; '.'
000000000000cfad         db  0x20 ; ' '
000000000000cfae         db  0x42 ; 'B'
000000000000cfaf         db  0x0e ; '.'
000000000000cfb0         db  0x18 ; '.'
000000000000cfb1         db  0x42 ; 'B'
000000000000cfb2         db  0x0e ; '.'
000000000000cfb3         db  0x10 ; '.'
000000000000cfb4         db  0x42 ; 'B'
000000000000cfb5         db  0x0e ; '.'
000000000000cfb6         db  0x08 ; '.'
000000000000cfb7         db  0x00 ; '.'
000000000000cfb8         dd         0x00000010                                  ; Length of the record
000000000000cfbc         dd         0x00000764                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cfc0         db         0x70, 0x89, 2 dup (0xff)                    ; begin 0x5930
000000000000cfc4         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x593a)
000000000000cfc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cfc9         align      4
000000000000cfcc         dd         0x00000028                                  ; Length of the record
000000000000cfd0         dd         0x00000778                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000cfd4         db         0x6c, 0x89, 2 dup (0xff)                    ; begin 0x5940
000000000000cfd8         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x59d3)
000000000000cfdc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000cfdd         db  0x48 ; 'H'
000000000000cfde         db  0x0e ; '.'
000000000000cfdf         db  0x10 ; '.'
000000000000cfe0         db  0x8c ; '.'
000000000000cfe1         db  0x02 ; '.'
000000000000cfe2         db  0x48 ; 'H'
000000000000cfe3         db  0x0e ; '.'
000000000000cfe4         db  0x18 ; '.'
000000000000cfe5         db  0x86 ; '.'
000000000000cfe6         db  0x03 ; '.'
000000000000cfe7         db  0x41 ; 'A'
000000000000cfe8         db  0x0e ; '.'
000000000000cfe9         db  0x20 ; ' '
000000000000cfea         db  0x83 ; '.'
000000000000cfeb         db  0x04 ; '.'
000000000000cfec         db  0x02 ; '.'
000000000000cfed         db  0x74 ; 't'
000000000000cfee         db  0x0e ; '.'
000000000000cfef         db  0x18 ; '.'
000000000000cff0         db  0x4b ; 'K'
000000000000cff1         db  0x0e ; '.'
000000000000cff2         db  0x10 ; '.'
000000000000cff3         db  0x42 ; 'B'
000000000000cff4         db  0x0e ; '.'
000000000000cff5         db  0x08 ; '.'
000000000000cff6         db  0x00 ; '.'
000000000000cff7         db  0x00 ; '.'
000000000000cff8         dd         0x00000010                                  ; Length of the record
000000000000cffc         dd         0x000007a4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d000         db         0xe0, 0x89, 2 dup (0xff)                    ; begin 0x59e0
000000000000d004         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x59f3)
000000000000d008         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d009         align      4
000000000000d00c         dd         0x00000010                                  ; Length of the record
000000000000d010         dd         0x000007b8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d014         db         0xec, 0x89, 2 dup (0xff)                    ; begin 0x5a00
000000000000d018         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x5a0c)
000000000000d01c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d01d         align      32
000000000000d020         dd         0x00000010                                  ; Length of the record
000000000000d024         dd         0x000007cc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d028         db         0xe8, 0x89, 2 dup (0xff)                    ; begin 0x5a10
000000000000d02c         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x5a28)
000000000000d030         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d031         align      4
000000000000d034         dd         0x00000010                                  ; Length of the record
000000000000d038         dd         0x000007e0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d03c         db         0xf4, 0x89, 2 dup (0xff)                    ; begin 0x5a30
000000000000d040         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x5a44)
000000000000d044         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d045         align      8
000000000000d048         dd         0x00000018                                  ; Length of the record
000000000000d04c         dd         0x000007f4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d050         db         0x00, 0x8a, 2 dup (0xff)                    ; begin 0x5a50
000000000000d054         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x5ade)
000000000000d058         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d059         db  0x44 ; 'D'
000000000000d05a         db  0x0e ; '.'
000000000000d05b         db  0x50 ; 'P'
000000000000d05c         db  0x02 ; '.'
000000000000d05d         db  0x7f ; '.'
000000000000d05e         db  0x0a ; '.'
000000000000d05f         db  0x0e ; '.'
000000000000d060         db  0x08 ; '.'
000000000000d061         db  0x41 ; 'A'
000000000000d062         db  0x0b ; '.'
000000000000d063         db  0x00 ; '.'
000000000000d064         dd         0x00000018                                  ; Length of the record
000000000000d068         dd         0x00000810                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d06c         db         0x74, 0x8a, 2 dup (0xff)                    ; begin 0x5ae0
000000000000d070         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x5b6a)
000000000000d074         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d075         db  0x44 ; 'D'
000000000000d076         db  0x0e ; '.'
000000000000d077         db  0x50 ; 'P'
000000000000d078         db  0x02 ; '.'
000000000000d079         db  0x7b ; '{'
000000000000d07a         db  0x0a ; '.'
000000000000d07b         db  0x0e ; '.'
000000000000d07c         db  0x08 ; '.'
000000000000d07d         db  0x41 ; 'A'
000000000000d07e         db  0x0b ; '.'
000000000000d07f         db  0x00 ; '.'
000000000000d080         dd         0x00000010                                  ; Length of the record
000000000000d084         dd         0x0000082c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d088         db         0xe8, 0x8a, 2 dup (0xff)                    ; begin 0x5b70
000000000000d08c         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x5b7c)
000000000000d090         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d091         align      4
000000000000d094         dd         0x00000010                                  ; Length of the record
000000000000d098         dd         0x00000840                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d09c         db         0xe4, 0x8a, 2 dup (0xff)                    ; begin 0x5b80
000000000000d0a0         db         0x0f, 3 dup (0x00)                          ; length 0xf (end at 0x5b8f)
000000000000d0a4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0a5         align      8
000000000000d0a8         dd         0x00000018                                  ; Length of the record
000000000000d0ac         dd         0x00000854                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d0b0         db         0xe0, 0x8a, 2 dup (0xff)                    ; begin 0x5b90
000000000000d0b4         db         0x98, 3 dup (0x00)                          ; length 0x98 (end at 0x5c28)
000000000000d0b8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0b9         db  0x44 ; 'D'
000000000000d0ba         db  0x0e ; '.'
000000000000d0bb         db  0x50 ; 'P'
000000000000d0bc         db  0x02 ; '.'
000000000000d0bd         db  0x8e ; '.'
000000000000d0be         db  0x0a ; '.'
000000000000d0bf         db  0x0e ; '.'
000000000000d0c0         db  0x08 ; '.'
000000000000d0c1         db  0x41 ; 'A'
000000000000d0c2         db  0x0b ; '.'
000000000000d0c3         db  0x00 ; '.'
000000000000d0c4         dd         0x00000010                                  ; Length of the record
000000000000d0c8         dd         0x00000870                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d0cc         db         0x64, 0x8b, 2 dup (0xff)                    ; begin 0x5c30
000000000000d0d0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x5c40)
000000000000d0d4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0d5         align      8
000000000000d0d8         dd         0x00000010                                  ; Length of the record
000000000000d0dc         dd         0x00000884                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d0e0         db         0x60, 0x8b, 2 dup (0xff)                    ; begin 0x5c40
000000000000d0e4         db         0x11, 3 dup (0x00)                          ; length 0x11 (end at 0x5c51)
000000000000d0e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0e9         align      4
000000000000d0ec         dd         0x00000010                                  ; Length of the record
000000000000d0f0         dd         0x00000898                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d0f4         db         0x6c, 0x8b, 2 dup (0xff)                    ; begin 0x5c60
000000000000d0f8         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x5c6a)
000000000000d0fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d0fd         align      256
000000000000d100         dd         0x00000018                                  ; Length of the record
000000000000d104         dd         0x000008ac                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d108         db         0x68, 0x8b, 2 dup (0xff)                    ; begin 0x5c70
000000000000d10c         db         0x8e, 3 dup (0x00)                          ; length 0x8e (end at 0x5cfe)
000000000000d110         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d111         db  0x44 ; 'D'
000000000000d112         db  0x0e ; '.'
000000000000d113         db  0x50 ; 'P'
000000000000d114         db  0x02 ; '.'
000000000000d115         db  0x7f ; '.'
000000000000d116         db  0x0a ; '.'
000000000000d117         db  0x0e ; '.'
000000000000d118         db  0x08 ; '.'
000000000000d119         db  0x41 ; 'A'
000000000000d11a         db  0x0b ; '.'
000000000000d11b         db  0x00 ; '.'
000000000000d11c         dd         0x00000018                                  ; Length of the record
000000000000d120         dd         0x000008c8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d124         db         0xdc, 0x8b, 2 dup (0xff)                    ; begin 0x5d00
000000000000d128         db         0x91, 3 dup (0x00)                          ; length 0x91 (end at 0x5d91)
000000000000d12c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d12d         db  0x44 ; 'D'
000000000000d12e         db  0x0e ; '.'
000000000000d12f         db  0x50 ; 'P'
000000000000d130         db  0x02 ; '.'
000000000000d131         db  0x82 ; '.'
000000000000d132         db  0x0a ; '.'
000000000000d133         db  0x0e ; '.'
000000000000d134         db  0x08 ; '.'
000000000000d135         db  0x41 ; 'A'
000000000000d136         db  0x0b ; '.'
000000000000d137         db  0x00 ; '.'
000000000000d138         dd         0x00000010                                  ; Length of the record
000000000000d13c         dd         0x000008e4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d140         db         0x60, 0x8c, 2 dup (0xff)                    ; begin 0x5da0
000000000000d144         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x5dac)
000000000000d148         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d149         align      4
000000000000d14c         dd         0x00000010                                  ; Length of the record
000000000000d150         dd         0x000008f8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d154         db         0x5c, 0x8c, 2 dup (0xff)                    ; begin 0x5db0
000000000000d158         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x5dc7)
000000000000d15c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d15d         align      32
000000000000d160         dd         0x00000010                                  ; Length of the record
000000000000d164         dd         0x0000090c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d168         db         0x68, 0x8c, 2 dup (0xff)                    ; begin 0x5dd0
000000000000d16c         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5de3)
000000000000d170         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d171         align      4
000000000000d174         dd         0x00000010                                  ; Length of the record
000000000000d178         dd         0x00000920                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d17c         db         0x74, 0x8c, 2 dup (0xff)                    ; begin 0x5df0
000000000000d180         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x5dfc)
000000000000d184         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d185         align      8
000000000000d188         dd         0x00000010                                  ; Length of the record
000000000000d18c         dd         0x00000934                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d190         db         0x70, 0x8c, 2 dup (0xff)                    ; begin 0x5e00
000000000000d194         db         0x14, 3 dup (0x00)                          ; length 0x14 (end at 0x5e14)
000000000000d198         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d199         align      4
000000000000d19c         dd         0x00000010                                  ; Length of the record
000000000000d1a0         dd         0x00000948                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d1a4         db         0x7c, 0x8c, 2 dup (0xff)                    ; begin 0x5e20
000000000000d1a8         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x5e33)
000000000000d1ac         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1ad         align      16
000000000000d1b0         dd         0x00000014                                  ; Length of the record
000000000000d1b4         dd         0x0000095c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d1b8         db         0x88, 0x8c, 2 dup (0xff)                    ; begin 0x5e40
000000000000d1bc         db         0x18, 3 dup (0x00)                          ; length 0x18 (end at 0x5e58)
000000000000d1c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1c1         align      8
000000000000d1c8         dd         0x00000024                                  ; Length of the record
000000000000d1cc         dd         0x00000974                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d1d0         db         0x90, 0x8c, 2 dup (0xff)                    ; begin 0x5e60
000000000000d1d4         db         0x71, 3 dup (0x00)                          ; length 0x71 (end at 0x5ed1)
000000000000d1d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d1d9         db  0x41 ; 'A'
000000000000d1da         db  0x0e ; '.'
000000000000d1db         db  0x10 ; '.'
000000000000d1dc         db  0x83 ; '.'
000000000000d1dd         db  0x02 ; '.'
000000000000d1de         db  0x56 ; 'V'
000000000000d1df         db  0x0e ; '.'
000000000000d1e0         db  0xb0 ; '.'
000000000000d1e1         db  0x01 ; '.'
000000000000d1e2         db  0x02 ; '.'
000000000000d1e3         db  0x4c ; 'L'
000000000000d1e4         db  0x0a ; '.'
000000000000d1e5         db  0x0e ; '.'
000000000000d1e6         db  0x10 ; '.'
000000000000d1e7         db  0x41 ; 'A'
000000000000d1e8         db  0x0e ; '.'
000000000000d1e9         db  0x08 ; '.'
000000000000d1ea         db  0x44 ; 'D'
000000000000d1eb         db  0x0b ; '.'
000000000000d1ec         db  0x00 ; '.'
000000000000d1ed         db  0x00 ; '.'
000000000000d1ee         db  0x00 ; '.'
000000000000d1ef         db  0x00 ; '.'
000000000000d1f0         dd         0x00000110                                  ; Length of the record
000000000000d1f4         dd         0x0000099c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d1f8         db         0xe8, 0x8c, 2 dup (0xff)                    ; begin 0x5ee0
000000000000d1fc         db         0x17, 0x04, 2 dup (0x00)                    ; length 0x417 (end at 0x62f7)
000000000000d200         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d201         db  0x42 ; 'B'
000000000000d202         db  0x0e ; '.'
000000000000d203         db  0x10 ; '.'
000000000000d204         db  0x8f ; '.'
000000000000d205         db  0x02 ; '.'
000000000000d206         db  0x42 ; 'B'
000000000000d207         db  0x0e ; '.'
000000000000d208         db  0x18 ; '.'
000000000000d209         db  0x8e ; '.'
000000000000d20a         db  0x03 ; '.'
000000000000d20b         db  0x42 ; 'B'
000000000000d20c         db  0x0e ; '.'
000000000000d20d         db  0x20 ; ' '
000000000000d20e         db  0x8d ; '.'
000000000000d20f         db  0x04 ; '.'
000000000000d210         db  0x42 ; 'B'
000000000000d211         db  0x0e ; '.'
000000000000d212         db  0x28 ; '('
000000000000d213         db  0x8c ; '.'
000000000000d214         db  0x05 ; '.'
000000000000d215         db  0x44 ; 'D'
000000000000d216         db  0x0e ; '.'
000000000000d217         db  0x30 ; '0'
000000000000d218         db  0x86 ; '.'
000000000000d219         db  0x06 ; '.'
000000000000d21a         db  0x41 ; 'A'
000000000000d21b         db  0x0e ; '.'
000000000000d21c         db  0x38 ; '8'
000000000000d21d         db  0x83 ; '.'
000000000000d21e         db  0x07 ; '.'
000000000000d21f         db  0x4a ; 'J'
000000000000d220         db  0x0e ; '.'
000000000000d221         db  0x60 ; '`'
000000000000d222         db  0x02 ; '.'
000000000000d223         db  0xdd ; '.'
000000000000d224         db  0x0e ; '.'
000000000000d225         db  0x68 ; 'h'
000000000000d226         db  0x57 ; 'W'
000000000000d227         db  0x0e ; '.'
000000000000d228         db  0x70 ; 'p'
000000000000d229         db  0x42 ; 'B'
000000000000d22a         db  0x0e ; '.'
000000000000d22b         db  0x78 ; 'x'
000000000000d22c         db  0x42 ; 'B'
000000000000d22d         db  0x0e ; '.'
000000000000d22e         db  0x80 ; '.'
000000000000d22f         db  0x01 ; '.'
000000000000d230         db  0x42 ; 'B'
000000000000d231         db  0x0e ; '.'
000000000000d232         db  0x88 ; '.'
000000000000d233         db  0x01 ; '.'
000000000000d234         db  0x42 ; 'B'
000000000000d235         db  0x0e ; '.'
000000000000d236         db  0x90 ; '.'
000000000000d237         db  0x01 ; '.'
000000000000d238         db  0x53 ; 'S'
000000000000d239         db  0x0e ; '.'
000000000000d23a         db  0x60 ; '`'
000000000000d23b         db  0x44 ; 'D'
000000000000d23c         db  0x0a ; '.'
000000000000d23d         db  0x0e ; '.'
000000000000d23e         db  0x38 ; '8'
000000000000d23f         db  0x41 ; 'A'
000000000000d240         db  0x0e ; '.'
000000000000d241         db  0x30 ; '0'
000000000000d242         db  0x41 ; 'A'
000000000000d243         db  0x0e ; '.'
000000000000d244         db  0x28 ; '('
000000000000d245         db  0x42 ; 'B'
000000000000d246         db  0x0e ; '.'
000000000000d247         db  0x20 ; ' '
000000000000d248         db  0x42 ; 'B'
000000000000d249         db  0x0e ; '.'
000000000000d24a         db  0x18 ; '.'
000000000000d24b         db  0x42 ; 'B'
000000000000d24c         db  0x0e ; '.'
000000000000d24d         db  0x10 ; '.'
000000000000d24e         db  0x42 ; 'B'
000000000000d24f         db  0x0e ; '.'
000000000000d250         db  0x08 ; '.'
000000000000d251         db  0x44 ; 'D'
000000000000d252         db  0x0b ; '.'
000000000000d253         db  0x02 ; '.'
000000000000d254         db  0x78 ; 'x'
000000000000d255         db  0x0a ; '.'
000000000000d256         db  0x0e ; '.'
000000000000d257         db  0x68 ; 'h'
000000000000d258         db  0x48 ; 'H'
000000000000d259         db  0x0b ; '.'
000000000000d25a         db  0x5a ; 'Z'
000000000000d25b         db  0x0a ; '.'
000000000000d25c         db  0x0e ; '.'
000000000000d25d         db  0x38 ; '8'
000000000000d25e         db  0x47 ; 'G'
000000000000d25f         db  0x0e ; '.'
000000000000d260         db  0x30 ; '0'
000000000000d261         db  0x41 ; 'A'
000000000000d262         db  0x0e ; '.'
000000000000d263         db  0x28 ; '('
000000000000d264         db  0x42 ; 'B'
000000000000d265         db  0x0e ; '.'
000000000000d266         db  0x20 ; ' '
000000000000d267         db  0x42 ; 'B'
000000000000d268         db  0x0e ; '.'
000000000000d269         db  0x18 ; '.'
000000000000d26a         db  0x42 ; 'B'
000000000000d26b         db  0x0e ; '.'
000000000000d26c         db  0x10 ; '.'
000000000000d26d         db  0x42 ; 'B'
000000000000d26e         db  0x0e ; '.'
000000000000d26f         db  0x08 ; '.'
000000000000d270         db  0x56 ; 'V'
000000000000d271         db  0x0b ; '.'
000000000000d272         db  0x5e ; '^'
000000000000d273         db  0x0a ; '.'
000000000000d274         db  0x0e ; '.'
000000000000d275         db  0x38 ; '8'
000000000000d276         db  0x52 ; 'R'
000000000000d277         db  0x0e ; '.'
000000000000d278         db  0x30 ; '0'
000000000000d279         db  0x41 ; 'A'
000000000000d27a         db  0x0e ; '.'
000000000000d27b         db  0x28 ; '('
000000000000d27c         db  0x42 ; 'B'
000000000000d27d         db  0x0e ; '.'
000000000000d27e         db  0x20 ; ' '
000000000000d27f         db  0x42 ; 'B'
000000000000d280         db  0x0e ; '.'
000000000000d281         db  0x18 ; '.'
000000000000d282         db  0x42 ; 'B'
000000000000d283         db  0x0e ; '.'
000000000000d284         db  0x10 ; '.'
000000000000d285         db  0x42 ; 'B'
000000000000d286         db  0x0e ; '.'
000000000000d287         db  0x08 ; '.'
000000000000d288         db  0x4f ; 'O'
000000000000d289         db  0x0b ; '.'
000000000000d28a         db  0x62 ; 'b'
000000000000d28b         db  0x0a ; '.'
000000000000d28c         db  0x0e ; '.'
000000000000d28d         db  0x38 ; '8'
000000000000d28e         db  0x50 ; 'P'
000000000000d28f         db  0x0e ; '.'
000000000000d290         db  0x30 ; '0'
000000000000d291         db  0x41 ; 'A'
000000000000d292         db  0x0e ; '.'
000000000000d293         db  0x28 ; '('
000000000000d294         db  0x42 ; 'B'
000000000000d295         db  0x0e ; '.'
000000000000d296         db  0x20 ; ' '
000000000000d297         db  0x42 ; 'B'
000000000000d298         db  0x0e ; '.'
000000000000d299         db  0x18 ; '.'
000000000000d29a         db  0x42 ; 'B'
000000000000d29b         db  0x0e ; '.'
000000000000d29c         db  0x10 ; '.'
000000000000d29d         db  0x42 ; 'B'
000000000000d29e         db  0x0e ; '.'
000000000000d29f         db  0x08 ; '.'
000000000000d2a0         db  0x55 ; 'U'
000000000000d2a1         db  0x0b ; '.'
000000000000d2a2         db  0x66 ; 'f'
000000000000d2a3         db  0x0e ; '.'
000000000000d2a4         db  0x68 ; 'h'
000000000000d2a5         db  0x42 ; 'B'
000000000000d2a6         db  0x0e ; '.'
000000000000d2a7         db  0x70 ; 'p'
000000000000d2a8         db  0x5c ; '\'
000000000000d2a9         db  0x0e ; '.'
000000000000d2aa         db  0x68 ; 'h'
000000000000d2ab         db  0x41 ; 'A'
000000000000d2ac         db  0x0e ; '.'
000000000000d2ad         db  0x60 ; '`'
000000000000d2ae         db  0x44 ; 'D'
000000000000d2af         db  0x0a ; '.'
000000000000d2b0         db  0x0e ; '.'
000000000000d2b1         db  0x38 ; '8'
000000000000d2b2         db  0x41 ; 'A'
000000000000d2b3         db  0x0e ; '.'
000000000000d2b4         db  0x30 ; '0'
000000000000d2b5         db  0x41 ; 'A'
000000000000d2b6         db  0x0e ; '.'
000000000000d2b7         db  0x28 ; '('
000000000000d2b8         db  0x42 ; 'B'
000000000000d2b9         db  0x0e ; '.'
000000000000d2ba         db  0x20 ; ' '
000000000000d2bb         db  0x42 ; 'B'
000000000000d2bc         db  0x0e ; '.'
000000000000d2bd         db  0x18 ; '.'
000000000000d2be         db  0x42 ; 'B'
000000000000d2bf         db  0x0e ; '.'
000000000000d2c0         db  0x10 ; '.'
000000000000d2c1         db  0x42 ; 'B'
000000000000d2c2         db  0x0e ; '.'
000000000000d2c3         db  0x08 ; '.'
000000000000d2c4         db  0x45 ; 'E'
000000000000d2c5         db  0x0b ; '.'
000000000000d2c6         db  0x68 ; 'h'
000000000000d2c7         db  0x0a ; '.'
000000000000d2c8         db  0x0e ; '.'
000000000000d2c9         db  0x68 ; 'h'
000000000000d2ca         db  0x48 ; 'H'
000000000000d2cb         db  0x0b ; '.'
000000000000d2cc         db  0x72 ; 'r'
000000000000d2cd         db  0x0e ; '.'
000000000000d2ce         db  0x68 ; 'h'
000000000000d2cf         db  0x45 ; 'E'
000000000000d2d0         db  0x0e ; '.'
000000000000d2d1         db  0x70 ; 'p'
000000000000d2d2         db  0x42 ; 'B'
000000000000d2d3         db  0x0e ; '.'
000000000000d2d4         db  0x78 ; 'x'
000000000000d2d5         db  0x42 ; 'B'
000000000000d2d6         db  0x0e ; '.'
000000000000d2d7         db  0x80 ; '.'
000000000000d2d8         db  0x01 ; '.'
000000000000d2d9         db  0x5e ; '^'
000000000000d2da         db  0x0e ; '.'
000000000000d2db         db  0x60 ; '`'
000000000000d2dc         db  0x44 ; 'D'
000000000000d2dd         db  0x0a ; '.'
000000000000d2de         db  0x0e ; '.'
000000000000d2df         db  0x38 ; '8'
000000000000d2e0         db  0x41 ; 'A'
000000000000d2e1         db  0x0e ; '.'
000000000000d2e2         db  0x30 ; '0'
000000000000d2e3         db  0x41 ; 'A'
000000000000d2e4         db  0x0e ; '.'
000000000000d2e5         db  0x28 ; '('
000000000000d2e6         db  0x42 ; 'B'
000000000000d2e7         db  0x0e ; '.'
000000000000d2e8         db  0x20 ; ' '
000000000000d2e9         db  0x42 ; 'B'
000000000000d2ea         db  0x0e ; '.'
000000000000d2eb         db  0x18 ; '.'
000000000000d2ec         db  0x42 ; 'B'
000000000000d2ed         db  0x0e ; '.'
000000000000d2ee         db  0x10 ; '.'
000000000000d2ef         db  0x42 ; 'B'
000000000000d2f0         db  0x0e ; '.'
000000000000d2f1         db  0x08 ; '.'
000000000000d2f2         db  0x41 ; 'A'
000000000000d2f3         db  0x0b ; '.'
000000000000d2f4         db  0x79 ; 'y'
000000000000d2f5         db  0x0a ; '.'
000000000000d2f6         db  0x0e ; '.'
000000000000d2f7         db  0x68 ; 'h'
000000000000d2f8         db  0x42 ; 'B'
000000000000d2f9         db  0x0e ; '.'
000000000000d2fa         db  0x70 ; 'p'
000000000000d2fb         db  0x42 ; 'B'
000000000000d2fc         db  0x0e ; '.'
000000000000d2fd         db  0x78 ; 'x'
000000000000d2fe         db  0x42 ; 'B'
000000000000d2ff         db  0x0e ; '.'
000000000000d300         db  0x80 ; '.'
000000000000d301         db  0x01 ; '.'
000000000000d302         db  0x51 ; 'Q'
000000000000d303         db  0x0b ; '.'
000000000000d304         dd         0x00000010                                  ; Length of the record
000000000000d308         dd         0x00000ab0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d30c         db         0xf4, 0x8f, 2 dup (0xff)                    ; begin 0x6300
000000000000d310         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x6320)
000000000000d314         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d315         align      8
000000000000d318         dd         0x00000018                                  ; Length of the record
000000000000d31c         dd         0x00000ac4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d320         db         0x00, 0x90, 2 dup (0xff)                    ; begin 0x6320
000000000000d324         db         0x78, 3 dup (0x00)                          ; length 0x78 (end at 0x6398)
000000000000d328         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d329         db  0x44 ; 'D'
000000000000d32a         db  0x0e ; '.'
000000000000d32b         db  0x70 ; 'p'
000000000000d32c         db  0x02 ; '.'
000000000000d32d         db  0x60 ; '`'
000000000000d32e         db  0x0a ; '.'
000000000000d32f         db  0x0e ; '.'
000000000000d330         db  0x08 ; '.'
000000000000d331         db  0x41 ; 'A'
000000000000d332         db  0x0b ; '.'
000000000000d333         db  0x00 ; '.'
000000000000d334         dd         0x00000028                                  ; Length of the record
000000000000d338         dd         0x00000ae0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d33c         db         0x64, 0x90, 2 dup (0xff)                    ; begin 0x63a0
000000000000d340         db         0xd5, 3 dup (0x00)                          ; length 0xd5 (end at 0x6475)
000000000000d344         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d345         db  0x41 ; 'A'
000000000000d346         db  0x0e ; '.'
000000000000d347         db  0x10 ; '.'
000000000000d348         db  0x86 ; '.'
000000000000d349         db  0x02 ; '.'
000000000000d34a         db  0x41 ; 'A'
000000000000d34b         db  0x0e ; '.'
000000000000d34c         db  0x18 ; '.'
000000000000d34d         db  0x83 ; '.'
000000000000d34e         db  0x03 ; '.'
000000000000d34f         db  0x50 ; 'P'
000000000000d350         db  0x0e ; '.'
000000000000d351         db  0xd0 ; '.'
000000000000d352         db  0x01 ; '.'
000000000000d353         db  0x02 ; '.'
000000000000d354         db  0xab ; '.'
000000000000d355         db  0x0a ; '.'
000000000000d356         db  0x0e ; '.'
000000000000d357         db  0x18 ; '.'
000000000000d358         db  0x41 ; 'A'
000000000000d359         db  0x0e ; '.'
000000000000d35a         db  0x10 ; '.'
000000000000d35b         db  0x41 ; 'A'
000000000000d35c         db  0x0e ; '.'
000000000000d35d         db  0x08 ; '.'
000000000000d35e         db  0x41 ; 'A'
000000000000d35f         db  0x0b ; '.'
000000000000d360         dd         0x0000001c                                  ; Length of the record
000000000000d364         dd         0x00000b0c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d368         db         0x18, 0x91, 2 dup (0xff)                    ; begin 0x6480
000000000000d36c         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0x6500)
000000000000d370         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d371         db  0x41 ; 'A'
000000000000d372         db  0x0e ; '.'
000000000000d373         db  0x10 ; '.'
000000000000d374         db  0x83 ; '.'
000000000000d375         db  0x02 ; '.'
000000000000d376         db  0x02 ; '.'
000000000000d377         db  0x7a ; 'z'
000000000000d378         db  0x0e ; '.'
000000000000d379         db  0x08 ; '.'
000000000000d37a         db  0x00 ; '.'
000000000000d37b         db  0x00 ; '.'
000000000000d37c         db  0x00 ; '.'
000000000000d37d         db  0x00 ; '.'
000000000000d37e         db  0x00 ; '.'
000000000000d37f         db  0x00 ; '.'
000000000000d380         dd         0x00000014                                  ; Length of the record
000000000000d384         dd         0x00000b2c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d388         db         0x78, 0x91, 2 dup (0xff)                    ; begin 0x6500
000000000000d38c         db         0x38, 3 dup (0x00)                          ; length 0x38 (end at 0x6538)
000000000000d390         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d391         db  0x5c ; '\'
000000000000d392         db  0x0e ; '.'
000000000000d393         db  0x10 ; '.'
000000000000d394         db  0x5b ; '['
000000000000d395         db  0x0e ; '.'
000000000000d396         db  0x08 ; '.'
000000000000d397         db  0x00 ; '.'
000000000000d398         dd         0x00000018                                  ; Length of the record
000000000000d39c         dd         0x00000b44                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d3a0         db         0xa0, 0x91, 2 dup (0xff)                    ; begin 0x6540
000000000000d3a4         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x655a)
000000000000d3a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d3a9         db  0x41 ; 'A'
000000000000d3aa         db  0x0e ; '.'
000000000000d3ab         db  0x10 ; '.'
000000000000d3ac         db  0x83 ; '.'
000000000000d3ad         db  0x02 ; '.'
000000000000d3ae         db  0x53 ; 'S'
000000000000d3af         db  0x0a ; '.'
000000000000d3b0         db  0x0e ; '.'
000000000000d3b1         db  0x08 ; '.'
000000000000d3b2         db  0x41 ; 'A'
000000000000d3b3         db  0x0b ; '.'
000000000000d3b4         dd         0x00000010                                  ; Length of the record
000000000000d3b8         dd         0x00000b60                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d3bc         db         0xa4, 0x91, 2 dup (0xff)                    ; begin 0x6560
000000000000d3c0         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6584)
000000000000d3c4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d3c5         db  0x5f ; '_'
000000000000d3c6         db  0x0e ; '.'
000000000000d3c7         db  0x10 ; '.'
000000000000d3c8         dd         0x00000010                                  ; Length of the record
000000000000d3cc         dd         0x00000b74                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d3d0         db         0xc0, 0x91, 2 dup (0xff)                    ; begin 0x6590
000000000000d3d4         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0x6592)
000000000000d3d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d3d9         align      4
000000000000d3dc         dd         0x00000020                                  ; Length of the record
000000000000d3e0         dd         0x00000b88                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d3e4         db         0xbc, 0x91, 2 dup (0xff)                    ; begin 0x65a0
000000000000d3e8         db         0x36, 3 dup (0x00)                          ; length 0x36 (end at 0x65d6)
000000000000d3ec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d3ed         db  0x44 ; 'D'
000000000000d3ee         db  0x0e ; '.'
000000000000d3ef         db  0x10 ; '.'
000000000000d3f0         db  0x83 ; '.'
000000000000d3f1         db  0x02 ; '.'
000000000000d3f2         db  0x5d ; ']'
000000000000d3f3         db  0x0a ; '.'
000000000000d3f4         db  0x0e ; '.'
000000000000d3f5         db  0x08 ; '.'
000000000000d3f6         db  0x47 ; 'G'
000000000000d3f7         db  0x0b ; '.'
000000000000d3f8         db  0x48 ; 'H'
000000000000d3f9         db  0x0a ; '.'
000000000000d3fa         db  0x0e ; '.'
000000000000d3fb         db  0x08 ; '.'
000000000000d3fc         db  0x41 ; 'A'
000000000000d3fd         db  0x0b ; '.'
000000000000d3fe         db  0x00 ; '.'
000000000000d3ff         db  0x00 ; '.'
000000000000d400         dd         0x00000010                                  ; Length of the record
000000000000d404         dd         0x00000bac                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d408         db         0xd8, 0x91, 2 dup (0xff)                    ; begin 0x65e0
000000000000d40c         db         0x24, 3 dup (0x00)                          ; length 0x24 (end at 0x6604)
000000000000d410         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d411         db  0x5f ; '_'
000000000000d412         db  0x0e ; '.'
000000000000d413         db  0x10 ; '.'
000000000000d414         dd         0x00000014                                  ; Length of the record
000000000000d418         dd         0x00000bc0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d41c         db         0xf4, 0x91, 2 dup (0xff)                    ; begin 0x6610
000000000000d420         db         0x82, 3 dup (0x00)                          ; length 0x82 (end at 0x6692)
000000000000d424         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d425         db  0x02 ; '.'
000000000000d426         db  0x5f ; '_'
000000000000d427         db  0x0e ; '.'
000000000000d428         db  0x10 ; '.'
000000000000d429         db  0x49 ; 'I'
000000000000d42a         db  0x0e ; '.'
000000000000d42b         db  0x08 ; '.'
000000000000d42c         dd         0x00000014                                  ; Length of the record
000000000000d430         dd         0x00000bd8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d434         db         0x6c, 0x92, 2 dup (0xff)                    ; begin 0x66a0
000000000000d438         db         0x4a, 3 dup (0x00)                          ; length 0x4a (end at 0x66ea)
000000000000d43c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d43d         db  0x02 ; '.'
000000000000d43e         db  0x45 ; 'E'
000000000000d43f         db  0x0e ; '.'
000000000000d440         db  0x10 ; '.'
000000000000d441         db  0x00 ; '.'
000000000000d442         db  0x00 ; '.'
000000000000d443         db  0x00 ; '.'
000000000000d444         dd         0x00000018                                  ; Length of the record
000000000000d448         dd         0x00000bf0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d44c         db         0xa4, 0x92, 2 dup (0xff)                    ; begin 0x66f0
000000000000d450         db         0x17, 3 dup (0x00)                          ; length 0x17 (end at 0x6707)
000000000000d454         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d455         db  0x41 ; 'A'
000000000000d456         db  0x0e ; '.'
000000000000d457         db  0x10 ; '.'
000000000000d458         db  0x83 ; '.'
000000000000d459         db  0x02 ; '.'
000000000000d45a         db  0x51 ; 'Q'
000000000000d45b         db  0x0e ; '.'
000000000000d45c         db  0x08 ; '.'
000000000000d45d         db  0x00 ; '.'
000000000000d45e         db  0x00 ; '.'
000000000000d45f         db  0x00 ; '.'
000000000000d460         dd         0x00000018                                  ; Length of the record
000000000000d464         dd         0x00000c0c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d468         db         0xa8, 0x92, 2 dup (0xff)                    ; begin 0x6710
000000000000d46c         db         0x2e, 3 dup (0x00)                          ; length 0x2e (end at 0x673e)
000000000000d470         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d471         db  0x47 ; 'G'
000000000000d472         db  0x0e ; '.'
000000000000d473         db  0x10 ; '.'
000000000000d474         db  0x61 ; 'a'
000000000000d475         db  0x0a ; '.'
000000000000d476         db  0x0e ; '.'
000000000000d477         db  0x08 ; '.'
000000000000d478         db  0x41 ; 'A'
000000000000d479         db  0x0b ; '.'
000000000000d47a         db  0x00 ; '.'
000000000000d47b         db  0x00 ; '.'
000000000000d47c         dd         0x00000024                                  ; Length of the record
000000000000d480         dd         0x00000c28                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d484         db         0xbc, 0x92, 2 dup (0xff)                    ; begin 0x6740
000000000000d488         db         0x28, 3 dup (0x00)                          ; length 0x28 (end at 0x6768)
000000000000d48c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d48d         db  0x41 ; 'A'
000000000000d48e         db  0x0e ; '.'
000000000000d48f         db  0x10 ; '.'
000000000000d490         db  0x86 ; '.'
000000000000d491         db  0x02 ; '.'
000000000000d492         db  0x41 ; 'A'
000000000000d493         db  0x0e ; '.'
000000000000d494         db  0x18 ; '.'
000000000000d495         db  0x83 ; '.'
000000000000d496         db  0x03 ; '.'
000000000000d497         db  0x4d ; 'M'
000000000000d498         db  0x0e ; '.'
000000000000d499         db  0x20 ; ' '
000000000000d49a         db  0x49 ; 'I'
000000000000d49b         db  0x0e ; '.'
000000000000d49c         db  0x18 ; '.'
000000000000d49d         db  0x47 ; 'G'
000000000000d49e         db  0x0e ; '.'
000000000000d49f         db  0x10 ; '.'
000000000000d4a0         db  0x41 ; 'A'
000000000000d4a1         db  0x0e ; '.'
000000000000d4a2         db  0x08 ; '.'
000000000000d4a3         db  0x00 ; '.'
000000000000d4a4         dd         0x00000018                                  ; Length of the record
000000000000d4a8         dd         0x00000c50                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d4ac         db         0xc4, 0x92, 2 dup (0xff)                    ; begin 0x6770
000000000000d4b0         db         0x13, 3 dup (0x00)                          ; length 0x13 (end at 0x6783)
000000000000d4b4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d4b5         db  0x41 ; 'A'
000000000000d4b6         db  0x0e ; '.'
000000000000d4b7         db  0x10 ; '.'
000000000000d4b8         db  0x83 ; '.'
000000000000d4b9         db  0x02 ; '.'
000000000000d4ba         db  0x50 ; 'P'
000000000000d4bb         db  0x0e ; '.'
000000000000d4bc         db  0x08 ; '.'
000000000000d4bd         db  0x00 ; '.'
000000000000d4be         db  0x00 ; '.'
000000000000d4bf         db  0x00 ; '.'
000000000000d4c0         dd         0x00000014                                  ; Length of the record
000000000000d4c4         dd         0x00000c6c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d4c8         db         0xc8, 0x92, 2 dup (0xff)                    ; begin 0x6790
000000000000d4cc         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0x67c5)
000000000000d4d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d4d1         db  0x4b ; 'K'
000000000000d4d2         db  0x0e ; '.'
000000000000d4d3         db  0x10 ; '.'
000000000000d4d4         db  0x00 ; '.'
000000000000d4d5         db  0x00 ; '.'
000000000000d4d6         db  0x00 ; '.'
000000000000d4d7         db  0x00 ; '.'
000000000000d4d8         dd         0x00000018                                  ; Length of the record
000000000000d4dc         dd         0x00000c84                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d4e0         db         0xf0, 0x92, 2 dup (0xff)                    ; begin 0x67d0
000000000000d4e4         db         0x4f, 3 dup (0x00)                          ; length 0x4f (end at 0x681f)
000000000000d4e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d4e9         db  0x44 ; 'D'
000000000000d4ea         db  0x0e ; '.'
000000000000d4eb         db  0x10 ; '.'
000000000000d4ec         db  0x54 ; 'T'
000000000000d4ed         db  0x0a ; '.'
000000000000d4ee         db  0x0e ; '.'
000000000000d4ef         db  0x08 ; '.'
000000000000d4f0         db  0x48 ; 'H'
000000000000d4f1         db  0x0b ; '.'
000000000000d4f2         db  0x00 ; '.'
000000000000d4f3         db  0x00 ; '.'
000000000000d4f4         dd         0x00000010                                  ; Length of the record
000000000000d4f8         dd         0x00000ca0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d4fc         db         0x24, 0x93, 2 dup (0xff)                    ; begin 0x6820
000000000000d500         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x6849)
000000000000d504         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d505         align      8
000000000000d508         dd         0x00000024                                  ; Length of the record
000000000000d50c         dd         0x00000cb4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d510         db         0x40, 0x93, 2 dup (0xff)                    ; begin 0x6850
000000000000d514         db         0x97, 3 dup (0x00)                          ; length 0x97 (end at 0x68e7)
000000000000d518         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d519         db  0x41 ; 'A'
000000000000d51a         db  0x0e ; '.'
000000000000d51b         db  0x10 ; '.'
000000000000d51c         db  0x83 ; '.'
000000000000d51d         db  0x02 ; '.'
000000000000d51e         db  0x4b ; 'K'
000000000000d51f         db  0x0e ; '.'
000000000000d520         db  0x30 ; '0'
000000000000d521         db  0x02 ; '.'
000000000000d522         db  0x76 ; 'v'
000000000000d523         db  0x0a ; '.'
000000000000d524         db  0x0e ; '.'
000000000000d525         db  0x10 ; '.'
000000000000d526         db  0x41 ; 'A'
000000000000d527         db  0x0e ; '.'
000000000000d528         db  0x08 ; '.'
000000000000d529         db  0x45 ; 'E'
000000000000d52a         db  0x0b ; '.'
000000000000d52b         db  0x00 ; '.'
000000000000d52c         db  0x00 ; '.'
000000000000d52d         db  0x00 ; '.'
000000000000d52e         db  0x00 ; '.'
000000000000d52f         db  0x00 ; '.'
000000000000d530         dd         0x0000001c                                  ; Length of the record
000000000000d534         dd         0x00000cdc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d538         db         0xb8, 0x93, 2 dup (0xff)                    ; begin 0x68f0
000000000000d53c         db         0x40, 3 dup (0x00)                          ; length 0x40 (end at 0x6930)
000000000000d540         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d541         db  0x44 ; 'D'
000000000000d542         db  0x0e ; '.'
000000000000d543         db  0x10 ; '.'
000000000000d544         db  0x83 ; '.'
000000000000d545         db  0x02 ; '.'
000000000000d546         db  0x5a ; 'Z'
000000000000d547         db  0x0a ; '.'
000000000000d548         db  0x0e ; '.'
000000000000d549         db  0x08 ; '.'
000000000000d54a         db  0x4a ; 'J'
000000000000d54b         db  0x0b ; '.'
000000000000d54c         db  0x53 ; 'S'
000000000000d54d         db  0x0e ; '.'
000000000000d54e         db  0x08 ; '.'
000000000000d54f         db  0x00 ; '.'
000000000000d550         dd         0x00000014                                  ; Length of the record
000000000000d554         dd         0x00000cfc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d558         db         0xd8, 0x93, 2 dup (0xff)                    ; begin 0x6930
000000000000d55c         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x6959)
000000000000d560         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d561         align      8
000000000000d568         dd         0x0000002c                                  ; Length of the record
000000000000d56c         dd         0x00000d14                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d570         db         0xf0, 0x93, 2 dup (0xff)                    ; begin 0x6960
000000000000d574         db         0x57, 3 dup (0x00)                          ; length 0x57 (end at 0x69b7)
000000000000d578         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d579         db  0x63 ; 'c'
000000000000d57a         db  0x0e ; '.'
000000000000d57b         db  0x10 ; '.'
000000000000d57c         db  0x8c ; '.'
000000000000d57d         db  0x02 ; '.'
000000000000d57e         db  0x41 ; 'A'
000000000000d57f         db  0x0e ; '.'
000000000000d580         db  0x18 ; '.'
000000000000d581         db  0x86 ; '.'
000000000000d582         db  0x03 ; '.'
000000000000d583         db  0x44 ; 'D'
000000000000d584         db  0x0e ; '.'
000000000000d585         db  0x20 ; ' '
000000000000d586         db  0x83 ; '.'
000000000000d587         db  0x04 ; '.'
000000000000d588         db  0x6b ; 'k'
000000000000d589         db  0x0e ; '.'
000000000000d58a         db  0x18 ; '.'
000000000000d58b         db  0x41 ; 'A'
000000000000d58c         db  0x0e ; '.'
000000000000d58d         db  0x10 ; '.'
000000000000d58e         db  0x42 ; 'B'
000000000000d58f         db  0x0e ; '.'
000000000000d590         db  0x08 ; '.'
000000000000d591         db  0x00 ; '.'
000000000000d592         db  0x00 ; '.'
000000000000d593         db  0x00 ; '.'
000000000000d594         db  0x00 ; '.'
000000000000d595         db  0x00 ; '.'
000000000000d596         db  0x00 ; '.'
000000000000d597         db  0x00 ; '.'
000000000000d598         dd         0x00000010                                  ; Length of the record
000000000000d59c         dd         0x00000d44                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d5a0         db         0x20, 0x94, 2 dup (0xff)                    ; begin 0x69c0
000000000000d5a4         db         0x1a, 3 dup (0x00)                          ; length 0x1a (end at 0x69da)
000000000000d5a8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5a9         align      4
000000000000d5ac         dd         0x00000010                                  ; Length of the record
000000000000d5b0         dd         0x00000d58                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d5b4         db         0x2c, 0x94, 2 dup (0xff)                    ; begin 0x69e0
000000000000d5b8         db         0x0d, 3 dup (0x00)                          ; length 0xd (end at 0x69ed)
000000000000d5bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5bd         align      64
000000000000d5c0         dd         0x00000010                                  ; Length of the record
000000000000d5c4         dd         0x00000d6c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d5c8         db         0x28, 0x94, 2 dup (0xff)                    ; begin 0x69f0
000000000000d5cc         db         0x0c, 3 dup (0x00)                          ; length 0xc (end at 0x69fc)
000000000000d5d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5d1         align      4
000000000000d5d4         dd         0x00000010                                  ; Length of the record
000000000000d5d8         dd         0x00000d80                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d5dc         db         0x24, 0x94, 2 dup (0xff)                    ; begin 0x6a00
000000000000d5e0         db         0x0a, 3 dup (0x00)                          ; length 0xa (end at 0x6a0a)
000000000000d5e4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5e5         align      8
000000000000d5e8         dd         0x00000010                                  ; Length of the record
000000000000d5ec         dd         0x00000d94                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d5f0         db         0x20, 0x94, 2 dup (0xff)                    ; begin 0x6a10
000000000000d5f4         db         0x26, 3 dup (0x00)                          ; length 0x26 (end at 0x6a36)
000000000000d5f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d5f9         align      4
000000000000d5fc         dd         0x00000038                                  ; Length of the record
000000000000d600         dd         0x00000da8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d604         db         0x3c, 0x94, 2 dup (0xff)                    ; begin 0x6a40
000000000000d608         db         0xc5, 0x01, 2 dup (0x00)                    ; length 0x1c5 (end at 0x6c05)
000000000000d60c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d60d         db  0x42 ; 'B'
000000000000d60e         db  0x0e ; '.'
000000000000d60f         db  0x10 ; '.'
000000000000d610         db  0x8c ; '.'
000000000000d611         db  0x02 ; '.'
000000000000d612         db  0x41 ; 'A'
000000000000d613         db  0x0e ; '.'
000000000000d614         db  0x18 ; '.'
000000000000d615         db  0x86 ; '.'
000000000000d616         db  0x03 ; '.'
000000000000d617         db  0x44 ; 'D'
000000000000d618         db  0x0e ; '.'
000000000000d619         db  0x20 ; ' '
000000000000d61a         db  0x83 ; '.'
000000000000d61b         db  0x04 ; '.'
000000000000d61c         db  0x02 ; '.'
000000000000d61d         db  0x72 ; 'r'
000000000000d61e         db  0x0a ; '.'
000000000000d61f         db  0x0e ; '.'
000000000000d620         db  0x18 ; '.'
000000000000d621         db  0x41 ; 'A'
000000000000d622         db  0x0e ; '.'
000000000000d623         db  0x10 ; '.'
000000000000d624         db  0x42 ; 'B'
000000000000d625         db  0x0e ; '.'
000000000000d626         db  0x08 ; '.'
000000000000d627         db  0x44 ; 'D'
000000000000d628         db  0x0b ; '.'
000000000000d629         db  0x02 ; '.'
000000000000d62a         db  0x54 ; 'T'
000000000000d62b         db  0x0a ; '.'
000000000000d62c         db  0x0e ; '.'
000000000000d62d         db  0x18 ; '.'
000000000000d62e         db  0x45 ; 'E'
000000000000d62f         db  0x0e ; '.'
000000000000d630         db  0x10 ; '.'
000000000000d631         db  0x42 ; 'B'
000000000000d632         db  0x0e ; '.'
000000000000d633         db  0x08 ; '.'
000000000000d634         db  0x45 ; 'E'
000000000000d635         db  0x0b ; '.'
000000000000d636         db  0x00 ; '.'
000000000000d637         db  0x00 ; '.'
000000000000d638         dd         0x0000004c                                  ; Length of the record
000000000000d63c         dd         0x00000de4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d640         db         0xd0, 0x95, 2 dup (0xff)                    ; begin 0x6c10
000000000000d644         db         0x05, 0x01, 2 dup (0x00)                    ; length 0x105 (end at 0x6d15)
000000000000d648         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d649         db  0x42 ; 'B'
000000000000d64a         db  0x0e ; '.'
000000000000d64b         db  0x10 ; '.'
000000000000d64c         db  0x8d ; '.'
000000000000d64d         db  0x02 ; '.'
000000000000d64e         db  0x42 ; 'B'
000000000000d64f         db  0x0e ; '.'
000000000000d650         db  0x18 ; '.'
000000000000d651         db  0x8c ; '.'
000000000000d652         db  0x03 ; '.'
000000000000d653         db  0x44 ; 'D'
000000000000d654         db  0x0e ; '.'
000000000000d655         db  0x20 ; ' '
000000000000d656         db  0x86 ; '.'
000000000000d657         db  0x04 ; '.'
000000000000d658         db  0x41 ; 'A'
000000000000d659         db  0x0e ; '.'
000000000000d65a         db  0x28 ; '('
000000000000d65b         db  0x83 ; '.'
000000000000d65c         db  0x05 ; '.'
000000000000d65d         db  0x4a ; 'J'
000000000000d65e         db  0x0e ; '.'
000000000000d65f         db  0x30 ; '0'
000000000000d660         db  0x02 ; '.'
000000000000d661         db  0xb3 ; '.'
000000000000d662         db  0x0a ; '.'
000000000000d663         db  0x0e ; '.'
000000000000d664         db  0x28 ; '('
000000000000d665         db  0x41 ; 'A'
000000000000d666         db  0x0e ; '.'
000000000000d667         db  0x20 ; ' '
000000000000d668         db  0x41 ; 'A'
000000000000d669         db  0x0e ; '.'
000000000000d66a         db  0x18 ; '.'
000000000000d66b         db  0x42 ; 'B'
000000000000d66c         db  0x0e ; '.'
000000000000d66d         db  0x10 ; '.'
000000000000d66e         db  0x42 ; 'B'
000000000000d66f         db  0x0e ; '.'
000000000000d670         db  0x08 ; '.'
000000000000d671         db  0x44 ; 'D'
000000000000d672         db  0x0b ; '.'
000000000000d673         db  0x5d ; ']'
000000000000d674         db  0x0a ; '.'
000000000000d675         db  0x0e ; '.'
000000000000d676         db  0x28 ; '('
000000000000d677         db  0x44 ; 'D'
000000000000d678         db  0x0e ; '.'
000000000000d679         db  0x20 ; ' '
000000000000d67a         db  0x41 ; 'A'
000000000000d67b         db  0x0e ; '.'
000000000000d67c         db  0x18 ; '.'
000000000000d67d         db  0x42 ; 'B'
000000000000d67e         db  0x0e ; '.'
000000000000d67f         db  0x10 ; '.'
000000000000d680         db  0x42 ; 'B'
000000000000d681         db  0x0e ; '.'
000000000000d682         db  0x08 ; '.'
000000000000d683         db  0x4a ; 'J'
000000000000d684         db  0x0b ; '.'
000000000000d685         db  0x00 ; '.'
000000000000d686         db  0x00 ; '.'
000000000000d687         db  0x00 ; '.'
000000000000d688         dd         0x00000034                                  ; Length of the record
000000000000d68c         dd         0x00000e34                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d690         db         0x90, 0x96, 2 dup (0xff)                    ; begin 0x6d20
000000000000d694         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x6daa)
000000000000d698         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d699         db  0x42 ; 'B'
000000000000d69a         db  0x0e ; '.'
000000000000d69b         db  0x10 ; '.'
000000000000d69c         db  0x8d ; '.'
000000000000d69d         db  0x02 ; '.'
000000000000d69e         db  0x42 ; 'B'
000000000000d69f         db  0x0e ; '.'
000000000000d6a0         db  0x18 ; '.'
000000000000d6a1         db  0x8c ; '.'
000000000000d6a2         db  0x03 ; '.'
000000000000d6a3         db  0x44 ; 'D'
000000000000d6a4         db  0x0e ; '.'
000000000000d6a5         db  0x20 ; ' '
000000000000d6a6         db  0x86 ; '.'
000000000000d6a7         db  0x04 ; '.'
000000000000d6a8         db  0x48 ; 'H'
000000000000d6a9         db  0x0e ; '.'
000000000000d6aa         db  0x28 ; '('
000000000000d6ab         db  0x83 ; '.'
000000000000d6ac         db  0x05 ; '.'
000000000000d6ad         db  0x4a ; 'J'
000000000000d6ae         db  0x0e ; '.'
000000000000d6af         db  0x30 ; '0'
000000000000d6b0         db  0x02 ; '.'
000000000000d6b1         db  0x66 ; 'f'
000000000000d6b2         db  0x0e ; '.'
000000000000d6b3         db  0x28 ; '('
000000000000d6b4         db  0x44 ; 'D'
000000000000d6b5         db  0x0e ; '.'
000000000000d6b6         db  0x20 ; ' '
000000000000d6b7         db  0x41 ; 'A'
000000000000d6b8         db  0x0e ; '.'
000000000000d6b9         db  0x18 ; '.'
000000000000d6ba         db  0x42 ; 'B'
000000000000d6bb         db  0x0e ; '.'
000000000000d6bc         db  0x10 ; '.'
000000000000d6bd         db  0x42 ; 'B'
000000000000d6be         db  0x0e ; '.'
000000000000d6bf         db  0x08 ; '.'
000000000000d6c0         dd         0x00000028                                  ; Length of the record
000000000000d6c4         dd         0x00000e6c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d6c8         db         0xe8, 0x96, 2 dup (0xff)                    ; begin 0x6db0
000000000000d6cc         db         0x42, 3 dup (0x00)                          ; length 0x42 (end at 0x6df2)
000000000000d6d0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d6d1         db  0x46 ; 'F'
000000000000d6d2         db  0x0e ; '.'
000000000000d6d3         db  0x10 ; '.'
000000000000d6d4         db  0x86 ; '.'
000000000000d6d5         db  0x02 ; '.'
000000000000d6d6         db  0x41 ; 'A'
000000000000d6d7         db  0x0e ; '.'
000000000000d6d8         db  0x18 ; '.'
000000000000d6d9         db  0x83 ; '.'
000000000000d6da         db  0x03 ; '.'
000000000000d6db         db  0x47 ; 'G'
000000000000d6dc         db  0x0e ; '.'
000000000000d6dd         db  0x20 ; ' '
000000000000d6de         db  0x68 ; 'h'
000000000000d6df         db  0x0e ; '.'
000000000000d6e0         db  0x18 ; '.'
000000000000d6e1         db  0x41 ; 'A'
000000000000d6e2         db  0x0e ; '.'
000000000000d6e3         db  0x10 ; '.'
000000000000d6e4         db  0x41 ; 'A'
000000000000d6e5         db  0x0e ; '.'
000000000000d6e6         db  0x08 ; '.'
000000000000d6e7         db  0x48 ; 'H'
000000000000d6e8         db  0xc3 ; '.'
000000000000d6e9         db  0xc6 ; '.'
000000000000d6ea         db  0x00 ; '.'
000000000000d6eb         db  0x00 ; '.'
000000000000d6ec         dd         0x00000018                                  ; Length of the record
000000000000d6f0         dd         0x00000e98                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d6f4         db         0x0c, 0x97, 2 dup (0xff)                    ; begin 0x6e00
000000000000d6f8         db         0x39, 3 dup (0x00)                          ; length 0x39 (end at 0x6e39)
000000000000d6fc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d6fd         db  0x41 ; 'A'
000000000000d6fe         db  0x0e ; '.'
000000000000d6ff         db  0x10 ; '.'
000000000000d700         db  0x83 ; '.'
000000000000d701         db  0x02 ; '.'
000000000000d702         db  0x68 ; 'h'
000000000000d703         db  0x0a ; '.'
000000000000d704         db  0x0e ; '.'
000000000000d705         db  0x08 ; '.'
000000000000d706         db  0x47 ; 'G'
000000000000d707         db  0x0b ; '.'
000000000000d708         dd         0x00000038                                  ; Length of the record
000000000000d70c         dd         0x00000eb4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d710         db         0x30, 0x97, 2 dup (0xff)                    ; begin 0x6e40
000000000000d714         db         0x2c, 0x01, 2 dup (0x00)                    ; length 0x12c (end at 0x6f6c)
000000000000d718         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d719         db  0x42 ; 'B'
000000000000d71a         db  0x0e ; '.'
000000000000d71b         db  0x10 ; '.'
000000000000d71c         db  0x8d ; '.'
000000000000d71d         db  0x02 ; '.'
000000000000d71e         db  0x42 ; 'B'
000000000000d71f         db  0x0e ; '.'
000000000000d720         db  0x18 ; '.'
000000000000d721         db  0x8c ; '.'
000000000000d722         db  0x03 ; '.'
000000000000d723         db  0x41 ; 'A'
000000000000d724         db  0x0e ; '.'
000000000000d725         db  0x20 ; ' '
000000000000d726         db  0x86 ; '.'
000000000000d727         db  0x04 ; '.'
000000000000d728         db  0x41 ; 'A'
000000000000d729         db  0x0e ; '.'
000000000000d72a         db  0x28 ; '('
000000000000d72b         db  0x83 ; '.'
000000000000d72c         db  0x05 ; '.'
000000000000d72d         db  0x47 ; 'G'
000000000000d72e         db  0x0e ; '.'
000000000000d72f         db  0xc0 ; '.'
000000000000d730         db  0x01 ; '.'
000000000000d731         db  0x02 ; '.'
000000000000d732         db  0xa4 ; '.'
000000000000d733         db  0x0a ; '.'
000000000000d734         db  0x0e ; '.'
000000000000d735         db  0x28 ; '('
000000000000d736         db  0x41 ; 'A'
000000000000d737         db  0x0e ; '.'
000000000000d738         db  0x20 ; ' '
000000000000d739         db  0x41 ; 'A'
000000000000d73a         db  0x0e ; '.'
000000000000d73b         db  0x18 ; '.'
000000000000d73c         db  0x42 ; 'B'
000000000000d73d         db  0x0e ; '.'
000000000000d73e         db  0x10 ; '.'
000000000000d73f         db  0x42 ; 'B'
000000000000d740         db  0x0e ; '.'
000000000000d741         db  0x08 ; '.'
000000000000d742         db  0x49 ; 'I'
000000000000d743         db  0x0b ; '.'
000000000000d744         dd         0x00000020                                  ; Length of the record
000000000000d748         dd         0x00000ef0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d74c         db         0x24, 0x98, 2 dup (0xff)                    ; begin 0x6f70
000000000000d750         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x6fda)
000000000000d754         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d755         db  0x44 ; 'D'
000000000000d756         db  0x0e ; '.'
000000000000d757         db  0x10 ; '.'
000000000000d758         db  0x72 ; 'r'
000000000000d759         db  0x0a ; '.'
000000000000d75a         db  0x0e ; '.'
000000000000d75b         db  0x08 ; '.'
000000000000d75c         db  0x4a ; 'J'
000000000000d75d         db  0x0b ; '.'
000000000000d75e         db  0x5b ; '['
000000000000d75f         db  0x0a ; '.'
000000000000d760         db  0x0e ; '.'
000000000000d761         db  0x08 ; '.'
000000000000d762         db  0x45 ; 'E'
000000000000d763         db  0x0b ; '.'
000000000000d764         db  0x49 ; 'I'
000000000000d765         db  0x0e ; '.'
000000000000d766         db  0x08 ; '.'
000000000000d767         db  0x00 ; '.'
000000000000d768         dd         0x00000040                                  ; Length of the record
000000000000d76c         dd         0x00000f14                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d770         db         0x70, 0x98, 2 dup (0xff)                    ; begin 0x6fe0
000000000000d774         db         0x66, 3 dup (0x00)                          ; length 0x66 (end at 0x7046)
000000000000d778         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d779         db  0x41 ; 'A'
000000000000d77a         db  0x0e ; '.'
000000000000d77b         db  0x10 ; '.'
000000000000d77c         db  0x86 ; '.'
000000000000d77d         db  0x02 ; '.'
000000000000d77e         db  0x41 ; 'A'
000000000000d77f         db  0x0e ; '.'
000000000000d780         db  0x18 ; '.'
000000000000d781         db  0x83 ; '.'
000000000000d782         db  0x03 ; '.'
000000000000d783         db  0x49 ; 'I'
000000000000d784         db  0x0e ; '.'
000000000000d785         db  0x20 ; ' '
000000000000d786         db  0x61 ; 'a'
000000000000d787         db  0x0a ; '.'
000000000000d788         db  0x0e ; '.'
000000000000d789         db  0x18 ; '.'
000000000000d78a         db  0x41 ; 'A'
000000000000d78b         db  0x0e ; '.'
000000000000d78c         db  0x10 ; '.'
000000000000d78d         db  0x41 ; 'A'
000000000000d78e         db  0x0e ; '.'
000000000000d78f         db  0x08 ; '.'
000000000000d790         db  0x42 ; 'B'
000000000000d791         db  0x0b ; '.'
000000000000d792         db  0x5b ; '['
000000000000d793         db  0x0a ; '.'
000000000000d794         db  0x0e ; '.'
000000000000d795         db  0x18 ; '.'
000000000000d796         db  0x41 ; 'A'
000000000000d797         db  0x0e ; '.'
000000000000d798         db  0x10 ; '.'
000000000000d799         db  0x41 ; 'A'
000000000000d79a         db  0x0e ; '.'
000000000000d79b         db  0x08 ; '.'
000000000000d79c         db  0x43 ; 'C'
000000000000d79d         db  0x0b ; '.'
000000000000d79e         db  0x4e ; 'N'
000000000000d79f         db  0x0a ; '.'
000000000000d7a0         db  0x0e ; '.'
000000000000d7a1         db  0x18 ; '.'
000000000000d7a2         db  0x41 ; 'A'
000000000000d7a3         db  0x0e ; '.'
000000000000d7a4         db  0x10 ; '.'
000000000000d7a5         db  0x41 ; 'A'
000000000000d7a6         db  0x0e ; '.'
000000000000d7a7         db  0x08 ; '.'
000000000000d7a8         db  0x41 ; 'A'
000000000000d7a9         db  0x0b ; '.'
000000000000d7aa         db  0x00 ; '.'
000000000000d7ab         db  0x00 ; '.'
000000000000d7ac         dd         0x00000028                                  ; Length of the record
000000000000d7b0         dd         0x00000f58                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d7b4         db         0x9c, 0x98, 2 dup (0xff)                    ; begin 0x7050
000000000000d7b8         db         0x5c, 3 dup (0x00)                          ; length 0x5c (end at 0x70ac)
000000000000d7bc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d7bd         db  0x41 ; 'A'
000000000000d7be         db  0x0e ; '.'
000000000000d7bf         db  0x10 ; '.'
000000000000d7c0         db  0x86 ; '.'
000000000000d7c1         db  0x02 ; '.'
000000000000d7c2         db  0x41 ; 'A'
000000000000d7c3         db  0x0e ; '.'
000000000000d7c4         db  0x18 ; '.'
000000000000d7c5         db  0x83 ; '.'
000000000000d7c6         db  0x03 ; '.'
000000000000d7c7         db  0x47 ; 'G'
000000000000d7c8         db  0x0e ; '.'
000000000000d7c9         db  0x20 ; ' '
000000000000d7ca         db  0x6c ; 'l'
000000000000d7cb         db  0x0a ; '.'
000000000000d7cc         db  0x0e ; '.'
000000000000d7cd         db  0x18 ; '.'
000000000000d7ce         db  0x43 ; 'C'
000000000000d7cf         db  0x0e ; '.'
000000000000d7d0         db  0x10 ; '.'
000000000000d7d1         db  0x41 ; 'A'
000000000000d7d2         db  0x0e ; '.'
000000000000d7d3         db  0x08 ; '.'
000000000000d7d4         db  0x47 ; 'G'
000000000000d7d5         db  0x0b ; '.'
000000000000d7d6         db  0x00 ; '.'
000000000000d7d7         db  0x00 ; '.'
000000000000d7d8         dd         0x00000024                                  ; Length of the record
000000000000d7dc         dd         0x00000f84                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d7e0         db         0xd0, 0x98, 2 dup (0xff)                    ; begin 0x70b0
000000000000d7e4         db         0x6b, 3 dup (0x00)                          ; length 0x6b (end at 0x711b)
000000000000d7e8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d7e9         db  0x41 ; 'A'
000000000000d7ea         db  0x0e ; '.'
000000000000d7eb         db  0x10 ; '.'
000000000000d7ec         db  0x83 ; '.'
000000000000d7ed         db  0x02 ; '.'
000000000000d7ee         db  0x6f ; 'o'
000000000000d7ef         db  0x0a ; '.'
000000000000d7f0         db  0x0e ; '.'
000000000000d7f1         db  0x08 ; '.'
000000000000d7f2         db  0x48 ; 'H'
000000000000d7f3         db  0x0b ; '.'
000000000000d7f4         db  0x5a ; 'Z'
000000000000d7f5         db  0x0a ; '.'
000000000000d7f6         db  0x0e ; '.'
000000000000d7f7         db  0x08 ; '.'
000000000000d7f8         db  0x46 ; 'F'
000000000000d7f9         db  0x0b ; '.'
000000000000d7fa         db  0x52 ; 'R'
000000000000d7fb         db  0x0e ; '.'
000000000000d7fc         db  0x08 ; '.'
000000000000d7fd         db  0x00 ; '.'
000000000000d7fe         db  0x00 ; '.'
000000000000d7ff         db  0x00 ; '.'
000000000000d800         dd         0x0000001c                                  ; Length of the record
000000000000d804         dd         0x00000fac                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d808         db         0x18, 0x99, 2 dup (0xff)                    ; begin 0x7120
000000000000d80c         db         0x63, 3 dup (0x00)                          ; length 0x63 (end at 0x7183)
000000000000d810         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d811         db  0x47 ; 'G'
000000000000d812         db  0x0e ; '.'
000000000000d813         db  0x10 ; '.'
000000000000d814         db  0x83 ; '.'
000000000000d815         db  0x02 ; '.'
000000000000d816         db  0x70 ; 'p'
000000000000d817         db  0x0a ; '.'
000000000000d818         db  0x0e ; '.'
000000000000d819         db  0x08 ; '.'
000000000000d81a         db  0x49 ; 'I'
000000000000d81b         db  0x0b ; '.'
000000000000d81c         db  0x62 ; 'b'
000000000000d81d         db  0x0e ; '.'
000000000000d81e         db  0x08 ; '.'
000000000000d81f         db  0x00 ; '.'
000000000000d820         dd         0x00000010                                  ; Length of the record
000000000000d824         dd         0x00000fcc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d828         db         0x68, 0x99, 2 dup (0xff)                    ; begin 0x7190
000000000000d82c         db         0x3a, 3 dup (0x00)                          ; length 0x3a (end at 0x71ca)
000000000000d830         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d831         align      4
000000000000d834         dd         0x0000004c                                  ; Length of the record
000000000000d838         dd         0x00000fe0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d83c         db         0x94, 0x99, 2 dup (0xff)                    ; begin 0x71d0
000000000000d840         db         0x7a, 0x02, 2 dup (0x00)                    ; length 0x27a (end at 0x744a)
000000000000d844         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d845         db  0x42 ; 'B'
000000000000d846         db  0x0e ; '.'
000000000000d847         db  0x10 ; '.'
000000000000d848         db  0x8f ; '.'
000000000000d849         db  0x02 ; '.'
000000000000d84a         db  0x42 ; 'B'
000000000000d84b         db  0x0e ; '.'
000000000000d84c         db  0x18 ; '.'
000000000000d84d         db  0x8e ; '.'
000000000000d84e         db  0x03 ; '.'
000000000000d84f         db  0x45 ; 'E'
000000000000d850         db  0x0e ; '.'
000000000000d851         db  0x20 ; ' '
000000000000d852         db  0x8d ; '.'
000000000000d853         db  0x04 ; '.'
000000000000d854         db  0x42 ; 'B'
000000000000d855         db  0x0e ; '.'
000000000000d856         db  0x28 ; '('
000000000000d857         db  0x8c ; '.'
000000000000d858         db  0x05 ; '.'
000000000000d859         db  0x44 ; 'D'
000000000000d85a         db  0x0e ; '.'
000000000000d85b         db  0x30 ; '0'
000000000000d85c         db  0x86 ; '.'
000000000000d85d         db  0x06 ; '.'
000000000000d85e         db  0x41 ; 'A'
000000000000d85f         db  0x0e ; '.'
000000000000d860         db  0x38 ; '8'
000000000000d861         db  0x83 ; '.'
000000000000d862         db  0x07 ; '.'
000000000000d863         db  0x4d ; 'M'
000000000000d864         db  0x0e ; '.'
000000000000d865         db  0xf0 ; '.'
000000000000d866         db  0x01 ; '.'
000000000000d867         db  0x03 ; '.'
000000000000d868         db  0x08 ; '.'
000000000000d869         db  0x01 ; '.'
000000000000d86a         db  0x0a ; '.'
000000000000d86b         db  0x0e ; '.'
000000000000d86c         db  0x38 ; '8'
000000000000d86d         db  0x41 ; 'A'
000000000000d86e         db  0x0e ; '.'
000000000000d86f         db  0x30 ; '0'
000000000000d870         db  0x41 ; 'A'
000000000000d871         db  0x0e ; '.'
000000000000d872         db  0x28 ; '('
000000000000d873         db  0x42 ; 'B'
000000000000d874         db  0x0e ; '.'
000000000000d875         db  0x20 ; ' '
000000000000d876         db  0x42 ; 'B'
000000000000d877         db  0x0e ; '.'
000000000000d878         db  0x18 ; '.'
000000000000d879         db  0x42 ; 'B'
000000000000d87a         db  0x0e ; '.'
000000000000d87b         db  0x10 ; '.'
000000000000d87c         db  0x42 ; 'B'
000000000000d87d         db  0x0e ; '.'
000000000000d87e         db  0x08 ; '.'
000000000000d87f         db  0x41 ; 'A'
000000000000d880         db  0x0b ; '.'
000000000000d881         db  0x00 ; '.'
000000000000d882         db  0x00 ; '.'
000000000000d883         db  0x00 ; '.'
000000000000d884         dd         0x00000040                                  ; Length of the record
000000000000d888         dd         0x00001030                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d88c         db         0xc4, 0x9b, 2 dup (0xff)                    ; begin 0x7450
000000000000d890         db         0xaf, 3 dup (0x00)                          ; length 0xaf (end at 0x74ff)
000000000000d894         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d895         db  0x48 ; 'H'
000000000000d896         db  0x0e ; '.'
000000000000d897         db  0x10 ; '.'
000000000000d898         db  0x8c ; '.'
000000000000d899         db  0x02 ; '.'
000000000000d89a         db  0x44 ; 'D'
000000000000d89b         db  0x0e ; '.'
000000000000d89c         db  0x18 ; '.'
000000000000d89d         db  0x86 ; '.'
000000000000d89e         db  0x03 ; '.'
000000000000d89f         db  0x41 ; 'A'
000000000000d8a0         db  0x0e ; '.'
000000000000d8a1         db  0x20 ; ' '
000000000000d8a2         db  0x83 ; '.'
000000000000d8a3         db  0x04 ; '.'
000000000000d8a4         db  0x02 ; '.'
000000000000d8a5         db  0x65 ; 'e'
000000000000d8a6         db  0x0a ; '.'
000000000000d8a7         db  0x0e ; '.'
000000000000d8a8         db  0x18 ; '.'
000000000000d8a9         db  0x46 ; 'F'
000000000000d8aa         db  0x0e ; '.'
000000000000d8ab         db  0x10 ; '.'
000000000000d8ac         db  0x42 ; 'B'
000000000000d8ad         db  0x0e ; '.'
000000000000d8ae         db  0x08 ; '.'
000000000000d8af         db  0x46 ; 'F'
000000000000d8b0         db  0x0b ; '.'
000000000000d8b1         db  0x5e ; '^'
000000000000d8b2         db  0x0a ; '.'
000000000000d8b3         db  0x0e ; '.'
000000000000d8b4         db  0x18 ; '.'
000000000000d8b5         db  0x41 ; 'A'
000000000000d8b6         db  0x0e ; '.'
000000000000d8b7         db  0x10 ; '.'
000000000000d8b8         db  0x42 ; 'B'
000000000000d8b9         db  0x0e ; '.'
000000000000d8ba         db  0x08 ; '.'
000000000000d8bb         db  0x47 ; 'G'
000000000000d8bc         db  0x0b ; '.'
000000000000d8bd         db  0x41 ; 'A'
000000000000d8be         db  0x0e ; '.'
000000000000d8bf         db  0x18 ; '.'
000000000000d8c0         db  0x43 ; 'C'
000000000000d8c1         db  0x0e ; '.'
000000000000d8c2         db  0x10 ; '.'
000000000000d8c3         db  0x42 ; 'B'
000000000000d8c4         db  0x0e ; '.'
000000000000d8c5         db  0x08 ; '.'
000000000000d8c6         db  0x00 ; '.'
000000000000d8c7         db  0x00 ; '.'
000000000000d8c8         dd         0x00000018                                  ; Length of the record
000000000000d8cc         dd         0x00001074                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d8d0         db         0x30, 0x9c, 2 dup (0xff)                    ; begin 0x7500
000000000000d8d4         db         0xb8, 3 dup (0x00)                          ; length 0xb8 (end at 0x75b8)
000000000000d8d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d8d9         db  0x44 ; 'D'
000000000000d8da         db  0x0e ; '.'
000000000000d8db         db  0x30 ; '0'
000000000000d8dc         db  0x02 ; '.'
000000000000d8dd         db  0x55 ; 'U'
000000000000d8de         db  0x0a ; '.'
000000000000d8df         db  0x0e ; '.'
000000000000d8e0         db  0x08 ; '.'
000000000000d8e1         db  0x47 ; 'G'
000000000000d8e2         db  0x0b ; '.'
000000000000d8e3         db  0x00 ; '.'
000000000000d8e4         dd         0x0000004c                                  ; Length of the record
000000000000d8e8         dd         0x00001090                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d8ec         db         0xd4, 0x9c, 2 dup (0xff)                    ; begin 0x75c0
000000000000d8f0         db         0xd1, 0x09, 2 dup (0x00)                    ; length 0x9d1 (end at 0x7f91)
000000000000d8f4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d8f5         db  0x42 ; 'B'
000000000000d8f6         db  0x0e ; '.'
000000000000d8f7         db  0x10 ; '.'
000000000000d8f8         db  0x8f ; '.'
000000000000d8f9         db  0x02 ; '.'
000000000000d8fa         db  0x42 ; 'B'
000000000000d8fb         db  0x0e ; '.'
000000000000d8fc         db  0x18 ; '.'
000000000000d8fd         db  0x8e ; '.'
000000000000d8fe         db  0x03 ; '.'
000000000000d8ff         db  0x45 ; 'E'
000000000000d900         db  0x0e ; '.'
000000000000d901         db  0x20 ; ' '
000000000000d902         db  0x8d ; '.'
000000000000d903         db  0x04 ; '.'
000000000000d904         db  0x42 ; 'B'
000000000000d905         db  0x0e ; '.'
000000000000d906         db  0x28 ; '('
000000000000d907         db  0x8c ; '.'
000000000000d908         db  0x05 ; '.'
000000000000d909         db  0x41 ; 'A'
000000000000d90a         db  0x0e ; '.'
000000000000d90b         db  0x30 ; '0'
000000000000d90c         db  0x86 ; '.'
000000000000d90d         db  0x06 ; '.'
000000000000d90e         db  0x41 ; 'A'
000000000000d90f         db  0x0e ; '.'
000000000000d910         db  0x38 ; '8'
000000000000d911         db  0x83 ; '.'
000000000000d912         db  0x07 ; '.'
000000000000d913         db  0x44 ; 'D'
000000000000d914         db  0x0e ; '.'
000000000000d915         db  0xb0 ; '.'
000000000000d916         db  0x01 ; '.'
000000000000d917         db  0x03 ; '.'
000000000000d918         db  0xd1 ; '.'
000000000000d919         db  0x05 ; '.'
000000000000d91a         db  0x0a ; '.'
000000000000d91b         db  0x0e ; '.'
000000000000d91c         db  0x38 ; '8'
000000000000d91d         db  0x41 ; 'A'
000000000000d91e         db  0x0e ; '.'
000000000000d91f         db  0x30 ; '0'
000000000000d920         db  0x41 ; 'A'
000000000000d921         db  0x0e ; '.'
000000000000d922         db  0x28 ; '('
000000000000d923         db  0x42 ; 'B'
000000000000d924         db  0x0e ; '.'
000000000000d925         db  0x20 ; ' '
000000000000d926         db  0x42 ; 'B'
000000000000d927         db  0x0e ; '.'
000000000000d928         db  0x18 ; '.'
000000000000d929         db  0x42 ; 'B'
000000000000d92a         db  0x0e ; '.'
000000000000d92b         db  0x10 ; '.'
000000000000d92c         db  0x42 ; 'B'
000000000000d92d         db  0x0e ; '.'
000000000000d92e         db  0x08 ; '.'
000000000000d92f         db  0x44 ; 'D'
000000000000d930         db  0x0b ; '.'
000000000000d931         db  0x00 ; '.'
000000000000d932         db  0x00 ; '.'
000000000000d933         db  0x00 ; '.'
000000000000d934         dd         0x00000048                                  ; Length of the record
000000000000d938         dd         0x000010e0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d93c         db         0x64, 0xa6, 2 dup (0xff)                    ; begin 0x7fa0
000000000000d940         db         0xaa, 0x03, 2 dup (0x00)                    ; length 0x3aa (end at 0x834a)
000000000000d944         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d945         db  0x42 ; 'B'
000000000000d946         db  0x0e ; '.'
000000000000d947         db  0x10 ; '.'
000000000000d948         db  0x8f ; '.'
000000000000d949         db  0x02 ; '.'
000000000000d94a         db  0x42 ; 'B'
000000000000d94b         db  0x0e ; '.'
000000000000d94c         db  0x18 ; '.'
000000000000d94d         db  0x8e ; '.'
000000000000d94e         db  0x03 ; '.'
000000000000d94f         db  0x42 ; 'B'
000000000000d950         db  0x0e ; '.'
000000000000d951         db  0x20 ; ' '
000000000000d952         db  0x8d ; '.'
000000000000d953         db  0x04 ; '.'
000000000000d954         db  0x42 ; 'B'
000000000000d955         db  0x0e ; '.'
000000000000d956         db  0x28 ; '('
000000000000d957         db  0x8c ; '.'
000000000000d958         db  0x05 ; '.'
000000000000d959         db  0x41 ; 'A'
000000000000d95a         db  0x0e ; '.'
000000000000d95b         db  0x30 ; '0'
000000000000d95c         db  0x86 ; '.'
000000000000d95d         db  0x06 ; '.'
000000000000d95e         db  0x41 ; 'A'
000000000000d95f         db  0x0e ; '.'
000000000000d960         db  0x38 ; '8'
000000000000d961         db  0x83 ; '.'
000000000000d962         db  0x07 ; '.'
000000000000d963         db  0x44 ; 'D'
000000000000d964         db  0x0e ; '.'
000000000000d965         db  0x60 ; '`'
000000000000d966         db  0x03 ; '.'
000000000000d967         db  0xa4 ; '.'
000000000000d968         db  0x02 ; '.'
000000000000d969         db  0x0a ; '.'
000000000000d96a         db  0x0e ; '.'
000000000000d96b         db  0x38 ; '8'
000000000000d96c         db  0x44 ; 'D'
000000000000d96d         db  0x0e ; '.'
000000000000d96e         db  0x30 ; '0'
000000000000d96f         db  0x41 ; 'A'
000000000000d970         db  0x0e ; '.'
000000000000d971         db  0x28 ; '('
000000000000d972         db  0x42 ; 'B'
000000000000d973         db  0x0e ; '.'
000000000000d974         db  0x20 ; ' '
000000000000d975         db  0x42 ; 'B'
000000000000d976         db  0x0e ; '.'
000000000000d977         db  0x18 ; '.'
000000000000d978         db  0x42 ; 'B'
000000000000d979         db  0x0e ; '.'
000000000000d97a         db  0x10 ; '.'
000000000000d97b         db  0x42 ; 'B'
000000000000d97c         db  0x0e ; '.'
000000000000d97d         db  0x08 ; '.'
000000000000d97e         db  0x41 ; 'A'
000000000000d97f         db  0x0b ; '.'
000000000000d980         dd         0x0000002c                                  ; Length of the record
000000000000d984         dd         0x0000112c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d988         db         0xc8, 0xa9, 2 dup (0xff)                    ; begin 0x8350
000000000000d98c         db         0x82, 0x01, 2 dup (0x00)                    ; length 0x182 (end at 0x84d2)
000000000000d990         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d991         db  0x42 ; 'B'
000000000000d992         db  0x0e ; '.'
000000000000d993         db  0x10 ; '.'
000000000000d994         db  0x8c ; '.'
000000000000d995         db  0x02 ; '.'
000000000000d996         db  0x41 ; 'A'
000000000000d997         db  0x0e ; '.'
000000000000d998         db  0x18 ; '.'
000000000000d999         db  0x86 ; '.'
000000000000d99a         db  0x03 ; '.'
000000000000d99b         db  0x44 ; 'D'
000000000000d99c         db  0x0e ; '.'
000000000000d99d         db  0x20 ; ' '
000000000000d99e         db  0x83 ; '.'
000000000000d99f         db  0x04 ; '.'
000000000000d9a0         db  0x02 ; '.'
000000000000d9a1         db  0xc2 ; '.'
000000000000d9a2         db  0x0a ; '.'
000000000000d9a3         db  0x0e ; '.'
000000000000d9a4         db  0x18 ; '.'
000000000000d9a5         db  0x41 ; 'A'
000000000000d9a6         db  0x0e ; '.'
000000000000d9a7         db  0x10 ; '.'
000000000000d9a8         db  0x42 ; 'B'
000000000000d9a9         db  0x0e ; '.'
000000000000d9aa         db  0x08 ; '.'
000000000000d9ab         db  0x44 ; 'D'
000000000000d9ac         db  0x0b ; '.'
000000000000d9ad         db  0x00 ; '.'
000000000000d9ae         db  0x00 ; '.'
000000000000d9af         db  0x00 ; '.'
000000000000d9b0         dd         0x00000060                                  ; Length of the record
000000000000d9b4         dd         0x0000115c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000d9b8         db         0x28, 0xab, 2 dup (0xff)                    ; begin 0x84e0
000000000000d9bc         db         0x78, 0x07, 2 dup (0x00)                    ; length 0x778 (end at 0x8c58)
000000000000d9c0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000d9c1         db  0x42 ; 'B'
000000000000d9c2         db  0x0e ; '.'
000000000000d9c3         db  0x10 ; '.'
000000000000d9c4         db  0x8e ; '.'
000000000000d9c5         db  0x02 ; '.'
000000000000d9c6         db  0x42 ; 'B'
000000000000d9c7         db  0x0e ; '.'
000000000000d9c8         db  0x18 ; '.'
000000000000d9c9         db  0x8d ; '.'
000000000000d9ca         db  0x03 ; '.'
000000000000d9cb         db  0x42 ; 'B'
000000000000d9cc         db  0x0e ; '.'
000000000000d9cd         db  0x20 ; ' '
000000000000d9ce         db  0x8c ; '.'
000000000000d9cf         db  0x04 ; '.'
000000000000d9d0         db  0x41 ; 'A'
000000000000d9d1         db  0x0e ; '.'
000000000000d9d2         db  0x28 ; '('
000000000000d9d3         db  0x86 ; '.'
000000000000d9d4         db  0x05 ; '.'
000000000000d9d5         db  0x41 ; 'A'
000000000000d9d6         db  0x0e ; '.'
000000000000d9d7         db  0x30 ; '0'
000000000000d9d8         db  0x83 ; '.'
000000000000d9d9         db  0x06 ; '.'
000000000000d9da         db  0x03 ; '.'
000000000000d9db         db  0x19 ; '.'
000000000000d9dc         db  0x01 ; '.'
000000000000d9dd         db  0x0a ; '.'
000000000000d9de         db  0x0e ; '.'
000000000000d9df         db  0x28 ; '('
000000000000d9e0         db  0x44 ; 'D'
000000000000d9e1         db  0x0e ; '.'
000000000000d9e2         db  0x20 ; ' '
000000000000d9e3         db  0x42 ; 'B'
000000000000d9e4         db  0x0e ; '.'
000000000000d9e5         db  0x18 ; '.'
000000000000d9e6         db  0x42 ; 'B'
000000000000d9e7         db  0x0e ; '.'
000000000000d9e8         db  0x10 ; '.'
000000000000d9e9         db  0x42 ; 'B'
000000000000d9ea         db  0x0e ; '.'
000000000000d9eb         db  0x08 ; '.'
000000000000d9ec         db  0x45 ; 'E'
000000000000d9ed         db  0x0b ; '.'
000000000000d9ee         db  0x02 ; '.'
000000000000d9ef         db  0x6b ; 'k'
000000000000d9f0         db  0x0a ; '.'
000000000000d9f1         db  0x0e ; '.'
000000000000d9f2         db  0x28 ; '('
000000000000d9f3         db  0x44 ; 'D'
000000000000d9f4         db  0x0e ; '.'
000000000000d9f5         db  0x20 ; ' '
000000000000d9f6         db  0x42 ; 'B'
000000000000d9f7         db  0x0e ; '.'
000000000000d9f8         db  0x18 ; '.'
000000000000d9f9         db  0x42 ; 'B'
000000000000d9fa         db  0x0e ; '.'
000000000000d9fb         db  0x10 ; '.'
000000000000d9fc         db  0x42 ; 'B'
000000000000d9fd         db  0x0e ; '.'
000000000000d9fe         db  0x08 ; '.'
000000000000d9ff         db  0x4b ; 'K'
000000000000da00         db  0x0b ; '.'
000000000000da01         db  0x02 ; '.'
000000000000da02         db  0xe2 ; '.'
000000000000da03         db  0x0a ; '.'
000000000000da04         db  0x0e ; '.'
000000000000da05         db  0x28 ; '('
000000000000da06         db  0x41 ; 'A'
000000000000da07         db  0x0e ; '.'
000000000000da08         db  0x20 ; ' '
000000000000da09         db  0x42 ; 'B'
000000000000da0a         db  0x0e ; '.'
000000000000da0b         db  0x18 ; '.'
000000000000da0c         db  0x42 ; 'B'
000000000000da0d         db  0x0e ; '.'
000000000000da0e         db  0x10 ; '.'
000000000000da0f         db  0x42 ; 'B'
000000000000da10         db  0x0e ; '.'
000000000000da11         db  0x08 ; '.'
000000000000da12         db  0x47 ; 'G'
000000000000da13         db  0x0b ; '.'
000000000000da14         dd         0x00000014                                  ; Length of the record
000000000000da18         dd         0x000011c0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000da1c         db         0x44, 0xb2, 2 dup (0xff)                    ; begin 0x8c60
000000000000da20         db         0x29, 3 dup (0x00)                          ; length 0x29 (end at 0x8c89)
000000000000da24         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da25         db  0x54 ; 'T'
000000000000da26         db  0x0e ; '.'
000000000000da27         db  0x10 ; '.'
000000000000da28         db  0x54 ; 'T'
000000000000da29         db  0x0e ; '.'
000000000000da2a         db  0x08 ; '.'
000000000000da2b         db  0x00 ; '.'
000000000000da2c         dd         0x00000060                                  ; Length of the record
000000000000da30         dd         0x000011d8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000da34         db         0x5c, 0xb2, 2 dup (0xff)                    ; begin 0x8c90
000000000000da38         db         0x4e, 0x01, 2 dup (0x00)                    ; length 0x14e (end at 0x8dde)
000000000000da3c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000da3d         db  0x42 ; 'B'
000000000000da3e         db  0x0e ; '.'
000000000000da3f         db  0x10 ; '.'
000000000000da40         db  0x8e ; '.'
000000000000da41         db  0x02 ; '.'
000000000000da42         db  0x42 ; 'B'
000000000000da43         db  0x0e ; '.'
000000000000da44         db  0x18 ; '.'
000000000000da45         db  0x8d ; '.'
000000000000da46         db  0x03 ; '.'
000000000000da47         db  0x42 ; 'B'
000000000000da48         db  0x0e ; '.'
000000000000da49         db  0x20 ; ' '
000000000000da4a         db  0x8c ; '.'
000000000000da4b         db  0x04 ; '.'
000000000000da4c         db  0x41 ; 'A'
000000000000da4d         db  0x0e ; '.'
000000000000da4e         db  0x28 ; '('
000000000000da4f         db  0x86 ; '.'
000000000000da50         db  0x05 ; '.'
000000000000da51         db  0x44 ; 'D'
000000000000da52         db  0x0e ; '.'
000000000000da53         db  0x30 ; '0'
000000000000da54         db  0x83 ; '.'
000000000000da55         db  0x06 ; '.'
000000000000da56         db  0x02 ; '.'
000000000000da57         db  0x8a ; '.'
000000000000da58         db  0x0a ; '.'
000000000000da59         db  0x0e ; '.'
000000000000da5a         db  0x28 ; '('
000000000000da5b         db  0x41 ; 'A'
000000000000da5c         db  0x0e ; '.'
000000000000da5d         db  0x20 ; ' '
000000000000da5e         db  0x42 ; 'B'
000000000000da5f         db  0x0e ; '.'
000000000000da60         db  0x18 ; '.'
000000000000da61         db  0x42 ; 'B'
000000000000da62         db  0x0e ; '.'
000000000000da63         db  0x10 ; '.'
000000000000da64         db  0x42 ; 'B'
000000000000da65         db  0x0e ; '.'
000000000000da66         db  0x08 ; '.'
000000000000da67         db  0x44 ; 'D'
000000000000da68         db  0x0b ; '.'
000000000000da69         db  0x41 ; 'A'
000000000000da6a         db  0x0a ; '.'
000000000000da6b         db  0x0e ; '.'
000000000000da6c         db  0x28 ; '('
000000000000da6d         db  0x45 ; 'E'
000000000000da6e         db  0x0e ; '.'
000000000000da6f         db  0x20 ; ' '
000000000000da70         db  0x42 ; 'B'
000000000000da71         db  0x0e ; '.'
000000000000da72         db  0x18 ; '.'
000000000000da73         db  0x42 ; 'B'
000000000000da74         db  0x0e ; '.'
000000000000da75         db  0x10 ; '.'
000000000000da76         db  0x42 ; 'B'
000000000000da77         db  0x0e ; '.'
000000000000da78         db  0x08 ; '.'
000000000000da79         db  0x44 ; 'D'
000000000000da7a         db  0x0b ; '.'
000000000000da7b         db  0x41 ; 'A'
000000000000da7c         db  0x0a ; '.'
000000000000da7d         db  0x0e ; '.'
000000000000da7e         db  0x28 ; '('
000000000000da7f         db  0x43 ; 'C'
000000000000da80         db  0x0e ; '.'
000000000000da81         db  0x20 ; ' '
000000000000da82         db  0x42 ; 'B'
000000000000da83         db  0x0e ; '.'
000000000000da84         db  0x18 ; '.'
000000000000da85         db  0x42 ; 'B'
000000000000da86         db  0x0e ; '.'
000000000000da87         db  0x10 ; '.'
000000000000da88         db  0x42 ; 'B'
000000000000da89         db  0x0e ; '.'
000000000000da8a         db  0x08 ; '.'
000000000000da8b         db  0x46 ; 'F'
000000000000da8c         db  0x0b ; '.'
000000000000da8d         db  0x00 ; '.'
000000000000da8e         db  0x00 ; '.'
000000000000da8f         db  0x00 ; '.'
000000000000da90         dd         0x0000003c                                  ; Length of the record
000000000000da94         dd         0x0000123c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000da98         db         0x48, 0xb3, 2 dup (0xff)                    ; begin 0x8de0
000000000000da9c         db         0x83, 3 dup (0x00)                          ; length 0x83 (end at 0x8e63)
000000000000daa0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000daa1         db  0x42 ; 'B'
000000000000daa2         db  0x0e ; '.'
000000000000daa3         db  0x10 ; '.'
000000000000daa4         db  0x8d ; '.'
000000000000daa5         db  0x02 ; '.'
000000000000daa6         db  0x42 ; 'B'
000000000000daa7         db  0x0e ; '.'
000000000000daa8         db  0x18 ; '.'
000000000000daa9         db  0x8c ; '.'
000000000000daaa         db  0x03 ; '.'
000000000000daab         db  0x44 ; 'D'
000000000000daac         db  0x0e ; '.'
000000000000daad         db  0x20 ; ' '
000000000000daae         db  0x86 ; '.'
000000000000daaf         db  0x04 ; '.'
000000000000dab0         db  0x41 ; 'A'
000000000000dab1         db  0x0e ; '.'
000000000000dab2         db  0x28 ; '('
000000000000dab3         db  0x83 ; '.'
000000000000dab4         db  0x05 ; '.'
000000000000dab5         db  0x4a ; 'J'
000000000000dab6         db  0x0e ; '.'
000000000000dab7         db  0x40 ; '@'
000000000000dab8         db  0x02 ; '.'
000000000000dab9         db  0x64 ; 'd'
000000000000daba         db  0x0a ; '.'
000000000000dabb         db  0x0e ; '.'
000000000000dabc         db  0x28 ; '('
000000000000dabd         db  0x41 ; 'A'
000000000000dabe         db  0x0e ; '.'
000000000000dabf         db  0x20 ; ' '
000000000000dac0         db  0x41 ; 'A'
000000000000dac1         db  0x0e ; '.'
000000000000dac2         db  0x18 ; '.'
000000000000dac3         db  0x42 ; 'B'
000000000000dac4         db  0x0e ; '.'
000000000000dac5         db  0x10 ; '.'
000000000000dac6         db  0x42 ; 'B'
000000000000dac7         db  0x0e ; '.'
000000000000dac8         db  0x08 ; '.'
000000000000dac9         db  0x41 ; 'A'
000000000000daca         db  0x0b ; '.'
000000000000dacb         db  0x00 ; '.'
000000000000dacc         db  0x00 ; '.'
000000000000dacd         db  0x00 ; '.'
000000000000dace         db  0x00 ; '.'
000000000000dacf         db  0x00 ; '.'
000000000000dad0         dd         0x0000004c                                  ; Length of the record
000000000000dad4         dd         0x0000127c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dad8         db         0x98, 0xb3, 2 dup (0xff)                    ; begin 0x8e70
000000000000dadc         db         0x7d, 3 dup (0x00)                          ; length 0x7d (end at 0x8eed)
000000000000dae0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dae1         db  0x42 ; 'B'
000000000000dae2         db  0x0e ; '.'
000000000000dae3         db  0x10 ; '.'
000000000000dae4         db  0x8c ; '.'
000000000000dae5         db  0x02 ; '.'
000000000000dae6         db  0x41 ; 'A'
000000000000dae7         db  0x0e ; '.'
000000000000dae8         db  0x18 ; '.'
000000000000dae9         db  0x86 ; '.'
000000000000daea         db  0x03 ; '.'
000000000000daeb         db  0x44 ; 'D'
000000000000daec         db  0x0e ; '.'
000000000000daed         db  0x20 ; ' '
000000000000daee         db  0x83 ; '.'
000000000000daef         db  0x04 ; '.'
000000000000daf0         db  0x69 ; 'i'
000000000000daf1         db  0x0a ; '.'
000000000000daf2         db  0x0e ; '.'
000000000000daf3         db  0x18 ; '.'
000000000000daf4         db  0x41 ; 'A'
000000000000daf5         db  0x0e ; '.'
000000000000daf6         db  0x10 ; '.'
000000000000daf7         db  0x42 ; 'B'
000000000000daf8         db  0x0e ; '.'
000000000000daf9         db  0x08 ; '.'
000000000000dafa         db  0x45 ; 'E'
000000000000dafb         db  0x0b ; '.'
000000000000dafc         db  0x55 ; 'U'
000000000000dafd         db  0x0a ; '.'
000000000000dafe         db  0x0e ; '.'
000000000000daff         db  0x18 ; '.'
000000000000db00         db  0x41 ; 'A'
000000000000db01         db  0x0e ; '.'
000000000000db02         db  0x10 ; '.'
000000000000db03         db  0x42 ; 'B'
000000000000db04         db  0x0e ; '.'
000000000000db05         db  0x08 ; '.'
000000000000db06         db  0x48 ; 'H'
000000000000db07         db  0x0b ; '.'
000000000000db08         db  0x41 ; 'A'
000000000000db09         db  0x0a ; '.'
000000000000db0a         db  0x0e ; '.'
000000000000db0b         db  0x18 ; '.'
000000000000db0c         db  0x46 ; 'F'
000000000000db0d         db  0x0e ; '.'
000000000000db0e         db  0x10 ; '.'
000000000000db0f         db  0x42 ; 'B'
000000000000db10         db  0x0e ; '.'
000000000000db11         db  0x08 ; '.'
000000000000db12         db  0x47 ; 'G'
000000000000db13         db  0x0b ; '.'
000000000000db14         db  0x49 ; 'I'
000000000000db15         db  0x0e ; '.'
000000000000db16         db  0x18 ; '.'
000000000000db17         db  0x41 ; 'A'
000000000000db18         db  0x0e ; '.'
000000000000db19         db  0x10 ; '.'
000000000000db1a         db  0x42 ; 'B'
000000000000db1b         db  0x0e ; '.'
000000000000db1c         db  0x08 ; '.'
000000000000db1d         db  0x00 ; '.'
000000000000db1e         db  0x00 ; '.'
000000000000db1f         db  0x00 ; '.'
000000000000db20         dd         0x00000010                                  ; Length of the record
000000000000db24         dd         0x000012cc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000db28         db         0xc8, 0xb3, 2 dup (0xff)                    ; begin 0x8ef0
000000000000db2c         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x8f00)
000000000000db30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db31         align      4
000000000000db34         dd         0x00000018                                  ; Length of the record
000000000000db38         dd         0x000012e0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000db3c         db         0xc4, 0xb3, 2 dup (0xff)                    ; begin 0x8f00
000000000000db40         db         0x8a, 3 dup (0x00)                          ; length 0x8a (end at 0x8f8a)
000000000000db44         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db45         db  0x02 ; '.'
000000000000db46         db  0x80 ; '.'
000000000000db47         db  0x0e ; '.'
000000000000db48         db  0x10 ; '.'
000000000000db49         db  0x00 ; '.'
000000000000db4a         db  0x00 ; '.'
000000000000db4b         db  0x00 ; '.'
000000000000db4c         db  0x00 ; '.'
000000000000db4d         db  0x00 ; '.'
000000000000db4e         db  0x00 ; '.'
000000000000db4f         db  0x00 ; '.'
000000000000db50         dd         0x0000001c                                  ; Length of the record
000000000000db54         dd         0x000012fc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000db58         db         0x38, 0xb4, 2 dup (0xff)                    ; begin 0x8f90
000000000000db5c         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0x8ffe)
000000000000db60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db61         db  0x44 ; 'D'
000000000000db62         db  0x0e ; '.'
000000000000db63         db  0x60 ; '`'
000000000000db64         db  0x7f ; '.'
000000000000db65         db  0x0a ; '.'
000000000000db66         db  0x0e ; '.'
000000000000db67         db  0x08 ; '.'
000000000000db68         db  0x45 ; 'E'
000000000000db69         db  0x0b ; '.'
000000000000db6a         db  0x00 ; '.'
000000000000db6b         db  0x00 ; '.'
000000000000db6c         db  0x00 ; '.'
000000000000db6d         db  0x00 ; '.'
000000000000db6e         db  0x00 ; '.'
000000000000db6f         db  0x00 ; '.'
000000000000db70         dd         0x0000001c                                  ; Length of the record
000000000000db74         dd         0x0000131c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000db78         db         0x88, 0xb4, 2 dup (0xff)                    ; begin 0x9000
000000000000db7c         db         0x60, 3 dup (0x00)                          ; length 0x60 (end at 0x9060)
000000000000db80         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000db81         db  0x44 ; 'D'
000000000000db82         db  0x0e ; '.'
000000000000db83         db  0x10 ; '.'
000000000000db84         db  0x75 ; 'u'
000000000000db85         db  0x0a ; '.'
000000000000db86         db  0x0e ; '.'
000000000000db87         db  0x08 ; '.'
000000000000db88         db  0x47 ; 'G'
000000000000db89         db  0x0b ; '.'
000000000000db8a         db  0x5f ; '_'
000000000000db8b         db  0x0e ; '.'
000000000000db8c         db  0x08 ; '.'
000000000000db8d         db  0x00 ; '.'
000000000000db8e         db  0x00 ; '.'
000000000000db8f         db  0x00 ; '.'
000000000000db90         dd         0x00000010                                  ; Length of the record
000000000000db94         dd         0x0000133c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000db98         db         0xc8, 0xb4, 2 dup (0xff)                    ; begin 0x9060
000000000000db9c         db         0x93, 3 dup (0x00)                          ; length 0x93 (end at 0x90f3)
000000000000dba0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dba1         align      4
000000000000dba4         dd         0x00000010                                  ; Length of the record
000000000000dba8         dd         0x00001350                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dbac         db         0x54, 0xb5, 2 dup (0xff)                    ; begin 0x9100
000000000000dbb0         db         0x10, 3 dup (0x00)                          ; length 0x10 (end at 0x9110)
000000000000dbb4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbb5         align      8
000000000000dbb8         dd         0x00000010                                  ; Length of the record
000000000000dbbc         dd         0x00001364                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dbc0         db         0x50, 0xb5, 2 dup (0xff)                    ; begin 0x9110
000000000000dbc4         db         0x07, 3 dup (0x00)                          ; length 0x7 (end at 0x9117)
000000000000dbc8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbc9         align      4
000000000000dbcc         dd         0x00000018                                  ; Length of the record
000000000000dbd0         dd         0x00001378                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dbd4         db         0x4c, 0xb5, 2 dup (0xff)                    ; begin 0x9120
000000000000dbd8         db         0x22, 3 dup (0x00)                          ; length 0x22 (end at 0x9142)
000000000000dbdc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbdd         db  0x41 ; 'A'
000000000000dbde         db  0x0e ; '.'
000000000000dbdf         db  0x10 ; '.'
000000000000dbe0         db  0x83 ; '.'
000000000000dbe1         db  0x02 ; '.'
000000000000dbe2         db  0x5b ; '['
000000000000dbe3         db  0x0a ; '.'
000000000000dbe4         db  0x0e ; '.'
000000000000dbe5         db  0x08 ; '.'
000000000000dbe6         db  0x41 ; 'A'
000000000000dbe7         db  0x0b ; '.'
000000000000dbe8         dd         0x0000005c                                  ; Length of the record
000000000000dbec         dd         0x00001394                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dbf0         db         0x60, 0xb5, 2 dup (0xff)                    ; begin 0x9150
000000000000dbf4         db         0x1e, 0x01, 2 dup (0x00)                    ; length 0x11e (end at 0x926e)
000000000000dbf8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dbf9         db  0x42 ; 'B'
000000000000dbfa         db  0x0e ; '.'
000000000000dbfb         db  0x10 ; '.'
000000000000dbfc         db  0x8e ; '.'
000000000000dbfd         db  0x02 ; '.'
000000000000dbfe         db  0x42 ; 'B'
000000000000dbff         db  0x0e ; '.'
000000000000dc00         db  0x18 ; '.'
000000000000dc01         db  0x8d ; '.'
000000000000dc02         db  0x03 ; '.'
000000000000dc03         db  0x45 ; 'E'
000000000000dc04         db  0x0e ; '.'
000000000000dc05         db  0x20 ; ' '
000000000000dc06         db  0x8c ; '.'
000000000000dc07         db  0x04 ; '.'
000000000000dc08         db  0x41 ; 'A'
000000000000dc09         db  0x0e ; '.'
000000000000dc0a         db  0x28 ; '('
000000000000dc0b         db  0x86 ; '.'
000000000000dc0c         db  0x05 ; '.'
000000000000dc0d         db  0x44 ; 'D'
000000000000dc0e         db  0x0e ; '.'
000000000000dc0f         db  0x30 ; '0'
000000000000dc10         db  0x83 ; '.'
000000000000dc11         db  0x06 ; '.'
000000000000dc12         db  0x02 ; '.'
000000000000dc13         db  0xa1 ; '.'
000000000000dc14         db  0x0a ; '.'
000000000000dc15         db  0x0e ; '.'
000000000000dc16         db  0x28 ; '('
000000000000dc17         db  0x44 ; 'D'
000000000000dc18         db  0x0e ; '.'
000000000000dc19         db  0x20 ; ' '
000000000000dc1a         db  0x42 ; 'B'
000000000000dc1b         db  0x0e ; '.'
000000000000dc1c         db  0x18 ; '.'
000000000000dc1d         db  0x42 ; 'B'
000000000000dc1e         db  0x0e ; '.'
000000000000dc1f         db  0x10 ; '.'
000000000000dc20         db  0x42 ; 'B'
000000000000dc21         db  0x0e ; '.'
000000000000dc22         db  0x08 ; '.'
000000000000dc23         db  0x47 ; 'G'
000000000000dc24         db  0x0b ; '.'
000000000000dc25         db  0x71 ; 'q'
000000000000dc26         db  0x0a ; '.'
000000000000dc27         db  0x0e ; '.'
000000000000dc28         db  0x28 ; '('
000000000000dc29         db  0x41 ; 'A'
000000000000dc2a         db  0x0e ; '.'
000000000000dc2b         db  0x20 ; ' '
000000000000dc2c         db  0x42 ; 'B'
000000000000dc2d         db  0x0e ; '.'
000000000000dc2e         db  0x18 ; '.'
000000000000dc2f         db  0x42 ; 'B'
000000000000dc30         db  0x0e ; '.'
000000000000dc31         db  0x10 ; '.'
000000000000dc32         db  0x42 ; 'B'
000000000000dc33         db  0x0e ; '.'
000000000000dc34         db  0x08 ; '.'
000000000000dc35         db  0x48 ; 'H'
000000000000dc36         db  0x0b ; '.'
000000000000dc37         db  0x53 ; 'S'
000000000000dc38         db  0x0e ; '.'
000000000000dc39         db  0x28 ; '('
000000000000dc3a         db  0x44 ; 'D'
000000000000dc3b         db  0x0e ; '.'
000000000000dc3c         db  0x20 ; ' '
000000000000dc3d         db  0x42 ; 'B'
000000000000dc3e         db  0x0e ; '.'
000000000000dc3f         db  0x18 ; '.'
000000000000dc40         db  0x42 ; 'B'
000000000000dc41         db  0x0e ; '.'
000000000000dc42         db  0x10 ; '.'
000000000000dc43         db  0x42 ; 'B'
000000000000dc44         db  0x0e ; '.'
000000000000dc45         db  0x08 ; '.'
000000000000dc46         db  0x00 ; '.'
000000000000dc47         db  0x00 ; '.'
000000000000dc48         dd         0x00000010                                  ; Length of the record
000000000000dc4c         dd         0x000013f4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dc50         db         0x20, 0xb6, 2 dup (0xff)                    ; begin 0x9270
000000000000dc54         db         0x77, 3 dup (0x00)                          ; length 0x77 (end at 0x92e7)
000000000000dc58         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc59         align      4
000000000000dc5c         dd         0x0000005c                                  ; Length of the record
000000000000dc60         dd         0x00001408                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dc64         db         0x8c, 0xb6, 2 dup (0xff)                    ; begin 0x92f0
000000000000dc68         db         0x40, 0x01, 2 dup (0x00)                    ; length 0x140 (end at 0x9430)
000000000000dc6c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dc6d         db  0x42 ; 'B'
000000000000dc6e         db  0x0e ; '.'
000000000000dc6f         db  0x10 ; '.'
000000000000dc70         db  0x8f ; '.'
000000000000dc71         db  0x02 ; '.'
000000000000dc72         db  0x42 ; 'B'
000000000000dc73         db  0x0e ; '.'
000000000000dc74         db  0x18 ; '.'
000000000000dc75         db  0x8e ; '.'
000000000000dc76         db  0x03 ; '.'
000000000000dc77         db  0x42 ; 'B'
000000000000dc78         db  0x0e ; '.'
000000000000dc79         db  0x20 ; ' '
000000000000dc7a         db  0x8d ; '.'
000000000000dc7b         db  0x04 ; '.'
000000000000dc7c         db  0x42 ; 'B'
000000000000dc7d         db  0x0e ; '.'
000000000000dc7e         db  0x28 ; '('
000000000000dc7f         db  0x8c ; '.'
000000000000dc80         db  0x05 ; '.'
000000000000dc81         db  0x41 ; 'A'
000000000000dc82         db  0x0e ; '.'
000000000000dc83         db  0x30 ; '0'
000000000000dc84         db  0x86 ; '.'
000000000000dc85         db  0x06 ; '.'
000000000000dc86         db  0x41 ; 'A'
000000000000dc87         db  0x0e ; '.'
000000000000dc88         db  0x38 ; '8'
000000000000dc89         db  0x83 ; '.'
000000000000dc8a         db  0x07 ; '.'
000000000000dc8b         db  0x44 ; 'D'
000000000000dc8c         db  0x0e ; '.'
000000000000dc8d         db  0x40 ; '@'
000000000000dc8e         db  0x02 ; '.'
000000000000dc8f         db  0xee ; '.'
000000000000dc90         db  0x0a ; '.'
000000000000dc91         db  0x0e ; '.'
000000000000dc92         db  0x38 ; '8'
000000000000dc93         db  0x46 ; 'F'
000000000000dc94         db  0x0e ; '.'
000000000000dc95         db  0x30 ; '0'
000000000000dc96         db  0x41 ; 'A'
000000000000dc97         db  0x0e ; '.'
000000000000dc98         db  0x28 ; '('
000000000000dc99         db  0x42 ; 'B'
000000000000dc9a         db  0x0e ; '.'
000000000000dc9b         db  0x20 ; ' '
000000000000dc9c         db  0x42 ; 'B'
000000000000dc9d         db  0x0e ; '.'
000000000000dc9e         db  0x18 ; '.'
000000000000dc9f         db  0x42 ; 'B'
000000000000dca0         db  0x0e ; '.'
000000000000dca1         db  0x10 ; '.'
000000000000dca2         db  0x42 ; 'B'
000000000000dca3         db  0x0e ; '.'
000000000000dca4         db  0x08 ; '.'
000000000000dca5         db  0x45 ; 'E'
000000000000dca6         db  0x0b ; '.'
000000000000dca7         db  0x63 ; 'c'
000000000000dca8         db  0x0e ; '.'
000000000000dca9         db  0x38 ; '8'
000000000000dcaa         db  0x43 ; 'C'
000000000000dcab         db  0x0e ; '.'
000000000000dcac         db  0x30 ; '0'
000000000000dcad         db  0x41 ; 'A'
000000000000dcae         db  0x0e ; '.'
000000000000dcaf         db  0x28 ; '('
000000000000dcb0         db  0x42 ; 'B'
000000000000dcb1         db  0x0e ; '.'
000000000000dcb2         db  0x20 ; ' '
000000000000dcb3         db  0x42 ; 'B'
000000000000dcb4         db  0x0e ; '.'
000000000000dcb5         db  0x18 ; '.'
000000000000dcb6         db  0x42 ; 'B'
000000000000dcb7         db  0x0e ; '.'
000000000000dcb8         db  0x10 ; '.'
000000000000dcb9         db  0x42 ; 'B'
000000000000dcba         db  0x0e ; '.'
000000000000dcbb         db  0x08 ; '.'
000000000000dcbc         dd         0x00000010                                  ; Length of the record
000000000000dcc0         dd         0x00001468                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dcc4         db         0x6c, 0xb7, 2 dup (0xff)                    ; begin 0x9430
000000000000dcc8         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x9435)
000000000000dccc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dccd         align      16
000000000000dcd0         dd         0x00000010                                  ; Length of the record
000000000000dcd4         dd         0x0000147c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dcd8         db         0x68, 0xb7, 2 dup (0xff)                    ; begin 0x9440
000000000000dcdc         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x9445)
000000000000dce0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dce1         align      4
000000000000dce4         dd         0x00000010                                  ; Length of the record
000000000000dce8         dd         0x00001490                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dcec         db         0x64, 0xb7, 2 dup (0xff)                    ; begin 0x9450
000000000000dcf0         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0x9455)
000000000000dcf4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dcf5         align      8
000000000000dcf8         dd         0x00000010                                  ; Length of the record
000000000000dcfc         dd         0x000014a4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dd00         db         0x60, 0xb7, 2 dup (0xff)                    ; begin 0x9460
000000000000dd04         db         0x49, 3 dup (0x00)                          ; length 0x49 (end at 0x94a9)
000000000000dd08         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd09         align      4
000000000000dd0c         dd         0x00000010                                  ; Length of the record
000000000000dd10         dd         0x000014b8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dd14         db         0x9c, 0xb7, 2 dup (0xff)                    ; begin 0x94b0
000000000000dd18         db         0x58, 3 dup (0x00)                          ; length 0x58 (end at 0x9508)
000000000000dd1c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd1d         align      32
000000000000dd20         dd         0x00000038                                  ; Length of the record
000000000000dd24         dd         0x000014cc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dd28         db         0xe8, 0xb7, 2 dup (0xff)                    ; begin 0x9510
000000000000dd2c         db         0x47, 0x01, 2 dup (0x00)                    ; length 0x147 (end at 0x9657)
000000000000dd30         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd31         db  0x42 ; 'B'
000000000000dd32         db  0x0e ; '.'
000000000000dd33         db  0x10 ; '.'
000000000000dd34         db  0x8d ; '.'
000000000000dd35         db  0x02 ; '.'
000000000000dd36         db  0x42 ; 'B'
000000000000dd37         db  0x0e ; '.'
000000000000dd38         db  0x18 ; '.'
000000000000dd39         db  0x8c ; '.'
000000000000dd3a         db  0x03 ; '.'
000000000000dd3b         db  0x44 ; 'D'
000000000000dd3c         db  0x0e ; '.'
000000000000dd3d         db  0x20 ; ' '
000000000000dd3e         db  0x86 ; '.'
000000000000dd3f         db  0x04 ; '.'
000000000000dd40         db  0x41 ; 'A'
000000000000dd41         db  0x0e ; '.'
000000000000dd42         db  0x28 ; '('
000000000000dd43         db  0x83 ; '.'
000000000000dd44         db  0x05 ; '.'
000000000000dd45         db  0x46 ; 'F'
000000000000dd46         db  0x0e ; '.'
000000000000dd47         db  0x30 ; '0'
000000000000dd48         db  0x02 ; '.'
000000000000dd49         db  0xcd ; '.'
000000000000dd4a         db  0x0a ; '.'
000000000000dd4b         db  0x0e ; '.'
000000000000dd4c         db  0x28 ; '('
000000000000dd4d         db  0x47 ; 'G'
000000000000dd4e         db  0x0e ; '.'
000000000000dd4f         db  0x20 ; ' '
000000000000dd50         db  0x41 ; 'A'
000000000000dd51         db  0x0e ; '.'
000000000000dd52         db  0x18 ; '.'
000000000000dd53         db  0x42 ; 'B'
000000000000dd54         db  0x0e ; '.'
000000000000dd55         db  0x10 ; '.'
000000000000dd56         db  0x42 ; 'B'
000000000000dd57         db  0x0e ; '.'
000000000000dd58         db  0x08 ; '.'
000000000000dd59         db  0x58 ; 'X'
000000000000dd5a         db  0x0b ; '.'
000000000000dd5b         db  0x00 ; '.'
000000000000dd5c         dd         0x00000034                                  ; Length of the record
000000000000dd60         dd         0x00001508                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dd64         db         0xfc, 0xb8, 2 dup (0xff)                    ; begin 0x9660
000000000000dd68         db         0x5b, 3 dup (0x00)                          ; length 0x5b (end at 0x96bb)
000000000000dd6c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dd6d         db  0x42 ; 'B'
000000000000dd6e         db  0x0e ; '.'
000000000000dd6f         db  0x10 ; '.'
000000000000dd70         db  0x8c ; '.'
000000000000dd71         db  0x02 ; '.'
000000000000dd72         db  0x41 ; 'A'
000000000000dd73         db  0x0e ; '.'
000000000000dd74         db  0x18 ; '.'
000000000000dd75         db  0x86 ; '.'
000000000000dd76         db  0x03 ; '.'
000000000000dd77         db  0x44 ; 'D'
000000000000dd78         db  0x0e ; '.'
000000000000dd79         db  0x20 ; ' '
000000000000dd7a         db  0x83 ; '.'
000000000000dd7b         db  0x04 ; '.'
000000000000dd7c         db  0x79 ; 'y'
000000000000dd7d         db  0x0a ; '.'
000000000000dd7e         db  0x0e ; '.'
000000000000dd7f         db  0x18 ; '.'
000000000000dd80         db  0x44 ; 'D'
000000000000dd81         db  0x0e ; '.'
000000000000dd82         db  0x10 ; '.'
000000000000dd83         db  0x42 ; 'B'
000000000000dd84         db  0x0e ; '.'
000000000000dd85         db  0x08 ; '.'
000000000000dd86         db  0x4a ; 'J'
000000000000dd87         db  0x0b ; '.'
000000000000dd88         db  0x44 ; 'D'
000000000000dd89         db  0x0e ; '.'
000000000000dd8a         db  0x18 ; '.'
000000000000dd8b         db  0x41 ; 'A'
000000000000dd8c         db  0x0e ; '.'
000000000000dd8d         db  0x10 ; '.'
000000000000dd8e         db  0x45 ; 'E'
000000000000dd8f         db  0x0e ; '.'
000000000000dd90         db  0x08 ; '.'
000000000000dd91         db  0x00 ; '.'
000000000000dd92         db  0x00 ; '.'
000000000000dd93         db  0x00 ; '.'
000000000000dd94         dd         0x00000010                                  ; Length of the record
000000000000dd98         dd         0x00001540                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dd9c         db         0x24, 0xb9, 2 dup (0xff)                    ; begin 0x96c0
000000000000dda0         db         0x41, 3 dup (0x00)                          ; length 0x41 (end at 0x9701)
000000000000dda4         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dda5         db  0x7c ; '|'
000000000000dda6         db  0x0e ; '.'
000000000000dda7         db  0x10 ; '.'
000000000000dda8         dd         0x00000030                                  ; Length of the record
000000000000ddac         dd         0x00001554                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ddb0         db         0x60, 0xb9, 2 dup (0xff)                    ; begin 0x9710
000000000000ddb4         db         0x72, 3 dup (0x00)                          ; length 0x72 (end at 0x9782)
000000000000ddb8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000ddb9         db  0x41 ; 'A'
000000000000ddba         db  0x0e ; '.'
000000000000ddbb         db  0x10 ; '.'
000000000000ddbc         db  0x86 ; '.'
000000000000ddbd         db  0x02 ; '.'
000000000000ddbe         db  0x41 ; 'A'
000000000000ddbf         db  0x0e ; '.'
000000000000ddc0         db  0x18 ; '.'
000000000000ddc1         db  0x83 ; '.'
000000000000ddc2         db  0x03 ; '.'
000000000000ddc3         db  0x4a ; 'J'
000000000000ddc4         db  0x0e ; '.'
000000000000ddc5         db  0x20 ; ' '
000000000000ddc6         db  0x02 ; '.'
000000000000ddc7         db  0x53 ; 'S'
000000000000ddc8         db  0x0a ; '.'
000000000000ddc9         db  0x0e ; '.'
000000000000ddca         db  0x18 ; '.'
000000000000ddcb         db  0x41 ; 'A'
000000000000ddcc         db  0x0e ; '.'
000000000000ddcd         db  0x10 ; '.'
000000000000ddce         db  0x41 ; 'A'
000000000000ddcf         db  0x0e ; '.'
000000000000ddd0         db  0x08 ; '.'
000000000000ddd1         db  0x47 ; 'G'
000000000000ddd2         db  0x0b ; '.'
000000000000ddd3         db  0x47 ; 'G'
000000000000ddd4         db  0x0e ; '.'
000000000000ddd5         db  0x18 ; '.'
000000000000ddd6         db  0x41 ; 'A'
000000000000ddd7         db  0x0e ; '.'
000000000000ddd8         db  0x10 ; '.'
000000000000ddd9         db  0x41 ; 'A'
000000000000ddda         db  0x0e ; '.'
000000000000dddb         db  0x08 ; '.'
000000000000dddc         dd         0x00000010                                  ; Length of the record
000000000000dde0         dd         0x00001588                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dde4         db         0xac, 0xb9, 2 dup (0xff)                    ; begin 0x9790
000000000000dde8         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0x97f5)
000000000000ddec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dded         align      16
000000000000ddf0         dd         0x00000048                                  ; Length of the record
000000000000ddf4         dd         0x0000159c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000ddf8         db         0x08, 0xba, 2 dup (0xff)                    ; begin 0x9800
000000000000ddfc         db         0x6a, 3 dup (0x00)                          ; length 0x6a (end at 0x986a)
000000000000de00         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de01         db  0x42 ; 'B'
000000000000de02         db  0x0e ; '.'
000000000000de03         db  0x10 ; '.'
000000000000de04         db  0x8f ; '.'
000000000000de05         db  0x02 ; '.'
000000000000de06         db  0x42 ; 'B'
000000000000de07         db  0x0e ; '.'
000000000000de08         db  0x18 ; '.'
000000000000de09         db  0x8e ; '.'
000000000000de0a         db  0x03 ; '.'
000000000000de0b         db  0x42 ; 'B'
000000000000de0c         db  0x0e ; '.'
000000000000de0d         db  0x20 ; ' '
000000000000de0e         db  0x8d ; '.'
000000000000de0f         db  0x04 ; '.'
000000000000de10         db  0x42 ; 'B'
000000000000de11         db  0x0e ; '.'
000000000000de12         db  0x28 ; '('
000000000000de13         db  0x8c ; '.'
000000000000de14         db  0x05 ; '.'
000000000000de15         db  0x41 ; 'A'
000000000000de16         db  0x0e ; '.'
000000000000de17         db  0x30 ; '0'
000000000000de18         db  0x86 ; '.'
000000000000de19         db  0x06 ; '.'
000000000000de1a         db  0x41 ; 'A'
000000000000de1b         db  0x0e ; '.'
000000000000de1c         db  0x38 ; '8'
000000000000de1d         db  0x83 ; '.'
000000000000de1e         db  0x07 ; '.'
000000000000de1f         db  0x44 ; 'D'
000000000000de20         db  0x0e ; '.'
000000000000de21         db  0x40 ; '@'
000000000000de22         db  0x02 ; '.'
000000000000de23         db  0x4a ; 'J'
000000000000de24         db  0x0a ; '.'
000000000000de25         db  0x0e ; '.'
000000000000de26         db  0x38 ; '8'
000000000000de27         db  0x44 ; 'D'
000000000000de28         db  0x0e ; '.'
000000000000de29         db  0x30 ; '0'
000000000000de2a         db  0x41 ; 'A'
000000000000de2b         db  0x0e ; '.'
000000000000de2c         db  0x28 ; '('
000000000000de2d         db  0x42 ; 'B'
000000000000de2e         db  0x0e ; '.'
000000000000de2f         db  0x20 ; ' '
000000000000de30         db  0x42 ; 'B'
000000000000de31         db  0x0e ; '.'
000000000000de32         db  0x18 ; '.'
000000000000de33         db  0x42 ; 'B'
000000000000de34         db  0x0e ; '.'
000000000000de35         db  0x10 ; '.'
000000000000de36         db  0x42 ; 'B'
000000000000de37         db  0x0e ; '.'
000000000000de38         db  0x08 ; '.'
000000000000de39         db  0x41 ; 'A'
000000000000de3a         db  0x0b ; '.'
000000000000de3b         db  0x00 ; '.'
000000000000de3c         dd         0x00000010                                  ; Length of the record
000000000000de40         dd         0x000015e8                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000de44         db         0x2c, 0xba, 2 dup (0xff)                    ; begin 0x9870
000000000000de48         db         0x31, 3 dup (0x00)                          ; length 0x31 (end at 0x98a1)
000000000000de4c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de4d         align      16
000000000000de50         dd         0x00000010                                  ; Length of the record
000000000000de54         dd         0x000015fc                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000de58         db         0x58, 0xba, 2 dup (0xff)                    ; begin 0x98b0
000000000000de5c         db         0x20, 3 dup (0x00)                          ; length 0x20 (end at 0x98d0)
000000000000de60         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de61         align      4
000000000000de64         dd         0x00000048                                  ; Length of the record
000000000000de68         dd         0x00001610                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000de6c         db         0x64, 0xba, 2 dup (0xff)                    ; begin 0x98d0
000000000000de70         db         0xb4, 0x01, 2 dup (0x00)                    ; length 0x1b4 (end at 0x9a84)
000000000000de74         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000de75         db  0x42 ; 'B'
000000000000de76         db  0x0e ; '.'
000000000000de77         db  0x10 ; '.'
000000000000de78         db  0x8f ; '.'
000000000000de79         db  0x02 ; '.'
000000000000de7a         db  0x42 ; 'B'
000000000000de7b         db  0x0e ; '.'
000000000000de7c         db  0x18 ; '.'
000000000000de7d         db  0x8e ; '.'
000000000000de7e         db  0x03 ; '.'
000000000000de7f         db  0x49 ; 'I'
000000000000de80         db  0x0e ; '.'
000000000000de81         db  0x20 ; ' '
000000000000de82         db  0x8d ; '.'
000000000000de83         db  0x04 ; '.'
000000000000de84         db  0x42 ; 'B'
000000000000de85         db  0x0e ; '.'
000000000000de86         db  0x28 ; '('
000000000000de87         db  0x8c ; '.'
000000000000de88         db  0x05 ; '.'
000000000000de89         db  0x44 ; 'D'
000000000000de8a         db  0x0e ; '.'
000000000000de8b         db  0x30 ; '0'
000000000000de8c         db  0x86 ; '.'
000000000000de8d         db  0x06 ; '.'
000000000000de8e         db  0x41 ; 'A'
000000000000de8f         db  0x0e ; '.'
000000000000de90         db  0x38 ; '8'
000000000000de91         db  0x83 ; '.'
000000000000de92         db  0x07 ; '.'
000000000000de93         db  0x52 ; 'R'
000000000000de94         db  0x0e ; '.'
000000000000de95         db  0x40 ; '@'
000000000000de96         db  0x02 ; '.'
000000000000de97         db  0xd8 ; '.'
000000000000de98         db  0x0a ; '.'
000000000000de99         db  0x0e ; '.'
000000000000de9a         db  0x38 ; '8'
000000000000de9b         db  0x44 ; 'D'
000000000000de9c         db  0x0e ; '.'
000000000000de9d         db  0x30 ; '0'
000000000000de9e         db  0x41 ; 'A'
000000000000de9f         db  0x0e ; '.'
000000000000dea0         db  0x28 ; '('
000000000000dea1         db  0x42 ; 'B'
000000000000dea2         db  0x0e ; '.'
000000000000dea3         db  0x20 ; ' '
000000000000dea4         db  0x42 ; 'B'
000000000000dea5         db  0x0e ; '.'
000000000000dea6         db  0x18 ; '.'
000000000000dea7         db  0x42 ; 'B'
000000000000dea8         db  0x0e ; '.'
000000000000dea9         db  0x10 ; '.'
000000000000deaa         db  0x42 ; 'B'
000000000000deab         db  0x0e ; '.'
000000000000deac         db  0x08 ; '.'
000000000000dead         db  0x45 ; 'E'
000000000000deae         db  0x0b ; '.'
000000000000deaf         db  0x00 ; '.'
000000000000deb0         dd         0x00000028                                  ; Length of the record
000000000000deb4         dd         0x0000165c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000deb8         db         0xd8, 0xbb, 2 dup (0xff)                    ; begin 0x9a90
000000000000debc         db         0x90, 3 dup (0x00)                          ; length 0x90 (end at 0x9b20)
000000000000dec0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dec1         db  0x42 ; 'B'
000000000000dec2         db  0x0e ; '.'
000000000000dec3         db  0x10 ; '.'
000000000000dec4         db  0x8c ; '.'
000000000000dec5         db  0x02 ; '.'
000000000000dec6         db  0x41 ; 'A'
000000000000dec7         db  0x0e ; '.'
000000000000dec8         db  0x18 ; '.'
000000000000dec9         db  0x86 ; '.'
000000000000deca         db  0x03 ; '.'
000000000000decb         db  0x44 ; 'D'
000000000000decc         db  0x0e ; '.'
000000000000decd         db  0x20 ; ' '
000000000000dece         db  0x83 ; '.'
000000000000decf         db  0x04 ; '.'
000000000000ded0         db  0x02 ; '.'
000000000000ded1         db  0x85 ; '.'
000000000000ded2         db  0x0e ; '.'
000000000000ded3         db  0x18 ; '.'
000000000000ded4         db  0x41 ; 'A'
000000000000ded5         db  0x0e ; '.'
000000000000ded6         db  0x10 ; '.'
000000000000ded7         db  0x42 ; 'B'
000000000000ded8         db  0x0e ; '.'
000000000000ded9         db  0x08 ; '.'
000000000000deda         db  0x00 ; '.'
000000000000dedb         db  0x00 ; '.'
000000000000dedc         dd         0x00000028                                  ; Length of the record
000000000000dee0         dd         0x00001688                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dee4         db         0x3c, 0xbc, 2 dup (0xff)                    ; begin 0x9b20
000000000000dee8         db         0xd6, 3 dup (0x00)                          ; length 0xd6 (end at 0x9bf6)
000000000000deec         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000deed         db  0x42 ; 'B'
000000000000deee         db  0x0e ; '.'
000000000000deef         db  0x10 ; '.'
000000000000def0         db  0x8c ; '.'
000000000000def1         db  0x02 ; '.'
000000000000def2         db  0x41 ; 'A'
000000000000def3         db  0x0e ; '.'
000000000000def4         db  0x18 ; '.'
000000000000def5         db  0x86 ; '.'
000000000000def6         db  0x03 ; '.'
000000000000def7         db  0x44 ; 'D'
000000000000def8         db  0x0e ; '.'
000000000000def9         db  0x20 ; ' '
000000000000defa         db  0x83 ; '.'
000000000000defb         db  0x04 ; '.'
000000000000defc         db  0x02 ; '.'
000000000000defd         db  0xc4 ; '.'
000000000000defe         db  0x0e ; '.'
000000000000deff         db  0x18 ; '.'
000000000000df00         db  0x44 ; 'D'
000000000000df01         db  0x0e ; '.'
000000000000df02         db  0x10 ; '.'
000000000000df03         db  0x42 ; 'B'
000000000000df04         db  0x0e ; '.'
000000000000df05         db  0x08 ; '.'
000000000000df06         db  0x00 ; '.'
000000000000df07         db  0x00 ; '.'
000000000000df08         dd         0x00000034                                  ; Length of the record
000000000000df0c         dd         0x000016b4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000df10         db         0xf0, 0xbc, 2 dup (0xff)                    ; begin 0x9c00
000000000000df14         db         0x3e, 0x02, 2 dup (0x00)                    ; length 0x23e (end at 0x9e3e)
000000000000df18         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df19         db  0x42 ; 'B'
000000000000df1a         db  0x0e ; '.'
000000000000df1b         db  0x10 ; '.'
000000000000df1c         db  0x8c ; '.'
000000000000df1d         db  0x02 ; '.'
000000000000df1e         db  0x41 ; 'A'
000000000000df1f         db  0x0e ; '.'
000000000000df20         db  0x18 ; '.'
000000000000df21         db  0x86 ; '.'
000000000000df22         db  0x03 ; '.'
000000000000df23         db  0x44 ; 'D'
000000000000df24         db  0x0e ; '.'
000000000000df25         db  0x20 ; ' '
000000000000df26         db  0x83 ; '.'
000000000000df27         db  0x04 ; '.'
000000000000df28         db  0x44 ; 'D'
000000000000df29         db  0x0e ; '.'
000000000000df2a         db  0x80 ; '.'
000000000000df2b         db  0x01 ; '.'
000000000000df2c         db  0x03 ; '.'
000000000000df2d         db  0x91 ; '.'
000000000000df2e         db  0x01 ; '.'
000000000000df2f         db  0x0a ; '.'
000000000000df30         db  0x0e ; '.'
000000000000df31         db  0x20 ; ' '
000000000000df32         db  0x41 ; 'A'
000000000000df33         db  0x0e ; '.'
000000000000df34         db  0x18 ; '.'
000000000000df35         db  0x41 ; 'A'
000000000000df36         db  0x0e ; '.'
000000000000df37         db  0x10 ; '.'
000000000000df38         db  0x42 ; 'B'
000000000000df39         db  0x0e ; '.'
000000000000df3a         db  0x08 ; '.'
000000000000df3b         db  0x48 ; 'H'
000000000000df3c         db  0x0b ; '.'
000000000000df3d         db  0x00 ; '.'
000000000000df3e         db  0x00 ; '.'
000000000000df3f         db  0x00 ; '.'
000000000000df40         dd         0x00000038                                  ; Length of the record
000000000000df44         dd         0x000016ec                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000df48         db         0xf8, 0xbe, 2 dup (0xff)                    ; begin 0x9e40
000000000000df4c         db         0x84, 0x02, 2 dup (0x00)                    ; length 0x284 (end at 0xa0c4)
000000000000df50         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df51         db  0x42 ; 'B'
000000000000df52         db  0x0e ; '.'
000000000000df53         db  0x10 ; '.'
000000000000df54         db  0x8d ; '.'
000000000000df55         db  0x02 ; '.'
000000000000df56         db  0x42 ; 'B'
000000000000df57         db  0x0e ; '.'
000000000000df58         db  0x18 ; '.'
000000000000df59         db  0x8c ; '.'
000000000000df5a         db  0x03 ; '.'
000000000000df5b         db  0x41 ; 'A'
000000000000df5c         db  0x0e ; '.'
000000000000df5d         db  0x20 ; ' '
000000000000df5e         db  0x86 ; '.'
000000000000df5f         db  0x04 ; '.'
000000000000df60         db  0x41 ; 'A'
000000000000df61         db  0x0e ; '.'
000000000000df62         db  0x28 ; '('
000000000000df63         db  0x83 ; '.'
000000000000df64         db  0x05 ; '.'
000000000000df65         db  0x44 ; 'D'
000000000000df66         db  0x0e ; '.'
000000000000df67         db  0x40 ; '@'
000000000000df68         db  0x02 ; '.'
000000000000df69         db  0x5a ; 'Z'
000000000000df6a         db  0x0a ; '.'
000000000000df6b         db  0x0e ; '.'
000000000000df6c         db  0x28 ; '('
000000000000df6d         db  0x41 ; 'A'
000000000000df6e         db  0x0e ; '.'
000000000000df6f         db  0x20 ; ' '
000000000000df70         db  0x41 ; 'A'
000000000000df71         db  0x0e ; '.'
000000000000df72         db  0x18 ; '.'
000000000000df73         db  0x42 ; 'B'
000000000000df74         db  0x0e ; '.'
000000000000df75         db  0x10 ; '.'
000000000000df76         db  0x42 ; 'B'
000000000000df77         db  0x0e ; '.'
000000000000df78         db  0x08 ; '.'
000000000000df79         db  0x46 ; 'F'
000000000000df7a         db  0x0b ; '.'
000000000000df7b         db  0x00 ; '.'
000000000000df7c         dd         0x00000020                                  ; Length of the record
000000000000df80         dd         0x00001728                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000df84         db         0x4c, 0xc1, 2 dup (0xff)                    ; begin 0xa0d0
000000000000df88         db         0x59, 3 dup (0x00)                          ; length 0x59 (end at 0xa129)
000000000000df8c         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000df8d         db  0x41 ; 'A'
000000000000df8e         db  0x0e ; '.'
000000000000df8f         db  0x10 ; '.'
000000000000df90         db  0x83 ; '.'
000000000000df91         db  0x02 ; '.'
000000000000df92         db  0x47 ; 'G'
000000000000df93         db  0x0e ; '.'
000000000000df94         db  0x20 ; ' '
000000000000df95         db  0x7c ; '|'
000000000000df96         db  0x0a ; '.'
000000000000df97         db  0x0e ; '.'
000000000000df98         db  0x10 ; '.'
000000000000df99         db  0x41 ; 'A'
000000000000df9a         db  0x0e ; '.'
000000000000df9b         db  0x08 ; '.'
000000000000df9c         db  0x4b ; 'K'
000000000000df9d         db  0x0b ; '.'
000000000000df9e         db  0x00 ; '.'
000000000000df9f         db  0x00 ; '.'
000000000000dfa0         dd         0x00000034                                  ; Length of the record
000000000000dfa4         dd         0x0000174c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dfa8         db         0x88, 0xc1, 2 dup (0xff)                    ; begin 0xa130
000000000000dfac         db         0x03, 0x02, 2 dup (0x00)                    ; length 0x203 (end at 0xa333)
000000000000dfb0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfb1         db  0x42 ; 'B'
000000000000dfb2         db  0x0e ; '.'
000000000000dfb3         db  0x10 ; '.'
000000000000dfb4         db  0x8c ; '.'
000000000000dfb5         db  0x02 ; '.'
000000000000dfb6         db  0x41 ; 'A'
000000000000dfb7         db  0x0e ; '.'
000000000000dfb8         db  0x18 ; '.'
000000000000dfb9         db  0x86 ; '.'
000000000000dfba         db  0x03 ; '.'
000000000000dfbb         db  0x46 ; 'F'
000000000000dfbc         db  0x0e ; '.'
000000000000dfbd         db  0x20 ; ' '
000000000000dfbe         db  0x83 ; '.'
000000000000dfbf         db  0x04 ; '.'
000000000000dfc0         db  0x47 ; 'G'
000000000000dfc1         db  0x0e ; '.'
000000000000dfc2         db  0x30 ; '0'
000000000000dfc3         db  0x02 ; '.'
000000000000dfc4         db  0x4a ; 'J'
000000000000dfc5         db  0x0a ; '.'
000000000000dfc6         db  0x0e ; '.'
000000000000dfc7         db  0x20 ; ' '
000000000000dfc8         db  0x41 ; 'A'
000000000000dfc9         db  0x0e ; '.'
000000000000dfca         db  0x18 ; '.'
000000000000dfcb         db  0x41 ; 'A'
000000000000dfcc         db  0x0e ; '.'
000000000000dfcd         db  0x10 ; '.'
000000000000dfce         db  0x42 ; 'B'
000000000000dfcf         db  0x0e ; '.'
000000000000dfd0         db  0x08 ; '.'
000000000000dfd1         db  0x42 ; 'B'
000000000000dfd2         db  0x0b ; '.'
000000000000dfd3         db  0x00 ; '.'
000000000000dfd4         db  0x00 ; '.'
000000000000dfd5         db  0x00 ; '.'
000000000000dfd6         db  0x00 ; '.'
000000000000dfd7         db  0x00 ; '.'
000000000000dfd8         dd         0x00000010                                  ; Length of the record
000000000000dfdc         dd         0x00001784                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dfe0         db         0x60, 0xc3, 2 dup (0xff)                    ; begin 0xa340
000000000000dfe4         db         0x1b, 3 dup (0x00)                          ; length 0x1b (end at 0xa35b)
000000000000dfe8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dfe9         align      4
000000000000dfec         dd         0x00000010                                  ; Length of the record
000000000000dff0         dd         0x00001798                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000dff4         db         0x6c, 0xc3, 2 dup (0xff)                    ; begin 0xa360
000000000000dff8         db         0x05, 3 dup (0x00)                          ; length 0x5 (end at 0xa365)
000000000000dffc         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000dffd         align      8192
000000000000e000         dd         0x00000010                                  ; Length of the record
000000000000e004         dd         0x000017ac                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e008         db         0x68, 0xc3, 2 dup (0xff)                    ; begin 0xa370
000000000000e00c         db         0x35, 3 dup (0x00)                          ; length 0x35 (end at 0xa3a5)
000000000000e010         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e011         align      4
000000000000e014         dd         0x00000010                                  ; Length of the record
000000000000e018         dd         0x000017c0                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e01c         db         0x94, 0xc3, 2 dup (0xff)                    ; begin 0xa3b0
000000000000e020         db         0x3e, 3 dup (0x00)                          ; length 0x3e (end at 0xa3ee)
000000000000e024         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e025         db  0x79 ; 'y'
000000000000e026         db  0x0e ; '.'
000000000000e027         db  0x10 ; '.'
000000000000e028         dd         0x0000001c                                  ; Length of the record
000000000000e02c         dd         0x000017d4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e030         db         0xc0, 0xc3, 2 dup (0xff)                    ; begin 0xa3f0
000000000000e034         db         0x3c, 3 dup (0x00)                          ; length 0x3c (end at 0xa42c)
000000000000e038         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e039         db  0x44 ; 'D'
000000000000e03a         db  0x0e ; '.'
000000000000e03b         db  0x10 ; '.'
000000000000e03c         db  0x61 ; 'a'
000000000000e03d         db  0x0a ; '.'
000000000000e03e         db  0x0e ; '.'
000000000000e03f         db  0x08 ; '.'
000000000000e040         db  0x4b ; 'K'
000000000000e041         db  0x0b ; '.'
000000000000e042         db  0x4b ; 'K'
000000000000e043         db  0x0e ; '.'
000000000000e044         db  0x08 ; '.'
000000000000e045         db  0x00 ; '.'
000000000000e046         db  0x00 ; '.'
000000000000e047         db  0x00 ; '.'
000000000000e048         dd         0x0000001c                                  ; Length of the record
000000000000e04c         dd         0x000017f4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e050         db         0xe0, 0xc3, 2 dup (0xff)                    ; begin 0xa430
000000000000e054         db         0x6e, 3 dup (0x00)                          ; length 0x6e (end at 0xa49e)
000000000000e058         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e059         db  0x44 ; 'D'
000000000000e05a         db  0x0e ; '.'
000000000000e05b         db  0x60 ; '`'
000000000000e05c         db  0x7e ; '~'
000000000000e05d         db  0x0a ; '.'
000000000000e05e         db  0x0e ; '.'
000000000000e05f         db  0x08 ; '.'
000000000000e060         db  0x46 ; 'F'
000000000000e061         db  0x0b ; '.'
000000000000e062         db  0x00 ; '.'
000000000000e063         db  0x00 ; '.'
000000000000e064         db  0x00 ; '.'
000000000000e065         db  0x00 ; '.'
000000000000e066         db  0x00 ; '.'
000000000000e067         db  0x00 ; '.'
000000000000e068         dd         0x0000005c                                  ; Length of the record
000000000000e06c         dd         0x00001814                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e070         db         0x30, 0xc4, 2 dup (0xff)                    ; begin 0xa4a0
000000000000e074         db         0x80, 3 dup (0x00)                          ; length 0x80 (end at 0xa520)
000000000000e078         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e079         db  0x42 ; 'B'
000000000000e07a         db  0x0e ; '.'
000000000000e07b         db  0x10 ; '.'
000000000000e07c         db  0x8d ; '.'
000000000000e07d         db  0x02 ; '.'
000000000000e07e         db  0x42 ; 'B'
000000000000e07f         db  0x0e ; '.'
000000000000e080         db  0x18 ; '.'
000000000000e081         db  0x8c ; '.'
000000000000e082         db  0x03 ; '.'
000000000000e083         db  0x47 ; 'G'
000000000000e084         db  0x0e ; '.'
000000000000e085         db  0x20 ; ' '
000000000000e086         db  0x86 ; '.'
000000000000e087         db  0x04 ; '.'
000000000000e088         db  0x41 ; 'A'
000000000000e089         db  0x0e ; '.'
000000000000e08a         db  0x28 ; '('
000000000000e08b         db  0x83 ; '.'
000000000000e08c         db  0x05 ; '.'
000000000000e08d         db  0x49 ; 'I'
000000000000e08e         db  0x0e ; '.'
000000000000e08f         db  0x30 ; '0'
000000000000e090         db  0x62 ; 'b'
000000000000e091         db  0x0a ; '.'
000000000000e092         db  0x0e ; '.'
000000000000e093         db  0x28 ; '('
000000000000e094         db  0x44 ; 'D'
000000000000e095         db  0x0e ; '.'
000000000000e096         db  0x20 ; ' '
000000000000e097         db  0x41 ; 'A'
000000000000e098         db  0x0e ; '.'
000000000000e099         db  0x18 ; '.'
000000000000e09a         db  0x42 ; 'B'
000000000000e09b         db  0x0e ; '.'
000000000000e09c         db  0x10 ; '.'
000000000000e09d         db  0x42 ; 'B'
000000000000e09e         db  0x0e ; '.'
000000000000e09f         db  0x08 ; '.'
000000000000e0a0         db  0x48 ; 'H'
000000000000e0a1         db  0x0b ; '.'
000000000000e0a2         db  0x5d ; ']'
000000000000e0a3         db  0x0a ; '.'
000000000000e0a4         db  0x0e ; '.'
000000000000e0a5         db  0x28 ; '('
000000000000e0a6         db  0x41 ; 'A'
000000000000e0a7         db  0x0e ; '.'
000000000000e0a8         db  0x20 ; ' '
000000000000e0a9         db  0x41 ; 'A'
000000000000e0aa         db  0x0e ; '.'
000000000000e0ab         db  0x18 ; '.'
000000000000e0ac         db  0x42 ; 'B'
000000000000e0ad         db  0x0e ; '.'
000000000000e0ae         db  0x10 ; '.'
000000000000e0af         db  0x42 ; 'B'
000000000000e0b0         db  0x0e ; '.'
000000000000e0b1         db  0x08 ; '.'
000000000000e0b2         db  0x45 ; 'E'
000000000000e0b3         db  0x0b ; '.'
000000000000e0b4         db  0x44 ; 'D'
000000000000e0b5         db  0x0e ; '.'
000000000000e0b6         db  0x28 ; '('
000000000000e0b7         db  0x43 ; 'C'
000000000000e0b8         db  0x0e ; '.'
000000000000e0b9         db  0x20 ; ' '
000000000000e0ba         db  0x44 ; 'D'
000000000000e0bb         db  0x0e ; '.'
000000000000e0bc         db  0x18 ; '.'
000000000000e0bd         db  0x42 ; 'B'
000000000000e0be         db  0x0e ; '.'
000000000000e0bf         db  0x10 ; '.'
000000000000e0c0         db  0x42 ; 'B'
000000000000e0c1         db  0x0e ; '.'
000000000000e0c2         db  0x08 ; '.'
000000000000e0c3         db  0x00 ; '.'
000000000000e0c4         db  0x00 ; '.'
000000000000e0c5         db  0x00 ; '.'
000000000000e0c6         db  0x00 ; '.'
000000000000e0c7         db  0x00 ; '.'
000000000000e0c8         dd         0x00000034                                  ; Length of the record
000000000000e0cc         dd         0x00001874                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e0d0         db         0x50, 0xc4, 2 dup (0xff)                    ; begin 0xa520
000000000000e0d4         db         0x3f, 3 dup (0x00)                          ; length 0x3f (end at 0xa55f)
000000000000e0d8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e0d9         db  0x42 ; 'B'
000000000000e0da         db  0x0e ; '.'
000000000000e0db         db  0x10 ; '.'
000000000000e0dc         db  0x8d ; '.'
000000000000e0dd         db  0x02 ; '.'
000000000000e0de         db  0x42 ; 'B'
000000000000e0df         db  0x0e ; '.'
000000000000e0e0         db  0x18 ; '.'
000000000000e0e1         db  0x8c ; '.'
000000000000e0e2         db  0x03 ; '.'
000000000000e0e3         db  0x41 ; 'A'
000000000000e0e4         db  0x0e ; '.'
000000000000e0e5         db  0x20 ; ' '
000000000000e0e6         db  0x86 ; '.'
000000000000e0e7         db  0x04 ; '.'
000000000000e0e8         db  0x41 ; 'A'
000000000000e0e9         db  0x0e ; '.'
000000000000e0ea         db  0x28 ; '('
000000000000e0eb         db  0x83 ; '.'
000000000000e0ec         db  0x05 ; '.'
000000000000e0ed         db  0x46 ; 'F'
000000000000e0ee         db  0x0e ; '.'
000000000000e0ef         db  0x30 ; '0'
000000000000e0f0         db  0x6a ; 'j'
000000000000e0f1         db  0x0e ; '.'
000000000000e0f2         db  0x28 ; '('
000000000000e0f3         db  0x43 ; 'C'
000000000000e0f4         db  0x0e ; '.'
000000000000e0f5         db  0x20 ; ' '
000000000000e0f6         db  0x41 ; 'A'
000000000000e0f7         db  0x0e ; '.'
000000000000e0f8         db  0x18 ; '.'
000000000000e0f9         db  0x42 ; 'B'
000000000000e0fa         db  0x0e ; '.'
000000000000e0fb         db  0x10 ; '.'
000000000000e0fc         db  0x42 ; 'B'
000000000000e0fd         db  0x0e ; '.'
000000000000e0fe         db  0x08 ; '.'
000000000000e0ff         db  0x00 ; '.'
000000000000e100         dd         0x00000034                                  ; Length of the record
000000000000e104         dd         0x000018ac                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e108         db         0x58, 0xc4, 2 dup (0xff)                    ; begin 0xa560
000000000000e10c         db         0x7b, 3 dup (0x00)                          ; length 0x7b (end at 0xa5db)
000000000000e110         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e111         db  0x42 ; 'B'
000000000000e112         db  0x0e ; '.'
000000000000e113         db  0x10 ; '.'
000000000000e114         db  0x8c ; '.'
000000000000e115         db  0x02 ; '.'
000000000000e116         db  0x41 ; 'A'
000000000000e117         db  0x0e ; '.'
000000000000e118         db  0x18 ; '.'
000000000000e119         db  0x86 ; '.'
000000000000e11a         db  0x03 ; '.'
000000000000e11b         db  0x41 ; 'A'
000000000000e11c         db  0x0e ; '.'
000000000000e11d         db  0x20 ; ' '
000000000000e11e         db  0x83 ; '.'
000000000000e11f         db  0x04 ; '.'
000000000000e120         db  0x7d ; '}'
000000000000e121         db  0x0a ; '.'
000000000000e122         db  0x0e ; '.'
000000000000e123         db  0x18 ; '.'
000000000000e124         db  0x41 ; 'A'
000000000000e125         db  0x0e ; '.'
000000000000e126         db  0x10 ; '.'
000000000000e127         db  0x42 ; 'B'
000000000000e128         db  0x0e ; '.'
000000000000e129         db  0x08 ; '.'
000000000000e12a         db  0x44 ; 'D'
000000000000e12b         db  0x0b ; '.'
000000000000e12c         db  0x60 ; '`'
000000000000e12d         db  0x0a ; '.'
000000000000e12e         db  0x0e ; '.'
000000000000e12f         db  0x18 ; '.'
000000000000e130         db  0x41 ; 'A'
000000000000e131         db  0x0e ; '.'
000000000000e132         db  0x10 ; '.'
000000000000e133         db  0x42 ; 'B'
000000000000e134         db  0x0e ; '.'
000000000000e135         db  0x08 ; '.'
000000000000e136         db  0x45 ; 'E'
000000000000e137         db  0x0b ; '.'
000000000000e138         dd         0x00000034                                  ; Length of the record
000000000000e13c         dd         0x000018e4                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e140         db         0xa0, 0xc4, 2 dup (0xff)                    ; begin 0xa5e0
000000000000e144         db         0x7e, 0x02, 2 dup (0x00)                    ; length 0x27e (end at 0xa85e)
000000000000e148         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e149         db  0x42 ; 'B'
000000000000e14a         db  0x0e ; '.'
000000000000e14b         db  0x10 ; '.'
000000000000e14c         db  0x8c ; '.'
000000000000e14d         db  0x02 ; '.'
000000000000e14e         db  0x41 ; 'A'
000000000000e14f         db  0x0e ; '.'
000000000000e150         db  0x18 ; '.'
000000000000e151         db  0x86 ; '.'
000000000000e152         db  0x03 ; '.'
000000000000e153         db  0x43 ; 'C'
000000000000e154         db  0x0e ; '.'
000000000000e155         db  0x20 ; ' '
000000000000e156         db  0x83 ; '.'
000000000000e157         db  0x04 ; '.'
000000000000e158         db  0x44 ; 'D'
000000000000e159         db  0x0e ; '.'
000000000000e15a         db  0x70 ; 'p'
000000000000e15b         db  0x02 ; '.'
000000000000e15c         db  0xf0 ; '.'
000000000000e15d         db  0x0a ; '.'
000000000000e15e         db  0x0e ; '.'
000000000000e15f         db  0x20 ; ' '
000000000000e160         db  0x41 ; 'A'
000000000000e161         db  0x0e ; '.'
000000000000e162         db  0x18 ; '.'
000000000000e163         db  0x41 ; 'A'
000000000000e164         db  0x0e ; '.'
000000000000e165         db  0x10 ; '.'
000000000000e166         db  0x42 ; 'B'
000000000000e167         db  0x0e ; '.'
000000000000e168         db  0x08 ; '.'
000000000000e169         db  0x42 ; 'B'
000000000000e16a         db  0x0b ; '.'
000000000000e16b         db  0x00 ; '.'
000000000000e16c         db  0x00 ; '.'
000000000000e16d         db  0x00 ; '.'
000000000000e16e         db  0x00 ; '.'
000000000000e16f         db  0x00 ; '.'
000000000000e170         dd         0x00000014                                  ; Length of the record
000000000000e174         dd         0x0000191c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e178         db         0xe8, 0xc6, 2 dup (0xff)                    ; begin 0xa860
000000000000e17c         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xa86e)
000000000000e180         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e181         align      8
000000000000e188         dd         0x00000044                                  ; Length of the record
000000000000e18c         dd         0x00001934                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e190         db         0xe0, 0xc6, 2 dup (0xff)                    ; begin 0xa870
000000000000e194         db         0x65, 3 dup (0x00)                          ; length 0x65 (end at 0xa8d5)
000000000000e198         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e199         db  0x42 ; 'B'
000000000000e19a         db  0x0e ; '.'
000000000000e19b         db  0x10 ; '.'
000000000000e19c         db  0x8f ; '.'
000000000000e19d         db  0x02 ; '.'
000000000000e19e         db  0x42 ; 'B'
000000000000e19f         db  0x0e ; '.'
000000000000e1a0         db  0x18 ; '.'
000000000000e1a1         db  0x8e ; '.'
000000000000e1a2         db  0x03 ; '.'
000000000000e1a3         db  0x45 ; 'E'
000000000000e1a4         db  0x0e ; '.'
000000000000e1a5         db  0x20 ; ' '
000000000000e1a6         db  0x8d ; '.'
000000000000e1a7         db  0x04 ; '.'
000000000000e1a8         db  0x42 ; 'B'
000000000000e1a9         db  0x0e ; '.'
000000000000e1aa         db  0x28 ; '('
000000000000e1ab         db  0x8c ; '.'
000000000000e1ac         db  0x05 ; '.'
000000000000e1ad         db  0x48 ; 'H'
000000000000e1ae         db  0x0e ; '.'
000000000000e1af         db  0x30 ; '0'
000000000000e1b0         db  0x86 ; '.'
000000000000e1b1         db  0x06 ; '.'
000000000000e1b2         db  0x48 ; 'H'
000000000000e1b3         db  0x0e ; '.'
000000000000e1b4         db  0x38 ; '8'
000000000000e1b5         db  0x83 ; '.'
000000000000e1b6         db  0x07 ; '.'
000000000000e1b7         db  0x4d ; 'M'
000000000000e1b8         db  0x0e ; '.'
000000000000e1b9         db  0x40 ; '@'
000000000000e1ba         db  0x72 ; 'r'
000000000000e1bb         db  0x0e ; '.'
000000000000e1bc         db  0x38 ; '8'
000000000000e1bd         db  0x41 ; 'A'
000000000000e1be         db  0x0e ; '.'
000000000000e1bf         db  0x30 ; '0'
000000000000e1c0         db  0x41 ; 'A'
000000000000e1c1         db  0x0e ; '.'
000000000000e1c2         db  0x28 ; '('
000000000000e1c3         db  0x42 ; 'B'
000000000000e1c4         db  0x0e ; '.'
000000000000e1c5         db  0x20 ; ' '
000000000000e1c6         db  0x42 ; 'B'
000000000000e1c7         db  0x0e ; '.'
000000000000e1c8         db  0x18 ; '.'
000000000000e1c9         db  0x42 ; 'B'
000000000000e1ca         db  0x0e ; '.'
000000000000e1cb         db  0x10 ; '.'
000000000000e1cc         db  0x42 ; 'B'
000000000000e1cd         db  0x0e ; '.'
000000000000e1ce         db  0x08 ; '.'
000000000000e1cf         db  0x00 ; '.'
000000000000e1d0         dd         0x00000014                                  ; Length of the record
000000000000e1d4         dd         0x0000197c                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e1d8         db         0x08, 0xc7, 2 dup (0xff)                    ; begin 0xa8e0
000000000000e1dc         db         0x02, 3 dup (0x00)                          ; length 0x2 (end at 0xa8e2)
000000000000e1e0         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e1e1         align      8
000000000000e1e8         dd         0x00000010                                  ; Length of the record
000000000000e1ec         dd         0x00001994                                  ; FDE: parent CIE at 0xc858 (FDE encoding = 0x1B)
000000000000e1f0         db         0x00, 0xc7, 2 dup (0xff)                    ; begin 0xa8f0
000000000000e1f4         db         0x0e, 3 dup (0x00)                          ; length 0xe (end at 0xa8fe)
000000000000e1f8         db         0x00                                        ; Augmentation length (LEB128=0)
000000000000e1f9         align      512


        ; Segment Segment 3
        ; Range: [0x20e990; 0x20f260[ (2256 bytes)
        ; File offset : [59792; 61600[ (1808 bytes)
        ; Permissions: readable / writable
        ; Flags: 0x6



        ; Section .init_array
        ; Range: [0x20e990; 0x20e998[ (8 bytes)
        ; File offset : [59792; 59800[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_FINI_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __frame_dummy_init_array_entry:
000000000020e990         dq         frame_dummy                                 ; DATA XREF=__libc_csu_init+11


        ; Section .fini_array
        ; Range: [0x20e998; 0x20e9a0[ (8 bytes)
        ; File offset : [59800; 59808[ (8 bytes)
        ; Flags: 0x3
        ;   SHT_PREINIT_ARRAY
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     __do_global_dtors_aux_fini_array_entry:
000000000020e998         dq         __do_global_dtors_aux                       ; DATA XREF=__libc_csu_init+19


        ; Section .data.rel.ro
        ; Range: [0x20e9a0; 0x20ebb8[ (536 bytes)
        ; File offset : [59808; 60344[ (536 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     interactive_args:
000000000020e9a0         db  0xc1 ; '.'                                         ; DATA XREF=main+383
000000000020e9a1         db  0xaa ; '.'
000000000020e9a2         db  0x00 ; '.'
000000000020e9a3         db  0x00 ; '.'
000000000020e9a4         db  0x00 ; '.'
000000000020e9a5         db  0x00 ; '.'
000000000020e9a6         db  0x00 ; '.'
000000000020e9a7         db  0x00 ; '.'
000000000020e9a8         db  0xc7 ; '.'
000000000020e9a9         db  0xaa ; '.'
000000000020e9aa         db  0x00 ; '.'
000000000020e9ab         db  0x00 ; '.'
000000000020e9ac         db  0x00 ; '.'
000000000020e9ad         db  0x00 ; '.'
000000000020e9ae         db  0x00 ; '.'
000000000020e9af         db  0x00 ; '.'
000000000020e9b0         db  0xca ; '.'
000000000020e9b1         db  0xaa ; '.'
000000000020e9b2         db  0x00 ; '.'
000000000020e9b3         db  0x00 ; '.'
000000000020e9b4         db  0x00 ; '.'
000000000020e9b5         db  0x00 ; '.'
000000000020e9b6         db  0x00 ; '.'
000000000020e9b7         db  0x00 ; '.'
000000000020e9b8         db  0xcf ; '.'
000000000020e9b9         db  0xaa ; '.'
000000000020e9ba         db  0x00 ; '.'
000000000020e9bb         db  0x00 ; '.'
000000000020e9bc         db  0x00 ; '.'
000000000020e9bd         db  0x00 ; '.'
000000000020e9be         db  0x00 ; '.'
000000000020e9bf         db  0x00 ; '.'
000000000020e9c0         db  0xc6 ; '.'
000000000020e9c1         db  0xb9 ; '.'
000000000020e9c2         db  0x00 ; '.'
000000000020e9c3         db  0x00 ; '.'
000000000020e9c4         db  0x00 ; '.'
000000000020e9c5         db  0x00 ; '.'
000000000020e9c6         db  0x00 ; '.'
000000000020e9c7         db  0x00 ; '.'
000000000020e9c8         db  0xd4 ; '.'
000000000020e9c9         db  0xaa ; '.'
000000000020e9ca         db  0x00 ; '.'
000000000020e9cb         db  0x00 ; '.'
000000000020e9cc         db  0x00 ; '.'
000000000020e9cd         db  0x00 ; '.'
000000000020e9ce         db  0x00 ; '.'
000000000020e9cf         db  0x00 ; '.'
000000000020e9d0         db  0x00 ; '.'
000000000020e9d1         db  0x00 ; '.'
000000000020e9d2         db  0x00 ; '.'
000000000020e9d3         db  0x00 ; '.'
000000000020e9d4         db  0x00 ; '.'
000000000020e9d5         db  0x00 ; '.'
000000000020e9d6         db  0x00 ; '.'
000000000020e9d7         db  0x00 ; '.'
000000000020e9d8         db  0x00 ; '.'
000000000020e9d9         db  0x00 ; '.'
000000000020e9da         db  0x00 ; '.'
000000000020e9db         db  0x00 ; '.'
000000000020e9dc         db  0x00 ; '.'
000000000020e9dd         db  0x00 ; '.'
000000000020e9de         db  0x00 ; '.'
000000000020e9df         db  0x00 ; '.'
                     long_opts:
000000000020e9e0         db  0xd8 ; '.'                                         ; DATA XREF=main+192
000000000020e9e1         db  0xaa ; '.'
000000000020e9e2         db  0x00 ; '.'
000000000020e9e3         db  0x00 ; '.'
000000000020e9e4         db  0x00 ; '.'
000000000020e9e5         db  0x00 ; '.'
000000000020e9e6         db  0x00 ; '.'
000000000020e9e7         db  0x00 ; '.'
000000000020e9e8         db  0x00 ; '.'
000000000020e9e9         db  0x00 ; '.'
000000000020e9ea         db  0x00 ; '.'
000000000020e9eb         db  0x00 ; '.'
000000000020e9ec         db  0x00 ; '.'
000000000020e9ed         db  0x00 ; '.'
000000000020e9ee         db  0x00 ; '.'
000000000020e9ef         db  0x00 ; '.'
000000000020e9f0         db  0x00 ; '.'
000000000020e9f1         db  0x00 ; '.'
000000000020e9f2         db  0x00 ; '.'
000000000020e9f3         db  0x00 ; '.'
000000000020e9f4         db  0x00 ; '.'
000000000020e9f5         db  0x00 ; '.'
000000000020e9f6         db  0x00 ; '.'
000000000020e9f7         db  0x00 ; '.'
000000000020e9f8         db  0x66 ; 'f'
000000000020e9f9         db  0x00 ; '.'
000000000020e9fa         db  0x00 ; '.'
000000000020e9fb         db  0x00 ; '.'
000000000020e9fc         db  0x00 ; '.'
000000000020e9fd         db  0x00 ; '.'
000000000020e9fe         db  0x00 ; '.'
000000000020e9ff         db  0x00 ; '.'
000000000020ea00         db  0xe4 ; '.'
000000000020ea01         db  0xa9 ; '.'
000000000020ea02         db  0x00 ; '.'
000000000020ea03         db  0x00 ; '.'
000000000020ea04         db  0x00 ; '.'
000000000020ea05         db  0x00 ; '.'
000000000020ea06         db  0x00 ; '.'
000000000020ea07         db  0x00 ; '.'
000000000020ea08         db  0x02 ; '.'
000000000020ea09         db  0x00 ; '.'
000000000020ea0a         db  0x00 ; '.'
000000000020ea0b         db  0x00 ; '.'
000000000020ea0c         db  0x00 ; '.'
000000000020ea0d         db  0x00 ; '.'
000000000020ea0e         db  0x00 ; '.'
000000000020ea0f         db  0x00 ; '.'
000000000020ea10         db  0x00 ; '.'
000000000020ea11         db  0x00 ; '.'
000000000020ea12         db  0x00 ; '.'
000000000020ea13         db  0x00 ; '.'
000000000020ea14         db  0x00 ; '.'
000000000020ea15         db  0x00 ; '.'
000000000020ea16         db  0x00 ; '.'
000000000020ea17         db  0x00 ; '.'
000000000020ea18         db  0x80 ; '.'
000000000020ea19         db  0x00 ; '.'
000000000020ea1a         db  0x00 ; '.'
000000000020ea1b         db  0x00 ; '.'
000000000020ea1c         db  0x00 ; '.'
000000000020ea1d         db  0x00 ; '.'
000000000020ea1e         db  0x00 ; '.'
000000000020ea1f         db  0x00 ; '.'
000000000020ea20         db  0xde ; '.'
000000000020ea21         db  0xaa ; '.'
000000000020ea22         db  0x00 ; '.'
000000000020ea23         db  0x00 ; '.'
000000000020ea24         db  0x00 ; '.'
000000000020ea25         db  0x00 ; '.'
000000000020ea26         db  0x00 ; '.'
000000000020ea27         db  0x00 ; '.'
000000000020ea28         db  0x00 ; '.'
000000000020ea29         db  0x00 ; '.'
000000000020ea2a         db  0x00 ; '.'
000000000020ea2b         db  0x00 ; '.'
000000000020ea2c         db  0x00 ; '.'
000000000020ea2d         db  0x00 ; '.'
000000000020ea2e         db  0x00 ; '.'
000000000020ea2f         db  0x00 ; '.'
000000000020ea30         db  0x00 ; '.'
000000000020ea31         db  0x00 ; '.'
000000000020ea32         db  0x00 ; '.'
000000000020ea33         db  0x00 ; '.'
000000000020ea34         db  0x00 ; '.'
000000000020ea35         db  0x00 ; '.'
000000000020ea36         db  0x00 ; '.'
000000000020ea37         db  0x00 ; '.'
000000000020ea38         db  0x81 ; '.'
000000000020ea39         db  0x00 ; '.'
000000000020ea3a         db  0x00 ; '.'
000000000020ea3b         db  0x00 ; '.'
000000000020ea3c         db  0x00 ; '.'
000000000020ea3d         db  0x00 ; '.'
000000000020ea3e         db  0x00 ; '.'
000000000020ea3f         db  0x00 ; '.'
000000000020ea40         db  0xf2 ; '.'
000000000020ea41         db  0xa9 ; '.'
000000000020ea42         db  0x00 ; '.'
000000000020ea43         db  0x00 ; '.'
000000000020ea44         db  0x00 ; '.'
000000000020ea45         db  0x00 ; '.'
000000000020ea46         db  0x00 ; '.'
000000000020ea47         db  0x00 ; '.'
000000000020ea48         db  0x00 ; '.'
000000000020ea49         db  0x00 ; '.'
000000000020ea4a         db  0x00 ; '.'
000000000020ea4b         db  0x00 ; '.'
000000000020ea4c         db  0x00 ; '.'
000000000020ea4d         db  0x00 ; '.'
000000000020ea4e         db  0x00 ; '.'
000000000020ea4f         db  0x00 ; '.'
000000000020ea50         db  0x00 ; '.'
000000000020ea51         db  0x00 ; '.'
000000000020ea52         db  0x00 ; '.'
000000000020ea53         db  0x00 ; '.'
000000000020ea54         db  0x00 ; '.'
000000000020ea55         db  0x00 ; '.'
000000000020ea56         db  0x00 ; '.'
000000000020ea57         db  0x00 ; '.'
000000000020ea58         db  0x82 ; '.'
000000000020ea59         db  0x00 ; '.'
000000000020ea5a         db  0x00 ; '.'
000000000020ea5b         db  0x00 ; '.'
000000000020ea5c         db  0x00 ; '.'
000000000020ea5d         db  0x00 ; '.'
000000000020ea5e         db  0x00 ; '.'
000000000020ea5f         db  0x00 ; '.'
000000000020ea60         db  0xf5 ; '.'
000000000020ea61         db  0xa9 ; '.'
000000000020ea62         db  0x00 ; '.'
000000000020ea63         db  0x00 ; '.'
000000000020ea64         db  0x00 ; '.'
000000000020ea65         db  0x00 ; '.'
000000000020ea66         db  0x00 ; '.'
000000000020ea67         db  0x00 ; '.'
000000000020ea68         db  0x02 ; '.'
000000000020ea69         db  0x00 ; '.'
000000000020ea6a         db  0x00 ; '.'
000000000020ea6b         db  0x00 ; '.'
000000000020ea6c         db  0x00 ; '.'
000000000020ea6d         db  0x00 ; '.'
000000000020ea6e         db  0x00 ; '.'
000000000020ea6f         db  0x00 ; '.'
000000000020ea70         db  0x00 ; '.'
000000000020ea71         db  0x00 ; '.'
000000000020ea72         db  0x00 ; '.'
000000000020ea73         db  0x00 ; '.'
000000000020ea74         db  0x00 ; '.'
000000000020ea75         db  0x00 ; '.'
000000000020ea76         db  0x00 ; '.'
000000000020ea77         db  0x00 ; '.'
000000000020ea78         db  0x83 ; '.'
000000000020ea79         db  0x00 ; '.'
000000000020ea7a         db  0x00 ; '.'
000000000020ea7b         db  0x00 ; '.'
000000000020ea7c         db  0x00 ; '.'
000000000020ea7d         db  0x00 ; '.'
000000000020ea7e         db  0x00 ; '.'
000000000020ea7f         db  0x00 ; '.'
000000000020ea80         db  0xee ; '.'
000000000020ea81         db  0xaa ; '.'
000000000020ea82         db  0x00 ; '.'
000000000020ea83         db  0x00 ; '.'
000000000020ea84         db  0x00 ; '.'
000000000020ea85         db  0x00 ; '.'
000000000020ea86         db  0x00 ; '.'
000000000020ea87         db  0x00 ; '.'
000000000020ea88         db  0x00 ; '.'
000000000020ea89         db  0x00 ; '.'
000000000020ea8a         db  0x00 ; '.'
000000000020ea8b         db  0x00 ; '.'
000000000020ea8c         db  0x00 ; '.'
000000000020ea8d         db  0x00 ; '.'
000000000020ea8e         db  0x00 ; '.'
000000000020ea8f         db  0x00 ; '.'
000000000020ea90         db  0x00 ; '.'
000000000020ea91         db  0x00 ; '.'
000000000020ea92         db  0x00 ; '.'
000000000020ea93         db  0x00 ; '.'
000000000020ea94         db  0x00 ; '.'
000000000020ea95         db  0x00 ; '.'
000000000020ea96         db  0x00 ; '.'
000000000020ea97         db  0x00 ; '.'
000000000020ea98         db  0x84 ; '.'
000000000020ea99         db  0x00 ; '.'
000000000020ea9a         db  0x00 ; '.'
000000000020ea9b         db  0x00 ; '.'
000000000020ea9c         db  0x00 ; '.'
000000000020ea9d         db  0x00 ; '.'
000000000020ea9e         db  0x00 ; '.'
000000000020ea9f         db  0x00 ; '.'
000000000020eaa0         db  0x01 ; '.'
000000000020eaa1         db  0xab ; '.'
000000000020eaa2         db  0x00 ; '.'
000000000020eaa3         db  0x00 ; '.'
000000000020eaa4         db  0x00 ; '.'
000000000020eaa5         db  0x00 ; '.'
000000000020eaa6         db  0x00 ; '.'
000000000020eaa7         db  0x00 ; '.'
000000000020eaa8         db  0x00 ; '.'
000000000020eaa9         db  0x00 ; '.'
000000000020eaaa         db  0x00 ; '.'
000000000020eaab         db  0x00 ; '.'
000000000020eaac         db  0x00 ; '.'
000000000020eaad         db  0x00 ; '.'
000000000020eaae         db  0x00 ; '.'
000000000020eaaf         db  0x00 ; '.'
000000000020eab0         db  0x00 ; '.'
000000000020eab1         db  0x00 ; '.'
000000000020eab2         db  0x00 ; '.'
000000000020eab3         db  0x00 ; '.'
000000000020eab4         db  0x00 ; '.'
000000000020eab5         db  0x00 ; '.'
000000000020eab6         db  0x00 ; '.'
000000000020eab7         db  0x00 ; '.'
000000000020eab8         db  0x72 ; 'r'
000000000020eab9         db  0x00 ; '.'
000000000020eaba         db  0x00 ; '.'
000000000020eabb         db  0x00 ; '.'
000000000020eabc         db  0x00 ; '.'
000000000020eabd         db  0x00 ; '.'
000000000020eabe         db  0x00 ; '.'
000000000020eabf         db  0x00 ; '.'
000000000020eac0         db  0x0b ; '.'
000000000020eac1         db  0xab ; '.'
000000000020eac2         db  0x00 ; '.'
000000000020eac3         db  0x00 ; '.'
000000000020eac4         db  0x00 ; '.'
000000000020eac5         db  0x00 ; '.'
000000000020eac6         db  0x00 ; '.'
000000000020eac7         db  0x00 ; '.'
000000000020eac8         db  0x00 ; '.'
000000000020eac9         db  0x00 ; '.'
000000000020eaca         db  0x00 ; '.'
000000000020eacb         db  0x00 ; '.'
000000000020eacc         db  0x00 ; '.'
000000000020eacd         db  0x00 ; '.'
000000000020eace         db  0x00 ; '.'
000000000020eacf         db  0x00 ; '.'
000000000020ead0         db  0x00 ; '.'
000000000020ead1         db  0x00 ; '.'
000000000020ead2         db  0x00 ; '.'
000000000020ead3         db  0x00 ; '.'
000000000020ead4         db  0x00 ; '.'
000000000020ead5         db  0x00 ; '.'
000000000020ead6         db  0x00 ; '.'
000000000020ead7         db  0x00 ; '.'
000000000020ead8         db  0x64 ; 'd'
000000000020ead9         db  0x00 ; '.'
000000000020eada         db  0x00 ; '.'
000000000020eadb         db  0x00 ; '.'
000000000020eadc         db  0x00 ; '.'
000000000020eadd         db  0x00 ; '.'
000000000020eade         db  0x00 ; '.'
000000000020eadf         db  0x00 ; '.'
000000000020eae0         db  0x0f ; '.'
000000000020eae1         db  0xab ; '.'
000000000020eae2         db  0x00 ; '.'
000000000020eae3         db  0x00 ; '.'
000000000020eae4         db  0x00 ; '.'
000000000020eae5         db  0x00 ; '.'
000000000020eae6         db  0x00 ; '.'
000000000020eae7         db  0x00 ; '.'
000000000020eae8         db  0x00 ; '.'
000000000020eae9         db  0x00 ; '.'
000000000020eaea         db  0x00 ; '.'
000000000020eaeb         db  0x00 ; '.'
000000000020eaec         db  0x00 ; '.'
000000000020eaed         db  0x00 ; '.'
000000000020eaee         db  0x00 ; '.'
000000000020eaef         db  0x00 ; '.'
000000000020eaf0         db  0x00 ; '.'
000000000020eaf1         db  0x00 ; '.'
000000000020eaf2         db  0x00 ; '.'
000000000020eaf3         db  0x00 ; '.'
000000000020eaf4         db  0x00 ; '.'
000000000020eaf5         db  0x00 ; '.'
000000000020eaf6         db  0x00 ; '.'
000000000020eaf7         db  0x00 ; '.'
000000000020eaf8         db  0x76 ; 'v'
000000000020eaf9         db  0x00 ; '.'
000000000020eafa         db  0x00 ; '.'
000000000020eafb         db  0x00 ; '.'
000000000020eafc         db  0x00 ; '.'
000000000020eafd         db  0x00 ; '.'
000000000020eafe         db  0x00 ; '.'
000000000020eaff         db  0x00 ; '.'
000000000020eb00         db  0x17 ; '.'
000000000020eb01         db  0xab ; '.'
000000000020eb02         db  0x00 ; '.'
000000000020eb03         db  0x00 ; '.'
000000000020eb04         db  0x00 ; '.'
000000000020eb05         db  0x00 ; '.'
000000000020eb06         db  0x00 ; '.'
000000000020eb07         db  0x00 ; '.'
000000000020eb08         db  0x00 ; '.'
000000000020eb09         db  0x00 ; '.'
000000000020eb0a         db  0x00 ; '.'
000000000020eb0b         db  0x00 ; '.'
000000000020eb0c         db  0x00 ; '.'
000000000020eb0d         db  0x00 ; '.'
000000000020eb0e         db  0x00 ; '.'
000000000020eb0f         db  0x00 ; '.'
000000000020eb10         db  0x00 ; '.'
000000000020eb11         db  0x00 ; '.'
000000000020eb12         db  0x00 ; '.'
000000000020eb13         db  0x00 ; '.'
000000000020eb14         db  0x00 ; '.'
000000000020eb15         db  0x00 ; '.'
000000000020eb16         db  0x00 ; '.'
000000000020eb17         db  0x00 ; '.'
000000000020eb18         db  0x7e ; '~'
000000000020eb19         db  0xff ; '.'
000000000020eb1a         db  0xff ; '.'
000000000020eb1b         db  0xff ; '.'
000000000020eb1c         db  0x00 ; '.'
000000000020eb1d         db  0x00 ; '.'
000000000020eb1e         db  0x00 ; '.'
000000000020eb1f         db  0x00 ; '.'
000000000020eb20         db  0x1c ; '.'
000000000020eb21         db  0xab ; '.'
000000000020eb22         db  0x00 ; '.'
000000000020eb23         db  0x00 ; '.'
000000000020eb24         db  0x00 ; '.'
000000000020eb25         db  0x00 ; '.'
000000000020eb26         db  0x00 ; '.'
000000000020eb27         db  0x00 ; '.'
000000000020eb28         db  0x00 ; '.'
000000000020eb29         db  0x00 ; '.'
000000000020eb2a         db  0x00 ; '.'
000000000020eb2b         db  0x00 ; '.'
000000000020eb2c         db  0x00 ; '.'
000000000020eb2d         db  0x00 ; '.'
000000000020eb2e         db  0x00 ; '.'
000000000020eb2f         db  0x00 ; '.'
000000000020eb30         db  0x00 ; '.'
000000000020eb31         db  0x00 ; '.'
000000000020eb32         db  0x00 ; '.'
000000000020eb33         db  0x00 ; '.'
000000000020eb34         db  0x00 ; '.'
000000000020eb35         db  0x00 ; '.'
000000000020eb36         db  0x00 ; '.'
000000000020eb37         db  0x00 ; '.'
000000000020eb38         db  0x7d ; '}'
000000000020eb39         db  0xff ; '.'
000000000020eb3a         db  0xff ; '.'
000000000020eb3b         db  0xff ; '.'
000000000020eb3c         db  0x00 ; '.'
000000000020eb3d         db  0x00 ; '.'
000000000020eb3e         db  0x00 ; '.'
000000000020eb3f         db  0x00 ; '.'
000000000020eb40         db  0x00 ; '.'
000000000020eb41         db  0x00 ; '.'
000000000020eb42         db  0x00 ; '.'
000000000020eb43         db  0x00 ; '.'
000000000020eb44         db  0x00 ; '.'
000000000020eb45         db  0x00 ; '.'
000000000020eb46         db  0x00 ; '.'
000000000020eb47         db  0x00 ; '.'
000000000020eb48         db  0x00 ; '.'
000000000020eb49         db  0x00 ; '.'
000000000020eb4a         db  0x00 ; '.'
000000000020eb4b         db  0x00 ; '.'
000000000020eb4c         db  0x00 ; '.'
000000000020eb4d         db  0x00 ; '.'
000000000020eb4e         db  0x00 ; '.'
000000000020eb4f         db  0x00 ; '.'
000000000020eb50         db  0x00 ; '.'
000000000020eb51         db  0x00 ; '.'
000000000020eb52         db  0x00 ; '.'
000000000020eb53         db  0x00 ; '.'
000000000020eb54         db  0x00 ; '.'
000000000020eb55         db  0x00 ; '.'
000000000020eb56         db  0x00 ; '.'
000000000020eb57         db  0x00 ; '.'
000000000020eb58         db  0x00 ; '.'
000000000020eb59         db  0x00 ; '.'
000000000020eb5a         db  0x00 ; '.'
000000000020eb5b         db  0x00 ; '.'
000000000020eb5c         db  0x00 ; '.'
000000000020eb5d         db  0x00 ; '.'
000000000020eb5e         db  0x00 ; '.'
000000000020eb5f         db  0x00 ; '.'
                     quoting_style_args:
000000000020eb60         db  0x91 ; '.'
000000000020eb61         db  0xb9 ; '.'
000000000020eb62         db  0x00 ; '.'
000000000020eb63         db  0x00 ; '.'
000000000020eb64         db  0x00 ; '.'
000000000020eb65         db  0x00 ; '.'
000000000020eb66         db  0x00 ; '.'
000000000020eb67         db  0x00 ; '.'
000000000020eb68         db  0x99 ; '.'
000000000020eb69         db  0xb9 ; '.'
000000000020eb6a         db  0x00 ; '.'
000000000020eb6b         db  0x00 ; '.'
000000000020eb6c         db  0x00 ; '.'
000000000020eb6d         db  0x00 ; '.'
000000000020eb6e         db  0x00 ; '.'
000000000020eb6f         db  0x00 ; '.'
000000000020eb70         db  0x9f ; '.'
000000000020eb71         db  0xb9 ; '.'
000000000020eb72         db  0x00 ; '.'
000000000020eb73         db  0x00 ; '.'
000000000020eb74         db  0x00 ; '.'
000000000020eb75         db  0x00 ; '.'
000000000020eb76         db  0x00 ; '.'
000000000020eb77         db  0x00 ; '.'
000000000020eb78         db  0xac ; '.'
000000000020eb79         db  0xb9 ; '.'
000000000020eb7a         db  0x00 ; '.'
000000000020eb7b         db  0x00 ; '.'
000000000020eb7c         db  0x00 ; '.'
000000000020eb7d         db  0x00 ; '.'
000000000020eb7e         db  0x00 ; '.'
000000000020eb7f         db  0x00 ; '.'
000000000020eb80         db  0xb9 ; '.'
000000000020eb81         db  0xb9 ; '.'
000000000020eb82         db  0x00 ; '.'
000000000020eb83         db  0x00 ; '.'
000000000020eb84         db  0x00 ; '.'
000000000020eb85         db  0x00 ; '.'
000000000020eb86         db  0x00 ; '.'
000000000020eb87         db  0x00 ; '.'
000000000020eb88         db  0x74 ; 't'
000000000020eb89         db  0xaa ; '.'
000000000020eb8a         db  0x00 ; '.'
000000000020eb8b         db  0x00 ; '.'
000000000020eb8c         db  0x00 ; '.'
000000000020eb8d         db  0x00 ; '.'
000000000020eb8e         db  0x00 ; '.'
000000000020eb8f         db  0x00 ; '.'
000000000020eb90         db  0xcd ; '.'
000000000020eb91         db  0xb9 ; '.'
000000000020eb92         db  0x00 ; '.'
000000000020eb93         db  0x00 ; '.'
000000000020eb94         db  0x00 ; '.'
000000000020eb95         db  0x00 ; '.'
000000000020eb96         db  0x00 ; '.'
000000000020eb97         db  0x00 ; '.'
000000000020eb98         db  0xb2 ; '.'
000000000020eb99         db  0xb9 ; '.'
000000000020eb9a         db  0x00 ; '.'
000000000020eb9b         db  0x00 ; '.'
000000000020eb9c         db  0x00 ; '.'
000000000020eb9d         db  0x00 ; '.'
000000000020eb9e         db  0x00 ; '.'
000000000020eb9f         db  0x00 ; '.'
000000000020eba0         db  0xdb ; '.'
000000000020eba1         db  0xa9 ; '.'
000000000020eba2         db  0x00 ; '.'
000000000020eba3         db  0x00 ; '.'
000000000020eba4         db  0x00 ; '.'
000000000020eba5         db  0x00 ; '.'
000000000020eba6         db  0x00 ; '.'
000000000020eba7         db  0x00 ; '.'
000000000020eba8         db  0xd5 ; '.'
000000000020eba9         db  0xb9 ; '.'
000000000020ebaa         db  0x00 ; '.'
000000000020ebab         db  0x00 ; '.'
000000000020ebac         db  0x00 ; '.'
000000000020ebad         db  0x00 ; '.'
000000000020ebae         db  0x00 ; '.'
000000000020ebaf         db  0x00 ; '.'
000000000020ebb0         db  0x00 ; '.'
000000000020ebb1         db  0x00 ; '.'
000000000020ebb2         db  0x00 ; '.'
000000000020ebb3         db  0x00 ; '.'
000000000020ebb4         db  0x00 ; '.'
000000000020ebb5         db  0x00 ; '.'
000000000020ebb6         db  0x00 ; '.'
000000000020ebb7         db  0x00 ; '.'


        ; Section .dynamic
        ; Range: [0x20ebb8; 0x20eda8[ (496 bytes)
        ; File offset : [60344; 60840[ (496 bytes)
        ; Flags: 0x3
        ;   SHT_DYNAMIC
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _DYNAMIC:
000000000020ebb8         db  0x01 ; '.'
000000000020ebb9         db  0x00 ; '.'
000000000020ebba         db  0x00 ; '.'
000000000020ebbb         db  0x00 ; '.'
000000000020ebbc         db  0x00 ; '.'
000000000020ebbd         db  0x00 ; '.'
000000000020ebbe         db  0x00 ; '.'
000000000020ebbf         db  0x00 ; '.'
000000000020ebc0         db  0x01 ; '.'
000000000020ebc1         db  0x00 ; '.'
000000000020ebc2         db  0x00 ; '.'
000000000020ebc3         db  0x00 ; '.'
000000000020ebc4         db  0x00 ; '.'
000000000020ebc5         db  0x00 ; '.'
000000000020ebc6         db  0x00 ; '.'
000000000020ebc7         db  0x00 ; '.'
000000000020ebc8         db  0x0c ; '.'
000000000020ebc9         db  0x00 ; '.'
000000000020ebca         db  0x00 ; '.'
000000000020ebcb         db  0x00 ; '.'
000000000020ebcc         db  0x00 ; '.'
000000000020ebcd         db  0x00 ; '.'
000000000020ebce         db  0x00 ; '.'
000000000020ebcf         db  0x00 ; '.'
000000000020ebd0         db  0x60 ; '`'
000000000020ebd1         db  0x19 ; '.'
000000000020ebd2         db  0x00 ; '.'
000000000020ebd3         db  0x00 ; '.'
000000000020ebd4         db  0x00 ; '.'
000000000020ebd5         db  0x00 ; '.'
000000000020ebd6         db  0x00 ; '.'
000000000020ebd7         db  0x00 ; '.'
000000000020ebd8         db  0x0d ; '.'
000000000020ebd9         db  0x00 ; '.'
000000000020ebda         db  0x00 ; '.'
000000000020ebdb         db  0x00 ; '.'
000000000020ebdc         db  0x00 ; '.'
000000000020ebdd         db  0x00 ; '.'
000000000020ebde         db  0x00 ; '.'
000000000020ebdf         db  0x00 ; '.'
000000000020ebe0         db  0x00 ; '.'
000000000020ebe1         db  0xa9 ; '.'
000000000020ebe2         db  0x00 ; '.'
000000000020ebe3         db  0x00 ; '.'
000000000020ebe4         db  0x00 ; '.'
000000000020ebe5         db  0x00 ; '.'
000000000020ebe6         db  0x00 ; '.'
000000000020ebe7         db  0x00 ; '.'
000000000020ebe8         db  0x19 ; '.'
000000000020ebe9         db  0x00 ; '.'
000000000020ebea         db  0x00 ; '.'
000000000020ebeb         db  0x00 ; '.'
000000000020ebec         db  0x00 ; '.'
000000000020ebed         db  0x00 ; '.'
000000000020ebee         db  0x00 ; '.'
000000000020ebef         db  0x00 ; '.'
000000000020ebf0         db  0x90 ; '.'
000000000020ebf1         db  0xe9 ; '.'
000000000020ebf2         db  0x20 ; ' '
000000000020ebf3         db  0x00 ; '.'
000000000020ebf4         db  0x00 ; '.'
000000000020ebf5         db  0x00 ; '.'
000000000020ebf6         db  0x00 ; '.'
000000000020ebf7         db  0x00 ; '.'
000000000020ebf8         db  0x1b ; '.'
000000000020ebf9         db  0x00 ; '.'
000000000020ebfa         db  0x00 ; '.'
000000000020ebfb         db  0x00 ; '.'
000000000020ebfc         db  0x00 ; '.'
000000000020ebfd         db  0x00 ; '.'
000000000020ebfe         db  0x00 ; '.'
000000000020ebff         db  0x00 ; '.'
000000000020ec00         db  0x08 ; '.'
000000000020ec01         db  0x00 ; '.'
000000000020ec02         db  0x00 ; '.'
000000000020ec03         db  0x00 ; '.'
000000000020ec04         db  0x00 ; '.'
000000000020ec05         db  0x00 ; '.'
000000000020ec06         db  0x00 ; '.'
000000000020ec07         db  0x00 ; '.'
000000000020ec08         db  0x1a ; '.'
000000000020ec09         db  0x00 ; '.'
000000000020ec0a         db  0x00 ; '.'
000000000020ec0b         db  0x00 ; '.'
000000000020ec0c         db  0x00 ; '.'
000000000020ec0d         db  0x00 ; '.'
000000000020ec0e         db  0x00 ; '.'
000000000020ec0f         db  0x00 ; '.'
000000000020ec10         db  0x98 ; '.'
000000000020ec11         db  0xe9 ; '.'
000000000020ec12         db  0x20 ; ' '
000000000020ec13         db  0x00 ; '.'
000000000020ec14         db  0x00 ; '.'
000000000020ec15         db  0x00 ; '.'
000000000020ec16         db  0x00 ; '.'
000000000020ec17         db  0x00 ; '.'
000000000020ec18         db  0x1c ; '.'
000000000020ec19         db  0x00 ; '.'
000000000020ec1a         db  0x00 ; '.'
000000000020ec1b         db  0x00 ; '.'
000000000020ec1c         db  0x00 ; '.'
000000000020ec1d         db  0x00 ; '.'
000000000020ec1e         db  0x00 ; '.'
000000000020ec1f         db  0x00 ; '.'
000000000020ec20         db  0x08 ; '.'
000000000020ec21         db  0x00 ; '.'
000000000020ec22         db  0x00 ; '.'
000000000020ec23         db  0x00 ; '.'
000000000020ec24         db  0x00 ; '.'
000000000020ec25         db  0x00 ; '.'
000000000020ec26         db  0x00 ; '.'
000000000020ec27         db  0x00 ; '.'
000000000020ec28         db  0xf5 ; '.'
000000000020ec29         db  0xfe ; '.'
000000000020ec2a         db  0xff ; '.'
000000000020ec2b         db  0x6f ; 'o'
000000000020ec2c         db  0x00 ; '.'
000000000020ec2d         db  0x00 ; '.'
000000000020ec2e         db  0x00 ; '.'
000000000020ec2f         db  0x00 ; '.'
000000000020ec30         db  0x98 ; '.'
000000000020ec31         db  0x02 ; '.'
000000000020ec32         db  0x00 ; '.'
000000000020ec33         db  0x00 ; '.'
000000000020ec34         db  0x00 ; '.'
000000000020ec35         db  0x00 ; '.'
000000000020ec36         db  0x00 ; '.'
000000000020ec37         db  0x00 ; '.'
000000000020ec38         db  0x05 ; '.'
000000000020ec39         db  0x00 ; '.'
000000000020ec3a         db  0x00 ; '.'
000000000020ec3b         db  0x00 ; '.'
000000000020ec3c         db  0x00 ; '.'
000000000020ec3d         db  0x00 ; '.'
000000000020ec3e         db  0x00 ; '.'
000000000020ec3f         db  0x00 ; '.'
000000000020ec40         db  0x78 ; 'x'
000000000020ec41         db  0x0a ; '.'
000000000020ec42         db  0x00 ; '.'
000000000020ec43         db  0x00 ; '.'
000000000020ec44         db  0x00 ; '.'
000000000020ec45         db  0x00 ; '.'
000000000020ec46         db  0x00 ; '.'
000000000020ec47         db  0x00 ; '.'
000000000020ec48         db  0x06 ; '.'
000000000020ec49         db  0x00 ; '.'
000000000020ec4a         db  0x00 ; '.'
000000000020ec4b         db  0x00 ; '.'
000000000020ec4c         db  0x00 ; '.'
000000000020ec4d         db  0x00 ; '.'
000000000020ec4e         db  0x00 ; '.'
000000000020ec4f         db  0x00 ; '.'
000000000020ec50         db  0xe0 ; '.'
000000000020ec51         db  0x02 ; '.'
000000000020ec52         db  0x00 ; '.'
000000000020ec53         db  0x00 ; '.'
000000000020ec54         db  0x00 ; '.'
000000000020ec55         db  0x00 ; '.'
000000000020ec56         db  0x00 ; '.'
000000000020ec57         db  0x00 ; '.'
000000000020ec58         db  0x0a ; '.'
000000000020ec59         db  0x00 ; '.'
000000000020ec5a         db  0x00 ; '.'
000000000020ec5b         db  0x00 ; '.'
000000000020ec5c         db  0x00 ; '.'
000000000020ec5d         db  0x00 ; '.'
000000000020ec5e         db  0x00 ; '.'
000000000020ec5f         db  0x00 ; '.'
000000000020ec60         db  0x62 ; 'b'
000000000020ec61         db  0x03 ; '.'
000000000020ec62         db  0x00 ; '.'
000000000020ec63         db  0x00 ; '.'
000000000020ec64         db  0x00 ; '.'
000000000020ec65         db  0x00 ; '.'
000000000020ec66         db  0x00 ; '.'
000000000020ec67         db  0x00 ; '.'
000000000020ec68         db  0x0b ; '.'
000000000020ec69         db  0x00 ; '.'
000000000020ec6a         db  0x00 ; '.'
000000000020ec6b         db  0x00 ; '.'
000000000020ec6c         db  0x00 ; '.'
000000000020ec6d         db  0x00 ; '.'
000000000020ec6e         db  0x00 ; '.'
000000000020ec6f         db  0x00 ; '.'
000000000020ec70         db  0x18 ; '.'
000000000020ec71         db  0x00 ; '.'
000000000020ec72         db  0x00 ; '.'
000000000020ec73         db  0x00 ; '.'
000000000020ec74         db  0x00 ; '.'
000000000020ec75         db  0x00 ; '.'
000000000020ec76         db  0x00 ; '.'
000000000020ec77         db  0x00 ; '.'
000000000020ec78         db  0x15 ; '.'
000000000020ec79         db  0x00 ; '.'
000000000020ec7a         db  0x00 ; '.'
000000000020ec7b         db  0x00 ; '.'
000000000020ec7c         db  0x00 ; '.'
000000000020ec7d         db  0x00 ; '.'
000000000020ec7e         db  0x00 ; '.'
000000000020ec7f         db  0x00 ; '.'
000000000020ec80         db  0x00 ; '.'
000000000020ec81         db  0x00 ; '.'
000000000020ec82         db  0x00 ; '.'
000000000020ec83         db  0x00 ; '.'
000000000020ec84         db  0x00 ; '.'
000000000020ec85         db  0x00 ; '.'
000000000020ec86         db  0x00 ; '.'
000000000020ec87         db  0x00 ; '.'
000000000020ec88         db  0x03 ; '.'
000000000020ec89         db  0x00 ; '.'
000000000020ec8a         db  0x00 ; '.'
000000000020ec8b         db  0x00 ; '.'
000000000020ec8c         db  0x00 ; '.'
000000000020ec8d         db  0x00 ; '.'
000000000020ec8e         db  0x00 ; '.'
000000000020ec8f         db  0x00 ; '.'
000000000020ec90         db  0xa8 ; '.'
000000000020ec91         db  0xed ; '.'
000000000020ec92         db  0x20 ; ' '
000000000020ec93         db  0x00 ; '.'
000000000020ec94         db  0x00 ; '.'
000000000020ec95         db  0x00 ; '.'
000000000020ec96         db  0x00 ; '.'
000000000020ec97         db  0x00 ; '.'
000000000020ec98         db  0x02 ; '.'
000000000020ec99         db  0x00 ; '.'
000000000020ec9a         db  0x00 ; '.'
000000000020ec9b         db  0x00 ; '.'
000000000020ec9c         db  0x00 ; '.'
000000000020ec9d         db  0x00 ; '.'
000000000020ec9e         db  0x00 ; '.'
000000000020ec9f         db  0x00 ; '.'
000000000020eca0         db  0x18 ; '.'
000000000020eca1         db  0x06 ; '.'
000000000020eca2         db  0x00 ; '.'
000000000020eca3         db  0x00 ; '.'
000000000020eca4         db  0x00 ; '.'
000000000020eca5         db  0x00 ; '.'
000000000020eca6         db  0x00 ; '.'
000000000020eca7         db  0x00 ; '.'
000000000020eca8         db  0x14 ; '.'
000000000020eca9         db  0x00 ; '.'
000000000020ecaa         db  0x00 ; '.'
000000000020ecab         db  0x00 ; '.'
000000000020ecac         db  0x00 ; '.'
000000000020ecad         db  0x00 ; '.'
000000000020ecae         db  0x00 ; '.'
000000000020ecaf         db  0x00 ; '.'
000000000020ecb0         db  0x07 ; '.'
000000000020ecb1         db  0x00 ; '.'
000000000020ecb2         db  0x00 ; '.'
000000000020ecb3         db  0x00 ; '.'
000000000020ecb4         db  0x00 ; '.'
000000000020ecb5         db  0x00 ; '.'
000000000020ecb6         db  0x00 ; '.'
000000000020ecb7         db  0x00 ; '.'
000000000020ecb8         db  0x17 ; '.'
000000000020ecb9         db  0x00 ; '.'
000000000020ecba         db  0x00 ; '.'
000000000020ecbb         db  0x00 ; '.'
000000000020ecbc         db  0x00 ; '.'
000000000020ecbd         db  0x00 ; '.'
000000000020ecbe         db  0x00 ; '.'
000000000020ecbf         db  0x00 ; '.'
000000000020ecc0         db  0x48 ; 'H'
000000000020ecc1         db  0x13 ; '.'
000000000020ecc2         db  0x00 ; '.'
000000000020ecc3         db  0x00 ; '.'
000000000020ecc4         db  0x00 ; '.'
000000000020ecc5         db  0x00 ; '.'
000000000020ecc6         db  0x00 ; '.'
000000000020ecc7         db  0x00 ; '.'
000000000020ecc8         db  0x07 ; '.'
000000000020ecc9         db  0x00 ; '.'
000000000020ecca         db  0x00 ; '.'
000000000020eccb         db  0x00 ; '.'
000000000020eccc         db  0x00 ; '.'
000000000020eccd         db  0x00 ; '.'
000000000020ecce         db  0x00 ; '.'
000000000020eccf         db  0x00 ; '.'
000000000020ecd0         db  0xe0 ; '.'
000000000020ecd1         db  0x0e ; '.'
000000000020ecd2         db  0x00 ; '.'
000000000020ecd3         db  0x00 ; '.'
000000000020ecd4         db  0x00 ; '.'
000000000020ecd5         db  0x00 ; '.'
000000000020ecd6         db  0x00 ; '.'
000000000020ecd7         db  0x00 ; '.'
000000000020ecd8         db  0x08 ; '.'
000000000020ecd9         db  0x00 ; '.'
000000000020ecda         db  0x00 ; '.'
000000000020ecdb         db  0x00 ; '.'
000000000020ecdc         db  0x00 ; '.'
000000000020ecdd         db  0x00 ; '.'
000000000020ecde         db  0x00 ; '.'
000000000020ecdf         db  0x00 ; '.'
000000000020ece0         db  0x68 ; 'h'
000000000020ece1         db  0x04 ; '.'
000000000020ece2         db  0x00 ; '.'
000000000020ece3         db  0x00 ; '.'
000000000020ece4         db  0x00 ; '.'
000000000020ece5         db  0x00 ; '.'
000000000020ece6         db  0x00 ; '.'
000000000020ece7         db  0x00 ; '.'
000000000020ece8         db  0x09 ; '.'
000000000020ece9         db  0x00 ; '.'
000000000020ecea         db  0x00 ; '.'
000000000020eceb         db  0x00 ; '.'
000000000020ecec         db  0x00 ; '.'
000000000020eced         db  0x00 ; '.'
000000000020ecee         db  0x00 ; '.'
000000000020ecef         db  0x00 ; '.'
000000000020ecf0         db  0x18 ; '.'
000000000020ecf1         db  0x00 ; '.'
000000000020ecf2         db  0x00 ; '.'
000000000020ecf3         db  0x00 ; '.'
000000000020ecf4         db  0x00 ; '.'
000000000020ecf5         db  0x00 ; '.'
000000000020ecf6         db  0x00 ; '.'
000000000020ecf7         db  0x00 ; '.'
000000000020ecf8         db  0x1e ; '.'
000000000020ecf9         db  0x00 ; '.'
000000000020ecfa         db  0x00 ; '.'
000000000020ecfb         db  0x00 ; '.'
000000000020ecfc         db  0x00 ; '.'
000000000020ecfd         db  0x00 ; '.'
000000000020ecfe         db  0x00 ; '.'
000000000020ecff         db  0x00 ; '.'
000000000020ed00         db  0x08 ; '.'
000000000020ed01         db  0x00 ; '.'
000000000020ed02         db  0x00 ; '.'
000000000020ed03         db  0x00 ; '.'
000000000020ed04         db  0x00 ; '.'
000000000020ed05         db  0x00 ; '.'
000000000020ed06         db  0x00 ; '.'
000000000020ed07         db  0x00 ; '.'
000000000020ed08         db  0xfb ; '.'
000000000020ed09         db  0xff ; '.'
000000000020ed0a         db  0xff ; '.'
000000000020ed0b         db  0x6f ; 'o'
000000000020ed0c         db  0x00 ; '.'
000000000020ed0d         db  0x00 ; '.'
000000000020ed0e         db  0x00 ; '.'
000000000020ed0f         db  0x00 ; '.'
000000000020ed10         db  0x01 ; '.'
000000000020ed11         db  0x00 ; '.'
000000000020ed12         db  0x00 ; '.'
000000000020ed13         db  0x08 ; '.'
000000000020ed14         db  0x00 ; '.'
000000000020ed15         db  0x00 ; '.'
000000000020ed16         db  0x00 ; '.'
000000000020ed17         db  0x00 ; '.'
000000000020ed18         db  0xfe ; '.'
000000000020ed19         db  0xff ; '.'
000000000020ed1a         db  0xff ; '.'
000000000020ed1b         db  0x6f ; 'o'
000000000020ed1c         db  0x00 ; '.'
000000000020ed1d         db  0x00 ; '.'
000000000020ed1e         db  0x00 ; '.'
000000000020ed1f         db  0x00 ; '.'
000000000020ed20         db  0x80 ; '.'
000000000020ed21         db  0x0e ; '.'
000000000020ed22         db  0x00 ; '.'
000000000020ed23         db  0x00 ; '.'
000000000020ed24         db  0x00 ; '.'
000000000020ed25         db  0x00 ; '.'
000000000020ed26         db  0x00 ; '.'
000000000020ed27         db  0x00 ; '.'
000000000020ed28         db  0xff ; '.'
000000000020ed29         db  0xff ; '.'
000000000020ed2a         db  0xff ; '.'
000000000020ed2b         db  0x6f ; 'o'
000000000020ed2c         db  0x00 ; '.'
000000000020ed2d         db  0x00 ; '.'
000000000020ed2e         db  0x00 ; '.'
000000000020ed2f         db  0x00 ; '.'
000000000020ed30         db  0x01 ; '.'
000000000020ed31         db  0x00 ; '.'
000000000020ed32         db  0x00 ; '.'
000000000020ed33         db  0x00 ; '.'
000000000020ed34         db  0x00 ; '.'
000000000020ed35         db  0x00 ; '.'
000000000020ed36         db  0x00 ; '.'
000000000020ed37         db  0x00 ; '.'
000000000020ed38         db  0xf0 ; '.'
000000000020ed39         db  0xff ; '.'
000000000020ed3a         db  0xff ; '.'
000000000020ed3b         db  0x6f ; 'o'
000000000020ed3c         db  0x00 ; '.'
000000000020ed3d         db  0x00 ; '.'
000000000020ed3e         db  0x00 ; '.'
000000000020ed3f         db  0x00 ; '.'
000000000020ed40         db  0xda ; '.'
000000000020ed41         db  0x0d ; '.'
000000000020ed42         db  0x00 ; '.'
000000000020ed43         db  0x00 ; '.'
000000000020ed44         db  0x00 ; '.'
000000000020ed45         db  0x00 ; '.'
000000000020ed46         db  0x00 ; '.'
000000000020ed47         db  0x00 ; '.'
000000000020ed48         db  0xf9 ; '.'
000000000020ed49         db  0xff ; '.'
000000000020ed4a         db  0xff ; '.'
000000000020ed4b         db  0x6f ; 'o'
000000000020ed4c         db  0x00 ; '.'
000000000020ed4d         db  0x00 ; '.'
000000000020ed4e         db  0x00 ; '.'
000000000020ed4f         db  0x00 ; '.'
000000000020ed50         db  0x22 ; '"'
000000000020ed51         db  0x00 ; '.'
000000000020ed52         db  0x00 ; '.'
000000000020ed53         db  0x00 ; '.'
000000000020ed54         db  0x00 ; '.'
000000000020ed55         db  0x00 ; '.'
000000000020ed56         db  0x00 ; '.'
000000000020ed57         db  0x00 ; '.'
000000000020ed58         db  0x00 ; '.'
000000000020ed59         db  0x00 ; '.'
000000000020ed5a         db  0x00 ; '.'
000000000020ed5b         db  0x00 ; '.'
000000000020ed5c         db  0x00 ; '.'
000000000020ed5d         db  0x00 ; '.'
000000000020ed5e         db  0x00 ; '.'
000000000020ed5f         db  0x00 ; '.'
000000000020ed60         db  0x00 ; '.'
000000000020ed61         db  0x00 ; '.'
000000000020ed62         db  0x00 ; '.'
000000000020ed63         db  0x00 ; '.'
000000000020ed64         db  0x00 ; '.'
000000000020ed65         db  0x00 ; '.'
000000000020ed66         db  0x00 ; '.'
000000000020ed67         db  0x00 ; '.'
000000000020ed68         db  0x00 ; '.'
000000000020ed69         db  0x00 ; '.'
000000000020ed6a         db  0x00 ; '.'
000000000020ed6b         db  0x00 ; '.'
000000000020ed6c         db  0x00 ; '.'
000000000020ed6d         db  0x00 ; '.'
000000000020ed6e         db  0x00 ; '.'
000000000020ed6f         db  0x00 ; '.'
000000000020ed70         db  0x00 ; '.'
000000000020ed71         db  0x00 ; '.'
000000000020ed72         db  0x00 ; '.'
000000000020ed73         db  0x00 ; '.'
000000000020ed74         db  0x00 ; '.'
000000000020ed75         db  0x00 ; '.'
000000000020ed76         db  0x00 ; '.'
000000000020ed77         db  0x00 ; '.'
000000000020ed78         db  0x00 ; '.'
000000000020ed79         db  0x00 ; '.'
000000000020ed7a         db  0x00 ; '.'
000000000020ed7b         db  0x00 ; '.'
000000000020ed7c         db  0x00 ; '.'
000000000020ed7d         db  0x00 ; '.'
000000000020ed7e         db  0x00 ; '.'
000000000020ed7f         db  0x00 ; '.'
000000000020ed80         db  0x00 ; '.'
000000000020ed81         db  0x00 ; '.'
000000000020ed82         db  0x00 ; '.'
000000000020ed83         db  0x00 ; '.'
000000000020ed84         db  0x00 ; '.'
000000000020ed85         db  0x00 ; '.'
000000000020ed86         db  0x00 ; '.'
000000000020ed87         db  0x00 ; '.'
000000000020ed88         db  0x00 ; '.'
000000000020ed89         db  0x00 ; '.'
000000000020ed8a         db  0x00 ; '.'
000000000020ed8b         db  0x00 ; '.'
000000000020ed8c         db  0x00 ; '.'
000000000020ed8d         db  0x00 ; '.'
000000000020ed8e         db  0x00 ; '.'
000000000020ed8f         db  0x00 ; '.'
000000000020ed90         db  0x00 ; '.'
000000000020ed91         db  0x00 ; '.'
000000000020ed92         db  0x00 ; '.'
000000000020ed93         db  0x00 ; '.'
000000000020ed94         db  0x00 ; '.'
000000000020ed95         db  0x00 ; '.'
000000000020ed96         db  0x00 ; '.'
000000000020ed97         db  0x00 ; '.'
000000000020ed98         db  0x00 ; '.'
000000000020ed99         db  0x00 ; '.'
000000000020ed9a         db  0x00 ; '.'
000000000020ed9b         db  0x00 ; '.'
000000000020ed9c         db  0x00 ; '.'
000000000020ed9d         db  0x00 ; '.'
000000000020ed9e         db  0x00 ; '.'
000000000020ed9f         db  0x00 ; '.'
000000000020eda0         db  0x00 ; '.'
000000000020eda1         db  0x00 ; '.'
000000000020eda2         db  0x00 ; '.'
000000000020eda3         db  0x00 ; '.'
000000000020eda4         db  0x00 ; '.'
000000000020eda5         db  0x00 ; '.'
000000000020eda6         db  0x00 ; '.'
000000000020eda7         db  0x00 ; '.'


        ; Section .got
        ; Range: [0x20eda8; 0x20eff8[ (592 bytes)
        ; File offset : [60840; 61432[ (592 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     _GLOBAL_OFFSET_TABLE_:
000000000020eda8         db  0xb8 ; '.'
000000000020eda9         db  0xeb ; '.'
000000000020edaa         db  0x20 ; ' '
000000000020edab         db  0x00 ; '.'
000000000020edac         db  0x00 ; '.'
000000000020edad         db  0x00 ; '.'
000000000020edae         db  0x00 ; '.'
000000000020edaf         db  0x00 ; '.'
                     qword_20edb0:
000000000020edb0         dq         0x0000000000000000                          ; DATA XREF=0x1980
000000000020edb8         db  0x00 ; '.'                                         ; DATA XREF=0x1986
000000000020edb9         db  0x00 ; '.'
000000000020edba         db  0x00 ; '.'
000000000020edbb         db  0x00 ; '.'
000000000020edbc         db  0x00 ; '.'
000000000020edbd         db  0x00 ; '.'
000000000020edbe         db  0x00 ; '.'
000000000020edbf         db  0x00 ; '.'
                     abort@GOT:        // abort
000000000020edc0         dq         0x000000000020f278                          ; DATA XREF=j_abort
                     __errno_location@GOT:        // __errno_location
000000000020edc8         dq         0x000000000020f280                          ; DATA XREF=j___errno_location
                     strncmp@GOT:        // strncmp
000000000020edd0         dq         0x000000000020f288                          ; DATA XREF=j_strncmp
                     _exit@GOT:        // _exit
000000000020edd8         dq         0x000000000020f298                          ; DATA XREF=j__exit
                     __fpending@GOT:        // __fpending
000000000020ede0         dq         0x000000000020f2a0                          ; DATA XREF=j___fpending
                     unlinkat@GOT:        // unlinkat
000000000020ede8         dq         0x000000000020f2a8                          ; DATA XREF=j_unlinkat
                     qsort@GOT:        // qsort
000000000020edf0         dq         0x000000000020f2b0                          ; DATA XREF=j_qsort
                     isatty@GOT:        // isatty
000000000020edf8         dq         0x000000000020f2b8                          ; DATA XREF=j_isatty
                     faccessat@GOT:        // faccessat
000000000020ee00         dq         0x000000000020f2c0                          ; DATA XREF=j_faccessat
                     fcntl@GOT:        // fcntl
000000000020ee08         dq         0x000000000020f2c8                          ; DATA XREF=j_fcntl
                     textdomain@GOT:        // textdomain
000000000020ee10         dq         0x000000000020f2d0                          ; DATA XREF=j_textdomain
                     fclose@GOT:        // fclose
000000000020ee18         dq         0x000000000020f2d8                          ; DATA XREF=j_fclose
                     bindtextdomain@GOT:        // bindtextdomain
000000000020ee20         dq         0x000000000020f2e0                          ; DATA XREF=j_bindtextdomain
                     dcgettext@GOT:        // dcgettext
000000000020ee28         dq         0x000000000020f2e8                          ; DATA XREF=j_dcgettext
                     __ctype_get_mb_cur_max@GOT:        // __ctype_get_mb_cur_max
000000000020ee30         dq         0x000000000020f2f0                          ; DATA XREF=j___ctype_get_mb_cur_max
                     strlen@GOT:        // strlen
000000000020ee38         dq         0x000000000020f2f8                          ; DATA XREF=j_strlen
                     __lxstat@GOT:        // __lxstat
000000000020ee40         dq         0x000000000020f300                          ; DATA XREF=j___lxstat
                     openat@GOT:        // openat
000000000020ee48         dq         0x000000000020f308                          ; DATA XREF=j_openat
                     __stack_chk_fail@GOT:        // __stack_chk_fail
000000000020ee50         dq         0x000000000020f310                          ; DATA XREF=j___stack_chk_fail
                     getopt_long@GOT:        // getopt_long
000000000020ee58         dq         0x000000000020f318                          ; DATA XREF=j_getopt_long
                     mbrtowc@GOT:        // mbrtowc
000000000020ee60         dq         0x000000000020f320                          ; DATA XREF=j_mbrtowc
                     __fxstatat@GOT:        // __fxstatat
000000000020ee68         dq         0x000000000020f328                          ; DATA XREF=j___fxstatat
                     __overflow@GOT:        // __overflow
000000000020ee70         dq         0x000000000020f330                          ; DATA XREF=j___overflow
                     strrchr@GOT:        // strrchr
000000000020ee78         dq         0x000000000020f338                          ; DATA XREF=j_strrchr
                     lseek@GOT:        // lseek
000000000020ee80         dq         0x000000000020f340                          ; DATA XREF=j_lseek
                     __assert_fail@GOT:        // __assert_fail
000000000020ee88         dq         0x000000000020f348                          ; DATA XREF=j___assert_fail
                     memset@GOT:        // memset
000000000020ee90         dq         0x000000000020f350                          ; DATA XREF=j_memset
                     geteuid@GOT:        // geteuid
000000000020ee98         dq         0x000000000020f358                          ; DATA XREF=j_geteuid
                     close@GOT:        // close
000000000020eea0         dq         0x000000000020f360                          ; DATA XREF=j_close
                     closedir@GOT:        // closedir
000000000020eea8         dq         0x000000000020f368                          ; DATA XREF=j_closedir
                     memcmp@GOT:        // memcmp
000000000020eeb0         dq         0x000000000020f378                          ; DATA XREF=j_memcmp
                     fputs_unlocked@GOT:        // fputs_unlocked
000000000020eeb8         dq         0x000000000020f380                          ; DATA XREF=j_fputs_unlocked
                     calloc@GOT:        // calloc
000000000020eec0         dq         0x000000000020f388                          ; DATA XREF=j_calloc
                     __getdelim@GOT:        // __getdelim
000000000020eec8         dq         0x000000000020f390                          ; DATA XREF=j___getdelim
                     strcmp@GOT:        // strcmp
000000000020eed0         dq         0x000000000020f398                          ; DATA XREF=j_strcmp
                     dirfd@GOT:        // dirfd
000000000020eed8         dq         0x000000000020f3a0                          ; DATA XREF=j_dirfd
                     rpmatch@GOT:        // rpmatch
000000000020eee0         dq         0x000000000020f3a8                          ; DATA XREF=j_rpmatch
                     memcpy@GOT:        // memcpy
000000000020eee8         dq         0x000000000020f3b8                          ; DATA XREF=j_memcpy
                     fileno@GOT:        // fileno
000000000020eef0         dq         0x000000000020f3c0                          ; DATA XREF=j_fileno
                     __xstat@GOT:        // __xstat
000000000020eef8         dq         0x000000000020f3c8                          ; DATA XREF=j___xstat
                     readdir@GOT:        // readdir
000000000020ef00         dq         0x000000000020f3d0                          ; DATA XREF=j_readdir
                     malloc@GOT:        // malloc
000000000020ef08         dq         0x000000000020f3d8                          ; DATA XREF=j_malloc
                     fflush@GOT:        // fflush
000000000020ef10         dq         0x000000000020f3e0                          ; DATA XREF=j_fflush
                     nl_langinfo@GOT:        // nl_langinfo
000000000020ef18         dq         0x000000000020f3e8                          ; DATA XREF=j_nl_langinfo
                     __fxstat@GOT:        // __fxstat
000000000020ef20         dq         0x000000000020f3f0                          ; DATA XREF=j___fxstat
                     __freading@GOT:        // __freading
000000000020ef28         dq         0x000000000020f3f8                          ; DATA XREF=j___freading
                     fchdir@GOT:        // fchdir
000000000020ef30         dq         0x000000000020f400                          ; DATA XREF=j_fchdir
                     realloc@GOT:        // realloc
000000000020ef38         dq         0x000000000020f408                          ; DATA XREF=j_realloc
                     setlocale@GOT:        // setlocale
000000000020ef40         dq         0x000000000020f410                          ; DATA XREF=j_setlocale
                     __printf_chk@GOT:        // __printf_chk
000000000020ef48         dq         0x000000000020f418                          ; DATA XREF=j___printf_chk
                     mempcpy@GOT:        // mempcpy
000000000020ef50         dq         0x000000000020f420                          ; DATA XREF=j_mempcpy
                     memmove@GOT:        // memmove
000000000020ef58         dq         0x000000000020f428                          ; DATA XREF=j_memmove
                     error@GOT:        // error
000000000020ef60         dq         0x000000000020f430                          ; DATA XREF=j_error
                     open@GOT:        // open
000000000020ef68         dq         0x000000000020f438                          ; DATA XREF=j_open
                     fseeko@GOT:        // fseeko
000000000020ef70         dq         0x000000000020f440                          ; DATA XREF=j_fseeko
                     dcngettext@GOT:        // dcngettext
000000000020ef78         dq         0x000000000020f448                          ; DATA XREF=j_dcngettext
                     fdopendir@GOT:        // fdopendir
000000000020ef80         dq         0x000000000020f450                          ; DATA XREF=j_fdopendir
                     fstatfs@GOT:        // fstatfs
000000000020ef88         dq         0x000000000020f458                          ; DATA XREF=j_fstatfs
                     __cxa_atexit@GOT:        // __cxa_atexit
000000000020ef90         dq         0x000000000020f460                          ; DATA XREF=j___cxa_atexit
                     exit@GOT:        // exit
000000000020ef98         dq         0x000000000020f468                          ; DATA XREF=j_exit
                     fwrite@GOT:        // fwrite
000000000020efa0         dq         0x000000000020f470                          ; DATA XREF=j_fwrite
                     __fprintf_chk@GOT:        // __fprintf_chk
000000000020efa8         dq         0x000000000020f478                          ; DATA XREF=j___fprintf_chk
                     mbsinit@GOT:        // mbsinit
000000000020efb0         dq         0x000000000020f488                          ; DATA XREF=j_mbsinit
                     iswprint@GOT:        // iswprint
000000000020efb8         dq         0x000000000020f490                          ; DATA XREF=j_iswprint
                     __ctype_b_loc@GOT:        // __ctype_b_loc
000000000020efc0         dq         0x000000000020f4a0                          ; DATA XREF=j___ctype_b_loc
                     qword_20efc8:
000000000020efc8         dq         0x0000000000000000                          ; DATA XREF=sub_1da0, filesystem_type+96, setup_dir.isra.4+12
                     qword_20efd0:
000000000020efd0         dq         0x0000000000000000                          ; DATA XREF=deregister_tm_clones+23
000000000020efd8         db  0x00 ; '.'                                         ; DATA XREF=_start+36
000000000020efd9         db  0x00 ; '.'
000000000020efda         db  0x00 ; '.'
000000000020efdb         db  0x00 ; '.'
000000000020efdc         db  0x00 ; '.'
000000000020efdd         db  0x00 ; '.'
000000000020efde         db  0x00 ; '.'
000000000020efdf         db  0x00 ; '.'
                     qword_20efe0:
000000000020efe0         dq         0x0000000000000000                          ; DATA XREF=_init+4
                     qword_20efe8:
000000000020efe8         dq         0x0000000000000000                          ; DATA XREF=register_tm_clones+40
                     qword_20eff0:
000000000020eff0         dq         0x0000000000000000                          ; DATA XREF=j_qword_20eff0, __do_global_dtors_aux+9
000000000020eff8         db  0x00 ; '.'
000000000020eff9         db  0x00 ; '.'
000000000020effa         db  0x00 ; '.'
000000000020effb         db  0x00 ; '.'
000000000020effc         db  0x00 ; '.'
000000000020effd         db  0x00 ; '.'
000000000020effe         db  0x00 ; '.'
000000000020efff         db  0x00 ; '.'


        ; Section .data
        ; Range: [0x20f000; 0x20f0a0[ (160 bytes)
        ; File offset : [61440; 61600[ (160 bytes)
        ; Flags: 0x3
        ;   SHT_PROGBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

000000000020f000         db  0x00 ; '.'
000000000020f001         db  0x00 ; '.'
000000000020f002         db  0x00 ; '.'
000000000020f003         db  0x00 ; '.'
000000000020f004         db  0x00 ; '.'
000000000020f005         db  0x00 ; '.'
000000000020f006         db  0x00 ; '.'
000000000020f007         db  0x00 ; '.'
                     __dso_handle:
000000000020f008         dq         0x000000000020f008                          ; DATA XREF=__do_global_dtors_aux+23, atexit, __dso_handle
                     Version:
000000000020f010         dq         0x000000000000b833                          ; "8.31", DATA XREF=main+527
                     argmatch_die:
000000000020f018         dq         0x00000000000038f0                          ; DATA XREF=main+376
                     exit_failure:
000000000020f020         dd         0x00000001                                  ; DATA XREF=close_stdin+168, close_stdout+130, xalloc_die+23
000000000020f024         db  0x00 ; '.'
000000000020f025         db  0x00 ; '.'
000000000020f026         db  0x00 ; '.'
000000000020f027         db  0x00 ; '.'
000000000020f028         db  0x00 ; '.'
000000000020f029         db  0x00 ; '.'
000000000020f02a         db  0x00 ; '.'
000000000020f02b         db  0x00 ; '.'
000000000020f02c         db  0x00 ; '.'
000000000020f02d         db  0x00 ; '.'
000000000020f02e         db  0x00 ; '.'
000000000020f02f         db  0x00 ; '.'
000000000020f030         db  0x00 ; '.'
000000000020f031         db  0x00 ; '.'
000000000020f032         db  0x00 ; '.'
000000000020f033         db  0x00 ; '.'
000000000020f034         db  0x00 ; '.'
000000000020f035         db  0x00 ; '.'
000000000020f036         db  0x00 ; '.'
000000000020f037         db  0x00 ; '.'
000000000020f038         db  0x00 ; '.'
000000000020f039         db  0x00 ; '.'
000000000020f03a         db  0x00 ; '.'
000000000020f03b         db  0x00 ; '.'
000000000020f03c         db  0x00 ; '.'
000000000020f03d         db  0x00 ; '.'
000000000020f03e         db  0x00 ; '.'
000000000020f03f         db  0x00 ; '.'
                     quote_quoting_options:
000000000020f040         db  0x08 ; '.'                                         ; DATA XREF=quote_n_mem, quote_mem, quote_n, quote
000000000020f041         db  0x00 ; '.'
000000000020f042         db  0x00 ; '.'
000000000020f043         db  0x00 ; '.'
000000000020f044         db  0x00 ; '.'
000000000020f045         db  0x00 ; '.'
000000000020f046         db  0x00 ; '.'
000000000020f047         db  0x00 ; '.'
000000000020f048         db  0x00 ; '.'
000000000020f049         db  0x00 ; '.'
000000000020f04a         db  0x00 ; '.'
000000000020f04b         db  0x00 ; '.'
000000000020f04c         db  0x00 ; '.'
000000000020f04d         db  0x00 ; '.'
000000000020f04e         db  0x00 ; '.'
000000000020f04f         db  0x00 ; '.'
000000000020f050         db  0x00 ; '.'
000000000020f051         db  0x00 ; '.'
000000000020f052         db  0x00 ; '.'
000000000020f053         db  0x00 ; '.'
000000000020f054         db  0x00 ; '.'
000000000020f055         db  0x00 ; '.'
000000000020f056         db  0x00 ; '.'
000000000020f057         db  0x00 ; '.'
000000000020f058         db  0x00 ; '.'
000000000020f059         db  0x00 ; '.'
000000000020f05a         db  0x00 ; '.'
000000000020f05b         db  0x00 ; '.'
000000000020f05c         db  0x00 ; '.'
000000000020f05d         db  0x00 ; '.'
000000000020f05e         db  0x00 ; '.'
000000000020f05f         db  0x00 ; '.'
000000000020f060         db  0x00 ; '.'
000000000020f061         db  0x00 ; '.'
000000000020f062         db  0x00 ; '.'
000000000020f063         db  0x00 ; '.'
000000000020f064         db  0x00 ; '.'
000000000020f065         db  0x00 ; '.'
000000000020f066         db  0x00 ; '.'
000000000020f067         db  0x00 ; '.'
000000000020f068         db  0x00 ; '.'
000000000020f069         db  0x00 ; '.'
000000000020f06a         db  0x00 ; '.'
000000000020f06b         db  0x00 ; '.'
000000000020f06c         db  0x00 ; '.'
000000000020f06d         db  0x00 ; '.'
000000000020f06e         db  0x00 ; '.'
000000000020f06f         db  0x00 ; '.'
000000000020f070         db  0x00 ; '.'
000000000020f071         db  0x00 ; '.'
000000000020f072         db  0x00 ; '.'
000000000020f073         db  0x00 ; '.'
000000000020f074         db  0x00 ; '.'
000000000020f075         db  0x00 ; '.'
000000000020f076         db  0x00 ; '.'
000000000020f077         db  0x00 ; '.'
                     nslots:
000000000020f078         dd         0x00000001                                  ; DATA XREF=quotearg_n_options+58, quotearg_n_options+125, quotearg_n_options+158, quotearg_free, quotearg_free+133
000000000020f07c         db  0x00 ; '.'
000000000020f07d         db  0x00 ; '.'
000000000020f07e         db  0x00 ; '.'
000000000020f07f         db  0x00 ; '.'
                     slotvec:
000000000020f080         dq         0x000000000020f090                          ; DATA XREF=quotearg_n_options+41, quotearg_n_options+118, quotearg_n_options+402, quotearg_free+8, quotearg_free+125
000000000020f088         db  0x00 ; '.'
000000000020f089         db  0x00 ; '.'
000000000020f08a         db  0x00 ; '.'
000000000020f08b         db  0x00 ; '.'
000000000020f08c         db  0x00 ; '.'
000000000020f08d         db  0x00 ; '.'
000000000020f08e         db  0x00 ; '.'
000000000020f08f         db  0x00 ; '.'
                     slotvec0:
000000000020f090         dq         1.26481e-321, 1.06663e-317                  ; DATA XREF=quotearg_n_options+84, quotearg_n_options+391, quotearg_free+87, quotearg_free+105, slotvec


        ; Section .bss
        ; Range: [0x20f0a0; 0x20f260[ (448 bytes)
        ; No data on disk
        ; Flags: 0x3
        ;   SHT_NOBITS
        ;   SHF_WRITE
        ;   SHF_ALLOC

                     program_invocation_short_name@@GLIBC_2.2.5:
000000000020f0a0         db  0x00 ; '.'                                         ; DATA XREF=deregister_tm_clones, deregister_tm_clones+8, register_tm_clones, register_tm_clones+7, set_program_name+102
000000000020f0a1         db  0x00 ; '.'
000000000020f0a2         db  0x00 ; '.'
000000000020f0a3         db  0x00 ; '.'
000000000020f0a4         db  0x00 ; '.'
000000000020f0a5         db  0x00 ; '.'
000000000020f0a6         db  0x00 ; '.'
000000000020f0a7         db  0x00 ; '.'
                     stdout@@GLIBC_2.2.5:
000000000020f0a8         db  0x00 ; '.'                                         ; DATA XREF=main+518, usage+125, usage+162, usage+199, usage+236, usage+273, usage+310, usage+347, usage+384, usage+468, usage+1056
000000000020f0a9         db  0x00 ; '.'
000000000020f0aa         db  0x00 ; '.'
000000000020f0ab         db  0x00 ; '.'
000000000020f0ac         db  0x00 ; '.'
000000000020f0ad         db  0x00 ; '.'
000000000020f0ae         db  0x00 ; '.'
000000000020f0af         db  0x00 ; '.'
                     stdin@@GLIBC_2.2.5:
000000000020f0b0         db  0x00 ; '.'                                         ; DATA XREF=close_stdin+4, close_stdin+63, close_stdin+201, yesno+12
000000000020f0b1         db  0x00 ; '.'
000000000020f0b2         db  0x00 ; '.'
000000000020f0b3         db  0x00 ; '.'
000000000020f0b4         db  0x00 ; '.'
000000000020f0b5         db  0x00 ; '.'
000000000020f0b6         db  0x00 ; '.'
000000000020f0b7         db  0x00 ; '.'
                     optind@@GLIBC_2.2.5:
000000000020f0b8         db  0x00 ; '.'                                         ; DATA XREF=main+608, main+782, main+810
000000000020f0b9         db  0x00 ; '.'
000000000020f0ba         db  0x00 ; '.'
000000000020f0bb         db  0x00 ; '.'
000000000020f0bc         db  0x00 ; '.'
000000000020f0bd         db  0x00 ; '.'
000000000020f0be         db  0x00 ; '.'
000000000020f0bf         db  0x00 ; '.'
                     optarg@@GLIBC_2.2.5:
000000000020f0c0         db  0x00 ; '.'                                         ; DATA XREF=main+364, main+656
000000000020f0c1         db  0x00 ; '.'
000000000020f0c2         db  0x00 ; '.'
000000000020f0c3         db  0x00 ; '.'
000000000020f0c4         db  0x00 ; '.'
000000000020f0c5         db  0x00 ; '.'
000000000020f0c6         db  0x00 ; '.'
000000000020f0c7         db  0x00 ; '.'
                     __progname_full@@GLIBC_2.2.5:
000000000020f0c8         db  0x00 ; '.'                                         ; DATA XREF=set_program_name+116
000000000020f0c9         db  0x00 ; '.'
000000000020f0ca         db  0x00 ; '.'
000000000020f0cb         db  0x00 ; '.'
000000000020f0cc         db  0x00 ; '.'
000000000020f0cd         db  0x00 ; '.'
000000000020f0ce         db  0x00 ; '.'
000000000020f0cf         db  0x00 ; '.'
000000000020f0d0         db  0x00 ; '.'
000000000020f0d1         db  0x00 ; '.'
000000000020f0d2         db  0x00 ; '.'
000000000020f0d3         db  0x00 ; '.'
000000000020f0d4         db  0x00 ; '.'
000000000020f0d5         db  0x00 ; '.'
000000000020f0d6         db  0x00 ; '.'
000000000020f0d7         db  0x00 ; '.'
000000000020f0d8         db  0x00 ; '.'
000000000020f0d9         db  0x00 ; '.'
000000000020f0da         db  0x00 ; '.'
000000000020f0db         db  0x00 ; '.'
000000000020f0dc         db  0x00 ; '.'
000000000020f0dd         db  0x00 ; '.'
000000000020f0de         db  0x00 ; '.'
000000000020f0df         db  0x00 ; '.'
                     stderr@@GLIBC_2.2.5:
000000000020f0e0         db  0x00 ; '.'                                         ; DATA XREF=main+885, main+1169, usage+61, prompt+498, prompt+712, argmatch_valid+37, argmatch_valid+95, argmatch_valid+174, argmatch_valid+216, close_stdout+44, set_program_name+125
000000000020f0e1         db  0x00 ; '.'
000000000020f0e2         db  0x00 ; '.'
000000000020f0e3         db  0x00 ; '.'
000000000020f0e4         db  0x00 ; '.'
000000000020f0e5         db  0x00 ; '.'
000000000020f0e6         db  0x00 ; '.'
000000000020f0e7         db  0x00 ; '.'
                     completed.7697:
000000000020f0e8         db  0x00 ; '.'                                         ; DATA XREF=__do_global_dtors_aux, __do_global_dtors_aux+40
000000000020f0e9         db  0x00 ; '.'
000000000020f0ea         db  0x00 ; '.'
000000000020f0eb         db  0x00 ; '.'
000000000020f0ec         db  0x00 ; '.'
000000000020f0ed         db  0x00 ; '.'
000000000020f0ee         db  0x00 ; '.'
000000000020f0ef         db  0x00 ; '.'
                     dev_ino_buf.6971:
000000000020f0f0         db  0x00 ; '.'                                         ; DATA XREF=main+1252
000000000020f0f1         db  0x00 ; '.'
000000000020f0f2         db  0x00 ; '.'
000000000020f0f3         db  0x00 ; '.'
000000000020f0f4         db  0x00 ; '.'
000000000020f0f5         db  0x00 ; '.'
000000000020f0f6         db  0x00 ; '.'
000000000020f0f7         db  0x00 ; '.'
000000000020f0f8         db  0x00 ; '.'
000000000020f0f9         db  0x00 ; '.'
000000000020f0fa         db  0x00 ; '.'
000000000020f0fb         db  0x00 ; '.'
000000000020f0fc         db  0x00 ; '.'
000000000020f0fd         db  0x00 ; '.'
000000000020f0fe         db  0x00 ; '.'
000000000020f0ff         db  0x00 ; '.'
                     file_name:
000000000020f100         db  0x00 ; '.'                                         ; DATA XREF=close_stdin_set_file_name, close_stdin+107
000000000020f101         db  0x00 ; '.'
000000000020f102         db  0x00 ; '.'
000000000020f103         db  0x00 ; '.'
000000000020f104         db  0x00 ; '.'
000000000020f105         db  0x00 ; '.'
000000000020f106         db  0x00 ; '.'
000000000020f107         db  0x00 ; '.'
                     ignore_EPIPE:
000000000020f108         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_ignore_EPIPE, close_stdout+27
000000000020f109         db  0x00 ; '.'
000000000020f10a         db  0x00 ; '.'
000000000020f10b         db  0x00 ; '.'
000000000020f10c         db  0x00 ; '.'
000000000020f10d         db  0x00 ; '.'
000000000020f10e         db  0x00 ; '.'
000000000020f10f         db  0x00 ; '.'
                     file_name_20f110:        // file_name
000000000020f110         db  0x00 ; '.'                                         ; DATA XREF=close_stdout_set_file_name, close_stdout+86
000000000020f111         db  0x00 ; '.'
000000000020f112         db  0x00 ; '.'
000000000020f113         db  0x00 ; '.'
000000000020f114         db  0x00 ; '.'
000000000020f115         db  0x00 ; '.'
000000000020f116         db  0x00 ; '.'
000000000020f117         db  0x00 ; '.'
                     program_name:
000000000020f118         db  0x00 ; '.'                                         ; DATA XREF=main+873, main+1235, usage+20, usage+421, prompt+466, prompt+680, set_program_name+109
000000000020f119         db  0x00 ; '.'
000000000020f11a         db  0x00 ; '.'
000000000020f11b         db  0x00 ; '.'
000000000020f11c         db  0x00 ; '.'
000000000020f11d         db  0x00 ; '.'
000000000020f11e         db  0x00 ; '.'
000000000020f11f         db  0x00 ; '.'
                     slot0:
000000000020f120         db  0x00 ; '.'                                         ; DATA XREF=quotearg_n_options+254, quotearg_free+70, slotvec0
000000000020f121         db  0x00 ; '.'
000000000020f122         db  0x00 ; '.'
000000000020f123         db  0x00 ; '.'
000000000020f124         db  0x00 ; '.'
000000000020f125         db  0x00 ; '.'
000000000020f126         db  0x00 ; '.'
000000000020f127         db  0x00 ; '.'
000000000020f128         db  0x00 ; '.'
000000000020f129         db  0x00 ; '.'
000000000020f12a         db  0x00 ; '.'
000000000020f12b         db  0x00 ; '.'
000000000020f12c         db  0x00 ; '.'
000000000020f12d         db  0x00 ; '.'
000000000020f12e         db  0x00 ; '.'
000000000020f12f         db  0x00 ; '.'
000000000020f130         db  0x00 ; '.'
000000000020f131         db  0x00 ; '.'
000000000020f132         db  0x00 ; '.'
000000000020f133         db  0x00 ; '.'
000000000020f134         db  0x00 ; '.'
000000000020f135         db  0x00 ; '.'
000000000020f136         db  0x00 ; '.'
000000000020f137         db  0x00 ; '.'
000000000020f138         db  0x00 ; '.'
000000000020f139         db  0x00 ; '.'
000000000020f13a         db  0x00 ; '.'
000000000020f13b         db  0x00 ; '.'
000000000020f13c         db  0x00 ; '.'
000000000020f13d         db  0x00 ; '.'
000000000020f13e         db  0x00 ; '.'
000000000020f13f         db  0x00 ; '.'
000000000020f140         db  0x00 ; '.'
000000000020f141         db  0x00 ; '.'
000000000020f142         db  0x00 ; '.'
000000000020f143         db  0x00 ; '.'
000000000020f144         db  0x00 ; '.'
000000000020f145         db  0x00 ; '.'
000000000020f146         db  0x00 ; '.'
000000000020f147         db  0x00 ; '.'
000000000020f148         db  0x00 ; '.'
000000000020f149         db  0x00 ; '.'
000000000020f14a         db  0x00 ; '.'
000000000020f14b         db  0x00 ; '.'
000000000020f14c         db  0x00 ; '.'
000000000020f14d         db  0x00 ; '.'
000000000020f14e         db  0x00 ; '.'
000000000020f14f         db  0x00 ; '.'
000000000020f150         db  0x00 ; '.'
000000000020f151         db  0x00 ; '.'
000000000020f152         db  0x00 ; '.'
000000000020f153         db  0x00 ; '.'
000000000020f154         db  0x00 ; '.'
000000000020f155         db  0x00 ; '.'
000000000020f156         db  0x00 ; '.'
000000000020f157         db  0x00 ; '.'
000000000020f158         db  0x00 ; '.'
000000000020f159         db  0x00 ; '.'
000000000020f15a         db  0x00 ; '.'
000000000020f15b         db  0x00 ; '.'
000000000020f15c         db  0x00 ; '.'
000000000020f15d         db  0x00 ; '.'
000000000020f15e         db  0x00 ; '.'
000000000020f15f         db  0x00 ; '.'
000000000020f160         db  0x00 ; '.'
000000000020f161         db  0x00 ; '.'
000000000020f162         db  0x00 ; '.'
000000000020f163         db  0x00 ; '.'
000000000020f164         db  0x00 ; '.'
000000000020f165         db  0x00 ; '.'
000000000020f166         db  0x00 ; '.'
000000000020f167         db  0x00 ; '.'
000000000020f168         db  0x00 ; '.'
000000000020f169         db  0x00 ; '.'
000000000020f16a         db  0x00 ; '.'
000000000020f16b         db  0x00 ; '.'
000000000020f16c         db  0x00 ; '.'
000000000020f16d         db  0x00 ; '.'
000000000020f16e         db  0x00 ; '.'
000000000020f16f         db  0x00 ; '.'
000000000020f170         db  0x00 ; '.'
000000000020f171         db  0x00 ; '.'
000000000020f172         db  0x00 ; '.'
000000000020f173         db  0x00 ; '.'
000000000020f174         db  0x00 ; '.'
000000000020f175         db  0x00 ; '.'
000000000020f176         db  0x00 ; '.'
000000000020f177         db  0x00 ; '.'
000000000020f178         db  0x00 ; '.'
000000000020f179         db  0x00 ; '.'
000000000020f17a         db  0x00 ; '.'
000000000020f17b         db  0x00 ; '.'
000000000020f17c         db  0x00 ; '.'
000000000020f17d         db  0x00 ; '.'
000000000020f17e         db  0x00 ; '.'
000000000020f17f         db  0x00 ; '.'
000000000020f180         db  0x00 ; '.'
000000000020f181         db  0x00 ; '.'
000000000020f182         db  0x00 ; '.'
000000000020f183         db  0x00 ; '.'
000000000020f184         db  0x00 ; '.'
000000000020f185         db  0x00 ; '.'
000000000020f186         db  0x00 ; '.'
000000000020f187         db  0x00 ; '.'
000000000020f188         db  0x00 ; '.'
000000000020f189         db  0x00 ; '.'
000000000020f18a         db  0x00 ; '.'
000000000020f18b         db  0x00 ; '.'
000000000020f18c         db  0x00 ; '.'
000000000020f18d         db  0x00 ; '.'
000000000020f18e         db  0x00 ; '.'
000000000020f18f         db  0x00 ; '.'
000000000020f190         db  0x00 ; '.'
000000000020f191         db  0x00 ; '.'
000000000020f192         db  0x00 ; '.'
000000000020f193         db  0x00 ; '.'
000000000020f194         db  0x00 ; '.'
000000000020f195         db  0x00 ; '.'
000000000020f196         db  0x00 ; '.'
000000000020f197         db  0x00 ; '.'
000000000020f198         db  0x00 ; '.'
000000000020f199         db  0x00 ; '.'
000000000020f19a         db  0x00 ; '.'
000000000020f19b         db  0x00 ; '.'
000000000020f19c         db  0x00 ; '.'
000000000020f19d         db  0x00 ; '.'
000000000020f19e         db  0x00 ; '.'
000000000020f19f         db  0x00 ; '.'
000000000020f1a0         db  0x00 ; '.'
000000000020f1a1         db  0x00 ; '.'
000000000020f1a2         db  0x00 ; '.'
000000000020f1a3         db  0x00 ; '.'
000000000020f1a4         db  0x00 ; '.'
000000000020f1a5         db  0x00 ; '.'
000000000020f1a6         db  0x00 ; '.'
000000000020f1a7         db  0x00 ; '.'
000000000020f1a8         db  0x00 ; '.'
000000000020f1a9         db  0x00 ; '.'
000000000020f1aa         db  0x00 ; '.'
000000000020f1ab         db  0x00 ; '.'
000000000020f1ac         db  0x00 ; '.'
000000000020f1ad         db  0x00 ; '.'
000000000020f1ae         db  0x00 ; '.'
000000000020f1af         db  0x00 ; '.'
000000000020f1b0         db  0x00 ; '.'
000000000020f1b1         db  0x00 ; '.'
000000000020f1b2         db  0x00 ; '.'
000000000020f1b3         db  0x00 ; '.'
000000000020f1b4         db  0x00 ; '.'
000000000020f1b5         db  0x00 ; '.'
000000000020f1b6         db  0x00 ; '.'
000000000020f1b7         db  0x00 ; '.'
000000000020f1b8         db  0x00 ; '.'
000000000020f1b9         db  0x00 ; '.'
000000000020f1ba         db  0x00 ; '.'
000000000020f1bb         db  0x00 ; '.'
000000000020f1bc         db  0x00 ; '.'
000000000020f1bd         db  0x00 ; '.'
000000000020f1be         db  0x00 ; '.'
000000000020f1bf         db  0x00 ; '.'
000000000020f1c0         db  0x00 ; '.'
000000000020f1c1         db  0x00 ; '.'
000000000020f1c2         db  0x00 ; '.'
000000000020f1c3         db  0x00 ; '.'
000000000020f1c4         db  0x00 ; '.'
000000000020f1c5         db  0x00 ; '.'
000000000020f1c6         db  0x00 ; '.'
000000000020f1c7         db  0x00 ; '.'
000000000020f1c8         db  0x00 ; '.'
000000000020f1c9         db  0x00 ; '.'
000000000020f1ca         db  0x00 ; '.'
000000000020f1cb         db  0x00 ; '.'
000000000020f1cc         db  0x00 ; '.'
000000000020f1cd         db  0x00 ; '.'
000000000020f1ce         db  0x00 ; '.'
000000000020f1cf         db  0x00 ; '.'
000000000020f1d0         db  0x00 ; '.'
000000000020f1d1         db  0x00 ; '.'
000000000020f1d2         db  0x00 ; '.'
000000000020f1d3         db  0x00 ; '.'
000000000020f1d4         db  0x00 ; '.'
000000000020f1d5         db  0x00 ; '.'
000000000020f1d6         db  0x00 ; '.'
000000000020f1d7         db  0x00 ; '.'
000000000020f1d8         db  0x00 ; '.'
000000000020f1d9         db  0x00 ; '.'
000000000020f1da         db  0x00 ; '.'
000000000020f1db         db  0x00 ; '.'
000000000020f1dc         db  0x00 ; '.'
000000000020f1dd         db  0x00 ; '.'
000000000020f1de         db  0x00 ; '.'
000000000020f1df         db  0x00 ; '.'
000000000020f1e0         db  0x00 ; '.'
000000000020f1e1         db  0x00 ; '.'
000000000020f1e2         db  0x00 ; '.'
000000000020f1e3         db  0x00 ; '.'
000000000020f1e4         db  0x00 ; '.'
000000000020f1e5         db  0x00 ; '.'
000000000020f1e6         db  0x00 ; '.'
000000000020f1e7         db  0x00 ; '.'
000000000020f1e8         db  0x00 ; '.'
000000000020f1e9         db  0x00 ; '.'
000000000020f1ea         db  0x00 ; '.'
000000000020f1eb         db  0x00 ; '.'
000000000020f1ec         db  0x00 ; '.'
000000000020f1ed         db  0x00 ; '.'
000000000020f1ee         db  0x00 ; '.'
000000000020f1ef         db  0x00 ; '.'
000000000020f1f0         db  0x00 ; '.'
000000000020f1f1         db  0x00 ; '.'
000000000020f1f2         db  0x00 ; '.'
000000000020f1f3         db  0x00 ; '.'
000000000020f1f4         db  0x00 ; '.'
000000000020f1f5         db  0x00 ; '.'
000000000020f1f6         db  0x00 ; '.'
000000000020f1f7         db  0x00 ; '.'
000000000020f1f8         db  0x00 ; '.'
000000000020f1f9         db  0x00 ; '.'
000000000020f1fa         db  0x00 ; '.'
000000000020f1fb         db  0x00 ; '.'
000000000020f1fc         db  0x00 ; '.'
000000000020f1fd         db  0x00 ; '.'
000000000020f1fe         db  0x00 ; '.'
000000000020f1ff         db  0x00 ; '.'
000000000020f200         db  0x00 ; '.'
000000000020f201         db  0x00 ; '.'
000000000020f202         db  0x00 ; '.'
000000000020f203         db  0x00 ; '.'
000000000020f204         db  0x00 ; '.'
000000000020f205         db  0x00 ; '.'
000000000020f206         db  0x00 ; '.'
000000000020f207         db  0x00 ; '.'
000000000020f208         db  0x00 ; '.'
000000000020f209         db  0x00 ; '.'
000000000020f20a         db  0x00 ; '.'
000000000020f20b         db  0x00 ; '.'
000000000020f20c         db  0x00 ; '.'
000000000020f20d         db  0x00 ; '.'
000000000020f20e         db  0x00 ; '.'
000000000020f20f         db  0x00 ; '.'
000000000020f210         db  0x00 ; '.'
000000000020f211         db  0x00 ; '.'
000000000020f212         db  0x00 ; '.'
000000000020f213         db  0x00 ; '.'
000000000020f214         db  0x00 ; '.'
000000000020f215         db  0x00 ; '.'
000000000020f216         db  0x00 ; '.'
000000000020f217         db  0x00 ; '.'
000000000020f218         db  0x00 ; '.'
000000000020f219         db  0x00 ; '.'
000000000020f21a         db  0x00 ; '.'
000000000020f21b         db  0x00 ; '.'
000000000020f21c         db  0x00 ; '.'
000000000020f21d         db  0x00 ; '.'
000000000020f21e         db  0x00 ; '.'
000000000020f21f         db  0x00 ; '.'
                     default_quoting_options:
000000000020f220         db  0x00 ; '.'                                         ; DATA XREF=clone_quoting_options+18, get_quoting_style, set_quoting_style, set_char_quoting, set_quoting_flags, set_custom_quoting, quotearg_buffer+4, quotearg_alloc_mem+4, quotearg_n, quotearg_n_mem, quotearg
000000000020f221         db  0x00 ; '.'
000000000020f222         db  0x00 ; '.'
000000000020f223         db  0x00 ; '.'
000000000020f224         db  0x00 ; '.'
000000000020f225         db  0x00 ; '.'
000000000020f226         db  0x00 ; '.'
000000000020f227         db  0x00 ; '.'
000000000020f228         db  0x00 ; '.'
000000000020f229         db  0x00 ; '.'
000000000020f22a         db  0x00 ; '.'
000000000020f22b         db  0x00 ; '.'
000000000020f22c         db  0x00 ; '.'
000000000020f22d         db  0x00 ; '.'
000000000020f22e         db  0x00 ; '.'
000000000020f22f         db  0x00 ; '.'
000000000020f230         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+65, quotearg_n_custom_mem+57
000000000020f231         db  0x00 ; '.'
000000000020f232         db  0x00 ; '.'
000000000020f233         db  0x00 ; '.'
000000000020f234         db  0x00 ; '.'
000000000020f235         db  0x00 ; '.'
000000000020f236         db  0x00 ; '.'
000000000020f237         db  0x00 ; '.'
000000000020f238         db  0x00 ; '.'
000000000020f239         db  0x00 ; '.'
000000000020f23a         db  0x00 ; '.'
000000000020f23b         db  0x00 ; '.'
000000000020f23c         db  0x00 ; '.'
000000000020f23d         db  0x00 ; '.'
000000000020f23e         db  0x00 ; '.'
000000000020f23f         db  0x00 ; '.'
000000000020f240         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+78, quotearg_n_custom_mem+70
000000000020f241         db  0x00 ; '.'
000000000020f242         db  0x00 ; '.'
000000000020f243         db  0x00 ; '.'
000000000020f244         db  0x00 ; '.'
000000000020f245         db  0x00 ; '.'
000000000020f246         db  0x00 ; '.'
000000000020f247         db  0x00 ; '.'
000000000020f248         db  0x00 ; '.'
000000000020f249         db  0x00 ; '.'
000000000020f24a         db  0x00 ; '.'
000000000020f24b         db  0x00 ; '.'
000000000020f24c         db  0x00 ; '.'
000000000020f24d         db  0x00 ; '.'
000000000020f24e         db  0x00 ; '.'
000000000020f24f         db  0x00 ; '.'
                     qword_20f250:
000000000020f250         db  0x00 ; '.'                                         ; DATA XREF=quotearg_char_mem+22, quotearg_n_custom_mem+7
000000000020f251         db  0x00 ; '.'
000000000020f252         db  0x00 ; '.'
000000000020f253         db  0x00 ; '.'
000000000020f254         db  0x00 ; '.'
000000000020f255         db  0x00 ; '.'
000000000020f256         db  0x00 ; '.'
000000000020f257         db  0x00 ; '.'
                     can_write.3065:
000000000020f258         db  0x00 ; '.'                                         ; DATA XREF=can_write_any_file+9, can_write_any_file+45
                     initialized.3064:
000000000020f259         db  0x00 ; '.'                                         ; DATA XREF=can_write_any_file, can_write_any_file+35
000000000020f25a         db  0x00 ; '.'
000000000020f25b         db  0x00 ; '.'
                     have_dupfd_cloexec.3326:
000000000020f25c         db  0x00 ; '.'                                         ; DATA XREF=rpl_fcntl+94, rpl_fcntl+143, rpl_fcntl+438, rpl_fcntl+574
000000000020f25d         db  0x00 ; '.'
000000000020f25e         db  0x00 ; '.'
000000000020f25f         db  0x00 ; '.'


        ; Segment External Symbols
        ; Range: [0x20f270; 0x20f6e0[ (1136 bytes)
        ; No data on disk
        ; Permissions:  - 



        ; Section External Symbols Section
        ; Range: [0x20f270; 0x41e950[ (2160352 bytes)
        ; No data on disk

                             ; External Symbols Segment
                     free:
000000000020f270         extern function code
                     abort:
000000000020f278         extern function code                                   ; DATA XREF=abort@GOT
                     __errno_location:
000000000020f280         extern function code                                   ; DATA XREF=__errno_location@GOT
                     strncmp:
000000000020f288         extern function code                                   ; DATA XREF=strncmp@GOT
                     _ITM_deregisterTMCloneTable:
000000000020f290         extern function code
                     _exit:
000000000020f298         extern function code                                   ; DATA XREF=_exit@GOT
                     __fpending:
000000000020f2a0         extern function code                                   ; DATA XREF=__fpending@GOT
                     unlinkat:
000000000020f2a8         extern function code                                   ; DATA XREF=unlinkat@GOT
                     qsort:
000000000020f2b0         extern function code                                   ; DATA XREF=qsort@GOT
                     isatty:
000000000020f2b8         extern function code                                   ; DATA XREF=isatty@GOT
                     faccessat:
000000000020f2c0         extern function code                                   ; DATA XREF=faccessat@GOT
                     fcntl:
000000000020f2c8         extern function code                                   ; DATA XREF=fcntl@GOT
                     textdomain:
000000000020f2d0         extern function code                                   ; DATA XREF=textdomain@GOT
                     fclose:
000000000020f2d8         extern function code                                   ; DATA XREF=fclose@GOT
                     bindtextdomain:
000000000020f2e0         extern function code                                   ; DATA XREF=bindtextdomain@GOT
                     dcgettext:
000000000020f2e8         extern function code                                   ; DATA XREF=dcgettext@GOT
                     __ctype_get_mb_cur_max:
000000000020f2f0         extern function code                                   ; DATA XREF=__ctype_get_mb_cur_max@GOT
                     strlen:
000000000020f2f8         extern function code                                   ; DATA XREF=strlen@GOT
                     __lxstat:
000000000020f300         extern function code                                   ; DATA XREF=__lxstat@GOT
                     openat:
000000000020f308         extern function code                                   ; DATA XREF=openat@GOT
                     __stack_chk_fail:
000000000020f310         extern function code                                   ; DATA XREF=__stack_chk_fail@GOT
                     getopt_long:
000000000020f318         extern function code                                   ; DATA XREF=getopt_long@GOT
                     mbrtowc:
000000000020f320         extern function code                                   ; DATA XREF=mbrtowc@GOT
                     __fxstatat:
000000000020f328         extern function code                                   ; DATA XREF=__fxstatat@GOT
                     __overflow:
000000000020f330         extern function code                                   ; DATA XREF=__overflow@GOT
                     strrchr:
000000000020f338         extern function code                                   ; DATA XREF=strrchr@GOT
                     lseek:
000000000020f340         extern function code                                   ; DATA XREF=lseek@GOT
                     __assert_fail:
000000000020f348         extern function code                                   ; DATA XREF=__assert_fail@GOT
                     memset:
000000000020f350         extern function code                                   ; DATA XREF=memset@GOT
                     geteuid:
000000000020f358         extern function code                                   ; DATA XREF=geteuid@GOT
                     close:
000000000020f360         extern function code                                   ; DATA XREF=close@GOT
                     closedir:
000000000020f368         extern function code                                   ; DATA XREF=closedir@GOT
                     __libc_start_main:
000000000020f370         extern function code
                     memcmp:
000000000020f378         extern function code                                   ; DATA XREF=memcmp@GOT
                     fputs_unlocked:
000000000020f380         extern function code                                   ; DATA XREF=fputs_unlocked@GOT
                     calloc:
000000000020f388         extern function code                                   ; DATA XREF=calloc@GOT
                     __getdelim:
000000000020f390         extern function code                                   ; DATA XREF=__getdelim@GOT
                     strcmp:
000000000020f398         extern function code                                   ; DATA XREF=strcmp@GOT
                     dirfd:
000000000020f3a0         extern function code                                   ; DATA XREF=dirfd@GOT
                     rpmatch:
000000000020f3a8         extern function code                                   ; DATA XREF=rpmatch@GOT
                     __gmon_start__:
000000000020f3b0         extern function code
                     memcpy:
000000000020f3b8         extern function code                                   ; DATA XREF=memcpy@GOT
                     fileno:
000000000020f3c0         extern function code                                   ; DATA XREF=fileno@GOT
                     __xstat:
000000000020f3c8         extern function code                                   ; DATA XREF=__xstat@GOT
                     readdir:
000000000020f3d0         extern function code                                   ; DATA XREF=readdir@GOT
                     malloc:
000000000020f3d8         extern function code                                   ; DATA XREF=malloc@GOT
                     fflush:
000000000020f3e0         extern function code                                   ; DATA XREF=fflush@GOT
                     nl_langinfo:
000000000020f3e8         extern function code                                   ; DATA XREF=nl_langinfo@GOT
                     __fxstat:
000000000020f3f0         extern function code                                   ; DATA XREF=__fxstat@GOT
                     __freading:
000000000020f3f8         extern function code                                   ; DATA XREF=__freading@GOT
                     fchdir:
000000000020f400         extern function code                                   ; DATA XREF=fchdir@GOT
                     realloc:
000000000020f408         extern function code                                   ; DATA XREF=realloc@GOT
                     setlocale:
000000000020f410         extern function code                                   ; DATA XREF=setlocale@GOT
                     __printf_chk:
000000000020f418         extern function code                                   ; DATA XREF=__printf_chk@GOT
                     mempcpy:
000000000020f420         extern function code                                   ; DATA XREF=mempcpy@GOT
                     memmove:
000000000020f428         extern function code                                   ; DATA XREF=memmove@GOT
                     error:
000000000020f430         extern function code                                   ; DATA XREF=error@GOT
                     open:
000000000020f438         extern function code                                   ; DATA XREF=open@GOT
                     fseeko:
000000000020f440         extern function code                                   ; DATA XREF=fseeko@GOT
                     dcngettext:
000000000020f448         extern function code                                   ; DATA XREF=dcngettext@GOT
                     fdopendir:
000000000020f450         extern function code                                   ; DATA XREF=fdopendir@GOT
                     fstatfs:
000000000020f458         extern function code                                   ; DATA XREF=fstatfs@GOT
                     __cxa_atexit:
000000000020f460         extern function code                                   ; DATA XREF=__cxa_atexit@GOT
                     exit:
000000000020f468         extern function code                                   ; DATA XREF=exit@GOT
                     fwrite:
000000000020f470         extern function code                                   ; DATA XREF=fwrite@GOT
                     __fprintf_chk:
000000000020f478         extern function code                                   ; DATA XREF=__fprintf_chk@GOT
                     _ITM_registerTMCloneTable:
000000000020f480         extern function code
                     mbsinit:
000000000020f488         extern function code                                   ; DATA XREF=mbsinit@GOT
                     iswprint:
000000000020f490         extern function code                                   ; DATA XREF=iswprint@GOT
                     __cxa_finalize:
000000000020f498         extern function code
                     __ctype_b_loc:
000000000020f4a0         extern function code                                   ; DATA XREF=__ctype_b_loc@GOT
                     free@@GLIBC_2.2.5:
000000000020f4a8         extern function code
                     abort@@GLIBC_2.2.5:
000000000020f4b0         extern function code
                     __errno_location@@GLIBC_2.2.5:
000000000020f4b8         extern function code
                     strncmp@@GLIBC_2.2.5:
000000000020f4c0         extern function code
                     _ITM_deregisterTMCloneTable_20f4c8:        // _ITM_deregisterTMCloneTable
000000000020f4c8         extern function code
                     _exit@@GLIBC_2.2.5:
000000000020f4d0         extern function code
                     __fpending@@GLIBC_2.2.5:
000000000020f4d8         extern function code
                     unlinkat@@GLIBC_2.4:
000000000020f4e0         extern function code
                     qsort@@GLIBC_2.2.5:
000000000020f4e8         extern function code
                     isatty@@GLIBC_2.2.5:
000000000020f4f0         extern function code
                     faccessat@@GLIBC_2.4:
000000000020f4f8         extern function code
                     fcntl@@GLIBC_2.2.5:
000000000020f500         extern function code
                     textdomain@@GLIBC_2.2.5:
000000000020f508         extern function code
                     fclose@@GLIBC_2.2.5:
000000000020f510         extern function code
                     bindtextdomain@@GLIBC_2.2.5:
000000000020f518         extern function code
                     dcgettext@@GLIBC_2.2.5:
000000000020f520         extern function code
                     __ctype_get_mb_cur_max@@GLIBC_2.2.5:
000000000020f528         extern function code
                     strlen@@GLIBC_2.2.5:
000000000020f530         extern function code
                     __lxstat@@GLIBC_2.2.5:
000000000020f538         extern function code
                     openat@@GLIBC_2.4:
000000000020f540         extern function code
                     __stack_chk_fail@@GLIBC_2.4:
000000000020f548         extern function code
                     getopt_long@@GLIBC_2.2.5:
000000000020f550         extern function code
                     mbrtowc@@GLIBC_2.2.5:
000000000020f558         extern function code
                     __fxstatat@@GLIBC_2.4:
000000000020f560         extern function code
                     __overflow@@GLIBC_2.2.5:
000000000020f568         extern function code
                     strrchr@@GLIBC_2.2.5:
000000000020f570         extern function code
                     lseek@@GLIBC_2.2.5:
000000000020f578         extern function code
                     __assert_fail@@GLIBC_2.2.5:
000000000020f580         extern function code
                     memset@@GLIBC_2.2.5:
000000000020f588         extern function code
                     geteuid@@GLIBC_2.2.5:
000000000020f590         extern function code
                     close@@GLIBC_2.2.5:
000000000020f598         extern function code
                     closedir@@GLIBC_2.2.5:
000000000020f5a0         extern function code
                     __libc_start_main@@GLIBC_2.2.5:
000000000020f5a8         extern function code
                     memcmp@@GLIBC_2.2.5:
000000000020f5b0         extern function code
                     fputs_unlocked@@GLIBC_2.2.5:
000000000020f5b8         extern function code
                     calloc@@GLIBC_2.2.5:
000000000020f5c0         extern function code
                     __getdelim@@GLIBC_2.2.5:
000000000020f5c8         extern function code
                     strcmp@@GLIBC_2.2.5:
000000000020f5d0         extern function code
                     dirfd@@GLIBC_2.2.5:
000000000020f5d8         extern function code
                     rpmatch@@GLIBC_2.2.5:
000000000020f5e0         extern function code
                     __gmon_start___20f5e8:        // __gmon_start__
000000000020f5e8         extern function code
                     memcpy@@GLIBC_2.14:
000000000020f5f0         extern function code
                     fileno@@GLIBC_2.2.5:
000000000020f5f8         extern function code
                     __xstat@@GLIBC_2.2.5:
000000000020f600         extern function code
                     readdir@@GLIBC_2.2.5:
000000000020f608         extern function code
                     malloc@@GLIBC_2.2.5:
000000000020f610         extern function code
                     fflush@@GLIBC_2.2.5:
000000000020f618         extern function code
                     nl_langinfo@@GLIBC_2.2.5:
000000000020f620         extern function code
                     __fxstat@@GLIBC_2.2.5:
000000000020f628         extern function code
                     __freading@@GLIBC_2.2.5:
000000000020f630         extern function code
                     fchdir@@GLIBC_2.2.5:
000000000020f638         extern function code
                     realloc@@GLIBC_2.2.5:
000000000020f640         extern function code
                     setlocale@@GLIBC_2.2.5:
000000000020f648         extern function code
                     __printf_chk@@GLIBC_2.3.4:
000000000020f650         extern function code
                     mempcpy@@GLIBC_2.2.5:
000000000020f658         extern function code
                     memmove@@GLIBC_2.2.5:
000000000020f660         extern function code
                     error@@GLIBC_2.2.5:
000000000020f668         extern function code
                     open@@GLIBC_2.2.5:
000000000020f670         extern function code
                     fseeko@@GLIBC_2.2.5:
000000000020f678         extern function code
                     dcngettext@@GLIBC_2.2.5:
000000000020f680         extern function code
                     fdopendir@@GLIBC_2.4:
000000000020f688         extern function code
                     fstatfs@@GLIBC_2.2.5:
000000000020f690         extern function code
                     __cxa_atexit@@GLIBC_2.2.5:
000000000020f698         extern function code
                     exit@@GLIBC_2.2.5:
000000000020f6a0         extern function code
                     fwrite@@GLIBC_2.2.5:
000000000020f6a8         extern function code
                     __fprintf_chk@@GLIBC_2.3.4:
000000000020f6b0         extern function code
                     _ITM_registerTMCloneTable_20f6b8:        // _ITM_registerTMCloneTable
000000000020f6b8         extern function code
                     mbsinit@@GLIBC_2.2.5:
000000000020f6c0         extern function code
                     iswprint@@GLIBC_2.2.5:
000000000020f6c8         extern function code
                     __cxa_finalize@@GLIBC_2.2.5:
000000000020f6d0         extern function code
                     __ctype_b_loc@@GLIBC_2.3:
000000000020f6d8         extern function code
